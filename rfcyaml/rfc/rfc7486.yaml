- title: __initial_text__
  contents:
  - '                HTTP Origin-Bound Authentication (HOBA)

    '
- title: Abstract
  contents:
  - "Abstract\n   HTTP Origin-Bound Authentication (HOBA) is a digital-signature-based\n\
    \   design for an HTTP authentication method.  The design can also be\n   used\
    \ in JavaScript-based authentication embedded in HTML.  HOBA is an\n   alternative\
    \ to HTTP authentication schemes that require passwords and\n   therefore avoids\
    \ all problems related to passwords, such as leakage\n   of server-side password\
    \ databases.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7486.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Interfacing to Applications (Cookies) . . . . . .\
    \ . . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     1.3.  Step-by-Step Overview of HOBA-http  . . . . . . . . .\
    \ . .   6\n   2.  The HOBA Authentication Scheme  . . . . . . . . . . . . . .\
    \ .   6\n   3.  Introduction to the HOBA-http Mechanism . . . . . . . . . . .\
    \   9\n   4.  Introduction to the HOBA-js Mechanism . . . . . . . . . . . .  10\n\
    \   5.  HOBA's Authentication Process . . . . . . . . . . . . . . . .  11\n  \
    \   5.1.  CPK Preparation Phase . . . . . . . . . . . . . . . . . .  11\n    \
    \ 5.2.  Signing Phase . . . . . . . . . . . . . . . . . . . . . .  11\n     5.3.\
    \  Authentication Phase  . . . . . . . . . . . . . . . . . .  11\n   6.  Other\
    \ Parts of the HOBA Process . . . . . . . . . . . . . . .  12\n     6.1.  Registration\
    \  . . . . . . . . . . . . . . . . . . . . . .  13\n       6.1.1.  Hobareg Definition\
    \  . . . . . . . . . . . . . . . . .  14\n     6.2.  Associating Additional Keys\
    \ to an Existing Account  . . .  16\n       6.2.1.  Moving Private Keys . . .\
    \ . . . . . . . . . . . . . .  16\n       6.2.2.  Human-Memorable One-Time Password\
    \ (Don't Do This One)  16\n       6.2.3.  Out-of-Band URL . . . . . . . . . .\
    \ . . . . . . . . .  17\n     6.3.  Logging Out . . . . . . . . . . . . . . .\
    \ . . . . . . . .  17\n     6.4.  Getting a Fresh Challenge . . . . . . . . .\
    \ . . . . . . .  17\n   7.  Mandatory-to-Implement Algorithms . . . . . . . .\
    \ . . . . . .  18\n   8.  Security Considerations . . . . . . . . . . . . . .\
    \ . . . . .  18\n     8.1.  Privacy Considerations  . . . . . . . . . . . . .\
    \ . . . .  18\n     8.2.  localStorage Security for JavaScript  . . . . . . .\
    \ . . .  19\n     8.3.  Multiple Accounts on One User Agent . . . . . . . . .\
    \ . .  20\n     8.4.  Injective Mapping for HOBA-TBS  . . . . . . . . . . . .\
    \ .  20\n   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \  21\n     9.1.  HOBA Authentication Scheme  . . . . . . . . . . . . . . .  21\n\
    \     9.2.  .well-known URI . . . . . . . . . . . . . . . . . . . . .  21\n  \
    \   9.3.  Algorithm Names . . . . . . . . . . . . . . . . . . . . .  21\n    \
    \ 9.4.  Key Identifier Types  . . . . . . . . . . . . . . . . . .  22\n     9.5.\
    \  Device Identifier Types . . . . . . . . . . . . . . . . .  22\n     9.6.  Hobareg\
    \ HTTP Header Field . . . . . . . . . . . . . . . .  23\n   10. References  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  23\n     10.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  23\n     10.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  24\n   Appendix A.  Problems with Passwords\
    \  . . . . . . . . . . . . . .  26\n   Appendix B.  Example  . . . . . . . . .\
    \ . . . . . . . . . . . . .  27\n   Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  28\n   Authors' Addresses  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP Origin-Bound Authentication (HOBA) is an authentication\
    \ design\n   that can be used as an HTTP authentication scheme [RFC7235] and for\n\
    \   JavaScript-based authentication embedded in HTML.  The main goal of\n   HOBA\
    \ is to offer an easy-to-implement authentication scheme that is\n   not based\
    \ on passwords but that can easily replace HTTP or HTML\n   forms-based password\
    \ authentication.  Deployment of HOBA can reduce\n   or eliminate password entries\
    \ in databases, with potentially\n   significant security benefits.\n   HOBA is\
    \ an HTTP authentication mechanism that complies with the\n   framework for such\
    \ schemes [RFC7235].  As a JavaScript design, HOBA\n   demonstrates a way for\
    \ clients and servers to interact using the same\n   credentials that are used\
    \ by the HTTP authentication scheme.\n   Current username/password authentication\
    \ methods such as HTTP Basic,\n   HTTP Digest, and web forms have been in use\
    \ for many years but are\n   susceptible to theft of server-side password databases.\
    \  Instead of\n   passwords, HOBA uses digital signatures in a challenge-response\n\
    \   scheme as its authentication mechanism.  HOBA also adds useful\n   features\
    \ such as credential management and session logout.  In HOBA,\n   the client creates\
    \ a new public-private key pair for each host (\"web\n   origin\" [RFC6454]) to\
    \ which it authenticates.  These keys are used in\n   HOBA for HTTP clients to\
    \ authenticate themselves to servers in the\n   HTTP protocol or in a JavaScript\
    \ authentication program.\n   HOBA session management is identical to username/password\
    \ session\n   management, with a server-side session management tool or script\n\
    \   inserting a session cookie [RFC6265] into the output to the browser.\n   Use\
    \ of Transport Layer Security (TLS) for the HTTP session is still\n   necessary\
    \ to prevent session cookie hijacking.\n   HOBA keys are \"bare keys\", so there\
    \ is no need for the semantic\n   overhead of X.509 public key certificates, particularly\
    \ with respect\n   to naming and trust anchors.  The Client Public Key (CPK) structures\n\
    \   in HOBA do not have any publicly visible identifier for the user who\n   possesses\
    \ the corresponding private key, nor the web origin with\n   which the client\
    \ is using the CPK.\n   HOBA also defines some services that are needed for modern\
    \ HTTP\n   authentication:\n   o  Servers can bind a CPK with an identifier, such\
    \ as an account\n      name.  Servers using HOBA define their own policies for\
    \ binding\n      CPKs with accounts during account registration.\n   o  Users\
    \ are likely to use more than one device or User Agent (UA)\n      for the same\
    \ HTTP-based service, so HOBA gives a way to associate\n      more than one CPK\
    \ to the same account without having to register\n      for each separately.\n\
    \   o  Logout features can be useful for UAs, so HOBA defines a way to\n     \
    \ close a current HTTP \"session\".\n   o  Digital signatures can be expensive\
    \ to compute, so HOBA defines a\n      way for HTTP servers to indicate how long\
    \ a given challenge value\n      is valid, and a way for UAs to fetch a fresh\
    \ challenge at any\n      time.\n   Users are also likely to lose a private key,\
    \ or the client's memory\n   of which key pair is associated with which origin,\
    \ such as when a\n   user loses the computer or mobile device in which state is\
    \ stored.\n   HOBA does not define a mechanism for deleting the association between\n\
    \   an existing CPK and an account.  Such a mechanism can be implemented\n   at\
    \ the application layer.\n   The HOBA scheme is far from new; for example, the\
    \ basic idea is\n   pretty much identical to the first two messages from \"Mechanism\
    \ R\" on\n   page 6 of [MI93], which predates HOBA by 20 years.\n"
- title: 1.1.  Interfacing to Applications (Cookies)
  contents:
  - "1.1.  Interfacing to Applications (Cookies)\n   HOBA can be used as a drop-in\
    \ replacement for password-based user\n   authentication schemes used in common\
    \ web applications.  The simplest\n   way is to (re)direct the UA to a HOBA \"\
    Login\" URL and for the\n   response to a successful HTTP request containing a\
    \ HOBA signature to\n   set a session cookie [RFC6265].  Further interactions\
    \ with the web\n   application will then be secured via the session cookie, as\
    \ is\n   commonly done today.\n   While cookies are bearer tokens, and thus weaker\
    \ than HOBA\n   signatures, they are currently ubiquitously used.  If non-bearer\n\
    \   token session continuation schemes are developed in the future in the\n  \
    \ IETF or elsewhere, then those can interface to HOBA as easily as with\n   any\
    \ password-based authentication scheme.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [RFC2119].\n   This specification uses the Augmented\
    \ Backus-Naur Form (ABNF)\n   notation of [RFC5234].\n   Account: The term \"\
    account\" is (loosely) used to refer to whatever\n   data structure(s) the server\
    \ maintains that are associated with an\n   identity.  That will contain at least\
    \ one CPK and a web origin; it\n   will also optionally include an HTTP \"realm\"\
    \ as defined in the HTTP\n   authentication specification [RFC7235].  It might\
    \ also involve many\n   other non-standard pieces of data that the server accumulates\
    \ as part\n   of account creation processes.  An account may have many CPKs that\n\
    \   are considered equivalent in terms of being usable for\n   authentication,\
    \ but the meaning of \"equivalent\" is really up to the\n   server and is not\
    \ defined here.\n   Client public key (CPK): A CPK is the public key and associated\n\
    \   cryptographic parameters needed for a server to validate a signature.\n  \
    \ HOBA-http: We use this term when describing something that is\n   specific to\
    \ HOBA as an HTTP authentication mechanism.\n   HOBA-js: We use this term when\
    \ describing something that is unrelated\n   to HOBA-http but is relevant for\
    \ HOBA as a design pattern that can be\n   implemented in a browser in JavaScript.\n\
    \   User agent (UA): typically, but not always, a web browser.\n   User: a person\
    \ who is running a UA.  In this document, \"user\" does\n   not mean \"user name\"\
    \ or \"account name\".\n   Web client: the content and JavaScript code that run\
    \ within the\n   context of a single UA instance (such as a tab in a web browser).\n"
- title: 1.3.  Step-by-Step Overview of HOBA-http
  contents:
  - "1.3.  Step-by-Step Overview of HOBA-http\n   Step-by-step, a typical HOBA-http\
    \ registration and authentication\n   flow might look like this:\n   1.  The client\
    \ connects to the server and makes a request, and the\n       server's response\
    \ includes a WWW-Authenticate header field that\n       contains the \"HOBA\"\
    \ auth-scheme, along with associated parameters\n       (see Section 3).\n   2.\
    \  If the client was not already registered with the web origin and\n       realm\
    \ it is trying to access, the \"joining\" process is invoked\n       (see Section\
    \ 6.1).  This creates a key pair and makes the CPK\n       known to the server\
    \ so that the server can carry out the account\n       creation processes required.\n\
    \   3.  The client uses the challenge from the HOBA auth-scheme\n       parameters,\
    \ along with other information it knows about the web\n       origin and realm,\
    \ to create and sign a HOBA to-be-signed (HOBA-\n       TBS) string (see Section\
    \ 2).\n   4.  The client creates a HOBA client-result (HOBA-RES), using the\n\
    \       signed HOBA-TBS for the \"sig\" value (see Section 2).\n   5.  The client\
    \ includes the Authorization header field in its next\n       request, using the\
    \ \"HOBA\" auth-scheme and putting the HOBA\n       client-result in an auth-param\
    \ named \"result\" (see Section 3).\n   6.  The server authenticates the HOBA\
    \ client-result (see\n       Section 5.1).\n   7.  Typically, the server's response\
    \ includes a session cookie that\n       allows the client to indicate its authentication\
    \ state in future\n       requests (see Section 1.1).\n"
- title: 2.  The HOBA Authentication Scheme
  contents:
  - "2.  The HOBA Authentication Scheme\n   A UA that implements HOBA maintains a\
    \ list of web origins and realms.\n   The UA also maintains one or more client\
    \ credentials for each web\n   origin/realm combination for which it has created\
    \ a CPK.\n   On receipt of a challenge (and optional realm) from a server, the\n\
    \   client marshals a HOBA-TBS blob that includes a client generated\n   nonce,\
    \ the web origin, the realm, an identifier for the CPK, and the\n   challenge\
    \ string, and signs that blob with the private key\n   corresponding to the CPK\
    \ for that web origin.  The formatting chosen\n   for this TBS blob is chosen\
    \ so as to make server-side signature\n   verification as simple as possible for\
    \ a wide range of current server\n   tooling.\n   Figure 1 specifies the ABNF\
    \ for the signature input.  The term\n   \"unreserved\" means that the field does\
    \ not have a specific format\n   defined and allows the characters specified in\
    \ Section 2.3 of\n   [RFC3986].\n      HOBA-TBS = len \":\" nonce\n          \
    \    len \":\" alg\n              len \":\" origin\n              len \":\" [\
    \ realm  ]\n              len \":\" kid\n              len \":\" challenge\n \
    \     len = 1*DIGIT\n      nonce = 1*base64urlchars\n      alg = 1*2DIGIT\n  \
    \    origin = scheme \"://\" authority \":\" port\n      ; scheme, etc., are from\
    \ RFC 3986\n      realm = unreserved\n      ; realm is to be treated as in Section\
    \ 2.2 of RFC 7235\n      kid = 1*base64urlchars\n      challenge = 1*base64urlchars\n\
    \      ; Characters for Base64URL encoding from Table 2 of RFC 4648\n      ; all\
    \ of which are US-ASCII (see RFC 20)\n      base64urlchars = %x30-39         \
    \    ; Digits\n                    / %x41-5A           ; Uppercase letters\n \
    \                   / %x61-7A           ; Lowercase letters\n                \
    \    / \"-\" / \"_\" / \"=\"   ; Special characters\n                   Figure\
    \ 1: To-Be-Signed Data for HOBA\n   The fields above contain the following:\n\
    \   o  len: Each field is preceded by the number of octets of the\n      following\
    \ field, expressed as a decimal number in ASCII [RFC20].\n      Lengths are separated\
    \ from field values by a colon character.  So\n      if a nonce with the value\
    \ \"ABCD\" were used, then that would be\n      preceeded by \"4:\" (see the example\
    \ in Appendix B for details).\n   o  nonce: a random value chosen by the UA and\
    \ MUST be base64url\n      encoded before being included in the HOBA-TBS value.\
    \ (base64url\n      encoding is defined in [RFC4648]; guidelines for randomness\
    \ are\n      given in [RFC4086].)  UAs MUST be able to use at least 32 bits of\n\
    \      randomness in generating a nonce.  UAs SHOULD be able to use 64 or\n  \
    \    more bits of randomness for nonces.\n   o  alg: specifies the signature algorithm\
    \ being used.  See Section 7\n      for details of algorithm support requirements.\
    \  The IANA-\n      registered algorithm values (see Section 9.3) are encoded\
    \ as one-\n      or two-digit ASCII numbers.  For example, RSA-SHA256 (number\
    \ 0) is\n      encoded as the ASCII character \"0\" (0x30), while a future\n \
    \     algorithm registered as number 17 would be encoded as the ASCII\n      characters\
    \ \"17\" (0x3137).\n   o  origin: the web origin expressed as the concatenation\
    \ of the\n      scheme, authority, and port from [RFC3986].  These are not base64\n\
    \      encoded, as they will be most readily available to the server in\n    \
    \  plain text.  For example, if accessing the URL\n      \"https://www.example.com:8080/foo\"\
    , then the bytes input to the\n      signature process will be \"https://www.example.com:8080\"\
    .  There\n      is no default for the port number, and the port number MUST be\n\
    \      present.\n   o  realm: a string with the syntactic restrictions defined\
    \ in\n      [RFC7235].  If no realm is specified for this authentication, then\n\
    \      this is absent but is preceeded by a length of zero (\"0:\").\n      Recall\
    \ that both sides know when this needs to be there,\n      independent of the\
    \ encoding via a zero length.\n   o  kid: a key identifier.  This MUST be a base64url-encoded\
    \ value\n      that is presented to the server in the HOBA client result (see\n\
    \      below).\n   o  challenge: MUST be a base64url-encoded challenge value that\
    \ the\n      server chose to send to the client.  The challenge MUST be chosen\n\
    \      so that it is infeasible to guess and SHOULD be indistinguishable\n   \
    \   from (the base64url encoding of) a random string that is at least\n      128\
    \ bits long.\n   The HOBA-TBS string is the input to the client's signing process\
    \ but\n   is not itself sent over the network since some fields are already\n\
    \   inherent in the HTTP exchange.  The challenge, however, is sent over\n   the\
    \ network so as to reduce the amount of state that needs to be\n   maintained\
    \ by servers.  (One form of stateless challenge might be a\n   ciphertext that\
    \ the server decrypts and checks, but that is an\n   implementation detail.) \
    \ The value that is sent over the network by\n   the UA is the HOBA \"client result\"\
    , which we now define.\n   The HOBA \"client result\" is a dot-separated string\
    \ that includes the\n   signature and is sent in the HTTP Authorization header\
    \ field value\n   using the value syntax defined in Figure 2.  The \"sig\" value\
    \ is the\n   base64url-encoded version of the binary output of the signing\n \
    \  process.  The kid, challenge, and nonce are as defined above and are\n   also\
    \ base64url encoded.\n      HOBA-RES = kid \".\" challenge \".\" nonce \".\" sig\n\
    \      sig = 1*base64urlchars\n                    Figure 2: HOBA Client Result\
    \ Value\n   If a malformed message of any kind is received by a server, the\n\
    \   server MUST fail authentication.  If a malformed message of any kind\n   is\
    \ received by a client, the client MUST abandon that authentication\n   attempt.\
    \  (The client is, of course, free to start another\n   authentication attempt\
    \ if it desires.)\n"
- title: 3.  Introduction to the HOBA-http Mechanism
  contents:
  - "3.  Introduction to the HOBA-http Mechanism\n   An HTTP server that supports\
    \ HOBA authentication includes the \"HOBA\"\n   auth-scheme value in a WWW-Authenticate\
    \ header field when it wants\n   the client to authenticate with HOBA.  Note that\
    \ the HOBA auth-scheme\n   might not be the only one that the server includes\
    \ in a WWW-\n   Authenticate header.\n   The HOBA scheme has two REQUIRED attributes\
    \ (challenge and max-age)\n   and one OPTIONAL attribute (realm):\n   o  The \"\
    challenge\" attribute MUST be included.  The challenge is the\n      string made\
    \ up of the base64url-encoded octets that the server\n      wants the client to\
    \ sign in its response.  The challenge MUST be\n      unique for every 401 HTTP\
    \ response in order to prevent replay\n      attacks from passive observers.\n\
    \   o  A \"max-age\" attribute MUST be included.  It specifies the number\n  \
    \    of seconds from the time the HTTP response is emitted for which\n      responses\
    \ to this challenge can be accepted; for example, \"max-\n      age: 10\" would\
    \ indicate ten seconds.  If max-age is set to zero,\n      then that means that\
    \ only one signature will be accepted for this\n      challenge.\n   o  A \"realm\"\
    \ attribute MAY be included to indicate the scope of\n      protection in the\
    \ manner described in HTTP/1.1, Authentication\n      [RFC7235].  The \"realm\"\
    \ attribute MUST NOT appear more than once.\n   When the \"client response\" is\
    \ created, the UA encodes the HOBA\n   client-result and returns that in the Authorization\
    \ header.  The\n   client-result is a string matching the HOBA-RES production\
    \ in\n   Figure 2 as an auth-param with the name \"result\".\n   The server MUST\
    \ check the cryptographic correctness of the signature\n   based on a public key\
    \ it knows for the kid in the signatures, and if\n   the server cannot do that,\
    \ or if the signature fails cryptographic\n   checks, then validation has failed.\
    \  The server can use any\n   additional mechanisms to validate the signature.\
    \  If the validation\n   fails, or if the server chooses to reject the signature\
    \ for any\n   reason whatsoever, the server fails the request with a 401\n   Unauthorized\
    \ HTTP response.\n   The server MUST check that the same web origin is used in\
    \ all of the\n   server's TLS server certificates, the URL being accessed, and\
    \ the\n   HOBA signature.  If any of those checks fail, the server treats the\n\
    \   signature as being cryptographically incorrect.\n   Note that a HOBA signature\
    \ is good for however long a non-zero max-\n   age parameter allows.  This means\
    \ that replay is possible within the\n   time window specified by the \"max-age\"\
    \ value chosen by the server.\n   Servers can attempt to detect any such replay\
    \ (via caching if they so\n   choose) and MAY react to such replays by responding\
    \ with a second (or\n   subsequent) 401 HTTP response containing a new challenge.\n\
    \   To optimize their use of challenges, UAs MAY prefetch a challenge\n   value,\
    \ for example, after (max-age)/2 seconds have elapsed, using the\n   \".well-known/hoba/getchal\"\
    \ scheme described later in this document.\n   This also allows for precalculation\
    \ of HOBA signatures, if that is\n   required in order to produce a responsive\
    \ user interface.\n"
- title: 4.  Introduction to the HOBA-js Mechanism
  contents:
  - "4.  Introduction to the HOBA-js Mechanism\n   Web sites using JavaScript can\
    \ also perform origin-bound\n   authentication without needing to involve the\
    \ HTTP layer and by\n   inference not needing HOBA-http support in browsers. \
    \ HOBA-js is not\n   an on-the-wire protocol like HOBA-http is; instead, it is\
    \ a design\n   pattern that can be realized completely in JavaScript served in\n\
    \   normal HTML pages.\n   One thing that is highly desirable for HOBA-js is WebCrypto\
    \ (see\n   <http://www.w3.org/TR/WebCryptoAPI>), which is (at the time of\n  \
    \ writing) starting to see deployment.  In lieu of WebCrypto,\n   JavaScript crypto\
    \ libraries can be employed with the known\n   deficiencies of their pseudo-random\
    \ number generators and the general\n   immaturity of those libraries.\n   Without\
    \ Webcrypto, one element is required for HOBA-js; localStorage\n   (see <http://www.w3.org/TR/webstorage/>)\
    \ from HTML5 can be used for\n   persistent key storage.  For example, an implementation\
    \ would store a\n   dictionary account identifier as well as public key and private\
    \ key\n   tuples in the origin's localStorage for subsequent authentication\n\
    \   requests.  How this information is actually stored in localStorage is\n  \
    \ an implementation detail.  This type of key storage relies on the\n   security\
    \ properties of the same-origin policy that localStorage\n   enforces.  See the\
    \ security considerations for discussion about\n   attacks on localStorage.  Note\
    \ that IndexedDB (see\n   <http://www.w3.org/TR/IndexedDB/>) is an alternative\
    \ to localStorage\n   that can also be used here and that is used by WebCrypto.\n\
    \   Because of JavaScript's same-origin policy, scripts from subdomains\n   do\
    \ not have access to the same localStorage that scripts in their\n   parent domains\
    \ do.  For larger or more complex sites, this could be\n   an issue that requires\
    \ enrollment into subdomains, which could be\n   difficult for users.  One way\
    \ to get around this is to use session\n   cookies because they can be used across\
    \ subdomains.  That is, with\n   HOBA-js, the user might log in using a single\
    \ well-known domain, and\n   then session cookies are used whilst the user navigates\
    \ around the\n   site.\n"
- title: 5.  HOBA's Authentication Process
  contents:
  - "5.  HOBA's Authentication Process\n   This section describes how clients and\
    \ servers use HOBA for\n   authentication.  The interaction between an HTTP client\
    \ and HTTP\n   server using HOBA happens in three phases: the CPK preparation\
    \ phase,\n   the signing phase, and the authentication phase.  This section also\n\
    \   covers the actions that give HOBA features similar to today's\n   password-based\
    \ schemes.\n"
- title: 5.1.  CPK Preparation Phase
  contents:
  - "5.1.  CPK Preparation Phase\n   In the CPK preparation phase, the client determines\
    \ if it already has\n   a CPK for the web origin with which it needs to authenticate.\
    \  If the\n   client has a CPK, the client will use it; if the client does not\
    \ have\n   a CPK, it generates one in anticipation of the server asking for one.\n"
- title: 5.2.  Signing Phase
  contents:
  - "5.2.  Signing Phase\n   In the signing phase, the client connects to the server,\
    \ the server\n   asks for HOBA-based authentication, and the client authenticates\
    \ by\n   signing a blob of information as described in the previous sections.\n"
- title: 5.3.  Authentication Phase
  contents:
  - "5.3.  Authentication Phase\n   The authentication phase is completely dependent\
    \ on the policies and\n   practices of the server.  That is, this phase involves\
    \ no\n   standardized protocol in HOBA-http; in HOBA-js, there is no suggested\n\
    \   interaction template.\n   In the authentication phase, the server uses the\
    \ key identifier (kid)\n   to determine the CPK from the signing phase and decides\
    \ if it\n   recognizes the CPK.  If the server recognizes the CPK, the server\
    \ may\n   finish the client authentication process.\n   If this stage of the process\
    \ involves additional information for\n   authentication, such as asking the user\
    \ which account she wants to\n   use (in the case where a UA is used for multiple\
    \ accounts on a site),\n   the server can prompt the user for account identifying\
    \ information,\n   or the user could choose based on HTML offered by the server\
    \ before\n   the 401 response is triggered.  None of this is standardized: it\
    \ all\n   follows the server's security policy and session flow.  At the end of\n\
    \   this, the server probably assigns or updates a session cookie for the\n  \
    \ client.\n   During the authentication phase, if the server cannot determine\
    \ the\n   correct CPK, it could use HTML and JavaScript to ask the user if they\n\
    \   are really a new user or want to associate this new CPK with another\n   CPK.\
    \  The server can then use some out-of-band method (such as a\n   confirmation\
    \ email round trip, SMS, or a UA that is already enrolled)\n   to verify that\
    \ the \"new\" user is the same as the already-enrolled\n   one.  Thus, logging\
    \ in on a new UA is identical to logging in with an\n   existing account.\n  \
    \ If the server does not recognize the CPK, the server might send the\n   client\
    \ through either a join or login-new-UA (see below) process.\n   This process\
    \ is completely up to the server and probably entails\n   using HTML and JavaScript\
    \ to ask the user some questions in order to\n   assess whether or not the server\
    \ wants to give the client an account.\n   Completion of the joining process might\
    \ require confirmation by\n   email, SMS, CAPTCHA, and so on.\n   Note that there\
    \ is no necessity for the server to initiate a joining\n   or login process upon\
    \ completion of the signing phase.  Indeed, the\n   server may desire to challenge\
    \ the UA even for unprotected resources\n   and set a session cookie for later\
    \ use in a join or login process as\n   it becomes necessary.  For example, a\
    \ server might only want to offer\n   an account to someone who had been to a\
    \ few pages on the web site; in\n   such a case, the server could use the CPK\
    \ from an associated session\n   cookie as a way of building reputation for the\
    \ user until the server\n   wants the user to join.\n"
- title: 6.  Other Parts of the HOBA Process
  contents:
  - "6.  Other Parts of the HOBA Process\n   The authentication process is more than\
    \ just the act of\n   authentication.  In password-based authentication and HOBA,\
    \ there are\n   other processes that are needed both before and after an\n   authentication\
    \ step.  This section covers those processes.  Where\n   possible, it combines\
    \ practices of HOBA-http and HOBA-js; where that\n   is not possible, the differences\
    \ are called out.\n   All HOBA interactions other than those defined in Section\
    \ 5 MUST be\n   performed in TLS-protected sessions [RFC5246].  If the current\
    \ HTTP\n   traffic is not running under TLS, a new session is started before any\n\
    \   of the actions described here are performed.\n   HOBA-http uses a well-known\
    \ URI [RFC5785] \"hoba\" as a base URI for\n   performing many tasks: \"https://www.example.com/.well-known/hoba\"\
    .\n   These URIs are based on the name of the host that the HTTP client is\n \
    \  accessing.\n   There are many use cases for these URLs to redirect to other\
    \ URLs: a\n   site that does registration through a federated site, a site that\n\
    \   only does registration under HTTPS, and so on.  Like any HTTP client,\n  \
    \ HOBA-http clients have to be able to handle redirection of these\n   requests.\
    \  However, as that would potentially cause security issues\n   when a re-direct\
    \ brings the client to a different web origin, servers\n   implementing HOBA-http\
    \ SHOULD NOT redirect to a different web origin\n   from below \".well-known/hoba\"\
    \ URLs.  The above is considered\n   sufficient to allow experimentation with\
    \ HOBA, but if at some point\n   HOBA is placed on the Standards Track, then a\
    \ full analysis of off-\n   origin redirections would need to be documented.\n"
- title: 6.1.  Registration
  contents:
  - "6.1.  Registration\n   Normally, a registration (also called \"joining\") is\
    \ expected to\n   happen after a UA receives a 401 response for a web origin and\
    \ realm\n   (for HOBA-http) or on demand (for HOBA-js) for which it has no\n \
    \  associated CPK.  The process of registration for a HOBA account on a\n   server\
    \ is relatively lightweight.  The UA generates a new key pair\n   and associates\
    \ it with the web origin/realm in question.\n   Note that if the UA has a CPK\
    \ associated with the web origin, but not\n   for the realm concerned, then a\
    \ new registration is REQUIRED.  If the\n   server did not wish for that outcome,\
    \ then it ought to use the same\n   or no realm.\n   The registration message\
    \ for HOBA-http is sent as a POST message to\n   the URL \".well-known/hoba/register\"\
    \ with an HTML form (x-www-form-\n   encoded, see <http://www.w3.org/TR/2014/REC-html5-20141028/\n\
    \   forms.html#url-encoded-form-data>), described below.  The\n   registration\
    \ message for HOBA-js can be in any format specified by\n   the server, but it\
    \ could be the same as the one described here for\n   HOBA-http.  It is up to\
    \ the server to decide what kind of user\n   interaction is required before the\
    \ account is finally set up.  When\n   the server's chosen registration flow is\
    \ completed successfully, the\n   server MUST add a Hobareg HTTP header (see Section\
    \ 6.1.1) to the HTTP\n   response message that completes the registration flow.\n\
    \   The registration message sent to the server has one mandatory field\n   (pub)\
    \ and some optional fields that allow the UA to specify the type\n   and value\
    \ of key and device identifiers that the UA wishes to use.\n   o  pub: a mandatory\
    \ field containing the Privacy Enhanced Mail (PEM)\n      formatted public key\
    \ of the client.  See Appendix C of [RFC6376]\n      for an example of how to\
    \ generate this key format.\n   o  kidtype: contains the type of key identifier.\
    \  This is a numeric\n      value intended to contain one of the values from Section\
    \ 9.4.  If\n      this is not present, then the mandatory-to-implement hashed\
    \ public\n      key option MUST be used.\n   o  kid: contains the key identifier\
    \ as a base64url-encoded string\n      that is of the type indicated in the kidtype.\
    \  If the kid is a\n      hash of a public key, then the correct (base64url-encoded)\
    \ hash\n      value MUST be provided and the server SHOULD check that and refuse\n\
    \      the registration if an incorrect value was supplied.\n   o  didtype: specifies\
    \ a kind of device identifier intended to contain\n      one of the values from\
    \ Section 9.5.  If absent, then the \"string\"\n      form of device identifier\
    \ defined in Section 9.5 MUST be used.\n   o  did: a UTF-8 string that specifies\
    \ the device identifier.  This\n      can be used to help a user be confident\
    \ that authentication has\n      worked, e.g., following authentication, some\
    \ web content might say\n      \"You last logged in from device 'did' at time\
    \ T.\"\n   Note that replay of registration (and other HOBA) messages is quite\n\
    \   possible.  That, however, can be counteracted if challenge freshness\n   is\
    \ ensured.  See Section 2 for details.  Note also that with HOBA-\n   http, the\
    \ HOBA signature does not cover the POST message body.  If\n   that is required,\
    \ then HOBA-JS may be a better fit for registration\n   and other account management\
    \ actions.\n"
- title: 6.1.1.  Hobareg Definition
  contents:
  - "6.1.1.  Hobareg Definition\n   Since registration can often be a multi-step process,\
    \ e.g., requiring\n   a user to fill in contact details, the initial response\
    \ to the HTTP\n   POST message defined above may not be the end of the registration\n\
    \   process even though the HTTP response has a 200 OK status.  This\n   creates\
    \ an issue for the UA since, during the registration process\n   (e.g., while\
    \ dealing with interstitial pages), the UA doesn't yet\n   know whether the CPK\
    \ is good for that web origin or not.\n   For this reason, the server MUST add\
    \ a header field to the response\n   message when the registration has succeeded\
    \ in order to indicate the\n   new state.  The header to be used is \"Hobareg\"\
    , and the value when\n   registration has succeeded is to be \"regok\".  When\
    \ registration is in\n   an intermediate state (e.g., on an HTTP response for\
    \ an interstitial\n   page), the server MAY add this header with a value of \"\
    reginwork\".\n   See Section 9.6 for the relevant IANA registration of this header\n\
    \   field.\n   For interstitial pages, the client MAY include a HOBA Authorization\n\
    \   header.  This is not considered a \"MUST\", as that might needlessly\n   complicate\
    \ client implementations, but is noted here in case a server\n   implementer assumes\
    \ that all registration messages contain a HOBA\n   Authorization header.\n  \
    \    Hobareg-val = \"regok\" / \"reginwork\"\n                 Figure 3: Hobareg\
    \ Header Field Definition\n   Figure 3 provides an ABNF definition for the values\
    \ allowed in the\n   Hobareg header field.  Note that these (and the header field\
    \ name)\n   are case insensitive.  Section 8.3.1 of [RFC7231] calls for\n   documenting\
    \ the following details for this new header field:\n   o  Only one single value\
    \ is allowed in a Hobareg header field.\n      Should more than one (a list) be\
    \ encountered, or any other ABNF-\n      invalid value, that SHOULD be interpreted\
    \ as being the same as\n      \"reginwork\".\n   o  The Hobareg header field can\
    \ only be used in HTTP responses.\n   o  Since Hobareg is only meant for responses,\
    \ it ought not appear in\n      requests.\n   o  The HTTP response code does affect\
    \ the interpretation of Hobareg.\n      Registration is only considered to have\
    \ succeeded if the regok\n      value is seen in a 2xx response.  4xx and other\
    \ errors mean that\n      registration has failed regardless of the value of Hobareg\
    \ seen.\n      The request method has no influence on the interpretation of\n\
    \      Hobareg.\n   o  Intermediaries never insert, delete, or modify a Hobareg\
    \ header\n      field.\n   o  As a response-only header field, it is not appropriate\
    \ to list a\n      Hobareg in a Vary response header field.\n   o  Hobareg is\
    \ allowed in trailers.\n   o  As a response-only header field, Hobareg will not\
    \ be preserved\n      across re-directs.\n   o  Hobareg itself discloses little\
    \ security- or privacy-sensitive\n      information.  If an attacker can somehow\
    \ detect that a Hobareg\n      header field is being added, then that attacker\
    \ would know that\n      the UA is in the process of registration, which could\
    \ be\n      significant.  However, it is likely that the set of messages\n   \
    \   between the UA and server would expose this information in many\n      cases,\
    \ regardless of whether or not TLS is used.  Using TLS is\n      still, however,\
    \ a good plan.\n"
- title: 6.2.  Associating Additional Keys to an Existing Account
  contents:
  - "6.2.  Associating Additional Keys to an Existing Account\n   From the user perspective,\
    \ the UA having a CPK for a web origin will\n   often appear to be the same as\
    \ having a way to sign in to an account\n   at that web site.  Since users often\
    \ have more than one UA, and since\n   the CPKs are, in general, UA specific,\
    \ that raises the question of\n   how the user can sign in to that account from\
    \ different UAs.  And\n   from the server perspective, that turns into the question\
    \ of how to\n   safely bind different CPKs to one account.  In this section, we\n\
    \   describe some ways in which this can be done, as well as one way in\n   which\
    \ this ought not be done.\n   Note that the context here is usually that the user\
    \ has succeeded in\n   registering with one or more UAs (for the purposes of this\
    \ section,\n   we call this \"the first UA\" below) and can use HOBA with those,\
    \ and\n   the user is now adding another UA.  The newest UA might or might not\n\
    \   have a CPK for the site in question.  Since it is in fact trivial, we\n  \
    \ assume that the site is able to put in place some appropriate,\n   quicker,\
    \ easier registration for a CPK for the newest UA.  The issue\n   then becomes\
    \ one of binding the CPK from the newest UA with those of\n   other UAs bound\
    \ to the account.\n"
- title: 6.2.1.  Moving Private Keys
  contents:
  - "6.2.1.  Moving Private Keys\n   It is common for a user to have multiple UAs\
    \ and to want all those\n   UAs to be able to authenticate to a single account.\
    \  One method to\n   allow a user who has an existing account to be able to authenticate\n\
    \   on a second device is to securely transport the private and public\n   keys\
    \ and the origin information from the first device to the second.\n   If this\
    \ approach is taken, then there is no impact on the HOBA-http\n   or HOBA-js,\
    \ so this is a pure UA implementation issue and not\n   discussed further.\n"
- title: 6.2.2.  Human-Memorable One-Time Password (Don't Do This One)
  contents:
  - "6.2.2.  Human-Memorable One-Time Password (Don't Do This One)\n   It will be\
    \ tempting for implementers to use a human-memorable One-\n   Time Password (OTP)\
    \ in order to \"authenticate\" binding CPKs to the\n   same account.  The workflow\
    \ here would likely be something along the\n   lines of some server administrative\
    \ utility generating a human-\n   memorable OTP such as \"1234\" and sending that\
    \ to the user out of band\n   for the user to enter at two web pages, each authenticated\
    \ via the\n   relevant CPK.  While this seems obvious enough and could even be\n\
    \   secure enough in some limited cases, we consider that this is too\n   risky\
    \ to use in the Internet, and so servers SHOULD NOT provide such\n   a mechanism.\
    \  The reason this is so dangerous is that it would be\n   trivial for an automated\
    \ client to guess such tokens and \"steal\" the\n   binding intended for some\
    \ other user.  At any scale, there would\n   always be some in-process bindings\
    \ so that even with only a trickle\n   of guesses (and hence not being detectable\
    \ via message volume), an\n   attacker would have a high probability of succeeding\
    \ in registering a\n   binding with the attacker's CPK.\n   This method of binding\
    \ CPKs together is therefore NOT RECOMMENDED.\n"
- title: 6.2.3.  Out-of-Band URL
  contents:
  - "6.2.3.  Out-of-Band URL\n   One easy binding method is to simply provide a web\
    \ page where, using\n   the first UA, the user can generate a URL (containing\
    \ some\n   \"unguessable\" cryptographically generated value) that the user then\n\
    \   later dereferences on the newest UA.  The user could email that URL\n   to\
    \ herself, for example, or the web server accessed at the first UA\n   could automatically\
    \ do that.\n   Such a URL SHOULD contain at least the equivalent of 128 bits of\n\
    \   randomness.\n"
- title: 6.3.  Logging Out
  contents:
  - "6.3.  Logging Out\n   The user can tell the server it wishes to log out.  With\
    \ HOBA-http,\n   this is done by sending a HOBA-authenticated POST message to\
    \ the URL\n   \".well-known/hoba/logout\" on the site in question.  The UA SHOULD\n\
    \   also delete session cookies associated with the session so that the\n   user's\
    \ state is no longer \"logged in.\"\n   The server MUST NOT allow TLS session\
    \ resumption for any logged out\n   session.\n   The server SHOULD also revoke\
    \ or delete any cookies associated with\n   the session.\n"
- title: 6.4.  Getting a Fresh Challenge
  contents:
  - "6.4.  Getting a Fresh Challenge\n   The UA can get a \"fresh\" challenge from\
    \ the server.  In HOBA-http, it\n   sends a POST message to \".well-known/hoba/getchal\"\
    .  If successful,\n   the response MUST contain a fresh (base64url-encoded) HOBA\
    \ challenge\n   for this origin in the body of the response.  Whitespace in the\n\
    \   response MUST be ignored.\n"
- title: 7.  Mandatory-to-Implement Algorithms
  contents:
  - "7.  Mandatory-to-Implement Algorithms\n   RSA-SHA256 MUST be supported.  HOBA\
    \ implementations MUST use RSA-\n   SHA256 if it is provided by the underlying\
    \ cryptographic libraries.\n   RSA-SHA1 MAY be used.  RSA modulus lengths of at\
    \ least 2048 bits\n   SHOULD be used.  RSA indicates the RSASSA-PKCS1-v1_5 algorithm\n\
    \   defined in Section 8.2 of [RFC3447], and SHA-1 and SHA-256 are\n   defined\
    \ in [SHS].  Keys with moduli shorter than 2048 bits SHOULD\n   only be used in\
    \ cases where generating 2048-bit (or longer) keys is\n   impractical, e.g., on\
    \ very constrained or old devices.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Binding my CPK with someone else's account would\
    \ be fun and\n   profitable so SHOULD be appropriately hard.  In particular, URLs\
    \ or\n   other values generated by the server as part of any CPK binding\n   process\
    \ MUST be hard to guess, for whatever level of difficulty is\n   chosen by the\
    \ server.  The server SHOULD NOT allow a random guess to\n   reveal whether or\
    \ not an account exists.\n   If key binding was server selected, then a bad actor\
    \ could bind\n   different accounts belonging to the user from the network with\n\
    \   possible bad consequences, especially if one of the private keys was\n   compromised\
    \ somehow.\n   When the max-age parameter is not zero, then a HOBA signature has\
    \ a\n   property that is like a bearer token for the relevant number of\n   seconds:\
    \ it can be replayed for a server-selected duration.\n   Similarly, for HOBA-js,\
    \ signatures might be replayable depending on\n   the specific implementation.\
    \  The security considerations of\n   [RFC6750] therefore apply in any case where\
    \ the HOBA signature can be\n   replayed.  Server administrators can set the max-age\
    \ to the minimum\n   acceptable value in such cases, which would often be expected\
    \ to be\n   just a few seconds.  There seems to be no reason to ever set the max-\n\
    \   age more than a few minutes; the value ought also decrease over time\n   as\
    \ device capabilities improve.  The administrator will most likely\n   want to\
    \ set the max-age to something that is not too short for the\n   slowest signing\
    \ device that is significant for that site.\n"
- title: 8.1.  Privacy Considerations
  contents:
  - "8.1.  Privacy Considerations\n   HOBA does, to some extent, impact privacy and\
    \ could be considered to\n   represent a super-cookie to the server or to any\
    \ entity on the path\n   from UA to HTTP server that can see the HOBA signature.\
    \  This is\n   because we need to send a key identifier as part of the signature\
    \ and\n   that will not vary for a given key.  For this reason, and others, it\n\
    \   is strongly RECOMMENDED to only use HOBA over server-authenticated\n   TLS\
    \ and to migrate web sites using HOBA to only use \"https\" URLs.\n   UAs SHOULD\
    \ provide users a way to manage their CPKs.  Ideally, there\n   would be a way\
    \ for a user to maintain their HOBA details for a site\n   while at the same time\
    \ deleting other site information such as\n   cookies or non-HOBA HTML5 localStorage.\
    \  However, as this is likely\n   to be complex, and appropriate user interfaces\
    \ counterintuitive, we\n   expect that UAs that implement HOBA will likely treat\
    \ HOBA\n   information as just some more site data that would disappear should\n\
    \   the user choose to \"forget\" that site.\n   Device identifiers are intended\
    \ to specify classes of device in a way\n   that can assist with registration\
    \ and with presentation to the user\n   of information about previous sessions,\
    \ e.g., last login time.\n   Device identifier types MUST NOT be privacy sensitive,\
    \ with values\n   that would allow tracking a user in unexpected ways.  In particular,\n\
    \   using a device identifier type that is analogous to the International\n  \
    \ Mobile Equipment Identifier (IMEI) would be a really bad idea and is\n   the\
    \ reason for the \"MUST NOT\" above.  In that case, \"mobile phone\"\n   could\
    \ be an acceptable choice.\n   If possible, implementations ought to encourage\
    \ the use of device\n   identifier values that are not personally identifying\
    \ except for the\n   user concerned; for example, \"Alice's mobile\" is likely\
    \ to be chosen\n   and is somewhat identifying, but \"Alice's phone: UUID 1234-5567-\n\
    \   89abc-def0\" would be a very bad choice.\n"
- title: 8.2.  localStorage Security for JavaScript
  contents:
  - "8.2.  localStorage Security for JavaScript\n   The use of localStorage (likely\
    \ with a non-WebCrypto implementation\n   of HOBA-js) will undoubtedly be a cause\
    \ for concern. localStorage\n   uses the same-origin model that says that the\
    \ scheme, domain, and\n   port define a localStorage instance.  Beyond that, any\
    \ code executing\n   will have access to private keying material.  Of particular\
    \ concern\n   are Cross-Site Scripting (XSS) attacks, which could conceivably\
    \ take\n   the keying material and use it to create UAs under the control of an\n\
    \   attacker.  XSS attacks are, in reality, devastating across the board\n   since\
    \ they can and do steal credit card information, passwords,\n   perform illicit\
    \ acts, etc.  It's not evident that we are introducing\n   unique threats from\
    \ which cleartext passwords don't already suffer.\n   Another source of concern\
    \ is local access to the keys.  That is, if\n   an attacker has access to the\
    \ UA itself, they could snoop on the key\n   through a JavaScript console or find\
    \ the file(s) that implement\n   localStorage on the host computer.  Again, it's\
    \ not clear that we are\n   worse in this regard because the same attacker could\
    \ get at browser\n   password files, etc., too.  One possible mitigation is to\
    \ encrypt the\n   keystore with a password/PIN that the user supplies.  This may\
    \ sound\n   counterintuitive, but the object here is to keep passwords off of\n\
    \   servers to mitigate the multiplier effect of a large-scale compromise\n  \
    \ (e.g., [ThreatReport]) because of shared passwords across sites.\n   It's worth\
    \ noting that HOBA uses asymmetric keys and not passwords\n   when evaluating\
    \ threats.  As various password database leaks have\n   shown, the real threat\
    \ of a password breach is not just to the site\n   that was breached, it's also\
    \ to all of the sites on which a user used\n   the same password.  That is, the\
    \ collateral damage is severe because\n   password reuse is common.  Storing a\
    \ password in localStorage would\n   also have a similar multiplier effect for\
    \ an attacker, though perhaps\n   on a smaller scale than a server-side compromise:\
    \ one successful\n   crack gains the attacker potential access to hundreds if\
    \ not\n   thousands of sites the user visits.  HOBA does not suffer from that\n\
    \   attack multiplier since each asymmetric key pair is unique per\n   site/UA/user.\n"
- title: 8.3.  Multiple Accounts on One User Agent
  contents:
  - "8.3.  Multiple Accounts on One User Agent\n   A shared UA with multiple accounts\
    \ is possible if the account\n   identifier is stored along with the asymmetric\
    \ key pair binding them\n   to one another.  Multiple entries can be kept, one\
    \ for each account,\n   and selected by the current user.  This, of course, is\
    \ fraught with\n   the possibility for abuse, since a server is potentially enrolling\n\
    \   the device for a long period and the user may not want to have to be\n   responsible\
    \ for the credential for that long.  To alleviate this\n   problem, the user could\
    \ request that the credential be erased from\n   the browser.  Similarly, during\
    \ the enrollment phase, a user could\n   request that the key pair only be kept\
    \ for a certain amount of time\n   or that it not be stored beyond the current\
    \ browser session.\n   However, all such features really ought to be part of the\
    \ operating\n   system or platform and not part of a HOBA implementation, so those\n\
    \   are not discussed further.\n"
- title: 8.4.  Injective Mapping for HOBA-TBS
  contents:
  - "8.4.  Injective Mapping for HOBA-TBS\n   The repeated length fields in the HOBA-TBS\
    \ structure are present in\n   order to ensure that there is no possibility that\
    \ the catenation of\n   different input values can cause confusion that might\
    \ lead to an\n   attack, either against HOBA as specified here, or else an attack\n\
    \   against some other protocol that reused this to-be-signed structure.\n   Those\
    \ fields ensure that the mapping from input fields to the HOBA-\n   TBS string\
    \ is an injective mapping.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA has made registrations and created new registries\
    \ as described\n   below.\n   All new registries have been placed beneath a new\
    \ \"HTTP Origin-Bound\n   Authentication (HOBA) Parameters\" category.\n"
- title: 9.1.  HOBA Authentication Scheme
  contents:
  - "9.1.  HOBA Authentication Scheme\n   A new scheme has been registered in the\
    \ HTTP Authentication Scheme\n   Registry as follows:\n   Authentication Scheme\
    \ Name: HOBA\n   Reference: Section 3 of RFC 7486\n   Notes (optional): The HOBA\
    \ scheme can be used with either HTTP\n   servers or proxies.  When used in response\
    \ to a 407 Proxy\n   Authentication Required indication, the appropriate proxy\n\
    \   authentication header fields are used instead, as with any other HTTP\n  \
    \ authentication scheme.\n"
- title: 9.2.  .well-known URI
  contents:
  - "9.2.  .well-known URI\n   A new .well-known URI has been registered in the Well-Known\
    \ URIs\n   registry as described below.\n   URI Suffix: hoba\n   Change Controller:\
    \ IETF\n   Reference: Section 6 of RFC 7486\n   Related Information: N/A\n"
- title: 9.3.  Algorithm Names
  contents:
  - "9.3.  Algorithm Names\n   A new HOBA signature algorithms registry has been created\
    \ as follows,\n   with Specification Required as the registration procedure. \
    \ New HOBA\n   signature algorithms SHOULD be in use with other IETF Standards\
    \ Track\n   protocols before being added to this registry.\n   Number       Meaning\
    \                         Reference\n   -----------  ------------------------------\
    \  ------------\n   0            RSA-SHA256                      RFC 7486\n  \
    \ 1            RSA-SHA1                        RFC 7486\n   RSA is defined in\
    \ Section 8.2 of [RFC3447], and SHA-1 and SHA-256 are\n   defined in [SHS].\n\
    \   For this registry, the number column should contain a small positive\n   integer.\
    \  Following the ABNF in Figure 1, the maximum value for this\n   is decimal 99.\n"
- title: 9.4.  Key Identifier Types
  contents:
  - "9.4.  Key Identifier Types\n   A new HOBA Key Identifier Types registry has been\
    \ created as follows,\n   with Specification Required as the registration procedure.\n\
    \   Number       Meaning                         Reference\n   -----------  ------------------------------\
    \  ------------\n   0            a hashed public key             [RFC6698]\n \
    \  1            a URI                           [RFC3986]\n   2            an\
    \ unformatted string, at the   RFC 7486\n                user's/UA's whim\n  \
    \ For the number 0, hashed public keys are as done in DNS-Based\n   Authentication\
    \ of Named Entities (DANE) [RFC6698].\n   For this registry, the number column\
    \ should contain a small positive\n   integer.\n"
- title: 9.5.  Device Identifier Types
  contents:
  - "9.5.  Device Identifier Types\n   A new HOBA Device Identifier Types registry\
    \ has been created as\n   follows, with Specification Required as the registration\
    \ procedure.\n   The designated expert for this registry is to carefully pay attention\n\
    \   to the notes on this field in Section 8.1, in particular, the \"MUST\n   NOT\"\
    \ stated therein.\n   Number       Meaning                         Reference\n\
    \   -----------  ------------------------------  -----------\n   0           \
    \ an unformatted string, at the   RFC 7486\n                user's/UA's whim\n\
    \   For this registry, the number column should contain a small positive\n   integer.\n"
- title: 9.6.  Hobareg HTTP Header Field
  contents:
  - "9.6.  Hobareg HTTP Header Field\n   A new identifier has been registered in the\
    \ Permanent Message Header\n   Field Names registry as described below.\n   Header\
    \ Field Name: Hobareg\n   Protocol: http (RFC 7230)\n   Status: experimental\n\
    \   Author/Change controller: IETF\n   Reference: Section 6.1.1 of RFC 7486\n\
    \   Related information: N/A\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC20]    Cerf, V., \"ASCII format for network\
    \ interchange\", STD 80,\n              RFC 20, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3447]  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n       \
    \       Standards (PKCS) #1: RSA Cryptography Specifications\n              Version\
    \ 2.1\", RFC 3447, February 2003,\n              <http://www.rfc-editor.org/info/rfc3447>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234, January 2008,\n      \
    \        <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]  Dierks, T. and\
    \ E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol Version\
    \ 1.2\", RFC 5246, August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n\
    \   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n   \
    \           Uniform Resource Identifiers (URIs)\", RFC 5785, April\n         \
    \     2010, <http://www.rfc-editor.org/info/rfc5785>.\n   [RFC6454]  Barth, A.,\
    \ \"The Web Origin Concept\", RFC 6454, December\n              2011, <http://www.rfc-editor.org/info/rfc6454>.\n\
    \   [RFC6698]  Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n \
    \             of Named Entities (DANE) Transport Layer Security (TLS)\n      \
    \        Protocol: TLSA\", RFC 6698, August 2012,\n              <http://www.rfc-editor.org/info/rfc6698>.\n\
    \   [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n       \
    \       Framework: Bearer Token Usage\", RFC 6750, October 2012,\n           \
    \   <http://www.rfc-editor.org/info/rfc6750>.\n   [RFC7231]  Fielding, R., Ed.\
    \ and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Semantics and Content\", RFC 7231,\n              June 2014, <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235, June 2014,\n  \
    \            <http://www.rfc-editor.org/info/rfc7235>.\n   [SHS]      NIST, \"\
    Secure Hash Standard (SHS)\", FIPS PUB 180-4, March\n              2012.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [Bonneau]  Bonneau, J., \"The Science of Guessing:\
    \ Analyzing an\n              Anonymized Corpus of 70 Million Passwords\", IEEE\
    \ Symposium\n              on Security and Privacy 538-552, 2012.\n   [MI93] \
    \    Mitchell, C. and A. Thomas, \"Standardising authentication\n            \
    \  protocols based on public key techniques\", Journal of\n              Computer\
    \ Security Volume 2, 23-36, 1993.\n   [RFC4086]  Eastlake 3rd, D., Schiller, J.,\
    \ and S. Crocker,\n              \"Randomness Requirements for Security\", BCP\
    \ 106, RFC 4086,\n              June 2005, <http://www.rfc-editor.org/info/rfc4086>.\n\
    \   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n   \
    \           April 2011, <http://www.rfc-editor.org/info/rfc6265>.\n   [RFC6376]\
    \  Crocker, D., Ed., Hansen, T., Ed., and M. Kucherawy, Ed.,\n              \"\
    DomainKeys Identified Mail (DKIM) Signatures\", STD 76,\n              RFC 6376,\
    \ September 2011,\n              <http://www.rfc-editor.org/info/rfc6376>.\n \
    \  [ThreatReport]\n              Sophos, \"Security Threat Report 2013\", January\
    \ 2013,\n              <http://www.sophos.com/en-us/medialibrary/pdfs/other/\n\
    \              sophossecuritythreatreport2013.pdf>.\n"
- title: Appendix A.  Problems with Passwords
  contents:
  - "Appendix A.  Problems with Passwords\n   By far, the most common mechanism for\
    \ web authentication is passwords\n   that can be remembered by the user, called\
    \ \"human-memorable\n   passwords\".  There is plenty of good research on how\
    \ users typically\n   use human-memorable passwords (e.g., see [Bonneau]), but\
    \ some of the\n   highlights are that users typically try hard to reuse passwords\
    \ on as\n   many web sites as possible, and that web sites often use either email\n\
    \   addresses or users' names as the identifiers that go with these\n   passwords.\n\
    \   If an attacker gets access to the database of memorizable passwords,\n   that\
    \ attacker can impersonate any of the users.  Even if the breach\n   is discovered,\
    \ the attacker can still impersonate users until every\n   password is changed.\
    \  Even if all the passwords are changed or at\n   least made unusable, the attacker\
    \ now possesses a list of likely\n   username/password pairs that might exist\
    \ on other sites.\n   Using memorizable passwords on unencrypted channels also\
    \ poses risks\n   to the users.  If a web site uses either the HTTP Basic\n  \
    \ authentication method, or an HTML form that does no cryptographic\n   protection\
    \ of the password in transit, a passive attacker can see the\n   password and\
    \ immediately impersonate the user.  If a hash-based\n   authentication scheme\
    \ such as HTTP Digest authentication is used, a\n   passive attacker still has\
    \ a high chance of being able to determine\n   the password using a dictionary\
    \ of known passwords.\n   Note that passwords that are not human-memorable are\
    \ still subject to\n   database attack, though they are of course unlikely to\
    \ be reused\n   across many systems.  Similarly, database attacks of some form\
    \ or\n   other will work against any password-based authentication scheme,\n \
    \  regardless of the cryptographic protocol used.  So for example, zero-\n   knowledge\
    \ or Password-Authenticated Key Exchange (PAKE) schemes,\n   though making use\
    \ of elegant cryptographic protocols, remain as\n   vulnerable to what is clearly\
    \ the most common exploit seen when it\n   comes to passwords.  HOBA is, however,\
    \ not vulnerable to database\n   theft.\n"
- title: Appendix B.  Example
  contents:
  - "Appendix B.  Example\n   The following values show an example of HOBA-http authentication\
    \ to\n   the origin \"https://example.com:443\".  Carriage returns have been\n\
    \   added and need to be removed to validate the example.\n   Public Key:\n  \
    \ -----BEGIN PUBLIC KEY-----\n   MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAviE8fMrGIPZN9up94M28\n\
    \   6o38B99fsz5cUqYHXXJlnHIi6gGKjqLgn3P7n4snUSQswLExrkhSr0TPhRDuPH_t\n   fXLKLBbh17ofB7t7shnPKxmyZ69hCLbe7pB1HvaBzTxPC2KOqskDiDBOQ6-JLHQ8\n\
    \   egXB14W-641RQt0CsC5nXzo92kPCdV4NZ45MW0ws3twCIUDCH0nibIG9SorrBbCl\n   DPHQZS5Dk5pgS7P5hrAr634Zn4bzXhUnm7cON2x4rv83oqB3lRqjF4T9exEMyZBS\n\
    \   L26m5KbK860uSOKywI0xp4ymnHMc6Led5qfEMnJC9PEI90tIMcgdHrmdHC_vpldG\n   DQIDAQAB\n\
    \   -----END PUBLIC KEY-----\n   Origin: https://example.com:443\n   Key Identifier:\
    \ vesscamS2Kze4FFOg3e2UyCJPhuQ6_3_gzN-k_L6t3w\n   Challenge: pUE77w0LylHypHKhBqAiQHuGC751GiOVv4/7pSlo9jc=\n\
    \   Signature algorithm: RSA-SHA256 (\"0\")\n   Nonce: Pm3yUW-sW5Q\n   Signature:\n\
    \   VD-0LGVBVEVjfq4xEd35FjnOrIqzJ2OQMx5w8E52dgVvxFD6R0ryEsHcD31ykh0i\n   4YIzIHXirx7bE4x9yP-9fMBCEwnHJsYwYQhfRpmScwAz-Ih1Hn4yORTb-U66miUz\n\
    \   q04ZgTHm4jAj45afU20wYpGXY2r3W-FRKc6J6Glv_zI_ROghERalxgXG-QVGZrKP\n   tG0V593Yf9IPnFSpLyW6fnxscCMWUA9T-4NjMdypI-Ze4HsC9J06tRTOunQdofr9\n\
    \   6ZJ2i9LE6uKSUDLCD2oeEeSEvUR--4OGtrgjzYysHZkdVSxAi7OoQBK34EUWg9kI\n   S13qQA43m4IMExkbApqrSg\n\
    \   Authorization Header:\n   Authorization: HOBA result=\"vesscamS2Kze4FFOg3e2UyCJPhuQ6_3_gzN-\n\
    \   k_L6t3w.pUE77w0LylHypHKhBqAiQHuGC751GiOVv4/7pSlo9jc=.Pm3yUW-sW5Q\n   .VD-0LGVBVEVjfq4xEd35FjnOrIqzJ2OQMx5w8E52dgVvxFD6R0ryEsHcD31ykh0\n\
    \   i4YIzIHXirx7bE4x9yP-9fMBCEwnHJsYwYQhfRpmScwAz-Ih1Hn4yORTb-U66miU\n   zq04ZgTHm4jAj45afU20wYpGXY2r3W-FRKc6J6Glv_zI_ROghERalxgXG-QVGZrK\n\
    \   PtG0V593Yf9IPnFSpLyW6fnxscCMWUA9T-4NjMdypI-Ze4HsC9J06tRTOunQdofr\n   96ZJ2i9LE6uKSUDLCD2oeEeSEvUR--4OGtrgjzYysHZkdVSxAi7OoQBK34EUWg9k\n\
    \   IS13qQA43m4IMExkbApqrSg\"\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to the following for good comments received during\
    \ the\n   preparation of this specification: Richard Barnes, David Black,\n  \
    \ Alissa Cooper, Donald Eastlake, Amos Jeffries, Benjamin Kaduk, Watson\n   Ladd,\
    \ Barry Leiba, Matt Lepinski, Ilari Liusvaara, James Manger,\n   Alexey Melnikov,\
    \ Kathleen Moriarty, Yoav Nir, Mark Nottingham, Julian\n   Reschke, Pete Resnick,\
    \ Michael Richardson, Yaron Sheffer, and Michael\n   Sweet.  All errors and stupidities\
    \ are of course the editors' fault.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephen Farrell\n   Trinity College Dublin\n   Dublin\
    \  2\n   Ireland\n   Phone: +353-1-896-2354\n   EMail: stephen.farrell@cs.tcd.ie\n\
    \   Paul Hoffman\n   VPN Consortium\n   EMail: paul.hoffman@vpnc.org\n   Michael\
    \ Thomas\n   Phresheez\n   EMail: mike@phresheez.com\n"
