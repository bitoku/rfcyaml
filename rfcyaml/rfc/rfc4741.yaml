- title: __initial_text__
  contents:
  - '                     NETCONF Configuration Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Network Configuration Protocol (NETCONF) defined in this document\n\
    \   provides mechanisms to install, manipulate, and delete the\n   configuration\
    \ of network devices.  It uses an Extensible Markup\n   Language (XML)-based data\
    \ encoding for the configuration data as well\n   as the protocol messages.  The\
    \ NETCONF protocol operations are\n   realized on top of a simple Remote Procedure\
    \ Call (RPC) layer.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Protocol Overview ..........................................6\n  \
    \    1.2. Capabilities ...............................................7\n    \
    \  1.3. Separation of Configuration and State Data .................7\n   2. Transport\
    \ Protocol Requirements .................................8\n      2.1. Connection-Oriented\
    \ Operation ..............................9\n      2.2. Authentication, Integrity,\
    \ and Confidentiality .............9\n      2.3. Authentication .............................................9\n\
    \      2.4. Mandatory Transport Protocol ..............................10\n  \
    \ 3. XML Considerations .............................................10\n    \
    \  3.1. Namespace .................................................10\n      3.2.\
    \ No Document Type Declarations .............................10\n   4. RPC Model\
    \ ......................................................10\n      4.1. <rpc> Element\
    \ .............................................10\n      4.2. <rpc-reply> Element\
    \ .......................................12\n      4.3. <rpc-error> Element .......................................12\n\
    \      4.4. <ok> Element ..............................................16\n  \
    \    4.5. Pipelining ................................................16\n   5.\
    \ Configuration Model ............................................16\n      5.1.\
    \ Configuration Datastores ..................................16\n      5.2. Data\
    \ Modeling .............................................17\n   6. Subtree Filtering\
    \ ..............................................17\n      6.1. Overview ..................................................17\n\
    \      6.2. Subtree Filter Components .................................18\n  \
    \         6.2.1. Namespace Selection ................................18\n    \
    \       6.2.2. Attribute Match Expressions ........................19\n      \
    \     6.2.3. Containment Nodes ..................................19\n        \
    \   6.2.4. Selection Nodes ....................................20\n          \
    \ 6.2.5. Content Match Nodes ................................20\n      6.3. Subtree\
    \ Filter Processing .................................22\n      6.4. Subtree Filtering\
    \ Examples ................................22\n           6.4.1. No Filter ..........................................22\n\
    \           6.4.2. Empty Filter .......................................23\n  \
    \         6.4.3. Select the Entire <users> Subtree ..................23\n    \
    \       6.4.4. Select All <name> Elements within the\n                  <users>\
    \ Subtree ....................................25\n           6.4.5. One Specific\
    \ <user> Entry ..........................26\n           6.4.6. Specific Elements\
    \ from a Specific <user> Entry .....27\n           6.4.7. Multiple Subtrees ..................................28\n\
    \           6.4.8. Elements with Attribute Naming .....................29\n  \
    \ 7. Protocol Operations ............................................31\n    \
    \  7.1. <get-config> ..............................................31\n      7.2.\
    \ <edit-config> .............................................34\n      7.3. <copy-config>\
    \ .............................................39\n      7.4. <delete-config>\
    \ ...........................................41\n      7.5. <lock> ....................................................42\n\
    \      7.6. <unlock> ..................................................44\n  \
    \    7.7. <get> .....................................................45\n    \
    \  7.8. <close-session> ...........................................47\n      7.9.\
    \ <kill-session> ............................................48\n   8. Capabilities\
    \ ...................................................49\n      8.1. Capabilities\
    \ Exchange .....................................49\n      8.2. Writable-Running\
    \ Capability ...............................50\n           8.2.1. Description\
    \ ........................................50\n           8.2.2. Dependencies .......................................50\n\
    \           8.2.3. Capability Identifier ..............................50\n  \
    \         8.2.4. New Operations .....................................51\n    \
    \       8.2.5. Modifications to Existing Operations ...............51\n      8.3.\
    \ Candidate Configuration Capability ........................51\n           8.3.1.\
    \ Description ........................................51\n           8.3.2. Dependencies\
    \ .......................................52\n           8.3.3. Capability Identifier\
    \ ..............................52\n           8.3.4. New Operations .....................................52\n\
    \           8.3.5. Modifications to Existing Operations ...............53\n  \
    \    8.4. Confirmed Commit Capability ...............................55\n    \
    \       8.4.1. Description ........................................55\n      \
    \     8.4.2. Dependencies .......................................55\n        \
    \   8.4.3. Capability Identifier ..............................56\n          \
    \ 8.4.4. New Operations .....................................56\n           8.4.5.\
    \ Modifications to Existing Operations ...............56\n      8.5. Rollback\
    \ on Error Capability ..............................57\n           8.5.1. Description\
    \ ........................................57\n           8.5.2. Dependencies .......................................57\n\
    \           8.5.3. Capability Identifier ..............................57\n  \
    \         8.5.4. New Operations .....................................57\n    \
    \       8.5.5. Modifications to Existing Operations ...............57\n      8.6.\
    \ Validate Capability .......................................58\n           8.6.1.\
    \ Description ........................................58\n           8.6.2. Dependencies\
    \ .......................................58\n           8.6.3. Capability Identifier\
    \ ..............................58\n           8.6.4. New Operations .....................................58\n\
    \      8.7. Distinct Startup Capability ...............................60\n  \
    \         8.7.1. Description ........................................60\n    \
    \       8.7.2. Dependencies .......................................60\n      \
    \     8.7.3. Capability Identifier ..............................60\n        \
    \   8.7.4. New Operations .....................................60\n          \
    \ 8.7.5. Modifications to Existing Operations ...............60\n      8.8. URL\
    \ Capability ............................................61\n           8.8.1.\
    \ Description ........................................61\n           8.8.2. Dependencies\
    \ .......................................61\n           8.8.3. Capability Identifier\
    \ ..............................62\n           8.8.4. New Operations .....................................62\n\
    \           8.8.5. Modifications to Existing Operations ...............62\n  \
    \    8.9. XPath Capability ..........................................63\n    \
    \       8.9.1. Description ........................................63\n      \
    \     8.9.2. Dependencies .......................................63\n        \
    \   8.9.3. Capability Identifier ..............................63\n          \
    \ 8.9.4. New Operations .....................................63\n           8.9.5.\
    \ Modifications to Existing Operations ...............63\n   9. Security Considerations\
    \ ........................................64\n   10. IANA Considerations ...........................................66\n\
    \      10.1. NETCONF XML Namespace ....................................66\n  \
    \    10.2. NETCONF XML Schema .......................................66\n    \
    \  10.3. NETCONF Capability URNs ..................................66\n   11.\
    \ Authors and Acknowledgements ..................................68\n   12. References\
    \ ....................................................68\n      12.1. Normative\
    \ References .....................................68\n      12.2. Informative\
    \ References ...................................69\n   Appendix A. NETCONF Error\
    \ List ....................................70\n   Appendix B. XML Schema for NETCONF\
    \ RPC and Protocol Operations ....74\n   Appendix C. Capability Template ...................................86\n\
    \      C.1. capability-name (template) ................................86\n  \
    \         C.1.1. Overview ...........................................86\n    \
    \       C.1.2. Dependencies .......................................86\n      \
    \     C.1.3. Capability Identifier ..............................86\n        \
    \   C.1.4. New Operations .....................................86\n          \
    \ C.1.5. Modifications to Existing Operations ...............86\n           C.1.6.\
    \ Interactions with Other Capabilities ...............86\n   Appendix D.  Configuring\
    \ Multiple Devices with NETCONF ............87\n      D.1. Operations on Individual\
    \ Devices ..........................87\n           D.1.1. Acquiring the Configuration\
    \ Lock ...................87\n           D.1.2. Loading the Update .................................88\n\
    \           D.1.3. Validating the Incoming Configuration ..............89\n  \
    \         D.1.4. Checkpointing the Running Configuration ............89\n    \
    \       D.1.5. Changing the Running Configuration .................90\n      \
    \     D.1.6. Testing the New Configuration ......................91\n        \
    \   D.1.7. Making the Change Permanent ........................91\n          \
    \ D.1.8. Releasing the Configuration Lock ...................92\n      D.2. Operations\
    \ on Multiple Devices ............................92\n   Appendix E. Deferred\
    \ Features .....................................93\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NETCONF protocol defines a simple mechanism through\
    \ which a\n   network device can be managed, configuration data information can\
    \ be\n   retrieved, and new configuration data can be uploaded and\n   manipulated.\
    \  The protocol allows the device to expose a full, formal\n   application programming\
    \ interface (API).  Applications can use this\n   straightforward API to send\
    \ and receive full and partial\n   configuration data sets.\n   The NETCONF protocol\
    \ uses a remote procedure call (RPC) paradigm.  A\n   client encodes an RPC in\
    \ XML [1] and sends it to a server using a\n   secure, connection-oriented session.\
    \  The server responds with a\n   reply encoded in XML.  The contents of both\
    \ the request and the\n   response are fully described in XML DTDs or XML schemas,\
    \ or both,\n   allowing both parties to recognize the syntax constraints imposed\
    \ on\n   the exchange.\n   A key aspect of NETCONF is that it allows the functionality\
    \ of the\n   management protocol to closely mirror the native functionality of\
    \ the\n   device.  This reduces implementation costs and allows timely access\n\
    \   to new features.  In addition, applications can access both the\n   syntactic\
    \ and semantic content of the device's native user interface.\n   NETCONF allows\
    \ a client to discover the set of protocol extensions\n   supported by a server.\
    \  These \"capabilities\" permit the client to\n   adjust its behavior to take\
    \ advantage of the features exposed by the\n   device.  The capability definitions\
    \ can be easily extended in a\n   noncentralized manner.  Standard and non-standard\
    \ capabilities can be\n   defined with semantic and syntactic rigor.  Capabilities\
    \ are\n   discussed in Section 8.\n   The NETCONF protocol is a building block\
    \ in a system of automated\n   configuration.  XML is the lingua franca of interchange,\
    \ providing a\n   flexible but fully specified encoding mechanism for hierarchical\n\
    \   content.  NETCONF can be used in concert with XML-based\n   transformation\
    \ technologies, such as XSLT [8], to provide a system\n   for automated generation\
    \ of full and partial configurations.  The\n   system can query one or more databases\
    \ for data about networking\n   topologies, links, policies, customers, and services.\
    \  This data can\n   be transformed using one or more XSLT scripts from a task-oriented,\n\
    \   vendor-independent data schema into a form that is specific to the\n   vendor,\
    \ product, operating system, and software release.  The\n   resulting data can\
    \ be passed to the device using the NETCONF\n   protocol.\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in RFC 2119 [3].\n"
- title: 1.1.  Protocol Overview
  contents:
  - "1.1.  Protocol Overview\n   NETCONF uses a simple RPC-based mechanism to facilitate\
    \ communication\n   between a client and a server.  The client can be a script\
    \ or\n   application typically running as part of a network manager.  The\n  \
    \ server is typically a network device.  The terms \"device\" and\n   \"server\"\
    \ are used interchangeably in this document, as are \"client\"\n   and \"application\"\
    .\n   A NETCONF session is the logical connection between a network\n   administrator\
    \ or network configuration application and a network\n   device.  A device MUST\
    \ support at least one NETCONF session and\n   SHOULD support multiple sessions.\
    \  Global configuration attributes\n   can be changed during any authorized session,\
    \ and the effects are\n   visible in all sessions.  Session-specific attributes\
    \ affect only the\n   session in which they are changed.\n   NETCONF can be conceptually\
    \ partitioned into four layers:\n              Layer                      Example\n\
    \         +-------------+      +-----------------------------+\n     (4) |   Content\
    \   |      |     Configuration data      |\n         +-------------+      +-----------------------------+\n\
    \                |                           |\n         +-------------+     \
    \ +-----------------------------+\n     (3) | Operations  |      | <get-config>,\
    \ <edit-config> |\n         +-------------+      +-----------------------------+\n\
    \                |                           |\n         +-------------+     \
    \ +-----------------------------+\n     (2) |     RPC     |      |    <rpc>, <rpc-reply>\
    \       |\n         +-------------+      +-----------------------------+\n   \
    \             |                           |\n         +-------------+      +-----------------------------+\n\
    \     (1) |  Transport  |      |   BEEP, SSH, SSL, console   |\n         |   Protocol\
    \  |      |                             |\n         +-------------+      +-----------------------------+\n\
    \   1.  The transport protocol layer provides a communication path\n       between\
    \ the client and server.  NETCONF can be layered over any\n       transport protocol\
    \ that provides a set of basic requirements.\n       Section 2 discusses these\
    \ requirements.\n   2.  The RPC layer provides a simple, transport-independent\
    \ framing\n       mechanism for encoding RPCs.  Section 4 documents this protocol.\n\
    \   3.  The operations layer defines a set of base operations invoked as\n   \
    \    RPC methods with XML-encoded parameters.  Section 7 details the\n       list\
    \ of base operations.\n   4.  The content layer is outside the scope of this document.\
    \  Given\n       the current proprietary nature of the configuration data being\n\
    \       manipulated, the specification of this content depends on the\n      \
    \ NETCONF implementation.  It is expected that a separate effort to\n       specify\
    \ a standard data definition language and standard content\n       will be undertaken.\n"
- title: 1.2.  Capabilities
  contents:
  - "1.2.  Capabilities\n   A NETCONF capability is a set of functionality that supplements\
    \ the\n   base NETCONF specification.  The capability is identified by a\n   uniform\
    \ resource identifier (URI).  These URIs should follow the\n   guidelines as described\
    \ in Section 8.\n   Capabilities augment the base operations of the device, describing\n\
    \   both additional operations and the content allowed inside operations.\n  \
    \ The client can discover the server's capabilities and use any\n   additional\
    \ operations, parameters, and content defined by those\n   capabilities.\n   The\
    \ capability definition may name one or more dependent\n   capabilities.  To support\
    \ a capability, the server MUST support any\n   capabilities upon which it depends.\n\
    \   Section 8 defines the capabilities exchange that allows the client to\n  \
    \ discover the server's capabilities.  Section 8 also lists the set of\n   capabilities\
    \ defined in this document.\n   Additional capabilities can be defined at any\
    \ time in external\n   documents, allowing the set of capabilities to expand over\
    \ time.\n   Standards bodies may define standardized capabilities, and\n   implementations\
    \ may define proprietary ones.  A capability URI MUST\n   sufficiently distinguish\
    \ the naming authority to avoid naming\n   collisions.\n"
- title: 1.3.  Separation of Configuration and State Data
  contents:
  - "1.3.  Separation of Configuration and State Data\n   The information that can\
    \ be retrieved from a running system is\n   separated into two classes, configuration\
    \ data and state data.\n   Configuration data is the set of writable data that\
    \ is required to\n   transform a system from its initial default state into its\
    \ current\n   state.  State data is the additional data on a system that is not\n\
    \   configuration data such as read-only status information and collected\n  \
    \ statistics.  When a device is performing configuration operations, a\n   number\
    \ of problems would arise if state data were included:\n   o  Comparisons of configuration\
    \ data sets would be dominated by\n      irrelevant entries such as different\
    \ statistics.\n   o  Incoming data could contain nonsensical requests, such as\
    \ attempts\n      to write read-only data.\n   o  The data sets would be large.\n\
    \   o  Archived data could contain values for read-only data items,\n      complicating\
    \ the processing required to restore archived data.\n   To account for these issues,\
    \ the NETCONF protocol recognizes the\n   difference between configuration data\
    \ and state data and provides\n   operations for each.  The <get-config> operation\
    \ retrieves\n   configuration data only, while the <get> operation retrieves\n\
    \   configuration and state data.\n   Note that the NETCONF protocol is focused\
    \ on the information required\n   to get the device into its desired running state.\
    \  The inclusion of\n   other important, persistent data is implementation specific.\
    \  For\n   example, user files and databases are not treated as configuration\n\
    \   data by the NETCONF protocol.\n   If a local database of user authentication\
    \ data is stored on the\n   device, whether it is included in configuration data\
    \ is an\n   implementation-dependent matter.\n"
- title: 2.  Transport Protocol Requirements
  contents:
  - "2.  Transport Protocol Requirements\n   NETCONF uses an RPC-based communication\
    \ paradigm.  A client sends a\n   series of one or more RPC request operations,\
    \ which cause the server\n   to respond with a corresponding series of RPC replies.\n\
    \   The NETCONF protocol can be layered on any transport protocol that\n   provides\
    \ the required set of functionality.  It is not bound to any\n   particular transport\
    \ protocol, but allows a mapping to define how it\n   can be implemented over\
    \ any specific protocol.\n   The transport protocol MUST provide a mechanism to\
    \ indicate the\n   session type (client or server) to the NETCONF protocol layer.\n\
    \   This section details the characteristics that NETCONF requires from\n   the\
    \ underlying transport protocol.\n"
- title: 2.1.  Connection-Oriented Operation
  contents:
  - "2.1.  Connection-Oriented Operation\n   NETCONF is connection-oriented, requiring\
    \ a persistent connection\n   between peers.  This connection must provide reliable,\
    \ sequenced data\n   delivery.\n   NETCONF connections are long-lived, persisting\
    \ between protocol\n   operations.  This allows the client to make changes to\
    \ the state of\n   the connection that will persist for the lifetime of the connection.\n\
    \   For example, authentication information specified for a connection\n   remains\
    \ in effect until the connection is closed.\n   In addition, resources requested\
    \ from the server for a particular\n   connection MUST be automatically released\
    \ when the connection closes,\n   making failure recovery simpler and more robust.\
    \  For example, when a\n   lock is acquired by a client, the lock persists until\
    \ either it is\n   explicitly released or the server determines that the connection\
    \ has\n   been terminated.  If a connection is terminated while the client\n \
    \  holds a lock, the server can perform any appropriate recovery.  The\n   lock\
    \ operation is further discussed in Section 7.5.\n"
- title: 2.2.  Authentication, Integrity, and Confidentiality
  contents:
  - "2.2.  Authentication, Integrity, and Confidentiality\n   NETCONF connections\
    \ must provide authentication, data integrity, and\n   confidentiality.  NETCONF\
    \ depends on the transport protocol for this\n   capability.  A NETCONF peer assumes\
    \ that appropriate levels of\n   security and confidentiality are provided independently\
    \ of this\n   document.  For example, connections may be encrypted in TLS [9]\
    \ or\n   SSH [10], depending on the underlying protocol.\n"
- title: 2.3.  Authentication
  contents:
  - "2.3.  Authentication\n   NETCONF connections must be authenticated.  The transport\
    \ protocol is\n   responsible for authentication.  The peer assumes that the\n\
    \   connection's authentication information has been validated by the\n   underlying\
    \ protocol using sufficiently trustworthy mechanisms and\n   that the peer's identity\
    \ has been sufficiently proven.\n   One goal of NETCONF is to provide a programmatic\
    \ interface to the\n   device that closely follows the functionality of the device's\
    \ native\n   interface.  Therefore, it is expected that the underlying protocol\n\
    \   uses existing authentication mechanisms defined by the device.  For\n   example,\
    \ a device that supports RADIUS [11] should allow the use of\n   RADIUS to authenticate\
    \ NETCONF sessions.\n   The authentication process should result in an identity\
    \ whose\n   permissions are known to the device.  These permissions MUST be\n\
    \   enforced during the remainder of the NETCONF session.\n"
- title: 2.4.  Mandatory Transport Protocol
  contents:
  - "2.4.  Mandatory Transport Protocol\n   A NETCONF implementation MUST support\
    \ the SSH transport protocol\n   mapping [4].\n"
- title: 3.  XML Considerations
  contents:
  - "3.  XML Considerations\n   XML serves as the encoding format for NETCONF, allowing\
    \ complex\n   hierarchical data to be expressed in a text format that can be read,\n\
    \   saved, and manipulated with both traditional text tools and tools\n   specific\
    \ to XML.\n   This section discusses a small number of XML-related considerations\n\
    \   pertaining to NETCONF.\n"
- title: 3.1.  Namespace
  contents:
  - "3.1.  Namespace\n   All NETCONF protocol elements are defined in the following\
    \ namespace:\n      urn:ietf:params:xml:ns:netconf:base:1.0\n   NETCONF capability\
    \ names MUST be URIs [5].  NETCONF capabilities are\n   discussed in Section 8.\n"
- title: 3.2.  No Document Type Declarations
  contents:
  - "3.2.  No Document Type Declarations\n   Document type declarations MUST NOT appear\
    \ in NETCONF content.\n"
- title: 4.  RPC Model
  contents:
  - "4.  RPC Model\n   The NETCONF protocol uses an RPC-based communication model.\
    \  NETCONF\n   peers use <rpc> and <rpc-reply> elements to provide transport\n\
    \   protocol-independent framing of NETCONF requests and responses.\n"
- title: 4.1.  <rpc> Element
  contents:
  - "4.1.  <rpc> Element\n   The <rpc> element is used to enclose a NETCONF request\
    \ sent from the\n   client to the server.\n   The <rpc> element has a mandatory\
    \ attribute \"message-id\", which is an\n   arbitrary string chosen by the sender\
    \ of the RPC that will commonly\n   encode a monotonically increasing integer.\
    \  The receiver of the RPC\n   does not decode or interpret this string but simply\
    \ saves it to be\n   used as a \"message-id\" attribute in any resulting <rpc-reply>\n\
    \   message.  For example:\n       <rpc message-id=\"101\"\n            xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n         <some-method>\n         \
    \  <!-- method parameters here... -->\n         </some-method>\n       </rpc>\n\
    \   If additional attributes are present in an <rpc> element, a NETCONF\n   peer\
    \ MUST return them unmodified in the <rpc-reply> element.\n   The name and parameters\
    \ of an RPC are encoded as the contents of the\n   <rpc> element.  The name of\
    \ the RPC is an element directly inside the\n   <rpc> element, and any parameters\
    \ are encoded inside this element.\n   The following example invokes a method\
    \ called <my-own-method>, which\n   has two parameters, <my-first-parameter>,\
    \ with a value of \"14\", and\n   <another-parameter>, with a value of \"fred\"\
    :\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <my-own-method xmlns=\"http://example.net/me/my-own/1.0\">\n       \
    \  <my-first-parameter>14</my-first-parameter>\n         <another-parameter>fred</another-parameter>\n\
    \       </my-own-method>\n     </rpc>\n   The following example invokes a <rock-the-house>\
    \ method with a\n   <zip-code> parameter of \"27606-0100\":\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rock-the-house\
    \ xmlns=\"http://example.net/rock/1.0\">\n         <zip-code>27606-0100</zip-code>\n\
    \       </rock-the-house>\n     </rpc>\n   The following example invokes the NETCONF\
    \ <get> method with no\n   parameters:\n     <rpc message-id=\"101\"\n       \
    \   xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get/>\n     </rpc>\n"
- title: 4.2.  <rpc-reply> Element
  contents:
  - "4.2.  <rpc-reply> Element\n   The <rpc-reply> message is sent in response to\
    \ an <rpc> operation.\n   The <rpc-reply> element has a mandatory attribute \"\
    message-id\", which\n   is equal to the \"message-id\" attribute of the <rpc>\
    \ for which this is\n   a response.\n   A NETCONF peer MUST also return any additional\
    \ attributes included in\n   the <rpc> element unmodified in the <rpc-reply> element.\n\
    \   The response name and response data are encoded as the contents of\n   the\
    \ <rpc-reply> element.  The name of the reply is an element\n   directly inside\
    \ the <rpc-reply> element, and any data is encoded\n   inside this element.\n\
    \   For example:\n   The following <rpc> element invokes the NETCONF <get> method\
    \ and\n   includes an additional attribute called \"user-id\".  Note that the\n\
    \   \"user-id\" attribute is not in the NETCONF namespace.  The returned\n   <rpc-reply>\
    \ element returns the \"user-id\" attribute, as well as the\n   requested content.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:ex=\"http://example.net/content/1.0\"\n          ex:user-id=\"\
    fred\">\n       <get/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n    \
    \      xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:ex=\"\
    http://example.net/content/1.0\"\n          ex:user-id=\"fred\">\n       <data>\n\
    \         <!-- contents here... -->\n       </data>\n     </rpc-reply>\n"
- title: 4.3.  <rpc-error> Element
  contents:
  - "4.3.  <rpc-error> Element\n   The <rpc-error> element is sent in <rpc-reply>\
    \ messages if an error\n   occurs during the processing of an <rpc> request.\n\
    \   If a server encounters multiple errors during the processing of an\n   <rpc>\
    \ request, the <rpc-reply> MAY contain multiple <rpc-error>\n   elements.  However,\
    \ a server is not required to detect or report more\n   than one <rpc-error> element,\
    \ if a request contains multiple errors.\n   A server is not required to check\
    \ for particular error conditions in\n   a specific sequence.  A server MUST return\
    \ an <rpc-error> element if\n   any error conditions occur during processing and\
    \ SHOULD return an\n   <rpc-error> element if any warning conditions occur during\n\
    \   processing.\n   A server MUST NOT return application-level- or data-model-specific\n\
    \   error information in an <rpc-error> element for which the client does\n  \
    \ not have sufficient access rights.\n   The <rpc-error> element includes the\
    \ following information:\n   error-type: Defines the conceptual layer that the\
    \ error occurred.\n      Enumeration.  One of:\n      *  transport\n      *  rpc\n\
    \      *  protocol\n      *  application\n   error-tag: Contains a string identifying\
    \ the error condition.  See\n      Appendix A for allowed values.\n   error-severity:\
    \ Contains a string identifying the error severity, as\n      determined by the\
    \ device.  One of:\n      *  error\n      *  warning\n   error-app-tag: Contains\
    \ a string identifying the data-model-specific\n      or implementation-specific\
    \ error condition, if one exists.  This\n      element will not be present if\
    \ no appropriate application error\n      tag can be associated with a particular\
    \ error condition.\n   error-path: Contains the absolute XPath [2] expression\
    \ identifying\n      the element path to the node that is associated with the\
    \ error\n      being reported in a particular rpc-error element.  This element\n\
    \      will not be present if no appropriate payload element can be\n      associated\
    \ with a particular error condition, or if the\n      'bad-element' QString returned\
    \ in the 'error-info' container is\n      sufficient to identify the node associated\
    \ with the error.  When\n      the XPath expression is interpreted, the set of\
    \ namespace\n      declarations are those in scope on the rpc-error element,\n\
    \      including the default namespace.\n   error-message: Contains a string suitable\
    \ for human display that\n      describes the error condition.  This element will\
    \ not be present\n      if no appropriate message is provided for a particular\
    \ error\n      condition.  This element SHOULD include an xml:lang attribute as\n\
    \      defined in [1] and discussed in [12].\n   error-info: Contains protocol-\
    \ or data-model-specific error content.\n      This element will not be present\
    \ if no such error content is\n      provided for a particular error condition.\
    \  The list in Appendix A\n      defines any mandatory error-info content for\
    \ each error.  After\n      any protocol-mandated content, a data model definition\
    \ may mandate\n      that certain application-layer error information be included\
    \ in\n      the error-info container.  An implementation may include\n      additional\
    \ elements to provide extended and/or implementation-\n      specific debugging\
    \ information.\n   Appendix A enumerates the standard NETCONF errors.\n   Example:\n\
    \      An error is returned if an <rpc> element is received without a\n      message-id\
    \ attribute.  Note that only in this case is it\n      acceptable for the NETCONF\
    \ peer to omit the message-id attribute\n      in the <rpc-reply> element.\n \
    \    <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <rpc-error>\n         <error-type>rpc</error-type>\n         <error-tag>missing-attribute</error-tag>\n\
    \         <error-severity>error</error-severity>\n         <error-info>\n    \
    \       <bad-attribute>message-id</bad-attribute>\n           <bad-element>rpc</bad-element>\n\
    \         </error-info>\n       </rpc-error>\n     </rpc-reply>\n      The following\
    \ <rpc-reply> illustrates the case of returning\n      multiple <rpc-error> elements.\n\
    \      Note that the data models used in the examples in this section use\n  \
    \    the <name> element to distinguish between multiple instances of\n      the\
    \ <interface> element.\n     <rpc-reply message-id=\"101\"\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n       xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rpc-error>\n\
    \         <error-type>application</error-type>\n         <error-tag>invalid-value</error-tag>\n\
    \         <error-severity>error</error-severity>\n         <error-message xml:lang=\"\
    en\">\n           MTU value 25000 is not within range 256..9192\n         </error-message>\n\
    \         <error-info>\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <interface>\n               <name>Ethernet0/0</name>\n       \
    \        <mtu>25000</mtu>\n             </interface>\n           </top>\n    \
    \     </error-info>\n       </rpc-error>\n       <rpc-error>\n         <error-type>application</error-type>\n\
    \         <error-tag>invalid-value</error-tag>\n         <error-severity>error</error-severity>\n\
    \         <error-message xml:lang=\"en\">\n           Invalid IP address for interface\
    \ Ethernet1/0\n         </error-message>\n         <error-info>\n           <top\
    \ xmlns=\"http://example.com/schema/1.2/config\">\n             <interface xc:operation=\"\
    replace\">\n               <name>Ethernet1/0</name>\n               <address>\n\
    \                 <name>1.4</name>\n                 <prefix-length>24</prefix-length>\n\
    \               </address>\n             </interface>\n           </top>\n   \
    \      </error-info>\n       </rpc-error>\n     </rpc-reply>\n"
- title: 4.4.  <ok> Element
  contents:
  - "4.4.  <ok> Element\n   The <ok> element is sent in <rpc-reply> messages if no\
    \ errors or\n   warnings occurred during the processing of an <rpc> request. \
    \ For\n   example:\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 4.5.  Pipelining
  contents:
  - "4.5.  Pipelining\n   NETCONF <rpc> requests MUST be processed serially by the\
    \ managed\n   device.  Additional <rpc> requests MAY be sent before previous ones\n\
    \   have been completed.  The managed device MUST send responses only in\n   the\
    \ order the requests were received.\n"
- title: 5.  Configuration Model
  contents:
  - "5.  Configuration Model\n   NETCONF provides an initial set of operations and\
    \ a number of\n   capabilities that can be used to extend the base.  NETCONF peers\n\
    \   exchange device capabilities when the session is initiated as\n   described\
    \ in Section 8.1.\n"
- title: 5.1.  Configuration Datastores
  contents:
  - "5.1.  Configuration Datastores\n   NETCONF defines the existence of one or more\
    \ configuration datastores\n   and allows configuration operations on them.  A\
    \ configuration\n   datastore is defined as the complete set of configuration\
    \ data that\n   is required to get a device from its initial default state into\
    \ a\n   desired operational state.  The configuration datastore does not\n   include\
    \ state data or executive commands.\n   Only the <running> configuration datastore\
    \ is present in the base\n   model.  Additional configuration datastores may be\
    \ defined by\n   capabilities.  Such configuration datastores are available only\
    \ on\n   devices that advertise the capabilities.\n   o  Running: The complete\
    \ configuration currently active on the\n      network device.  Only one configuration\
    \ datastore of this type\n      exists on the device, and it is always present.\
    \  NETCONF protocol\n      operations refer to this datastore using the <running>\
    \ element.\n   The capabilities in Sections 8.3 and 8.7 define the <candidate>\
    \ and\n   <startup> configuration datastores, respectively.\n"
- title: 5.2.  Data Modeling
  contents:
  - "5.2.  Data Modeling\n   Data modeling and content issues are outside the scope\
    \ of the NETCONF\n   protocol.  An assumption is made that the device's data model\
    \ is\n   well-known to the application and that both parties are aware of\n  \
    \ issues such as the layout, containment, keying, lookup, replacement,\n   and\
    \ management of the data, as well as any other constraints imposed\n   by the\
    \ data model.\n   NETCONF carries configuration data inside the <config> element\
    \ that\n   is specific to device's data model.  The protocol treats the contents\n\
    \   of that element as opaque data.  The device uses capabilities to\n   announce\
    \ the set of data models that the device implements.  The\n   capability definition\
    \ details the operation and constraints imposed\n   by data model.\n   Devices\
    \ and managers may support multiple data models, including both\n   standard and\
    \ proprietary data models.\n"
- title: 6.  Subtree Filtering
  contents:
  - '6.  Subtree Filtering

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   XML subtree filtering is a mechanism that allows an application\
    \ to\n   select particular XML subtrees to include in the <rpc-reply> for a\n\
    \   <get> or <get-config> operation.  A small set of filters for\n   inclusion,\
    \ simple content exact-match, and selection is provided,\n   which allows some\
    \ useful, but also very limited, selection\n   mechanisms.  The agent does not\
    \ need to utilize any data-model-\n   specific semantics during processing, allowing\
    \ for simple and\n   centralized implementation strategies.\n   Conceptually,\
    \ a subtree filter is comprised of zero or more element\n   subtrees, which represent\
    \ the filter selection criteria.  At each\n   containment level within a subtree,\
    \ the set of sibling nodes is\n   logically processed by the server to determine\
    \ if its subtree and\n   path of elements to the root are included in the filter\
    \ output.\n   All elements present in a particular subtree within a filter must\n\
    \   match associated nodes present in the server's conceptual data model.\n  \
    \ XML namespaces may be specified (via 'xmlns' declarations) within the\n   filter\
    \ data model.  If they are, the declared namespace must first\n   exactly match\
    \ a namespace supported by the server.  Note that prefix\n   values for qualified\
    \ namespaces are not relevant when comparing\n   filter elements to elements in\
    \ the underlying data model.  Only data\n   associated with a specified namespace\
    \ will be included in the filter\n   output.\n   Each node specified in a subtree\
    \ filter represents an inclusive\n   filter.  Only associated nodes in underlying\
    \ data model(s) within the\n   specified configuration datastore on the server\
    \ are selected by the\n   filter.  A node must exactly match the namespace and\
    \ hierarchy of\n   elements given in the filter data, except that the filter absolute\n\
    \   path name is adjusted to start from the layer below <filter>.\n   Response\
    \ messages contain only the subtrees selected by the filter.\n   Any selection\
    \ criteria that were present in the request, within a\n   particular selected\
    \ subtree, are also included in the response.  Note\n   that some elements expressed\
    \ in the filter as leaf nodes will be\n   expanded (i.e., subtrees included) in\
    \ the filter output.  Specific\n   data instances are not duplicated in the response\
    \ in the event that\n   the request contains multiple filter subtree expressions\
    \ that select\n   the same data.\n"
- title: 6.2.  Subtree Filter Components
  contents:
  - "6.2.  Subtree Filter Components\n   A subtree filter is comprised of XML elements\
    \ and their XML\n   attributes.  There are five types of components that may be\
    \ present\n   in a subtree filter:\n   o  Namespace Selection\n   o  Attribute\
    \ Match Expressions\n   o  Containment Nodes\n   o  Selection Nodes\n   o  Content\
    \ Match Nodes\n"
- title: 6.2.1.  Namespace Selection
  contents:
  - "6.2.1.  Namespace Selection\n   If namespaces are used, then the filter output\
    \ will only include\n   elements from the specified namespace.  A namespace is\
    \ considered to\n   match (for filter purposes) if the content of the 'xmlns'\
    \ attributes\n   are the same in the filter and the underlying data model.  Note\
    \ that\n   namespace selection cannot be used by itself.  At least one element\n\
    \   must be specified in the filter any elements to be included in the\n   filter\
    \ output.\n   Example:\n     <filter type=\"subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\"\
    />\n     </filter>\n   In this example, the <top> element is a selection node,\
    \ and only this\n   node and any child nodes (from the underlying data model)\
    \ in the\n   'http://example.com/schema/1.2/config' namespace will be included\
    \ in\n   the filter output.\n"
- title: 6.2.2.  Attribute Match Expressions
  contents:
  - "6.2.2.  Attribute Match Expressions\n   An attribute that appears in a subtree\
    \ filter is part of an\n   \"attribute match expression\".  Any number of (unqualified\
    \ or\n   qualified) XML attributes may be present in any type of filter node.\n\
    \   In addition to the selection criteria normally applicable to that\n   node,\
    \ the selected data must have matching values for every attribute\n   specified\
    \ in the node.  If an element is not defined to include a\n   specified attribute,\
    \ then it is not selected in the filter output.\n   Example:\n     <filter type=\"\
    subtree\">\n       <t:top xmlns:t=\"http://example.com/schema/1.2/config\">\n\
    \         <t:interfaces>\n           <t:interface t:ifName=\"eth0\"/>\n      \
    \   </t:interfaces>\n       </t:top>\n     </filter>\n   In this example, the\
    \ <top>, <interfaces>, and <interface> elements\n   are containment nodes, and\
    \ 'ifName' is an attribute match expression.\n   Only 'interface' nodes in the\
    \ 'http://example.com/schema/1.2/config'\n   namespace that have an 'ifName' attribute\
    \ with the value 'eth0' and\n   occur within 'interfaces' nodes within 'top' nodes\
    \ will be included\n   in the filter output.\n"
- title: 6.2.3.  Containment Nodes
  contents:
  - "6.2.3.  Containment Nodes\n   Nodes that contain child elements within a subtree\
    \ filter are called\n   \"containment nodes\".  Each child element can be any\
    \ type of node,\n   including another containment node.  For each containment\
    \ node\n   specified in a subtree filter, all data model instances that exactly\n\
    \   match the specified namespaces, element hierarchy, and any attribute\n   match\
    \ expressions are included in the filter output.\n   Example:\n     <filter type=\"\
    subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\">\n    \
    \     <users/>\n       </top>\n     </filter>\n   In this example, the <top> element\
    \ is a containment node.\n"
- title: 6.2.4.  Selection Nodes
  contents:
  - "6.2.4.  Selection Nodes\n   An empty leaf node within a filter is called a \"\
    selection node\", and\n   it represents an \"explicit selection\" filter on the\
    \ underlying data\n   model.  Presence of any selection nodes within a set of\
    \ sibling nodes\n   will cause the filter to select the specified subtree(s) and\
    \ suppress\n   automatic selection of the entire set of sibling nodes in the\n\
    \   underlying data model.  For filtering purposes, an empty leaf node\n   can\
    \ be declared either with an empty tag (e.g., <foo/>) or with\n   explicit start\
    \ and end tags (e.g., <foo> </foo>).  Any whitespace\n   characters are ignored\
    \ in this form.\n   Example:\n     <filter type=\"subtree\">\n       <top xmlns=\"\
    http://example.com/schema/1.2/config\">\n         <users/>\n       </top>\n  \
    \   </filter>\n   In this example, the <top> element is a containment node, and\
    \ the\n   <users> element is a selection node.  Only 'users' nodes in the\n  \
    \ 'http://example.com/schema/1.2/config' namespace that occur within a\n   'top'\
    \ element that is the root of the configuration datastore will be\n   included\
    \ in the filter output.\n"
- title: 6.2.5.  Content Match Nodes
  contents:
  - "6.2.5.  Content Match Nodes\n   A leaf node that contains simple content is called\
    \ a \"content match\n   node\".  It is used to select some or all of its sibling\
    \ nodes for\n   filter output, and it represents an exact-match filter on the\
    \ leaf\n   node element content.  The following constraints apply to content\n\
    \   match nodes:\n   o  A content match node must not contain nested elements\
    \ (i.e., must\n      resolve to a simpleType in the XML Schema Definition (XSD)).\n\
    \   o  Multiple content match nodes (i.e., sibling nodes) are logically\n    \
    \  combined in an \"AND\" expression.\n   o  Filtering of mixed content is not\
    \ supported.\n   o  Filtering of list content is not supported.\n   o  Filtering\
    \ of whitespace-only content is not supported.\n   o  A content match node must\
    \ contain non-whitespace characters.  An\n      empty element (e.g., <foo></foo>)\
    \ will be interpreted as a\n      selection node (e.g., <foo/>).\n   o  Leading\
    \ and trailing whitespace characters are ignored, but any\n      whitespace characters\
    \ within a block of text characters are not\n      ignored or modified.\n   If\
    \ all specified sibling content match nodes in a subtree filter\n   expression\
    \ are 'true', then the filter output nodes are selected in\n   the following manner:\n\
    \   o  Each content match node in the sibling set is included in the\n      filter\
    \ output.\n   o  If any containment nodes are present in the sibling set, then\
    \ they\n      are processed further and included if any nested filter criteria\n\
    \      are also met.\n   o  If any selection nodes are present in the sibling\
    \ set, then all of\n      them are included in the filter output.\n   o  Otherwise\
    \ (i.e., there are no selection or containment nodes in\n      the filter sibling\
    \ set), all the nodes defined at this level in\n      the underlying data model\
    \ (and their subtrees, if any) are\n      returned in the filter output.\n   If\
    \ any of the sibling content match node tests are 'false', then no\n   further\
    \ filter processing is performed on that sibling set, and none\n   of the sibling\
    \ subtrees are selected by the filter, including the\n   content match node(s).\n\
    \   Example:\n     <filter type=\"subtree\">\n       <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n         <users>\n           <user>\n             <name>fred</name>\n     \
    \      </user>\n         </users>\n       </top>\n     </filter>\n   In this example,\
    \ the <users> and <user> nodes are both containment\n   nodes, and <name> is a\
    \ content match node.  Since no sibling nodes of\n   <name> are specified (and\
    \ therefore no containment or selection\n   nodes), all of the sibling nodes of\
    \ <name> are returned in the filter\n   output.  Only 'user' nodes in the\n  \
    \ 'http://example.com/schema/1.2/config' namespace that match the\n   element\
    \ hierarchy and for which the <name> element is equal to 'fred'\n   will be included\
    \ in the filter output.\n"
- title: 6.3.  Subtree Filter Processing
  contents:
  - "6.3.  Subtree Filter Processing\n   The filter output (the set of selected nodes)\
    \ is initially empty.\n   Each subtree filter can contain one or more data model\
    \ fragments,\n   which represent portions of the data model that should be selected\n\
    \   (with all child nodes) in the filter output.\n   Each subtree data fragment\
    \ is compared by the server to the internal\n   data models supported by the server.\
    \  If the entire subtree data-\n   fragment filter (starting from the root to\
    \ the innermost element\n   specified in the filter) exactly matches a corresponding\
    \ portion of\n   the supported data model, then that node and all its children\
    \ are\n   included in the result data.\n   The server processes all nodes with\
    \ the same parent node (sibling\n   set) together, starting from the root to the\
    \ leaf nodes.  The root\n   elements in the filter are considered in the same\
    \ sibling set\n   (assuming they are in the same namespace), even though they\
    \ do not\n   have a common parent.\n   For each sibling set, the server determines\
    \ which nodes are included\n   (or potentially included) in the filter output,\
    \ and which sibling\n   subtrees are excluded (pruned) from the filter output.\
    \  The server\n   first determines which types of nodes are present in the sibling\
    \ set\n   and processes the nodes according to the rules for their type.  If\n\
    \   any nodes in the sibling set are selected, then the process is\n   recursively\
    \ applied to the sibling sets of each selected node.  The\n   algorithm continues\
    \ until all sibling sets in all subtrees specified\n   in the filter have been\
    \ processed.\n"
- title: 6.4.  Subtree Filtering Examples
  contents:
  - '6.4.  Subtree Filtering Examples

    '
- title: 6.4.1.  No Filter
  contents:
  - "6.4.1.  No Filter\n   Leaving out the filter on the get operation returns the\
    \ entire data\n   model.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n         <!-- ... entire\
    \ set of data returned ... -->\n       </data>\n     </rpc-reply>\n"
- title: 6.4.2.  Empty Filter
  contents:
  - "6.4.2.  Empty Filter\n   An empty filter will select nothing because no content\
    \ match or\n   selection nodes are present.  This is not an error.  The filter\
    \ type\n   attribute used in these examples is discussed further in Section 7.1.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get>\n         <filter type=\"subtree\">\n         </filter>\n    \
    \   </get>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n       </data>\n  \
    \   </rpc-reply>\n"
- title: 6.4.3.  Select the Entire <users> Subtree
  contents:
  - "6.4.3.  Select the Entire <users> Subtree\n   The filter in this example contains\
    \ one selection node (<users>), so\n   just that subtree is selected by the filter.\
    \  This example represents\n   the fully-populated <users> data model in most\
    \ of the filter examples\n   that follow.  In a real data model, the <company-info>\
    \ would not\n   likely be returned with the list of users for a particular host\
    \ or\n   network.\n   NOTE: The filtering and configuration examples used in this\
    \ document\n   appear in the namespace \"http://example.com/schema/1.2/config\"\
    .  The\n   root element of this namespace is <top>.  The <top> element and its\n\
    \   descendents represent an example configuration data model only.\n     <rpc\
    \ message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users/>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <type>superuser</type>\n               <full-name>Charlie Root</full-name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <user>\n               <name>fred</name>\n               <type>admin</type>\n\
    \               <full-name>Fred Flintstone</full-name>\n               <company-info>\n\
    \                 <dept>2</dept>\n                 <id>2</id>\n              \
    \ </company-info>\n             </user>\n             <user>\n               <name>barney</name>\n\
    \               <type>admin</type>\n               <full-name>Barney Rubble</full-name>\n\
    \               <company-info>\n                 <dept>2</dept>\n            \
    \     <id>3</id>\n               </company-info>\n             </user>\n     \
    \      </users>\n         </top>\n       </data>\n     </rpc-reply>\n   The following\
    \ filter request would have produced the same result, but\n   only because the\
    \ container <users> defines one child element\n   (<user>).\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <filter\
    \ type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user/>\n             </users>\n     \
    \      </top>\n         </filter>\n       </get-config>\n     </rpc>\n"
- title: 6.4.4.  Select All <name> Elements within the <users> Subtree
  contents:
  - "6.4.4.  Select All <name> Elements within the <users> Subtree\n   This filter\
    \ contains two containment nodes (<users>, <user>) and one\n   selector node (<name>).\
    \  All instances of the <name> element in the\n   same sibling set are selected\
    \ in the filter output.  The manager may\n   need to know that <name> is used\
    \ as an instance identifier in this\n   particular data structure, but the server\
    \ does not need to know that\n   meta-data in order to process the request.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name/>\n   \
    \            </user>\n             </users>\n           </top>\n         </filter>\n\
    \       </get-config>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n    \
    \     <top xmlns=\"http://example.com/schema/1.2/config\">\n           <users>\n\
    \             <user>\n               <name>root</name>\n             </user>\n\
    \             <user>\n               <name>fred</name>\n             </user>\n\
    \             <user>\n               <name>barney</name>\n             </user>\n\
    \           </users>\n         </top>\n       </data>\n     </rpc-reply>\n"
- title: 6.4.5.  One Specific <user> Entry
  contents:
  - "6.4.5.  One Specific <user> Entry\n   This filter contains two containment nodes\
    \ (<users>, <user>) and one\n   content match node (<name>).  All instances of\
    \ the sibling set\n   containing <name> for which the value of <name> equals \"\
    fred\" are\n   selected in the filter output.\n     <rpc message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get-config>\n\
    \         <source>\n           <running/>\n         </source>\n         <filter\
    \ type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>fred</name>\n\
    \               </user>\n             </users>\n           </top>\n         </filter>\n\
    \       </get-config>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n    \
    \     <top xmlns=\"http://example.com/schema/1.2/config\">\n           <users>\n\
    \             <user>\n               <name>fred</name>\n               <type>admin</type>\n\
    \               <full-name>Fred Flintstone</full-name>\n               <company-info>\n\
    \                 <dept>2</dept>\n                 <id>2</id>\n              \
    \ </company-info>\n             </user>\n           </users>\n         </top>\n\
    \       </data>\n     </rpc-reply>\n"
- title: 6.4.6.  Specific Elements from a Specific <user> Entry
  contents:
  - "6.4.6.  Specific Elements from a Specific <user> Entry\n   This filter contains\
    \ two containment nodes (<users>, <user>), one\n   content match node (<name>),\
    \ and two selector nodes (<type>,\n   <full-name>).  All instances of the <type>\
    \ and <full-name> elements\n   in the same sibling set containing <name> for which\
    \ the value of\n   <name> equals \"fred\" are selected in the filter output. \
    \ The\n   <company-info> element is not included because the sibling set\n   contains\
    \ selection nodes.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>fred</name>\n\
    \                 <type/>\n                 <full-name/>\n               </user>\n\
    \             </users>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>fred</name>\n\
    \               <type>admin</type>\n               <full-name>Fred Flintstone</full-name>\n\
    \             </user>\n           </users>\n         </top>\n       </data>\n\
    \     </rpc-reply>\n"
- title: 6.4.7.  Multiple Subtrees
  contents:
  - "6.4.7.  Multiple Subtrees\n   This filter contains three subtrees (name=root,\
    \ fred, barney).\n   The \"root\" subtree filter contains two containment nodes\
    \ (<users>,\n   <user>), one content match node (<name>), and one selector node\n\
    \   (<company-info>).  The subtree selection criteria is met, and just\n   the\
    \ company-info subtree for \"root\" is selected in the filter output.\n   The\
    \ \"fred\" subtree filter contains three containment nodes (<users>,\n   <user>,\
    \ <company-info>), one content match node (<name>), and one\n   selector node\
    \ (<id>).  The subtree selection criteria is met, and\n   just the <id> element\
    \ within the company-info subtree for \"fred\" is\n   selected in the filter output.\n\
    \   The \"barney\" subtree filter contains three containment nodes\n   (<users>,\
    \ <user>, <company-info>), two content match nodes (<name>,\n   <type>), and one\
    \ selector node (<dept>).  The subtree selection\n   criteria is not met because\
    \ user \"barney\" is not a \"superuser\", and\n   the entire subtree for \"barney\"\
    \ (including its parent <user> entry)\n   is excluded from the filter output.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users>\n               <user>\n                 <name>root</name>\n\
    \                 <company-info/>\n               </user>\n               <user>\n\
    \                 <name>fred</name>\n                 <company-info>\n       \
    \            <id/>\n                 </company-info>\n               </user>\n\
    \               <user>\n                 <name>barney</name>\n               \
    \  <type>superuser</type>\n                 <company-info>\n                 \
    \  <dept/>\n                 </company-info>\n               </user>\n       \
    \      </users>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <user>\n               <name>fred</name>\n               <company-info>\n\
    \                 <id>2</id>\n               </company-info>\n             </user>\n\
    \           </users>\n         </top>\n       </data>\n     </rpc-reply>\n"
- title: 6.4.8.  Elements with Attribute Naming
  contents:
  - "6.4.8.  Elements with Attribute Naming\n   In this example, the filter contains\
    \ one containment node\n   (<interfaces>), one attribute match expression (ifName),\
    \ and one\n   selector node (<interface>).  All instances of the <interface>\n\
    \   subtree that have an ifName attribute equal to \"eth0\" are selected in\n\
    \   the filter output.  The filter data elements and attributes must be\n   qualified\
    \ because the ifName attribute will not be considered part of\n   the 'schema/1.2'\
    \ namespace if it is unqualified.\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get>\n         <filter type=\"\
    subtree\">\n           <t:top xmlns:t=\"http://example.com/schema/1.2/stats\"\
    >\n             <t:interfaces>\n               <t:interface t:ifName=\"eth0\"\
    />\n             </t:interfaces>\n           </t:top>\n         </filter>\n  \
    \     </get>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n         <t:top xmlns:t=\"\
    http://example.com/schema/1.2/stats\">\n           <t:interfaces>\n          \
    \   <t:interface t:ifName=\"eth0\">\n               <t:ifInOctets>45621</t:ifInOctets>\n\
    \               <t:ifOutOctets>774344</t:ifOutOctets>\n             </t:interface>\n\
    \           </t:interfaces>\n         </t:top>\n       </data>\n     </rpc-reply>\n\
    \   If ifName were a child node instead of an attribute, then the\n   following\
    \ request would produce similar results.\n     <rpc message-id=\"101\"\n     \
    \     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <get>\n     \
    \    <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/stats\"\
    >\n             <interfaces>\n               <interface>\n                 <ifName>eth0</ifName>\n\
    \               </interface>\n             </interfaces>\n           </top>\n\
    \         </filter>\n       </get>\n     </rpc>\n"
- title: 7.  Protocol Operations
  contents:
  - "7.  Protocol Operations\n   The NETCONF protocol provides a small set of low-level\
    \ operations to\n   manage device configurations and retrieve device state information.\n\
    \   The base protocol provides operations to retrieve, configure, copy,\n   and\
    \ delete configuration datastores.  Additional operations are\n   provided, based\
    \ on the capabilities advertised by the device.\n   The base protocol includes\
    \ the following protocol operations:\n   o  get\n   o  get-config\n   o  edit-config\n\
    \   o  copy-config\n   o  delete-config\n   o  lock\n   o  unlock\n   o  close-session\n\
    \   o  kill-session\n   A protocol operation may fail for various reasons, including\n\
    \   \"operation not supported\".  An initiator should not assume that any\n  \
    \ operation will always succeed.  The return values in any RPC reply\n   should\
    \ be checked for error responses.\n   The syntax and XML encoding of the protocol\
    \ operations are formally\n   defined in the XML schema in Appendix B.  The following\
    \ sections\n   describe the semantics of each protocol operation.\n"
- title: 7.1.  <get-config>
  contents:
  - "7.1.  <get-config>\n   Description:\n      Retrieve all or part of a specified\
    \ configuration.\n   Parameters:\n      source:\n         Name of the configuration\
    \ datastore being queried, such as\n         <running/>.\n      filter:\n    \
    \     The filter element identifies the portions of the device\n         configuration\
    \ to retrieve.  If this element is unspecified, the\n         entire configuration\
    \ is returned.\n         The filter element may optionally contain a \"type\"\
    \ attribute.\n         This attribute indicates the type of filtering syntax used\n\
    \         within the filter element.  The default filtering mechanism in\n   \
    \      NETCONF is referred to as subtree filtering and is described in\n     \
    \    Section 6.  The value \"subtree\" explicitly identifies this type\n     \
    \    of filtering.\n         If the NETCONF peer supports the :xpath capability\n\
    \         (Section 8.9), the value \"xpath\" may be used to indicate that\n  \
    \       the select attribute on the filter element contains an XPath\n       \
    \  expression.\n   Positive Response:\n      If the device can satisfy the request,\
    \ the server sends an\n      <rpc-reply> element containing a <data> element with\
    \ the results\n      of the query.\n   Negative Response:\n      An <rpc-error>\
    \ element is included in the <rpc-reply> if the\n      request cannot be completed\
    \ for any reason.\n   Example: To retrieve the entire <users> subtree:\n     <rpc\
    \ message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <users/>\n           </top>\n         </filter>\n       </get-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <users>\n             <user>\n               <name>root</name>\n\
    \               <type>superuser</type>\n               <full-name>Charlie Root</full-name>\n\
    \               <company-info>\n                 <dept>1</dept>\n            \
    \     <id>1</id>\n               </company-info>\n             </user>\n     \
    \        <!-- additional <user> elements appear here... -->\n           </users>\n\
    \         </top>\n       </data>\n     </rpc-reply>\n   If the configuration is\
    \ available in multiple formats, such as XML\n   and text, an XML namespace can\
    \ be used to specify which format is\n   desired.  In the following example, the\
    \ client uses a specific\n   element (<config-text>) in a specific namespace to\
    \ indicate to the\n   server the desire to receive the configuration in an alternative\n\
    \   format.  The server may support any number of distinct formats or\n   views\
    \ into the configuration data, with the client using the <filter>\n   parameter\
    \ to select between them.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <filter type=\"subtree\">\n           <!-- request a text version of\
    \ the configuration -->\n           <config-text xmlns=\"http://example.com/text/1.2/config\"\
    />\n         </filter>\n       </get-config>\n     </rpc>\n     <rpc-reply message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <data>\n\
    \         <config-text xmlns=\"http://example.com/text/1.2/config\">\n       \
    \    <!-- configuration text... -->\n         </config-text>\n       </data>\n\
    \     </rpc-reply>\n      Section 6 contains additional examples of subtree filtering.\n"
- title: 7.2.  <edit-config>
  contents:
  - "7.2.  <edit-config>\n   Description:\n      The <edit-config> operation loads\
    \ all or part of a specified\n      configuration to the specified target configuration.\
    \  This\n      operation allows the new configuration to be expressed in several\n\
    \      ways, such as using a local file, a remote file, or inline.  If\n     \
    \ the target configuration does not exist, it will be created.  If a\n      NETCONF\
    \ peer supports the :url capability (Section 8.8), the <url>\n      element can\
    \ appear instead of the <config> parameter and should\n      identify a local\
    \ configuration file.\n      The device analyzes the source and target configurations\
    \ and\n      performs the requested changes.  The target configuration is not\n\
    \      necessarily replaced, as with the <copy-config> message.  Instead,\n  \
    \    the target configuration is changed in accordance with the\n      source's\
    \ data and requested operations.\n   Attributes:\n      operation:\n         Elements\
    \ in the <config> subtree may contain an \"operation\"\n         attribute.  The\
    \ attribute identifies the point in the\n         configuration to perform the\
    \ operation and MAY appear on\n         multiple elements throughout the <config>\
    \ subtree.\n         If the operation attribute is not specified, the configuration\n\
    \         is merged into the configuration datastore.\n         The operation\
    \ attribute has one of the following values:\n         merge: The configuration\
    \ data identified by the element\n            containing this attribute is merged\
    \ with the configuration\n            at the corresponding level in the configuration\
    \ datastore\n            identified by the target parameter.  This is the default\n\
    \            behavior.\n         replace: The configuration data identified by\
    \ the element\n            containing this attribute replaces any related configuration\n\
    \            in the configuration datastore identified by the target\n       \
    \     parameter.  Unlike a <copy-config> operation, which replaces\n         \
    \   the entire target configuration, only the configuration\n            actually\
    \ present in the config parameter is affected.\n         create: The configuration\
    \ data identified by the element\n            containing this attribute is added\
    \ to the configuration if\n            and only if the configuration data does\
    \ not already exist on\n            the device.  If the configuration data exists,\
    \ an\n            <rpc-error> element is returned with an <error-tag> value of\n\
    \            data-exists.\n         delete: The configuration data identified\
    \ by the element\n            containing this attribute is deleted in the configuration\n\
    \            datastore identified by the target parameter.\n   Parameters:\n \
    \     target:\n         Name of the configuration datastore being edited, such\
    \ as\n         <running/> or <candidate/>.\n      default-operation:\n       \
    \  Selects the default operation (as described in the \"operation\"\n        \
    \ attribute) for this <edit-config> request.  The default value\n         for\
    \ the default-operation parameter is \"merge\".\n         The default-operation\
    \ parameter is optional, but if provided,\n         it must have one of the following\
    \ values:\n         merge: The configuration data in the <config> parameter is\n\
    \            merged with the configuration at the corresponding level in\n   \
    \         the target datastore.  This is the default behavior.\n         replace:\
    \ The configuration data in the <config> parameter\n            completely replaces\
    \ the configuration in the target\n            datastore.  This is useful for\
    \ loading previously saved\n            configuration data.\n         none: The\
    \ target datastore is unaffected by the configuration\n            in the <config>\
    \ parameter, unless and until the incoming\n            configuration data uses\
    \ the \"operation\" attribute to request\n            a different operation. \
    \ If the configuration in the <config>\n            parameter contains data for\
    \ which there is not a\n            corresponding level in the target datastore,\
    \ an <rpc-error>\n            is returned with an <error-tag> value of data-missing.\n\
    \            Using \"none\" allows operations like \"delete\" to avoid\n     \
    \       unintentionally creating the parent hierarchy of the element\n       \
    \     to be deleted.\n      test-option:\n         The test-option element may\
    \ be specified only if the device\n         advertises the :validate capability\
    \ (Section 8.6).\n         The test-option element has one of the following values:\n\
    \         test-then-set: Perform a validation test before attempting to\n    \
    \        set.  If validation errors occur, do not perform the\n            <edit-config>\
    \ operation.  This is the default test-option.\n         set: Perform a set without\
    \ a validation test first.\n      error-option:\n         The error-option element\
    \ has one of the following values:\n         stop-on-error: Abort the edit-config\
    \ operation on first error.\n            This is the default error-option.\n \
    \        continue-on-error: Continue to process configuration data on\n      \
    \      error; error is recorded, and negative response is generated\n        \
    \    if any errors occur.\n         rollback-on-error: If an error condition occurs\
    \ such that an\n            error severity <rpc-error> element is generated, the\
    \ server\n            will stop processing the edit-config operation and restore\n\
    \            the specified configuration to its complete state at the\n      \
    \      start of this edit-config operation.  This option requires\n          \
    \  the server to support the :rollback-on-error capability\n            described\
    \ in Section 8.5.\n      config:\n         A hierarchy of configuration data as\
    \ defined by one of the\n         device's data models.  The contents MUST be\
    \ placed in an\n         appropriate namespace, to allow the device to detect\
    \ the\n         appropriate data model, and the contents MUST follow the\n   \
    \      constraints of that data model, as defined by its capability\n        \
    \ definition.  Capabilities are discussed in Section 8.\n   Positive Response:\n\
    \      If the device was able to satisfy the request, an <rpc-reply> is\n    \
    \  sent containing an <ok> element.\n   Negative Response:\n      An <rpc-error>\
    \ response is sent if the request cannot be completed\n      for any reason.\n\
    \   Example:\n      The <edit-config> examples in this section utilize a simple\
    \ data\n      model, in which multiple instances of the 'interface' element may\n\
    \      be present, and an instance is distinguished by the 'name' element\n  \
    \    within each 'interface' element.\n      Set the MTU to 1500 on an interface\
    \ named \"Ethernet0/0\" in the\n      running configuration:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <top xmlns=\"http://example.com/schema/1.2/config\">\n           \
    \  <interface>\n               <name>Ethernet0/0</name>\n               <mtu>1500</mtu>\n\
    \             </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n      Add an interface named \"Ethernet0/0\"\
    \ to the running configuration,\n      replacing any previous interface with that\
    \ name:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n    \
    \       <top xmlns=\"http://example.com/schema/1.2/config\">\n             <interface\
    \ xc:operation=\"replace\">\n               <name>Ethernet0/0</name>\n       \
    \        <mtu>1500</mtu>\n               <address>\n                 <name>192.0.2.4</name>\n\
    \                 <prefix-length>24</prefix-length>\n               </address>\n\
    \             </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n      Delete the configuration for an interface\
    \ named \"Ethernet0/0\" from\n      the running configuration:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <default-operation>none</default-operation>\n\
    \         <config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n    \
    \       <top xmlns=\"http://example.com/schema/1.2/config\">\n             <interface\
    \ xc:operation=\"delete\">\n               <name>Ethernet0/0</name>\n        \
    \     </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n      Delete interface 192.0.2.4 from an OSPF\
    \ area (other interfaces\n      configured in the same area are unaffected):\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <default-operation>none</default-operation>\n         <config xmlns:xc=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n           <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n             <protocols>\n               <ospf>\n                 <area>\n\
    \                   <name>0.0.0.0</name>\n                   <interfaces>\n  \
    \                   <interface xc:operation=\"delete\">\n                    \
    \   <name>192.0.2.4</name>\n                     </interface>\n              \
    \     </interfaces>\n                 </area>\n               </ospf>\n      \
    \       </protocols>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.3.  <copy-config>
  contents:
  - "7.3.  <copy-config>\n   Description:\n      Create or replace an entire configuration\
    \ datastore with the\n      contents of another complete configuration datastore.\
    \  If the\n      target datastore exists, it is overwritten.  Otherwise, a new\
    \ one\n      is created, if allowed.\n      If a NETCONF peer supports the :url\
    \ capability (Section 8.8), the\n      <url> element can appear as the <source>\
    \ or <target> parameter.\n      Even if it advertises the :writable-running capability,\
    \ a device\n      may choose not to support the <running/> configuration datastore\n\
    \      as the <target> parameter of a <copy-config> operation.  A device\n   \
    \   may choose not to support remote-to-remote copy operations, where\n      both\
    \ the <source> and <target> parameters use the <url> element.\n      If the source\
    \ and target parameters identify the same URL or\n      configuration datastore,\
    \ an error MUST be returned with an error-\n      tag containing invalid-value.\n\
    \   Parameters:\n      target:\n         Name of the configuration datastore to\
    \ use as the destination\n         of the copy operation.\n      source:\n   \
    \      Name of the configuration datastore to use as the source of the\n     \
    \    copy operation or the <config> element containing the\n         configuration\
    \ subtree to copy.\n   Positive Response:\n      If the device was able to satisfy\
    \ the request, an <rpc-reply> is\n      sent that includes an <ok> element.\n\
    \   Negative Response:\n      An <rpc-error> element is included within the <rpc-reply>\
    \ if the\n      request cannot be completed for any reason.\n   Example:\n   \
    \  <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <source>\n           <url>https://user@example.com:passphrase/cfg/new.txt</url>\n\
    \         </source>\n       </copy-config>\n     </rpc>\n     <rpc-reply message-id=\"\
    101\"\n         xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n\
    \     </rpc-reply>\n"
- title: 7.4.  <delete-config>
  contents:
  - "7.4.  <delete-config>\n   Description:\n      Delete a configuration datastore.\
    \  The <running> configuration\n      datastore cannot be deleted.\n      If a\
    \ NETCONF peer supports the :url capability (Section 8.8), the\n      <url> element\
    \ can appear as the <target> parameter.\n   Parameters:\n      target:\n     \
    \    Name of the configuration datastore to delete.\n   Positive Response:\n \
    \     If the device was able to satisfy the request, an <rpc-reply> is\n     \
    \ sent that includes an <ok> element.\n   Negative Response:\n      An <rpc-error>\
    \ element is included within the <rpc-reply> if the\n      request cannot be completed\
    \ for any reason.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <delete-config>\n         <target>\n\
    \           <startup/>\n         </target>\n       </delete-config>\n     </rpc>\n\
    \      <rpc-reply message-id=\"101\"\n           xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.5.  <lock>
  contents:
  - "7.5.  <lock>\n   Description:\n      The lock operation allows the client to\
    \ lock the configuration\n      system of a device.  Such locks are intended to\
    \ be short-lived and\n      allow a client to make a change without fear of interaction\
    \ with\n      other NETCONF clients, non-NETCONF clients (e.g., SNMP and command\n\
    \      line interface (CLI) scripts), and human users.\n      An attempt to lock\
    \ the configuration MUST fail if an existing\n      session or other entity holds\
    \ a lock on any portion of the lock\n      target.\n      When the lock is acquired,\
    \ the server MUST prevent any changes to\n      the locked resource other than\
    \ those requested by this session.\n      SNMP and CLI requests to modify the\
    \ resource MUST fail with an\n      appropriate error.\n      The duration of\
    \ the lock is defined as beginning when the lock is\n      acquired and lasting\
    \ until either the lock is released or the\n      NETCONF session closes.  The\
    \ session closure may be explicitly\n      performed by the client, or implicitly\
    \ performed by the server\n      based on criteria such as failure of the underlying\
    \ transport, or\n      simple inactivity timeout.  This criteria is dependent\
    \ on the\n      implementation and the underlying transport.\n      The lock operation\
    \ takes a mandatory parameter, target.  The\n      target parameter names the\
    \ configuration that will be locked.\n      When a lock is active, using the <edit-config>\
    \ operation on the\n      locked configuration and using the locked configuration\
    \ as a\n      target of the <copy-config> operation will be disallowed by any\n\
    \      other NETCONF session.  Additionally, the system will ensure that\n   \
    \   these locked configuration resources will not be modified by other\n     \
    \ non-NETCONF management operations such as SNMP and CLI.  The\n      <kill-session>\
    \ message (at the RPC layer) can be used to force the\n      release of a lock\
    \ owned by another NETCONF session.  It is beyond\n      the scope of this document\
    \ to define how to break locks held by\n      other entities.\n      A lock MUST\
    \ not be granted if either of the following conditions\n      is true:\n     \
    \ *  A lock is already held by any NETCONF session or another\n         entity.\n\
    \      *  The target configuration is <candidate>, it has already been\n     \
    \    modified, and these changes have not been committed or rolled\n         back.\n\
    \      The server MUST respond with either an <ok> element or an\n      <rpc-error>.\n\
    \      A lock will be released by the system if the session holding the\n    \
    \  lock is terminated for any reason.\n   Parameters:\n      target:\n       \
    \  Name of the configuration datastore to lock.\n   Positive Response:\n     \
    \ If the device was able to satisfy the request, an <rpc-reply> is\n      sent\
    \ that contains an <ok> element.\n   Negative Response:\n      An <rpc-error>\
    \ element is included in the <rpc-reply> if the\n      request cannot be completed\
    \ for any reason.\n      If the lock is already held, the <error-tag> element\
    \ will be\n      'lock-denied' and the <error-info> element will include the\n\
    \      <session-id> of the lock owner.  If the lock is held by a non-\n      NETCONF\
    \ entity, a <session-id> of 0 (zero) is included.  Note that\n      any other\
    \ entity performing a lock on even a partial piece of a\n      target will prevent\
    \ a NETCONF lock (which is global) from being\n      obtained on that target.\n\
    \   Example:\n      The following example shows a successful acquisition of a\
    \ lock.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <running/>\n         </target>\n\
    \       </lock>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/> <!-- lock succeeded -->\n\
    \     </rpc-reply>\n   Example:\n      The following example shows a failed attempt\
    \ to acquire a lock\n      when the lock is already in use.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <lock>\n\
    \         <target>\n           <running/>\n         </target>\n       </lock>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <rpc-error> <!-- lock failed -->\n         <error-type>protocol</error-type>\n\
    \         <error-tag>lock-denied</error-tag>\n         <error-severity>error</error-severity>\n\
    \         <error-message>\n           Lock failed, lock is already held\n    \
    \     </error-message>\n         <error-info>\n           <session-id>454</session-id>\n\
    \           <!-- lock is held by NETCONF session 454 -->\n         </error-info>\n\
    \       </rpc-error>\n     </rpc-reply>\n"
- title: 7.6.  <unlock>
  contents:
  - "7.6.  <unlock>\n   Description:\n      The unlock operation is used to release\
    \ a configuration lock,\n      previously obtained with the <lock> operation.\n\
    \      An unlock operation will not succeed if any of the following\n      conditions\
    \ are true:\n      *  the specified lock is not currently active\n      *  the\
    \ session issuing the <unlock> operation is not the same\n         session that\
    \ obtained the lock\n      The server MUST respond with either an <ok> element\
    \ or an\n      <rpc-error>.\n   Parameters:\n      target:\n         Name of the\
    \ configuration datastore to unlock.\n         A NETCONF client is not permitted\
    \ to unlock a configuration\n         datastore that it did not lock.\n   Positive\
    \ Response:\n      If the device was able to satisfy the request, an <rpc-reply>\
    \ is\n      sent that contains an <ok> element.\n   Negative Response:\n     \
    \ An <rpc-error> element is included in the <rpc-reply> if the\n      request\
    \ cannot be completed for any reason.\n   Example:\n     <rpc message-id=\"101\"\
    \n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <unlock>\n\
    \         <target>\n          <running/>\n         </target>\n       </unlock>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 7.7.  <get>
  contents:
  - "7.7.  <get>\n   Description:\n      Retrieve running configuration and device\
    \ state information.\n   Parameters:\n      filter:\n         This parameter specifies\
    \ the portion of the system\n         configuration and state data to retrieve.\
    \  If this parameter is\n         empty, all the device configuration and state\
    \ information is\n         returned.\n         The filter element may optionally\
    \ contain a 'type' attribute.\n         This attribute indicates the type of filtering\
    \ syntax used\n         within the filter element.  The default filtering mechanism\
    \ in\n         NETCONF is referred to as subtree filtering and is described in\n\
    \         Section 6.  The value 'subtree' explicitly identifies this type\n  \
    \       of filtering.\n         If the NETCONF peer supports the :xpath capability\n\
    \         (Section 8.9), the value \"xpath\" may be used to indicate that\n  \
    \       the select attribute of the filter element contains an XPath\n       \
    \  expression.\n   Positive Response:\n      If the device was able to satisfy\
    \ the request, an <rpc-reply> is\n      sent.  The <data> section contains the\
    \ appropriate subset.\n   Negative Response:\n      An <rpc-error> element is\
    \ included in the <rpc-reply> if the\n      request cannot be completed for any\
    \ reason.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get>\n         <filter type=\"subtree\">\n           <top xmlns=\"\
    http://example.com/schema/1.2/stats\">\n             <interfaces>\n          \
    \     <interface>\n                 <ifName>eth0</ifName>\n               </interface>\n\
    \             </interfaces>\n           </top>\n         </filter>\n       </get>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <data>\n         <top xmlns=\"http://example.com/schema/1.2/stats\"\
    >\n           <interfaces>\n             <interface>\n               <ifName>eth0</ifName>\n\
    \               <ifInOctets>45621</ifInOctets>\n               <ifOutOctets>774344</ifOutOctets>\n\
    \             </interface>\n           </interfaces>\n         </top>\n      \
    \ </data>\n     </rpc-reply>\n"
- title: 7.8.  <close-session>
  contents:
  - "7.8.  <close-session>\n   Description:\n      Request graceful termination of\
    \ a NETCONF session.\n      When a NETCONF server receives a <close-session> request,\
    \ it will\n      gracefully close the session.  The server will release any locks\n\
    \      and resources associated with the session and gracefully close any\n  \
    \    associated connections.  Any NETCONF requests received after a\n      <close-session>\
    \ request will be ignored.\n   Positive Response:\n      If the device was able\
    \ to satisfy the request, an <rpc-reply> is\n      sent that includes an <ok>\
    \ element.\n   Negative Response:\n      An <rpc-error> element is included in\
    \ the <rpc-reply> if the\n      request cannot be completed for any reason.\n\
    \   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <close-session/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n\
    \     </rpc-reply>\n"
- title: 7.9.  <kill-session>
  contents:
  - "7.9.  <kill-session>\n   Description:\n      Force the termination of a NETCONF\
    \ session.\n      When a NETCONF entity receives a <kill-session> request for\
    \ an\n      open session, it will abort any operations currently in process,\n\
    \      release any locks and resources associated with the session, and\n    \
    \  close any associated connections.\n      If a NETCONF server receives a <kill-session>\
    \ request while\n      processing a confirmed commit (Section 8.4), it must restore\
    \ the\n      configuration to its state before the confirmed commit was issued.\n\
    \      Otherwise, the <kill-session> operation does not roll back\n      configuration\
    \ or other device state modifications made by the\n      entity holding the lock.\n\
    \   Parameters:\n      session-id:\n         Session identifier of the NETCONF\
    \ session to be terminated.  If\n         this value is equal to the current session\
    \ ID, an\n         'invalid-value' error is returned.\n   Positive Response:\n\
    \      If the device was able to satisfy the request, an <rpc-reply> is\n    \
    \  sent that includes an <ok> element.\n   Negative Response:\n      An <rpc-error>\
    \ element is included in the <rpc-reply> if the\n      request cannot be completed\
    \ for any reason.\n   Example:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <kill-session>\n         <session-id>4</session-id>\n\
    \       </kill-session>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n   \
    \       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n   \
    \  </rpc-reply>\n"
- title: 8.  Capabilities
  contents:
  - "8.  Capabilities\n   This section defines a set of capabilities that a client\
    \ or a server\n   MAY implement.  Each peer advertises its capabilities by sending\
    \ them\n   during an initial capabilities exchange.  Each peer needs to\n   understand\
    \ only those capabilities that it might use and MUST ignore\n   any capability\
    \ received from the other peer that it does not require\n   or does not understand.\n\
    \   Additional capabilities can be defined using the template in\n   Appendix\
    \ C.  Future capability definitions may be published as\n   standards by standards\
    \ bodies or published as proprietary extensions.\n   A NETCONF capability is identified\
    \ with a URI.  The base capabilities\n   are defined using URNs following the\
    \ method described in RFC 3553\n   [6].  Capabilities defined in this document\
    \ have the following\n   format:\n      urn:ietf:params:netconf:capability:{name}:1.0\n\
    \   where {name} is the name of the capability.  Capabilities are often\n   referenced\
    \ in discussions and email using the shorthand :{name}.  For\n   example, the\
    \ foo capability would have the formal name\n   \"urn:ietf:params:netconf:capability:foo:1.0\"\
    \ and be called \":foo\".\n   The shorthand form MUST NOT be used inside the protocol.\n"
- title: 8.1.  Capabilities Exchange
  contents:
  - "8.1.  Capabilities Exchange\n   Capabilities are advertised in messages sent\
    \ by each peer during\n   session establishment.  When the NETCONF session is\
    \ opened, each peer\n   (both client and server) MUST send a <hello> element containing\
    \ a\n   list of that peer's capabilities.  Each peer MUST send at least the\n\
    \   base NETCONF capability, \"urn:ietf:params:netconf:base:1.0\".\n   A server\
    \ sending the <hello> element MUST include a <session-id>\n   element containing\
    \ the session ID for this NETCONF session.  A client\n   sending the <hello> element\
    \ MUST NOT include a <session-id> element.\n   A server receiving a <session-id>\
    \ element MUST NOT continue the\n   NETCONF session.  Similarly, a client that\
    \ does not receive a\n   <session-id> element in the server's <hello> message\
    \ MUST NOT\n   continue the NETCONF session.  In both cases, the underlying\n\
    \   transport should be closed.\n   In the following example, a server advertises\
    \ the base NETCONF\n   capability, one NETCONF capability defined in the base\
    \ NETCONF\n   document, and one implementation-specific capability.\n   <hello\
    \ xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <capabilities>\n  \
    \     <capability>\n         urn:ietf:params:netconf:base:1.0\n       </capability>\n\
    \       <capability>\n         urn:ietf:params:netconf:capability:startup:1.0\n\
    \       </capability>\n       <capability>\n         http://example.net/router/2.3/myfeature\n\
    \       </capability>\n     </capabilities>\n     <session-id>4</session-id>\n\
    \   </hello>\n   Each peer sends its <hello> element simultaneously as soon as\
    \ the\n   connection is open.  A peer MUST NOT wait to receive the capability\n\
    \   set from the other side before sending its own set.\n"
- title: 8.2.  Writable-Running Capability
  contents:
  - '8.2.  Writable-Running Capability

    '
- title: 8.2.1.  Description
  contents:
  - "8.2.1.  Description\n   The :writable-running capability indicates that the device\
    \ supports\n   direct writes to the <running> configuration datastore.  In other\n\
    \   words, the device supports edit-config and copy-config operations\n   where\
    \ the <running> configuration is the target.\n"
- title: 8.2.2.  Dependencies
  contents:
  - "8.2.2.  Dependencies\n   None.\n"
- title: 8.2.3.  Capability Identifier
  contents:
  - "8.2.3.  Capability Identifier\n   The :writable-running capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:writable-running:1.0\n"
- title: 8.2.4.  New Operations
  contents:
  - "8.2.4.  New Operations\n   None.\n"
- title: 8.2.5.  Modifications to Existing Operations
  contents:
  - '8.2.5.  Modifications to Existing Operations

    '
- title: 8.2.5.1.  <edit-config>
  contents:
  - "8.2.5.1.  <edit-config>\n   The :writable-running capability modifies the <edit-config>\
    \ operation\n   to accept the <running> element as a <target>.\n"
- title: 8.2.5.2.  <copy-config>
  contents:
  - "8.2.5.2.  <copy-config>\n   The :writable-running capability modifies the <copy-config>\
    \ operation\n   to accept the <running> element as a <target>.\n"
- title: 8.3.  Candidate Configuration Capability
  contents:
  - '8.3.  Candidate Configuration Capability

    '
- title: 8.3.1.  Description
  contents:
  - "8.3.1.  Description\n   The candidate configuration capability, :candidate, indicates\
    \ that\n   the device supports a candidate configuration datastore, which is\n\
    \   used to hold configuration data that can be manipulated without\n   impacting\
    \ the device's current configuration.  The candidate\n   configuration is a full\
    \ configuration data set that serves as a work\n   place for creating and manipulating\
    \ configuration data.  Additions,\n   deletions, and changes may be made to this\
    \ data to construct the\n   desired configuration data.  A <commit> operation\
    \ may be performed at\n   any time that causes the device's running configuration\
    \ to be set to\n   the value of the candidate configuration.\n   The <commit>\
    \ operation effectively sets the running configuration to\n   the current contents\
    \ of the candidate configuration.  While it could\n   be modeled as a simple copy,\
    \ it is done as a distinct operation for a\n   number of reasons.  In keeping\
    \ high-level concepts as first class\n   operations, we allow developers to see\
    \ more clearly both what the\n   client is requesting and what the server must\
    \ perform.  This keeps\n   the intentions more obvious, the special cases less\
    \ complex, and the\n   interactions between operations more straightforward. \
    \ For example,\n   the :confirmed-commit capability (Section 8.4) would make no\
    \ sense as\n   a \"copy confirmed\" operation.\n   The candidate configuration\
    \ may be shared among multiple sessions.\n   Unless a client has specific information\
    \ that the candidate\n   configuration is not shared, it must assume that other\
    \ sessions may\n   be able to modify the candidate configuration at the same time.\
    \  It\n   is therefore prudent for a client to lock the candidate configuration\n\
    \   before modifying it.\n   The client can discard any uncommitted changes to\
    \ the candidate\n   configuration by executing the <discard-changes> operation.\
    \  This\n   operation reverts the contents of the candidate configuration to the\n\
    \   contents of the running configuration.\n"
- title: 8.3.2.  Dependencies
  contents:
  - "8.3.2.  Dependencies\n   None.\n"
- title: 8.3.3.  Capability Identifier
  contents:
  - "8.3.3.  Capability Identifier\n   The :candidate capability is identified by\
    \ the following capability\n   string:\n      urn:ietf:params:netconf:capability:candidate:1.0\n"
- title: 8.3.4.  New Operations
  contents:
  - '8.3.4.  New Operations

    '
- title: 8.3.4.1.  <commit>
  contents:
  - "8.3.4.1.  <commit>\n   Description:\n         When a candidate configuration's\
    \ content is complete, the\n         configuration data can be committed, publishing\
    \ the data set to\n         the rest of the device and requesting the device to\
    \ conform to\n         the behavior described in the new configuration.\n    \
    \     To commit the candidate configuration as the device's new\n         current\
    \ configuration, use the <commit> operation.\n         The <commit> operation\
    \ instructs the device to implement the\n         configuration data contained\
    \ in the candidate configuration.\n         If the device is unable to commit\
    \ all of the changes in the\n         candidate configuration datastore, then\
    \ the running\n         configuration MUST remain unchanged.  If the device does\n\
    \         succeed in committing, the running configuration MUST be\n         updated\
    \ with the contents of the candidate configuration.\n         If the system does\
    \ not have the :candidate capability, the\n         <commit> operation is not\
    \ available.\n   Positive Response:\n         If the device was able to satisfy\
    \ the request, an <rpc-reply>\n         is sent that contains an <ok> element.\n\
    \   Negative Response:\n         An <rpc-error> element is included in the <rpc-reply>\
    \ if the\n         request cannot be completed for any reason.\n   Example:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <commit/>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n       \
    \   xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n     </rpc-reply>\n"
- title: 8.3.4.2.  <discard-changes>
  contents:
  - "8.3.4.2.  <discard-changes>\n   If the client decides that the candidate configuration\
    \ should not be\n   committed, the <discard-changes> operation can be used to\
    \ revert the\n   candidate configuration to the current running configuration.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <discard-changes/>\n     </rpc>\n   This operation discards any uncommitted\
    \ changes by resetting the\n   candidate configuration with the content of the\
    \ running\n   configuration.\n"
- title: 8.3.5.  Modifications to Existing Operations
  contents:
  - '8.3.5.  Modifications to Existing Operations

    '
- title: 8.3.5.1.  <get-config>, <edit-config>, <copy-config>, and <validate>
  contents:
  - "8.3.5.1.  <get-config>, <edit-config>, <copy-config>, and <validate>\n   The\
    \ candidate configuration can be used as a source or target of any\n   <get-config>,\
    \ <edit-config>, <copy-config>, or <validate> operation\n   as a <source> or <target>\
    \ parameter.  The <candidate> element is used\n   to indicate the candidate configuration:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config> <!-- any NETCONF operation -->\n         <source>\n   \
    \        <candidate/>\n         </source>\n       </get-config>\n     </rpc>\n"
- title: 8.3.5.2.  <lock> and <unlock>
  contents:
  - "8.3.5.2.  <lock> and <unlock>\n   The candidate configuration can be locked using\
    \ the <lock> operation\n   with the <candidate> element as the <target> parameter:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <candidate/>\n         </target>\n\
    \       </lock>\n     </rpc>\n   Similarly, the candidate configuration is unlocked\
    \ using the\n   <candidate> element as the <target> parameter:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <unlock>\n\
    \         <target>\n           <candidate/>\n         </target>\n       </unlock>\n\
    \     </rpc>\n   When a client fails with outstanding changes to the candidate\n\
    \   configuration, recovery can be difficult.  To facilitate easy\n   recovery,\
    \ any outstanding changes are discarded when the lock is\n   released, whether\
    \ explicitly with the <unlock> operation or\n   implicitly from session failure.\n"
- title: 8.4.  Confirmed Commit Capability
  contents:
  - '8.4.  Confirmed Commit Capability

    '
- title: 8.4.1.  Description
  contents:
  - "8.4.1.  Description\n   The :confirmed-commit capability indicates that the server\
    \ will\n   support the <confirmed> and <confirm-timeout> parameters for the\n\
    \   <commit> protocol operation.  See Section 8.3 for further details on\n   the\
    \ <commit> operation.\n   A confirmed commit operation MUST be reverted if a follow-up\
    \ commit\n   (called the \"confirming commit\") is not issued within 600 seconds\
    \ (10\n   minutes).  The timeout period can be adjusted with the\n   <confirm-timeout>\
    \ element.  The confirming commit can itself include\n   a <confirmed> parameter.\n\
    \   If the session issuing the confirmed commit is terminated for any\n   reason\
    \ before the confirm timeout expires, the server MUST restore\n   the configuration\
    \ to its state before the confirmed commit was\n   issued.\n   If the device reboots\
    \ for any reason before the confirm timeout\n   expires, the server MUST restore\
    \ the configuration to its state\n   before the confirmed commit was issued.\n\
    \   If a confirming commit is not issued, the device will revert its\n   configuration\
    \ to the state prior to the issuance of the confirmed\n   commit.  Note that any\
    \ commit operation, including a commit which\n   introduces additional changes\
    \ to the configuration, will serve as a\n   confirming commit.  Thus to cancel\
    \ a confirmed commit and revert\n   changes without waiting for the confirm timeout\
    \ to expire, the\n   manager can explicitly restore the configuration to its state\
    \ before\n   the confirmed commit was issued.\n   For shared configurations, this\
    \ feature can cause other configuration\n   changes (for example, via other NETCONF\
    \ sessions) to be inadvertently\n   altered or removed, unless the configuration\
    \ locking feature is used\n   (in other words, the lock is obtained before the\
    \ edit-config\n   operation is started).  Therefore, it is strongly suggested\
    \ that in\n   order to use this feature with shared configuration databases,\n\
    \   configuration locking should also be used.\n"
- title: 8.4.2.  Dependencies
  contents:
  - "8.4.2.  Dependencies\n   The :confirmed-commit capability is only relevant if\
    \ the :candidate\n   capability is also supported.\n"
- title: 8.4.3.  Capability Identifier
  contents:
  - "8.4.3.  Capability Identifier\n   The :confirmed-commit capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:confirmed-commit:1.0\n"
- title: 8.4.4.  New Operations
  contents:
  - "8.4.4.  New Operations\n   None.\n"
- title: 8.4.5.  Modifications to Existing Operations
  contents:
  - '8.4.5.  Modifications to Existing Operations

    '
- title: 8.4.5.1.  <commit>
  contents:
  - "8.4.5.1.  <commit>\n   The :confirmed-commit capability allows 2 additional parameters\
    \ to\n   the <commit> operation.\n   Parameters:\n      confirmed:\n         \
    \   Perform a confirmed commit operation.\n      confirm-timeout:\n          \
    \  Timeout period for confirmed commit, in seconds.  If\n            unspecified,\
    \ the confirm timeout defaults to 600 seconds.\n   Example:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <commit>\n\
    \         <confirmed/>\n         <confirm-timeout>120</confirm-timeout>\n    \
    \   </commit>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n     </rpc-reply>\n"
- title: 8.5.  Rollback on Error Capability
  contents:
  - '8.5.  Rollback on Error Capability

    '
- title: 8.5.1.  Description
  contents:
  - "8.5.1.  Description\n   This capability indicates that the server will support\
    \ the\n   'rollback-on-error' value in the <error-option> parameter to the\n \
    \  <edit-config> operation.\n   For shared configurations, this feature can cause\
    \ other configuration\n   changes (for example, via other NETCONF sessions) to\
    \ be inadvertently\n   altered or removed, unless the configuration locking feature\
    \ is used\n   (in other words, the lock is obtained before the edit-config\n \
    \  operation is started).  Therefore, it is strongly suggested that in\n   order\
    \ to use this feature with shared configuration databases,\n   configuration locking\
    \ also be used.\n"
- title: 8.5.2.  Dependencies
  contents:
  - "8.5.2.  Dependencies\n   None\n"
- title: 8.5.3.  Capability Identifier
  contents:
  - "8.5.3.  Capability Identifier\n   The :rollback-on-error capability is identified\
    \ by the following\n   capability string:\n      urn:ietf:params:netconf:capability:rollback-on-error:1.0\n"
- title: 8.5.4.  New Operations
  contents:
  - "8.5.4.  New Operations\n   None.\n"
- title: 8.5.5.  Modifications to Existing Operations
  contents:
  - '8.5.5.  Modifications to Existing Operations

    '
- title: 8.5.5.1.  <edit-config>
  contents:
  - "8.5.5.1.  <edit-config>\n   The :rollback-on-error capability allows the 'rollback-on-error'\n\
    \   value to the <error-option> parameter on the <edit-config> operation.\n  \
    \   <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <error-option>rollback-on-error</error-option>\n         <config>\n\
    \           <top xmlns=\"http://example.com/schema/1.2/config\">\n           \
    \  <interface>\n               <name>Ethernet0/0</name>\n               <mtu>100000</mtu>\n\
    \             </interface>\n           </top>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.6.  Validate Capability
  contents:
  - '8.6.  Validate Capability

    '
- title: 8.6.1.  Description
  contents:
  - "8.6.1.  Description\n   Validation consists of checking a candidate configuration\
    \ for\n   syntactical and semantic errors before applying the configuration to\n\
    \   the device.\n   If this capability is advertised, the device supports the\
    \ <validate>\n   protocol operation and checks at least for syntax errors.  In\n\
    \   addition, this capability supports the test-option parameter to the\n   <edit-config>\
    \ operation and, when it is provided, checks at least for\n   syntax errors.\n"
- title: 8.6.2.  Dependencies
  contents:
  - "8.6.2.  Dependencies\n   None.\n"
- title: 8.6.3.  Capability Identifier
  contents:
  - "8.6.3.  Capability Identifier\n   The :validate capability is identified by the\
    \ following capability\n   string:\n      urn:ietf:params:netconf:capability:validate:1.0\n"
- title: 8.6.4.  New Operations
  contents:
  - '8.6.4.  New Operations

    '
- title: 8.6.4.1.  <validate>
  contents:
  - "8.6.4.1.  <validate>\n   Description:\n         This protocol operation validates\
    \ the contents of the specified\n         configuration.\n   Parameters:\n   \
    \   source:\n            Name of the configuration datastore being validated,\
    \ such as\n            <candidate> or the <config> element containing the\n  \
    \          configuration subtree to validate.\n   Positive Response:\n       \
    \  If the device was able to satisfy the request, an <rpc-reply>\n         is\
    \ sent that contains an <ok> element.\n   Negative Response:\n         An <rpc-error>\
    \ element is included in the <rpc-reply> if the\n         request cannot be completed\
    \ for any reason.\n         A validate operation can fail for any of the following\
    \ reasons:\n         +  Syntax errors\n         +  Missing parameters\n      \
    \   +  References to undefined configuration data\n   Example:\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <validate>\n\
    \         <source>\n           <candidate/>\n         </source>\n       </validate>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <ok/>\n     </rpc-reply>\n"
- title: 8.7.  Distinct Startup Capability
  contents:
  - '8.7.  Distinct Startup Capability

    '
- title: 8.7.1.  Description
  contents:
  - "8.7.1.  Description\n   The device supports separate running and startup configuration\n\
    \   datastores.  Operations that affect the running configuration will\n   not\
    \ be automatically copied to the startup configuration.  An\n   explicit <copy-config>\
    \ operation from the <running> to the <startup>\n   must be invoked to update\
    \ the startup configuration to the current\n   contents of the running configuration.\
    \  NETCONF protocol operations\n   refer to the startup datastore using the <startup>\
    \ element.\n"
- title: 8.7.2.  Dependencies
  contents:
  - "8.7.2.  Dependencies\n   None.\n"
- title: 8.7.3.  Capability Identifier
  contents:
  - "8.7.3.  Capability Identifier\n   The :startup capability is identified by the\
    \ following capability\n   string:\n      urn:ietf:params:netconf:capability:startup:1.0\n"
- title: 8.7.4.  New Operations
  contents:
  - "8.7.4.  New Operations\n   None.\n"
- title: 8.7.5.  Modifications to Existing Operations
  contents:
  - '8.7.5.  Modifications to Existing Operations

    '
- title: 8.7.5.1.  General
  contents:
  - "8.7.5.1.  General\n   The :startup capability adds the <startup/> configuration\
    \ datastore\n   to arguments of several NETCONF operations.  The server MUST support\n\
    \   the following additional values:\n   +--------------------+--------------------------+-------------------+\n\
    \   | Operation          | Parameters               | Notes             |\n  \
    \ +--------------------+--------------------------+-------------------+\n   |\
    \ <get-config>       | <source>                 |                   |\n   |  \
    \                  |                          |                   |\n   | <copy-config>\
    \      | <source> <target>        |                   |\n   |                \
    \    |                          |                   |\n   | <lock>           \
    \  | <target>                 |                   |\n   |                    |\
    \                          |                   |\n   | <unlock>           | <target>\
    \                 |                   |\n   |                    |           \
    \               |                   |\n   | <validate>         | <source>    \
    \             | If :validate is   |\n   |                    |               \
    \           | advertised        |\n   +--------------------+--------------------------+-------------------+\n\
    \   To save the startup configuration, use the copy-config operation to\n   copy\
    \ the <running> configuration datastore to the <startup>\n   configuration datastore.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <target>\n           <startup/>\n         </target>\n       </copy-config>\n\
    \     </rpc>\n"
- title: 8.8.  URL Capability
  contents:
  - '8.8.  URL Capability

    '
- title: 8.8.1.  Description
  contents:
  - "8.8.1.  Description\n   The NETCONF peer has the ability to accept the <url>\
    \ element in\n   <source> and <target> parameters.  The capability is further\n\
    \   identified by URL arguments indicating the URL schemes supported.\n"
- title: 8.8.2.  Dependencies
  contents:
  - "8.8.2.  Dependencies\n   None.\n"
- title: 8.8.3.  Capability Identifier
  contents:
  - "8.8.3.  Capability Identifier\n   The :url capability is identified by the following\
    \ capability string:\n   urn:ietf:params:netconf:capability:url:1.0?scheme={name,...}\n\
    \   The :url capability URI MUST contain a \"scheme\" argument assigned a\n  \
    \ comma-separated list of scheme names indicating which schemes the\n   NETCONF\
    \ peer supports.  For example:\n      urn:ietf:params:netconf:capability:url:1.0?scheme=http,ftp,file\n"
- title: 8.8.4.  New Operations
  contents:
  - "8.8.4.  New Operations\n   None.\n"
- title: 8.8.5.  Modifications to Existing Operations
  contents:
  - '8.8.5.  Modifications to Existing Operations

    '
- title: 8.8.5.1.  <edit-config>
  contents:
  - "8.8.5.1.  <edit-config>\n   The :url capability modifies the <edit-config> operation\
    \ to accept\n   the <url> element as an alternative to the <config> parameter.\
    \  If\n   the <url> element is specified, then it should identify a local\n  \
    \ configuration file.\n"
- title: 8.8.5.2.  <copy-config>
  contents:
  - "8.8.5.2.  <copy-config>\n   The :url capability modifies the <copy-config> operation\
    \ to accept\n   the <url> element as the value of the <source> and the <target>\n\
    \   parameters.\n"
- title: 8.8.5.3.  <delete-config>
  contents:
  - "8.8.5.3.  <delete-config>\n   The :url capability modifies the <delete-config>\
    \ operation to accept\n   the <url> element as the value of the <target> parameters.\
    \  If this\n   parameter contains a URL, then it should identify a local\n   configuration\
    \ file.\n"
- title: 8.8.5.4.  <validate>
  contents:
  - "8.8.5.4.  <validate>\n   The :url capability modifies the <validate> operation\
    \ to accept the\n   <url> element as the value of the <source> parameter.\n"
- title: 8.9.  XPath Capability
  contents:
  - '8.9.  XPath Capability

    '
- title: 8.9.1.  Description
  contents:
  - "8.9.1.  Description\n   The XPath capability indicates that the NETCONF peer\
    \ supports the use\n   of XPath expressions in the <filter> element.  XPath is\
    \ described in\n   [2].\n   The XPath expression must return a node-set.\n   The\
    \ XPath expression is evaluated in a context where the context node\n   is the\
    \ root node, and the set of namespace declarations are those in\n   scope on the\
    \ filter element, including the default namespace.\n"
- title: 8.9.2.  Dependencies
  contents:
  - "8.9.2.  Dependencies\n   None.\n"
- title: 8.9.3.  Capability Identifier
  contents:
  - "8.9.3.  Capability Identifier\n   The :xpath capability is identified by the\
    \ following capability\n   string:\n      urn:ietf:params:netconf:capability:xpath:1.0\n"
- title: 8.9.4.  New Operations
  contents:
  - "8.9.4.  New Operations\n   None.\n"
- title: 8.9.5.  Modifications to Existing Operations
  contents:
  - '8.9.5.  Modifications to Existing Operations

    '
- title: 8.9.5.1.  <get-config> and <get>
  contents:
  - "8.9.5.1.  <get-config> and <get>\n   The :xpath capability modifies the <get>\
    \ and <get-config> operations\n   to accept the value \"xpath\" in the type attribute\
    \ of the filter\n   element.  When the type attribute is set to \"xpath\", a select\n\
    \   attribute MUST be present on the filter element.  The select\n   attribute\
    \ will be treated as an XPath expression and used to filter\n   the returned data.\
    \  The filter element itself MUST be empty in this\n   case.\n   For example:\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <get-config>\n         <source>\n           <running/>\n         </source>\n\
    \         <!-- get the user named fred -->\n         <filter type=\"xpath\" select=\"\
    top/users/user[name='fred']\"/>\n        </get-config>\n     </rpc>\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document does not specify an authorization\
    \ scheme, as such a\n   scheme should be tied to a meta-data model or a data model.\n\
    \   Implementors SHOULD provide a comprehensive authorization scheme with\n  \
    \ NETCONF.\n   Authorization of individual users via the NETCONF server may or\
    \ may\n   not map 1:1 to other interfaces.  First, the data models may be\n  \
    \ incompatible.  Second, it may be desirable to authorize based on\n   mechanisms\
    \ available in the transport protocol layer (TELNET, SSH,\n   etc).\n   In addition,\
    \ operations on configurations may have unintended\n   consequences if those operations\
    \ are also not guarded by the global\n   lock on the files or objects being operated\
    \ upon.  For instance, a\n   partially complete access list could be committed\
    \ from a candidate\n   configuration unbeknownst to the owner of the lock of the\
    \ candidate\n   configuration, leading to either an insecure or inaccessible device\n\
    \   if the lock on the candidate configuration does not also apply to the\n  \
    \ <copy-config> operation when applied to it.\n   Configuration information is\
    \ by its very nature sensitive.  Its\n   transmission in the clear and without\
    \ integrity checking leaves\n   devices open to classic eavesdropping attacks.\
    \  Configuration\n   information often contains passwords, user names, service\n\
    \   descriptions, and topological information, all of which are\n   sensitive.\
    \  Because of this, this protocol should be implemented\n   carefully with adequate\
    \ attention to all manner of attack one might\n   expect to experience with other\
    \ management interfaces.\n   The protocol, therefore, must minimally support options\
    \ for both\n   confidentiality and authentication.  It is anticipated that the\n\
    \   underlying protocol (SSH, BEEP, etc) will provide for both\n   confidentiality\
    \ and authentication, as is required.  It is further\n   expected that the identity\
    \ of each end of a NETCONF session will be\n   available to the other in order\
    \ to determine authorization for any\n   given request.  One could also easily\
    \ envision additional\n   information, such as transport and encryption methods,\
    \ being made\n   available for purposes of authorization.  NETCONF itself provide\
    \ no\n   means to re-authenticate, much less authenticate.  All such actions\n\
    \   occur at lower layers.\n   Different environments may well allow different\
    \ rights prior to and\n   then after authentication.  Thus, an authorization model\
    \ is not\n   specified in this document.  When an operation is not properly\n\
    \   authorized, a simple \"access denied\" is sufficient.  Note that\n   authorization\
    \ information may be exchanged in the form of\n   configuration information, which\
    \ is all the more reason to ensure the\n   security of the connection.\n   That\
    \ having been said, it is important to recognize that some\n   operations are\
    \ clearly more sensitive by nature than others.  For\n   instance, <copy-config>\
    \ to the startup or running configurations is\n   clearly not a normal provisioning\
    \ operation, whereas <edit-config>\n   is.  Such global operations MUST disallow\
    \ the changing of information\n   that an individual does not have authorization\
    \ to perform.  For\n   example, if a user A is not allowed to configure an IP\
    \ address on an\n   interface but user B has configured an IP address on an interface\
    \ in\n   the <candidate> configuration, user A must not be allowed to commit\n\
    \   the <candidate> configuration.\n   Similarly, just because someone says \"\
    go write a configuration\n   through the URL capability at a particular place\"\
    , this does not mean\n   that an element should do it without proper authorization.\n\
    \   The <lock> operation will demonstrate that NETCONF is intended for\n   use\
    \ by systems that have at least some trust of the administrator.\n   As specified\
    \ in this document, it is possible to lock portions of a\n   configuration that\
    \ a principal might not otherwise have access to.\n   After all, the entire configuration\
    \ is locked.  To mitigate this\n   problem, there are two approaches.  It is possible\
    \ to kill another\n   NETCONF session programmatically from within NETCONF if\
    \ one knows the\n   session identifier of the offending session.  The other possible\
    \ way\n   to break a lock is to provide an function within the device's native\n\
    \   user interface.  These two mechanisms suffer from a race condition\n   that\
    \ may be ameliorated by removing the offending user from an AAA\n   server.  However,\
    \ such a solution is not useful in all deployment\n   scenarios, such as those\
    \ where SSH public/private key pairs are used.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  NETCONF XML Namespace
  contents:
  - "10.1.  NETCONF XML Namespace\n   This document registers a URI for the NETCONF\
    \ XML namespace in the\n   IETF XML registry [7].\n   Following the format in\
    \ RFC 3688, IANA has made the following\n   registration.\n   URI: urn:ietf:params:xml:ns:netconf:base:1.0\n\
    \   Registrant Contact: The IESG.\n   XML: N/A, the requested URI is an XML namespace.\n"
- title: 10.2.  NETCONF XML Schema
  contents:
  - "10.2.  NETCONF XML Schema\n   This document registers a URI for the NETCONF XML\
    \ schema in the IETF\n   XML registry [7].\n   Following the format in RFC 3688,\
    \ IANA has made the following\n   registration.\n   URI: urn:ietf:params:xml:schema:netconf\n\
    \   Registrant Contact: The IESG.\n   XML: Appendix B of this document.\n"
- title: 10.3.  NETCONF Capability URNs
  contents:
  - "10.3.  NETCONF Capability URNs\n   This document creates a registry that allocates\
    \ NETCONF capability\n   identifiers.  Additions to the registry require IETF\
    \ Standards\n   Action.\n   The initial content of the registry contains the capability\
    \ URNs\n   defined in Section 8.\n   Following the guidelines in RFC 3553 [6],\
    \ IANA assigned a NETCONF\n   sub-namespace as follows:\n   Registry name: netconf\n\
    \   Specification: Section 8 of this document.\n   Repository: The following table.\n\
    \   +--------------------+----------------------------------------------+\n  \
    \ | Index              | Capability Identifier                        |\n   +--------------------+----------------------------------------------+\n\
    \   | :writable-running  | urn:ietf:params:netconf:capability:writable- |\n  \
    \ |                    | running:1.0                                  |\n   |\
    \                    |                                              |\n   | :candidate\
    \         | urn:ietf:params:netconf:capability:candidate |\n   |             \
    \       | :1.0                                         |\n   |               \
    \     |                                              |\n   | :confirmed-commit\
    \  | urn:ietf:params:netconf:capability:confirmed |\n   |                    |\
    \ -commit:1.0                                  |\n   |                    |  \
    \                                            |\n   | :rollback-on-error | urn:ietf:params:netconf:capability:rollback-\
    \ |\n   |                    | on-error:1.0                                 |\n\
    \   |                    |                                              |\n  \
    \ | :validate          | urn:ietf:params:netconf:capability:validate: |\n   |\
    \                    | 1.0                                          |\n   |  \
    \                  |                                              |\n   | :startup\
    \           | urn:ietf:params:netconf:capability:startup:1 |\n   |           \
    \         | .0                                           |\n   |             \
    \       |                                              |\n   | :url          \
    \     | urn:ietf:params:netconf:capability:url:1.0   |\n   |                 \
    \   |                                              |\n   | :xpath            \
    \ | urn:ietf:params:netconf:capability:xpath:1.0 |\n   +--------------------+----------------------------------------------+\n\
    \   Index value: The capability name.\n"
- title: 11.  Authors and Acknowledgements
  contents:
  - "11.  Authors and Acknowledgements\n   This document was written by:\n      Andy\
    \ Bierman\n      Ken Crozier, Cisco Systems\n      Rob Enns, Juniper Networks\n\
    \      Ted Goddard, IceSoft\n      Eliot Lear, Cisco Systems\n      Phil Shafer,\
    \ Juniper Networks\n      Steve Waldbusser\n      Margaret Wasserman, ThingMagic\n\
    \   The authors would like to acknowledge the members of the NETCONF\n   working\
    \ group.  In particular, we would like to thank Wes Hardaker\n   for his persistance\
    \ and patience in assisting us with security\n   considerations.  We would also\
    \ like to thank Randy Presuhn, Sharon\n   Chisholm, Juergen Schoenwalder, Glenn\
    \ Waters, David Perkins, Weijing\n   Chen, Simon Leinen, Keith Allen, and Dave\
    \ Harrington for all of their\n   valuable advice.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [1]  Sperberg-McQueen, C., Paoli, J., Maler,\
    \ E., and T. Bray,\n        \"Extensible Markup Language (XML) 1.0 (Second Edition)\"\
    , World\n        Wide Web Consortium, http://www.w3.org/TR/2000/REC-xml-20001006,\n\
    \        October 2000.\n   [2]  Clark, J. and S. DeRose, \"XML Path Language (XPath)\
    \ Version\n        1.0\", World Wide Web Consortium Recommendation,\n        http://www.w3.org/TR/1999/REC-xpath-19991116,\
    \ November 1999.\n   [3]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  Wasserman,\
    \ M. and T. Goddard, \"Using the NETCONF Configuration\n        Protocol over\
    \ Secure SHell (SSH)\", RFC 4742, December 2006.\n   [5]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n        Resource Identifier (URI): Generic Syntax\"\
    , STD 66, RFC 3986,\n        January 2005.\n   [6]  Mealling, M., Masinter, L.,\
    \ Hardie, T., and G. Klyne, \"An IETF\n        URN Sub-namespace for Registered\
    \ Protocol Parameters\", BCP 73,\n        RFC 3553, June 2003.\n   [7]  Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n        January 2004.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [8]   Clark, J., \"XSL Transformations (XSLT)\
    \ Version 1.0\", World Wide\n         Web Consortium Recommendation, http://www.w3.org/TR/1999/REC-\n\
    \         xslt-19991116, November 1999.\n   [9]   Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security (TLS)\n         Protocol Version 1.1\", RFC 4346,\
    \ April 2006.\n   [10]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Protocol\n\
    \         Architecture\", RFC 4251, January 2006.\n   [11]  Rigney, C., Willens,\
    \ S., Rubens, A., and W. Simpson, \"Remote\n         Authentication Dial In User\
    \ Service (RADIUS)\", RFC 2865,\n         June 2000.\n   [12]  Hollenbeck, S.,\
    \ Rose, M., and L. Masinter, \"Guidelines for the\n         Use of Extensible\
    \ Markup Language (XML) within IETF Protocols\",\n         BCP 70, RFC 3470, January\
    \ 2003.\n"
- title: Appendix A.  NETCONF Error List
  contents:
  - "Appendix A.  NETCONF Error List\n   Tag:         in-use\n   Error-type:  protocol,\
    \ application\n   Severity:    error\n   Error-info:  none\n   Description: The\
    \ request requires a resource that already in use.\n   Tag:         invalid-value\n\
    \   Error-type:  protocol, application\n   Severity:    error\n   Error-info:\
    \  none\n   Description: The request specifies an unacceptable value for one\n\
    \                or more parameters.\n   Tag:         too-big\n   Error-type:\
    \  transport, rpc, protocol, application\n   Severity:    error\n   Error-info:\
    \  none\n   Description: The request or response (that would be generated) is\
    \ too\n                large for the implementation to handle.\n   Tag:      \
    \   missing-attribute\n   Error-type:  rpc, protocol, application\n   Severity:\
    \    error\n   Error-info:  <bad-attribute> : name of the missing attribute\n\
    \                <bad-element> : name of the element that should\n           \
    \     contain the missing attribute\n   Description: An expected attribute is\
    \ missing.\n   Tag:         bad-attribute\n   Error-type:  rpc, protocol, application\n\
    \   Severity:    error\n   Error-info:  <bad-attribute> : name of the attribute\
    \ w/ bad value\n                <bad-element> : name of the element that contains\n\
    \                the attribute with the bad value\n   Description: An attribute\
    \ value is not correct; e.g., wrong type,\n                out of range, pattern\
    \ mismatch.\n   Tag:         unknown-attribute\n   Error-type:  rpc, protocol,\
    \ application\n   Severity:    error\n   Error-info:  <bad-attribute> : name of\
    \ the unexpected attribute\n                <bad-element> : name of the element\
    \ that contains\n                the unexpected attribute\n   Description: An\
    \ unexpected attribute is present.\n   Tag:         missing-element\n   Error-type:\
    \  rpc, protocol, application\n   Severity:    error\n   Error-info:  <bad-element>\
    \ : name of the missing element\n   Description: An expected element is missing.\n\
    \   Tag:         bad-element\n   Error-type:  rpc, protocol, application\n   Severity:\
    \    error\n   Error-info:  <bad-element> : name of the element w/ bad value\n\
    \   Description: An element value is not correct; e.g., wrong type,\n        \
    \        out of range, pattern mismatch.\n   Tag:         unknown-element\n  \
    \ Error-type:  rpc, protocol, application\n   Severity:    error\n   Error-info:\
    \  <bad-element> : name of the unexpected element\n   Description: An unexpected\
    \ element is present.\n   Tag:         unknown-namespace\n   Error-type:  rpc,\
    \ protocol, application\n   Severity:    error\n   Error-info:  <bad-element>\
    \ : name of the element that contains\n                the unexpected namespace\n\
    \                <bad-namespace> : name of the unexpected namespace\n   Description:\
    \ An unexpected namespace is present.\n   Tag:         access-denied\n   Error-type:\
    \  rpc, protocol, application\n   Severity:    error\n   Error-info:  none\n \
    \  Description: Access to the requested RPC, protocol operation,\n           \
    \     or data model is denied because authorization failed.\n   Tag:         lock-denied\n\
    \   Error-type:  protocol\n   Severity:    error\n   Error-info:  <session-id>\
    \ : session ID of session holding the\n                requested lock, or zero\
    \ to indicate a non-NETCONF\n                entity holds the lock\n   Description:\
    \ Access to the requested lock is denied because the\n                lock is\
    \ currently held by another entity.\n   Tag:         resource-denied\n   Error-type:\
    \  transport, rpc, protocol, application\n   Severity:    error\n   Error-info:\
    \  none\n   Description: Request could not be completed because of insufficient\n\
    \                resources.\n   Tag:         rollback-failed\n   Error-type: \
    \ protocol, application\n   Severity:    error\n   Error-info:  none\n   Description:\
    \ Request to rollback some configuration change (via\n                rollback-on-error\
    \ or discard-changes operations) was\n                not completed for some reason.\n\
    \   Tag:         data-exists\n   Error-type:  application\n   Severity:    error\n\
    \   Error-info:  none\n   Description: Request could not be completed because\
    \ the relevant\n                data model content already exists. For example,\n\
    \                a 'create' operation was attempted on data that\n           \
    \     already exists.\n   Tag:         data-missing\n   Error-type:  application\n\
    \   Severity:    error\n   Error-info:  none\n   Description: Request could not\
    \ be completed because the relevant\n                data model content does not\
    \ exist.  For example,\n                a 'replace' or 'delete' operation was\
    \ attempted on\n                data that does not exist.\n   Tag:         operation-not-supported\n\
    \   Error-type:  rpc, protocol, application\n   Severity:    error\n   Error-info:\
    \  none\n   Description: Request could not be completed because the requested\n\
    \                operation is not supported by this implementation.\n   Tag: \
    \        operation-failed\n   Error-type:  rpc, protocol, application\n   Severity:\
    \    error\n   Error-info:  none\n   Description: Request could not be completed\
    \ because the requested\n                operation failed for some reason not\
    \ covered by\n                any other error condition.\n   Tag:         partial-operation\n\
    \   Error-type:  application\n   Severity:    error\n   Error-info:  <ok-element>\
    \ : identifies an element in the data model\n                for which the requested\
    \ operation has been completed\n                for that node and all its child\
    \ nodes.  This element\n                can appear zero or more times in the <error-info>\n\
    \                container.\n                <err-element> : identifies an element\
    \ in the data model\n                for which the requested operation has failed\
    \ for that\n                node and all its child nodes.  This element\n    \
    \            can appear zero or more times in the <error-info>\n             \
    \   container.\n                <noop-element> : identifies an element in the\
    \ data model\n                for which the requested operation was not attempted\
    \ for\n                that node and all its child nodes.  This element\n    \
    \            can appear zero or more times in the <error-info>\n             \
    \   container.\n   Description: Some part of the requested operation failed or\
    \ was\n                not attempted for some reason.  Full cleanup has\n    \
    \            not been performed (e.g., rollback not supported)\n             \
    \   by the server.  The error-info container is used\n                to identify\
    \ which portions of the application\n                data model content for which\
    \ the requested operation\n                has succeeded (<ok-element>), failed\
    \ (<bad-element>),\n                or not been attempted (<noop-element>).\n"
- title: Appendix B.  XML Schema for NETCONF RPC and Protocol Operations
  contents:
  - "Appendix B.  XML Schema for NETCONF RPC and Protocol Operations\n   BEGIN\n \
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n              xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n          \
    \    targetNamespace=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n           \
    \   elementFormDefault=\"qualified\"\n              attributeFormDefault=\"unqualified\"\
    \n              xml:lang=\"en\">\n     <!--\n       import standard XML definitions\n\
    \       -->\n     <xs:import namespace=\"http://www.w3.org/XML/1998/namespace\"\
    \n                schemaLocation=\"http://www.w3.org/2001/xml.xsd\">\n       <xs:annotation>\n\
    \         <xs:documentation>\n           This import accesses the xml: attribute\
    \ groups for the\n           xml:lang as declared on the error-message element.\n\
    \         </xs:documentation>\n       </xs:annotation>\n     </xs:import>\n  \
    \   <!--\n       message-id attribute\n       -->\n     <xs:simpleType name=\"\
    messageIdType\">\n       <xs:restriction base=\"xs:string\">\n         <xs:maxLength\
    \ value=\"4095\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <!--\n\
    \       Types used for session-id\n     -->\n     <xs:simpleType name=\"SessionId\"\
    >\n       <xs:restriction base=\"xs:unsignedInt\">\n         <xs:minInclusive\
    \ value=\"1\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType\
    \ name=\"SessionIdOrZero\">\n       <xs:restriction base=\"xs:unsignedInt\"/>\n\
    \     </xs:simpleType>\n     <!--\n       <rpc> element\n       -->\n     <xs:complexType\
    \ name=\"rpcType\">\n       <xs:sequence>\n         <xs:element ref=\"rpcOperation\"\
    />\n       </xs:sequence>\n       <xs:attribute name=\"message-id\" type=\"messageIdType\"\
    \n         use=\"required\"/>\n       <!--\n         Arbitrary attributes can\
    \ be supplied with <rpc> element.\n       -->\n       <xs:anyAttribute processContents=\"\
    lax\"/>\n     </xs:complexType>\n     <xs:element name=\"rpc\" type=\"rpcType\"\
    />\n     <!--\n       data types and elements used to construct rpc-errors\n \
    \      -->\n     <xs:simpleType name=\"ErrorType\">\n       <xs:restriction base=\"\
    xs:string\">\n         <xs:enumeration value=\"transport\"/>\n         <xs:enumeration\
    \ value=\"rpc\"/>\n         <xs:enumeration value=\"protocol\"/>\n         <xs:enumeration\
    \ value=\"application\"/>\n       </xs:restriction>\n     </xs:simpleType>\n \
    \    <xs:simpleType name=\"ErrorTag\">\n       <xs:restriction base=\"xs:string\"\
    >\n         <xs:enumeration value=\"in-use\"/>\n         <xs:enumeration value=\"\
    invalid-value\"/>\n         <xs:enumeration value=\"too-big\"/>\n         <xs:enumeration\
    \ value=\"missing-attribute\"/>\n         <xs:enumeration value=\"bad-attribute\"\
    />\n         <xs:enumeration value=\"unknown-attribute\"/>\n         <xs:enumeration\
    \ value=\"missing-element\"/>\n         <xs:enumeration value=\"bad-element\"\
    />\n         <xs:enumeration value=\"unknown-element\"/>\n         <xs:enumeration\
    \ value=\"unknown-namespace\"/>\n         <xs:enumeration value=\"access-denied\"\
    />\n         <xs:enumeration value=\"lock-denied\"/>\n         <xs:enumeration\
    \ value=\"resource-denied\"/>\n         <xs:enumeration value=\"rollback-failed\"\
    />\n         <xs:enumeration value=\"data-exists\"/>\n         <xs:enumeration\
    \ value=\"data-missing\"/>\n         <xs:enumeration value=\"operation-not-supported\"\
    />\n         <xs:enumeration value=\"operation-failed\"/>\n         <xs:enumeration\
    \ value=\"partial-operation\"/>\n       </xs:restriction>\n     </xs:simpleType>\n\
    \     <xs:simpleType name=\"ErrorSeverity\">\n       <xs:restriction base=\"xs:string\"\
    >\n         <xs:enumeration value=\"error\"/>\n         <xs:enumeration value=\"\
    warning\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:complexType\
    \ name=\"errorInfoType\">\n       <xs:sequence>\n         <xs:choice>\n      \
    \     <xs:element name=\"session-id\" type=\"SessionIdOrZero\"/>\n           <xs:sequence\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n             <xs:sequence>\n     \
    \          <xs:element name=\"bad-attribute\" type=\"xs:QName\"\n            \
    \     minOccurs=\"0\" maxOccurs=\"1\"/>\n               <xs:element name=\"bad-element\"\
    \ type=\"xs:QName\"\n                 minOccurs=\"0\" maxOccurs=\"1\"/>\n    \
    \           <xs:element name=\"ok-element\" type=\"xs:QName\"\n              \
    \   minOccurs=\"0\" maxOccurs=\"1\"/>\n               <xs:element name=\"err-element\"\
    \ type=\"xs:QName\"\n                 minOccurs=\"0\" maxOccurs=\"1\"/>\n    \
    \           <xs:element name=\"noop-element\" type=\"xs:QName\"\n            \
    \     minOccurs=\"0\" maxOccurs=\"1\"/>\n               <xs:element name=\"bad-namespace\"\
    \ type=\"xs:QName\"\n                 minOccurs=\"0\" maxOccurs=\"1\"/>\n    \
    \         </xs:sequence>\n           </xs:sequence>\n         </xs:choice>\n \
    \        <!-- elements from any other namespace are also allowed\n           \
    \   to follow the NETCONF elements -->\n         <xs:any namespace=\"##other\"\
    \n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"rpcErrorType\">\n       <xs:sequence>\n\
    \         <xs:element name=\"error-type\" type=\"ErrorType\"/>\n         <xs:element\
    \ name=\"error-tag\" type=\"ErrorTag\"/>\n         <xs:element name=\"error-severity\"\
    \ type=\"ErrorSeverity\"/>\n         <xs:element name=\"error-app-tag\" type=\"\
    xs:string\"\n                     minOccurs=\"0\"/>\n         <xs:element name=\"\
    error-path\" type=\"xs:string\" minOccurs=\"0\"/>\n         <xs:element name=\"\
    error-message\" minOccurs=\"0\">\n           <xs:complexType>\n             <xs:simpleContent>\n\
    \               <xs:extension base=\"xs:string\">\n                 <xs:attribute\
    \ ref=\"xml:lang\" use=\"optional\"/>\n               </xs:extension>\n      \
    \       </xs:simpleContent>\n           </xs:complexType>\n         </xs:element>\n\
    \         <xs:element name=\"error-info\" type=\"errorInfoType\"\n           minOccurs=\"\
    0\"/>\n       </xs:sequence>\n     </xs:complexType>\n     <!--\n       <rpc-reply>\
    \ element\n       -->\n     <xs:complexType name=\"rpcReplyType\">\n       <xs:choice>\n\
    \         <xs:element name=\"ok\"/>\n         <xs:group ref=\"rpcResponse\"/>\n\
    \       </xs:choice>\n       <xs:attribute name=\"message-id\" type=\"messageIdType\"\
    \n         use=\"optional\"/>\n       <!--\n         Any attributes supplied with\
    \ <rpc> element must be returned\n         on <rpc-reply>.\n       -->\n     \
    \  <xs:anyAttribute processContents=\"lax\"/>\n     </xs:complexType>\n     <xs:group\
    \ name=\"rpcResponse\">\n       <xs:sequence>\n         <xs:element name=\"rpc-error\"\
    \ type=\"rpcErrorType\"\n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\
    \         <xs:element name=\"data\" type=\"dataInlineType\" minOccurs=\"0\"/>\n\
    \       </xs:sequence>\n     </xs:group>\n     <xs:element name=\"rpc-reply\"\
    \ type=\"rpcReplyType\"/>\n     <!--\n       Type for <test-option> parameter\
    \ to <edit-config>\n       -->\n     <xs:simpleType name=\"testOptionType\">\n\
    \       <xs:restriction base=\"xs:string\">\n         <xs:enumeration value=\"\
    test-then-set\"/>\n         <xs:enumeration value=\"set\"/>\n       </xs:restriction>\n\
    \     </xs:simpleType>\n     <!--\n       Type for <error-option> parameter to\
    \ <edit-config>\n       -->\n     <xs:simpleType name=\"errorOptionType\">\n \
    \      <xs:restriction base=\"xs:string\">\n         <xs:annotation>\n       \
    \    <xs:documentation>\n             Use of the rollback-on-error value requires\n\
    \             the :rollback-on-error capability.\n           </xs:documentation>\n\
    \         </xs:annotation>\n         <xs:enumeration value=\"stop-on-error\"/>\n\
    \         <xs:enumeration value=\"continue-on-error\"/>\n         <xs:enumeration\
    \ value=\"rollback-on-error\"/>\n       </xs:restriction>\n     </xs:simpleType>\n\
    \     <!--\n       rpcOperationType: used as a base type for all\n       NETCONF\
    \ operations\n       -->\n     <xs:complexType name=\"rpcOperationType\"/>\n \
    \    <xs:element name=\"rpcOperation\"\n                 type=\"rpcOperationType\"\
    \ abstract=\"true\"/>\n     <!--\n       Type for <config> element\n       -->\n\
    \     <xs:complexType name=\"configInlineType\">\n       <xs:complexContent>\n\
    \         <xs:extension base=\"xs:anyType\"/>\n       </xs:complexContent>\n \
    \    </xs:complexType>\n     <!--\n       Type for <data> element\n       -->\n\
    \     <xs:complexType name=\"dataInlineType\">\n       <xs:complexContent>\n \
    \        <xs:extension base=\"xs:anyType\"/>\n       </xs:complexContent>\n  \
    \   </xs:complexType>\n     <!--\n       Type for <filter> element\n       -->\n\
    \     <xs:simpleType name=\"FilterType\">\n       <xs:restriction base=\"xs:string\"\
    >\n         <xs:annotation>\n           <xs:documentation>\n             Use of\
    \ the xpath value requires the :xpath capability.\n          </xs:documentation>\n\
    \         </xs:annotation>\n         <xs:enumeration value=\"subtree\"/>\n   \
    \      <xs:enumeration value=\"xpath\"/>\n       </xs:restriction>\n     </xs:simpleType>\n\
    \     <xs:complexType name=\"filterInlineType\">\n       <xs:complexContent>\n\
    \         <xs:extension base=\"xs:anyType\">\n           <xs:attribute name=\"\
    type\"\n                         type=\"FilterType\" default=\"subtree\"/>\n \
    \          <!-- if type=\"xpath\", the xpath expression\n           appears in\
    \ the select element -->\n           <xs:attribute name=\"select\"/>\n       \
    \  </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n    \
    \ <!--\n       configuration datastore names\n       -->\n     <xs:annotation>\n\
    \       <xs:documentation>\n         The startup datastore can be used only if\
    \ the :startup\n         capability is advertised.  The candidate datastore can\n\
    \         be used only if the :candidate datastore is advertised.\n        </xs:documentation>\n\
    \     </xs:annotation>\n     <xs:complexType name=\"configNameType\"/>\n     <xs:element\
    \ name=\"config-name\"\n                 type=\"configNameType\" abstract=\"true\"\
    />\n     <xs:element name=\"startup\" type=\"configNameType\"\n              \
    \   substitutionGroup=\"config-name\"/>\n     <xs:element name=\"candidate\" type=\"\
    configNameType\"\n                 substitutionGroup=\"config-name\"/>\n     <xs:element\
    \ name=\"running\" type=\"configNameType\"\n                 substitutionGroup=\"\
    config-name\"/>\n     <!--\n       operation attribute used in <edit-config>\n\
    \       -->\n     <xs:simpleType name=\"editOperationType\">\n       <xs:restriction\
    \ base=\"xs:string\">\n         <xs:enumeration value=\"merge\"/>\n         <xs:enumeration\
    \ value=\"replace\"/>\n         <xs:enumeration value=\"create\"/>\n         <xs:enumeration\
    \ value=\"delete\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:attribute\
    \ name=\"operation\"\n                   type=\"editOperationType\" default=\"\
    merge\"/>\n     <!--\n       <default-operation> element\n       -->\n     <xs:simpleType\
    \ name=\"defaultOperationType\">\n       <xs:restriction base=\"xs:string\">\n\
    \         <xs:enumeration value=\"merge\"/>\n         <xs:enumeration value=\"\
    replace\"/>\n         <xs:enumeration value=\"none\"/>\n       </xs:restriction>\n\
    \     </xs:simpleType>\n     <!--\n       <url> element\n       -->\n     <xs:complexType\
    \ name=\"configURIType\">\n       <xs:annotation>\n         <xs:documentation>\n\
    \           Use of the url element requires the :url capability.\n         </xs:documentation>\n\
    \       </xs:annotation>\n       <xs:simpleContent>\n         <xs:extension base=\"\
    xs:anyURI\"/>\n       </xs:simpleContent>\n     </xs:complexType>\n     <!--\n\
    \       Type for <source> element (except <get-config>)\n       -->\n     <xs:complexType\
    \ name=\"rpcOperationSourceType\">\n       <xs:choice>\n         <xs:element name=\"\
    config\" type=\"configInlineType\"/>\n         <xs:element ref=\"config-name\"\
    />\n         <xs:element name=\"url\" type=\"configURIType\"/>\n       </xs:choice>\n\
    \     </xs:complexType>\n     <!--\n       Type for <source> element in <get-config>\n\
    \       -->\n     <xs:complexType name=\"getConfigSourceType\">\n       <xs:choice>\n\
    \         <xs:element ref=\"config-name\"/>\n         <xs:element name=\"url\"\
    \ type=\"configURIType\"/>\n       </xs:choice>\n     </xs:complexType>\n    \
    \ <!--\n       Type for <target> element\n       -->\n     <xs:complexType name=\"\
    rpcOperationTargetType\">\n       <xs:choice>\n         <xs:element ref=\"config-name\"\
    />\n         <xs:element name=\"url\" type=\"configURIType\"/>\n       </xs:choice>\n\
    \     </xs:complexType>\n     <!--\n       <get-config> operation\n       -->\n\
    \     <xs:complexType name=\"getConfigType\">\n       <xs:complexContent>\n  \
    \       <xs:extension base=\"rpcOperationType\">\n           <xs:sequence>\n \
    \            <xs:element name=\"source\"\n                         type=\"getConfigSourceType\"\
    />\n             <xs:element name=\"filter\"\n                         type=\"\
    filterInlineType\" minOccurs=\"0\"/>\n           </xs:sequence>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    get-config\" type=\"getConfigType\"\n                 substitutionGroup=\"rpcOperation\"\
    />\n     <!--\n       <edit-config> operation\n       -->\n     <xs:complexType\
    \ name=\"editConfigType\">\n       <xs:complexContent>\n         <xs:extension\
    \ base=\"rpcOperationType\">\n           <xs:sequence>\n             <xs:annotation>\n\
    \               <xs:documentation>\n                 Use of the test-option element\
    \ requires the\n                 :validate capability.  Use of the url element\n\
    \                 requires the :url capability.\n               </xs:documentation>\n\
    \             </xs:annotation>\n             <xs:element name=\"target\"\n   \
    \                      type=\"rpcOperationTargetType\"/>\n             <xs:element\
    \ name=\"default-operation\"\n                         type=\"defaultOperationType\"\
    \n                         minOccurs=\"0\"/>\n             <xs:element name=\"\
    test-option\"\n                         type=\"testOptionType\"\n            \
    \             minOccurs=\"0\"/>\n             <xs:element name=\"error-option\"\
    \n                         type=\"errorOptionType\"\n                        \
    \ minOccurs=\"0\"/>\n             <xs:choice>\n               <xs:element name=\"\
    config\"\n                           type=\"configInlineType\"/>\n           \
    \    <xs:element name=\"url\"\n                           type=\"configURIType\"\
    />\n             </xs:choice>\n           </xs:sequence>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    edit-config\" type=\"editConfigType\"\n                 substitutionGroup=\"rpcOperation\"\
    />\n     <!--\n       <copy-config> operation\n       -->\n     <xs:complexType\
    \ name=\"copyConfigType\">\n       <xs:complexContent>\n         <xs:extension\
    \ base=\"rpcOperationType\">\n           <xs:sequence>\n             <xs:element\
    \ name=\"target\" type=\"rpcOperationTargetType\"/>\n             <xs:element\
    \ name=\"source\" type=\"rpcOperationSourceType\"/>\n           </xs:sequence>\n\
    \         </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n\
    \     <xs:element name=\"copy-config\" type=\"copyConfigType\"\n             \
    \    substitutionGroup=\"rpcOperation\"/>\n     <!--\n       <delete-config> operation\n\
    \       -->\n     <xs:complexType name=\"deleteConfigType\">\n       <xs:complexContent>\n\
    \         <xs:extension base=\"rpcOperationType\">\n           <xs:sequence>\n\
    \             <xs:element name=\"target\" type=\"rpcOperationTargetType\"/>\n\
    \           </xs:sequence>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:element name=\"delete-config\" type=\"deleteConfigType\"\
    \n                 substitutionGroup=\"rpcOperation\"/>\n     <!--\n       <get>\
    \ operation\n       -->\n     <xs:complexType name=\"getType\">\n       <xs:complexContent>\n\
    \         <xs:extension base=\"rpcOperationType\">\n           <xs:sequence>\n\
    \             <xs:element name=\"filter\"\n                         type=\"filterInlineType\"\
    \ minOccurs=\"0\"/>\n           </xs:sequence>\n         </xs:extension>\n   \
    \    </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"get\"\
    \ type=\"getType\"\n                 substitutionGroup=\"rpcOperation\"/>\n  \
    \   <!--\n       <lock> operation\n       -->\n     <xs:complexType name=\"lockType\"\
    >\n       <xs:complexContent>\n         <xs:extension base=\"rpcOperationType\"\
    >\n           <xs:sequence>\n             <xs:element name=\"target\"\n      \
    \                   type=\"rpcOperationTargetType\"/>\n           </xs:sequence>\n\
    \         </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n\
    \     <xs:element name=\"lock\" type=\"lockType\"\n                 substitutionGroup=\"\
    rpcOperation\"/>\n     <!--\n       <unlock> operation\n       -->\n     <xs:complexType\
    \ name=\"unlockType\">\n       <xs:complexContent>\n         <xs:extension base=\"\
    rpcOperationType\">\n           <xs:sequence>\n             <xs:element name=\"\
    target\" type=\"rpcOperationTargetType\"/>\n           </xs:sequence>\n      \
    \   </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n   \
    \  <xs:element name=\"unlock\" type=\"unlockType\"\n                 substitutionGroup=\"\
    rpcOperation\"/>\n     <!--\n       <validate> operation\n       -->\n     <xs:complexType\
    \ name=\"validateType\">\n       <xs:annotation>\n         <xs:documentation>\n\
    \           The validate operation requires the :validate capability.\n      \
    \   </xs:documentation>\n       </xs:annotation>\n       <xs:complexContent>\n\
    \         <xs:extension base=\"rpcOperationType\">\n           <xs:sequence>\n\
    \             <xs:element name=\"source\" type=\"rpcOperationSourceType\"/>\n\
    \           </xs:sequence>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:element name=\"validate\" type=\"validateType\"\
    \n                 substitutionGroup=\"rpcOperation\"/>\n     <!--\n       <commit>\
    \ operation\n       -->\n     <xs:simpleType name=\"confirmTimeoutType\">\n  \
    \     <xs:restriction base=\"xs:unsignedInt\">\n         <xs:minInclusive value=\"\
    1\"/>\n       </xs:restriction>\n     </xs:simpleType>\n     <xs:complexType name=\"\
    commitType\">\n       <xs:annotation>\n         <xs:documentation>\n         \
    \  The commit operation requires the :candidate capability.\n         </xs:documentation>\n\
    \       </xs:annotation>\n       <xs:complexContent>\n         <xs:extension base=\"\
    rpcOperationType\">\n           <xs:sequence>\n             <xs:annotation>\n\
    \               <xs:documentation>\n                 Use of the confirmed and\
    \ confirm-timeout elements\n                 requires the :confirmed-commit capability.\n\
    \               </xs:documentation>\n             </xs:annotation>\n         \
    \    <xs:element name=\"confirmed\" minOccurs=\"0\"/>\n             <xs:element\
    \ name=\"confirm-timeout\"\n                         type=\"confirmTimeoutType\"\
    \n                         minOccurs=\"0\"/>\n           </xs:sequence>\n    \
    \     </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n \
    \    <xs:element name=\"commit\" type=\"commitType\"\n                 substitutionGroup=\"\
    rpcOperation\"/>\n     <!--\n       <discard-changes> operation\n       -->\n\
    \     <xs:complexType name=\"discardChangesType\">\n       <xs:annotation>\n \
    \        <xs:documentation>\n           The discard-changes operation requires\
    \ the\n           :candidate capability.\n         </xs:documentation>\n     \
    \  </xs:annotation>\n       <xs:complexContent>\n         <xs:extension base=\"\
    rpcOperationType\"/>\n       </xs:complexContent>\n     </xs:complexType>\n  \
    \   <xs:element name=\"discard-changes\"\n                 type=\"discardChangesType\"\
    \n                 substitutionGroup=\"rpcOperation\"/>\n     <!--\n       <close-session>\
    \ operation\n       -->\n     <xs:complexType name=\"closeSessionType\">\n   \
    \    <xs:complexContent>\n         <xs:extension base=\"rpcOperationType\"/>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    close-session\" type=\"closeSessionType\"\n                 substitutionGroup=\"\
    rpcOperation\"/>\n     <!--\n       <kill-session> operation\n       -->\n   \
    \  <xs:complexType name=\"killSessionType\">\n       <xs:complexContent>\n   \
    \      <xs:extension base=\"rpcOperationType\">\n           <xs:sequence>\n  \
    \           <xs:element name=\"session-id\"\n                         type=\"\
    SessionId\" minOccurs=\"1\"/>\n           </xs:sequence>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:element name=\"\
    kill-session\" type=\"killSessionType\"\n                 substitutionGroup=\"\
    rpcOperation\"/>\n     <!--\n       <hello> element\n       -->\n     <xs:element\
    \ name=\"hello\">\n       <xs:complexType>\n         <xs:sequence>\n         \
    \  <xs:element name=\"capabilities\">\n             <xs:complexType>\n       \
    \        <xs:sequence>\n                 <xs:element name=\"capability\" type=\"\
    xs:anyURI\"\n                   maxOccurs=\"unbounded\"/>\n               </xs:sequence>\n\
    \             </xs:complexType>\n           </xs:element>\n           <xs:element\
    \ name=\"session-id\"\n                       type=\"SessionId\" minOccurs=\"\
    0\"/>\n         </xs:sequence>\n       </xs:complexType>\n     </xs:element>\n\
    \   </xs:schema>\n   END\n"
- title: Appendix C.  Capability Template
  contents:
  - 'Appendix C.  Capability Template

    '
- title: C.1.  capability-name (template)
  contents:
  - 'C.1.  capability-name (template)

    '
- title: C.1.1.  Overview
  contents:
  - 'C.1.1.  Overview

    '
- title: C.1.2.  Dependencies
  contents:
  - 'C.1.2.  Dependencies

    '
- title: C.1.3.  Capability Identifier
  contents:
  - "C.1.3.  Capability Identifier\n   The {name} capability is identified by the\
    \ following capability\n   string:\n      {capability uri}\n"
- title: C.1.4.  New Operations
  contents:
  - 'C.1.4.  New Operations

    '
- title: C.1.4.1.  <op-name>
  contents:
  - 'C.1.4.1.  <op-name>

    '
- title: C.1.5.  Modifications to Existing Operations
  contents:
  - 'C.1.5.  Modifications to Existing Operations

    '
- title: C.1.5.1.  <op-name>
  contents:
  - "C.1.5.1.  <op-name>\n   If existing operations are not modified by this capability,\
    \ this\n   section may be omitted.\n"
- title: C.1.6.  Interactions with Other Capabilities
  contents:
  - "C.1.6.  Interactions with Other Capabilities\n   If this capability does not\
    \ interact with other capabilities, this\n   section may be omitted.\n"
- title: Appendix D.  Configuring Multiple Devices with NETCONF
  contents:
  - 'Appendix D.  Configuring Multiple Devices with NETCONF

    '
- title: D.1.  Operations on Individual Devices
  contents:
  - "D.1.  Operations on Individual Devices\n   Consider the work involved in performing\
    \ a configuration update\n   against a single individual device.  In making a\
    \ change to the\n   configuration, the application needs to build trust that its\
    \ change\n   has been made correctly and that it has not impacted the operation\
    \ of\n   the device.  The application (and the application user) should feel\n\
    \   confident that their change has not damaged the network.\n   Protecting each\
    \ individual device consists of a number of steps:\n   o  Acquiring the configuration\
    \ lock.\n   o  Loading the update.\n   o  Validating the incoming configuration.\n\
    \   o  Checkpointing the running configuration.\n   o  Changing the running configuration.\n\
    \   o  Testing the new configuration.\n   o  Making the change permanent (if desired).\n\
    \   o  Releasing the configuration lock.\n   Let's look at the details of each\
    \ step.\n"
- title: D.1.1.  Acquiring the Configuration Lock
  contents:
  - "D.1.1.  Acquiring the Configuration Lock\n   A lock should be acquired to prevent\
    \ simultaneous updates from\n   multiple sources.  If multiple sources are affecting\
    \ the device, the\n   application is hampered in both testing of its change to\
    \ the\n   configuration and in recovery should the update fail.  Acquiring a\n\
    \   short-lived lock is a simple defense to prevent other parties from\n   introducing\
    \ unrelated changes.\n   The lock can be acquired using the <lock> operation.\n\
    \     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <lock>\n         <target>\n           <running/>\n         </target>\n\
    \       </lock>\n     </rpc>\n"
- title: D.1.2.  Loading the Update
  contents:
  - "D.1.2.  Loading the Update\n   The configuration can be loaded onto the device\
    \ without impacting the\n   running system.  If the :url capability is supported\
    \ and lists \"file\"\n   as a supported scheme, incoming changes can be placed\
    \ in a local\n   file.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <target>\n           <url>file://incoming.conf</url>\n\
    \         </target>\n         <source>\n           <config>\n             <!--\
    \ place incoming configuration here -->\n           </config>\n         </source>\n\
    \       </copy-config>\n     </rpc>\n   If the :candidate capability is supported,\
    \ the candidate\n   configuration can be used.\n     <rpc message-id=\"101\"\n\
    \          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <candidate/>\n         </target>\n         <config>\n\
    \           <!-- place incoming configuration here -->\n         </config>\n \
    \      </edit-config>\n     </rpc>\n   If the update fails, the user file can\
    \ be deleted using the\n   <delete-config> operation, or the candidate configuration\
    \ can be\n   reverted using the <discard-changes> operation.\n"
- title: D.1.3.  Validating the Incoming Configuration
  contents:
  - "D.1.3.  Validating the Incoming Configuration\n   Before the incoming configuration\
    \ is applied, validating it is often\n   useful.  Validation allows the application\
    \ to gain confidence that\n   the change will succeed and simplifies recovery\
    \ if it does not.\n   If the device supports the :url capability and lists \"\
    file\" as a\n   supported scheme, use the <validate> operation with the <source>\n\
    \   parameter set to the proper user file:\n     <rpc message-id=\"101\"\n   \
    \       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <validate>\n\
    \         <source>\n           <url>file://incoming.conf</url>\n         </source>\n\
    \       </validate>\n     </rpc>\n   If the device supports the :candidate capability,\
    \ some validation\n   will be performed as part of loading the incoming configuration\
    \ into\n   the candidate.  For full validation, either pass the <validate>\n \
    \  parameter during the <edit-config> step given above, or use the\n   <validate>\
    \ operation with the <source> parameter set to <candidate>.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <validate>\n\
    \         <source>\n           <candidate/>\n         </source>\n       </validate>\n\
    \     </rpc>\n"
- title: D.1.4.  Checkpointing the Running Configuration
  contents:
  - "D.1.4.  Checkpointing the Running Configuration\n   The running configuration\
    \ can be saved into a local file as a\n   checkpoint before loading the new configuration.\
    \  If the update\n   fails, the configuration can be restored by reloading the\
    \ checkpoint\n   file.\n   The checkpoint file can be created using the <copy-config>\
    \ operation.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <copy-config>\n         <target>\n           <url>file://checkpoint.conf</url>\n\
    \         </target>\n         <source>\n           <running/>\n         </source>\n\
    \       </copy-config>\n     </rpc>\n   To restore the checkpoint file, reverse\
    \ the source and target\n   parameters.\n"
- title: D.1.5.  Changing the Running Configuration
  contents:
  - "D.1.5.  Changing the Running Configuration\n   When the incoming configuration\
    \ has been safely loaded onto the\n   device and validated, it is ready to impact\
    \ the running system.\n   If the device supports the :url capability and lists\
    \ \"file\" as a\n   supported scheme, use the <edit-config> operation to merge\
    \ the\n   incoming configuration into the running configuration.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <url>file://incoming.conf</url>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n   If the device supports the :candidate capability, use the <commit>\n\
    \   operation to set the running configuration to the candidate\n   configuration.\
    \  Use the <confirmed> parameter to allow automatic\n   reversion to the original\
    \ configuration if connectivity to the device\n   fails.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <commit>\n\
    \         <confirmed/>\n         <confirm-timeout>120</confirm-timeout>\n    \
    \   </commit>\n     </rpc>\n"
- title: D.1.6.  Testing the New Configuration
  contents:
  - "D.1.6.  Testing the New Configuration\n   Now that the incoming configuration\
    \ has been integrated into the\n   running configuration, the application needs\
    \ to gain trust that the\n   change has affected the device in the way intended\
    \ without affecting\n   it negatively.\n   To gain this confidence, the application\
    \ can run tests of the\n   operational state of the device.  The nature of the\
    \ test is dependent\n   on the nature of the change and is outside the scope of\
    \ this\n   document.  Such tests may include reachability from the system\n  \
    \ running the application (using ping), changes in reachability to the\n   rest\
    \ of the network (by comparing the device's routing table), or\n   inspection\
    \ of the particular change (looking for operational evidence\n   of the BGP peer\
    \ that was just added).\n"
- title: D.1.7.  Making the Change Permanent
  contents:
  - "D.1.7.  Making the Change Permanent\n   When the configuration change is in place\
    \ and the application has\n   sufficient faith in the proper function of this\
    \ change, the\n   application should make the change permanent.\n   If the device\
    \ supports the :startup capability, the current\n   configuration can be saved\
    \ to the startup configuration by using the\n   startup configuration as the target\
    \ of the <copy-config> operation.\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <copy-config>\n         <target>\n\
    \           <startup/>\n         </target>\n         <source>\n           <running/>\n\
    \         </source>\n       </copy-config>\n     </rpc>\n   If the device supports\
    \ the :candidate capability and a confirmed\n   commit was requested, the confirming\
    \ commit must be sent before the\n   timeout expires.\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <commit/>\n\
    \     </rpc>\n"
- title: D.1.8.  Releasing the Configuration Lock
  contents:
  - "D.1.8.  Releasing the Configuration Lock\n   When the configuration update is\
    \ complete, the lock must be released,\n   allowing other applications access\
    \ to the configuration.\n   Use the <unlock> operation to release the configuration\
    \ lock.\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <unlock>\n         <target>\n           <running/>\n         </target>\n\
    \       </unlock>\n     </rpc>\n"
- title: D.2.  Operations on Multiple Devices
  contents:
  - "D.2.  Operations on Multiple Devices\n   When a configuration change requires\
    \ updates across a number of\n   devices, care should be taken to provide the\
    \ required transaction\n   semantics.  The NETCONF protocol contains sufficient\
    \ primitives upon\n   which transaction-oriented operations can be built.  Providing\n\
    \   complete transactional semantics across multiple devices is\n   prohibitively\
    \ expensive, but the size and number of windows for\n   failure scenarios can\
    \ be reduced.\n   There are two classes of multi-device operations.  The first\
    \ class\n   allows the operation to fail on individual devices without requiring\n\
    \   all devices to revert to their original state.  The operation can be\n   retried\
    \ at a later time, or its failure simply reported to the user.\n   An example\
    \ of this class might be adding an NTP server.  For this\n   class of operations,\
    \ failure avoidance and recovery are focused on\n   the individual device.  This\
    \ means recovery of the device, reporting\n   the failure, and perhaps scheduling\
    \ another attempt.\n   The second class is more interesting, requiring that the\
    \ operation\n   should complete on all devices or be fully reversed.  The network\n\
    \   should either be transformed into a new state or be reset to its\n   original\
    \ state.  For example, a change to a VPN may require updates\n   to a number of\
    \ devices.  Another example of this might be adding a\n   class-of-service definition.\
    \  Leaving the network in a state where\n   only a portion of the devices have\
    \ been updated with the new\n   definition will lead to future failures when the\
    \ definition is\n   referenced.\n   To give transactional semantics, the same\
    \ steps used in single device\n   operations listed above are used, but are performed\
    \ in parallel\n   across all devices.  Configuration locks should be acquired\
    \ on all\n   target devices and kept until all devices are updated and the changes\n\
    \   made permanent.  Configuration changes should be uploaded and\n   validation\
    \ performed across all devices.  Checkpoints should be made\n   on each device.\
    \  Then the running configuration can be changed,\n   tested, and made permanent.\
    \  If any of these steps fail, the previous\n   configurations can be restored\
    \ on any devices upon which they were\n   changed.  After the changes have been\
    \ completely implemented or\n   completely discarded, the locks on each device\
    \ can be released.\n"
- title: Appendix E.  Deferred Features
  contents:
  - "Appendix E.  Deferred Features\n   The following features have been deferred\
    \ until a future revision of\n   this document.\n   o  Granular locking of configuration\
    \ objects.\n   o  Named configuration files/datastores.\n   o  Support for multiple\
    \ NETCONF channels.\n   o  Asynchronous notifications.\n   o  Explicit protocol\
    \ support for rollback of configuration changes to\n      prior versions.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Rob Enns\n   Juniper Networks\n   1194 North Mathilda Ave\n\
    \   Sunnyvale, CA  94089\n   US\n   EMail: rpe@juniper.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
