- title: __initial_text__
  contents:
  - "             Tradeoffs in Domain Name System (DNS) Support\n                \
    \ for Internet Protocol version 6 (IPv6)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The IETF has two different proposals on the table for how to do\
    \ DNS\n   support for IPv6, and has thus far failed to reach a clear consensus\n\
    \   on which approach is better.  This note attempts to examine the pros\n   and\
    \ cons of each approach, in the hope of clarifying the debate so\n   that we can\
    \ reach closure and move on.\n"
- title: Introduction
  contents:
  - "Introduction\n   RFC 1886 [RFC1886] specified straightforward mechanisms to support\n\
    \   IPv6 addresses in the DNS.  These mechanisms closely resemble the\n   mechanisms\
    \ used to support IPv4, with a minor improvement to the\n   reverse mapping mechanism\
    \ based on experience with CIDR.  RFC 1886 is\n   currently listed as a Proposed\
    \ Standard.\n   RFC 2874 [RFC2874] specified enhanced mechanisms to support IPv6\n\
    \   addresses in the DNS.  These mechanisms provide new features that\n   make\
    \ it possible for an IPv6 address stored in the DNS to be broken\n   up into multiple\
    \ DNS resource records in ways that can reflect the\n   network topology underlying\
    \ the address, thus making it possible for\n   the data stored in the DNS to reflect\
    \ certain kinds of network\n   topology changes or routing architectures that\
    \ are either impossible\n   or more difficult to represent without these mechanisms.\
    \  RFC 2874 is\n   also currently listed as a Proposed Standard.\n   Both of these\
    \ Proposed Standards were the output of the IPNG Working\n   Group.  Both have\
    \ been implemented, although implementation of\n   [RFC1886] is more widespread,\
    \ both because it was specified earlier\n   and because it's simpler to implement.\n\
    \   There's little question that the mechanisms proposed in [RFC2874] are\n  \
    \ more general than the mechanisms proposed in [RFC1886], and that\n   these enhanced\
    \ mechanisms might be valuable if IPv6's evolution goes\n   in certain directions.\
    \  The questions are whether we really need the\n   more general mechanism, what\
    \ new usage problems might come along with\n   the enhanced mechanisms, and what\
    \ effect all this will have on IPv6\n   deployment.\n   The one thing on which\
    \ there does seem to be widespread agreement is\n   that we should make up our\
    \ minds about all this Real Soon Now.\n"
- title: Main Advantages of Going with A6
  contents:
  - "Main Advantages of Going with A6\n   While the A6 RR proposed in [RFC2874] is\
    \ very general and provides a\n   superset of the functionality provided by the\
    \ AAAA RR in [RFC1886],\n   many of the features of A6 can also be implemented\
    \ with AAAA RRs via\n   preprocessing during zone file generation.\n   There is\
    \ one specific area where A6 RRs provide something that cannot\n   be provided\
    \ using AAAA RRs: A6 RRs can represent addresses in which a\n   prefix portion\
    \ of the address can change without any action (or\n   perhaps even knowledge)\
    \ by the parties controlling the DNS zone\n   containing the terminal portion\
    \ (least significant bits) of the\n   address.  This includes both so-called \"\
    rapid renumbering\" scenarios\n   (where an entire network's prefix may change\
    \ very quickly) and\n   routing architectures such as the former \"GSE\" proposal\
    \ [GSE] (where\n   the \"routing goop\" portion of an address may be subject to\
    \ change\n   without warning).  A6 RRs do not completely remove the need to update\n\
    \   leaf zones during all renumbering events (for example, changing ISPs\n   would\
    \ usually require a change to the upward delegation pointer), but\n   careful\
    \ use of A6 RRs could keep the number of RRs that need to\n   change during such\
    \ an event to a minimum.\n   Note that constructing AAAA RRs via preprocessing\
    \ during zone file\n   generation requires exactly the sort of information that\
    \ A6 RRs store\n   in the DNS.  This begs the question of where the hypothetical\n\
    \   preprocessor obtains that information if it's not getting it from the\n  \
    \ DNS.\n   Note also that the A6 RR, when restricted to its zero-length-prefix\n\
    \   form (\"A6 0\"), is semantically equivalent to an AAAA RR (with one\n   \"\
    wasted\" octet in the wire representation), so anything that can be\n   done with\
    \ an AAAA RR can also be done with an A6 RR.\n"
- title: Main Advantages of Going with AAAA
  contents:
  - "Main Advantages of Going with AAAA\n   The AAAA RR proposed in [RFC1886], while\
    \ providing only a subset of\n   the functionality provided by the A6 RR proposed\
    \ in [RFC2874], has\n   two main points to recommend it:\n   - AAAA RRs are essentially\
    \ identical (other than their length) to\n     IPv4's A RRs, so we have more than\
    \ 15 years of experience to help\n     us predict the usage patterns, failure\
    \ scenarios and so forth\n     associated with AAAA RRs.\n   - The AAAA RR is\
    \ \"optimized for read\", in the sense that, by storing\n     a complete address\
    \ rather than making the resolver fetch the\n     address in pieces, it minimizes\
    \ the effort involved in fetching\n     addresses from the DNS (at the expense\
    \ of increasing the effort\n     involved in injecting new data into the DNS).\n"
- title: Less Compelling Arguments in Favor of A6
  contents:
  - "Less Compelling Arguments in Favor of A6\n   Since the A6 RR allows a zone administrator\
    \ to write zone files whose\n   description of addresses maps to the underlying\
    \ network topology, A6\n   RRs can be construed as a \"better\" way of representing\
    \ addresses than\n   AAAA.  This may well be a useful capability, but in and of\
    \ itself\n   it's more of an argument for better tools for zone administrators\
    \ to\n   use when constructing zone files than a justification for changing\n\
    \   the resolution protocol used on the wire.\n"
- title: Less Compelling Arguments in Favor of AAAA
  contents:
  - "Less Compelling Arguments in Favor of AAAA\n   Some of the pressure to go with\
    \ AAAA instead of A6 appears to be\n   based on the wider deployment of AAAA.\
    \  Since it is possible to\n   construct transition tools (see discussion of AAAA\
    \ synthesis, later\n   in this note), this does not appear to be a compelling\
    \ argument if A6\n   provides features that we really need.\n   Another argument\
    \ in favor of AAAA RRs over A6 RRs appears to be that\n   the A6 RR's advanced\
    \ capabilities increase the number of ways in\n   which a zone administrator could\
    \ build a non-working configuration.\n   While operational issues are certainly\
    \ important, this is more of\n   argument that we need better tools for zone administrators\
    \ than it is\n   a justification for turning away from A6 if A6 provides features\
    \ that\n   we really need.\n"
- title: Potential Problems with A6
  contents:
  - "Potential Problems with A6\n   The enhanced capabilities of the A6 RR, while\
    \ interesting, are not in\n   themselves justification for choosing A6 if we don't\
    \ really need\n   those capabilities.  The A6 RR is \"optimized for write\", in\
    \ the sense\n   that, by making it possible to store fragmented IPv6 addresses\
    \ in the\n   DNS, it makes it possible to reduce the effort that it takes to\n\
    \   inject new data into the DNS (at the expense of increasing the effort\n  \
    \ involved in fetching data from the DNS).  This may be justified if we\n   expect\
    \ the effort involved in maintaining AAAA-style DNS entries to\n   be prohibitive,\
    \ but in general, we expect the DNS data to be read\n   more frequently than it\
    \ is written, so we need to evaluate this\n   particular tradeoff very carefully.\n\
    \   There are also several potential issues with A6 RRs that stem\n   directly\
    \ from the feature that makes them different from AAAA RRs:\n   the ability to\
    \ build up address via chaining.\n   Resolving a chain of A6 RRs involves resolving\
    \ a series of what are\n   almost independent queries, but not quite.  Each of\
    \ these sub-queries\n   takes some non-zero amount of time, unless the answer\
    \ happens to be\n   in the resolver's local cache already.  Assuming that resolving\
    \ an\n   AAAA RR takes time T as a baseline, we can guess that, on the\n   average,\
    \ it will take something approaching time N*T to resolve an\n   N-link chain of\
    \ A6 RRs, although we would expect to see a fairly good\n   caching factor for\
    \ the A6 fragments representing the more significant\n   bits of an address. \
    \ This leaves us with two choices, neither of\n   which is very good:  we can\
    \ decrease the amount of time that the\n   resolver is willing to wait for each\
    \ fragment, or we can increase the\n   amount of time that a resolver is willing\
    \ to wait before returning\n   failure to a client.  What little data we have\
    \ on this subject\n   suggests that users are already impatient with the length\
    \ of time it\n   takes to resolve A RRs in the IPv4 Internet, which suggests that\
    \ they\n   are not likely to be patient with significantly longer delays in the\n\
    \   IPv6 Internet.  At the same time, terminating queries prematurely is\n   both\
    \ a waste of resources and another source of user frustration.\n   Thus, we are\
    \ forced to conclude that indiscriminate use of long A6\n   chains is likely to\
    \ lead to problems.\n   To make matters worse, the places where A6 RRs are likely\
    \ to be most\n   critical for rapid renumbering or GSE-like routing are situations\n\
    \   where the prefix name field in the A6 RR points to a target that is\n   not\
    \ only outside the DNS zone containing the A6 RR, but is\n   administered by a\
    \ different organization (for example, in the case of\n   an end user's site,\
    \ the prefix name will most likely point to a name\n   belonging to an ISP that\
    \ provides connectivity for the site).  While\n   pointers out of zone are not\
    \ a problem per se, pointers to other\n   organizations are somewhat more difficult\
    \ to maintain and less\n   susceptible to automation than pointers within a single\
    \ organization\n   would be.  Experience both with glue RRs and with PTR RRs in\
    \ the IN-\n   ADDR.ARPA tree suggests that many zone administrators do not really\n\
    \   understand how to set up and maintain these pointers properly, and we\n  \
    \ have no particular reason to believe that these zone administrators\n   will\
    \ do a better job with A6 chains than they do today.  To be fair,\n   however,\
    \ the alternative case of building AAAA RRs via preprocessing\n   before loading\
    \ zones has many of the same problems; at best, one can\n   claim that using AAAA\
    \ RRs for this purpose would allow DNS clients to\n   get the wrong answer somewhat\
    \ more efficiently than with A6 RRs.\n   Finally, assuming near total ignorance\
    \ of how likely a query is to\n   fail, the probability of failure with an N-link\
    \ A6 chain would appear\n   to be roughly proportional to N, since each of the\
    \ queries involved\n   in resolving an A6 chain would have the same probability\
    \ of failure\n   as a single AAAA query.  Note again that this comment applies\
    \ to\n   failures in the the process of resolving a query, not to the data\n \
    \  obtained via that process.  Arguably, in an ideal world, A6 RRs would\n   increase\
    \ the probability of the answer a client (finally) gets being\n   right, assuming\
    \ that nothing goes wrong in the query process, but we\n   have no real idea how\
    \ to quantify that assumption at this point even\n   to the hand-wavey extent\
    \ used elsewhere in this note.\n   One potential problem that has been raised\
    \ in the past regarding A6\n   RRs turns out not to be a serious issue.  The A6\
    \ design includes the\n   possibility of there being more than one A6 RR matching\
    \ the prefix\n   name portion of a leaf A6 RR.  That is, an A6 chain may not be\
    \ a\n   simple linked list, it may in fact be a tree, where each branch\n   represents\
    \ a possible prefix.  Some critics of A6 have been concerned\n   that this will\
    \ lead to a wild expansion of queries, but this turns\n   out not to be a problem\
    \ if a resolver simply follows the \"bounded\n   work per query\" rule described\
    \ in RFC 1034 (page 35).  That rule\n   applies to all work resulting from attempts\
    \ to process a query,\n   regardless of whether it's a simple query, a CNAME chain,\
    \ an A6 tree,\n   or an infinite loop.  The client may not get back a useful answer\
    \ in\n   cases where the zone has been configured badly, but a proper\n   implementation\
    \ should not produce a query explosion as a result of\n   processing even the\
    \ most perverse A6 tree, chain, or loop.\n"
- title: Interactions with DNSSEC
  contents:
  - "Interactions with DNSSEC\n   One of the areas where AAAA and A6 RRs differ is\
    \ in the precise\n   details of how they interact with DNSSEC.  The following\
    \ comments\n   apply only to non-zero-prefix A6 RRs (A6 0 RRs, once again, are\n\
    \   semantically equivalent to AAAA RRs).\n   Other things being equal, the time\
    \ it takes to re-sign all of the\n   addresses in a zone after a renumbering event\
    \ is longer with AAAA RRs\n   than with A6 RRs (because each address record has\
    \ to be re-signed\n   rather than just signing a common prefix A6 RR and a few\
    \ A6 0 RRs\n   associated with the zone's name servers).  Note, however, that\
    \ in\n   general this does not present a serious scaling problem, because the\n\
    \   re-signing is performed in the leaf zones.\n   Other things being equal, there's\
    \ more work involved in verifying the\n   signatures received back for A6 RRs,\
    \ because each address fragment\n   has a separate associated signature.  Similarly,\
    \ a DNS message\n   containing a set of A6 address fragments and their associated\n\
    \   signatures will be larger than the equivalent packet with a single\n   AAAA\
    \ (or A6 0) and a single associated signature.\n   Since AAAA RRs cannot really\
    \ represent rapid renumbering or GSE-style\n   routing scenarios very well, it\
    \ should not be surprising that DNSSEC\n   signatures of AAAA RRs are also somewhat\
    \ problematic.  In cases where\n   the AAAA RRs would have to be changing very\
    \ quickly to keep up with\n   prefix changes, the time required to re-sign the\
    \ AAAA RRs may be\n   prohibitive.\n   Empirical testing by Bill Sommerfeld [Sommerfeld]\
    \ suggests that\n   333MHz Celeron laptop with 128KB L2 cache and 64MB RAM running\
    \ the\n   BIND-9 dnssec-signzone program under NetBSD can generate roughly 40\n\
    \   1024-bit RSA signatures per second.  Extrapolating from this,\n   assuming\
    \ one A RR, one AAAA RR, and one NXT RR per host, this\n   suggests that it would\
    \ take this laptop a few hours to sign a zone\n   listing 10**5 hosts, or about\
    \ a day to sign a zone listing 10**6\n   hosts using AAAA RRs.\n   This suggests\
    \ that the additional effort of re-signing a large zone\n   full of AAAA RRs during\
    \ a re-numbering event, while noticeable, is\n   only likely to be prohibitive\
    \ in the rapid renumbering case where\n   AAAA RRs don't work well anyway.\n"
- title: Interactions with Dynamic Update
  contents:
  - "Interactions with Dynamic Update\n   DNS dynamic update appears to work equally\
    \ well for AAAA or A6 RRs,\n   with one minor exception: with A6 RRs, the dynamic\
    \ update client\n   needs to know the prefix length and prefix name.  At present,\
    \ no\n   mechanism exists to inform a dynamic update client of these values,\n\
    \   but presumably such a mechanism could be provided via an extension to\n  \
    \ DHCP, or some other equivalent could be devised.\n"
- title: Transition from AAAA to A6 Via AAAA Synthesis
  contents:
  - "Transition from AAAA to A6 Via AAAA Synthesis\n   While AAAA is at present more\
    \ widely deployed than A6, it is possible\n   to transition from AAAA-aware DNS\
    \ software to A6-aware DNS software.\n   A rough plan for this was presented at\
    \ IETF-50 in Minneapolis and has\n   been discussed on the ipng mailing list.\
    \  So if the IETF concludes\n   that A6's enhanced capabilities are necessary,\
    \ it should be possible\n   to transition from AAAA to A6.\n   The details of\
    \ this transition have been left to a separate document,\n   but the general idea\
    \ is that the resolver that is performing\n   iterative resolution on behalf of\
    \ a DNS client program could\n   synthesize AAAA RRs representing the result of\
    \ performing the\n   equivalent A6 queries.  Note that in this case it is not\
    \ possible to\n   generate an equivalent DNSSEC signature for the AAAA RR, so\
    \ clients\n   that care about performing DNSSEC validation for themselves would\n\
    \   have to issue A6 queries directly rather than relying on AAAA\n   synthesis.\n"
- title: Bitlabels
  contents:
  - "Bitlabels\n   While the differences between AAAA and A6 RRs have generated most\
    \ of\n   the discussion to date, there are also two proposed mechanisms for\n\
    \   building the reverse mapping tree (the IPv6 equivalent of IPv4's IN-\n   ADDR.ARPA\
    \ tree).\n   [RFC1886] proposes a mechanism very similar to the IN-ADDR.ARPA\n\
    \   mechanism used for IPv4 addresses: the RR name is the hexadecimal\n   representation\
    \ of the IPv6 address, reversed and concatenated with a\n   well-known suffix,\
    \ broken up with a dot between each hexadecimal\n   digit.  The resulting DNS\
    \ names are somewhat tedious for humans to\n   type, but are very easy for programs\
    \ to generate.  Making each\n   hexadecimal digit a separate label means that\
    \ delegation on arbitrary\n   bit boundaries will result in a maximum of 16 NS\
    \ RRsets per label\n   level; again, the mechanism is somewhat tedious for humans,\
    \ but is\n   very easy to program.  As with IPv4's IN-ADDR.ARPA tree, the one\n\
    \   place where this scheme is weak is in handling delegations in the\n   least\
    \ significant label; however, since there appears to be no real\n   need to delegate\
    \ the least significant four bits of an IPv6 address,\n   this does not appear\
    \ to be a serious restriction.\n   [RFC2874] proposed a radically different way\
    \ of naming entries in the\n   reverse mapping tree: rather than using textual\
    \ representations of\n   addresses, it proposes to use a new kind of DNS label\
    \ (a \"bit label\")\n   to represent binary addresses directly in the DNS.  This\
    \ has the\n   advantage of being significantly more compact than the textual\n\
    \   representation, and arguably might have been a better solution for\n   DNS\
    \ to use for this purpose if it had been designed into the protocol\n   from the\
    \ outset.  Unfortunately, experience to date suggests that\n   deploying a new\
    \ DNS label type is very hard: all of the DNS name\n   servers that are authoritative\
    \ for any portion of the name in\n   question must be upgraded before the new\
    \ label type can be used, as\n   must any resolvers involved in the resolution\
    \ process.  Any name\n   server that has not been upgraded to understand the new\
    \ label type\n   will reject the query as being malformed.\n   Since the main\
    \ benefit of the bit label approach appears to be an\n   ability that we don't\
    \ really need (delegation in the least\n   significant four bits of an IPv6 address),\
    \ and since the upgrade\n   problem is likely to render bit labels unusable until\
    \ a significant\n   portion of the DNS code base has been upgraded, it is difficult\
    \ to\n   escape the conclusion that the textual solution is good enough.\n"
- title: DNAME RRs
  contents:
  - "DNAME RRs\n   [RFC2874] also proposes using DNAME RRs as a way of providing the\n\
    \   equivalent of A6's fragmented addresses in the reverse mapping tree.\n   That\
    \ is, by using DNAME RRs, one can write zone files for the reverse\n   mapping\
    \ tree that have the same ability to cope with rapid\n   renumbering or GSE-style\
    \ routing that the A6 RR offers in the main\n   portion of the DNS tree.  Consequently,\
    \ the need to use DNAME in the\n   reverse mapping tree appears to be closely\
    \ tied to the need to use\n   fragmented A6 in the main tree: if one is necessary,\
    \ so is the other,\n   and if one isn't necessary, the other isn't either.\n \
    \  Other uses have also been proposed for the DNAME RR, but since they\n   are\
    \ outside the scope of the IPv6 address discussion, they will not\n   be addressed\
    \ here.\n"
- title: Recommendation
  contents:
  - "Recommendation\n   Distilling the above feature comparisons down to their key\
    \ elements,\n   the important questions appear to be:\n   (a) Is IPv6 going to\
    \ do rapid renumbering or GSE-like routing?\n   (b) Is the reverse mapping tree\
    \ for IPv6 going to require delegation\n       in the least significant four bits\
    \ of the address?\n   Question (a) appears to be the key to the debate.  This\
    \ is really a\n   decision for the IPv6 community to make, not the DNS community.\n\
    \   Question (b) is also for the IPv6 community to make, but it seems\n   fairly\
    \ obvious that the answer is \"no\".\n   Recommendations based on these questions:\n\
    \   (1) If the IPv6 working groups seriously intend to specify and deploy\n  \
    \     rapid renumbering or GSE-like routing, we should transition to\n       using\
    \ the A6 RR in the main tree and to using DNAME RRs as\n       necessary in the\
    \ reverse tree.\n   (2) Otherwise, we should keep the simpler AAAA solution in\
    \ the main\n       tree and should not use DNAME RRs in the reverse tree.\n  \
    \ (3) In either case, the reverse tree should use the textual\n       representation\
    \ described in [RFC1886] rather than the bit label\n       representation described\
    \ in [RFC2874].\n   (4) If we do go to using A6 RRs in the main tree and to using\
    \ DNAME\n       RRs in the reverse tree, we should write applicability statements\n\
    \       and implementation guidelines designed to discourage excessively\n   \
    \    complex uses of these features; in general, any network that can\n      \
    \ be described adequately using A6 0 RRs and without using DNAME\n       RRs should\
    \ be described that way, and the enhanced features\n       should be used only\
    \ when absolutely necessary, at least until we\n       have much more experience\
    \ with them and have a better\n       understanding of their failure modes.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This note compares two mechanisms with similar security\n\
    \   characteristics, but there are a few security implications to the\n   choice\
    \ between these two mechanisms:\n   (1) The two mechanisms have similar but not\
    \ identical interactions\n       with DNSSEC.  Please see the section entitled\
    \ \"Interactions with\n       DNSSEC\" (above) for a discussion of these issues.\n\
    \   (2) To the extent that operational complexity is the enemy of\n       security,\
    \ the tradeoffs in operational complexity discussed\n       throughout this note\
    \ have an impact on security.\n   (3) To the extent that protocol complexity is\
    \ the enemy of security,\n       the additional protocol complexity of [RFC2874]\
    \ as compared to\n       [RFC1886] has some impact on security.\n"
- title: IANA Considerations
  contents:
  - "IANA Considerations\n   None, since all of these RR types have already been allocated.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This note is based on a number of discussions both public\
    \ and private\n   over a period of (at least) eight years, but particular thanks\
    \ go to\n   Alain Durand, Bill Sommerfeld, Christian Huitema, Jun-ichiro itojun\n\
    \   Hagino, Mark Andrews, Matt Crawford, Olafur Gudmundsson, Randy Bush,\n   and\
    \ Sue Thomson, none of whom are responsible for what the author did\n   with their\
    \ ideas.\n"
- title: References
  contents:
  - "References\n   [RFC1886]    Thomson, S. and C. Huitema, \"DNS Extensions to support\n\
    \                IP version 6\", RFC 1886, December 1995.\n   [RFC2874]    Crawford,\
    \ M. and C. Huitema, \"DNS Extensions to Support\n                IPv6 Address\
    \ Aggregation and Renumbering\", RFC 2874,\n                July 2000.\n   [Sommerfeld]\
    \ Private message to the author from Bill Sommerfeld dated\n                21\
    \ March 2001, summarizing the result of experiments he\n                performed\
    \ on a copy of the MIT.EDU zone.\n   [GSE]       \"GSE\" was an evolution of the\
    \ so-called \"8+8\" proposal\n                discussed by the IPng working group\
    \ in 1996 and 1997.\n                The GSE proposal itself was written up as\
    \ an Internet-\n                Draft, which has long since expired.  Readers\
    \ interested\n                in the details and history of GSE should review\
    \ the IPng\n                working group's mailing list archives and minutes\
    \ from\n                that period.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Rob Austein\n   EMail: sra@hactrn.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
