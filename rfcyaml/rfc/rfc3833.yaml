- title: __initial_text__
  contents:
  - '            Threat Analysis of the Domain Name System (DNS)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   Although the DNS Security Extensions (DNSSEC) have been under\n\
    \   development for most of the last decade, the IETF has never written\n   down\
    \ the specific set of threats against which DNSSEC is designed to\n   protect.\
    \  Among other drawbacks, this cart-before-the-horse situation\n   has made it\
    \ difficult to determine whether DNSSEC meets its design\n   goals, since its\
    \ design goals are not well specified.  This note\n   attempts to document some\
    \ of the known threats to the DNS, and, in\n   doing so, attempts to measure to\
    \ what extent (if any) DNSSEC is a\n   useful tool in defending against these\
    \ threats.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The earliest organized work on DNSSEC within the IETF was\
    \ an open\n   design team meeting organized by members of the DNS working group\
    \ in\n   November 1993 at the 28th IETF meeting in Houston.  The broad\n   outlines\
    \ of DNSSEC as we know it today are already clear in Jim\n   Galvin's summary\
    \ of the results of that meeting [Galvin93]:\n   - While some participants in\
    \ the meeting were interested in\n     protecting against disclosure of DNS data\
    \ to unauthorized parties,\n     the design team made an explicit decision that\
    \ \"DNS data is\n     `public'\", and ruled all threats of data disclosure explicitly\
    \ out\n     of scope for DNSSEC.\n   - While some participants in the meeting\
    \ were interested in\n     authentication of DNS clients and servers as a basis\
    \ for access\n     control, this work was also ruled out of scope for DNSSEC per\
    \ se.\n   - Backwards compatibility and co-existence with \"insecure DNS\" was\n\
    \     listed as an explicit requirement.\n   - The resulting list of desired security\
    \ services was\n     1) data integrity, and\n     2) data origin authentication.\n\
    \   - The design team noted that a digital signature mechanism would\n     support\
    \ the desired services.\n   While a number of detail decisions were yet to be\
    \ made (and in some\n   cases remade after implementation experience) over the\
    \ subsequent\n   decade, the basic model and design goals have remained fixed.\n\
    \   Nowhere, however, does any of the DNSSEC work attempt to specify in\n   any\
    \ detail the sorts of attacks against which DNSSEC is intended to\n   protect,\
    \ or the reasons behind the list of desired security services\n   that came out\
    \ of the Houston meeting.  For that, we have to go back\n   to a paper originally\
    \ written by Steve Bellovin in 1990 but not\n   published until 1995, for reasons\
    \ that Bellovin explained in the\n   paper's epilogue [Bellovin95].\n   While\
    \ it may seem a bit strange to publish the threat analysis a\n   decade after\
    \ starting work on the protocol designed to defend against\n   it, that is, nevertheless,\
    \ what this note attempts to do.  Better\n   late than never.\n   This note assumes\
    \ that the reader is familiar with both the DNS and\n   with DNSSEC, and does\
    \ not attempt to provide a tutorial on either.\n   The DNS documents most relevant\
    \ to the subject of this note are:\n   [RFC1034], [RFC1035], section 6.1 of [RFC1123],\
    \ [RFC2181], [RFC2308],\n   [RFC2671], [RFC2845], [RFC2930], [RFC3007], and [RFC2535].\n\
    \   For purposes of discussion, this note uses the term \"DNSSEC\" to refer\n\
    \   to the core hierarchical public key and signature mechanism specified\n  \
    \ in the DNSSEC documents, and refers to TKEY and TSIG as separate\n   mechanisms,\
    \ even though channel security mechanisms such as TKEY and\n   TSIG are also part\
    \ of the larger problem of \"securing DNS\" and thus\n   are often considered\
    \ part of the overall set of \"DNS security\n   extensions\".  This is an arbitrary\
    \ distinction that in part reflects\n   the way in which the protocol has evolved\
    \ (introduction of a\n   putatively simpler channel security model for certain\
    \ operations such\n   as zone transfers and dynamic update requests), and perhaps\
    \ should be\n   changed in a future revision of this note.\n"
- title: 2.  Known Threats
  contents:
  - "2.  Known Threats\n   There are several distinct classes of threats to the DNS,\
    \ most of\n   which are DNS-related instances of more general problems, but a\
    \ few\n   of which are specific to peculiarities of the DNS protocol.\n"
- title: 2.1.  Packet Interception
  contents:
  - "2.1.  Packet Interception\n   Some of the simplest threats against DNS are various\
    \ forms of packet\n   interception: monkey-in-the-middle attacks, eavesdropping\
    \ on requests\n   combined with spoofed responses that beat the real response\
    \ back to\n   the resolver, and so forth.  In any of these scenarios, the attacker\n\
    \   can simply tell either party (usually the resolver) whatever it wants\n  \
    \ that party to believe.  While packet interception attacks are far\n   from unique\
    \ to DNS, DNS's usual behavior of sending an entire query\n   or response in a\
    \ single unsigned, unencrypted UDP packet makes these\n   attacks particularly\
    \ easy for any bad guy with the ability to\n   intercept packets on a shared or\
    \ transit network.\n   To further complicate things, the DNS query the attacker\
    \ intercepts\n   may just be a means to an end for the attacker: the attacker\
    \ might\n   even choose to return the correct result in the answer section of\
    \ a\n   reply message while using other parts of the message to set the stage\n\
    \   for something more complicated, for example, a name chaining attack\n   (see\
    \ section 2.3).\n   While it certainly would be possible to sign DNS messages\
    \ using a\n   channel security mechanism such as TSIG or IPsec, or even to encrypt\n\
    \   them using IPsec, this would not be a very good solution for\n   interception\
    \ attacks.  First, this approach would impose a fairly\n   high processing cost\
    \ per DNS message, as well as a very high cost\n   associated with establishing\
    \ and maintaining bilateral trust\n   relationships between all the parties that\
    \ might be involved in\n   resolving any particular query.  For heavily used name\
    \ servers (such\n   as the servers for the root zone), this cost would almost\
    \ certainly\n   be prohibitively high.  Even more important, however, is that\
    \ the\n   underlying trust model in such a design would be wrong, since at best\n\
    \   it would only provide a hop-by-hop integrity check on DNS messages\n   and\
    \ would not provide any sort of end-to-end integrity check between\n   the producer\
    \ of DNS data (the zone administrator) and the consumer of\n   DNS data (the application\
    \ that triggered the query).\n   By contrast, DNSSEC (when used properly) does\
    \ provide an end-to-end\n   data integrity check, and is thus a much better solution\
    \ for this\n   class of problems during basic DNS lookup operations.\n   TSIG\
    \ does have its place in corners of the DNS protocol where there's\n   a specific\
    \ trust relationship between a particular client and a\n   particular server,\
    \ such as zone transfer, dynamic update, or a\n   resolver (stub or otherwise)\
    \ that is not going to check all the\n   DNSSEC signatures itself.\n   Note that\
    \ DNSSEC does not provide any protection against modification\n   of the DNS message\
    \ header, so any properly paranoid resolver must:\n   - Perform all of the DNSSEC\
    \ signature checking on its own,\n   - Use TSIG (or some equivalent mechanism)\
    \ to ensure the integrity of\n     its communication with whatever name servers\
    \ it chooses to trust,\n     or\n   - Resign itself to the possibility of being\
    \ attacked via packet\n     interception (and via other techniques discussed below).\n"
- title: 2.2.  ID Guessing and Query Prediction
  contents:
  - "2.2.  ID Guessing and Query Prediction\n   Since DNS is for the most part used\
    \ over UDP/IP, it is relatively\n   easy for an attacker to generate packets which\
    \ will match the\n   transport protocol parameters.  The ID field in the DNS header\
    \ is\n   only a 16-bit field and the server UDP port associated with DNS is a\n\
    \   well-known value, so there are only 2**32 possible combinations of ID\n  \
    \ and client UDP port for a given client and server.  This is not a\n   particularly\
    \ large range, and is not sufficient to protect against a\n   brute force search;\
    \ furthermore, in practice both the client UDP port\n   and the ID can often be\
    \ predicted from previous traffic, and it is\n   not uncommon for the client port\
    \ to be a known fixed value as well\n   (due to firewalls or other restrictions),\
    \ thus frequently reducing\n   the search space to a range smaller than 2**16.\n\
    \   By itself, ID guessing is not enough to allow an attacker to inject\n   bogus\
    \ data, but combined with knowledge (or guesses) about QNAMEs and\n   QTYPEs for\
    \ which a resolver might be querying, this leaves the\n   resolver only weakly\
    \ defended against injection of bogus responses.\n   Since this attack relies\
    \ on predicting a resolver's behavior, it's\n   most likely to be successful when\
    \ the victim is in a known state,\n   whether because the victim rebooted recently,\
    \ or because the victim's\n   behavior has been influenced by some other action\
    \ by the attacker, or\n   because the victim is responding (in a predictable way)\
    \ to some third\n   party action known to the attacker.\n   This attack is both\
    \ more and less difficult for the attacker than the\n   simple interception attack\
    \ described above: more difficult, because\n   the attack only works when the\
    \ attacker guesses correctly; less\n   difficult, because the attacker doesn't\
    \ need to be on a transit or\n   shared network.\n   In most other respects, this\
    \ attack is similar to a packet\n   interception attack.  A resolver that checks\
    \ DNSSEC signatures will\n   be able to detect the forged response; resolvers\
    \ that do not perform\n   DNSSEC signature checking themselves should use TSIG\
    \ or some\n   equivalent mechanism to ensure the integrity of their communication\n\
    \   with a recursive name server that does perform DNSSEC signature\n   checking.\n"
- title: 2.3.  Name Chaining
  contents:
  - "2.3.  Name Chaining\n   Perhaps the most interesting class of DNS-specific threats\
    \ are the\n   name chaining attacks.  These are a subset of a larger class of\n\
    \   name-based attacks, sometimes called \"cache poisoning\" attacks.  Most\n\
    \   name-based attacks can be partially mitigated by the long-standing\n   defense\
    \ of checking RRs in response messages for relevance to the\n   original query,\
    \ but such defenses do not catch name chaining attacks.\n   There are several\
    \ variations on the basic attack, but what they all\n   have in common is that\
    \ they all involve DNS RRs whose RDATA portion\n   (right hand side) includes\
    \ a DNS name (or, in a few cases, something\n   that is not a DNS name but which\
    \ directly maps to a DNS name).  Any\n   such RR is, at least in principle, a\
    \ hook that lets an attacker feed\n   bad data into a victim's cache, thus potentially\
    \ subverting\n   subsequent decisions based on DNS names.\n   The worst examples\
    \ in this class of RRs are CNAME, NS, and DNAME RRs\n   because they can redirect\
    \ a victim's query to a location of the\n   attacker's choosing.  RRs like MX\
    \ and SRV are somewhat less\n   dangerous, but in principle they can also be used\
    \ to trigger further\n   lookups at a location of the attacker's choosing.  Address\
    \ RR types\n   such as A or AAAA don't have DNS names in their RDATA, but since\
    \ the\n   IN-ADDR.ARPA and IP6.ARPA trees are indexed using a DNS encoding of\n\
    \   IPv4 and IPv6 addresses, these record types can also be used in a\n   name\
    \ chaining attack.\n   The general form of a name chaining attack is something\
    \ like this:\n   - Victim issues a query, perhaps at the instigation of the attacker\n\
    \     or some third party; in some cases the query itself may be\n     unrelated\
    \ to the name under attack (that is, the attacker is just\n     using this query\
    \ as a means to inject false information about some\n     other name).\n   - Attacker\
    \ injects response, whether via packet interception, query\n     guessing, or\
    \ by being a legitimate name server that's involved at\n     some point in the\
    \ process of answering the query that the victim\n     issued.\n   - Attacker's\
    \ response includes one or more RRs with DNS names in\n     their RDATA; depending\
    \ on which particular form this attack takes,\n     the object may be to inject\
    \ false data associated with those names\n     into the victim's cache via the\
    \ Additional section of this\n     response, or may be to redirect the next stage\
    \ of the query to a\n     server of the attacker's choosing (in order to inject\
    \ more complex\n     lies into the victim's cache than will fit easily into a\
    \ single\n     response, or in order to place the lies in the Authority or Answer\n\
    \     section of a response where they will have a better chance of\n     sneaking\
    \ past a resolver's defenses).\n   Any attacker who can insert resource records\
    \ into a victim's cache\n   can almost certainly do some kind of damage, so there\
    \ are cache\n   poisoning attacks which are not name chaining attacks in the sense\n\
    \   discussed here.  However, in the case of name chaining attacks, the\n   cause\
    \ and effect relationship between the initial attack and the\n   eventual result\
    \ may be significantly more complex than in the other\n   forms of cache poisoning,\
    \ so name chaining attacks merit special\n   attention.\n   The common thread\
    \ in all of the name chaining attacks is that\n   response messages allow the\
    \ attacker to introduce arbitrary DNS names\n   of the attacker's choosing and\
    \ provide further information that the\n   attacker claims is associated with\
    \ those names; unless the victim has\n   better knowledge of the data associated\
    \ with those names, the victim\n   is going to have a hard time defending against\
    \ this class of attacks.\n   This class of attack is particularly insidious given\
    \ that it's quite\n   easy for an attacker to provoke a victim into querying for\
    \ a\n   particular name of the attacker's choosing, for example, by embedding\n\
    \   a link to a 1x1-pixel \"web bug\" graphic in a piece of Text/HTML mail\n \
    \  to the victim.  If the victim's mail reading program attempts to\n   follow\
    \ such a link, the result will be a DNS query for a name chosen\n   by the attacker.\n\
    \   DNSSEC should provide a good defense against most (all?) variations\n   on\
    \ this class of attack.  By checking signatures, a resolver can\n   determine\
    \ whether the data associated with a name really was inserted\n   by the delegated\
    \ authority for that portion of the DNS name space.\n   More precisely, a resolver\
    \ can determine whether the entity that\n   injected the data had access to an\
    \ allegedly secret key whose\n   corresponding public key appears at an expected\
    \ location in the DNS\n   name space with an expected chain of parental signatures\
    \ that start\n   with a public key of which the resolver has prior knowledge.\n\
    \   DNSSEC signatures do not cover glue records, so there's still a\n   possibility\
    \ of a name chaining attack involving glue, but with DNSSEC\n   it is possible\
    \ to detect the attack by temporarily accepting the glue\n   in order to fetch\
    \ the signed authoritative version of the same data,\n   then checking the signatures\
    \ on the authoritative version.\n"
- title: 2.4.  Betrayal By Trusted Server
  contents:
  - "2.4.  Betrayal By Trusted Server\n   Another variation on the packet interception\
    \ attack is the trusted\n   server that turns out not to be so trustworthy, whether\
    \ by accident\n   or by intent.  Many client machines are only configured with\
    \ stub\n   resolvers, and use trusted servers to perform all of their DNS\n  \
    \ queries on their behalf.  In many cases the trusted server is\n   furnished\
    \ by the user's ISP and advertised to the client via DHCP or\n   PPP options.\
    \  Besides accidental betrayal of this trust relationship\n   (via server bugs,\
    \ successful server break-ins, etc), the server\n   itself may be configured to\
    \ give back answers that are not what the\n   user would expect, whether in an\
    \ honest attempt to help the user or\n   to promote some other goal such as furthering\
    \ a business partnership\n   between the ISP and some third party.\n   This problem\
    \ is particularly acute for frequent travelers who carry\n   their own equipment\
    \ and expect it to work in much the same way\n   wherever they go.  Such travelers\
    \ need trustworthy DNS service\n   without regard to who operates the network\
    \ into which their equipment\n   is currently plugged or what brand of middle\
    \ boxes the local\n   infrastructure might use.\n   While the obvious solution\
    \ to this problem would be for the client to\n   choose a more trustworthy server,\
    \ in practice this may not be an\n   option for the client.  In many network environments\
    \ a client machine\n   has only a limited set of recursive name servers from which\
    \ to\n   choose, and none of them may be particularly trustworthy.  In extreme\n\
    \   cases, port filtering or other forms of packet interception may\n   prevent\
    \ the client host from being able to run an iterative resolver\n   even if the\
    \ owner of the client machine is willing and able to do so.\n   Thus, while the\
    \ initial source of this problem is not a DNS protocol\n   attack per se, this\
    \ sort of betrayal is a threat to DNS clients, and\n   simply switching to a different\
    \ recursive name server is not an\n   adequate defense.\n   Viewed strictly from\
    \ the DNS protocol standpoint, the only difference\n   between this sort of betrayal\
    \ and a packet interception attack is\n   that in this case the client has voluntarily\
    \ sent its request to the\n   attacker.  The defense against this is the same\
    \ as with a packet\n   interception attack: the resolver must either check DNSSEC\
    \ signatures\n   itself or use TSIG (or equivalent) to authenticate the server\
    \ that it\n   has chosen to trust.  Note that use of TSIG does not by itself\n\
    \   guarantee that a name server is at all trustworthy: all TSIG can do\n   is\
    \ help a resolver protect its communication with a name server that\n   it has\
    \ already decided to trust for other reasons.  Protecting a\n   resolver's communication\
    \ with a server that's giving out bogus\n   answers is not particularly useful.\n\
    \   Also note that if the stub resolver does not trust the name server\n   that\
    \ is doing work on its behalf and wants to check the DNSSEC\n   signatures itself,\
    \ the resolver really does need to have independent\n   knowledge of the DNSSEC\
    \ public key(s) it needs in order to perform\n   the check.  Usually the public\
    \ key for the root zone is enough, but\n   in some cases knowledge of additional\
    \ keys may also be appropriate.\n   It is difficult to escape the conclusion that\
    \ a properly paranoid\n   resolver must always perform its own signature checking,\
    \ and that\n   this rule even applies to stub resolvers.\n"
- title: 2.5.  Denial of Service
  contents:
  - "2.5.  Denial of Service\n   As with any network service (or, indeed, almost any\
    \ service of any\n   kind in any domain of discourse), DNS is vulnerable to denial\
    \ of\n   service attacks.  DNSSEC does not help this, and may in fact make the\n\
    \   problem worse for resolvers that check signatures, since checking\n   signatures\
    \ both increases the processing cost per DNS message and in\n   some cases can\
    \ also increase the number of messages needed to answer\n   a query.  TSIG (and\
    \ similar mechanisms) have equivalent problems.\n   DNS servers are also at risk\
    \ of being used as denial of service\n   amplifiers, since DNS response packets\
    \ tend to be significantly\n   longer than DNS query packets.  Unsurprisingly,\
    \ DNSSEC doesn't help\n   here either.\n"
- title: 2.6.  Authenticated Denial of Domain Names
  contents:
  - "2.6.  Authenticated Denial of Domain Names\n   Much discussion has taken place\
    \ over the question of authenticated\n   denial of domain names.  The particular\
    \ question is whether there is\n   a requirement for authenticating the non-existence\
    \ of a name.  The\n   issue is whether the resolver should be able to detect when\
    \ an\n   attacker removes RRs from a response.\n   General paranoia aside, the\
    \ existence of RR types whose absence\n   causes an action other than immediate\
    \ failure (such as missing MX and\n   SRV RRs, which fail over to A RRs) constitutes\
    \ a real threat.\n   Arguably, in some cases, even the absence of an RR might\
    \ be\n   considered a problem.  The question remains: how serious is this\n  \
    \ threat?  Clearly the threat does exist; general paranoia says that\n   some\
    \ day it'll be on the front page of some major newspaper, even if\n   we cannot\
    \ conceive of a plausible scenario involving this attack\n   today.  This implies\
    \ that some mitigation of this risk is required.\n   Note that it's necessary\
    \ to prove the non-existence of applicable\n   wildcard RRs as part of the authenticated\
    \ denial mechanism, and that,\n   in a zone that is more than one label deep,\
    \ such a proof may require\n   proving the non-existence of multiple discrete\
    \ sets of wildcard RRs.\n   DNSSEC does include mechanisms which make it possible\
    \ to determine\n   which authoritative names exist in a zone, and which authoritative\n\
    \   resource record types exist at those names.  The DNSSEC protections\n   do\
    \ not cover non-authoritative data such as glue records.\n"
- title: 2.7.  Wildcards
  contents:
  - "2.7.  Wildcards\n   Much discussion has taken place over whether and how to provide\
    \ data\n   integrity and data origin authentication for \"wildcard\" DNS names.\n\
    \   Conceptually, RRs with wildcard names are patterns for synthesizing\n   RRs\
    \ on the fly according to the matching rules described in section\n   4.3.2 of\
    \ RFC 1034.  While the rules that control the behavior of\n   wildcard names have\
    \ a few quirks that can make them a trap for the\n   unwary zone administrator,\
    \ it's clear that a number of sites make\n   heavy use of wildcard RRs, particularly\
    \ wildcard MX RRs.\n   In order to provide the desired services for wildcard RRs,\
    \ we need to\n   do two things:\n   - We need a way to attest to the existence\
    \ of the wildcard RR itself\n     (that is, we need to show that the synthesis\
    \ rule exists), and\n   - We need a way to attest to the non-existence of any\
    \ RRs which, if\n     they existed, would make the wildcard RR irrelevant according\
    \ to\n     the synthesis rules that govern the way in which wildcard RRs are\n\
    \     used (that is, we need to show that the synthesis rule is\n     applicable).\n\
    \   Note that this makes the wildcard mechanisms dependent upon the\n   authenticated\
    \ denial mechanism described in the previous section.\n   DNSSEC includes mechanisms\
    \ along the lines described above, which\n   make it possible for a resolver to\
    \ verify that a name server applied\n   the wildcard expansion rules correctly\
    \ when generating an answer.\n"
- title: 3.  Weaknesses of DNSSEC
  contents:
  - "3.  Weaknesses of DNSSEC\n   DNSSEC has some problems of its own:\n   - DNSSEC\
    \ is complex to implement and includes some nasty edge cases\n     at the zone\
    \ cuts that require very careful coding.  Testbed\n     experience to date suggests\
    \ that trivial zone configuration errors\n     or expired keys can cause serious\
    \ problems for a DNSSEC-aware\n     resolver, and that the current protocol's\
    \ error reporting\n     capabilities may leave something to be desired.\n   -\
    \ DNSSEC significantly increases the size of DNS response packets;\n     among\
    \ other issues, this makes DNSSEC-aware DNS servers even more\n     effective\
    \ as denial of service amplifiers.\n   - DNSSEC answer validation increases the\
    \ resolver's work load, since\n     a DNSSEC-aware resolver will need to perform\
    \ signature validation\n     and in some cases will also need to issue further\
    \ queries.  This\n     increased workload will also increase the time it takes\
    \ to get an\n     answer back to the original DNS client, which is likely to trigger\n\
    \     both timeouts and re-queries in some cases.  Arguably, many current\n  \
    \   DNS clients are already too impatient even before taking the\n     further\
    \ delays that DNSSEC will impose into account, but that topic\n     is beyond\
    \ the scope of this note.\n   - Like DNS itself, DNSSEC's trust model is almost\
    \ totally\n     hierarchical.  While DNSSEC does allow resolvers to have special\n\
    \     additional knowledge of public keys beyond those for the root, in\n    \
    \ the general case the root key is the one that matters.  Thus any\n     compromise\
    \ in any of the zones between the root and a particular\n     target name can\
    \ damage DNSSEC's ability to protect the integrity of\n     data owned by that\
    \ target name.  This is not a change, since\n     insecure DNS has the same model.\n\
    \   - Key rollover at the root is really hard.  Work to date has not even\n  \
    \   come close to adequately specifying how the root key rolls over, or\n    \
    \ even how it's configured in the first place.\n   - DNSSEC creates a requirement\
    \ of loose time synchronization between\n     the validating resolver and the\
    \ entity creating the DNSSEC\n     signatures.  Prior to DNSSEC, all time-related\
    \ actions in DNS could\n     be performed by a machine that only knew about \"\
    elapsed\" or\n     \"relative\" time.  Because the validity period of a DNSSEC\
    \ signature\n     is based on \"absolute\" time, a validating resolver must have\
    \ the\n     same concept of absolute time as the zone signer in order to\n   \
    \  determine whether the signature is within its validity period or\n     has\
    \ expired.  An attacker that can change a resolver's opinion of\n     the current\
    \ absolute time can fool the resolver using expired\n     signatures.  An attacker\
    \ that can change the zone signer's opinion\n     of the current absolute time\
    \ can fool the zone signer into\n     generating signatures whose validity period\
    \ does not match what the\n     signer intended.\n   - The possible existence\
    \ of wildcard RRs in a zone complicates the\n     authenticated denial mechanism\
    \ considerably.  For most of the\n     decade that DNSSEC has been under development\
    \ these issues were\n     poorly understood.  At various times there have been\
    \ questions as\n     to whether the authenticated denial mechanism is completely\n\
    \     airtight and whether it would be worthwhile to optimize the\n     authenticated\
    \ denial mechanism for the common case in which\n     wildcards are not present\
    \ in a zone.  However, the main problem is\n     just the inherent complexity\
    \ of the wildcard mechanism itself.\n     This complexity probably makes the code\
    \ for generating and checking\n     authenticated denial attestations somewhat\
    \ fragile, but since the\n     alternative of giving up wildcards entirely is\
    \ not practical due to\n     widespread use, we are going to have to live with\
    \ wildcards. The\n     question just becomes one of whether or not the proposed\n\
    \     optimizations would make DNSSEC's mechanisms more or less fragile.\n   -\
    \ Even with DNSSEC, the class of attacks discussed in section 2.4 is\n     not\
    \ easy to defeat.  In order for DNSSEC to be effective in this\n     case, it\
    \ must be possible to configure the resolver to expect\n     certain categories\
    \ of DNS records to be signed.  This may require\n     manual configuration of\
    \ the resolver, especially during the initial\n     DNSSEC rollout period when\
    \ the resolver cannot reasonably expect\n     the root and TLD zones to be signed.\n"
- title: 4.  Topics for Future Work
  contents:
  - "4.  Topics for Future Work\n   This section lists a few subjects not covered\
    \ above which probably\n   need additional study, additional mechanisms, or both.\n"
- title: 4.1.  Interactions With Other Protocols
  contents:
  - "4.1.  Interactions With Other Protocols\n   The above discussion has concentrated\
    \ exclusively on attacks within\n   the boundaries of the DNS protocol itself,\
    \ since those are (some of)\n   the problems against which DNSSEC was intended\
    \ to protect.  There\n   are, however, other potential problems at the boundaries\
    \ where DNS\n   interacts with other protocols.\n"
- title: 4.2.  Securing DNS Dynamic Update
  contents:
  - "4.2.  Securing DNS Dynamic Update\n   DNS dynamic update opens a number of potential\
    \ problems when combined\n   with DNSSEC.  Dynamic update of a non-secure zone\
    \ can use TSIG to\n   authenticate the updating client to the server.  While TSIG\
    \ does not\n   scale very well (it requires manual configuration of shared keys\n\
    \   between the DNS name server and each TSIG client), it works well in a\n  \
    \ limited or closed environment such as a DHCP server updating a local\n   DNS\
    \ name server.\n   Major issues arise when trying to use dynamic update on a secure\n\
    \   zone.  TSIG can similarly be used in a limited fashion to\n   authenticate\
    \ the client to the server, but TSIG only protects DNS\n   transactions, not the\
    \ actual data, and the TSIG is not inserted into\n   the DNS zone, so resolvers\
    \ cannot use the TSIG as a way of verifying\n   the changes to the zone.  This\
    \ means that either:\n   a) The updating client must have access to a zone-signing\
    \ key in\n      order to sign the update before sending it to the server, or\n\
    \   b) The DNS name server must have access to an online zone-signing key\n  \
    \    in order to sign the update.\n   In either case, a zone-signing key must\
    \ be available to create signed\n   RRsets to place in the updated zone.  The\
    \ fact that this key must be\n   online (or at least available) is a potential\
    \ security risk.\n   Dynamic update also requires an update to the SERIAL field\
    \ of the\n   zone's SOA RR.  In theory, this could also be handled via either\
    \ of\n   the above options, but in practice (a) would almost certainly be\n  \
    \ extremely fragile, so (b) is the only workable mechanism.\n   There are other\
    \ threats in terms of describing the policy of who can\n   make what changes to\
    \ which RRsets in the zone.  The current access\n   control scheme in Secure Dynamic\
    \ Update is fairly limited.  There is\n   no way to give fine-grained access to\
    \ updating DNS zone information\n   to multiple entities, each of whom may require\
    \ different kinds of\n   access.  For example, Alice may need to be able to add\
    \ new nodes to\n   the zone or change existing nodes, but not remove them; Bob\
    \ may need\n   to be able to remove zones but not add them; Carol may need to\
    \ be\n   able to add, remove, or modify nodes, but only A records.\n   Scaling\
    \ properties of the key management problem here are a\n   particular concern that\
    \ needs more study.\n"
- title: 4.3.  Securing DNS Zone Replication
  contents:
  - "4.3.  Securing DNS Zone Replication\n   As discussed in previous sections, DNSSEC\
    \ per se attempts to provide\n   data integrity and data origin authentication\
    \ services on top of the\n   normal DNS query protocol.  Using the terminology\
    \ discussed in\n   [RFC3552], DNSSEC provides \"object security\" for the normal\
    \ DNS query\n   protocol.  For purposes of replicating entire DNS zones, however,\n\
    \   DNSSEC does not provide object security, because zones include\n   unsigned\
    \ NS RRs and glue at delegation points.  Use of TSIG to\n   protect zone transfer\
    \ (AXFR or IXFR) operations provides \"channel\n   security\", but still does\
    \ not provide object security for complete\n   zones. The trust relationships\
    \ involved in zone transfer are still\n   very much a hop-by-hop matter of name\
    \ server operators trusting other\n   name server operators rather than an end-to-end\
    \ matter of name server\n   operators trusting zone administrators.\n   Zone object\
    \ security was not an explicit design goal of DNSSEC, so\n   failure to provide\
    \ this service should not be a surprise.\n   Nevertheless, there are some zone\
    \ replication scenarios for which\n   this would be a very useful additional service,\
    \ so this seems like a\n   useful area for future work.  In theory it should not\
    \ be difficult to\n   add zone object security as a backwards compatible enhancement\
    \ to the\n   existing DNSSEC model, but the DNSEXT WG has not yet discussed either\n\
    \   the desirability of or the requirements for such an enhancement.\n"
- title: 5.  Conclusion
  contents:
  - "5.  Conclusion\n   Based on the above analysis, the DNSSEC extensions do appear\
    \ to solve\n   a set of problems that do need to be solved, and are worth deploying.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security considerations\
    \ of the DNS.\n   The authors believe that deploying DNSSEC will help to address\
    \ some,\n   but not all, of the known threats to the DNS.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This note is based both on previous published works by others\
    \ and on\n   a number of discussions both public and private over a period of\
    \ many\n   years, but particular thanks go to\n   Jaap Akkerhuis,\n   Steve Bellovin,\n\
    \   Dan Bernstein,\n   Randy Bush,\n   Steve Crocker,\n   Olafur Gudmundsson,\n\
    \   Russ Housley,\n   Rip Loomis,\n   Allison Mankin,\n   Paul Mockapetris,\n\
    \   Thomas Narten\n   Mans Nilsson,\n   Pekka Savola,\n   Paul Vixie,\n   Xunhua\
    \ Wang,\n   and any other members of the DNS, DNSSEC, DNSIND, and DNSEXT working\n\
    \   groups whose names and contributions the authors have forgotten, none\n  \
    \ of whom are responsible for what the authors did with their ideas.\n   As with\
    \ any work of this nature, the authors of this note acknowledge\n   that we are\
    \ standing on the toes of those who have gone before us.\n   Readers interested\
    \ in this subject may also wish to read\n   [Bellovin95], [Schuba93], and [Vixie95].\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC1034]    Mockapetris, P., \"Domain names - concepts\
    \ and\n                facilities\", STD 13, RFC 1034, November 1987.\n   [RFC1035]\
    \    Mockapetris, P., \"Domain names - implementation and\n                specification\"\
    , STD 13, RFC 1035, November 1987.\n   [RFC1123]    Braden, R., \"Requirements\
    \ for Internet Hosts -\n                Application and Support\", STD 3, RFC\
    \ 1123, October 1989.\n   [RFC2181]    Elz, R. and R. Bush, \"Clarifications to\
    \ the DNS\n                Specification\", RFC 2181, July 1997.\n   [RFC2308]\
    \    Andrews, M., \"Negative Caching of DNS Queries (DNS\n                NCACHE)\"\
    , RFC 2308, March 1998.\n   [RFC2671]    Vixie, P., \"Extension Mechanisms for\
    \ DNS (EDNS0)\", RFC\n                2671, August 1999.\n   [RFC2845]    Vixie,\
    \ P., Gudmundsson, O., Eastlake 3rd, D., and B.\n                Wellington, \"\
    Secret Key Transaction Authentication for\n                DNS (TSIG)\", RFC 2845,\
    \ May 2000.\n   [RFC2930]    Eastlake 3rd, D., \"Secret Key Establishment for\
    \ DNS\n                (TKEY RR)\", RFC 2930, September 2000.\n   [RFC3007]  \
    \  Wellington, B., \"Secure Domain Name System (DNS) Dynamic\n               \
    \ Update\", RFC 3007, November 2000.\n   [RFC2535]    Eastlake 3rd, D., \"Domain\
    \ Name System Security\n                Extensions\", RFC 2535, March 1999.\n"
- title: Informative References
  contents:
  - "Informative References\n   [RFC3552]    Rescorla, E. and B. Korver, \"Guidelines\
    \ for Writing RFC\n                Text on Security Considerations\", BCP 72,\
    \ RFC 3552, July\n                2003.\n   [Bellovin95] Bellovin, S., \"Using\
    \ the Domain Name System for System\n                Break-Ins\", Proceedings\
    \ of the Fifth Usenix Unix\n                Security Symposium, June 1995.\n \
    \  [Galvin93]   Design team meeting summary message posted to dns-\n         \
    \       security@tis.com mailing list by Jim Galvin on 19\n                November\
    \ 1993.\n   [Schuba93]   Schuba, C., \"Addressing Weaknesses in the Domain Name\n\
    \                System Protocol\", Master's thesis, Purdue University\n     \
    \           Department of Computer Sciences,  August 1993.\n   [Vixie95]    Vixie,\
    \ P, \"DNS and BIND Security Issues\", Proceedings of\n                the Fifth\
    \ Usenix Unix Security Symposium, June 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Derek Atkins\n   IHTFP Consulting, Inc.\n   6 Farragut\
    \ Ave\n   Somerville, MA  02144\n   USA\n   EMail: derek@ihtfp.com\n   Rob Austein\n\
    \   Internet Systems Consortium\n   950 Charter Street\n   Redwood City, CA 94063\n\
    \   USA\n   EMail: sra@isc.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
