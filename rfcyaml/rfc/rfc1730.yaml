- title: __initial_text__
  contents:
  - '              INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Message Access Protocol, Version 4 (IMAP4) allows a\n\
    \   client to access and manipulate electronic mail messages on a server.\n  \
    \ IMAP4 permits manipulation of remote message folders, called\n   \"mailboxes\"\
    , in a way that is functionally equivalent to local\n   mailboxes.  IMAP4 also\
    \ provides the capability for an offline client\n   to resynchronize with the\
    \ server (see also [IMAP-DISC]).\n   IMAP4 includes operations for creating, deleting,\
    \ and renaming\n   mailboxes; checking for new messages; permanently removing\
    \ messages;\n   setting and clearing flags; RFC 822 and MIME parsing; searching;\
    \ and\n   selective fetching of message attributes, texts, and portions\n   thereof.\
    \  Messages in IMAP4 are accessed by the use of numbers.\n   These numbers are\
    \ either message sequence numbers (relative position\n   from 1 to the number\
    \ of messages in the mailbox) or unique\n   identifiers (immutable, strictly ascending\
    \ values assigned to each\n   message, but which are not necessarily contiguous).\n\
    \   IMAP4 supports a single server.  A mechanism for supporting multiple\n   IMAP4\
    \ servers is discussed in [IMSP].\n   IMAP4 does not specify a means of posting\
    \ mail; this function is\n   handled by a mail transfer protocol such as [SMTP].\n\
    \   IMAP4 is designed to be upwards compatible from the [IMAP2] protocol.\n  \
    \ Compatibility issues are discussed in [IMAP-COMPAT].\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: IMAP4 Protocol Specification ......................................    1
  contents:
  - 'IMAP4 Protocol Specification ......................................    1

    '
- title: 1.      Organization of this Document .............................    1
  contents:
  - '1.      Organization of this Document .............................    1

    '
- title: 1.1.    How to Read This Document .................................    1
  contents:
  - '1.1.    How to Read This Document .................................    1

    '
- title: 1.2.    Conventions Used in this Document .........................    1
  contents:
  - '1.2.    Conventions Used in this Document .........................    1

    '
- title: 2.      Protocol Overview .........................................    1
  contents:
  - '2.      Protocol Overview .........................................    1

    '
- title: 2.1.    Link Level ................................................    1
  contents:
  - '2.1.    Link Level ................................................    1

    '
- title: 2.2.    Commands and Responses ....................................    1
  contents:
  - '2.2.    Commands and Responses ....................................    1

    '
- title: 2.2.1.  Client Protocol Sender and Server Protocol Receiver .......    2
  contents:
  - '2.2.1.  Client Protocol Sender and Server Protocol Receiver .......    2

    '
- title: 2.2.2.  Server Protocol Sender and Client Protocol Receiver .......    2
  contents:
  - '2.2.2.  Server Protocol Sender and Client Protocol Receiver .......    2

    '
- title: 3.      State and Flow Diagram ....................................    4
  contents:
  - '3.      State and Flow Diagram ....................................    4

    '
- title: 3.1.    Non-Authenticated State ...................................    4
  contents:
  - '3.1.    Non-Authenticated State ...................................    4

    '
- title: 3.2.    Authenticated State .......................................    4
  contents:
  - '3.2.    Authenticated State .......................................    4

    '
- title: 3.3.    Selected State ............................................    4
  contents:
  - '3.3.    Selected State ............................................    4

    '
- title: 3.4.    Logout State ..............................................    4
  contents:
  - '3.4.    Logout State ..............................................    4

    '
- title: 4.      Data Formats ..............................................    6
  contents:
  - '4.      Data Formats ..............................................    6

    '
- title: 4.1.    Atom ......................................................    6
  contents:
  - '4.1.    Atom ......................................................    6

    '
- title: 4.2.    Number ....................................................    6
  contents:
  - '4.2.    Number ....................................................    6

    '
- title: 4.3.    String ....................................................    6
  contents:
  - '4.3.    String ....................................................    6

    '
- title: 4.3.1.  8-bit and Binary Strings ..................................    7
  contents:
  - '4.3.1.  8-bit and Binary Strings ..................................    7

    '
- title: 4.4.    Parenthesized List ........................................    7
  contents:
  - '4.4.    Parenthesized List ........................................    7

    '
- title: 4.5.    NIL .......................................................    7
  contents:
  - '4.5.    NIL .......................................................    7

    '
- title: 5.      Operational Considerations ................................    8
  contents:
  - '5.      Operational Considerations ................................    8

    '
- title: 5.1.    Mailbox Naming ............................................    8
  contents:
  - '5.1.    Mailbox Naming ............................................    8

    '
- title: 5.2.    Mailbox Size and Message Status Updates ...................    8
  contents:
  - '5.2.    Mailbox Size and Message Status Updates ...................    8

    '
- title: 5.3.    Response when no Command in Progress ......................    8
  contents:
  - '5.3.    Response when no Command in Progress ......................    8

    '
- title: 5.4.    Autologout Timer ..........................................    9
  contents:
  - '5.4.    Autologout Timer ..........................................    9

    '
- title: 5.5.    Multiple Commands in Progress .............................    9
  contents:
  - '5.5.    Multiple Commands in Progress .............................    9

    '
- title: 6.      Client Commands ...........................................   10
  contents:
  - '6.      Client Commands ...........................................   10

    '
- title: 6.1.    Client Commands - Any State ...............................   10
  contents:
  - '6.1.    Client Commands - Any State ...............................   10

    '
- title: 6.1.1.  CAPABILITY Command ........................................   10
  contents:
  - '6.1.1.  CAPABILITY Command ........................................   10

    '
- title: 6.1.2.  NOOP Command ..............................................   11
  contents:
  - '6.1.2.  NOOP Command ..............................................   11

    '
- title: 6.1.3.  LOGOUT Command ............................................   11
  contents:
  - '6.1.3.  LOGOUT Command ............................................   11

    '
- title: 6.2.    Client Commands - Non-Authenticated State .................   12
  contents:
  - '6.2.    Client Commands - Non-Authenticated State .................   12

    '
- title: 6.2.1.  AUTHENTICATE Command ......................................   12
  contents:
  - '6.2.1.  AUTHENTICATE Command ......................................   12

    '
- title: 6.2.2.  LOGIN Command .............................................   14
  contents:
  - '6.2.2.  LOGIN Command .............................................   14

    '
- title: 6.3.    Client Commands - Authenticated State .....................   14
  contents:
  - '6.3.    Client Commands - Authenticated State .....................   14

    '
- title: 6.3.1.  SELECT Command ............................................   15
  contents:
  - '6.3.1.  SELECT Command ............................................   15

    '
- title: 6.3.2.  EXAMINE Command ...........................................   16
  contents:
  - '6.3.2.  EXAMINE Command ...........................................   16

    '
- title: 6.3.3.  CREATE Command ............................................   17
  contents:
  - '6.3.3.  CREATE Command ............................................   17

    '
- title: 6.3.4.  DELETE Command ............................................   18
  contents:
  - '6.3.4.  DELETE Command ............................................   18

    '
- title: 6.3.5.  RENAME Command ............................................   18
  contents:
  - '6.3.5.  RENAME Command ............................................   18

    '
- title: 6.3.6.  SUBSCRIBE Command .........................................   19
  contents:
  - '6.3.6.  SUBSCRIBE Command .........................................   19

    '
- title: 6.3.7.  UNSUBSCRIBE Command .......................................   19
  contents:
  - '6.3.7.  UNSUBSCRIBE Command .......................................   19

    '
- title: 6.3.8.  LIST Command ..............................................   20
  contents:
  - '6.3.8.  LIST Command ..............................................   20

    '
- title: 6.3.9.  LSUB Command ..............................................   22
  contents:
  - '6.3.9.  LSUB Command ..............................................   22

    '
- title: 6.3.10. APPEND Command ............................................   22
  contents:
  - '6.3.10. APPEND Command ............................................   22

    '
- title: 6.4.    Client Commands - Selected State ..........................   23
  contents:
  - '6.4.    Client Commands - Selected State ..........................   23

    '
- title: 6.4.1.  CHECK Command .............................................   23
  contents:
  - '6.4.1.  CHECK Command .............................................   23

    '
- title: 6.4.2.  CLOSE Command .............................................   24
  contents:
  - '6.4.2.  CLOSE Command .............................................   24

    '
- title: 6.4.3.  EXPUNGE Command ...........................................   25
  contents:
  - '6.4.3.  EXPUNGE Command ...........................................   25

    '
- title: 6.4.4.  SEARCH Command ............................................   25
  contents:
  - '6.4.4.  SEARCH Command ............................................   25

    '
- title: 6.4.5.  FETCH Command .............................................   29
  contents:
  - '6.4.5.  FETCH Command .............................................   29

    '
- title: 6.4.6.  PARTIAL Command ...........................................   32
  contents:
  - '6.4.6.  PARTIAL Command ...........................................   32

    '
- title: 6.4.7.  STORE Command .............................................   33
  contents:
  - '6.4.7.  STORE Command .............................................   33

    '
- title: 6.4.8.  COPY Command ..............................................   34
  contents:
  - '6.4.8.  COPY Command ..............................................   34

    '
- title: 6.4.9.  UID Command ...............................................   35
  contents:
  - '6.4.9.  UID Command ...............................................   35

    '
- title: 6.5.    Client Commands - Experimental/Expansion ..................   37
  contents:
  - '6.5.    Client Commands - Experimental/Expansion ..................   37

    '
- title: 6.5.1.  X<atom> Command ...........................................   37
  contents:
  - '6.5.1.  X<atom> Command ...........................................   37

    '
- title: 7.      Server Responses ..........................................   38
  contents:
  - '7.      Server Responses ..........................................   38

    '
- title: 7.1.    Server Responses - Status Responses .......................   39
  contents:
  - '7.1.    Server Responses - Status Responses .......................   39

    '
- title: 7.1.1.  OK Response ...............................................   40
  contents:
  - '7.1.1.  OK Response ...............................................   40

    '
- title: 7.1.2.  NO Response ...............................................   40
  contents:
  - '7.1.2.  NO Response ...............................................   40

    '
- title: 7.1.3.  BAD Response ..............................................   41
  contents:
  - '7.1.3.  BAD Response ..............................................   41

    '
- title: 7.1.4.  PREAUTH Response ..........................................   41
  contents:
  - '7.1.4.  PREAUTH Response ..........................................   41

    '
- title: 7.1.5.  BYE Response ..............................................   41
  contents:
  - '7.1.5.  BYE Response ..............................................   41

    '
- title: 7.2.    Server Responses - Server and Mailbox Status ..............   42
  contents:
  - '7.2.    Server Responses - Server and Mailbox Status ..............   42

    '
- title: 7.2.1.  CAPABILITY Response .......................................   42
  contents:
  - '7.2.1.  CAPABILITY Response .......................................   42

    '
- title: 7.2.2.  LIST Response .............................................   43
  contents:
  - '7.2.2.  LIST Response .............................................   43

    '
- title: 7.2.3.  LSUB Response .............................................   44
  contents:
  - '7.2.3.  LSUB Response .............................................   44

    '
- title: 7.2.4.  SEARCH Response ...........................................   44
  contents:
  - '7.2.4.  SEARCH Response ...........................................   44

    '
- title: 7.2.5.  FLAGS Response ............................................   44
  contents:
  - '7.2.5.  FLAGS Response ............................................   44

    '
- title: 7.3.    Server Responses - Message Status .........................   45
  contents:
  - '7.3.    Server Responses - Message Status .........................   45

    '
- title: 7.3.1.  EXISTS Response ...........................................   45
  contents:
  - '7.3.1.  EXISTS Response ...........................................   45

    '
- title: 7.3.2.  RECENT Response ...........................................   45
  contents:
  - '7.3.2.  RECENT Response ...........................................   45

    '
- title: 7.3.3.  EXPUNGE Response ..........................................   45
  contents:
  - '7.3.3.  EXPUNGE Response ..........................................   45

    '
- title: 7.3.4.  FETCH Response ............................................   46
  contents:
  - '7.3.4.  FETCH Response ............................................   46

    '
- title: 7.3.5.  Obsolete Responses ........................................   51
  contents:
  - '7.3.5.  Obsolete Responses ........................................   51

    '
- title: 7.4.    Server Responses - Command Continuation Request ...........   51
  contents:
  - '7.4.    Server Responses - Command Continuation Request ...........   51

    '
- title: 8.      Sample IMAP4 session ......................................   52
  contents:
  - '8.      Sample IMAP4 session ......................................   52

    '
- title: 9.      Formal Syntax .............................................   53
  contents:
  - '9.      Formal Syntax .............................................   53

    '
- title: 10.     Author's Note .............................................   64
  contents:
  - '10.     Author''s Note .............................................   64

    '
- title: 11.     Security Considerations ...................................   64
  contents:
  - '11.     Security Considerations ...................................   64

    '
- title: 12.     Author's Address ..........................................   64
  contents:
  - '12.     Author''s Address ..........................................   64

    '
- title: Appendices ........................................................   65
  contents:
  - 'Appendices ........................................................   65

    '
- title: A.      Obsolete Commands .........................................   65
  contents:
  - 'A.      Obsolete Commands .........................................   65

    '
- title: A.6.3.OBS.1.    FIND ALL.MAILBOXES Command ........................   65
  contents:
  - 'A.6.3.OBS.1.    FIND ALL.MAILBOXES Command ........................   65

    '
- title: A.6.3.OBS.2.    FIND MAILBOXES Command ............................   65
  contents:
  - 'A.6.3.OBS.2.    FIND MAILBOXES Command ............................   65

    '
- title: A.6.3.OBS.3.    SUBSCRIBE MAILBOX Command .........................   66
  contents:
  - 'A.6.3.OBS.3.    SUBSCRIBE MAILBOX Command .........................   66

    '
- title: A.6.3.OBS.4.    UNSUBSCRIBE MAILBOX Command .......................   66
  contents:
  - 'A.6.3.OBS.4.    UNSUBSCRIBE MAILBOX Command .......................   66

    '
- title: B.      Obsolete Responses ........................................   68
  contents:
  - 'B.      Obsolete Responses ........................................   68

    '
- title: B.7.2.OBS.1.    MAILBOX Response ..................................   68
  contents:
  - 'B.7.2.OBS.1.    MAILBOX Response ..................................   68

    '
- title: B.7.3.OBS.1.    COPY Response .....................................   68
  contents:
  - 'B.7.3.OBS.1.    COPY Response .....................................   68

    '
- title: B.7.3.OBS.2.    STORE Response ....................................   69
  contents:
  - 'B.7.3.OBS.2.    STORE Response ....................................   69

    '
- title: C.      References ................................................   70
  contents:
  - 'C.      References ................................................   70

    '
- title: E.      IMAP4 Keyword Index .......................................   71
  contents:
  - 'E.      IMAP4 Keyword Index .......................................   71

    '
- title: IMAP4 Protocol Specification
  contents:
  - 'IMAP4 Protocol Specification

    '
- title: 1.      Organization of this Document
  contents:
  - '1.      Organization of this Document

    '
- title: 1.1.    How to Read This Document
  contents:
  - "1.1.    How to Read This Document\n   This document is written from the point\
    \ of view of the implementor of\n   an IMAP4 client or server.  Beyond the protocol\
    \ overview in section\n   2, it is not optimized for someone trying to understand\
    \ the operation\n   of the protocol.  The material in sections 3 through 5 provides\
    \ the\n   general context and definitions with which IMAP4 operates.\n   Sections\
    \ 6, 7, and 9 describe the IMAP commands, responses, and\n   syntax, respectively.\
    \  The relationships among these are such that it\n   is almost impossible to\
    \ understand any of them separately.  In\n   particular, one should not attempt\
    \ to deduce command syntax from the\n   command section alone; one should instead\
    \ refer to the formal syntax\n   section.\n"
- title: 1.2.    Conventions Used in this Document
  contents:
  - "1.2.    Conventions Used in this Document\n   In examples, \"C:\" and \"S:\"\
    \ indicate lines sent by the client and\n   server respectively.\n"
- title: 2.      Protocol Overview
  contents:
  - '2.      Protocol Overview

    '
- title: 2.1.    Link Level
  contents:
  - "2.1.    Link Level\n   The IMAP4 protocol assumes a reliable data stream such\
    \ as provided by\n   TCP.  When TCP is used, an IMAP4 server listens on port 143.\n"
- title: 2.2.    Commands and Responses
  contents:
  - "2.2.    Commands and Responses\n   An IMAP4 session consists of the establishment\
    \ of a client/server\n   connection, an initial greeting from the server, and\
    \ client/server\n   interactions.  These client/server interactions consist of\
    \ a client\n   command, server data, and a server completion result response.\n\
    \   All interactions transmitted by client and server are in the form of\n   lines;\
    \ that is, strings that end with a CRLF.  The protocol receiver\n   of an IMAP4\
    \ client or server is either reading a line, or is reading\n   a sequence of octets\
    \ with a known count followed by a line.\n"
- title: 2.2.1.  Client Protocol Sender and Server Protocol Receiver
  contents:
  - "2.2.1.  Client Protocol Sender and Server Protocol Receiver\n   The client command\
    \ begins an operation.  Each client command is\n   prefixed with a identifier\
    \ (typically a short alphanumeric string,\n   e.g. A0001, A0002, etc.) called\
    \ a \"tag\".  A different tag is\n   generated by the client for each command.\n\
    \   There are two cases in which a line from the client does not\n   represent\
    \ a complete command.  In one case, a command argument is\n   quoted with an octet\
    \ count (see the description of literal in String\n   under Data Formats); in\
    \ the other case, the command arguments require\n   server feedback (see the AUTHENTICATE\
    \ command).  In either case, the\n   server sends a command continuation request\
    \ response if it is ready\n   for the octets (if appropriate) and the remainder\
    \ of the command.\n   This response is prefixed with the token \"+\".\n      \
    \  Note: If, instead, the server detected an error in the\n        command, it\
    \ sends a BAD completion response with tag\n        matching the command (as described\
    \ below) to reject the\n        command and prevent the client from sending any\
    \ more of the\n        command.\n        It is also possible for the server to\
    \ send a completion\n        response for some other command (if multiple commands\
    \ are\n        in progress), or untagged data.  In either case, the\n        command\
    \ continuation request is still pending; the client\n        takes the appropriate\
    \ action for the response, and reads\n        another response from the server.\n\
    \   The protocol receiver of an IMAP4 server reads a command line from\n   the\
    \ client, parses the command and its arguments, and transmits\n   server data\
    \ and a server command completion result response.\n"
- title: 2.2.2.  Server Protocol Sender and Client Protocol Receiver
  contents:
  - "2.2.2.  Server Protocol Sender and Client Protocol Receiver\n   Data transmitted\
    \ by the server to the client and status responses\n   that do not indicate command\
    \ completion are prefixed with the token\n   \"*\", and are called untagged responses.\n\
    \   Server data may be sent as a result of a client command, or may be\n   sent\
    \ unilaterally by the server.  There is no syntactic difference\n   between server\
    \ data that resulted from a specific command and server\n   data that were sent\
    \ unilaterally.\n   The server completion result response indicates the success\
    \ or\n   failure of the operation.  It is tagged with the same tag as the\n  \
    \ client command which began the operation.  Thus, if more than one\n   command\
    \ is in progress, the tag in a server completion response\n   identifies the command\
    \ to which the response applies.  There are\n   three possible server completion\
    \ responses: OK (indicating success),\n   NO (indicating failure), or BAD (indicating\
    \ protocol error such as\n   unrecognized command or command syntax error).\n\
    \   The protocol receiver of an IMAP4 client reads a response line from\n   the\
    \ server.  It then takes action on the response based upon the\n   first token\
    \ of the response, which may be a tag, a \"*\", or a \"+\".  As\n   described\
    \ above.\n   A client MUST be prepared to accept any server response at all times.\n\
    \   This includes server data that it may not have requested.  Server\n   data\
    \ SHOULD be recorded, so that the client can reference its\n   recorded copy rather\
    \ than sending a command to the server to request\n   the data.  In the case of\
    \ certain server data, recording the data is\n   mandatory.\n   This topic is\
    \ discussed in greater detail in the Server Responses\n   section.\n"
- title: 3.      State and Flow Diagram
  contents:
  - "3.      State and Flow Diagram\n   An IMAP4 server is in one of four states.\
    \  Most commands are valid in\n   only certain states.  It is a protocol error\
    \ for the client to\n   attempt a command while the command is in an inappropriate\
    \ state.  In\n   this case, a server will respond with a BAD or NO (depending\
    \ upon\n   server implementation) command completion result.\n"
- title: 3.1.    Non-Authenticated State
  contents:
  - "3.1.    Non-Authenticated State\n   In non-authenticated state, the user must\
    \ supply authentication\n   credentials before most commands will be permitted.\
    \  This state is\n   entered when a connection starts unless the connection has\
    \ been\n   pre-authenticated.\n"
- title: 3.2.    Authenticated State
  contents:
  - "3.2.    Authenticated State\n   In authenticated state, the user is authenticated\
    \ and must select a\n   mailbox to access before commands that affect messages\
    \ will be\n   permitted.  This state is entered when a pre-authenticated connection\n\
    \   starts, when acceptable authentication credentials have been\n   provided,\
    \ or after an error in selecting a mailbox.\n"
- title: 3.3.    Selected State
  contents:
  - "3.3.    Selected State\n   In selected state, a mailbox has been selected to\
    \ access.  This state\n   is entered when a mailbox has been successfully selected.\n"
- title: 3.4.    Logout State
  contents:
  - "3.4.    Logout State\n   In logout state, the session is being terminated, and\
    \ the server will\n   close the connection.  This state can be entered as a result\
    \ of a\n   client request or by unilateral server decision.\n            +--------------------------------------+\n\
    \            |initial connection and server greeting|\n            +--------------------------------------+\n\
    \                      || (1)       || (2)        || (3)\n                   \
    \   VV           ||            ||\n            +-----------------+    ||     \
    \       ||\n            |non-authenticated|    ||            ||\n            +-----------------+\
    \    ||            ||\n             || (7)   || (4)       ||            ||\n \
    \            ||       VV           VV            ||\n             ||     +----------------+\
    \           ||\n             ||     | authenticated  |<=++       ||\n        \
    \     ||     +----------------+  ||       ||\n             ||       || (7)   ||\
    \ (5)   || (6)   ||\n             ||       ||       VV       ||       ||\n   \
    \          ||       ||    +--------+  ||       ||\n             ||       ||  \
    \  |selected|==++       ||\n             ||       ||    +--------+           ||\n\
    \             ||       ||       || (7)            ||\n             VV       VV\
    \       VV                VV\n            +--------------------------------------+\n\
    \            |     logout and close connection      |\n            +--------------------------------------+\n\
    \         (1) connection without pre-authentication (OK greeting)\n         (2)\
    \ pre-authenticated connection (PREAUTH greeting)\n         (3) rejected connection\
    \ (BYE greeting)\n         (4) successful LOGIN or AUTHENTICATE command\n    \
    \     (5) successful SELECT or EXAMINE command\n         (6) CLOSE command, or\
    \ failed SELECT or EXAMINE command\n         (7) LOGOUT command, server shutdown,\
    \ or connection closed\n"
- title: 4.      Data Formats
  contents:
  - "4.      Data Formats\n   IMAP4 uses textual commands and responses.  Data in\
    \ IMAP4 can be in\n   one of several forms: atom, number, string, parenthesized\
    \ list, or\n   NIL.\n"
- title: 4.1.    Atom
  contents:
  - "4.1.    Atom\n   An atom consists of one or more non-special characters.\n"
- title: 4.2.    Number
  contents:
  - "4.2.    Number\n   A number consists of one or more digit characters, and represents\
    \ a\n   numeric value.\n"
- title: 4.3.    String
  contents:
  - "4.3.    String\n   A string is in one of two forms: literal and quoted string.\
    \  The\n   literal form is the general form of string.  The quoted string form\n\
    \   is an alternative that avoids the overhead of processing a literal at\n  \
    \ the cost of restrictions of what may be in a quoted string.\n   A literal is\
    \ a sequence of zero or more octets (including CR and LF),\n   prefix-quoted with\
    \ an octet count in the form of an open brace (\"{\"),\n   the number of octets,\
    \ close brace (\"}\"), and CRLF.  In the case of\n   literals transmitted from\
    \ server to client, the CRLF is immediately\n   followed by the octet data.  In\
    \ the case of literals transmitted from\n   client to server, the client must\
    \ wait to receive a command\n   continuation request (described later in this\
    \ document) before\n   sending the octet data (and the remainder of the command).\n\
    \   A quoted string is a sequence of zero or more 7-bit characters,\n   excluding\
    \ CR and LF, with double quote (<\">) characters at each end.\n   The empty string\
    \ is respresented as either \"\" (a quoted string with\n   zero characters between\
    \ double quotes) or as {0} followed by CRLF (a\n   literal with an octet count\
    \ of 0).\n        Note: Even if the octet count is 0, a client transmitting a\n\
    \        literal must wait to receive a command continuation\n        request.\n"
- title: 4.3.1.  8-bit and Binary Strings
  contents:
  - "4.3.1.  8-bit and Binary Strings\n   8-bit textual and binary mail is supported\
    \ through the use of\n   [MIME-1] encoding.  IMAP4 implementations MAY transmit\
    \ 8-bit or\n   multi-octet characters in literals, but should do so only when\
    \ the\n   character set is identified.\n   Although a BINARY body encoding is\
    \ defined, unencoded binary strings\n   are not permitted.  A \"binary string\"\
    \ is any string with NUL\n   characters.  Implementations MUST encode binary data\
    \ into a textual\n   form such as BASE64 before transmitting the data.  A string\
    \ with an\n   excessive amount of CTL characters may also be considered to be\n\
    \   binary, although this is not required.\n"
- title: 4.4.    Parenthesized List
  contents:
  - "4.4.    Parenthesized List\n   Data structures are represented as a \"parenthesized\
    \ list\"; a sequence\n   of data items, delimited by space, and bounded at each\
    \ end by\n   parentheses.  A parenthesized list may itself contain other\n   parenthesized\
    \ lists, using multiple levels of parentheses to indicate\n   nesting.\n   The\
    \ empty list is represented as () -- a parenthesized list with no\n   members.\n"
- title: 4.5.    NIL
  contents:
  - "4.5.    NIL\n   The special atom \"NIL\" represents the non-existence of a particular\n\
    \   data item that is represented as a string or parenthesized list, as\n   distinct\
    \ from the empty string \"\" or the empty parenthesized list ().\n"
- title: 5.      Operational Considerations
  contents:
  - '5.      Operational Considerations

    '
- title: 5.1.    Mailbox Naming
  contents:
  - "5.1.    Mailbox Naming\n   The interpretation of mailbox names is implementation-dependent.\n\
    \   However, the mailbox name INBOX is a special name reserved to mean\n   \"\
    the primary mailbox for this user on this server\".  If it is desired\n   to export\
    \ hierarchical mailbox names, mailbox names must be\n   left-to-right hierarchical\
    \ using a single character to separate\n   levels of hierarchy.  The same hierarchy\
    \ separator character is used\n   for all levels of hierarchy within a single\
    \ name.\n"
- title: 5.2.    Mailbox Size and Message Status Updates
  contents:
  - "5.2.    Mailbox Size and Message Status Updates\n   At any time, a server can\
    \ send data that the client did not request.\n   Sometimes, such behavior is required.\
    \  For example, agents other than\n   the server may add messages to the mailbox\
    \ (e.g. new mail delivery),\n   change the flags of message in the mailbox (e.g.\
    \ simultaneous access\n   to the same mailbox by multiple agents), or even remove\
    \ messages from\n   the mailbox.  A server MUST send mailbox size updates automatically\n\
    \   if a mailbox size change is observed during the processing of a\n   command.\
    \  A server SHOULD send message flag updates automatically,\n   without requiring\
    \ the client to request such updates explicitly.\n   Special rules exist for server\
    \ notification of a client about the\n   removal of messages to prevent synchronization\
    \ errors; see the\n   description of the EXPUNGE response for more details.\n\
    \   Regardless of what implementation decisions a client may take on\n   remembering\
    \ data from the server, a client implementation MUST record\n   mailbox size updates.\
    \  It MUST NOT assume that any command after\n   initial mailbox selection will\
    \ return the size of the mailbox.\n"
- title: 5.3.    Response when no Command in Progress
  contents:
  - "5.3.    Response when no Command in Progress\n   Server implementations are permitted\
    \ to send an untagged response\n   (except for EXPUNGE) while there is no command\
    \ in progress.  Server\n   implementations that send such responses MUST deal\
    \ with flow control\n   considerations.  Specifically, they must either (1) verify\
    \ that the\n   size of the data does not exceed the underlying transport's available\n\
    \   window size, or (2) use non-blocking writes.\n"
- title: 5.4.    Autologout Timer
  contents:
  - "5.4.    Autologout Timer\n   If a server has an inactivity autologout timer,\
    \ that timer MUST be of\n   at least 30 minutes' duration.  The receipt of ANY\
    \ command from the\n   client during that interval should suffice to reset the\
    \ autologout\n   timer.\n"
- title: 5.5.    Multiple Commands in Progress
  contents:
  - "5.5.    Multiple Commands in Progress\n   The client is not required to wait\
    \ for the completion result response\n   of a command before sending another command,\
    \ subject to flow control\n   constraints on the underlying data stream.  Similarly,\
    \ a server is\n   not required to process a command to completion before beginning\n\
    \   processing of the next command, unless an ambiguity would result\n   because\
    \ of a command that would affect the results of other commands.\n   If there is\
    \ such an ambiguity, the server executes commands to\n   completion in the order\
    \ given by the client.\n"
- title: 6.      Client Commands
  contents:
  - "6.      Client Commands\n   IMAP4 commands are described in this section.  Commands\
    \ are organized\n   by the state in which the command is permitted.  Commands\
    \ which are\n   permitted in multiple states are listed in the minimum permitted\n\
    \   state (for example, commands valid in authenticated and selected\n   state\
    \ are listed in the authenticated state commands).\n   Command arguments, identified\
    \ by \"Arguments:\" in the command\n   descriptions below, are described by function,\
    \ not by syntax.  The\n   precise syntax of command arguments is described in\
    \ the Formal Syntax\n   section.\n   Some commands cause specific server data\
    \ to be returned; these are\n   identified by \"Data:\" in the command descriptions\
    \ below.  See the\n   response descriptions in the Responses section for information\
    \ on\n   these responses, and the Formal Syntax section for the precise syntax\n\
    \   of these responses.  It is possible for server data to be transmitted\n  \
    \ as a result of any command; thus, commands that do not specifically\n   require\
    \ server data specify \"no specific data for this command\"\n   instead of \"\
    none\".\n   The \"Result:\" in the command description refers to the possible\n\
    \   tagged status responses to a command, and any special interpretation\n   of\
    \ these status responses.\n"
- title: 6.1.    Client Commands - Any State
  contents:
  - "6.1.    Client Commands - Any State\n   The following commands are valid in any\
    \ state: CAPABILITY, NOOP, and\n   LOGOUT.\n"
- title: 6.1.1.  CAPABILITY Command
  contents:
  - "6.1.1.  CAPABILITY Command\n   Arguments:  none\n   Data:       mandatory untagged\
    \ response: CAPABILITY\n   Result:     OK - capability completed\n           \
    \    BAD - command unknown or arguments invalid\n      The CAPABILITY command\
    \ requests a listing of capabilities that the\n      server supports.  The server\
    \ MUST send a single untagged\n      CAPABILITY response with \"IMAP4\" as the\
    \ first listed capability\n      before the (tagged) OK response.  This listing\
    \ of capabilities is\n      not dependent upon connection state or user.  It is\
    \ therefore not\n      necessary to issue a CAPABILITY command more than once\
    \ in a\n      session.\n      Capability names other than \"IMAP4\" refer to extensions,\n\
    \      revisions, or amendments to this specification.  See the\n      documentation\
    \ of the CAPABILITY response for additional\n      information.  No capabilities\
    \ are enabled without explicit client\n      action to invoke the capability.\
    \  See the section entitled \"Client\n      Commands - Experimental/Expansion\"\
    \ for information about the form\n      of site or implementation-specific capabilities.\n\
    \   Example:    C: abcd CAPABILITY\n               S: * CAPABILITY IMAP4\n   \
    \            S: abcd OK CAPABILITY completed\n"
- title: 6.1.2.  NOOP Command
  contents:
  - "6.1.2.  NOOP Command\n   Arguments:  none\n   Data:       no specific data for\
    \ this command (but see below)\n   Result:     OK - noop completed\n         \
    \      BAD - command unknown or arguments invalid\n      The NOOP command always\
    \ succeeds.  It does nothing.\n      Since any command can return a status update\
    \ as untagged data, the\n      NOOP command can be used as a periodic poll for\
    \ new messages or\n      message status updates during a period of inactivity.\
    \  The NOOP\n      command can also be used to reset any inactivity autologout\
    \ timer\n      on the server.\n   Example:    C: a002 NOOP\n               S:\
    \ a002 OK NOOP completed\n                  . . .\n               C: a047 NOOP\n\
    \               S: * 22 EXPUNGE\n               S: * 23 EXISTS\n             \
    \  S: * 3 RECENT\n               S: * 14 FETCH (FLAGS (\\Seen \\Deleted))\n  \
    \             S: a047 OK NOOP completed\n"
- title: 6.1.3.  LOGOUT Command
  contents:
  - "6.1.3.  LOGOUT Command\n   Arguments:  none\n   Data:       mandatory untagged\
    \ response: BYE\n   Result:     OK - logout completed\n               BAD - command\
    \ unknown or arguments invalid\n      The LOGOUT command informs the server that\
    \ the client is done with\n      the session.  The server must send a BYE untagged\
    \ response before\n      the (tagged) OK response, and then close the network\
    \ connection.\n   Example:    C: A023 LOGOUT\n               S: * BYE IMAP4 Server\
    \ logging out\n               S: A023 OK LOGOUT completed\n               (Server\
    \ and client then close the connection)\n"
- title: 6.2.    Client Commands - Non-Authenticated State
  contents:
  - "6.2.    Client Commands - Non-Authenticated State\n   In non-authenticated state,\
    \ the AUTHENTICATE or LOGIN command\n   establishes authentication and enter authenticated\
    \ state.  The\n   AUTHENTICATE command provides a general mechanism for a variety\
    \ of\n   authentication techniques, whereas the LOGIN command uses the\n   traditional\
    \ user name and plaintext password pair.\n   Server implementations may allow\
    \ non-authenticated access to certain\n   mailboxes.  The convention is to use\
    \ a LOGIN command with the userid\n   \"anonymous\".  A password is required.\
    \  It is implementation-dependent\n   what requirements, if any, are placed on\
    \ the password and what access\n   restrictions are placed on anonymous users.\n\
    \   Once authenticated (including as anonymous), it is not possible to\n   re-enter\
    \ non-authenticated state.\n   In addition to the universal commands (CAPABILITY,\
    \ NOOP, and LOGOUT),\n   the following commands are valid in non-authenticated\
    \ state:\n   AUTHENTICATE and LOGIN.\n"
- title: 6.2.1.  AUTHENTICATE Command
  contents:
  - "6.2.1.  AUTHENTICATE Command\n   Arguments:  authentication mechanism name\n\
    \   Data:       continuation data may be requested\n   Result:     OK - authenticate\
    \ completed, now in authenticated state\n               NO - authenticate failure:\
    \ unsupported authentication\n                    mechanism, credentials rejected\n\
    \               BAD - command unknown or arguments invalid,\n                \
    \    authentication exchange cancelled\n      The AUTHENTICATE command indicates\
    \ an authentication mechanism,\n      such as described in [IMAP-AUTH], to the\
    \ server.  If the server\n      supports the requested authentication mechanism,\
    \ it performs an\n      authentication protocol exchange to authenticate and identify\
    \ the\n      user.  Optionally, it also negotiates a protection mechanism for\n\
    \      subsequent protocol interactions.  If the requested authentication\n  \
    \    mechanism is not supported, the server should reject the\n      AUTHENTICATE\
    \ command by sending a tagged NO response.\n      The authentication protocol\
    \ exchange consists of a series of\n      server challenges and client answers\
    \ that are specific to the\n      authentication mechanism.  A server challenge\
    \ consists of a\n      command continuation request response with the \"+\" token\
    \ followed\n      by a BASE64 encoded string.  The client answer consists of a\
    \ line\n      consisting of a BASE64 encoded string.  If the client wishes to\n\
    \      cancel an authentication exchange, it should issue a line with a\n    \
    \  single \"*\".  If the server receives such an answer, it must reject\n    \
    \  the AUTHENTICATE command by sending a tagged BAD response.\n      A protection\
    \ mechanism provides integrity and privacy protection\n      to the protocol session.\
    \  If a protection mechanism is negotiated,\n      it is applied to all subsequent\
    \ data sent over the connection.\n      The protection mechanism takes effect\
    \ immediately following the\n      CRLF that concludes the authentication exchange\
    \ for the client,\n      and the CRLF of the tagged OK response for the server.\
    \  Once the\n      protection mechanism is in effect, the stream of command and\n\
    \      response octets is processed into buffers of ciphertext.  Each\n      buffer\
    \ is transferred over the connection as a stream of octets\n      prepended with\
    \ a four octet field in network byte order that\n      represents the length of\
    \ the following data.  The maximum\n      ciphertext buffer length is defined\
    \ by the protection mechanism.\n      The server is not required to support any\
    \ particular\n      authentication mechanism, nor are authentication mechanisms\n\
    \      required to support any protection mechanisms.  If an AUTHENTICATE\n  \
    \    command fails with a NO response, the client may try another\n      authentication\
    \ mechanism by issuing another AUTHENTICATE command,\n      or may attempt to\
    \ authenticate by using the LOGIN command.  In\n      other words, the client\
    \ may request authentication types in\n      decreasing order of preference, with\
    \ the LOGIN command as a last\n      resort.\n   Example:    S: * OK KerberosV4\
    \ IMAP4 Server\n               C: A001 AUTHENTICATE KERBEROS_V4\n            \
    \   S: + AmFYig==\n               C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n\
    \                  +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n      \
    \            WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n               S: +\
    \ or//EoAADZI=\n               C: DiAF5A4gA+oOIALuBkAAmw==\n               S:\
    \ A001 OK Kerberos V4 authentication successful\n        Note: the line breaks\
    \ in the first client answer are for\n        editorial clarity and are not in\
    \ real authenticators.\n"
- title: 6.2.2.  LOGIN Command
  contents:
  - "6.2.2.  LOGIN Command\n   Arguments:  user name\n               password\n  \
    \ Data:       no specific data for this command\n   Result:     OK - login completed,\
    \ now in authenticated state\n               NO - login failure: user name or\
    \ password rejected\n               BAD - command unknown or arguments invalid\n\
    \      The LOGIN command identifies the user to the server and carries\n     \
    \ the plaintext password authenticating this user.\n   Example:    C: a001 LOGIN\
    \ SMITH SESAME\n               S: a001 OK LOGIN completed\n"
- title: 6.3.    Client Commands - Authenticated State
  contents:
  - "6.3.    Client Commands - Authenticated State\n   In authenticated state, commands\
    \ that manipulate mailboxes as atomic\n   entities are permitted.  Of these commands,\
    \ the SELECT and EXAMINE\n   commands will select a mailbox for access and enter\
    \ selected state.\n   In addition to the universal commands (CAPABILITY, NOOP,\
    \ and LOGOUT),\n   the following commands are valid in authenticated state: SELECT,\n\
    \   EXAMINE, CREATE, DELETE, RENAME, SUBSCRIBE, UNSUBSCRIBE, LIST, LSUB,\n   and\
    \ APPEND.\n"
- title: 6.3.1.  SELECT Command
  contents:
  - "6.3.1.  SELECT Command\n   Arguments:  mailbox name\n   Data:       mandatory\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               optional OK untagged\
    \ responses: UNSEEN, PERMANENTFLAGS\n   Result:     OK - select completed, now\
    \ in selected state\n               NO - select failure, now in authenticated\
    \ state: no\n                    such mailbox, can't access mailbox\n        \
    \       BAD - command unknown or arguments invalid\n      The SELECT command selects\
    \ a  mailbox  so  that  messages  in  the\n      mailbox  can  be  accessed. \
    \ Before returning an OK to the client,\n      the server MUST send the following\
    \ untagged data to the client:\n         FLAGS       Defined flags in the mailbox\n\
    \         <n> EXISTS  The number of messages in the mailbox\n         <n> RECENT\
    \  The number of messages added to the  mailbox  since\n                     the\
    \ previous time this mailbox was read\n         OK [UIDVALIDITY <n>]\n       \
    \              The unique  identifier  validity  value.   See  the\n         \
    \            description of the UID command for more detail.\n      to define\
    \ the initial state of the mailbox at the client.  If it\n      is not possible\
    \ to determine the messages that were added since\n      the previous time a mailbox\
    \ was read, then all messages SHOULD be\n      considered recent.\n      The server\
    \ SHOULD also send an UNSEEN response code in an OK\n      untagged response,\
    \ indicating the message sequence number of the\n      first unseen message in\
    \ the mailbox.\n      If the client can not change the permanent state of one\
    \ or more of\n      the flags listed in the FLAGS untagged response, the server\
    \ SHOULD\n      send a PERMANENTFLAGS response code in an OK untagged response,\n\
    \      listing the flags that the client may change permanently.\n      Only one\
    \ mailbox may be selected at a time in a session;\n      simultaneous access to\
    \ multiple mailboxes requires multiple\n      sessions.  The SELECT command automatically\
    \ deselects any\n      currently selected mailbox before attempting the new selection.\n\
    \      Consequently, if a mailbox is selected and a SELECT command that\n    \
    \  fails is attempted, no mailbox is selected.\n      If the user is permitted\
    \ to modify the mailbox, the server SHOULD\n      prefix the text of the tagged\
    \ OK response with the \"[READ-WRITE]\"\n      response code.\n      If the user\
    \ is not permitted to modify the mailbox but is\n      permitted read access,\
    \ the mailbox is selected as read-only, and\n      the server MUST prefix the\
    \ text of the tagged OK response to\n      SELECT with the \"[READ-ONLY]\" response\
    \ code.  Read-only access\n      through SELECT differs from the EXAMINE command\
    \ in that certain\n      read-only mailboxes may permit the change of permanent\
    \ state on a\n      per-user (as opposed to global) basis.  Netnews messages marked\
    \ in\n      a user's .newsrc file are an example of such per-user permanent\n\
    \      state that can be modified with read-only mailboxes.\n   Example:    C:\
    \ A142 SELECT INBOX\n               S: * 172 EXISTS\n               S: * 1 RECENT\n\
    \               S: * OK [UNSEEN 12] Message 12 is first unseen\n             \
    \  S: * OK [UIDVALIDITY 3857529045] UIDs valid\n               S: * FLAGS (\\\
    Answered \\Flagged \\Deleted \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS\
    \ (\\Deleted \\Seen \\*)] Limited\n               S: A142 OK [READ-WRITE] SELECT\
    \ completed\n"
- title: 6.3.2.  EXAMINE Command
  contents:
  - "6.3.2.  EXAMINE Command\n   Arguments:  mailbox name\n   Data:       mandatory\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               optional OK untagged\
    \ responses: UNSEEN, PERMANENTFLAGS\n   Result:     OK - examine completed, now\
    \ in selected state\n               NO - examine failure, now in authenticated\
    \ state: no\n                    such mailbox, can't access mailbox\n        \
    \       BAD - command unknown or arguments invalid\n      The EXAMINE command\
    \ is identical to SELECT and returns the same\n      output; however, the selected\
    \ mailbox is identified as read-only.\n      No changes to the permanent state\
    \ of the mailbox, including\n      per-user state, are permitted.\n      The text\
    \ of the tagged OK response to the EXAMINE command MUST\n      begin with the\
    \ \"[READ-ONLY]\" response code.\n   Example:    C: A932 EXAMINE blurdybloop\n\
    \               S: * 17 EXISTS\n               S: * 2 RECENT\n               S:\
    \ * OK [UNSEEN 8] Message 8 is first unseen\n               S: * OK [UIDVALIDITY\
    \ 3857529045] UIDs valid\n               S: * FLAGS (\\Answered \\Flagged \\Deleted\
    \ \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS ()] No permanent flags\
    \ permitted\n               S: A932 OK [READ-ONLY] EXAMINE completed\n"
- title: 6.3.3.  CREATE Command
  contents:
  - "6.3.3.  CREATE Command\n   Arguments:  mailbox name\n   Data:       no specific\
    \ data for this command\n   Result:     OK - create completed\n              \
    \ NO - create failure: can't create mailbox with that name\n               BAD\
    \ - command unknown or arguments invalid\n      The CREATE command creates a mailbox\
    \ with the given name.  An OK\n      response is returned only if a new mailbox\
    \ with that name has been\n      created.  It is an error to attempt to create\
    \ INBOX or a mailbox\n      with a name that refers to an extant mailbox.  Any\
    \ error in\n      creation will return a tagged NO response.\n      If the mailbox\
    \ name is suffixed with the server's hierarchy\n      separator character (as\
    \ returned from the server by a LIST\n      command), this is a declaration that\
    \ the client may, in the\n      future, create mailbox names under this name in\
    \ the hierarchy.\n      Server implementations that do not require this declaration\
    \ MUST\n      ignore it.\n      If a new mailbox is created with the same name\
    \ as a mailbox which\n      was deleted, its unique identifiers MUST be greater\
    \ than any\n      unique identifiers used in the previous incarnation of the mailbox\n\
    \      UNLESS the new incarnation has a different unique identifier\n      validity\
    \ value.  See the description of the UID command for more\n      detail.\n   Example:\
    \    C: A003 CREATE owatagusiam/\n               S: A003 OK CREATE completed\n\
    \               C: A004 CREATE owatagusiam/blurdybloop\n               S: A004\
    \ OK CREATE completed\n        Note: the interpretation of this example depends\
    \ on whether\n        \"/\" was returned as the hierarchy separator from LIST.\
    \  If\n        \"/\" is the hierarchy separator, a new level of hierarchy\n  \
    \      named \"owatagusiam\" with a member called \"blurdybloop\" is\n       \
    \ created.  Otherwise, two mailboxes at the same hierarchy\n        level are\
    \ created.\n"
- title: 6.3.4.  DELETE Command
  contents:
  - "6.3.4.  DELETE Command\n   Arguments:  mailbox name\n   Data:       no specific\
    \ data for this command\n   Result:     OK - delete completed\n              \
    \ NO - delete failure: can't delete mailbox with that name\n               BAD\
    \ - command unknown or arguments invalid\n      The DELETE command permanently\
    \ removes the mailbox with the given\n      name.  A tagged OK response is returned\
    \ only if the mailbox has\n      been deleted.  It is an error to attempt to delete\
    \ INBOX or a\n      mailbox name that does not exist.  Any error in deletion will\n\
    \      return a tagged NO response.\n      The value of the highest-used unique\
    \ indentifier of the deleted\n      mailbox MUST be preserved so that a new mailbox\
    \ created with the\n      same name will not reuse the identifiers of the former\n\
    \      incarnation, UNLESS the new incarnation has a different unique\n      identifier\
    \ validity value.  See the description of the UID command\n      for more detail.\n\
    \   Example:    C: A683 DELETE blurdybloop\n               S: A683 OK DELETE completed\n"
- title: 6.3.5.  RENAME Command
  contents:
  - "6.3.5.  RENAME Command\n   Arguments:  existing mailbox name\n              \
    \ new mailbox name\n   Data:       no specific data for this command\n   Result:\
    \     OK - rename completed\n               NO - rename failure: can't rename\
    \ mailbox with that name,\n                    can't rename to mailbox with that\
    \ name\n               BAD - command unknown or arguments invalid\n      The RENAME\
    \ command changes the name of a mailbox.  A tagged OK\n      response is returned\
    \ only if the mailbox has been renamed.  It is\n      an error to attempt to rename\
    \ from a mailbox name that does not\n      exist or to a mailbox name that already\
    \ exists.  Any error in\n      renaming will return a tagged NO response.\n  \
    \    Renaming INBOX is permitted; a new, empty INBOX is created in its\n     \
    \ place.\n   Example:    C: Z4S9 RENAME blurdybloop owatagusiam\n            \
    \   S: Z4S9 OK RENAME completed\n"
- title: 6.3.6.  SUBSCRIBE Command
  contents:
  - "6.3.6.  SUBSCRIBE Command\n   Arguments:  mailbox\n   Data:       no specific\
    \ data for this command\n   Result:     OK - subscribe completed\n           \
    \    NO - subscribe failure: can't subscribe to that name\n               BAD\
    \ - command unknown or arguments invalid\n      The SUBSCRIBE command adds the\
    \ specified mailbox name to the\n      server's set of \"active\" or \"subscribed\"\
    \ mailboxes as returned by\n      the LSUB command.  This command returns a tagged\
    \ OK response only\n      if the subscription is successful.\n   Example:    C:\
    \ A002 SUBSCRIBE #news.comp.mail.mime\n               S: A002 OK SUBSCRIBE completed\n"
- title: 6.3.7.  UNSUBSCRIBE Command
  contents:
  - "6.3.7.  UNSUBSCRIBE Command\n   Arguments:  mailbox name\n   Data:       no specific\
    \ data for this command\n   Result:     OK - unsubscribe completed\n         \
    \      NO - unsubscribe failure: can't unsubscribe that name\n               BAD\
    \ - command unknown or arguments invalid\n      The UNSUBSCRIBE command removes\
    \ the specified mailbox name from\n      the server's set of \"active\" or \"\
    subscribed\" mailboxes as returned\n      by the LSUB command.  This command returns\
    \ a tagged OK response\n      only if the unsubscription is successful.\n   Example:\
    \    C: A002 UNSUBSCRIBE #news.comp.mail.mime\n               S: A002 OK UNSUBSCRIBE\
    \ completed\n"
- title: 6.3.8.  LIST Command
  contents:
  - "6.3.8.  LIST Command\n   Arguments:  reference name\n               mailbox name\
    \ with possible wildcards\n   Data:       untagged responses: LIST\n   Result:\
    \     OK - list completed\n               NO - list failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LIST command returns a subset of names from the complete set\n      of all names\
    \ available to the user.  Zero or more untagged LIST\n      replies are returned,\
    \ containing the name attributes, hierarchy\n      delimiter, and name; see the\
    \ description of the LIST reply for\n      more detail.\n      An empty (\"\"\
    \ string) reference name argument indicates that the\n      mailbox name is interpreted\
    \ as by SELECT. The returned mailbox\n      names MUST match the supplied mailbox\
    \ name pattern.  A non-empty\n      reference name argument is the name of a mailbox\
    \ or a level of\n      mailbox hierarchy, and indicates a context in which the\
    \ mailbox\n      name is interpreted in an implementation-defined manner.\n  \
    \    The reference and mailbox name arguments are interpreted, in an\n      implementation-dependent\
    \ fashion, into a canonical form that\n      represents an unambiguous left-to-right\
    \ hierarchy.  The returned\n      mailbox names will be in the interpreted form.\n\
    \      Any part of the reference argument that is included in the\n      interpreted\
    \ form SHOULD prefix the interpreted form.  It should\n      also be in the same\
    \ form as the reference name argument.  This\n      rule permits the client to\
    \ determine if the returned mailbox name\n      is in the context of the reference\
    \ argument, or if something about\n      the mailbox argument overrode the reference\
    \ argument.  Without\n      this rule, the client would have to have knowledge\
    \ of the server's\n      naming semantics including what characters are \"breakouts\"\
    \ that\n      override a naming context.\n           For example, here are some\
    \ examples of how references\n           and mailbox names might be interpreted\
    \ on a UNIX-based\n           server:\n               Reference     Mailbox Name\
    \  Interpretation\n               ------------  ------------  --------------\n\
    \               ~smith/Mail/  foo.*         ~smith/Mail/foo.*\n              \
    \ archive/      %             archive/%\n               #news.        comp.mail.*\
    \   #news.comp.mail.*\n               ~smith/Mail/  /usr/doc/foo  /usr/doc/foo\n\
    \               archive/      ~fred/Mail/*  ~fred/Mail/*\n           The first\
    \ three examples demonstrate interpretations in\n           the context of the\
    \ reference argument.  Note that\n           \"~smith/Mail\" should not be transformed\
    \ into something\n           like \"/u2/users/smith/Mail\", or it would be impossible\n\
    \           for the client to determine that the interpretation was\n        \
    \   in the context of the reference.\n      The character \"*\" is a wildcard,\
    \ and matches zero or more\n      characters at this position.  The character\
    \ \"%\" is similar to \"*\",\n      but it does not match a hierarchy delimiter.\
    \  If the \"%\" wildcard\n      is the last character of a mailbox name argument,\
    \ matching levels\n      of hierarchy are also returned.  If these levels of hierarchy\
    \ are\n      not also selectable mailboxes, they are returned with the\n     \
    \ \\Noselect mailbox name attribute (see the description of the LIST\n      response\
    \ for more detail).\n      Server implementations are permitted to \"hide\" otherwise\n\
    \      accessible mailboxes from the wildcard characters, by preventing\n    \
    \  certain characters or names from matching a wildcard in certain\n      situations.\
    \  For example, a UNIX-based server might restrict the\n      interpretation of\
    \ \"*\" so that an initial \"/\" character does not\n      match.\n      The special\
    \ name INBOX is included in the output from LIST if it\n      matches the input\
    \ arguments and INBOX is supported by this server\n      for this user.  The criteria\
    \ for omitting INBOX is whether SELECT\n      INBOX will return failure; it is\
    \ not relevant whether the user's\n      real INBOX resides on this or some other\
    \ server.\n   Example:    C: A002 LIST \"~/Mail/\" \"%\"\n               S: *\
    \ LIST (\\Noselect) \"/\" ~/Mail/foo\n               S: * LIST () \"/\" ~/Mail/meetings\n\
    \               S: A002 OK LIST completed\n"
- title: 6.3.9.  LSUB Command
  contents:
  - "6.3.9.  LSUB Command\n   Arguments:  reference name\n               mailbox name\
    \ with possible wildcards\n   Data:       untagged responses: LSUB\n   Result:\
    \     OK - lsub completed\n               NO - lsub failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LSUB command returns a subset of names from the set of names\n      that the\
    \ user has declared as being \"active\" or \"subscribed\".\n      Zero or more\
    \ untagged LSUB replies are returned.  The arguments to\n      LSUB are in the\
    \ same form as those for LIST.\n   Example:    C: A002 LSUB \"#news.\" \"comp.mail.*\"\
    \n               S: * LSUB () \".\" #news.comp.mail.mime\n               S: *\
    \ LSUB () \".\" #news.comp.mail.misc\n               S: A002 OK LSUB completed\n"
- title: 6.3.10. APPEND Command
  contents:
  - "6.3.10. APPEND Command\n   Arguments:  mailbox name\n               optional\
    \ flag parenthesized list\n               optional date/time string\n        \
    \       message literal\n   Data:       no specific data for this command\n  \
    \ Result:     OK - append completed\n               NO - append error: can't append\
    \ to that mailbox, error\n                    in flags or date/time or message\
    \ text\n               BAD - command unknown or arguments invalid\n      The APPEND\
    \ command appends the literal argument as a new message\n      in the specified\
    \ destination mailbox.  This argument is in the\n      format of an [RFC-822]\
    \ message.  8-bit characters are permitted in\n      the message.  A server implementation\
    \ that is unable to preserve\n      8-bit data properly MUST be able to reversibly\
    \ convert 8-bit\n      APPEND data to 7-bit using [MIME-1] encoding.\n      If\
    \ a flag parenthesized list or date_time are specified, that data\n      SHOULD\
    \ be set in the resulting message; otherwise, the defaults of\n      empty flags\
    \ and the current date/time are used.\n      If the append is unsuccessful for\
    \ any reason, the mailbox MUST be\n      restored to its state before the APPEND\
    \ attempt; no partial\n      appending is permitted.  If the mailbox is currently\
    \ selected, the\n      normal new mail actions should occur.\n      If the destination\
    \ mailbox does not exist, a server MUST return an\n      error, and MUST NOT automatically\
    \ create the mailbox.  Unless it\n      is certain that the destination mailbox\
    \ can not be created, the\n      server MUST send the response code \"[TRYCREATE]\"\
    \ as the prefix of\n      the text of the tagged NO response.  This gives a hint\
    \ to the\n      client that it can attempt a CREATE command and retry the APPEND\n\
    \      if the CREATE is successful.\n   Example:    C: A003 APPEND saved-messages\
    \ (\\Seen) {310}\n               C: Date: Mon, 7 Feb 1994 21:52:25 -0800 (PST)\n\
    \               C: From: Fred Foobar <foobar@Blurdybloop.COM>\n              \
    \ C: Subject: afternoon meeting\n               C: To: mooch@owatagu.siam.edu\n\
    \               C: Message-Id: <B27397-0100000@Blurdybloop.COM>\n            \
    \   C: MIME-Version: 1.0\n               C: Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n\
    \               C:\n               C: Hello Joe, do you think we can meet at 3:30\
    \ tomorrow?\n               C:\n               S: A003 OK APPEND completed\n \
    \       Note: the APPEND command is not used for message delivery,\n        because\
    \ it does not provide a mechanism to transfer [SMTP]\n        envelope information.\n"
- title: 6.4.    Client Commands - Selected State
  contents:
  - "6.4.    Client Commands - Selected State\n   In selected state, commands that\
    \ manipulate messages in a mailbox are\n   permitted.\n   In addition to the universal\
    \ commands (CAPABILITY, NOOP, and LOGOUT),\n   and the authenticated state commands\
    \ (SELECT, EXAMINE, CREATE,\n   DELETE, RENAME, SUBSCRIBE, UNSUBSCRIBE, LIST,\
    \ LSUB, FIND\n   ALL.MAILBOXES, FIND MAILBOXES, and APPEND), the following commands\n\
    \   are valid in the selected state: CHECK, CLOSE, EXPUNGE, SEARCH,\n   FETCH,\
    \ PARTIAL, STORE, COPY, and UID.\n"
- title: 6.4.1.  CHECK Command
  contents:
  - "6.4.1.  CHECK Command\n   Arguments:  none\n   Data:       no specific data for\
    \ this command\n   Result:     OK - check completed\n               BAD - command\
    \ unknown or arguments invalid\n      The CHECK command requests a checkpoint\
    \ of the currently selected\n      mailbox.  A checkpoint refers to any implementation-dependent\n\
    \      housekeeping associated with the mailbox (e.g. resolving the\n      server's\
    \ in-memory state of the mailbox with the state on its\n      disk) that is not\
    \ normally executed as part of each command.  A\n      checkpoint may take a non-instantaneous\
    \ amount of real time to\n      complete.  If a server implementation has no such\
    \ housekeeping\n      considerations, CHECK is equivalent to NOOP.\n      There\
    \ is no guarantee that an EXISTS untagged response will happen\n      as a result\
    \ of CHECK.  NOOP, not CHECK, should be used for new\n      mail polling.\n  \
    \ Example:    C: FXXZ CHECK\n               S: FXXZ OK CHECK Completed\n"
- title: 6.4.2.  CLOSE Command
  contents:
  - "6.4.2.  CLOSE Command\n   Arguments:  none\n   Data:       no specific data for\
    \ this command\n   Result:     OK - close completed, now in authenticated state\n\
    \               NO - close failure: no mailbox selected\n               BAD -\
    \ command unknown or arguments invalid\n      The CLOSE command permanently removes\
    \ from the currently selected\n      mailbox all messages that have the \\Deleted\
    \ flag set, and returns\n      to authenticated state from selected state.  No\
    \ untagged EXPUNGE\n      responses are sent.\n      No messages are removed,\
    \ and no error is given, if the mailbox is\n      selected by an EXAMINE command\
    \ or is otherwise selected read-only.\n      Even when a mailbox is selected,\
    \ it is not required to send a\n      CLOSE command before a SELECT, EXAMINE,\
    \ or LOGOUT command.  The\n      SELECT, EXAMINE, and LOGOUT commands implicitly\
    \ close the\n      currently selected mailbox without doing an expunge.  However,\n\
    \      when many messages are deleted, a CLOSE-LOGOUT or CLOSE-SELECT\n      sequence\
    \ is considerably faster than an EXPUNGE-LOGOUT or\n      EXPUNGE-SELECT because\
    \ no untagged EXPUNGE responses (which the\n      client would probably ignore)\
    \ are sent.\n   Example:    C: A341 CLOSE\n               S: A341 OK CLOSE completed\n"
- title: 6.4.3.  EXPUNGE Command
  contents:
  - "6.4.3.  EXPUNGE Command\n   Arguments:  none\n   Data:       untagged responses:\
    \ EXPUNGE\n   Result:     OK - expunge completed\n               NO - expunge\
    \ failure: can't expunge (e.g. permission\n                    denied)\n     \
    \          BAD - command unknown or arguments invalid\n      The EXPUNGE command\
    \ permanently removes from the currently\n      selected mailbox all messages\
    \ that have the \\Deleted flag set.\n      Before returning an OK to the client,\
    \ an untagged EXPUNGE response\n      is sent for each message that is removed.\n\
    \   Example:    C: A202 EXPUNGE\n               S: * 3 EXPUNGE\n             \
    \  S: * 3 EXPUNGE\n               S: * 5 EXPUNGE\n               S: * 8 EXPUNGE\n\
    \               S: A202 OK EXPUNGE completed\n        Note: in this example, messages\
    \ 3, 4, 7, and 11 had the\n        \\Deleted flag set.  See the description of\
    \ the EXPUNGE\n        response for further explanation.\n"
- title: 6.4.4.  SEARCH Command
  contents:
  - "6.4.4.  SEARCH Command\n   Arguments:  optional character set specification\n\
    \               searching criteria (one or more)\n   Data:       mandatory untagged\
    \ response: SEARCH\n   Result:     OK - search completed\n               NO -\
    \ search error: can't search that character set or\n                    criteria\n\
    \               BAD - command unknown or arguments invalid\n      The SEARCH command\
    \ searches the mailbox for messages that match\n      the given searching criteria.\
    \  Searching criteria consist of one\n      or more search keys.  The untagged\
    \ SEARCH response from the server\n      contains a listing of message sequence\
    \ numbers corresponding to\n      those messages that match the searching criteria.\n\
    \      When multiple keys are specified, the result is the intersection\n    \
    \  (AND function) of all the messages that match those keys.  For\n      example,\
    \ the criteria DELETED FROM \"SMITH\" SINCE 1-Feb-1994 refers\n      to all deleted\
    \ messages from Smith that were placed in the mailbox\n      since February 1,\
    \ 1994.  A search key may also be a parenthesized\n      list of one or more search\
    \ keys (e.g. for use with the OR and NOT\n      keys).\n      Server implementations\
    \ MAY exclude [MIME-1] body parts with\n      terminal content types other than\
    \ TEXT and MESSAGE from\n      consideration in SEARCH matching.\n      The optional\
    \ character set specification consists of the word\n      \"CHARSET\" followed\
    \ by a registered MIME character set.  It\n      indicates the character set of\
    \ the strings that appear in the\n      search criteria.  [MIME-2] strings that\
    \ appear in RFC 822/MIME\n      message headers, and [MIME-1] content transfer\
    \ encodings, MUST be\n      decoded before matching.  Except for US-ASCII, it\
    \ is not required\n      that any particular character set be supported.  If the\
    \ server\n      does not support the specified character set, it MUST return a\n\
    \      tagged NO response (not a BAD).\n      In all search keys that use strings,\
    \ a message matches the key if\n      the string is a substring of the field.\
    \  The matching is\n      case-insensitive.\n      The defined search keys are\
    \ as follows.  Refer to the Formal\n      Syntax section for the precise syntactic\
    \ definitions of the\n      arguments.\n      <message set>  Messages with message\
    \ sequence numbers\n                     corresponding to the specified message\
    \ sequence\n                     number set\n      ALL            All messages\
    \ in the mailbox; the default initial\n                     key for ANDing.\n\
    \      ANSWERED       Messages with the \\Answered flag set.\n      BCC <string>\
    \   Messages that contain the specified string in the\n                     envelope\
    \ structure's BCC field.\n      BEFORE <date>  Messages whose internal date is\
    \ earlier than the\n                     specified date.\n      BODY <string>\
    \  Messages that contain the specified string in the\n                     body\
    \ of the message.\n      CC <string>    Messages that contain the specified string\
    \ in the\n                     envelope structure's CC field.\n      DELETED \
    \       Messages with the \\Deleted flag set.\n      DRAFT          Messages with\
    \ the \\Draft flag set.\n      FLAGGED        Messages with the \\Flagged flag\
    \ set.\n      FROM <string>  Messages that contain the specified string in the\n\
    \                     envelope structure's FROM field.\n      HEADER <field-name>\
    \ <string>\n                     Messages that have a header with the specified\n\
    \                     field-name (as defined in [RFC-822]) and that\n        \
    \             contains the specified string in the [RFC-822]\n               \
    \      field-body.\n      KEYWORD <flag> Messages with the specified keyword set.\n\
    \      LARGER <n>     Messages with an RFC822.SIZE larger than the\n         \
    \            specified number of octets.\n      NEW            Messages that have\
    \ the \\Recent flag set but not the\n                     \\Seen flag.  This is\
    \ functionally equivalent to\n                     \"(RECENT UNSEEN)\".\n    \
    \  NOT <search-key>\n                     Messages that do not match the specified\
    \ search\n                     key.\n      OLD            Messages that do not\
    \ have the \\Recent flag set.\n                     This is functionally equivalent\
    \ to \"NOT RECENT\" (as\n                     opposed to \"NOT NEW\").\n     \
    \ ON <date>      Messages whose internal date is within the\n                \
    \     specified date.\n      OR <search-key1> <search-key2>\n                \
    \     Messages that match either search key.\n      RECENT         Messages that\
    \ have the \\Recent flag set.\n      SEEN           Messages that have the \\\
    Seen flag set.\n      SENTBEFORE <date>\n                     Messages whose [RFC-822]\
    \ Date: header is earlier\n                     than the specified date.\n   \
    \   SENTON <date>  Messages whose [RFC-822] Date: header is within the\n     \
    \                specified date.\n      SENTSINCE <date>\n                   \
    \  Messages whose [RFC-822] Date: header is within or\n                     later\
    \ than the specified date.\n      SINCE <date>   Messages whose internal date\
    \ is within or later\n                     than the specified date.\n      SMALLER\
    \ <n>    Messages with an RFC822.SIZE smaller than the\n                     specified\
    \ number of octets.\n      SUBJECT <string>\n                     Messages that\
    \ contain the specified string in the\n                     envelope structure's\
    \ SUBJECT field.\n      TEXT <string>  Messages that contain the specified string\
    \ in the\n                     header or body of the message.\n      TO <string>\
    \    Messages that contain the specified string in the\n                     envelope\
    \ structure's TO field.\n      UID <message set>\n                     Messages\
    \ with unique identifiers corresponding to\n                     the specified\
    \ unique identifier set.\n      UNANSWERED     Messages that do not have the \\\
    Answered flag set.\n      UNDELETED      Messages that do not have the \\Deleted\
    \ flag set.\n      UNDRAFT        Messages that do not have the \\Draft flag set.\n\
    \      UNFLAGGED      Messages that do not have the \\Flagged flag set.\n    \
    \  UNKEYWORD <flag>\n                     Messages that do not have the specified\
    \ keyword\n                     set.\n      UNSEEN         Messages that do not\
    \ have the \\Seen flag set.\n   Example:    C: A282 SEARCH FLAGGED SINCE 1-Feb-1994\
    \ NOT FROM \"Smith\"\n               S: * SEARCH 2 84 882\n               S: A282\
    \ OK SEARCH completed\n"
- title: 6.4.5.  FETCH Command
  contents:
  - "6.4.5.  FETCH Command\n   Arguments:  message set\n               message data\
    \ item names\n   Data:       untagged responses: FETCH\n   Result:     OK - fetch\
    \ completed\n               NO - fetch error: can't fetch that data\n        \
    \       BAD - command unknown or arguments invalid\n      The FETCH command retrieves\
    \ data associated with a message in the\n      mailbox.  The data items to be\
    \ fetched may be either a single atom\n      or a parenthesized list.  The currently\
    \ defined data items that\n      can be fetched are:\n      ALL            Macro\
    \ equivalent to: (FLAGS INTERNALDATE\n                     RFC822.SIZE ENVELOPE)\n\
    \      BODY           Non-extensible form of BODYSTRUCTURE.\n      BODY[<section>]\n\
    \                     The text of a particular body section.  The section\n  \
    \                   specification is a set of one or more part numbers\n     \
    \                delimited by periods.\n                     Single-part messages\
    \ only have a part 1.\n                     Multipart messages are assigned consecutive\
    \ part\n                     numbers, as they occur in the message.  If a\n  \
    \                   particular part is of type message or multipart,\n       \
    \              its parts must be indicated by a period followed by\n         \
    \            the part number within that nested multipart part.\n            \
    \         It is not permitted to fetch a multipart part\n                    \
    \ itself, only its individual members.\n                     A part of type MESSAGE\
    \ and subtype RFC822 also has\n                     nested parts.  These are the\
    \ parts of the MESSAGE\n                     part's body.  Nested part 0 of a\
    \ part of type\n                     MESSAGE and subtype RFC822 is the [RFC-822]\
    \ header\n                     of the message.\n                     Every message\
    \ has at least one part.\n                          Here is an example of a complex\
    \ message\n                          with its associated section\n           \
    \               specifications:\n                           0   ([RFC-822] header\
    \ of the message)\n                               MULTIPART/MIXED\n          \
    \                 1   TEXT/PLAIN\n                           2   APPLICATION/OCTET-STREAM\n\
    \                           3   MESSAGE/RFC822\n                           3.0\
    \   ([RFC-822] header of the message)\n                           3.1   TEXT/PLAIN\n\
    \                           3.2   APPLICATION/OCTET-STREAM\n                 \
    \                MULTIPART/MIXED\n                           4.1   IMAGE/GIF\n\
    \                           4.2   MESSAGE/RFC822\n                           4.2.0\
    \   ([RFC-822] header of the message)\n                           4.2.1   TEXT/PLAIN\n\
    \                                   MULTIPART/ALTERNATIVE\n                  \
    \         4.2.2.1  TEXT/PLAIN\n                           4.2.2.2  TEXT/RICHTEXT\n\
    \                          Note that there is no section\n                   \
    \       specification for the Multi-part parts\n                          (no\
    \ section 4 or 4.2.2).\n                     The \\Seen flag is implicitly set;\
    \ if this causes\n                     the flags to change they should be included\
    \ as part\n                     of the fetch responses.\n      BODY.PEEK[<section>]\n\
    \                     An alternate form of BODY[section] that does not\n     \
    \                implicitly set the \\Seen flag.\n      BODYSTRUCTURE  The [MIME-1]\
    \ body structure of the message.  This\n                     is computed by the\
    \ server by parsing the [MIME-1]\n                     header lines.\n      ENVELOPE\
    \       The envelope structure of the message.  This is\n                    \
    \ computed by the server by parsing the [RFC-822]\n                     header\
    \ into the component parts, defaulting various\n                     fields as\
    \ necessary.\n      FAST           Macro equivalent to: (FLAGS INTERNALDATE\n\
    \                     RFC822.SIZE)\n      FLAGS          The flags that are set\
    \ for this message.\n      FULL           Macro equivalent to: (FLAGS INTERNALDATE\n\
    \                     RFC822.SIZE ENVELOPE BODY)\n      INTERNALDATE   The date\
    \ and time of final delivery of the message\n                     as defined by\
    \ RFC 821.\n      RFC822         The message in [RFC-822] format.  The \\Seen\
    \ flag is\n                     implicitly set; if this causes the flags to change\n\
    \                     they should be included as part of the fetch\n         \
    \            responses.  This is the concatenation of\n                     RFC822.HEADER\
    \ and RFC822.TEXT.\n      RFC822.PEEK    An alternate form of RFC822 that does\
    \ not\n                     implicitly set the \\Seen flag.\n      RFC822.HEADER\
    \  The [RFC-822] format header of the message as\n                     stored\
    \ on the server including the delimiting blank\n                     line between\
    \ the header and the body.\n      RFC822.HEADER.LINES <header_list>\n        \
    \             All header lines (including continuation lines) of\n           \
    \          the [RFC-822] format header of the message with a\n               \
    \      field-name (as defined in [RFC-822]) that matches\n                   \
    \  any of the strings in header_list.  The matching is\n                     case-insensitive\
    \ but otherwise exact.  The\n                     delimiting blank line between\
    \ the header and the\n                     body is always included.\n      RFC822.HEADER.LINES.NOT\
    \ <header_list>\n                     All header lines (including continuation\
    \ lines) of\n                     the [RFC-822] format header of the message with\
    \ a\n                     field-name (as defined in [RFC-822]) that does not\n\
    \                     match any of the strings in header_list.  The\n        \
    \             matching is case-insensitive but otherwise exact.\n            \
    \         The delimiting blank line between the header and\n                 \
    \    the body is always included.\n      RFC822.SIZE    The number of octets in\
    \ the message, as expressed\n                     in [RFC-822] format.\n     \
    \ RFC822.TEXT    The text body of the message, omitting the\n                \
    \     [RFC-822] header.  The \\Seen flag is implicitly\n                     set;\
    \ if this causes the flags to change they should\n                     be included\
    \ as part of the fetch responses.\n      RFC822.TEXT.PEEK\n                  \
    \   An alternate form of RFC822.TEXT that does not\n                     implicitly\
    \ set the \\Seen flag.\n      UID            The unique identifier for the message.\n\
    \   Example:    C: A654 FETCH 2:4 (FLAGS RFC822.HEADER.LINES (DATE FROM))\n  \
    \             S: * 2 FETCH ....\n               S: * 3 FETCH ....\n          \
    \     S: * 4 FETCH ....\n               S: A003 OK FETCH completed\n"
- title: 6.4.6.  PARTIAL Command
  contents:
  - "6.4.6.  PARTIAL Command\n   Arguments:  message sequence number\n           \
    \    message data item name\n               position of first octet\n        \
    \       number of octets\n   Data:       untagged responses: FETCH\n   Result:\
    \     OK - partial completed\n               NO - partial error: can't fetch that\
    \ data\n               BAD - command unknown or arguments invalid\n      The PARTIAL\
    \ command is equivalent to the associated FETCH command,\n      with the added\
    \ functionality that only the specified number of\n      octets, beginning at\
    \ the specified starting octet, are returned.\n      Only a single message can\
    \ be fetched at a time.  The first octet\n      of a message, and hence the minimum\
    \ for the starting octet, is\n      octet 1.\n      The following FETCH items\
    \ are valid data for PARTIAL: RFC822,\n      RFC822.HEADER, RFC822.TEXT, BODY[section],\
    \ as well as any .PEEK\n      forms of these.\n      Any partial fetch that attempts\
    \ to read beyond the end of the text\n      is truncated as appropriate.  If the\
    \ starting octet is beyond the\n      end of the text, an empty string is returned.\n\
    \      The data are returned with the FETCH response.  There is no\n      indication\
    \ of the range of the partial data in this response.  It\n      is not possible\
    \ to stream multiple PARTIAL commands of the same\n      data item without processing\
    \ and synchronizing at each step, since\n      streamed commands may be executed\
    \ out of order.\n      There is no requirement that partial fetches follow any\
    \ sequence.\n      For example, if a partial fetch of octets 1 through 10000 breaks\n\
    \      in an awkward place for BASE64 decoding, it is permitted to\n      continue\
    \ with a partial fetch of 9987 through 19987, etc.\n      The handling of the\
    \ \\Seen flag is the same as in the associated\n      FETCH command.\n   Example:\
    \    C: A005 PARTIAL 4 RFC822 1 1024\n               S: * 1 FETCH (RFC822 {1024}\n\
    \               S: Return-Path: <gray@cac.washington.edu>\n               S: ...\n\
    \               S: .........  FLAGS (\\Seen))\n               S: A005 OK PARTIAL\
    \ completed\n"
- title: 6.4.7.  STORE Command
  contents:
  - "6.4.7.  STORE Command\n   Arguments:  message set\n               message data\
    \ item name\n               value for message data item\n   Data:       untagged\
    \ responses: FETCH\n   Result:     OK - store completed\n               NO - store\
    \ error: can't store that data\n               BAD - command unknown or arguments\
    \ invalid\n      The STORE command alters data associated with a message in the\n\
    \      mailbox.  Normally, STORE will return the updated value of the\n      data\
    \ with an untagged FETCH response.  A suffix of \".SILENT\" in\n      the data\
    \ item name prevents the untagged FETCH, and the server\n      should assume that\
    \ the client has determined the updated value\n      itself or does not care about\
    \ the updated value.\n      The currently defined data items that can be stored\
    \ are:\n      FLAGS <flag list>\n                     Replace the flags for the\
    \ message with the\n                     argument.  The new value of the flags\
    \ are returned\n                     as if a FETCH of those flags was done.\n\
    \      FLAGS.SILENT <flag list>\n                     Equivalent to FLAGS, but\
    \ without returning a new\n                     value.\n      +FLAGS <flag list>\n\
    \                     Add the argument to the flags for the message.  The\n  \
    \                   new value of the flags are returned as if a FETCH\n      \
    \               of those flags was done.\n      +FLAGS.SILENT <flag list>\n  \
    \                   Equivalent to +FLAGS, but without returning a new\n      \
    \               value.\n      -FLAGS <flag list>\n                     Remove\
    \ the argument from the flags for the message.\n                     The new value\
    \ of the flags are returned as if a\n                     FETCH of those flags\
    \ was done.\n      -FLAGS.SILENT <flag list>\n                     Equivalent\
    \ to -FLAGS, but without returning a new\n                     value.\n   Example:\
    \    C: A003 STORE 2:4 +FLAGS (\\Deleted)\n               S: * 2 FETCH FLAGS (\\\
    Deleted \\Seen)\n               S: * 3 FETCH FLAGS (\\Deleted)\n             \
    \  S: * 4 FETCH FLAGS (\\Deleted \\Flagged \\Seen)\n               S: A003 OK\
    \ STORE completed\n"
- title: 6.4.8.  COPY Command
  contents:
  - "6.4.8.  COPY Command\n   Arguments:  message set\n               mailbox name\n\
    \   Data:       no specific data for this command\n   Result:     OK - copy completed\n\
    \               NO - copy error: can't copy those messages or to that\n      \
    \              name\n               BAD - command unknown or arguments invalid\n\
    \      The COPY command copies the specified message(s) to the specified\n   \
    \   destination mailbox.  The flags and internal date of the\n      message(s)\
    \ SHOULD be preserved in the copy.\n      If the destination mailbox does not\
    \ exist, a server SHOULD return\n      an error.  It SHOULD NOT automatically\
    \ create the mailbox.  Unless\n      it is certain that the destination mailbox\
    \ can not be created, the\n      server MUST send the response code \"[TRYCREATE]\"\
    \ as the prefix of\n      the text of the tagged NO response.  This gives a hint\
    \ to the\n      client that it can attempt a CREATE command and retry the COPY\
    \ if\n      the CREATE is successful.\n      If the COPY command is unsuccessful\
    \ for any reason, server\n      implementations MUST restore the destination mailbox\
    \ to its state\n      before the COPY attempt.\n   Example:    C: A003 COPY 2:4\
    \ MEETING\n               S: A003 OK COPY completed\n"
- title: 6.4.9.  UID Command
  contents:
  - "6.4.9.  UID Command\n   Arguments:  command name\n               command arguments\n\
    \   Data:       untagged responses: FETCH, SEARCH\n   Result:     OK - UID command\
    \ completed\n               NO - UID command error\n               BAD - command\
    \ unknown or arguments invalid\n      The UID command has two forms.  In the first\
    \ form, it takes as its\n      arguments a COPY, FETCH, or STORE command with\
    \ arguments\n      appropriate for the associated command.  However, the numbers\
    \ in\n      the message set argument are unique identifiers instead of message\n\
    \      sequence numbers.\n      In the second form, the UID command takes a SEARCH\
    \ command with\n      SEARCH command arguments.  The interpretation of the arguments\
    \ is\n      the same as with SEARCH; however, the numbers returned in a SEARCH\n\
    \      response for a UID SEARCH command are unique identifiers instead\n    \
    \  of message sequence numbers.  For example, the command UID SEARCH\n      1:100\
    \ UID 443:557 returns the unique identifiers corresponding to\n      the intersection\
    \ of the message sequence number set 1:100 and the\n      UID set 443:557.\n \
    \     A unique identifier of a message is a number, and is guaranteed\n      not\
    \ to refer to any other message in the mailbox.  Unique\n      identifiers are\
    \ assigned in a strictly ascending fashion for each\n      message added to the\
    \ mailbox.  Unlike message sequence numbers,\n      unique identifiers persist\
    \ across sessions.  This permits a client\n      to resynchronize its state from\
    \ a previous session with the server\n      (e.g.  disconnected or offline access\
    \ clients); this is discussed\n      further in [IMAP-DISC].\n      Associated\
    \ with every mailbox is a unique identifier validity\n      value, which is sent\
    \ in an UIDVALIDITY response code in an OK\n      untagged response at message\
    \ selection time.  If unique\n      identifiers from an earlier session fail to\
    \ persist to this\n      session, the unique identifier validity value MUST be\
    \ greater than\n      in the earlier session.\n           Note: An example of\
    \ a good value to use for the unique\n           identifier validity value would\
    \ be a 32-bit\n           representation of the creation date/time of the mailbox.\n\
    \           It is alright to use a constant such as 1, but only if\n         \
    \  it guaranteed that unique identifers will never be\n           reused, even\
    \ in the case of a mailbox being deleted and\n           a new mailbox by the\
    \ same name created at some future\n           time.\n      Message set ranges\
    \ are permitted; however, there is no guarantee\n      that unique identifiers\
    \ be contiguous.  A non-existent unique\n      identifier within a message set\
    \ range is ignored without any error\n      message generated.\n      The number\
    \ after the \"*\" in an untagged FETCH response is always a\n      message sequence\
    \ number, not a unique identifier, even for a UID\n      command response.  However,\
    \ server implementations MUST implicitly\n      include the UID message data item\
    \ as part of any FETCH response\n      caused by a UID command, regardless of\
    \ whether UID was specified\n      as a message data item to the FETCH.\n   Example:\
    \    C: A003 UID FETCH 4827313:4828442 FLAGS\n               S: * 23 FETCH (FLAGS\
    \ (\\Seen) UID 4827313)\n               S: * 24 FETCH (FLAGS (\\Seen) UID 4827943)\n\
    \               S: * 25 FETCH (FLAGS (\\Seen) UID 4828442)\n               S:\
    \ A999 UID FETCH completed\n"
- title: 6.5.    Client Commands - Experimental/Expansion
  contents:
  - '6.5.    Client Commands - Experimental/Expansion

    '
- title: 6.5.1.  X<atom> Command
  contents:
  - "6.5.1.  X<atom> Command\n   Arguments:  implementation defined\n   Data:    \
    \   implementation defined\n   Result:     OK - command completed\n          \
    \     NO - failure\n               BAD - command unknown or arguments invalid\n\
    \      Any command prefixed with an X is an experimental command.\n      Commands\
    \ which are not part of this specification, or a standard\n      or standards-track\
    \ revision of this specification, MUST use the X\n      prefix.\n      Any added\
    \ untagged responses issued by an experimental command\n      MUST also be prefixed\
    \ with an X.  Server implementations MUST NOT\n      send any such untagged responses,\
    \ unless the client requested it\n      by issuing the associated experimental\
    \ command.\n   Example:    C: a441 CAPABILITY\n               S: * CAPABILITY\
    \ IMAP4 XPIG-LATIN\n               S: a441 OK CAPABILITY completed\n         \
    \      C: A442 XPIG-LATIN\n               S: * XPIG-LATIN ow-nay eaking-spay ig-pay\
    \ atin-lay\n               S: A442 OK XPIG-LATIN ompleted-cay\n"
- title: 7.      Server Responses
  contents:
  - "7.      Server Responses\n   Server responses are in three forms: status responses,\
    \ server data,\n   and command continuation request.\n   Server response data,\
    \ identified by \"Data:\" in the response\n   descriptions below, are described\
    \ by function, not by syntax.  The\n   precise syntax of server response data\
    \ is described in the Formal\n   Syntax section.\n   The client MUST be prepared\
    \ to accept any response at all times.\n   Status responses that are tagged indicate\
    \ the completion result of a\n   client command, and have a tag matching the command.\n\
    \   Some status responses, and all server data, are untagged.  An\n   untagged\
    \ response is indicated by the token \"*\" instead of a tag.\n   Untagged status\
    \ responses indicate server greeting, or server status\n   that does not indicate\
    \ the completion of a command.  For historical\n   reasons, untagged server data\
    \ responses are also called \"unsolicited\n   data\", although strictly speaking\
    \ only unilateral server data is\n   truly \"unsolicited\".\n   Certain server\
    \ data MUST be recorded by the client when it is\n   received; this is noted in\
    \ the description of that data.  Such data\n   conveys critical information which\
    \ affects the interpretation of all\n   subsequent commands and responses (e.g.\
    \ updates reflecting the\n   creation or destruction of messags).\n   Other server\
    \ data SHOULD be recorded for later reference; if the\n   client does not need\
    \ to record the data, or if recording the data has\n   no obvious purpose (e.g.\
    \ a SEARCH response when no SEARCH command is\n   in progress), the data SHOULD\
    \ be ignored.\n   An example of unilateral untagged responses occurs when the\
    \ IMAP\n   connection is in selected state.  In selected state, the server\n \
    \  checks the mailbox for new messages as part of the execution of each\n   command.\
    \  If new messages are found, the server sends untagged EXISTS\n   and RECENT\
    \ responses reflecting the new size of the mailbox.  Server\n   implementations\
    \ that offer multiple simultaneous access to the same\n   mailbox should also\
    \ send appropriate unilateral untagged FETCH and\n   EXPUNGE responses if another\
    \ agent changes the state of any message\n   flags or expunges any messages.\n\
    \   Command continuation request responses use the token \"+\" instead of a\n\
    \   tag.  These responses are sent by the server to indicate acceptance\n   of\
    \ an incomplete client command and readiness for the remainder of\n   the command.\n"
- title: 7.1.    Server Responses - Status Responses
  contents:
  - "7.1.    Server Responses - Status Responses\n   Status responses may include\
    \ an optional response code.  A response\n   code consists of data inside square\
    \ brackets in the form of an atom,\n   possibly followed by a space and arguments.\
    \  The response code\n   contains additional information or status codes for client\
    \ software\n   beyond the OK/NO/BAD condition, and are defined when there is a\n\
    \   specific action that a client can take based upon the additional\n   information.\n\
    \   The currently defined response codes are:\n      ALERT          The human-readable\
    \ text contains a special alert\n                     that MUST be presented to\
    \ the user in a fashion\n                     that calls the user's attention\
    \ to the message.\n      PARSE          The human-readable text represents an\
    \ error in\n                     parsing the [RFC-822] or [MIME-1] headers of\
    \ a\n                     message in the mailbox.\n      PERMANENTFLAGS Followed\
    \ by a parenthesized list of flags,\n                     indicates which of the\
    \ known flags that the client\n                     may change permanently.  Any\
    \ flags that are in the\n                     FLAGS untagged response, but not\
    \ the PERMANENTFLAGS\n                     list, can not be set permanently. \
    \ If the client\n                     attempts to STORE a flag that is not in\
    \ the\n                     PERMANENTFLAGS list, the server will either reject\n\
    \                     it with a NO reply or store the state for the\n        \
    \             remainder of the current session only.  The\n                  \
    \   PERMANENTFLAGS list may also include the special\n                     flag\
    \ \\*, which indicates that it is possible to\n                     create new\
    \ keywords by attempting to store those\n                     flags in the mailbox.\n\
    \      READ-ONLY      The mailbox is selected read-only, or its access\n     \
    \                while selected has changed from read-write to\n             \
    \        read-only.\n      READ-WRITE     The mailbox is selected read-write,\
    \ or its access\n                     while selected has changed from read-only\
    \ to\n                     read-write.\n      TRYCREATE      An APPEND or COPY\
    \ attempt is failing because the\n                     target mailbox does not\
    \ exist (as opposed to some\n                     other reason).  This is a hint\
    \ to the client that\n                     the operation may succeed if the mailbox\
    \ is first\n                     created by the CREATE command.\n      UIDVALIDITY\
    \    Followed by a decimal number, indicates the unique\n                    \
    \ identifier validity value.  See the description of\n                     the\
    \ UID command for more detail.\n      UNSEEN         Followed by a decimal number,\
    \ indicates the number\n                     of the first message without the\
    \ \\Seen flag set.\n      Additional response codes defined by particular client\
    \ or server\n      implementations should be prefixed with an \"X\" until they\
    \ are\n      added to a revision of this protocol.  Client implementations\n \
    \     should ignore response codes that they do not recognize.\n"
- title: 7.1.1.  OK Response
  contents:
  - "7.1.1.  OK Response\n   Data:       optional response code\n               human-readable\
    \ text\n      The OK response indicates an information message from the server.\n\
    \      When tagged, it indicates successful completion of the associated\n   \
    \   command.  The human-readable text may be presented to the user as\n      an\
    \ information message.  The untagged form indicates an\n      information-only\
    \ message; the nature of the information may be\n      indicated by a response\
    \ code.\n      The untagged form is also used as one of three possible greetings\n\
    \      at session startup.  It indicates that the session is not yet\n      authenticated\
    \ and that a LOGIN command is needed.\n   Example:    S: * OK IMAP4 server ready\n\
    \               C: A001 LOGIN fred blurdybloop\n               S: * OK [ALERT]\
    \ System shutdown in 10 minutes\n               S: A001 OK LOGIN Completed\n"
- title: 7.1.2.  NO Response
  contents:
  - "7.1.2.  NO Response\n   Data:       optional response code\n               human-readable\
    \ text\n      The NO response indicates an operational error message from the\n\
    \      server.  When tagged, it indicates unsuccessful completion of the\n   \
    \   associated command.  The untagged form indicates a warning; the\n      command\
    \ may still complete successfully.  The human-readable text\n      describes the\
    \ condition.\n   Example:    C: A222 COPY 1:2 owatagusiam\n               S: *\
    \ NO Disk is 98% full, please delete unnecessary data\n               S: A222\
    \ OK COPY completed\n               C: A222 COPY 3:200 blurdybloop\n         \
    \      S: * NO Disk is 98% full, please delete unnecessary data\n            \
    \   S: * NO Disk is 99% full, please delete unnecessary data\n               S:\
    \ A222 NO COPY failed: disk is full\n"
- title: 7.1.3.  BAD Response
  contents:
  - "7.1.3.  BAD Response\n   Data:       optional response code\n               human-readable\
    \ text\n      The BAD response indicates an error message from the server.  When\n\
    \      tagged, it reports a protocol-level error in the client's command;\n  \
    \    the tag indicates the command that caused the error.  The untagged\n    \
    \  form indicates a protocol-level error for which the associated\n      command\
    \ can not be determined; it may also indicate an internal\n      server failure.\
    \  The human-readable text describes the condition.\n   Example:    C: ...very\
    \ long command line...\n               S: * BAD Command line too long\n      \
    \         C: ...empty line...\n               S: * BAD Empty command line\n  \
    \             C: A443 EXPUNGE\n               S: * BAD Disk crash, attempting\
    \ salvage to a new disk!\n               S: * OK Salvage successful, no data lost\n\
    \               S: A443 OK Expunge completed\n"
- title: 7.1.4.  PREAUTH Response
  contents:
  - "7.1.4.  PREAUTH Response\n   Data:       optional response code\n           \
    \    human-readable text\n      The PREAUTH response is always untagged, and is\
    \ one of three\n      possible greetings at session startup.  It indicates that\
    \ the\n      session has already been authenticated by external means and thus\n\
    \      no LOGIN command is needed.\n   Example:    S: * PREAUTH IMAP4 server ready\
    \ and logged in as Smith\n"
- title: 7.1.5.  BYE Response
  contents:
  - "7.1.5.  BYE Response\n   Data:       optional response code\n               human-readable\
    \ text\n      The BYE response is always untagged, and indicates that the server\n\
    \      is about to close the connection.  The human-readable text may be\n   \
    \   displayed to the user in a status report by the client.  The BYE\n      response\
    \ may be sent as part of a normal logout sequence, or as a\n      panic shutdown\
    \ announcement by the server.  It is also used by\n      some server implementations\
    \ as an announcement of an inactivity\n      autologout.\n      This response\
    \ is also used as one of three possible greetings at\n      session startup. \
    \ It indicates that the server is not willing to\n      accept a session from\
    \ this client.\n   Example:    S: * BYE Autologout; idle for too long\n"
- title: 7.2.    Server Responses - Server and Mailbox Status
  contents:
  - "7.2.    Server Responses - Server and Mailbox Status\n   These responses are\
    \ always untagged.  This is how server data are\n   transmitted from the server\
    \ to the client, often as a result of a\n   command with the same name.\n"
- title: 7.2.1.  CAPABILITY Response
  contents:
  - "7.2.1.  CAPABILITY Response\n   Data:       capability listing\n      The CAPABILITY\
    \ response occurs as a result of a CAPABILITY\n      command.  The capability\
    \ listing contains a space-separated\n      listing of capability names that the\
    \ server supports.  The first\n      name in the capability listing MUST be the\
    \ atom \"IMAP4\".\n      A capability name other than IMAP4 indicates that the\
    \ server\n      supports an extension, revision, or amendment to the IMAP4\n \
    \     protocol.  Server responses MUST conform to this document until\n      the\
    \ client issues a command that uses the associated capability.\n      Capability\
    \ names MUST either begin with \"X\" or be standard or\n      standards-track\
    \ IMAP4 extensions, revisions, or amendments\n      registered with IANA.  A server\
    \ MUST NOT offer unregistered or\n      non-standard capability names, unless\
    \ such names are prefixed with\n      an \"X\".\n      Client implementations\
    \ SHOULD NOT require any capability name\n      other than \"IMAP4\", and MUST\
    \ ignore any unknown capability names.\n   Example:    S: * CAPABILITY IMAP4 XPIG-LATIN\n"
- title: 7.2.2.  LIST Response
  contents:
  - "7.2.2.  LIST Response\n   Data:       name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LIST response occurs as a result of\
    \ a LIST command.  It\n      returns a single name that matches the LIST specification.\
    \  There\n      may be multiple LIST responses for a single LIST command.\n  \
    \    Four name attributes are defined:\n      \\Noinferiors   It is not possible\
    \ for any child levels of\n                     hierarchy to exist under this\
    \ name; no child levels\n                     exist now and none can be created\
    \ in the future.\n      \\Noselect      It is not possible to use this name as\
    \ a selectable\n                     mailbox.\n      \\Marked        The mailbox\
    \ has been marked \"interesting\" by the\n                     server; the mailbox\
    \ probably contains messages that\n                     have been added since\
    \ the last time the mailbox was\n                     selected.\n      \\Unmarked\
    \      The mailbox does not contain any additional\n                     messages\
    \ since the last time the mailbox was\n                     selected.\n      If\
    \ it is not feasible for the server to determine whether the\n      mailbox is\
    \ \"interesting\" or not, or if the name is a \\Noselect\n      name, the server\
    \ should not send either \\Marked or \\Unmarked.\n      The hierarchy delimiter\
    \ is a character used to delimit levels of\n      hierarchy in a mailbox name.\
    \  A client may use it to create child\n      mailboxes, and to search higher\
    \ or lower levels of naming\n      hierarchy.  All children of a top-level hierarchy\
    \ node must use\n      the same separator character.  A NIL hierarchy delimiter\
    \ means\n      that no hierarchy exists; the name is a \"flat\" name.\n      The\
    \ name represents an unambiguous left-to-right hierarchy, and\n      MUST be valid\
    \ for use as a reference in LIST and LSUB commands.\n      Unless \\Noselect is\
    \ indicated, the name must also be valid as an\n      argument for commands, such\
    \ as SELECT, that accept mailbox names.\n   Example:    S: * LIST (\\Noselect)\
    \ \"/\" ~/Mail/foo\n"
- title: 7.2.3.  LSUB Response
  contents:
  - "7.2.3.  LSUB Response\n   Data:       name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LSUB response occurs as a result of\
    \ an LSUB command.  It\n      returns a single name that matches the LSUB specification.\
    \  There\n      may be multiple LSUB responses for a single LSUB command.  The\n\
    \      data is identical in format to the LIST response.\n   Example:    S: *\
    \ LSUB () \".\" #news.comp.mail.misc\n"
- title: 7.2.4.  SEARCH Response
  contents:
  - "7.2.4.  SEARCH Response\n   Data:       zero or more numbers\n      The SEARCH\
    \ response occurs as a result of a SEARCH or UID SEARCH\n      command.  The number(s)\
    \ refer to those messages that match the\n      search criteria.  For SEARCH,\
    \ these are message sequence numbers;\n      for UID SEARCH, these are unique\
    \ identifiers.  Each number is\n      delimited by a space.\n   Example:    S:\
    \ * SEARCH 2 3 6\n"
- title: 7.2.5.  FLAGS Response
  contents:
  - "7.2.5.  FLAGS Response\n   Data:       flag parenthesized list\n      The FLAGS\
    \ response occurs as a result of a SELECT or EXAMINE\n      command.  The flag\
    \ parenthesized list identifies the flags (at a\n      minimum, the system-defined\
    \ flags) that are applicable for this\n      mailbox.  Flags other than the system\
    \ flags may also exist,\n      depending on server implementation.\n      The\
    \ update from the FLAGS response MUST be recorded by the client.\n   Example:\
    \    S: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n"
- title: 7.3.    Server Responses - Message Status
  contents:
  - "7.3.    Server Responses - Message Status\n   These responses are always untagged.\
    \  This is how message data are\n   transmitted from the server to the client,\
    \ often as a result of a\n   command with the same name.  Immediately following\
    \ the \"*\" token is a\n   number that represents either a message sequence number\
    \ or a message\n   count.\n"
- title: 7.3.1.  EXISTS Response
  contents:
  - "7.3.1.  EXISTS Response\n   Data:       none\n      The EXISTS response reports\
    \ the number of messages in the mailbox.\n      This response occurs as a result\
    \ of a SELECT or EXAMINE command,\n      and if the size of the mailbox changes\
    \ (e.g. new mail).\n      The update from the EXISTS response MUST be recorded\
    \ by the\n      client.\n   Example:    S: * 23 EXISTS\n"
- title: 7.3.2.  RECENT Response
  contents:
  - "7.3.2.  RECENT Response\n   Data:       none\n      The RECENT response reports\
    \ the number of messages that have\n      arrived since the previous time a SELECT\
    \ command was done on this\n      mailbox.  This response occurs as a result of\
    \ a SELECT or EXAMINE\n      command, and if the size of the mailbox changes (e.g.\
    \ new mail).\n      The update from the RECENT response MUST be recorded by the\n\
    \      client.\n   Example:    S: * 5 RECENT\n"
- title: 7.3.3.  EXPUNGE Response
  contents:
  - "7.3.3.  EXPUNGE Response\n   Data:       none\n      The EXPUNGE response reports\
    \ that the specified message sequence\n      number has been permanently removed\
    \ from the mailbox.  The message\n      sequence number for each successive message\
    \ in the mailbox is\n      immediately decremented by 1, and this decrement is\
    \ reflected in\n      message sequence numbers in subsequent responses (including\
    \ other\n      untagged EXPUNGE responses).\n      As a result of the immediate\
    \ decrement rule, message sequence\n      numbers that appear in a set of successive\
    \ EXPUNGE responses\n      depend upon whether the messages are removed starting\
    \ from lower\n      numbers to higher numbers, or from higher numbers to lower\n\
    \      numbers.  For example, if the last 5 messages in a 9-message\n      mailbox\
    \ are expunged; a \"lower to higher\" server will send five\n      untagged EXPUNGE\
    \ responses for message sequence number 5, whereas\n      a \"higher to lower\
    \ server\" will send successive untagged EXPUNGE\n      responses for message\
    \ sequence numbers 9, 8, 7, 6, and 5.\n      An EXPUNGE response MUST NOT be sent\
    \ when no command is in\n      progress; nor while responding to a FETCH, STORE,\
    \ or SEARCH\n      command.  This rule is necessary to prevent a loss of\n   \
    \   synchronization of message sequence numbers between client and\n      server.\n\
    \      The update from the EXPUNGE response MUST be recorded by the\n      client.\n\
    \   Example:    S: * 44 EXPUNGE\n"
- title: 7.3.4.  FETCH Response
  contents:
  - "7.3.4.  FETCH Response\n   Data:       message data\n      The FETCH response\
    \ returns data about a message to the client.\n      The data are pairs of data\
    \ item names and their values in\n      parentheses.  This response occurs as\
    \ the result of a FETCH or\n      STORE command, as well as by unilateral server\
    \ decision (e.g. flag\n      updates).\n      The current data items are:\n  \
    \    BODY           A form of BODYSTRUCTURE without extension data.\n      BODY[section]\
    \  A string expressing the body contents of the\n                     specified\
    \ section.  The string should be\n                     interpreted by the client\
    \ according to the content\n                     transfer encoding, body type,\
    \ and subtype.\n                     8-bit textual data is permitted if a character\
    \ set\n                     identifier is part of the body parameter\n       \
    \              parenthesized list for this section.\n                     Non-textual\
    \ data such as binary data must be\n                     transfer encoded into\
    \ a textual form such as BASE64\n                     prior to being sent to the\
    \ client.  To derive the\n                     original binary data, the client\
    \ must decode the\n                     transfer encoded string.\n      BODYSTRUCTURE\
    \  A parenthesized list that describes the body\n                     structure\
    \ of a message.  This is computed by the\n                     server by parsing\
    \ the [RFC-822] header and body\n                     into the component parts,\
    \ defaulting various fields\n                     as necessary.\n            \
    \         Multiple parts are indicated by parenthesis\n                     nesting.\
    \  Instead of a body type as the first\n                     element of the parenthesized\
    \ list there is a nested\n                     body.  The second element of the\
    \ parenthesized list\n                     is the multipart subtype (mixed, digest,\
    \ parallel,\n                     alternative, etc.).\n                     Extension\
    \ data follows the multipart subtype.\n                     Extension data is\
    \ never returned with the BODY\n                     fetch, but may be returned\
    \ with a BODYSTRUCTURE\n                     fetch.  Extension data, if present,\
    \ must be in the\n                     defined order.\n                     The\
    \ extension data of a multipart body part are in\n                     the following\
    \ order:\n                     body parameter parenthesized list\n           \
    \             A parenthesized list of attribute/value pairs\n                \
    \        [e.g. (foo bar baz rag) where \"bar\" is the value\n                \
    \        of \"foo\" and \"rag\" is the value of \"baz\"] as\n                \
    \        defined in [MIME-1].\n                     Any following extension data\
    \ are not yet defined in\n                     this version of the protocol. \
    \ Such extension data\n                     may consist of zero or more NILs,\
    \ strings, numbers,\n                     or potentially nested parenthesized\
    \ lists of such\n                     data.  Client implementations that do a\n\
    \                     BODYSTRUCTURE fetch MUST be prepared to accept such\n  \
    \                   extension data.  Server implementations MUST NOT\n       \
    \              send such extension data until it has been defined\n          \
    \           by a revision of this protocol.\n                     The basic fields\
    \ of a non-multipart body part are\n                     in the following order:\n\
    \                     body type\n                        A string giving the content\
    \ type name as defined\n                        in [MIME-1].\n               \
    \      body subtype\n                        A string giving the content subtype\
    \ name as\n                        defined in [MIME-1].\n                    \
    \ body parameter parenthesized list\n                        A parenthesized list\
    \ of attribute/value pairs\n                        [e.g. (foo bar baz rag) where\
    \ \"bar\" is the value\n                        of \"foo\" and \"rag\" is the\
    \ value of \"baz\"] as\n                        defined in [MIME-1].\n       \
    \              body id\n                        A string giving the content id\
    \ as defined in\n                        [MIME-1].\n                     body\
    \ description\n                        A string giving the content description\
    \ as\n                        defined in [MIME-1].\n                     body\
    \ encoding\n                        A string giving the content transfer encoding\
    \ as\n                        defined in [MIME-1].\n                     body\
    \ size\n                        A number giving the size of the body in octets.\n\
    \                        Note that this size is the size in its transfer\n   \
    \                     encoding and not the resulting size after any\n        \
    \                decoding.\n                     A body type of type MESSAGE and\
    \ subtype RFC822\n                     contains, immediately after the basic fields,\
    \ the\n                     envelope structure, body structure, and size in\n\
    \                     text lines of the encapsulated message.\n              \
    \       A body type of type TEXT contains, immediately\n                     after\
    \ the basic fields, the size of the body in\n                     text lines.\
    \  Note that this size is the size in its\n                     transfer encoding\
    \ and not the resulting size after\n                     any decoding.\n     \
    \                Extension data follows the basic fields and the\n           \
    \          type-specific fields listed above.  Extension data\n              \
    \       is never returned with the BODY fetch, but may be\n                  \
    \   returned with a BODYSTRUCTURE fetch.  Extension\n                     data,\
    \ if present, must be in the defined order.\n                     The extension\
    \ data of a non-multipart body part are\n                     in the following\
    \ order:\n                     body MD5\n                        A string giving\
    \ the content MD5 value as defined\n                        in [MIME-1].\n   \
    \                  Any following extension data are not yet defined in\n     \
    \                this version of the protocol, and would be as\n             \
    \        described above under multipart extension data.\n      ENVELOPE     \
    \  A parenthesized list that describes the envelope\n                     structure\
    \ of a message.  This is computed by the\n                     server by parsing\
    \ the [RFC-822] header into the\n                     component parts, defaulting\
    \ various fields as\n                     necessary.\n                     The\
    \ fields of the envelope structure are in the\n                     following\
    \ order: date, subject, from, sender,\n                     reply-to, to, cc,\
    \ bcc, in-reply-to, and message-id.\n                     The date, subject, in-reply-to,\
    \ and message-id\n                     fields are strings.  The from, sender,\
    \ reply-to,\n                     to, cc, and bcc fields are parenthesized lists\
    \ of\n                     address structures.\n                     An address\
    \ structure is a parenthesized list that\n                     describes an electronic\
    \ mail address.  The fields\n                     of an address structure are\
    \ in the following order:\n                     personal name, [SMTP] at-domain-list\
    \ (source\n                     route), mailbox name, and host name.\n       \
    \              [RFC-822] group syntax is indicated by a special\n            \
    \         form of address structure in which the host name\n                 \
    \    field is NIL.  If the mailbox name field is also\n                     NIL,\
    \ this is an end of group marker (semi-colon in\n                     RFC 822\
    \ syntax).  If the mailbox name field is\n                     non-NIL, this is\
    \ a start of group marker, and the\n                     mailbox name field holds\
    \ the group name phrase.\n                     Any field of an envelope or address\
    \ structure that\n                     is not applicable is presented as NIL.\
    \  Note that\n                     the server must default the reply-to and sender\n\
    \                     fields from the from field; a client is not\n          \
    \           expected to know to do this.\n      FLAGS          A parenthesized\
    \ list of flags that are set for this\n                     message.  This may\
    \ include keywords as well as the\n                     following system flags:\n\
    \                     \\Seen       Message has been read\n                   \
    \  \\Answered   Message has been answered\n                     \\Flagged    Message\
    \ is \"flagged\" for urgent/special\n                                 attention\n\
    \                     \\Deleted    Message is \"deleted\" for removal by\n   \
    \                              later EXPUNGE\n                     \\Draft   \
    \   Message has not completed composition\n                                 (marked\
    \ as a draft).\n                     as well as the following special flag, which\
    \ may be\n                     fetched but not stored:\n                     \\\
    Recent     Message has arrived since the previous\n                          \
    \       time this mailbox was selected.\n      INTERNALDATE   A string containing\
    \ the date and time of final\n                     delivery of the message as\
    \ defined by [SMTP].\n      RFC822         A string expressing the message in\
    \ [RFC-822]\n                     format.  The header portion of the message must\
    \ be\n                     7-bit.  8-bit characters are permitted only in the\n\
    \                     non-header portion of the message only if there are\n  \
    \                   [MIME-1] data in the message that identify the\n         \
    \            character set of the message.\n      RFC822.HEADER  A string expressing\
    \ the [RFC-822] format header of\n                     the message, including\
    \ the delimiting blank line\n                     between the header and the body.\
    \  The entire string\n                     must be 7-bit; 8-bit characters are\
    \ not permitted\n                     in headers.  RFC822.HEADER is used to return\
    \ data\n                     for the RFC822.HEADER, RFC822.HEADER.LINES, and\n\
    \                     RFC822.HEADER.LINES.NOT FETCH data items.  Note\n      \
    \               that a blank line is always included regardless of\n         \
    \            header line restrictions.\n      RFC822.SIZE    A number expressing\
    \ the number of octets in the\n                     message in [RFC-822] format.\n\
    \      RFC822.TEXT    A string expressing the text body of the message,\n    \
    \                 omitting the [RFC-822] header.  8-bit characters\n         \
    \            are permitted only if there are [MIME-1] data in\n              \
    \       the message that identify the character set of the\n                 \
    \    message.\n      UID            A number expressing the unique identifier\
    \ of the\n                     message.\n   Example:    S: * 23 FETCH (FLAGS (\\\
    Seen) RFC822.SIZE 44827)\n"
- title: 7.3.5.  Obsolete Responses
  contents:
  - "7.3.5.  Obsolete Responses\n   In addition to the responses listed in here, client\
    \ implementations\n   MUST accept and implement the obsolete responses described\
    \ in\n   Appendix B.\n"
- title: 7.4.    Server Responses - Command Continuation Request
  contents:
  - "7.4.    Server Responses - Command Continuation Request\n   The command completion\
    \ request response is indicated by a \"+\" token\n   instead of a tag.  This form\
    \ of response indicates that the server is\n   ready to accept the continuation\
    \ of a command from the client.  The\n   remainder of this response is a line\
    \ of text.\n   This response is used in the AUTHORIZATION command to transmit\
    \ server\n   data to the client, and request additional client data.  This\n \
    \  response is also used if an argument to any command is a literal.\n   The client\
    \ is not permitted to send the octets of the literal unless\n   the server indicates\
    \ that it expects it.  This permits the server to\n   process commands and reject\
    \ errors on a line-by-line basis.  The\n   remainder of the command, including\
    \ the CRLF that terminates a\n   command, follows the octets of the literal. \
    \ If there are any\n   additional command arguments the literal octets are followed\
    \ by a\n   space and those arguments.\n   Example:    C: A001 LOGIN {11}\n   \
    \            S: + Ready for additional command text\n               C: FRED FOOBAR\
    \ {7}\n               S: + Ready for additional command text\n               C:\
    \ fat man\n               S: A001 OK LOGIN completed\n               C: A044 BLURDYBLOOP\
    \ {102856}\n               S: A044 BAD No such command as \"BLURDYBLOOP\"\n"
- title: 8.      Sample IMAP4 session
  contents:
  - "8.      Sample IMAP4 session\n   The following is a transcript of an IMAP4 session.\
    \  A long line in\n   this sample is broken for editorial clarity.\n   S:   *\
    \ OK IMAP4 Service Ready\n   C:   a001 login mrc secret\n   S:   a001 OK LOGIN\
    \ completed\n   C:   a002 select inbox\n   S:   * 18 EXISTS\n   S:   * FLAGS (\\\
    Answered \\Flagged \\Deleted \\Seen \\Draft)\n   S:   * 2 RECENT\n   S:   * OK\
    \ [UNSEEN 17] Message 17 is the first unseen message\n   S:   * OK [UIDVALIDITY\
    \ 3857529045] UIDs valid\n   S:   a002 OK [READ-WRITE] SELECT completed\n   C:\
    \   a003 fetch 12 full\n   S:   * 12 FETCH (FLAGS (\\Seen) INTERNALDATE \"14-Jul-1993\
    \ 02:44:25 -0700\"\n         RFC822.SIZE 4282 ENVELOPE (\"Wed, 14 Jul 1993 02:23:25\
    \ -0700 (PDT)\"\n         \"IMAP4 WG mtg summary and minutes\"\n         ((\"\
    Terry Gray\" NIL \"gray\" \"cac.washington.edu\"))\n         ((\"Terry Gray\"\
    \ NIL \"gray\" \"cac.washington.edu\"))\n         ((\"Terry Gray\" NIL \"gray\"\
    \ \"cac.washington.edu\"))\n         ((NIL NIL \"imap\" \"cac.washington.edu\"\
    ))\n         ((NIL NIL \"minutes\" \"CNRI.Reston.VA.US\")\n         (\"John Klensin\"\
    \ NIL \"KLENSIN\" \"INFOODS.MIT.EDU\")) NIL NIL\n         \"<B27397-0100000@cac.washington.edu>\"\
    )\n          BODY (\"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\"\
    \ 3028 92))\n   S:    a003 OK FETCH completed\n   C:    a004 fetch 12 rfc822.header\n\
    \   S:    * 12 FETCH (RFC822.HEADER {346}\n   S:    Date: Wed, 14 Jul 1993 02:23:25\
    \ -0700 (PDT)\n   S:    From: Terry Gray <gray@cac.washington.edu>\n   S:    Subject:\
    \ IMAP4 WG mtg summary and minutes\n   S:    To: imap@cac.washington.edu\n   S:\
    \    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@INFOODS.MIT.EDU>\n \
    \  S:    Message-Id: <B27397-0100000@cac.washington.edu>\n   S:    MIME-Version:\
    \ 1.0\n   S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n   S:\n   S:    )\n\
    \   S:    a004 OK FETCH completed\n   C:    a005 store 12 +flags \\deleted\n \
    \  S:    * 12 FETCH (FLAGS (\\Seen \\Deleted))\n   S:    a005 OK +FLAGS completed\n\
    \   C:    a006 logout\n   S:    * BYE IMAP4 server terminating connection\n  \
    \ S:    a006 OK LOGOUT completed\n"
- title: 9.      Formal Syntax
  contents:
  - "9.      Formal Syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (BNF) notation as specified in [RFC-822] with one exception;\
    \ the\n   delimiter used with the \"#\" construct is a single space (SPACE) and\n\
    \   not a comma.\n   Except as noted otherwise, all alphabetic characters are\n\
    \   case-insensitive.  The use of upper or lower case characters to\n   define\
    \ token strings is for editorial clarity only.  Implementations\n   MUST accept\
    \ these strings in a case-insensitive fashion.\n   Syntax marked as obsolete may\
    \ be encountered with implementations\n   written for an earlier version of this\
    \ protocol (e.g. IMAP2).  New\n   implementations SHOULD accept obsolete syntax\
    \ as input, but MUST NOT\n   otherwise use such syntax.\n   address         ::=\
    \ \"(\" addr_name SPACE addr_adl SPACE addr_mailbox\n                       SPACE\
    \ addr_host \")\"\n   addr_adl        ::= nstring\n   addr_host       ::= nstring\n\
    \                       ;; NIL indicates [RFC-822] group syntax\n   addr_mailbox\
    \    ::= nstring\n                       ;; NIL indicates end of [RFC-822] group;\
    \ if\n                       ;; non-NIL and addr_host is NIL, holds\n        \
    \               ;; [RFC-822] group name\n   addr_name       ::= nstring\n   alpha\
    \           ::= \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" / \"G\" / \"H\"\
    \ /\n                       \"I\" / \"J\" / \"K\" / \"L\" / \"M\" / \"N\" / \"\
    O\" / \"P\" /\n                       \"Q\" / \"R\" / \"S\" / \"T\" / \"U\" /\
    \ \"V\" / \"W\" / \"X\" /\n                       \"Y\" / \"Z\" /\n          \
    \             \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" / \"g\" / \"h\" /\n\
    \                       \"i\" / \"j\" / \"k\" / \"l\" / \"m\" / \"n\" / \"o\"\
    \ / \"p\" /\n                       \"q\" / \"r\" / \"s\" / \"t\" / \"u\" / \"\
    v\" / \"w\" / \"x\" /\n                       \"y\" / \"z\" /\n              \
    \         ;; Case-sensitive\n   append          ::= \"APPEND\" SPACE mailbox [SPACE\
    \ flag_list]\n                       [SPACE date_time] SPACE literal\n   astring\
    \         ::= atom / string\n   atom            ::= 1*ATOM_CHAR\n   ATOM_CHAR\
    \       ::= <any CHAR except atom_specials>\n   atom_specials   ::= \"(\" / \"\
    )\" / \"{\" / SPACE / CTLs / list_wildcards /\n                       quoted_specials\n\
    \   authenticate    ::= \"AUTHENTICATE\" SPACE auth_type *(CRLF base64)\n   auth_type\
    \       ::= atom\n   base64          ::= *(4base64_char) [base64_terminal]\n \
    \  base64_char     ::= alpha / digit / \"+\" / \"/\"\n   base64_terminal ::= (2base64_char\
    \ \"==\") / (3base64_char \"=\")\n   body            ::= \"(\" body_type_1part\
    \ / body_type_mpart \")\"\n   body_extension  ::= nstring / number / \"(\" 1#body_extension\
    \ \")\"\n                       ;; Future expansion.  Client implementations\n\
    \                       ;; MUST accept body_extension fields.  Server\n      \
    \                 ;; implementations MUST NOT generate\n                     \
    \  ;; body_extension fields except as defined by\n                       ;; future\
    \ standard or standards-track\n                       ;; revisions of this specification.\n\
    \   body_ext_1part  ::= body_fld_md5 [SPACE 1#body_extension]\n              \
    \         ;; MUST NOT be returned on non-extensible\n                       ;;\
    \ \"BODY\" fetch\n   body_ext_mpart  ::= body_fld_param [SPACE 1#body_extension]]\n\
    \                       ;; MUST NOT be returned on non-extensible\n          \
    \             ;; \"BODY\" fetch\n   body_fields     ::= body_fld_param SPACE body_fld_id\
    \ SPACE\n                       body_fld_desc SPACE body_fld_enc SPACE\n     \
    \                  body_fld_octets\n   body_fld_desc   ::= nstring\n   body_fld_enc\
    \    ::= (<\"> (\"7BIT\" / \"8BIT\" / \"BINARY\" / \"BASE64\"/\n             \
    \          \"QUOTED-PRINTABLE\") <\">) / string\n   body_fld_id     ::= nstring\n\
    \   body_fld_lines  ::= number\n   body_fld_md5    ::= nstring\n   body_fld_octets\
    \ ::= number\n   body_fld_param  ::= \"(\" 1#(string string) \")\" / nil\n   body_fld_subtyp\
    \ ::= string\n   body_type_1part ::= (body_type_basic / body_type_msg / body_type_text)\n\
    \                       [SPACE body_ext_1part]\n   body_type_basic ::= (<\"> (\"\
    APPLICATION\" / \"AUDIO\" / \"IMAGE\" /\n                       \"MESSAGE\" /\
    \ \"VIDEO\") <\">) / string) SPACE\n                       body_fld_subtyp SPACE\
    \ body_fields\n                       ;; MESSAGE subtype MUST NOT be \"RFC822\"\
    \n   body_type_mpart ::= 1*body SPACE body_fld_subtyp\n                      \
    \ [SPACE body_ext_mpart]\n   body_type_msg   ::= <\"> \"MESSAGE\" <\"> SPACE <\"\
    > \"RFC822\" <\"> SPACE\n                       body_fields SPACE envelope SPACE\
    \ body SPACE\n                       body_fld_lines\n   body_type_text  ::= <\"\
    > \"TEXT\" <\"> SPACE body_fld_subtyp SPACE\n                        body_fields\
    \ SPACE body_fld_lines\n   capability      ::= atom\n                       ;;\
    \ Must begin with \"X\" or be registered with\n                       ;; IANA\
    \ as standard or standards-track\n   capability_data ::= \"CAPABILITY\" SPACE\
    \ \"IMAP4\" [SPACE 1#capability]\n   CHAR            ::= <any 7-bit US-ASCII character\
    \ except NUL,\n                        0x01 - 0x7f>\n   CHAR8           ::= <any\
    \ 8-bit octet except NUL, 0x01 - 0xff>\n   command         ::= tag SPACE (command_any\
    \ / command_auth /\n                       command_nonauth / command_select) CRLF\n\
    \                       ;; Modal based on state\n   command_any     ::= \"CAPABILITY\"\
    \ / \"LOGOUT\" / \"NOOP\" / x_command\n                       ;; Valid in all\
    \ states\n   command_auth    ::= append / create / delete / examine / find / list\
    \ /\n                       lsub / rename / select / subscribe / unsubscribe /\n\
    \                       ;; Valid only in Authenticated or Selected state\n   command_nonauth\
    \ ::= login / authenticate\n                       ;; Valid only when in Non-Authenticated\
    \ state\n   command_select  ::= \"CHECK\" / \"CLOSE\" / \"EXPUNGE\" /\n      \
    \                  copy / fetch / partial / store / uid / search\n           \
    \            ;; Valid only when in Selected state\n   continue_req    ::= \"+\"\
    \ SPACE (resp_text / base64)\n   copy            ::= \"COPY\" SPACE set SPACE\
    \ mailbox\n   CR              ::= <ASCII CR, carriage return, 0x0C>\n   create\
    \          ::= \"CREATE\" SPACE mailbox\n                       ;; Use of INBOX\
    \ gives a NO error\n   CRLF            ::= CR LF\n   CTL             ::= <any\
    \ ASCII control character and DEL,\n                        0x00 - 0x1f, 0x7f>\n\
    \   date            ::= date_text / <\"> date_text <\">\n   date_day        ::=\
    \ 1*2digit\n                       ;; Day of month\n   date_day_fixed  ::= (SPACE\
    \ digit) / 2digit\n                       ;; Fixed-format version of date_day\n\
    \   date_month      ::= \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\" / \"May\" / \"Jun\"\
    \ /\n                       \"Jul\" / \"Aug\" / \"Sep\" / \"Oct\" / \"Nov\" /\
    \ \"Dec\"\n   date_text       ::= date_day \"-\" date_month \"-\" (date_year /\n\
    \                       date_year_old)\n   date_year       ::= 4digit\n   date_year_old\
    \   ::= 2digit\n                       ;; OBSOLETE, (year - 1900)\n   date_time\
    \       ::= <\"> (date_time_new / date_time_old) <\">\n   date_time_new   ::=\
    \ date_day_fixed \"-\" date_month \"-\" date_year\n                       SPACE\
    \ time SPACE zone\n   date_time_old   ::= date_day_fixed \"-\" date_month \"-\"\
    \ date_year_old\n                       SPACE time \"-\" zone_old\n          \
    \             ;; OBSOLETE\n   delete          ::= \"DELETE\" SPACE mailbox\n \
    \                      ;; Use of INBOX gives a NO error\n   digit           ::=\
    \ \"0\" / digit_nz\n   digit_nz        ::= \"1\" / \"2\" / \"3\" / \"4\" / \"\
    5\" / \"6\" / \"7\" / \"8\" /\n                       \"9\"\n   envelope     \
    \   ::= \"(\" env_date SPACE env_subject SPACE env_from\n                    \
    \   SPACE env_sender SPACE env_reply-to SPACE env_to\n                       SPACE\
    \ env_cc SPACE env_bcc SPACE env_in-reply-to\n                       SPACE env_message-id\
    \ \")\"\n   env_bcc         ::= \"(\" 1*address \")\" / nil\n   env_cc       \
    \   ::= \"(\" 1*address \")\" / nil\n   env_date        ::= nstring\n   env_from\
    \        ::= \"(\" 1*address \")\" / nil\n   env_in-reply-to ::= nstring\n   env_message-id\
    \  ::= nstring\n   env_reply-to    ::= \"(\" 1*address \")\" / nil\n   env_sender\
    \      ::= \"(\" 1*address \")\" / nil\n   env_subject     ::= nstring\n   env_to\
    \          ::= \"(\" 1*address \")\" / nil\n   examine         ::= \"EXAMINE\"\
    \ SPACE mailbox\n   fetch           ::= \"FETCH\" SPACE set SPACE (\"ALL\" / \"\
    FULL\" /\n                       \"FAST\" / fetch_att / \"(\" 1#fetch_att \")\"\
    )\n   fetch_att       ::= \"BODY\" / \"BODYSTRUCTURE\" /\n                   \
    \    \"BODY\" [\".PEEK\"] \"[\" section \"]\" / \"ENVELOPE\" /\n             \
    \          \"FLAGS\" / \"INTERNALDATE\" / \"UID\" /\n                       \"\
    RFC822\" (([\".TEXT\"] [\".PEEK\"]) / \".SIZE\" /\n                       (\"\
    .HEADER\" [\".LINES\" [\".NOT\"] SPACE header_list])\n   find            ::= \"\
    FIND\" SPACE [\"ALL.\"] \"MAILBOXES\" SPACE\n                       list_mailbox\n\
    \                       ;; OBSOLETE\n   flag            ::= \"\\Answered\" / \"\
    \\Flagged\" / \"\\Deleted\" /\n                       \"\\Seen\" / \"\\Draft\"\
    \ / flag_keyword  /\n                       flag_extension\n   flag_extension\
    \  ::= \"\\\" atom\n                       ;; Future expansion.  Client implementations\n\
    \                       ;; MUST accept flag_extension flags.  Server\n       \
    \                ;; implementations MUST NOT generate\n                      \
    \ ;; flag_extension flags except as defined by\n                       ;; future\
    \ standard or standards-track\n                       ;; revisions of this specification.\n\
    \   flag_keyword    ::= atom\n   flag_list       ::= \"(\" #flag \")\"\n   greeting\
    \        ::= \"*\" SPACE (resp_cond_auth / resp_cond_bye) CRLF\n   header_line\
    \     ::= astring\n   header_list     ::= \"(\" 1#header_line \")\"\n   LF   \
    \           ::= <ASCII LF, line feed, 0x0A>\n   list            ::= \"LIST\" SPACE\
    \ mailbox SPACE list_mailbox\n   list_mailbox    ::= 1*(ATOM_CHAR / list_wildcards)\
    \ / string\n   list_wildcards  ::= \"%\" / \"*\"\n   literal         ::= \"{\"\
    \ number \"}\" CRLF *CHAR8\n                       ;; Number represents the number\
    \ of CHAR8 octets\n   login           ::= \"LOGIN\" SPACE userid SPACE password\n\
    \   lsub            ::= \"LSUB\" SPACE mailbox SPACE list_mailbox\n   mailbox\
    \         ::= \"INBOX\" / astring\n                       ;; INBOX is case-insensitive;\
    \ other names may be\n                       ;; case-sensitive depending on implementation.\n\
    \   mailbox_data    ::=  \"FLAGS\" SPACE flag_list /\n                       \
    \ \"LIST\" SPACE mailbox_list /\n                        \"LSUB\" SPACE mailbox_list\
    \ /\n                        \"MAILBOX\" SPACE text /\n                      \
    \  \"SEARCH\" [SPACE 1#nz_number] /\n                        number SPACE \"EXISTS\"\
    \ / number SPACE \"RECENT\"\n   mailbox_list    ::= \"(\" #(\"\\Marked\" / \"\\\
    Noinferiors\" /\n                       \"\\Noselect\" / \"\\Unmarked\" / flag_extension)\
    \ \")\"\n                       SPACE (<\"> QUOTED_CHAR <\"> / nil) SPACE mailbox\n\
    \   message_data    ::= nz_number SPACE (\"EXPUNGE\" /\n                     \
    \  (\"FETCH\" SPACE msg_fetch) / msg_obsolete)\n   msg_fetch       ::= \"(\" 1#(\"\
    BODY\" SPACE body /\n                       \"BODYSTRUCTURE\" SPACE body /\n \
    \                      \"BODY[\" section \"]\" SPACE nstring /\n             \
    \          \"ENVELOPE\" SPACE envelope /\n                       \"FLAGS\" SPACE\
    \ \"(\" #(flag / \"\\Recent\") \")\" /\n                       \"INTERNALDATE\"\
    \ SPACE date_time /\n                       \"RFC822\" [\".HEADER\" / \".TEXT\"\
    ] SPACE nstring /\n                       \"RFC822.SIZE\" SPACE number /\n   \
    \                    \"UID\" SPACE uniqueid) \")\"\n   msg_obsolete    ::= \"\
    COPY\" / (\"STORE\" SPACE msg_fetch)\n                       ;; OBSOLETE untagged\
    \ data responses\n   nil             ::= \"NIL\"\n   nstring         ::= string\
    \ / nil\n   number          ::= 1*digit\n                       ;; Unsigned 32-bit\
    \ integer\n                       ;; (0 <= n < 4,294,967,296)\n   nz_number  \
    \     ::= digit_nz *digit\n                       ;; Non-zero unsigned 32-bit\
    \ integer\n                       ;; (0 < n < 4,294,967,296)\n   partial     \
    \    ::= \"PARTIAL\" SPACE nz_number SPACE\n                       (\"BODY\" [\"\
    .PEEK\"] \"[\" section \"]\" /\n                       \"RFC822\" (([\".TEXT\"\
    ] [\".PEEK\"]) / \".HEADER\")\n                       SPACE number SPACE number\n\
    \   password        ::= astring\n   quoted          ::= <\"> *QUOTED_CHAR <\"\
    >\n   QUOTED_CHAR     ::= <any TEXT_CHAR except quoted_specials> /\n         \
    \              \"\\\" quoted_specials\n   quoted_specials ::= <\"> / \"\\\"\n\
    \   rename          ::= \"RENAME\" SPACE mailbox SPACE mailbox\n             \
    \          ;; Use of INBOX as a destination gives a NO error\n   response    \
    \    ::= *response_data response_done\n   response_data   ::= \"*\" SPACE (resp_cond_state\
    \ / resp_cond_bye /\n                       mailbox_data / message_data / capability_data)\n\
    \                       CRLF\n   response_done   ::= response_tagged / response_fatal\n\
    \   response_fatal  ::= \"*\" SPACE resp_cond_bye CRLF\n   response_tagged ::=\
    \ tag SPACE resp_cond_state CRLF\n   resp_cond_auth  ::= (\"OK\" / \"PREAUTH\"\
    ) SPACE resp_text\n                       ;; Authentication condition\n   resp_cond_bye\
    \   ::= \"BYE\" SPACE resp_text\n                       ;; Server will disconnect\
    \ condition\n   resp_cond_state ::= (\"OK\" / \"NO\" / \"BAD\") SPACE resp_text\n\
    \                       ;; Status condition\n   resp_text       ::= [\"[\" resp_text_code\
    \ \"]\" SPACE] (text_mime2 / text)\n   resp_text_code  ::= \"ALERT\" / \"PARSE\"\
    \ /\n                       \"PERMANENTFLAGS\" SPACE \"(\" #(flag / \"\\*\") \"\
    )\" /\n                       \"READ-ONLY\" / \"READ-WRITE\" / \"TRYCREATE\" /\n\
    \                       \"UIDVALIDITY\" SPACE nz_number /\n                  \
    \     \"UNSEEN\" SPACE nz_number /\n                       atom [SPACE 1*<any\
    \ TEXT_CHAR except \"]\">]\n   search          ::= \"SEARCH\" SPACE [\"CHARSET\"\
    \ SPACE astring SPACE]\n                       search_criteria\n             \
    \          ;; Character set must be registered with IANA\n                   \
    \    ;; as a MIME character set\n   search_criteria ::= 1#search_key\n   search_key\
    \      ::= search_new / search_old\n   search_new      ::= \"DRAFT\" /\n     \
    \                  \"HEADER\" SPACE header_line SPACE astring /\n            \
    \           \"LARGER\" SPACE number / \"NOT\" SPACE search_key /\n           \
    \            \"OR\" SPACE search_key SPACE search_key /\n                    \
    \   \"SENTBEFORE\" SPACE date / \"SENTON\" SPACE date /\n                    \
    \   \"SENTSINCE\" SPACE date / \"SMALLER\" SPACE number /\n                  \
    \     \"UID\" SPACE set / \"UNDRAFT\" / set /\n                       \"(\" search_criteria\
    \ \")\"\n                       ;; New in IMAP4\n   search_old      ::= \"ALL\"\
    \ / \"ANSWERED\" / \"BCC\" SPACE astring /\n                       \"BEFORE\"\
    \ SPACE date / \"BODY\" SPACE astring /\n                       \"CC\" SPACE astring\
    \ / \"DELETED\" / \"FLAGGED\" /\n                       \"FROM\" SPACE astring\
    \ /\n                       \"KEYWORD\" SPACE flag_keyword / \"NEW\" / \"OLD\"\
    \ /\n                       \"ON\" SPACE date / \"RECENT\" / \"SEEN\" /\n    \
    \                   \"SINCE\" SPACE date / \"SUBJECT\" SPACE astring /\n     \
    \                  \"TEXT\" SPACE astring / \"TO\" SPACE astring /\n         \
    \              \"UNANSWERED\" / \"UNDELETED\" / \"UNFLAGGED\" /\n            \
    \           \"UNKEYWORD\" SPACE flag_keyword / \"UNSEEN\"\n                  \
    \     ;; Defined in [IMAP2]\n   section         ::= \"0\" / nz_number [\".\" section]\n\
    \   select          ::= \"SELECT\" SPACE mailbox\n   sequence_num    ::= nz_number\
    \ / \"*\"\n                       ;; * is the largest number in use.  For message\n\
    \                       ;; sequence numbers, it is the number of messages\n  \
    \                     ;; in the mailbox.  For unique identifiers, it is\n    \
    \                   ;; the unique identifier of the last message in\n        \
    \               ;; the mailbox.\n   set             ::= sequence_num / (sequence_num\
    \ \":\" sequence_num) /\n                       (set \",\" set)\n            \
    \           ;; Identifies a set of messages.  For message\n                  \
    \     ;; sequence numbers, these are consecutive\n                       ;; numbers\
    \ from 1 to the number of messages in\n                       ;; the mailbox\n\
    \                       ;; Comma delimits individual numbers, colon\n        \
    \               ;; delimits between two numbers inclusive.\n                 \
    \      ;; Example: 2,4:7,9,12:* is 2,4,5,6,7,9,12,13,\n                      \
    \ ;; 14,15 for a mailbox with 15 messages.\n   SPACE           ::= <ASCII SP,\
    \ space, 0x20>\n   store           ::= \"STORE\" SPACE set SPACE store_att_flags\n\
    \   store_att_flags ::= ([\"+\" / \"-\"] \"FLAGS\" [\".SILENT\"]) SPACE\n    \
    \                   (flag_list / #flag)\n   string          ::= quoted / literal\n\
    \   subscribe       ::= (\"SUBSCRIBE\" SPACE mailbox) / subscribe_obs\n   subscribe_obs\
    \   ::= \"SUBSCRIBE\" SPACE \"MAILBOX\" SPACE mailbox\n                      \
    \ ;;OBSOLETE\n   tag             ::= 1*<any ATOM_CHAR except \"+\">\n   text \
    \           ::= 1*TEXT_CHAR\n   text_mime2       ::= \"=?\" <charset> \"?\" <encoding>\
    \ \"?\"\n                        <encoded-text> \"?=\"\n                     \
    \   ;; Syntax defined in [MIME-2]\n   TEXT_CHAR       ::= <any CHAR except CR\
    \ and LF>\n   time            ::= 2digit \":\" 2digit \":\" 2digit\n         \
    \              ;; Hours minutes seconds\n   uid             ::= \"UID\" SPACE\
    \ (copy / fetch / search / store)\n                       ;; Unique identifiers\
    \ used instead of message\n                       ;; sequence numbers\n   uniqueid\
    \        ::= nz_number\n                       ;; Strictly ascending\n   unsubscribe\
    \     ::= (\"UNSUBSCRIBE\" SPACE mailbox) / unsubscribe_obs\n   unsubscribe_obs\
    \ ::= \"UNSUBSCRIBE\" SPACE \"MAILBOX\" SPACE mailbox\n                      \
    \ ;;OBSOLETE\n   userid          ::= astring\n   x_command       ::= \"X\" atom\
    \ <experimental command arguments>\n   zone            ::= (\"+\" / \"-\") 4digit\n\
    \                       ;; Signed four-digit value of hhmm representing\n    \
    \                   ;; hours and minutes west of Greenwich (that is,\n       \
    \                ;; (the amount that the given time differs from\n           \
    \            ;; Universal Time).  Subtracting the timezone\n                 \
    \      ;; from the given time will give the UT form.\n                       ;;\
    \ The Universal Time zone is \"+0000\".\n   zone_old        ::= \"UT\" / \"GMT\"\
    \ / \"Z\" /                ;; +0000\n                       \"AST\" / \"EDT\"\
    \ /                     ;; -0400\n                       \"EST\" / \"CDT\" / \
    \                    ;; -0500\n                       \"CST\" / \"MDT\" /    \
    \                 ;; -0600\n                       \"MST\" / \"PDT\" /       \
    \              ;; -0700\n                       \"PST\" / \"YDT\" /          \
    \           ;; -0800\n                       \"YST\" / \"HDT\" /             \
    \        ;; -0900\n                       \"HST\" / \"BDT\" /                \
    \     ;; -1000\n                       \"BST\" /                             ;;\
    \ -1100\n                       \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\
    \ / ;; +1 to +6\n                       \"G\" / \"H\" / \"I\" / \"K\" / \"L\"\
    \ / \"M\" / ;; +7 to +12\n                       \"N\" / \"O\" / \"P\" / \"Q\"\
    \ / \"R\" / \"S\" / ;; -1 to -6\n                       \"T\" / \"U\" / \"V\"\
    \ / \"W\" / \"X\" / \"Y\"   ;; -7 to -12\n                       ;; OBSOLETE\n"
- title: 10.     Author's Note
  contents:
  - "10.     Author's Note\n   This document is a revision or rewrite of earlier documents,\
    \ and\n   supercedes the protocol specification in those documents: IMAP4\n  \
    \ Internet drafts, the IMAP2bis Internet drafts, unpublished\n   IMAP2bis.TXT\
    \ document, RFC 1176, and RFC 1064.\n"
- title: 11.     Security Considerations
  contents:
  - "11.     Security Considerations\n   IMAP4 protocol transactions, including electronic\
    \ mail data, are sent\n   in the clear over the network unless the optional privacy\
    \ protection\n   is negotiated in the AUTHENTICATE command.\n   A server error\
    \ message for an AUTHENTICATE command which fails due to\n   invalid credentials\
    \ should not detail why the credentials are\n   invalid.\n   Use of the LOGIN\
    \ command sends passwords in the clear.  This can be\n   avoided by using the\
    \ AUTHENTICATE command instead.\n   A server error message for a failing LOGIN\
    \ command should not specify\n   that the user name, as opposed to the password,\
    \ is invalid.\n   Additional security considerations are discussed in the section\n\
    \   discussing the AUTHENTICATE and LOGIN commands.\n"
- title: 12.     Author's Address
  contents:
  - "12.     Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing,\
    \ JE-30\n   University of Washington\n   Seattle, WA  98195\n   Phone: (206) 543-5762\n\
    \   EMail: MRC@CAC.Washington.EDU\n"
- title: Appendices
  contents:
  - 'Appendices

    '
- title: A.      Obsolete Commands
  contents:
  - "A.      Obsolete Commands\n   The following commands are OBSOLETE.  It is NOT\
    \ required to support\n   any of these commands in new server implementations.\
    \  These commands\n   are documented here for the benefit of implementors who\
    \ may wish to\n   support them for compatibility with old client implementations.\n\
    \   The section headings of these commands are intended to correspond\n   with\
    \ where they would be located in the main document if they were\n   not obsoleted.\n"
- title: A.6.3.OBS.1.    FIND ALL.MAILBOXES Command
  contents:
  - "A.6.3.OBS.1.    FIND ALL.MAILBOXES Command\n   Arguments:  mailbox name with\
    \ possible wildcards\n   Data:       untagged responses: MAILBOX\n   Result: \
    \    OK - find completed\n               NO - find failure: can't list that name\n\
    \               BAD - command unknown or arguments invalid\n      The FIND ALL.MAILBOXES\
    \ command returns a subset of names from the\n      complete set of all names\
    \ available to the user.  It returns zero\n      or more untagged MAILBOX replies.\
    \  The mailbox argument to FIND\n      ALL.MAILBOXES is similar to that for LIST\
    \ with an empty reference,\n      except that the characters \"%\" and \"?\" match\
    \ a single character.\n   Example:    C: A002 FIND ALL.MAILBOXES *\n         \
    \      S: * MAILBOX blurdybloop\n               S: * MAILBOX INBOX\n         \
    \      S: A002 OK FIND ALL.MAILBOXES completed\n"
- title: A.6.3.OBS.2.    FIND MAILBOXES Command
  contents:
  - "A.6.3.OBS.2.    FIND MAILBOXES Command\n   Arguments:  mailbox name with possible\
    \ wildcards\n   Data:       untagged responses: MAILBOX\n   Result:     OK - find\
    \ completed\n               NO - find failure: can't list that name\n        \
    \       BAD - command unknown or arguments invalid\n      The FIND MAILBOXES command\
    \ returns a subset of names from the set\n      of names that the user has declared\
    \ as being \"active\" or\n      \"subscribed\".  It returns zero or more untagged\
    \ MAILBOX replies.\n      The mailbox argument to FIND MAILBOXES is similar to\
    \ that for LSUB\n      with an empty reference, except that the characters \"\
    %\" and \"?\"\n      match a single character.\n   Example:    C: A002 FIND MAILBOXES\
    \ *\n               S: * MAILBOX blurdybloop\n               S: * MAILBOX INBOX\n\
    \               S: A002 OK FIND MAILBOXES completed\n"
- title: A.6.3.OBS.3.    SUBSCRIBE MAILBOX Command
  contents:
  - "A.6.3.OBS.3.    SUBSCRIBE MAILBOX Command\n   Arguments:  mailbox name\n   Data:\
    \       no specific data for this command\n   Result:     OK - subscribe completed\n\
    \               NO - subscribe failure: can't subscribe to that name\n       \
    \        BAD - command unknown or arguments invalid\n      The SUBSCRIBE MAILBOX\
    \ command is identical in effect to the\n      SUBSCRIBE command.  A server which\
    \ implements this command must be\n      able to distinguish between a SUBSCRIBE\
    \ MAILBOX command and a\n      SUBSCRIBE command with a mailbox name argument\
    \ of \"MAILBOX\".\n   Example:    C: A002 SUBSCRIBE MAILBOX #news.comp.mail.mime\n\
    \               S: A002 OK SUBSCRIBE MAILBOX to #news.comp.mail.mime\n       \
    \        completed\n               C: A003 SUBSCRIBE MAILBOX\n               S:\
    \ A003 OK SUBSCRIBE to MAILBOX completed\n"
- title: A.6.3.OBS.4.    UNSUBSCRIBE MAILBOX Command
  contents:
  - "A.6.3.OBS.4.    UNSUBSCRIBE MAILBOX Command\n   Arguments:  mailbox name\n  \
    \ Data:       no specific data for this command\n   Result:     OK - unsubscribe\
    \ completed\n               NO - unsubscribe failure: can't unsubscribe that name\n\
    \               BAD - command unknown or arguments invalid\n      The UNSUBSCRIBE\
    \ MAILBOX command is identical in effect to the\n      UNSUBSCRIBE command.  A\
    \ server which implements this command must\n      be able to distinguish between\
    \ a UNSUBSCRIBE MAILBOX command and\n      an UNSUBSCRIBE command with a mailbox\
    \ name argument of \"MAILBOX\".\n   Example:    C: A002 UNSUBSCRIBE MAILBOX #news.comp.mail.mime\n\
    \               S: A002 OK UNSUBSCRIBE MAILBOX from #news.comp.mail.mime\n   \
    \            completed\n               C: A003 UNSUBSCRIBE MAILBOX\n         \
    \      S: A003 OK UNSUBSCRIBE from MAILBOX completed\n"
- title: B.      Obsolete Responses
  contents:
  - "B.      Obsolete Responses\n   The following responses are OBSOLETE.  Except\
    \ as noted below, these\n   responses MUST NOT be transmitted by new server implementations.\n\
    \   The section headings of these responses are intended to correspond\n   with\
    \ where they would be located in the main document if they were\n   not obsoleted.\n"
- title: B.7.2.OBS.1.    MAILBOX Response
  contents:
  - "B.7.2.OBS.1.    MAILBOX Response\n   Data:       name\n      The MAILBOX response\
    \ MUST NOT be transmitted by server\n      implementations except in response\
    \ to the obsolete FIND MAILBOXES\n      and FIND ALL.MAILBOXES commands.  Client\
    \ implementations that do\n      not use these commands MAY ignore this response.\
    \  It is documented\n      here for the benefit of implementors who may wish to\
    \ support it\n      for compatibility with old client implementations.\n     \
    \ This response occurs as a result of the FIND MAILBOXES and FIND\n      ALL.MAILBOXES\
    \ commands.  It returns a single name that matches the\n      FIND specification.\
    \  There are no attributes or hierarchy\n      delimiter.\n   Example:    S: *\
    \ MAILBOX blurdybloop\n"
- title: B.7.3.OBS.1.    COPY Response
  contents:
  - "B.7.3.OBS.1.    COPY Response\n   Data:       none\n      The COPY response MUST\
    \ NOT be transmitted by new server\n      implementations.  Client implementations\
    \ MUST ignore the COPY\n      response.  It is documented here for the benefit\
    \ of client\n      implementors who may encounter this response from old server\n\
    \      implementations.\n      In some experimental versions of this protocol,\
    \ this response was\n      returned in response to a COPY command to indicate\
    \ on a\n      per-message basis that the message was copied successfully.\n  \
    \ Example:    S: * 44 COPY\n"
- title: B.7.3.OBS.2.    STORE Response
  contents:
  - "B.7.3.OBS.2.    STORE Response\n   Data:       message data\n      The STORE\
    \ response MUST NOT be transmitted by new server\n      implementations.  Client\
    \ implementations MUST treat the STORE\n      response as equivalent to the FETCH\
    \ response.  It is documented\n      here for the benefit of client implementors\
    \ who may encounter this\n      response from old server implementations.\n  \
    \    In some experimental versions of this protocol, this response was\n     \
    \ returned instead of FETCH in response to a STORE command to report\n      the\
    \ new value of the flags.\n   Example:    S: * 69 STORE (FLAGS (\\Deleted))\n"
- title: C.      References
  contents:
  - "C.      References\n   [IMAP-AUTH] Myers, J., \"IMAP4 Authentication Mechanism\"\
    , RFC 1731.\n   Carnegie-Mellon University, December 1994.\n   [IMAP-COMPAT] Crispin,\
    \ M. \"IMAP4 Compatibility with IMAP2 and\n   IMAP2bis\", RFC 1732, University\
    \ of Washington, December 1994.\n   [IMAP-DISC] Austein, R. \"Synchronization\
    \ Operations for Disconnected\n   IMAP4 Clients\", Work in Progress.\n   [IMAP-MODEL]\
    \ Crispin, M. \"Distributed Electronic Mail Models in\n   IMAP4\", RFC 1733, University\
    \ of Washington, December 1994.\n   [IMAP-NAMING] Crispin, M. \"Mailbox Naming\
    \ Convention in IMAP4\", Work\n   in Progress.\n   [IMAP2] Crispin, M., \"Interactive\
    \ Mail Access Protocol - Version 2\",\n   RFC 1176, University of Washington,\
    \ August 1990.\n   [IMSP] Myers, J. \"IMSP -- Internet Message Support Protocol\"\
    , Work in\n   Progress.\n   [MIME-1] Borenstein, N., and Freed, N., \"MIME (Multipurpose\
    \ Internet\n   Mail Extensions) Part One: Mechanisms for Specifying and Describing\n\
    \   the Format of Internet Message Bodies\", RFC 1521, Bellcore, Innosoft,\n \
    \  September 1993.\n   [MIME-2] Moore, K., \"MIME (Multipurpose Internet Mail\
    \ Extensions)\n   Part Two: Message Header Extensions for Non-ASCII Text\", RFC\
    \ 1522,\n   University of Tennessee, September 1993.\n   [RFC-822] Crocker, D.,\
    \ \"Standard for the Format of ARPA Internet Text\n   Messages\", STD 11, RFC\
    \ 822, University of Delaware, August 1982.\n   [SMTP] Postel, Jonathan B. \"\
    Simple Mail Transfer Protocol\", STD 10,\n   RFC 821, USC/Information Sciences\
    \ Institute, August 1982.\n"
- title: E.      IMAP4 Keyword Index
  contents:
  - "E.      IMAP4 Keyword Index\n       +FLAGS <flag list> (store command data item)\
    \ ...............   34\n       +FLAGS.SILENT <flag list> (store command data item)\
    \ ........   34\n       -FLAGS <flag list> (store command data item) ...............\
    \   34\n       -FLAGS.SILENT <flag list> (store command data item) ........  \
    \ 34\n       ALERT (response code) ......................................   39\n\
    \       ALL (fetch item) ...........................................   29\n  \
    \     ALL (search key) ...........................................   27\n    \
    \   ANSWERED (search key) ......................................   27\n      \
    \ APPEND (command) ...........................................   22\n       AUTHENTICATE\
    \ (command) .....................................   12\n       BAD (response)\
    \ .............................................   41\n       BCC <string> (search\
    \ key) ..................................   27\n       BEFORE <date> (search key)\
    \ .................................   27\n       BODY (fetch item) ..........................................\
    \   29\n       BODY (fetch result) ........................................  \
    \ 46\n       BODY <string> (search key) .................................   27\n\
    \       BODY.PEEK[<section>] (fetch item) ..........................   30\n  \
    \     BODYSTRUCTURE (fetch item) .................................   31\n    \
    \   BODYSTRUCTURE (fetch result) ...............................   47\n      \
    \ BODY[<section>] (fetch item) ...............................   29\n       BODY[section]\
    \ (fetch result) ...............................   46\n       BYE (response) .............................................\
    \   41\n       CAPABILITY (command) .......................................  \
    \ 10\n       CAPABILITY (response) ......................................   42\n\
    \       CC <string> (search key) ...................................   27\n  \
    \     CHECK (command) ............................................   23\n    \
    \   CLOSE (command) ............................................   24\n      \
    \ COPY (command) .............................................   34\n       COPY\
    \ (response) ............................................   68\n       CREATE\
    \ (command) ...........................................   17\n       DELETE (command)\
    \ ...........................................   18\n       DELETED (search key)\
    \ .......................................   27\n       DRAFT (search key) .........................................\
    \   27\n       ENVELOPE (fetch item) ......................................  \
    \ 31\n       ENVELOPE (fetch result) ....................................   49\n\
    \       EXAMINE (command) ..........................................   16\n  \
    \     EXISTS (response) ..........................................   45\n    \
    \   EXPUNGE (command) ..........................................   25\n      \
    \ EXPUNGE (response) .........................................   45\n       FAST\
    \ (fetch item) ..........................................   31\n       FETCH (command)\
    \ ............................................   29\n       FETCH (response) ...........................................\
    \   46\n       FIND ALL.MAILBOXES (command) ...............................  \
    \ 65\n       FIND MAILBOXES (command) ...................................   65\n\
    \       FLAGGED (search key) .......................................   27\n  \
    \     FLAGS (fetch item) .........................................   31\n    \
    \   FLAGS (fetch result) .......................................   50\n      \
    \ FLAGS (response) ...........................................   44\n       FLAGS\
    \ <flag list> (store command data item) ................   34\n       FLAGS.SILENT\
    \ <flag list> (store command data item) .........   34\n       FROM <string> (search\
    \ key) .................................   27\n       FULL (fetch item) ..........................................\
    \   31\n       HEADER <field-name> <string> (search key) ..................  \
    \ 27\n       INTERNALDATE (fetch item) ..................................   31\n\
    \       INTERNALDATE (fetch result) ................................   50\n  \
    \     KEYWORD <flag> (search key) ................................   27\n    \
    \   LARGER <n> (search key) ....................................   27\n      \
    \ LIST (command) .............................................   20\n       LIST\
    \ (response) ............................................   43\n       LOGIN (command)\
    \ ............................................   14\n       LOGOUT (command) ...........................................\
    \   11\n       LSUB (command) .............................................  \
    \ 22\n       LSUB (response) ............................................   44\n\
    \       MAILBOX (response) .........................................   68\n  \
    \     NEW (search key) ...........................................   27\n    \
    \   NO (response) ..............................................   40\n      \
    \ NOOP (command) .............................................   11\n       NOT\
    \ <search-key> (search key) ..............................   28\n       OK (response)\
    \ ..............................................   40\n       OLD (search key)\
    \ ...........................................   28\n       ON <date> (search key)\
    \ .....................................   28\n       OR <search-key1> <search-key2>\
    \ (search key) ................   28\n       PARSE (response code) ......................................\
    \   39\n       PARTIAL (command) ..........................................  \
    \ 32\n       PERMANENTFLAGS (response code) .............................   39\n\
    \       PREAUTH (response) .........................................   41\n  \
    \     READ-ONLY (response code) ..................................   39\n    \
    \   READ-WRITE (response code) .................................   39\n      \
    \ RECENT (response) ..........................................   45\n       RECENT\
    \ (search key) ........................................   28\n       RENAME (command)\
    \ ...........................................   18\n       RFC822 (fetch item)\
    \ ........................................   31\n       RFC822 (fetch result)\
    \ ......................................   50\n       RFC822.HEADER (fetch item)\
    \ .................................   31\n       RFC822.HEADER (fetch result)\
    \ ...............................   50\n       RFC822.HEADER.LINES <header_list>\
    \ (fetch item) .............   31\n       RFC822.HEADER.LINES.NOT <header_list>\
    \ (fetch item) .........   32\n       RFC822.PEEK (fetch item) ...................................\
    \   31\n       RFC822.SIZE (fetch item) ...................................  \
    \ 32\n       RFC822.SIZE (fetch result) .................................   50\n\
    \       RFC822.TEXT (fetch item) ...................................   32\n  \
    \     RFC822.TEXT (fetch result) .................................   51\n    \
    \   RFC822.TEXT.PEEK (fetch item) ..............................   32\n      \
    \ SEARCH (command) ...........................................   25\n       SEARCH\
    \ (response) ..........................................   44\n       SEEN (search\
    \ key) ..........................................   28\n       SELECT (command)\
    \ ...........................................   15\n       SENTBEFORE <date> (search\
    \ key) .............................   28\n       SENTON <date> (search key) .................................\
    \   28\n       SENTSINCE <date> (search key) ..............................  \
    \ 28\n       SINCE <date> (search key) ..................................   28\n\
    \       SMALLER <n> (search key) ...................................   28\n  \
    \     STORE (command) ............................................   33\n    \
    \   STORE (response) ...........................................   69\n      \
    \ SUBJECT <string> (search key) ..............................   28\n       SUBSCRIBE\
    \ (command) ........................................   19\n       SUBSCRIBE MAILBOX\
    \ (command) ................................   66\n       TEXT <string> (search\
    \ key) .................................   28\n       TO <string> (search key)\
    \ ...................................   28\n       TRYCREATE (response code) ..................................\
    \   39\n       UID (command) ..............................................  \
    \ 35\n       UID (fetch item) ...........................................   32\n\
    \       UID (fetch result) .........................................   51\n  \
    \     UID <message set> (search key) .............................   28\n    \
    \   UIDVALIDITY (response code) ................................   40\n      \
    \ UNANSWERED (search key) ....................................   29\n       UNDELETED\
    \ (search key) .....................................   29\n       UNDRAFT (search\
    \ key) .......................................   29\n       UNFLAGGED (search\
    \ key) .....................................   29\n       UNKEYWORD <flag> (search\
    \ key) ..............................   29\n       UNSEEN (response code) .....................................\
    \   40\n       UNSEEN (search key) ........................................  \
    \ 29\n       UNSUBSCRIBE (command) ......................................   19\n\
    \       UNSUBSCRIBE MAILBOX (command) ..............................   66\n  \
    \     X<atom> (command) ..........................................   37\n    \
    \   \\Answered (system flag) ....................................   50\n     \
    \  \\Deleted (system flag) .....................................   50\n      \
    \ \\Draft (system flag) .......................................   50\n       \\\
    Flagged (system flag) .....................................   50\n       \\Marked\
    \ (mailbox name attribute) ...........................   43\n       \\Noinferiors\
    \ (mailbox name attribute) ......................   43\n       \\Noselect (mailbox\
    \ name attribute) .........................   43\n       \\Recent (system flag)\
    \ ......................................   50\n       \\Seen (system flag) ........................................\
    \   50\n       \\Unmarked (mailbox name attribute) ......................... \
    \  43\n"
