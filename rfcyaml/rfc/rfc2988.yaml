- title: __initial_text__
  contents:
  - '                  Computing TCP''s Retransmission Timer

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the standard algorithm that Transmission\n\
    \   Control Protocol (TCP) senders are required to use to compute and\n   manage\
    \ their retransmission timer.  It expands on the discussion in\n   section 4.2.3.1\
    \ of RFC 1122 and upgrades the requirement of\n   supporting the algorithm from\
    \ a SHOULD to a MUST.\n"
- title: 1   Introduction
  contents:
  - "1   Introduction\n   The Transmission Control Protocol (TCP) [Pos81] uses a retransmission\n\
    \   timer to ensure data delivery in the absence of any feedback from the\n  \
    \ remote data receiver.  The duration of this timer is referred to as\n   RTO\
    \ (retransmission timeout).  RFC 1122 [Bra89] specifies that the\n   RTO should\
    \ be calculated as outlined in [Jac88].\n   This document codifies the algorithm\
    \ for setting the RTO.  In\n   addition, this document expands on the discussion\
    \ in section 4.2.3.1\n   of RFC 1122 and upgrades the requirement of supporting\
    \ the algorithm\n   from a SHOULD to a MUST.  RFC 2581 [APS99] outlines the algorithm\
    \ TCP\n   uses to begin sending after the RTO expires and a retransmission is\n\
    \   sent.  This document does not alter the behavior outlined in RFC 2581\n  \
    \ [APS99].\n   In some situations it may be beneficial for a TCP sender to be\
    \ more\n   conservative than the algorithms detailed in this document allow.\n\
    \   However, a TCP MUST NOT be more aggressive than the following\n   algorithms\
    \ allow.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"\
    SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"\
    OPTIONAL\" in this\n   document are to be interpreted as described in [Bra97].\n"
- title: 2   The Basic Algorithm
  contents:
  - "2   The Basic Algorithm\n   To compute the current RTO, a TCP sender maintains\
    \ two state\n   variables, SRTT (smoothed round-trip time) and RTTVAR (round-trip\n\
    \   time variation).  In addition, we assume a clock granularity of G\n   seconds.\n\
    \   The rules governing the computation of SRTT, RTTVAR, and RTO are as\n   follows:\n\
    \   (2.1) Until a round-trip time (RTT) measurement has been made for a\n    \
    \     segment sent between the sender and receiver, the sender SHOULD\n      \
    \   set RTO <- 3 seconds (per RFC 1122 [Bra89]), though the\n         \"backing\
    \ off\" on repeated retransmission discussed in (5.5)\n         still applies.\n\
    \            Note that some implementations may use a \"heartbeat\" timer\n  \
    \          that in fact yield a value between 2.5 seconds and 3\n            seconds.\
    \  Accordingly, a lower bound of 2.5 seconds is also\n            acceptable,\
    \ providing that the timer will never expire\n            faster than 2.5 seconds.\
    \  Implementations using a heartbeat\n            timer with a granularity of\
    \ G SHOULD not set the timer below\n            2.5 + G seconds.\n   (2.2) When\
    \ the first RTT measurement R is made, the host MUST set\n            SRTT <-\
    \ R\n            RTTVAR <- R/2\n            RTO <- SRTT + max (G, K*RTTVAR)\n\
    \         where K = 4.\n   (2.3) When a subsequent RTT measurement R' is made,\
    \ a host MUST set\n            RTTVAR <- (1 - beta) * RTTVAR + beta * |SRTT -\
    \ R'|\n            SRTT <- (1 - alpha) * SRTT + alpha * R'\n         The value\
    \ of SRTT used in the update to RTTVAR is its value\n         before updating\
    \ SRTT itself using the second assignment.  That\n         is, updating RTTVAR\
    \ and SRTT MUST be computed in the above\n         order.\n         The above\
    \ SHOULD be computed using alpha=1/8 and beta=1/4 (as\n         suggested in [JK88]).\n\
    \         After the computation, a host MUST update\n         RTO <- SRTT + max\
    \ (G, K*RTTVAR)\n   (2.4) Whenever RTO is computed, if it is less than 1 second\
    \ then the\n         RTO SHOULD be rounded up to 1 second.\n         Traditionally,\
    \ TCP implementations use coarse grain clocks to\n         measure the RTT and\
    \ trigger the RTO, which imposes a large\n         minimum value on the RTO. \
    \ Research suggests that a large\n         minimum RTO is needed to keep TCP conservative\
    \ and avoid\n         spurious retransmissions [AP99].  Therefore, this\n    \
    \     specification requires a large minimum RTO as a conservative\n         approach,\
    \ while at the same time acknowledging that at some\n         future point, research\
    \ may show that a smaller minimum RTO is\n         acceptable or superior.\n \
    \  (2.5) A maximum value MAY be placed on RTO provided it is at least 60\n   \
    \      seconds.\n"
- title: 3   Taking RTT Samples
  contents:
  - "3   Taking RTT Samples\n   TCP MUST use Karn's algorithm [KP87] for taking RTT\
    \ samples.  That\n   is, RTT samples MUST NOT be made using segments that were\n\
    \   retransmitted (and thus for which it is ambiguous whether the reply\n   was\
    \ for the first instance of the packet or a later instance).  The\n   only case\
    \ when TCP can safely take RTT samples from retransmitted\n   segments is when\
    \ the TCP timestamp option [JBB92] is employed, since\n   the timestamp option\
    \ removes the ambiguity regarding which instance\n   of the data segment triggered\
    \ the acknowledgment.\n   Traditionally, TCP implementations have taken one RTT\
    \ measurement at\n   a time (typically once per RTT).  However, when using the\
    \ timestamp\n   option, each ACK can be used as an RTT sample.  RFC 1323 [JBB92]\n\
    \   suggests that TCP connections utilizing large congestion windows\n   should\
    \ take many RTT samples per window of data to avoid aliasing\n   effects in the\
    \ estimated RTT.  A TCP implementation MUST take at\n   least one RTT measurement\
    \ per RTT (unless that is not possible per\n   Karn's algorithm).\n   For fairly\
    \ modest congestion window sizes research suggests that\n   timing each segment\
    \ does not lead to a better RTT estimator [AP99].\n   Additionally, when multiple\
    \ samples are taken per RTT the alpha and\n   beta defined in section 2 may keep\
    \ an inadequate RTT history.  A\n   method for changing these constants is currently\
    \ an open research\n   question.\n"
- title: 4   Clock Granularity
  contents:
  - "4   Clock Granularity\n   There is no requirement for the clock granularity G\
    \ used for\n   computing RTT measurements and the different state variables.\n\
    \   However, if the K*RTTVAR term in the RTO calculation equals zero,\n   the\
    \ variance term MUST be rounded to G seconds (i.e., use the\n   equation given\
    \ in step 2.3).\n       RTO <- SRTT + max (G, K*RTTVAR)\n   Experience has shown\
    \ that finer clock granularities (<= 100 msec)\n   perform somewhat better than\
    \ more coarse granularities.\n   Note that [Jac88] outlines several clever tricks\
    \ that can be used to\n   obtain better precision from coarse granularity timers.\
    \  These\n   changes are widely implemented in current TCP implementations.\n"
- title: 5   Managing the RTO Timer
  contents:
  - "5   Managing the RTO Timer\n   An implementation MUST manage the retransmission\
    \ timer(s) in such a\n   way that a segment is never retransmitted too early,\
    \ i.e. less than\n   one RTO after the previous transmission of that segment.\n\
    \   The following is the RECOMMENDED algorithm for managing the\n   retransmission\
    \ timer:\n   (5.1) Every time a packet containing data is sent (including a\n\
    \         retransmission), if the timer is not running, start it running\n   \
    \      so that it will expire after RTO seconds (for the current value\n     \
    \    of RTO).\n   (5.2) When all outstanding data has been acknowledged, turn\
    \ off the\n         retransmission timer.\n   (5.3) When an ACK is received that\
    \ acknowledges new data, restart the\n         retransmission timer so that it\
    \ will expire after RTO seconds\n         (for the current value of RTO).\n  \
    \ When the retransmission timer expires, do the following:\n   (5.4) Retransmit\
    \ the earliest segment that has not been acknowledged\n         by the TCP receiver.\n\
    \   (5.5) The host MUST set RTO <- RTO * 2 (\"back off the timer\").  The\n  \
    \       maximum value discussed in (2.5) above may be used to provide an\n   \
    \      upper bound to this doubling operation.\n   (5.6) Start the retransmission\
    \ timer, such that it expires after RTO\n         seconds (for the value of RTO\
    \ after the doubling operation\n         outlined in 5.5).\n   Note that after\
    \ retransmitting, once a new RTT measurement is\n   obtained (which can only happen\
    \ when new data has been sent and\n   acknowledged), the computations outlined\
    \ in section 2 are performed,\n   including the computation of RTO, which may\
    \ result in \"collapsing\"\n   RTO back down after it has been subject to exponential\
    \ backoff\n   (rule 5.5).\n   Note that a TCP implementation MAY clear SRTT and\
    \ RTTVAR after\n   backing off the timer multiple times as it is likely that the\n\
    \   current SRTT and RTTVAR are bogus in this situation.  Once SRTT and\n   RTTVAR\
    \ are cleared they should be initialized with the next RTT\n   sample taken per\
    \ (2.2) rather than using (2.3).\n"
- title: 6   Security Considerations
  contents:
  - "6   Security Considerations\n   This document requires a TCP to wait for a given\
    \ interval before\n   retransmitting an unacknowledged segment.  An attacker could\
    \ cause a\n   TCP sender to compute a large value of RTO by adding delay to a\n\
    \   timed packet's latency, or that of its acknowledgment.  However,\n   the ability\
    \ to add delay to a packet's latency often coincides with\n   the ability to cause\
    \ the packet to be lost, so it is difficult to\n   see what an attacker might\
    \ gain from such an attack that could cause\n   more damage than simply discarding\
    \ some of the TCP connection's\n   packets.\n   The Internet to a considerable\
    \ degree relies on the correct\n   implementation of the RTO algorithm (as well\
    \ as those described in\n   RFC 2581) in order to preserve network stability and\
    \ avoid\n   congestion collapse.  An attacker could cause TCP endpoints to\n \
    \  respond more aggressively in the face of congestion by forging\n   acknowledgments\
    \ for segments before the receiver has actually\n   received the data, thus lowering\
    \ RTO to an unsafe value.  But to do\n   so requires spoofing the acknowledgments\
    \ correctly, which is\n   difficult unless the attacker can monitor traffic along\
    \ the path\n   between the sender and the receiver.  In addition, even if the\n\
    \   attacker can cause the sender's RTO to reach too small a value, it\n   appears\
    \ the attacker cannot leverage this into much of an attack\n   (compared to the\
    \ other damage they can do if they can spoof packets\n   belonging to the connection),\
    \ since the sending TCP will still back\n   off its timer in the face of an incorrectly\
    \ transmitted packet's\n   loss due to actual congestion.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The RTO algorithm described in this memo was originated by\
    \ Van\n   Jacobson in [Jac88].\n"
- title: References
  contents:
  - "References\n   [AP99]  Allman, M. and V. Paxson, \"On Estimating End-to-End Network\n\
    \           Path Properties\", SIGCOMM 99.\n   [APS99] Allman, M., Paxson V. and\
    \ W. Stevens, \"TCP Congestion\n           Control\", RFC 2581, April 1999.\n\
    \   [Bra89] Braden, R., \"Requirements for Internet Hosts --\n           Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [Bra97] Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [Jac88] Jacobson, V., \"Congestion Avoidance and Control\",\
    \ Computer\n           Communication Review, vol. 18, no. 4, pp. 314-329, Aug.\
    \  1988.\n   [JK88]  Jacobson, V. and M. Karels, \"Congestion Avoidance and\n\
    \           Control\", ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\n   [KP87]\
    \  Karn, P. and C. Partridge, \"Improving Round-Trip Time\n           Estimates\
    \ in Reliable Transport Protocols\", SIGCOMM 87.\n   [Pos81] Postel, J., \"Transmission\
    \ Control Protocol\", STD 7, RFC 793,\n           September 1981.\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   Vern Paxson\n   ACIRI / ICSI\n   1947 Center Street\n\
    \   Suite 600\n   Berkeley, CA 94704-1198\n   Phone: 510-666-2882\n   Fax:   510-643-7684\n\
    \   EMail: vern@aciri.org\n   http://www.aciri.org/vern/\n   Mark Allman\n   NASA\
    \ Glenn Research Center/BBN Technologies\n   Lewis Field\n   21000 Brookpark Rd.\
    \  MS 54-2\n   Cleveland, OH  44135\n   Phone: 216-433-6586\n   Fax:   216-433-8705\n\
    \   EMail: mallman@grc.nasa.gov\n   http://roland.grc.nasa.gov/~mallman\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
