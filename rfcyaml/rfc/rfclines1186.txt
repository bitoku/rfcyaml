This note describes the MD4 message digest algorithm.
The algorithm takes as input an input message of arbitrary length and produces as output a 128 bit "fingerprint" or "message digest" of the input.
It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest.
The MD4 algorithm is thus ideal for digital signature applications, where a large file must be "compressed" in a secure manner before being signed with the RSA public key cryptosystem.
The MD4 algorithm is designed to be quite fast on 32 bit machines.
On a SUN Sparc station, MD4 runs at 1,450,000 bytes/second.
On a DEC MicroVax II, MD4 runs at approximately 70,000 bytes/second.
On a 20MHz 80286, MD4 runs at approximately 32,000 bytes/second.
In addition, the MD4 algorithm does not require any large substitution tables; the algorithm can be coded quite compactly.
The MD4 algorithm is being placed in the public domain for review and possible adoption as a standard.
(Note: The document supersedes an earlier draft.
The algorithm described here is a slight modification of the one described in the draft.)
In this note a "word" is a 32 bit quantity and a byte is an 8 bit quantity.
A sequence of bits can be interpreted in a natural manner as a sequence of bytes, where each consecutive group of 8 bits is interpreted as a byte with the high order (most significant) bit of each byte listed first.
Similarly, a sequence of bytes can be interpreted as a sequence of 32 bit words, where each consecutive group of 4 bytes is interpreted as a word with the low order (least significant) byte given first.
Let x i denote "
If the subscript is an expression, we surround it in braces, as in x {i 1}.
Similarly, we use ^ for superscripts (exponentiation), so that x^i denotes x to the i th power.
X left by s bit positions.
Let not(X) denote the bit wise complement of X, and let
X v Y denote the bit wise OR of X and Y.
Let X xor Y denote the bit wise XOR of X and Y, and let XY denote the bit wise AND of X and Y. 3.
We begin by supposing that we have a b bit message as input, and that we wish to find its message digest.
Here b is an arbitrary nonnegative integer; b may be zero, it need not be a multiple of 8, and it may be arbitrarily large.
We imagine the bits of the message written down as follows:
The following five steps are performed to compute the message digest of the message.
The message is "padded" (extended) so that its length (in bits) is congruent to 448, modulo 512.
That is, the message is extended so that it is just 64 bits shy of being a multiple of 512 bits long.
Padding is always performed, even if the length of the message is already congruent to 448, modulo 512 (in which case 512 bits of padding are added).
Padding is performed as follows: a single "1" bit is appended to the message, and then enough zero bits are appended so that the length in bits of the padded message becomes congruent to 448, modulo 512.
A 64 bit representation of b (the length of the message before the padding bits were added) is appended to the result of the previous step.
In the unlikely event that b is greater than 2^64, then only the low order 64 bits of b are used.
(These bits are appended as two 32 bit words and appended low order word first in accordance with the previous conventions.)
At this point the resulting message (after padding with bits and with b) has a length that is an exact multiple of 512 bits.
Equivalently, this message has a length that is an exact multiple of 16 (32 bit) words.
N 1] denote the words of the resulting message, where N is a multiple of 16.
A 4 word buffer (A,B,C,D) is used to compute the message digest.
Here each of A,B,C,D are 32 bit registers.
These registers are initialized to the following values in hexadecimal, low order bytes first):
Process message in 16 word blocks
We first define three auxiliary functions that each take as input three 32 bit words and produce as output one 32 bit word.
XY v XZ v YZ h(X,Y,Z)
X xor Y xor Z
In each bit position f acts as a conditional: if x then y else z.
(The function f could have been defined using   instead of v since XY and not(X)Z will never have 1's in the same bit position.)
In each bit position g acts as a majority function: if at least two of x, y, z are on, then g has a one in that bit position, else g has a zero.
It is interesting to note that if the bits of X, Y, and Z are independent and unbiased, the each bit of f(X,Y,Z) will be independent and unbiased, and similarly each bit of g(X,Y,Z) will be independent and unbiased.
The function h is the bit wise "xor" or "parity" function; it has properties similar to those of f and g.
For j   0 to 15 do: /
copy block i into X  / Set X[j] to M[i 16 j].
end /  of loop on j  / Save A as AA, B as BB, C as CC, and D as DD.
[Round 1] Let [A B C D i s] denote the operation A
Do the following 16 operations:
[A B C D 0 3]
[D A B C 1 7]
C D A B 2 11]
[B C D A 3 19]
[A B C D 4 3]
[D A B C 5 7]
[C D A B 6 11] [B C D A 7 19] [A B C D 8 3] [D A B C 9 7]
[C D A B 10 11]
[B C D A 11 19]
[A B C D 12 3]
[D A B C 13 7]
C D A B 14 11]
(The value 5A..99 is a hexadecimal 32 bit constant, written with the high order digit first.
This constant represents the square root of 2.
The octal value of this constant is 013240474631.
See Knuth, The Art of Programming, Volume 2 (Seminumerical Algorithms), Second Edition (1981), Addison Wesley.
Do the following 16 operations:
[A B C D 0  3]
[D A B C 4  5]
[B C D A 12 13]
[A B C D 1  3]
[D A B C 5  5]
[B C D A 13 13]
[A B C D 2  3]
[D A B C 6  5]
[C D A B 10 9]
[B C D A 14 13]
[A B C D 3  3]
[D A B C 7  5]
[C D A B 11 9] [B C D A 15 13]
[Round 3] Let [A B C D i s] denote the operation A
(The value 6E..A1 is a hexadecimal 32 bit constant, written with the high order digit first.
This constant represents the square root of 3.
The octal value of this constant is 015666365641.
See Knuth, The Art of Programming, Volume 2 (Seminumerical Algorithms), Second Edition (1981), Addison Wesley.
Do the following 16 operations:
[A B C D 0  3]
[D A B C 8  9]
[B C D A 12 15]
[A B C D 2  3]
[D A B C 10 9]
[C D A B 6  11]
[B C D A 14 15]
[A B C D 1  3]
[D A B C 9  9]
[C D A B 5  11]
[B C D A 13 15]
[A B C D 3  3]
[D A B C 11 9]
[C D A B 7  11]
[B C D A 15 15] Then perform the following additions: A   A   AA B
(That is, each of the four registers is incremented by the value it had before this block was started.)
end /  of loop on i
The message digest produced as output is A,B,C,D.
That is, we begin with the low order byte of A, and end with the high order byte of D.
This completes the description of MD4.
A reference implementation in C is given in the Appendix.
If more than 128 bits of output are required, then the following procedure is recommended to obtain a 256 bit output.
(There is no provision made for obtaining more than 256 bits.)
Two copies of MD4 are run in parallel over the input.
The first copy is standard as described above.
The second copy is modified as follows.
The magic constants in rounds 2 and 3 for the second copy of MD4 are changed from sqrt(2) and sqrt(3) to cuberoot(2) and cuberoot(3):
Finally, after every 16 word block is processed (including the last block), the values of the A registers in the two copies are exchanged.
The final message digest is obtaining by appending the result of the second copy of MD4 to the end of the result of the first copy of MD4.
The MD4 message digest algorithm is simple to implement, and provides a "fingerprint" or message digest of a message of arbitrary length.
It is conjectured that the difficulty of coming up with two messages having the same message digest is on the order of 2^64 operations, and that the difficulty of coming up with any message having a given message digest is on the order of 2^128 operations.
The MD4 algorithm has been carefully scrutinized for weaknesses.
It is, however, a relatively new algorithm and further security analysis is of course justified, as is the case with any new proposal of this sort.
The level of security provided by MD4 should be sufficient for implementing very high security hybrid digital signature schemes based on MD4 and the RSA public key cryptosystem.
This appendix contains the following files:
MD   an MDptr    Initialize the MDstruct prepatory to doing a message digest    computation.
the number of bits of X to use (an unsigned int).
Updates MD using the first "count" bits of X.
The array pointed to by X is not modified.
If count is not a multiple of 8, MDupdate uses high bits of    last byte.
This is the basic input routine for a user.
The routine terminates the MD computation when count < 512, so    every MD computation should end with one call to MDupdate with a    count less than 512.
Zero is OK for a count.
MD   an MDptr    Prints message digest buffer MD as 32 hexadecimal digits.
Order is from low order byte of buffer[0] to high order byte    of buffer[3].
Each byte is printed with high order hexadecimal digit first.
For each full block (64 bytes)
(512 is the number of bits in a full block.)
You can print out the digest using MDprint(&MD)
This implementation assumes that ints are 32 bit quantities.
If the machine stores the least significant byte of an int in the    least addressed byte (e.g., VAX and 8086), then LOWBYTEFIRST    should be set to TRUE.
Otherwise (e.g., SUNS), LOWBYTEFIRST    should be set to FALSE.
Note that on machines with LOWBYTEFIRST    FALSE
the routine MDupdate modifies has a side effect on its input    array (the order of bytes in each word are reversed).
If this is    undesired a call to MDreverse(X) can reverse the bytes of X back    into order after each call to MDupdate.
/  Initial values for MD buffer  /
/  round 2 constant   sqrt(2)
#define gs3  9 #define gs4 13
#define hs4 15 /  Compile time macro declarations for MD4.
The "rot" operator uses the variable "tmp".
Print message digest buffer MDp as 32 hexadecimal digits.
Order is from low order byte of buffer[0] to high order byte of    buffer[3].
Each byte is printed with high order hexadecimal digit first.
This is a user callable routine.
MDptr MDp; { int i,j; for (i 0;i<4;i )
This is a user callable routine.
MDptr MDp; { int i; MDp buffer[0]   I0
; MDp buffer[1]   I1; MDp buffer[2]   I2; MDp buffer[3]   I3; for (i 0;i<8;i )
Reverse the byte ordering of every int in X.
Assumes X is an array of 16 ints.
Update message digest buffer MDp buffer using
all 16 words of X are full of data.
Does not update MDp count.
This routine is not user callable.
the number of bits of X to use.
(if not a multiple of 8, uses high bits of last byte.)
Update MDp using the number of bits of X given by count.
This is the basic input routine for an MD4 user.
The routine completes the MD computation when count < 512, so    every MD computation should end with one call to MDupdate with a    count less than 512.
A call with count 0 will be ignored if the    MD has already been terminated (done !
0), so an extra call with    count 0 can be given as a "courtesy close" to force termination    if desired.
{ printf("\nError: MDupdate called with illegal count value %d." ,count); return; } else /  partial block
must be last block so finish up  /
/  If room for bit count, finish up with this block  / if (byte <  55) { for (i 0;i<8;i )
MDp count[i]; MDblock(MDp,(unsigned int  )XX)
A time trial routine, to measure the speed of MD4.
Measures speed for 1M blocks   64M bytes.
i; printf ("MD4 time trial.
Processing 1 million 64 character blocks...
/ MDstring(s) unsigned char  s; { unsigned int i, len   strlen(s); MDstruct MD; MDbegin(&MD)
MDupdate(&MD,s i,512); MDupdate(&MD,s i,(len i)
Prints out message digest, a space, the file name, and a    carriage return.
/ MDfile(filename) char  filename; { FILE  f
; MDstruct MD; int b; if (f   NULL) {
printf("%s can't be opened.\n",filename); return; } MDbegin(&MD); while ((b fread(X,1,64,f))! 0)
's') MDstring(argv[i] 2); else if (strcmp(argv[i]," t") 0)
24576 Feb 17 12:28 md4
9347 Feb 17 00:37 md4.c
1844 Feb 16 21:21 md4.h  rw rw r   1 rivest
x MD4 test suite results:
31d6cfe0d16ae931b73c59d7e0c089c0 "" bde52cb31de33e46245e05fbdbd6fb24 "a" a448017aaf21d8525fc10ae87aa6729d "abc" d9130a8164549fe818874806e1c7014b "message digest" d79e1c308aa5bbcdeea8ed63df412da9 "abcdefghijklmnopqrstuvwxyz" 043f8582f241db351ce627e153e7f0e4
shi a448017aaf21d8525fc10ae87aa6729d "abc" cfaee2512bd25eb033236f0cd054e308 "hi" >
Processing 1 million 64 character blocks...
6325bf77e5891c7c0d8104b64cc6e9ef is digest of 64M byte test input.
Seconds to process test input:
44.0982 Characters processed per second: 1451305.
A version of this document including the C source code is available for FTP from THEORY.LSC.MIT.EDU in the file "md4.doc".
The level of security discussed in this memo by MD4 is considered to be sufficient for implementing very high security hybrid digital signature schemes based on MD4 and the RSA public key cryptosystem.
