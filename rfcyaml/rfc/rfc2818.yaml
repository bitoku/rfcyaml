- title: __initial_text__
  contents:
  - '                             HTTP Over TLS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes how to use TLS to secure HTTP connections over\n\
    \   the Internet. Current practice is to layer HTTP over SSL (the\n   predecessor\
    \ to TLS), distinguishing secured traffic from insecure\n   traffic by the use\
    \ of a different server port. This document\n   documents that practice using\
    \ TLS. A companion document describes a\n   method for using HTTP/TLS over the\
    \ same port as normal HTTP\n   [RFC2817].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . 2\n   1.1. Requirements Terminology  . . . . . . . . . . . . . . . 2\n\
    \   2. HTTP Over TLS . . . . . . . . . . . . . . . . . . . . . . 2\n   2.1. Connection\
    \ Initiation . . . . . . . . . . . . . . . . . 2\n   2.2. Connection Closure \
    \ . . . . . . . . . . . . . . . . . . 2\n   2.2.1. Client Behavior . . . . . .\
    \ . . . . . . . . . . . . . 3\n   2.2.2. Server Behavior . . . . . . . . . . .\
    \ . . . . . . . . 3\n   2.3. Port Number . . . . . . . . . . . . . . . . . . .\
    \ . . . 4\n   2.4. URI Format  . . . . . . . . . . . . . . . . . . . . . . 4\n\
    \   3. Endpoint Identification . . . . . . . . . . . . . . . . . 4\n   3.1. Server\
    \ Identity . . . . . . . . . . . . . . . . . . . . 4\n   3.2. Client Identity\
    \ . . . . . . . . . . . . . . . . . . . . 5\n   References . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 6\n   Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . 6\n   Author's Address . . . . . . . . . . . . . . . . .\
    \ . . . . . 6\n   Full Copyright Statement . . . . . . . . . . . . . . . . . .\
    \ 7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP [RFC2616] was originally used in the clear on the Internet.\n\
    \   However, increased use of HTTP for sensitive applications has\n   required\
    \ security measures. SSL, and its successor TLS [RFC2246] were\n   designed to\
    \ provide channel-oriented security. This document\n   describes how to use HTTP\
    \ over TLS.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   Keywords \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\" and\n   \"MAY\" that appear in this document are\
    \ to be interpreted as described\n   in [RFC2119].\n"
- title: 2.  HTTP Over TLS
  contents:
  - "2.  HTTP Over TLS\n   Conceptually, HTTP/TLS is very simple. Simply use HTTP\
    \ over TLS\n   precisely as you would use HTTP over TCP.\n"
- title: 2.1.  Connection Initiation
  contents:
  - "2.1.  Connection Initiation\n   The agent acting as the HTTP client should also\
    \ act as the TLS\n   client.  It should initiate a connection to the server on\
    \ the\n   appropriate port and then send the TLS ClientHello to begin the TLS\n\
    \   handshake. When the TLS handshake has finished. The client may then\n   initiate\
    \ the first HTTP request.  All HTTP data MUST be sent as TLS\n   \"application\
    \ data\".  Normal HTTP behavior, including retained\n   connections should be\
    \ followed.\n"
- title: 2.2.  Connection Closure
  contents:
  - "2.2.  Connection Closure\n   TLS provides a facility for secure connection closure.\
    \ When a valid\n   closure alert is received, an implementation can be assured\
    \ that no\n   further data will be received on that connection.  TLS\n   implementations\
    \ MUST initiate an exchange of closure alerts before\n   closing a connection.\
    \ A TLS implementation MAY, after sending a\n   closure alert, close the connection\
    \ without waiting for the peer to\n   send its closure alert, generating an \"\
    incomplete close\".  Note that\n   an implementation which does this MAY choose\
    \ to reuse the session.\n   This SHOULD only be done when the application knows\
    \ (typically\n   through detecting HTTP message boundaries) that it has received\
    \ all\n   the message data that it cares about.\n   As specified in [RFC2246],\
    \ any implementation which receives a\n   connection close without first receiving\
    \ a valid closure alert (a\n   \"premature close\") MUST NOT reuse that session.\
    \  Note that a\n   premature close does not call into question the security of\
    \ the data\n   already received, but simply indicates that subsequent data might\n\
    \   have been truncated. Because TLS is oblivious to HTTP\n   request/response\
    \ boundaries, it is necessary to examine the HTTP data\n   itself (specifically\
    \ the Content-Length header) to determine whether\n   the truncation occurred\
    \ inside a message or between messages.\n"
- title: 2.2.1.  Client Behavior
  contents:
  - "2.2.1.  Client Behavior\n   Because HTTP uses connection closure to signal end\
    \ of server data,\n   client implementations MUST treat any premature closes as\
    \ errors and\n   the data received as potentially truncated.  While in some cases\
    \ the\n   HTTP protocol allows the client to find out whether truncation took\n\
    \   place so that, if it received the complete reply, it may tolerate\n   such\
    \ errors following the principle to \"[be] strict when sending and\n   tolerant\
    \ when receiving\" [RFC1958], often truncation does not show in\n   the HTTP protocol\
    \ data; two cases in particular deserve special note:\n     A HTTP response without\
    \ a Content-Length header. Since data length\n     in this situation is signalled\
    \ by connection close a premature\n     close generated by the server cannot be\
    \ distinguished from a\n     spurious close generated by an attacker.\n     A\
    \ HTTP response with a valid Content-Length header closed before\n     all data\
    \ has been read. Because TLS does not provide document\n     oriented protection,\
    \ it is impossible to determine whether the\n     server has miscomputed the Content-Length\
    \ or an attacker has\n     truncated the connection.\n   There is one exception\
    \ to the above rule. When encountering a\n   premature close, a client SHOULD\
    \ treat as completed all requests for\n   which it has received as much data as\
    \ specified in the Content-Length\n   header.\n   A client detecting an incomplete\
    \ close SHOULD recover gracefully.  It\n   MAY resume a TLS session closed in\
    \ this fashion.\n   Clients MUST send a closure alert before closing the connection.\n\
    \   Clients which are unprepared to receive any more data MAY choose not\n   to\
    \ wait for the server's closure alert and simply close the\n   connection, thus\
    \ generating an incomplete close on the server side.\n"
- title: 2.2.2.  Server Behavior
  contents:
  - "2.2.2.  Server Behavior\n   RFC 2616 permits an HTTP client to close the connection\
    \ at any time,\n   and requires servers to recover gracefully.  In particular,\
    \ servers\n   SHOULD be prepared to receive an incomplete close from the client,\n\
    \   since the client can often determine when the end of server data is.\n   Servers\
    \ SHOULD be willing to resume TLS sessions closed in this\n   fashion.\n   Implementation\
    \ note: In HTTP implementations which do not use\n   persistent connections, the\
    \ server ordinarily expects to be able to\n   signal end of data by closing the\
    \ connection. When Content-Length is\n   used, however, the client may have already\
    \ sent the closure alert and\n   dropped the connection.\n   Servers MUST attempt\
    \ to initiate an exchange of closure alerts with\n   the client before closing\
    \ the connection. Servers MAY close the\n   connection after sending the closure\
    \ alert, thus generating an\n   incomplete close on the client side.\n"
- title: 2.3.  Port Number
  contents:
  - "2.3.  Port Number\n   The first data that an HTTP server expects to receive from\
    \ the client\n   is the Request-Line production. The first data that a TLS server\
    \ (and\n   hence an HTTP/TLS server) expects to receive is the ClientHello.\n\
    \   Consequently, common practice has been to run HTTP/TLS over a\n   separate\
    \ port in order to distinguish which protocol is being used.\n   When HTTP/TLS\
    \ is being run over a TCP/IP connection, the default port\n   is 443. This does\
    \ not preclude HTTP/TLS from being run over another\n   transport. TLS only presumes\
    \ a reliable connection-oriented data\n   stream.\n"
- title: 2.4.  URI Format
  contents:
  - "2.4.  URI Format\n   HTTP/TLS is differentiated from HTTP URIs by using the 'https'\n\
    \   protocol identifier in place of the 'http' protocol identifier. An\n   example\
    \ URI specifying HTTP/TLS is:\n     https://www.example.com/~smith/home.html\n"
- title: 3.  Endpoint Identification
  contents:
  - '3.  Endpoint Identification

    '
- title: 3.1.  Server Identity
  contents:
  - "3.1.  Server Identity\n   In general, HTTP/TLS requests are generated by dereferencing\
    \ a URI.\n   As a consequence, the hostname for the server is known to the client.\n\
    \   If the hostname is available, the client MUST check it against the\n   server's\
    \ identity as presented in the server's Certificate message,\n   in order to prevent\
    \ man-in-the-middle attacks.\n   If the client has external information as to\
    \ the expected identity of\n   the server, the hostname check MAY be omitted.\
    \ (For instance, a\n   client may be connecting to a machine whose address and\
    \ hostname are\n   dynamic but the client knows the certificate that the server\
    \ will\n   present.) In such cases, it is important to narrow the scope of\n \
    \  acceptable certificates as much as possible in order to prevent man\n   in\
    \ the middle attacks.  In special cases, it may be appropriate for\n   the client\
    \ to simply ignore the server's identity, but it must be\n   understood that this\
    \ leaves the connection open to active attack.\n   If a subjectAltName extension\
    \ of type dNSName is present, that MUST\n   be used as the identity. Otherwise,\
    \ the (most specific) Common Name\n   field in the Subject field of the certificate\
    \ MUST be used. Although\n   the use of the Common Name is existing practice,\
    \ it is deprecated and\n   Certification Authorities are encouraged to use the\
    \ dNSName instead.\n   Matching is performed using the matching rules specified\
    \ by\n   [RFC2459].  If more than one identity of a given type is present in\n\
    \   the certificate (e.g., more than one dNSName name, a match in any one\n  \
    \ of the set is considered acceptable.) Names may contain the wildcard\n   character\
    \ * which is considered to match any single domain name\n   component or component\
    \ fragment. E.g., *.a.com matches foo.a.com but\n   not bar.foo.a.com. f*.com\
    \ matches foo.com but not bar.com.\n   In some cases, the URI is specified as\
    \ an IP address rather than a\n   hostname. In this case, the iPAddress subjectAltName\
    \ must be present\n   in the certificate and must exactly match the IP in the\
    \ URI.\n   If the hostname does not match the identity in the certificate, user\n\
    \   oriented clients MUST either notify the user (clients MAY give the\n   user\
    \ the opportunity to continue with the connection in any case) or\n   terminate\
    \ the connection with a bad certificate error. Automated\n   clients MUST log\
    \ the error to an appropriate audit log (if available)\n   and SHOULD terminate\
    \ the connection (with a bad certificate error).\n   Automated clients MAY provide\
    \ a configuration setting that disables\n   this check, but MUST provide a setting\
    \ which enables it.\n   Note that in many cases the URI itself comes from an untrusted\n\
    \   source. The above-described check provides no protection against\n   attacks\
    \ where this source is compromised. For example, if the URI was\n   obtained by\
    \ clicking on an HTML page which was itself obtained\n   without using HTTP/TLS,\
    \ a man in the middle could have replaced the\n   URI.  In order to prevent this\
    \ form of attack, users should carefully\n   examine the certificate presented\
    \ by the server to determine if it\n   meets their expectations.\n"
- title: 3.2.  Client Identity
  contents:
  - "3.2.  Client Identity\n   Typically, the server has no external knowledge of\
    \ what the client's\n   identity ought to be and so checks (other than that the\
    \ client has a\n   certificate chain rooted in an appropriate CA) are not possible.\
    \ If a\n   server has such knowledge (typically from some source external to\n\
    \   HTTP or TLS) it SHOULD check the identity as described above.\n"
- title: References
  contents:
  - "References\n   [RFC2459] Housley, R., Ford, W., Polk, W. and D. Solo, \"Internet\n\
    \             Public Key Infrastructure: Part I: X.509 Certificate and\n     \
    \        CRL Profile\", RFC 2459, January 1999.\n   [RFC2616] Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H., Masinter,\n             L., Leach, P. and T. Berners-Lee,\
    \ \"Hypertext Transfer\n             Protocol, HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC2119] Bradner, S., \"Key Words for use in RFCs to indicate\n         \
    \    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2246] Dierks,\
    \ T. and C. Allen, \"The TLS Protocol\", RFC 2246,\n             January 1999.\n\
    \   [RFC2817] Khare, R. and S. Lawrence, \"Upgrading to TLS Within\n         \
    \    HTTP/1.1\", RFC 2817, May 2000.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Eric Rescorla\n   RTFM, Inc.\n   30 Newell Road, #16\n \
    \  East Palo Alto, CA 94303\n   Phone: (650) 328-8631\n   EMail: ekr@rtfm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
