- title: __initial_text__
  contents:
  - '             Requirements for Traffic Engineering Over MPLS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents a set of requirements for Traffic Engineering\n\
    \   over Multiprotocol Label Switching (MPLS). It identifies the\n   functional\
    \ capabilities required to implement policies that\n   facilitate efficient and\
    \ reliable network operations in an MPLS\n   domain. These capabilities can be\
    \ used to optimize the utilization of\n   network resources and to enhance traffic\
    \ oriented performance\n   characteristics.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0   Introduction .............................................\
    \  2\n   1.1   Terminology ..............................................  3\n\
    \   1.2   Document Organization ....................................  3\n   2.0\
    \   Traffic Engineering ......................................  4\n   2.1   Traffic\
    \ Engineering Performance Objectives ...............  4\n   2.2   Traffic and\
    \ Resource Control .............................  6\n   2.3   Limitations of Current\
    \ IGP Control Mechanisms ............  6\n   3.0   MPLS and Traffic Engineering\
    \ .............................  7\n   3.1   Induced MPLS Graph .......................................\
    \  9\n   3.2   The Fundamental Problem of Traffic Engineering Over MPLS .  9\n\
    \   4.0   Augmented Capabilities for Traffic Engineering Over MPLS . 10\n   5.0\
    \   Traffic Trunk Attributes and Characteristics   ........... 10\n   5.1   Bidirectional\
    \ Traffic Trunks ............................. 11\n   5.2   Basic Operations on\
    \ Traffic Trunks ....................... 12\n   5.3   Accounting and Performance\
    \ Monitoring .................... 12\n   5.4   Basic Attributes of Traffic Trunks\
    \ ....................... 13\n   5.5   Traffic Parameter Attributes  ............................\
    \ 14\n   5.6   Generic Path Selection and Management Attributes ......... 14\n\
    \   5.6.1 Administratively Specified Explicit Paths ................ 15\n   5.6.2\
    \ Hierarchy of Preference Rules for Multi-paths ............ 15\n   5.6.3 Resource\
    \ Class Affinity Attributes ....................... 16\n   5.6.4 Adaptivity Attribute\
    \ ..................................... 17\n   5.6.5 Load Distribution Across\
    \ Parallel Traffic Trunks ......... 18\n   5.7   Priority Attribute .......................................\
    \ 18\n   5.8   Preemption Attribute ..................................... 18\n\
    \   5.9   Resilience Attribute ..................................... 19\n   5.10\
    \  Policing Attribute  ...................................... 20\n   6.0   Resource\
    \ Attributes ...................................... 21\n   6.1   Maximum Allocation\
    \ Multiplier ............................ 21\n   6.2   Resource Class Attribute\
    \  ................................ 22\n   7.0   Constraint-Based Routing  ................................\
    \ 22\n   7.1   Basic Features of Constraint-Based Routing ............... 23\n\
    \   7.2   Implementation Considerations ............................ 24\n   8.0\
    \   Conclusion   ............................................. 25\n   9.0   Security\
    \ Considerations .................................. 26\n   10.0  References  \
    \ ............................................. 26\n   11.0  Acknowledgments ..........................................\
    \ 27\n   12.0  Authors' Addresses ....................................... 28\n\
    \   13.0  Full Copyright Statement ................................. 29\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   Multiprotocol Label Switching (MPLS) [1,2] integrates a\
    \ label\n   swapping framework with network layer routing. The basic idea\n  \
    \ involves assigning short fixed length labels to  packets at the\n   ingress\
    \ to an MPLS cloud (based on the concept of forwarding\n   equivalence classes\
    \ [1,2]). Throughout the interior of the MPLS\n   domain, the labels attached\
    \ to packets are used to make forwarding\n   decisions  (usually without recourse\
    \ to the original packet headers).\n   A set of powerful constructs to address\
    \ many critical issues in the\n   emerging differentiated services Internet can\
    \ be devised from this\n   relatively simple paradigm.  One of the most significant\
    \ initial\n   applications of MPLS will be in Traffic Engineering. The importance\n\
    \   of this application is already well-recognized (see [1,2,3]).\n   This manuscript\
    \ is exclusively focused on the Traffic Engineering\n   applications of MPLS.\
    \ Specifically, the goal of this document is to\n   highlight the issues and requirements\
    \ for Traffic Engineering in a\n   large Internet backbone. The expectation is\
    \ that the MPLS\n   specifications, or implementations derived therefrom, will\
    \ address\n   the realization of these objectives.  A description of the basic\n\
    \   capabilities and functionality required of an MPLS implementation to\n   accommodate\
    \ the requirements is also presented.\n   It should be noted that even though\
    \ the focus is on Internet\n   backbones, the capabilities described in this document\
    \ are equally\n   applicable to Traffic Engineering in enterprise networks. In\
    \ general,\n   the capabilities can  be applied to any label switched network\
    \ under\n   a single technical administration in which at least two paths exist\n\
    \   between two nodes.\n   Some recent manuscripts have focused on the considerations\
    \ pertaining\n   to Traffic Engineering and Traffic management under MPLS, most\n\
    \   notably the works of Li and Rekhter [3], and others.  In [3], an\n   architecture\
    \ is proposed which employs MPLS and RSVP to provide\n   scalable differentiated\
    \ services and Traffic Engineering in the\n   Internet.  The present manuscript\
    \ complements the aforementioned and\n   similar efforts.  It reflects the authors'\
    \ operational experience in\n   managing a large Internet backbone.\n"
- title: 1.1 Terminology
  contents:
  - "1.1 Terminology\n   The reader is assumed to be familiar with the MPLS terminology\
    \ as\n   defined in [1].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [11].\n"
- title: 1.2 Document Organization
  contents:
  - "1.2 Document Organization\n   The remainder of this document is organized as\
    \ follows: Section 2\n   discusses the basic functions of Traffic Engineering\
    \ in the Internet.\n   Section 3, provides an overview of the traffic Engineering\
    \ potentials\n   of MPLS. Sections 1 to 3 are essentially background material.\
    \ Section\n   4 presents an overview of the fundamental requirements for Traffic\n\
    \   Engineering over MPLS. Section 5 describes the desirable attributes\n   and\
    \ characteristics of traffic trunks which are pertinent to Traffic\n   Engineering.\
    \ Section 6 presents a set of attributes which can be\n   associated with resources\
    \ to constrain the routability of traffic\n   trunks and LSPs through them. Section\
    \ 7 advocates the introduction of\n   a \"constraint-based routing\" framework\
    \ in MPLS domains.  Finally,\n   Section 8 contains concluding remarks.\n"
- title: 2.0 Traffic Engineering
  contents:
  - "2.0 Traffic Engineering\n   This section describes the basic functions of Traffic\
    \ Engineering in\n   an Autonomous System in the contemporary Internet. The limitations\
    \ of\n   current IGPs with respect to traffic and resource control are\n   highlighted.\
    \ This section serves as motivation for the requirements\n   on MPLS.\n   Traffic\
    \ Engineering (TE) is concerned with performance optimization\n   of operational\
    \ networks. In general, it encompasses the application\n   of technology and scientific\
    \ principles to the measurement, modeling,\n   characterization, and control of\
    \ Internet traffic, and the\n   application of such knowledge and techniques to\
    \ achieve specific\n   performance objectives. The aspects of Traffic Engineering\
    \ that are\n   of interest concerning MPLS are measurement and control.\n   A\
    \ major goal of Internet Traffic Engineering is to facilitate\n   efficient and\
    \ reliable network operations while simultaneously\n   optimizing network resource\
    \ utilization and traffic performance.\n   Traffic Engineering has become an indispensable\
    \ function in many\n   large Autonomous Systems because of the high cost of network\
    \ assets\n   and the commercial and competitive nature of the Internet. These\n\
    \   factors emphasize the need for maximal operational efficiency.\n"
- title: 2.1 Traffic Engineering Performance Objectives
  contents:
  - "2.1 Traffic Engineering Performance Objectives\n   The key performance objectives\
    \ associated with traffic engineering\n   can be classified as being either:\n\
    \    1. traffic oriented or\n    2. resource oriented.\n   Traffic oriented performance\
    \ objectives include the aspects that\n   enhance the QoS of traffic streams.\
    \ In a single class, best effort\n   Internet service model, the key traffic oriented\
    \ performance\n   objectives include: minimization of packet loss, minimization\
    \ of\n   delay, maximization of throughput, and enforcement of service level\n\
    \   agreements. Under a single class best effort Internet service model,\n   minimization\
    \ of packet loss is one of the most important traffic\n   oriented performance\
    \ objectives. Statistically bounded traffic\n   oriented performance objectives\
    \ (such as peak to peak packet delay\n   variation, loss ratio, and maximum packet\
    \ transfer delay) might\n   become useful in the forthcoming differentiated services\
    \ Internet.\n   Resource oriented performance objectives include the aspects\n\
    \   pertaining to the optimization of resource utilization. Efficient\n   management\
    \ of network resources is the vehicle for the attainment of\n   resource oriented\
    \ performance objectives. In particular, it is\n   generally desirable to ensure\
    \ that subsets of network resources do\n   not become over utilized and congested\
    \ while other subsets along\n   alternate feasible paths remain underutilized.\
    \ Bandwidth is a crucial\n   resource in contemporary networks.  Therefore, a\
    \ central function of\n   Traffic Engineering is to efficiently manage bandwidth\
    \ resources.\n   Minimizing congestion is a primary traffic and resource oriented\n\
    \   performance objective.  The interest here is on congestion problems\n   that\
    \ are prolonged rather than on transient congestion resulting from\n   instantaneous\
    \ bursts.  Congestion typically manifests under two\n   scenarios:\n   1. When\
    \ network resources are insufficient or inadequate to\n      accommodate offered\
    \ load.\n   2. When traffic streams are inefficiently mapped onto available\n\
    \      resources; causing subsets of network resources to become\n      over-utilized\
    \ while others remain underutilized.\n   The first type of congestion problem\
    \ can be addressed by either: (i)\n   expansion of capacity, or (ii) application\
    \ of classical congestion\n   control techniques, or (iii) both. Classical congestion\
    \ control\n   techniques attempt to regulate the demand so that the traffic fits\n\
    \   onto available resources. Classical techniques for congestion control\n  \
    \ include: rate limiting, window flow control, router queue management,\n   schedule-based\
    \ control, and others; (see [8] and the references\n   therein).\n   The second\
    \ type of congestion problems, namely those resulting from\n   inefficient resource\
    \ allocation, can usually be addressed through\n   Traffic Engineering.\n   In\
    \ general, congestion resulting from inefficient resource allocation\n   can be\
    \ reduced by adopting load balancing policies. The objective of\n   such strategies\
    \ is to minimize maximum congestion or alternatively to\n   minimize maximum resource\
    \ utilization, through efficient resource\n   allocation. When congestion is minimized\
    \ through efficient resource\n   allocation, packet loss decreases, transit delay\
    \ decreases, and\n   aggregate throughput increases. Thereby, the perception of\
    \ network\n   service quality experienced by end users becomes significantly\n\
    \   enhanced.\n   Clearly, load balancing is an important network performance\n\
    \   optimization policy. Nevertheless, the capabilities provided for\n   Traffic\
    \ Engineering should be flexible enough so that network\n   administrators can\
    \ implement other policies which take into account\n   the prevailing cost structure\
    \ and the utility or revenue model.\n"
- title: 2.2 Traffic and Resource Control
  contents:
  - "2.2 Traffic and Resource Control\n   Performance optimization of operational\
    \ networks is fundamentally a\n   control problem. In the traffic engineering\
    \ process model, the\n   Traffic Engineer, or a suitable automaton, acts as the\
    \ controller in\n   an adaptive feedback control system. This system includes\
    \ a set of\n   interconnected network elements, a network performance monitoring\n\
    \   system, and a set of network configuration management tools. The\n   Traffic\
    \ Engineer formulates a control policy, observes the state of\n   the network\
    \ through the monitoring system, characterizes the traffic,\n   and applies control\
    \ actions to drive the network to a desired state,\n   in accordance with the\
    \ control policy.  This can be accomplished\n   reactively by taking action in\
    \ response to the current state of the\n   network, or pro-actively by using forecasting\
    \ techniques to\n   anticipate future trends and applying action to obviate the\
    \ predicted\n   undesirable future states.\n   Ideally, control actions should\
    \ involve:\n   1. Modification of traffic management parameters,\n   2. Modification\
    \ of parameters associated with routing, and\n   3. Modification of attributes\
    \ and constraints associated with\n      resources.\n   The level of manual intervention\
    \ involved in the traffic engineering\n   process should be minimized whenever\
    \ possible.  This can be\n   accomplished by automating aspects of the control\
    \ actions described\n   above, in a distributed and scalable fashion.\n"
- title: 2.3 Limitations of Current IGP Control Mechanisms
  contents:
  - "2.3 Limitations of Current IGP Control Mechanisms\n   This subsection reviews\
    \ some of the well known limitations of current\n   IGPs with regard to Traffic\
    \ Engineering.\n   The control capabilities offered by existing Internet interior\n\
    \   gateway protocols are not adequate for Traffic Engineering.  This\n   makes\
    \ it difficult to actualize effective policies to address network\n   performance\
    \ problems.  Indeed, IGPs based on shortest path algorithms\n   contribute significantly\
    \ to congestion problems in Autonomous Systems\n   within the Internet. SPF algorithms\
    \ generally optimize based on a\n   simple additive metric. These protocols are\
    \ topology driven, so\n   bandwidth availability and traffic characteristics are\
    \ not factors\n   considered in routing decisions. Consequently, congestion frequently\n\
    \   occurs when:\n   1. the shortest paths of multiple traffic streams converge\
    \ on\n      specific links or router interfaces, or\n   2. a given traffic stream\
    \ is routed through a link or router\n      interface which does not have enough\
    \ bandwidth to accommodate\n      it.\n   These scenarios manifest even when feasible\
    \ alternate paths with\n   excess capacity exist. It is this aspect of congestion\
    \ problems (-- a\n   symptom of suboptimal resource allocation) that Traffic Engineering\n\
    \   aims to vigorously obviate.  Equal cost path load sharing can be used\n  \
    \ to address the second cause for congestion listed above with some\n   degree\
    \ of success, however it is generally not helpful in alleviating\n   congestion\
    \ due to the first cause listed above and particularly not\n   in large networks\
    \ with dense topology.\n   A popular approach to circumvent the inadequacies of\
    \ current IGPs is\n   through the use of an overlay model, such as IP over ATM\
    \ or IP over\n   frame relay. The overlay model extends the design space by enabling\n\
    \   arbitrary virtual topologies to be provisioned atop the network's\n   physical\
    \ topology. The virtual topology is constructed from virtual\n   circuits which\
    \ appear as physical links to the IGP routing protocols.\n   The overlay model\
    \ provides additional important services to support\n   traffic and resource control,\
    \ including: (1) constraint-based routing\n   at the VC level, (2) support for\
    \ administratively configurable\n   explicit VC paths, (3) path compression, (4)\
    \ call admission control\n   functions, (5) traffic shaping and traffic policing\
    \ functions, and\n   (6) survivability of VCs. These capabilities enable the actualization\n\
    \   of a variety of Traffic Engineering policies. For example, virtual\n   circuits\
    \ can easily be rerouted to move traffic from over-utilized\n   resources onto\
    \ relatively underutilized ones.\n   For Traffic Engineering in large dense networks,\
    \ it is desirable to\n   equip MPLS with a level of functionality at least commensurate\
    \ with\n   current overlay models. Fortunately, this can be done in a fairly\n\
    \   straight forward manner.\n"
- title: 3.0  MPLS and Traffic Engineering
  contents:
  - "3.0  MPLS and Traffic Engineering\n   This section provides an overview of the\
    \ applicability of MPLS to\n   Traffic Engineering. Subsequent sections discuss\
    \ the set of\n   capabilities required to meet the Traffic Engineering requirements.\n\
    \   MPLS is strategically significant for Traffic Engineering because it\n   can\
    \ potentially provide most of the functionality available from the\n   overlay\
    \ model, in an integrated manner, and at a lower cost than the\n   currently competing\
    \ alternatives. Equally importantly, MPLS offers\n   the possibility to automate\
    \ aspects of the Traffic Engineering\n   function. This last consideration requires\
    \ further investigation and\n   is beyond the scope of this manuscript.\n   A\
    \ note on terminology: The concept of MPLS traffic trunks is used\n   extensively\
    \ in the remainder of this document. According to Li and\n   Rekhter [3], a traffic\
    \ trunk is an aggregation of traffic flows of\n   the same class which are placed\
    \ inside a Label Switched Path.\n   Essentially, a traffic trunk is an abstract\
    \ representation of traffic\n   to which specific characteristics can be associated.\
    \ It is useful to\n   view traffic trunks as objects that can be routed; that\
    \ is, the path\n   through which a traffic trunk traverses can be changed. In\
    \ this\n   respect, traffic trunks are similar to virtual circuits in ATM and\n\
    \   Frame Relay networks.  It is important, however, to emphasize that\n   there\
    \ is a fundamental distinction between a traffic trunk and the\n   path, and indeed\
    \ the LSP, through which it traverses. An LSP is a\n   specification of the label\
    \ switched path through which the traffic\n   traverses. In practice, the terms\
    \ LSP and traffic trunk are often\n   used synonymously. Additional characteristics\
    \ of traffic trunks as\n   used in this manuscript are summarized in section 5.0.\n\
    \   The attractiveness of  MPLS for Traffic Engineering can be attributed\n  \
    \ to the following factors: (1) explicit label switched paths which are\n   not\
    \ constrained by the destination based forwarding paradigm can be\n   easily created\
    \ through manual administrative action or through\n   automated action by the\
    \ underlying protocols, (2) LSPs can\n   potentially be efficiently maintained,\
    \ (3) traffic trunks can be\n   instantiated and mapped onto LSPs, (4) a set of\
    \ attributes can be\n   associated with traffic trunks which modulate their behavioral\n\
    \   characteristics, (5) a set of attributes can be associated with\n   resources\
    \ which constrain the placement of LSPs and traffic trunks\n   across them, (6)\
    \ MPLS allows for both traffic aggregation and\n   disaggregation whereas classical\
    \ destination only based IP forwarding\n   permits only aggregation, (7) it is\
    \ relatively easy to integrate a\n   \"constraint-based routing\" framework with\
    \ MPLS, (8) a good\n   implementation of MPLS can offer significantly lower overhead\
    \ than\n   competing alternatives for Traffic Engineering.\n   Additionally, through\
    \ explicit label switched paths, MPLS permits a\n   quasi circuit switching capability\
    \ to be superimposed on the current\n   Internet routing model.  Many of the existing\
    \ proposals for Traffic\n   Engineering over MPLS focus only on the potential\
    \ to create explicit\n   LSPs. Although this capability is fundamental for Traffic\n\
    \   Engineering, it is not really sufficient.  Additional augmentations\n   are\
    \ required to foster the actualization of policies leading to\n   performance\
    \ optimization of large operational networks. Some of the\n   necessary augmentations\
    \ are described in this manuscript.\n"
- title: 3.1 Induced MPLS Graph
  contents:
  - "3.1 Induced MPLS Graph\n   This subsection introduces the concept of an \"induced\
    \ MPLS graph\"\n   which is central to Traffic Engineering in MPLS domains. An\
    \ induced\n   MPLS graph is analogous to a virtual topology in an overlay model.\
    \ It\n   is logically mapped onto the physical network through the selection\n\
    \   of LSPs for traffic trunks.\n   An induced MPLS graph consists of a set of\
    \ LSRs which comprise the\n   nodes of the graph and a set of LSPs which provide\
    \ logical point to\n   point connectivity between the LSRs, and hence serve as\
    \ the links of\n   the induced graph. it may be possible to construct hierarchical\n\
    \   induced MPLS graphs based on the concept of label stacks (see [1]).\n   Induced\
    \ MPLS graphs are important because the basic problem of\n   bandwidth management\
    \ in an MPLS domain is the issue of how to\n   efficiently map an induced MPLS\
    \ graph onto the physical network\n   topology.  The induced MPLS graph abstraction\
    \ is formalized below.\n   Let G = (V, E, c) be a capacitated graph depicting\
    \ the physical\n   topology of the network. Here, V is the set of nodes in the\
    \ network\n   and E is the set of links; that is, for v and w in V, the object\n\
    \   (v,w) is in E if v and w are directly connected under G. The\n   parameter\
    \ \"c\" is a set of capacity and other constraints associated\n   with E and V.\
    \ We will refer to G as the \"base\" network topology.\n   Let H = (U, F, d) be\
    \  the induced MPLS graph, where U is a subset of\n   V representing the set of\
    \ LSRs in the network, or more precisely the\n   set of LSRs that are the endpoints\
    \ of at least one LSP. Here, F is\n   the set of LSPs, so that for x and y in\
    \ U, the object (x, y) is in F\n   if there is an LSP with x and y as endpoints.\
    \ The parameter \"d\" is\n   the set of demands and restrictions associated with\
    \ F. Evidently, H\n   is a directed graph. It can be seen that H depends on the\n\
    \   transitivity characteristics of G.\n"
- title: 3.2 The Fundamental Problem of Traffic Engineering Over MPLS
  contents:
  - "3.2 The Fundamental Problem of Traffic Engineering Over MPLS\n   There are basically\
    \ three fundamental problems that relate to Traffic\n   Engineering over MPLS.\n\
    \   - The first problem concerns how to map packets onto forwarding\n     equivalence\
    \ classes.\n   - The second problem concerns how to map forwarding equivalence\n\
    \     classes onto traffic trunks.\n   - The third problem concerns how to map\
    \ traffic trunks onto the\n     physical network topology through label switched\
    \ paths.\n   This document is not focusing on the first two problems listed.\n\
    \   (even-though they are quite important). Instead, the remainder of\n   this\
    \ manuscript will focus on the capabilities that permit the third\n   mapping\
    \ function to be performed in a manner resulting in efficient\n   and reliable\
    \ network operations. This is really the problem of\n   mapping an induced MPLS\
    \ graph (H) onto the \"base\" network topology\n   (G).\n"
- title: 4.0 Augmented  Capabilities for Traffic Engineering Over MPLS
  contents:
  - "4.0 Augmented  Capabilities for Traffic Engineering Over MPLS\n   The previous\
    \ sections reviewed the basic functions of Traffic\n   Engineering in the contemporary\
    \ Internet. The applicability of MPLS\n   to that activity was also discussed.\
    \ The remaining sections of this\n   manuscript describe the functional capabilities\
    \ required to fully\n   support Traffic Engineering over MPLS in large networks.\n\
    \   The proposed capabilities consist of:\n   1. A set of attributes associated\
    \ with traffic trunks which\n      collectively specify their behavioral characteristics.\n\
    \   2. A set of attributes associated with resources which constrain\n      the\
    \ placement of traffic trunks through them. These can also be\n      viewed as\
    \ topology attribute constraints.\n   3. A \"constraint-based routing\" framework\
    \ which is used to select\n      paths for traffic trunks subject to constraints\
    \ imposed by items\n      1) and 2) above. The constraint-based routing framework\
    \ does not\n      have to be part of MPLS. However, the two need to be tightly\n\
    \      integrated together.\n   The attributes associated with traffic trunks\
    \ and resources, as well\n   as parameters associated with routing, collectively\
    \ represent the\n   control variables which can be modified either through administrative\n\
    \   action or through automated agents to drive the network to a desired\n   state.\n\
    \   In an operational network, it is highly desirable that these\n   attributes\
    \ can be dynamically modified online by an operator without\n   adversely disrupting\
    \ network operations.\n"
- title: 5.0 Traffic Trunk Attributes and Characteristics
  contents:
  - "5.0 Traffic Trunk Attributes and Characteristics\n   This section describes the\
    \ desirable attributes which can be\n   associated with traffic trunks to influence\
    \ their behavioral\n   characteristics.\n   First, the basic properties of traffic\
    \ trunks (as used in this\n   manuscript) are summarized below:\n    - A traffic\
    \ trunk is an *aggregate* of traffic flows belonging\n      to the same class.\
    \ In some contexts, it may be desirable to\n      relax this definition and allow\
    \ traffic trunks to include\n      multi-class traffic aggregates.\n    - In a\
    \ single class service model, such as the current Internet,\n      a traffic trunk\
    \ could encapsulate all of the traffic between an\n      ingress LSR and an egress\
    \ LSR, or subsets thereof.\n    - Traffic trunks are routable objects (similar\
    \ to ATM VCs).\n    - A traffic trunk is distinct from the LSP through which it\n\
    \      traverses. In operational contexts, a traffic trunk can be\n      moved\
    \ from one path onto another.\n    - A traffic trunk is unidirectional.\n   In\
    \ practice, a traffic trunk can be characterized by its ingress and\n   egress\
    \ LSRs, the forwarding equivalence class which is mapped onto\n   it, and a set\
    \ of attributes which determine its behavioral\n   characteristics.\n   Two basic\
    \ issues are of particular significance: (1) parameterization\n   of traffic trunks\
    \ and (2) path placement and maintenance rules for\n   traffic trunks.\n"
- title: 5.1 Bidirectional Traffic Trunks
  contents:
  - "5.1 Bidirectional Traffic Trunks\n   Although traffic trunks are conceptually\
    \ unidirectional, in many\n   practical contexts, it is useful to  simultaneously\
    \ instantiate two\n   traffic trunks with the same endpoints, but which carry\
    \ packets in\n   opposite directions. The two traffic trunks are logically coupled\n\
    \   together.  One trunk, called the forward trunk, carries traffic from\n   an\
    \ originating node to a destination node. The other trunk, called\n   the backward\
    \ trunk, carries traffic from the destination node to the\n   originating node.\
    \ We refer to the amalgamation of two such traffic\n   trunks as one bidirectional\
    \ traffic trunk (BTT) if the following two\n   conditions hold:\n   - Both traffic\
    \ trunks are instantiated through an atomic action at\n     one LSR, called the\
    \ originator node, or through an atomic action\n     at a network management station.\n\
    \   - Neither of the composite traffic trunks can exist without the\n     other.\
    \ That is, both are instantiated and destroyed together.\n   The topological properties\
    \ of BTTs should also be considered. A BTT\n   can be topologically symmetric\
    \ or topologically asymmetric.  A BTT is\n   said to be \"topologically symmetric\"\
    \ if its constituent traffic\n   trunks are routed through the same physical path,\
    \ even though they\n   operate in opposite directions. If, however, the component\
    \ traffic\n   trunks are routed through different physical paths, then the BTT\
    \ is\n   said to be \"topologically asymmetric.\"\n   It should be noted that\
    \ bidirectional traffic trunks are merely an\n   administrative convenience. In\
    \ practice, most traffic engineering\n   functions can be implemented using only\
    \ unidirectional traffic\n   trunks.\n"
- title: 5.2 Basic Operations on Traffic Trunks
  contents:
  - "5.2 Basic Operations on Traffic Trunks\n   The basic operations on traffic trunks\
    \ significant to Traffic\n   Engineering purposes are summarized below.\n   -\
    \ Establish: To create an instance of a traffic trunk.\n   - Activate: To cause\
    \ a traffic trunk to start passing traffic.\n     The establishment and activation\
    \ of a traffic trunk are\n     logically separate events. They may, however, be\
    \ implemented\n     or invoked as one atomic action.\n   - Deactivate: To cause\
    \ a traffic trunk to stop passing traffic.\n   - Modify Attributes: To cause the\
    \ attributes of a traffic trunk\n     to be modified.\n   - Reroute: To cause\
    \ a traffic trunk to change its route. This\n     can be done through administrative\
    \ action or automatically\n     by the underlying protocols.\n   - Destroy: To\
    \ remove an instance of a traffic trunk from the\n     network and reclaim all\
    \ resources allocated to it. Such\n     resources include label space and possibly\
    \ available bandwidth.\n   The above are considered the basic operations on traffic\
    \ trunks.\n   Additional operations are also possible such as policing and traffic\n\
    \   shaping.\n"
- title: 5.3 Accounting and Performance Monitoring
  contents:
  - "5.3 Accounting and Performance Monitoring\n   Accounting and performance monitoring\
    \ capabilities are very important\n   to the billing and traffic characterization\
    \ functions.  Performance\n   statistics obtained from accounting and performance\
    \ monitoring\n   systems can be used for traffic characterization, performance\n\
    \   optimization, and capacity planning within the Traffic Engineering\n   realm..\n\
    \   The capability to obtain statistics at the traffic trunk level is so\n   important\
    \ that it should be considered an essential requirement for\n   Traffic Engineering\
    \ over MPLS.\n"
- title: 5.4 Basic Traffic Engineering Attributes of Traffic Trunks
  contents:
  - "5.4 Basic Traffic Engineering Attributes of Traffic Trunks\n   An attribute of\
    \ a traffic trunk is a parameter assigned to it which\n   influences its behavioral\
    \ characteristics.\n   Attributes can be explicitly assigned to traffic trunks\
    \ through\n   administration action or they can be implicitly assigned by the\n\
    \   underlying protocols when packets are classified and mapped into\n   equivalence\
    \ classes at the ingress to an MPLS domain. Regardless of\n   how the attributes\
    \ were originally assigned, for Traffic Engineering\n   purposes, it should be\
    \ possible to administratively modify such\n   attributes.\n   The basic attributes\
    \ of traffic trunks  particularly significant for\n   Traffic Engineering are\
    \ itemized below.\n   - Traffic parameter attributes\n   - Generic Path selection\
    \ and maintenance attributes\n   - Priority attribute\n   - Preemption attribute\n\
    \   - Resilience attribute\n   - Policing  attribute\n   The combination of traffic\
    \ parameters and policing attributes is\n   analogous to usage parameter control\
    \ in ATM networks. Most of the\n   attributes listed above have analogs in well\
    \ established\n   technologies.  Consequently, it should be relatively straight\
    \ forward\n   to map the traffic trunk attributes onto many existing switching\
    \ and\n   routing architectures.\n   Priority and preemption can be regarded as\
    \ relational attributes\n   because they express certain binary relations between\
    \ traffic trunks.\n   Conceptually, these binary relations determine the manner\
    \ in which\n   traffic trunks interact with each other as they compete for network\n\
    \   resources during path establishment and path maintenance.\n"
- title: 5.5 Traffic parameter attributes
  contents:
  - "5.5 Traffic parameter attributes\n   Traffic parameters can be used to capture\
    \ the characteristics of the\n   traffic streams (or more precisely the forwarding\
    \ equivalence class)\n   to be transported through the traffic trunk. Such characteristics\
    \ may\n   include peak rates, average rates, permissible burst size, etc.  From\n\
    \   a traffic engineering perspective, the traffic parameters are\n   significant\
    \ because they indicate the resource requirements of the\n   traffic trunk. This\
    \ is useful for resource allocation and congestion\n   avoidance through anticipatory\
    \ policies.\n   For the purpose of bandwidth allocation, a single canonical value\
    \ of\n   bandwidth requirements can be computed from a traffic trunk's traffic\n\
    \   parameters.  Techniques for performing these computations are well\n   known.\
    \ One example of this is the theory of effective bandwidth.\n"
- title: 5.6 Generic Path Selection and Management Attributes
  contents:
  - "5.6 Generic Path Selection and Management Attributes\n   Generic path selection\
    \ and management attributes define the rules for\n   selecting the route taken\
    \ by a traffic trunk as well as the rules for\n   maintenance of paths that are\
    \ already established.\n   Paths can be computed automatically by the underlying\
    \ routing\n   protocols or they can be defined administratively by a network\n\
    \   operator. If there are no resource requirements or restrictions\n   associated\
    \ with a traffic trunk, then a topology driven protocol can\n   be used to select\
    \ its path. However, if resource requirements or\n   policy restrictions exist,\
    \ then a constraint-based routing scheme\n   should be used for path selection.\n\
    \   In Section 7, a constraint-based routing framework which can\n   automatically\
    \ compute paths subject to a set of constraints is\n   described.  Issues pertaining\
    \ to explicit paths instantiated through\n   administrative action are discussed\
    \ in Section 5.6.1 below.\n   Path management concerns all aspects pertaining\
    \ to the maintenance of\n   paths traversed by traffic trunks.  In some operational\
    \ contexts, it\n   is desirable that an MPLS implementation can dynamically reconfigure\n\
    \   itself, to adapt to some notion of change in \"system state.\"\n   Adaptivity\
    \ and resilience are aspects of dynamic path management.\n   To guide the path\
    \ selection and management process, a set of\n   attributes are required. The\
    \ basic attributes and behavioral\n   characteristics associated with traffic\
    \ trunk path selection and\n   management are described in the remainder of this\
    \ sub-section.\n"
- title: 5.6.1 Administratively Specified Explicit Paths
  contents:
  - "5.6.1 Administratively Specified Explicit Paths\n   An administratively specified\
    \ explicit path for a traffic trunk is\n   one which is configured through operator\
    \ action. An administratively\n   specified path can be completely specified or\
    \ partially specified. A\n   path is completely specified if all of the required\
    \ hops between the\n   endpoints are indicated. A path is partially specified\
    \ if only a\n   subset of intermediate hops are indicated. In this case, the\n\
    \   underlying protocols are required to complete the path. Due to\n   operator\
    \ errors, an administratively specified path can be\n   inconsistent or illogical.\
    \ The underlying protocols should be able to\n   detect such inconsistencies and\
    \ provide appropriate feedback.\n   A \"path preference rule\" attribute should\
    \ be associated with\n   administratively specified explicit paths.  A path preference\
    \ rule\n   attribute is a binary variable which  indicates whether the\n   administratively\
    \ configured explicit path is \"mandatory\" or \"non-\n   mandatory.\"\n   If\
    \ an administratively specified explicit path is selected with a\n   \"mandatory\
    \ attribute, then that path (and only that path) must be\n   used. If a mandatory\
    \ path is topological infeasible (e.g. the two\n   endpoints are topologically\
    \ partitioned), or if the path cannot be\n   instantiated because the available\
    \ resources are inadequate, then the\n   path setup process fails. In other words,\
    \ if a path is specified as\n   mandatory, then an alternate path cannot be used\
    \ regardless of\n   prevailing circumstance.  A mandatory path which is successfully\n\
    \   instantiated is also implicitly pinned. Once the path is instantiated\n  \
    \ it cannot be changed except through deletion and instantiation of a\n   new\
    \ path.\n   However, if an administratively specified explicit path is selected\n\
    \   with a \"non-mandatory\" preference rule attribute value, then the path\n\
    \   should be used if feasible.  Otherwise, an alternate path can be\n   chosen\
    \ instead by the underlying protocols.\n"
- title: 5.6.2 Hierarchy of Preference Rules For Multi-Paths
  contents:
  - "5.6.2 Hierarchy of Preference Rules For Multi-Paths\n   In some practical contexts,\
    \ it can be useful to have the ability to\n   administratively specify a set of\
    \ candidate explicit paths for a\n   given traffic trunk and define a hierarchy\
    \ of preference relations on\n   the paths. During path establishment, the preference\
    \ rules are\n   applied to select a suitable path from the candidate list. Also,\n\
    \   under failure scenarios the preference rules are applied to select an\n  \
    \ alternate path from the candidate list.\n"
- title: 5.6.3 Resource Class Affinity Attributes
  contents:
  - "5.6.3 Resource Class Affinity Attributes\n   Resource class affinity attributes\
    \ associated with a traffic trunk\n   can be used to specify the class of resources\
    \ (see Section 6) which\n   are to be explicitly included or excluded from the\
    \ path of the\n   traffic trunk. These are policy attributes which can be used\
    \ to\n   impose additional constraints on the path traversed by a given\n   traffic\
    \ trunk.  Resource class affinity attributes for a traffic can\n   be specified\
    \ as a sequence of tuples:\n    <resource-class, affinity>; <resource-class, affinity>;\
    \ ..\n   The resource-class parameter identifies a resource class for which an\n\
    \   affinity relationship is defined with respect to the traffic trunk.\n   The\
    \ affinity parameter indicates the affinity relationship; that is,\n   whether\
    \ members of the resource class are to be included or excluded\n   from the path\
    \ of the traffic trunk. Specifically, the affinity\n   parameter may be a binary\
    \ variable which takes one of the following\n   values: (1) explicit inclusion,\
    \ and (2) explicit exclusion.\n   If the affinity attribute is a binary variable,\
    \ it may be possible to\n   use Boolean expressions to specify the resource class\
    \ affinities\n   associated with a given traffic trunk.\n   If no resource class\
    \ affinity attributes are specified, then a \"don't\n   care\" affinity relationship\
    \ is assumed to hold between the traffic\n   trunk and all resources. That is,\
    \ there is no requirement to\n   explicitly include or exclude any resources from\
    \ the traffic trunk's\n   path. This should be the default in practice.\n   Resource\
    \ class affinity attributes are very useful and powerful\n   constructs because\
    \ they can be used to implement a variety of\n   policies. For example, they can\
    \ be used to contain certain traffic\n   trunks within specific topological regions\
    \ of the network.\n   A \"constraint-based routing\" framework (see section 7.0)\
    \ can be used\n   to compute an explicit path for a traffic trunk subject to resource\n\
    \   class affinity constraints in the following manner:\n   1. For explicit inclusion,\
    \ prune all resources not belonging\n      to the specified classes prior to performing\
    \ path computation.\n   2. For explicit exclusion, prune all resources  belonging\
    \ to the\n      specified classes before performing path placement computations.\n"
- title: 5.6.4 Adaptivity Attribute
  contents:
  - "5.6.4 Adaptivity Attribute\n   Network characteristics and state change over\
    \ time. For example, new\n   resources become available, failed resources become\
    \ reactivated, and\n   allocated resources become deallocated. In general, sometimes\
    \ more\n   efficient paths become available.  Therefore, from a Traffic\n   Engineering\
    \ perspective, it is necessary to have administrative\n   control parameters that\
    \ can be used to specify how traffic trunks\n   respond to this dynamism. In some\
    \ scenarios, it might be desirable to\n   dynamically change the paths of certain\
    \ traffic trunks in response to\n   changes in network state. This process is\
    \ called re-optimization.  In\n   other scenarios, re-optimization might be very\
    \ undesirable.\n   An Adaptivity attribute is a part of the path maintenance parameters\n\
    \   associated with traffic trunks. The adaptivity attribute associated\n   with\
    \ a traffic trunk indicates whether the trunk is subject to re-\n   optimization.\
    \  That is, an adaptivity attribute is a binary variable\n   which takes one of\
    \ the following values: (1) permit re-optimization\n   and (2) disable re-optimization.\n\
    \   If re-optimization is enabled, then a traffic trunk can be rerouted\n   through\
    \ different paths by the underlying protocols in response to\n   changes in network\
    \ state (primarily changes in resource\n   availability). Conversely, if re-optimization\
    \ is disabled, then the\n   traffic trunk is \"pinned\" to its established path\
    \ and cannot be\n   rerouted in response to changes in network state.\n   Stability\
    \ is a major concern when re-optimization is permitted. To\n   promote stability,\
    \ an MPLS implementation should not be too reactive\n   to the evolutionary dynamics\
    \ of the network. At the same time, it\n   must adapt fast enough so that optimal\
    \ use can be made of network\n   assets. This implies that the frequency of re-optimization\
    \ should be\n   administratively configurable to allow for tuning.\n   It is to\
    \ be noted that re-optimization is distinct from resilience. A\n   different attribute\
    \ is used to specify the resilience characteristics\n   of a traffic trunk (see\
    \ section 5.9).  In practice, it would seem\n   reasonable to expect traffic trunks\
    \ subject to re-optimization to be\n   implicitly resilient to failures along\
    \ their paths. However, a\n   traffic trunk which is not subject to re-optimization\
    \ and whose path\n   is not administratively specified with a \"mandatory\" attribute\
    \ can\n   also be required to be resilient to link and node failures along its\n\
    \   established path\n   Formally, it can be stated that adaptivity to state evolution\
    \ through\n   re-optimization implies resilience to failures, whereas resilience\
    \ to\n   failures does not imply general adaptivity through re-optimization to\n\
    \   state changes.\n"
- title: 5.6.5 Load Distribution Across Parallel Traffic Trunks
  contents:
  - "5.6.5 Load Distribution Across Parallel Traffic Trunks\n   Load distribution\
    \ across multiple parallel traffic trunks between two\n   nodes is an important\
    \ consideration.  In many practical contexts, the\n   aggregate traffic between\
    \ two nodes may be such that no single link\n   (hence no single path) can carry\
    \ the load. However, the aggregate\n   flow might be less than the maximum permissible\
    \ flow across a \"min-\n   cut\" that partitions the two nodes. In this case,\
    \ the only feasible\n   solution is to appropriately divide the aggregate traffic\
    \ into sub-\n   streams and route the sub-streams through multiple paths between\
    \ the\n   two nodes.\n   In an MPLS domain, this problem can be addressed by instantiating\n\
    \   multiple traffic trunks between the two nodes, such that each traffic\n  \
    \ trunk carries a proportion of the aggregate traffic. Therefore, a\n   flexible\
    \ means of load assignment to multiple parallel traffic trunks\n   carrying traffic\
    \ between a pair of nodes is required.\n   Specifically, from an operational perspective,\
    \ in situations where\n   parallel traffic trunks are warranted,  it would be\
    \ useful to have\n   some attribute that can be used to indicate the relative\
    \ proportion\n   of traffic to be carried by each traffic trunk. The underlying\n\
    \   protocols will then map the load onto the traffic trunks according to\n  \
    \ the specified proportions. It is also, generally desirable to\n   maintain packet\
    \ ordering between packets belong to the same micro-\n   flow (same source address,\
    \ destination address, and port number).\n"
- title: 5.7 Priority attribute
  contents:
  - "5.7 Priority attribute\n   The priority attribute defines the relative importance\
    \ of traffic\n   trunks.  If a constraint-based routing framework is used with\
    \ MPLS,\n   then priorities become very important because they can be used to\n\
    \   determine the order in which path selection is done for traffic\n   trunks\
    \ at connection establishment and under fault scenarios.\n   Priorities are also\
    \ important in implementations  permitting\n   preemption because they can be\
    \ used to impose a partial order on the\n   set of traffic trunks according to\
    \ which preemptive policies can be\n   actualized.\n"
- title: 5.8 Preemption attribute
  contents:
  - "5.8 Preemption attribute\n   The preemption attribute determines whether a traffic\
    \ trunk can\n   preempt another traffic trunk from a given path, and whether another\n\
    \   traffic trunk can preempt a specific traffic trunk.  Preemption is\n   useful\
    \ for both traffic oriented and resource oriented performance\n   objectives.\
    \ Preemption can used to assure that high priority traffic\n   trunks can always\
    \ be routed through relatively favorable paths within\n   a differentiated services\
    \ environment.\n   Preemption can also be used to implement various prioritized\n\
    \   restoration policies following fault events.\n   The preemption attribute\
    \ can be used to specify four preempt modes\n   for a traffic trunk: (1) preemptor\
    \ enabled, (2) non-preemptor, (3)\n   preemptable, and (4) non-preemptable. A\
    \ preemptor enabled traffic\n   trunk can preempt lower priority traffic trunks\
    \ designated as\n   preemptable. A traffic specified as non-preemptable cannot\
    \ be\n   preempted by any other trunks, regardless of relative priorities. A\n\
    \   traffic trunk designated as preemptable can be preempted by higher\n   priority\
    \ trunks which are preemptor enabled.\n   It is trivial to see that some of the\
    \ preempt modes are mutually\n   exclusive. Using the numbering scheme depicted\
    \ above, the feasible\n   preempt mode combinations for a given traffic trunk\
    \ are as follows:\n   (1, 3), (1, 4), (2, 3), and (2, 4). The (2, 4) combination\
    \ should be\n   the default.\n   A traffic trunk, say \"A\", can preempt another\
    \ traffic trunk, say \"B\",\n   only if *all* of the following five conditions\
    \ hold: (i) \"A\" has a\n   relatively higher priority than \"B\", (ii) \"A\"\
    \ contends for a resource\n   utilized by \"B\", (iii) the resource cannot concurrently\
    \ accommodate\n   \"A\" and \"B\" based on certain decision criteria, (iv) \"\
    A\" is preemptor\n   enabled, and (v) \"B\" is preemptable.\n   Preemption is\
    \ not considered a mandatory attribute under the current\n   best effort Internet\
    \ service model although it is useful. However, in\n   a differentiated services\
    \ scenario, the need for preemption becomes\n   more compelling. Moreover, in\
    \ the emerging optical internetworking\n   architectures, where some protection\
    \ and restoration functions may be\n   migrated from the optical layer to data\
    \ network elements (such as\n   gigabit and terabit label switching routers) to\
    \ reduce costs,\n   preemptive strategies can be used to reduce the restoration\
    \ time for\n   high priority traffic trunks under fault conditions.\n"
- title: 5.9 Resilience Attribute
  contents:
  - "5.9 Resilience Attribute\n   The resilience attribute determines the behavior\
    \ of a traffic trunk\n   under fault conditions. That is, when a fault occurs\
    \ along the path\n   through which the traffic trunk traverses. The following\
    \ basic\n   problems need to be addressed under such circumstances: (1) fault\n\
    \   detection, (2) failure notification, (3) recovery and service\n   restoration.\
    \ Obviously, an MPLS implementation will have to\n   incorporate mechanisms to\
    \ address these issues.\n   Many recovery policies can be specified for traffic\
    \ trunks whose\n   established paths are impacted by faults. The following are\
    \ examples\n   of feasible schemes:\n   1. Do not reroute the traffic trunk. For\
    \ example, a survivability\n      scheme may already be in place, provisioned\
    \ through an\n      alternate mechanism, which guarantees service continuity\n\
    \      under failure scenarios without the need to reroute traffic\n      trunks.\
    \ An example of such an alternate scheme (certainly\n      many others exist),\
    \ is a situation whereby multiple parallel\n      label switched paths are provisioned\
    \ between two nodes, and\n      function in a manner such that failure of one\
    \ LSP causes the\n      traffic trunk placed on it to be mapped onto the remaining\
    \ LSPs\n      according to some well defined policy.\n   2. Reroute through a\
    \ feasible path with enough resources. If none\n      exists, then do not reroute.\n\
    \   3. Reroute through any available path regardless of resource\n      constraints.\n\
    \   4. Many other schemes are possible including some which might be\n      combinations\
    \ of the above.\n   A \"basic\" resilience attribute indicates the recovery procedure\
    \ to be\n   applied to traffic trunks whose paths are impacted by faults.\n  \
    \ Specifically, a \"basic\" resilience attribute is a binary variable\n   which\
    \ determines whether the target traffic trunk is to be rerouted\n   when segments\
    \ of its path fail. \"Extended\" resilience attributes can\n   be used to specify\
    \ detailed actions to be taken under fault\n   scenarios.  For example, an extended\
    \ resilience attribute might\n   specify a set of alternate paths to use under\
    \ fault conditions, as\n   well as the rules that govern the relative preference\
    \ of each\n   specified path.\n   Resilience attributes mandate close interaction\
    \ between MPLS and\n   routing.\n"
- title: 5.10 Policing attribute
  contents:
  - "5.10 Policing attribute\n   The policing attribute determines the actions that\
    \ should be taken by\n   the underlying protocols when a traffic trunk becomes\
    \ non-compliant.\n   That is, when a traffic trunk exceeds its contract as specified\
    \ in\n   the traffic parameters.  Generally, policing attributes can indicate\n\
    \   whether a non-conformant traffic trunk is to be rate limited, tagged,\n  \
    \ or simply forwarded without any policing action.  If policing is\n   used, then\
    \ adaptations of established algorithms such as the ATM\n   Forum's GCRA [11]\
    \ can be used to perform this function.\n   Policing is necessary in many operational\
    \ scenarios, but is quite\n   undesirable in some others. In general, it is usually\
    \ desirable to\n   police at the ingress to a network (to enforce compliance with\n\
    \   service level agreements) and to minimize policing within the core,\n   except\
    \ when capacity constraints dictate otherwise.\n   Therefore, from a Traffic Engineering\
    \ perspective, it is necessary to\n   be able to administratively enable or disable\
    \ traffic policing for\n   each traffic trunk.\n"
- title: 6.0 Resource Attributes
  contents:
  - "6.0 Resource Attributes\n   Resource attributes are part of the topology state\
    \ parameters, which\n   are used to constrain the routing of traffic trunks through\
    \ specific\n   resources.\n"
- title: 6.1 Maximum Allocation Multiplier
  contents:
  - "6.1 Maximum Allocation Multiplier\n   The maximum allocation multiplier (MAM)\
    \ of a resource is an\n   administratively configurable attribute which determines\
    \ the\n   proportion of the resource that is available for allocation to\n   traffic\
    \ trunks.  This attribute is mostly applicable to link\n   bandwidth. However,\
    \  it can also be applied to buffer resources on\n   LSRs. The concept of MAM\
    \ is analogous to the concepts of subscription\n   and booking factors in frame\
    \ relay and ATM networks.\n   The values of the MAM can be chosen so that a resource\
    \ can be under-\n   allocated or over-allocated. A resource is said  to be under-\n\
    \   allocated if the aggregate demands of all traffic trunks (as\n   expressed\
    \ in the trunk traffic parameters) that can be allocated to\n   it are always\
    \ less than the capacity of the resource. A resource is\n   said to be over-allocated\
    \ if the aggregate demands of all traffic\n   trunks allocated to it can exceed\
    \ the capacity of the resource.\n   Under-allocation can be used to bound the\
    \ utilization of resources.\n   However,the situation under MPLS is more complex\
    \ than in circuit\n   switched schemes because under MPLS, some flows can be routed\
    \ via\n   conventional hop by hop protocols (also via explicit paths) without\n\
    \   consideration for resource constraints.\n   Over-allocation can be used to\
    \ take advantage of the statistical\n   characteristics of traffic in order to\
    \ implement more efficient\n   resource allocation policies. In particular, over-allocation\
    \ can be\n   used in situations where the peak demands of traffic trunks do not\n\
    \   coincide in time.\n"
- title: 6.2 Resource Class Attribute
  contents:
  - "6.2 Resource Class Attribute\n   Resource class attributes are administratively\
    \ assigned parameters\n   which express some notion of \"class\" for resources.\
    \ Resource class\n   attributes can be viewed as \"colors\" assigned to resources\
    \ such that\n   the set of resources with the same \"color\" conceptually belong\
    \ to the\n   same class. Resource class attributes can be used to implement a\n\
    \   variety of policies. The key resources of interest here are links.\n   When\
    \ applied to links, the resource class attribute effectively\n   becomes  an aspect\
    \ of the \"link state\" parameters.\n   The concept of resource class attributes\
    \ is a powerful abstraction.\n   From a Traffic Engineering perspective, it can\
    \ be used to implement\n   many policies with regard to both traffic and resource\
    \ oriented\n   performance optimization. Specifically, resource class attributes\
    \ can\n   be used to:\n   1. Apply uniform policies to a set of resources that\
    \ do not need\n      to be in the same topological region.\n   2. Specify the\
    \ relative preference of sets of resources for\n      path placement of traffic\
    \ trunks.\n   3. Explicitly restrict the placement of traffic trunks\n      to\
    \  specific subsets of resources.\n   4. Implement generalized inclusion / exclusion\
    \ policies.\n   5. Enforce traffic locality containment policies. That is,\n \
    \     policies    that seek to contain local traffic within\n      specific topological\
    \ regions of the network.\n   Additionally, resource class attributes can be used\
    \ for\n   identification purposes.\n   In general, a resource can be assigned\
    \ more than one resource class\n   attribute. For example, all of the OC-48 links\
    \ in a given network may\n   be assigned a distinguished resource class attribute.\
    \ The subsets of\n   OC-48 links which exist with a given abstraction domain of\
    \ the\n   network may be assigned additional resource class attributes in order\n\
    \   to implement specific containment policies, or to architect the\n   network\
    \ in a certain manner.\n"
- title: 7.0 Constraint-Based Routing
  contents:
  - "7.0 Constraint-Based Routing\n   This section discusses the issues pertaining\
    \ to constraint-based\n   routing in MPLS domains. In contemporary terminology,\
    \ constraint-\n   based routing is often referred to as \"QoS Routing\" see [5,6,7,10].\n\
    \   This document uses the term \"constraint-based routing\" however,\n   because\
    \ it better captures the functionality envisioned, which\n   generally encompasses\
    \ QoS routing as a subset.\n   constraint-based routing enables a demand driven,\
    \ resource\n   reservation aware, routing paradigm to co-exist with current topology\n\
    \   driven hop by hop Internet interior gateway protocols.\n   A constraint-based\
    \ routing framework uses the following as input:\n    - The attributes associated\
    \ with traffic trunks.\n    - The attributes associated with resources.\n    -\
    \ Other topology state information.\n   Based on this information, a constraint-based\
    \ routing process on each\n   node automatically computes explicit routes for\
    \ each traffic trunk\n   originating from the node. In this case, an explicit\
    \ route for each\n   traffic trunk is a specification of a label switched path\
    \ that\n   satisfies the demand requirements expressed in the trunk's\n   attributes,\
    \ subject to constraints imposed by resource availability,\n   administrative\
    \ policy, and other topology state information.\n   A constraint-based routing\
    \ framework can greatly reduce the level of\n   manual configuration and intervention\
    \ required to actualize Traffic\n   Engineering policies.\n   In practice, the\
    \ Traffic Engineer, an operator, or even an automaton\n   will specify the endpoints\
    \ of a traffic trunk and assign a set of\n   attributes to the trunk which encapsulate\
    \ the performance\n   expectations and behavioral characteristics of the trunk.\
    \ The\n   constraint-based routing framework is then expected to find a\n   feasible\
    \ path to satisfy the expectations.  If necessary, the Traffic\n   Engineer or\
    \ a traffic engineering support system can then use\n   administratively configured\
    \ explicit routes to perform fine grained\n   optimization.\n"
- title: 7.1 Basic Features of Constraint-Based Routing
  contents:
  - "7.1 Basic Features of Constraint-Based Routing\n   A constraint-based routing\
    \ framework should at least have the\n   capability to automatically obtain a\
    \ basic feasible solution to the\n   traffic trunk path placement problem.\n \
    \  In general, the constraint-based routing problem is known to be\n   intractable\
    \ for most realistic constraints. However, in practice, a\n   very simple well\
    \ known heuristic (see e.g. [9]) can be used to find a\n   feasible path if one\
    \ exists:\n    - First prune resources that do not satisfy the requirements of\n\
    \      the traffic trunk attributes.\n    - Next, run a shortest path algorithm\
    \ on the residual graph.\n   Clearly, if a feasible path exists for a single traffic\
    \ trunk, then\n   the above simple procedure will find it. Additional rules can\
    \ be\n   specified to break ties and perform further optimizations.  In\n   general,\
    \ ties should be broken so that congestion is minimized.  When\n   multiple traffic\
    \ trunks are to be routed, however, it can be shown\n   that the above algorithm\
    \ may not always find a mapping, even when a\n   feasible mapping exists.\n"
- title: 7.2 Implementation Considerations
  contents:
  - "7.2 Implementation Considerations\n   Many commercial implementations of frame\
    \ relay and ATM switches\n   already support some notion of constraint-based routing.\
    \ For such\n   devices or for the novel MPLS centric contraptions devised therefrom,\n\
    \   it should be relatively easy to extend the current constraint-based\n   routing\
    \ implementations to accommodate the peculiar requirements of\n   MPLS.\n   For\
    \ routers that use topology driven hop by hop IGPs, constraint-\n   based routing\
    \ can be incorporated in at least one of two ways:\n   1. By extending the current\
    \ IGP protocols such as OSPF and IS-IS to\n      support constraint-based routing.\
    \ Effort is already underway to\n      provide such extensions to OSPF (see [5,7]).\n\
    \   2. By adding a constraint-based routing process to each router which\n   \
    \   can co-exist with current IGPs. This scenario is depicted\n      in Figure\
    \ 1.\n         ------------------------------------------\n        |         \
    \ Management Interface            |\n         ------------------------------------------\n\
    \            |                 |                 |\n     ------------     ------------------\
    \    --------------\n    |    MPLS    |<->| Constraint-Based |  | Conventional\
    \ |\n    |            |   | Routing Process  |  | IGP Process  |\n     ------------\
    \     ------------------    --------------\n                           |     \
    \             |\n             -----------------------    --------------\n    \
    \        | Resource  Attribute   |  | Link State   |\n            | Availability\
    \ Database |  | Database     |\n             -----------------------    --------------\n\
    \    Figure 1. Constraint-Based Routing Process on Layer 3 LSR\n   There are many\
    \ important details associated with implementing\n   constraint-based routing\
    \ on Layer 3 devices which we do not discuss\n   here. These include the following:\n\
    \   - Mechanisms for exchange of topology state information\n     (resource availability\
    \ information, link state information,\n     resource attribute information) between\
    \ constraint-based\n     routing processes.\n   - Mechanisms for maintenance of\
    \ topology state information.\n   - Interaction between constraint-based routing\
    \ processes and\n     conventional IGP processes.\n   - Mechanisms to accommodate\
    \ the adaptivity requirements of\n     traffic trunks.\n   - Mechanisms to accommodate\
    \ the resilience and survivability\n     requirements of traffic trunks.\n   In\
    \ summary, constraint-based routing assists in performance\n   optimization of\
    \ operational networks by automatically finding\n   feasible paths that satisfy\
    \ a set of constraints for traffic trunks.\n   It can drastically reduce the amount\
    \ of administrative explicit path\n   configuration and manual intervention required\
    \ to achieve Traffic\n   Engineering objectives.\n"
- title: 8.0 Conclusion
  contents:
  - "8.0 Conclusion\n   This manuscript presented a set of requirements for Traffic\n\
    \   Engineering over MPLS. Many capabilities were described aimed at\n   enhancing\
    \ the applicability of MPLS to Traffic Engineering in the\n   Internet.\n   It\
    \ should be noted that some of the issues described here can be\n   addressed\
    \ by incorporating a minimal set of building blocks into\n   MPLS, and then using\
    \ a network management superstructure to extend\n   the functionality in order\
    \ to realize the requirements. Also, the\n   constraint-based routing framework\
    \ does not have to be part of the\n   core MPLS specifications. However, MPLS\
    \ does require some interaction\n   with a constraint-based routing framework\
    \ in order to meet the\n   requirements.\n"
- title: 9.0 Security Considerations
  contents:
  - "9.0 Security Considerations\n   This document does not introduce new security\
    \ issues beyond those\n   inherent in MPLS and may use the same mechanisms proposed\
    \ for this\n   technology. It is, however, specifically important that manipulation\n\
    \   of administratively configurable parameters be executed in a secure\n   manner\
    \ by authorized entities.\n"
- title: 10.0 References
  contents:
  - "10.0 References\n   [1]  Rosen, E., Viswanathan, A. and R. Callon, \"A Proposed\n\
    \        Architecture for MPLS\", Work in Progress.\n   [2]  Callon, R., Doolan,\
    \ P., Feldman, N., Fredette, A., Swallow, G.\n        and A. Viswanathan, \"A\
    \ Framework for Multiprotocol Label\n        Switching\", Work in Progress.\n\
    \   [3]  Li, T. and Y. Rekhter, \"Provider Architecture for Differentiated\n \
    \       Services and Traffic Engineering (PASTE)\", RFC 2430, October\n      \
    \  1998.\n   [4]  Rekhter, Y., Davie, B., Katz, D., Rosen, E. and  G. Swallow,\n\
    \        \"Cisco Systems' Tag Switching Architecture - Overview\", RFC\n     \
    \   2105, February 1997.\n   [5]  Zhang, Z., Sanchez, C., Salkewicz, B. and E.\
    \ Crawley \"Quality of\n        Service Extensions to OSPF\", Work in Progress.\n\
    \   [6]  Crawley, E., Nair, F., Rajagopalan, B. and H. Sandick, \"A\n        Framework\
    \ for QoS Based Routing in the Internet\", RFC 2386,\n        August 1998.\n \
    \  [7]  Guerin, R., Kamat, S., Orda, A., Przygienda, T. and D. Williams,\n   \
    \     \"QoS Routing Mechanisms and OSPF Extensions\", RFC 2676, August\n     \
    \   1999.\n   [8]  C. Yang and A. Reddy, \"A Taxonomy for Congestion Control\n\
    \        Algorithms in Packet Switching Networks,\" IEEE Network Magazine,\n \
    \       Volume 9, Number 5, July/August 1995.\n   [9]  W. Lee, M. Hluchyi, and\
    \ P. Humblet, \"Routing Subject to Quality\n        of Service Constraints in\
    \ Integrated Communication Networks,\"\n        IEEE Network, July 1995, pp 46-55.\n\
    \   [10] ATM Forum, \"Traffic Management Specification: Version 4.0\" April\n\
    \        1996.\n"
- title: 11.0 Acknowledgments
  contents:
  - "11.0 Acknowledgments\n   The authors would like to thank Yakov Rekhter for his\
    \ review of an\n   earlier draft of this document. The authors would also like\
    \ to thank\n   Louis Mamakos and Bill Barns for their helpful suggestions, and\n\
    \   Curtis Villamizar for providing some useful feedback.\n"
- title: 12.0 Authors' Addresses
  contents:
  - "12.0 Authors' Addresses\n   Daniel O. Awduche\n   UUNET (MCI Worldcom)\n   3060\
    \ Williams Drive\n   Fairfax, VA 22031\n   Phone: +1 703-208-5277\n   EMail: awduche@uu.net\n\
    \   Joe Malcolm\n   UUNET  (MCI Worldcom)\n   3060 Williams Drive\n   Fairfax,\
    \ VA 22031\n   Phone: +1 703-206-5895\n   EMail: jmalcolm@uu.net\n   Johnson Agogbua\n\
    \   UUNET  (MCI Worldcom)\n   3060 Williams Drive\n   Fairfax, VA 22031\n   Phone:\
    \ +1 703-206-5794\n   EMail: ja@uu.net\n   Mike O'Dell\n   UUNET  (MCI Worldcom)\n\
    \   3060 Williams Drive\n   Fairfax, VA 22031\n   Phone: +1 703-206-5890\n   EMail:\
    \ mo@uu.net\n   Jim McManus\n   UUNET  (MCI Worldcom)\n   3060 Williams Drive\n\
    \   Fairfax, VA 22031\n   Phone: +1 703-206-5607\n   EMail: jmcmanus@uu.net\n"
- title: 13.0  Full Copyright Statement
  contents:
  - "13.0  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
