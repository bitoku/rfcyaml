- contents:
  - '                            IPv6 Jumbograms

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   A \"jumbogram\" is an IPv6 packet containing a payload longer than\n
    \  65,535 octets.  This document describes the IPv6 Jumbo Payload\n   option,
    which provides the means of specifying such large payload\n   lengths.  It also
    describes the changes needed to TCP and UDP to make\n   use of jumbograms.\n   Jumbograms
    are relevant only to IPv6 nodes that may be attached to\n   links with a link
    MTU greater than 65,575 octets, and need not be\n   implemented or understood
    by IPv6 nodes that do not support\n   attachment to links with such large MTUs.\n"
  title: Abstract
- contents:
  - "1. Introduction\n      jumbo (jum'bO),\n          n., pl. -bos, adj.\n          -n.\n
    \         1. a person, animal, or thing very large of its kind.\n          -adj.\n
    \         2. very large: the jumbo box of cereal.\n          [1800-10; orig. uncert.;
    popularized as the name of a large\n           elephant purchased and exhibited
    by P.T. Barnum in 1882]\n   The IPv6 header [IPv6] has a 16-bit Payload Length
    field and,\n   therefore, supports payloads up to 65,535 octets long.  This document\n
    \  specifies an IPv6 hop-by-hop option, called the Jumbo Payload option,\n   that
    carries a 32-bit length field in order to allow transmission of\n   IPv6 packets
    with payloads between 65,536 and 4,294,967,295 octets in\n   length.  Packets
    with such long payloads are referred to as\n   \"jumbograms\".\n   The Jumbo Payload
    option is relevant only for IPv6 nodes that may be\n   attached to links with
    a link MTU greater than 65,575 octets (that\n   is, 65,535 + 40, where 40 octets
    is the size of the IPv6 header).\n   The Jumbo Payload option need not be implemented
    or understood by\n   IPv6 nodes that do not support attachment to links with MTU
    greater\n   than 65,575.\n   On links with configurable MTUs, the MTU must not
    be configured to a\n   value greater than 65,575 octets if there are nodes attached
    to that\n   link that do not support the Jumbo Payload option and it can not be\n
    \  guaranteed that the Jumbo Payload option will not be sent to those\n   nodes.\n
    \  The UDP header [UDP] has a 16-bit Length field which prevents it from\n   making
    use of jumbograms, and though the TCP header [TCP] does not\n   have a Length
    field, both the TCP MSS option and the TCP Urgent field\n   are constrained to
    16 bits.  This document specifies some simple\n   enhancements to TCP and UDP
    to enable them to make use of jumbograms.\n   An implementation of TCP or UDP
    on an IPv6 node that supports the\n   Jumbo Payload option must include the enhancements
    specified here.\n   Note: The 16 bit checksum used by UDP and TCP becomes less
    accurate\n   as the length of the data being checksummed is increased.\n   Application
    designers may want to take this into consideration.\n"
  - contents:
    - "1.1 Document History\n   This document merges and updates material that was
      previously\n   published in two separate documents:\n   -  The specification
      of the Jumbo Payload option previously appeared\n      as part of the IPv6 specification
      in RFC 1883.  RFC 1883 has been\n      superseded by RFC 2460, which no longer
      includes specification of\n      the Jumbo Payload option.\n   -  The specification
      of TCP and UDP enhancements to support\n      jumbograms previously appeared
      as RFC 2147.  RFC 2147 is obsoleted\n      by this document.\n"
    title: 1.1 Document History
  title: 1. Introduction
- contents:
  - "2. Format of the Jumbo Payload Option\n   The Jumbo Payload option is carried
    in an IPv6 Hop-by-Hop Options\n   header, immediately following the IPv6 header.
    \ This option has an\n   alignment requirement of 4n + 2.  (See [IPv6, Section
    4.2] for\n   discussion of option alignment.)  The option has the following\n
    \  format:\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                  |  Option Type  |  Opt Data Len |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     Jumbo Payload Length                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Option Type           8-bit value C2 (hexadecimal).\n   Opt Data Len          8-bit
    value 4.\n   Jumbo Payload Length  32-bit unsigned integer.  Length of the IPv6\n
    \                        packet in octets, excluding the IPv6 header\n                         but
    including the Hop-by-Hop Options header\n                         and any other
    extension headers present.\n                         Must be greater than 65,535.\n"
  title: 2. Format of the Jumbo Payload Option
- contents:
  - "3. Usage of the Jumbo Payload Option\n   The Payload Length field in the IPv6
    header must be set to zero in\n   every packet that carries the Jumbo Payload
    option.\n   If a node that understands the Jumbo Payload option receives a packet\n
    \  whose IPv6 header carries a Payload Length of zero and a Next Header\n   value
    of zero (meaning that a Hop-by-Hop Options header follows), and\n   whose link-layer
    framing indicates the presence of octets beyond the\n   IPv6 header, the node
    must proceed to process the Hop-by-Hop Options\n   header in order to determine
    the actual length of the payload from\n   the Jumbo Payload option.\n   The Jumbo
    Payload option must not be used in a packet that carries a\n   Fragment header.\n
    \  Higher-layer protocols that use the IPv6 Payload Length field to\n   compute
    the value of the Upper-Layer Packet Length field in the\n   checksum pseudo-header
    described in [IPv6, Section 8.1] must instead\n   use the Jumbo Payload Length
    field for that computation, for packets\n   that carry the Jumbo Payload option.\n
    \  Nodes that understand the Jumbo Payload option are required to detect\n   a
    number of possible format errors, and if the erroneous packet was\n   not destined
    to a multicast address, report the error by sending an\n   ICMP Parameter Problem
    message [ICMPv6] to the packet's source.   The\n   following list of errors specifies
    the values to be used in the Code\n   and Pointer fields of the Parameter Problem
    message:\n      error: IPv6 Payload Length = 0 and\n             IPv6 Next Header
    = Hop-by-Hop Options and\n             Jumbo Payload option not present\n             Code:
    0\n             Pointer: high-order octet of the IPv6 Payload Length\n      error:
    IPv6 Payload Length != 0 and\n             Jumbo Payload option present\n             Code:
    0\n             Pointer: Option Type field of the Jumbo Payload option\n      error:
    Jumbo Payload option present and\n             Jumbo Payload Length < 65,536\n
    \            Code: 0\n             Pointer: high-order octet of the Jumbo Payload
    Length\n      error: Jumbo Payload option present and\n             Fragment header
    present\n             Code: 0\n             Pointer: high-order octet of the Fragment
    header.\n   A node that does not understand the Jumbo Payload option is expected\n
    \  to respond to erroneously-received jumbograms as follows, according\n   to
    the IPv6 specification:\n      error: IPv6 Payload Length = 0 and\n             IPv6
    Next Header = Hop-by-Hop Options\n             Code: 0\n             Pointer:
    high-order octet of the IPv6 Payload Length\n      error: IPv6 Payload Length
    != 0 and\n             Jumbo Payload option present\n             Code: 2\n             Pointer:
    Option Type field of the Jumbo Payload option\n"
  title: 3. Usage of the Jumbo Payload Option
- contents:
  - "4. UDP Jumbograms\n   The 16-bit Length field of the UDP header limits the total
    length of\n   a UDP packet (that is, a UDP header plus data) to no greater than\n
    \  65,535 octets.  This document specifies the following modification of\n   UDP
    to relax that limit: UDP packets longer than 65,535 octets may be\n   sent by
    setting the UDP Length field to zero, and letting the\n   receiver derive the
    actual UDP packet length from the IPv6 payload\n   length.  (Note that, prior
    to this modification, zero was not a legal\n   value for the UDP Length field,
    because the UDP packet length\n   includes the UDP header and therefore has a
    minimum value of 8.)\n   The specific requirements for sending a UDP jumbogram
    are as follows:\n      When sending a UDP packet, if and only if the length of
    the UDP\n      header plus UDP data is greater than 65,535, set the Length field\n
    \     in the UDP header to zero.\n      The IPv6 packet carrying such a large
    UDP packet will necessarily\n      include a Jumbo Payload option in a Hop-by-Hop
    Options header; set\n      the Jumbo Payload Length field of that option to be
    the actual\n      length of the UDP header plus data, plus the length of all IPv6\n
    \     extension headers present between the IPv6 header and the UDP\n      header.\n
    \     For generating the UDP checksum, use the actual length of the UDP\n      header
    plus data, NOT zero, in the checksum pseudo-header [IPv6,\n      Section 8.1].\n
    \  The specific requirements for receiving a UDP jumbogram are as\n   follows:\n
    \     When receiving a UDP packet, if and only if the Length field in\n      the
    UDP header is zero, calculate the actual length of the UDP\n      header plus
    data from the IPv6 Jumbo Payload Length field minus\n      the length of all extension
    headers present between the IPv6\n      header and the UDP header.\n      In the
    unexpected case that the UDP Length field is zero but no\n      Jumbo Payload
    option is present (i.e., the IPv6 packet is not a\n      jumbogram), use the Payload
    Length field in the IPv6 header, in\n      place of the Jumbo Payload Length field,
    in the above calculation.\n      For verifying the received UDP checksum, use
    the calculated length\n      of the UDP header plus data, NOT zero, in the checksum
    pseudo-\n      header.\n"
  title: 4. UDP Jumbograms
- contents:
  - "5. TCP Jumbograms\n   Because there is no length field in the TCP header, there
    is nothing\n   limiting the length of an individual TCP packet.  However, the
    MSS\n   value that is negotiated at the beginning of the connection limits\n   the
    largest TCP packet that can be sent, and the Urgent Pointer\n   cannot reference
    data beyond 65,535 bytes.\n"
  - contents:
    - "5.1 TCP MSS\n   When determining what MSS value to send, if the MTU of the
      directly\n   attached interface minus 60 [IPv6, Section 8.3] is greater than
      or\n   equal to 65,535, then set the MSS value to 65,535.\n   When an MSS value
      of 65,535 is received, it is to be treated as\n   infinity.  The actual MSS
      is determined by subtracting 60 from the\n   value learned by performing Path
      MTU Discovery [MTU-DISC] over the\n   path to the TCP peer.\n"
    title: 5.1 TCP MSS
  - contents:
    - "5.2 TCP Urgent Pointer\n   The Urgent Pointer problem could be fixed by adding
      a TCP Urgent\n   Pointer Option.  However, since it is unlikely that applications\n
      \  using jumbograms will also use Urgent Pointers, a less intrusive\n   change
      similar to the MSS change will suffice.\n   When a TCP packet is to be sent
      with an Urgent Pointer (i.e., the URG\n   bit set), first calculate the offset
      from the Sequence Number to the\n   Urgent Pointer.  If the offset is less than
      65,535, fill in the\n   Urgent field and continue with the normal TCP processing.
      \ If the\n   offset is greater than 65,535, and the offset is greater than or\n
      \  equal to the length of the TCP data, fill in the Urgent Pointer with\n   65,535
      and continue with the normal TCP processing.  Otherwise, the\n   TCP packet
      must be split into two pieces.  The first piece contains\n   data up to, but
      not including the data pointed to by the Urgent\n   Pointer, and the Urgent
      field is set to 65,535 to indicate that the\n   Urgent Pointer is beyond the
      end of this packet.  The second piece\n   can then be sent with the Urgent field
      set normally.\n   Note: The first piece does not have to include all of the
      data up to\n   the Urgent Pointer.  It can be shorter, just as long as it ends\n
      \  within 65,534 bytes of the Urgent Pointer, so that the offset to the\n   Urgent
      Pointer in the second piece will be less than 65,535 bytes.\n   For TCP input
      processing, when a TCP packet is received with the URG\n   bit set and an Urgent
      field of 65,535, the Urgent Pointer is\n   calculated using an offset equal
      to the length of the TCP data,\n   rather than the offset in the Urgent field.\n
      \  It should also be noted that though the TCP window is only 16-bits,\n   larger
      windows can be used through use of the TCP Window Scale option\n   [TCP-EXT].\n"
    title: 5.2 TCP Urgent Pointer
  title: 5. TCP Jumbograms
- contents:
  - "6. Security Considerations\n   The Jumbo Payload option and TCP/UDP jumbograms
    do not introduce any\n   known new security concerns.\n"
  title: 6. Security Considerations
- contents:
  - "7. Authors' Addresses\n   David A. Borman\n   Berkeley Software Design, Inc.\n
    \  4719 Weston Hills Drive\n   Eagan, MN 55123\n   USA\n   Phone: +1 612 405 8194\n
    \  EMail: dab@bsdi.com\n   Stephen E. Deering\n   Cisco Systems, Inc.\n   170
    West Tasman Drive\n   San Jose, CA 95134-1706\n   USA\n   Phone: +1 408 527 8213\n
    \  EMail: deering@cisco.com\n   Robert M. Hinden\n   Nokia\n   313 Fairchild Drive\n
    \  Mountain View, CA 94043\n   USA\n   Phone: +1 650 625 2004\n   EMail: hinden@iprg.nokia.com\n"
  title: 7. Authors' Addresses
- contents:
  - "8. References\n   [ICMPv6]   Conta, A. and S. Deering, \"ICMP for the Internet
    Protocol\n              Version 6 (IPv6)\", RFC 2463, December 1998.\n   [IPv6]
    \    Deering, S. and R. Hinden, \"Internet Protocol Version 6\n              (IPv6)
    Specification\", RFC 2460, December 1998.\n   [MTU-DISC] McCann, J., Deering,
    S. and J. Mogul, \"Path MTU Discovery\n              for IP Version 6\", RFC 1981,
    August 1986.\n   [TCP]      Postel, J., \"Transmission Control Protocol\", STD
    7, RFC\n              793, September 1981.\n   [TCP-EXT]  Jacobson, V., Braden,
    R. and D. Borman, \"TCP Extensions\n              for High Performance\", RFC
    1323, May 1992.\n   [UDP]      Postel, J., \"User Datagram Protocol\", STD 6,
    RFC 768,\n              August 1980.\n"
  title: 8. References
- contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 9.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
