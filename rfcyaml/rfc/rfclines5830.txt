Encryption, Decryption, and Message Authentication Code (MAC)
This document is intended to be a source of information about the Russian Federal standard for electronic encryption, decryption, and message authentication algorithms (GOST 28147 89), which is one of the Russian cryptographic standard algorithms called GOST algorithms).
Recently, Russian cryptography is being used in Internet applications, and this document has been created as information for developers and users of GOST 28147 89 for encryption, decryption, and message authentication.
General Information [GOST28147 89] is the unified cryptographic transformation algorithm for information processing systems of different purposes, defining the encryption/decryption rules and the message authentication code (MAC) generation rules.
This cryptographic transformation algorithm is intended for hardware or software implementation and corresponds to the cryptographic requirements.
It puts no limitations on the encrypted information secrecy level.
Applicability GOST 28147 89 defines the encryption/decryption model and MAC generation for a given message (document) that is meant for transmission via insecure public telecommunication channels between data processing systems of different purposes.
GOST 28147 89 is obligatory to use in the Russian Federation in all data processing systems providing public services.
The following terms are used in the standard:
Running key: a pseudo random bit sequence generated by a given algorithm for encrypting plain texts and decrypting encrypted texts.
Encryption: the process of transforming plain text to encrypted data using a cipher.
MAC: an information string of fixed length that is generated from plain text and a key according to some rule and added to the encrypted data for protection against data falsification.
Key: a defined secret state of some parameters of a cryptographic transformation algorithm, that provides a choice of one transformation out of all the possible transformations.
Cryptographic protection: data protection using the data cryptographic transformations.
Cryptographic transformation: data transformation using encryption and (or) MAC.
Decryption: the process of transforming encrypted data to plain text using a cipher.
Initialisation vector: initial values of plain parameters of a cryptographic transformation algorithm.
Encryption equation: a correlation showing the process of generating encrypted data out of plain text as a result of transformations defined by the cryptographic transformation algorithm.
Decryption equation: a correlation showing the process of generating plain text out of encrypted data as a result of transformations defined by the cryptographic transformation algorithm.
Cipher: a set of reversible transformations of the set of possible plain texts onto the set of encrypted data, made after certain rules and using keys.
In this document, the following notations are used:
N is all values from 1 to N. 4.
The structure model of the cryptographic transformation algorithm (a cryptographic model) contains: a 256 bit key data store (KDS) consisting of eight 32 bit registers (X0, X1, X2, X3, X4, X5, X6, X7); four 32 bit registers (N1, N2, N3, N4); two 32 bit registers (N5 and N6) containing constants C1 and C2; two 32 bit adders modulo 2^32 (CM1, CM3); a 32 bit adder of bitwise sums modulo 2 (CM2); a 32 bit adder modulo (2^32 1) (CM4); an adder modulo 2 (CM5), with no limitation to its width; a substitution box (K); a register for a cyclic shift of 11 steps to the top digit (R).
A substitution box (S box)
K consists of eight substitution points K1, K2, K3, K4, K5, K6, K7, K8, with 64 bit memory.
A 32 bit vector coming to the substitution box is divided into eight successive 4 bit vectors, and each of them is transformed into a 4 bit vector by a corresponding substitution point.
A substitution point is a table consisting of 16 lines, each containing four bits.
The incoming vector defines the line address in the table, and the contents of that line is the outgoing vector.
Then, these 4 bit outgoing vectors are successively combined into a 32 bit vector.
the standard doesn't define any S boxes.
Some of them are defined in [RFC4357].
When adding and cyclically shifting binary vectors, the registers with larger numbers are considered the top digits.
When rewriting the information, the value of the p th bit of one register (adder) is written into the p th bit of another register (adder).
The values of the constants C1 and C2 in the registers N5 and N6 are in the Appendix 1.
The keys defining fillings of KDS and the substitution box
K tables are secret elements and are provided in accordance with the established procedure.
The filling of the substitution box K is described in GOST 28147 89 as a long term key element common for a whole computer network.
Usually, K is used as a parameter of algorithm, some possible sets of K are described in [RFC4357].
The cryptographic model contemplates four working modes: data encryption (decryption) in the electronic codebook (ECB) mode, data encryption (decryption) in the counter (CNT) mode, data encryption (decryption) in the cipher feedback (CFB) mode, and the MAC generation mode.
[RFC4357] also describes the CBC mode of GOST 28147 89, but this mode is not a part of the standard.
The Electronic Codebook Mode 5.1.
Encryption of Plain Text in the Electronic Codebook Mode
The plain text to be encrypted is split into 64 bit blocks.
into the registers N1 and N2 is done so that the value of a1(0) is put into the first bit of N1, the value of a2(0) is put into the second bit of N1, etc., and the value of a32(0) is put into the 32nd bit of N1.
The value of b1(0) is put into the first bit of N2, the value of b2(0) is put into the 2nd bit of N2, etc., and the value of b32(0) is input into the 32nd bit of N2.
The 256 bits of the key are entered into the KDS.
The algorithm for enciphering 64 bit blocks of plain text in the electronic codebook mode consists of 32 rounds.
In the first round, the initial value of register N1 is added modulo 2^32 in the adder CM1 to the contents of the register X0.
Note: the value of register N1 is unchanged.
The result of the addition is transformed in the substitution block K, and the resulting vector is put into the register R, where it is cyclically shifted by 11 steps towards the top digit.
The result of this shift is added bitwise modulo 2 in the adder CM2 to the 32 bit contents of the register N2.
The result produced in CM2 is then written into N1, and the old contents of N1 are written in N2.
Thus, the first round ends.
The subsequent rounds are similar to the first one: in the second round, the contents of X1 are read from the KDS; in the third round, the contents of X2 are read from the KDS, etc.; in the 8th round, the contents of X7 are read from the KDS.
in rounds 9 through 16 and 17 through 24, the contents of the KDS are read in the same order: X0, X1, X2, X3, X4, X5, X6, X7.
in the last eight rounds from the 25th to the 32nd, the contents of the KDS are read backwards: X7, X6, X5, X4, X3, X2, X1, X0.
Thus, during the 32 rounds of encryption, the following order of choosing the registers' contents is implemented: X0, X1, X2, X3, X4, X5, X6, X7, X0, X1, X2, X3, X4, X5, X6, X7, X0, X1, X2, X3, X4, X5, X6, X7, X7, X6, X5, X4, X3, X2, X1, X0
In the 32nd round, the result in the adder CM2 is written into the register N2, and the old contents of register N1 are unchanged.
After the 32nd round, the contents of the registers N1 and N2 are an encrypted data block corresponding to a block of plain text.
The equations for enciphering in the electronic codebook mode are:  a(j)
The 64 bit block of ciphertext
Tc is taken out of the registers N1, N2 in the following order:
The remaining blocks of the plain text in electronic codebook mode are encrypted in the same fashion.
Decryption of the Ciphertext in the Electronic Codebook Mode
The same 256 bit key that was used for encryption is loaded into the KDS, the encrypted data to be deciphered is divided into 64 bit blocks.
The decryption equations are:  a(32 j)
j   1..8;  b(32 1)   a(32
The fillings of the adders N1 and N2 after 32 working rounds are a plain text block.
corresponding to the encrypted data block: the value of a1(0) of the block Tp corresponds to the contents of the first bit of N1; the value of a2(0) corresponds to the contents of the second bit of N1 (etc.); the value of b1(0) corresponds to the contents of the first bit of N2; the value of b2(0) corresponds to the contents of the second bit of N2 (etc.); the value of b32(0) corresponds to the contents of 32nd bit of N2; the remaining blocks of encrypted data are decrypted similarly.
The encryption algorithm in the electronic codebook mode of a 64 bit block Tp is denoted by A, that is:
The Counter Encryption Mode 6.1.
Encryption of Plain Text in the Counter Encryption Mode
bitwise addition modulo 2 in the adder CM5 with the running key Gc produced in 64 bit blocks
Gc(i) is the i th 64 bit block where i 1..
M, the number of bits in a block Tp(M) can be less than 64.
In this case, the unused part of the running key block Gc(M) is discarded.
256 bits of the key are put into the KDS.
The registers N1 and N2 accept a 64 bit binary sequence (an initialisation vector)
The initialisation vector is put into the registers N1 and N2 so: the value of S1 is written into the first bit of N1; the value of S2 is written into the second bit of N1 (etc.); the value of S32 is written into the 32nd bit of N1; the value of S33 is written into the first bit of N2; the value of S34 is written into the 33th bit of N2 (etc.); the value of S64 is written into the 32nd bit of N2.
The initial filling of the registers N1 and N2 (the initialisation vector S) is encrypted in the electronic codebook mode in accordance with the requirements from section 5.1.
The result of that encryption A(S)
(Y0, Z0) is rewritten into the 32 bit registers N3 and N4 so as the contents of N1 are written into N3, and the contents of N2 are written into N4.
The filling of the register N4 is added modulo (2^32 1) in the adder CM4 to the 32 bit constant C1 from the register N6; the result is written into N4.
The filling of the register N3 is added modulo 2^32 in the adder CM3 with the 32 bit constant C2 from the register N5; the result is written into N3.
The filling of N3 is copied into N1, and the filling of N4 is copied into N2, while the fillings of N3 and N4 are kept.
The filling of N1 and N2 is encrypted in the electronic codebook mode according to the requirements of section 5.1.
The resulting encrypted filling of N1 and N2 is the first 64 bit block of the running key Gc(1), this block is bitwise added modulo 2 in the adder CM5 with the first 64 bit block of the plain text
The result of this addition is a 64 bit block of the encrypted data: Tc(1)
The value of tau1(1) of the block Tc(1) is the result of the addition of modulo 2 in the CM5 the value t1(1) of the block Tp(1) to the value of the first bit of N1; the value of tau2(1) of the block Tc(1) is the result of addition modulo 2 in the CM5 the value of t2(1) from the block Tp(1) to the value of the second bit of N1, etc.
; the value of tau64(1) of the block Tc(1) is the result of addition modulo 2 in the CM5 of the value t64(1) of the block Tp(1) to the value of the 32nd bit of N2.
To get the next 64 bit block of the running key Gc(2), the filling of N4 is added modulo (2^32 1) in the adder CM4 with the constant C1 from N6; the filling of N3 is added modulo 2^32 in the adder CM3 with the constant C2 from N5.
The new filling of N3 is copied into N1; the new filling of N4 is copied into N2; the fillings of N3 and N4 are kept.
The filling of N1 and N2 is encrypted in the electronic codebook mode according to the requirements of section 5.1.
The resulting encrypted filling of N1 and N2 is the second 64 bit block of the running key Gc(2); this block is bitwise added modulo 2 in the adder CM5 with the first 64 bit block of the plain text Tp(2).
If the length of the last M th block of the plain text is less than 64 bits, then only the corresponding number of bits from the last M th block of the running key is used; remaining bits are discarded.
The encryption equation is: Tc(i)
Decryption of Ciphertext in the Counter Encryption Mode
The decryption equation is: Tp(i)
The Cipher Feedback Mode 7.1.
Encryption of Plain Text in the Cipher Feedback Mode
The plain text is divided into 64 bit blocks Tp(1), Tp(2)
and encrypted in the cipher feedback mode by bitwise addition modulo 2 in the adder CM5 with the running key Gc
generated in 64 bit blocks, i.e., Gc(i)
The number of bits in the block Tp(M) may be less than 64.
256 bits of the key are put into the KDS.
The initial filling of N1 and N2 is encrypted in the electronic codebook mode in accordance with the requirements in section 6.1.
If resulting encrypted filling N1 and N2 is the first 64 bit block of the running key Gc(1) A(S), then this block is added bitwise modulo 2 with the first 64 bit block of plain text Tp(1)
The result is a 64 bit block of encrypted data Tc(1)
The block of encrypted data Tc(1) is simultaneously the initial state of N1 and N2 for generating the second block of the running key Gc(2) and is written on feedback in these registers.
Here: the value of tau1(1) is written into the first bit of N1; the value of tau2(1) is written into the second bit of N1, etc.
; the value of tau32(1) is written into the 32nd bit of N1; the value of tau33(1) is written into the first bit of N2; the value of tau34(1) is written into the second bit of N2, etc.
; the value of tau64(1) is written into the 32nd bit of N2.
The filling of N1 and N2 is encrypted in the electronic codebook mode in accordance with the requirements in the section 6.1.
The encrypted filling of N1 and N2 makes the second 64 bit block of the running key Gc(2), this block is added bitwise modulo 2 in the adder CM5 to the second block of the plain text Tp(2).
The generation of subsequent blocks of the running key Gc(i) and the encryption of the corresponding blocks of the plain text Tp(i)
(i   3..M) are performed similarly.
If the length of the last M th block of the plain text is less than 64 bits, only the corresponding number of bits of the M th block of the running key Gc(M) is used; remaining bits are discarded.
The encryption equations in the cipher feedback mode are:  Tc(1)   A(S) (
Decryption of Ciphertext in the Cipher Feedback Mode
The initialisation vector S is put into N1 and N2 similar to 6.1.
The initial filling of N1 and N2 (the initialisation vector S) is encrypted in the electronic codebook mode in accordance with the subsection 6.1.
The encrypted filling of N1, N2 is the first block of the running key Gc(1)   A(S), this block is added bitwise modulo 2 in the adder CM5 with the encrypted data block Tc(1).
This results in the first block of plain text Tp(1).
The block of encrypted data Tc(1) makes the initial filling of N1, N2 for generating the second block of the running key Gc(2).
The block Tc(1) is written in N1 and N2 in accordance with the requirements in the subsection 6.1, the resulted block Gc(2) is added bitwise modulo 2 in the adder CM5 to the second block of the encrypted data Tc(2).
This results in the block of plain text Tc(2).
The decryption equations in the cipher feedback mode are:  Tp(1)   A(S)
( ) Tc(i), i 2..
To provide the protection from falsification of plain text consisting of M 64 bit blocks Tp(1), Tp(2)
2, an additional l bit block is generated (the message authentication code I(l)).
The process of MAC generation is the same for all the encryption/decryption modes.
The first block of plain text: Tp(1)
; the value of t32(1)   a32(1)[0] is written into the 32nd bit of N1; the value of t33(1)   b1(1)[0] is written into the first bit of N2, etc.
; the value of t64(1)
b32(1)[0] is written into the 32nd bit of N2.
The filling of N1 and N2 is transformed in accordance with the first 16 rounds of the encryption algorithm in the electronic codebook mode (see the subsection 6.1).
The result of this addition (a1(1)[16]( )t1(2), a2(1)[16]
The resulting filling of N1 and N2 is added in the CM5 modulo 2 with the third block Tp(3), etc., the last block Tp(M)
The result of the addition (a1(M 1)[16]( )t1(M), a2(M 1)[16]
Out of the resulting filling of the registers N1 and N2: (a1(M)[16], a2(M)[16]
an l bit string I(l) (the MAC) is chosen: I(l)
The MAC I'(l) is generated as described in the subsection 5.3 and compared with the MAC I(l) received together with the encrypted data from the telecommunication channel or from the computer memory.
If the MACs are not equal, the resulting plain text blocks Tp(1), Tp(2)
can be generated either before encryption (after decryption, respectively) of the whole message or simultaneously with the encryption (decryption) in blocks.
The first plain text blocks, used in the MAC generation, can contain service information (the address section, a time mark, the initialisation vector, etc.)
and they may be unencrypted.
The parameter l value (the bit length of the MAC) is defined by the actual cryptographic requirements, while considering that the possibility of imposing false data is 2^ l. 9.
This entire document is about security considerations.
Appendix A.  Values of the Constants C1 and C2
The constant C1 is: The bit of N6   32 31 30 29 28 27 26 25 24 23 22 21 20 19 18
The bit value    0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
The bit of N6   17
12 11 10 9 8 7 6 5 4 3 2 1
The bit value    1  0 0  0  0  0  0  0  1 0 0 0 0 0 1 0 0
The constant C2 is: The bit of N6   32 31 30 29 28 27 26 25 24 23 22 21 20 19 18
The bit value    0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
The bit of N6   17
12 11 10 9 8 7 6 5 4 3 2 1
The bit value    1  0 0  0  0  0  0  0  1 0 0 0 0 0 0 0 1
Appendix B.  Contributors Dmitry Kabelev Cryptocom, Ltd. 14 Kedrova St., Bldg.
2 Moscow, 117218 Russian Federation EMail: kdb@cryptocom.ru Igor Ustinov Cryptocom, Ltd. 14 Kedrova St., Bldg.
2 Moscow, 117218 Russian Federation EMail: igus@cryptocom.ru Irene Emelianova Cryptocom Ltd. 14 Kedrova St., Bldg.
2 Moscow, 117218 Russian Federation EMail: irene@cryptocom.ru
