- title: __initial_text__
  contents:
  - '           A Description of the Camellia Encryption Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Camellia encryption algorithm.  Camellia\n\
    \   is a block cipher with 128-bit block size and 128-, 192-, and 256-bit\n  \
    \ keys.  The algorithm description is presented together with key\n   scheduling\
    \ part and data randomizing part.\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Camellia
  contents:
  - "1.1.  Camellia\n   Camellia was jointly developed by Nippon Telegraph and Telephone\n\
    \   Corporation and Mitsubishi Electric Corporation in 2000\n   [CamelliaSpec].\
    \  Camellia specifies the 128-bit block size and 128-,\n   192-, and 256-bit key\
    \ sizes, the same interface as the Advanced\n   Encryption Standard (AES).  Camellia\
    \ is characterized by its\n   suitability for both software and hardware implementations\
    \ as well as\n   its high level of security.  From a practical viewpoint, it is\n\
    \   designed to enable flexibility in software and hardware\n   implementations\
    \ on 32-bit processors widely used over the Internet\n   and many applications,\
    \ 8-bit processors used in smart cards,\n   cryptographic hardware, embedded systems,\
    \ and so on [CamelliaTech].\n   Moreover, its key setup time is excellent, and\
    \ its key agility is\n   superior to that of AES.\n   Camellia has been scrutinized\
    \ by the wide cryptographic community\n   during several projects for evaluating\
    \ crypto algorithms.  In\n   particular, Camellia was selected as a recommended\
    \ cryptographic\n   primitive by the EU NESSIE (New European Schemes for Signatures,\n\
    \   Integrity and Encryption) project [NESSIE] and also included in the\n   list\
    \ of cryptographic techniques for Japanese e-Government systems\n   which were\
    \ selected by the Japan CRYPTREC (Cryptography Research and\n   Evaluation Committees)\
    \ [CRYPTREC].\n"
- title: 2.  Algorithm Description
  contents:
  - "2.  Algorithm Description\n   Camellia can be divided into \"key scheduling part\"\
    \ and \"data\n   randomizing part\".\n"
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   The following operators are used in this document to describe\
    \ the\n   algorithm.\n      &    bitwise AND operation.\n      |    bitwise OR\
    \ operation.\n      ^    bitwise exclusive-OR operation.\n      <<   logical left\
    \ shift operation.\n      >>   logical right shift operation.\n      <<<  left\
    \ rotation operation.\n      ~y   bitwise complement of y.\n      0x   hexadecimal\
    \ representation.\n   Note that the logical left shift operation is done with\
    \ the infinite\n   data width.\n   The constant values of MASK8, MASK32, MASK64,\
    \ and MASK128 are defined\n   as follows.\n      MASK8   = 0xff;\n      MASK32\
    \  = 0xffffffff;\n      MASK64  = 0xffffffffffffffff;\n      MASK128 = 0xffffffffffffffffffffffffffffffff;\n"
- title: 2.2.  Key Scheduling Part
  contents:
  - "2.2.  Key Scheduling Part\n   In the key schedule part of Camellia, the 128-bit\
    \ variables of KL and\n   KR are defined as follows.  For 128-bit keys, the 128-bit\
    \ key K is\n   used as KL and KR is 0.  For 192-bit keys, the leftmost 128-bits\
    \ of\n   key K are used as KL and the concatenation of the rightmost 64-bits\n\
    \   of K and the complement of the rightmost 64-bits of K are used as KR.\n  \
    \ For 256-bit keys, the leftmost 128-bits of key K are used as KL and\n   the\
    \ rightmost 128-bits of K are used as KR.\n   128-bit key K:\n       KL = K; \
    \   KR = 0;\n   192-bit key K:\n       KL = K >> 64;\n       KR = ((K & MASK64)\
    \ << 64) | (~(K & MASK64));\n   256-bit key K:\n       KL = K >> 128;\n      \
    \ KR = K & MASK128;\n   The 128-bit variables KA and KB are generated from KL\
    \ and KR as\n   follows.  Note that KB is used only if the length of the secret\
    \ key\n   is 192 or 256 bits.  D1 and D2 are 64-bit temporary variables.  F-\n\
    \   function is described in Section 2.4.\n   D1 = (KL ^ KR) >> 64;\n   D2 = (KL\
    \ ^ KR) & MASK64;\n   D2 = D2 ^ F(D1, Sigma1);\n   D1 = D1 ^ F(D2, Sigma2);\n\
    \   D1 = D1 ^ (KL >> 64);\n   D2 = D2 ^ (KL & MASK64);\n   D2 = D2 ^ F(D1, Sigma3);\n\
    \   D1 = D1 ^ F(D2, Sigma4);\n   KA = (D1 << 64) | D2;\n   D1 = (KA ^ KR) >> 64;\n\
    \   D2 = (KA ^ KR) & MASK64;\n   D2 = D2 ^ F(D1, Sigma5);\n   D1 = D1 ^ F(D2,\
    \ Sigma6);\n   KB = (D1 << 64) | D2;\n   The 64-bit constants Sigma1, Sigma2,\
    \ ..., Sigma6 are used as \"keys\"\n   in the F-function.  These constant values\
    \ are, in hexadecimal\n   notation, as follows.\n   Sigma1 = 0xA09E667F3BCC908B;\n\
    \   Sigma2 = 0xB67AE8584CAA73B2;\n   Sigma3 = 0xC6EF372FE94F82BE;\n   Sigma4 =\
    \ 0x54FF53A5F1D36F1C;\n   Sigma5 = 0x10E527FADE682D1D;\n   Sigma6 = 0xB05688C2B3E6C1FD;\n\
    \   64-bit subkeys are generated by rotating KL, KR, KA, and KB and\n   taking\
    \ the left- or right-half of them.\n   For 128-bit keys, 64-bit subkeys kw1, ...,\
    \ kw4, k1, ..., k18,\n   ke1, ..., ke4 are generated as follows.\n   kw1 = (KL\
    \ <<<   0) >> 64;\n   kw2 = (KL <<<   0) & MASK64;\n   k1  = (KA <<<   0) >> 64;\n\
    \   k2  = (KA <<<   0) & MASK64;\n   k3  = (KL <<<  15) >> 64;\n   k4  = (KL <<<\
    \  15) & MASK64;\n   k5  = (KA <<<  15) >> 64;\n   k6  = (KA <<<  15) & MASK64;\n\
    \   ke1 = (KA <<<  30) >> 64;\n   ke2 = (KA <<<  30) & MASK64;\n   k7  = (KL <<<\
    \  45) >> 64;\n   k8  = (KL <<<  45) & MASK64;\n   k9  = (KA <<<  45) >> 64;\n\
    \   k10 = (KL <<<  60) & MASK64;\n   k11 = (KA <<<  60) >> 64;\n   k12 = (KA <<<\
    \  60) & MASK64;\n   ke3 = (KL <<<  77) >> 64;\n   ke4 = (KL <<<  77) & MASK64;\n\
    \   k13 = (KL <<<  94) >> 64;\n   k14 = (KL <<<  94) & MASK64;\n   k15 = (KA <<<\
    \  94) >> 64;\n   k16 = (KA <<<  94) & MASK64;\n   k17 = (KL <<< 111) >> 64;\n\
    \   k18 = (KL <<< 111) & MASK64;\n   kw3 = (KA <<< 111) >> 64;\n   kw4 = (KA <<<\
    \ 111) & MASK64;\n   For 192- and 256-bit keys, 64-bit subkeys kw1, ..., kw4,\
    \ k1, ...,\n   k24, ke1, ..., ke6 are generated as follows.\n   kw1 = (KL <<<\
    \   0) >> 64;\n   kw2 = (KL <<<   0) & MASK64;\n   k1  = (KB <<<   0) >> 64;\n\
    \   k2  = (KB <<<   0) & MASK64;\n   k3  = (KR <<<  15) >> 64;\n   k4  = (KR <<<\
    \  15) & MASK64;\n   k5  = (KA <<<  15) >> 64;\n   k6  = (KA <<<  15) & MASK64;\n\
    \   ke1 = (KR <<<  30) >> 64;\n   ke2 = (KR <<<  30) & MASK64;\n   k7  = (KB <<<\
    \  30) >> 64;\n   k8  = (KB <<<  30) & MASK64;\n   k9  = (KL <<<  45) >> 64;\n\
    \   k10 = (KL <<<  45) & MASK64;\n   k11 = (KA <<<  45) >> 64;\n   k12 = (KA <<<\
    \  45) & MASK64;\n   ke3 = (KL <<<  60) >> 64;\n   ke4 = (KL <<<  60) & MASK64;\n\
    \   k13 = (KR <<<  60) >> 64;\n   k14 = (KR <<<  60) & MASK64;\n   k15 = (KB <<<\
    \  60) >> 64;\n   k16 = (KB <<<  60) & MASK64;\n   k17 = (KL <<<  77) >> 64;\n\
    \   k18 = (KL <<<  77) & MASK64;\n   ke5 = (KA <<<  77) >> 64;\n   ke6 = (KA <<<\
    \  77) & MASK64;\n   k19 = (KR <<<  94) >> 64;\n   k20 = (KR <<<  94) & MASK64;\n\
    \   k21 = (KA <<<  94) >> 64;\n   k22 = (KA <<<  94) & MASK64;\n   k23 = (KL <<<\
    \ 111) >> 64;\n   k24 = (KL <<< 111) & MASK64;\n   kw3 = (KB <<< 111) >> 64;\n\
    \   kw4 = (KB <<< 111) & MASK64;\n"
- title: 2.3.  Data Randomizing Part
  contents:
  - '2.3.  Data Randomizing Part

    '
- title: 2.3.1.  Encryption for 128-bit keys
  contents:
  - "2.3.1.  Encryption for 128-bit keys\n   128-bit plaintext M is divided into the\
    \ left 64-bit D1 and the right\n   64-bit D2.\n   D1 = M >> 64;\n   D2 = M & MASK64;\n\
    \   Encryption is performed using an 18-round Feistel structure with FL-\n   and\
    \ FLINV-functions inserted every 6 rounds. F-function, FL-function,\n   and FLINV-function\
    \ are described in Section 2.4.\n   D1 = D1 ^ kw1;           // Prewhitening\n\
    \   D2 = D2 ^ kw2;\n   D2 = D2 ^ F(D1, k1);     // Round 1\n   D1 = D1 ^ F(D2,\
    \ k2);     // Round 2\n   D2 = D2 ^ F(D1, k3);     // Round 3\n   D1 = D1 ^ F(D2,\
    \ k4);     // Round 4\n   D2 = D2 ^ F(D1, k5);     // Round 5\n   D1 = D1 ^ F(D2,\
    \ k6);     // Round 6\n   D1 = FL   (D1, ke1);     // FL\n   D2 = FLINV(D2, ke2);\
    \     // FLINV\n   D2 = D2 ^ F(D1, k7);     // Round 7\n   D1 = D1 ^ F(D2, k8);\
    \     // Round 8\n   D2 = D2 ^ F(D1, k9);     // Round 9\n   D1 = D1 ^ F(D2, k10);\
    \    // Round 10\n   D2 = D2 ^ F(D1, k11);    // Round 11\n   D1 = D1 ^ F(D2,\
    \ k12);    // Round 12\n   D1 = FL   (D1, ke3);     // FL\n   D2 = FLINV(D2, ke4);\
    \     // FLINV\n   D2 = D2 ^ F(D1, k13);    // Round 13\n   D1 = D1 ^ F(D2, k14);\
    \    // Round 14\n   D2 = D2 ^ F(D1, k15);    // Round 15\n   D1 = D1 ^ F(D2,\
    \ k16);    // Round 16\n   D2 = D2 ^ F(D1, k17);    // Round 17\n   D1 = D1 ^\
    \ F(D2, k18);    // Round 18\n   D2 = D2 ^ kw3;           // Postwhitening\n \
    \  D1 = D1 ^ kw4;\n   128-bit ciphertext C is constructed from D1 and D2 as follows.\n\
    \   C = (D2 << 64) | D1;\n"
- title: 2.3.2.  Encryption for 192- and 256-bit keys
  contents:
  - "2.3.2.  Encryption for 192- and 256-bit keys\n   128-bit plaintext M is divided\
    \ into the left 64-bit D1 and the right\n   64-bit D2.\n   D1 = M >> 64;\n   D2\
    \ = M & MASK64;\n   Encryption is performed using a 24-round Feistel structure\
    \ with FL-\n   and FLINV-functions inserted every 6 rounds. F-function, FL-function,\n\
    \   and FLINV-function are described in Section 2.4.\n   D1 = D1 ^ kw1;      \
    \     // Prewhitening\n   D2 = D2 ^ kw2;\n   D2 = D2 ^ F(D1, k1);     // Round\
    \ 1\n   D1 = D1 ^ F(D2, k2);     // Round 2\n   D2 = D2 ^ F(D1, k3);     // Round\
    \ 3\n   D1 = D1 ^ F(D2, k4);     // Round 4\n   D2 = D2 ^ F(D1, k5);     // Round\
    \ 5\n   D1 = D1 ^ F(D2, k6);     // Round 6\n   D1 = FL   (D1, ke1);     // FL\n\
    \   D2 = FLINV(D2, ke2);     // FLINV\n   D2 = D2 ^ F(D1, k7);     // Round 7\n\
    \   D1 = D1 ^ F(D2, k8);     // Round 8\n   D2 = D2 ^ F(D1, k9);     // Round\
    \ 9\n   D1 = D1 ^ F(D2, k10);    // Round 10\n   D2 = D2 ^ F(D1, k11);    // Round\
    \ 11\n   D1 = D1 ^ F(D2, k12);    // Round 12\n   D1 = FL   (D1, ke3);     //\
    \ FL\n   D2 = FLINV(D2, ke4);     // FLINV\n   D2 = D2 ^ F(D1, k13);    // Round\
    \ 13\n   D1 = D1 ^ F(D2, k14);    // Round 14\n   D2 = D2 ^ F(D1, k15);    //\
    \ Round 15\n   D1 = D1 ^ F(D2, k16);    // Round 16\n   D2 = D2 ^ F(D1, k17);\
    \    // Round 17\n   D1 = D1 ^ F(D2, k18);    // Round 18\n   D1 = FL   (D1, ke5);\
    \     // FL\n   D2 = FLINV(D2, ke6);     // FLINV\n   D2 = D2 ^ F(D1, k19);  \
    \  // Round 19\n   D1 = D1 ^ F(D2, k20);    // Round 20\n   D2 = D2 ^ F(D1, k21);\
    \    // Round 21\n   D1 = D1 ^ F(D2, k22);    // Round 22\n   D2 = D2 ^ F(D1,\
    \ k23);    // Round 23\n   D1 = D1 ^ F(D2, k24);    // Round 24\n   D2 = D2 ^\
    \ kw3;           // Postwhitening\n   D1 = D1 ^ kw4;\n   128-bit ciphertext C\
    \ is constructed from D1 and D2 as follows.\n   C = (D2 << 64) | D1;\n"
- title: 2.3.3.  Decryption
  contents:
  - "2.3.3.  Decryption\n   The decryption procedure of Camellia can be done in the\
    \ same way as\n   the encryption procedure by reversing the order of the subkeys.\n\
    \   That is to say:\n   128-bit key:\n       kw1 <-> kw3\n       kw2 <-> kw4\n\
    \       k1  <-> k18\n       k2  <-> k17\n       k3  <-> k16\n       k4  <-> k15\n\
    \       k5  <-> k14\n       k6  <-> k13\n       k7  <-> k12\n       k8  <-> k11\n\
    \       k9  <-> k10\n       ke1 <-> ke4\n       ke2 <-> ke3\n   192- or 256-bit\
    \ key:\n       kw1 <-> kw3\n       kw2 <-> kw4\n       k1  <-> k24\n       k2\
    \  <-> k23\n       k3  <-> k22\n       k4  <-> k21\n       k5  <-> k20\n     \
    \  k6  <-> k19\n       k7  <-> k18\n       k8  <-> k17\n       k9  <-> k16\n \
    \      k10 <-> k15\n       k11 <-> k14\n       k12 <-> k13\n       ke1 <-> ke6\n\
    \       ke2 <-> ke5\n       ke3 <-> ke4\n"
- title: 2.4.  Components of Camellia
  contents:
  - '2.4.  Components of Camellia

    '
- title: 2.4.1.  F-function
  contents:
  - "2.4.1.  F-function\n   F-function takes two parameters.  One is 64-bit input\
    \ data F_IN.  The\n   other is 64-bit subkey KE.  F-function returns 64-bit data\
    \ F_OUT.\n   F(F_IN, KE)\n   begin\n       var x as 64-bit unsigned integer;\n\
    \       var t1, t2, t3, t4, t5, t6, t7, t8 as 8-bit unsigned integer;\n      \
    \ var y1, y2, y3, y4, y5, y6, y7, y8 as 8-bit unsigned integer;\n       x  = F_IN\
    \ ^ KE;\n       t1 =  x >> 56;\n       t2 = (x >> 48) & MASK8;\n       t3 = (x\
    \ >> 40) & MASK8;\n       t4 = (x >> 32) & MASK8;\n       t5 = (x >> 24) & MASK8;\n\
    \       t6 = (x >> 16) & MASK8;\n       t7 = (x >>  8) & MASK8;\n       t8 = \
    \ x        & MASK8;\n       t1 = SBOX1[t1];\n       t2 = SBOX2[t2];\n       t3\
    \ = SBOX3[t3];\n       t4 = SBOX4[t4];\n       t5 = SBOX2[t5];\n       t6 = SBOX3[t6];\n\
    \       t7 = SBOX4[t7];\n       t8 = SBOX1[t8];\n       y1 = t1 ^ t3 ^ t4 ^ t6\
    \ ^ t7 ^ t8;\n       y2 = t1 ^ t2 ^ t4 ^ t5 ^ t7 ^ t8;\n       y3 = t1 ^ t2 ^\
    \ t3 ^ t5 ^ t6 ^ t8;\n       y4 = t2 ^ t3 ^ t4 ^ t5 ^ t6 ^ t7;\n       y5 = t1\
    \ ^ t2 ^ t6 ^ t7 ^ t8;\n       y6 = t2 ^ t3 ^ t5 ^ t7 ^ t8;\n       y7 = t3 ^\
    \ t4 ^ t5 ^ t6 ^ t8;\n       y8 = t1 ^ t4 ^ t5 ^ t6 ^ t7;\n       F_OUT = (y1\
    \ << 56) | (y2 << 48) | (y3 << 40) | (y4 << 32)\n       | (y5 << 24) | (y6 <<\
    \ 16) | (y7 <<  8) | y8;\n       return FO_OUT;\n   end.\n   SBOX1, SBOX2, SBOX3,\
    \ and SBOX4 are lookup tables with 8-bit input/\n   output data.  SBOX2, SBOX3,\
    \ and SBOX4 are defined using SBOX1 as\n   follows:\n       SBOX2[x] = SBOX1[x]\
    \ <<< 1;\n       SBOX3[x] = SBOX1[x] <<< 7;\n       SBOX4[x] = SBOX1[x <<< 1];\n\
    \   SBOX1 is defined by the following table.  For example, SBOX1[0x3d]\n   equals\
    \ 86.\n   SBOX1:\n         0   1   2   3   4   5   6   7   8   9   a   b   c \
    \  d   e   f\n   00: 112 130  44 236 179  39 192 229 228 133  87  53 234  12 174\
    \  65\n   10:  35 239 107 147  69  25 165  33 237  14  79  78  29 101 146 189\n\
    \   20: 134 184 175 143 124 235  31 206  62  48 220  95  94 197  11  26\n   30:\
    \ 166 225  57 202 213  71  93  61 217   1  90 214  81  86 108  77\n   40: 139\
    \  13 154 102 251 204 176  45 116  18  43  32 240 177 132 153\n   50: 223  76\
    \ 203 194  52 126 118   5 109 183 169  49 209  23   4 215\n   60:  20  88  58\
    \  97 222  27  17  28  50  15 156  22  83  24 242  34\n   70: 254  68 207 178\
    \ 195 181 122 145  36   8 232 168  96 252 105  80\n   80: 170 208 160 125 161\
    \ 137  98 151  84  91  30 149 224 255 100 210\n   90:  16 196   0  72 163 247\
    \ 117 219 138   3 230 218   9  63 221 148\n   a0: 135  92 131   2 205  74 144\
    \  51 115 103 246 243 157 127 191 226\n   b0:  82 155 216  38 200  55 198  59\
    \ 129 150 111  75  19 190  99  46\n   c0: 233 121 167 140 159 110 188 142  41\
    \ 245 249 182  47 253 180  89\n   d0: 120 152   6 106 231  70 113 186 212  37\
    \ 171  66 136 162 141 250\n   e0: 114   7 185  85 248 238 172  10  54  73  42\
    \ 104  60  56 241 164\n   f0:  64  40 211 123 187 201  67 193  21 227 173 244\
    \ 119 199 128 158\n"
- title: 2.4.2.  FL- and FLINV-functions
  contents:
  - "2.4.2.  FL- and FLINV-functions\n   FL-function takes two parameters.  One is\
    \ 64-bit input data FL_IN.\n   The other is 64-bit subkey KE.  FL-function returns\
    \ 64-bit data\n   FL_OUT.\n   FL(FL_IN, KE)\n   begin\n       var x1, x2 as 32-bit\
    \ unsigned integer;\n       var k1, k2 as 32-bit unsigned integer;\n       x1\
    \ = FL_IN >> 32;\n       x2 = FL_IN & MASK32;\n       k1 = KE >> 32;\n       k2\
    \ = KE & MASK32;\n       x2 = x2 ^ ((x1 & k1) <<< 1);\n       x1 = x1 ^ (x2 |\
    \ k2);\n       FL_OUT = (x1 << 32) | x2;\n   end.\n   FLINV-function is the inverse\
    \ function of the FL-function.\n   FLINV(FLINV_IN, KE)\n   begin\n       var y1,\
    \ y2 as 32-bit unsigned integer;\n       var k1, k2 as 32-bit unsigned integer;\n\
    \       y1 = FLINV_IN >> 32;\n       y2 = FLINV_IN & MASK32;\n       k1 = KE >>\
    \ 32;\n       k2 = KE & MASK32;\n       y1 = y1 ^ (y2 | k2);\n       y2 = y2 ^\
    \ ((y1 & k1) <<< 1);\n       FLINV_OUT = (y1 << 32) | y2;\n   end.\n"
- title: 3.  Object Identifiers
  contents:
  - "3.  Object Identifiers\n   The Object Identifier for Camellia with 128-bit key\
    \ in Cipher Block\n   Chaining (CBC) mode is as follows:\n      id-camellia128-cbc\
    \ OBJECT IDENTIFIER ::=\n          { iso(1) member-body(2) 392 200011 61 security(1)\n\
    \            algorithm(1) symmetric-encryption-algorithm(1)\n            camellia128-cbc(2)\
    \ }\n   The Object Identifier for Camellia with 192-bit key in Cipher Block\n\
    \   Chaining (CBC) mode is as follows:\n      id-camellia192-cbc OBJECT IDENTIFIER\
    \ ::=\n          { iso(1) member-body(2) 392 200011 61 security(1)\n         \
    \   algorithm(1) symmetric-encryption-algorithm(1)\n            camellia192-cbc(3)\
    \ }\n   The Object Identifier for Camellia with 256-bit key in Cipher Block\n\
    \   Chaining (CBC) mode is as follows:\n      id-camellia256-cbc OBJECT IDENTIFIER\
    \ ::=\n          { iso(1) member-body(2) 392 200011 61 security(1)\n         \
    \   algorithm(1) symmetric-encryption-algorithm(1)\n            camellia256-cbc(4)\
    \ }\n   The above algorithms need Initialization Vector (IV).  To determine\n\
    \   the value of IV, the above algorithms take parameters as follows:\n      CamelliaCBCParameter\
    \ ::= CamelliaIV  --  Initialization Vector\n      CamelliaIV ::= OCTET STRING\
    \ (SIZE(16))\n   When these object identifiers are used, plaintext is padded before\n\
    \   encryption according to RFC2315 [RFC2315].\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The recent advances in cryptanalytic techniques\
    \ are remarkable.  A\n   quantitative evaluation of security against powerful\
    \ cryptanalytic\n   techniques such as differential cryptanalysis and linear\n\
    \   cryptanalysis is considered to be essential in designing any new\n   block\
    \ cipher.  We evaluated the security of Camellia by utilizing\n   state-of-the-art\
    \ cryptanalytic techniques.  We confirmed that\n   Camellia has no differential\
    \ and linear characteristics that hold\n   with probability more than 2^(-128),\
    \ which means that it is extremely\n   unlikely that differential and linear attacks\
    \ will succeed against\n   the full 18-round Camellia.  Moreover, Camellia was\
    \ designed to offer\n   security against other advanced cryptanalytic attacks\
    \ including\n   higher order differential attacks, interpolation attacks, related-key\n\
    \   attacks, truncated differential attacks, and so on [Camellia].\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [CamelliaSpec] Aoki, K., Ichikawa, T., Kanda,\
    \ M., Matsui, M., Moriai,\n                  S., Nakajima, J. and T. Tokita, \"\
    Specification of\n                  Camellia --- a 128-bit Block Cipher\".\n \
    \                 http://info.isl.ntt.co.jp/camellia/\n   [CamelliaTech] Aoki,\
    \ K., Ichikawa, T., Kanda, M., Matsui, M., Moriai,\n                  S., Nakajima,\
    \ J. and T. Tokita, \"Camellia: A 128-Bit\n                  Block Cipher Suitable\
    \ for Multiple Platforms\".\n                  http://info.isl.ntt.co.jp/camellia/\n\
    \   [Camellia]     Aoki, K., Ichikawa, T., Kanda, M., Matsui, M., Moriai,\n  \
    \                S., Nakajima, J. and T. Tokita, \"Camellia: A 128-Bit\n     \
    \             Block Cipher Suitable for Multiple Platforms - Design\n        \
    \          and Analysis -\", In Selected Areas in Cryptography,\n            \
    \      7th Annual International Workshop, SAC 2000, Waterloo,\n              \
    \    Ontario, Canada, August 2000, Proceedings, Lecture\n                  Notes\
    \ in Computer Science 2012, pp.39-56, Springer-\n                  Verlag, 2001.\n\
    \   [CRYPTREC]     \"CRYPTREC Advisory Committee Report FY2002\", Ministry\n \
    \                 of Public Management, Home Affairs, Posts and\n            \
    \      Telecommunications, and Ministry of Economy, Trade and\n              \
    \    Industry, March 2003.\n                  http://www.soumu.go.jp/joho_tsusin/security/\n\
    \                  cryptrec.html,\n                  CRYPTREC home page by Information-technology\
    \ Promotion\n                  Agency, Japan (IPA)\n                  http://www.ipa.go.jp/security/enc/CRYPTREC/index-\n\
    \                  e.html\n   [NESSIE]       New European Schemes for Signatures,\
    \ Integrity and\n                  Encryption (NESSIE) project.\n            \
    \      http://www.cryptonessie.org\n   [RFC2315]      Kaliski, B., \"PKCS #7:\
    \ Cryptographic Message Syntax\n                  Version 1.5\", RFC 2315, March\
    \ 1998.\n"
- title: Appendix A.  Example Data of Camellia
  contents:
  - "Appendix A.  Example Data of Camellia\n   Here are test data for Camellia in\
    \ hexadecimal form.\n   128-bit key\n       Key       : 01 23 45 67 89 ab cd ef\
    \ fe dc ba 98 76 54 32 10\n       Plaintext : 01 23 45 67 89 ab cd ef fe dc ba\
    \ 98 76 54 32 10\n       Ciphertext: 67 67 31 38 54 96 69 73 08 57 06 56 48 ea\
    \ be 43\n   192-bit key\n       Key       : 01 23 45 67 89 ab cd ef fe dc ba 98\
    \ 76 54 32 10\n                 : 00 11 22 33 44 55 66 77\n       Plaintext :\
    \ 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10\n       Ciphertext: b4 99 34\
    \ 01 b3 e9 96 f8 4e e5 ce e7 d7 9b 09 b9\n   256-bit key\n       Key       : 01\
    \ 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10\n                 : 00 11 22 33\
    \ 44 55 66 77 88 99 aa bb cc dd ee ff\n       Plaintext : 01 23 45 67 89 ab cd\
    \ ef fe dc ba 98 76 54 32 10\n       Ciphertext: 9a cc 23 7d ff 16 d7 6c 20 ef\
    \ 7c 91 9e 3a 75 09\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Shiho Moriai worked for NTT when this document was developed.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mitsuru Matsui\n   Mitsubishi Electric Corporation\n \
    \  Information Technology R&D Center\n   5-1-1 Ofuna, Kamakura\n   Kanagawa 247-8501,\
    \ Japan\n   Phone: +81-467-41-2190\n   Fax:   +81-467-41-2185\n   EMail: matsui@iss.isl.melco.co.jp\n\
    \   Junko Nakajima\n   Mitsubishi Electric Corporation\n   Information Technology\
    \ R&D Center\n   5-1-1 Ofuna, Kamakura\n   Kanagawa 247-8501, Japan\n   Phone:\
    \ +81-467-41-2190\n   Fax:   +81-467-41-2185\n   EMail: june15@iss.isl.melco.co.jp\n\
    \   Shiho Moriai\n   Sony Computer Entertainment Inc.\n   Phone: +81-3-6438-7523\n\
    \   Fax:   +81-3-6438-8629\n   EMail: shiho@rd.scei.sony.co.jp\n          camellia@isl.ntt.co.jp\
    \ (Camellia team)\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78 and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
