- title: __initial_text__
  contents:
  - "            Software-Defined Networking: A Perspective from\n               \
    \  within a Service Provider Environment\n"
- title: Abstract
  contents:
  - "Abstract\n   Software-Defined Networking (SDN) has been one of the major buzz\n\
    \   words of the networking industry for the past couple of years.  And\n   yet,\
    \ no clear definition of what SDN actually covers has been broadly\n   admitted\
    \ so far.  This document aims to clarify the SDN landscape by\n   providing a\
    \ perspective on requirements, issues, and other\n   considerations about SDN,\
    \ as seen from within a service provider\n   environment.\n   It is not meant\
    \ to endlessly discuss what SDN truly means but rather\n   to suggest a functional\
    \ taxonomy of the techniques that can be used\n   under an SDN umbrella and to\
    \ elaborate on the various pending issues\n   the combined activation of such\
    \ techniques inevitably raises.  As\n   such, a definition of SDN is only mentioned\
    \ for the sake of\n   clarification.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7149.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Introducing Software-Defined Networking .........................4\n  \
    \    2.1. A Tautology? ...............................................4\n    \
    \  2.2. On Flexibility .............................................4\n      2.3.\
    \ A Tentative Definition .....................................5\n      2.4. Functional\
    \ Metadomains .....................................6\n   3. Reality Check ...................................................6\n\
    \      3.1. Remember the Past ..........................................7\n  \
    \    3.2. Be Pragmatic ...............................................8\n    \
    \  3.3. Measure Experience against Expectations ....................8\n      3.4.\
    \ Design Carefully ...........................................9\n      3.5. On\
    \ OpenFlow ................................................9\n      3.6. Non-goals\
    \ .................................................10\n   4. Discussion .....................................................11\n\
    \      4.1. Implications of Full Automation ...........................11\n  \
    \    4.2. Bootstrapping an SDN ......................................12\n    \
    \  4.3. Operating an SDN ..........................................14\n      4.4.\
    \ The Intelligence Resides in the PDP .......................15\n      4.5. Simplicity\
    \ and Adaptability vs. Complexity ................16\n      4.6. Performance and\
    \ Scalability ...............................16\n      4.7. Risk Assessment ...........................................17\n\
    \   5. Security Considerations ........................................17\n  \
    \ 6. Acknowledgements ...............................................18\n   7.\
    \ Informative References .........................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet has become the federative network that supports\
    \ a wide\n   range of service offerings.  The delivery of network services such\
    \ as\n   IP VPNs assumes the combined activation of various capabilities that\n\
    \   include (but are not necessarily limited to) forwarding and routing\n   (e.g.,\
    \ customer-specific addressing scheme management, dynamic path\n   computation\
    \ to reach a set of destination prefixes, dynamic\n   establishment of tunnels,\
    \ etc.); Quality of Service (e.g., traffic\n   classification, marking, conditioning,\
    \ and scheduling); security\n   (e.g., filters to protect customer premises from\
    \ network-originated\n   attacks, to avoid malformed route announcements, etc.);\
    \ and\n   management (e.g., fault detection and processing).\n   As these services\
    \ not only grow in variety but also in complexity,\n   their design, delivery,\
    \ and operation have become a complex alchemy\n   that often requires various\
    \ levels of expertise.  This situation is\n   further aggravated by the wide variety\
    \ of (network) protocols and\n   tools, as well as recent convergence trends driven\
    \ by Any Time, Any\n   Where, Any Device (ATAWAD); ATAWADs are meant to make sure\
    \ that an\n   end user can access the whole range of services he/she has subscribed\n\
    \   to whatever the access and device technologies, wherever the end user\n  \
    \ is connected to the network, and whether or not this end user is in\n   motion.\n\
    \   Yet, most of these services have been deployed for the past decade,\n   primarily\
    \ based upon often static service production procedures that\n   are more and\
    \ more exposed to the risk of erroneous configuration\n   commands.  In addition,\
    \ most of these services do not assume any\n   specific negotiation between the\
    \ customer and the service provider or\n   between service providers, besides\
    \ the typical financial terms.\n   At best, five-year master plans are referred\
    \ to as the network\n   planning policy that will be enforced by the service provider\
    \ given\n   the foreseen business development perspectives, manually computed\n\
    \   traffic forecasts, and market coverage (fixed/mobile and residential/\n  \
    \ corporate).  This so-called network planning policy may very well\n   affect\
    \ the way resources are allocated in a network, but it clearly\n   fails to be\
    \ adequately responsive to highly dynamic customer\n   requirements in an \"always-on\"\
    \ fashion.  The need for improved\n   service delivery procedures (including the\
    \ time it takes to deliver\n   the service once the possible negotiation phase\
    \ is completed) is even\n   more critical for corporate customers.\n   In addition,\
    \ various tools are used for different, sometimes service-\n   centric, management\
    \ purposes, but their usage is not necessarily\n   coordinated for event aggregation,\
    \ correlation, and processing.  This\n   lack of coordination may come at the\
    \ cost of extra complexity and\n   possible customer Quality-of-Experience degradation.\n\
    \   Multi-service, multi-protocol, multi-technology-convergent, and\n   dynamically\
    \ adaptive networking environments of the near future have\n   therefore become\
    \ one of the major challenges faced by service\n   providers.\n   This document\
    \ aims to clarify the SDN landscape by providing a\n   perspective on the functional\
    \ taxonomy of the techniques that can be\n   used in SDN, as seen from within\
    \ a service provider environment.\n"
- title: 2.  Introducing Software-Defined Networking
  contents:
  - '2.  Introducing Software-Defined Networking

    '
- title: 2.1.  A Tautology?
  contents:
  - "2.1.  A Tautology?\n   The separation of the forwarding and control planes (beyond\n\
    \   implementation considerations) has almost become a gimmick to promote\n  \
    \ flexibility as a key feature of the SDN approach.  Technically, most\n   of\
    \ the current router implementations have been assuming this\n   separation for\
    \ decades.  Routing processes (such as IGP and BGP route\n   computation) have\
    \ often been software based, while forwarding\n   capabilities are usually implemented\
    \ in hardware.\n   As such, at the time of writing, what is considered to be state\
    \ of\n   the art tends to confirm the said separation, which rather falls\n  \
    \ under a tautology.\n   But, a somewhat centralized, \"controller-embedded\"\
    , control plane for\n   the sake of optimized route computation before the Forwarding\n\
    \   Information Base (FIB) population is certainly another story.\n"
- title: 2.2.  On Flexibility
  contents:
  - "2.2.  On Flexibility\n   Promoters of SDN have argued that it provides additional\
    \ flexibility\n   in how the network is operated.  This is undoubtedly one of\
    \ the key\n   objectives that must be achieved by service providers.  This is\n\
    \   because the ability to dynamically adapt to a wide range of customer\n   requests\
    \ for flexible network service delivery is an important\n   competitive advantage.\
    \  But, flexibility is much, much more than\n   separating the control and forwarding\
    \ planes to facilitate forwarding\n   decision-making processes.\n   For example,\
    \ the ability to accommodate short duration extra\n   bandwidth requirements so\
    \ that end users can stream a video file to\n   their 4G terminal device is an\
    \ example of the flexibility that\n   several mobile operators are currently investigating.\n\
    \   From this perspective, the ability to predict the network behavior as\n  \
    \ a function of the network services to be delivered is of paramount\n   importance\
    \ for service providers, so that they can assess the impact\n   of introducing\
    \ new services or activating additional network features\n   or enforcing a given\
    \ set of (new) policies from both financial and\n   technical standpoints.  This\
    \ argues in favor of investigating\n   advanced network emulation engines, which\
    \ can be fed with information\n   that can be derived from [LS-DISTRIB], for example.\n\
    \   Given the rather broad scope that the term \"flexibility\" suggests:\n   o\
    \  Current SDN-labeled solutions are claimed to be flexible, although\n      the\
    \ notion is hardly defined.  The exact characterization of what\n      flexibility\
    \ actually means is yet to be provided.  Further work\n      needs, therefore,\
    \ to be conducted so that flexibility can be\n      precisely defined in light\
    \ of various criteria such as network\n      evolution capabilities as a function\
    \ of the complexity introduced\n      by the integration of SDN techniques and\
    \ seamless capabilities\n      (i.e., the ability to progressively introduce SDN-enabled\
    \ devices\n      without disrupting network and service operation, etc.).\n  \
    \ o  The exposure of programmable interfaces is not a goal per se;\n      rather,\
    \ it is a means to facilitate configuration procedures for\n      improved flexibility.\n"
- title: 2.3.  A Tentative Definition
  contents:
  - "2.3.  A Tentative Definition\n   We define Software-Defined Networking as the\
    \ set of techniques used\n   to facilitate the design, delivery, and operation\
    \ of network services\n   in a deterministic, dynamic, and scalable manner.  The\
    \ said\n   determinism refers to the ability to completely master the various\n\
    \   components of the service delivery chain, so that the service that\n   has\
    \ been delivered complies with what has been negotiated and\n   contractually\
    \ defined with the customer.\n   As such, determinism implies that the ability\
    \ to control how network\n   services are structured, designed, and delivered\
    \ and where traffic\n   should be forwarded in the network is for optimized resource\
    \ usage.\n   Although not explicitly restated in the following sections of the\n\
    \   document, determinism lies beneath any action that may be taken by a\n   service\
    \ provider once service parameter negotiation is completed,\n   from configuration\
    \ tasks to service delivery, fulfillment, and\n   assurance (see Section 2.4 below).\n\
    \   Such a definition assumes the introduction of a high level of\n   automation\
    \ in the overall service delivery and operation procedures.\n   Because networking\
    \ is software driven by nature, the above definition\n   does not emphasize the\
    \ claimed \"software-defined\" properties of SDN-\n   labeled solutions.\n"
- title: 2.4.  Functional Metadomains
  contents:
  - "2.4.  Functional Metadomains\n   SDN techniques can be classified into the following\
    \ functional\n   metadomains:\n   o  Techniques for the dynamic discovery of network\
    \ topology, devices,\n      and capabilities, along with relevant information\
    \ and data models\n      that are meant to precisely document such topology, devices,\
    \ and\n      their capabilities.\n   o  Techniques for exposing network services\
    \ and their characteristics\n      and for dynamically negotiating the set of\
    \ service parameters that\n      will be used to measure the level of quality\
    \ associated with the\n      delivery of a given service or a combination thereof.\
    \  An example\n      of this can be seen in [CPP].\n   o  Techniques used by service-requirement-derived\
    \ dynamic resource\n      allocation and policy enforcement schemes, so that networks\
    \ can be\n      programmed accordingly.  Decisions made to dynamically allocate\n\
    \      resources and enforce policies are typically the result of the\n      correlation\
    \ of various inputs, such as the status of available\n      resources in the network\
    \ at any given time, the number of customer\n      service subscription requests\
    \ that need to be processed over a\n      given period of time, the traffic forecasts,\
    \ the possible need to\n      trigger additional resource provisioning cycles\
    \ according to a\n      typical multi-year master plan, etc.\n   o  Dynamic feedback\
    \ mechanisms that are meant to assess how\n      efficiently a given policy (or\
    \ a set thereof) is enforced from a\n      service fulfillment and assurance perspective.\n"
- title: 3.  Reality Check
  contents:
  - "3.  Reality Check\n   The networking ecosystem has become awfully complex and\
    \ highly\n   demanding in terms of robustness, performance, scalability,\n   flexibility,\
    \ agility, etc.  This means, in particular, that service\n   providers and network\
    \ operators must deal with such complexity and\n   operate networking infrastructures\
    \ that can evolve easily, remain\n   scalable, guarantee robustness and availability,\
    \ and are resilient to\n   denial-of-service attacks.\n   The introduction of\
    \ new SDN-based networking features should\n   obviously take into account this\
    \ context, especially from a cost\n   impact assessment perspective.\n"
- title: 3.1.  Remember the Past
  contents:
  - "3.1.  Remember the Past\n   SDN techniques are not the next big thing per se\
    \ but rather a kind of\n   rebranding of proposals that have been investigated\
    \ for several\n   years, like active or programmable networks [AN] [PN].  As a\
    \ matter\n   of fact, some of the claimed \"new\" SDN features have been already\n\
    \   implemented (e.g., Network Management System (NMS) and Path\n   Computation\
    \ Element (PCE) [RFC4655]) and supported by vendors for\n   quite some time.\n\
    \   Some of these features have also been standardized (e.g., DNS-based\n   routing\
    \ [RFC1383]) that can be seen as an illustration of separated\n   control and\
    \ forwarding planes or Forwarding and Control Element\n   Separation (ForCES)\
    \ [RFC5810] [RFC5812].\n   Also, the policy-based management framework [RFC2753]\
    \ introduced in\n   the early 2000's was designed to orchestrate available resources\
    \ by\n   means of a typical Policy Decision Point (PDP), which masters\n   advanced\
    \ offline traffic engineering capabilities.  As such, this\n   framework has the\
    \ ability to interact with in-band software modules\n   embedded in controlled\
    \ devices (or not).\n   PDP is where policy decisions are made.  PDPs use a directory\
    \ service\n   for policy repository purposes.  The policy repository stores the\n\
    \   policy information that can be retrieved and updated by the PDP.  The\n  \
    \ PDP delivers policy rules to the Policy Enforcement Point (PEP) in\n   the form\
    \ of policy-provisioning information that includes\n   configuration information.\n\
    \   PEP is where policy decisions are applied.  PEPs are embedded in\n   (network)\
    \ devices, which are dynamically configured based upon the\n   policy-formatted\
    \ information that has been processed by the PEP.\n   PEPs request configuration\
    \ from the PDP, store the configuration\n   information in the Policy Information\
    \ Base (PIB), and delegate any\n   policy decision to the PDP.\n   SDN techniques\
    \ as a whole are an instantiation of the policy-based\n   management framework.\
    \  Within this context, SDN techniques can be\n   used to activate capabilities\
    \ on demand, to dynamically invoke\n   network and storage resources, and to operate\
    \ dynamically adaptive\n   networks according to events (e.g., alteration of the\
    \ network\n   topology), triggers (e.g., dynamic notification of a link failure),\n\
    \   etc.\n"
- title: 3.2.  Be Pragmatic
  contents:
  - "3.2.  Be Pragmatic\n   SDN approaches should be holistic, i.e., global and network\
    \ wide.  It\n   is not a matter of configuring devices one by one to enforce a\n\
    \   specific forwarding policy.  Instead, SDN techniques are about\n   configuring\
    \ and operating a whole range of devices at the scale of\n   the network for automated\
    \ service delivery [AUTOMATION], from service\n   negotiation (e.g., [CPNP]) and\
    \ creation (e.g., [SLA-EXCHANGE]) to\n   assurance and fulfillment.\n   Because\
    \ the complexity of activating SDN capabilities is largely\n   hidden from the\
    \ end user and is software handled, a clear\n   understanding of the overall ecosystem\
    \ is needed to figure out how to\n   manage this complexity and to what extent\
    \ this hidden complexity does\n   not have side effects on network operation.\n\
    \   As an example, SDN designs that assume a central decision-making\n   entity\
    \ must avoid single points of failure.  They must not affect\n   packet forwarding\
    \ performances either (e.g., transit delays must not\n   be impacted).\n   SDN\
    \ techniques are not necessary to develop new network services per\n   se.  The\
    \ basic service remains as (IP) connectivity that solicits\n   resources located\
    \ in the network.  SDN techniques can thus be seen as\n   another means to interact\
    \ with network service modules and invoke\n   both connectivity and storage resources\
    \ accordingly in order to meet\n   service-specific requirements.\n   By definition,\
    \ SDN technique activation and operation remain limited\n   to what is supported\
    \ by embedded software and hardware.  One cannot\n   expect SDN techniques to\
    \ support unlimited customizable features.\n"
- title: 3.3.  Measure Experience against Expectations
  contents:
  - "3.3.  Measure Experience against Expectations\n   Because several software modules\
    \ may be controlled by external\n   entities (typically, a PDP), there is a need\
    \ for a means to make sure\n   that what has been delivered complies with what\
    \ has been negotiated.\n   Such means belong to the set of SDN techniques.\n \
    \  These typical policy-based techniques should interact with both\n   Service\
    \ Structuring engines (that are meant to expose the service\n   characteristics\
    \ and possibly negotiate those characteristics) and the\n   network to continuously\
    \ assess whether the experienced network\n   behavior is compliant with the objectives\
    \ set by the Service\n   Structuring engine and those that may have been dynamically\n\
    \   negotiated with the customer (e.g., as captured in a CPP [CPP]\n   [CPNP]).\
    \  This requirement applies to several regions of a network,\n   including:\n\
    \   1.  At the interface between two adjacent IP network providers.\n   2.  At\
    \ the access interface between a service provider and an IP\n       network provider.\n\
    \   3.  At the interface between a customer and the IP network provider.\n   Ideally,\
    \ a fully automated service delivery procedure, from\n   negotiation, ordering,\
    \ and order processing to delivery, assurance,\n   and fulfillment, should be\
    \ supported at the cost of implications that\n   are discussed in Section 4.1.\
    \  This approach also assumes widely\n   adopted standard data and information\
    \ models in addition to\n   interfaces.\n"
- title: 3.4.  Design Carefully
  contents:
  - "3.4.  Design Carefully\n   Exposing open and programmable interfaces has a cost\
    \ from both\n   scalability and performance standpoints.\n   Maintaining hard-coded\
    \ performance optimization techniques is\n   encouraged.  So is the use of interfaces\
    \ that allow the direct\n   control of some engines (e.g., routing and forwarding)\
    \ without\n   requiring any in-between adaptation layers (generic objects to\n\
    \   vendor-specific command line interfaces (CLIs), for instance).\n   Nevertheless,\
    \ the use of vendor-specific access means to some engines\n   that it could be\
    \ beneficial from a performance standpoint, at the\n   cost of increasing the\
    \ complexity of configuration tasks.\n   SDN techniques will have to accommodate\
    \ vendor-specific components\n   anyway.  Indeed, these vendor-specific features\
    \ will not cease to\n   exist mainly because of the harsh competition.\n   The\
    \ introduction of new functions or devices that may jeopardize\n   network flexibility\
    \ should be avoided or at least carefully\n   considered in light of possible\
    \ performance and scalability impacts.\n   SDN-enabled devices will have to coexist\
    \ with legacy systems.\n   One single SDN network-wide deployment is, therefore,\
    \ very unlikely.\n   Instead, multiple instantiations of SDN techniques will be\n\
    \   progressively deployed and adapted to various network and service\n   segments.\n"
- title: 3.5.  On OpenFlow
  contents:
  - "3.5.  On OpenFlow\n   Empowering networking with in-band controllable modules\
    \ may rely upon\n   the OpenFlow protocol but also use other protocols to exchange\n\
    \   information between a control plane and a data plane.\n   Indeed, there are\
    \ many other candidate protocols that can be used for\n   the same or even a broader\
    \ purpose (e.g., resource reservation\n   purposes).  The forwarding of the configuration\
    \ information can, for\n   example, rely upon protocols like the Path Computation\
    \ Element (PCE)\n   Communication Protocol (PCEP) [RFC5440], the Network Configuration\n\
    \   Protocol (NETCONF) [RFC6241], COPS Usage for Policy Provisioning\n   (COPS-PR)\
    \ [RFC3084], Routing Policy Specification Language (RPSL)\n   [RFC2622], etc.\n\
    \   There is, therefore, no 1:1 relationship between OpenFlow and SDN.\n   Rather,\
    \ OpenFlow is one of the candidate protocols to convey specific\n   configuration\
    \ information towards devices.  As such, OpenFlow is one\n   possible component\
    \ of the global SDN toolkit.\n"
- title: 3.6.  Non-goals
  contents:
  - "3.6.  Non-goals\n   There are inevitable trade-offs to be found between operating\
    \ the\n   current networking ecosystem and introducing some SDN techniques,\n\
    \   possibly at the cost of introducing new technologies.  Operators do\n   not\
    \ have to choose between the two as both environments will have to\n   coexist.\n\
    \   In particular, the following considerations cannot justify the\n   deployment\
    \ of SDN techniques:\n   o  Fully flexible software implementations because the\
    \ claimed\n      flexibility remains limited by the software and hardware\n  \
    \    limitations, anyway.\n   o  Fully modular implementations are difficult to\
    \ achieve (because of\n      the implicit complexity) and may introduce extra\
    \ effort for\n      testing, validation, and troubleshooting.\n   o  Fully centralized\
    \ control systems that are likely to raise some\n      scalability issues.  Distributed\
    \ protocols and their ability to\n      react to some events (e.g., link failure)\
    \ in a timely manner\n      remains a cornerstone of scalable networks.  This\
    \ means that SDN\n      designs can rely upon a logical representation of centralized\n\
    \      features (an abstraction layer that would support inter-PDP\n      communications,\
    \ for example).\n"
- title: 4.  Discussion
  contents:
  - '4.  Discussion

    '
- title: 4.1.  Implications of Full Automation
  contents:
  - "4.1.  Implications of Full Automation\n   The path towards full automation is\
    \ paved with numerous challenges\n   and requirements, including:\n   o  Making\
    \ sure automation is well implemented so as to facilitate\n      testing (including\
    \ validation checks) and troubleshooting.\n      *  This suggests the need for\
    \ simulation tools that accurately\n         assess the impact of introducing\
    \ a high level of automation in\n         the overall service delivery procedure\
    \ to avoid a typical \"mad\n         robot\" syndrome, whose consequences can\
    \ be serious from control\n         and QoS standpoints, among others.\n     \
    \ *  This also suggests careful management of human expertise, so\n         that\
    \ network operators can use robust, flexible means to\n         automate repetitive\
    \ or error-prone tasks and then build on\n         automation or stringing together\
    \ multiple actions to create\n         increasingly complex tasks that require\
    \ less human interaction\n         (guidance and input) to complete.\n   o  Simplifying\
    \ and fostering service delivery, assurance, and\n      fulfillment, as well as\
    \ network failure detection, diagnosis, and\n      root cause analysis for cost\
    \ optimization.\n      *  Such cost optimization relates to improved service delivery\n\
    \         times as well as optimized human expertise (see above) and\n       \
    \  global, technology-agnostic service structuring and delivery\n         procedures.\
    \  In particular, the ability to inject new functions\n         in existing devices\
    \ should not assume a replacement of the said\n         devices but rather allow\
    \ smart investment capitalization.\n      *  This can be achieved thanks to automation,\
    \ possibly based upon\n         a logically centralized view of the network infrastructure\
    \ (or\n         a portion thereof), yielding the need for highly automated\n \
    \        topology, device and capabilities discovery means, and\n         operational\
    \ procedures.\n      *  The main intelligence resides in the PDP, which suggests\
    \ that\n         an important part of the SDN-related development effort should\n\
    \         focus on a detailed specification of the PDP function,\n         including\
    \ algorithms and behavioral state machineries that are\n         based upon a\
    \ complete set of standardized data and information\n         models.\n      *\
    \  These information models and data need to be carefully\n         structured\
    \ for efficiency and flexibility.  This probably\n         suggests that a set\
    \ of simplified pseudo-blocks can be\n         assembled as per the nature of\
    \ the service to be delivered.\n   o  The need for abstraction layers -- clear\
    \ interfaces between\n      business actors and between layers, let alone cross-layer\n\
    \      considerations, etc.  Such abstraction layers are invoked within\n    \
    \  the context of service structuring and packaging and are meant to\n      facilitate\
    \ the emergence of the following:\n      *  IP connectivity service exposure to\
    \ customers, peers,\n         applications, content/service providers, etc.  (an\
    \ example of\n         this can be seen in [CPP]).\n      *  Solutions that accommodate\
    \ IP connectivity service requirements\n         with network engineering objectives.\n\
    \      *  Dynamically adaptive decision-making processes, which can\n        \
    \ properly operate according to a set of input data and metrics,\n         such\
    \ as current resource usage and demand, traffic forecasts\n         and matrices,\
    \ etc., all for the sake of highly responsive\n         dynamic resource allocation\
    \ and policy enforcement schemes.\n   o  Better accommodation of technologically\
    \ heterogeneous networking\n      environments through the following:\n      *\
    \  Vendor-independent configuration procedures based upon the\n         enforcement\
    \ of vendor-agnostic generic policies instead of\n         vendor-specific languages.\n\
    \      *  Tools to aid manageability and orchestrate resources.\n      *  Avoiding\
    \ proxies and privileging direct interaction with\n         engines (e.g., routing\
    \ and forwarding).\n"
- title: 4.2.  Bootstrapping an SDN
  contents:
  - "4.2.  Bootstrapping an SDN\n   Means to dynamically discover the functional capabilities\
    \ of the\n   devices that will be steered by a PDP intelligence for automated\n\
    \   network service delivery need to be provided.  This is because the\n   acquisition\
    \ of the information related to what the network is\n   actually capable of will\
    \ help structure the PDP intelligence so that\n   policy provisioning information\
    \ can be derived accordingly.\n   A typical example would consist in documenting\
    \ a traffic engineering\n   policy based upon the dynamic discovery of the various\
    \ functions\n   supported by the network devices, as a function of the services\
    \ to be\n   delivered, thus yielding the establishment of different routes\n \
    \  towards the same destination depending on the nature of the traffic,\n   the\
    \ location of the functions that need to be invoked to forward such\n   traffic,\
    \ etc.\n   Such dynamic discovery capability can rely upon the exchange of\n \
    \  specific information by means of an IGP or BGP between network\n   devices\
    \ or between network devices and the PDP in legacy networking\n   environments.\
    \  The PDP can also send unsolicited commands towards\n   network devices to acquire\
    \ the description of their functional\n   capabilities in return and derive network\
    \ and service topologies\n   accordingly.\n   Of course, SDN techniques (as introduced\
    \ in Section 2.4) could be\n   deployed in an IGP-/BGP-free networking environment,\
    \ but the SDN\n   bootstrapping procedure in such an environment still assumes\
    \ the\n   support of the following capabilities:\n   o  Dynamically discover SDN\
    \ participating nodes (including the PDP)\n      and their respective capabilities\
    \ in a resilient manner, assuming\n      the mutual authentication of the PDP\
    \ and the participating devices\n      Section 5.  The integrity of the information\
    \ exchanged between the\n      PDP and the participating devices during the discovery\
    \ phase must\n      also be preserved;\n   o  Dynamically connect the PDP to the\
    \ participating nodes and avoid\n      any forwarding loops;\n   o  Dynamically\
    \ enable network services as a function of the device\n      capabilities and\
    \ (possibly) what has been dynamically negotiated\n      between the customer\
    \ and the service provider;\n   o  Dynamically check connectivity between the\
    \ PDP and the\n      participating nodes and between participating nodes for the\n\
    \      delivery of a given network service (or a set thereof);\n   o  Dynamically\
    \ assess the reachability scope as a function of the\n      service to be delivered;\n\
    \   o  Dynamically detect and diagnose failures, and proceed with\n      corrective\
    \ actions accordingly.\n   Likewise, the means to dynamically acquire the descriptive\n\
    \   information (including the base configuration) of any network device\n   that\
    \ may participate in the delivery of a given service should be\n   provided so\
    \ as to help the PDP structure the services that can be\n   delivered as a function\
    \ of the available resources, their location,\n   etc.\n   In IGP-/BGP-free networking\
    \ environments, a specific bootstrap\n   protocol may thus be required to support\
    \ the aforementioned\n   capabilities for proper PDP- and SDN-capable device operation,\
    \ in\n   addition to the possible need for a specific additional network that\n\
    \   would provide discovery and connectivity features.\n   In particular, SDN\
    \ design and operation in IGP-/BGP-free environments\n   should provide performances\
    \ similar to those of legacy environments\n   that run an IGP and BGP.  For example,\
    \ the underlying network should\n   remain operational even if connection with\
    \ the PDP has been lost.\n   Furthermore, operators should assess the cost of\
    \ introducing a new,\n   specific bootstrap protocol compared to the cost of integrating\
    \ the\n   aforementioned capabilities in existing IGP/BGP protocol machineries.\n\
    \   Since SDN-related features can be grafted into an existing network\n   infrastructure,\
    \ they may not be all enabled at once from a\n   bootstrapping perspective; a\
    \ gradual approach can be adopted instead.\n   A typical deployment example would\
    \ be to use an SDN decision-making\n   process as an emulation platform that would\
    \ help service providers\n   and operators make appropriate technical choices\
    \ before their actual\n   deployment in the network.\n   Finally, the completion\
    \ of the discovery procedure does not\n   necessarily mean that the network is\
    \ now fully operational.  The\n   operationality of the network usually assumes\
    \ a robust design based\n   upon resilience and high availability features.\n"
- title: 4.3.  Operating an SDN
  contents:
  - "4.3.  Operating an SDN\n   From an Operations and Management (OAM) standpoint\
    \ [RFC6291], running\n   an SDN-capable network raises several issues such as\
    \ those listed\n   below:\n   o  How do SDN service and network management blocks\
    \ interact?  For\n      example, how the results of the dynamic negotiation of\
    \ service\n      parameters with a customer or a set thereof over a given period\
    \ of\n      time will affect the PDP decision-making process (resource\n     \
    \ allocation, path computation, etc.).\n   o  What should be the appropriate OAM\
    \ tools for SDN network operation\n      (e.g., to check PDP or PEP reachability)?\n\
    \   o  How can performance (expressed in terms of service delivery time,\n   \
    \   for example) be optimized when the activation of software modules\n      is\
    \ controlled by an external entity (typically a PDP)?\n   o  To what extent does\
    \ an SDN implementation ease network\n      manageability, including service and\
    \ network diagnosis?\n   o  Should the \"control and data plane separation\" principle\
    \ be\n      applied to the whole network or a portion thereof, as a function\n\
    \      of the nature of the services to be delivered or by taking into\n     \
    \ account the technology that is currently deployed?\n   o  What is the impact\
    \ on the service provider's testing procedures\n      and methodologies (that\
    \ are used during validation and pre-\n      deployment phases)?  Particularly,\
    \ (1) how test cases will be\n      defined and executed when the activation of\
    \ customized modules is\n      supported, (2) what the methodology is to assess\
    \ the behavior of\n      SDN-controlled devices, (3) how test regression will\
    \ be conducted,\n      (4) etc.\n   o  How do SDN techniques impact service fulfillment\
    \ and assurance?\n      How the resulting behavior of SDN devices (completion\
    \ of\n      configuration tasks, for example) should be assessed against what\n\
    \      has been dynamically negotiated with a customer.  How to measure\n    \
    \  the efficiency of dynamically enforced policies as a function of\n      the\
    \ service that has been delivered.  How to measure that what has\n      been delivered\
    \ is compliant with what has been negotiated.  What\n      the impact is of SDN\
    \ techniques on troubleshooting practice.\n   o  Is there any risk to operate\
    \ frozen architectures because of\n      potential interoperability issues between\
    \ a controlled device and\n      an SDN controller?\n   o  How does the introduction\
    \ of SDN techniques affect the lifetime of\n      legacy systems?  Is there any\
    \ risk of (rapidly) obsoleting\n      existing technologies because of their hardware\
    \ or software\n      limitations?\n   The answers to the above questions are very\
    \ likely to be service\n   provider specific, depending on their technological\
    \ and business\n   environments.\n"
- title: 4.4.  The Intelligence Resides in the PDP
  contents:
  - "4.4.  The Intelligence Resides in the PDP\n   The proposed SDN definition in\
    \ Section 2.3 assumes an intelligence\n   that may reside in the control or the\
    \ management planes (or both).\n   This intelligence is typically represented\
    \ by a Policy Decision Point\n   (PDP) [RFC2753], which is one of the key functional\
    \ components of the\n   policy-based management framework.\n   SDN networking,\
    \ therefore, relies upon PDP functions that are capable\n   of processing various\
    \ input data (traffic forecasts, outcomes of\n   negotiation between customers\
    \ and service providers, resource status\n   as depicted in appropriate information\
    \ models instantiated in the\n   PIB, etc.) to make appropriate decisions.\n \
    \  The design and the operation of such PDP-based intelligence in a\n   scalable\
    \ manner remains a part of the major areas that need to be\n   investigated.\n\
    \   To avoid centralized design schemes, inter-PDP communication is\n   likely\
    \ to be required, and corresponding issues and solutions should\n   be considered.\
    \  Several PDP instances may thus be activated in a\n   given domain.  Because\
    \ each of these PDP instances may be responsible\n   for making decisions about\
    \ the enforcement of a specific policy\n   (e.g., one PDP for QoS policy enforcement\
    \ purposes, another one for\n   security policy enforcement purposes, etc.), an\
    \ inter-PDP\n   communication scheme is required for global PDP coordination and\n\
    \   correlation.\n   Inter-domain PDP exchanges may also be needed for specific\
    \ usages.\n   Examples of such exchanges are as follows: (1) during the network\n\
    \   attachment phase of a node to a visited network, the PDP operated by\n   the\
    \ visited network can contact the home PDP to retrieve the policies\n   to be\
    \ enforced for that node, and (2) various PDPs can collaborate in\n   order to\
    \ compute inter-domain paths that satisfy a set of traffic\n   performance guarantees.\n"
- title: 4.5.  Simplicity and Adaptability vs. Complexity
  contents:
  - "4.5.  Simplicity and Adaptability vs. Complexity\n   The functional metadomains\
    \ introduced in Section 2.4 assume the\n   introduction of a high level of automation,\
    \ from service negotiation\n   to delivery and operation.  Automation is the key\
    \ to simplicity, but\n   it must not be seen as a magic button that would be hit\
    \ by a network\n   administrator whenever a customer request has to be processed\
    \ or\n   additional resources need to be allocated.\n   The need for simplicity\
    \ and adaptability, thanks to automated\n   procedures, generally assumes some\
    \ complexity that lies beneath\n   automation.\n"
- title: 4.6.  Performance and Scalability
  contents:
  - "4.6.  Performance and Scalability\n   The combination of flexibility with software\
    \ inevitably raises\n   performance and scalability issues as a function of the\
    \ number and\n   the nature of the services to be delivered and their associated\n\
    \   dynamics.\n   For example, networks deployed in Data Centers (DCs) and that\
    \ rely\n   upon OpenFlow switches are unlikely to raise important FIB\n   scalability\
    \ issues.  Conversely, DC interconnect designs that aim to\n   dynamically manage\
    \ Virtual Machine (VM) mobility, possibly based upon\n   the dynamic enforcement\
    \ of specific QoS policies, may raise\n   scalability issues.\n   The claimed\
    \ flexibility of SDN networking in the latter context will\n   have to be carefully\
    \ investigated by operators.\n"
- title: 4.7.  Risk Assessment
  contents:
  - "4.7.  Risk Assessment\n   Various risks are to be assessed such as:\n   o  Evaluating\
    \ the risk of depending on a controller technology rather\n      than a device\
    \ technology.\n   o  Evaluating the risk of operating frozen architectures because\
    \ of\n      potential interoperability issues between a controller and a\n   \
    \   controlled device.\n   o  Assessing whether SDN-labeled solutions are likely\
    \ to obsolete\n      existing technologies because of hardware limitations.  From\
    \ a\n      technical standpoint, the ability to dynamically provision\n      resources\
    \ as a function of the services to be delivered may be\n      incompatible with\
    \ legacy routing systems because of their hardware\n      limitations, for example.\
    \  Likewise, from an economical\n      standpoint, the use of SDN solutions for\
    \ the sake of flexibility\n      and automation may dramatically impact Capital\
    \ Expenditure (CAPEX)\n      and Operational Expenditure (OPEX) budgets.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security is an important aspect of any SDN design\
    \ because it\n   conditions the robustness and reliability of the interactions\
    \ between\n   network and applications people for efficient access control\n \
    \  procedures and optimized protection of SDN resources against any kind\n   of\
    \ attack.  In particular, SDN security policies [SDNSEC] should make\n   sure\
    \ that SDN resources are properly safeguarded against actions that\n   may jeopardize\
    \ network or application operations.\n   In particular, service providers should\
    \ define procedures to assess\n   the reliability of software modules embedded\
    \ in SDN nodes.  Such\n   procedures should include the means to also assess the\
    \ behavior of\n   software components (under stress conditions), detect any exploitable\n\
    \   vulnerability, reliably proceed with software upgrades, etc.  These\n   security\
    \ guards should be activated during initial SDN node\n   deployment and activation\
    \ but also during SDN operation that implies\n   software upgrade procedures.\n\
    \   Although these procedures may not be SDN-specific (e.g., operators\n   are\
    \ familiar with firmware updates with or without service\n   disruption), it is\
    \ worth challenging existing practice in light of\n   SDN deployment and operation.\n\
    \   Likewise, PEP-PDP interactions suggest the need to make sure that (1)\n  \
    \ a PDP is entitled to solicit PEPs, so that they can apply the\n   decisions\
    \ made by the said PDP, (2) a PEP is entitled to solicit a\n   PDP for whatever\
    \ reason (request for additional configuration\n   information, notification about\
    \ the results of a set of configuration\n   tasks, etc.), (3) a PEP can accept\
    \ decisions made by a PDP, and (4)\n   communication between PDPs within a domain\
    \ or between domains is\n   properly secured (e.g., make sure a pair of PDPs are\
    \ entitled to\n   communicate with each other, make sure the confidentiality of\
    \ the\n   information exchanged between two PDPs can be preserved, etc.).\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Many thanks to R. Barnes, S. Bryant, S. Dawkins, A.\
    \ Farrel, S.\n   Farrell, W. George, J. Halpern, D. King, J. Hadi Salim, and T.\
    \ Tsou\n   for their comments.  Special thanks to P. Georgatos for the fruitful\n\
    \   discussions on SDN Interconnection (SDNI) in particular.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [AN]       Tennenhouse, D. and D. Wetherall, \"\
    Towards an Active\n              Network Architecture\", Multimedia Computing\
    \ and Networking\n              (MMCN), January 1996.\n   [AUTOMATION]\n     \
    \         Boucadair, M. and C. Jacquenet, \"Requirements for\n              Automated\
    \ (Configuration) Management\", Work in Progress,\n              January 2014.\n\
    \   [CPNP]     Boucadair, M. and C. Jacquenet, \"Connectivity Provisioning\n \
    \             Negotiation Protocol (CPNP)\", Work in Progress, October\n     \
    \         2013.\n   [CPP]      Boucadair, M., Jacquenet, C., and N. Wang, \"IP/MPLS\n\
    \              Connectivity Provisioning Profile\", Work in Progress,\n      \
    \        September 2012.\n   [LS-DISTRIB]\n              Gredler, H., Medved,\
    \ J., Previdi, S., Farrel, A., and S.\n              Ray, \"North-Bound Distribution\
    \ of Link-State and TE\n              Information using BGP\", Work in Progress,\
    \ November 2013.\n   [PN]       Campbell, A., De Meer, H., Kounavis, M., Kazuho,\
    \ M.,\n              Vincente, J., and D. Villela, \"A Survey of Programmable\n\
    \              Networks\", ACM SIGCOMM Computer Communication Review,\n      \
    \        April 1999.\n   [RFC1383]  Huitema, C., \"An Experiment in DNS Based\
    \ IP Routing\", RFC\n              1383, December 1992.\n   [RFC2622]  Alaettinoglu,\
    \ C., Villamizar, C., Gerich, E., Kessens, D.,\n              Meyer, D., Bates,\
    \ T., Karrenberg, D., and M. Terpstra,\n              \"Routing Policy Specification\
    \ Language (RPSL)\", RFC 2622,\n              June 1999.\n   [RFC2753]  Yavatkar,\
    \ R., Pendarakis, D., and R. Guerin, \"A Framework\n              for Policy-based\
    \ Admission Control\", RFC 2753, January\n              2000.\n   [RFC3084]  Chan,\
    \ K., Seligson, J., Durham, D., Gai, S., McCloghrie,\n              K., Herzog,\
    \ S., Reichmeyer, F., Yavatkar, R., and A.\n              Smith, \"COPS Usage\
    \ for Policy Provisioning (COPS-PR)\", RFC\n              3084, March 2001.\n\
    \   [RFC4655]  Farrel, A., Vasseur, J., and J. Ash, \"A Path Computation\n   \
    \           Element (PCE)-Based Architecture\", RFC 4655, August 2006.\n   [RFC5440]\
    \  Vasseur, JP. and JL. Le Roux, \"Path Computation Element\n              (PCE)\
    \ Communication Protocol (PCEP)\", RFC 5440, March\n              2009.\n   [RFC5810]\
    \  Doria, A., Hadi Salim, J., Haas, R., Khosravi, H., Wang,\n              W.,\
    \ Dong, L., Gopal, R., and J. Halpern, \"Forwarding and\n              Control\
    \ Element Separation (ForCES) Protocol\n              Specification\", RFC 5810,\
    \ March 2010.\n   [RFC5812]  Halpern, J. and J. Hadi Salim, \"Forwarding and Control\n\
    \              Element Separation (ForCES) Forwarding Element Model\", RFC\n \
    \             5812, March 2010.\n   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder,\
    \ J., and A.\n              Bierman, \"Network Configuration Protocol (NETCONF)\"\
    , RFC\n              6241, June 2011.\n   [RFC6291]  Andersson, L., van Helvoort,\
    \ H., Bonica, R., Romascanu,\n              D., and S. Mansfield, \"Guidelines\
    \ for the Use of the \"OAM\"\n              Acronym in the IETF\", BCP 161, RFC\
    \ 6291, June 2011.\n   [SDNSEC]   Hartman, S. and D. Zhang, \"Security Requirements\
    \ in the\n              Software Defined Networking Model\", Work in Progress,\n\
    \              April 2013.\n   [SLA-EXCHANGE]\n              Shah, S., Patel,\
    \ K., Bajaj, S., Tomotaki, L., and M.\n              Boucadair, \"Inter-domain\
    \ SLA Exchange\", Work in Progress,\n              November 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mohamed Boucadair\n   France Telecom\n   Rennes  35000\n\
    \   France\n   EMail: mohamed.boucadair@orange.com\n   Christian Jacquenet\n \
    \  France Telecom\n   Rennes\n   France\n   EMail: christian.jacquenet@orange.com\n"
