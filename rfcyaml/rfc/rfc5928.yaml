- contents:
  - '     Traversal Using Relays around NAT (TURN) Resolution Mechanism

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a resolution mechanism to generate a list
    of\n   server transport addresses that can be tried to create a Traversal\n   Using
    Relays around NAT (TURN) allocation.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5928.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Resolution Mechanism . . . . . . . . . . . . . . . . . . .
    . .  3\n   4.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 6\n     4.1.  Multiple Protocols . . . . . . . . . . . . . . . . . . . .  6\n
    \    4.2.  Remote Hosting . . . . . . . . . . . . . . . . . . . . . .  7\n     4.3.
    \ Compatibility with TURN  . . . . . . . . . . . . . . . . .  8\n   5.  Security
    Considerations  . . . . . . . . . . . . . . . . . . .  8\n   6.  IANA Considerations
    \ . . . . . . . . . . . . . . . . . . . . .  9\n     6.1.  RELAY Application Service
    Tag Registration . . . . . . . .  9\n     6.2.  turn.udp Application Protocol
    Tag Registration . . . . . .  9\n     6.3.  turn.tcp Application Protocol Tag
    Registration . . . . . .  9\n     6.4.  turn.tls Application Protocol Tag Registration
    . . . . . . 10\n   7.  Acknowledgements . . . . . . . . . . . . . . . . . . .
    . . . . 10\n   8.  References . . . . . . . . . . . . . . . . . . . . . . . .
    . . 10\n     8.1.  Normative References . . . . . . . . . . . . . . . . . . .
    10\n     8.2.  Informative References . . . . . . . . . . . . . . . . . . 11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Traversal Using Relays around NAT (TURN) specification
    [RFC5766]\n   defines a process for a TURN client to find TURN servers by using
    DNS\n   SRV resource records, but this process does not let the TURN server\n
    \  administrators provision the preferred TURN transport protocol\n   between
    the client and the server and does not allow the TURN client\n   to discover this
    preference.  This document defines an S-NAPTR\n   application [RFC3958] for this
    purpose.  This application defines\n   \"RELAY\" as an application service tag
    and \"turn.udp\", \"turn.tcp\", and\n   \"turn.tls\" as application protocol tags.\n
    \  Another usage of the resolution mechanism described in this document\n   would
    be Remote Hosting as described in [RFC3958], Section 4.4.  For\n   example, a
    Voice over IP (VoIP) provider who does not want to deploy\n   TURN servers could
    use the servers deployed by another company but\n   could still want to provide
    configuration parameters to its customers\n   without explicitly showing this
    relationship.  The mechanism permits\n   one to implement this indirection, without
    preventing the company\n   hosting the TURN servers from managing them as it sees
    fit.\n   [TURN-URI] can be used as a convenient way of carrying the four\n   components
    (see Section 3) needed by the resolution mechanism\n   described in this document.
    \ A reference implementation is available\n   [REF-IMPL].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Resolution Mechanism\n   The resolution mechanism is used only to create
    an allocation.  All\n   other transactions use the IP address, transport, and
    port used for a\n   successful allocation creation.  The resolution mechanism
    only\n   selects the transport used between the TURN client and the TURN\n   server.
    \ The transport used by the allocation itself is selected by\n   the REQUESTED-TRANSPORT
    attribute as described in Section 6.1 of\n   [RFC5766].\n   The resolution algorithm
    uses a boolean flag, <secure>; an IP address\n   or domain name, <host>; a port
    number that can be empty, <port>; and\n   a transport name that can be \"udp\",
    \"tcp\", or empty, <transport> as\n   input.  These four parameters are part of
    the user configuration of\n   the TURN client.  The resolution mechanism also
    uses as input a list,\n   ordered by preference of supported TURN transports (UDP,
    TCP,\n   Transport Layer Security (TLS)), that is provided by the application\n
    \  using the TURN client.  This list reflects the capabilities and\n   preferences
    of the application code that is using the S-NAPTR\n   resolver and TURN client,
    as opposed to the configuration parameters\n   that reflect the preferences of
    the user of the application.  The\n   output of the algorithm is a list of {IP
    address, transport, port}\n   tuples that a TURN client can try in order to create
    an allocation on\n   a TURN server.\n   An Allocate error response as specified
    in Section 6.4 of [RFC5766]\n   is processed as a failure, as specified by [RFC3958],
    Section 2.2.4.\n   The resolution stops when a TURN client gets a successful Allocate\n
    \  response from a TURN server.  After an allocation succeeds or all the\n   allocations
    fail, the resolution context MUST be discarded, and the\n   resolution algorithm
    MUST be restarted from the beginning for any\n   subsequent allocation.  Servers
    temporarily blacklisted as described\n   in Section 6.4 of [RFC5766], specifically
    because of a 437, 486, or\n   508 error code, MUST NOT be used for the specified
    duration, even if\n   returned by a subsequent resolution.\n   First, the resolution
    algorithm checks that the parameters can be\n   resolved with the list of TURN
    transports supported by the\n   application:\n   o  If <secure> is false and <transport>
    is defined as \"udp\" but the\n      list of TURN transports supported by the
    application does not\n      contain UDP, then the resolution MUST stop with an
    error.\n   o  If <secure> is false and <transport> is defined as \"tcp\" but the\n
    \     list of TURN transports supported by the application does not\n      contain
    TCP, then the resolution MUST stop with an error.\n   o  If <secure> is true and
    <transport> is defined as \"udp\", then the\n      resolution MUST stop with an
    error.\n   o  If <secure> is true and <transport> is defined as \"tcp\" but the\n
    \     list of TURN transports supported by the application does not\n      contain
    TLS, then the resolution MUST stop with an error.\n   o  If <secure> is true and
    <transport> is not defined but the list of\n      TURN transports supported by
    the application does not contain TLS,\n      then the resolution MUST stop with
    an error.\n   o  If <transport> is defined but unknown, then the resolution MUST\n
    \     stop with an error.\n   After verifying the validity of the parameters,
    the algorithm filters\n   the list of TURN transports supported by the application
    by removing\n   the UDP and TCP TURN transport if <secure> is true.  If the list
    of\n   TURN transports is empty after this filtering, the resolution MUST\n   stop
    with an error.\n   After filtering the list of TURN transports supported by the\n
    \  application, the algorithm applies the steps described below.  Note\n   that
    in some steps, <secure> and <transport> have to be converted to\n   a TURN transport.
    \ If <secure> is false and <transport> is defined as\n   \"udp\", then the TURN
    UDP transport is used.  If <secure> is false and\n   <transport> is defined as
    \"tcp\", then the TURN TCP transport is used.\n   If <secure> is true and <transport>
    is defined as \"tcp\", then the\n   TURN TLS transport is used.  This is summarized
    in Table 1.\n                +----------+-------------+----------------+\n                |
    <secure> | <transport> | TURN Transport |\n                +----------+-------------+----------------+\n
    \               | false    | \"udp\"       | UDP            |\n                |
    false    | \"tcp\"       | TCP            |\n                | true     | \"tcp\"
    \      | TLS            |\n                +----------+-------------+----------------+\n
    \                                 Table 1\n   1.  If <host> is an IP address,
    then it indicates the specific IP\n       address to be used.  If <port> is not
    defined, then either the\n       default port declared in [RFC5766] for the \"turn\"
    SRV service\n       name if <secure> is false, or the \"turns\" SRV service name
    if\n       <secure> is true, MUST be used for contacting the TURN server.\n       If
    <transport> is defined, then <secure> and <transport> are\n       converted to
    a TURN transport as specified in Table 1.  If\n       <transport> is not defined,
    the filtered TURN transports\n       supported by the application are tried by
    preference order.  If\n       the TURN client cannot contact a TURN server with
    this IP address\n       and port on any of the transports supported by the application,\n
    \      then the resolution MUST stop with an error.\n   2.  If <host> is a domain
    name and <port> is defined, then <host> is\n       resolved to a list of IP addresses
    via DNS A and AAAA queries.\n       If <transport> is defined, then <secure> and
    <transport> are\n       converted to a TURN transport as specified in Table 1.
    \ If\n       <transport> is not defined, the filtered TURN transports\n       supported
    by the application are tried in preference order.  The\n       TURN client can
    choose the order to contact the resolved IP\n       addresses in any implementation-specific
    way.  If the TURN client\n       cannot contact a TURN server with this port,
    the transport or\n       list of transports, and the resolved IP addresses, then
    the\n       resolution MUST stop with an error.\n   3.  If <host> is a domain
    name and <port> is not defined but\n       <transport> is defined, then the SRV
    algorithm defined in\n       [RFC2782] is used to generate a list of IP address
    and port\n       tuples. <host> is used as Name, a value of false for <secure>
    as\n       \"turn\" for Service, a value of true for <secure> as \"turns\" for\n
    \      Service, and <transport> as Protocol (Proto) in the SRV\n       algorithm.
    <secure> and <transport> are converted to a TURN\n       transport as specified
    in Table 1, and this transport is used\n       with each tuple for contacting
    the TURN server.  The SRV\n       algorithm recommends doing an A query if the
    SRV query returns an\n       error or no SRV RR; in this case, the default port
    declared in\n       [RFC5766] for the \"turn\" SRV service name if <secure> is
    false,\n       or the \"turns\" SRV service name if <secure> is true, MUST be
    used\n       for contacting the TURN server.  Also in this case, this\n       specification
    modifies the SRV algorithm by recommending an A and\n       AAAA query.  If the
    TURN client cannot contact a TURN server at\n       any of the IP address and
    port tuples returned by the SRV\n       algorithm with the transport converted
    from <secure> and\n       <transport>, then the resolution MUST stop with an error.\n
    \  4.  If <host> is a domain name and <port> and <transport> are not\n       defined,
    then <host> is converted to an ordered list of IP\n       address, port, and transport
    tuples via the Straightforward\n       Naming Authority Pointer (S-NAPTR) algorithm
    defined in [RFC3958]\n       by using <host> as the initial target domain name
    and \"RELAY\" as\n       the application service tag.  The filtered list of TURN\n
    \      transports supported by the application are converted in\n       application
    protocol tags by using \"turn.udp\" if the TURN\n       transport is UDP, \"turn.tcp\"
    if the TURN transport is TCP, and\n       \"turn.tls\" if the TURN transport is
    TLS.  The order to try the\n       application protocol tags is provided by the
    ranking of the first\n       set of NAPTR records.  If multiple application protocol
    tags have\n       the same ranking, the preferred order set by the application
    is\n       used.  If the first NAPTR query fails, the processing continues\n       in
    step 5.  If the TURN client cannot contact a TURN server with\n       any of the
    IP address, port, and transport tuples returned by the\n       S-NAPTR algorithm,
    then the resolution MUST stop with an error.\n   5.  If the first NAPTR query
    in the previous step does not return any\n       result, then the SRV algorithm
    defined in [RFC2782] is used to\n       generate a list of IP address and port
    tuples.  The SRV algorithm\n       is applied by using each transport in the filtered
    list of TURN\n       transports supported by the application for the Protocol
    (Proto),\n       <host> for the Name, \"turn\" for the Service if <secure> is
    false,\n       or \"turns\" for the Service if <secure> is true.  The same\n       transport
    that was used to generate a list of tuples is used with\n       each of these
    tuples for contacting the TURN server.  The SRV\n       algorithm recommends doing
    an A query if the SRV query returns an\n       error or no SRV RR; in this case,
    the default port declared in\n       [RFC5766] for the \"turn\" SRV service name
    if <secure> is false,\n       or the \"turns\" SRV service name if <secure> is
    true, MUST be used\n       for contacting the TURN server.  Also in this case,
    this\n       specification modifies the SRV algorithm by recommending an A and\n
    \      AAAA query.  If the TURN client cannot contact a TURN server at\n       any
    of the IP address and port tuples returned by the SRV\n       algorithm with the
    transports from the filtered list, then the\n       resolution MUST stop with
    an error.\n"
  title: 3.  Resolution Mechanism
- contents:
  - '4.  Examples

    '
  - contents:
    - "4.1.  Multiple Protocols\n   With the DNS RRs in Figure 1 and an ordered TURN
      transport list of\n   {TLS, TCP, UDP}, the resolution algorithm will convert
      the parameters\n   (<secure>=false, <host>=\"example.net\", <port>=empty,\n
      \  <transport>=empty) to the list of IP address, port, and protocol\n   tuples
      in Table 2.\n   example.net.\n   IN NAPTR 100 10 \"\" RELAY:turn.udp \"\" datagram.example.net.\n
      \  IN NAPTR 200 10 \"\" RELAY:turn.tcp:turn.tls \"\" stream.example.net.\n   datagram.example.net.\n
      \  IN NAPTR 100 10 S RELAY:turn.udp \"\" _turn._udp.example.net.\n   stream.example.net.\n
      \  IN NAPTR 100 10 S RELAY:turn.tcp \"\" _turn._tcp.example.net.\n   IN NAPTR
      200 10 A RELAY:turn.tls \"\" a.example.net.\n   _turn._udp.example.net.\n   IN
      SRV   0 0 3478 a.example.net.\n   _turn._tcp.example.net.\n   IN SRV   0 0 5000
      a.example.net.\n   a.example.net.\n   IN A     192.0.2.1\n                                 Figure
      1\n                 +-------+----------+------------+------+\n                 |
      Order | Protocol | IP address | Port |\n                 +-------+----------+------------+------+\n
      \                | 1     | UDP      | 192.0.2.1  | 3478 |\n                 |
      2     | TLS      | 192.0.2.1  | 5349 |\n                 | 3     | TCP      |
      192.0.2.1  | 5000 |\n                 +-------+----------+------------+------+\n
      \                                 Table 2\n"
    title: 4.1.  Multiple Protocols
  - contents:
    - "4.2.  Remote Hosting\n   In the example in Figure 2, a VoIP provider (example.com)
      is using\n   the TURN servers managed by the administrators of the example.net\n
      \  domain (defined in Figure 1).  The resolution algorithm using the\n   ordered
      TURN transport list of {TLS, TCP, UDP} would convert the same\n   parameters
      as in the previous example but with the <host> parameter\n   equal to \"example.com\"
      to the list of IP address, port, and protocol\n   tuples in Table 2.\n   example.com.\n
      \  IN NAPTR 100 10 \"\" RELAY:turn.udp:turn.tcp:turn.tls \"\" example.net.\n
      \                                Figure 2\n"
    title: 4.2.  Remote Hosting
  - contents:
    - "4.3.  Compatibility with TURN\n   In deployments where it is not possible to
      guarantee that all TURN\n   clients will support the resolution mechanism described
      in this\n   document, the DNS configuration should be done in a way that works\n
      \  with both this resolution mechanism and the mechanism described in\n   [RFC5766].
      \ The DNS RRs in Figure 3 can be used in conjunction with\n   the DNS RRs in
      Figures 1 and 2 for this purpose.\n   _turn._udp.example.com.\n   IN SRV   0
      0 3478 a.example.net.\n   _turn._tcp.example.com.\n   IN SRV   0 0 5000 a.example.net.\n
      \  _turns._tcp.example.com.\n   IN SRV   0 0 5349 a.example.net.\n                                 Figure
      3\n"
    title: 4.3.  Compatibility with TURN
  title: 4.  Examples
- contents:
  - "5.  Security Considerations\n   Security considerations for TURN are discussed
    in [RFC5766].\n   The application service tag and application protocol tags defined
    in\n   this document do not introduce any specific security issues beyond\n   the
    security considerations discussed in [RFC3958].  [RFC3958]\n   requests that an
    S-NAPTR application define some form of end-to-end\n   authentication to ensure
    that the correct destination has been\n   reached.  This is achieved by the Long-Term
    Credential Mechanism\n   defined in [RFC5389], which is mandatory for [RFC5766].\n
    \  Additionally, the usage of TLS [RFC5246] has the capability to\n   address
    the requirement.  In this case, the client MUST verify the\n   identity of the
    server by following the identification procedure in\n   Section 7.2.2 of [RFC5389]
    and by using the value of the <host>\n   parameter as the identity of the server
    to be verified.\n   An implication of this is that the server's certificate could
    need to\n   be changed when SRV or NAPTR records are added.  For example, a\n
    \  client using just A/AAAA records, and configured with\n   \"turnserver.example.net\",
    expects to find the name\n   \"turnserver.example.net\" in the certificate.  If
    a second client uses\n   SRV records and is configured with <host> parameter \"example.com\",
    it\n   expects to find \"example.com\" in the certificate, even if the SRV\n   record
    at _turns._tcp.example.com points to turnserver.example.net.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This section contains the registration information
    for one S-NAPTR\n   application service tag and three S-NAPTR application protocol
    tags\n   (in accordance with [RFC3958]).\n"
  - contents:
    - "6.1.  RELAY Application Service Tag Registration\n   Application Protocol Tag:
      RELAY\n   Intended usage: See Section 3.\n   Interoperability considerations:
      N/A\n   Security considerations: See Section 5.\n   Relevant publications: RFC
      5928\n   Contact information: Marc Petit-Huguenin <petithug@acm.org>\n   Author/Change
      controller: The IESG\n"
    title: 6.1.  RELAY Application Service Tag Registration
  - contents:
    - "6.2.  turn.udp Application Protocol Tag Registration\n   Application Protocol
      Tag: turn.udp\n   Intended usage: See Section 3.\n   Interoperability considerations:
      N/A\n   Security considerations: See Section 5.\n   Relevant publications: RFC
      5928\n   Contact information: Marc Petit-Huguenin <petithug@acm.org>\n   Author/Change
      controller: The IESG\n"
    title: 6.2.  turn.udp Application Protocol Tag Registration
  - contents:
    - "6.3.  turn.tcp Application Protocol Tag Registration\n   Application Protocol
      Tag: turn.tcp\n   Intended usage: See Section 3.\n   Interoperability considerations:
      N/A\n   Security considerations: See Section 5.\n   Relevant publications: RFC
      5928\n   Contact information: Marc Petit-Huguenin <petithug@acm.org>\n   Author/Change
      controller: The IESG\n"
    title: 6.3.  turn.tcp Application Protocol Tag Registration
  - contents:
    - "6.4.  turn.tls Application Protocol Tag Registration\n   Application Protocol
      Tag: turn.tls\n   Intended usage: See Section 3.\n   Interoperability considerations:
      N/A\n   Security considerations: See Section 5.\n   Relevant publications: RFC
      5928\n   Contact information: Marc Petit-Huguenin <petithug@acm.org>\n   Author/Change
      controller: The IESG\n"
    title: 6.4.  turn.tls Application Protocol Tag Registration
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   Thanks to Cullen Jennings, Alexey Melnikov, Scott Bradner,
    Spencer\n   Dawkins, Pasi Eronen, Margaret Wasserman, Magnus Westerlund, Juergen\n
    \  Schoenwaelder, Sean Turner, Ted Hardie, Dave Thaler, Alfred E.\n   Heggestad,
    Eilon Yardeni, Dan Wing, Alfred Hoenes, and Jim Kleck for\n   their comments,
    suggestions, and questions that helped to improve\n   this document.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2782]   Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS
      RR for\n               specifying the location of services (DNS SRV)\", RFC
      2782,\n               February 2000.\n   [RFC3958]   Daigle, L. and A. Newton,
      \"Domain-Based Application\n               Service Location Using SRV RRs and
      the Dynamic Delegation\n               Discovery Service (DDDS)\", RFC 3958,
      January 2005.\n   [RFC5246]   Dierks, T. and E. Rescorla, \"The Transport Layer
      Security\n               (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n
      \  [RFC5389]   Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n               \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n               October 2008.\n
      \  [RFC5766]   Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal\n               Using
      Relays around NAT (TURN): Relay Extensions to\n               Session Traversal
      Utilities for NAT (STUN)\", RFC 5766,\n               April 2010.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC2629]   Rose, M., \"Writing I-Ds and RFCs
      using XML\", RFC 2629,\n               June 1999.\n   [TURN-URI]  Petit-Huguenin,
      M., \"Traversal Using Relays around NAT\n               (TURN) Uniform Resource
      Identifiers\", Work in Progress,\n               January 2010.\n   [REF-IMPL]
      \ Petit-Huguenin, M., \"Reference Implementation of TURN\n               resolver
      and TURN URI parser\", January 2010, <http://\n               debian.implementers.org/stable/source/turnuri.tar.gz>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Author's Address\n   Marc Petit-Huguenin\n   Unaffiliated\n   EMail: petithug@acm.org\n"
  title: Author's Address
