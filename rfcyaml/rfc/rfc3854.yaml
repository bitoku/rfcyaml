- contents:
  - "     Securing X.400 Content with Secure/Multipurpose Internet Mail\n                          Extensions
    (S/MIME)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a protocol for adding cryptographic signature\n
    \  and encryption services to X.400 content with Secure/Multipurpose\n   Internet
    Mail Extensions (S/MIME).\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   The techniques described in the Cryptographic Message Syntax
    [CMS]\n   specification are general enough to support many different content\n
    \  types.  The [CMS] specification thus provides many options for\n   providing
    different security mechanisms.  In order to ensure\n   interoperability of systems
    within the X.400 community, it is\n   necessary to specify the use of CMS features
    to protect X.400 content\n   (called \"CMS-X.400\" in this document).\n"
  - contents:
    - "1.1.  Specification Overview\n   This document is intended to be similar to
      the S/MIME Version 3.1\n   Message Specification [MSG] except that it is tailored
      to the\n   requirements of X.400 content rather than Multipurpose Internet Mail\n
      \  Extensions (MIME).\n   This document defines how to create an X.400 content
      type that has\n   been cryptographically enhanced according to [CMS].  In order
      to\n   create S/MIME messages carrying X.400 content, an S/MIME agent has to\n
      \  follow specifications in this document, as well as the specifications\n   listed
      in [CMS].  This memo also defines new parameter values for the\n   application/pkcs7-mime
      MIME type that can be used to transport those\n   body parts.\n   Throughout
      this document, there are requirements and recommendations\n   made for how receiving
      agents handle incoming messages.  There are\n   separate requirements and recommendations
      for how sending agents\n   create outgoing messages.  In general, the best strategy
      is to \"be\n   liberal in what you receive and conservative in what you send\".
      \ Most\n   of the requirements are placed on the handling of incoming messages\n
      \  while the recommendations are mostly on the creation of outgoing\n   messages.\n
      \  This document does not address transport of CMS-X.400 content.  It is\n   assumed
      that CMS-X.400 content would be transported by Internet mail\n   systems, X.400,
      or other suitable transport.\n   This document describes applying security services
      to the content of\n   entire X.400 messages, which may or may not be IPMS messages.
      \ These\n   objects can be carried by several means, including SMTP-based mail\n
      \  and X.400 mail.  Note that cooperating S/MIME agents must support\n   common
      forms of message content in order to achieve interoperability.\n   If the CMS
      objects are sent as parts of an RFC 822 message, a\n   standard MIXER gateway
      [MIXER] will most likely choose to encapsulate\n   the message.  This is not
      likely to be a format that is usable by an\n   X.400 recipient.  MIXER is specifically
      focused on translation\n   between X.420 Interpersonal Messages and non-secure
      RFC822/MIME\n   messages.  The discussion of security-related body parts in
      sections\n   7.3 and 7.4 of [BODYMAP] is relevant to CMS messages.\n   Definition
      of gateway services to support relay of CMS object between\n   X.400 and SMTP
      environments is beyond the scope of this document.\n"
    title: 1.1.  Specification Overview
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"SHALL\", \"REQUIRED\", \"SHOULD\",
      \"RECOMMENDED\",\n   and \"MAY\" in this document are to be interpreted as described
      in BCP\n   14, RFC 2119 [MUSTSHOULD].\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Definitions\n   For the purposes of this document, the following definitions
      apply.\n   ASN.1:             Abstract Syntax Notation One, as defined in\n
      \                     ISO/IEC 8824.\n   BER:               Basic Encoding Rules
      for ASN.1, as defined in\n                      ISO/IEC 8825-1.\n   Certificate:
      \      A type that binds an entity's distinguished name\n                      to
      a public key with a digital signature.\n   DER:               Distinguished
      Encoding Rules for ASN.1, as defined\n                      in ISO/IEC 8825-1.\n
      \  7-bit data:        Text data with lines less than 998 characters\n                      long,
      where none of the characters have the 8th\n                      bit set, and
      there are no NULL characters.  <CR>\n                      and <LF> occur only
      as part of a <CR><LF> end of\n                      line delimiter.\n   8-bit
      data:        Text data with lines less than 998 characters, and\n                      where
      none of the characters are NULL characters.\n                      <CR> and
      <LF> occur only as part of a <CR><LF> end\n                      of line delimiter.\n
      \  Binary data:       Arbitrary data.\n   Transfer Encoding: A reversible transformation
      made on data so 8-bit\n                      or binary data may be sent via
      a channel that only\n                      transmits 7-bit data.\n   Receiving
      agent:   Software that interprets and processes S/MIME CMS\n                      objects.\n
      \  Sending agent:     Software that creates S/MIME CMS objects.\n   S/MIME agent:
      \     User software that is a receiving agent, a sending\n                      agent,
      or both.\n"
    title: 1.3.  Definitions
  - contents:
    - "1.4.  Compatibility with Prior Practice of S/MIME\n   There are believed to
      be no existing X.400 implementations that\n   support S/MIME version 2.  Further,
      signed interoperability between\n   X.400 and MIME systems that support S/MIME
      version 2 is not believed\n   to be easily achievable.  Therefore backward compatibility
      with\n   S/MIME version 2 is not considered to be a requirement for this\n   document.\n
      \  It is a goal of this document to, if possible, maintain backward\n   compatibility
      with existing X.400 implementations that employ S/MIME\n   v3.1 wrappers.\n"
    title: 1.4.  Compatibility with Prior Practice of S/MIME
  title: 1.  Introduction
- contents:
  - "2.  CMS Options\n   CMS allows for a wide variety of options in content and algorithm\n
    \  support.  This section puts forth a number of support requirements\n   and
    recommendations in order to achieve a base level of\n   interoperability among
    all CMS-X.400 implementations.  [CMS] provides\n   additional details regarding
    the use of the cryptographic algorithms.\n"
  - contents:
    - "2.1.  DigestAlgorithmIdentifier\n   Sending and receiving agents MUST support
      SHA-1 [CMSALG].\n"
    title: 2.1.  DigestAlgorithmIdentifier
  - contents:
    - "2.2.  SignatureAlgorithmIdentifier\n   Receiving agents MUST support id-dsa-with-sha1
      defined in [CMSALG].\n   The algorithm parameters MUST be absent (not encoded
      as NULL).\n   Receiving agents MUST support rsaEncryption, defined in [CMSALG].\n
      \  Sending agents MUST support either id-dsa-with-sha1 or rsaEncryption.\n"
    title: 2.2.  SignatureAlgorithmIdentifier
  - contents:
    - "2.3.  KeyEncryptionAlgorithmIdentifier\n   Sending and receiving agents MUST
      support rsaEncryption, defined in\n   [CMSALG].\n   Sending and receiving agents
      SHOULD support Diffie-Hellman defined in\n   [CMSALG].\n"
    title: 2.3.  KeyEncryptionAlgorithmIdentifier
  - contents:
    - "2.4.  General Syntax\n   The general syntax of CMS objects consist of an instance
      of the\n   ContentInfo structure containing one of several defined CMS content\n
      \  types.  CMS defines multiple content types.  Of these, only the\n   SignedData
      and EnvelopedData content types are used for CMS-X.400.\n"
    - contents:
      - "2.4.1.  SignedData Content Type\n   Sending agents MUST use the signedData
        content type to apply a\n   digital signature to a message or, in a degenerate
        case where there\n   is no signature information, to convey certificates.\n"
      title: 2.4.1.  SignedData Content Type
    - contents:
      - "2.4.2.  EnvelopedData Content Type\n   Senders MUST use the envelopedData
        content type to apply privacy\n   protection to a message.  A sender needs
        to have access to a public\n   key for each intended message recipient to
        use this service.  This\n   content type does not provide authentication.\n"
      title: 2.4.2.  EnvelopedData Content Type
    title: 2.4.  General Syntax
  - contents:
    - "2.5.  Attribute SignerInfo Type\n   The SignerInfo type allows the inclusion
      of unsigned and signed\n   attributes to be included along with a signature.\n
      \  Receiving agents MUST be able to handle zero or one instance of each\n   of
      the signed attributes listed here.  Sending agents SHOULD generate\n   one instance
      of each of the following signed attributes in each CMS-\n   X400 message:\n
      \  - signingTime\n   - sMIMECapabilities\n   - sMIMEEncryptionKeyPreference\n
      \  Requirements for processing of these attributes MUST be in accordance\n   with
      the S/MIME Message Specification [MSG].  Handling of the\n   signingTime attribute
      MUST comply with clause 2.5.1 of [MSG].\n   Handling of the sMIMECapabilities
      attribute MUST comply with clause\n   2.5.2 of [MSG].  Handling of the sMIMEEncryptionKeyPreference\n
      \  attribute MUST comply with clause 2.5.3 of [MSG].\n   Further, receiving
      agents SHOULD be able to handle zero or one\n   instance in the signed attributes
      of the signingCertificate attribute\n   [ESS].\n   Sending agents SHOULD generate
      one instance of the signingCertificate\n   signed attribute in each CMS-X400
      message.\n   Additional attributes and values for these attributes may be defined\n
      \  in the future.  Receiving agents SHOULD handle attributes or values\n   that
      they do not recognize in a graceful manner.\n   Sending agents that include
      signed attributes that are not listed\n   here SHOULD display those attributes
      to the user, so that the user is\n   aware of all of the data being signed.\n"
    title: 2.5.  Attribute SignerInfo Type
  - contents:
    - "2.6.  ContentEncryptionAlgorithmIdentifier\n   Sending and receiving agents
      MUST support encryption and decryption\n   with DES EDE3 CBC, hereinafter called
      \"tripleDES\" [CMSALG].  Sending\n   and receiving agents SHOULD support encryption
      and decryption with\n   AES [CMSAES] at a key size of 128, 192 and 256 bits.\n"
    title: 2.6.  ContentEncryptionAlgorithmIdentifier
  title: 2.  CMS Options
- contents:
  - "3.  Creating S/MIME Messages\n   This section describes the S/MIME message formats
    and how they can be\n   used to secure X.400 contents.  The S/MIME messages are
    a combination\n   of X.400 contents and CMS objects (i.e., a ContentInfo structure\n
    \  containing one of the CMS-defined content types).  The X.400 content\n   and
    other data, such as certificates and algorithm identifiers, are\n   given to CMS
    processing facilities which produces a CMS object.  This\n   document also describes
    how nested, secured S/MIME messages should be\n   formatted when encapsulating
    an X.400 content, and provides an\n   example of how a triple-wrapped S/MIME message
    over X.400 content\n   should be created if backwards compatibility with S/MIME
    version 2 is\n   of no concern.\n   S/MIME provides one format for enveloped-only
    data, several formats\n   for signed-only data, and several formats for signed
    and enveloped\n   data.  The different formats are required to accommodate several\n
    \  environments, in particular for signed messages.  Only one of these\n   signed
    formats is applicable to X.400.\n   Note that canonicalization is not required
    for X.400 content because\n   it is a binary rather than text encoding, and only
    the \"embedded\"\n   content version is used.  These dramatically simplify the
    description\n   of S/MIME productions.\n   The reader of this section is expected
    to understand X.400 as\n   described in [X.400] and S/MIME as described in [CMS]
    and [ESS].\n"
  - contents:
    - "3.1.  The X.400 Message Structure\n   This section reviews the X.400 message
      format.  An X.400 message has\n   two parts, the envelope and the content, as
      described in X.402\n   [X.400]:\n   Envelope --  An information object whose
      composition varies from one\n   transmittal step to another and that variously
      identifies the\n   message's originator and potential recipients, documents
      its previous\n   conveyance and directs its subsequent conveyance by the Message\n
      \  Transfer System (MTS), and characterizes its content.\n   Content -- The
      content is the piece of information that the\n   originating User Agent wants
      to be delivered to one or more\n   recipients.  The MTS neither examines nor
      modifies the content,\n   except for conversion, during its conveyance of the
      message.  MTS\n   conversion is not applicable to the scenario of this document
      because\n   such conversion is incompatible with CMS protection mechanisms.\n
      \  One piece of information borne by the envelope identifies the type of\n   the
      content.  The content type is an identifier (an ASN.1 OID or\n   Integer) that
      denotes the syntax and semantics of the content\n   overall.  This identifier
      enables the MTS to determine the message's\n   deliverability to particular
      users, and enables User Agents and\n   Message Stores to interpret and process
      the content.\n   Another piece of information borne by the envelope identifies
      the\n   types of encoded information represented in the content.  An encoded\n
      \  information type (EIT) is an identifier (an ASN.1 Object Identifier\n   or
      Integer) that denotes the medium and format (e.g., IA5 text or\n   Group 3 facsimile)
      of individual portions of the content.  It further\n   enables the MTS to determine
      the message's deliverability to\n   particular users, and to identify opportunities
      for it to make the\n   message deliverable by converting a portion of the content
      from one\n   EIT to another.\n   This document describes how S/MIME CMS is used
      to secure the content\n   part of X.400 messages.\n"
    title: 3.1.  The X.400 Message Structure
  - contents:
    - "3.2.  Creating a Signed-only Message with X.400 Content\n   The SignedData
      format as described in the Cryptographic Message\n   Syntax [CMS] MUST be used
      for signing of X.400 contents.\n   The X.400 content to be protected MUST be
      placed in the SignedData\n   encapContentInfo eContent field.  Note that this
      X.400 content SHOULD\n   maintain the encoding defined by the content type,
      but SHOULD NOT be\n   MIME wrapped.  The object identifier for the content type
      of the\n   protected X.400 content MUST be placed in the SignedData\n   encapContentInfo
      eContentType field.\n   The signedData object is encapsulated by a ContentInfo
      SEQUENCE with\n   a contentType of id-signedData.\n   Note that if SMTP [SMTP]
      is used to transport the resulting signed-\n   only message then the optional
      MIME encoding SHOULD be used.  If\n   binary transports such as X.400 are used
      then the optional MIME\n   encoding SHOULD NOT be used.\n   There are many reasons
      for this requirement.  An outer MIME wrapper\n   should not be used in X.400.
      \ Further, there are places where X.400\n   systems will interact with SMTP/MIME
      systems where the outer MIME\n   wrapper might be necessary.  Because this wrapping
      is outside the\n   security wrappers, any gateway system that might bridge the
      gap\n   between the two systems will be smart enough to apply or remove the\n
      \  outer MIME wrapper as appropriate.\n"
    - contents:
      - "3.2.1.  MIME Wrapping to Dynamically Support 7-bit Transport\n   The signedData
        object MAY optionally be wrapped in MIME.  This allows\n   the system to support
        7-bit transport when required.  This outer MIME\n   wrapper MAY be dynamically
        added or removed throughout the delivery\n   path since it is outside the
        signature and encryption wrappers.  In\n   this case the application/pkcs7-mime
        type as defined in S/MIME\n   Version 3.1 Message Specification [MSG] SHOULD
        be used with the\n   following parameters:\n   Content-Type: application/pkcs7-mime;
        smime-type=signed-x400\n   Content-Transfer-Encoding: base64\n   If the application/pkcs7-mime
        MIME type is used to support 7-bit\n   transport, the steps to create this
        format are:\n   Step 1.  The X.400 content to be signed is ASN.1 encoded.\n
        \  Step 2.  The ASN.1 encoded X.400 content and other required data is\n   processed
        into a CMS object of type SignedData.  The SignedData\n   structure is encapsulated
        by a ContentInfo SEQUENCE with a\n   contentType of id-signedData.\n   Step
        3.  The CMS object is inserted into an application/pkcs7-mime\n   MIME entity.\n
        \  The smime-type parameter for messages using application/pkcs7-mime\n   with
        SignedData is \"signed-x400\" as defined in [TRANSPORT].\n"
      title: 3.2.1.  MIME Wrapping to Dynamically Support 7-bit Transport
    title: 3.2.  Creating a Signed-only Message with X.400 Content
  - contents:
    - "3.3.  Creating an Enveloped-only Message with X.400 Content\n   This section
      describes the format for enveloping an X.400 content\n   without signing it.
      \ It is important to note that sending enveloped\n   but not signed messages
      does not provide for data integrity.  It is\n   possible to replace ciphertext
      in such a way that the processed\n   message will still be valid, but the meaning
      is altered.\n   The EnvelopedData format as described in [CMS] is used for\n
      \  confidentiality of the X.400 contents.\n   The X.400 content to be protected
      MUST be placed in the EnvelopedData\n   encryptedContentInfo encryptedContent
      field.  Note that this X.400\n   content SHOULD maintain the encoding defined
      by the content type, but\n   SHOULD NOT be MIME wrapped.  The object identifier
      for content type\n   of the protected X.400 content MUST be placed in the EnvelopedData\n
      \  encryptedContentInfo contentType field.\n   The envelopedData object is encapsulated
      by a ContentInfo SEQUENCE\n   with a contentType of id-envelopedData.\n   Note
      that if SMTP is used to transport the resulting enveloped-only\n   message then
      the optional MIME encoding SHOULD be used.  If other\n   transport (e.g., X.400)
      that is optimized for binary content is used\n   then the optional MIME encoding
      SHOULD NOT be used.\n"
    - contents:
      - "3.3.1.  MIME Wrapping to Dynamically Support 7-bits Transport\n   The envelopedData
        object MAY optionally be wrapped in MIME.  This\n   allows the system to support
        7-bit transport when required.  This\n   outer MIME wrapper MAY be dynamically
        added or removed throughout the\n   delivery path since it is outside the
        signature and encryption\n   wrappers.  In this case, the application/pkcs7-mime
        type as defined\n   in S/MIME Version 3.1 Message Specification [MSG] SHOULD
        be used with\n   the following parameters:\n   Content-Type: application/pkcs7-mime;
        smime-type=enveloped-x400\n   Content-Transfer-Encoding: base64\n   If the
        application/pkcs7-mime MIME type is used to support 7-bit\n   transport, the
        steps to create this format are:\n   Step 1.  The X.400 content to be enveloped
        is ASN.1 encoded.\n   Step 2.  The ASN.1 encoded X.400 content and other required
        data is\n   processed into a CMS object of type EnvelopedData.  In addition
        to\n   encrypting a copy of the content-encryption key for each recipient,
        a\n   copy of the content encryption key SHOULD be encrypted for the\n   originator
        and included in the EnvelopedData (see [CMS] Section 6).\n   The EnvelopedData
        structure is encapsulated by a ContentInfo SEQUENCE\n   with a contentType
        of id-envelopedData.\n   Step 3.  The CMS object is inserted into an application/pkcs7-mime\n
        \  MIME entity to allow for 7-bit transport.\n   If the application/pkcs7-mime
        MIME entity is used, the smime-type\n   parameter for enveloped-only messages
        is \"enveloped-x400\" as defined\n   in [TRANSPORT].\n"
      title: 3.3.1.  MIME Wrapping to Dynamically Support 7-bits Transport
    title: 3.3.  Creating an Enveloped-only Message with X.400 Content
  - contents:
    - "3.4.  Nested CMS Structures\n   To achieve signing and enveloping, any of the
      signed-only and\n   encrypted-only CMS objects may be nested.\n   When nesting
      is used, backwards compatibility with S/MIME version 2\n   requires that each
      layer of the nested message are identified with\n   the OID id-data, and when
      id-data is used a MIME wrapper is required.\n   This can potentially lead to
      an enormous amount of overhead and\n   should be avoided.  Because S/MIME version
      2 compatibility is of no\n   concern, implementations SHOULD directly encode
      the encapsulated\n   object as the eContent of the current structure.\n   MIME
      wrapping to support 7-bit transport is optional and need only be\n   used around
      the outermost CMS structure.  In this case, the\n   application/pkcs7 content
      type MUST be used.\n   An S/MIME implementation MUST be able to receive and
      process\n   arbitrarily nested CMS structures within reasonable resource limits\n
      \  of the recipient computer.\n"
    - contents:
      - "3.4.1.  Creating a Triple Wrapped Message With an X.400 Content\n   The Enhanced
        Security Services for S/MIME [ESS] document provides\n   examples of how nested,
        secured S/MIME messages are formatted.  ESS\n   provides an example of how
        a triple-wrapped S/MIME message is\n   formatted using application/pkcs7-mime
        for the signatures.\n   This section explains how an X.400 content may be
        conveyed within a\n   Triple Wrapped Message because S/MIME version 2 compatibility
        is of\n   no concern:\n   Step 1.  Start with the X.400 content (called the
        \"original\n   content\").  The X.400 content MUST be ASN.1 encoded, but SHOULD
        NOT\n   be MIME wrapped.\n   Step 2.  Place the ASN.1 encoded X.400 content
        to be protected in the\n   SignedData encapContentInfo eContent field.  Add
        any attributes that\n   are to be signed.\n   Step 3.  Sign the result of
        step 2 (the original content).  The\n   SignedData encapContentInfo eContentType
        MUST contain the object\n   identifier of the X.400 content.\n   Step 4.  Encrypt
        the result of step 3 as a single block.  The\n   EnvelopedData encryptedContentInfo
        contentType MUST be set to id-\n   signedData.  This is called the \"encrypted
        body\".\n   Step 5.  Using the same logic as in step 2 and 3 above, sign the\n
        \  result of step 4 (the encrypted body) as a single block.  The\n   SignedData
        encapContentInfo eContentType MUST be set to id-\n   envelopedData.  The outer
        SignedData structure is encapsulated by a\n   ContentInfo SEQUENCE with a
        contentType of id-signedData.\n   Step 6.  The resulting message is called
        the \"outer signature\", and\n   is also the triple wrapped message.\n   MIME
        wrapping to support 7-bit transport is optional and MUST only be\n   used
        around the outermost CMS structure.  In this case, the\n   application/pkcs7-mime
        content type MUST be used.  The smime-type in\n   the case of adding a MIME
        wrapper MUST be consistent with that\n   appropriate to the innermost protection
        layer.\n   In some instances, an smime-type will be created that only reflects\n
        \  one security service (such as certs-only, which applies only to\n   signed-only
        messages).  However, as new layers are wrapped, this\n   smime-type SHOULD
        be propagated upwards.  Thus if a certs-only\n   message were to be encrypted,
        or wrapped in a new SignedData\n   structure, the smime-type of certs-only
        should be propagated up to\n   the next MIME wrapper.  In other words, the
        innermost type is\n   reflected outwards.\n"
      title: 3.4.1.  Creating a Triple Wrapped Message With an X.400 Content
    title: 3.4.  Nested CMS Structures
  - contents:
    - "3.5.  Carrying Plaintext X.400 Content in SMTP\n   While the objectives of
      this document focus on protecting X.400\n   content with CMS wrappers, it is
      a reality that users do not\n   generally send all message using security.  It
      therefore stands to\n   reason that a means to carry non-secured X.400 content
      over the\n   chosen transport system must be seamlessly provided.  While\n   transporting
      X.400 content in an X.400 system is trivial, carrying\n   X.400 content in SMTP
      requires additional definition.\n   Content-Type: application/x400-content;
      content-type = 1*DIGIT *( \".\"\n   1*DIGIT)\n   where the content-type parameter
      value is either a single integer\n   (for a built-in content-type) or an OID
      in dotted notation (for an\n   extended content-type).\n"
    title: 3.5.  Carrying Plaintext X.400 Content in SMTP
  title: 3.  Creating S/MIME Messages
- contents:
  - '4.  Use of Certificates

    '
  - contents:
    - "4.1.  Certificate Enrollment\n   S/MIME v3.1 does not specify how to get a
      certificate from a\n   certificate authority, but instead mandates that every
      sending agent\n   already has a certificate.  The PKIX Working Group has, at
      the time\n   of this writing, produced two separate standards for certificate\n
      \  enrollment: CMP (RFC 2510) and CMC (RFC 2792).\n"
    title: 4.1.  Certificate Enrollment
  - contents:
    - "4.2.  Certificate Processing\n   A receiving agent MUST provide some certificate
      retrieval mechanism\n   in order to gain access to certificates for recipients
      of digital\n   envelopes.  This document does not cover how S/MIME agents handle\n
      \  certificates, only what they do after a certificate has been\n   validated
      or rejected.  S/MIME certification issues are covered in\n   [CERT31].\n   At
      a minimum, for initial S/MIME deployment, a user agent could\n   automatically
      generate a message to an intended recipient requesting\n   that recipient's
      certificate in a signed return message.  Receiving\n   and sending agents SHOULD
      also provide a mechanism to allow a user to\n   \"store and protect\" certificates
      for correspondents in such a way so\n   as to guarantee their later retrieval.\n"
    title: 4.2.  Certificate Processing
  - contents:
    - "4.3.  Certificate Name Use for X.400 Content\n   End-entity certificates used
      in the context of this document MAY\n   contain an X.400 address as described
      in [X.400].  The address must\n   be in the form of an \"ORAddress\".  The X.400
      address SHOULD be in the\n   subjectAltName extension, and SHOULD NOT be in
      the subject\n   distinguished name.\n   Sending agents SHOULD make the originator
      address in the X.400\n   content (e.g., the \"originator\" field in P22) match
      an X.400 address\n   in the signer's certificate.\n   Receiving agents MUST
      recognize X.400 addresses in the subjectAltName\n   field.\n   Receiving agents
      SHOULD check that the originator address in the\n   X.400 content matches an
      X.400 address in the signer's certificate,\n   if X.400 addresses are present
      in the certificate and an originator\n   address is available in the content.
      \ A receiving agent SHOULD\n   provide some explicit alternate processing of
      the message if this\n   comparison fails, which may be to display a message
      that shows the\n   recipient the addresses in the certificate or other certificate\n
      \  details.\n   The subject alternative name extension is used in S/MIME as
      the\n   preferred means to convey the X.400 address(es) that correspond to\n
      \  the entity for this certificate.  Any X.400 addresses present MUST be\n   encoded
      using the x400Address CHOICE of the GeneralName type.  Since\n   the SubjectAltName
      type is a SEQUENCE OF GeneralName, multiple X.400\n   addresses MAY be present.\n"
    title: 4.3.  Certificate Name Use for X.400 Content
  title: 4.  Use of Certificates
- contents:
  - "5.  Security Considerations\n   This specification introduces no new security
    concerns to the CMS or\n   S/MIME models.  Security issues are identified in section
    5 of [MSG],\n   section 6 of [ESS] and the Security Considerations section of
    [CMS].\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [CERT31]     Ramsdell, B., Ed., \"Secure/Multipurpose
      Internet Mail\n                Extensions (S/MIME) Version 3.1 Certificate Handling\",\n
      \               RFC 3850, July 2004.\n   [CMS]        Housley, R., \"Cryptographic
      Message Syntax (CMS)\", RFC\n                3852, July 2004.\n   [CMSAES]     Schaad,
      J., \"Use of the AES Encryption Algorithm in\n                CMS\", RFC 3565,
      July 2003.\n   [CMSALG]     Housley, R., \"Cryptographic Message Syntax (CMS)\n
      \               Algorithms\", RFC 3370, August 2002.\n   [ESS]        Hoffman,
      P., Editor \"Enhanced Security Services for\n                S/MIME\", RFC 2634,
      June 1999.\n   [MSG]        Ramsdell, B., Ed., \"Secure/Multipurpose Internet
      Mail\n                Extensions (S/MIME) Version 3.1 Message Specification\",\n
      \               RFC 3851, July 2004.\n   [MUSTSHOULD] Bradner, S., \"Key words
      for use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [TRANSPORT]  Hoffman, P. and C. Bonatti, \"Transporting\n
      \               Secure/Multipurpose Internet Mail Extensions (S/MIME)\n                Objects
      in X.400\", RFC 3855, July 2004.\n   [X.400]      ITU-T X.400 Series of Recommendations,
      Information\n                technology - Message Handling Systems (MHS).  X.400:\n
      \               System and Service Overview; X.402: Overall\n                Architecture;
      X.411: Message Transfer System: Abstract\n                Service Definition
      and Procedures; X.420: Interpersonal\n                Messaging System; 1996.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [BODYMAP]    Alvestrand, H., Ed., \"Mapping
      between X.400 and RFC-\n                822/MIME Message Bodies\", RFC 2157,
      January 1998.\n   [MIXER]      Kille, S., Ed., \"MIXER (Mime Internet X.400
      Enhanced\n                Relay): Mapping between X.400 and RFC 822/MIME\",
      RFC\n                2156, January 1998.\n   [SMTP]       Klensin, J., \"Simple
      Mail Transfer Protocol\", RFC 2821,\n                April, 2001.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "7.  Editors' Addresses\n   Paul Hoffman\n   Internet Mail Consortium\n   127
    Segre Place\n   Santa Cruz, CA  95060  USA\n   EMail: phoffman@imc.org\n   Chris
    Bonatti\n   IECA, Inc.\n   15309 Turkey Foot Road\n   Darnestown, MD  20878-3640
    \ USA\n   EMail: bonattic@ieca.com\n   Anders Eggen\n   Forsvarets Forskningsinstitutt\n
    \  Postboks 25\n   2027 Kjeller, Norway\n   EMail: anders.eggen@ffi.no\n"
  title: 7.  Editors' Addresses
- contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: 8.  Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
