The 128 Bit Blockcipher CLEFIA Abstract
This document describes the specification of the blockcipher CLEFIA.
CLEFIA is a 128 bit blockcipher, with key lengths of 128, 192, and 256 bits, which is compatible with the interface of the Advanced Encryption Standard (AES).
The algorithm of CLEFIA was published in 2007, and its security has been scrutinized in the public community.
CLEFIA is one of the new generation lightweight blockcipher algorithms designed after AES.
Among them, CLEFIA offers high performance in software and hardware as well as lightweight implementation in hardware.
CLEFIA will be of benefit to the Internet, which will be connected to more distributed and constrained devices.
Due to the widespread use of the Internet, devices with limited capabilities, e.g., wireless sensors, are connected to the network.
In order to realize enough security for the network, cryptographic technologies suitable for such constrained devices are very important.
This recent technology is called "lightweight cryptography", and the demand for lightweight cryptography is increasing.
In order to satisfy these needs, a 128 bit blockcipher, CLEFIA, was designed based on state of the art techniques
CLEFIA is a 128 bit blockcipher, with key lengths of 128, 192, and 256 bits, which is compatible with the interface of AES [FIPS 197].
Since the cipher algorithm was published in 2007, its security has been scrutinized in the public community, but no security weaknesses have been reported so far.
CLEFIA is a lightweight blockcipher, since it can be implemented within 3 Kgates using a 0.13 um standard Complementary Metal Oxide Semiconductor (CMOS)
Application Specific Integrated Circuit (ASIC) library.
Many of the lightweight cryptographic algorithms sacrifice security and/or speed; however, CLEFIA provides high level security of 128, 192, and 256 bits and high performance in software and hardware.
CLEFIA will be of benefit to the Internet, which will be connected to more distributed and resource constrained devices.
CLEFIA is proposed in ISO/IEC 29192 2 [ISO29192 2] and the CRYPTREC project for the revision of the e Government recommended ciphers list in Japan [CRYPTREC].
Further information about CLEFIA, including reference implementation, test vectors, and security and performance evaluation, is available from http://www.sony.net/clefia/. 2.
This section describes mathematical notations, conventions, and symbols used throughout this document.
Concatenation of a and b (a,b) or (a b) :
Vector style representation of a b a
Updating a value of a by a value of b
: Transposition of a vector or a matrix
: Multiplication in GF(2^n) over a defined polynomial 3.
The CLEFIA algorithm consists of two parts: a data processing part and a key scheduling part.
The data processing part of CLEFIA consists of functions ENCr for encryption and DECr for decryption.
The encryption/decryption process is as follows: Step 1.
Encrypting/decrypting each block of data using ENCr/DECr
The process of the key scheduling is described in Section 6, and the definitions of ENCr and DECr are explained in Section 5.
CLEFIA supports 128 bit, 192 bit, and 256 bit keys, and
the key scheduling and ENCr/DECr should be appropriately selected for its key length.
GFN {d,r} We first define the function GFN {d,r}, which is a fundamental structure for CLEFIA, and then define a data processing part and a key scheduling part.
CLEFIA uses a 4 branch and an 8 branch generalized Feistel network.
The 4 branch generalized Feistel network is used in the data processing part and the key scheduling for a 128 bit key.
The 8 branch generalized Feistel network is applied in the key scheduling for a 192 bit/256 bit key.
We denote the d branch r round generalized Feistel network employed in CLEFIA as GFN {d,r}.
For d pairs of 32 bit inputs Xi and outputs Yi (0 <  i < d), and dr/2 32 bit round keys RK {i}
(0 <  i < dr/2), GFN {d,r} (d   4,8) is defined as follows.
output: 32 bit data Y0, Y1, Y2, Y3 Step 1.
For i   0 to r 1 do the following: Step 2.1.
T1   T1 XOR F0(RK {2i},T0), T3   T3 XOR F1(RK {2i   1}, T2) Step 2.2.
For i   0 to r 1 do the following: Step 2.1.
T1   T1 XOR F0(RK {4i}, T0), T3   T3 XOR F1(RK {4i   1}, T2), T5   T5 XOR F0(RK {4i   2}, T4), T7   T7 XOR F1(RK {4i   3}, T6) Step 2.2.
The inverse function GFNINV {4,r} is obtained by changing the order of RK {i} and the direction of word rotation at Step 2.2 and Step 3 in GFN {4,r}.
output: 32 bit data Y0, Y1, Y2, Y3 Step 1.
For i   0 to r 1 do the following: Step 2.1.
T1   T1 XOR F0(RK {
2}, T0), T3   T3 XOR F1(RK {2(r i) 1}, T2) Step 2.2.
F Functions Two F functions F0 and F1 used in GFN {d,r} are defined as follows:
input : 32 bit round key RK, 32 bit data x, output: 32 bit data y Step 1.
T   RK XOR x Step 2.
T3, where Ti is 8 bit data, T0
, T1   S1(T1), T2   S0(T2), T3   S1(T3)
y2   y3, where yi is 8 bit data, y   M0 trans((T0, T1, T2, T3))
input : 32 bit round key RK, 32 bit data x, output: 32 bit data y Step 1.
T   RK XOR x Step 2.
T3, where Ti is 8 bit data, T0
, T1   S0(T1), T2   S1(T2), T3
y2   y3, where yi is 8 bit data, y   M1 trans((T0, T1, T2, T3))
S0 and S1 are nonlinear 8 bit S boxes, and M0 and M1 are 4x4 diffusion matrices described in the following section.
In each F function, two S boxes are used in the different order, and a different matrix is used.
S Boxes CLEFIA employs two different types of 8 bit S boxes: S0 is based on four 4 bit S boxes, and S1 is based on the inverse function over GF(2^8)
Tables 1 and 2 show the output values of S0 and S1, respectively.
In these tables, all values are expressed in hexadecimal form.
For an 8 bit input of an S box, the upper 4 bits indicate a row and the lower 4 bits indicate a column.
For example, if a value 0xab is input, 0x7e is output by S0 because it is on the cross line of the row indexed by "a." and the column indexed by ".b".
57 49 d1 c6 2f 33 74 fb 95
ee 85 b1 c4 0a 76 3d 63
bf a1 19 65 f7 7a 32 20 06 ce e4 83 9d 5b 4c d8 3.
42 5d 2e e8 d4 9b 0f 13 3c 89 67
a4 be fd 8c 12 00 97 da 78 e1 cf
6b 39 43 55 26 5.
cc dd eb 54 b3 8f 4e 16 fa 22 a5 77 09 61 6.
d6 2a 53 37 45 c1 6c ae
ef 70 08 99 8b 1d f2 b4 7.
e9 c7 9f 4a 31 25 fe 7c d3
cd e2 34 50 9e dc 11 05 2b b7
9. 03 75 86 f1 6a a7 40 c2 b9 2c
db 1f 58 94 3e
ed a. fc 1b a0 04
b8 8d e6 59 62 93 35 7e
b. 15 f3 ba 7f a6 69 c8 4d 87
e0 de 24 52 c. 7b 0c
5a e7 ad d5 23
f4 46 3f 91 c9 d. 6e 84
72 bb 0d 18 d9 96 f0 5f 41 ac 27 c5
a3 79 f6 2d 38 1a 44
cb 90 f. 9a 36 e5 29
51 f8 10 d7 bc 02 7d 8e Table 2:
e9 4e 9d 0a 3d b8 36 b4 38
13 34 0c d9 1.
bf 74 94 8f b7 9c e5 dc 9e 07 49 4f 98 2c
12 eb cd b3 92 e7 41 60 e3 21 27 3b e6 19 d2 0e 3. 91 11 c7 3f 2a 8e a1 bc
2b c8 c5 0f 5b f3 87 8b 4.
f5 de 20 c6 a7 84 ce d8 65 51 c9 a4
25 5d 9b 31 e8 3e 0d d7 80 ff 69 8a ba 0b 73 5c 6.
6e 54 15 62 f6 35 30 52 a3 16 d3 28 32 fa aa 5e 7.
cf ea ed 78 33 58 09 7b 63 c0 c1 46
55 04 c4 86 39 77 82 ec 40 18 90 97 59 dd 83 1f 9.
24 64 7c a5 56 48 08 85 d0 61 26
70 05 d1 45 8c 23 1c f0 ee 89 ad b. 7a 4b c2
2d f4 cb b1 4a a8 c. b5 22
47 3a d5 10 4c 72 cc 00
f9 e0 fd e2 fe ae
d. f8 5f ab f1 1b
42 81 d6 be 44 29 a6 57 b9 af f2 e. d4 75 66
3c 7f 8d 1a 88
ac f. f7 e4 79
96 a2 fc 6d b2 6b 03
e1 2e 7d 14 95 1d 4.4.
The multiplications of a diffusion matrix M0 or M1, and a vector T in Section 4.2, are obtained as follows.
y   M0 trans((T0, T1, T2, T3))
) XOR (0x06   T3), y1
(0x04   T3), y2   (0x04   T0)
XOR (0x0a   T3), y1   (0x08   T0)
XOR (0x02   T3), y2   (0x02   T0)
XOR (0x02   T1) XOR (0x08   T2)
In the above equations,   denotes a multiplication in GF(2^8) defined by the lexicographically first primitive polynomial z^8
The constants 0x02, 0x04, 0x06, 0x08, and 0x0a are represented in hexadecimal form of finite field polynomials.
For example, 0x02 identifies the finite field element z.
Ti is also interpreted as a finite field element.
The mathematical background of two diffusion matrices and their choices are explained in [CLEFIA2].
The data processing part of CLEFIA consists of ENCr for encryption and DECr for decryption.
ENCr and DECr are based on the 4 branch generalized Feistel structure GFN {4,r}.
Let P,C be 128 bit plaintext and ciphertext, and let Pi, Ci (0
i < 4) be divided 32 bit plaintexts and ciphertexts where P   P0   P1   P2   P3 and C   C0   C1   C2   C3, and let WK0, WK1, WK2, WK3 be 32 bit whitening keys and RK {i} (0 <  i < 2r) be 32 bit round keys provided by the key scheduling part.
Then, r round encryption function
ENCr is defined as follows:
The decryption function DECr is defined as follows: Step 1.
P0   P1   P2   P3   T0
The number of rounds, r, is 18, 22, and 26 for 128 bit, 192 bit, and 256 bit keys, respectively.
The total number of RK {i} depends on the key length.
The data processing part requires 36, 44, and 52 round keys for 128 bit, 192 bit, and 256 bit keys, respectively.
The key scheduling part of CLEFIA supports 128 bit, 192 bit, and 256 bit keys and outputs whitening keys WKi (0 <  i < 4) and round keys RK {j} (0 <  j < 2r) for the data processing part.
We first define the DoubleSwap function, which is used in the key scheduling part.
For 128 bit data X, Y   Sigma(X)
X[121 127]   X[0 6]   X[64 120], where X[a b] denotes a bit string cut from the a th bit to the b th bit of X.  Bit 0 is the most significant bit.
The key scheduling part of CLEFIA provides whitening keys and round keys for the data processing part.
Let K be the key and
L be an intermediate key, and the key scheduling part consists of the following two steps.
Generating L from K. 2.
Expanding K and L (Generating WKi and RK {j}).
To generate L from K, the key schedule for a 128 bit key uses a 128 bit permutation GFN {4,12}, while the key schedules for 192/256 bit keys use a 256 bit permutation GFN {8,10}.
Key Scheduling for a 128 Bit Key
The 128 bit intermediate key
L is generated by applying GFN {4,12}, which takes twenty four 32 bit constant values
i < 24) as round keys and K   K0   K1
K2   K3 as an input.
Then, K and L are used to generate WKi (0
i < 4) and RK {j} (0 <  j < 36) in the following steps.
In the latter part, thirty six 32 bit constant values CON 128[i] (24 <  i < 60) are used.
The generation steps of CON 128[i] are explained in Section 6.6.
(Generating L from K) Step 1.
For i   0 to 8 do the following: T   L XOR (CON 128[24   4i]
T   T XOR K RK {4i}   RK {4i   1}
RK {4i   3}   T 6.4.
Key Scheduling for a 192 Bit Key Two 128 bit values
KL and KR are generated from a 192 bit key K   K0   K1   K2
K4   K5, where Ki is 32 bit data.
Then, two 128 bit values LL and LR are generated by applying GFN {8,10}, which takes CON 192[i]
<  i < 40) as round keys and KL KR as a 256 bit input.
Then, KL,KR and LL,LR are used to generate WKi (0
i < 4) and RK {j} (0 <  j < 44) in the following steps.
In the latter part, forty four 32 bit constant values CON 192[i] (40 <  i < 84) are used.
The following steps show the 192 bit/256 bit key scheduling.
For the 192 bit key scheduling, the value of k is set as 192.
Key Scheduling for a 256 Bit Key
The key scheduling for a 256 bit key is almost the same as that for a 192 bit key, except for constant values, the required number of RKi, and the initialization of KR.
For a 256 bit key, the value of k is set as 256, and the steps are almost the same as in the 192 bit key case.
The difference is that we use CON 256[i](0 <  i < 40) as round keys to generate LL and LR, and then to generate RK {j} (0 <  j < 52), we use fifty two 32 bit constant values CON 256[i](40
(Generating LL,LR from KL,KR for a k bit key) Step 1.
Set k   192 or k
: KL   K0   K1   K2   K3, KR   K4   K5   K6   K7 Step 3.
(Expanding KL,KR and LL,LR for a k bit key) Step 4.
KL XOR KR Step 5.
For i   0 to 10 (if k   192), or 12 (if k   256) do the following: If (i mod 4)   0 or 1:
T   LL XOR (CON k[40   4i]
: T   T XOR KR else: T   LR XOR (CON k[40   4i]
if i is odd: T   T XOR KL RK {4i}
RK {4i   3}   T 6.6.
32 bit constant values CON k[i] are used in the key scheduling algorithm.
We need 60, 84, and 92 constant values for 128 bit, 192 bit, and 256 bit keys, respectively.
(  (e 2)2^16) and Q(16)
(  (pi 3)2^16), where e is the base of the natural logarithm (2.71828...)
CON k[i], for k   128,192,256, are generated as follows (see Table 3 for the repetition numbers l k and the initial values IV k).
For i   0 to l k 1 do the following: Step 2.1.
In Step 2.3, the multiplications are performed in the field GF(2^16) defined by a primitive polynomial z^16
0x0002^{ 1} denotes the multiplicative inverse of the finite field element z.
The selection criteria of IV and the primitive polynomial are shown in [CLEFIA1].
Table 3: Required Numbers of Constant Values k
Tables 4 6 show the values of T k[i](k   128,192,256), and Tables 7 9 show the values of CON k[i](k   128,192,256).
7 T 128[i] 428a 2145
fcb4 7e5a 3f2d cb8e 65c7
T 128[i] 87aa 43d5 f5f2
e5a3 a6c9 877c 43be 21df
T 192[i] 938c 49c6 24e3 c669
22d2 1169 dcac 6e56 372b
] 9b17 9993 98d1 9870
] d0db bc75 8a22 4511
] 0f69 d3ac 69d6 34eb
Table 7: CON 128[i] (
7c73b3a7 Table 8: CON 192[i] (0
] bcbde947 d09c5c0b b24ff4a3 de6eae05
The security of CLEFIA has been scrutinized in the public community, but no security weaknesses have been found for full round CLEFIA to date, neither by the designers nor by independent cryptographers.
Security evaluation by the designers is described in [CLEFIA3], and a list of published cryptanalysis results by external cryptographers is available from http://www.sony.net/Products/cryptography/clefia/technical/ related
In this appendix, we give test vectors of CLEFIA for each key length.
The data are expressed in hexadecimal form.
33221100 plaintext  00010203 04050607 08090a0b 0c0d0e0f
0c0d0e0f ciphertext e2482f64 9f028dc4 80dda184 fde181ad
30201000 plaintext  00010203 04050607 08090a0b
fa48b38a Appendix B.  Test Vectors (Intermediate Values)
dd429ec5 e220b3af c9135e73 RK {8,9,10,11}
