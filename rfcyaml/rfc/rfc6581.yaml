- contents:
  - "              Enhanced Remote Direct Memory Access (RDMA)\n                        Connection
    Establishment\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document updates RFC 5043 and RFC 5044 by extending Marker\n
    \  Protocol Data Unit (PDU) Aligned Framing (MPA) negotiation for Remote\n   Direct
    Memory Access (RDMA) connection establishment.  The first\n   enhancement extends
    RFC 5044, enabling peer-to-peer connection\n   establishment over MPA / Transmission
    Control Protocol (TCP).  The\n   second enhancement extends both RFC 5043 and
    RFC 5044, by providing\n   an option for standardized exchange of RDMA-layer connection\n
    \  configuration.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by\n   the Internet Engineering Steering Group (IESG).
    \ Further\n   information on Internet Standards is available in Section 2 of\n
    \  RFC 5741.\n   Information about the current status of this document, any\n
    \  errata, and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6581.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Summary of Changes Affecting RFC 5044 ......................4\n      1.2.
    Summary of Changes Affecting RFC 5043 ......................4\n   2. Requirements
    Language ...........................................4\n   3. Definitions .....................................................4\n
    \  4. Motivations .....................................................7\n      4.1.
    Standardization of RDMA Read Parameter Configuration .......7\n      4.2. Enabling
    MPA Mode ..........................................9\n      4.3. Lack of Explicit
    RTR in MPA Request/Reply Exchange ........10\n      4.4. Limitations on ULP Workaround
    .............................11\n           4.4.1. Transport Neutral APIs .............................11\n
    \          4.4.2. Work/Completion Queue Accounting ...................11\n           4.4.3.
    Host-based Implementation of MPA Fencing ...........12\n   5. Enhanced MPA Connection
    Establishment ..........................13\n   6. Enhanced MPA Request/Reply Frames
    ..............................14\n   7. Enhanced SCTP Session Control Chunks ...........................15\n
    \  8. MPA Error Reporting ............................................16\n   9.
    Enhanced RDMA Connection Establishment Data ....................17\n      9.1.
    IRD and ORD Negotiation ...................................18\n      9.2. Peer-to-Peer
    Connection Negotiation .......................20\n      9.3. Enhanced Connection
    Negotiation Flow ......................21\n   10. Interoperability ..............................................21\n
    \  11. IANA Considerations ...........................................22\n   12.
    Security Considerations .......................................23\n   13. Acknowledgements
    ..............................................23\n   14. References ....................................................23\n
    \     14.1. Normative References .....................................23\n      14.2.
    Informative References ...................................24\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   When used over the Transmission Control Protocol (TCP),
    the current\n   Remote Direct Data Placement (RDDP) [RFC5041] suite of protocols\n
    \  relies on the MPA [RFC5044] protocol for both connection\n   establishment
    and for markers for TCP layering.\n   A typical model for establishing an RDMA
    connection has the following\n   steps:\n   o  The passive side (responder) Upper
    Layer Protocol (ULP) listens\n      for connection requests.\n   o  The active
    side (initiator) ULP submits a connection request using\n      an RDMA endpoint,
    the desired destination, and the parameters to\n      be used for the connection.
    \ Those parameters include both RDMA-\n      layer characteristics, such as the
    number of simultaneous RDMA\n      Read Requests to be allowed, and application-specific
    data.\n   o  The passive side ULP receives a connection request that includes\n
    \     the identity of the active side and the requested connection\n      characteristics.
    \ The passive side ULP uses this information to\n      decide whether to accept
    the connection, and if it is to be\n      accepted, how to create and/or configure
    the local RDMA endpoint.\n   o  If accepting, the responder submits its acceptance
    of the\n      connection request, which in turn generates the accept message to\n
    \     the initiator.  This responder accept operation includes the RDMA\n      endpoint
    to be used and the connection characteristics (both the\n      RDMA configuration
    and any application-specific Private Data to be\n      transferred to the initiator).\n
    \  o  The active side receives confirmation that the connection has been\n      accepted,
    what the configured connection characteristics are, and\n      any application-supplied
    Private Data.\n   Currently, MPA only supports a client-server model for connection\n
    \  establishment, forcing peer-to-peer applications to interact as\n   though
    they had a client-server relationship.  In addition,\n   negotiation of some parameters
    specific to the Remote Direct Memory\n   Access Protocol (RDMAP) [RFC5040] are
    left to ULP negotiation.\n   Providing an optional ULP-independent format for
    exchanging these\n   parameters would be of benefit to transport neutral RDMA\n
    \  applications.\n"
  - contents:
    - "1.1.  Summary of Changes Affecting RFC 5044\n   This document enhances the
      MPA connection setup protocol [RFC5044].\n   First, it adds exchange and negotiation
      of the parameters necessary\n   to support RDMA Read Requests.  Second, it adds
      a message that serves\n   as a Ready to Receive (RTR) indication from the initiator
      to the\n   responder as the last message of connection establishment and adds\n
      \  negotiation of which type of message to use for carrying the RTR\n   indication
      into MPA Request/Reply Frames.\n   RTR indications are optional and are carried
      by existing RDMA message\n   types, specifically a zero-length FULPDU Send message,
      a zero-length\n   RDMA Read message, or a zero-length RDMA write message.  The
      presence\n   vs. absence of the RTR indication and the type of RDMA message
      to use\n   are negotiated by control flags in Enhanced RDMA connection\n   establishment
      data specified by this document (see Section 9).  RDMA\n   implementations are
      often tightly integrated with application\n   libraries and hardware, hence
      the flexibility to use more than one\n   type of RDMA message enables implementations
      to choose message types\n   that are less disruptive to the implementation structure.
      \ When an\n   RTR indication is used, and MPA connection setup negotiation\n
      \  indicates support for multiple RDMA message types as RTR indications\n   by
      both the initiator and responder, the initiator selects one of the\n   supported
      RDMA message types as the RTR indication at the initiator's\n   sole discretion.\n"
    title: 1.1.  Summary of Changes Affecting RFC 5044
  - contents:
    - "1.2.  Summary of Changes Affecting RFC 5043\n   This document enhances [RFC5043]
      by adding new Enhanced Session\n   Control Chunks that extend the currently
      defined Chunks with the\n   addition of Inbound RDMA Read Queue Depth (IRD)
      and Outbound RDMA\n   Read Queue Depth (ORD) negotiation.\n"
    title: 1.2.  Summary of Changes Affecting RFC 5043
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements Language
- contents:
  - "3.  Definitions\n   Active Side:  See Initiator.\n   Consumer:  The ULPs or applications
    that lie above MPA and Direct\n      Data Placement (DDP).  The Consumer is responsible
    for making TCP\n      or Stream Control Transmission Protocol (SCTP) connections,\n
    \     starting MPA and DDP connections, and generally controlling\n      operations.
    \ See [RFC5044] and [RFC5043].\n   CRC:  Cyclic Redundancy Check\n   Completion
    Queue (CQ):  A Consumer-accessible queue where the RDMA\n      device reports
    completions of Work Requests.  A Consumer is able\n      to reap completions from
    a CQ without requiring per-transaction\n      support from the kernel or other
    privileged entity.  See [RDMAC].\n   Completion Queue Entry (CQE):  Transport-
    and device-specific\n      representation of a Work Completion.  A CQ holds CQEs.
    \ See\n      [RDMAC].\n   FULPDU:  Framed Upper Layer Protocol PDU.  See FPDU
    of [RFC5044].\n   Inbound RDMA Read Request Queue (IRRQ):  A queue that is associated\n
    \     with an RDMA connection that tracks active incoming simultaneous\n      RDMA
    Read Request Messages.  See [RDMAC].\n   Inbound RDMA Read Queue Depth (IRD):
    \ The maximum number of incoming\n      simultaneous RDMA Read Request Messages
    an RDMA connection can\n      handle.  See [RDMAC].\n   Initiator:  The endpoint
    of a connection that sends the MPA Request\n      Frame.  The initiator is the
    active side of the connection\n      establishment.  See [RFC5044].\n   IRD:  See
    Inbound RDMA Read Queue Depth.\n   MPA Fencing:  MPA responder connection establishment
    logic that\n      ensures that no ULP messages will be transferred until the\n
    \     initiator's first message has been received.\n   MPA Request Frame:  Data
    sent from the MPA initiator to the MPA\n      responder during the Startup Phase.
    \ See [RFC5044].\n   MPA Reply Frame:  Data sent from the MPA responder to the
    MPA\n      initiator during the Startup Phase.  See [RFC5044].\n   ORD:  See Outbound
    RDMA Read Queue Depth.\n   Outbound RDMA Read Queue Depth (ORD):  The maximum
    number of\n      simultaneous RDMA Read Requests that can be issued for the RDMA\n
    \     connection.  This should be less than or equal to the peer's IRD.\n      See
    [RDMAC].\n   Passive Side:  See Responder.\n   Private Data:  A block of data
    exchanged between MPA endpoints during\n      initial connection setup.  See [RFC5044].\n
    \  Queue Pair (QP):  A Queue Pair is the set of Work Queues associated\n      exclusively
    with a single Endpoint (first defined in [VIA]).  The\n      Send Queue (SQ),
    Receive Queue (RQ), and Inbound RDMA Read Queue\n      (IRQ) are considered to
    be part of the Queue Pair.  The\n      potentially shared Completion Queue (CQ)
    and Shared Receive Queue\n      (SRQ) are not.  See [RDMAC].\n   Remote Peer:
    \ The MPA protocol implementation on the opposite end of\n      the connection.
    \ Used to refer to the remote entity when\n      describing protocol exchanges
    or other interactions between two\n      nodes.  See [RFC5044].\n   Responder:
    \ The connection endpoint that responds to an incoming MPA\n      connection request
    (the MPA Request Frame).  The responder is the\n      passive side of the connection
    establishment.  See [RFC5044].\n   Ready to Receive (RTR):  RTR is an indication
    provided by the last\n      connection establishment message sent from the initiator
    to the\n      responder.  An RTR indicates that the initiator is ready to\n      receive
    messages and that connection establishment is completed.\n   Startup Phase:  The
    initial exchanges of an MPA connection that\n      serves to more fully identify
    MPA endpoints to each other and pass\n      connection-specific setup information
    to each other.  See\n      [RFC5044].\n   Shared Receive Queue (SRQ):  A shared
    pool of Receive Work Requests\n      posted by the Consumer that can be allocated
    by multiple RDMA\n      endpoints (QP).  See [RDMAC].\n   Tagged (DDP) Message:
    \ A DDP Message that targets a Tagged Buffer\n      that is explicitly advertised
    to the Remote Peer through exchange\n      of an STag (memory handle), offset
    in the memory region identified\n      by STag, and length [RFC5040].\n   Untagged
    (DDP) Message:  A DDP Message that targets an Untagged\n      Buffer associated
    with a queue specified the by Queue Number (QN).\n      [RFC5040].\n   Work Queue:
    \ An element of a QP that allows user-space applications\n      to submit Work
    Requests directly to network hardware (first\n      defined in [VIA]).  Specific
    Work Queues include the Send Queue\n      (SQ) for transmit requests, Receive
    Queue (RQ) for receive\n      requests specific to a single endpoint, and Shared
    Receive Queues\n      (SRQs) for receive requests that can be allocated by one
    or more\n      endpoints.  See [RDMAC].\n   Work Queue Element (WQE):  Transport-
    and device-specific\n      representation of a Work Request.  See [RDMAC].\n   Work
    Request:  An elementary object used by Consumers to enqueue a\n      requested
    operation (WQEs) onto a Work Queue.  See [RDMAC].\n"
  title: 3.  Definitions
- contents:
  - "4.  Motivations\n   The goal of this document is two-fold.  The first is to extend\n
    \  support from the current client-server model for RDMA connection\n   setup
    to a peer-to-peer model.  The second is to add negotiation of\n   the RDMA Read
    Queue size for both sides of an RDMA connection.\n"
  - contents:
    - "4.1.  Standardization of RDMA Read Parameter Configuration\n   Most RDMA applications
      are developed using a transport-neutral\n   Application Programming Interface
      (API) to access RDMA services based\n   on a \"Queue Pair\" paradigm as originally
      defined by the Virtual\n   Interface Architecture [VIA], refined by the Direct
      Access\n   Programming Library [DAPL], and most commonly deployed with the\n
      \  OpenFabrics API [OFA].\n   These transport-neutral APIs seek to provide a
      common set of RDMA\n   services whether the underlying transport is, for example,
      RDDP over\n   MPA, RDDP over SCTP, or InfiniBand.\n   The common model for establishing
      an RDMA connection has the\n   following steps:\n   o  The passive side ULP
      listens for connection requests.\n   o  The active side ULP submits a connection
      request using an RDMA\n      endpoint (\"Queue Pair\"), the desired destination,
      and the\n      parameters to be used for the connection.  Those parameters\n
      \     include both RDMA-layer characteristics, such as the number of\n      simultaneous
      RDMA Read Requests to be allowed, and application-\n      specific data (typically
      referred to as \"Private Data\").\n   o  The passive side ULP receives a connection
      request, which includes\n      the identity of the active side and the requested
      connection\n      characteristics.  The passive side ULP uses this information
      to\n      decide whether to accept the connection, and if it is to be\n      accepted,
      how to create and/or configure the RDMA endpoint.\n   o  If accepting, the passive
      side ULP submits its acceptance of the\n      connection request.  This local
      accept operation includes the RDMA\n      endpoint to be used and the connection
      characteristics (both the\n      RDMA configuration and any application-specific
      Private Data to be\n      returned).\n   o  The active side receives confirmation
      that the connection has been\n      accepted, what the configured connection
      characteristics are, and\n      any application-supplied Private Data.\n   As
      currently defined, DDP connection establishment requires the ULP\n   to encode
      the RDMA configuration in the application-specific Private\n   Data.  This results
      in undesirable duplication of logic to cover RDMA\n   characteristics of both
      InfiniBand and RDDP for each ULP, and to\n   specify for InfiniBand and RDDP
      the extraction of the RDMA\n   characteristics for each ULP.\n   Both RDDP and
      InfiniBand support an initial Private Data exchange;\n   therefore, a standard
      definition of the RDMA characteristics within\n   the Private Data section would
      enable common connection establishment\n   APIs to format the RDMA characteristics
      based on the same API\n   information used when establishing either protocol
      to form the\n   connection.  The application would then only have to indicate
      that it\n   was using this standard format to enable common connection\n   establishment
      procedures to apply common code to properly parse these\n   fields and configure
      the RDMA endpoints accordingly.  Exchange of\n   parameters necessary to perform
      RDMA Read operations is a common\n   usage of the initial Private Data exchange.\n
      \  One of the RDMA operations that is defined in [RDMAC] is an RDMA\n   Read.
      \ RDMA Read operations are performed using an untagged message\n   sent from
      a Queue Pair (QP) on the local endpoint to a QP on the\n   remote endpoint targeting
      the Inbound RDMA Read Request Queue (QN=1\n   or Inbound RDMA Read Request Queue
      (IRRQ)) associated with the\n   connection.  RDMA Read responses transfer data
      associated with each\n   RDMA Read Request from the remote endpoint to the local
      endpoint\n   using tagged messages.  An inbound RDMA Read Request remains on
      the\n   IRRQ from the time that it is received until the time that the last\n
      \  tagged message associated with the RDMA request is acknowledged.  The\n   IRRQ
      is associated with a QP but is not a Work Queue.  Instead, the\n   IRRQ is a
      stand-alone queue that is used to manage RDMA Read Requests\n   associated with
      a QP.  See [RDMAC], Section 6 for more information\n   regarding QPs and IRRQ.
      \ One of the characteristics that must be\n   configured for a QP is the size
      of the IRRQ.  This parameter is\n   called the Inbound RDMA Read Queue Depth
      (IRD).  Another\n   characteristic of a QP that must be configured is a local
      limit on\n   the number of simultaneous outbound RDMA Read Requests based on
      the\n   size of the remote endpoint QP's IRRQ.  This parameter is call the\n
      \  Outbound RDMA Read Queue Depth (ORD).  ORD is used to limit the\n   number
      of simultaneous RDMA Read Requests such that the local\n   endpoint does not
      overrun the remote endpoint's IRRQ depth or IRD.\n   Note that outbound RDMA
      Reads are submitted to a QP's Send Queue at\n   the local peer, not to a separate
      outbound RDMA Read Request queue on\n   the local peer.  The local endpoint
      uses ORD to strictly limit\n   simultaneous Read Requests so that IRRQ overruns
      do not occur at the\n   remote endpoint.\n   Determination of the values of
      the ORD and IRD are left to the ULP by\n   the current RDDP suite of protocols
      and also by [RDMAC].  Since this\n   negotiation of ORD and IRD is typical,
      it is desirable to provide a\n   common mechanism as described in this document.\n"
    title: 4.1.  Standardization of RDMA Read Parameter Configuration
  - contents:
    - "4.2.  Enabling MPA Mode\n   MPA defines encoding of DDP Segments in Framed
      Upper Layer Protocol\n   PDUs (FULPDUs).  Generation of FULPDUs requires the
      ability to\n   periodically insert MPA Markers and to generate the MPA CRC-32c
      for\n   each frame.  Reception may require parsing/removing the markers after\n
      \  using them to identify MPA Frame boundaries and validation of the\n   MPA-CRC32c.\n
      \  A major design objective for MPA was to ensure that the resulting TCP\n   stream
      would be fully compliant for any and all TCP-aware\n   middleboxes.  The challenge
      is that while only some TCP payload\n   streams are a valid stream of MPA FULPDUs,
      any sequence of bytes is a\n   valid TCP payload stream.  The determination
      that a given stream is\n   in a specific MPA mode cannot be made at the MPA
      or TCP layer.\n   Therefore, enabling of MPA mode is handled by the ULP.\n   The
      MPA protocol can be viewed as having two parts:\n   o  a specification of generation
      and reception of MPA FULPDUs.  This\n      is unchanged by enhanced RDMA connection
      establishment.\n   o  a pre-MPA exchange of messages to enable a specific MPA
      mode for\n      the TCP connection.  Enhanced RDMA connection establishment\n
      \     extends this protocol with two new features.\n   In typical implementations,
      generation and reception of MPA FULPDUs\n   is handled by hardware.  The exchange
      of the MPA Request and Reply\n   Frames is then handled by host software.  As
      will be explained, this\n   implementation split impedes applications that are
      not compatible\n   with the client-server assumptions in the current MPA Request/Reply\n
      \  exchange.\n"
    title: 4.2.  Enabling MPA Mode
  - contents:
    - "4.3.  Lack of Explicit RTR in MPA Request/Reply Exchange\n   The exchange of
      MPA Request and Reply messages to place a TCP\n   connection in MPA mode is
      specified in [RFC5044].  This protocol\n   provides many benefits to the design
      of MPA FULPDU hardware:\n   o  The ULP is responsible for specifying the exact
      MPA Mode (Markers\n      enabled or disabled, CRC-32c enabled or suppressed)
      and the point\n      in the TCP streams (inbound and outbound) where MPA Frames
      will\n      begin.\n   o  Before the first MPA Frame is transmitted, all pre-MPA
      mode TCP\n      payloads will have been acknowledged by the peer.  Therefore,
      it\n      is never necessary to generate a retransmission that mixes pre-MPA\n
      \     and MPA payload.\n   o  Before MPA reception is enabled, all incoming
      pre-MPA mode TCP\n      payloads will have been acknowledged.  Therefore, the
      host will\n      never receive a TCP segment that mixes pre-MPA and MPA payload.\n
      \  The limitation of the current MPA Request/Reply exchange is that it\n   does
      not define a Ready to Receive (RTR) indication that the active\n   side would
      send, so that the passive side can know that the last non-\n   MPA payload (the
      MPA Reply) had been received.\n   Instead, the role of an RTR indication is
      piggybacked on the first\n   MPA FULPDU sent by the active side.  This is actually
      a valuable\n   optimization for all applications that fit the classic client-server\n
      \  model.  The client only initiates the connection when it has a\n   request
      to send to the server, and the server has nothing to send\n   until it has received
      and processed the client request.\n   Even applications where the server sends
      some configuration data\n   immediately can easily send the same information
      as application\n   Private Data in the MPA Reply.  So the currently defined
      exchange\n   works for almost all applications.\n   Many peer-to-peer applications,
      especially those involving cluster\n   calculations (frequently using Message
      Passing Interface (MPI)\n   [UsingMPI] or [RDS]), have no natural client or
      server roles ([PPMPI]\n   [OpenMP]).  Typically, one member of the cluster is
      arbitrarily\n   selected to initiate the connection when the distributed task
      is\n   launched, while the other accepts it.  At startup time, however,\n   there
      is no way to predict which node will have the first message to\n   actually
      send.  Immediately establishing the connections is valuable\n   because it reduces
      latency once results are ready to transmit and it\n   validates connectivity
      throughout the cluster.\n   The lack of an explicit RTR indication in the MPA
      Request/Reply\n   exchange forces all applications to have a first message from
      the\n   connection initiator, whether or not this matches the application\n
      \  communication model.\n"
    title: 4.3.  Lack of Explicit RTR in MPA Request/Reply Exchange
  - contents:
    - "4.4.  Limitations on ULP Workaround\n   The requirement that the RDMA connection
      initiator sends the first\n   message does not appear to be onerous on first
      examination.  The\n   natural question is why the application layer would not
      simply\n   generate a dummy message when there is no other message to submit.\n
      \  There are three factors that make this workaround unsuitable for many\n   peer-to-peer
      applications:\n      o  Transport-Neutral APIs.\n      o  Work/Completion Queue
      Accounting.\n      o  Host-based implementation of MPA Fencing.\n"
    - contents:
      - "4.4.1.  Transport-Neutral APIs\n   Many of these applications access RDMA
        services using a transport-\n   neutral API such as [DAPL] or [OFA].  Only
        RDDP over TCP [RFC5044]\n   has a first message requirement.  Other RDMA transports,
        including\n   RDDP over SCTP (see [RFC5043]) and InfiniBand (see [IBTA]),
        do not.\n   Application or middleware communications can be expressed as\n
        \  transport-neutral RDMA operations, allowing lower software layers to\n
        \  translate to transport and device specifics.  Having a distinct extra\n
        \  message that is required only for one transport undermines the\n   application's
        goal of being transport neutral.\n"
      title: 4.4.1.  Transport-Neutral APIs
    - contents:
      - "4.4.2.  Work/Completion Queue Accounting\n   RDMA local APIs conventionally
        use Work Queues to submit requests\n   (Work Queue elements or WQEs) and to
        asynchronously receive\n   completions (in Completion Queues or CQs).\n   Each
        Work Request can generate a Completion Queue Entry (CQE).\n   Completions
        for successful transmit Work Requests are frequently\n   suppressed, but the
        CQ capacity must account for the possibility that\n   each will complete in
        error.  A CQ can receive completions from\n   multiple Work Queues.\n   CQs
        are defined to allow hardware RDMA implementations to generate\n   CQEs directly
        to a user-space-mapped buffer.  This enables a user-\n   space RDMA Consumer
        to reap completions without requiring kernel\n   intervention.\n   A hardware
        RDMA implementation cannot reasonably wait for an\n   available slot in the
        CQ.  The queue must be sized such that an\n   overflow will not occur.  When
        an overflow does occur, it is\n   considered a catastrophic error and will
        typically require tearing\n   down all RDMA connections using that CQ.\n   This
        style of interface is very efficient, but places a burden on the\n   application
        to properly size each CQ to match the Work Queues that\n   feed it.\n   While
        the format of both WQEs and CQEs is transport and device\n   dependent, a
        transport-neutral API can deal with WQEs and CQEs as\n   abstract transport-
        and device-neutral objects.  Therefore, the\n   number of WQEs and CQEs required
        for an application can be transport\n   and device neutral.\n   The capacity
        of the Work Queues and CQs can be calculated in an\n   abstract transport-
        and device-neutral fashion.  If a dummy operation\n   approach is used, it
        would require lower layers to know the usage\n   model, and would disrupt
        the calculations by inserting a dummy\n   \"operation\" Work Request and filtering
        out the matching completion.\n   The lower layer does not know the usage model
        on which the queue\n   sizes are built, nor does it know how frequently an
        insertion will be\n   required.\n"
      title: 4.4.2.  Work/Completion Queue Accounting
    - contents:
      - "4.4.3.  Host-based Implementation of MPA Fencing\n   Many hardware implementations
        of RDDP using MPA/TCP do not handle the\n   MPA Request/Reply exchange in
        hardware, rather they are handled by\n   the host processor in software.  With
        such designs, it is common for\n   the MPA Fencing to be implemented in the
        user-space, device-specific\n   library (commonly referred to as a 'User Verbs'
        library or module).\n   When the generation and reception of MPA FULPDUs are
        already\n   dedicated to hardware, a Work Completion can only be generated
        by an\n   untagged message, since arrival of a message for a tagged buffer
        does\n   not necessarily generate a completion and is done without any\n   interaction
        with ULP [RFC5040].\n"
      title: 4.4.3.  Host-based Implementation of MPA Fencing
    title: 4.4.  Limitations on ULP Workaround
  title: 4.  Motivations
- contents:
  - "5.  Enhanced MPA Connection Establishment\n   Below we provide an overview of
    Enhanced Connection Setup.  The goal\n   is to allow standard negotiation of the
    ORD/IRD setting on both sides\n   of the RDMA connection and/or to negotiate the
    initial data transfer\n   operation by the initiator when the existing 'client
    sends first'\n   rule does not match application requirements.\n   The RDMA connection
    initiator sends an MPA Request, as specified in\n   [RFC5044]; the new format
    defined here allows for:\n   o  Standardized negotiation of ORD and IRD.\n   o
    \ Negotiation of RTR functionality and the RDMA message type to use\n      as
    the RTR indication.\n   The RDMA connection responder processes the MPA Request
    and generates\n   an MPA Reply, as specified in [RFC5044]; the new format completes
    the\n   negotiation.\n   The local interface needs to provide a way for a ULP
    to request the\n   use of explicit RTR indication on a per-application or per-connection\n
    \  basis when an explicit RTR indication will be required.  Piggybacking\n   the
    RTR on a Client's first message is a valuable optimization for\n   most connections.\n
    \  The RDMA connection initiator MUST NOT allow any later FULPDUs to be\n   transmitted
    before the RTR indication.  One method to achieve this is\n   to delay notifying
    the ULP that the RDMA connection has been\n   established until after any required
    RTR indication has been\n   transmitted.\n   All MPA exchanges are performed via
    TCP prior to RDMA establishment,\n   and are therefore signaled via TCP and not
    via RDMA completion.\n"
  title: 5.  Enhanced MPA Connection Establishment
- contents:
  - "6.  Enhanced MPA Request/Reply Frames\n   Enhanced RDMA connection establishment
    uses an alternate format for\n   MPA Requests and Replies as follows:\n        0
    \                  1                   2                   3\n        0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   0  |                                                               |\n       +
    \        Key (16 bytes containing \"MPA ID Req Frame\")          +\n    4  |      (4D
    50 41 20 49 44 20 52 65 71 20 46 72 61 6D 65)        |\n       +         Or  (16
    bytes containing \"MPA ID Rep Frame\")          +\n    8  |      (4D 50 41 20
    49 44 20 52 65 70 20 46 72 61 6D 65)        |\n       +                                                               +\n
    \   12 |                                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   16 |M|C|R|S| Res   |     Rev       |          PD_Length            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |                                                               |\n       ~
    \                                                              ~\n       ~                   Private
    Data                                ~\n       |                                                               |\n
    \      |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |
    \                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Key:
    \ Unchanged from [RFC5044].\n   M:  Unchanged from [RFC5044].\n   C:  Unchanged
    from [RFC5044].\n   R:  Unchanged from [RFC5044].\n   S:  One, if the Private
    Data begins with the enhanced RDMA connection\n      establishment data; 0 otherwise.\n
    \  Res:  One bit smaller than in [RFC5044]; otherwise unchanged.  In\n      [RFC5044],
    the 'Res' field, in which the newly defined 'S' bit\n      resides, is reserved
    for future use.  [RFC5044] specifies that\n      'Res' MUST be set to zero when
    sending and MUST NOT be checked on\n      reception, making use of 'S' bit backwards
    compatibility with the\n      original MPA Frame format.  When the 'S' bit is
    set to zero, no\n      additional Private Data is used for enhanced RDMA connection\n
    \     establishment; therefore, the resulting MPA Request and Reply\n      Frames
    are identical to the unenhanced protocol.\n   Rev:  This field contains the revision
    of MPA.  To use any enhanced\n      connection establishment feature, this MUST
    be set to two or\n      higher.  If no enhanced connection establishment features
    are\n      desired, it MAY be set to one.  A host accepting MPA connections\n
    \     MUST continue to accept MPA Requests with version one, even if it\n      supports
    version two.\n   PD_Length:  Unchanged from [RFC5044].  This is the total length
    of\n      the Private Data field, including the enhanced RDMA connection\n      establishment
    data, if present.\n   Private Data:  Unchanged from [RFC5044].  However, if the
    'S' flag is\n      set, Private Data MUST begin with enhanced RDMA connection\n
    \     establishment data (see Section 9).\n"
  title: 6.  Enhanced MPA Request/Reply Frames
- contents:
  - "7.  Enhanced SCTP Session Control Chunks\n   Enhanced RDMA connection establishment
    uses the first 32 bits of the\n   Private Data field for IRD and ORD negotiation
    in the \"DDP Stream\n   Session Initiate\" and \"DDP Stream Session Accept\" SCTP
    Session\n   Control Chunks.\n   The type of the SCTP Session Control Chunk is
    defined by a Function\n   Code (see [RFC4960]).  [RFC5043] already defines codes
    for 'DDP\n   Stream Session Initiate' and 'DDP Stream Session Accept', which are\n
    \  equivalent to an MPA Request Frame and an accepting MPA Reply Frame.\n   Enhanced
    RDMA connection establishment requires three additional\n   function codes listed
    below:\n   Enhanced DDP Stream Session Initiate:  0x005\n   Enhanced DDP Stream
    Session Accept:  0x006\n   Enhanced DDP Stream Session Reject:  0x007\n   The
    Enhanced Reject function code MUST be used to indicate rejection\n   of enhanced
    DDP stream session for a configuration that would have\n   been accepted for unenhanced
    DDP stream session negotiation.\n   The enhanced DDP stream session establishment
    follows the same rules\n   as the standard DDP stream session establishment as
    defined in\n   [RFC5043].  ULP-supplied Private Data MUST be included for Enhanced\n
    \  DDP Stream Session Initiate, Enhanced DDP Stream Session Accept, and\n   Enhanced
    DDP Stream Session Reject messages, and MUST follow the\n   enhanced RDMA connection
    establishment data in the DDP Stream Session\n   Initiate and the Enhanced DDP
    Stream Session Accept messages.\n   Private Data length MUST NOT exceed 512 bytes
    in any message,\n   including enhanced RDMA connection establishment data.\n   Private
    Data MUST NOT be included in the DDP Stream Session TERM\n   message.\n   Received
    Extended DDP Stream Session Control messages SHOULD be\n   reported to the ULP.
    \ If reported, any supplied Private Data MUST be\n   available for the ULP to
    examine.  For example, a received Extended\n   DDP Stream Session Control message
    is not reported to ULP if none of\n   the requested RTR indication types are supported
    by the receiver.  In\n   this case, the Provider MAY generate a reject reply message\n
    \  indicating which RTR indication types it supports.\n   The enhanced DDP stream
    management MUST use the DDP stream session\n   termination function code to terminate
    a stream established using\n   enhanced DDP stream session function codes.\n   [RFC5043]
    already supports either side sending the first DDP Message\n   since the Payload
    Protocol Identifier (PPID) already distinguishes\n   between Session Establishment
    and DDP Segments.  The enhanced RDMA\n   connection establishment provides the
    ULP a transport-independent way\n   to support the peer-to-peer model.\n   The
    following additional Legal Sequences of DDP Stream Session\n   messages are defined:\n
    \  o  Enhanced Active/Passive Session Accepted: as with Section 6.2 of\n      [RFC5043],
    but with the extended opcodes as defined in this\n      document.\n   o  Enhanced
    Active/Passive Session Rejected: as with Section 6.3 of\n      [RFC5043], but
    with the extended opcodes as defined in this\n      document.\n   o  Enhanced
    Active/Passive Session Non-ULP Rejected: as with Section\n      6.4 of [RFC5043],
    but with the extended opcodes as defined in this\n      document.\n"
  title: 7.  Enhanced SCTP Session Control Chunks
- contents:
  - "8.  MPA Error Reporting\n   The RDMA connection establishment protocol is layered
    upon the\n   protocols defined in [RFC5040] and [RFC5041].  Any enhanced RDMA\n
    \  connection establishment error generates an MPA termination message\n   to
    a peer.  [RFC5040] defines a triplet of protocol layers, error\n   types, and
    error codes for error specification.  MPA negotiation for\n   RDMA connection
    establishment uses the following layer and error type\n   for MPA error reporting:\n
    \  Layer:      0x2 - LLP Error Type: 0x0 - MPA\n   While [RFC5044] defines four
    error codes, [RFC5043] does not define\n   any.  Enhanced RDMA connection establishment
    extends the error codes\n   defined in [RFC5044] by adding three new error codes.
    \ Thus, enhanced\n   RDMA connection establishment is backward compatible with
    both\n   [RFC5043] and [RFC5044].\n   The following error codes are defined for
    enhanced RDMA connection\n   establishment negotiation:\n      Error Code         Description\n
    \     --------------------------------------------------------\n      0x05               Local
    catastrophic\n      0x06               Insufficient IRD resources\n      0x07
    \              No matching RTR option\n"
  title: 8.  MPA Error Reporting
- contents:
  - "9.  Enhanced RDMA Connection Establishment Data\n   Enhanced RDMA connection
    establishment places the following 32 bits\n   at the beginning of the Private
    Data field of the MPA Request and\n   Reply Frames or the \"DDP Stream Session
    Initiate\" and \"DDP Stream\n   Session Accept\" SCTP Session Control Chunks.
    \ ULP-specified Private\n   Data follows this field.  The maximum amount of ULP-specified
    Private\n   Data is therefore reduced by 4 bytes.  Note that this field MUST be\n
    \  sent in network byte order, with the IRD and ORD encoded as 14-bit\n   unsigned
    integers.\n        0                   1                   2                   3\n
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   0  |A|B|        IRD                |C|D|        ORD                |\n    4
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   IRD:  Inbound
    RDMA Read Queue Depth.\n   ORD:  Outbound RDMA Read Queue Depth.\n   A: Control
    Flag for connection model.\n   B: Control Flag for use of a zero-length FULPDU
    (Send) RTR\n      indication.\n   C: Control Flag for use of a zero-length RDMA
    Write RTR indication.\n   D: Control Flag for use of a zero-length RDMA Read RTR
    indication.\n"
  - contents:
    - "9.1.  IRD and ORD Negotiation\n   The IRD and ORD are used for negotiation
      of Inbound RDMA Read Request\n   Queue depths for both endpoints of the RDMA
      connection.  The IRD is\n   used to configure the depth of the Inbound RDMA
      Read Request Queue\n   (IRRQ) on each endpoint.  ORD is used to limit the number
      of\n   simultaneous outbound RDMA Read Requests allowed at any given point\n
      \  in time in order to avoid IRRQ overruns at the remote endpoint.  In\n   order
      to describe the negotiation of both local endpoint and remote\n   endpoint ORD
      and IRD values, four terms are defined:\n   Initiator IRD:  The IRD value sent
      in the MPA Request or \"DDP Stream\n      Session Initiate\" SCTP Session Control
      Chunk.  This is the value\n      of the initiator's IRD at the time of the MPA
      Request generation.\n      The responder sets its local ORD value to this value
      or less.  The\n      initiator IRD is the maximum number of simultaneous inbound
      RDMA\n      Read Requests that the initiator can support for the requested\n
      \     connection.\n   Initiator ORD:  The ORD value in the MPA Request or \"DDP
      Stream\n      Session Initiate\" SCTP Session Control Chunk.  This is the initial\n
      \     value of the initiator's ORD at the time of the MPA Request\n      generation
      and also a request to the responder to support a\n      responder IRD of at
      least this value.  The initiator ORD is the\n      maximum number of simultaneous
      outbound RDMA Read operations that\n      the initiator desires the responder
      to support for the requested\n      connection.\n   Responder IRD:  The IRD
      value returned in the MPA Reply or \"DDP\n      Stream Session Accept\" SCTP
      Session Control Chunk.  This is the\n      actual value that the responder sets
      for its local IRD.  This\n      value is greater than or equal to the initiator
      ORD for successful\n      negotiations.  The responder IRD is the maximum number
      of\n      simultaneous inbound RDMA Read Requests that the responder\n      actually
      can support for the requested connection.\n   Responder ORD:  The ORD value
      returned in the MPA Reply or \"DDP\n      Stream Session Accept\" SCTP Session
      Control Chunk.  This is the\n      actual value that the responder used for
      ORD and is less than or\n      equal to the initiator IRD for successful negotiations.
      \ The\n      responder ORD is the maximum number of simultaneous outbound RDMA\n
      \     Read operations that the responder will allow for the requested\n      connection.\n
      \  The relationships between these parameters after a successful\n   negotiation
      is complete are the following:\n   initiator ORD <= responder IRD\n   responder
      ORD <= initiator IRD\n   The responder and initiator MUST pass the peer's provided
      IRD and ORD\n   values to the ULP, in addition to using the values as calculated
      by\n   the preceding rules.\n   The responder ORD SHOULD be set to a value less
      than or equal to the\n   initiator IRD.  If the initiator ORD is insufficient
      to support the\n   selected connection model, the responder IRD MAY be increased;
      for\n   example, if the initiator ORD is 0 (RDMA Reads will not be used by\n
      \  the ULP) and the responder supports use of a zero-length RDMA Read\n   RTR
      indication, then the responder IRD can be set to 1.  The\n   responder MUST
      set its ORD at most to the initiator IRD.  The\n   responder MAY reject the
      connection request if the initiator IRD is\n   not sufficient for the ULP-required
      ORD and specify the required ORD\n   in the MPA Reject Frame responder ORD.
      \ Thus, the TERM message MUST\n   contain Layer 2, Error Type 0, Error Code
      6.\n   Upon receiving the MPA Accept Frame from the responder, the initiator\n
      \  MUST set its IRD at least to the responder ORD and its ORD at most to\n   the
      responder IRD.  If the initiator does not have sufficient\n   resources for
      the required IRD, it MUST send a TERM message to the\n   responder indicating
      insufficient resources and terminate the\n   connection due to insufficient
      resources.  Thus, the TERM message\n   MUST contain Layer 2, Error Type 0, Error
      Code 6.\n   The initiator MUST pass the responder provided IRD and ORD to the
      ULP\n   for both MPA Accept and Reject messages.  The initiator ULP can\n   decide
      its course of action.  For example, the initiator ULP may\n   terminate the
      established connection and renegotiate the responder\n   ORD.\n   An all ones
      value (0x3FFF) indicates that automatic negotiation of\n   the IRD or ORD is
      not desired, and that the ULP will be responsible\n   for it.  The responder
      MUST respond to an initiator ORD value of\n   0x3FFF by leaving its local endpoint
      IRD value unchanged and setting\n   the IRD to 0x3FFF in its reply message.
      \ The initiator MUST leave its\n   local endpoint ORD value unchanged upon receiving
      a responder IRD\n   value of 0x3FFF.  The responder MUST respond to an initiator
      IRD\n   value of 0x3FFF by leaving its local endpoint ORD value unchanged,\n
      \  and setting ORD to 0x3FFF in its reply message.  The initiator MUST\n   leave
      its local endpoint IRD value unchanged upon receiving a\n   responder ORD value
      of 0x3FFF.\n"
    title: 9.1.  IRD and ORD Negotiation
  - contents:
    - "9.2.  Peer-to-Peer Connection Negotiation\n   Control Flag A value 1 indicates
      that a peer-to-peer connection model\n   is being performed, and value 0 indicates
      a client-server model.\n   Control Flag B value 1 indicates that a zero-length
      FULPDU (Send) RTR\n   indication is requested for the initiator and supported
      by the\n   responder, respectively, 0 otherwise.  Control Flag C value 1\n   indicates
      that a zero-length RDMA Write RTR indication is requested\n   for the initiator
      and supported by the responder, respectively, 0\n   otherwise.  Control Flag
      D value 1 indicates that a zero-length RDMA\n   Read RTR indication is requested
      for the initiator and supported by\n   the responder, respectively, 0 otherwise.
      \ The initiator MUST set\n   Control Flag A to 1 for the peer-to-peer model.
      \ The initiator MUST\n   set each Control Flag B, C, and D to 1 for each of
      the options it\n   supports, if Control Flag A is set to 1.\n   The responder
      MUST support at least one RTR indication option if it\n   supports Enhanced
      RDMA connection establishment.  If Control Flag A\n   is 1 in the MPA Request
      message, then the responder MUST set Control\n   Flag A to 1 in the MPA reply
      message.  For each initiator-supported\n   RTR indication option, the responder
      SHOULD set the corresponding\n   Control Flag if the responder can support that
      option in an MPA\n   reply.  The responder is not required to specify all RTR
      indication\n   options it supports.  The responder MUST set at least one RTR\n
      \  indication option if it supports more than one initiator-specified\n   RTR
      indication option.  The responder MAY include additional RTR\n   indication
      options it supports, even if not requested by any\n   initiator specified RTR
      indication options.  If the responder does\n   not support any of the initiator-specified
      RTR indication options,\n   then the responder MUST set at least one RTR indication
      type option\n   it supports.\n   Upon receiving the MPA Accept Frame with Control
      Flag A set to 1, the\n   initiator MUST generate one of the negotiated RTR indications.
      \ If\n   the initiator is not able to generate any of the responder-supported\n
      \  RTR indications, then it MUST send a TERM message to the responder\n   indicating
      failure to negotiate a mutually compatible connection\n   model or RTR option,
      and terminate the connection.  Thus, the TERM\n   message MUST contain Layer
      2, Error Type 0, Error Code 7.  The ULP\n   can negotiate a ULP-level RTR indication
      when a Provider-level RTR\n   indication cannot be negotiated.\n   The initiator
      MUST set Control Flag A to 0 for the client-server\n   model.  The responder
      MUST set Control Flag A to 0 if Control Flag A\n   is 0 in the request.  If
      Control Flag A is set to 0, then Control\n   Flags B, C, and D MUST also be
      set to 0.  On reception, if Control\n   Flag A is set to 0, then Control Flags
      B, C, and D MUST be ignored.\n"
    title: 9.2.  Peer-to-Peer Connection Negotiation
  - contents:
    - "9.3.  Enhanced Connection Negotiation Flow\n   The RTR indication type and
      ORD/IRD negotiation follows the following\n   order:\n   initiator (MPA Request)
      -->  The initiator sets Control Flag A to 1\n      to indicate the peer-to-peer
      connection model and sets its initial\n      IRD/ORD on the local endpoint of
      the connection.  The initiator\n      also sets Control Flags B, C, and D to
      1 for each initiator-\n      supported option of RTR indication.\n   responder
      (MPA Reply) <--  The responder matches the initiator's\n      Control Flag A
      value and sets ORD/IRD to its local endpoint values\n      based upon the initiator's
      initial ORD/IRD values and the number\n      of simultaneous RDMA Read Requests
      required by the ULP.  The\n      responder sets Control Flags B, C, and D to
      1 for each responder-\n      supported option of RTR indication options for
      the peer-to-peer\n      connection model.  The responder also sets its IRD/ORD
      to actual\n      values.\n   initiator (First RDMA Message) -->  After the initiator
      modifies its\n      ORD/IRD to match the responder's values as stated above,
      the\n      initiator sends the first message of the negotiated RTR indication\n
      \     option.  If no matching RTR indication option exists, then the\n      initiator
      sends a TERM message.\n      The initiator or responder MUST generate the TERM
      message that\n      contains Layer 2, Error Type 0, Error Code 5 when it encounters\n
      \     any error locally for which the special Error Code is not defined\n      in
      Section 8 before resetting the connection.\n"
    title: 9.3.  Enhanced Connection Negotiation Flow
  title: 9.  Enhanced RDMA Connection Establishment Data
- contents:
  - "10.  Interoperability\n   The initiator requests enhanced RDMA connection establishment
    by\n   sending an enhanced RDMA establishment request; an enhanced responder\n
    \  is REQUIRED to respond with an enhanced RDMA connection establishment\n   response,
    whereas an unenhanced responder treats the enhanced request\n   as incorrectly
    formatted and closes the TCP connection.  All\n   responders are REQUIRED to issue
    unenhanced RDMA connection\n   establishment responses in response to unenhanced
    RDMA connection\n   establishment requests.\n   The initiator MUST NOT use the
    enhanced RDMA connection establishment\n   formats or function codes when no enhanced
    functionality is desired.\n   The responder MUST continue to accept unenhanced
    connection requests.\n   There are three initiator/responder cases that involve
    enhanced MPA:\n   both the initiator and responder, only the responder, and only
    the\n   initiator.  The enhanced MPA Frame is defined by field 'S' set to 1.\n
    \  Enhanced MPA initiator and responder:  If the responder receives an\n      enhanced
    MPA message, it MUST respond with an enhanced MPA\n      message.\n   Enhanced
    MPA responder only:  If the responder receives an unenhanced\n      MPA message
    ('S' is set to 0), it MUST respond with an unenhanced\n      MPA message.\n   Enhanced
    MPA initiator only:  If the responder receives an enhanced\n      MPA message
    and it does not support enhanced RDMA connection\n      establishment, it MUST
    close the TCP connection and exit MPA.\n      From a standard RDMA connection
    establishment point of view, the\n      enhanced MPA Frame is improperly formatted
    as stated in [RFC5044].\n      Thus, both the initiator and responder report TCP
    connection\n      termination to an application locally.  In this case, the\n
    \     initiator MAY attempt to establish an RDMA connection using the\n      unenhanced
    MPA protocol as defined in [RFC5044] if this protocol\n      is compatible with
    the application, and let the ULP deal with ORD\n      and IRD and peer-to-peer
    negotiations.\n   A note for potential future enhancements for connection establishment\n
    \  negotiation: It is possible to further extend formatting of Private\n   Data
    of the MPA Request and Reply Frames and to use other bits from\n   the \"Res\"
    field to indicate additional Private Data formatting.\n"
  title: 10.  Interoperability
- contents:
  - "11.  IANA Considerations\n   IANA has added the following entries to the \"SCTP
    Function Codes for\n   DDP Session Control\" registry created by Section 3.5 of
    [RFC6580]:\n   0x0005,  Enhanced DDP Stream Session Initiate, [RFC6581]\n   0x0006,
    \ Enhanced DDP Stream Session Accept, [RFC6581]\n   0x0007,  Enhanced DDP Stream
    Session Reject, [RFC6581]\n   IANA has added the following entries to the \"MPA
    Errors\" registry\n   created by Section 3.3 of [RFC6580]:\n   0x2/0x0/0x05,  -
    MPA Error / Local catastrophic error, [RFC6581]\n   0x2/0x0/0x06  - MPA Error
    / Insufficient IRD resources, [RFC6581]\n   0x2/0x0/0x07  - MPA Error / No matching
    RTR option, [RFC6581]\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   The security considerations from RFC 5044 and
    RFC 5043 apply and the\n   changes in this document do not introduce new security\n
    \  considerations.  However, it is recommended that implementations do\n   sanity
    checking for the input parameters, including ORD, IRD, and the\n   control flags
    used for RTR indication option negotiation.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Acknowledgements\n   The authors wish to thank Sean Hefty, Dave Minturn,
    Tom Talpey, David\n   Black, and David Harrington for their valuable contributions
    and\n   reviews of this document.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission Protocol\",
      RFC\n              4960, September 2007.\n   [RFC5040]  Recio, R., Metzler,
      B., Culley, P., Hilland, J., and D.\n              Garcia, \"A Remote Direct
      Memory Access Protocol\n              Specification\", RFC 5040, October 2007.\n
      \  [RFC5041]  Shah, H., Pinkerton, J., Recio, R., and P. Culley, \"Direct\n
      \             Data Placement over Reliable Transports\", RFC 5041,\n              October
      2007.\n   [RFC5043]  Bestler, C. and R. Stewart, \"Stream Control Transmission\n
      \             Protocol (SCTP) Direct Data Placement (DDP) Adaptation\",\n              RFC
      5043, October 2007.\n   [RFC5044]  Culley, P., Elzur, U., Recio, R., Bailey,
      S., and J.\n              Carrier, \"Marker PDU Aligned Framing for TCP\n              Specification\",
      RFC 5044, October 2007.\n   [RFC6580]  Ko, M. and D. Black, \"IANA Registries
      for the Remote\n              Direct Data Placement (RDDP) Protocols\", RFC
      6580, April\n              2012.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [DAPL]     \"Direct Access Programming Library\",\n
      \             <http://www.datcollaborative.org/uDAPL_doc_062102.pdf>.\n   [IBTA]
      \    \"InfiniBand Architecture Specification Release 1.2.1\",\n              <http://www.infinibandta.org>.\n
      \  [OFA]      \"OFA verbs & APIs\", <http://www.openfabrics.org/>.\n   [OpenMP]
      \  McGraw-Hill, \"Parallel Programming in C with MPI and\n              OpenMP\",
      2003.\n   [PPMPI]    Morgan Kaufmann Publishers Inc., \"Parallel Programming\n
      \             with MPI\", 2008.\n   [RDMAC]    \"RDMA Protocol Verbs Specification
      (Version 1.0)\",\n              <http://www.rdmaconsortium.org/home/\n              draft-hilland-iwarp-verbs-v1.0-RDMAC.pdf>.\n
      \  [RDS]      Open Fabrics Association, \"Reliable Datagram Socket\",\n              2008,\n
      \             <http://www.openfabrics.org/archives/spring2008sonoma>.\n   [UsingMPI]
      MIT Press, \"Using MPI-2: Advanced Features of the Message\n              Passing
      Interface\", 1999.\n   [VIA]      Cameron, Don and Greg Regnier, \"Virtual Interface\n
      \             Architecture\", Intel, April 2002.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Authors' Addresses\n   Arkady Kanevsky (editor)\n   Dell Inc.\n   One Dell Way,
    MS PS2-47\n   Round Rock, TX 78682\n   USA\n   Phone: +1-512-728-0000\n   EMail:
    arkady.kanevsky@gmail.com\n   Caitlin Bestler (editor)\n   Nexenta Systems\n   555
    E El Camino Real #104\n   Sunnyvale, CA 94087\n   USA\n   Phone: +1-949-528-3085\n
    \  EMail: Caitlin.Bestler@nexenta.com\n   Robert Sharp\n   Intel\n   LAD High
    Performance Message Passing, Mailstop: AN1-WTR1\n   1501 South Mopac, Suite 400\n
    \  Austin, TX 78746\n   USA\n   Phone: +1-512-493-3242\n   EMail: robert.o.sharp@intel.com\n
    \  Steve Wise\n   Open Grid Computing\n   4030 Braker Lane STE 130\n   Austin,
    TX 78759\n   USA\n   Phone: +1-512-343-9196 x101\n   EMail: swise@opengridcomputing.com\n"
  title: Authors' Addresses
