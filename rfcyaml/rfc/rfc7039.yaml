- title: __initial_text__
  contents:
  - '         Source Address Validation Improvement (SAVI) Framework

    '
- title: Abstract
  contents:
  - "Abstract\n   Source Address Validation Improvement (SAVI) methods were developed\n\
    \   to prevent nodes attached to the same IP link from spoofing each\n   other's\
    \ IP addresses, so as to complement ingress filtering with\n   finer-grained,\
    \ standardized IP source address validation.  This\n   document is a framework\
    \ document that describes and motivates the\n   design of the SAVI methods.  Particular\
    \ SAVI methods are described in\n   other documents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7039.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Model . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Deployment Options  . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     3.1.  IP Address Assignment Methods . . . . . . . . . . . .\
    \ . .   6\n     3.2.  Binding Anchors . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n   4.  Scalability Optimizations . . . . . . . . . . . . . . . . . .\
    \   7\n   5.  Reliability Optimizations . . . . . . . . . . . . . . . . . .  \
    \ 9\n   6.  Scenario with Multiple Assignment Methods . . . . . . . . . .  10\n\
    \   7.  Prefix Configuration  . . . . . . . . . . . . . . . . . . . .  10\n  \
    \ 8.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  11\n   9.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  11\n   10. References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  12\n     10.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  12\n     10.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Since IP source addresses are used by hosts and network\
    \ entities to\n   determine the origin of a packet and as a destination for return\n\
    \   data, spoofing of IP source addresses can enable impersonation,\n   concealment,\
    \ and malicious traffic redirection.  Unfortunately, the\n   Internet architecture\
    \ does not prevent IP source address spoofing\n   [RFC6959].  Since the IP source\
    \ address of a packet generally takes\n   no role in forwarding the packet, it\
    \ can be selected arbitrarily by\n   the sending host without jeopardizing packet\
    \ delivery.  Extra methods\n   are necessary for IP source address validation\
    \ to augment packet\n   forwarding with an explicit check of whether a given packet's\
    \ IP\n   source address is legitimate.\n   IP source address validation can happen\
    \ at different granularity.\n   Ingress filtering [BCP38] [BCP84], a widely deployed\
    \ standard for IP\n   source address validation, functions at the coarse granularity\
    \ of\n   networks.  It verifies that the prefix of an IP source address routes\n\
    \   to the network from which the packet was received.  An advantage of\n   ingress\
    \ filtering is simplicity: the decision of whether to accept or\n   to reject\
    \ an IP source address can be made solely based on the\n   information available\
    \ from routing protocols.  However, the\n   simplicity comes at the cost of not\
    \ being able to validate IP source\n   addresses at a finer granularity, due to\
    \ the aggregated nature of the\n   information available from routing protocols.\
    \  Finer-grained IP\n   source address validation would ensure that source address\n\
    \   information is accurate, reduce the ability to launch denial-of-\n   service\
    \ attacks, and help with localizing hosts and identifying\n   misbehaving hosts.\
    \  Partial solutions [BA2007] exist for finer-\n   grained IP source address validation\
    \ but are proprietary and hence\n   often unsuitable for corporate procurement.\n\
    \   The Source Address Validation Improvement (SAVI) method was developed\n  \
    \ to complement ingress filtering with standardized IP source address\n   validation\
    \ at the maximally fine granularity of individual IP\n   addresses.  It prevents\
    \ hosts attached to the same link from spoofing\n   each other's IP addresses.\
    \  To facilitate deployment in networks of\n   various kinds, the SAVI method\
    \ was designed to be modular and\n   extensible.  This document describes and\
    \ motivates the design of the\n   SAVI method.\n   Note that SAVI raises a number\
    \ of important privacy considerations\n   that are discussed more fully in [RFC6959].\
    \  SAVI implementers must\n   take those privacy considerations into account when\
    \ designing\n   solutions that match this framework and follow the recommendations\n\
    \   given in [RFC6959].\n"
- title: 2.  Model
  contents:
  - "2.  Model\n   To enable network operators to deploy fine-grained IP source address\n\
    \   validation without a dependency on supportive functionality on hosts,\n  \
    \ the SAVI method was designed to be purely network based.  A SAVI\n   instance\
    \ enforces the hosts' use of legitimate IP source addresses\n   according to the\
    \ following three-step model:\n   1.  Identify which IP source addresses are legitimate\
    \ for a host,\n       based on monitoring packets exchanged by the host.\n   2.\
    \  Bind a legitimate IP address to a link-layer property of the\n       host's\
    \ network attachment.  This property, called a \"binding\n       anchor\", must\
    \ be verifiable in every packet that the host sends\n       and harder to spoof\
    \ than the host's IP source address itself.\n   3.  Enforce that the IP source\
    \ addresses in packets match the binding\n       anchors to which they were bound.\n\
    \   This model allows SAVI functionality (a SAVI instance) to be located\n   anywhere\
    \ on the link to which the hosts attach, hence enabling\n   different locations\
    \ for a SAVI instance.  One way to locate a SAVI\n   instance is in the hosts'\
    \ default router.  IP source addresses are\n   then validated in packets traversing\
    \ the default router, yet the IP\n   source addresses in packets exchanged locally\
    \ on the link may bypass\n   validation.  Another way to locate a SAVI instance\
    \ is in a switch\n   between the hosts and their default router.  Thus, packets\
    \ may\n   undergo IP source address validation even if exchanged locally on the\n\
    \   link.\n   The closer a SAVI instance is located to the host, the more effective\n\
    \   the SAVI method is.  This is because each of the three steps of the\n   SAVI\
    \ model can best be accomplished in a position close to the host:\n   o  Identifying\
    \ a host's legitimate IP source addresses is most\n      efficient close to the\
    \ host because the likelihood that the host's\n      packets bypass a SAVI instance,\
    \ and hence cannot be monitored,\n      increases with the topological distance\
    \ between the SAVI instance\n      and the host.\n   o  Selecting a binding anchor\
    \ for a host's IP source address is\n      easiest close to the host because many\
    \ link-layer properties are\n      unique for a given host only on a link segment\
    \ directly attached\n      to the host.\n   o  Enforcing a host's use of a legitimate\
    \ IP source address is most\n      reliable when pursued close to the host because\
    \ the likelihood\n      that the host's packets bypass a SAVI instance, and hence\
    \ do not\n      undergo IP source address validation, increases with the\n   \
    \   topological distance between the SAVI instance and the host.\n   The preferred\
    \ location of SAVI instances is therefore close to hosts,\n   such as in switches\
    \ that directly attach to the hosts whose IP source\n   addresses are being validated.\n\
    \   Nevertheless, it is useful for SAVI mechanisms to be able to handle\n   situations\
    \ where hosts are not directly attached to the SAVI-capable\n   device.  For instance,\
    \ deployments with both SAVI-capable and legacy\n   switches could be supported.\
    \  In general, a SAVI solution needs to\n   specify how it deals with a number\
    \ of deployment scenarios and\n   exceptional situations, including interaction\
    \ with legacy devices,\n   hosts moving between wireless attachment points, network\
    \ partitions,\n   and so on.\n   Besides, in the case of legacy switches, the\
    \ security level is lower,\n   as there is no full protection for the hosts connected\
    \ to the legacy\n   server.\n"
- title: 3.  Deployment Options
  contents:
  - "3.  Deployment Options\n   The model of the SAVI method, as explained in Section\
    \ 2, is\n   deployment specific in two ways:\n   o  The identification of legitimate\
    \ IP source addresses is dependent\n      on the IP address assignment method\
    \ in use on a link, since it is\n      through assignment that a host becomes\
    \ the legitimate user of an\n      IP source address.\n   o  Binding anchors are\
    \ dependent on the technology used to build the\n      link on which they are\
    \ used, as binding anchors are link-layer\n      properties of a host's network\
    \ attachment.\n   To facilitate the deployment of the SAVI method in networks\
    \ of\n   various kinds, the SAVI method is designed to support different IP\n\
    \   address assignment methods and to function with different binding\n   anchors.\
    \  Naturally, both the IP address assignment methods in use on\n   a link and\
    \ the available binding anchors have an impact on the\n   functioning and the\
    \ strength of IP source address validation.  The\n   following two subsections\
    \ explain this impact and describe how the\n   SAVI method accommodates this.\n"
- title: 3.1.  IP Address Assignment Methods
  contents:
  - "3.1.  IP Address Assignment Methods\n   Since the SAVI method traces IP address\
    \ assignment packets, it\n   necessarily needs to incorporate logic that is specific\
    \ to particular\n   IP address assignment methods.  However, developing SAVI method\n\
    \   variants for each IP address assignment method is alone not\n   sufficient\
    \ since multiple IP address assignment methods may coexist\n   on a given link.\
    \  The SAVI method hence comes in multiple variants,\n   e.g., for links with\
    \ DHCP [RFC2131] [RFC3315], Stateless Address\n   Autoconfiguration (SLAAC) [RFC4862]\
    \ with or without Secure Neighbor\n   Discovery (SEND) [RFC3971], Internet Key\
    \ Exchange Protocol Version 2\n   (IKEv2) [RFC5996] [RFC5739] [RFC5026], and combinations\
    \ thereof.\n   The reason to develop SAVI method variants for each single IP address\n\
    \   configuration method, in addition to the variant that handles all IP\n   address\
    \ assignment methods, is to minimize the complexity of the\n   common case.  Many\
    \ link deployments today either are constrained to a\n   single IP address assignment\
    \ method or, equivalently from the\n   perspective of the SAVI method, use different\
    \ IP address assignment\n   methods within different IP address prefixes.  The\
    \ SAVI method for\n   such links can be simpler than the SAVI method for links\
    \ with\n   multiple IP address assignment methods per IP address prefix.\n"
- title: 3.2.  Binding Anchors
  contents:
  - "3.2.  Binding Anchors\n   The SAVI method supports a range of binding anchors:\n\
    \   o  The IEEE extended unique identifier, EUI-48 or EUI-64, of a host's\n  \
    \    interface.\n   o  The port on an Ethernet switch to which a host attaches.\n\
    \   o  The security association between a host and the base station on\n     \
    \ wireless links.\n   o  The combination of a host interface's link-layer address\
    \ and a\n      customer relationship in cable modem networks.\n   o  An ATM virtual\
    \ channel, a PPP session identifier, or a Layer 2\n      Tunneling Protocol (L2TP)\
    \ session identifier in a DSL network.\n   o  A tunnel that connects to a single\
    \ host, such as an IP-in-IP\n      tunnel, a Generic Routing Encapsulation (GRE)\
    \ tunnel, or an MPLS\n      label-switched path.\n   The various binding anchors\
    \ differ significantly in the security they\n   provide.  IEEE extended unique\
    \ identifiers, for example, fail to\n   render a secure binding anchor because\
    \ they can be spoofed with\n   little effort.  Switch ports alone may be insufficient\
    \ because they\n   may connect to more than a single host, such as in the case\
    \ of\n   concatenated switches.\n   Given this diversity in the security provided,\
    \ one could define a set\n   of possible binding anchors and leave it up to the\
    \ administrator to\n   choose one or more of them.  Such a selection of binding\
    \ anchors\n   would, of course, have to be accompanied by an explanation of the\n\
    \   pros and cons of the different binding anchors.  In addition, SAVI\n   devices\
    \ may have a default binding anchor depending on the lower\n   layers.  Such a\
    \ default could be to use switch ports when available\n   and MAC addresses otherwise\
    \ or to use MAC addresses and switch ports\n   in addition if available.\n"
- title: 4.  Scalability Optimizations
  contents:
  - "4.  Scalability Optimizations\n   The preference to locate a SAVI instance close\
    \ to hosts implies that\n   multiple SAVI instances must be able to coexist in\
    \ order to support\n   large links.  Although the model of the SAVI method is\
    \ independent of\n   the number of SAVI instances per link, coexistence of multiple\
    \ SAVI\n   instances without further measures can lead to higher-than-necessary\n\
    \   memory requirements.  Since a SAVI instance creates bindings for the\n   IP\
    \ source addresses of all hosts on a link, bindings are replicated\n   if multiple\
    \ SAVI instances coexist on the link.  High memory\n   requirements, in turn,\
    \ increase the cost of a SAVI instance.  This is\n   problematic in particular\
    \ for SAVI instances that are located on a\n   switch since it may significantly\
    \ increase the cost of such a switch.\n   To reduce memory requirements for SAVI\
    \ instances that are located on\n   a switch, the SAVI method enables the suppression\
    \ of binding\n   replication on links with multiple SAVI instances.  This requires\n\
    \   manual disabling of IP source address validation on switch ports that\n  \
    \ connect to other switches running a SAVI instance.  Each SAVI\n   instance is\
    \ then responsible for validating IP source addresses only\n   on those ports\
    \ to which hosts attach either directly or via switches\n   without a SAVI instance.\
    \  On ports towards other switches running a\n   SAVI instance, IP source addresses\
    \ are not validated.  The switches\n   running SAVI instances thus form a \"protection\
    \ perimeter\".  The IP\n   source addresses in packets passing the protection\
    \ perimeter are\n   validated by the ingress SAVI instance, but no further validation\n\
    \   takes place as long as the packets remain within or leave the\n   protection\
    \ perimeter.\n                                                 ..............\n\
    \                       protection perimeter -->  : +--------+ :\n          +---+\
    \  +---+                           : |  SAVI  | :\n          | A |  | B |  <--\
    \ hosts                : | switch | :\n          +---+  +---+                \
    \           : +--------+ :\n         ...|......|.............................:\
    \        |   :\n         : +--------+          +--------+          +--------+\
    \ :\n         : |  SAVI  |----------| legacy |          |  SAVI  | :\n       \
    \  : | switch |          | switch |----------| switch | :\n         : +--------+\
    \          +--------+          +--------+ :\n         :   |        ...............................|........:\n\
    \         : +--------+ :                            +--------+\n         : | \
    \ SAVI  | :                            | legacy |\n         : | switch | :   \
    \                         | switch |\n         : +--------+ :                \
    \            +--------+\n         :............:                             |\
    \      |\n                                                  +---+  +---+\n   \
    \                                    hosts -->  | C |  | D |\n               \
    \                                   +---+  +---+\n                  Figure 1:\
    \ Protection Perimeter Concept\n   Figure 1 illustrates the concept of the protection\
    \ perimeter.  The\n   figure shows a link with six switches, of which four, denoted\
    \ \"SAVI\n   switch\", run a SAVI instance.  The protection perimeter created\
    \ by\n   the four SAVI instances is shown as a dotted line in the figure.  IP\n\
    \   source address validation is enabled on all switch ports on the\n   protection\
    \ perimeter, and it is disabled on all other switch ports.\n   Four hosts, denoted\
    \ A through D in the figure, attach to the\n   protection perimeter.\n   In the\
    \ example in Figure 1, the protection perimeter encompasses one\n   of the legacy\
    \ switches, located in the middle of the depicted link\n   topology.  This enables\
    \ a single, unpartitioned protection perimeter.\n   A single protection perimeter\
    \ minimizes memory requirements for the\n   SAVI instances because every binding\
    \ is kept only once, namely, by\n   the SAVI instance that attaches to the host\
    \ being validated.\n   Excluding the legacy switch from the protection perimeter\
    \ would\n   result in two smaller protection perimeters to the left and to the\n\
    \   right of the depicted link topology.  The memory requirements for the\n  \
    \ SAVI instances would then be higher: since IP source address\n   validation\
    \ would be activated on the two ports connecting to the\n   legacy switch, the\
    \ SAVI instances adjacent to the legacy switch would\n   replicate all bindings\
    \ from the other protection perimeter,\n   respectively.  The reason why it is\
    \ possible to include the legacy\n   switch in the protection perimeter is because\
    \ the depicted link\n   topology guarantees that packets cannot enter the protection\n\
    \   perimeter via this legacy switch.  Without this guarantee, the legacy\n  \
    \ switch would have to be excluded from the protection perimeter in\n   order\
    \ to ensure that packets entering the protection perimeter\n   undergo IP source\
    \ address validation.\n   Note that if such configuration is used, care must be\
    \ taken as any\n   hosts on subnets attached to non-enforcing ports will be able\
    \ to use\n   spoofed source addresses.\n"
- title: 5.  Reliability Optimizations
  contents:
  - "5.  Reliability Optimizations\n   The explicit storage of legitimate IP addresses\
    \ in the form of\n   bindings implies that failure to create a binding, or the\
    \ premature\n   removal of bindings, can lead to loss of legitimate packets. \
    \ There\n   are three situations in which this can happen:\n   o  Legitimate IP\
    \ address configuration packets, which should trigger\n      the creation of a\
    \ binding in a SAVI instance, are lost before\n      reaching the SAVI instance.\n\
    \   o  A SAVI instance loses a binding, for example, due to a restart.\n   o \
    \ The link topology changes, resulting in hosts to communicate\n      through\
    \ SAVI instances that do not have a binding for those hosts'\n      IP addresses.\n\
    \   To limit the disruption that missing bindings for legitimate IP\n   addresses\
    \ can have, the SAVI method includes a mechanism for reactive\n   binding creation\
    \ based on regular packets.  This mechanism\n   supplements the proactive binding\
    \ creation based on IP address\n   configuration packets.  Reactive binding creation\
    \ occurs when a SAVI\n   instance recognizes excessive drops of regular packets\
    \ originating\n   from the same IP address.  The SAVI instance then verifies whether\n\
    \   said IP address is unique on the link.  How the verification is\n   carried\
    \ out depends on the IP address configuration method that the\n   SAVI instance\
    \ supports.  The SAVI method variant for Stateless\n   Address Autoconfiguration\
    \ and for Secure Neighbor Discovery verifies\n   an IP address through the Duplicate\
    \ Address Detection procedure.  The\n   SAVI method variant for DHCP verifies\
    \ an IP address through a DHCP\n   Lease Query message exchange with the DHCP\
    \ server.  If verification\n   indicates that the IP address is unique on the\
    \ link, the SAVI\n   instance creates a binding for the IP address.  Otherwise,\
    \ no binding\n   is created, and packets sent from the IP address continue to\
    \ be\n   dropped.  These reliability issues should be addressed in all the\n \
    \  SAVI protocols describing particular SAVI methods.\n"
- title: 6.  Scenario with Multiple Assignment Methods
  contents:
  - "6.  Scenario with Multiple Assignment Methods\n   While multiple assignment methods\
    \ can be used on the same link, the\n   SAVI device may have to deal with a mix\
    \ of binding discovery methods.\n   If the address prefix used for each assignment\
    \ method is different,\n   the \"mix scenario\" behaves the same as with the scenario\
    \ with only\n   one assignment method.  If different address assignment methods\
    \ are\n   used to assign addresses from the same prefix, additional\n   considerations\
    \ are needed because one binding mechanism may create a\n   binding violating\
    \ an existing binding from another binding mechanism,\n   e.g., binding from First-Come,\
    \ First-Served (FCFS) SAVI [RFC6620] may\n   violate a binding from SAVI-DHCP\
    \ [SAVI-DHCP].  Thus, the collision\n   between different SAVI mechanisms in the\
    \ mix scenario must be handled\n   in case more than one address assignment method\
    \ is used to assign\n   addresses from the same prefix.\n   The prioritization\
    \ of relationships between different address\n   assignment methods is used as\
    \ the basis to solve possible collisions.\n   Current standard documents of address\
    \ assignment methods (DHCP\n   [RFC2131], DHCPv6 [RFC3315], SLAAC [RFC4862], and\
    \ SEND [RFC3971])\n   have implied the prioritization relationship in general\
    \ cases.\n   However, in some scenarios, the default prioritization level may\
    \ not\n   be quite suitable.  A configurable prioritization level should be\n\
    \   supported in the SAVI solution for the mix scenario [SAVI-MIX].\n"
- title: 7.  Prefix Configuration
  contents:
  - "7.  Prefix Configuration\n   Before setting up a host-level granularity binding,\
    \ it is important\n   to configure correct prefixes on the SAVI device.  This\
    \ document\n   suggests a set of 3 prefix configuration mechanisms at a SAVI device:\n\
    \   o  Manual Prefix Configuration: The allowed prefix scope of IPv4\n      addresses,\
    \ IPv6 static addresses, IPv6 addresses assigned by\n      Stateless Address Autoconfiguration\
    \ (SLAAC), and IPv6 addresses\n      assigned by DHCPv6 can be set manually at\
    \ the SAVI device.\n      FE80::/64 is always a feasible prefix in IPv6.\n   o\
    \  Prefix Configuration by Router Advertisement (RA) Snooping: The\n      allowed\
    \ prefix scope of IPv6 static addresses and IPv6 addresses\n      assigned by\
    \ SLAAC can be set at the SAVI device through snooping\n      an RA message at\
    \ the SAVI device.\n   o  Prefix Configuration by DHCP Prefix Delegation (DHCP-PD)\
    \ Snooping:\n      The allowed prefix scope of IPv6 static addresses, IPv6 addresses\n\
    \      assigned by SLAAC, and IPv6 addresses assigned by DHCPv6 can be\n     \
    \ set through snooping a DHCP-PD message at the SAVI device.\n   If some of the\
    \ prefix scopes are set to have no prefix, the\n   implication is that the corresponding\
    \ address assignment method is\n   not allowed in the network.\n   There is no\
    \ need to explicitly present these prefix scopes, but these\n   restrictions should\
    \ be used as the premier check in binding setup.\n   When SAVI is partially deployed,\
    \ binding may fail as RA messages and\n   DHCP-PD can be spoofed.  So, it is recommended\
    \ that Manual Prefix\n   Configuration be used unless SAVI gets fully deployed.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank the SAVI working group\
    \ for a thorough\n   technical discussion on the design and the framework of the\
    \ SAVI\n   method as captured in this document, in particular Erik Nordmark,\n\
    \   Guang Yao, Eric Levy-Abegnoli, and Alberto Garcia.  Thanks also to\n   Torben\
    \ Melsen for reviewing this document.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document only discusses the possible methods\
    \ to mitigate the\n   usage of forged IP addresses.  Some such methods may rely\
    \ on\n   cryptographic methods, but not all do.  As a result, it is generally\n\
    \   not possible to prove address ownership in any strong sense.  If a\n   binding\
    \ anchor is not exclusive for each IP address, or is without\n   strong security,\
    \ addresses can still be forged.  Besides, the binding\n   may not accord with\
    \ the address management requirement, which can be\n   more specified for each\
    \ client.  However, given no new protocol is\n   introduced, the improvements\
    \ are still acceptable.  If strong\n   security is required when using IP addresses,\
    \ then cryptographic-\n   based authentication must be used as it is the only\
    \ way to provide\n   strong security.\n   Section 2 explains how the preferred\
    \ location of SAVI instances is\n   close to hosts.  However, in some cases, this\
    \ makes the SAVI\n   instances themselves vulnerable and may defeat the purpose\
    \ of\n   deploying a SAVI solution.  For instance, deployments should not\n  \
    \ place SAVI functionality in devices that are physically exposed.\n   Even if\
    \ the device correctly monitors the source address usage of\n   hosts, an attacker\
    \ could replace the device with one that does not\n   check or hook up to a trusted\
    \ interface from the device to the rest\n   of the network.  Similarly, deployments\
    \ where SAVI instances are\n   distributed across administrative boundaries are\
    \ not recommended.\n   For instance, in most cases, it would be undesirable to\
    \ deploy a\n   distributed SAVI solution on both sides of a customer-provider\n\
    \   interface if the solution required trusting the correct operation of\n   the\
    \ SAVI devices on the other side of the interface.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2131]   Droms, R., \"Dynamic Host Configuration\
    \ Protocol\", RFC\n               2131, March 1997.\n   [RFC3315]   Droms, R.,\
    \ Bound, J., Volz, B., Lemon, T., Perkins, C.,\n               and M. Carney,\
    \ \"Dynamic Host Configuration Protocol for\n               IPv6 (DHCPv6)\", RFC\
    \ 3315, July 2003.\n   [RFC3971]   Arkko, J., Kempf, J., Zill, B., and P. Nikander,\
    \ \"SEcure\n               Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n\
    \   [RFC4862]   Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n   \
    \            Address Autoconfiguration\", RFC 4862, September 2007.\n   [RFC5026]\
    \   Giaretta, G., Kempf, J., and V. Devarapalli, \"Mobile IPv6\n             \
    \  Bootstrapping in Split Scenario\", RFC 5026, October 2007.\n   [RFC5739]  \
    \ Eronen, P., Laganier, J., and C. Madson, \"IPv6\n               Configuration\
    \ in Internet Key Exchange Protocol Version 2\n               (IKEv2)\", RFC 5739,\
    \ February 2010.\n   [RFC5996]   Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n\
    \               \"Internet Key Exchange Protocol Version 2 (IKEv2)\", RFC\n  \
    \             5996, September 2010.\n   [RFC6620]   Nordmark, E., Bagnulo, M.,\
    \ and E. Levy-Abegnoli, \"FCFS\n               SAVI: First-Come, First-Served\
    \ Source Address Validation\n               Improvement for Locally Assigned IPv6\
    \ Addresses\", RFC\n               6620, May 2012.\n   [RFC6959]   McPherson,\
    \ D., Baker, F., and J. Halpern, \"Source Address\n               Validation Improvement\
    \ (SAVI) Threat Scope\", RFC 6959,\n               May 2013.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [BA2007]    Baker, F., \"Cisco IP Version 4\
    \ Source Guard\", Work in\n               Progress, November 2007.\n   [BCP38]\
    \     Ferguson, P. and D. Senie, \"Network Ingress Filtering:\n              \
    \ Defeating Denial of Service Attacks which employ IP\n               Source Address\
    \ Spoofing\", BCP 38, RFC 2827, May 2000.\n   [BCP84]     Baker, F. and P. Savola,\
    \ \"Ingress Filtering for\n               Multihomed Networks\", BCP 84, RFC 3704,\
    \ March 2004.\n   [SAVI-DHCP] Bi, J., Wu, J., Yao, G., and F. Baker, \"SAVI Solution\
    \ for\n   DHCP\", Work in Progress, June 2013.\n   [SAVI-MIX]  Bi, J., Yao, G.,\
    \ Halpern, J., and E. Levy-Abegnoli, \"SAVI\n   for Mixed Address Assignment Methods\
    \ Scenario\", Work in Progress, May\n   2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jianping Wu\n   Tsinghua University\n   Computer Science,\
    \ Tsinghua University\n   Beijing  100084\n   China\n   EMail: jianping@cernet.edu.cn\n\
    \   Jun Bi\n   Tsinghua University\n   Network Research Center, Tsinghua University\n\
    \   Beijing  100084\n   China\n   EMail: junbi@tsinghua.edu.cn\n   Marcelo Bagnulo\n\
    \   Universidad Carlos III de Madrid\n   Avenida de la Universidad 30\n   Leganes,\
    \ Madrid  28911\n   Spain\n   EMail: marcelo@it.uc3m.es\n   Fred Baker\n   Cisco\
    \ Systems\n   Santa Barbara, CA  93117\n   United States\n   EMail: fred@cisco.com\n\
    \   Christian Vogt (editor)\n   3507 Palmilla Drive\n   San Jose, CA  95134\n\
    \   United States\n   EMail: mail@christianvogt.net\n"
