- title: __initial_text__
  contents:
  - '       Location-to-Service Translation (LoST) Protocol Extensions

    '
- title: Abstract
  contents:
  - "Abstract\n   An important class of location-based services answers the question,\n\
    \   \"What instances of this service are closest to me?\"  Examples include\n\
    \   finding restaurants, gas stations, stores, automated teller machines,\n  \
    \ wireless access points (hot spots), or parking spaces.  Currently,\n   the Location-to-Service\
    \ Translation (LoST) protocol only supports\n   mapping locations to a single\
    \ service based on service regions.  This\n   document describes an extension\
    \ that allows queries of the type \"N\n   nearest\", \"within distance X\", and\
    \ \"served by\".\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6451.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Requirements Notation  . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Service Regions  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4.  New <findService> Query Types: \"N nearest\", \"within\n\
    \       distance X\", and \"served by\" . . . . . . . . . . . . . . . . .  4\n\
    \   5.  LoST Extensions  . . . . . . . . . . . . . . . . . . . . . . .  4\n  \
    \   5.1.  New Use of Shapes in Queries . . . . . . . . . . . . . . .  5\n    \
    \ 5.2.  Queries Based on Service Regions . . . . . . . . . . . . .  7\n     5.3.\
    \  Difference between \"within distance X\" and \"served by\"\n           Queries\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  9\n     5.4.  Limiting the\
    \ Number of Returned Service URIs . . . . . . . 10\n     5.5.  The <serviceLocation>\
    \ Element in Responses . . . . . . . . 12\n   6.  Emergency Services . . . . .\
    \ . . . . . . . . . . . . . . . . . 15\n   7.  RELAX NG Schema  . . . . . . .\
    \ . . . . . . . . . . . . . . . . 16\n   8.  Security Considerations  . . . .\
    \ . . . . . . . . . . . . . . . 18\n   9.  IANA Considerations  . . . . . . .\
    \ . . . . . . . . . . . . . . 18\n     9.1.  LoST Extensions RELAX NG Schema Registration\
    \ . . . . . . . 18\n     9.2.  LoST Extensions Namespace Registration . . . .\
    \ . . . . . . 19\n   10. Non-Normative RELAX NG Schema in XML Syntax  . . . .\
    \ . . . . . 19\n   11. Acknowledgments  . . . . . . . . . . . . . . . . . . .\
    \ . . . . 22\n   12. Normative References . . . . . . . . . . . . . . . . . .\
    \ . . . 22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Location-to-Service Translation (LoST) protocol [RFC5222]\
    \ maps\n   service identifiers (URNs) and civic or geospatial information to\n\
    \   service URIs, based on service regions.  While motivated by mapping\n   locations\
    \ to the public safety answering point (PSAP) serving that\n   location, the protocol\
    \ has been designed to generalize to other\n   location-mapping services.\n  \
    \ However, the current LoST query model assumes that each service URI\n   has\
    \ a service region and that service regions do not overlap.  This\n   fits the\
    \ emergency services model, where the service region of a PSAP\n   is given by\
    \ jurisdictional boundaries, but does not work as well for\n   other services\
    \ that do not have clearly defined boundaries.  For\n   example, any given location\
    \ is likely served by a number of different\n   restaurants, depending on how\
    \ far the prospective customer is willing\n   to travel.\n   We extend LoST with\
    \ three additional <findService> query types,\n   giving the protocol the ability\
    \ to find the N nearest instances of a\n   particular service, all services within\
    \ a given distance, and all\n   services whose service region includes the user's\
    \ current location.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Service Regions
  contents:
  - "3.  Service Regions\n   Generally speaking, service regions apply only to a subset\
    \ of\n   services.\n   In Section 1 of [RFC5222], a service region is defined\
    \ as follows:\n   \"To minimize round trips and to provide robustness against\
    \ network\n   failures, LoST supports caching of individual mappings and indicates\n\
    \   the region for which the same answer would be returned (\"service\n   region\"\
    ).\"\n   Section 5.5 of [RFC5222] further defines a service region:\n   \"A response\
    \ MAY indicate the region for which the service URL\n   returned would be the\
    \ same as in the actual query, the so-called\n   service region.\"\n   For emergency\
    \ services, service region and service area, as defined\n   in [RFC5222], represent\
    \ the same geographical area.  This is due to\n   the fact that each PSAP serves\
    \ its own area without overlapping with\n   the service area of any other PSAP.\
    \  For as long as the client is\n   located in the service area of a PSAP, the\
    \ same PSAP is returned by\n   the LoST server, that is, the service region does\
    \ not change.  A\n   service region is the service area of a PSAP.\n   For non-emergency\
    \ services, different points of service may have\n   different overlapping service\
    \ areas.  This means that one service\n   region will probably include a large\
    \ number of service areas.  Since\n   we can get a large number of service URIs\
    \ for each query, a service\n   region per the definition above would be the region\
    \ within which a\n   user would get the same set of service URIs.  If one or more\
    \ of the\n   URIs in the set changes, the set of URIs changes, i.e., the service\n\
    \   region changes.  Therefore, for non-emergency services, the service\n   region\
    \ defined in [RFC5222] would change frequently, thus greatly\n   reducing the\
    \ benefit of caching responses by service region.\n   Generally speaking, we can\
    \ divide location-based services into two\n   main categories based on:\n   o\
    \  how far they are from the user (e.g., automatic teller machine,\n      food\
    \ takeout);\n   o  whether or not their service area includes the user's current\n\
    \      location (e.g., pizza delivery, PSAP).\n   For services included in the\
    \ first category, service areas and\n   therefore service regions are not relevant\
    \ while they are important\n   for services included in the second category. \
    \ This distinction\n   becomes obvious if we consider, for example, the difference\
    \ between\n   takeout (first category) and delivery (second category).  In the\
    \ case\n   of takeout, the user wants to go to a particular restaurant and buy\n\
    \   dinner, regardless of whether his location falls into the delivery\n   service\
    \ area of the restaurant or not.  For delivery, the user cares\n   about the restaurant\
    \ service area as the restaurant will deliver food\n   to him only if his location\
    \ falls within the restaurant service area.\n   There is a clear distinction between\
    \ services that require service\n   areas and services that do not.  The LoST\
    \ extensions defined in this\n   document take this into account by using the\
    \ service classification\n   mentioned above.\n"
- title: '4.  New <findService> Query Types: "N nearest", "within distance X", and'
  contents:
  - "4.  New <findService> Query Types: \"N nearest\", \"within distance X\", and\n\
    \    \"served by\"\n   We introduce three new types of <findService> queries:\
    \ \"N nearest\",\n   \"within distance X\", and \"served by\".  The first query\
    \ returns the N\n   points of interest (POIs) closest to the client's physical\
    \ location;\n   the second query discovers all the points of interest located\
    \ within\n   a given distance from the client's physical location; and the third\n\
    \   query returns all the points of interest whose service area includes\n   the\
    \ client's current location.\n"
- title: 5.  LoST Extensions
  contents:
  - "5.  LoST Extensions\n   For \"within distance X\" queries, the LoST client needs\
    \ to specify to\n   the server the range within which instances of a particular\
    \ service\n   should be searched.  In order to do this, we make use of various\n\
    \   shapes [RFC5491] in LoST queries.\n   For \"served by\" queries, the LoST\
    \ client needs to let the server know\n   that it MUST return only those services\
    \ whose service area includes\n   the user's current location.  In order to do\
    \ this, we introduce the\n   <region> element in <findService> queries.  Service\
    \ region boundaries\n   MAY be returned in a LoST <findServiceResponse> as described\
    \ in\n   [RFC5222].\n   For \"N nearest\" queries, the LoST client needs to let\
    \ the server know\n   N, i.e., the maximum number of service URIs to be returned\
    \ in a\n   response.  In order to specify this, we introduce the <limit> element\n\
    \   in <findService> queries.\n   Also, we introduce a new element in LoST responses,\
    \ namely\n   <serviceLocation>.  This new element is used by the server to\n \
    \  indicate to the client the physical location of points of interest.\n   In\
    \ doing so, the client can compute the distance and other metrics\n   between\
    \ its current location and the points of interest.\n   The new elements <region>,\
    \ <limit>, and <serviceLocation> are defined\n   in the \"lost-ext\" namespace.\
    \  This new namespace is defined in\n   Section 7.\n"
- title: 5.1.  New Use of Shapes in Queries
  contents:
  - "5.1.  New Use of Shapes in Queries\n   In [RFC5491], different shapes are defined\
    \ in order to represent a\n   point and an area of uncertainty within which the\
    \ user might be\n   situated.  While this remains true for \"served by\" queries,\
    \ for\n   \"within distance X\" queries, such shapes can be interpreted as the\n\
    \   area within which we want to find a service.  In particular, we want\n   to\
    \ search for points of service within that area because our location\n   is within\
    \ that area with a certain probability.  We can think of the\n   area of uncertainty\
    \ in a shape as the probability that a user might\n   be within that area, so\
    \ we want to look for services within that\n   area.  Thus, the \"within distance\
    \ X\" query manually sets the\n   uncertainty in user location to an uncertainty\
    \ shape with\n   parameter X.\n   For example, Figure 1 shows a \"within distance\
    \ X\" <findService>\n   geodetic query using the circular shape.  With the query\
    \ shown in\n   Figure 1, we are asking the LoST server to send us a list of service\n\
    \   URIs for pizza places within 200 meters from our approximate position\n  \
    \ specified in <gml:pos>.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <findService\n\
    \     xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\
    \n     xmlns:gml=\"http://www.opengis.net/gml\"\n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\
    \n     serviceBoundary=\"value\"\n     recursive=\"true\">\n     <ext:region>false</ext:region>\n\
    \     <location id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n       <gs:Circle\
    \ srsName=\"urn:ogc:def:crs:EPSG::4326\">\n         <gml:pos>37.775 -122.422</gml:pos>\n\
    \         <gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">\n            200\n  \
    \       </gs:radius>\n       </gs:Circle>\n     </location>\n     <service>urn:service:food.pizza</service>\n\
    \   </findService>\n   Figure 1: A \"within distance X\" <findService> geodetic\
    \ query using\n   the circular shape (a hypothetical service URN of\n   \"urn:service:food.pizza\"\
    \ is used)\n   Aside from the circular shape, other shapes are also useful.  In\n\
    \   particular, there are situations in which it is useful to query for\n   services\
    \ in a certain direction of movement rather than in an exact\n   physical location.\
    \  For example, if a user is driving north from New\n   York City to Boston, it\
    \ would be useful for this user to be able to\n   query for services north of\
    \ where he currently is, that is, not at\n   his current physical location nor\
    \ at his final destination.\n   In order to implement such direction-of-travel\
    \ searches, this\n   document supports the use of shapes such as an ellipse. \
    \ The ellipse\n   has a major and a minor dimension, thus allowing for defining\
    \ a\n   \"privileged\" direction by having the major dimension in the direction\n\
    \   of movement.  In the present context, the circular shape allows a\n   device\
    \ to search for services in any direction surrounding its\n   physical location,\
    \ while shapes such as the ellipse allow the device\n   to search for services\
    \ in a more specific direction.  Figure 2 shows\n   a \"within distance X\" <findService>\
    \ geodetic query using the\n   elliptical shape.  The ellipse shape is defined\
    \ in Section 5.2.4 of\n   [RFC5491].\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     xmlns:ext=\"\
    urn:ietf:params:xml:ns:lost-ext\"\n     xmlns:gml=\"http://www.opengis.net/gml\"\
    \n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\n     serviceBoundary=\"\
    value\"\n     recursive=\"true\">\n     <ext:region>false</ext:region>\n     <location\
    \ id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n       <gs:Ellipse srsName=\"\
    urn:ogc:def:crs:EPSG::4326\">\n         <gml:pos>42.5463 -73.2512</gml:pos>\n\
    \         <gs:semiMajorAxis uom=\"urn:ogc:def:uom:EPSG::9001\">\n           1235\n\
    \         </gs:semiMajorAxis>\n         <gs:semiMinorAxis uom=\"urn:ogc:def:uom:EPSG::9001\"\
    >\n           660\n         </gs:semiMinorAxis>\n         <gs:orientation uom=\"\
    urn:ogc:def:uom:EPSG::9102\">\n           41.2\n         </gs:orientation>\n \
    \      </gs:Ellipse>\n     </location>\n     <service>urn:service:food.pizza</service>\n\
    \   </findService>\n   Figure 2: A \"within distance X\" <findService> geodetic\
    \ query using\n   the elliptical shape (a hypothetical service URN of\n   \"urn:service:food.pizza\"\
    \ is used)\n"
- title: 5.2.  Queries Based on Service Regions
  contents:
  - "5.2.  Queries Based on Service Regions\n   As mentioned in Section 3, we can\
    \ divide location-based services into\n   two main categories based on:\n   o\
    \  how far they are from the user;\n   o  whether or not their service area includes\
    \ the user's current\n      location.\n   A \"within distance X\" query addresses\
    \ services included in the first\n   category, while a \"served by\" query addresses\
    \ services included in\n   the second category.\n   When querying LoST regarding\
    \ a specific service, we need to specify\n   if such service belongs to either\
    \ the first or the second category.\n   This is necessary since depending on the\
    \ category to which the\n   service belongs, the LoST server has to follow a different\
    \ metric in\n   selecting the results to include in the response.\n   For example,\
    \ Figure 3 shows three points of interest with their\n   service areas.  The user\
    \ location (i.e., the LoST client location) is\n   represented by a circular shape\
    \ (e.g., GPS).  If POI 1, POI 2, and\n   POI 3 belong to the first category of\
    \ service (\"within distance X\"\n   query), their service area is irrelevant;\
    \ what matters is how far\n   they are from the user.  For such services, the\
    \ shape representing\n   the user location represents the distance within which\
    \ the user wants\n   to search for services (see Section 5.1).  In the example\
    \ shown in\n   Figure 3, the LoST server returns only POI 3, as POI 3 is the only\n\
    \   point of interest falling within the user location represented by the\n  \
    \ circle, i.e., the area within which the user wants to search for\n   services.\
    \  On the other hand, if the three points of service belong\n   to the second\
    \ category (\"served by\" query), then what matters is\n   their service area.\
    \  In this second scenario, since the circle\n   representing the user location\
    \ overlaps with all three service areas,\n   all three POIs can serve the location\
    \ of the user, and the LoST\n   server has to return all three POIs, that is,\
    \ POI 1, POI 2, and\n   POI 3.\n                            __________________________\n\
    \                            \\    *****                \\\n            ,===============***====,\
    \    ***            \\\n           /              **  \\   /         **      \
    \    \\\n          /   POI 1     **     \\ /            **         \\\n      \
    \   /      o      **       X              **         \\\n        /           \
    \  **       / \\  USER        **         \\\n       /              **      / \
    \  \\  0           **         \\\n      /               **     /     \\      POI\
    \ 3  **          \\\n     /                 **   /       \\       o    **    \
    \       \\\n    /          ,--------**-/---------\\----------**--,          \\\
    \n   `=====================**           \\________**___|___________\\\n      \
    \         |           **                **     |\n               |   o       \
    \  ***          ***       |\n               |  POI 2           *****         \
    \    |\n               `------------------------------------'\n   Figure 3: LoST\
    \ client location (circle) overlapping three service\n   areas of three different\
    \ points of interest (POI 1, POI 2, POI 3)\n   In order for the client to specify\
    \ which of the two categories the\n   service belongs to, we introduce the <region>\
    \ element.  This new\n   element is of type boolean.  When its value is false,\
    \ the LoST server\n   MUST perform a search based on the distance between the\
    \ user and the\n   points of service (\"within distance X\" query).  When its\
    \ value is\n   either true or the <region> element is missing (see Section 5.3),\
    \ the\n   requested service belongs to the second category, and a search based\n\
    \   on service areas MUST be performed by the LoST server (\"served by\"\n   query).\
    \  When present, the <region> element MUST be conveyed inside\n   the <findService>\
    \ element defined in [RFC5222].\n   For a search based on service regions, the\
    \ LoST server MUST return\n   only those services whose service area includes\
    \ the user's current\n   location.  Service region boundaries MAY be returned\
    \ in a LoST\n   <findServiceResponse> as described in [RFC5222].\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n    <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\n     xmlns:gml=\"http://www.opengis.net/gml\"\
    \n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\n     serviceBoundary=\"\
    value\" recursive=\"true\">\n     <ext:region>true</ext:region>\n     <location\
    \ id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n       <gs:Circle srsName=\"\
    urn:ogc:def:crs:EPSG::4326\">\n         <gml:pos>37.775 -122.422</gml:pos>\n \
    \        <gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">\n            200\n   \
    \      </gs:radius>\n       </gs:Circle>\n     </location>\n    <service>urn:service:food.pizza</service>\n\
    \   </findService>\n   Figure 4: A \"served by\" <findService> geodetic query\
    \ with the new\n   <region> element (a hypothetical service URN of\n   \"urn:service:food.pizza\"\
    \ is used)\n"
- title: 5.3.  Difference between "within distance X" and "served by" Queries
  contents:
  - "5.3.  Difference between \"within distance X\" and \"served by\" Queries\n  \
    \ Figures 1 and 4 show examples of a \"within distance X\" query and a\n   \"\
    served by\" query, respectively.  Although very similar, these two\n   types of\
    \ queries have three important differences:\n   o  A \"served by\" query can support\
    \ all the shapes a \"within distance\n      X\" query can support plus the point\
    \ shape.  The point shape does\n      not make sense for a \"within distance X\"\
    \ query and SHOULD NOT be\n      used for this query as it would be equivalent\
    \ to a within-zero-\n      meters search.\n   o  In a \"within distance X\" query,\
    \ we manually set the uncertainty\n      level in user location to X, and we search\
    \ for services within the\n      area represented by such uncertain location.\
    \  In all other types\n      of queries, including a \"served by\" query, the\
    \ level of\n      uncertainty in user location cannot be changed by the user,\
    \ and a\n      search based on service areas is performed.\n   o  In a \"within\
    \ distance X\" query, the value of the <region> element\n      MUST be set to\
    \ false.  A \"served by\" query SHALL have the value of\n      the <region> element\
    \ set to true.  If the <region> element is not\n      present, its value MUST\
    \ be assumed to be equal to true, and the\n      query will be a \"served by\"\
    \ query.  This behavior is consistent\n      with [RFC5222].\n"
- title: 5.4.  Limiting the Number of Returned Service URIs
  contents:
  - "5.4.  Limiting the Number of Returned Service URIs\n   Limiting the number of\
    \ results is helpful, particularly for mobile\n   devices with limited bandwidth.\
    \  For \"N nearest\" queries, the client\n   needs to be able to tell the server\
    \ to return no more than N service\n   URIs.  In order to specify such a limit,\
    \ we introduce a new element,\n   namely <limit>.  This new element is OPTIONAL,\
    \ but when present, it\n   MUST be conveyed inside the <findService> element defined\
    \ in\n   [RFC5222].\n   Figures 5, 6, and 7 show a <findService> geodetic query\
    \ where the\n   client asks the server to return no more than 20 service URIs.\
    \  In\n   particular, Figure 5 shows an \"N nearest\" query; Figure 6 shows a\n\
    \   query that is a combination of \"N nearest\" and \"within distance X\";\n\
    \   and Figure 7 shows a query that is a combination of \"N nearest\" and\n  \
    \ \"served by\".  When receiving such queries, the LoST server will\n   return\
    \ a list of no more than 20 points of interest.\n   If the available points of\
    \ interest are more than N, the server has\n   to identify, among those, the N\
    \ points of interest closest to the\n   client's physical location and MUST return\
    \ those in the response.\n   When the <limit> element is not present in a <findService>\
    \ query,\n   then all available points of interest for the requested type of\n\
    \   service SHOULD be returned by the LoST server.  This behavior is\n   consistent\
    \ with [RFC5222].\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <findService\n\
    \     xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\
    \n     xmlns:gml=\"http://www.opengis.net/gml\"\n     serviceBoundary=\"value\"\
    \ recursive=\"true\">\n     <ext:limit>20</ext:limit>\n     <location id=\"6020688f1ce1896d\"\
    \ profile=\"geodetic-2d\">\n       <gml:Point id=\"point1\" srsName=\"urn:ogc:def:crs:EPSG::4326\"\
    >\n         <gml:pos>40.7128 -74.0092</gml:pos>\n       </gml:Point>\n     </location>\n\
    \   <service>urn:service:food.pizza</service>\n   </findService>\n   Figure 5:\
    \ An \"N nearest\" <findService> geodetic query with the new\n   <limit> element\
    \ (a hypothetical service URN of\n   \"urn:service:food.pizza\" is used)\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <findService\n     xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n     xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\n     xmlns:gml=\"http://www.opengis.net/gml\"\
    \n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\n     serviceBoundary=\"\
    value\"\n     recursive=\"true\">\n     <ext:region>false</ext:region>\n     <ext:limit>20</ext:limit>\n\
    \     <location id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n       <gs:Circle\
    \ srsName=\"urn:ogc:def:crs:EPSG::4326\">\n         <gml:pos>37.775 -122.422</gml:pos>\n\
    \         <gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">\n            200\n  \
    \       </gs:radius>\n       </gs:Circle>\n     </location>\n     <service>urn:service:food.pizza</service>\n\
    \   </findService>\n   Figure 6: A <findService> geodetic query with the new <limit>\
    \ and\n   <region> elements.  This query is a combination of the \"N nearest\"\
    \n   and \"within distance X\" queries (a hypothetical service URN of\n   \"urn:service:food.pizza\"\
    \ is used)\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <findService\n \
    \    xmlns=\"urn:ietf:params:xml:ns:lost1\"\n     xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\
    \n     xmlns:gml=\"http://www.opengis.net/gml\"\n     xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"\
    \n     serviceBoundary=\"value\"\n     recursive=\"true\">\n     <ext:region>true</ext:region>\n\
    \     <ext:limit>20</ext:limit>\n     <location id=\"6020688f1ce1896d\" profile=\"\
    geodetic-2d\">\n       <gs:Circle srsName=\"urn:ogc:def:crs:EPSG::4326\">\n  \
    \       <gml:pos>37.775 -122.422</gml:pos>\n         <gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\"\
    >\n            100\n         </gs:radius>\n       </gs:Circle>\n     </location>\n\
    \     <service>urn:service:food.pizza</service>\n   </findService>\n   Figure\
    \ 7: A <findService> geodetic query with the new <limit> and\n   <region> elements.\
    \  This query is a combination of the \"N nearest\"\n   and \"served by\" queries\
    \ (a hypothetical service URN of\n   \"urn:service:food.pizza\" is used)\n"
- title: 5.5.  The <serviceLocation> Element in Responses
  contents:
  - "5.5.  The <serviceLocation> Element in Responses\n   It is important for the\
    \ LoST client to know the location of a point\n   of interest so that distance,\
    \ route, and other metrics can be\n   computed.  We introduce a new element, namely\
    \ <serviceLocation>.  The\n   <serviceLocation> element contains the location\
    \ of a point of\n   service.  When it is used, it MUST be contained in a <mapping>\n\
    \   element.  In responses such as <findServiceResponse> [RFC5222], a\n   list\
    \ of service URIs, each with its own <serviceLocation> element,\n   SHOULD be\
    \ returned.  The order of service URIs in the list is not\n   significant.\n \
    \  The <serviceLocation> element has a single attribute, \"profile\", that\n \
    \  specifies the profile used.  Both civic and geodetic profiles can be\n   used.\
    \  The geodetic profiles SHOULD be used in order to compute\n   distance, route,\
    \ and other metrics as, at some point, computing such\n   metrics would require\
    \ geocoding of the civic address in geodetic\n   coordinates.  Because of this,\
    \ the position specified in\n   <serviceLocation> with a geodetic profile SHOULD\
    \ be represented by\n   the <Point> element.  The <Point> element is described\
    \ in Section\n   12.2 of [RFC5222] and in Section 5.2.1 of [RFC5491].  Figure\
    \ 8 shows\n   a <findServiceResponse> answer containing two location-to-service-URI\n\
    \   mappings.\n   [NOTE: The <locationUsed> element cannot be extended for this\n\
    \   purpose, as it is defined outside of the <mapping> element.  In\n   particular,\
    \ in a response, the <locationUsed> element is always one,\n   while the number\
    \ of service URIs is typically more than one.]\n   There are situations, however,\
    \ in which it is helpful to include a\n   civic address together with the geodetic\
    \ coordinates of a point of\n   service.  Usually, databases already contain the\
    \ civic address of\n   points of interest, and for devices with limited capabilities,\
    \ it is\n   not always possible to perform decoding of geocoordinates in order\
    \ to\n   determine the civic address.  Because of this, including the civic\n\
    \   address in a response can be useful.  In order to do this, we use a\n   civic\
    \ profile for the <serviceLocation> element and specify the POI\n   civic address\
    \ in a <civicAddress> element contained in the\n   <serviceLocation> element.\
    \  The basic civic location profile is\n   defined in Section 12.3 of [RFC5222].\n\
    \   Per [RFC5139], it is RECOMMENDED to use multiple <serviceLocation>\n   elements\
    \ when multiple forms of service location are available, and\n   it is RECOMMENDED\
    \ to provide a geodetic form whenever possible.  When\n   multiple <serviceLocation>\
    \ elements are present for one POI, all of\n   them MUST be contained in the same\
    \ <mapping> element, that is, the\n   <mapping> element for that POI.  Figure\
    \ 8 shows a\n   <findServiceResponse> answer with both geodetic and civic locations.\n\
    \      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <findServiceResponse\n\
    \        xmlns=\"urn:ietf:params:xml:ns:lost1\"\n        xmlns:ext=\"urn:ietf:params:xml:ns:lost-ext\"\
    \n        xmlns:gml=\"http://www.opengis.net/gml\">\n        <mapping\n      \
    \    expires=\"2007-01-01T01:44:33Z\"\n          lastUpdated=\"2006-11-01T01:00:00Z\"\
    \n          source=\"authoritative.example\"\n          sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    >\n          <displayName xml:lang=\"it\">\n            Che bella pizza e all'\
    \ anima da' pizza da Toto'\n          </displayName>\n          <service>urn:service:food.pizza</service>\n\
    \          <uri>sip:chebella@example.com</uri>\n          <uri>xmpp:chebella@example.com</uri>\n\
    \          <serviceNumber>2129397040</serviceNumber>\n          <ext:serviceLocation\
    \ profile=\"geodetic-2d\">\n            <gml:Point id=\"point1\" srsName=\"urn:ogc:def:crs:EPSG:4326\"\
    >\n              <gml:pos>33.665 -112.432</gml:pos>\n            </gml:Point>\n\
    \          </ext:serviceLocation>\n          <ext:serviceLocation profile=\"civic\"\
    >\n            <civicAddress\n                xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n                <country>US</country>\n                <A1>New York</A1>\n\
    \                <A3>New York</A3>\n                <A6>Broadway</A6>\n      \
    \          <HNO>321</HNO>\n                <PC>10027</PC>\n            </civicAddress>\n\
    \          </ext:serviceLocation>\n        </mapping>\n        <mapping\n    \
    \      expires=\"2007-01-01T01:44:33Z\"\n          lastUpdated=\"2006-11-01T01:00:00Z\"\
    \n          source=\"authoritative.example\"\n          sourceId=\"7e3f40b098c711dbb6060800200c9b356\"\
    >\n          <displayName xml:lang=\"en\">\n            King Mario's Pizza\n \
    \         </displayName>\n          <service>urn:service:food.pizza</service>\n\
    \          <uri>sip:marios@example.com</uri>\n          <uri>xmpp:marios@example.com</uri>\n\
    \          <serviceNumber>2129397157</serviceNumber>\n          <ext:serviceLocation\
    \ profile=\"geodetic-2d\">\n            <gml:Point id=\"point1\" srsName=\"urn:ogc:def:crs:EPSG:4326\"\
    >\n              <gml:pos>33.683 -112.412</gml:pos>\n            </gml:Point>\n\
    \          </ext:serviceLocation>\n          <ext:serviceLocation profile=\"civic\"\
    >\n            <civicAddress\n                xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n                <country>US</country>\n                <A1>New York</A1>\n\
    \                <A3>New York</A3>\n                <A6>Amsterdam Avenue</A6>\n\
    \                <HNO>123</HNO>\n                <PC>10027</PC>\n            </civicAddress>\n\
    \          </ext:serviceLocation>\n        </mapping>\n        <path>\n      \
    \    <via source=\"resolver.example\"/>\n          <via source=\"authoritative.example\"\
    />\n        </path>\n        <locationUsed id=\"6020688f1ce1896d\"/>\n      </findServiceResponse>\n\
    \   Figure 8: A <findServiceResponse> answer\n"
- title: 6.  Emergency Services
  contents:
  - "6.  Emergency Services\n   The LoST extensions defined in this document SHOULD\
    \ NOT be used when\n   routing emergency sessions, as there may be LoST servers\
    \ that do not\n   support these extensions.\n   Figure 9 shows a <findService>\
    \ query for emergency services as\n   defined in [RFC5222].  In such a query,\
    \ both the <region> element and\n   the <limit> element are missing.  According\
    \ to the LoST extensions\n   defined in this document, when the <region> element\
    \ is missing, its\n   value defaults to true, and the query is a \"served by\"\
    \ query (see\n   Section 5.3).  When the <limit> element is missing, no limit\
    \ is\n   specified, that is, the LoST server can return any number of results\n\
    \   (see Section 5.4).  This behavior is consistent with [RFC5222] so\n   that\
    \ PSAPs are selected according to their service area, and when a\n   user's location\
    \ overlaps multiple service areas, the LoST server MAY\n   return multiple PSAPs.\n\
    \   The LoST extensions defined in this document are consistent with the\n   behavior\
    \ defined in [RFC5222], and, as such, they do not modify LoST\n   behavior for\
    \ emergency services.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <findService\n\
    \        xmlns=\"urn:ietf:params:xml:ns:lost1\"\n        xmlns:p2=\"http://www.opengis.net/gml\"\
    \n        serviceBoundary=\"value\"\n        recursive=\"true\">\n        <location\
    \ id=\"6020688f1ce1896d\" profile=\"geodetic-2d\">\n          <p2:Point id=\"\
    point1\" srsName=\"urn:ogc:def:crs:EPSG::4326\">\n             <p2:pos>37.775\
    \ -122.422</p2:pos>\n          </p2:Point>\n        </location>\n        <service>urn:service:sos.police</service>\n\
    \      </findService>\n   Figure 9: A <findService> geodetic query for emergency\
    \ services\n   Unlike emergency services, where information such as service\n\
    \   boundaries of PSAPs and locations of fire stations does not change\n   very\
    \ often, if at all, non-emergency services have information that\n   may become\
    \ inaccurate quickly.  Implementers should take this into\n   account when designing\
    \ applications for non-emergency location-based\n   services.\n"
- title: 7.  RELAX NG Schema
  contents:
  - "7.  RELAX NG Schema\n   This section provides the RELAX NG schema of LoST extensions\
    \ in the\n   compact form.  The verbose form is included in Section 9.\n   namespace\
    \ a = \"http://relaxng.org/ns/compatibility/annotations/1.0\"\n   default namespace\
    \ ns1 = \"urn:ietf:params:xml:ns:lost-ext\"\n   ##\n   ##    Extensions to the\
    \ Location-to-Service Translation (LoST)\n   ##    Protocol\n   ##\n   ##    LoST\
    \ Extensions define three new elements: limit, region, and\n   ##    serviceLocation.\n\
    \   ##\n   start =\n     limit\n     | region\n     | serviceLocation\n   ##\n\
    \   ##    A limit to the number of returned results.\n   ##\n   div {\n     limit=\n\
    \       element limit {\n         xsd:positiveInteger\n       }\n   }\n   ##\n\
    \   ##   A boolean variable to request a search\n   ##   based on either service\
    \ areas or distance.\n   ##\n   ##   NOTE: The W3C XML Schema has two different\n\
    \   ##         lexical representations for boolean:\n   ##         '1' or 'true'\
    \ vs. '0' or 'false'.\n   ##\n   div {\n     region=\n       element region {\n\
    \         xsd:boolean\n       }\n   }\n   ##\n   ##    Location Information\n\
    \   ##\n   div {\n     locationInformation =\n       extensionPoint+,\n      \
    \ attribute profile { xsd:NMTOKEN }?\n   }\n   ##\n   ##    Location Information\
    \ about the returned point\n   ##    of service.\n   ##\n   div {\n     serviceLocation=\n\
    \       element serviceLocation { locationInformation }+\n   }\n   ##\n   ## \
    \   Patterns for inclusion of elements from schemas in\n   ##    other namespaces.\n\
    \   ##\n   div {\n     ##\n     ##    Any element not in the LoST Extensions\n\
    \     ##    namespace.\n     ##\n     notLostExt = element * - (ns1:* | ns1:*)\
    \ { anyElement }\n     ##\n     ##    A wildcard pattern for including any element\n\
    \     ##    from any other namespace.\n     ##\n     anyElement =\n       (element\
    \ * { anyElement }\n        | attribute * { text }\n        | text)*\n     ##\n\
    \     ##    A point where future extensions\n     ##    (elements from other namespaces)\n\
    \     ##    can be added.\n     ##\n     extensionPoint = notLostExt*\n   }\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The overall LoST architecture and framework are\
    \ defined in [RFC5582].\n   All LoST queries for both emergency and non-emergency\
    \ services, if\n   not cached, are sent from the LoST client to a first-hop LoST\
    \ server.\n   In [RFC5582] terminology, a LoST client is called Seeker, and the\n\
    \   first-hop LoST server is called Resolver (for more rigorous\n   definitions,\
    \ please refer to [RFC5582]).  The Resolver will contact\n   other LoST servers,\
    \ and eventually an authoritative LoST server will\n   be found.  A response will\
    \ then be sent back to the Seeker.\n   When considering both emergency and non-emergency\
    \ services, there is\n   the possibility of the Resolver getting overloaded by\
    \ non-emergency-\n   service queries, thus being unable to process emergency-service\n\
    \   queries.  Such a situation can be addressed in several ways.  For\n   example,\
    \ the service provider could dimension the LoST server to\n   accommodate anticipated\
    \ combined traffic loads and then give priority\n   to emergency service requests\
    \ during overload situations, possibly\n   with the help of HTTP load balancers.\n\
    \   The security considerations in [RFC5222] apply.  In particular, in\n   order\
    \ to maintain integrity and confidentiality of requests and\n   responses, Transport\
    \ Layer Security (TLS) MUST be implemented and\n   SHOULD be used as described\
    \ in Sections 1, 14, and 18 of [RFC5222].\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  LoST Extensions RELAX NG Schema Registration
  contents:
  - "9.1.  LoST Extensions RELAX NG Schema Registration\n   URI: urn:ietf:params:xml:schema:lost-ext\n\
    \   Registrant Contact: Andrea G. Forte, forte@att.com;\n   Henning Schulzrinne,\
    \ hgs@cs.columbia.edu\n   RELAX NG Schema: The RELAX NG schema to be registered\
    \ is contained in\n   Section 7.  Its first line is\n   default namespace ns1\
    \ = \"urn:ietf:params:xml:ns:lost-ext\"\n   and its last line is\n   }\n"
- title: 9.2.  LoST Extensions Namespace Registration
  contents:
  - "9.2.  LoST Extensions Namespace Registration\n   URI: urn:ietf:params:xml:ns:lost-ext\n\
    \   Registrant Contact: Andrea G. Forte, forte@att.com;\n   Henning Schulzrinne,\
    \ hgs@cs.columbia.edu\n   XML:\n   BEGIN\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE\
    \ html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n     \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n   <head>\n     <meta http-equiv=\"\
    content-type\"\n           content=\"text/html;charset=iso-8859-1\"/>\n     <title>LoST\
    \ Extensions Namespace</title>\n   </head>\n   <body>\n     <h1>Namespace for\
    \ LoST Extensions</h1>\n     <h2>urn:ietf:params:xml:ns:lost-ext</h2>\n   <p>See\
    \ <a href=\"http://www.rfc-editor.org/rfc/rfc6451.txt\">\n      RFC 6451</a>.</p>\n\
    \   </body>\n   </html>\n   END\n"
- title: 10.  Non-Normative RELAX NG Schema in XML Syntax
  contents:
  - '10.  Non-Normative RELAX NG Schema in XML Syntax

    '
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <grammar ns=\"urn:ietf:params:xml:ns:lost-ext\"\
    \n           xmlns=\"http://relaxng.org/ns/structure/1.0\"\n           xmlns:a=\"\
    http://relaxng.org/ns/compatibility/annotations/1.0\"\n           datatypeLibrary=\"\
    http://www.w3.org/2001/XMLSchema-datatypes\">\n           <start>\n       <a:documentation>\n\
    \         Extensions to the Location-to-Service Translation (LoST)\n         Protocol.\n\
    \         LoST Extensions define three new elements: limit, region and\n     \
    \    serviceLocation.\n       </a:documentation>\n       <choice>\n         <ref\
    \ name=\"limit\"/>\n         <ref name=\"region\"/>\n         <ref name=\"serviceLocation\"\
    />\n       </choice>\n           </start>\n     <div>\n       <a:documentation>\n\
    \         A limit to the number of returned results.\n       </a:documentation>\n\
    \       <define name=\"limit\">\n         <element name=\"limit\">\n         \
    \  <data type=\"positiveInteger\"/>\n         </element>\n       </define>\n \
    \    </div>\n    <div>\n      <a:documentation>\n        A boolean variable to\
    \ request a search\n        based on either service areas or distance.\n     \
    \ </a:documentation>\n      <define name=\"region\">\n        <element name=\"\
    region\">\n          <data type=\"boolean\"/>\n        </element>\n      </define>\n\
    \    </div>\n     <div>\n       <a:documentation>\n         Location Information\n\
    \       </a:documentation>\n       <define name=\"locationInformation\">\n   \
    \      <oneOrMore>\n           <ref name=\"extensionPoint\"/>\n         </oneOrMore>\n\
    \         <optional>\n           <attribute name=\"profile\">\n             <data\
    \ type=\"NMTOKEN\"/>\n           </attribute>\n         </optional>\n       </define>\n\
    \     </div>\n     <div>\n       <a:documentation>\n         Location Information\
    \ about the returned point of service.\n       </a:documentation>\n       <define\
    \ name=\"serviceLocation\">\n         <element name=\"serviceLocation\">\n   \
    \          <ref name=\"locationInformation\"/>\n         </element>\n       </define>\n\
    \     </div>\n     <div>\n       <a:documentation>\n         Patterns for inclusion\
    \ of elements from schemas in\n         other namespaces.\n       </a:documentation>\n\
    \       <define name=\"notLostExt\">\n         <a:documentation>\n           Any\
    \ element not in the LoST Extensions namespace.\n         </a:documentation>\n\
    \         <element>\n           <anyName>\n             <except>\n           \
    \    <nsName ns=\"urn:ietf:params:xml:ns:lost-ext\"/>\n               <nsName/>\n\
    \             </except>\n           </anyName>\n           <ref name=\"anyElement\"\
    />\n         </element>\n       </define>\n       <define name=\"anyElement\"\
    >\n         <a:documentation>\n           A wildcard pattern for including any\
    \ element\n           from any other namespace.\n         </a:documentation>\n\
    \         <zeroOrMore>\n           <choice>\n             <element>\n        \
    \       <anyName/>\n               <ref name=\"anyElement\"/>\n             </element>\n\
    \             <attribute>\n               <anyName/>\n             </attribute>\n\
    \             <text/>\n           </choice>\n         </zeroOrMore>\n       </define>\n\
    \       <define name=\"extensionPoint\">\n         <a:documentation>\n       \
    \    A point where future extensions\n           (elements from other namespaces)\n\
    \           can be added.\n         </a:documentation>\n         <zeroOrMore>\n\
    \           <ref name=\"notLostExt\"/>\n         </zeroOrMore>\n       </define>\n\
    \     </div>\n  </grammar>\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   We would like to thank Shida Schubert for reviewing\
    \ an early version\n   of this document.  We also appreciate the suggestions from\
    \ members of\n   the ECRIT working group.  In particular, we are grateful to Richard\n\
    \   L. Barnes, Robert Sparks, and Martin Thomson for their overall\n   feedback\
    \ and for their comments on how non-emergency services may\n   affect the provisioning\
    \ of emergency services lookups.\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5222]  Hardie, T., Newton, A., Schulzrinne, H., and H.\n     \
    \         Tschofenig, \"LoST: A Location-to-Service Translation\n            \
    \  Protocol\", RFC 5222, August 2008.\n   [RFC5139]  Thomson, M. and J. Winterbottom,\
    \ \"Revised Civic Location\n              Format for Presence Information Data\
    \ Format Location\n              Object (PIDF-LO)\", RFC 5139, February 2008.\n\
    \   [RFC5491]  Winterbottom, J., Thomson, M., and H. Tschofenig, \"GEOPRIV\n \
    \             Presence Information Data Format Location Object (PIDF-LO)\n   \
    \           Usage Clarification, Considerations, and Recommendations\",\n    \
    \          RFC 5491, March 2009.\n   [RFC5582]  Schulzrinne, H., \"Location-to-URL\
    \ Mapping Architecture and\n              Framework\", RFC 5582, September 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andrea G. Forte\n   AT&T\n   Security Research Center\n\
    \   33 Thomas Street\n   New York, NY  10007\n   USA\n   EMail: forte@att.com\n\
    \   Henning Schulzrinne\n   Columbia University\n   Department of Computer Science\n\
    \   1214 Amsterdam Avenue, MC 0401\n   New York, NY  10027\n   USA\n   EMail:\
    \ hgs@cs.columbia.edu\n"
