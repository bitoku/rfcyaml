- title: __initial_text__
  contents:
  - '                  HTTP Random Access and Live Content

    '
- title: Abstract
  contents:
  - "Abstract\n   To accommodate byte-range requests for content that has data appended\n\
    \   over time, this document defines semantics that allow an HTTP client\n   and\
    \ a server to perform byte-range GET and HEAD requests that start\n   at an arbitrary\
    \ byte offset within the representation and end at an\n   indeterminate offset.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8673.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Notational Conventions\n \
    \  2.  Performing Range Requests on Random-Access Aggregating (Live)\n       \
    \    Content\n     2.1.  Establishing the Randomly Accessible Byte Range\n   \
    \  2.2.  Byte-Range Requests beyond the Randomly Accessible Byte\n           Range\n\
    \   3.  Other Applications of Random-Access Aggregating Content\n     3.1.  Requests\
    \ Starting at the Aggregation/Live Point\n     3.2.  Shift-Buffer Representations\n\
    \   4.  Recommendations for Byte-Range Request last-byte-pos Values\n   5.  IANA\
    \ Considerations\n   6.  Security Considerations\n   7.  References\n     7.1.\
    \  Normative References\n     7.2.  Informative References\n   Acknowledgements\n\
    \   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Some Hypertext Transfer Protocol (HTTP) clients use byte-range\n\
    \   requests (range requests using the \"bytes\" range unit) to transfer\n   select\
    \ portions of large representations [RFC7233].  In some cases,\n   large representations\
    \ require content to be continuously or\n   periodically appended, such as representations\
    \ consisting of live\n   audio or video sources, blockchain databases, and log\
    \ files.  Clients\n   cannot access the appended/live content using a range request\
    \ with\n   the \"bytes\" range unit using the currently defined byte-range\n \
    \  semantics without accepting performance or behavior sacrifices that\n   are\
    \ not acceptable for many applications.\n   For instance, HTTP clients have the\
    \ ability to access appended\n   content on an indeterminate-length resource by\
    \ transferring the\n   entire representation from the beginning and continuing\
    \ to read the\n   appended content as it's made available.  Obviously, this is\
    \ highly\n   inefficient for cases where the representation is large and only\
    \ the\n   most recently appended content is needed by the client.\n   Alternatively,\
    \ clients can access appended content by sending\n   periodic, open-ended byte-range\
    \ requests using the last known end\n   byte position as the range start.  Performing\
    \ low-frequency periodic\n   byte-range requests in this fashion (polling) introduces\
    \ latency\n   since the client will necessarily be somewhat behind in transferring\n\
    \   the aggregated content, effectively resulting in the same kind of\n   latency\
    \ issues with the segmented content transfer mechanisms in\n   \"HTTP Live Streaming\"\
    \ (HLS) [RFC8216] and \"Dynamic Adaptive Streaming\n   over HTTP\" [MPEG-DASH].\
    \  While performing these range requests at\n   higher frequency can reduce this\
    \ latency, it also incurs more\n   processing overhead and HTTP exchanges as many\
    \ of the requests will\n   return no content, since content is usually aggregated\
    \ in groups of\n   bytes (e.g., a video frame, audio sample, block, or log entry).\n\
    \   This document describes a usage model for range requests that enables\n  \
    \ efficient retrieval of representations that are appended to over time\n   by\
    \ using large values and associated semantics for communicating\n   range end\
    \ positions.  This model allows representations to be\n   progressively delivered\
    \ by servers as new content is added.  It also\n   ensures compatibility with\
    \ servers and intermediaries that don't\n   support this technique.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   This document cites Augmented Backus-Naur Form\
    \ (ABNF) productions\n   from [RFC7233], using the notation defined in [RFC5234].\n"
- title: 2.  Performing Range Requests on Random-Access Aggregating (Live)
  contents:
  - "2.  Performing Range Requests on Random-Access Aggregating (Live)\n    Content\n\
    \   This document recommends a two-step process for accessing resources\n   that\
    \ have indeterminate-length representations.\n   Two steps are necessary because\
    \ of limitations with the range request\n   header fields and the Content-Range\
    \ response header fields.  A server\n   cannot know from a range request that\
    \ a client wishes to receive a\n   response that does not have a definite end.\
    \  More critically, the\n   header fields do not allow the server to signal that\
    \ a resource has\n   indeterminate length without also providing a fixed portion\
    \ of the\n   resource.\n   A client first learns that the resource has a representation\
    \ of\n   indeterminate length by requesting a range of the resource.  The\n  \
    \ server responds with the range that is available but indicates that\n   the\
    \ length of the representation is unknown using the existing\n   Content-Range\
    \ syntax.  See Section 2.1 for details and examples.\n   Once the client knows\
    \ the resource has indeterminate length, it can\n   request a range with a very\
    \ large end position from the resource.\n   The client chooses an explicit end\
    \ value larger than can be\n   transferred in the foreseeable term.  A server\
    \ that supports range\n   requests of indeterminate length signals its understanding\
    \ of the\n   client's indeterminate range request by indicating that the range\
    \ it\n   is providing has a range end that exactly matches the client's\n   requested\
    \ range end rather than a range that is bounded by what is\n   currently available.\
    \  See Section 2.2 for details.\n"
- title: 2.1.  Establishing the Randomly Accessible Byte Range
  contents:
  - "2.1.  Establishing the Randomly Accessible Byte Range\n   Determining if a representation\
    \ is continuously aggregating (\"live\")\n   and determining the randomly accessible\
    \ byte range can both be\n   performed using the existing definition for an open-ended\
    \ byte-range\n   request.  Specifically, Section 2.1 of [RFC7233] defines a byte-range\n\
    \   request of the form:\n      byte-range-spec = first-byte-pos \"-\" [ last-byte-pos\
    \ ]\n   which allows a client to send a HEAD request with a first-byte-pos\n \
    \  and leave last-byte-pos absent.  A server that receives a satisfiable\n   byte-range\
    \ request (with first-byte-pos smaller than the current\n   representation length)\
    \ may respond with a 206 status code (Partial\n   Content) with a Content-Range\
    \ header field indicating the currently\n   satisfiable byte range.  For example:\n\
    \   HEAD /resource HTTP/1.1\n   Host: example.com\n   Range: bytes=0-\n   returns\
    \ a response of the form:\n   HTTP/1.1 206 Partial Content\n   Content-Range:\
    \ bytes 0-1234567/*\n   from the server indicating that (1) the complete representation\n\
    \   length is unknown (via the \"*\" in place of the complete-length field)\n\
    \   and (2) only bytes 0-1234567 were accessible at the time the request\n   was\
    \ processed by the server.  The client can infer from this response\n   that bytes\
    \ 0-1234567 of the representation can be requested and\n   transfer can be performed\
    \ immediately.\n"
- title: 2.2.  Byte-Range Requests beyond the Randomly Accessible Byte Range
  contents:
  - "2.2.  Byte-Range Requests beyond the Randomly Accessible Byte Range\n   Once\
    \ a client has determined that a representation has an\n   indeterminate length\
    \ and established the byte range that can be\n   accessed, it may want to perform\
    \ a request with a start position\n   within the randomly accessible content range\
    \ and an end position at\n   an indefinite/live point -- a point where the byte-range\
    \ GET request\n   is fulfilled on-demand as the content is aggregated.\n   For\
    \ example, for a large video asset, a client may wish to start a\n   content transfer\
    \ from the video \"key\" frame immediately before the\n   point of aggregation\
    \ and continue the content transfer indefinitely\n   as content is aggregated,\
    \ in order to support low-latency startup of\n   a live video stream.\n   Unlike\
    \ a byte-range request header field, a byte-content-range\n   response header\
    \ field cannot be \"open-ended\", per Section 4.2 of\n   [RFC7233]:\n      byte-content-range\
    \  = bytes-unit SP\n                           ( byte-range-resp / unsatisfied-range\
    \ )\n      byte-range-resp     = byte-range \"/\" ( complete-length / \"*\" )\n\
    \      byte-range          = first-byte-pos \"-\" last-byte-pos\n      unsatisfied-range\
    \   = \"*/\" complete-length\n      complete-length     = 1*DIGIT\n   Specifically,\
    \ last-byte-pos is required in byte-range.  So, in order\n   to preserve interoperability\
    \ with existing HTTP clients, servers,\n   proxies, and caches, this document\
    \ proposes a mechanism for a client\n   to indicate support for handling an indeterminate-length\
    \ byte-range\n   response and a mechanism for a server to indicate if/when it's\n\
    \   providing an indeterminate-length response.\n   A client can indicate support\
    \ for handling indeterminate-length byte-\n   range responses by providing a very\
    \ large value for the last-byte-pos\n   in the byte-range request.  For example,\
    \ a client can perform a byte-\n   range GET request of the form:\n   GET /resource\
    \ HTTP/1.1\n   Host: example.com\n   Range: bytes=1230000-999999999999\n   where\
    \ the last-byte-pos in the request is much larger than the last-\n   byte-pos\
    \ returned in response to an open-ended byte-range HEAD\n   request, as described\
    \ above, and much larger than the expected\n   maximum size of the representation.\
    \  See Section 6 for range value\n   considerations.\n   In response, a server\
    \ may indicate that it is supplying a\n   continuously aggregating/live response\
    \ by supplying the client\n   request's last-byte-pos in the Content-Range response\
    \ header field.\n   For example:\n   GET /resource HTTP/1.1\n   Host: example.com\n\
    \   Range: bytes=1230000-999999999999\n   returns\n   HTTP/1.1 206 Partial Content\n\
    \   Content-Range: bytes 1230000-999999999999/*\n   from the server to indicate\
    \ that the response will start at byte\n   1230000 and continue indefinitely to\
    \ include all aggregated content,\n   as it becomes available.\n   A server that\
    \ doesn't support or supply a continuously aggregating/\n   live response will\
    \ supply the currently satisfiable byte range, as it\n   would with an open-ended\
    \ byte request.\n   For example:\n   GET /resource HTTP/1.1\n   Host: example.com\n\
    \   Range: bytes=1230000-999999999999\n   returns\n   HTTP/1.1 206 Partial Content\n\
    \   Content-Range: bytes 1230000-1234567/*\n   from the server to indicate that\
    \ the response will start at byte\n   1230000, end at byte 1234567, and not include\
    \ any aggregated content.\n   This is the response expected from a typical HTTP\
    \ server -- one that\n   doesn't support byte-range requests on aggregating content.\n\
    \   A client that doesn't receive a response indicating it is\n   continuously\
    \ aggregating must use other means to access aggregated\n   content (e.g., periodic\
    \ byte-range polling).\n   A server that does return a continuously aggregating/live\
    \ response\n   should return data using chunked transfer coding and not provide\
    \ a\n   Content-Length header field.  A 0-length chunk indicates the end of\n\
    \   the transfer, per Section 4.1 of [RFC7230].\n"
- title: 3.  Other Applications of Random-Access Aggregating Content
  contents:
  - '3.  Other Applications of Random-Access Aggregating Content

    '
- title: 3.1.  Requests Starting at the Aggregation/Live Point
  contents:
  - "3.1.  Requests Starting at the Aggregation/Live Point\n   A client that wishes\
    \ to only receive newly aggregated portions of a\n   resource (i.e., start at\
    \ the live point) can use a HEAD request to\n   learn what range the server has\
    \ currently available and initiate an\n   indeterminate-length transfer.  For\
    \ example:\n   HEAD /resource HTTP/1.1\n   Host: example.com\n   Range: bytes=0-\n\
    \   with the Content-Range response header field indicating the range (or\n  \
    \ ranges) available.  For example:\n   206 Partial Content\n   Content-Range:\
    \ bytes 0-1234567/*\n   The client can then issue a request for a range starting\
    \ at the end\n   value (using a very large value for the end of a range) and receive\n\
    \   only new content.\n   For example:\n   GET /resource HTTP/1.1\n   Host: example.com\n\
    \   Range: bytes=1234567-999999999999\n   with a server returning a Content-Range\
    \ response indicating that an\n   indeterminate-length response body will be provided:\n\
    \   206 Partial Content\n   Content-Range: bytes 1234567-999999999999/*\n"
- title: 3.2.  Shift-Buffer Representations
  contents:
  - "3.2.  Shift-Buffer Representations\n   Some representations lend themselves to\
    \ front-end content removal in\n   addition to aggregation.  While still supporting\
    \ random access,\n   representations of this type have a portion at the beginning\
    \ (the \"0\"\n   end) of the randomly accessible region that becomes inaccessible\
    \ over\n   time.  Examples of this kind of representation would be an audio-\n\
    \   video time-shift buffer or a rolling log file.\n   For example, a range request\
    \ containing:\n   HEAD /resource HTTP/1.1\n   Host: example.com\n   Range: bytes=0-\n\
    \   returns\n   206 Partial Content\n   Content-Range: bytes 1000000-1234567/*\n\
    \   indicating that the first 1000000 bytes were not accessible at the\n   time\
    \ the HEAD request was processed.  Subsequent HEAD requests could\n   return:\n\
    \   Content-Range: bytes 1000000-1234567/*\n   Content-Range: bytes 1010000-1244567/*\n\
    \   Content-Range: bytes 1020000-1254567/*\n   Note though that the difference\
    \ between the first-byte-pos and last-\n   byte-pos need not be constant.\n  \
    \ The client could then follow up with a GET range request containing:\n   GET\
    \ /resource HTTP/1.1\n   Host: example.com\n   Range: bytes=1020000-999999999999\n\
    \   with the server returning\n   206 Partial Content\n   Content-Range: bytes\
    \ 1020000-999999999999/*\n   with the response body returning bytes 1020000-1254567\
    \ immediately\n   and aggregated/live data being returned as the content is aggregated.\n\
    \   A server that doesn't support or supply a continuously aggregating/\n   live\
    \ response will supply the currently satisfiable byte range, as it\n   would with\
    \ an open-ended byte request.  For example:\n   GET /resource HTTP/1.1\n   Host:\
    \ example.com\n   Range: bytes=0-999999999999\n   returns\n   HTTP/1.1 206 Partial\
    \ Content\n   Content-Range: bytes 1020000-1254567/*\n   from the server to indicate\
    \ that the response will start at byte\n   1020000, end at byte 1254567, and not\
    \ include any aggregated content.\n   This is the response expected from a typical\
    \ HTTP server -- one that\n   doesn't support byte-range requests on aggregating\
    \ content.\n   Note that responses to GET requests performed on shift-buffer\n\
    \   representations using Range headers can be cached by intermediaries,\n   since\
    \ the Content-Range response header indicates which portion of\n   the representation\
    \ is being returned in the response body.  However,\n   GET requests without a\
    \ Range header cannot be cached since the first\n   byte of the response body\
    \ can vary from request to request.  To\n   ensure GET requests without Range\
    \ headers on shift-buffer\n   representations are not cached, servers hosting\
    \ a shift-buffer\n   representation should either not return a 200-level response\
    \ (e.g.,\n   send a 300-level redirect response with a URI that represents the\n\
    \   current start of the shift buffer) or indicate the response is non-\n   cacheable.\
    \  See [RFC7234] for details on HTTP cache control.\n"
- title: 4.  Recommendations for Byte-Range Request last-byte-pos Values
  contents:
  - "4.  Recommendations for Byte-Range Request last-byte-pos Values\n   While it\
    \ would be ideal to define a single large last-byte-pos value\n   for byte-range\
    \ requests, there's no single value that would work for\n   all applications and\
    \ platforms.  For example, JavaScript numbers\n   cannot represent all integer\
    \ values above 2^^53, so a JavaScript\n   application may want to use 2^^53-1\
    \ for last-byte-pos.  This value,\n   however, would not be sufficient for all\
    \ applications, such as long-\n   duration high-bitrate streams.  So 2^^53-1 (9007199254740991)\
    \ is\n   recommended as a last-byte-pos unless an application has a good\n   justification\
    \ to use a smaller or larger value.  For example, if it\n   is always known that\
    \ the resource won't exceed a value smaller than\n   the recommended last-byte-pos\
    \ for an application, a smaller value can\n   be used.  If it's likely that an\
    \ application will utilize resources\n   larger than the recommended last-byte-pos\
    \ (such as a continuously\n   aggregating high-bitrate media stream), a larger\
    \ value should be\n   used.\n   Note that, in accordance with the semantics defined\
    \ above, servers\n   that support random-access live content will need to return\
    \ the last-\n   byte-pos provided in the byte-range request in some cases -- even\
    \ if\n   the last-byte-pos cannot be represented as a numerical value\n   internally\
    \ by the server.  As is the case with any continuously\n   aggregating/live resource,\
    \ the server should terminate the content\n   transfer when the end of the resource\
    \ is reached -- whether the end\n   is due to termination of the content source\
    \ or the content length\n   exceeds the server's maximum representation length.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   As described above, servers need to be prepared\
    \ to receive last-byte-\n   pos values in range requests that are numerically\
    \ larger than the\n   server implementation supports and return these values in\
    \ Content-\n   Range response header fields.  Servers should check the last-byte-pos\n\
    \   value before converting and storing them into numeric form to ensure\n   the\
    \ value doesn't cause an overflow or index incorrect data.  The\n   simplest way\
    \ to satisfy the live-range semantics defined in this\n   document without potential\
    \ overflow issues is to store the last-byte-\n   pos as a string value and return\
    \ it in the byte-range Content-Range\n   response header's last-byte-pos field.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC5234]  Crocker, D., Ed. and P. Overell, \"\
    Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234,\n\
    \              DOI 10.17487/RFC5234, January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n     \
    \         \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n      \
    \        RFC 7233, DOI 10.17487/RFC7233, June 2014,\n              <https://www.rfc-editor.org/info/rfc7233>.\n\
    \   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n     \
    \         Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n        \
    \      RFC 7234, DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [MPEG-DASH]\n              ISO, \"Information\
    \ technology -- Dynamic adaptive streaming\n              over HTTP (DASH) --\
    \ Part 1: Media presentation description\n              and segment formats\"\
    , ISO/IEC 23009-1, August 2019,\n              <https://www.iso.org/standard/75485.html>.\n\
    \   [RFC8216]  Pantos, R., Ed. and W. May, \"HTTP Live Streaming\",\n        \
    \      RFC 8216, DOI 10.17487/RFC8216, August 2017,\n              <https://www.rfc-editor.org/info/rfc8216>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Mark Nottingham, Patrick\
    \ McManus,\n   Julian Reschke, Remy Lebeau, Rodger Combs, Thorsten Lohmar, Martin\n\
    \   Thompson, Adrien de Croy, K. Morgan, Roy T. Fielding, and Jeremy\n   Poulter.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Craig Pratt\n   Portland, OR 97229\n   United States of\
    \ America\n   Email: pratt@acm.org\n   Darshak Thakore\n   CableLabs\n   858 Coal\
    \ Creek Circle\n   Louisville, CO 80027\n   United States of America\n   Email:\
    \ d.thakore@cablelabs.com\n   Barbara Stark\n   AT&T\n   Atlanta, GA\n"
