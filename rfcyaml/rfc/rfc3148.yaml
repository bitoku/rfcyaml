- title: __initial_text__
  contents:
  - '   A Framework for Defining Empirical Bulk Transfer Capacity Metrics

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a framework for standardizing multiple BTC\n\
    \   (Bulk Transport Capacity) metrics that parallel the permitted\n   transport\
    \ diversity.\n"
- title: 1   Introduction
  contents:
  - "1   Introduction\n   Bulk Transport Capacity (BTC) is a measure of a network's\
    \ ability to\n   transfer significant quantities of data with a single congestion-\n\
    \   aware transport connection (e.g., TCP).  The intuitive definition of\n   BTC\
    \ is the expected long term average data rate (bits per second) of\n   a single\
    \ ideal TCP implementation over the path in question.\n   However, there are many\
    \ congestion control algorithms (and hence\n   transport implementations) permitted\
    \ by IETF standards.  This\n   diversity in transport algorithms creates a difficulty\
    \ for\n   standardizing BTC metrics because the allowed diversity is sufficient\n\
    \   to lead to situations where different implementations will yield\n   non-comparable\
    \ measures -- and potentially fail the formal tests for\n   being a metric.\n\
    \   Two approaches are used.  First, each BTC metric must be much more\n   tightly\
    \ specified than the typical IETF protocol.  Second, each BTC\n   methodology\
    \ is expected to collect some ancillary metrics which are\n   potentially useful\
    \ to support analytical models of BTC.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].  Although\n   [RFC2119] was written with protocols in mind, the\
    \ key words are used\n   in this document for similar reasons.  They are used\
    \ to ensure that\n   each BTC methodology defined contains specific pieces of\
    \ information.\n   Bulk Transport Capacity (BTC) is a measure of a network's ability\
    \ to\n   transfer significant quantities of data with a single congestion-\n \
    \  aware transport connection (e.g., TCP).  For many applications the\n   BTC\
    \ of the underlying network dominates the overall elapsed time for\n   the application\
    \ to run and thus dominates the performance as\n   perceived by a user.  Examples\
    \ of such applications include FTP, and\n   the world wide web when delivering\
    \ large images or documents.  The\n   intuitive definition of BTC is the expected\
    \ long term average data\n   rate (bits per second) of a single ideal TCP implementation\
    \ over the\n   path in question.  The specific definition of the bulk transfer\n\
    \   capacity that MUST be reported by a BTC tool is:\n      BTC = data_sent /\
    \ elapsed_time\n   where \"data_sent\" represents the unique \"data\" bits transfered\
    \ (i.e.,\n   not including header bits or emulated header bits).  Also note that\n\
    \   the amount of data sent should only include the unique number of bits\n  \
    \ transmitted (i.e., if a particular packet is retransmitted the data\n   it contains\
    \ should be counted only once).\n   Central to the notion of bulk transport capacity\
    \ is the idea that all\n   transport protocols should have similar responses to\
    \ congestion in\n   the Internet.  Indeed the only form of equity significantly\
    \ deployed\n   in the Internet today is that the vast majority of all traffic\
    \ is\n   carried by TCP implementations sharing common congestion control\n  \
    \ algorithms largely due to a shared developmental heritage.\n   [RFC2581] specifies\
    \ the standard congestion control algorithms used\n   by TCP implementations.\
    \  Even though this document is a (proposed)\n   standard, it permits considerable\
    \ latitude in implementation.  This\n   latitude is by design, to encourage ongoing\
    \ evolution in congestion\n   control algorithms.\n   This legal diversity in\
    \ congestion control algorithms creates a\n   difficulty for standardizing BTC\
    \ metrics because the allowed\n   diversity is sufficient to lead to situations\
    \ where different\n   implementations will yield non-comparable measures -- and\
    \ potentially\n   fail the formal tests for being a metric.\n   There is also\
    \ evidence that most TCP implementations exhibit non-\n   linear performance over\
    \ some portion of their operating region.  It\n   is possible to construct simple\
    \ simulation examples where incremental\n   improvements to a path (such as raising\
    \ the link data rate) results\n   in lower overall TCP throughput (or BTC) [Mat98].\n\
    \   We believe that such non-linearity reflects weakness in our current\n   understanding\
    \ of congestion control and is present to some extent in\n   all TCP implementations\
    \ and BTC metrics.  Note that such non-\n   linearity (in either TCP or a BTC\
    \ metric) is potentially problematic\n   in the market because investment in capacity\
    \ might actually reduce\n   the perceived quality of the network.  Ongoing research\
    \ in congestion\n   dynamics has some hope of mitigating or modeling the these\
    \ non-\n   linearities.\n   Related areas, including integrated services [RFC1633,RFC2216],\n\
    \   differentiated services [RFC2475] and Internet traffic analysis\n   [MSMO97,PFTK98,Pax97b,LM97]\
    \ are all currently receiving significant\n   attention from the research community.\
    \  It is likely that we will see\n   new experimental congestion control algorithms\
    \ in the near future.\n   In addition, Explicit Congestion Notification (ECN)\
    \ [RFC2481] is\n   being tested for Internet deployment.  We do not yet know how\
    \ any of\n   these developments might affect BTC metrics, and thus the BTC\n \
    \  framework and metrics may need to be revisited in the future.\n   This document\
    \ defines a framework for standardizing multiple BTC\n   metrics that parallel\
    \ the permitted transport diversity.  Two\n   approaches are used.  First, each\
    \ BTC metric must be much more\n   tightly specified than the typical IETF transport\
    \ protocol.  Second,\n   each BTC methodology is expected to collect some ancillary\
    \ metrics\n   which are potentially useful to support analytical models of BTC.\
    \  If\n   a BTC methodology does not collect these ancillary metrics, it should\n\
    \   collect enough information such that these metrics can be derived\n   (for\
    \ instance a segment trace file).\n   As an example, the models in [PFTK98, MSMO97,\
    \ OKM96a, Lak94] all\n   predict bulk transfer performance based on path properties\
    \ such as\n   loss rate and round trip time.  A BTC methodology that also provides\n\
    \   ancillary measures of these properties is stronger because agreement\n   with\
    \ the analytical models can be used to corroborate the direct BTC\n   measurement\
    \ results.\n   More importantly the ancillary metrics are expected to be useful\
    \ for\n   resolving disparity between different BTC methodologies.  For\n   example,\
    \ a path that predominantly experiences clustered packet\n   losses is likely\
    \ to exhibit vastly different measures from BTC\n   metrics that mimic Tahoe,\
    \ Reno, NewReno, and SACK TCP algorithms\n   [FF96].  The differences in the BTC\
    \ metrics over such a path might be\n   diagnosed by an ancillary measure of loss\
    \ clustering.\n   There are some path properties which are best measured as ancillary\n\
    \   metrics to a transport protocol.  Examples of such properties include\n  \
    \ bottleneck queue limits or the tendency to reorder packets.  These\n   are difficult\
    \ or impossible to measure at low rates and unsafe to\n   measure at rates higher\
    \ than the bulk transport capacity of the path.\n   It is expected that at some\
    \ point in the future there will exist an\n   A-frame [RFC2330] which will unify\
    \ all simple path metrics (e.g.,\n   segment loss rates, round trip time) and\
    \ BTC ancillary metrics (e.g.,\n   queue size and packet reordering) with different\
    \ versions of BTC\n   metrics (e.g., that parallel Reno or SACK TCP).\n"
- title: 2   Congestion Control Algorithms
  contents:
  - "2   Congestion Control Algorithms\n   Nearly all TCP implementations in use today\
    \ utilize the congestion\n   control algorithms published in [Jac88] and further\
    \ refined in\n   [RFC2581].  In addition to using the basic notion of using an\
    \ ACK\n   clock, TCP (and therefore BTC) implements five standard congestion\n\
    \   control algorithms: Congestion Avoidance, Retransmission timeouts,\n   Slow-start,\
    \ Fast Retransmit and Fast Recovery.  All BTC\n   implementations MUST implement\
    \ slow start and congestion avoidance,\n   as specified in [RFC2581] (with extra\
    \ details also specified, as\n   outlined below).  All BTC methodologies SHOULD\
    \ implement fast\n   retransmit and fast recovery as outlined in [RFC2581].  Finally,\
    \ all\n   BTC methodologies MUST implement a retransmission timeout.\n   The algorithms\
    \ specified in [RFC2581] give implementers some choices\n   in the details of\
    \ the implementation.  The following is a list of\n   details about the congestion\
    \ control algorithms that are either\n   underspecified in [RFC2581] or very important\
    \ to define when\n   constructing a BTC methodology.  These details MUST be specifically\n\
    \   defined in each BTC methodology.\n      *  [RFC2581] does not standardize\
    \ a specific algorithm for\n         increasing cwnd during congestion avoidance.\
    \  Several candidate\n         algorithms are given in [RFC2581].  The algorithm\
    \ used in a\n         particular BTC methodology MUST be defined.\n      *  [RFC2581]\
    \ does not specify which cwnd increase algorithm (slow\n         start or congestion\
    \ avoidance) should be used when cwnd equals\n         ssthresh.  This MUST be\
    \ specified for each BTC methodology.\n      *  [RFC2581] allows TCPs to use advanced\
    \ loss recovery mechanism\n         such as NewReno [RFC2582,FF96,Hoe96] and SACK-based\
    \ algorithms\n         [FF96,MM96a,MM96b].  If used in a BTC implementation, such\
    \ an\n         algorithm MUST be fully defined.\n      *  The actual segment size,\
    \ or method of choosing a segment size\n         (e.g., path MTU discovery [RFC1191])\
    \ and the number of header\n         bytes assumed to be prepended to each segment\
    \ MUST be\n         specified.  In addition, if the segment size is artificially\n\
    \         limited to less than the path MTU this MUST be indicated.\n      * \
    \ TCP includes a retransmission timeout (RTO) to trigger\n         retransmissions\
    \ of segments that have not been acknowledged\n         within an appropriate\
    \ amount of time and have not been\n         retransmitted via some more advanced\
    \ loss recovery algorithm.\n         A BTC implementation MUST include a retransmission\
    \ timer.\n         Calculating the RTO is subject to a number of details that\
    \ MUST\n         be defined for each BTC metric.  In addition, a BTC metric MUST\n\
    \         define when the clock is set and the granularity of the clock.\n   \
    \      [RFC2988] specifies the behavior of the retransmission timer.\n       \
    \  However, there are several details left to the implementer\n         which\
    \ MUST be specified for each BTC metric defined.\n   Note that as new congestion\
    \ control algorithms are placed on the\n   standards track they may be incorporated\
    \ into BTC metrics (e.g., the\n   Limited Transmit algorithm [ABF00]).  However,\
    \ any implementation\n   decisions provided by the relevant RFCs SHOULD be fully\
    \ specified in\n   the particular BTC metric.\n"
- title: 3   Ancillary Metrics
  contents:
  - "3   Ancillary Metrics\n   The following ancillary metrics can provide additional\
    \ information\n   about the network and the behavior of the implemented congestion\n\
    \   control algorithms in response to the behavior of the network path.\n   It\
    \ is RECOMMENDED that these metrics be built into each BTC\n   methodology.  Alternatively,\
    \ it is RECOMMENDED that the BTC\n   implementation provide enough information\
    \ such that the ancillary\n   metrics can be derived via post-processing (e.g.,\
    \ by providing a\n   segment trace of the connection).\n"
- title: 3.1 Congestion Avoidance Capacity
  contents:
  - "3.1 Congestion Avoidance Capacity\n   The \"Congestion Avoidance Capacity\" (CAC)\
    \ metric is the data rate\n   (bits per second) of a fully specified implementation\
    \ of the\n   Congestion Avoidance algorithm, subject to the restriction that the\n\
    \   Retransmission Timeout and Slow-Start algorithms are not invoked.\n   The\
    \ CAC metric is defined to have no meaning across Retransmission\n   Timeouts\
    \ or Slow-Start periods (except the single segment Slow-Start\n   that is permitted\
    \ to follow recovery, as discussed in section 2).\n   In principle a CAC metric\
    \ would be an ideal BTC metric, as it\n   captures what should be TCP's steady\
    \ state behavior.  But, there is a\n   rather substantial difficulty with using\
    \ it as such.  The Self-\n   Clocking of the Congestion Avoidance algorithm can\
    \ be very fragile,\n   depending on the specific details of the Fast Retransmit,\
    \ Fast\n   Recovery or advanced recovery algorithms chosen.  It has been found\n\
    \   that timeouts and periods of slow start loss recovery are prevalent\n   in\
    \ traffic on the Internet [LK98,BPS+97] and therefore these should\n   be captured\
    \ by the BTC metric.\n   When TCP loses Self-Clock it is re-established through\
    \ a\n   retransmission timeout and Slow-Start.  These algorithms nearly\n   always\
    \ require more time than Congestion Avoidance would have taken.\n   It is easily\
    \ observed that unless the network loses an entire window\n   of data (which would\
    \ clearly require a retransmit timeout) TCP likely\n   missed some opportunity\
    \ to safely transmit data.  That is, if TCP\n   experiences a timeout after losing\
    \ a partial window of data, it must\n   have received at least one ACK that was\
    \ generated after some of the\n   partial data was delivered, but did not trigger\
    \ the transmission of\n   new data.  Recent research in congestion control (e.g.,\
    \ FACK [MM96a],\n   NewReno [FF96,RFC2582], rate-halving [MSML99]) can be characterized\n\
    \   as making TCP's Self-Clock more tenacious, while preserving fairness\n   under\
    \ adverse conditions.  This work is motivated by how poorly\n   current TCP implementations\
    \ perform under some conditions, often due\n   to repeated clock loss.  Since\
    \ this is an active research area,\n   different TCP implementations have rather\
    \ considerable differences in\n   their ability to preserve Self-Clock.\n"
- title: 3.2 Preservation of Self-Clock
  contents:
  - "3.2 Preservation of Self-Clock\n   Losing the ACK clock can have a large effect\
    \ on the overall BTC, and\n   the clock is itself fragile in ways that are dependent\
    \ on the loss\n   recovery algorithm.  Therefore, the transition between timer\
    \ driven\n   and Self-Clocked operation SHOULD be instrumented.\n"
- title: 3.2.1 Lost Transmission Opportunities
  contents:
  - "3.2.1 Lost Transmission Opportunities\n   If the last event before a timeout\
    \ was the receipt of an ACK that did\n   not trigger a transmission, the possibility\
    \ exists that an alternate\n   congestion control algorithm would have successfully\
    \ preserved the\n   Self-Clock.  A BTC SHOULD instrument key items in the BTC\
    \ state (such\n   as the congestion window) in the hopes that this may lead to\
    \ further\n   improvements in congestion control algorithms.\n   Note that in\
    \ the absence of knowledge about the future, it is not\n   possible to design\
    \ an algorithm that never misses transmission\n   opportunities.  However, there\
    \ are ever more subtle ways to gauge\n   network state, and to estimate if a given\
    \ ACK is likely to be the\n   last.\n"
- title: 3.2.2 Loosing an Entire Window
  contents:
  - "3.2.2 Loosing an Entire Window\n   If an entire window of data (or ACKs) is lost,\
    \ there will be no\n   returning ACKs to clock out additional data.  This condition\
    \ can be\n   detected if the last event before a timeout was a data transmission\n\
    \   triggered by an ACK.  The loss of an entire window of data/ACKs\n   forces\
    \ recovery to be via a Retransmission Timeout and Slow-Start.\n   Losing an entire\
    \ window of data implies an outage with a duration at\n   least as long as a round\
    \ trip time.  Such an outage can not be\n   diagnosed with low rate metrics and\
    \ is unsafe to diagnose at higher\n   rates than the BTC.  Therefore all BTC metrics\
    \ SHOULD instrument and\n   report losses of an entire window of data.\n   Note\
    \ that there are some conditions, such as when operating with a\n   very small\
    \ window, in which there is a significant probability that\n   an entire window\
    \ can be lost through individual random losses (again\n   highlighting the importance\
    \ of instrumenting cwnd).\n"
- title: 3.2.3 Heroic Clock Preservation
  contents:
  - "3.2.3 Heroic Clock Preservation\n   All algorithms that permit a given BTC to\
    \ sustain Self-Clock when\n   other algorithms might not, SHOULD be instrumented.\
    \  Furthermore, the\n   details of the algorithms used MUST be fully documented\
    \ (as discussed\n   in section 2).\n   BTC metrics that can sustain Self-Clock\
    \ in the presence of multiple\n   losses within one round trip SHOULD instrument\
    \ the loss distribution,\n   such that the performance of alternate congestion\
    \ control algorithms\n   may be estimated (e.g., Reno style).\n"
- title: 3.2.4  False Timeouts
  contents:
  - "3.2.4  False Timeouts\n   All false timeouts, (where the retransmission timer\
    \ expires before\n   the ACK for some previously transmitted data arrives) SHOULD\
    \ be\n   instrumented when possible.  Note that depending upon how the BTC\n \
    \  metric implements sequence numbers, this may be difficult to detect.\n"
- title: 3.3 Ancillary Metrics Relating to Flow Based Path Properties
  contents:
  - "3.3 Ancillary Metrics Relating to Flow Based Path Properties\n   All BTC metrics\
    \ provide unique vantage points for observing certain\n   path properties relating\
    \ to closely spaced packets.  As in the case\n   of RTT duration outages, these\
    \ can be impossible to diagnose at low\n   rates (less than 1 packet per RTT)\
    \ and inappropriate to test at rates\n   above the BTC of the network path.\n\
    \   All BTC metrics SHOULD instrument packet reordering.  The frequency\n   and\
    \ distance out-of-sequence SHOULD be instrumented for all out-of-\n   order packets.\
    \  The severity of the reordering can be classified as\n   one of three different\
    \ cases, each of which SHOULD be reported.\n      Segments that are only slightly\
    \ out-of-order should not trigger\n      the fast retransmit algorithm, but they\
    \ may affect the window\n      calculation.  BTC metrics SHOULD document how slightly\
    \ out-of-\n      order segments affect the congestion window calculation.\n  \
    \    If segments are sufficiently out-of-order, the Fast Retransmit\n      algorithm\
    \ will be invoked in advance of the delayed packet's late\n      arrival.  These\
    \ events SHOULD be instrumented.  Even though the\n      the late arriving packet\
    \ will complete recovery, the the window\n      will still be reduced by half.\n\
    \      Under some rare conditions segments have been observed that are\n     \
    \ far out of order - sometimes many seconds late [Pax97b].  These\n      SHOULD\
    \ always be instrumented.\n   BTC implementations SHOULD instrument the maximum\
    \ cwnd observed\n   during congestion avoidance and slow start.  A TCP running\
    \ over the\n   same path as the BTC metric must have sufficient sender buffer\
    \ space\n   and receiver window (and window shift [RFC1323]) to cover this cwnd\n\
    \   in order to expect the same performance.\n   There are several other path\
    \ properties that one might measure within\n   a BTC metric.  For example, with\
    \ an embedded one-way delay metric it\n   may be possible to measure how queuing\
    \ delay and and (RED) drop\n   probabilities are correlated to window size.  These\
    \ are open research\n   questions.\n"
- title: 3.4 Ancillary Metrics as Calibration Checks
  contents:
  - "3.4 Ancillary Metrics as Calibration Checks\n   Unlike low rate metrics, BTC\
    \ SHOULD include explicit checks that the\n   test platform is not the bottleneck.\n\
    \   Any detected dropped packets within the sending host MUST be\n   reported.\
    \  Unless the sending interface is the path bottleneck, any\n   dropped packets\
    \ probably indicates a measurement failure.\n   The maximum queue lengths within\
    \ the sending host SHOULD be\n   instrumented.  Any significant queue may indicate\
    \ that the sending\n   host has insufficient burst data rate, and is smoothing\
    \ the data\n   being transmitted into the network.\n"
- title: 3.5 Ancillary Metrics Relating to the Need for Advanced TCP Features
  contents:
  - "3.5 Ancillary Metrics Relating to the Need for Advanced TCP Features\n   If TCP\
    \ would require advanced TCP extensions to match BTC performance\n   (such as\
    \ RFC 1323 or RFC 2018 features), it SHOULD be reported.\n"
- title: 3.6 Validate Reverse Path Load
  contents:
  - "3.6 Validate Reverse Path Load\n   To the extent possible, the BTC metric SHOULD\
    \ distinguish between the\n   properties of the forward and reverse paths.\n \
    \  BTC methodologies which rely on non-cooperating receivers may only be\n   able\
    \ to measure round trip path properties and may not be able to\n   independently\
    \ differentiate between the properties of the forward and\n   reverse paths. \
    \ In this case the load on the reverse path contributed\n   by the BTC metric\
    \ SHOULD be instrumented (or computed) to permit\n   other means of gauge the\
    \ proportion of the round trip path properties\n   attributed to the the forward\
    \ and reverse paths.\n   To the extent possible, BTC methodologies that rely on\
    \ cooperating\n   receivers SHOULD support separate ancillary metrics for the\
    \ forward\n   and reverse paths.\n"
- title: 4   Security Considerations
  contents:
  - "4   Security Considerations\n   Conducting Internet measurements raises security\
    \ concerns.  This memo\n   does not specify a particular implementation of a metric,\
    \ so it does\n   not directly affect the security of the Internet nor of applications\n\
    \   which run on the Internet.  However, metrics produced within this\n   framework,\
    \ and in particular implementations of the metrics may\n   create security issues.\n"
- title: 4.1 Denial of Service Attacks
  contents:
  - "4.1 Denial of Service Attacks\n   Bulk Transport Capacity metrics, as defined\
    \ in this document,\n   naturally attempt to fill a bottleneck link.  The BTC\
    \ metrics based\n   on this specification will be as \"network friendly\" as current\
    \ well-\n   tuned TCP connections.  However, since the \"connection\" may not\
    \ be\n   using TCP packets, a BTC test may appear to network operators as a\n\
    \   denial of service attack.\n   Administrators of the source host of a test,\
    \ the destination host of\n   a test, and the intervening network(s) may wish\
    \ to establish\n   bilateral or multi-lateral agreements regarding the timing,\
    \ size, and\n   frequency of collection of BTC metrics.\n"
- title: 4.2 User data confidentiality
  contents:
  - "4.2 User data confidentiality\n   Metrics within this framework generate packets\
    \ for a sample, rather\n   than taking samples based on user data.  Thus, a BTC\
    \ metric does not\n   threaten user data confidentiality.\n"
- title: 4.3 Interference with metrics
  contents:
  - "4.3 Interference with metrics\n   It may be possible to identify that a certain\
    \ packet or stream of\n   packets are part of a BTC metric.  With that knowledge\
    \ at the\n   destination and/or the intervening networks, it is possible to change\n\
    \   the processing of the packets (e.g., increasing or decreasing delay,\n   introducing\
    \ or heroically preventing loss) that may distort the\n   measured performance.\
    \  It may also be possible to generate additional\n   packets that appear to be\
    \ part of a BTC metric.  These additional\n   packets are likely to perturb the\
    \ results of the sample measurement.\n   To discourage the kind of interference\
    \ mentioned above, packet\n   interference checks, such as cryptographic hash,\
    \ may be used.\n"
- title: 5   IANA Considerations
  contents:
  - "5   IANA Considerations\n   Since this metric framework does not define a specific\
    \ protocol, nor\n   does it define any well-known values, there are no IANA\n\
    \   considerations for this document.  However, a bulk transport capacity\n  \
    \ metric within this framework, and in particular protocols that\n   implement\
    \ a metric may have IANA considerations that need to be\n   addressed.\n"
- title: 6   Acknowledgments
  contents:
  - "6   Acknowledgments\n   Thanks to Wil Leland, Jeff Semke, Matt Zekauskas and\
    \ the IPPM working\n   group for numerous clarifications.\n   Matt Mathis's work\
    \ was supported by the National Science Foundation\n   under Grant Numbers 9415552\
    \ and 9870758.\n"
- title: 7   References
  contents:
  - "7   References\n   [BPS+97]     Hari Balakrishnan, Venkata Padmanabhan, Srinivasan\n\
    \                Seshan, Mark Stemm, and Randy Katz.  TCP Behavior of a\n    \
    \            Busy Web Server:  Analysis and Improvements.  Technical\n       \
    \         Report UCB/CSD-97-966, August 1997.  Available from\n              \
    \  http://nms.lcs.mit.edu/~hari/papers/csd-97-966.ps.\n                (Also in\
    \ Proc. IEEE INFOCOM Conf., San Francisco, CA,\n                March 1998.)\n\
    \   [FF96]       Fall, K., Floyd, S..  \"Simulation-based Comparisons of\n   \
    \             Tahoe, Reno and SACK TCP\".  Computer Communication\n          \
    \      Review, July 1996.\n                ftp://ftp.ee.lbl.gov/papers/sacks.ps.Z.\n\
    \   [Flo95]      Floyd, S., \"TCP and successive fast retransmits\", March\n \
    \               1995, Obtain via\n                ftp://ftp.ee.lbl.gov/papers/fastretrans.ps.\n\
    \   [Hoe96]      Hoe, J., \"Improving the start-up behavior of a\n           \
    \     congestion control scheme for TCP, Proceedings of ACM\n                SIGCOMM\
    \ '96, August 1996.\n   [Hoe95]      Hoe, J., \"Startup dynamics of TCP's congestion\
    \ control\n                and avoidance schemes\".  Master's thesis, Massachusetts\n\
    \                Institute of Technology, June 1995.\n   [Jac88]      Jacobson,\
    \ V., \"Congestion Avoidance and Control\",\n                Proceedings of SIGCOMM\
    \ '88, Stanford, CA., August 1988.\n   [Lak94]      V. T. Lakshman and U. Madhow.\
    \ The Performance of TCP/IP\n                for Networks with High Bandwidth-Delay\
    \ Products and\n                Random Loss. IFIP Transactions C-26, High Performance\n\
    \                Networking, pages 135--150, 1994.\n   [LK98]       Lin, D. and\
    \ Kung, H.T., \"TCP Fast Recovery Strategies:\n                Analysis and Improvements\"\
    , Proceedings of InfoCom,\n                March 1998.\n   [LM97]       T.V.Lakshman\
    \ and U.Madhow.  \"The Performance of TCP/IP\n                for Networks with\
    \ High Bandwidth-Delay Products and\n                Random Loss\".  IEEE/ACM\
    \ Transactions on Networking, Vol.\n                5, No. 3, June 1997, pp.336-350.\n\
    \   [Mat98]      Mathis, M., \"Empirical Bulk Transfer Capacity\", IP\n      \
    \          Performance Metrics Working Group report in Proceedings\n         \
    \       of the Forty Third Internet Engineering Task Force,\n                Orlando,\
    \ FL, December 1988.  Available from\n                http://www.ietf.org/proceedings/98dec/43rd-ietf-98dec-\n\
    \                122.html and\n                http://www.ietf.org/proceedings/98dec/slides/ippm-\n\
    \                mathis-98dec.pdf.\n   [MM96a]      Mathis, M. and Mahdavi, J.\
    \ \"Forward acknowledgment:\n                Refining TCP congestion control\"\
    , Proceedings of ACM\n                SIGCOMM '96, Stanford, CA., August 1996.\n\
    \   [MM96b]      M. Mathis, J. Mahdavi, \"TCP Rate-Halving with Bounding\n   \
    \             Parameters\".  Available from\n                http://www.psc.edu/networking/papers/FACKnotes/current.\n\
    \   [MSML99]     Mathis, M., Semke, J., Mahdavi, J., Lahey, K., \"The\n      \
    \          Rate-Halving Algorithm for TCP Congestion Control\", June\n       \
    \         1999, Work in Progress.\n   [MSMO97]     Mathis, M., Semke, J., Mahdavi,\
    \ J., Ott, T., \"The\n                Macroscopic Behavior of the TCP Congestion\
    \ Avoidance\n                Algorithm\", Computer Communications Review, 27(3),\
    \ July\n                1997.\n   [OKM96a],    Ott, T., Kemperman, J., Mathis,\
    \ M., \"The Stationary\n                Behavior of Ideal TCP Congestion Avoidance\"\
    , In\n                progress, August 1996. Obtain via pub/tjo/TCPwindow.ps\n\
    \                using anonymous ftp to ftp.bellcore.com\n   [OKM96b],    Ott,\
    \ T., Kemperman, J., Mathis, M., \"Window Size\n                Behavior in TCP/IP\
    \ with Constant Loss Probability\",\n                DIMACS Special Year on Networks,\
    \ Workshop on Performance\n                of Real-Time Applications on the Internet,\
    \ Nov 1996.\n   [Pax97a]     Paxson, V., \"Automated Packet Trace Analysis of\
    \ TCP\n                Implementations\", Proceedings of ACM SIGCOMM '97, August\n\
    \                1997.\n   [Pax97b]     Paxson, V., \"End-to-End Internet Packet\
    \ Dynamics,\"\n                Proceedings of SIGCOMM '97, Cannes, France, Sep.\
    \ 1997.\n   [PFTK98]     Padhye, J., Firoiu. V., Towsley, D., and Kurose, J.,\n\
    \                \"TCP Throughput: A Simple Model and its Empirical\n        \
    \        Validation\", Proceedings of ACM SIGCOMM '98, August\n              \
    \  1998.\n   [RFC793]     Postel, J., \"Transmission Control Protocol\", STD 7,\
    \ RFC\n                793, September 1981.  Obtain via: http://www.rfc-\n   \
    \             editor.org/rfc/rfc793.txt\n   [RFC1191]    Mogul, J. and S. Deering,\
    \ \"Path MTU Discovery\", RFC\n                1191, November 1990.  Obtain via:\
    \ http://www.rfc-\n                editor.org/rfc/rfc1191.txt\n   [RFC1323]  \
    \  Jacobson, V., Braden, R. and D. Borman, \"TCP Extensions\n                for\
    \ High Performance\", May 1992.  Obtain via:\n                http://www.rfc-editor.org/rfc/rfc1323.txt\n\
    \   [RFC1633]    Braden R., Clark D. and S. Shenker, \"Integrated Services\n \
    \               in the Internet Architecture: an Overview\", RFC 1633,\n     \
    \           June 1994.  Obtain via:  http://www.rfc-\n                editor.org/rfc/rfc1633.txt\n\
    \   [RFC2001]    Stevens, W., \"TCP Slow Start, Congestion Avoidance, Fast\n \
    \               Retransmit, and Fast Recovery Algorithms\", RFC 2001,\n      \
    \          January 1997.  Obtain via:  http://www.rfc-\n                editor.org/rfc/rfc2001.txt\n\
    \   [RFC2018]    Mathis, M., Mahdavi, J. Floyd, S., Romanow, A., \"TCP\n     \
    \           Selective Acknowledgment Options\", RFC 2018, October\n          \
    \      1996.  Obtain via:  http://www.rfc-\n                editor.org/rfc/rfc2018.txt\n\
    \   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n             \
    \   Obtain via:  http://www.rfc-editor.org/rfc/rfc2119.txt\n   [RFC2216]    Shenker,\
    \ S. and J. Wroclawski, \"Network Element Service\n                Specification\
    \ Template\", RFC 2216, September 1997.\n                Obtain via:  http://www.rfc-editor.org/rfc/rfc2216.txt\n\
    \   [RFC2330]    Paxson, V., Almes, G., Mahdavi, J. and M. Mathis,\n         \
    \       \"Framework for IP Performance Metrics\", RFC 2330, April\n          \
    \      1998.  Obtain via:  http://www.rfc-\n                editor.org/rfc/rfc2330.txt\n\
    \   [RFC2475]    Black D., Blake S., Carlson M., Davies E., Wang Z. and\n    \
    \            W. Weiss, \"An Architecture for Differentiated Services\",\n    \
    \            RFC 2475, December 1998.  Obtain via: http://www.rfc-\n         \
    \       editor.org/rfc/rfc2475.txt\n   [RFC2481]    Ramakrishnan, K. and S. Floyd,\
    \ \"A Proposal to add\n                Explicit Congestion Notification (ECN)\
    \ to IP\", RFC 2481,\n                January 1999.  Obtain via:  http://www.rfc-\n\
    \                editor.org/rfc/rfc2481.txt\n   [RFC2525]    Paxson, V., Allman,\
    \ M., Dawson, S., Fenner, W., Griner,\n                J., Heavens, I., Lahey,\
    \ K., Semke, J. and B. Volz,\n                \"Known TCP Implementation Problems\"\
    , RFC 2525, March\n                1999.  Obtain via:  http://www.rfc-\n     \
    \           editor.org/rfc/rfc2525.txt\n   [RFC2581]    Allman, M., Paxson, V.\
    \ and W. Stevens, \"TCP Congestion\n                Control\", RFC 2581, April\
    \ 1999.  Obtain via:\n                http://www.rfc-editor.org/rfc/rfc2581.txt\n\
    \   [RFC2582]    Floyd, S. and T. Henderson, \"The NewReno Modification to\n \
    \               TCP's Fast Recovery Algorithm\", RFC 2582, April 1999.\n     \
    \           Obtain via:  http://www.rfc-editor.org/rfc/rfc2582.txt\n   [RFC2988]\
    \    Paxson, V. and M. Allman, \"Computing TCP's\n                Retransmission\
    \ Timer\", RFC 2988, November 2000.  Obtain\n                via:  http://www.rfc-editor.org/rfc/rfc2988.txt\n\
    \   [RFC3042]    Allman, M., Balakrishnan, H. and S. Floyd, \"Enhancing\n    \
    \            TCP's Loss Recovery Using Limited Transmit\", RFC 3042,\n       \
    \         January 2001.  Obtain via:  http://www.rfc-\n                editor.org/rfc/rfc3042.txt\n\
    \   [Ste94]      Stevens, W., \"TCP/IP Illustrated, Volume 1: The\n          \
    \      Protocols\", Addison-Wesley, 1994.\n   [WS95]       Wright, G., Stevens,\
    \ W., \"TCP/IP Illustrated Volume II:\n                The Implementation\", Addison-Wesley,\
    \ 1995.\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   Matt Mathis\n   Pittsburgh Supercomputing Center\n   4400\
    \ Fifth Ave.\n   Pittsburgh PA 15213\n   EMail: mathis@psc.edu\n   http://www.psc.edu/~mathis\n\
    \   Mark Allman\n   BBN Technologies/NASA Glenn Research Center\n   Lewis Field\n\
    \   21000 Brookpark Rd.  MS 54-2\n   Cleveland, OH  44135\n   Phone: 216-433-6586\n\
    \   EMail: mallman@bbn.com\n   http://roland.grc.nasa.gov/~mallman\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
