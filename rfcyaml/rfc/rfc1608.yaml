- title: __initial_text__
  contents:
  - '           Representing IP Information in the X.500 Directory

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the objects necessary to include information\n\
    \   about IP networks and IP numbers in the X.500 Directory. It extends\n   the\
    \ work \"Charting networks in the X.500 Directory\" [1] where a\n   general framework\
    \ is presented for representing networks in the\n   Directory by applying it to\
    \ IP networks.  This application of the\n   Directory is intended to support the\
    \ work of IP network assigning\n   authorities, NICs, as well as other applications\
    \ looking for a\n   mapping of IP numbers to data of related networks. Furthermore,\n\
    \   Autonomous Systems and related routing policy information can be\n   represented\
    \ in the Directory along with their relationship to\n   networks and organizations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1. Introduction                                    \
    \ 2\n      2. IP images of networks                            3\n      2.1 IP\
    \ network image                                3\n      2.2 IP node image    \
    \                               5\n      2.3 IP network interface image      \
    \                6\n      2.4 Autonomous Systems                             \
    \ 7\n      3. Number assignment information                    7\n      3.1 Delegated\
    \ Block object                          8\n      3.2 IP Group object         \
    \                        9\n      3.3 IP Reference object                    \
    \        10\n      3.4 AS Block object                                10\n   \
    \   3.5 AS Reference object                            10\n      4. Directory\
    \ tree                                  11\n      4.1 IP image objects       \
    \                        11\n      4.2 AS objects                            \
    \         11\n      4.3 Namespace objects                              11\n  \
    \    4.4 Relationship to organizational entries         13\n      5. Security\
    \ Considerations                         14\n      6. Authors' Addresses     \
    \                         15\n      References                               \
    \          16\n      Appendix: OID tables                               17\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Information related to the Internet Network Infrastructure\
    \ is created\n   and stored by a number of different organizations, such as the\n\
    \   Internet Assigned Numbers Authority (IANA), Internet Registry (IR),\n   Network\
    \ Information Centers (NICs), and the NSFNET Network Operations\n   Center (NOC).\
    \  This information is generally \"mastered\" (stored and\n   maintained) by these\
    \ organizations on a centralized basis, i.e.,\n   there is a single place to look\
    \ for a definitive list of entries for\n   these categories.  This has worked\
    \ well in the past but given the\n   tremendous growth of the Internet and its\
    \ number of users and\n   networks, it is essential that a distributed schema\
    \ be used.\n   The X.500 Directory offers the appropriate technology for\n   implementing\
    \ this distributed method of managing network\n   infrastructure information.\n\
    \   The following goals are addressed in this document:\n    o Provision of IP\
    \ specific images of network elements\n    o Mapping from Network Number to network,\
    \ owner, provider etc.\n    o Support of delegation of IP address blocks\n   \
    \ o Storage of high-level routing policies and AS information\n    o Support of\
    \ \"classless\" network address formats\n    o Provision of several organizational\
    \ images of a network\n   It may be noted that the document basically consists\
    \ of two parts.\n   In the first part, an IP specific extension of the general\
    \ framework\n   \"Charting networks in the Directory\" [1] is given.  Objects\
    \ defined\n   by the application of this framework are related to IP numbers.\
    \ An IP\n   namespace is defined in the second part of this paper, referring to\n\
    \   IP network elements defined at the beginning.\n"
- title: 2. IP images of networks
  contents:
  - "2. IP images of networks\n   As defined in [1], networks are modeled as a set\
    \ of subnetworks and\n   nodes, called network elements in the remainder. To obtain\
    \ a\n   particular view of a network element, images were introduced.  Below,\n\
    \   images of network elements for an IP specific view are defined.\n   Please\
    \ note that images contain references to underlying physical\n   information about\
    \ elements.\n   In the remainder, ipStringSyntax is used as attribute type for\
    \ all\n   attributes that are to hold an IP number. Currently, there are two\n\
    \   definitions for a syntax like this:\n    o IpAddress as of [5]\n    o ip as\
    \ of [6]\n   It is suggested to use CaseIgnoreStringSyntax for implementations\
    \ for\n   the time being with the convention to use the ordinary IP syntax.\n\
    \   Nevertheless, an OID has been reserved for ipStringSyntax (see\n   Appendix).\n"
- title: 2.1 IP network image
  contents:
  - "2.1 IP network image\n   IP network image is one application of network images\
    \ and therefore\n   inherits the networkImageClass. This class is given below\
    \ for\n   reference only, its definition can be found in [1].\n   networkImage\
    \ OBJECT CLASS\n    SUBCLASS of ImageCommunicationObject\n    MAY CONTAIN\n  \
    \   externalGateway :: distinguishedNameSyntax,\n      /* points to one or more\
    \ nodes that act\n         as gateway for the protocol application\n         this\
    \ image refers to */\n   An IP network combines all network elements that have\
    \ a common IP\n   network number.  Presently, IP network numbers fall into one\
    \ of the\n   classes A, B, or C. However, sub- and supernetworking is already\
    \ done\n   broadly, and classless networks numbers are expected to be assigned\n\
    \   soon. [2] proposes to assign bitwise contiguous blocks of class-C-\n   addresses\
    \ to all networks with more than 255 nodes. The definition of\n   IP network,\
    \ therefore, is always related to common network number and\n   network mask.\n\
    \   IP networks have a very close relationship to the Domain Name System.\n  \
    \ Several attributes are introduced to take care of these relations.\n   Though\
    \ we do not intend to abolish the existing DNS service, the\n   schema defined\
    \ here is able to provide the mapping IP number to\n   domain name and vice versa.\n\
    \   An IP network image object as defined below is intended to provide\n   technical\
    \ and administrative data for one IP network. Attributes hold\n   information\
    \ that a NIC-WHOIS server would reveal for the network, and\n   more.\n   ipNetworkImage\
    \ OBJECT CLASS\n    SUBCLASS of NetworkImage\n    MUST CONTAIN\n     ipNetworkImageName\
    \ :: CaseIgnoreString,\n      /* common name */\n     ipNwNumber :: IPStringSyntax,\n\
    \      /* the IP network number for\n         this (sub)network */\n     ipNwMask\
    \ :: IPStringSyntax\n      /* mask that applies to ipNwNumber\n         in order\
    \ to define classless\n         network number; also used for routing */\n   \
    \ MAY CONTAIN\n    /* DNS related info ; e.g. - */\n     associatedDomain :: CaseIgnoreStringSyntax,\n\
    \      /* the domain name associated to this IP network;\n         As there is\
    \ not always a 1:1 mapping between traditional\n         IP numbers and domain\
    \ names, the name given here\n         should contain the \"closest match\".\n\
    \         1) (sub)network does not have a domain name\n            of its own,\
    \ but is part of a bigger domain:\n            take name of that domain\n    \
    \     2) network is divided into several domains,\n            therefore having\
    \ more than one domain name:\n            list all of them.\n         Note: a\
    \ reverse mapping of domain names to\n         networks/nodes can be achieved\
    \ by a modified\n         implementation of RFC1279 */\n     inAddrServer :: DistinguishedNameSyntax,\n\
    \      /* refers to the ipNodeImageObject of the\n         inaddr Server that\
    \ holds information about\n         this network */\n    /* routing policy; e.g.\
    \ - */\n     asNumber :: integerStringSyntax,\n      /* number of Autonomous System\
    \ this network belongs to */\n     acceptedUsagePolicy :: caseIgnoreStringSyntax,\n\
    \      /* semantics to be defined */\n    /* Any other - */\n     provider   ::\
    \ DistinguishedNameSyntax,\n      /* points to network provider */\n     onlineDate\
    \ :: uTCTimeSyntax\n      /* date when network got connected to the Internet */\n"
- title: 2.2 IP node image
  contents:
  - "2.2 IP node image\n   If a node in the network is running the IP protocol, an\n\
    \   ipNodeImageObject should be created for this node. This image is a\n   subclass\
    \ of nodeImageClass and holds IP specific information.  The\n   nodeImageClass\
    \ is given below for reference only, its definition can\n   be found in [1].\n\
    \   nodeImage OBJECT CLASS\n    SUBCLASS of ImageCommunicationObject\n     /*\
    \ no attributes common for all nodeImages have been\n        defined yet */\n\
    \   An ipNodeImage is used to obtain technical and administrative\n   information\
    \ on a host. The object is defined as follows:\n   ipNodeImage OBJECT CLASS\n\
    \    SUBCLASS of NodeImage\n    MUST CONTAIN\n     ipNodeName :: CaseIgnoreString\n\
    \      /* common name, it is advised to use\n         the hostname for this purpose\
    \ */\n    MAY CONTAIN\n     protocol :: CaseIgnoreString,\n      /* name and version\
    \ of IP protocol running */\n     domainName :: CaseIgnoreString,\n      /* the\
    \ complete domain name of this node;\n         CNAMEs can be stored additionally\
    \ to the\n         DNS A record name;\n         further relationships, like MX\
    \ record entries,\n         should be taken care of by the domain name tree\n\
    \         according to RFC 1279 */\n"
- title: 2.3 IP network interface image
  contents:
  - "2.3 IP network interface image\n   The most important IP related information\
    \ of a node (its IP\n   addresses) is registered with ipNetworkInterfaceImageObjects.\
    \  This\n   picture is accurate as a node can have several IP addresses, but at\n\
    \   most one per interface.  Furthermore, it shows clearly the\n   relationship\
    \ between interface and neighboring IP network.\n   IpNetworkInterfaceImage is\
    \ a subclass of networkInterfaceImageClass.\n   The networkInterfaceImageClass\
    \ is given below for reference only, its\n   definition can be found in [1]. \
    \ Note that for\n   ipNetworkInterfaceImage all references are drawn in the context\
    \ of\n   IP, i.e., networkInterfaceAddress becomes an IP address and\n   connectedNetwork\
    \ points to an ipNetworkImageObject.\n   networkInterfaceImage OBJECT CLASS\n\
    \    SUBCLASS of ImageCommunicationObject\n    MAY CONTAIN\n     networkInterfaceAddress\
    \     :: caseIgnoreStringSyntax,\n      /* this interface's address in the context\
    \ the\n         image refers to, e.g. IP number, NSAP */\n     connectedNetwork\
    \   :: distinguishedNameSyntax\n      /* pointer to networkImageObject that describes\n\
    \         the network this interface is attached to in terms\n         of the\
    \ protocol or application the images\n         indicates */\n   Additionally,\
    \ ipNetworkInterfaceImageObject has the following\n   properties:\n   ipNetworkInterfaceImage\
    \ OBJECT CLASS\n    SUBCLASS of NetworkInterfaceImage\n    MUST CONTAIN\n    \
    \ ipNetworkInterfaceName :: CaseIgnoreStringSyntax\n      /* It is suggested that\
    \ the interface name\n         is derived from the name of the logical\n     \
    \    device this interface represents for the\n         operating system, e.g.\
    \ le0, COM1 */\n    MAY CONTAIN\n     ipNwMask ::  IPStringSyntax\n      /* mask\
    \ that applies to networkInterfaceAddress for\n         routing of packets to\
    \ nodes on the connected\n         (broadcast) network;\n         Note: This is\
    \ only a fraction\n         of the routing table information\n         for this\
    \ interface, namely for one hop. */\n"
- title: 2.4 Autonomous Systems
  contents:
  - "2.4 Autonomous Systems\n   Autonomous Systems (AS) are defined in asObject which\
    \ is a subclass of\n   imageCommunicationObject.  It provides technical and administrative\n\
    \   information of an AS. Furthermore, routing policies can be stored with\n \
    \  the AS object.  The definition of the AS object is aligned with the\n   corresponding\
    \ database object defined in [3].\n   as OBJECT CLASS\n    SUBCLASS of  ImageCommunicationObject\n\
    \    MUST CONTAIN\n     asNumber :: IntegerStringSyntax\n    MAY CONTAIN\n   \
    \  asName :: CaseIgnoreStringSyntax,\n      /* if there is a name different from\
    \ AS */\n     asIn ::  CaseIgnoreStringSyntax,\n      /* accepted routes from\
    \ other AS */\n      /* for syntax and semantics refer [3] */\n     asOut :: CaseIgnoreStringSyntax,\n\
    \      /* generated routes announced to others */\n      /* for syntax and semantics\
    \ refer [3] */\n     asDefault ::CaseIgnoreStringSyntax,\n      /* how default\
    \ routing is handled */\n      /* for syntax and semantics refer [3] */\n    \
    \ asGuardian :: DistinguishedNameSyntax, */\n      /* DN of guardian of this AS\
    \ */\n     lastModifiedDate :: UTCtimeSyntax */\n      /* important as routes\
    \ change frequently */\n   Note that routing policies for an Autonomous System\
    \ are represented\n   by the {asIn, asOut} attributes of asObject. Due to performance\n\
    \   constraints of present X.500 technology, it will probably not be used\n  \
    \ directly by routers for dynamic routing.  However, it certainly can\n   be used\
    \ in network management systems to determine the allowed paths\n   [i.e.,  in\
    \ accordance with published policies] between two networks.\n   This will be useful\
    \ in finding alternate paths, and evaluating the\n   connectivity of networks.\n"
- title: 3. Number assignment information
  contents:
  - "3. Number assignment information\n   In the following, Directory objects have\
    \ been defined to represent IP\n   and AS (Autonomous System) namespace in the\
    \ Directory. Their purpose\n   is to provide\n     o mapping from IP number to\
    \ IP network element (network or node)\n     o mapping from IP number to AS number\
    \ and vice versa\n     o assignment and delegation information\n   The need for\
    \ a global, distributed database supporting the objectives\n   arises mainly from\
    \ distributed IP- and AS-number assignment.\n   Describing all IP numbers with\
    \ one of the new objects delegatedBlock,\n   ipGroup and ipReference leads to\
    \ the desired information. AS number\n   information is stored with the objects\
    \ asBlock and asReference.\n   Furthermore, all assigned numbers have some properties\
    \ in common.\n   Therefore, an objectclass assignedNumberClass is introduced.\
    \ This\n   class exports attributes to delegatedBlock, ipGroup, ipReference,\n\
    \   asBlock, and asReference.\n   AssignedNumberClass is defined as follows (\"\
    number\" always refers to\n   IP number of delegatedBlock, network, host, and\
    \ AS number, resp.):\n   assignedNumberClass OBJECT CLASS\n    SUBCLASS of  top\n\
    \    MAY CONTAIN\n     assBy :: DistinguishedNameSyntax,\n      /* refers to an\
    \ organization or organizationalRole\n         that assigned the number to assTo\
    \ (see below) */\n     assTo :: DistinguishedNameSyntax,\n      /* refers to organization\
    \ or organizationalRole\n         that the number was assigned to. This does not\n\
    \         imply that assTo \"owns\" this number now. */\n     assDate :: uTCTimeSyntax,\n\
    \      /* date of assignment for this number */\n     nicHandle :: CaseIgnoreStringSyntax,\n\
    \      /* gives the unique ID for a description\n         related to this number.\n\
    \         format: \"handle : nic-domain-name\"\n         example: MAK21 : rs.internic.net\
    \ */\n     relNwElement ::  DistinguishedNameSyntax,\n      /* the network element\
    \ related to this number\n         (network or node) */\n"
- title: 3.1 Delegated Block object
  contents:
  - "3.1 Delegated Block object\n   This object provides information on a block of\
    \ IP addresses delegated\n   to some local-authority or service provider. Only\
    \ contiguous blocks\n   can be represented with the following schema. If an organization\n\
    \   (say, a NIC) has been assigned several IP network numbers which do\n   not\
    \ form a contiguous block, it might want to use a different form of\n   representing\
    \ that fact (e.g., using imageNetworks).  The\n   delegatedBlock object holds\
    \ lower and upper bounds of the block.\n   Note that the above does not make any\
    \ assumption about the network\n   masks being constrained by byte boundaries.\
    \ We can thus represent\n   subnetting within a \"network (number)\" that often\
    \ happens within an\n   organization in the same framework.\n   This schema does\
    \ lead to some granularity in the otherwise flat IP-\n   number space. Further,\
    \ the granularity is significant as it may be\n   used to identify the administrator\
    \ of the block - a service provider\n   or a domain manager.  E.g., it fits well\
    \ into the schema of\n   aggregating networks for routing purposes as has been\
    \ proposed in\n   [4].\n   The object delegatedBlock is of the form:\n   delegatedBlock\
    \ OBJECT CLASS\n    SUBCLASS of AssignedNumberClass\n    MUST CONTAIN\n     delegatedBlockName\
    \ :: caseIgnoreStringSyntax,\n     lowerBound :: IPStringSyntax,\n      /* smallest\
    \ IP address belonging to the\n         block, e.g. 195.100.0.0 */\n     upperBound\
    \ :: IPStringSyntax\n      /* highest  IP address belonging to the\n         block,\
    \ e.g. 195.103.255.255 */\n   The attribute relNwElement (inherited from AssignedNumberClass)\
    \ can\n   point to a networkImage covering all networks within the block if\n\
    \   this makes sense.\n"
- title: 3.2 IP Group object
  contents:
  - "3.2 IP Group object\n   This object provides information for an IP network number.\
    \  Its\n   purpose is basically only to\n      o show that the number has been\
    \ assigned, and\n      o provide a reference to the descriptive ipNetworkObject\
    \ for\n        this network.\n   Regardless of the actual value of x, IP group\
    \ objects may exist for\n   IP numbers x.0.0.0, x.y.0.0 and x.y.z.0. This approach\
    \ includes\n   \"classical\" class-A, -B and -C network addresses as well as any\
    \ kind\n   of super- and subnetworking.\n   The IP group object is a subclass\
    \ of assignedNumberClass. The\n   attribute relNwElement points to an ipNetworkImage\
    \ as defined above.\n   ipGroup OBJECT CLASS\n    SUBCLASS of  AssignedNumberClass\n\
    \    MUST CONTAIN\n     ipGroupName :: IPStringSyntax,\n      /* IP number; x.0.0.0\
    \ or x.y.0.0 or x.y.z.0\n         where x, y, z in 1..255 */\n     ipNwMask  \
    \ ::    IPStringSyntax\n      /* mask that applies to all numbers\n         within\
    \ the group; used to define\n         classless networking;  */\n"
- title: 3.3 IP Reference object
  contents:
  - "3.3 IP Reference object\n   There is one IP reference object for each IP host\
    \ address.  The\n   purpose of this object is to\n     o tell that this IP number\
    \ is already assigned to a node\n     o give a pointer to the related ipNodeImageObject\n\
    \   The IP reference object is a subclass of assignedNumberClass.  The\n   attribute\
    \ relNwElement points to an ipNodeImage.\n   ipReference OBJECT CLASS\n    SUBCLASS\
    \ of  AssignedNumberClass\n    MUST CONTAIN\n     ipReferenceName :: IPString\n\
    \      /* value is always IP address */\n"
- title: 3.4 AS block object
  contents:
  - "3.4 AS block object\n   The AS block object is used to show delegation of blocks\
    \ of AS\n   numbers to regional registries. This is similar to delegatedBlock\
    \ of\n   ipNetwork numbers.\n   asBlock OBJECT CLASS\n    SUBCLASS of  AssignedNumberClass\n\
    \    MUST CONTAIN\n     asBlockName :: caseIgnoreStringSyntax,\n     asLowerBound\
    \ :: integerStringSyntax,\n     asUpperBound :: integerStringSyntax\n   An AS\
    \ block will comprise several consecutive AS numbers.  Objects to\n   describe\
    \ these numbers may be stored in asObjects.\n"
- title: 3.5 AS reference object
  contents:
  - "3.5 AS reference object\n   An AS reference object is used to show that an Autonomous\
    \ System\n   number has been assigned (and thus can not be given to somebody\n\
    \   else).  Similar to ipGroup, asReference does not contain technical\n   details\
    \ about an autonomous system itself but rather points (with\n   relNwElement)\
    \ to a descriptive asObject.\n   asReference OBJECT CLASS\n    SUBCLASS of  AssignedNumberClass\n\
    \    MUST CONTAIN\n     asNumber :: integerStringSyntax\n"
- title: 4. Directory tree
  contents:
  - "4. Directory tree\n                              root\n                     \
    \          |\n                 +-------------+---------------+\n             \
    \    |                             |\n                c=                     \
    \    o=Internet\n                 |                             |\n          \
    \ +-----+------+               +------+-------+\n           |            |   \
    \            |              |\n          ipNw=       as=             dbl=    \
    \       asB=\n           |                            |              |\n     \
    \     ipNd=                       ipG=           asRef=\n           |        \
    \                    |\n          ipNwIf=                     ipRef=\n       \
    \       Figure 1: Overall relationship of objects.\n"
- title: 4.1 IP image objects
  contents:
  - "4.1 IP image objects\n   According to [1], IP image entries will be stored underneath\
    \ the\n   organization / organizationalUnit entry of the entity responsible for\n\
    \   that network. The case that such an entry does not yet exist in the\n   white-pages\
    \ pilot is discussed in 4.4 below.\n"
- title: 4.2 AS objects
  contents:
  - "4.2 AS objects\n   The technical and administrative description of an AS is basically\n\
    \   maintained by NICs, network providers, or other special\n   organizations.\
    \  It is suggested that these organizations build a\n   subtree for information\
    \ on AS which they are responsible for.\n"
- title: 4.3 Namespace objects
  contents:
  - "4.3 Namespace objects\n   The new IP namespace objects build a single tree in\
    \ the Directory. It\n   is suggested that this tree will have a root of type\n\
    \   organizationalUnit within @o=Internet@ou=Network Information.\n     objectClass=\
    \ organizationalUnit\n     organizationalUnitName= IP networks\n     description=\
    \ root of IP number tree\n   The tree is built under an administrative and an\
    \ implementational\n   view.  Nowadays, network numbers usually are assigned to\n\
    \   organizations by (national) Network Information Centers (NIC) which\n   themselves\
    \ have got a block of IP network numbers assigned from\n   another authority (e.g.,\
    \ IR at top level). This concept of delegated\n   blocks falling apart in smaller\
    \ delegated blocks and IP network\n   numbers is used to model the Directory tree.\
    \ Thus, an ipGroup object\n   is always subordinate of a delegated block object\
    \ (namely the\n   delegated block including this IP number). Network numbers that\
    \ were\n   directly assigned by a top-level authority, i.e., have not been\n \
    \  object of a delegation to a local assigning authority, will all be at\n   one\
    \ level in the Directory.  Already today, however, we find many\n   delegations\
    \ within the traditional class A-, B- and C-addresses.\n   Such a delegation is\
    \ represented by a delegated block object, having\n   the assigned IP network\
    \ numbers as subordinates. Also, part of the\n   block can be further delegated\
    \ to another authority, leading to\n   another delegated block object within the\
    \ parent delegated block's\n   tree.  Usually, subordinates of ipGroup objects\
    \ are ipReferences,\n   i.e., single IP addresses as assigned to nodes. To support\n\
    \   subnetworking, it is also allowed to divide ipGroups into several\n   subnetwork\
    \ ipGroups, each representing an IP subnetwork.  In such\n   cases, subnetwork\
    \ numbers are given as subordinates to the assigned\n   IP network number.  Network\
    \ masks clarify what the subnetwork\n   addresses are.\n                     \
    \    ou=IP networks\n                               |\n           +-------------------+-----------------------+\n\
    \          /                    |                        \\\n                \
    \  dbl=150.0.0.0-150.100.0.0\n                               |\n           +-------------------+-----------------------+\n\
    \          /                    |                        \\\n                \
    \         ipG=150.80.0.0\n                               |\n           +-------------------+-----------------------+\n\
    \          /                    |                        \\\n                \
    \         ipG=150.80.240.0\n                               |\n           +-------------------+-----------------------+\n\
    \          /                    |                        \\\n   ipRef=150.80.254.1\
    \    ipRef=150.80.254.2      ipRef=150.80.254.3\n      Figure 2: Example population\
    \ of IP namespace tree according\n                to delegation and subnetworking.\n\
    \   For some applications, the separation of ipImage (description of the\n   network)\
    \ and ipGroup (description of the namespace element) will bear\n   disadvantages\
    \ in the look-up procedure. In that case one might think\n   of combining both\
    \ object classes with the aim to provide one object\n   describing administrative\
    \ and technical data for an IP network.\n   As Autonomous Systems are an additional\
    \ namespace to the existing IP\n   number space, they should go into a separate\
    \ subtree. It is suggested\n   that this is an organizationalUnit within @o=Internet@ou=Network\n\
    \   Information.\n     objectClass= organizationalUnit\n     organizationalUnitName=\
    \ AS numbers\n     description= root of Autonomous System number space\n   Similar\
    \ to blocks of IP network numbers, blocks of AS numbers are\n   sometimes delegated\
    \ to another registry. This is expressed by asBlock\n   objects.  These objects\
    \ come below the root of the AS number space.\n   All AS numbers falling into\
    \ such a block are stored as subordinates\n   of the block. An AS block may have\
    \ smaller AS blocks underneath if\n   delegation is extended.\n"
- title: 4.4 Relationship to organizational entries
  contents:
  - "4.4 Relationship to organizational entries\n   Organizational information (i.e.,\
    \ white-pages-like information about\n   an organization, its departments and\
    \ employees) occurs at several\n   places in the network DIT - [org of IP-Number,\
    \ org of AS-Number, org\n   of Admin- contact, However, it will be basically mastered\n\
    \   [administered, maintained] by the organization itself in the\n   Directory\
    \ Management Domain (DMD) over which the organization has the\n   authority. \
    \ This gives rise to some tricky problems - a typical\n   example is that of a\
    \ NIC which holds the AS, DNS, IP, ...  subtrees\n   of the DIT.\n   A good strategy\
    \ would avoid explicit duplication of information.  By\n   explicit duplication\
    \ of information we understand information being\n   duplicated outside the directory\
    \ framework, e.g., by having several\n   master entries for one and the same piece\
    \ of information. The only\n   way to avoid duplication would be to have relevant\
    \ entries point to\n   the pertinent organizational entry for organizational information.\n\
    \   But since\n     o most organizations do not, as yet, have an entry in the\
    \ DIT and\n     o the reliability of the access to an organizations DIT when\n\
    \       stored in a remote DSA cannot be taken for granted,\n   the following\
    \ framework is adopted to accommodate the conflicting\n   requirements /conditions.\n\
    \     o A copy of all the necessary organization-info is retained\n       at the\
    \ NICs DSA. Since only  the  necessary info will be kept\n       the NIC will\
    \ not be burdened to act as the repository of the\n       organizations DIT. These\
    \ objects may be kept in a separate\n       subtree of affiliated-organizations\
    \ [organizations\n       affiliated to the NIC]. Though the affiliated organizations\
    \ node\n       does not really represent a locality, it is suggested to define\n\
    \       the node as objectClass locality. This does not break the\n       Directory\
    \ schema when entries of organizations shall become\n       subordinate to the\
    \ NICs organization's entry.\n     o The problem of information duplication/consistency\
    \ will arise when\n       organizational DITs/DSAs do come into existence. At\
    \ that stage a\n       shadowing mechanism which will attempt to maintain the\
    \ data\n       consistency may be resorted to. The X.500/ISO 9594(1993)\n    \
    \   implementations are expected to provide appropriate shadowing\n       mechanisms\
    \ along X.525.\n   It may be noted that what is suggested is not a duplication\
    \ of an\n   entire white-pages-like structure at the NIC.  It suggests an\n  \
    \ \"affiliated organizations node\". The entries under this node will be\n   organization\
    \ objects with a limited number of attributes, i.e., the\n   attributes to hold\
    \ the organization info necessary for the NIC:\n   nothing more, nothing less.\
    \  Operationally, and content wise the NIC\n   DSA will hold exactly the amount\
    \ of info that is desired by the NIC.\n   When an organization sets up its DSA\
    \ and when the organization\n   informs the NIC about it, the NIC will set up\
    \ the shadowing\n   arrangement to obtain info on changes of interest [and forget\
    \ about\n   it].\n   It may be emphasized that the entries under affiliated organizations\n\
    \   are physical entities [replicated and refined from the Master\n   entries,\
    \ if and when they exist...] rather than alias entries. If a\n   NIC dislikes\
    \ the idea of users poring over the entries in the\n   affiliated organizations\
    \ - appropriate access control can be applied.\n   Though duplication is unavoidable,\
    \ the proposal attempts to make it\n   transparent, by delegating the responsibility\
    \ of maintaining the\n   integrity to the Directory.\n   This issue is discussed\
    \ in greater detail in a separate document [7].\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6. Authors' Addresses
  contents:
  - "6. Authors' Addresses\n   Thomas Johannsen\n   Dresden University of Technology\n\
    \   Institute of Communication Technology\n   D-01062 Dresden, GERMANY\n   Phone:\
    \ +49 351 463-4621\n   EMail: Thomas.Johannsen@ifn.et.tu-dresden.de\n   Glenn\
    \ Mansfield\n   AIC Systems Laboratory\n   6-6-3 Minami Yoshinari, Aoba-ku\n \
    \  Sendai 989-32, JAPAN\n   Phone: +81 22 279-3310\n   EMail: glenn@aic.co.jp\n\
    \   Mark Kosters\n   Network Solutions, Inc.\n   505 Huntmar Park Dr.\n   Herndon,\
    \ VA 22070\n   Phone: +1 703 742-4795\n   EMail: markk@internic.net\n   Srinivas\
    \ R. Sataluri\n   AT&T Bell Laboratories\n   Room 1C-429, 101 Crawfords Corner\
    \ Road\n   Holmdel, NJ 07733-3030\n   Phone: +1 908 949-7782\n   EMail: sri@qsun.att.com\n"
- title: References
  contents:
  - "References\n  [1]  Mansfield, G., Johannsen, T., and M. Knopper, \"Charting Networks\n\
    \       in the X.500 Directory\", RFC 1609, AIC Systems Laboratory,\n       Dresden\
    \ University, Merit Networks,Inc., March 1994.\n  [2]  Gerich, E., \"Guidelines\
    \ for Management of IP Address Space\", RFC\n       1466, Merit, May 1993.\n \
    \ [3]  Bates, T., Jouanigot, J.-M., Karrenberg, D., Lothberg, P., and M.\n   \
    \    Terpstra, \"Representation of IP Routing Policies in the RIPE\n       Database\"\
    , Document ripe-81, RIPE, February 1993.\n  [4]  Fuller, V., Li, T., Yu, J., and\
    \ K. Varadhan, \"Supernetting: An\n       Address Assignment and Aggregation Strategy\"\
    , RFC 1338, BARRNet,\n       cisco, MERIT, OARnet, June 1992.\n  [5]  Rose, M.,\
    \ and K. McCloghrie, \"Structure and Identification of\n       Management Information\
    \ for TCP/IP-based internets\", STD 16, RFC\n       1155, Performance Systems\
    \ International, Hughes LAN Systems, May\n       1990.\n  [6]  Barker, P., and\
    \ S. Kille, \"The COSINE and Internet X.500 Schema\",\n       RFC 1274, University\
    \ College London, November 1991.\n  [7]  Mansfield, G., Johannsen, T., and J.\
    \ Murai, J., \"Deployment\n       Strategy for the Directory in the Internet\"\
    , AIC Systems\n       Laboratory, Dresden University, Keio University, Work in\n\
    \       Progress, July 1993.\n"
- title: 'Appendix: OID tables'
  contents:
  - "Appendix: OID tables\n   This appendix lists object identifiers for object classes\
    \ and\n   attributes type defined in [1] and this document.\n   OIDs are given\
    \ in quipu-oidtable format to make it easy for people to\n   include them into\
    \ their pilots.\n   IMPORT from oidtable.gen:\n   iso:                       \
    \     1\n   identifiedOrganization:         iso.3\n   dod:                   \
    \         identifiedOrganization.6\n   internet:                       dod.1\n\
    \   experimental:                   internet.3\n   network-objects:          \
    \      experimental.53\n   -- localoidtable.gen\n   id-nw-oc:                \
    \       network-objects.1\n   id-nw-at:                       network-objects.2\n\
    \   id-nw-as:                       network-objects.3\n   ipStringSyntax:    \
    \             ip-nw-as.1\n   -- localoidtable.oc\n   # general class definitions\n\
    \   # Format is -\n   #               Object: OID: SubClassOf: MustHave: MayHave\n\
    \   CommunicationObject: id-nw-oc.1 : top : \\\n            : \\\n           \
    \ adminContact, technContact, description\n   PhysicalCommunicationObject: id-nw-oc.2\
    \ : CommunicationObject : \\\n           : \\\n           owner, localityName,\
    \ ICO\n   ImageCommunicationObject: id-nw-oc.3 : CommunicationObject : \\\n  \
    \         : \\\n           imageType, imageOf\n   # physical communication elements\n\
    \   network: id-nw-oc.4 : PhysicalCommunicationObject : \\\n           networkName\
    \ : \\\n           externalGateway, nwType, media, speed, traffic, \\\n      \
    \     configurationDate, configurationHistory\n   node: id-nw-oc.5 : PhysicalCommunicationObject\
    \ : \\\n           nodeName : \\\n           typeOfMachine, OS\n   networkInterface:\
    \ id-nw-oc.6 : PhysicalCommunicationObject : \\\n           networkInterfaceName\
    \ : \\\n           networkInterfaceAddress, connectedNetwork\n   # image communication\
    \ elements\n   networkImage: id-nw-oc.7 : ImageCommunicationObject : \\\n    \
    \       : \\\n           externalGateway, speed, traffic, charge\n   nodeImage:\
    \ id-nw-oc.8 : ImageCommunicationObject : \\\n           :\n   networkInterfaceImage:\
    \ id-nw-oc.9 : ImageCommunicationObject : \\\n           : \\\n           networkInterfaceAddress,\
    \ connectedNetwork\n   # IP image elements\n   ipNetworkImage: id-nw-oc.10 : networkImage\
    \ : \\\n           ipNetworkImageName, ipNwNumber, ipNwMask : \\\n           associatedDomain,\
    \ inAddrServer, asNumber, \\\n           provider, onlineDate\n   ipNodeImage:\
    \ id-nw-oc.11 : nodeImage : \\\n           ipNodeName : \\\n           protocol,\
    \ domainName\n   ipNetworkInterfaceImage: id-nw-oc.12 : networkInterfaceImage\
    \ : \\\n           ipNetworkInterfaceName : \\\n           ipNwMask\n   as: id-nw-oc.13\
    \ : ImageCommunicationObject : \\\n           asNumber : \\\n           asName,\
    \ asIn, asOut, asDefault, asGuardian, \\\n           lastModifiedDate\n   # number\
    \ assignement objects\n   assignedNumberClass: id-nw-oc.14 : top : \\\n      \
    \     : \\\n           assBy, assTo, assDate, nicHandle, relNwElement, \\\n  \
    \         description\n   delegatedBlock: id-nw-oc.15 : AssignedNumberClass :\
    \ \\\n           delegatedBlockName, lowerBound, upperBound :\n   ipGroup: id-nw-oc.16\
    \ : AssignedNumberClass : \\\n           ipGroupName, ipNwMask :\n   ipReference:\
    \ id-nw-oc.17 : AssignedNumberClass : \\\n           ipReferenceName :\n   asBlock:\
    \ id-nw-oc.18 : AssignedNumberClass : \\\n           asBlockName, asLowerBound,\
    \ asUpperBound :\n   asReference: id-nw-oc.19 : AssignedNumberClass : \\\n   \
    \        asNumber :\n   -- localoidtable.at\n   adminContact:                id-nw-at.1\
    \     :DN\n   technContact:                id-nw-at.2     :DN\n   ICO:       \
    \                  id-nw-at.3     :DN\n   imageType:                   id-nw-at.4\
    \     :caseIgnoreString\n   imageOf:                     id-nw-at.5     :DN\n\
    \   networkName,nw:              id-nw-at.6     :caseIgnoreString\n   externalGateway:\
    \             id-nw-at.7     :DN\n   nwType:                      id-nw-at.8 \
    \    :caseIgnoreString\n   media:                       id-nw-at.9     :caseIgnoreString\n\
    \   speed:                       id-nw-at.10    :numericString\n   traffic:  \
    \                   id-nw-at.11    :numericString\n   configurationDate:     \
    \      id-nw-at.12    :utcTime\n   configurationHistory:        id-nw-at.13  \
    \  :caseIgnoreString\n   nodeName,nd:                 id-nw-at.14    :caseIgnoreString\n\
    \   typeOfMachine:               id-nw-at.15    :caseIgnoreString\n   OS:    \
    \                      id-nw-at.16    :caseIgnoreString\n   networkInterfaceName,ni:\
    \     id-nw-at.17    :caseIgnoreString\n   networkInterfaceAddress:     id-nw-at.18\
    \    :caseIgnoreString\n   connectedNetwork:            id-nw-at.19    :DN\n \
    \  charge:                      id-nw-at.20    :numericString\n   ipNetworkImageName,IPnw:\
    \     id-nw-at.21    :caseIgnoreString\n   ipNwNumber:                  id-nw-at.22\
    \    :caseIgnoreString\n   ipNwMask:                    id-nw-at.23    :caseIgnoreString\n\
    \   inAddrServer:                id-nw-at.24    :DN\n   asNumber,asN:        \
    \        id-nw-at.25    :integerString\n   provider:                    id-nw-at.26\
    \    :DN\n   onlineDate:                  id-nw-at.27    :utcTime\n   ipNodeName,IPnd:\
    \             id-nw-at.28    :caseIgnoreString\n   protocol:                 \
    \   id-nw-at.29    :caseIgnoreString\n   domainName:                  id-nw-at.30\
    \    :caseIgnoreString\n   ipNetworkInterfaceName,IPni: id-nw-at.31    :caseIgnoreString\n\
    \   asName:                      id-nw-at.32    :caseIgnoreString\n   asIn:  \
    \                      id-nw-at.33    :caseIgnoreString\n   asOut:           \
    \            id-nw-at.34    :caseIgnoreString\n   asDefault:                 \
    \  id-nw-at.35    :caseIgnoreString\n   asGuardian:                  id-nw-at.36\
    \    :DN\n   assBy:                       id-nw-at.37    :DN\n   assTo:      \
    \                 id-nw-at.38    :DN\n   assDate:                     id-nw-at.39\
    \    :utcTime\n   nicHandle:                   id-nw-at.40    :caseIgnoreString\n\
    \   relNwElement:                id-nw-at.41    :DN\n   delegatedBlockName,dbl:\
    \      id-nw-at.42    :caseIgnoreString\n   lowerBound:                  id-nw-at.43\
    \    :caseIgnoreString\n   upperBound:                  id-nw-at.44    :caseIgnoreString\n\
    \   ipGroupName,IPgr:            id-nw-at.45    :caseIgnoreString\n   ipReferenceName,IPref:\
    \       id-nw-at.46    :caseIgnoreString\n   asBlockName,asBl:            id-nw-at.47\
    \    :caseIgnoreString\n   asLowerBound:                id-nw-at.48    :integerString\n\
    \   asUpperBound:                id-nw-at.49    :integerString\n"
