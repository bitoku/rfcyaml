- title: __initial_text__
  contents:
  - "                 Representation of IP Routing Policies\n                    \
    \     in a Routing Registry\n                              (ripe-81++)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \ This memo\n   does not specify an Internet standard of any kind. Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document was originally published as a RIPE document known\
    \ as\n   ripe-181 but is also being published as an Informational RFC to reach\n\
    \   a larger audience than its original scope. It has received community\n   wide\
    \ interest and acknowledgment throughout the Internet service\n   provider community\
    \ and will be used as the basic starting point for\n   future work on Internet\
    \ Routing Registries and routing policy\n   representation.  It can also be referred\
    \ to as ripe-81++.  This\n   document is an update to the original `ripe-81'[1]\
    \ proposal for\n   representing and storing routing polices within the RIPE database.\
    \ It\n   incorporates several extensions proposed by Merit Inc.[2] and gives\n\
    \   details of a generalized IP routing policy representation to be used\n   by\
    \ all Internet routing registries. It acts as both tutorial and\n   provides details\
    \ of database objects and attributes that use and make\n   up a routing registry.\n\
    \                           Table of Contents\n   1. Introduction ................................................\
    \    3\n   2. Organization of this Document ...............................  \
    \  3\n   3.  General Representation of Policy Information ...............    5\n\
    \   4. The Routing Registry and the RIPE Database ..................   11\n  \
    \ 5. The Route Object ............................................   16\n   6.\
    \ The Autonomous System Object ................................   26\n   7. AS\
    \ Macros ...................................................   36\n   8. The Community\
    \ Object ........................................   38\n   9. Representation of\
    \ Routing Policies ..........................   41\n   10. Future Extensions ..........................................\
    \   50\n   11. References .................................................  \
    \ 51\n   12. Security Considerations ....................................   52\n\
    \   13. Authors' Addresses .........................................   53\n  \
    \ Appendix A - Syntax for the \"aut-num\" object ...................   55\n  \
    \ Appendix B - Syntax for the \"community\" object .................   68\n  \
    \ Appendix C - Syntax for the \"as-macro\" object ..................   72\n  \
    \ Appendix D - Syntax for the \"route\" object .....................   76\n  \
    \ Appendix E - List of reserved words ............................   80\n   Appendix\
    \ F - Motivations for RIPE-81++ .........................   81\n   Appendix G\
    \ - Transition strategy ...............................   83\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is a much revised version of the RIPE routing\
    \ registry\n   document known as ripe-81 [1].  Since its inception in February,\
    \ 1993\n   and the establishment of the RIPE routing registry, several additions\n\
    \   and clarifications have come to light which can be better presented\n   in\
    \ a single updated document rather than separate addenda.\n   Some of the text\
    \ remains the same the as the original ripe-81\n   document keeping its tutorial\
    \ style mixed with details of the RIPE\n   database objects relating to routing\
    \ policy representation.  However\n   this document does not repeat the background\
    \ and historical remarks\n   in ripe-81. For these please refer to the original\
    \ document.  It\n   should be noted that whilst this document specifically references\
    \ the\n   RIPE database and the RIPE routing registry one can easily read\n  \
    \ \"Regional routing registry\" in place of RIPE as this representation\n   is\
    \ certainly general and flexible enough to be used outside of the\n   RIPE community\
    \ incorporating many ideas and features from other\n   routing registries in this\
    \ update.\n   This document was originally published as a RIPE document known\
    \ as\n   ripe-181 but is also being published as an Informational RFC to reach\n\
    \   a larger audience than its original scope. It has received large\n   interest\
    \ and acknowledgment within the Internet service provider\n   community and will\
    \ be used as the basic starting point for future\n   work on Internet Routing\
    \ Registries and routing policy\n   representation.  It but can also be referred\
    \ to as ripe-81++.\n   We would like to acknowledge many people for help with\
    \ this document.\n   Specifically, Peter Lothberg who was a co-author of the original\n\
    \   ripe-81 document for his many ideas as well as Gilles Farrache,\n   Harvard\
    \ Eidnes, Dale Johnson, Kannan Varadhan and Cengiz Alaettinoglu\n   who all provided\
    \ valuable input.  We would also like to thank the\n   RIPE routing working group\
    \ for their review and comment. Finally, we\n   like to thank Merit Inc. for many\
    \ constructive comments and ideas and\n   making the routing registry a worldwide\
    \ Internet service. We would\n   also like to acknowledge the funding provided\
    \ by the PRIDE project\n   run in conjunction with the RARE Technical Program,\
    \ RIPE and the RIPE\n   NCC without which this paper would not have been possible.\n"
- title: 2.  Organization of this Document
  contents:
  - "2.  Organization of this Document\n   This document acts as both a basic tutorial\
    \ for understanding routing\n   policy and provides details of objects and attributes\
    \ used within an\n   Internet routing registry to store routing policies. Section\
    \ 3\n   describes general issues about IP routing policies and their\n   representation\
    \ in routing registries. Experienced readers may wish to\n   skip this section.\
    \  Section 4 provides an overview of the RIPE\n   database, its basic concepts,\
    \ schema and objects which make up the\n   database itself.  It highlights the\
    \ way in which the RIPE database\n   splits routing information from allocation\
    \ information.  Sections 5,\n   6, 7 and 8 detail all the objects associated with\
    \ routing policy\n   representation.  Section 9 gives a fairly extensive \"walk\
    \ through\" of\n   how these objects are used for expressing routing policy and\
    \ the\n   general principles behind their use. Section 10 provides a list of\n\
    \   references used throughout this document.  Appendix A, B, C and D\n   document\
    \ the formal syntax for the database objects and attributes.\n   Appendix F details\
    \ the main changes from ripe-81 and motivations for\n   these changes. Appendix\
    \ G tackles the issues of transition from\n   ripe-81 to ripe-81++.\n"
- title: 3.  General Representation of Policy Information
  contents:
  - "3.  General Representation of Policy Information\n   Networks, Network Operators\
    \ and Autonomous Systems\n   Throughout this document an effort is made to be\
    \ consistent with\n   terms so as not to confuse the reader.\n   When we talk\
    \ about \"networks\" we mean physical networks which have a\n   unique classless\
    \ IP network number: Layer 3 entities. We do not mean\n   organizations.\n   We\
    \ call the organizations operating networks \"network operators\".\n   For the\
    \ sake of the examples we divide network operators into two\n   categories: \"\
    service providers\" and \"customers\". A \"service provider\"\n   is a network\
    \ operator who operates a network to provide Internet\n   services to different\
    \ organizations, its \"customers\".  The\n   distinction between service providers\
    \ and customers is not clear cut.\n   A national research networking organization\
    \ frequently acts as a\n   service provider to Universities and other academic\
    \ organizations,\n   but in most cases it buys international connectivity from\
    \ another\n   service provider. A University networking department is a customer\
    \ of\n   the research networking organization but in turn may regard\n   University\
    \ departments as its customers.\n   An Autonomous System (AS) is a group of IP\
    \ networks having a single\n   clearly defined routing policy which is run by\
    \ one or more network\n   operators. Inside ASes IP packets are routed using one\
    \ or more\n   Interior Routing Protocols (IGPs). In most cases interior routing\n\
    \   decisions are based on metrics derived from technical parameters like\n  \
    \ topology, link speeds and load.  The entity we refer to as an AS is\n   frequently\
    \ and more generally called a routing domain with the AS\n   just being an implementation\
    \ vehicle. We have decided to use the term\n   AS exclusively because it relates\
    \ more directly with the database\n   objects and routing tools. By using only\
    \ one term we hope to reduce\n   the number of concepts and to avoid confusion.\
    \ The academically\n   inclined reader may forgive us.\n   ASes exchange routing\
    \ information with other ASes using Exterior\n   Routing Protocols (EGPs).  Exterior\
    \ routing decisions are frequently\n   based on policy based rules rather than\
    \ purely on technical\n   parameters.  Tools are needed to configure complex policies\
    \ and to\n   communicate those policies between ASes while still ensuring proper\n\
    \   operation of the Internet as a whole. Some EGPs like BGP-3 [8] and\n   BGP-4\
    \ [9] provide tools to filter routing information according to\n   policy rules\
    \ and more. None of them provides a mechanism to publish\n   or communicate the\
    \ policies themselves. Yet this is critical for\n   operational coordination and\
    \ fault isolation among network operators\n   and thus for the operation of the\
    \ global Internet as a whole.  This\n   document describes a \"Routing Registry\"\
    \ providing this functionality.\n   Routing Policies\n   The exchange of routing\
    \ information between ASes is subject to\n   routing policies. Consider the case\
    \ of two ASes, X and Y exchanging\n   routing information:\n                NET1\
    \ ......  ASX  <--->  ASY  ....... NET2\n   ASX knows how to reach a network called\
    \ NET1.  It does not matter\n   whether NET1 is belonging to ASX or some other\
    \ AS which exchanges\n   routing information with ASX either directly or indirectly;\
    \ we just\n   assume that ASX knows how to direct packets towards NET1. Likewise\n\
    \   ASY knows how to reach NET2.\n   In order for traffic from NET2 to NET1 to\
    \ flow between ASX and ASY,\n   ASX has to announce NET1 to ASY using an external\
    \ routing protocol.\n   This states that ASX is willing to accept traffic directed\
    \ to NET1\n   from ASY. Policy thus comes into play first in the decision of ASX\
    \ to\n   announce NET1 to ASY.\n   In addition ASY has to accept this routing\
    \ information and use it.\n   It is ASY's privilege to either use or disregard\
    \ the information that\n   ASX is willing to accept traffic for NET1. ASY might\
    \ decide not to\n   use this information if it does not want to send traffic to\
    \ NET1 at\n   all or if it considers another route more appropriate to reach NET1.\n\
    \   So in order for traffic in the direction of NET1 to flow between ASX\n   and\
    \ ASY, ASX must announce it to ASY and ASY must accept it from ASX:\n        \
    \            resulting packet flow towards NET1\n                  <<===================================\n\
    \                                    |\n                                    |\n\
    \                     announce NET1  |  accept NET1\n                    -------------->\
    \ + ------------->\n                                    |\n                  \
    \      AS X        |    AS Y\n                                    |\n        \
    \             <------------- + <--------------\n                       accept\
    \ NET2  |  announce NET2\n                                    |\n            \
    \                        |\n                   resulting packet flow towards NET2\n\
    \                   ===================================>>\n   Ideally, and seldom\
    \ practically, the announcement and acceptance\n   policies of ASX and ASY are\
    \ identical.\n   In order for traffic towards NET2 to flow, announcement and\n\
    \   acceptance of NET2 must be in place the other way round. For almost\n   all\
    \ applications connectivity in just one direction is not useful at\n   all.\n\
    \   Usually policies are not configured for each network separately but\n   for\
    \ groups of networks.  In practise these groups are almost always\n   defined\
    \ by the networks forming one or more ASes.\n   Routing Policy limitations\n \
    \  It is important to realize that with current destination based\n   forwarding\
    \ technology routing policies must eventually be expressed\n   in these terms.\
    \ It is relatively easy to formulate reasonable\n   policies in very general terms\
    \ which CANNOT be expressed in terms of\n   announcing and accepting networks.\
    \ With current technology such\n   policies are almost always impossible to implement.\n\
    \   The generic example of a reasonable but un-implementable routing is a\n  \
    \ split of already joined packet streams based on something other than\n   destination\
    \ address.  Once traffic for the same destination network\n   passes the same\
    \ router, or the same AS at our level of abstraction,\n   it will take exactly\
    \ the same route to the destination (disregarding\n   special cases like \"type\
    \ of service\" routing, load sharing and\n   routing instabilities).\n   In a\
    \ concrete example AS Z might be connected to the outside world by\n   two links.\
    \  AS Z wishes to reserve these links for different kinds of\n   traffic, let's\
    \ call them black and white traffic.  For this purpose\n   the management of AS\
    \ Z keeps two lists of ASes, the black and the\n   white list.  Together these\
    \ lists comprise all ASes in the world\n   reachable from AS Z.\n            \
    \                \"W\"\n                           <--->\n                   \
    \    ...           AS Z .... NET 3\n                           <--->\n       \
    \                     \"B\"\n   It is quite possible to implement the policy for\
    \ traffic originating\n   in AS Z: AS Z will only accept announcements for networks\
    \ in white\n   ASes on the white link and will only accept announcements for\n\
    \   networks in black ASes on the black link.  This causes traffic from\n   networks\
    \ within AS Z towards white ASes to use the white link and\n   likewise traffic\
    \ for black ASes to use the black link.\n   Note that this way of implementing\
    \ things makes it necessary to\n   decide on the colour of each new AS which appears\
    \ before traffic can\n   be sent to it from AS Z.  A way around this would be\
    \ to accept only\n   white announcements via the white link and to accept all\
    \ but white\n   announcements on the black link.  That way traffic from new ASes\n\
    \   would automatically be sent down the black link and AS Z management\n   would\
    \ only need to keep the list of white ASes rather than two lists.\n   Now for\
    \ the unimplementable part of the policy.  This concerns\n   traffic towards AS\
    \ Z.  Consider the following topology:\n           B AS ---)                 \
    \   \"W\"\n           W AS ---)                    --->\n           B AS ---)>>\
    \  AS A  ---> ...           AS Z .... NET 3\n           B AS ---)            \
    \        --->\n           W AS ---)                    \"B\"\n   As seen from\
    \ AS Z there are both black and white ASes \"behind\" AS A.\n   Since ASes can\
    \ make routing decisions based on destination only, AS A\n   and all ASes between\
    \ AS A and the two links connecting AS Z can only\n   make the same decision for\
    \ traffic directed at a network in AS Z, say\n   NET 3.  This means that traffic\
    \ from both black and white ASes\n   towards NET 3 will follow the same route\
    \ once it passes through AS A.\n   This will either be the black or the white\
    \ route depending on the\n   routing policies of AS A and all ASes between it\
    \ and AS Z.\n   The important thing to note is that unless routing and forwarding\n\
    \   decisions can be made based on both source and destination addresses,\n  \
    \ policies like the \"black and white\" example cannot be implemented in\n   general\
    \ because \"once joined means joined forever\".\n   Access Policies\n   Access\
    \ policies contrary to routing policies are not necessarily\n   defined in terms\
    \ of ASes. The very simplest type of access policy is\n   to block packets from\
    \ a specific network S from being forwarded to\n   another network D. A common\
    \ example is when some inappropriate use of\n   resources on network D has been\
    \ made from network S and the problem\n   has not been resolved yet. Other examples\
    \ of access policies might be\n   resources only accessible to networks belonging\
    \ to a particular\n   disciplinary group or community of interest.  While most\
    \ of these\n   policies are better implemented at the host or application level,\n\
    \   network level access policies do exist and are a source of\n   connectivity\
    \ problems which are sometimes hard to diagnose. Therefore\n   they should also\
    \ be documented in the routing registry according to\n   similar requirements\
    \ as outlined above.\n   Routing vs. Allocation information\n   The RIPE database\
    \ contains both routing registry and address space\n   allocation registry information.\
    \ In the past the database schema\n   combined this information. Because RIPE\
    \ was tasked with running both\n   an allocation and routing registry it seemed\
    \ natural to initially\n   combine these functions.  However, experience has shown\
    \ that a clear\n   separation of routing information from allocation is desirable.\
    \ Often\n   the maintainer of the routing information is not the same as the\n\
    \   maintainer of the allocation information.  Moreover, in other parts\n   of\
    \ the world there are different registries for each kind of\n   information.\n\
    \   Whilst the actual routing policy objects will be introduced in the\n   next\
    \ section it is worthy of note that a transition from the current\n   objects\
    \ will be required. Appendix G details the basic steps of such\n   a transition.\n\
    \   This split in information represents a significant change in the\n   representational\
    \ model of the RIPE database. Appendix F expands on\n   the reasons for this a\
    \ little more.\n   Tools\n   The network operators will need a series of tools\
    \ for policy routing.\n   Some tools are already available to perform some of\
    \ the tasks. Most\n   notably, the PRIDE tools [3] from the PRIDE project started\
    \ in\n   September 1993 as well as others produced by Merit Inc [4] and CERN\n\
    \   [5].\n   These tools will enable them to use the routing policy stored in\
    \ the\n   RIPE routing registry to perform such tasks as check actual routing\n\
    \   against policies defined, ensure consistency of policies set by\n   different\
    \ operators, and simulate the effects of policy changes.\n   Work continues on\
    \ producing more useful tools to service the Internet\n   community.\n"
- title: 4.  The Routing Registry and the RIPE Database
  contents:
  - "4.  The Routing Registry and the RIPE Database\n   One of the activities of RIPE\
    \ is to maintain a  database  of European\n   IP networks, DNS domains and their\
    \ contact persons along with various\n   other kinds of network management information.\
    \ The database content\n   is public and can be queried using the whois protocol\
    \ as well as\n   retrieved as a whole.  This supports NICs/NOCs all over Europe\
    \  and\n   beyond  to  perform their respective tasks.\n   The RIPE database combines\
    \ both allocation registry and routing\n   registry functions.  The RIPE allocation\
    \ registry contains data about\n   address space allocated to specific enterprises\
    \ and/or delegated to\n   local registries as well as data about the domain name\
    \ space. The\n   allocation registry is described in separate documents [6,7]\
    \ and\n   outside the scope of this document.\n   Database Objects\n   Each object\
    \ in the database describes a single entity in the real\n   world.  This  basic\
    \  principle  means that information about  that\n   entity  should  only  be\
    \  represented  in   the corresponding\n   database  object and not be repeated\
    \ in other objects.  The whois\n   service can automatically display referenced\
    \ objects where\n   appropriate.\n   The types of objects stored in the RIPE database\
    \ are summarized in\n   the table below:\n   R   Object      Describes       \
    \                 References\n   ____________________________________________________________________\n\
    \   B   person      contact persons\n   A   inetnum     IP address space     \
    \            person\n   A   domain      DNS domain                       person\n\
    \   R   aut-num     autonomous system                person\n                \
    \                                    (aut-num,community)\n   R   as-macro    a\
    \ group of autonomous systems    person, aut-num\n   R   community   community\
    \                        person\n   R   route       a route being announced  \
    \        aut-num, community\n   R   clns        CLNS address space and routing\
    \   person\n   The first column indicates whether the object is part of the\n\
    \   allocation registry (A), the routing registry (R) or both (B).  The\n   last\
    \ column indicates the types of objects referenced by the\n   particular type\
    \ of object.  It can be seen that almost all objects\n   reference contact persons.\n\
    \   Objects are described by attributes  value  pairs,  one  per line.\n   Objects\
    \  are  separated by empty lines. An attribute that consists of\n   multiple lines\
    \ should  have  the  attribute name  repeated on\n   consecutive lines.  The information\
    \ stored about network 192.87.45.0\n   consists  of  three  objects,  one inetnum\
    \ object and two person\n   objects and looks like this:\n   inetnum:   192.87.45.0\n\
    \   netname:   RIPE-NCC\n   descr:     RIPE Network Coordination Centre\n   descr:\
    \     Amsterdam, Netherlands\n   country:   NL\n   admin-c:   Daniel Karrenberg\n\
    \   tech-c:    Marten Terpstra\n   rev-srv:   ns.ripe.net\n   rev-srv:   ns.eu.net\n\
    \   notify:    ops@ripe.net\n   changed:   tony@ripe.net 940110\n   source:  \
    \  RIPE\n   person:    Daniel Karrenberg\n   address:   RIPE Network Coordination\
    \ Centre (NCC)\n   address:   Kruislaan 409\n   address:   NL-1098 SJ Amsterdam\n\
    \   address:   Netherlands\n   phone:     +31 20 592 5065\n   fax-no:    +31 20\
    \ 592 5090\n   e-mail:    dfk@ripe.net\n   nic-hdl:   DK58\n   changed:   ripe-dbm@ripe.net\
    \ 920826\n   source:    RIPE\n   person:    Marten Terpstra\n   address:   RIPE\
    \ Network Coordination Centre (NCC)\n   address:   PRIDE Project\n   address:\
    \   Kruislaan 409\n   address:   NL-1098 SJ Amsterdam\n   address:   Netherlands\n\
    \   phone:     +31 20 592 5064\n   fax-no:    +31 20 592 5090\n   e-mail:    Marten.Terpstra@ripe.net\n\
    \   nic-hdl:   MT2\n   notify:    marten@ripe.net\n   changed:   marten@ripe.net\
    \ 931230\n   source:    RIPE\n   Objects are stored and retrieved in this tag/value\
    \ format.  The RIPE\n   NCC does not provide differently formatted reports because\
    \ any\n   desired format can easily be produced from this generic one.\n   Routing\
    \ Registry Objects\n   The main objects comprising the routing registry are \"\
    aut-num\" and\n   \"route\", describing an autonomous system and a route respectively.\
    \ It\n   should be noted that routes not described in the routing registry\n \
    \  should never be routed in the Internet itself.\n   The autonomous system (aut-num)\
    \ object provides contact information\n   for the AS and describes the routing\
    \ policy of that AS.  The routing\n   policy is described by enumerating all neighboring\
    \ ASes with which\n   routing information is exchanged.  For each neighbor the\
    \ routing\n   policy is described in terms of exactly what is being sent\n   (announced)\
    \ and allowed in (accepted).  It is important to note that\n   this is exactly\
    \ the part of the global policy over which an AS has\n   direct control. Thus\
    \ each aut-num object describes what can indeed be\n   implemented and enforced\
    \ locally by the AS concerned.  Combined\n   together all the aut-num objects\
    \ provide the global routing graph and\n   permit to deduce the exact routing\
    \ policy between any two ASes.\n   While the aut-num objects describe how routing\
    \ information is\n   propagated, the route object describes a single route injected\
    \ into\n   the external routing mesh. The route object references the AS\n   injecting\
    \ (originating) the route and thereby indirectly provides\n   contact information\
    \ for the originating AS. This reference also\n   provides the primary way of\
    \ grouping routes into larger collections.\n   This is necessary because describing\
    \ routing policy on the level of\n   single routes would be awkward to impractical\
    \ given the number of\n   routes in the Internet which is about 20,000 at the\
    \ time of this\n   writing.  Thus routing policy is most often defined for groups\
    \ of\n   routes by originating AS.  This method of grouping is well supported\n\
    \   by current exterior routing protocols.  The route object also\n   references\
    \ community objects described below to provide another\n   method of grouping\
    \ routes.  Modification of aut-num object itself and\n   the referencing by route\
    \ objects is strictly protected to provide\n   network operators control over\
    \ the routing policy description and the\n   routes originated by their ASes.\n\
    \   Sometimes even keeping track of groups of routes at the AS level is\n   cumbersome.\
    \ Consider the case of policies described at the transit\n   provider level which\
    \ apply transitively to all customers of the\n   transit provider. Therefore another\
    \ level of grouping is provided by\n   the as-macro object which provides groups\
    \ of ASes which can be\n   referenced in routing policies just like single ASes.\
    \ Membership of\n   as-macro groups is also strictly controlled.\n   Sometimes\
    \ there is a need to group routes on different criteria than\n   ASes for purposes\
    \ like statistics or local access policies. This is\n   provided by the community\
    \ object.  A community object is much like an\n   AS but without a routing policy.\
    \  It just describes a group of\n   routes. This is not supported at all by exterior\
    \ routing protocols\n   and depending on aggregation of routes may not be generally\
    \ usable to\n   define routing policies.  It is suitable for local policies and\
    \ non-\n   routing related purposes.\n   These routing related objects will be\
    \ described in detail in the\n   sections below.\n"
- title: 5.  The Route Object
  contents:
  - "5.  The Route Object\n   As stated in the previous chapter routing and address\
    \ space\n   allocation information are now clearly separated.  This is performed\n\
    \   with the introduction of the route object. The route object will\n   contain\
    \ all the information regarding a routing announcement.\n   All routing related\
    \ attributes are removed from the inetnum object.\n   Some old attributes are\
    \ obsoleted: connect, routpr-l, bdryg-l, nsf-\n   in, nsf-out, gateway).  The\
    \ currently useful routing attributes are\n   moved to the route object: aut-sys\
    \ becomes origin, ias-int will be\n   encoded as part of the inet-rtr [15] object\
    \ and comm-list simply\n   moves.  See [6] for detail of the \"inetnum\" object\
    \ definition.\n   The information in the old inetnum object\n   inetnum:   192.87.45.0\n\
    \   netname:   RIPE-NCC\n   descr:     RIPE Network Coordination Centre\n   descr:\
    \     Amsterdam, Netherlands\n   country:   NL\n   admin-c:   Daniel Karrenberg\n\
    \   tech-c:    Marten Terpstra\n   connect:   RIPE NSF WCW\n   aut-sys:   AS3333\n\
    \   comm-list: SURFNET\n   ias-int:   192.87.45.80  AS1104\n   ias-int:   192.87.45.6\
    \   AS2122\n   ias-int:   192.87.45.254 AS2600\n   rev-srv:   ns.ripe.net\n  \
    \ rev-srv:   ns.eu.net\n   notify:    ops@ripe.net\n   changed:   tony@ripe.net\
    \ 940110\n   source:    RIPE\n   will be distributed over two objects:\n   inetnum:\
    \   192.87.45.0\n   netname:   RIPE-NCC\n   descr:     RIPE Network Coordination\
    \ Centre\n   descr:     Amsterdam, Netherlands\n   country:   NL\n   admin-c:\
    \   Daniel Karrenberg\n   tech-c:    Marten Terpstra\n   rev-srv:   ns.ripe.net\n\
    \   rev-srv:   ns.eu.net\n   notify:    ops@ripe.net\n   changed:   tony@ripe.net\
    \ 940110\n   source:    RIPE\n   route:       192.87.45.0/24\n   descr:      \
    \ RIPE Network Coordination Centre\n   origin:      AS3333\n   comm-list:   SURFNET\n\
    \   changed:     dfk@ripe.net 940427\n   source:      RIPE\n   The route object\
    \ is used to represent a single route originated into\n   the Internet routing\
    \ mesh.  The actual syntax is given in Appendix D.\n   However, there are several\
    \ important aspects of the attributes worthy\n   of note.\n   The value of the\
    \ route attribute will be a classless address.  It\n   represents the exact route\
    \ being injected into the routing mesh.  The\n   representation of classless addresses\
    \ is described in [10].\n   The value of the origin attribute will be an AS reference\
    \ of the form\n   AS1234 referring to an aut-num object.  It represents the AS\n\
    \   injecting this route into the routing mesh.  The \"aut-num\" object\n   (see\
    \ below) thus referenced provides all the contact information for\n   this route.\n\
    \   Special cases: There can only be a single originating AS in each\n   route\
    \ object.  However in todays Internet sometimes a route is\n   injected by more\
    \ than one AS. This situation is potentially dangerous\n   as it can create conflicting\
    \ routing policies for that route and\n   requires coordination between the originating\
    \ ASes.  In the routing\n   registry this is represented by multiple route objects.\n\
    \   This is a departure from the one route (net), one AS principle of the\n  \
    \ ripe-81 routing registry. The consequences for the different tools\n   based\
    \ in the routing registry will need to be evaluated and possibly\n   additional\
    \ consistency checking of the database is needed.\n   The examples below will\
    \ illustrate the usage of the route object\n   further.  Suppose three chunks\
    \ of address space of 2 different\n   enterprises represented by the following\
    \ inetnum objects:\n   Examples\n   inetnum:   193.0.1.0\n   netname:   ENT-1\n\
    \   descr:     Enterprise 1\n    ...\n   inetnum:   193.0.8.0\n   netname:   ENT-2\n\
    \   descr:     Enterprise 2\n    ...\n   inetnum:   193.0.9.0\n   netname:   ENT-2-SPEC\n\
    \   descr:     Enterprise 2\n    ...\n   Supposing that the Enterprises have their\
    \ own AS numbers straight\n   application of routing without aggregation would\
    \ yield:\n   route:       193.0.1.0/24\n   descr:       Enterprise 1\n   origin:\
    \      AS1\n    ...\n   route:       193.0.8.0/24\n   descr:       Enterprise\
    \ 2\n   origin:      AS2\n    ...\n   route:       193.0.9.0/24\n   descr:   \
    \    Enterprise 2\n   origin:      AS2\n    ...\n   NB: This representation can\
    \ be achieved by straight translation from\n   the ripe-81 representation. See\
    \ Appendix G for more details.\n   Homogeneous Aggregation\n   The two chunks\
    \ of address space of Enterprise 2 can be represented by\n   one aggregate route\
    \ turning two route objects into one and\n   potentially saving routing table\
    \ space for one route.\n   route:       193.0.8.0/23\n   descr:       Enterprise\
    \ 2\n   origin:      AS2\n    ...\n   Note that AS2 can also decide to originate\
    \ all routes mentioned so\n   far, two 24-bit prefixes and one 23-bit prefix.\
    \ This case would be\n   represented by storing all three route objects in the\
    \ database. In\n   this particular example the additional routes will not add\
    \ any\n   functionality however and only increase the amount of routes\n   announced\
    \ unnecessarily.\n   Heterogeneous Aggregation\n   Consider the following case\
    \ however:\n   route:       193.0.8.0/24\n   descr:       Enterprise 2\n   origin:\
    \      AS2\n    ...\n   route:       193.0.9.0/24\n   descr:       Enterprise\
    \ 2 / Special\n   origin:      AS2\n   comm-list:   SPECIAL\n    ...\n   Now the\
    \ prefix 193.0.9.0/24 belongs to community SPECIAL (this\n   community may well\
    \ not be relevant to routing) and the other prefix\n   originated by AS2 does\
    \ not. If AS2 aggregates these prefixes into the\n   193.0.8.0/23 prefix, routing\
    \ policies based on the community value\n   SPECIAL cannot be implemented in general,\
    \ because there is no way to\n   distinguish between the special and the not-so-special\
    \ parts of AS2.\n   If another AS has the policy to accept only routes to members\
    \ of\n   community SPECIAL it cannot implement it, because accepting the route\n\
    \   to 193.0.8.0/23 would also route to 193.0.8.0/24 and not accepting\n   this\
    \ route would lose connectivity to the special part 193.0.9.0/24.\n   We call\
    \ aggregate routes consisting of components belonging to\n   different communities\
    \ or even different ASes \"heterogeneous\n   aggregates\".\n   The major problem\
    \ introduced with heterogeneous aggregates is that\n   once the homogeneous more\
    \ specific routes are withdrawn one cannot\n   tell if a more specific part of\
    \ the heterogeneous route has a\n   different policy. However, it can be counter\
    \ argued that knowing this\n   policy is of little use since a routing policy\
    \ based on the less\n   specific heterogeneous aggregate only cannot be implemented.\
    \ In fact,\n   this displays a facet of CIDR itself in that one may actually trade\n\
    \   off implementing slight policy variations over announcing a larger\n   (albeit\
    \ heterogeneous in terms of policy) aggregate to save routing\n   table space.\n\
    \   However, it is still useful to be able to document these variations\n   in\
    \ policy especially when this homogeneous more specific route is\n   just being\
    \ withdrawn. For this one can use the \"withdrawn\" attribute.\n   The withdrawn\
    \ attribute can serve to both indicate that a less\n   specific aggregate is in\
    \ fact heterogeneous and also allow the\n   general documenting of route withdrawal.\n\
    \   So there has to be a way for AS2 to document this even if it does not\n  \
    \ originate the route to 193.0.9.0/24 any more.  This can be done with\n   the\
    \ \"withdrawn\" attribute of the route object.  The aggregate route\n   to 193.0.8.0/23\
    \ is now be registered as:\n   route:       193.0.8.0/23\n   descr:       Enterprise\
    \ 2\n   origin:      AS2\n    ...\n   With the two homogeneous routes marked as\
    \ withdrawn from the Internet\n   routing mesh but still preserving their original\
    \ routing information.\n   route:       193.0.8.0/24\n   descr:       Enterprise\
    \ 2\n   origin:      AS2\n   withdrawn:   940701\n    ...\n   route:       193.0.9.0/24\n\
    \   descr:       Enterprise 2 / Special\n   origin:      AS2\n   comm-list:  \
    \ SPECIAL\n   withdrawn:   940701\n    ...\n   It should be noted that the date\
    \ value used in the withdrawn\n   attribute can only be in the past.\n   Proxy\
    \ Aggregation\n   The next step of aggregation are aggregates consisting of more\
    \ than\n   one AS. This generally means one AS is aggregating on behalf of\n \
    \  another. It is called proxy aggregation. Proxy aggregation should be\n   done\
    \ with great care and always be coordinated with other providers\n   announcing\
    \ the same route.\n   Consider the following:\n   route:       193.0.0.0/20\n\
    \   descr:       All routes known by AS1 in a single package\n   origin:     \
    \ AS1\n    ...\n   route:       193.0.1.0/24\n   descr:       Foo\n   origin:\
    \      AS1\n   withdrawn:   940310\n    ...\n   route:       193.0.8.0/24\n  \
    \ descr:       Bar\n   origin:      AS2\n   withdrawn:   940310\n    ...\n   route:\
    \       193.0.9.0/24\n   descr:       Bar-2\n   origin:      AS2\n   withdrawn:\
    \   940310\n   comm-list:   SPECIAL\n    ...\n   If AS1 announced no other routes\
    \ to a single homed neighboring AS,\n   that neighbor can in general either take\
    \ that route or leave it but\n   not differentiate between AS1 and AS2.\n   Note:\
    \ If the neighbor was previously configured to accept routes\n   originating in\
    \ AS2 but not in AS1 they lose connectivity to AS2 as\n   well.  This means that\
    \ proxy aggregation has to be done carefully and\n   in a well coordinated fashion.\
    \ The information in the withdrawn route\n   object can help to achieve that.\n\
    \   Aggregates with Holes\n   If we assume that the world of our example still\
    \ consists of only\n   three chunks of address space the aggregate above contains\
    \ what are\n   called holes, parts of an aggregate that are not reachable via\
    \ the\n   originator of the route.  From the routing information itself one\n\
    \   cannot tell whether these are holes and what part of the route falls\n   inside\
    \ one.  The only way to tell is to send a packet there and see\n   whether it\
    \ gets to the destination, or an ICMP message is received\n   back, or there is\
    \ silence.  On the other hand announcing aggregates\n   with holes is quite legitimate.\
    \  Consider a 16-bit aggregate with\n   only one 24-bit prefix unreachable.  The\
    \ savings in routing table\n   size by far outweigh the hole problem.\n   For\
    \ operational reasons however it is very useful to register these\n   holes in\
    \ the routing registry. Consider the case where a remote\n   network operator\
    \ experiences connectivity problems to addresses\n   inside an aggregate route.\
    \  If the packets are getting to the AS\n   announcing the aggregate and there\
    \ are no more specific routes, the\n   normal cause of action is to get in touch\
    \ with the originating AS of\n   the aggregate route and ask them to fix the problem.\
    \ If the address\n   falls into a hole this is futile. Therefore problem diagnosis\
    \ can be\n   sped up and unnecessary calls prevented by registering the holes\
    \ in\n   the routing registry. We do this by using the \"hole\" attribute. In\n\
    \   our example the representation would be:\n   route:       193.0.0.0/20\n \
    \  descr:       All routes known by AS1\n   origin:      AS1\n   hole:       \
    \ 193.0.0.0/24\n   hole:        193.0.2.0/23\n   hole:        193.0.4.0/22\n \
    \  hole:        193.0.10.0/23\n   hole:        193.0.12.0/22\n    ...\n   Note:\
    \ there would also be two routes with the withdrawn attribute as\n   displayed\
    \ above (i.e. 193.0.8.0/24 and 193.0.9.0/24).  It is not\n   mandatory to document\
    \ all holes. It is recommended all holes routed\n   by another service provider\
    \ are documented.\n   Multiple Proxy Aggregation\n   Finally suppose that AS2\
    \ decides to announce the same aggregate, as\n   in the previous example, they\
    \ would add the following route object to\n   the registry:\n   route:       193.0.0.0/20\n\
    \   descr:       All routes known by AS2\n   origin:      AS2\n   hole:      \
    \  193.0.0.0/24\n   hole:        193.0.2.0/23\n   hole:        193.0.4.0/22\n\
    \   hole:        193.0.10.0/23\n   hole:        193.0.12.0/22\n    ...\n   Both\
    \ AS1 and AS2 will be notified that there already is a route to\n   the same prefix\
    \ in the registry.\n   This multiple proxy aggregation is very dangerous to do\
    \ if the sub-\n   aggregates of the route are not the same. It is still dangerous\
    \ when\n   the sub-aggregates are consistent but connectivity to the sub-\n  \
    \ aggregates varies widely between the originators.\n   Route object update procedures\n\
    \   Adding a route object will have to be authorised by the maintainer of\n  \
    \ the originating AS. The actual implementation of this is outside the\n   scope\
    \ of this document.  This guarantees that an AS guardian has full\n   control\
    \ over the registration of the routes it announces [11].\n   What is an Inter-AS\
    \ network ?\n   An inter-AS network (Inter-AS IP networks are those networks are\n\
    \   currently called FIXes, IXFs, DMZs, NAPs, GIX and many other\n   acronyms)\
    \ exists for the purpose of passing traffic and routing\n   information between\
    \ different autonomous systems.  The most simple\n   example of an inter-AS network\
    \ is a point-to-point link, connecting\n   exactly two ASes.  Each end of such\
    \ a link is connected to an\n   interface of router belonging to each of the autonomous\
    \ systems.\n   More complex examples are broadcast type networks with multiple\n\
    \   interfaces connecting multiple ASes with the possibility of more than\n  \
    \ one connection per AS.  Consider the following example of three\n   routers\
    \ 1, 2 and 3 with interfaces a through f  connected by two\n   inter-AS networks\
    \ X and Y:\n                              X              Y\n                 \
    \    a1b     ---    c2d     ---    e3f\n   Suppose that network X is registered\
    \ in the routing registry as  part\n   of AS1 and net Y as part of AS3. If traffic\
    \ passes from left to right\n   prtraceroute will report the following  sequence\
    \  of  interfaces  and\n   ASes:\n           a in AS1\n           c in AS1\n \
    \          e in AS3\n   The traceroute algorithm enumerates only the receiving\
    \ interfaces on\n   the way to the destination.  In the example this leads to\
    \ the passage\n   of AS2 going unnoticed.  This is confusing to the user and will\
    \ also\n   generate exceptions when the path found is checked against the\n  \
    \ routing registry.\n   For operational monitoring tools such as prtraceroute\
    \ it is necessary\n   to know which interface on an inter-AS network belongs to\
    \ which AS.\n   If AS information is not known about interfaces on an inter-AS\n\
    \   network, tools like prtraceroute cannot determine correctly which\n   ASes\
    \ are being traversed.\n   All interfaces on inter-AS networks will are described\
    \ in a separate\n   object know as the `inet-rtr' object [15].\n"
- title: 6.  The Autonomous System Object
  contents:
  - "6.  The Autonomous System Object\n   Autonomous Systems\n   An Autonomous System\
    \ (AS) is a group of IP networks operated by one\n   or more network operators\
    \ which has a single and clearly defined\n   external routing policy.\n   An AS\
    \ has a unique number associated with it which is used both in\n   exchange of\
    \ exterior routing information and as an identifier of the\n   AS itself.  Exterior\
    \ routing protocols such as BGP and EGP are used\n   to exchange routing information\
    \ between ASes.\n   In routing terms an AS will normally use one or more interior\
    \ gateway\n   protocols (IGPs) in conjunction with some sort of common agreed\n\
    \   metrics when exchanging network information within its own AS.\n   The term\
    \ AS is often confused or even misused as a convenient way of\n   grouping together\
    \ a set of networks which belong under the same\n   administrative umbrella even\
    \ if within that group of networks there\n   are various different routing policies.\
    \  We provide the \"community\"\n   concept for such use.  ASes can strictly have\
    \ only one single\n   external routing policy.\n   The creation of an AS should\
    \ be done in a conscious and well\n   coordinated manner to avoid creating ASes\
    \ for the sake of it, perhaps\n   resulting in the worst case scenario of one\
    \ AS per routing\n   announcement.  It should be noted that there is a limited\
    \ number of\n   AS numbers available. Also creating an AS may well increase the\n\
    \   number of AS paths modern EGPs will have to keep track of. This\n   aggravates\
    \ what is known as \"the routing table growth problem\".  This\n   may mean that\
    \ by applying the general rules for the creation and\n   allocation of an AS below,\
    \ some re-engineering may well be needed.\n   However, this may be the only way\
    \ to actually implement the desired\n   routing policy anyway.  The creation and\
    \ allocation of an AS should\n   be done with the following recommendations in\
    \ mind:\n    +   Creation of an AS is only required when exchanging routing\n\
    \        information with other ASes.  Some router implementations make\n    \
    \    use of an AS number as a form of tagging to identify the routing\n      \
    \  process.  However, it should be noted that this tag does not\n        need\
    \ to be unique unless routing information is indeed exchanged\n        with other\
    \ ASes.\n    +   For a simple case of customer networks connected to a single\n\
    \        service provider, the IP network should normally be a member of\n   \
    \     the service providers AS. In terms of routing policy the IP\n        network\
    \ has exactly the same policy as the service provider and\n        there is no\
    \ need to make any distinction in routing information.\n        This idea may\
    \ at first seem slightly alien to some, but it\n        highlights the clear distinction\
    \ in the use of the AS number as\n        a representation of routing policy as\
    \ opposed to some form of\n        administrative use.\n    +   If a network operator\
    \ connects to more than one AS with\n        different routing policies then they\
    \ need to create their own\n        AS.  In the case of multi-homed customer networks\
    \ connected to\n        two service providers there are at least two different\
    \ routing\n        policies to a given customer network.  At this point the\n\
    \        customer networks will be part of a single AS and this AS would\n   \
    \     be distinct from either of the service providers ASes.  This\n        allows\
    \ the customer the ability of having a different\n        representation of policy\
    \ and preference to the different service\n        providers.  This is the ONLY\
    \ case where a network operator\n        should create its own AS number.\n  \
    \  +   As a general rule one should always try to populate the AS with\n     \
    \   as many routes as possible, providing all routes conform to the\n        same\
    \ routing policy.\n   Each AS is represented in the RIPE database by both an aut-num\
    \ object\n   and the route objects representing the routes originated by the AS.\n\
    \   The aut-num object stores descriptive, administrative and contact\n   information\
    \ about the AS as well as the routing policies of the AS in\n   relation to all\
    \ neighboring ASes.\n   The origin attributes of the route  objects define the\
    \ set of routes\n   originated by the AS. Each route object can have exactly one\
    \ origin\n   attribute.  Route objects can only be created and updated by the\n\
    \   maintainer of the AS and not by those immediately responsible for the\n  \
    \ particular routes referenced therein.  This ensures that operators,\n   especially\
    \ service providers, remain in control of AS routing\n   announcements.\n   The\
    \ AS object itself is used to represent a description of\n   administrative details\
    \ and the routing policies of the AS itself. The\n   AS object definition is depicted\
    \ as follows.\n   Example:\n   aut-num:  AS1104\n   descr:    NIKHEF-H Autonomous\
    \ system\n   as-in:    from AS1213 100 accept AS1213\n   as-in:    from AS1913\
    \ 100 accept AS1913\n   as-in:    from AS1755 150 accept ANY\n   as-out:   to\
    \ AS1213 announce ANY\n   as-out:   to AS1913 announce ANY\n   as-out:   to AS1755\
    \ announce AS1104 AS1913 AS1213\n   tech-c:   Rob Blokzijl\n   admin-c:  Eric\
    \ Wassenaar\n   guardian: as-guardian@nikhef.nl\n   changed:  ripe-dbm@ripe.net\
    \ 920910\n   source:   RIPE\n   See Appendix A for a complete syntax definition\
    \ of the \"aut-num\"\n   object.\n   It should be noted that this representation\
    \ provides two things:\n       + a set of routes.\n       + a description of administrative\
    \ details and routing policies.\n   The set of routes can be used to generate\
    \ network list based\n   configuration information as well as configuration information\
    \ for\n   exterior routing protocols knowing about ASes. This means an AS can\n\
    \   be defined and is useful even if it does not use routing protocols\n   which\
    \ know about the AS concept.\n   Description of routing policies between ASs with\
    \ multiple connections\n   - \"interas-in/interas-out\"\n   The following section\
    \ is only relevant for ASes which use different\n   policies on multiple links\
    \ to the same neighboring AS. Readers not\n   doing this may want to skip this\
    \ section.\n   Description of multiple connections between ASs defines how two\
    \ ASs\n   have chosen to set different policies for the use of each or some of\n\
    \   the connections between the ASs.  This description is necessary only\n   if\
    \ the ASs are connected in more than one way and the routing policy\n   and differs\
    \ at these two connections.\n   Example:\n                   LINK1\n      193.0.1.1\
    \ +----------+ 193.0.1.2\n                |          |\n   AS1------AS2==    \
    \       ==AS3-----AS4\n                |          |\n      193.0.1.5 +----------+\
    \ 193.0.1.6\n                    LINK2\n        Note: LINK here denotes the peer\
    \ connection points between\n        ASs.  It is not necessarily just a serial\
    \ link.  It could\n        be ethernet or any other type of connection as well.\
    \  It\n        can also be a peer session where the address is the same at\n \
    \       one end and different at the other end.\n   It may be that AS2 wants to\
    \ use LINK2 only for traffic towards AS4.\n   LINK1 is used for traffic to AS3\
    \ and as backup to AS4, should LINK2\n   fail.  To implement this policy, one\
    \ would use the attribute\n   \"interas-in\" and \"interas-out.\"  This attribute\
    \ permits ASs to\n   describe their local decisions based on its preference such\
    \ as\n   multi-exit-discriminators (MEDs) as used in some inter-domain routing\n\
    \   protocols (BGP4, IDRP) and to communicate those routing decisions.\n   This\
    \ information would be useful in resolving problems when some\n   traffic paths\
    \ changed from traversing AS3's gateway in Timbuktu\n   rather than the gateway\
    \ in Mogadishu.  The exact syntax is given in\n   Appendix A.  However, if we\
    \ follow this example through in terms of\n   AS2 we would represent this policy\
    \ as follows:\n   Example:\n   aut-num: AS2\n   as-in: from AS3 10 accept AS3\
    \ AS4\n   as-out: to AS3 announce AS1 AS2\n   interas-in:from AS3 193.0.1.1/32\
    \ 193.0.1.2/32 (pref=5) accept AS3\n   interas-in:from AS3 193.0.1.1/32 193.0.1.2/32\
    \ (pref=9) accept AS4\n   interas-in:from AS3 193.0.1.5/32 193.0.1.6/32 (pref=7)\
    \ accept AS4\n    ...\n   Here we see additional policy information between two\
    \ ASs in terms of\n   the IP addresses of the connection.  The parentheses and\
    \ keyword are\n   syntactic placeholders to add the readability of the attributes.\
    \  If\n   pref=MED is specified the preference indicated by the remote AS via\n\
    \   the multi-exit- discriminator metric such as BGP is used.  Of course\n   this\
    \ type on inter-AS policy should always be bilaterally agreed upon\n   to avoid\
    \ asymmetry and in practice there may need  to be\n   corresponding interas-out\
    \ attributes in the policy representation of\n   AS3.\n   The interas-out attribute\
    \ is similar to interas-in as as-out is to\n   as-in.  The one major difference\
    \ being that interas-out allows you to\n   associate an outgoing metric with each\
    \ route. It is important to note\n   that this metric is just passed to the peer\
    \ AS and it is at the peer\n   AS's discretion to use or ignore it.  A special\
    \ value of IGP\n   specifies that the metric passed to the receiving AS will be\
    \ derived\n   from the IGP of the sending AS. In this way the peer AS can choose\n\
    \   the optimal link for its traffic as determined by the sending AS.\n   If we\
    \ look at the corresponding interas-out for AS3 we would see the\n   following:\n\
    \   Example:\n"
- title: 'aut-num: AS3'
  contents:
  - 'aut-num: AS3

    '
- title: 'as-in: from AS2 10 accept AS1 A2'
  contents:
  - 'as-in: from AS2 10 accept AS1 A2

    '
- title: 'as-out: to AS2 announce AS3 AS4'
  contents:
  - 'as-out: to AS2 announce AS3 AS4

    '
- title: interas-out:to AS2 193.0.1.2/32 193.0.1.1/32 (metric-out=5) announce AS3
  contents:
  - 'interas-out:to AS2 193.0.1.2/32 193.0.1.1/32 (metric-out=5) announce AS3

    '
- title: interas-out:to AS2 193.0.1.2/32 193.0.1.1/32 (metric-out=9) announce AS4
  contents:
  - 'interas-out:to AS2 193.0.1.2/32 193.0.1.1/32 (metric-out=9) announce AS4

    '
- title: interas-out:to AS2 193.0.1.6/32 193.0.1.5/32 (metric-out=7) announce AS4
  contents:
  - "interas-out:to AS2 193.0.1.6/32 193.0.1.5/32 (metric-out=7) announce AS4\n ...\n\
    \   Descriptions of interas policies do  not  replace  the  global\n   policy\
    \ described  in as-in, as-out and other policy attributes which\n   should be\
    \ specified too.  If the global policy mentions  more  routes\n   than the combined\
    \ local policies then local preferences for these\n   routes are assumed to be\
    \ equal for all links.\n   Any route specified in interas-in/out and not specified\
    \ in as-in/out\n   is assumed not accepted/announced between the ASes concerned.\n\
    \   Diagnostic tools should flag this inconsistency as an error.  It\n   should\
    \ be noted that if an interas-in or interas-out policy is\n   specified then it\
    \ is mandatory to specify the corresponding global\n   policy in the as-in or\
    \ as-out line. Please note there is no relevance\n   in the cost associated with\
    \ as-in and the preferences used in\n   interas-in.\n   The interaction of interas-in/interas-out\
    \ with as-in/as-out\n   Although formally defined above, the rules associated\
    \ with policy\n   described in terms of interas-in and interas-out with respect\
    \ to as-\n   in and as-out are worthy of clarification for implementation.\n \
    \  When using interas-in or interas-out policy descriptions, one must\n   always\
    \ make sure the set of policies described between two ASes is\n   always equal\
    \ to or a sub-set of the policy described in the global\n   as-in or as-out policy.\
    \ When a sub-set is described remember the\n   remaining routes are implicitly\
    \ shared across all connections. It is\n   an error for the interas policies to\
    \ describe a superset of the\n   global policies, i.e. to announce or accept more\
    \ routes than the\n   global policies.\n   When defining complex interas based\
    \ policies it is advisable to\n   ensure that any possible ambiguities are not\
    \ present by explicitly\n   defining your policy with respect to the global as-in\
    \ and as-out\n   policy.\n   If we look at a simple example, taking just in-bound\
    \ announcements to\n   simplify things. If we have the following global policy:\n\
    \   aut-num: AS1\n   as-in: from AS2 10 accept AS100 OR {10.0.0.0/8}\n   Suppose\
    \ there are three peerings between AS1 and AS2, known as L1-R1,\n   L2-R2 and\
    \ L3-R3 respectively. The actual policy of these connections\n   is to accept\
    \ AS100 equally on these three links and just route\n   10.0.0.0/8 on L3-R3. The\
    \ simple way to mention this exception is to\n   just specify an interas policy\
    \ for L3-R3:\n   interas-in: from AS2 L3 R3 (pref=100) accept {10.0.0.0/8}\n \
    \  The implicit rule that all routes not mentioned in interas policies\n   are\
    \ accepted on all links with equal preference ensures the desired\n   result.\n\
    \   The same policy can be written explicitly as:\n   interas-in: from AS2 L1\
    \ R1 (pref=100) accept AS100\n   interas-in: from AS2 L2 R2 (pref=100) accept\
    \ AS100\n   interas-in: from AS2 L3 R3 (pref=100) accept AS100 OR {10.0.0.0/8}\n\
    \   Whilst this may at first sight seem obvious, the problem arises when\n   not\
    \ all connections are mentioned. For example, if we specified only\n   an interas-in\
    \ line for L3-R3 as below:\n   aut-num: AS1\n   as-in: from AS2 10 accept AS100\
    \ OR {10.0.0.0/8}\n   interas-in: from AS2 L3 R3 (pref=100) accept AS100 OR {10.0.0.0/8}\n\
    \   then the policy for the other links according to the rules above\n   would\
    \ mean they were equal to the global policy minus the sum of the\n   local policies\
    \ (i.e. ((AS100 OR {10.0.0.0/0}) / (AS100 OR\n   {10.0.0.0/0})) = empty) which\
    \ in this case would mean nothing is\n   accepted on connections L1-R1 and L2-R2\
    \ which is incorrect.\n   Another example: If we only registered  the  policy\
    \  for  link  L2-\n   R2:\n   interas-in: from AS2 L2 R2 (pref=100) accept AS100\n\
    \   The implicit policy for both L1-R1 and L3-R3 would be as follows:\n   interas-in:\
    \ from AS2 L1 R1 (pref=100) accept {10.0.0.0/8}\n   interas-in: from AS2 L3 R3\
    \ (pref=100) accept {10.0.0.0/8}\n   This is derived as the set of global policies\
    \ minus the set of\n   interas-in policies (in this case just accept AS100 as\
    \ it was the\n   L2-R2 interas-in policy we registered) with equal cost for the\n\
    \   remaining connection. This again is clearly not what was intended.\n   We\
    \ strongly recommend that you always mention all policies for all\n   interas\
    \ connections explicitly, to avoid these possible errors. One\n   should always\
    \ ensure the set of the interas policies is equal to the\n   global policy. Clearly\
    \ if interas policies differ in complex ways it\n   is worth considering splitting\
    \ the AS in question into separate ASes.\n   However, this is beyond the direct\
    \ scope of this document.\n   It should also be noted there is no direct relationship\
    \ between the\n   cost used in as-in and the preference used in interas-in.\n\
    \   How to describe the exclusion policy of a certain AS - \"as-exclude\"\n  \
    \ Some ASes have a routing policy based on the exclusion of certain\n   routes\
    \ if for whatever reason a certain AS is used as transit.\n   Whilst, this is\
    \ in general not good practice as it makes implicit\n   assumptions on topology\
    \ with asymmetry a possible outcome if not\n   coordinated, this case needs to\
    \ be accommodated within the routing\n   policy representation.\n   The way this\
    \ is achieved is by making use of the \"as-exclude\"\n   attribute. The precise\
    \ syntax of this attribute can be found in\n   Appendix A along with the rest\
    \ of the defined syntax for the \"aut-\n   num\" object. However, some explanation\
    \ of the use of this attribute\n   is useful. If we have the following example\
    \ topology.\n   Example:\n              AS4--------AS3\n    |          |     \
    \     |\n    |          |          |\n   AS1--------AS2--------AS5\n   With a\
    \ simple corresponding policy like so:\n   Example:\n   aut-num: AS1\n   as-in:\
    \  from AS2 100 accept ANY\n   as-out: to AS2 announce AS1\n   as-exclude: exclude\
    \ AS4 to ANY\n    ....\n   We see an interesting policy. What this says in simple\
    \ terms is AS1\n   doesn't want to reach anything if it transits AS4. This can\
    \ be a\n   perfectly valid policy. However, it should be realized that if for\n\
    \   whatever reason AS2 decides to route to AS3 via AS4 then immediately\n   AS1\
    \ has no connectivity to AS3 or if AS1 is running default to AS2\n   packets from\
    \ AS1 will still flow via AS4. The important point about\n   this is that whilst\
    \ AS1 can advise its neighbors of its policy it has\n   no direct control on how\
    \ it can enforce this policy to neighbors\n   upstream.\n   Another interesting\
    \ scenario to highlight the unexpected result of\n   using such an \"as-exclude\"\
    \ policy. If we assume in the above example\n   AS2 preferred AS4 to reach AS3\
    \ and AS1 did not use default routing\n   then as stated AS1 would have no connectivity\
    \ to AS3. Now lets\n   suppose that for example the link between AS2 and AS4 went\
    \ down for\n   some reason. Like so:\n   Example:\n              AS4--------AS3\n\
    \                          |\n                          |\n   AS1--------AS2--------AS5\n\
    \   Suddenly AS1 now has connectivity to AS3. This unexpected behavior\n   should\
    \ be considered when created policies based on the \"as-exclude\"\n   attribute.\n\
    \   The second problem with this type of policy is the potential of\n   asymmetry.\
    \ In the original example we saw the correct policy from\n   AS1's point of view\
    \ but if ASes with connectivity through AS4 do not\n   use a similar policy you\
    \ have asymmetric traffic and policy.  If an\n   AS uses such a policy they must\
    \ be aware of the consequences of its\n   use. Namely that the specified routes\
    \ which transit the AS (i.e.\n   routing announcements with this AS in the AS\
    \ path information) in\n   question will be excluded.  If not coordinated this\
    \ can easily cause\n   asymmetry or even worse loss of connectivity to unknown\
    \ ASes behind\n   (or in front for that matter) the transit AS in question.  With\
    \ this\n   in mind this attribute can only be viewed as a form of advisory to\n\
    \   other service providers. However, this does not preclude its use with\n  \
    \ policy based tools if the attribute exists.\n   By having the ability to specify\
    \ a route keyword based on any of the\n   four notations given in the syntax it\
    \ allows the receiving AS to\n   specify what routes it wishes to exclude through\
    \ a given transit AS\n   to a network granularity.\n"
- title: 7.  AS Macros
  contents:
  - "7.  AS Macros\n   It may be difficult to keep track of each and every new AS\
    \ that is\n   represented in the routing registry.  A convenient way around this\
    \ is\n   to define an `AS Macro' which essentially is a convenient way to\n  \
    \ group ASes. This is done so that each and every AS guardian does not\n   have\
    \ to add a new AS to it's routing policy as described by the as-in\n   and as-out\
    \ attributes of it's AS object.\n   However, it should be noted that this creates\
    \ an implicit trust on\n   the guardian of the AS-Macro.\n   An AS-Macro can be\
    \ used in <routing policy expressions> for the \"as-\n   in\" and \"as-out\" attributes\
    \ in the aut-num object. The AS-Macro\n   object is then used to derive the list\
    \ or group of ASes.\n   A simple example would be something like:\n   Example:\n\
    \   aut-num: AS786\n   as-in:   from AS1755 100 accept AS-EBONE AND NOT AS1104\n\
    \   as-out   to AS1755 announce AS786\n    .....\n   Where the as-macro object\
    \ for AS-EBONE is as follows:\n   as-macro:  AS-EBONE\n   descr:     ASes routed\
    \ by EBONE\n   as-list:   AS2121 AS1104 AS2600 AS2122\n   as-list:   AS1103 AS1755\
    \ AS2043\n   guardian:  guardian@ebone.net\n    ......\n   So the policy would\
    \ be evaluated to:\n   aut-num: AS786\n   as-in:   from AS1755 100 accept (AS2121\
    \ OR AS1104 OR AS2600 OR AS2122\n   as-in:   from AS1755 100 accept AS1103 OR\
    \ AS1755 OR\n   as-in:   from AS1755 100 accept AS2043) AND NOT AS1104\n    ......\n\
    \   It should be noted that the above examples incorporates the rule for\n   line\
    \ wrapping as defined in Appendix A for policy lines.  See\n   Appendix C for\
    \ a definition on the AS-Macro syntax.\n"
- title: 8.  The Community Object
  contents:
  - "8.  The Community Object\n   A community is a group of routes that cannot be\
    \ represented by an AS\n   or a group of ASes.  It is in some circumstances useful\
    \ to define a\n   group of routes that have something in common.  This could be\
    \ a\n   special access policy to a supercomputer centre, a group of routes\n \
    \  used for a specific mission, or a disciplinary group that is\n   scattered\
    \ among several autonomous systems.  Also these communities\n   could be useful\
    \ to group routes for the purpose of network\n   statistics.\n   Communities do\
    \ not exchange routing information, since they do not\n   represent an autonomous\
    \ system.  More specifically, communities do\n   not define routing policies,\
    \ but access or usage policies. However,\n   they can be used as in conjunction\
    \ with an ASes routing policy to\n   define a set of routes the AS sets routing\
    \ policy for.\n   Communities should be defined in a strict manner, to avoid creating\n\
    \   as many communities as there are routes, or even worse.  Communities\n   should\
    \ be defined following the two rules below;\n    +   Communities must have a global\
    \ meaning.  Communities that have\n        no global meaning, are used only in\
    \ a local environment and\n        should be avoided.\n    +   Communities  must\
    \ not be defined to express non-local policies.\n        It should be avoided\
    \ that a community is created because some\n        other organization forces\
    \ a policy upon your organization.\n        Communities must only be defined to\
    \ express a policy defined by\n        your organization.\n   Community examples\n\
    \   There are some clear examples of communities:\n   BACKBONE -\n        all\
    \ customers of a given backbone service provider even though\n        they can\
    \ have various different routing policies and hence\n        belong to different\
    \ ASes. This would be extremely useful for\n        statistics collection.\n \
    \  HEPNET -\n        the High Energy Physics community partly shares infrastructure\n\
    \        with other organizations, and the institutes it consists of are\n   \
    \     scattered all over Europe, often being part of a non HEPNET\n        autonomous\
    \ system. To allow statistics, access or part of a\n        routing policy , a\
    \ community HEPNET, consisting of all routes\n        that are part of HEPNET,\
    \ conveniently groups all these routes.\n   NSFNET -\n        the National Science\
    \ Foundation Network imposes an acceptable\n        use policy on routes that\
    \ wish to make use of it. A community\n        NSFNET could imply the set of routes\
    \ that comply with this\n        policy.\n   MULTI -\n        a large multinational\
    \ corporation that does not have its own\n        internal infrastructure, but\
    \ connects to the various parts of\n        its organizations by using local service\
    \ providers that connect\n        them all together, may decide to define a community\
    \ to restrict\n        access to their networks, only by networks that are part\
    \ of this\n        community. This way a corporate network could be defined on\n\
    \        shared infrastructure. Also, this community could be used by any\n  \
    \      of the service providers to do statistics for the whole of the\n      \
    \  corporation, for instance to do topology or bandwidth planning.\n   Similar\
    \ to Autonomous systems, each community is represented in the\n   RIPE database\
    \ by both a community object and community tags on the\n   route objects representing\
    \ the routes belonging to the community.\n   The community object stores descriptive,\
    \ administrative and contact\n   information about the community.\n   The community\
    \ tags on the route objects define the set of routes\n   belonging to a community.\
    \  A route can have multiple community tags.\n   The community tags can only be\
    \ created and updated by the \"guardian\"\n   of the community and not by those\
    \ directly responsible for the\n   particular network.  This ensures that community\
    \ guardians remain in\n   control of community membership.\n   Here's an example\
    \ of how this might be represented in terms of the\n   community tags within the\
    \ network object.  We have an example where\n   the route 192.16.199.0/24 has\
    \ a single routing policy (i.e.  that of\n   AS 1104), but is part of several\
    \ different communities of interest.\n   We use the tag \"comm-list\" to represent\
    \ the list of communities\n   associated with this route.  NIKHEF-H uses the service\
    \ provider\n   SURFNET (a service provider with customers with more than one routing\n\
    \   policy), is also part of the High Energy Physics community as well as\n  \
    \ having the ability to access the Supercomputer at CERN (the community\n   `CERN-SUPER',\
    \ is somewhat national, but is intended as an example of\n   a possible use of\
    \ an access policy constraint).\n   Example:\n   route:     192.16.199.0/24\n\
    \   descr:     Local Ethernet\n   descr:     NIKHEF section H\n   origin:    AS1104\n\
    \   comm-list: HEPNET CERN-SUPER SURFNET\n   changed:   ripe-dbm@ripe.net 920604\n\
    \   source:    RIPE\n   In the above examples some communities have been defined.\
    \ The\n   community object itself will take the following format:\n   Example:\n\
    \   community:  SURFNET\n   descr:      Dutch academic research network\n   authority:\
    \  SURFnet B.V.\n   guardian:   comm-guardian@surfnet.nl\n   admin-c:    Erik-Jan\
    \ Bos\n   tech-c:     Erik-Jan Bos\n   changed:    ripe-dbm@ripe.net 920604\n\
    \   source:     RIPE\n   For a complete explanation of the syntax please refer\
    \ to Appendix B.\n"
- title: 9.  Representation of Routing Policies
  contents:
  - "9.  Representation of Routing Policies\n   Routing policies of an AS are represented\
    \ in the autonomous system\n   object. Initially we show some examples, so the\
    \ reader is familiar\n   with the concept of how routing information is represented,\
    \ used and\n   derived. Refer to Appendix A, for the full syntax of the \"aut-num\"\
    \n   object.\n   The topology of routing exchanges is represented by listing how\n\
    \   routing information is exchanged with each neighboring AS.  This is\n   done\
    \ separately for both incoming and outgoing routing information.\n   In order\
    \ to provide backup and back door paths a relative cost is\n   associated with\
    \ incoming routing information.\n   Example 1:\n                             \
    \  AS1------AS2\n   This specifies a simple routing exchange of two presumably\
    \ isolated\n   ASes.  Even if either of them has routing information about routes\
    \ in\n   ASes other than AS1 and AS2, none of that will be announced to the\n\
    \   other.\n   aut-num:   AS1\n   as-out:    to AS2 announce AS1\n   as-in:  \
    \   from AS2 100 accept AS2\n   aut-num:   AS2\n   as-out:    to AS1 announce\
    \ AS2\n   as-in:     from AS1 100 accept AS1\n   The number 100 in the in-bound\
    \ specifications is a relative cost,\n   which is used for backup and back door\
    \ routes. The absolute value is\n   of no significance. The relation between different\
    \ values within the\n   same AS object is.  A lower value means a lower cost.\
    \ This is\n   consciously similar to the cost based preference scheme used with\
    \ DNS\n   MX RRs.\n   Example 2:\n   Now suppose that AS2 is connected to one\
    \ more AS, besides AS1, and\n   let's call that AS3:\n                       \
    \    AS1------AS2------AS3\n   In this case there are two reasonable routing policies:\n\
    \     a) AS2 just wants to exchange traffic with both AS1 and AS3 itself\n   \
    \     without passing traffic between AS1 and AS3.\n     b) AS2 is willing to\
    \ pass traffic between AS3 and AS1, thus acting\n        as a transit AS\n   Example\
    \ 2a:\n   In the first case AS1's representation in the routing registry will\n\
    \   remain unchanged as will be the part of AS2's representation\n   describing\
    \ the routing exchange with AS1. A description of the\n   additional routing exchange\
    \ with AS3 will be added to AS2's\n   representation:\n   aut-num:   AS1\n   as-out:\
    \    to AS2 announce AS1\n   as-in:     from AS2 100 accept AS2\n   aut-num: \
    \  AS2\n   as-out:    to AS1 announce AS2\n   as-in:     from AS1 100 accept AS1\n\
    \   as-out:    to AS3 announce AS2\n   as-in:     from AS3 100 accept AS3\n  \
    \ aut-num:   AS3\n   as-out:    to AS2 announce AS3\n   as-in:     from AS2 100\
    \ accept AS2\n   Note that in this example, AS2 keeps full control over its resources.\n\
    \   Even if AS3 and AS1 were to allow each others routes in from AS2, the\n  \
    \ routing information would not flow because AS2 is not announcing it.\n   Of\
    \ course AS1 and AS3 could just send traffic to each other to AS2\n   even without\
    \ AS2 announcing the routes, hoping that AS2 will forward\n   it correctly. Such\
    \ questionable practices however are beyond the\n   scope of this document.\n\
    \   Example 2b:\n   If contrary to the previous case, AS1 and AS3 are supposed\
    \ to have\n   connectivity to each other via AS2, all AS objects have to change:\n\
    \   aut-num:   AS1\n   as-out:    to AS2 announce AS1\n   as-in:     from AS2\
    \ 100 accept AS2 AS3\n   aut-num:   AS2\n   as-out:    to AS1 announce AS2 AS3\n\
    \   as-in:     from AS1 100 accept AS1\n   as-out:    to AS3 announce AS2 AS1\n\
    \   as-in:     from AS3 100 accept AS3\n   aut-num:   AS3\n   as-out:    to AS2\
    \ announce AS3\n   as-in:     from AS2 100 accept AS1 AS2\n   Note that the amount\
    \ of routing information exchanged with a neighbor\n   AS is defined in terms\
    \ of routes belonging to ASes.  In BGP terms\n   this is the AS where the routing\
    \ information originates and the\n   originating AS information carried in BGP\
    \ could be used to implement\n   the desired policy.  However, using BGP or the\
    \ BGP AS-path\n   information is not required to implement the policies thus specified.\n\
    \   Configurations based on route lists can easily be generated from the\n   database.\
    \  The AS path information, provided by BGP can then be used\n   as an additional\
    \ checking tool as desired.\n   The specification understands one special expression\
    \ and this can be\n   expressed as a boolean expression:\n   ANY - means any routing\
    \ information known. For output this means that\n        all routes an AS knows\
    \ about are announced. For input it means\n        that anything is accepted from\
    \ the neighbor AS.\n   Example 3:\n   AS4 is a stub customer AS, which only talks\
    \ to service provider\n   AS123.\n                                    |\n    \
    \                                |\n                            -----AS123------AS4\n\
    \                                    |\n                                    |\n\
    \   aut-num: AS4\n   as-out:  to AS123 announce AS4\n   as-in:   from AS123 100\
    \ accept ANY\n   aut-num: AS123\n   as-in:   from AS4 100 accept AS4\n   as-out:\
    \  to AS4 announce ANY\n   <further neighbors>\n   Since AS4 has no other way\
    \ to reach the outside world than AS123 it\n   is not strictly necessary for AS123\
    \ to send routing information to\n   AS4.  AS4 can simply send all traffic for\
    \ which it has no explicit\n   routing information to AS123 by default.  This\
    \ strategy is called\n   default routing.  It is expressed in the routing registry\
    \ by adding\n   one or more default tags to the autonomous system which uses this\n\
    \   strategy.  In the example above this would look like:\n   aut-num: AS4\n \
    \  as-out:  to AS123 announce AS4\n   default: AS123 100\n   aut-num: AS123\n\
    \   as-in:   from AS4 100 accept AS4\n   <further neighbors>\n   Example 4:\n\
    \   AS4 now connects to a different operator, AS5.  AS5 uses AS123 for\n   outside\
    \ connectivity but has itself no direct connection to AS123.\n   AS5 traffic to\
    \ and from AS123 thus has to pass AS4.  AS4 agrees to\n   act as a transit AS\
    \ for this traffic.\n                              |\n                       \
    \       |\n                       -----AS123------AS4-------AS5\n            \
    \                  |\n                              |\n   aut-num:    AS4\n  \
    \ as-out:     to AS123 announce AS4 AS5\n   as-in:      from AS123 100 accept\
    \ ANY\n   as-out:     to AS5 announce ANY\n   as-in:      from AS5 50 accept AS5\n\
    \   aut-num:    AS5\n   as-in:      from AS4 100 accept ANY\n   as-out:     to\
    \ AS4 announce AS5\n   aut-num:    AS123\n   as-in:      from AS4 100 accept AS4\
    \ AS5\n   as-out:     to AS4 announce ANY\n   <further neighbors>\n   Now AS4\
    \ has two sources of external routing information. AS5 which\n   provides only\
    \ information about its own routes and AS123 which\n   provides information about\
    \ the external world. Note that AS4 accepts\n   information about AS5 from both\
    \ AS123 and AS5 although AS5\n   information cannot come from AS123 since AS5\
    \ is connected only via\n   AS4 itself. The lower cost of 50 for the announcement\
    \ from AS5 itself\n   compared to 100 from AS123 ensures that AS5 is still believed\
    \ even in\n   case AS123 will unexpectedly announce AS5.\n   In this example too,\
    \ default routing can be used by AS5 much like in\n   the previous example.  AS4\
    \ can also use default routing towards\n   AS123:\n   aut-num:    AS4\n   as-out:\
    \     to AS123 announce AS4 AS5\n   default:    AS123 11\n   as-in:      from\
    \ AS5 50 accept AS5\n   Note no announcements to AS5, they default to us.\n  \
    \ aut-num:    AS5\n   as-out:     to AS4 announce AS5\n   default:    AS4 100\n\
    \   aut-num:    AS123\n   as-in:      from AS4 100 announce AS4 AS5\n   <further\
    \ neighbors>\n   Note that the relative cost associated with default routing is\n\
    \   totally separate from the relative cost associated with in-bound\n   announcements.\
    \  The default route will never be taken if an explicit\n   route is known to\
    \ the destination.  Thus an explicit route can never\n   have a higher cost than\
    \ the default route.  The relative cost\n   associated with the default route\
    \ is only useful in those cases where\n   one wants to configure multiple default\
    \ routes for redundancy.\n   Note also that in this example the configuration\
    \ using default routes\n   has a subtly different behavior than the one with explicit\
    \ routes: In\n   case the AS4-AS5 link fails AS4 will send traffic to AS5 to AS123\n\
    \   when using the default configuration. Normally this makes not much\n   difference\
    \ as there will be no answer and thus little traffic.  With\n   certain datagram\
    \ applications which do not require acknowledgments\n   however, significant amounts\
    \ of traffic may be uselessly directed at\n   AS123.  Similarly default routing\
    \ should not be used if there are\n   stringent security policies which prescribe\
    \ any traffic intended for\n   AS5 to ever touch AS123.\n   Once the situation\
    \ gets more complex using default routes can lead to\n   unexpected results or\
    \ even defeat the routing policies established\n   when links fail. As an example\
    \ consider how Example 5a) below could\n   be implemented using default routing.\
    \  Therefore, generally it can be\n   said that default routing should only be\
    \ used in very simple\n   topologies.\n   Example 5:\n   In a different example\
    \ AS4 has a private connection to AS6 which in\n   turn is connected to the service\
    \ provider AS123:\n                                   |\n                    \
    \               |\n                            -----AS123------AS4\n         \
    \                          |          |\n                                   |\
    \          |\n                                   |          |\n              \
    \                   AS6 ---------+\n   There are a number of policies worth examining\
    \ in this case:\n     a) AS4 and AS6 wish to exchange traffic between themselves\n\
    \        exclusively via the private link between themselves; such\n        traffic\
    \ should never pass through the backbone (AS123).  The\n        link should never\
    \ be used for transit traffic, i.e. traffic not\n        both originating in and\
    \ destined for AS4 and AS6.\n     b) AS4 and AS6 wish to exchange traffic between\
    \ themselves via the\n        private link between themselves.  Should the link\
    \ fail, traffic\n        between AS4 and AS6 should be routed via AS123.  The\
    \ link should\n        never be used for transit traffic.\n     c) AS4 and AS6\
    \ wish to exchange traffic between themselves via the\n        private link between\
    \ themselves.  Should the link fail, traffic\n        between AS4 and AS6 should\
    \ be routed via AS123.  Should the\n        connection between AS4 and AS123 fail,\
    \ traffic from AS4 to\n        destinations behind AS123 can pass through the\
    \ private link and\n        AS6's connection to AS123.\n     d) AS4 and AS6 wish\
    \ to exchange traffic between themselves via the\n        private link between\
    \ themselves.  Should the link fail, traffic\n        between AS4 and AS6 should\
    \ be routed via AS123.  Should the\n        backbone connection of either AS4\
    \ or AS6 fail, the traffic of\n        the disconnected AS should flow via the\
    \ other AS's backbone\n        connection.\n   Example 5a:\n   aut-num:   AS4\n\
    \   as-in:     from AS123 100 accept NOT AS6\n   as-out:    to AS123 announce\
    \ AS4\n   as-in:     from AS6 50 accept AS6\n   as-out:    to AS6 announce AS4\n\
    \   aut-num:   AS123\n   as-in:     from AS4 100 accept AS4\n   as-out:    to\
    \ AS4 announce ANY\n   as-in:     from AS6 100 accept AS6\n   as-out:    to AS6\
    \ announce ANY\n   <further neighbors>\n   aut-num:    AS6\n   as-in:      from\
    \ AS123 100 accept NOT AS4\n   as-out:     to AS123 announce AS6\n   as-in:  \
    \    from AS4 50 accept AS4\n   as-out:     to AS4 announce AS6\n   Note that\
    \ here the configuration is slightly inconsistent. AS123 will\n   announce AS6\
    \ to AS4 and AS4 to AS6. These announcements will be\n   filtered out on the receiving\
    \ end.  This will implement the desired\n   policy.  Consistency checking tools\
    \ might flag these cases however.\n   Example 5b:\n   aut-num:   AS4\n   as-in:\
    \     from AS123 100 accept ANY\n   as-out:    to AS123 announce AS4\n   as-in:\
    \     from AS6 50 accept AS6\n   as-out:    AS6 AS4\n   aut-num:   AS123\n   as-in:\
    \     AS4 100 AS4\n   as-out:    AS4 ANY\n   as-in:     AS6 100 AS6\n   as-out:\
    \    AS6 ANY\n   <further neighbors>\n   aut-num:   AS6\n   as-in:     from AS123\
    \ 100 accept ANY\n   as-out:    to AS123 announce AS6\n   as-in:     from AS4\
    \ 50 accept AS4\n   as-out:    to AS4 announce AS6\n   The thing to note here\
    \ is that in the ideal operational case, `all\n   links working' AS4 will receive\
    \ announcements for AS6 from both AS123\n   and AS6 itself.  In this case the\
    \ announcement from AS6 will be\n   preferred because of its lower cost and thus\
    \ the private link will be\n   used as desired.  AS6 is configured as a mirror\
    \ image.\n   Example 5c:\n   The new feature here is that should the connection\
    \ between AS4 and\n   AS123 fail, traffic from AS4 to destinations behind AS123\
    \ can pass\n   through the private link and AS6's connection to AS123.\n   aut-num:\
    \  AS4\n   as-in:    from AS123 100 accept ANY\n   as-out:   to AS123 announce\
    \ AS4\n   as-in:    from AS6 50 accept AS6\n   as-in:    from AS6 110 accept ANY\n\
    \   as-out:   to AS6 AS4\n   aut-num:  AS123\n   as-in:    from AS4 1 accept AS4\n\
    \   as-out:   to AS4 announce ANY\n   as-in:    from AS6 1 accept AS6\n   as-in:\
    \    from AS6 2 accept AS4\n   as-out:   to AS6 announce ANY\n   <further neighbors>\n\
    \   aut-num:  AS6\n   as-in:    from AS123 100 accept ANY\n   as-out:   to AS123\
    \ AS6 announce AS4\n   as-in:    from AS4 50 accept AS4\n   as-out:   to AS4 announce\
    \ ANY\n   Note that it is important to make sure to propagate routing\n   information\
    \ for both directions in backup situations like this.\n   Connectivity in just\
    \ one direction is not useful at all for almost\n   all applications.\n   Note\
    \ also that in case the AS6-AS123 connection breaks, AS6 will only\n   be able\
    \ to talk to AS4. The symmetrical case (5d) is left as an\n   exercise to the\
    \ reader.\n"
- title: 10.  Future Extensions
  contents:
  - "10.  Future Extensions\n   We envision that over time the requirements for describing\
    \ routing\n   policy will evolve. The routing protocols will evolve to support\
    \ the\n   requirements and the routing policy description syntax will need to\n\
    \   evolve as well. For that purpose, a separate document will describe\n   experimental\
    \ syntax definitions for policy description.  This\n   document [14] will be updated\
    \ when new objects or attributes are\n   proposed or modified.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1]  Bates, T., Jouanigot, J-M., Karrenberg, D., Lothberg,\
    \ P.,\n        Terpstra, M., \"Representation of IP Routing Policies in the RIPE\n\
    \        Database\", RIPE-81, February 1993.\n   [2]  Merit Network Inc.,\"Representation\
    \ of Complex Routing Policies\n        of an Autonomous System\", Work in Progress,\
    \ March 1994.\n   [3]  PRIDE Tools Release 1.\n        See ftp.ripe.net:pride/tools/pride-tools-1.tar.Z.\n\
    \   [4]  Merit Inc. RRDB Tools.\n        See rrdb.merit.edu:pub/meritrr/*\n  \
    \ [5]  The Network List Compiler.\n        See dxcoms.cern.ch:pub/ripe-routing-wg/nlc-2.2d.tar\n\
    \   [6]  Lord, A., Terpstra, M., \"RIPE Database Template for Networks and\n \
    \       Persons\", RIPE-119, October 1994.\n   [7]  Karrenberg, D., \"RIPE Database\
    \ Template for Domains\", RIPE-49,\n        April 1992.\n   [8]  Lougheed, K.,\
    \ Rekhter, Y., \"A Border Gateway Protocol 3 (BGP-\n        3)\", RFC1267, October\
    \ 1991.\n   [9]  Rekhter, Y., Li, T., \"A Border Gateway Protocol 4 (BGP-4)\"\
    ,\n        RFC-1654, May 1994.\n   [10] Bates, T., Karrenberg, D., Terpstra, M.,\
    \ \"Support for Classless\n        Internet Addresses in the RIPE Database\",\
    \ RIPE-121, October\n        1994.\n   [11] Karrenberg, D., \"Authorisation and\
    \ Notification of Changes in\n        the RIPE Database\", RIPE-120, October 1994.\n\
    \   [12] Bates, T., \"Support of Guarded fields within the RIPE Database\",\n\
    \        ripe-117, July 1994.\n   [13] Estrin, D., Li, T., Rekhter, Y., Varadhan,\
    \ K., Zappala, D.,\n        \"Source Demand Routing: Packet Format and Forwarding\n\
    \        Specification (Version 1)\", Work in Progress, March 1994.\n   [14] Joncheray,\
    \ L., \"Experimental Objects and attributes for the\n        Routing Registry\"\
    , RIPE-182, October1994.\n   [15] Bates, T., \"Specifying an `Internet Router'\
    \ in the Routing\n        Registry\", RIPE-122, October 1994.\n   [16] Bates,\
    \ T., Karrenberg, D., Terpstra, M., \"RIPE Database\n        Transition Plan\"\
    , RIPE-123, October 1994.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   Security issues are beyond the scope of this\
    \ memo.\n"
- title: 13.  Authors' Addresses
  contents:
  - "13.  Authors' Addresses\n   Tony Bates\n   MCI Telecommunications Corporation\n\
    \   2100 Reston Parkway\n   Reston, VA 22094\n   USA\n   +1 703 715 7521\n   Tony.Bates@mci.net\n\
    \   Elise Gerich\n   The University of Michigan\n   Merit Computer Network\n \
    \  1075 Beal Avenue\n   Ann Arbor, MI 48109\n   USA\n   +1 313 936 2120\n   epg@merit.edu\n\
    \   Laurent Joncheray\n   The University of Michigan\n   Merit Computer Network\n\
    \   1075 Beal Avenue\n   Ann Arbor, MI 48109\n   USA\n   +1 313 936 2065\n   lpj@merit.edu\n\
    \   Jean-Michel Jouanigot\n   CERN, European Laboratory for Particle Physics\n\
    \   CH-1211 Geneva 23\n   Switzerland\n   +41 22 767 4417\n   Jean-Michel.Jouanigot@cern.ch\n\
    \   Daniel Karrenberg\n   RIPE Network Coordination Centre\n   Kruislaan 409\n\
    \   NL-1098 SJ Amsterdam\n   The Netherlands\n   +31 20 592 5065\n   D.Karrenberg@ripe.net\n\
    \   Marten Terpstra\n   Bay Networks, Inc.\n   2 Federal St\n   Billerica, MA\
    \ 01821\n   USA\n   +1 508 436 8036\n   marten@BayNetworks.com\n   Jessica Yu\n\
    \   The University of Michigan\n   Merit Computer Network\n   1075 Beal Avenue\n\
    \   Ann Arbor, MI 48109\n   USA\n   +1 313 936 2655\n   jyy@merit.edu\n"
- title: Appendix A - Syntax for the aut-num object.
  contents:
  - "Appendix A - Syntax for the aut-num object.\n   Here is a summary of the tags\
    \ associated with aut-num object itself\n   and their status. The first column\
    \ specifies the attribute, the\n   second column whether this attribute is mandatory\
    \ in the aut-num\n   object, and the third column whether this specific attribute\
    \ can\n   occur only once per object [single], or more than once [multiple].\n\
    \   When specifying multiple lines per attribute, the attribute name must\n  \
    \ be repeated. See [6] the example for the descr: attribute.\n   aut-num:    \
    \  [mandatory]          [single]\n   as-name:      [optional]           [single]\n\
    \   descr:        [mandatory]          [multiple]\n   as-in:        [optional]\
    \           [multiple]\n   as-out:       [optional]           [multiple]\n   interas-in:\
    \   [optional]           [multiple]\n   interas-out:  [optional]           [multiple]\n\
    \   as-exclude:   [optional]           [multiple]\n   default:      [optional]\
    \           [multiple]\n   tech-c:       [mandatory]          [multiple]\n   admin-c:\
    \      [mandatory]          [multiple]\n   guardian:     [mandatory]         \
    \ [single]\n   remarks:      [optional]           [multiple]\n   notify:     \
    \  [optional]           [multiple]\n   mnt-by:       [optional]           [multiple]\n\
    \   changed:      [mandatory]          [multiple]\n   source:       [mandatory]\
    \          [single]\n   Each attribute has the following syntax:\n   aut-num:\n\
    \        The autonomous system number.  This must be a uniquely allocated\n  \
    \      autonomous system number from an AS registry (i.e. the RIPE NCC,\n    \
    \    the Inter-NIC, etc).\n        Format:\n             AS<positive integer between\
    \ 1 and 65535>\n        Example:\n             aut-num: AS1104\n        Status:\
    \ mandatory, only one line allowed\n"
- title: 'as-name:'
  contents:
  - "as-name:\n     The name associated with this AS. This should as short but as\n\
    \     informative as possible.\n     Format:\n          Text consisting of capitals,\
    \ dashes (\"-\") and digits, but must\n          start with a capital.\n     Example:\n\
    \          as-name: NIKHEF-H\n     Status: single, only one line allowed\n"
- title: 'descr:'
  contents:
  - "descr:\n     A short description of the Autonomous System.\n     Format:\n  \
    \        free text\n     Example:\n          descr: NIKHEF section H\n       \
    \   descr: Science Park Watergraafsmeer\n          descr: Amsterdam\n     Status:\
    \ mandatory, multiple lines allowed\n"
- title: 'as-in:'
  contents:
  - "as-in:\n     A description of accepted routing information between AS peers.\n\
    \     Format:\n          from <aut-num> <cost> accept <routing policy expression>\n\
    \          The keywords from and accept are optional and can be omitted.\n   \
    \       <aut-num> refers to your AS neighbor.\n          <cost> is a positive\
    \ integer used to express a relative cost\n          of routes learned. The lower\
    \ the cost the more preferred the\n          route.\n          <routing policy\
    \ expression> can take the following formats.\n          1.   A list of one or\
    \ more ASes, AS Macros, Communities or\n               Route Lists.\n        \
    \       A Route List is a list of routes in prefix length format,\n          \
    \     separated by commas, and surrounded by curly brackets\n               (braces,\
    \ i.e. `{' and '}').\n               Examples:\n                    as-in: from\
    \ AS1103 100 accept AS1103\n                    as-in: from AS786  105 accept\
    \ AS1103\n                    as-in: from AS786   10 accept AS786 HEPNET\n   \
    \                 as-in: from AS1755 110 accept AS1103 AS786\n               \
    \     as-in: from AS3333 100 accept {192.87.45.0/16}\n          2.   A set of\
    \ KEYWORDS.  The following KEYWORD is currently\n               defined:\n   \
    \            ANY  this means anything the neighbor AS knows.\n          3.   A\
    \ logical expression of either 1 or 2 above The current\n               logical\
    \ operators are defined as:\n               AND\n               OR\n         \
    \      NOT\n               This operators are defined as true BOOLEAN operators\
    \ even\n               if the operands themselves do not appear to be BOOLEAN.\n\
    \               Their operations are defined as follows:\n               Operator\
    \       Operation      Example\n                  OR          UNION          AS1\
    \ OR AS2\n                                             |\n                   \
    \                          +-> all routes in AS1\n                           \
    \                      or AS2.\n                  AND         INTERSECTION   AS1\
    \ AND HEPNET\n                                             |\n               \
    \                              +-> a route in AS1 and\n                      \
    \                           belonging to\n                                   \
    \              community HEPNET.\n                  NOT         COMPLEMENT   \
    \  NOT AS3\n                                             |\n                 \
    \                            +-> any route except\n                          \
    \                       AS3 routes.\n               Rules are grouped together\
    \ using parenthesis i.e \"(\" and\n               \")\".\n               The ordering\
    \ of evaluation of operators and there\n               association is as follows:\n\
    \               Operator        Associativity\n                  ()          \
    \ left to right\n                 NOT           right to left\n              \
    \   AND           left to right\n                  OR           left to right\n\
    \               NOTE: if no logical operator is given between ASes, AS-\n    \
    \           macros, Communities, Route Lists and KEYWORDS it is\n            \
    \   implicitly evaluated as an `OR' operation.  The OR can be\n              \
    \ left out for conciseness. However, please note the\n               operators\
    \ are still evaluated as below so make sure you\n               include parentheses\
    \ whenever needed.  To highlight this\n               here is a simple example.\
    \ If we denoted a policy of for\n               example; from AS1755 I accept\
    \ all routes except routes\n               from AS1, A2 and AS3 and you enter\
    \ the following as-in\n               line.\n               as-in: from AS1755\
    \ 100 accept NOT AS1 AS2 AS3\n               This will be evaluated as:\n    \
    \           as-in: from AS1755 100 accept NOT AS1 OR AS2 OR AS3\n            \
    \   Which in turn would be evaluated like this:\n               (NOT AS1) OR AS2\
    \ OR AS3\n               -> ((ANY except AS1) union AS2) union AS3)\n        \
    \       --> (ANY except AS1)\n               This is clearly incorrect and not\
    \ the desired result. The\n               correct syntax should be:\n        \
    \       as-in: from AS1755 100 accept NOT (AS1 AS2 AS3)\n               Producing\
    \ the following evaluation:\n               NOT (AS1 OR AS2 OR AS3)\n        \
    \       -> (ANY) except (union of AS1, AS2, AS3)\n               Which depicts\
    \ the desired routing policy.\n               Note that can also be written as\
    \ below which is perhaps\n               somewhat clearer:\n               as-in:\
    \ from AS1755 100 accept ANY AND NOT\n               as-in: from AS1755 100 accept\
    \ (AS1 OR AS2 OR AS3)\n     Examples:\n          as-in: from AS1755 100 accept\
    \ ANY AND NOT (AS1234 OR AS513)\n          as-in: from AS1755 150 accept AS1234\
    \ OR {35.0.0.0/8}\n          A rule can be wrapped over lines providing the associated\n\
    \          <aut-num>, <cost> values and from and accept keywords are\n       \
    \   repeated and occur on consecutive lines.\n     Example:\n          as-in:\
    \ from AS1755 100 accept ANY AND NOT (AS1234 AS513)\n             and\n      \
    \    as-in: from AS1755 100 accept ANY AND NOT (\n          as-in: from AS1755\
    \ 100 accept AS1234 AS513)\n          are evaluated to the same result. Please\
    \ note that the\n          ordering of these continuing lines is significant.\n\
    \     Status: optional, multiple lines allowed\n"
- title: 'as-out:'
  contents:
  - "as-out:\n     A description of generated routing information sent to other AS\n\
    \     peers.\n     Format:\n          to <aut-num> announce <routing policy expression\n\
    \          The to and announce keywords are optional and can be omitted.\n   \
    \       <aut-num> refers to your AS neighbor.\n          <routing policy expression>\
    \ is explained in the as-in\n          attribute definition above.\n     Example:\n\
    \          as-out: to AS1104 announce AS978\n          as-out: to AS1755 announce\
    \ ANY\n          as-out: to AS786 announce ANY AND NOT (AS978)\n     Status: optional,\
    \ multiple lines allowed\n"
- title: 'interas-in:'
  contents:
  - "interas-in:\n     Describes incoming local preferences on an inter AS connection.\n\
    \     Format:\n          from <aut-num> <local-rid> <neighbor-rid> <preference>\
    \ accept\n          <routing policy expression>\n          The keywords from and\
    \ accept are optional and can be omitted.\n          <aut-num> is an autonomous\
    \ system as defined in as-in.\n          <local-rid> contains the IP address of\
    \ the border router in\n          the AS describing the policy.  IP address must\
    \ be in prefix\n          length format.\n          <neighbor-rid> contains the\
    \ IP address of neighbor AS's border\n          router from which this AS accept\
    \ routes defined in the\n          <routing policy expression>.  IP addresses\
    \ must be in prefix\n          length format.\n          <preference> is defined\
    \ as follows:\n          (<pref-type>=<value>)\n          It should be noted the\
    \ parenthesis \"(\" and \")\" and the\n          \"<pref-type>\" keyword must\
    \ be present for this preference to\n          be valid.\n          <pref-type>\
    \ currently only supports \"pref\".  It could be\n          expanded to other\
    \ type of preference such as TOS/QOS as\n          routing technology matures.\n\
    \          <value> can take one of the following values:\n          <cost>\n \
    \              <cost> is a positive integer used to express a relative\n     \
    \          cost of routes learned. The lower the cost the more\n             \
    \  preferred the route. This <cost> value is only comparable\n               to\
    \ other interas-in attributes, not to as-in attributes.\n          MED\n     \
    \          This indicates the AS will use the\n               MUTLI_EXIT_DISCRIMINATOR\
    \ (MED) metric, as implemented in\n               BGP4 and IDRP, sent from its\
    \ neighbor AS.\n               NOTE: Combinations of MED and <cost> should be\
    \ avoided\n               for the same destinations.\n               CAVEAT: The\
    \ pref-type values may well be enhanced in the\n               future as more\
    \ inter-ASs routing protocols introduce\n               other metrics.\n     \
    \          Any route specified in interas-in and not specified in\n          \
    \     as-in is assumed not accepted between the ASes concerned.\n            \
    \   Diagnostic tools should flag this inconsistency as an\n               error.\
    \  It should be noted that if an interas-in policy\n               is specified\
    \ then it is mandatory to specify the\n               corresponding global policy\
    \ in the as-in line. Please\n               note there is no relevance in the\
    \ cost associated with\n               as-in and the preferences used in interas-in.\n\
    \          <routing policy expression> is an expression as defined in\n      \
    \    as-in above.\n     Examples:\n          NB: This line is wrapped for readability.\n\
    \          interas-in: from AS1104 192.(pref=10)/accept.AS786.AS987\n        \
    \  interas-in: from AS1104 192.87.45.(pref=20)2accept.AS987\n          interas-in:\
    \ from AS1103 192.87.45.2(pref=MED)8accept2ANY\n     Status: optional, multiple\
    \ lines allowed\n"
- title: 'interas-out:'
  contents:
  - "interas-out:\n     Format:\n          to <aut-num> <local-rid> <neighbor-rid>\
    \ [<metric>] announce\n          <routing policy expression>\n          The keywords\
    \ to and announce are optional and can be omitted.\n          The definitions\
    \ of <aut-num>, <local-rid> <neighbor-rid>, and\n          <routing policy expression>\
    \ are identical to those defined in\n          interas-in.\n          <metric>\
    \ is optional and is defined as follows:\n          (<metric-type>=<value>)\n\
    \          It should be noted the parenthesis \"(\" and \")\" and the\n      \
    \    keywords of \"<metric-type>\" must be present for this metric to\n      \
    \    be valid.\n          <metric-type> currently only supports \"metric-out\"\
    .  It could\n          be expanded to other type of preference such as TOS/QOS\
    \ as\n          routing technology matures.\n          <value> can take one of\
    \ the following values:\n          <num-metric>\n               <num-metric> is\
    \ a pre-configured metric for out-bound\n               routes. The lower the\
    \ cost the more preferred the route.\n               This <num-metric> value is\
    \ literally passed by the\n               routing protocol to the neighbor. It\
    \ is expected that it\n               is used there which is indicated by pref=MED\
    \ on the\n               corresponding interas-in attribute.  It should be noted\n\
    \               that whether to accept the outgoing metric or not is\n       \
    \        totally within the discretion of the neighbor AS.\n          IGP\n  \
    \             This indicates that the metric reflects the ASs internal\n     \
    \          topology cost. The topology is reflected here by using\n          \
    \     MED which is derived from the AS's IGP metric.\n               NOTE: Combinations\
    \ of IGP and <num-metric> should be\n               avoided for the same destinations.\n\
    \               CAVEAT: The metric-out values may well be enhanced in the\n  \
    \             future as more interas protocols make use of metrics.\n        \
    \       Any route specified in interas-out and not specified in\n            \
    \   as-out is assumed not announced between the ASes\n               concerned.\
    \ Diagnostic tools should flag this\n               inconsistency as an error.\
    \  It should be noted that if an\n               interas-out policy is specified\
    \ then it is mandatory to\n               specify the corresponding global policy\
    \ in the as-out\n               line.\n     Examples:\n          interas-out:ntoiAS1104p192.87.45.254/32t192.87.45.80/32\n\
    \          interas-out: to AS1104m192.87.45.254/32n192.87.45.80/32\n         \
    \ interas-out: to AS1103 192.87.45.254/325192.87.45.80/32\n                  \
    \                  (metric-out=IGP) announce ANY\n     Status: optional, multiple\
    \ lines allowed\n"
- title: 'as-exclude:'
  contents:
  - "as-exclude:\n     A list of transit ASes to ignore all routes from.\n     Format:\n\
    \          exclude <aut-num> to <exclude-route-keyword>\n          Keywords exclude\
    \ and to are optional and can again be omitted.\n          <aut-num> refers to\
    \ the transit AS in question.\n          an <exclude-route-keyword> can be ONE\
    \ of the following.\n          1.   <aut-num>\n          2.   AS macro\n     \
    \     3.   Community\n          4.   ANY\n     Examples:\n          as-exclude:\
    \ exclude AS690 to HEPNET\n          This means exclude any HEPNET routes which\
    \ have a route via\n          AS690.\n          as-exclude: exclude AS1800 to\
    \ AS-EUNET\n          This means exclude any AS-EUNET routes which have a route\
    \ via\n          AS1800.\n          as-exclude: exclude AS1755 to AS1104\n   \
    \       This means exclude any AS1104 route which have a route via\n         \
    \ AS1755.\n          as-exclude: exclude AS1104 to ANY\n          This means exclude\
    \ all routes which have a route via AS1104.\n     Status: optional, multiple lines\
    \ allowed\n"
- title: 'default:'
  contents:
  - "default:\n     An indication of how default routing is done.\n     Format:\n\
    \          <aut-num> <relative cost> <default-expression>\n          where <aut-num>\
    \ is the AS peer you will default route to,\n          and <relative cost> is\
    \ the relative cost is a positive integer\n          used to express a preference\
    \ for default. There is no\n          relationship to the cost used in the as-in\
    \ tag. The AS peer\n          with the lowest cost is used for default over ones\
    \ with higher\n          costs.\n          <default-expression> is optional and\
    \ provides information on\n          how a default route is selected. It can take\
    \ the following\n          formats:\n          1.   static. This indicates that\
    \ a default is statically\n               configured to this AS peer.\n      \
    \    2.   A route list with the syntax as described in the as-in\n           \
    \    attribute. This indicates that this list of routes is\n               used\
    \ to generate a default route. A special but valid\n               value in this\
    \ is the special route used by some routing\n               protocols to indicate\
    \ default: 0.0.0.0/0\n          3.   default. This is the same as {0.0.0.0/0}.\
    \ This means that\n               the routing protocol between these two peers\
    \ generates a\n               true default.\n     Examples:\n          default:\
    \ AS1755 10\n          default: AS786   5 {140.222.0.0/16, 192.87.45.0/24}\n \
    \         default: AS2043 15 default\n     Status: optional, multiple lines allowed\n"
- title: 'tech-c:'
  contents:
  - "tech-c:\n     Full name or uniquely assigned NIC-handle of a technical contact\n\
    \     person. This is someone to be contacted for technical problems such\n  \
    \   as misconfiguration.\n     Format:\n          <firstname> <initials> <lastname>\
    \ or <nic-handle>\n     Example:\n          tech-c: John E Doe\n          tech-c:\
    \ JED31\n     Status: mandatory, multiple lines allowed\n"
- title: 'admin-c:'
  contents:
  - "admin-c:\n     Full name or uniquely assigned NIC-handle of an administrative\n\
    \     contact person. In many cases this would be the name of the\n     guardian.\n\
    \     Format:\n          <firstname> <initials> <lastname>  or  <nic-handle>\n\
    \     Example:\n          admin-c: Joe T Bloggs\n          admin-c: JTB1\n   \
    \  Status: mandatory, multiple lines allowed\n"
- title: 'guardian:'
  contents:
  - "guardian:\n     Mailbox of the guardian of the Autonomous system.\n     Format:\n\
    \          <email-address>\n          The <email-address> should be in RFC822\
    \ domain format wherever\n          possible.\n     Example:\n          guardian:\
    \ as1104-guardian@nikhef.nl\n     Status: mandatory, only one line and e-mail\
    \ address allowed\n"
- title: 'remarks:'
  contents:
  - "remarks:\n     Remarks/comments, to be used only for clarification.\n     Format:\n\
    \          free text\n     Example:\n          remarks: Multihomed AS talking\
    \ to AS1755 and AS786\n          remarks: Will soon connect to AS1104 also.\n\
    \     Status: optional, multiple lines allowed\n"
- title: 'notify:'
  contents:
  - "notify:\n     The notify attribute contains an email address to which\n     notifications\
    \ of changes to this object should be sent. See also\n     [11].\n     Format:\n\
    \          <email-address>\n          The <email-address> should be in RFC822\
    \ domain syntax wherever\n          possible.\n     Example:\n          notify:\
    \ Marten.Terpstra@ripe.net\n     Status: optional, multiple lines allowed\n"
- title: 'mnt-by:'
  contents:
  - "mnt-by:\n     The mnt-by attribute contains a registered maintainer name.  See\n\
    \     also [11].\n     Format:\n          <registered maintainer name>\n     Example:\n\
    \          mnt-by: RIPE-DBM\n     Status: optional, multiple lines allowed\n"
- title: 'changed:'
  contents:
  - "changed:\n     Who changed this object last, and when was this change made.\n\
    \     Format:\n          <email-address> YYMMDD\n          <email-address> should\
    \ be the address of the person who made\n          the last change. YYMMDD denotes\
    \ the date this change was made.\n     Example:\n          changed: johndoe@terabit-labs.nn\
    \ 900401\n     Status: mandatory, multiple lines allowed\n"
- title: 'source:'
  contents:
  - "source:\n     Source of the information.\n     This is used to separate information\
    \ from different sources kept by\n     the same database software. For RIPE database\
    \ entries the value is\n     fixed to RIPE.\n     Format:\n          RIPE\n  \
    \   Status: mandatory, only one line allowed\n"
- title: Appendix B - Syntax details for the community object.
  contents:
  - "Appendix B - Syntax details for the community object.\n   Here is a summary of\
    \ the tags associated with community object itself\n   and their status. The first\
    \ column specifies the attribute, the\n   second column whether this attribute\
    \ is mandatory in the community\n   object, and the third column whether this\
    \ specific attribute can\n   occur only once per object [single], or more than\
    \ once [multiple].\n   When specifying multiple lines per attribute, the attribute\
    \ name must\n   be repeated. See [6] the example for the descr: attribute.\n \
    \  community:      [mandatory]          [single]\n   descr:          [mandatory]\
    \          [multiple]\n   authority:      [mandatory]          [single]\n   guardian:\
    \       [mandatory]          [single]\n   tech-c:         [mandatory]        \
    \  [multiple]\n   admin-c:        [mandatory]          [multiple]\n   remarks:\
    \        [optional]           [multiple]\n   notify:         [optional]      \
    \     [multiple]\n   mnt-by:         [optional]           [multiple]\n   changed:\
    \        [mandatory]          [multiple]\n   source:         [mandatory]     \
    \     [single]\n   Each attribute has the following syntax:\n   community:\n \
    \       Name of the community. The name of the community should be\n        descriptive\
    \ of the community it describes.\n        Format:\n             Upper case text\
    \ string which cannot start with \"AS\" or any\n             of the <routing policy\
    \ expression> KEYWORDS. See Appendix\n             A.\n        Example:\n    \
    \         community: WCW\n        Status: mandatory, only one line allowed\n \
    \  descr:\n        A short description of the community represented.\n       \
    \ Format:\n             free text\n        Example:\n             descr: Science\
    \ Park Watergraafsmeer\n             descr: Amsterdam\n        Status: mandatory,\
    \ multiple lines allowed\n   authority:\n        The formal authority for this\
    \ community. This could be an\n        organisation, institute, committee, etc.\n\
    \        Format:\n             free text\n        Example:\n             authority:\
    \  WCW LAN Committee\n        Status: mandatory, only one line allowed\n   guardian:\n\
    \        Mailbox of the guardian of the community.\n        Format:\n        \
    \     <email-address>\n             The <email-address> should be in RFC822 domain\
    \ format\n             wherever possible.\n        Example:\n             guardian:\
    \ wcw-guardian@nikhef.nl\n        Status: mandatory, only one line and email address\
    \ allowed\n   tech-c:\n        Full name or uniquely assigned NIC-handle of an\
    \ technical\n        contact person for this community.\n        Format:\n   \
    \          <firstname> <initials> <lastname> or <nic-handle>\n        Example:\n\
    \             tech-c: John E Doe\n             tech-c: JED31\n        Status:\
    \ mandatory, multiple lines allowed\n   admin-c:\n        Full name or uniquely\
    \ assigned NIC-handle of an administrative\n        contact person. In many cases\
    \ this would be the name of the\n        guardian.\n        Format:\n        \
    \     <firstname> <initials> <lastname> or <nic-handle>\n        Example:\n  \
    \           admin-c: Joe T Bloggs\n             admin-c: JTB1\n        Status:\
    \ mandatory, multiple lines allowed\n   remarks:\n        Remarks/comments, to\
    \ be used only for clarification.\n        Format:\n             free text\n \
    \       Example:\n             remarks: Temporary community\n             remarks:\
    \ Will be removed after split into ASes\n        Status: optional, multiple lines\
    \ allowed\n   notify:\n        The notify attribute contains an email address\
    \ to which\n        notifications of changes to this object should be send. See\
    \ also\n        [11].\n        Format:\n             <email-address>\n       \
    \      The <email-address> should be in RFC822 domain syntax\n             wherever\
    \ possible.\n        Example:\n             notify: Marten.Terpstra@ripe.net\n\
    \        Status: optional, multiple lines allowed\n   mnt-by:\n        The mnt-by\
    \ attribute contains a registered maintainer name.  See\n        also [11].\n\
    \        Format:\n             <registered maintainer name>\n        Example:\n\
    \             mnt-by: RIPE-DBM\n        Status: optional, multiple lines allowed\n\
    \   changed:\n        Who changed this object last, and when was this change made.\n\
    \        Format:\n             <email-address> YYMMDD\n             <email-address>\
    \ should be the address of the person who\n             made the last change.\
    \ YYMMDD denotes the date this change\n             was made.\n        Example:\n\
    \             changed: johndoe@terabit-labs.nn 900401\n        Status: mandatory,\
    \ multiple lines allowed\n   source:\n        Source of the information.\n   \
    \     This is used to separate information from different sources kept\n     \
    \   by the same database software. For RIPE database entries the\n        value\
    \ is fixed to RIPE.\n        Format:\n             RIPE\n        Status: mandatory,\
    \ only one line allowed\n"
- title: Appendix C - AS Macros syntax definition.
  contents:
  - "Appendix C - AS Macros syntax definition.\n   Here is a summary of the tags associated\
    \ with as-macro object itself\n   and their status. The first column specifies\
    \ the attribute, the\n   second column whether this attribute is mandatory in\
    \ the as-macro\n   object, and the third column whether this specific attribute\
    \ can\n   occur only once per object [single], or more than once [multiple].\n\
    \   When specifying multiple lines per attribute, the attribute name must\n  \
    \ be repeated. See [6] the example for the descr: attribute.\n   as-macro:   \
    \  [mandatory]          [single]\n   descr:        [mandatory]          [multiple]\n\
    \   as-list:      [mandatory]          [multiple]\n   guardian:     [mandatory]\
    \          [single]\n   tech-c:       [mandatory]          [multiple]\n   admin-c:\
    \      [mandatory]          [multiple]\n   remarks:      [optional]          \
    \ [multiple]\n   notify:       [optional]           [multiple]\n   mnt-by:   \
    \    [optional]           [multiple]\n   changed:      [mandatory]          [multiple]\n\
    \   source:       [mandatory]          [single]\n   Each attribute has the following\
    \ syntax:\n   as-macro:\n        The name of a macro containing at least two Autonomous\
    \ Systems\n        grouped together for ease of administration.\n        Format:\n\
    \             AS-<string>\n             The <string> should be in upper case and\
    \ not contain any\n             special characters.\n        Example:\n      \
    \       as-macro: AS-EBONE\n        Status: mandatory, only one line allowed\n\
    \   descr:\n        A short description of the Autonomous System Macro.\n    \
    \    Format:\n             free text\n        Example:\n             descr:  Macro\
    \ for EBONE connected ASes\n        Status: mandatory, multiple lines allowed\n\
    \   as-list:\n        The list of ASes or other AS macros that make up this macro.\
    \ It\n        should be noted that recursive use of AS macros is to be\n     \
    \   encouraged.\n        Format:\n             <aut-num> <as-macro> ...\n    \
    \         See Appendix A for <aut-num> definition.\n        Example:\n       \
    \      as-list: AS786 AS513 AS1104\n             as-list: AS99 AS-NORDUNET\n \
    \       Status: mandatory, multiple lines allowed\n   guardian:\n        Mailbox\
    \ of the guardian of this AS macro.\n        Format:\n             <email-address>\n\
    \             The <email-address> should be in RFC822 domain format\n        \
    \     wherever possible.\n        Example:\n             guardian: as-ebone-guardian@ebone.net\n\
    \        Status: mandatory, only one line and e-mail address allowed\n   tech-c:\n\
    \        Full name or uniquely assigned NIC-handle of a technical contact\n  \
    \      person for this macro. This is someone to be contacted for\n        technical\
    \ problems such as misconfiguration.\n        Format:\n             <firstname>\
    \ <initials> <lastname> or <nic-handle>\n        Examples:\n             tech-c:\
    \ John E Doe\n             tech-c: JED31\n        Status: mandatory, multiple\
    \ lines allowed\n   admin-c:\n        Full name or uniquely assigned NIC-handle\
    \ of an administrative\n        contact person. In many cases this would be the\
    \ name of the\n        guardian.\n        Format:\n             <firstname> <initials>\
    \ <lastname> or <nic-handle>\n        Examples:\n             admin-c: Joe T Bloggs\n\
    \             admin-c: JTB1\n        Status: mandatory, multiple lines allowed\n\
    \   remarks:\n        Remarks/comments, to be used only for clarification.\n \
    \       Format:\n             free text\n        Example:\n             remarks:\
    \ AS321 will be removed from this Macro shortly\n        Status: optional, multiple\
    \ lines allowed\n   notify:\n        The notify attribute contains an email address\
    \ to which\n        notifications of changes to this object should be send. See\
    \ also\n        [11].\n        Format:\n             <email-address>\n       \
    \      The <email-address> should be in RFC822 domain syntax\n             wherever\
    \ possible.\n        Example:\n             notify: Marten.Terpstra@ripe.net\n\
    \        Status: optional, multiple lines allowed\n   mnt-by:\n        The mnt-by\
    \ attribute contains a registered maintainer name.  See\n        also [11].\n\
    \        Format:\n             <registered maintainer name>\n        Example:\n\
    \             mnt-by: RIPE-DBM\n        Status: optional, multiple lines allowed\n\
    \   changed:\n        Who changed this object last, and when was this change made.\n\
    \        Format:\n             <email-address> YYMMDD\n             <email-address>\
    \ should be the address of the person who\n             made the last change.\
    \ YYMMDD denotes the date this change\n             was made.\n        Example:\n\
    \             changed: johndoe@terabit-labs.nn 900401\n        Status: mandatory,\
    \ multiple lines allowed\n   source:\n        Source of the information.\n   \
    \     This is used to separate information from different sources kept\n     \
    \   by the same database software. For RIPE database entries the\n        value\
    \ is fixed to RIPE.\n        Format:\n             RIPE\n        Status: mandatory,\
    \ only one line allowed\n"
- title: Appendix D - Syntax for the "route" object.
  contents:
  - "Appendix D - Syntax for the \"route\" object.\n   There is a summary of the tags\
    \ associated with route object itself\n   and their status. The first column specifies\
    \ the attribute, the\n   second column whether this attribute is mandatory in\
    \ the community\n   object, and the third column whether this specific attribute\
    \ can\n   occur only once per object [single], or more than once [multiple].\n\
    \   When specifying multiple lines per attribute, the attribute name must\n  \
    \ be repeated. See [6] the example for the descr: attribute.\n   route:      \
    \    [mandatory]          [single]\n   descr:          [mandatory]          [multiple]\n\
    \   origin:         [mandatory]          [single]\n   hole:           [optional]\
    \           [multiple]\n   withdrawn:      [optional]           [single]\n   comm-list:\
    \      [optional]           [multiple]\n   remarks:        [optional]        \
    \   [multiple]\n   notify:         [optional]           [multiple]\n   mnt-by:\
    \         [optional]           [multiple]\n   changed:        [mandatory]    \
    \      [multiple]\n   source:         [mandatory]          [single]\n   Each attribute\
    \ has the following syntax:\n   route:\n        Route being announced.\n     \
    \   Format:\n             Classless representation of a route with the RIPE database\n\
    \             known as the \"prefix length\" representation. See [10] for\n  \
    \           more details on classless representations.\n        Examples:\n  \
    \           route: 192.87.45.0/24\n             This represents addressable bits\
    \ 192.87.45.0 to\n             192.87.45.255.\n             route: 192.1.128.0/17\n\
    \             This represents addressable bits 192.1.128.0 to\n             192.1.255.255.\n\
    \        Status: mandatory, only one line allowed\n   origin:\n        The autonomous\
    \ system announcing this route.\n        Format:\n             <aut-num>\n   \
    \          See Appendix A for <aut-num> syntax.\n        Example:\n          \
    \   origin: AS1104\n        Status: mandatory, only one line allowed\n   hole:\n\
    \        Denote the parts of the address space covered this route object\n   \
    \     to which the originator does not provide connectivity. These\n        holes\
    \ may include routes that are being currently routed by\n        another provider\
    \ (e.g., a customer using that space has moved to\n        a different service\
    \ provider).  They may also include space that\n        has not yet been assigned\
    \ to any customer.\n        Format:\n             Classless representation of\
    \ a route with the RIPE database\n             known as the \"prefix length\"\
    \ representation. See [10] for\n             more details on classless representations.\
    \ It should be\n             noted that this sub-aggregate must be a component\
    \ of that\n             registered in the route object.\n        Example:\n  \
    \           hole: 193.0.4.0/24\n        Status: optional, multiple lines allowed\n\
    \   withdrawn:\n        Used to denote the day this route has been withdrawn from\
    \ the\n        Internet routing mesh. This will be usually be used when a less\n\
    \        specific aggregate route is now routed the more specific (i.e.\n    \
    \    this route) is not need anymore.\n        Format:\n             YYMMDD\n\
    \             YYMMDD denotes the date this route was withdrawn.\n        Example:\n\
    \             withdrawn: 940711\n        Status: optional, one line allowed.\n\
    \   comm-list:\n        List of one or more communities this route is part of.\n\
    \        Format:\n             <community> <community> ...\n             See Appendix\
    \ B for <community> definition.\n        Example:\n             comm-list: HEP\
    \ LEP\n        Status: optional, multiple lines allowed\n   remarks:\n       \
    \ Remarks/comments, to be used only for clarification.\n        Format:\n    \
    \         free text\n        Example:\n             remarks: Multihomed AS talking\
    \ to AS1755 and AS786\n             remarks: Will soon connect to AS1104 also.\n\
    \        Status: optional, multiple lines allowed\n   notify:\n        The notify\
    \ attribute contains an email address to which\n        notifications of changes\
    \ to this object should be send. See also\n        [11].\n        Format:\n  \
    \           <email-address>\n             The <email-address> should be in RFC822\
    \ domain syntax\n             wherever possible.\n        Example:\n         \
    \    notify: Marten.Terpstra@ripe.net\n        Status: optional, multiple lines\
    \ allowed\n   mnt-by:\n        The mnt-by attribute contains a registered maintainer\
    \ name.  See\n        also [11].\n        Format:\n             <registered maintainer\
    \ name>\n        Example:\n             mnt-by: RIPE-DBM\n        Status: optional,\
    \ multiple lines allowed\n   changed:\n        Who changed this object last, and\
    \ when was this change made.\n        Format:\n             <email-address> YYMMDD\n\
    \             <email-address> should be the address of the person who\n      \
    \       made the last change. YYMMDD denotes the date this change\n          \
    \   was made.\n        Example:\n             changed: johndoe@terabit-labs.nn\
    \ 900401\n        Status: mandatory, multiple lines allowed\n   source:\n    \
    \    Source of the information.\n        This is used to separate information\
    \ from different sources kept\n        by the same database software. For RIPE\
    \ database entries the\n        value is fixed to RIPE.\n        Format:\n   \
    \          RIPE\n        Status: mandatory, only one line allowed\n"
- title: Appendix E - List of reserved words
  contents:
  - "Appendix E - List of reserved words\n   The following list of words are reserved\
    \ for use within the\n   attributes of the AS object. The use of these words is\
    \ solely for the\n   purpose of clarity. All keywords must be lower case.\n  \
    \         accept\n           announce\n           exclude\n           from\n \
    \          to\n           transit\n   Examples of the usage of the reserved words\
    \ are:\n   as-in: from <neighborAS> accept <route>\n   as-out: to <neighborAS>\
    \ announce <route>\n   as-exclude: exclude <ASpath> to <destination>\n   as-transit:\
    \ transit <ASpath> to <destination>\n   default: from <neighborAS> accept <route>\n\
    \   default: to <neighborAS> announce <route>\n   Note: that as-transit is an\
    \ experimental attribute. See section 10.\n"
- title: Appendix F - Motivations for RIPE-81++
  contents:
  - "Appendix F - Motivations for RIPE-81++\n   This appendix gives motivations for\
    \ the major changes in this\n   proposal from ripe-81.\n   The main goals of the\
    \ routing registry rework are:\n     SPLIT\n        Separate the allocation and\
    \ routing registry functions into\n        different database objects. This will\
    \ facilitate data management\n        if the Internet registry and routing registry\
    \ functions are\n        separated (like in other parts of the world). It will\
    \ also make\n        more clear what is part of the routing registry and who has\n\
    \        authority to change allocation vs. routing data.\n      CIDR\n      \
    \  Add the possibility to specify classless routes in the routing\n        registry.\
    \  Classless routes are being used in Internet\n        production now.  Aggregation\
    \ information in the routing registry\n        is necessary for network layer\
    \ troubleshooting. It is also\n        necessary because aggregation influences\
    \ routing policies\n        directly.\n     CALLOC\n        Add the possibility\
    \ to allocate address space on classless\n        boundaries in the allocation\
    \ registry. This is a way to preserve\n        address space.\n     CLEAN\n  \
    \      To clean up some of the obsolete and unused parts of the routing\n    \
    \    registry.\n   The major changes are now discussed in turn:\n   Introduce\
    \ Classless Addresses\n   CIDR, CALLOC\n   Introduce route object.\n   SPLIT,\
    \ CIDR and CALLOC.\n   Delete obsolete attributes from inetnum.\n   CLEAN.\n \
    \  Delete RIPE-DB and LOCAL from routing policy expressions.\n   CLEAN\n   Allow\
    \ multiple ASes to originate the same route\n   Because it is being done. CIDR.\
    \ Made possible by SPLIT.\n"
- title: Appendix G - Transition strategy from RIPE-81 to RIPE-81++
  contents:
  - 'Appendix G - Transition strategy from RIPE-81 to RIPE-81++

    '
- title: Transition from the routing registry described by ripe-81 to the routing
  contents:
  - 'Transition from the routing registry described by ripe-81 to the routing

    '
- title: registry described in this document is a straightforward process once
  contents:
  - 'registry described in this document is a straightforward process once

    '
- title: the new registry functions have been implemented in the database
  contents:
  - 'the new registry functions have been implemented in the database

    '
- title: software and are understood by the most commonly used registry tools.
  contents:
  - 'software and are understood by the most commonly used registry tools.

    '
- title: The routing related attributes in the classful inetnum objects of ripe-
  contents:
  - 'The routing related attributes in the classful inetnum objects of ripe-

    '
- title: 81 can be directly translated into new routing objects. Then these
  contents:
  - '81 can be directly translated into new routing objects. Then these

    '
- title: attributes can be deleted from the inetnum object making that object if
  contents:
  - 'attributes can be deleted from the inetnum object making that object if

    '
- title: conform to the new schema.
  contents:
  - 'conform to the new schema.

    '
- title: 'Proposed transition steps:'
  contents:
  - "Proposed transition steps:\n  1) Implement classless addresses and new object\
    \ definition in the\n     database software.\n  2) Make common tools understand\
    \ the new schema and prefer it if both\n     old and new are present.\n  3) Invite\
    \ everyone to convert their data to the new format.  This can\n     be encouraged\
    \ by doing conversions automatically and proposing them\n     to maintainers.\n\
    \  4) At a flag day remove all remaining routing information from the\n     inetnum\
    \ objects.  Before the flag day all usage of obsoleted\n     inetnum attributes\
    \ has to cease and all other routing registry\n     functions have to be taken\
    \ over by the new objects and attributes.\n"
