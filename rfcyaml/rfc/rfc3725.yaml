- title: __initial_text__
  contents:
  - "       Best Current Practices for Third Party Call Control (3pcc)\n         \
    \       in the Session Initiation Protocol (SIP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Third party call control refers to the ability of one entity to\n\
    \   create a call in which communication is actually between other\n   parties.\
    \  Third party call control is possible using the mechanisms\n   specified within\
    \ the Session Initiation Protocol (SIP).  However,\n   there are several possible\
    \ approaches, each with different benefits\n   and drawbacks.  This document discusses\
    \ best current practices for\n   the usage of SIP for third party call control.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   3\n   4.  3pcc Call Establishment  . . . . . . . . . . . . . . . . . . \
    \  3\n       4.1.  Flow I . . . . . . . . . . . . . . . . . . . . . . . .   4\n\
    \       4.2.  Flow II. . . . . . . . . . . . . . . . . . . . . . . .   5\n   \
    \    4.3.  Flow III . . . . . . . . . . . . . . . . . . . . . . .   7\n      \
    \ 4.4.  Flow IV. . . . . . . . . . . . . . . . . . . . . . . .   8\n   5.  Recommendations\
    \  . . . . . . . . . . . . . . . . . . . . . .   9\n   6.  Error Handling . .\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n   7.  Continued Processing .\
    \ . . . . . . . . . . . . . . . . . . .  11\n   8.  3pcc and Early Media . . .\
    \ . . . . . . . . . . . . . . . . .  13\n   9.  Third Party Call Control and SDP\
    \ Preconditions . . . . . . .  16\n       9.1.  Controller Initiates . . . . .\
    \ . . . . . . . . . . . .  16\n       9.2.  Party A Initiates. . . . . . . . .\
    \ . . . . . . . . . .  18\n   10. Example Call Flows . . . . . . . . . . . . .\
    \ . . . . . . . .  21\n       10.1. Click-to-Dial. . . . . . . . . . . . . . .\
    \ . . . . . .  21\n       10.2. Mid-Call Announcement Capability . . . . . . .\
    \ . . . .  23\n   11. Implementation Recommendations . . . . . . . . . . . . .\
    \ . .  25\n   12. Security Considerations. . . . . . . . . . . . . . . . . . .\
    \  26\n       12.1. Authorization and Authentication . . . . . . . . . . .  26\n\
    \       12.2. End-to-End Encryption and Integrity. . . . . . . . . .  27\n   13.\
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . .  28\n   14. References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  28\n       14.1. Normative\
    \ References . . . . . . . . . . . . . . . . .  28\n       14.2. Informative References\
    \ . . . . . . . . . . . . . . . .  29\n   15. Authors' Addresses . . . . . . .\
    \ . . . . . . . . . . . . . .  30\n   16. Full Copyright Statement . . . . . .\
    \ . . . . . . . . . . . .  31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the traditional telephony context, third party call control\
    \ allows\n   one entity (which we call the controller) to set up and manage a\n\
    \   communications relationship between two or more other parties.  Third\n  \
    \ party call control (referred to as 3pcc) is often used for operator\n   services\
    \ (where an operator creates a call that connects two\n   participants together)\
    \ and conferencing.\n   Similarly, many SIP services are possible through third\
    \ party call\n   control.  These include the traditional ones on the PSTN, but\
    \ also\n   new ones such as click-to-dial.  Click-to-dial allows a user to click\n\
    \   on a web page when they wish to speak to a customer service\n   representative.\
    \  The web server then creates a call between the user\n   and a customer service\
    \ representative.  The call can be between two\n   phones, a phone and an IP host,\
    \ or two IP hosts.\n   Third party call control is possible using only the mechanisms\n\
    \   specified within RFC 3261 [1].  Indeed, many different call flows are\n  \
    \ possible, each of which will work with SIP compliant user agents.\n   However,\
    \ there are benefits and drawbacks to each of these flows.\n   The usage of third\
    \ party call control also becomes more complex when\n   aspects of the call utilize\
    \ SIP extensions or optional features of\n   SIP.  In particular, the usage of\
    \ RFC 3312 [2] (used for coupling of\n   signaling to resource reservation) with\
    \ third party call control is\n   non-trivial, and is discussed in Section 9.\
    \  Similarly, the usage of\n   early media (where session data is exchanged before\
    \ the call is\n   accepted) with third party call control is not trivial; both\
    \ of them\n   specify the way in which user agents generate and respond to SDP,\
    \ and\n   it is not clear how to do both at the same time.  This is discussed\n\
    \   further in Section 8.\n   This document serves as a best current practice\
    \ for implementing\n   third party call control without usage of any extensions\
    \ specifically\n   designed for that purpose.  Section 4 presents the known call\
    \ flows\n   that can be used to achieve third party call control, and provides\n\
    \   guidelines on their usage.  Section 9 discusses the interactions of\n   RFC\
    \ 3312 [2] with third party call control.  Section 8 discusses the\n   interactions\
    \ of early media with third party call control.  Section\n   10 provides example\
    \ applications that make usage of the flows\n   recommended here.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [3] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3. Definitions
  contents:
  - "3. Definitions\n   The following terms are used throughout this document:\n \
    \  3pcc: Third Party Call Control, which refers to the general ability\n     \
    \    to manipulate calls between other parties.\n   Controller: A controller is\
    \ a SIP User Agent that wishes to create a\n         session between two other\
    \ user agents.\n"
- title: 4. 3pcc Call Establishment
  contents:
  - "4. 3pcc Call Establishment\n   The primary primitive operation of third party\
    \ call control is the\n   establishment of a session between participants A and\
    \ B.\n   Establishment of this session is orchestrated by a third party,\n   referred\
    \ to as the controller.\n   This section documents three call flows that the controller\
    \ can\n   utilize in order to provide this primitive operation.\n"
- title: 4.1.  Flow I
  contents:
  - "4.1.  Flow I\n             A              Controller               B\n      \
    \       |(1) INVITE no SDP  |                   |\n             |<------------------|\
    \                   |\n             |(2) 200 offer1     |                   |\n\
    \             |------------------>|                   |\n             |      \
    \             |(3) INVITE offer1  |\n             |                   |------------------>|\n\
    \             |                   |(4) 200 OK answer1 |\n             |      \
    \             |<------------------|\n             |                   |(5) ACK\
    \            |\n             |                   |------------------>|\n     \
    \        |(6) ACK answer1    |                   |\n             |<------------------|\
    \                   |\n             |(7) RTP            |                   |\n\
    \             |.......................................|\n                    \
    \            Figure 1\n   The call flow for Flow I is shown in Figure 1.  The\
    \ controller first\n   sends an INVITE A (1).  This INVITE has no session description.\
    \  A's\n   phone rings, and A answers.  This results in a 200 OK (2) that\n  \
    \ contains an offer [4].  The controller needs to send its answer in\n   the ACK,\
    \ as mandated by [1].  To obtain the answer, it sends the\n   offer it got from\
    \ A (offer1) in an INVITE to B (3).  B's phone rings.\n   When B answers, the\
    \ 200 OK (4) contains the answer to this offer,\n   answer1.  The controller sends\
    \ an ACK to B (5), and then passes\n   answer1 to A in an ACK sent to it (6).\
    \  Because the offer was\n   generated by A, and the answer generated by B, the\
    \ actual media\n   session is between A and B.  Therefore, media flows between\
    \ them (7).\n   This flow is simple, requires no manipulation of the SDP by the\n\
    \   controller, and works for any media types supported by both\n   endpoints.\
    \  However, it has a serious timeout problem.  User B may\n   not answer the call\
    \ immediately.  The result is that the controller\n   cannot send the ACK to A\
    \ right away.  This causes A to retransmit the\n   200 OK response periodically.\
    \  As specified in RFC 3261 Section\n   13.3.1.4, the 200 OK will be retransmitted\
    \ for 64*T1 seconds.  If an\n   ACK does not arrive by then, the call is considered\
    \ to have failed.\n   This limits the applicability of this flow to scenarios\
    \ where the\n   controller knows that B will answer the INVITE immediately.\n"
- title: 4.2.  Flow II
  contents:
  - "4.2.  Flow II\n             A              Controller               B\n     \
    \        |(1) INVITE bh sdp1 |                   |\n             |<------------------|\
    \                   |\n             |(2) 200 sdp2       |                   |\n\
    \             |------------------>|                   |\n             |      \
    \             |(3) INVITE sdp2    |\n             |                   |------------------>|\n\
    \             |(4) ACK            |                   |\n             |<------------------|\
    \                   |\n             |                   |(5) 200 OK sdp3    |\n\
    \             |                   |<------------------|\n             |      \
    \             |(6) ACK            |\n             |                   |------------------>|\n\
    \             |(7) INVITE sdp3    |                   |\n             |<------------------|\
    \                   |\n             |(8) 200 OK sdp2    |                   |\n\
    \             |------------------>|                   |\n             |(9) ACK\
    \            |                   |\n             |<------------------|       \
    \            |\n             |(10) RTP           |                   |\n     \
    \        |.......................................|\n                         \
    \       Figure 2\n   An alternative flow, Flow II, is shown in Figure 2.  The\
    \ controller\n   first sends an INVITE to user A (1).  This is a standard INVITE,\n\
    \   containing an offer (sdp1) with a single audio media line, one codec,\n  \
    \ a random port number (but not zero), and a connection address of\n   0.0.0.0.\
    \ This creates an initial media stream that is \"black holed\",\n   since no media\
    \ (or RTCP packets [8]) will flow from A. The INVITE\n   causes A's phone to ring.\n\
    \      Note that the usage of 0.0.0.0, though recommended by RFC 3264,\n     \
    \ has numerous drawbacks.  It is anticipated that a future\n      specification\
    \ will recommend usage of a domain within the .invalid\n      DNS top level domain\
    \ instead of the 0.0.0.0 IP address.  As a\n      result, implementors are encouraged\
    \ to track such developments\n      once they arise.\n   When A answers (2), the\
    \ 200 OK contains an answer, sdp2, with a valid\n   address in the connection\
    \ line.  The controller sends an ACK (4).  It\n   then generates a second INVITE\
    \ (3).  This INVITE is addressed to user\n   B, and it contains sdp2 as the offer\
    \ to B. Note that the role of sdp2\n   has changed.  In the 200 OK (message 2),\
    \ it was an answer, but in the\n   INVITE, it is an offer.  Fortunately, all valid\
    \ answers are valid\n   initial offers.  This INVITE causes B's phone to ring.\
    \  When it\n   answers, it generates a 200 OK (5) with an answer, sdp3.  The\n\
    \   controller then generates an ACK (6).  Next, it sends a re-INVITE to\n   A\
    \ (7) containing sdp3 as the offer.  Once again, there has been a\n   reversal\
    \ of roles. sdp3 was an answer, and now it is an offer.\n   Fortunately, an answer\
    \ to an answer recast as an offer is, in turn, a\n   valid offer.  This re-INVITE\
    \ generates a 200 OK (8) with sdp2,\n   assuming that A doesn't decide to change\
    \ any aspects of the session\n   as a result of this re-INVITE.  This 200 OK is\
    \ ACKed (9), and then\n   media can flow from A to B. Media from B to A could\
    \ already start\n   flowing once message 5 was sent.\n   This flow has the advantage\
    \ that all final responses are immediately\n   ACKed.  It therefore does not suffer\
    \ from the timeout and message\n   inefficiency problems of flow 1.  However,\
    \ it too has troubles.\n   First off, it requires that the controller know the\
    \ media types to be\n   used for the call (since it must generate a \"blackhole\"\
    \ SDP, which\n   requires media lines).  Secondly, the first INVITE to A (1) contains\n\
    \   media with a 0.0.0.0 connection address.  The controller expects that\n  \
    \ the response contains a valid, non-zero connection address for A.\n   However,\
    \ experience has shown that many UAs respond to an offer of a\n   0.0.0.0 connection\
    \ address with an answer containing a 0.0.0.0\n   connection address.  The offer-answer\
    \ specification [4] explicitly\n   tells implementors not to do this, but at the\
    \ time of publication of\n   this document, many implementations still did.  If\
    \ A should respond\n   with a 0.0.0.0 connection address in sdp2, the flow will\
    \ not work.\n   However, the most serious flaw in this flow is the assumption\
    \ that\n   the 200 OK to the re-INVITE (message 8) contains the same SDP as in\n\
    \   message 2.  This may not be the case.  If it is not, the controller\n   needs\
    \ to re-INVITE B with that SDP (say, sdp4), which may result in\n   getting a\
    \ different SDP, sdp5, in the 200 OK from B.  Then, the\n   controller needs to\
    \ re-INVITE A again, and so on.  The result is an\n   infinite loop of re-INVITEs.\
    \  It is possible to break this cycle by\n   having very smart UAs which can return\
    \ the same SDP whenever\n   possible, or really smart controllers that can analyze\
    \ the SDP to\n   determine if a re-INVITE is really needed.  However, we wish\
    \ to keep\n   this mechanism simple, and avoid SDP awareness in the controller.\
    \  As\n   a result, this flow is not really workable.  It is therefore NOT\n \
    \  RECOMMENDED.\n"
- title: 4.3.  Flow III
  contents:
  - "4.3.  Flow III\n             A                 Controller                  B\n\
    \             |(1) INVITE no SDP     |                      |\n             |<---------------------|\
    \                      |\n             |(2) 200 offer1        |              \
    \        |\n             |--------------------->|                      |\n   \
    \          |(3) ACK answer1 (bh)  |                      |\n             |<---------------------|\
    \                      |\n             |                      |(4) INVITE no SDP\
    \     |\n             |                      |--------------------->|\n      \
    \       |                      |(5) 200 OK offer2     |\n             |      \
    \                |<---------------------|\n             |(6) INVITE offer2'  \
    \  |                      |\n             |<---------------------|           \
    \           |\n             |(7) 200 answer2'      |                      |\n\
    \             |--------------------->|                      |\n             |\
    \                      |(8) ACK answer2       |\n             |              \
    \        |--------------------->|\n             |(9) ACK               |     \
    \                 |\n             |<---------------------|                   \
    \   |\n             |(10) RTP              |                      |\n        \
    \     |.............................................|\n                      \
    \          Figure 3\n   A third flow, Flow III, is shown in Figure 3.\n   First,\
    \ the controller sends an INVITE (1) to user A without any SDP\n   (which is good,\
    \ since it means that the controller doesn't need to\n   assume anything about\
    \ the media composition of the session).  A's\n   phone rings.  When A answers,\
    \ a 200 OK is generated (2) containing\n   its offer, offer1.  The controller\
    \ generates an immediate ACK\n   containing an answer (3).  This answer is a \"\
    black hole\" SDP, with\n   its connection address equal to 0.0.0.0.\n   The controller\
    \ then sends an INVITE to B without SDP (4).  This\n   causes B's phone to ring.\
    \  When they answer, a 200 OK is sent,\n   containing their offer, offer2 (5).\
    \  This SDP is used to create a\n   re-INVITE back to A (6).  That re-INVITE is\
    \ based on offer2, but may\n   need to be reorganized to match up media lines,\
    \ or to trim media\n   lines.  For example, if offer1 contained an audio and a\
    \ video line,\n   in that order, but offer2 contained just an audio line, the\n\
    \   controller would need to add a video line to the offer (setting its\n   port\
    \ to zero) to create offer2'.  Since this is a re-INVITE, it\n   should complete\
    \ quickly in the general case.  That's good, since user\n   B is retransmitting\
    \ their 200 OK, waiting for an ACK.  The SDP in the\n   200 OK (7) from A, answer2',\
    \ may also need to be reorganized or\n   trimmed before sending it an the ACK\
    \ to B (8) as answer2.  Finally,\n   an ACK is sent to A (9), and then media can\
    \ flow.\n   This flow has many benefits.  First, it will usually operate without\n\
    \   any spurious retransmissions or timeouts (although this may still\n   happen\
    \ if a re-INVITE is not responded to quickly).  Secondly, it\n   does not require\
    \ the controller to guess the media that will be used\n   by the participants.\n\
    \   There are some drawbacks.  The controller does need to perform SDP\n   manipulations.\
    \  Specifically, it must take some SDP, and generate\n   another SDP which has\
    \ the same media composition, but has connection\n   addresses equal to 0.0.0.0.\
    \  This is needed for message 3.  Secondly,\n   it may need to reorder and trim\
    \ SDP X, so that its media lines match\n   up with those in some other SDP, Y.\
    \  Thirdly, the offer from B\n   (offer2) may have no codecs or media streams\
    \ in common with the offer\n   from A (offer 1).  The controller will need to\
    \ detect this condition,\n   and terminate the call.  Finally, the flow is far\
    \ more complicated\n   than the simple and elegant Flow I (Figure 1).\n"
- title: 4.4.  Flow IV
  contents:
  - "4.4.  Flow IV\n             A                 Controller                  B\n\
    \             |(1) INVITE offer1     |                      |\n             |no\
    \ media              |                      |\n             |<---------------------|\
    \                      |\n             |(2) 200 answer1       |              \
    \        |\n             |no media              |                      |\n   \
    \          |--------------------->|                      |\n             |(3)\
    \ ACK               |                      |\n             |<---------------------|\
    \                      |\n             |                      |(4) INVITE no SDP\
    \     |\n             |                      |--------------------->|\n      \
    \       |                      |(5) 200 OK offer2     |\n             |      \
    \                |<---------------------|\n             |(6) INVITE offer2'  \
    \  |                      |\n             |<---------------------|           \
    \           |\n             |(7) 200 answer2'      |                      |\n\
    \             |--------------------->|                      |\n             |\
    \                      |(8) ACK answer2       |\n             |              \
    \        |--------------------->|\n             |(9) ACK               |     \
    \                 |\n             |<---------------------|                   \
    \   |\n             |(10) RTP              |                      |\n        \
    \     |.............................................|\n                      \
    \          Figure 4\n   Flow IV shows a variation on Flow III that reduces its\
    \ complexity.\n   The actual message flow is identical, but the SDP placement\
    \ and\n   construction differs.  The initial INVITE (1) contains SDP with no\n\
    \   media at all, meaning that there are no m lines.  This is valid, and\n   implies\
    \ that the media makeup of the session will be established\n   later through a\
    \ re-INVITE [4].  Once the INVITE is received, user A\n   is alerted.  When they\
    \ answer the call, the 200 OK (2) has an answer\n   with no media either.  This\
    \ is acknowledged by the controller (3).\n   The flow from this point onwards\
    \ is identical to Flow III.  However,\n   the manipulations required to convert\
    \ offer2 to offer2', and answer2'\n   to answer2, are much simpler.  Indeed, no\
    \ media manipulations are\n   needed at all.  The only change that is needed is\
    \ to modify the\n   origin lines, so that the origin line in offer2' is valid\
    \ based on\n   the value in offer1 (validity requires that the version increments\
    \ by\n   one, and that the other parameters remain unchanged).\n   There are some\
    \ limitations associated with this flow.  First, user A\n   will be alerted without\
    \ any media having been established yet.  This\n   means that user A will not\
    \ be able to reject or accept the call based\n   on its media composition.  Secondly,\
    \ both A and B will end up\n   answering the call (i.e., generating a 200 OK)\
    \ before it is known\n   whether there is compatible media.  If there is no media\
    \ in common,\n   the call can be terminated later with a BYE.  However, the users\
    \ will\n   have already been alerted, resulting in user annoyance and possibly\n\
    \   resulting in billing events.\n"
- title: 5.  Recommendations
  contents:
  - "5.  Recommendations\n   Flow I (Figure 1) represents the simplest and the most\
    \ efficient\n   flow.  This flow SHOULD be used by a controller if it knows with\n\
    \   certainty that user B is actually an automata that will answer the\n   call\
    \ immediately.  This is the case for devices such as media\n   servers, conferencing\
    \ servers, and messaging servers, for example.\n   Since we expect a great deal\
    \ of third party call control to be to\n   automata, special casing in this scenario\
    \ is reasonable.\n   For calls to unknown entities, or to entities known to represent\n\
    \   people, it is RECOMMENDED that Flow IV (Figure 4) be used for third\n   party\
    \ call control.  Flow III MAY be used instead, but it provides no\n   additional\
    \ benefits over Flow IV.  However, Flow II SHOULD NOT be\n   used, because of\
    \ the potential for infinite ping-ponging of re-\n   INVITEs.\n   Several of these\
    \ flows use a \"black hole\" connection address of\n   0.0.0.0. This is an IPv4\
    \ address with the property that packets sent\n   to it will never leave the host\
    \ which sent them; they are just\n   discarded.  Those flows are therefore specific\
    \ to IPv4.  For other\n   network or address types, an address with an equivalent\
    \ property\n   SHOULD be used.\n   In most cases, including the recommended flows,\
    \ user A will hear\n   silence while the call to B completes.  This may not always\
    \ be ideal.\n   It can be remedied by connecting the caller to a music-on-hold\
    \ source\n   while the call to B occurs.\n"
- title: 6.  Error Handling
  contents:
  - "6.  Error Handling\n   There are numerous error cases which merit discussion.\n\
    \   With all of the call flows in Section 4, one call is established to\n   A,\
    \ and then the controller attempts to establish a call to B.\n   However, this\
    \ call attempt may fail, for any number of reasons.  User\n   B might be busy\
    \ (resulting in a 486 response to the INVITE), there\n   may not be any media\
    \ in common, the request may time out, and so on.\n   If the call attempt to B\
    \ should fail, it is RECOMMENDED that the\n   controller send a BYE to A. This\
    \ BYE SHOULD include a Reason header\n   [5] which carries the status code from\
    \ the error response.  This will\n   inform A of the precise reason for the failure.\
    \  The information is\n   important from a user interface perspective.  For example,\
    \ if A was\n   calling from a black phone, and B generated a 486, the BYE will\n\
    \   contain a Reason code of 486, and this could be used to generate a\n   local\
    \ busy signal so that A knows that B is busy.\n             A                \
    \ Controller                  B\n             |(1) INVITE offer1     |       \
    \               |\n             |no media              |                     \
    \ |\n             |<---------------------|                      |\n          \
    \   |(2) 200 answer1       |                      |\n             |no media  \
    \            |                      |\n             |--------------------->| \
    \                     |\n             |(3) ACK               |               \
    \       |\n             |<---------------------|                      |\n    \
    \         |                      |(4) INVITE no SDP     |\n             |    \
    \                  |--------------------->|\n             |                  \
    \    |(5) 180               |\n             |                      |<---------------------|\n\
    \             |(6) INVITE offer2     |                      |\n             |--------------------->|\
    \                      |\n             |(7) 491               |              \
    \        |\n             |<---------------------|                      |\n   \
    \          |(8) ACK               |                      |\n             |--------------------->|\
    \                      |\n                                Figure 5\n   Another\
    \ error condition worth discussion is shown in Figure 5.  After\n   the controller\
    \ establishes the dialog with A (messages 1-3) it\n   attempts to contact B (message\
    \ 4).  Contacting B may take some time.\n   During that interval, A could possibly\
    \ attempt a re-INVITE, providing\n   an updated offer.  However, the controller\
    \ cannot pass this offer on\n   to B, since it has an INVITE transaction pending\
    \ with it.  As a\n   result, the controller needs to reject the request.  It is\n\
    \   RECOMMENDED that a 491 response be used.  The situation here is\n   similar\
    \ to the glare condition described in [1], and thus the same\n   error handling\
    \ is sensible.  However, A is likely to retry its\n   request (as a result of\
    \ the 491), and this may occur before the\n   exchange with B is completed.  In\
    \ that case, the controller would\n   respond with another 491.\n"
- title: 7.  Continued Processing
  contents:
  - "7.  Continued Processing\n   Once the calls are established, both participants\
    \ believe they are in\n   a single point-to-point call.  However, they are exchanging\
    \ media\n   directly with each other, rather than with the controller.  The\n\
    \   controller is involved in two dialogs, yet sees no media.\n   Since the controller\
    \ is still a central point for signaling, it now\n   has complete control over\
    \ the call.  If it receives a BYE from one of\n   the participants, it can create\
    \ a new BYE and hang up with the other\n   participant.  This is shown in Figure\
    \ 6.\n             A              Controller               B\n             |(1)\
    \ BYE            |                   |\n             |------------------>|   \
    \                |\n             |(2) 200 OK         |                   |\n \
    \            |<------------------|                   |\n             |       \
    \            |(3) BYE            |\n             |                   |------------------>|\n\
    \             |                   |(4) 200 OK         |\n             |      \
    \             |<------------------|\n                                Figure 6\n\
    \   Similarly, if it receives a re-INVITE from one of the participants,\n   it\
    \ can forward it to the other participant.  Depending on which flow\n   was used,\
    \ this may require some manipulation on the SDP before\n   passing it on.\n  \
    \ However, the controller need not \"proxy\" the SIP messages received\n   from\
    \ one of the parties.  Since it is a Back-to-Back User Agent\n   (B2BUA), it can\
    \ invoke any signaling mechanism on each dialog, as it\n   sees fit.  For example,\
    \ if the controller receives a BYE from A, it\n   can generate a new INVITE to\
    \ a third party, C, and connect B to that\n   participant instead.  A call flow\
    \ for this is shown in Figure 7,\n   assuming the case where C represents an end\
    \ user, not an automata.\n   Note that it is just Flow IV.\n             A   \
    \        Controller            B                C\n             |(1) BYE     \
    \    |                |                |\n             |--------------->|    \
    \            |                |\n             |(2) 200 OK      |             \
    \   |                |\n             |<---------------|                |     \
    \           |\n             |                |(3) INV no media|              \
    \  |\n             |                |-------------------------------->|\n    \
    \         |                |(4) 200 no media|                |\n             |\
    \                |<--------------------------------|\n             |         \
    \       |(5) ACK         |                |\n             |                |-------------------------------->|\n\
    \             |                |(6) INV no SDP  |                |\n         \
    \    |                |--------------->|                |\n             |    \
    \            |(7) 200 offer3  |                |\n             |             \
    \   |<---------------|                |\n             |                |(8) INV\
    \ offer3' |                |\n             |                |-------------------------------->|\n\
    \             |                |(9) 200 answer3'|                |\n         \
    \    |                |<--------------------------------|\n             |    \
    \            |(10) ACK        |                |\n             |             \
    \   |-------------------------------->|\n             |                |(11) ACK\
    \ answer3|                |\n             |                |--------------->|\
    \                |\n             |                |                |(12) RTP \
    \       |\n             |                |                |................|\n\
    \                                Figure 7\n   From here, new parties can be added,\
    \ removed, transferred, and so on,\n   as the controller sees fit.  In many cases,\
    \ the controller will be\n   required to modify the SDP exchanged between the\
    \ participants in\n   order to affect these changes.  In particular, the version\
    \ number in\n   the SDP will need to be changed by the controller in certain cases.\n\
    \   If the controller should issue an SDP offer on its own (for example,\n   to\
    \ place a call on hold), it will need to increment the version\n   number in the\
    \ SDP offer.  The other participant in the call will not\n   know that the controller\
    \ has done this, and any subsequent offer it\n   generates will have the wrong\
    \ version number as far as its peer is\n   concerned.  As a result, the controller\
    \ will be required to modify\n   the version number in SDP messages to match what\
    \ the recipient is\n   expecting.\n   It is important to point out that the call\
    \ need not have been\n   established by the controller in order for the processing\
    \ of this\n   section to be used.  Rather, the controller could have acted as\
    \ a\n   B2BUA during a call established by A towards B (or vice versa).\n"
- title: 8.  3pcc and Early Media
  contents:
  - "8.  3pcc and Early Media\n   Early media represents the condition where the session\
    \ is established\n   (as a result of the completion of an offer/answer exchange),\
    \ yet the\n   call itself has not been accepted.  This is usually used to convey\n\
    \   tones or announcements regarding progress of the call.  Handling of\n   early\
    \ media in a third party call is straightforward.\n             A            \
    \     Controller                  B\n             |                      |   \
    \                   |\n             |(1) INVITE offer1     |                 \
    \     |\n             |no media              |                      |\n      \
    \       |<---------------------|                      |\n             |      \
    \                |                      |\n             |<ring>              \
    \  |                      |\n             |                      |           \
    \           |\n             |<answer>              |                      |\n\
    \             |                      |                      |\n             |(2)\
    \ 200 answer1       |                      |\n             |no media         \
    \     |                      |\n             |--------------------->|        \
    \              |\n             |(3) ACK               |                      |\n\
    \             |<---------------------|                      |\n             |\
    \                      |(4) INVITE no SDP     |\n             |              \
    \        |--------------------->|\n             |                      |     \
    \                 |<ring>\n             |                      |(5) 183 offer2\
    \        |\n             |                      |<---------------------|\n   \
    \          |(6) INVITE offer2'    |                      |\n             |<---------------------|\
    \                      |\n             |(7) 200 answer2'      |              \
    \        |\n             |--------------------->|                      |\n   \
    \          |(8) ACK               |                      |\n             |<---------------------|\
    \                      |\n             |                      |(9) PRACK answer2\
    \     |\n             |                      |--------------------->|\n      \
    \       |                      |(10) 200 PRACK        |\n             |      \
    \                |<---------------------|\n             |(11) RTP            \
    \  |                      |\n             |.............................................|\n\
    \             |                      |                      |<answer>\n      \
    \       |                      |(12) 200 OK           |\n             |      \
    \                |<---------------------|\n             |                    \
    \  |(13) ACK              |\n             |                      |--------------------->|\n\
    \                                Figure 8\n   Figure 8 shows the case where user\
    \ B generates early media before\n   answering the call.  The flow is almost identical\
    \ to Flow IV from\n   Figure 4.  The only difference is that user B generates\
    \ a reliable\n   provisional response (5) [6] instead of a final response, and\
    \ answer2\n   is carried in a PRACK (9) instead of an ACK.  When party B finally\n\
    \   does accept the call (12), there is no change in the session state,\n   and\
    \ therefore, no signaling needs to be done with user A.  The\n   controller simply\
    \ ACKs the 200 OK (13) to confirm the dialog.\n             A                \
    \ Controller                  B\n             |                      |       \
    \               |\n             |(1) INVITE offer1     |                     \
    \ |\n             |no media              |                      |\n          \
    \   |<---------------------|                      |\n             |          \
    \            |                      |\n             |ring                  | \
    \                     |\n             |                      |               \
    \       |\n             |(2) 183 answer1       |                      |\n    \
    \         |no media              |                      |\n             |--------------------->|\
    \                      |\n             |(3) PRACK             |              \
    \        |\n             |<---------------------|                      |\n   \
    \          |(4) 200 PRACK         |                      |\n             |--------------------->|\
    \                      |\n             |                      |(5) INVITE no SDP\
    \     |\n             |                      |--------------------->|\n      \
    \       |                      |                      |ring\n             |  \
    \                    |                      |\n             |                \
    \      |                      |answer\n             |                      | \
    \                     |\n             |                      |(6) 200 OK offer2\
    \     |\n             |                      |<---------------------|\n      \
    \       |(7) UPDATE offer2'    |                      |\n             |<---------------------|\
    \                      |\n             |                      |              \
    \        |\n             |(8) 200 answer2'      |                      |\n   \
    \          |--------------------->|                      |\n             |   \
    \                   |(9) ACK answer2       |\n             |                 \
    \     |--------------------->|\n             |(10) RTP              |        \
    \              |\n             |.............................................|\n\
    \             |                      |                      |\n             |answer\
    \                |                      |\n             |                    \
    \  |                      |\n             |(11) 200 OK           |           \
    \           |\n             |--------------------->|                      |\n\
    \             |(12) ACK              |                      |\n             |<---------------------|\
    \                      |\n                                Figure 9\n   The case\
    \ where user A generates early media is more complicated, and\n   is shown in\
    \ Figure 9.  The flow is based on Flow IV.  The controller\n   sends an INVITE\
    \ to user A (1), with an offer containing no media\n   streams.  User A generates\
    \ a reliable provisional response (2)\n   containing an answer with no media streams.\
    \  The controller PRACKs\n   this provisional response (3).  Now, the controller\
    \ sends an INVITE\n   without SDP to user B (5).  User B's phone rings, and they\
    \ answer,\n   resulting in a 200 OK (6) with an offer, offer2.  The controller\
    \ now\n   needs to update the session parameters with user A.  However, since\n\
    \   the call has not been answered, it cannot use a re-INVITE.  Rather,\n   it\
    \ uses a SIP UPDATE request (7) [7], passing the offer (after\n   modifying it\
    \ to get the origin field correct).  User A generates its\n   answer in the 200\
    \ OK to the UPDATE (8).  This answer is passed to\n   user B in the ACK (9). \
    \ When user A finally answers (11), there is no\n   change in session state, so\
    \ the controller simply ACKs the 200 OK\n   (12).\n   Note that it is likely that\
    \ there will be clipping of media in this\n   call flow.  User A is likely a PSTN\
    \ gateway, and has generated a\n   provisional response because of early media\
    \ from the PSTN side.  The\n   PSTN will deliver this media even though the gateway\
    \ does not have\n   anywhere to send it, since the initial offer from the controller\
    \ had\n   no media streams.  When user B answers, media can begin to flow.\n \
    \  However, any media sent to the gateway from the PSTN up to that point\n   will\
    \ be lost.\n"
- title: 9.  Third Party Call Control and SDP Preconditions
  contents:
  - "9.  Third Party Call Control and SDP Preconditions\n   A SIP extension has been\
    \ specified that allows for the coupling of\n   signaling and resource reservation\
    \ [2].  This specification relies on\n   exchanges of session descriptions before\
    \ completion of the call\n   setup.  These flows are initiated when certain SDP\
    \ parameters are\n   passed in the initial INVITE.  As a result, the interaction\
    \ of this\n   mechanism with third party call control is not obvious, and worth\n\
    \   detailing.\n"
- title: 9.1.  Controller Initiates
  contents:
  - "9.1.  Controller Initiates\n   In one usage scenario, the controller wishes to\
    \ make use of\n   preconditions in order to avoid the call failure scenarios documented\n\
    \   in Section 4.4. Specifically, the controller can use preconditions in\n  \
    \ order to guarantee that neither party is alerted unless there is a\n   common\
    \ set of media and codecs.  It can also provide both parties\n   with information\
    \ on the media composition of the call before they\n   decide to accept it.\n\
    \           User A           Controller       Customer Service\n             \
    \                                     (User B)\n             |               \
    \    |                   |\n             |(1) INVITE no SDP  |               \
    \    |\n             |require precon     |                   |\n             |<------------------|\
    \                   |\n             |(2) 183 offer1     |                   |\n\
    \             |optional precon    |                   |\n             |------------------>|\
    \                   |\n             |                   |                   |\n\
    \             |                   |(3) INVITE offer1  |\n             |      \
    \             |------------------>|\n             |                   |      \
    \             |\n             |                   |                   |\n    \
    \         |                   |                   |<answer>\n             |  \
    \                 |(4) 200 OK answer1 |\n             |                   |no\
    \ precon          |\n             |                   |<------------------|\n\
    \             |                   |(5) ACK            |\n             |      \
    \             |------------------>|\n             |(6) PRACK answer1  |      \
    \             |\n             |<------------------|                   |\n    \
    \         |<ring>             |                   |\n             |          \
    \         |                   |\n             |(7) 200 PRACK      |          \
    \         |\n             |------------------>|                   |\n        \
    \     |<answer>           |                   |\n             |              \
    \     |                   |\n             |(8) 200 INVITE     |              \
    \     |\n             |------------------>|                   |\n            \
    \ |(9) ACK            |                   |\n             |<------------------|\
    \                   |\n                               Figure 10\n   The flow for\
    \ this scenario is shown in Figure 10.  In this example,\n   we assume that user\
    \ B is an automata or agent of some sort which will\n   answer the call immediately.\
    \  Therefore, the flow is based on Flow I.\n   The controller sends an INVITE\
    \ to user A containing no SDP, but with\n   a Require header indicating that preconditions\
    \ are required.  This\n   specific scenario (an INVITE without an offer, but with\
    \ a Require\n   header indicating preconditions) is not described in [2].  It\
    \ is\n   RECOMMENDED that the UAS respond with an offer in a 1xx including the\n\
    \   media streams it wishes to use for the call, and for each, list all\n   preconditions\
    \ it supports as optional.  Of course, the user is not\n   alerted at this time.\
    \  The controller takes this offer and passes it\n   to user B (3).  User B does\
    \ not support preconditions, or does, but\n   is not interested in them.  Therefore,\
    \ when it answers the call, the\n   200 OK contains an answer without any preconditions\
    \ listed (4).  This\n   answer is passed to user A in the PRACK (6).  At this\
    \ point, user A\n   knows that there are no preconditions actually in use for\
    \ the call,\n   and therefore, it can alert the user.  When the call is answered,\n\
    \   user A sends a 200 OK to the controller (8) and the call is complete.\n  \
    \ In the event that the offer generated by user A was not acceptable to\n   user\
    \ B (because of non-overlapping codecs or media, for example),\n   user B would\
    \ immediately reject the INVITE (message 3).  The\n   controller would then CANCEL\
    \ the request to user A. In this\n   situation, neither user A nor user B would\
    \ have been alerted,\n   achieving the desired effect.  It is interesting to note\
    \ that this\n   property is achieved using preconditions even though it doesn't\n\
    \   matter what specific types of preconditions are supported by user A.\n   It\
    \ is also entirely possible that user B does actually desire\n   preconditions.\
    \  In that case, it might generate a 1xx of its own with\n   an answer containing\
    \ preconditions.  That answer would still be\n   passed to user A, and both parties\
    \ would proceed with whatever\n   measures are necessary to meet the preconditions.\
    \  Neither user would\n   be alerted until the preconditions were met.\n"
- title: 9.2.  Party A Initiates
  contents:
  - "9.2.  Party A Initiates\n   In Section 9.1, the controller requested the use\
    \ of preconditions to\n   achieve a specific goal.  It is also possible that the\
    \ controller\n   doesn't care (or perhaps doesn't even know) about preconditions,\
    \ but\n   one of the participants in the call does care.  A call flow for this\n\
    \   case is shown in Figure 11.\n             A                 Controller   \
    \               B\n             |(1) INVITE offer1     |                     \
    \ |\n             |no media              |                      |\n          \
    \   |<---------------------|                      |\n             |(2) 183 answer1\
    \       |                      |\n             |no media              |      \
    \                |\n             |--------------------->|                    \
    \  |\n             |(3) PRACK             |                      |\n         \
    \    |<---------------------|                      |\n             |(4) 200 OK\
    \            |                      |\n             |--------------------->| \
    \                     |\n             |                      |(5) INVITE no SDP\
    \     |\n             |                      |--------------------->|\n      \
    \       |                      |(6) 183 offer2        |\n             |      \
    \                |des=sendrecv          |\n             |                    \
    \  |conf=recv             |\n             |                      |cur=none   \
    \           |\n             |                      |<---------------------|\n\
    \             |(7) UPDATE offer2'    |                      |\n             |des=sendrecv\
    \          |                      |\n             |conf=recv             |   \
    \                   |\n             |cur=none              |                 \
    \     |\n             |<---------------------|                      |\n      \
    \       |(8) 200 UPDATE        |                      |\n             |answer2'\
    \              |                      |\n             |des=sendrecv          |\
    \                      |\n             |conf=recv             |              \
    \        |\n             |cur=none              |                      |\n   \
    \          |--------------------->|                      |\n             |   \
    \                   |(9) PRACK answer2     |\n             |                 \
    \     |des=sendrecv          |\n             |                      |conf=recv\
    \             |\n             |                      |cur=none              |\n\
    \             |                      |--------------------->|\n             |\
    \                      |(10) 200 PRACK        |\n             |              \
    \        |<---------------------|\n             |(11) reservation      |     \
    \                 |\n             |-------------------------------------------->|\n\
    \             |(12) reservation      |                      |\n             |<--------------------------------------------|\n\
    \             |(13) UPDATE offer3    |                      |\n             |des=sendrecv\
    \          |                      |\n             |conf=recv             |   \
    \                   |\n             |cur=recv              |                 \
    \     |\n             |--------------------->|                      |\n      \
    \       |                      |(14) UPDATE offer3'   |\n             |      \
    \                |des=sendrecv          |\n             |                    \
    \  |conf=recv             |\n             |                      |cur=recv   \
    \           |\n             |                      |--------------------->|\n\
    \             |                      |(15) 200 UPDATE       |\n             |\
    \                      |answer3'              |\n             |              \
    \        |des=sendrecv          |\n             |                      |conf=recv\
    \             |\n             |                      |cur=send              |\n\
    \             |                      |<---------------------|\n             |(16)\
    \ 200 UPDATE       |                      |\n             |answer3           \
    \    |                      |\n             |des=sendrecv          |         \
    \             |\n             |conf=recv             |                      |\n\
    \             |cur=send              |                      |\n             |<---------------------|\
    \                      |\n             |                      |              \
    \        |<ring>\n             |                      |(17) UPDATE offer4    |\n\
    \             |                      |des=sendrecv          |\n             |\
    \                      |conf=recv             |\n             |              \
    \        |cur=sendrecv          |\n             |                      |<---------------------|\n\
    \             |(18) UPDATE offer4'   |                      |\n             |des=sendrecv\
    \          |                      |\n             |conf=recv             |   \
    \                   |\n             |cur=sendrecv          |                 \
    \     |\n             |<---------------------|                      |\n      \
    \       |<ring>                |                      |\n             |(19) 200\
    \ UPDATE       |                      |\n             |answer4'              |\
    \                      |\n             |des=sendrecv          |              \
    \        |\n             |conf=recv             |                      |\n   \
    \          |cur=sendrecv          |                      |\n             |--------------------->|\
    \                      |\n             |                      |(20) 200 UPDATE\
    \       |\n             |                      |answer4               |\n    \
    \         |                      |des=sendrecv          |\n             |    \
    \                  |conf=recv             |\n             |                  \
    \    |cur=sendrecv          |\n             |                      |--------------------->|\n\
    \             |(21) 180 INVITE       |                      |\n             |--------------------->|\
    \                      |\n             |                      |(22) 180 INVITE\
    \       |\n             |                      |<---------------------|\n    \
    \         |<answer>              |                      |\n             |(23)\
    \ 200 INVITE       |                      |\n             |--------------------->|\
    \                      |\n             |(24) ACK              |              \
    \        |\n             |<---------------------|                      |\n   \
    \          |                      |                      |<answer>\n         \
    \    |                      |(25) 200 INVITE       |\n             |         \
    \             |<---------------------|\n             |                      |(26)\
    \ ACK              |\n             |                      |--------------------->|\n\
    \                               Figure 11\n   The controller follows Flow IV;\
    \ it has no specific requirements for\n   support of the preconditions specification\
    \ [2].  Therefore, it sends\n   an INVITE (1) with SDP that contains no media\
    \ lines.  User A is\n   interested in supporting preconditions, and does not want\
    \ to ring its\n   phone until resources are reserved.  Since there are no media\
    \ streams\n   in the INVITE, it can't reserve resources for media streams, and\n\
    \   therefore it can't ring the phone until they are conveyed in a\n   subsequent\
    \ offer and then reserved.  Therefore, it generates a 183\n   with the answer,\
    \ and doesn't alert the user (2).  The controller\n   PRACKs this (3) and A responds\
    \ to the PRACK (4).\n   At this point, the controller attempts to bring B into\
    \ the call.  It\n   sends B an INVITE without SDP (5).  B is interested in having\n\
    \   preconditions for this call.  Therefore, it generates its offer in a\n   183\
    \ that contains the appropriate SDP attributes (6).  The controller\n   passes\
    \ this offer to A in an UPDATE request (7).  The controller uses\n   UPDATE because\
    \ the call has not been answered yet, and therefore, it\n   cannot use a re-INVITE.\
    \  User A sees that its peer is capable of\n   supporting preconditions.  Since\
    \ it desires preconditions for the\n   call, it generates an answer in the 200\
    \ OK (8) to the UPDATE.  This\n   answer, in turn, is passed to B in the PRACK\
    \ for the provisional\n   response (9).  Now, both sides perform resource reservation.\
    \  User A\n   succeeds first, and passes an updated session description in an\n\
    \   UPDATE request (13).  The controller simply passes this to A (after\n   the\
    \ manipulation of the origin field, as required in Flow IV) in an\n   UPDATE (14),\
    \ and the answer (15) is passed back to A (16).  The same\n   flow happens, but\
    \ from B to A, when B's reservation succeeds (17-20).\n   Since the preconditions\
    \ have been met, both sides ring (21 and 22),\n   and then both answer (23 and\
    \ 25), completing the call.\n   What is important about this flow is that the\
    \ controller doesn't know\n   anything about preconditions.  It merely passes\
    \ the SDP back and\n   forth as needed.  The trick is the usage of UPDATE and\
    \ PRACK to pass\n   the SDP when needed.  That determination is made entirely\
    \ based on\n   the offer/answer rules described in [6] and [7], and is independent\n\
    \   of preconditions.\n"
- title: 10.  Example Call Flows
  contents:
  - '10.  Example Call Flows

    '
- title: 10.1.  Click-to-Dial
  contents:
  - "10.1.  Click-to-Dial\n   The first application of this capability we discuss\
    \ is click-to-dial.\n   In this service, a user is browsing the web page of an\
    \ e-commerce\n   site, and would like to speak to a customer service representative.\n\
    \   The user clicks on a link, and a call is placed to a customer service\n  \
    \ representative.  When the representative picks up, the phone on the\n   user's\
    \ desk rings.  When the user pick up, the customer service\n   representative\
    \ is there, ready to talk to the user.\n"
- title: Customer Service    Controller         User's Phone      User's Browser
  contents:
  - "Customer Service    Controller         User's Phone      User's Browser\n   \
    \  |                   |(1) HTTP POST      |                   |\n     |     \
    \              |<--------------------------------------|\n     |             \
    \      |(2) HTTP 200 OK    |                   |\n     |                   |-------------------------------------->|\n\
    \     |(3) INVITE offer1  |                   |                   |\n     |no\
    \ media           |                   |                   |\n     |<------------------|\
    \                   |                   |\n     |(4) 200 answer1    |        \
    \           |                   |\n     |no media           |                \
    \   |                   |\n     |------------------>|                   |    \
    \               |\n     |(5) ACK            |                   |            \
    \       |\n     |<------------------|                   |                   |\n\
    \     |                   |(6) INVITE no SDP  |                   |\n     |  \
    \                 |------------------>|                   |\n     |          \
    \         |(7) 200 OK offer2  |                   |\n     |                  \
    \ |<------------------|                   |\n     |(8) INVITE offer2' |      \
    \             |                   |\n     |<------------------|              \
    \     |                   |\n     |(9) 200 answer2'   |                   |  \
    \                 |\n     |------------------>|                   |          \
    \         |\n     |                   |(10) ACK answer2   |                  \
    \ |\n     |                   |------------------>|                   |\n    \
    \ |(11) ACK           |                   |                   |\n     |<------------------|\
    \                   |                   |\n     |(12) RTP           |        \
    \           |                   |\n     |.......................................|\
    \                   |\n                       Figure 12\n   The call flow for\
    \ this service is given in Figure 12.  It is\n   identical to that of Figure 4,\
    \ with the exception that the service is\n   triggered through an HTTP POST request\
    \ when the user clicks on the\n   link.  Normally, this POST request would contain\
    \ neither the number\n   of the user or of the customer service representative.\
    \  The user's\n   number would typically be obtained by the web application from\
    \ back-\n   end databases, since the user would have presumably logged into the\n\
    \   site, giving the server the needed context.  The customer service\n   number\
    \ would typically be obtained through provisioning.  Thus, the\n   HTTP POST is\
    \ actually providing the server nothing more than an\n   indication that a call\
    \ is desired.\n   We note that this service can be provided through other mechanisms,\n\
    \   namely PINT [9].  However, there are numerous differences between the\n  \
    \ way in which the service is provided by PINT, and the way in which it\n   is\
    \ provided here:\n   o  The PINT solution enables calls only between two PSTN\
    \ endpoints.\n      The solution described here allows calls between PSTN phones\n\
    \      (through SIP enabled gateways) and native IP phones.\n   o  When used for\
    \ calls between two PSTN phones, the solution here may\n      result in a portion\
    \ of the call being routed over the Internet.\n      In PINT, the call is always\
    \ routed only over the PSTN.  This may\n      result in better quality calls with\
    \ the PINT solution, depending\n      on the codec in use and QoS capabilities\
    \ of the network routing\n      the Internet portion of the call.\n   o  The PINT\
    \ solution requires extensions to SIP (PINT is an extension\n      to SIP), whereas\
    \ the solution described here is done with baseline\n      SIP.\n   o  The PINT\
    \ solution allows the controller (acting as a PINT client)\n      to \"step out\"\
    \ once the call is established.  The solution\n      described here requires the\
    \ controller to maintain call state for\n      the entire duration of the call.\n"
- title: 10.2.  Mid-Call Announcement Capability
  contents:
  - "10.2.  Mid-Call Announcement Capability\n   The third party call control mechanism\
    \ described here can also be\n   used to enable mid-call announcements.  Consider\
    \ a service for pre-\n   paid calling cards.  Once the pre-paid call is established,\
    \ the\n   system needs to set a timer to fire when they run out of minutes.\n\
    \   When this timer fires, we would like the user to hear an announcement\n  \
    \ which tells them to enter a credit card to continue.  Once they enter\n   the\
    \ credit card info, more money is added to the pre-paid card, and\n   the user\
    \ is reconnected to the destination party.\n   We consider here the usage of third\
    \ party call control just for\n   playing the mid-call dialog to collect the credit\
    \ card information.\n   Pre-Paid User     Controller         Called Party    \
    \    Media Server\n      |                   |(1) INV SDP c=bh   |           \
    \        |\n      |                   |------------------>|                  \
    \ |\n      |                   |(2) 200 answer1    |                   |\n   \
    \   |                   |<------------------|                   |\n      |   \
    \                |(3) ACK            |                   |\n      |          \
    \         |------------------>|                   |\n      |(4) INV no SDP   \
    \  |                   |                   |\n      |<------------------|    \
    \               |                   |\n      |(5) 200 offer2     |           \
    \        |                   |\n      |------------------>|                  \
    \ |                   |\n      |                   |(6) INV offer2     |     \
    \              |\n      |                   |-------------------------------------->|\n\
    \      |                   |(7) 200 answer2    |                   |\n      |\
    \                   |<--------------------------------------|\n      |(8) ACK\
    \ answer2    |                   |                   |\n      |<------------------|\
    \                   |                   |\n      |                   |(9) ACK\
    \            |                   |\n      |                   |-------------------------------------->|\n\
    \      |(10) RTP           |                   |                   |\n      |...........................................................|\n\
    \      |                   |(11) BYE           |                   |\n      |\
    \                   |-------------------------------------->|\n      |       \
    \            |(12) 200 OK        |                   |\n      |              \
    \     |<--------------------------------------|\n      |                   |(13)\
    \ INV no SDP    |                   |\n      |                   |------------------>|\
    \                   |\n      |                   |(14) 200 offer3    |       \
    \            |\n      |                   |<------------------|              \
    \     |\n      |(15) INV offer3'   |                   |                   |\n\
    \      |<------------------|                   |                   |\n      |(16)\
    \ 200 answer3'  |                   |                   |\n      |------------------>|\
    \                   |                   |\n      |                   |(17) ACK\
    \ answer3'  |                   |\n      |                   |------------------>|\
    \                   |\n      |(18) ACK           |                   |       \
    \            |\n      |<------------------|                   |              \
    \     |\n      |(19) RTP           |                   |                   |\n\
    \      |.......................................|                   |\n       \
    \                 Figure 13\n   We assume the call is set up so that the controller\
    \ is in the call as\n   a B2BUA.  When the timer fires, we wish to connect the\
    \ caller to a\n   media server.  The flow for this is shown in Figure 13.  When\
    \ the\n   timer expires, the controller places the called party with a\n   connection\
    \ address of 0.0.0.0 (1).  This effectively \"disconnects\"\n   the called party.\
    \  The controller then sends an INVITE without SDP to\n   the pre-paid caller\
    \ (4).  The offer returned from the caller (5) is\n   used in an INVITE to the\
    \ media server which will be collecting digits\n   (6).  This is an instantiation\
    \ of Flow I.  This flow can only be used\n   here because the media server is\
    \ an automata, and will answer the\n   INVITE immediately.  If the controller\
    \ was connecting the pre-paid\n   user with another end user, Flow III would need\
    \ to be used.  The\n   media server returns an immediate 200 OK (7) with an answer,\
    \ which is\n   passed to the caller in an ACK (8).  The result is that the media\n\
    \   server and the pre-paid caller have their media streams connected.\n   The\
    \ media server plays an announcement, and prompts the user to enter\n   a credit\
    \ card number.  After collecting the number, the card number\n   is validated.\
    \  The media server then passes the card number to the\n   controller (using some\
    \ means outside the scope of this\n   specification), and then hangs up the call\
    \ (11).\n   After hanging up with the media server, the controller reconnects\
    \ the\n   user to the original called party.  To do this, the controller sends\n\
    \   an INVITE without SDP to the called party (13).  The 200 OK (14)\n   contains\
    \ an offer, offer3.  The controller modifies the SDP (as is\n   done in Flow III),\
    \ and passes the offer in an INVITE to the pre-paid\n   user (15).  The pre-paid\
    \ user generates an answer in a 200 OK (16)\n   which the controller passes to\
    \ user B in the ACK (17).  At this\n   point, the caller and called party are\
    \ reconnected.\n"
- title: 11.  Implementation Recommendations
  contents:
  - "11.  Implementation Recommendations\n   Most of the work involved in supporting\
    \ third party call control is\n   within the controller.  A standard SIP UA should\
    \ be controllable\n   using the mechanisms described here.  However, third party\
    \ call\n   control relies on a few features that might not be implemented.  As\n\
    \   such, we RECOMMEND that implementors of user agent servers support\n   the\
    \ following:\n   o  Offers and answers that contain a connection line with an\
    \ address\n      of 0.0.0.0.\n   o  Re-INVITE requests that change the port to\
    \ which media should be\n      sent\n   o  Re-INVITEs that change the connection\
    \ address\n   o  Re-INVITEs that add a media stream\n   o  Re-INVITEs that remove\
    \ a media stream (setting its port to zero)\n   o  Re-INVITEs that add a codec\
    \ amongst the set in a media stream\n   o  SDP Connection address of zero\n  \
    \ o  Initial INVITE requests with a connection address of zero\n   o  Initial\
    \ INVITE requests with no SDP\n   o  Initial INVITE requests with SDP but no media\
    \ lines\n   o  Re-INVITEs with no SDP\n   o  The UPDATE method [7]\n   o  Reliability\
    \ of provisional responses [6]\n   o  Integration of resource management and SIP\
    \ [2].\n"
- title: 12.  Security Considerations
  contents:
  - '12.  Security Considerations

    '
- title: 12.1.  Authorization and Authentication
  contents:
  - "12.1.  Authorization and Authentication\n   In most uses of SIP INVITE, whether\
    \ or not a call is accepted is\n   based on a decision made by a human when presented\
    \ information about\n   the call, such as the identity of the caller.  In other\
    \ cases,\n   automata answer the calls, and whether or not they do so may depend\n\
    \   on the particular application to which SIP is applied.  For example,\n   if\
    \ a caller makes a SIP call to a voice portal service, the call may\n   be rejected\
    \ unless the caller has previously signed up (perhaps via a\n   web site).  In\
    \ other cases, call handling policies are made based on\n   automated scripts,\
    \ such as those described by the Call Processing\n   Language [11].  Frequently,\
    \ those decisions are also made based on\n   the identity of the caller.\n   These\
    \ authorization mechanisms would be applied to normal first party\n   calls and\
    \ third party calls, as these two are indistinguishable.  As\n   a result, it\
    \ is important for these authorization policies to\n   continue to operate correctly\
    \ for third party calls.  Of course,\n   third party calls introduce a new party\
    \ - the one initiating the\n   third party call.  Do the authorization policies\
    \ apply based on the\n   identity of that third party, or do they apply based\
    \ on the\n   participants in the call? Ideally, the participants would be able\
    \ to\n   know the identities of both other parties, and have authorization\n \
    \  policies be based on those, as appropriate.  However, this is not\n   possible\
    \ using existing mechanisms.  As a result, the next best thing\n   is for the\
    \ INVITE requests to contain the identity of the third\n   party.  Ultimately,\
    \ this is the user who is requesting communication,\n   and it makes sense for\
    \ call authorization policies to be based on\n   that identity.\n   This requires,\
    \ in turn, that the controller authenticate itself as\n   that third party.  This\
    \ can be challenging, and the appropriate\n   mechanism depends on the specific\
    \ application scenario.\n   In one common scenario, the controller is acting on\
    \ behalf of one of\n   the participants in the call.  A typical example is click-to-dial,\n\
    \   where the controller and the customer service representative are run\n   by\
    \ the same administrative domain.  Indeed, for the purposes of\n   identification,\
    \ the controller can legitimately claim to be the\n   customer service representative.\
    \  In this scenario, it would be\n   appropriate for the INVITE to the end user\
    \ to contain a From field\n   identifying the customer service rep, and authenticate\
    \ the request\n   using S/MIME (see RFC 3261 [1], Section 23) signed by the key\
    \ of the\n   customer service rep (which is held by the controller).\n   This\
    \ requires the controller to actually have credentials with which\n   it can authenticate\
    \ itself as the customer support representative.\n   In many other cases, the\
    \ controller is representing one of the\n   participants, but does not possess\
    \ their credentials.  Unfortunately,\n   there are currently no standardized mechanisms\
    \ that allow a user to\n   delegate credentials to the controller in a way that\
    \ limits their\n   usage to specific third party call control operations.  In\
    \ the\n   absence of such a mechanisms, the best that can be done is to use the\n\
    \   display name in the From field to indicate the identity of the user\n   on\
    \ whose behalf the call is being made.  It is RECOMMENDED that the\n   display\
    \ name be set to \"[controller] on behalf of [user]\", where user\n   and controller\
    \ are textual identities of the user and controller,\n   respectively.  In this\
    \ case, the URI in the From field would identify\n   the controller.\n   In other\
    \ situations, there is no real relationship between the\n   controller and the\
    \ participants in the call.  In these situations,\n   ideally the controller would\
    \ have a means to assert that the call is\n   from a particular identity (which\
    \ could be one of the participants,\n   or even a third party, depending on the\
    \ application), and to validate\n   that assertion with a signature using the\
    \ key of the controller.\n"
- title: 12.2.  End-to-End Encryption and Integrity
  contents:
  - "12.2.  End-to-End Encryption and Integrity\n   With third party call control,\
    \ the controller is actually one of the\n   participants as far as the SIP dialog\
    \ is concerned.  Therefore,\n   encryption and integrity of the SIP messages,\
    \ as provided by S/MIME,\n   will occur between participants and the controller,\
    \ rather than\n   directly between participants.\n   However, integrity, authenticity\
    \ and confidentiality of the media\n   sessions can be provided through a controller.\
    \  End-to-end media\n   security is based on the exchange of keying material within\
    \ SDP [10].\n   The proper operation of these mechanisms with third party call\n\
    \   control depends on the controller behaving properly.  So long as it\n   is\
    \ not attempting to explicitly disable these mechanisms, the\n   protocols will\
    \ properly operate between the participants, resulting\n   in a secure media session\
    \ that even the controller cannot eavesdrop\n   or modify.  Since third party\
    \ call control is based on a model of\n   trust between the users and the controller,\
    \ it is reasonable to\n   assume it is operating in a well-behaved manner.  However,\
    \ there is\n   no cryptographic means that can prevent the controller from\n \
    \  interfering with the initial exchanges of keying materials.  As a\n   result,\
    \ it is trivially possibly for the controller to insert itself\n   as an intermediary\
    \ on the media exchange, if it should so desire.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   The authors would like to thank Paul Kyzivat, Rohan\
    \ Mahy, Eric\n   Rescorla, Allison Mankin and Sriram Parameswar for their comments.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Camarillo, G., Ed., Marshall, W., Ed. and J. Rosenberg,\n        \"Integration\
    \ of Resource Management and Session Initiation\n        Protocol (SIP)\", RFC\
    \ 3312, October 2002.\n   [3]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  Rosenberg,\
    \ J. and H. Schulzrinne, \"An Offer/Answer Model with\n        Session Description\
    \ Protocol (SDP)\", RFC 3264, June 2002.\n   [5]  Schulzrinne, H., Oran, D. and\
    \ G. Camarillo, \"The Reason Header\n        Field for the Session Initiation\
    \ Protocol (SIP)\", RFC 3326,\n        December 2002.\n   [6]  Rosenberg, J. and\
    \ H. Schulzrinne, \"Reliability of Provisional\n        Responses in Session Initiation\
    \ Protocol (SIP)\", RFC 3262, June\n        2002.\n   [7]  Rosenberg, J., \"The\
    \ Session Initiation Protocol (SIP) UPDATE\n        Method\", RFC 3311, October\
    \ 2002.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [8]  Schulzrinne, H., Casner, S., Frederick,\
    \ R. and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\"\
    , RFC\n        3550, July 2003.\n   [9] Petrack, S. and L. Conroy, \"The PINT\
    \ Service Protocol:\n        Extensions to SIP and SDP for IP Access to Telephone\
    \ Call\n        Services\", RFC 2848, June 2000.\n   [10] Andreasen, F., Baugher,\
    \ M. and D. Wing, \"SDP Security\n        Descriptions for Media Streams\", Work\
    \ in Progress, October 2003.\n   [11] Lennox, J., Wu, X. and H. Schulzrinne, \"\
    CPL: A Language for User\n        Control of Internet Telephony Services\", Work\
    \ in Progress,\n        August 2003.\n"
- title: 15.  Authors' Addresses
  contents:
  - "15.  Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   600 Lanidex\
    \ Plaza\n   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail:\
    \ jdrosen@dynamicsoft.com\n   URI:   http://www.jdrosen.net\n   Jon Peterson\n\
    \   Neustar\n   1800 Sutter Street\n   Suite 570\n   Concord, CA  94520\n   US\n\
    \   Phone: +1 925 363-8720\n   EMail: jon.peterson@neustar.biz\n   URI:   http://www.neustar.biz\n\
    \   Henning Schulzrinne\n   Columbia University\n   M/S 0401\n   1214 Amsterdam\
    \ Ave.\n   New York, NY  10027\n   US\n   EMail: schulzrinne@cs.columbia.edu\n\
    \   URI:   http://www.cs.columbia.edu/~hgs\n   Gonzalo Camarillo\n   Ericsson\n\
    \   Hirsalantie 11\n   Jorvas 02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
