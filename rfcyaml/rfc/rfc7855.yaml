- title: __initial_text__
  contents:
  - "              Source Packet Routing in Networking (SPRING)\n                \
    \   Problem Statement and Requirements\n"
- title: Abstract
  contents:
  - "Abstract\n   The ability for a node to specify a forwarding path, other than\
    \ the\n   normal shortest path, that a particular packet will traverse,\n   benefits\
    \ a number of network functions.  Source-based routing\n   mechanisms have previously\
    \ been specified for network protocols but\n   have not seen widespread adoption.\
    \  In this context, the term\n   \"source\" means \"the point at which the explicit\
    \ route is imposed\";\n   therefore, it is not limited to the originator of the\
    \ packet (i.e.,\n   the node imposing the explicit route may be the ingress node\
    \ of an\n   operator's network).\n   This document outlines various use cases,\
    \ with their requirements,\n   that need to be taken into account by the Source\
    \ Packet Routing in\n   Networking (SPRING) architecture for unicast traffic.\
    \  Multicast use\n   cases and requirements are out of scope for this document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7855.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Data Planes . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   3.  SPRING Use Cases  . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n     3.1.  IGP-Based MPLS Tunneling  . . . . . . . . . . . . . . .\
    \ .   4\n       3.1.1.  Example of IGP-Based MPLS Tunnels . . . . . . . . . .\
    \   5\n     3.2.  Fast Reroute (FRR)  . . . . . . . . . . . . . . . . . . .  \
    \ 5\n     3.3.  Traffic Engineering . . . . . . . . . . . . . . . . . . .   6\n\
    \       3.3.1.  Examples of Traffic-Engineering Use Cases . . . . . .   7\n  \
    \   3.4.  Interoperability with Non-SPRING Nodes  . . . . . . . . .  13\n   4.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  13\n   5.  Manageability\
    \ Considerations  . . . . . . . . . . . . . . . .  15\n   6.  References  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  16\n     6.1.  Normative References\
    \  . . . . . . . . . . . . . . . . . .  16\n     6.2.  Informative References\
    \  . . . . . . . . . . . . . . . . .  16\n   Acknowledgements  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  18\n   Contributors  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  18\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The ability for a node to specify a unicast forwarding path,\
    \ other\n   than the normal shortest path, that a particular packet will\n   traverse,\
    \ benefits a number of network functions, for example:\n   o  Some types of network\
    \ virtualization, including multi-topology\n      networks and the partitioning\
    \ of network resources for VPNs\n   o  Network, link, path, and node protection\
    \ such as fast reroute\n   o  Network programmability\n   o  OAM techniques\n\
    \   o  Simplification and reduction of network signaling components\n   o  Load\
    \ balancing and traffic engineering\n   Source-based routing mechanisms have previously\
    \ been specified for\n   network protocols, but have not seen widespread adoption\
    \ other than\n   in MPLS traffic engineering.\n   These network functions may\
    \ require greater flexibility and more\n   source-imposed routing than can be\
    \ achieved through the use of the\n   previously defined methods.  In the context\
    \ of this document, the\n   term \"source\" means \"the point at which the explicit\
    \ route is\n   imposed\"; therefore, it is not limited to the originator of the\n\
    \   packet (i.e., the node imposing the explicit route may be the ingress\n  \
    \ node of an operator's network).  Throughout this document, we refer\n   to this\
    \ definition of \"source\".\n   In this context, Source Packet Routing in Networking\
    \ (SPRING)\n   architecture is being defined in order to address the use cases\
    \ and\n   requirements described in this document.\n   The SPRING architecture\
    \ MUST allow incremental and selective\n   deployment without any requirement\
    \ of a flag day or massive upgrade\n   of all network elements.\n   The SPRING\
    \ architecture MUST allow putting the policy state in the\n   packet header and\
    \ not in the intermediate nodes along the path.\n   Hence, the policy is instantiated\
    \ in the packet header and does not\n   requires any policy state in midpoints\
    \ and tail-ends.\n   The SPRING architecture objective is not to replace existing\
    \ source-\n   routing and traffic-engineering mechanisms, but rather to complement\n\
    \   them and address use cases where removal of signaling and path state\n   in\
    \ the core is a requirement.\n   Multicast use cases and requirements are out\
    \ of scope for this\n   document.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Data Planes
  contents:
  - "2.  Data Planes\n   The SPRING architecture SHOULD be general in order to ease\
    \ its\n   applicability to different data planes.\n   The SPRING architecture\
    \ SHOULD leverage the existing MPLS data plane\n   without any modification and\
    \ leverage the IPv6 data plane with a new\n   IPv6 Routing Header Type (IPv6 Routing\
    \ Header is defined in\n   [RFC2460]) and a proposal for a new type of routing\
    \ header is made by\n   [SRH].\n   The SPRING architecture MUST allow interoperability\
    \ between SPRING-\n   capable and non-SPRING-capable nodes in both the MPLS and\
    \ IPv6 data\n   planes.\n"
- title: 3.  SPRING Use Cases
  contents:
  - '3.  SPRING Use Cases

    '
- title: 3.1.  IGP-Based MPLS Tunneling
  contents:
  - "3.1.  IGP-Based MPLS Tunneling\n   The source-based routing model, applied to\
    \ the MPLS data plane,\n   offers the ability to tunnel services like VPN ([RFC4364]),\
    \ Virtual\n   Private LAN Service (VPLS) ([RFC4761], [RFC4762]) and Virtual Private\n\
    \   Wire Service (VPWS) ([RFC6624]), from an ingress Provider Edge (PE)\n   to\
    \ an egress PE, with or without the expression of an explicit path\n   and without\
    \ requiring forwarding-plane or control-plane state in\n   intermediate nodes.\
    \  Point-to-multipoint and multipoint-to-multipoint\n   tunnels are outside the\
    \ scope of this document.\n"
- title: 3.1.1.  Example of IGP-Based MPLS Tunnels
  contents:
  - "3.1.1.  Example of IGP-Based MPLS Tunnels\n   This section illustrates an example\
    \ use case.\n                                  P1---P2\n                     \
    \            /       \\\n                    A---CE1---PE1         PE2---CE2---Z\n\
    \                                 \\       /\n                               \
    \   P3---P4\n                    Figure 1: IGP-Based MPLS Tunneling\n   In Figure\
    \ 1 above, the four nodes A, CE1, CE2, and Z are part of the\n   same VPN.  CE2\
    \ advertises to PE2 a route to Z.  PE2 binds a local\n   label LZ to that route\
    \ and propagates the route and its label via the\n   Multiprotocol Border Gateway\
    \ Protocol (MPBGP) to PE1 with next-hop\n   address 192.0.2.2 (i.e., the local\
    \ address of PE2).  PE1 installs the\n   VPN prefix Z in the appropriate VPN Routing\
    \ and Forwarding table\n   (VRF) and resolves the next hop onto the IGP-based\
    \ MPLS tunnel to\n   PE2.\n   To cope with the reality of current deployments,\
    \ the SPRING\n   architecture MUST allow PE-to-PE forwarding according to the\
    \ IGP\n   shortest path without the addition of any other signaling protocol.\n\
    \   The packet each PE forwards across the network will contain the\n   necessary\
    \ information derived from the topology database in order to\n   deliver the packet\
    \ to the remote PE.\n"
- title: 3.2.  Fast Reroute (FRR)
  contents:
  - "3.2.  Fast Reroute (FRR)\n   Fast Reroute (FRR) technologies have been deployed\
    \ by network\n   operators in order to cope with link or node failures through\n\
    \   precomputation of backup paths.\n   Illustration of the problem statement\
    \ for FRR and micro-loop\n   avoidance can be found in [SPRING-RESIL].\n   The\
    \ SPRING architecture MUST address the following requirements:\n   o  support\
    \ of Fast Reroute (FRR) on any topology\n   o  precomputation and setup of backup\
    \ path without any additional\n      signaling (other than the regular IGP/BGP\
    \ protocols)\n   o  support of shared risk constraints\n   o  support of node\
    \ and link protection\n   o  support of micro-loop avoidance\n"
- title: 3.3.  Traffic Engineering
  contents:
  - "3.3.  Traffic Engineering\n   Traffic Engineering (TE) is the term used to refer\
    \ to techniques that\n   enable operators to control how specific traffic flows\
    \ are treated\n   within their networks.  Different contexts and modes have been\n\
    \   defined (single vs. multiple domains, with or without bandwidth\n   admission\
    \ control, centralized vs. distributed path computation,\n   etc.).\n   Some deployments\
    \ have a limited use of TE, such as addressing\n   specific application or customer\
    \ requirements, or addressing specific\n   bandwidth limitations in the network\
    \ (tactical TE).  In these\n   situations, there is a need to reduce, as much\
    \ as possible, the cost\n   (such as the number of signaling protocols and the\
    \ number of nodes\n   requiring specific configurations/features).  Some other\
    \ deployments\n   have a very high-scale use of TE, such as fine tuning flows\
    \ at the\n   application level.  In this situation, there is a need for very high\n\
    \   scalability, in particular on midpoints.\n   The source-based routing model\
    \ allows traffic engineering to be\n   implemented without the need for a signaling\
    \ component.\n   The SPRING architecture MUST support the following traffic-\n\
    \   engineering requirements:\n   o  loose or strict options\n   o  bandwidth\
    \ admission control\n   o  distributed vs. centralized model (e.g., Path Computation\
    \ Element\n      (PCE) [STATEFUL-PCE], Software-Defined Networking (SDN)\n   \
    \   Controller)\n   o  disjointness in dual-plane networks\n   o  egress peer\
    \ engineering\n   o  load balancing among non-parallel links (i.e., links connected\
    \ to\n      different adjacent neighbors).\n   o  limiting (scalable, preferably\
    \ zero) per-service state and\n      signaling on midpoint and tail-end routers.\n\
    \   o  ECMP-awareness\n   o  node resiliency property (i.e., the traffic-engineering\
    \ policy is\n      not anchored to a specific core node whose failure could impact\n\
    \      the service).\n   In most cases, traffic engineering makes use of the \"\
    loose\" route\n   option where most of the explicit paths can be expressed through\
    \ a\n   small number of hops.  However, there are use cases where the\n   \"strict\"\
    \ option may be used and, in such cases, each individual hop\n   in the explicit\
    \ path is specified.  This may result in a long list of\n   hops that is instantiated\
    \ into a MPLS label stack (in the MPLS data\n   plane) or list of IPv6 addresses\
    \ (in the IPv6 data plane).\n   It is obvious that, in the case of long, strict\
    \ source-routed paths,\n   the deployment is possible if the head-end of the explicit\
    \ path\n   supports the instantiation of long explicit paths.\n   Alternatively,\
    \ a controller could decompose the end-to-end path into\n   a set of sub-paths\
    \ such as each of these sub-paths is supported by\n   its respective head-end\
    \ and advertised with a single identifier.\n   Hence, the concatenation (or stitching)\
    \ of the sub-paths identifiers\n   gives a compression scheme allowing an end-to-end\
    \ path to be\n   expressed in a smaller number of hops.\n"
- title: 3.3.1.  Examples of Traffic-Engineering Use Cases
  contents:
  - "3.3.1.  Examples of Traffic-Engineering Use Cases\n   Below are descriptions\
    \ of two sets of use cases:\n   o  Traffic Engineering without Admission Control\n\
    \   o  Traffic Engineering with Admission Control\n"
- title: 3.3.1.1.  Traffic Engineering without Bandwidth Admission Control
  contents:
  - "3.3.1.1.  Traffic Engineering without Bandwidth Admission Control\n   In this\
    \ section, we describe Traffic Engineering use cases without\n   bandwidth admission\
    \ control.\n"
- title: 3.3.1.1.1.  Disjointness in Dual-Plane Networks
  contents:
  - "3.3.1.1.1.  Disjointness in Dual-Plane Networks\n   Many networks are built according\
    \ to the dual-plane design, as\n   illustrated in Figure 2:\n      Each aggregation\
    \ region k is connected to the core by two C\n      routers C1k and C2k, where\
    \ k refers to the region.\n      C1k is part of plane 1 and aggregation region\
    \ k\n      C2k is part of plane 2 and aggregation region k\n      C1k has a link\
    \ to C2j iff k = j.\n         The core nodes of a given region are directly connected.\n\
    \         Inter-region links only connect core nodes of the same plane.\n    \
    \  {C1k has a link to C1j} iff {C2k has a link to C2j}.\n         The distribution\
    \ of these links depends on the topological\n         properties of the core of\
    \ the Autonomous System (AS).  The\n         design rule presented above specifies\
    \ that these links appear\n         in both core planes.\n   We assume a common\
    \ design rule found in such deployments: The inter-\n   plane link costs (Cik\
    \ - Cjk, where i != j) are set such that the\n   route to an edge destination\
    \ from a given plane stays within the\n   plane unless the plane is partitioned.\n\
    \                             Edge Router A\n                                \
    \ /  \\\n                                /    \\\n                           \
    \    /      \\  Agg Region A\n                              /        \\\n    \
    \                         /          \\\n                            C1A----------C2A\n\
    \                            | \\         | \\\n                            |\
    \  \\        |  \\\n                            |   C1B----------C2B\n       \
    \           Plane1    |    |      |    |     Plane2\n                        \
    \    |    |      |    |\n                            C1C--|-----C2C   |\n    \
    \                          \\  |        \\  |\n                              \
    \ \\ |         \\ |\n                               C1Z----------C2Z\n       \
    \                           \\        /\n                                   \\\
    \      /  Agg Region Z\n                                    \\    /\n        \
    \                             \\  /\n                                 Edge Router\
    \ Z\n               Figure 2: Dual-Plane Network and Disjointness\n   In this\
    \ scenario, the operator requires the ability to deploy\n   different strategies.\
    \  For example, Edge Router A should be able to\n   use the three following options:\n\
    \   o  The traffic is load-balanced across any ECMP path through the\n      network.\n\
    \   o  The traffic is load-balanced across any ECMP path within Plane1 of\n  \
    \    the network.\n   o  The traffic is load-balanced across any ECMP path within\
    \ Plane2 of\n      the network.\n   Most of the data traffic from A to Z would\
    \ use the first option, so\n   as to exploit the capacity efficiently.  The operator\
    \ would use the\n   two other choices for specific premium traffic that has requested\n\
    \   disjoint transport.\n   The SPRING architecture MUST support this use case\
    \ with the following\n   requirements:\n   o  Zero per-service state and signaling\
    \ on midpoint and tail-end\n      routers.\n   o  ECMP-awareness.\n   o  Node\
    \ resiliency property: The traffic-engineering policy is not\n      anchored to\
    \ a specific core node whose failure could impact the\n      service.\n"
- title: 3.3.1.1.2.  Egress Peering Traffic Engineering
  contents:
  - "3.3.1.1.2.  Egress Peering Traffic Engineering\n                            \
    \         +------+\n                                     |      |\n          \
    \                       +---D      F\n                    +---------+ /    | \
    \ AS2 |\\ +------+\n                    |         |/     +------+ \\|   Z  |\n\
    \                    A         C                |      |\n                   \
    \ |         |\\     +------+ /|  AS4 |\n                    B   AS1   | \\   \
    \ |      |/ +------+\n                    |         |  +---E      G\n        \
    \            +---------+      |  AS3 |\n                                     +------+\\\
    \n               Figure 3: Egress Peering Traffic Engineering\n   Let us assume,\
    \ in the network depicted in Figure 3, that:\n   o  C in AS1 learns about destination\
    \ Z of AS4 via two BGP paths (AS2,\n      AS4) and (AS3, AS4).\n   o  C may or\
    \ may not be configured to enforce the next-hop-self\n      behavior before propagating\
    \ the paths within AS1.\n   o  C may propagate all the paths to Z within AS1 (using\
    \ BGP ADD-PATH\n      as specified in [ADD-PATH]).\n   o  C may install in its\
    \ Forwarding Information Base (FIB) only the\n      route via AS2, or only the\
    \ route via AS3, or both.\n   In that context, the SPRING architecture MUST allow\
    \ the operator of\n   AS1 to apply a traffic-engineering policy such as the following\
    \ one,\n   regardless of the configured behavior of the next-hop-self:\n   o \
    \ Steer 60% of the Z-destined traffic received at A via AS2 and 40%\n      via\
    \ AS3.\n   o  Steer 80% of the Z-destined traffic received at B via AS2 and 20%\n\
    \      via AS3.\n   The SPRING architecture MUST allow an ingress node (i.e.,\
    \ an explicit\n   route source node) to select the exit point of a packet as any\n\
    \   combination of an egress node, an egress interface, a peering\n   neighbor,\
    \ and a peering AS.\n   The use cases and requirements for egress peer engineering\
    \ are\n   described in [SR-BGP-EPE].\n"
- title: 3.3.1.1.3.  Load Balancing among Non-parallel Links
  contents:
  - "3.3.1.1.3.  Load Balancing among Non-parallel Links\n   The SPRING architecture\
    \ MUST allow a given node to load-share traffic\n   across multiple non-parallel\
    \ links (i.e., links connected to\n   different adjacent routers), even if these\
    \ lead to different\n   neighbors.  This may be useful for supporting traffic-engineering\n\
    \   policies.\n                                 +---C---D---+\n              \
    \                   |           |\n                       PE1---A---B-----F-----E---PE2\n\
    \               Figure 4: Multiple (Non-parallel) Adjacencies\n   In the above\
    \ example, the operator requires PE1 to load-balance its\n   PE2-destined traffic\
    \ between the ABCDE and ABFE equal-cost paths in a\n   controlled way where the\
    \ operator MUST be allowed to distribute\n   traffic unevenly between paths (Weighted\
    \ Equal-Cost Multipath\n   (WECMP)).\n"
- title: 3.3.1.2.  Traffic Engineering with Bandwidth Admission Control
  contents:
  - "3.3.1.2.  Traffic Engineering with Bandwidth Admission Control\n   The implementation\
    \ of bandwidth admission control within a network\n   (and its possible routing\
    \ consequence, which consists in routing\n   along explicit paths where the bandwidth\
    \ is available) requires a\n   capacity-planning process.\n   The spreading of\
    \ load among ECMP paths is a key attribute of the\n   capacity-planning processes\
    \ applied to packet-based networks.\n"
- title: 3.3.1.2.1.  Capacity-Planning Process
  contents:
  - "3.3.1.2.1.  Capacity-Planning Process\n   Capacity planning anticipates the routing\
    \ of the traffic matrix onto\n   the network topology for a set of expected traffic\
    \ and topology\n   variations.  The heart of the process consists in simulating\
    \ the\n   placement of the traffic along ECMP-aware shortest paths and\n   accounting\
    \ for the resulting bandwidth usage.\n   The bandwidth accounting of a demand\
    \ along its shortest path is a\n   basic capability of any planning tool or PCE\
    \ server.\n   For example, in the network topology described below, and assuming\
    \ a\n   default IGP metric of 1 and IGP metric of 2 for link GF, a 1600 Mbps\n\
    \   A-to-Z flow is accounted as consuming 1600 Mbps on links AB and FZ;\n   800\
    \ Mbps on links BC, BG, and GF; and 400 Mbps on links CD, DF, CE,\n   and EF.\n\
    \                                   C-----D\n                                \
    \ /  \\     \\\n                            A---B    +--E--F--Z\n            \
    \                     \\        /\n                                  G------+\n\
    \             Figure 5: Capacity Planning an ECMP-Based Demand\n   ECMP is extremely\
    \ frequent in Service Provider (SP), enterprise, and\n   data-center architectures\
    \ and it is not rare to see as much as 128\n   different ECMP paths between a\
    \ source and a destination within a\n   single network domain.  It is a key efficiency\
    \ objective to spread\n   the traffic among as many ECMP paths as possible.\n\
    \   This is illustrated in the network diagram below, which consists of a\n  \
    \ subset of a network where already 5 ECMP paths are observed from A to\n   M.\n\
    \                                   C\n                                  / \\\n\
    \                                 B-D-L--\n                                / \\\
    \ /   \\\n                               A   E     \\\n                      \
    \          \\         M\n                                 \\   G   /\n       \
    \                           \\ / \\ /\n                                   F  \
    \ K\n                                    \\ /\n                              \
    \       I\n                      Figure 6: ECMP Topology Example\n   When the\
    \ capacity-planning process detects that a traffic growth\n   scenario and topology\
    \ variation would lead to congestion, a capacity\n   increase is triggered, and\
    \ if it cannot be deployed in due time, a\n   traffic-engineering solution is\
    \ activated within the network.\n   A basic traffic-engineering objective consists\
    \ of finding the\n   smallest set of demands that need to be routed off their\
    \ shortest\n   path to eliminate the congestion, and then to compute an explicit\n\
    \   path for each of them and instantiate these traffic-engineered\n   policies\
    \ in the network.\n   The SPRING architecture MUST offer a simple support for\
    \ ECMP-based\n   shortest-path placement as well as for explicit path policy without\n\
    \   incurring additional signaling in the domain.  This includes:\n   o  the ability\
    \ to steer a packet across a set of ECMP paths\n   o  the ability to diverge from\
    \ a set of ECMP shortest paths to one or\n      more paths not in the set of shortest\
    \ paths\n"
- title: 3.3.1.2.2.  SDN Use Case
  contents:
  - "3.3.1.2.2.  SDN Use Case\n   The SDN use case lies in the SDN controller, (e.g.,\
    \ Stateful PCE as\n   described in [STATEFUL-PCE]).\n   The SDN controller is\
    \ responsible for controlling the evolution of\n   the traffic matrix and topology.\
    \  It accepts or denies the addition\n   of new traffic into the network.  It\
    \ decides how to route the\n   accepted traffic.  It monitors the topology and,\
    \ upon topological\n   change, determines the minimum traffic that should be rerouted\
    \ on an\n   alternate path to alleviate a bandwidth congestion issue.\n   The\
    \ algorithms supporting this behavior are a local matter of the SDN\n   controller\
    \ and are outside the scope of this document.\n   The means of collecting traffic\
    \ and topology information are the same\n   as what would be used with other SDN-based\
    \ traffic-engineering\n   solutions.\n   The means of instantiating policy information\
    \ at a traffic-\n   engineering head-end are the same as what would be used with\
    \ other\n   SDN-based traffic-engineering solutions.\n   In the context of centralized\
    \ optimization and the SDN use case, the\n   SPRING architecture MUST have the\
    \ following attributes:\n   o  Explicit routing capability with or without ECMP-awareness.\n\
    \   o  No signaling hop-by-hop through the network.\n   o  The policy state is\
    \ only maintained at the policy head-end.  No\n      policy state is maintained\
    \ at midpoints and tail-ends.\n   o  Automated guaranteed FRR for any topology.\n\
    \   o  The policy state is in the packet header and not in the\n      intermediate\
    \ nodes along the path.  The policy is absent from\n      midpoints and tail-ends.\n\
    \   o  Highly responsive to change: The SDN Controller only needs to\n      apply\
    \ a policy change at the head-end.  No delay is introduced due\n      to programming\
    \ the midpoints and tail-end along the path.\n"
- title: 3.4.  Interoperability with Non-SPRING Nodes
  contents:
  - "3.4.  Interoperability with Non-SPRING Nodes\n   SPRING nodes MUST interoperate\
    \ with non-SPRING nodes and in both MPLS\n   and IPv6 data planes in order to\
    \ allow a gradual deployment of SPRING\n   on existing MPLS and IPv6 networks.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   SPRING reuses the concept of source routing by\
    \ encoding the path in\n   the packet.  As with other similar source-routing architecture,\
    \ an\n   attacker may manipulate the traffic path by modifying the packet\n  \
    \ header.  By manipulating the traffic path, an attacker may be able to\n   cause\
    \ outages on any part of the network.\n   SPRING adds some metadata on the packet,\
    \ with the list of forwarding\n   path elements that the packet must traverse.\
    \  Depending on the data\n   plane, this list may shrink as the packet traverses\
    \ the network, by\n   keeping only the next elements and forgetting the past ones.\n\
    \   SPRING architecture MUST provide clear trust domain boundaries so\n   that\
    \ source-routing information is only usable within the trusted\n   domain and\
    \ never exposed to the outside world.\n   From a network protection standpoint,\
    \ there is an assumed trust model\n   such that any node imposing an explicit\
    \ route on a packet is assumed\n   to be allowed to do so.  This is a significant\
    \ change compared to\n   plain IP offering the shortest-path routing, but not\
    \ fundamentally\n   different compared to existing techniques providing explicit\
    \ routing\n   capability.  It is expected that, by default, the explicit routing\n\
    \   information is not leaked through the boundaries of the administered\n   domain.\n\
    \   Therefore, the data plane MUST NOT expose any source-routing\n   information\
    \ when a packet leaves the trusted domain.  Special care\n   will be required\
    \ for the existing data planes like MPLS, especially\n   for the inter-provider\
    \ scenario where a third-party provider may push\n   MPLS labels corresponding\
    \ to a SPRING header anywhere in the stack.\n   The architecture document MUST\
    \ analyze the exact security\n   considerations of such a scenario.\n   Filtering\
    \ routing information is typically performed in the control\n   plane, but an\
    \ additional filtering in the forwarding plane is also\n   required.  In SPRING,\
    \ as there is no control plane (related to\n   source-routed paths) between the\
    \ source and the midpoints, filtering\n   in the control plane is not possible\
    \ (or not required, depending on\n   the point of view).  Filtering MUST be performed\
    \ on the forwarding\n   plane on the boundaries and MAY require looking at multiple\
    \ labels or\n   instructions.\n   For the MPLS data plane, this is not a new requirement\
    \ as the\n   existing MPLS architecture already allows such source routing by\n\
    \   stacking multiple labels.  For security protection, Section 2.4 of\n   [RFC4381]\
    \ and Section 8.2 of [RFC5920] already call for the filtering\n   of MPLS packets\
    \ on trust boundaries.\n   If all MPLS labels are filtered at domain boundaries,\
    \ then SPRING\n   does not introduce any change.  If only a subset of labels are\n\
    \   filtered, then SPRING introduces a change since the border router is\n   expected\
    \ to determine which information (e.g., labels) is filtered,\n   while the border\
    \ router is not the originator of these label\n   advertisements.\n   As the SPRING\
    \ architecture must be based on a clear trust domain,\n   mechanisms allowing\
    \ the authentication and validation of the source-\n   routing information must\
    \ be evaluated by the SPRING architecture in\n   order to prevent any form of\
    \ attack or unwanted source-routing\n   information manipulation.\n   Data-plane\
    \ security considerations MUST be addressed in each document\n   related to the\
    \ SPRING data plane (i.e., MPLS and IPv6).\n   The IPv6 data plane proposes the\
    \ use of a cryptographic signature of\n   the source-routed path, which would\
    \ ease this configuration.  This is\n   indeed needed more for the IPv6 data plane,\
    \ which is end to end in\n   nature, compared to the MPLS data plane, which is\
    \ typically\n   restricted to a controlled and trusted zone.\n   In the forwarding\
    \ plane, data-plane extension documents MUST address\n   the security implications\
    \ of the required change.\n   In terms of privacy, SPRING does not propose change\
    \ in terms of\n   encryption.  Each data plane may or may not provide existing\
    \ or\n   future encryption capability.\n   To build the source-routing information\
    \ in the packet, a node in the\n   SPRING architecture will require learning information\
    \ from a control\n   layer.  As this control layer will be in charge of programming\n\
    \   forwarding instructions, an attacker taking over this component may\n   also\
    \ manipulate the traffic path.  Any control protocol used in the\n   SPRING architecture\
    \ SHOULD provide security mechanisms or design to\n   protect against such a control-layer\
    \ attacker.  Control-plane\n   security considerations MUST be addressed in each\
    \ document related to\n   the SPRING control plane.\n"
- title: 5.  Manageability Considerations
  contents:
  - "5.  Manageability Considerations\n   The SPRING WG MUST define Operations, Administration,\
    \ and Maintenance\n   (OAM) procedures applicable to SPRING-enabled networks.\n\
    \   In SPRING networks, the path the packet takes is encoded in the\n   header.\
    \  SPRING architecture MUST include the necessary OAM\n   mechanisms in order\
    \ for the network operator to validate the\n   effectiveness of a path as well\
    \ as to check and monitor its liveness\n   and performance.  Moreover, in SPRING\
    \ architecture, a path may be\n   defined in the forwarding layer (in both MPLS\
    \ and IPv6 data planes)\n   or as a service path (formed by a set of service instances).\
    \  The\n   network operator MUST be capable to monitor, control, and manage\n\
    \   paths (both network and service based) using OAM procedures.\n   OAM use cases\
    \ and requirements are detailed in [OAM-USE] and\n   [SR-OAM].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC4364]\
    \  Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks\
    \ (VPNs)\", RFC 4364, DOI 10.17487/RFC4364, February\n              2006, <http://www.rfc-editor.org/info/rfc4364>.\n\
    \   [RFC4761]  Kompella, K., Ed. and Y. Rekhter, Ed., \"Virtual Private\n    \
    \          LAN Service (VPLS) Using BGP for Auto-Discovery and\n             \
    \ Signaling\", RFC 4761, DOI 10.17487/RFC4761, January 2007,\n              <http://www.rfc-editor.org/info/rfc4761>.\n\
    \   [RFC4762]  Lasserre, M., Ed. and V. Kompella, Ed., \"Virtual Private\n   \
    \           LAN Service (VPLS) Using Label Distribution Protocol (LDP)\n     \
    \         Signaling\", RFC 4762, DOI 10.17487/RFC4762, January 2007,\n       \
    \       <http://www.rfc-editor.org/info/rfc4762>.\n   [RFC6624]  Kompella, K.,\
    \ Kothari, B., and R. Cherukuri, \"Layer 2\n              Virtual Private Networks\
    \ Using BGP for Auto-Discovery and\n              Signaling\", RFC 6624, DOI 10.17487/RFC6624,\
    \ May 2012,\n              <http://www.rfc-editor.org/info/rfc6624>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [ADD-PATH] Walton, D., Retana, A., Chen, E.,\
    \ and J. Scudder,\n              \"Advertisement of Multiple Paths in BGP\", Work\
    \ in\n              Progress, draft-ietf-idr-add-paths-14, April 2016.\n   [OAM-USE]\
    \  Geib, R., Ed., Filsfils, C., Pignataro, C., Ed., and N.\n              Kumar,\
    \ \"A Scalable and Topology-Aware MPLS Dataplane\n              Monitoring System\"\
    , Work in Progress, draft-ietf-spring-\n              oam-usecase-03, April 2016.\n\
    \   [RFC4381]  Behringer, M., \"Analysis of the Security of BGP/MPLS IP\n    \
    \          Virtual Private Networks (VPNs)\", RFC 4381,\n              DOI 10.17487/RFC4381,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4381>.\n  \
    \ [RFC5920]  Fang, L., Ed., \"Security Framework for MPLS and GMPLS\n        \
    \      Networks\", RFC 5920, DOI 10.17487/RFC5920, July 2010,\n              <http://www.rfc-editor.org/info/rfc5920>.\n\
    \   [SPRING-RESIL]\n              Francois, P., Filsfils, C., Decraene, B., and\
    \ R. Shakir,\n              \"Use-cases for Resiliency in SPRING\", Work in Progress,\n\
    \              draft-ietf-spring-resiliency-use-cases-03, April 2016.\n   [SR-BGP-EPE]\n\
    \              Filsfils, C., Ed., Previdi, S., Ed., Ginsburg, D., and D.\n   \
    \           Afanasiev, \"Segment Routing Centralized BGP Peer\n              Engineering\"\
    , Work in Progress, draft-ietf-spring-segment-\n              routing-central-epe-01,\
    \ March 2016.\n   [SR-OAM]   Kumar, N., Pignataro, C., Akiya, N., Geib, R., Mirsky,\
    \ G.,\n              and S. Litkowski, \"OAM Requirements for Segment Routing\n\
    \              Network\", Work in Progress, draft-ietf-spring-sr-oam-\n      \
    \        requirement-01, December 2015.\n   [SRH]      Previdi, S., Filsfils,\
    \ C., Field, B., Leung, I., Linkova,\n              J., Kosugi, T., Vyncke, E.,\
    \ and D. Lebrun, \"IPv6 Segment\n              Routing Header (SRH)\", Work in\
    \ Progress, draft-ietf-6man-\n              segment-routing-header-01, March 2016.\n\
    \   [STATEFUL-PCE]\n              Crabbe, E., Minei, I., Medved, J., and R. Varga,\
    \ \"PCEP\n              Extensions for Stateful PCE\", Work in Progress,\n   \
    \           draft-ietf-pce-stateful-pce-14, March 2016.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Yakov Rekhter for his contribution\
    \ to\n   this document.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following individuals substantially contributed to the content\
    \ of\n   this document:\n   Ruediger Geib\n   Deutsche Telekom\n   Heinrich Hertz\
    \ Str. 3-7\n   Darmstadt  64295\n   Germany\n   Email: Ruediger.Geib@telekom.de\n\
    \   Robert Raszuk\n   Mirantis Inc.\n   615 National Ave.\n   94043 Mountain View,\
    \ CA\n   United States\n   Email: robert@raszuk.net\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stefano Previdi (editor)\n   Cisco Systems, Inc.\n   Via\
    \ Del Serafico, 200\n   Rome  00142\n   Italy\n   Email: sprevidi@cisco.com\n\
    \   Clarence Filsfils (editor)\n   Cisco Systems, Inc.\n   Brussels\n   Belgium\n\
    \   Email: cfilsfil@cisco.com\n   Bruno Decraene\n   Orange\n   France\n   Email:\
    \ bruno.decraene@orange.com\n   Stephane Litkowski\n   Orange\n   France\n   Email:\
    \ stephane.litkowski@orange.com\n   Martin Horneffer\n   Deutsche Telekom\n  \
    \ Muenster  48153\n   Germany\n   Email: Martin.Horneffer@telekom.de\n   Rob Shakir\n\
    \   Jive Communications, Inc.\n   1275 West 1600 North, Suite 100\n   Orem, UT\
    \  84057\n   United States\n   Email: rjs@rob.sh\n"
