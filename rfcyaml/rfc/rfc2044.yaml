- title: __initial_text__
  contents:
  - '        UTF-8, a transformation format of Unicode and ISO 10646

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Unicode Standard, version 1.1, and ISO/IEC 10646-1:1993 jointly\n\
    \   define a 16 bit character set which encompasses most of the world's\n   writing\
    \ systems. 16-bit characters, however, are not compatible with\n   many current\
    \ applications and protocols, and this has led to the\n   development of a few\
    \ so-called UCS transformation formats (UTF), each\n   with different characteristics.\
    \  UTF-8, the object of this memo, has\n   the characteristic of preserving the\
    \ full US-ASCII range: US-ASCII\n   characters are encoded in one octet having\
    \ the usual US-ASCII value,\n   and any octet with such a value can only be an\
    \ US-ASCII character.\n   This provides compatibility with file systems, parsers\
    \ and other\n   software that rely on US-ASCII values but are transparent to other\n\
    \   values.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Unicode Standard, version 1.1 [UNICODE], and ISO/IEC\
    \ 10646-1:1993\n   [ISO-10646] jointly define a 16 bit character set, UCS-2, which\n\
    \   encompasses most of the world's writing systems.  ISO 10646 further\n   defines\
    \ a 31-bit character set, UCS-4, with currently no assignments\n   outside of\
    \ the region corresponding to UCS-2 (the Basic Multilingual\n   Plane, BMP). \
    \ The UCS-2 and UCS-4 encodings, however, are hard to use\n   in many current\
    \ applications and protocols that assume 8 or even 7\n   bit characters.  Even\
    \ newer systems able to deal with 16 bit\n   characters cannot process UCS-4 data.\
    \ This situation has led to the\n   development of so-called UCS transformation\
    \ formats (UTF), each with\n   different characteristics.\n   UTF-1 has only historical\
    \ interest, having been removed from ISO\n   10646.  UTF-7 has the quality of\
    \ encoding the full Unicode repertoire\n   using only octets with the high-order\
    \ bit clear (7 bit US-ASCII\n   values, [US-ASCII]), and is thus deemed a mail-safe\
    \ encoding\n   ([RFC1642]).  UTF-8, the object of this memo, uses all bits of\
    \ an\n   octet, but has the quality of preserving the full US-ASCII range:\n \
    \  US-ASCII characters are encoded in one octet having the normal US-\n   ASCII\
    \ value, and any octet with such a value can only stand for an\n   US-ASCII character,\
    \ and nothing else.\n   UTF-16 is a scheme for transforming a subset of the UCS-4\
    \ repertoire\n   into a pair of UCS-2 values from a reserved range.  UTF-16 impacts\n\
    \   UTF-8 in that UCS-2 values from the reserved range must be treated\n   specially\
    \ in the UTF-8 transformation.\n   UTF-8 encodes UCS-2 or UCS-4 characters as\
    \ a varying number of\n   octets, where the number of octets, and the value of\
    \ each, depend on\n   the integer value assigned to the character in ISO 10646.\
    \  This\n   transformation format has the following characteristics (all values\n\
    \   are in hexadecimal):\n   -  Character values from 0000 0000 to 0000 007F (US-ASCII\
    \ repertoire)\n      correspond to octets 00 to 7F (7 bit US-ASCII values).\n\
    \   -  US-ASCII values do not appear otherwise in a UTF-8 encoded charac-\n  \
    \    ter stream.  This provides compatibility with file systems or\n      other\
    \ software (e.g. the printf() function in C libraries) that\n      parse based\
    \ on US-ASCII values but are transparent to other val-\n      ues.\n   -  Round-trip\
    \ conversion is easy between UTF-8 and either of UCS-4,\n      UCS-2 or Unicode.\n\
    \   -  The first octet of a multi-octet sequence indicates the number of\n   \
    \   octets in the sequence.\n   -  Character boundaries are easily found from\
    \ anywhere in an octet\n      stream.\n   -  The lexicographic sorting order of\
    \ UCS-4 strings is preserved.  Of\n      course this is of limited interest since\
    \ the sort order is not\n      culturally valid in either case.\n   -  The octet\
    \ values FE and FF never appear.\n   UTF-8 was originally a project of the X/Open\
    \ Joint\n   Internationalization Group XOJIG with the objective to specify a File\n\
    \   System Safe UCS Transformation Format [FSS-UTF] that is compatible\n   with\
    \ UNIX systems, supporting multilingual text in a single encoding.\n   The original\
    \ authors were Gary Miller, Greger Leijonhufvud and John\n   Entenmann.  Later,\
    \ Ken Thompson and Rob Pike did significant work for\n   the formal UTF-8.\n \
    \  A description can also be found in Unicode Technical Report #4 [UNI-\n   CODE].\
    \  The definitive reference, including provisions for UTF-16\n   data within UTF-8,\
    \ is Annex R of ISO/IEC 10646-1 [ISO-10646].\n"
- title: 2.  UTF-8 definition
  contents:
  - "2.  UTF-8 definition\n   In UTF-8, characters are encoded using sequences of\
    \ 1 to 6 octets.\n   The only octet of a \"sequence\" of one has the higher-order\
    \ bit set to\n   0, the remaining 7 bits being used to encode the character value.\
    \ In\n   a sequence of n octets, n>1, the initial octet has the n higher-order\n\
    \   bits set to 1, followed by a bit set to 0.  The remaining bit(s) of\n   that\
    \ octet contain bits from the value of the character to be\n   encoded.  The following\
    \ octet(s) all have the higher-order bit set to\n   1 and the following bit set\
    \ to 0, leaving 6 bits in each to contain\n   bits from the character to be encoded.\n\
    \   The table below summarizes the format of these different octet types.\n  \
    \ The letter x indicates bits available for encoding bits of the UCS-4\n   character\
    \ value.\n   UCS-4 range (hex.)           UTF-8 octet sequence (binary)\n   0000\
    \ 0000-0000 007F   0xxxxxxx\n   0000 0080-0000 07FF   110xxxxx 10xxxxxx\n   0000\
    \ 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-001F FFFF   11110xxx\
    \ 10xxxxxx 10xxxxxx 10xxxxxx\n   0020 0000-03FF FFFF   111110xx 10xxxxxx 10xxxxxx\
    \ 10xxxxxx 10xxxxxx\n   0400 0000-7FFF FFFF   1111110x 10xxxxxx ... 10xxxxxx\n\
    \   Encoding from UCS-4 to UTF-8 proceeds as follows:\n   1) Determine the number\
    \ of octets required from the character value\n      and the first column of the\
    \ table above.\n   2) Prepare the high-order bits of the octets as per the second\
    \ column\n      of the table.\n   3) Fill in the bits marked x from the bits of\
    \ the character value,\n      starting from the lower-order bits of the character\
    \ value and\n      putting them first in the last octet of the sequence, then\
    \ the\n      next to last, etc. until all x bits are filled in.\n      The algorithm\
    \ for encoding UCS-2 (or Unicode) to UTF-8 can be\n      obtained from the above,\
    \ in principle, by simply extending each\n      UCS-2 character with two zero-valued\
    \ octets.  However, UCS-2 val-\n      ues between D800 and DFFF, being actually\
    \ UCS-4 characters trans-\n      formed through UTF-16, need special treatment:\
    \ the UTF-16 trans-\n      formation must be undone, yielding a UCS-4 character\
    \ that is then\n      transformed as above.\n      Decoding from UTF-8 to UCS-4\
    \ proceeds as follows:\n   1) Initialize the 4 octets of the UCS-4 character with\
    \ all bits set\n      to 0.\n   2) Determine which bits encode the character value\
    \ from the number of\n      octets in the sequence and the second column of the\
    \ table above\n      (the bits marked x).\n   3) Distribute the bits from the\
    \ sequence to the UCS-4 character,\n      first the lower-order bits from the\
    \ last octet of the sequence and\n      proceeding to the left until no x bits\
    \ are left.\n      If the UTF-8 sequence is no more than three octets long, decoding\n\
    \      can proceed directly to UCS-2 (or equivalently Unicode).\n      A more\
    \ detailed algorithm and formulae can be found in [FSS_UTF],\n      [UNICODE]\
    \ or Annex R to [ISO-10646].\n"
- title: 3.  Examples
  contents:
  - "3.  Examples\n   The Unicode sequence \"A<NOT IDENTICAL TO><ALPHA>.\" (0041,\
    \ 2262, 0391,\n   002E) may be encoded as follows:\n      41 E2 89 A2 CE 91 2E\n\
    \   The Unicode sequence \"Hi Mom <WHITE SMILING FACE>!\" (0048, 0069,\n   0020,\
    \ 004D, 006F, 006D, 0020, 263A, 0021) may be encoded as follows:\n      48 69\
    \ 20 4D 6F 6D 20 E2 98 BA 21\n   The Unicode sequence representing the Han characters\
    \ for the Japanese\n   word \"nihongo\" (65E5, 672C, 8A9E) may be encoded as follows:\n\
    \      E6 97 A5 E6 9C AC E8 AA 9E\n"
- title: MIME registrations
  contents:
  - "MIME registrations\n   This memo is meant to serve as the basis for registration\
    \ of a MIME\n   character encoding (charset) as per [RFC1521].  The proposed charset\n\
    \   parameter value is \"UTF-8\".  This string would label media types\n   containing\
    \ text consisting of characters from the repertoire of ISO\n   10646-1 encoded\
    \ to a sequence of octets using the encoding scheme\n   outlined above.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following have participated in the drafting and discussion\
    \ of\n   this memo:\n      James E. Agenbroad   Andries Brouwer\n      Martin\
    \ J. D|rst      David Goldsmith\n      Edwin F. Hart        Kent Karlsson\n  \
    \    Markus Kuhn          Michael Kung\n      Alain LaBonte        Murray Sargent\n\
    \      Keld Simonsen        Arnold Winkler\n"
- title: Bibliography
  contents:
  - "Bibliography\n   [FSS_UTF]      X/Open CAE Specification C501 ISBN 1-85912-082-2\
    \ 28cm.\n                  22p. pbk. 172g.  4/95, X/Open Company Ltd., \"File\
    \ Sys-\n                  tem Safe UCS Transformation Format (FSS_UTF)\", X/Open\n\
    \                  Preleminary Specification, Document Number P316.  Also\n  \
    \                published in Unicode Technical Report #4.\n   [ISO-10646]   \
    \ ISO/IEC 10646-1:1993. International Standard -- Infor-\n                  mation\
    \ technology -- Universal Multiple-Octet Coded\n                  Character Set\
    \ (UCS) -- Part 1: Architecture and Basic\n                  Multilingual Plane.\
    \  UTF-8 is described in Annex R,\n                  adopted but not yet published.\
    \  UTF-16 is described in\n                  Annex Q, adopted but not yet published.\n\
    \   [RFC1521]      Borenstein, N., and N. Freed, \"MIME (Multipurpose\n      \
    \            Internet Mail Extensions) Part One: Mechanisms for\n            \
    \      Specifying and Describing the Format of Internet Mes-\n               \
    \   sage Bodies\", RFC 1521, Bellcore, Innosoft, September\n                 \
    \ 1993.\n   [RFC1641]      Goldsmith, D., and M. Davis, \"Using Unicode with\n\
    \                  MIME\", RFC 1641, Taligent inc., July 1994.\n   [RFC1642] \
    \     Goldsmith, D., and M. Davis, \"UTF-7: A Mail-safe\n                  Transformation\
    \ Format of Unicode\", RFC 1642,\n                  Taligent, Inc., July 1994.\n\
    \   [UNICODE]      The Unicode Consortium, \"The Unicode Standard --\n       \
    \           Worldwide Character Encoding -- Version 1.0\", Addison-\n        \
    \          Wesley, Volume 1, 1991, Volume 2, 1992.  UTF-8 is\n               \
    \   described in Unicode Technical Report #4.\n   [US-ASCII]     Coded Character\
    \ Set--7-bit American Standard Code for\n                  Information Interchange,\
    \ ANSI X3.4-1986.\n"
- title: Author's Address
  contents:
  - "Author's Address\n      Francois Yergeau\n      Alis Technologies\n      100,\
    \ boul. Alexis-Nihon\n      Suite 600\n      Montreal  QC  H4M 2P2\n      Canada\n\
    \      Tel: +1 (514) 747-2547\n      Fax: +1 (514) 747-2561\n      EMail: fyergeau@alis.com\n"
