- contents:
  - '         IMAP Extension for Referencing the Last SEARCH Result

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   Many IMAP clients use the result of a SEARCH command as the input
    to\n   perform another operation, for example, fetching the found messages,\n
    \  deleting them, or copying them to another mailbox.\n   This can be achieved
    using standard IMAP operations described in RFC\n   3501; however, this would
    be suboptimal.  The server will send the\n   list of found messages to the client;
    after that, the client will\n   have to parse the list, reformat it, and send
    it back to the server.\n   The client can't pipeline the SEARCH command with the
    subsequent\n   command, and, as a result, the server might not be able to perform\n
    \  some optimizations.\n   This document proposes an IMAP extension that allows
    a client to tell\n   a server to use the result of a SEARCH (or Unique Identifier
    (UID)\n   SEARCH) command as an input to any subsequent command.\n"
  title: Abstract
- contents:
  - "1.   Introduction\n   Many IMAP clients use the result of a SEARCH command as
    the input to\n   perform another operation, for example, fetching the found messages,\n
    \  deleting them, or copying them to another mailbox.\n   This document proposes
    an IMAP extension that allows a client to tell\n   a server to use the result
    of a SEARCH (or UID SEARCH) command as an\n   input to any subsequent command.\n
    \  The SEARCH result reference extension defines a new SEARCH result\n   option
    [IMAPABNF] \"SAVE\" that tells the server to remember the result\n   of the SEARCH
    or UID SEARCH command (as well as any command based on\n   SEARCH, e.g., SORT
    and THREAD [SORT]) and store it in an internal\n   variable that we will reference
    as the \"search result variable\".  The\n   client can use the \"$\" marker to
    reference the content of this\n   internal variable.  The \"$\" marker can be
    used instead of message\n   sequence or UID sequence in order to indicate that
    the server should\n   substitute it with the list of messages from the search
    result\n   variable.  Thus, the client can use the result of the latest\n   remembered
    SEARCH command as a parameter to another command.  The\n   search result marker
    has several advantages:\n      * it avoids wasted bandwidth and associated delay;\n
    \     * it allows the client to pipeline a SEARCH [IMAP4] command with a\n        subsequent
    FETCH/STORE/COPY/SEARCH [IMAP4] or UID EXPUNGE\n        [UIDPLUS] command;\n      *
    the client doesn't need to spend time reformatting the result of\n        a SEARCH
    command into a message set used in the subsequent\n        command;\n      * it
    allows the server to perform optimizations.  For example, if\n        the server
    can execute several pipelined commands in parallel\n        (or out of order),
    presence of the search result marker can\n        allow the server to decide which
    commands may or may not be\n        executed out of order.\n   In absence of any
    other SEARCH result option, the SAVE result option\n   also suppresses any SEARCH
    response that would have been otherwise\n   returned by the SEARCH command.\n"
  - contents:
    - "1.1.   Conventions Used in This Document\n   In examples, \"C:\" indicates
      lines sent by a client that is connected\n   to a server.  \"S:\" indicates
      lines sent by the server to the client.\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in [KEYWORDS].\n   Explanatory comments in examples start with // and are not
      part of\n   the protocol.\n"
    title: 1.1.   Conventions Used in This Document
  title: 1.   Introduction
- contents:
  - '2.  Overview

    '
  - contents:
    - "2.1.   Normative Description of the SEARCHRES Extension\n   The SEARCH result
      reference extension described in this document is\n   present in any IMAP4 server
      implementation that returns \"SEARCHRES\"\n   as one of the supported capabilities
      in the CAPABILITY command\n   response.  Any such server MUST also implement
      the [ESEARCH]\n   extension.\n   Upon successful completion of a SELECT or an
      EXAMINE command (after\n   the tagged OK response), the current search result
      variable is reset\n   to the empty sequence.\n   A successful SEARCH command
      with the SAVE result option sets the\n   value of the search result variable
      to the list of messages found in\n   the SEARCH command.  For example, if no
      messages were found, the\n   search result variable will contain the empty list.\n
      \  Any of the following SEARCH commands MUST NOT change the search\n   result
      variable:\n      o a SEARCH command that caused the server to return the BAD
      tagged\n        response,\n      o a SEARCH command with no SAVE result option
      that caused the\n        server to return NO tagged response,\n      o a successful
      SEARCH command with no SAVE result option.\n   A SEARCH command with the SAVE
      result option that caused the server\n   to return the NO tagged response sets
      the value of the search result\n   variable to the empty sequence.\n   When
      a message listed in the search result variable is EXPUNGEd, it\n   is automatically
      removed from the list.  Implementors are reminded\n   that if the server stores
      the list as a list of message numbers, it\n   MUST automatically adjust them
      when notifying the client about\n   expunged messages, as described in Section
      7.4.1 of [IMAP4].\n   If the server decides to send a new UIDVALIDITY value
      while the\n   mailbox is opened, this causes resetting of the search variable
      to\n   the empty list.\n   Note that even if the \"$\" marker contains the empty
      list of messages,\n   it must be treated by all commands accepting message sets
      as\n   parameters as a valid, but non-matching list of messages.  For\n   example,
      the \"FETCH $\" command would return a tagged OK response and\n   no FETCH responses.
      \ See also the Example 5 below.\n   Note that even if the \"$\" marker contains
      the empty list of messages,\n   it must be treated as a valid but non-matching
      list of messages, by\n   all commands that accept message sets as parameters.\n
      \  Implementation note: server implementors should note that \"$\" can\n   reference
      IMAP message sequences or UID sequences, depending on the\n   context where
      it is used.  For example, the \"$\" marker can be set as\n   a result of a SEARCH
      (SAVE) command and used as a parameter to a UID\n   FETCH command (which accepts
      a UID sequence, not a message sequence),\n   or the \"$\" marker can be set
      as a result of a UID SEARCH (SAVE)\n   command and used as a parameter to a
      FETCH command (which accepts a\n   message sequence, not a UID sequence).\n"
    title: 2.1.   Normative Description of the SEARCHRES Extension
  - contents:
    - "2.2.   Examples\n   1) The following example demonstrates how the client can
      use the\n      result of a SEARCH command to FETCH headers of interesting\n
      \     messages:\n   Example 1:\n            C: A282 SEARCH RETURN (SAVE) FLAGGED
      SINCE 1-Feb-1994\n                NOT FROM \"Smith\"\n            S: A282 OK
      SEARCH completed, result saved\n            C: A283 FETCH $ (UID INTERNALDATE
      FLAGS RFC822.HEADER)\n            S: * 2 FETCH (UID 14 ...\n            S: *
      84 FETCH (UID 100 ...\n            S: * 882 FETCH (UID 1115 ...\n            S:
      A283 OK completed\n   The client can also pipeline the two commands:\n   Example
      2:\n            C: A282 SEARCH RETURN (SAVE) FLAGGED SINCE 1-Feb-1994\n                NOT
      FROM \"Smith\"\n            C: A283 FETCH $ (UID INTERNALDATE FLAGS RFC822.HEADER)\n
      \           S: A282 OK SEARCH completed\n            S: * 2 FETCH (UID 14 ...\n
      \           S: * 84 FETCH (UID 100 ...\n            S: * 882 FETCH (UID 1115
      ...\n            S: A283 OK completed\n   2) The following example demonstrates
      that the result of one SEARCH\n      command can be used as input to another
      SEARCH command:\n   Example 3:\n            C: A300 SEARCH RETURN (SAVE) SINCE
      1-Jan-2004\n                NOT FROM \"Smith\"\n            S: A300 OK SEARCH
      completed\n            C: A301 UID SEARCH UID $ SMALLER 4096\n            S:
      * SEARCH 17 900 901\n            S: A301 OK completed\n   Note that the second
      command in Example 3 can be replaced with:\n            C: A301 UID SEARCH $
      SMALLER 4096\n   and the result of the command would be the same.\n   3) The
      following example shows that the \"$\"\n      marker can be combined with other
      message numbers using the OR\n      SEARCH criterion.\n   Example 4:\n            C:
      P282 SEARCH RETURN (SAVE) SINCE 1-Feb-1994\n                NOT FROM \"Smith\"\n
      \           S: P282 OK SEARCH completed\n            C: P283 SEARCH CHARSET
      UTF-8 (OR $ 1,3000:3021) TEXT {8}\n            C: YYYYYYYY\n            S: *
      SEARCH 882 1102 3003 3005 3006\n            S: P283 OK completed\n   Note: Since
      this document format is restricted to 7-bit ASCII text,\n   it is not possible
      to show actual UTF-8 data.  The \"YYYYYYYY\" is a\n   placeholder for what would
      be 8 octets of 8-bit data in an actual\n   transaction.\n   4) The following
      example demonstrates that a failed SEARCH sets the\n      search result variable
      to the empty list.\n   Example 5:\n            C: B282 SEARCH RETURN (SAVE)
      SINCE 1-Feb-1994\n                NOT FROM \"Smith\"\n            S: B282 OK
      SEARCH completed\n            C: B283 SEARCH CHARSET KOI8-R (OR $ 1,3000:3021)
      TEXT {4}\n            C: XXXX\n            S: B283 NO [BADCHARSET UTF-8] KOI8-R
      is not supported\n            //After this command the saved result variable
      contains\n            //no messages.  A client that wants to reissue the B283\n
      \           //SEARCH command with another CHARSET would have to reissue\n            //the
      B282 command as well.  One possible workaround for\n            //this is to
      include the desired CHARSET parameter\n            //in the earliest SEARCH
      RETURN (SAVE) command in a\n            //sequence of related SEARCH commands.\n
      \           //A better approach might be to always use CHARSET UTF-8\n            //instead.\n
      \  Note: Since this document format is restricted to 7-bit ASCII text,\n   it
      is not possible to show actual KOI8-R data.  The \"XXXX\" is a\n   placeholder
      for what would be 4 octets of 8-bit data in an actual\n   transaction.\n   5)
      The following example demonstrates that it is not an error to use\n      the
      \"$\" marker when it contains no messages.\n   Example 6:\n            C: E282
      SEARCH RETURN (SAVE) SINCE 28-Oct-2006\n                NOT FROM \"Eric\"\n
      \           C: E283 COPY $ \"Other Messages\"\n            //The \"$\" contains
      no messages\n            S: E282 OK SEARCH completed\n            S: E283 OK
      COPY completed, nothing copied\n"
    title: 2.2.   Examples
  - contents:
    - "2.3.   Multiple Commands in Progress\n   Use of a SEARCH RETURN (SAVE) command
      followed by a command using the\n   \"$\" marker creates direct dependency between
      the two commands.  As\n   directed by Section 5.5 of [IMAP4], a server MUST
      execute the two\n   commands in the order they were received.  (A server capable
      of\n   out-of-order execution can in some cases execute the two commands in\n
      \  parallel, for example, if a SEARCH RETURN (SAVE) is followed by\n   \"SEARCH
      $\", the search criteria from the first command can be\n   directly substituted
      into the second command.)\n   A client supporting this extension MAY pipeline
      a SEARCH RETURN\n   (SAVE) command with one or more command using the \"$\"
      marker, as long\n   as this doesn't create an ambiguity, as described in Section
      5.5 of\n   [IMAP4].\n   Example 7:\n            C: F282 SEARCH RETURN (SAVE)
      KEYWORD $Junk\n            C: F283 COPY $ \"Junk\"\n            C: F284 STORE
      $ +FLAGS.Silent (\\Deleted)\n            S: F282 OK SEARCH completed\n            S:
      F283 OK COPY completed\n            S: F284 OK STORE completed\n   Example 8:\n
      \           C: G282 SEARCH RETURN (SAVE) KEYWORD $Junk\n            C: G283
      SEARCH RETURN (ALL) SINCE 28-Oct-2006\n                FROM \"Eric\"\n            //The
      server can execute the two SEARCH commands\n            //in any order, as they
      don't have any dependency.\n            //Note that the second command is making
      use of\n            //the [ESEARCH] extension.\n            S: * ESEARCH (TAG
      \"G283\") ALL 3:15,27,29:103\n            S: G283 OK SEARCH completed\n            S:
      G282 OK SEARCH completed\n   The following example demonstrates that the result
      of the second\n   SEARCH always overrides the result of the first.\n   Example
      9:\n               C: H282 SEARCH RETURN (SAVE) KEYWORD $Junk\n               C:
      H283 SEARCH RETURN (SAVE) SINCE 28-Oct-2006\n                   FROM \"Eric\"\n
      \              S: H282 OK SEARCH completed\n               S: H283 OK SEARCH
      completed\n"
    title: 2.3.   Multiple Commands in Progress
  - contents:
    - "2.4.   Interaction with ESEARCH Extension\n   Servers that implement the extension
      defined in this document MUST\n   implement [ESEARCH] and conform to additional
      requirements listed in\n   this section.\n   The SAVE result option doesn't
      change whether the server would return\n   items corresponding to MIN, MAX,
      ALL, or COUNT [ESEARCH] result\n   options.\n   When the SAVE result option
      is combined with the MIN or MAX [ESEARCH]\n   result option, and none of the
      other ESEARCH result options are\n   present, the corresponding MIN/MAX is returned
      (if the search result\n   is not empty), but the \"$\" marker would contain
      a single message as\n   returned in the MIN/MAX return item.\n   If the SAVE
      result option is combined with both MIN and MAX result\n   options, and none
      of the other ESEARCH result options are present,\n   the \"$\" marker would
      contain one or two messages as returned in the\n   MIN/MAX return items.\n   If
      the SAVE result option is combined with the ALL and/or COUNT\n   result option(s),
      the \"$\" marker would always contain all messages\n   found by the SEARCH or
      UID SEARCH command.  (Note that the last rule\n   might affect ESEARCH implementations
      that optimize how the COUNT\n   result is constructed.)\n   The following table
      summarizes the additional requirement on ESEARCH\n   server implementations
      described in this section.\n            +----------------+-------------------+\n
      \           | Combination of | \"$\" marker value  |\n            |  Result
      option |                   |\n            +----------------+-------------------+\n
      \           |   SAVE MIN     |        MIN        |\n            +----------------+-------------------+\n
      \           |   SAVE MAX     |        MAX        |\n            +----------------+-------------------+\n
      \           |   SAVE MIN MAX |     MIN & MAX     |\n            +----------------+-------------------+\n
      \           |   SAVE * [m]   | all found messages|\n            +----------------+-------------------+\n
      \           where  '*'  means \"ALL\" and/or \"COUNT\"\n                   '[m]'
      means optional \"MIN\" and/or \"MAX\"\n   The following example demonstrates
      behavioral difference for\n   different combinations of ESEARCH result options.
      \ Explanatory\n   comments start with // and are not part of the protocol:\n
      \  Example 10:\n              C: C282 SEARCH RETURN (ALL) SINCE 12-Feb-2006\n
      \                 NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C283\")
      ALL 2,10:15,21\n            //$ value hasn't changed\n              S: C282
      OK SEARCH completed\n              C: C283 SEARCH RETURN (ALL SAVE) SINCE 12-Feb-2006\n
      \                 NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C283\")
      ALL 2,10:15,21\n            //$ value is 2,10:15,21\n              S: C283 OK
      SEARCH completed\n              C: C284 SEARCH RETURN (SAVE MIN) SINCE 12-Feb-2006\n
      \                 NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C284\")
      MIN 2\n            //$ value is 2\n              S: C284 OK SEARCH completed\n
      \             C: C285 SEARCH RETURN (MAX SAVE MIN) SINCE\n                  12-Feb-2006
      NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C285\") MIN 2 MAX 21\n
      \           //$ value is 2,21\n              S: C285 OK SEARCH completed\n              C:
      C286 SEARCH RETURN (MAX SAVE MIN COUNT)\n                  SINCE 12-Feb-2006
      NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C286\") MIN 2 MAX 21 COUNT
      8\n            //$ value is 2,10:15,21\n              S: C286 OK SEARCH completed\n
      \             C: C286 SEARCH RETURN (ALL SAVE MIN) SINCE\n                  12-Feb-2006
      NOT FROM \"Smith\"\n              S: * ESEARCH (TAG \"C286\") MIN 2 ALL 2,10:15,21\n
      \           //$ value is 2,10:15,21\n              S: C286 OK SEARCH completed\n"
    title: 2.4.   Interaction with ESEARCH Extension
  - contents:
    - "2.5.   Refusing to Save Search Results\n   In some cases, the server MAY refuse
      to save a SEARCH (SAVE) result,\n   for example, if an internal limit on the
      number of saved results is\n   reached.\n   In this case, the server MUST return
      a tagged NO response containing\n   the NOTSAVED response code and set the search
      result variable to the\n   empty sequence, as described in Section 2.1.\n"
    title: 2.5.   Refusing to Save Search Results
  title: 2.  Overview
- contents:
  - "3.   Formal Syntax\n   The following syntax specification uses the Augmented
    Backus-Naur\n   Form (ABNF) notation as specified in [ABNF].  Non-terminals\n
    \  referenced but not defined below are as defined in [IMAP4] or\n   [IMAPABNF].\n
    \  Except as noted otherwise, all alphabetic characters are\n   case-insensitive.
    \ The use of upper- or lower-case characters to\n   define token strings is for
    editorial clarity only.  Implementations\n   MUST accept these strings in a case-insensitive
    fashion.\n         capability         =/ \"SEARCHRES\"\n                              ;;
    capability is defined in [IMAP4]\n         sequence-set       =/ seq-last-command\n
    \                             ;; extends sequence-set to allow for\n                              ;;
    \"result of the last command\" indicator.\n         seq-last-command   = \"$\"\n
    \        search-return-opt  = \"SAVE\"\n                              ;; conforms
    to generic search-return-opt\n                              ;; syntax defined
    in [IMAPABNF]\n         resp-text-code     =/ \"NOTSAVED\"\n                              ;;
    <resp-text-code> from [IMAP4]\n"
  title: 3.   Formal Syntax
- contents:
  - "4.   Security Considerations\n   This extension requires the server to keep additional
    state, that may\n   be used to simplify Denial of Service attacks.  In order to
    minimize\n   damage from such attacks, server implementations MAY limit the number\n
    \  of saved searches they allow across all connections at any given time\n   and
    return the tagged NO response containing the NOTSAVED response\n   code (see Section
    2.5) to a SEARCH RETURN (SAVE) command when this\n   limit is exceeded.\n   Apart
    from that, it is believed that this extension doesn't raise any\n   additional
    security concerns not already discussed in [IMAP4].\n"
  title: 4.   Security Considerations
- contents:
  - "5.  IANA Considerations\n   This document defines the \"SEARCHRES\" IMAP capability.
    \ IANA has\n   added it to the IMAP4 Capabilities Registry, which is currently\n
    \  located at:\n   http://www.iana.org/assignments/imap4-capabilities\n"
  title: 5.  IANA Considerations
- contents:
  - "6.   Acknowledgments\n   The author would like to thank Mark Crispin, Cyrus Daboo,
    and Curtis\n   King for remembering that this document had to be written, as well
    as\n   for comments and corrections received.\n   The author would also like to
    thank Dave Cridland, Mark Crispin,\n   Chris Newman, Dan Karp, and Spencer Dawkins
    for comments and\n   corrections received.\n   Valuable comments, both in agreement
    and in dissent, were received\n   from Arnt Gulbrandsen.\n"
  title: 6.   Acknowledgments
- contents:
  - '7.   References

    '
  - contents:
    - "7.1. Normative References\n   [KEYWORDS] Bradner, S., \"Key words for use in
      RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [ABNF]     Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n
      \             Syntax Specifications: ABNF\", STD 68, RFC 5234, January\n              2008.\n
      \  [IMAP4]    Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\",
      RFC 3501, March 2003.\n   [IMAPABNF] Melnikov, A. and C. Daboo, \"Collected
      Extensions to IMAP4\n              ABNF\", RFC 4466, April 2006.\n   [ESEARCH]
      \ Melnikov, A. and D. Cridland, \"IMAP4 Extension to SEARCH\n              Command
      for Controlling What Kind of Information Is\n              Returned\", RFC 4731,
      November 2006.\n"
    title: 7.1. Normative References
  - contents:
    - "7.2. Informative References\n   [UIDPLUS]  Crispin, M., \"Internet Message
      Access Protocol (IMAP) -\n              UIDPLUS extension\", RFC 4315, December
      2005.\n   [SORT]     Crispin, M. and  K. Murchison, \"INTERNET MESSAGE ACCESS\n
      \             PROTOCOL - SORT AND THREAD EXTENSIONS\", Work in Progress,\n              Septemeber
      2007.\n"
    title: 7.2. Informative References
  title: 7.   References
- contents:
  - "Author's Address\n   Alexey Melnikov\n   Isode Ltd.\n   5 Castle Business Village,\n
    \  36 Station Road,\n   Hampton, Middlesex,\n   TW12 2BX, United Kingdom\n   EMail:
    Alexey.Melnikov@isode.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
