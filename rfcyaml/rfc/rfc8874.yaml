- title: __initial_text__
  contents:
  - '                  Working Group GitHub Usage Guidance

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides a set of guidelines for working groups that\n\
    \   choose to use GitHub for their work.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8874.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Distributed Version Control\
    \ Systems\n     1.2.  GitHub\n     1.3.  Other Services\n     1.4.  Document Goals\n\
    \     1.5.  Notational Conventions\n   2.  Administrative Policies\n     2.1.\
    \  Organizations\n     2.2.  Communicating Policies\n   3.  Deciding to Use GitHub\n\
    \     3.1.  What to Use GitHub For\n     3.2.  Repositories\n     3.3.  Editors\
    \ and Contributors\n     3.4.  Document Formats\n   4.  Contribution Methods\n\
    \     4.1.  Issue Tracker\n       4.1.1.  Issue Labels\n       4.1.2.  Closing\
    \ Issues\n       4.1.3.  Reopening Issues\n     4.2.  Pull Requests\n       4.2.1.\
    \  Discussion on Pull Requests\n       4.2.2.  Merging Pull Requests\n     4.3.\
    \  Monitoring Activity\n   5.  Typical Working Group Policies\n     5.1.  Document\
    \ Management Mode\n     5.2.  Issue Tracking Mode\n     5.3.  Issue Discussion\
    \ Mode\n       5.3.1.  Early Design Phases\n       5.3.2.  Managing Mature Documents\n\
    \     5.4.  Issue Labeling Schemes\n       5.4.1.  Editorial/Design Labeling\n\
    \       5.4.2.  Decision Labeling\n       5.4.3.  Component Labeling\n       5.4.4.\
    \  Other Labels\n   6.  Internet-Draft Publication\n   7.  Assessing Consensus\n\
    \   8.  Continuous Integration\n   9.  Advice to Editors\n   10. Security Considerations\n\
    \   11. IANA Considerations\n   12. References\n     12.1.  Normative References\n\
    \     12.2.  Informative References\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IETF has an open and transparent process for developing\n\
    \   standards.  The use of GitHub (https://github.com/) or similar tools,\n  \
    \ when used as part of this process, can have several objectives.\n   GitHub provides\
    \ tools that can be helpful in editing documents.  Use\n   of this service has\
    \ been found to reduce the time that a working\n   group needs to produce documents\
    \ and to improve the quality of the\n   final result.\n   The use of version control\
    \ improves the traceability and visibility\n   of changes.  Issue tracking can\
    \ be used to manage open issues and\n   provide a record of their resolution.\
    \  Pull requests allow for better\n   engagement on technical and editorial changes,\
    \ and encourage\n   contributions from a larger set of contributors.  Using GitHub\
    \ can\n   also broaden the community of contributors for a specification.\n  \
    \ The main purpose of this document is to provide guidelines for how a\n   working\
    \ group might integrate the capabilities provided by GitHub\n   into their processes\
    \ for developing Internet-Drafts.  Whether to use\n   GitHub and whether to adopt\
    \ these practices is left to the discretion\n   of the working group.\n   This\
    \ document is meant as a supplement to existing working group\n   practices. \
    \ It provides guidance to working group chairs and\n   participants on how they\
    \ can best use GitHub within the framework\n   established by RFC 2418 [RFC2418].\
    \  This document aims to establish\n   norms that reduce the variation in usage\
    \ patterns between different\n   working groups and to help avoid issues that\
    \ have been encountered in\n   the past.\n   A companion document, [RFC8875],\
    \ describes administrative processes\n   that support the practices described\
    \ in this document.\n   Although the operation of IRTF research groups can be\
    \ similar in\n   function to working groups, this document only directly addresses\
    \ the\n   needs of working groups.  However, other groups may draw inspiration\n\
    \   for GitHub use from the contents herein.\n"
- title: 1.1.  Distributed Version Control Systems
  contents:
  - "1.1.  Distributed Version Control Systems\n   Version control systems are a critical\
    \ component of software\n   engineering and are also quite useful for document\
    \ editing.\n   Git (https://git-scm.com/) is a distributed version control system\n\
    \   that can operate without a central service.  Each instance of a\n   repository\
    \ contains a number of revisions.  Each revision stores the\n   complete state\
    \ of a set of files.  Users are able to create new\n   revisions in their copy\
    \ of a repository and share revisions between\n   copies of repositories.\n"
- title: 1.2.  GitHub
  contents:
  - "1.2.  GitHub\n   GitHub is a service operated at <https://github.com/>.  GitHub\n\
    \   provides centralized storage for Git repositories.  GitHub is freely\n   accessible\
    \ on the open Internet.\n   GitHub provides a simplified and integrated interface\
    \ to Git and also\n   provides basic user management, an issue tracker, associated\
    \ wikis,\n   project hosting, and other features.\n   There are a large number\
    \ of projects at GitHub and a very large\n   community of contributors.  One way\
    \ in which some IETF working groups\n   have benefited from use of the service\
    \ is through increased numbers\n   of reviews of the document and associated issues,\
    \ along with other\n   improvements that come from facilitating participation\
    \ by a broader\n   community.\n"
- title: 1.3.  Other Services
  contents:
  - "1.3.  Other Services\n   Git is not the only version control system available,\
    \ nor is GitHub\n   the only possible choice for hosting.  There are other services\
    \ that\n   host revision control repositories and provide similar additional\n\
    \   features as GitHub.  For instance, BitBucket (https://bitbucket.org/)\n  \
    \ and GitLab (https://about.gitlab.com/) provide similar feature sets.\n   In\
    \ addition to a hosted service, software for custom installations\n   exists.\n\
    \   This document concentrates primarily on GitHub as it has a large and\n   active\
    \ community of contributors.  As a result, some content might\n   not be applicable\
    \ to other similar services.  A working group that\n   decides to adopt an alternative\
    \ tool or service can still benefit\n   from the general guidance in this document.\n"
- title: 1.4.  Document Goals
  contents:
  - "1.4.  Document Goals\n   This document aims to describe how a working group might\
    \ best apply\n   GitHub to their work.  The intent is to allow each working group\n\
    \   considerable flexibility in how they use GitHub.\n   This document requires\
    \ that policies for use of GitHub are agreed\n   upon and clearly communicated\
    \ within the working group (see\n   Section 2).  The remainder of the document\
    \ contains guidelines and\n   advice on how to construct a workable policy.\n\
    \   The requirements here apply to the case where a working group decides\n  \
    \ to use GitHub as a primary means of interaction.  Individuals can set\n   their\
    \ own policies when using GitHub for managing their own drafts or\n   for managing\
    \ drafts that they edit on behalf of a working group that\n   has not explicitly\
    \ adopted GitHub.\n   For both sets of users, this document aims to provide some\
    \ amount of\n   advice on practices that have been effective.\n   This document\
    \ only aims to address use of GitHub in developing\n   documents.  A working group\
    \ could choose to use the tool to aid in\n   managing their charter or session\
    \ materials such as agendas, minutes,\n   and presentations.  Though the advice\
    \ here might apply more broadly,\n   using GitHub to manage other material is\
    \ out of scope for this\n   document.\n"
- title: 1.5.  Notational Conventions
  contents:
  - "1.5.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   This document uses a lot of terms related\
    \ to Git and GitHub; see\n   [GLOSSARY] for information on these terms.\n"
- title: 2.  Administrative Policies
  contents:
  - "2.  Administrative Policies\n   The following administrative rules provide the\
    \ necessary oversight\n   and transparency.\n"
- title: 2.1.  Organizations
  contents:
  - "2.1.  Organizations\n   Organizations are a way of forming groups of contributors\
    \ on GitHub.\n   The working group SHOULD create a new organization for its work.\
    \  A\n   working group organization SHOULD be named consistently so that it\n\
    \   can be found.  For instance, the name could be ietf-wg-<wgname>, as\n   recommended\
    \ in [RFC8875].\n   A single organization SHOULD NOT be used for all IETF activity\
    \ or all\n   activity within an area.  Large organizations create too much\n \
    \  overhead for general management tasks.\n   GitHub requires that each organization\
    \ have at least one owner.  The\n   owners for a working group repository MUST\
    \ include responsible area\n   directors and the IETF Secretariat.  Working group\
    \ chairs SHOULD also\n   be included as owners.  Area directors MAY also designate\
    \ a delegate\n   that becomes an owner, such as another area director from the\
    \ same\n   area.  An organization MUST have at least two owners.\n   Within an\
    \ organization, members can be grouped into teams.  A team\n   with \"Admin\"\
    \ access to repositories SHOULD be created for the working\n   group chairs and\
    \ any working group secretary.\n   Details about creating organizations adhering\
    \ to these guidelines can\n   be found in [RFC8875].\n"
- title: 2.2.  Communicating Policies
  contents:
  - "2.2.  Communicating Policies\n   Each working group MAY set its own policy as\
    \ to whether and how it\n   uses GitHub.  It is important that occasional participants\
    \ in the\n   working group and others accustomed to IETF tools be able to\n  \
    \ determine this and easily find the policy and GitHub organization.\n   A simple\
    \ example of how to do this is to include a link to the GitHub\n   organization\
    \ on the working group charter page in the datatracker.\n   Similarly, if there\
    \ are additional resources, such as mailing lists,\n   links to those resources\
    \ could also be added.\n   Repositories MUST include a copy of or reference to\
    \ the policy that\n   applies to managing any documents they contain.  Updating\
    \ the README\n   or CONTRIBUTING file in the repository with details of the process\n\
    \   ensures that the process is recorded in a stable location other than\n   the\
    \ mailing list archive.  This also makes working group policies\n   available\
    \ to casual contributors who might only interact with the\n   GitHub repository.\n\
    \   GitHub prominently links to the CONTRIBUTING file on certain pages.\n   This\
    \ file SHOULD be used in preference to the README for information\n   that new\
    \ contributors need.  The README SHOULD contain a link to the\n   CONTRIBUTING\
    \ file.\n   In addition to working group policies, notices on repositories MUST\n\
    \   include citations for the IETF Note Well (https://www.ietf.org/about/\n  \
    \ note-well/).\n"
- title: 3.  Deciding to Use GitHub
  contents:
  - "3.  Deciding to Use GitHub\n   Working group chairs are responsible for determining\
    \ how to best\n   accomplish the charter objectives in an open and transparent\
    \ fashion.\n   The working group chairs are responsible for determining if there\
    \ is\n   interest in using GitHub and for making a consensus call about\n   whether\
    \ the proposed policy and use is acceptable.\n   Chairs SHOULD involve area directors\
    \ in any decision to use GitHub,\n   especially where substantive discussion of\
    \ issues is permitted as\n   described in Section 5.3.\n"
- title: 3.1.  What to Use GitHub For
  contents:
  - "3.1.  What to Use GitHub For\n   Working group chairs decide what GitHub features\
    \ the working group\n   will rely upon.  Section 4 contains a more thorough discussion\
    \ on the\n   different features that can be used.\n   Working group chairs who\
    \ decide to use GitHub MUST inform the working\n   group of their decision on\
    \ the working group mailing list.  An email\n   detailing how the working group\
    \ intends to use GitHub is sufficient,\n   though it might be helpful to occasionally\
    \ remind new contributors of\n   these guidelines.\n   Working group chairs are\
    \ responsible for ensuring that any policy\n   they adopt is enforced and maintained.\n\
    \   The set of GitHub features (Section 4) that the working group relies\n   upon\
    \ need to be clearly documented in policies.  This document\n   provides some\
    \ guidance on potential policies and how those might be\n   applied.\n   Features\
    \ that the working group does not rely upon can be made\n   available to document\
    \ editors.  Editors are then able to use these\n   features for their own purposes.\
    \  For example, though the working\n   group might not formally use issues to\
    \ track items that require\n   further discussion in order to reach consensus,\
    \ keeping the issue\n   tracker available to editors can be valuable.\n   Working\
    \ group policies need to be set with the goal of improving\n   transparency, participation,\
    \ and ultimately the quality of documents.\n   At times, it might be appropriate\
    \ to impose some limitations on what\n   document editors are able to do in order\
    \ to serve these goals.\n   Chairs are encouraged to periodically consult with\
    \ document editors\n   to ensure that policies are effective.\n   A document editor\
    \ can still use GitHub independently for documents\n   that they edit, even if\
    \ the working group does not expressly choose\n   to use GitHub.  Any such public\
    \ repository MUST follow the IETF Note\n   Well and bear notices; see Section\
    \ 2.2.  This recognizes that editors\n   have traditionally chosen their own methods\
    \ for managing the\n   documents they edit but preserves the need for contributors\
    \ to\n   understand their obligations with respect to IETF processes.\n   Work\
    \ done in GitHub has no special status.  The output of any\n   activity using\
    \ GitHub needs to be taken to the working group and is\n   subject to approval,\
    \ rejection, or modification by the working group\n   as with any other input.\n"
- title: 3.2.  Repositories
  contents:
  - "3.2.  Repositories\n   New repositories can be created within the working group\
    \ organization\n   at the discretion of the chairs.  Chairs could decide to only\
    \ create\n   new repositories for adopted working group items, or they might\n\
    \   create repositories for individual documents on request.\n   Maintaining private\
    \ repositories for working group products is not\n   recommended without specific\
    \ cause.  For instance, a document that\n   details a security vulnerability might\
    \ be kept private prior to its\n   initial publication as an Internet-Draft. \
    \ Once an Internet-Draft is\n   published, repositories for working group documents\
    \ MUST be made\n   public.\n   The adoption status of any document MUST be clear\
    \ from the contents\n   of the repository.  This can be achieved by having the\
    \ name of the\n   document reflect status (that is, draft-ietf-<wgname>-... indicates\n\
    \   that the document was adopted) or through a prominent notice (such as\n  \
    \ in the README).\n   Experience has shown that maintaining separate repositories\
    \ for\n   independent documents is most manageable.  This allows the work in\n\
    \   that repository to be focused on a single item.\n   Closely related documents,\
    \ such as those that together address a\n   single milestone, might be placed\
    \ in a single repository.  This\n   allows editors to more easily manage changes\
    \ and issues that affect\n   multiple documents.\n   Maintaining multiple documents\
    \ in the same repository can add\n   overhead that negatively affects individual\
    \ documents.  For instance,\n   issues might require additional markings to identify\
    \ the document\n   that they affect.  Also, because editors all have write access\
    \ to the\n   repository, managing the set of people with write access to a larger\n\
    \   repository is more difficult (Section 3.3).\n"
- title: 3.3.  Editors and Contributors
  contents:
  - "3.3.  Editors and Contributors\n   Working group chairs MUST give document editors\
    \ write access to\n   document repositories.  This can be done by creating teams\
    \ with write\n   access and allocating editors to those teams or by making editors\n\
    \   collaborators on the repository.\n   Working group chairs MAY also grant other\
    \ individuals write access\n   for other reasons such as maintaining supporting\
    \ code or build\n   configurations.  Working group chairs, as administrators or\
    \ owners of\n   the organization, might also have write access to repositories.\n\
    \   Users other than document editors, including chairs, SHOULD NOT make\n   changes\
    \ to working group documents without prior coordination with\n   document editors.\n\
    \   A working group MAY create a team for regular contributors that is\n   only\
    \ given read access to a repository.  This does not confer\n   additional privileges\
    \ on these contributors; it instead allows for\n   issues and pull requests to\
    \ be assigned to those people.  This can be\n   used to manage the assignment\
    \ of editorial or review tasks to\n   individuals outside of the editor team.\n"
- title: 3.4.  Document Formats
  contents:
  - "3.4.  Document Formats\n   In addition to the canonical XML format [RFC7991],\
    \ document editors\n   might choose to use a different input form for editing\
    \ documents,\n   such as Markdown.  Markdown-based formats are more accessible\
    \ for new\n   contributors, though ultimately, decisions about format are left\
    \ to\n   document editors.\n   Formats that are not text-based SHOULD NOT be used,\
    \ as these are ill-\n   disposed to the sorts of interaction that revision control\
    \ enables.\n"
- title: 4.  Contribution Methods
  contents:
  - "4.  Contribution Methods\n   Contributions to documents come in many forms. \
    \ GitHub provides a\n   range of options in addition to email.  Input on GitHub\
    \ can take the\n   form of new issues and pull requests, comments on issues and\
    \ pull\n   requests, and comments on commits.\n"
- title: 4.1.  Issue Tracker
  contents:
  - "4.1.  Issue Tracker\n   The GitHub issue tracker can be an effective way of managing\
    \ the set\n   of open issues on a document.  Issues, both open and closed, can\
    \ be a\n   useful way of recording decisions made by a working group.\n   Issues\
    \ can be given arbitrary labels, assigned to contributors, and\n   assembled into\
    \ milestones.  The issue tracker is integrated into the\n   repository; an issue\
    \ can be closed using a special marker in a commit\n   message.\n   When deciding\
    \ to use GitHub, working group chairs MUST decide how the\n   GitHub issue tracker\
    \ is used.  Use of the issue tracker could be\n   limited to recording the existence\
    \ of issues, or it might be used as\n   the venue for substantial technical discussion\
    \ between contributors.\n   A working group policy MAY require that all substantive\
    \ changes be\n   tracked using issues.  Suggested policies for the use of the\
    \ GitHub\n   issue tracker are the primary subject of Section 5.\n"
- title: 4.1.1.  Issue Labels
  contents:
  - "4.1.1.  Issue Labels\n   A system of labeling issues can be effective in managing\
    \ issues.  For\n   instance, marking substantive issues separately from editorial\
    \ can be\n   helpful at guiding discussion.  Using labels can also be helpful\
    \ in\n   identifying issues for which consensus has been achieved but that\n \
    \  require editors to integrate the changes into a document.\n   Labels can be\
    \ used to identify particular categories of issues or to\n   mark specific issues\
    \ for discussion at an upcoming session.\n   Chairs communicate any process that\
    \ specifically relates to the use\n   of labels to the working group.  This includes\
    \ the semantics of\n   labels, and who can apply and remove these labels.  Section\
    \ 5.4\n   describes some basic strategies that might be adopted to manage\n  \
    \ decision-making processes.\n"
- title: 4.1.2.  Closing Issues
  contents:
  - "4.1.2.  Closing Issues\n   Editors have write access to repositories, which also\
    \ allows them to\n   close issues.  The user that opens an issue is also able\
    \ to close the\n   issue.  Chairs MUST provide guidance on who is permitted to\
    \ close an\n   issue and under what conditions.\n   Restrictions on who can close\
    \ an issue and under what circumstances\n   are generally not advisable until\
    \ a document has reached a certain\n   degree of maturity.\n"
- title: 4.1.3.  Reopening Issues
  contents:
  - "4.1.3.  Reopening Issues\n   Issues that have reached a resolution that has working\
    \ group\n   consensus MUST NOT be reopened unless new information is presented.\n\
    \   For long-running work items, new contributors often raise issues that\n  \
    \ have already been resolved.  Moreover, there could be temptation to\n   reopen\
    \ contentious issues resolved with rough consensus.  Determining\n   whether arguments\
    \ presented in favor of reopening an issue represents\n   new information might\
    \ require some discussion in the working group.\n   Chairs are empowered to exercise\
    \ discretion in determining whether or\n   not to reopen issues.  For more difficult\
    \ matters, the chairs MAY\n   insist that the working group reach consensus on\
    \ whether an issue\n   should be reopened.  Note, however, that any product of\
    \ this process\n   still needs to have the support of rough consensus in the working\n\
    \   group, which could justify reopening issues.\n"
- title: 4.2.  Pull Requests
  contents:
  - "4.2.  Pull Requests\n   A pull request is a GitHub feature that allows a user\
    \ to request a\n   change to a repository.  A user does not need to have write\
    \ access to\n   a repository to create a pull request.  A user can create a \"\
    fork\",\n   or copy, of any public repository.  The user has write access to\n\
    \   their own fork, allowing them to make local changes.  A pull request\n   asks\
    \ the owner of a repository to merge a specific set of changes\n   from a fork\
    \ (or any branch) into their copy.\n   Editors are encouraged to make pull requests\
    \ for all substantial\n   changes rather than committing directly to the \"primary\"\
    \ branch of\n   the repository.  See Section 5.3.2 for discussion on what constitutes\n\
    \   a substantial change.  A pull request creates an artifact that\n   records\
    \ the reasons for changes and provides other contributors with\n   an opportunity\
    \ to review the change.  Ideally, pull requests that\n   address substantive issues\
    \ mention the issue they address in the\n   opening comment.  A working group\
    \ policy could require that pull\n   requests be used in this fashion.\n     \
    \ |  Note: This document assumes that there is a unified effort on a\n      |\
    \  document, all concentrated on a single Git branch.  More\n      |  advanced\
    \ usage of Git is not in the scope of this document.\n   Pull requests have many\
    \ of the same properties as issues, including\n   the ability to host discussion\
    \ and bear labels.  Critically, using\n   pull requests creates a record of actions\
    \ taken.\n   For significant changes, leaving a pull request open until discussion\n\
    \   of the issue within the working group concludes allows the pull\n   request\
    \ to track the discussion and properly capture the outcome of\n   discussions.\
    \  Pull requests can be updated as discussions continue,\n   or in response to\
    \ feedback.\n   Groups of editors could adopt a practice of having one editor\
    \ create\n   a pull request and another merge it.  This ensures that changes are\n\
    \   reviewed by editors.  Editors are given discretion in how they manage\n  \
    \ changes amongst themselves.\n"
- title: 4.2.1.  Discussion on Pull Requests
  contents:
  - "4.2.1.  Discussion on Pull Requests\n   In addition to the features that pull\
    \ requests share with issues,\n   users can also review the changes in a pull\
    \ request.  This is a\n   valuable feature, but it presents some challenges.\n\
    \   Comments in a review other than a summary are attached to specific\n   lines\
    \ of the proposed change.  Such comments can be hard or\n   impossible to find\
    \ if changes are subsequently made to the pull\n   request.  This is problematic\
    \ for contributors who do not track\n   discussions closely.\n   For this reason,\
    \ working group chairs SHOULD discourage the use of\n   inline comments for substantial\
    \ technical discussion of issues.\n"
- title: 4.2.2.  Merging Pull Requests
  contents:
  - "4.2.2.  Merging Pull Requests\n   A working group MUST determine who is permitted\
    \ to merge pull\n   requests.  Document editors SHOULD be permitted to merge pull\n\
    \   requests at their discretion.  This requires that editors exercise\n   some\
    \ judgment.  Working group chairs MAY occasionally identify a pull\n   request\
    \ and request that editors withhold merging until working group\n   consensus\
    \ has been assessed.\n   Note that the copy of a document that is maintained on\
    \ GitHub does\n   not need to be a perfect reflection of working group consensus\
    \ at\n   every point in time.  Document editors need some flexibility in how\n\
    \   they manage a document.\n"
- title: 4.3.  Monitoring Activity
  contents:
  - "4.3.  Monitoring Activity\n   GitHub produces individualized email notifications\
    \ of activity that\n   each user can adjust to their preferences.  In addition\
    \ to these,\n   some working groups have created read-only mailing lists that\
    \ receive\n   notifications about activity on working group repositories.  The\n\
    \   volume of information on these lists can be too high to monitor\n   actively,\
    \ but access to an archive of actions can be useful.\n   An alternative is to\
    \ rely on periodic email summaries of activity,\n   such as those produced by\
    \ a notification tool like github-notify-ml\n   (https://github.com/dontcallmedom/github-notify-ml).\
    \  This tool has\n   been used effectively in several working groups, though it\
    \ requires\n   server infrastructure.\n   Additionally, clear reporting about\
    \ the changes that were included in\n   each revision of an Internet-Draft helps\
    \ ensure that contributors can\n   follow activity.  This might be achieved by\
    \ requesting that editors\n   provide a change log that captures substantive changes\
    \ to the\n   document in each revision.\n"
- title: 5.  Typical Working Group Policies
  contents:
  - "5.  Typical Working Group Policies\n   Current experience with use of GitHub\
    \ suggests a few different\n   approaches to greater use of the tool in working\
    \ groups.\n   This section describes some basic modes for interacting with GitHub,\n\
    \   each progressively more involved.  This starts with a very\n   lightweight\
    \ interaction where document management is the only feature\n   that is formally\
    \ used; then, progressively more intensive use of the\n   GitHub issue tracking\
    \ capabilities is described.  These approaches\n   differ primarily in how discussion\
    \ of substantive matters is managed.\n   Most of the advice in this document applies\
    \ equally to all models.\n   Working groups can adjust these policies to suit\
    \ their needs but are\n   advised to avoid gratuitous changes for the sake of\
    \ consistency\n   across the IETF as a whole.  It is possible to use different\n\
    \   processes for different documents in the working group.\n   Working group\
    \ chairs are responsible for confirming that the working\n   group has consensus\
    \ to adopt any process.  In particular, the\n   introduction of a more tightly\
    \ controlled process can have the effect\n   of privileging positions already\
    \ captured in documents, which might\n   disadvantage alternative viewpoints.\n"
- title: 5.1.  Document Management Mode
  contents:
  - "5.1.  Document Management Mode\n   In this mode of interaction, GitHub repositories\
    \ are used to manage\n   changes to documents, but the bulk of the work is conducted\
    \ using\n   email, face-to-face meetings, and other more traditional\n   interactions.\
    \  The intent of this policy is to enable document and\n   issue management using\
    \ GitHub while minimizing the complexity of the\n   process.\n   In the version\
    \ of this mode with the least interaction with GitHub, a\n   repository is created\
    \ for the purposes of document management by\n   editors.  Editors might maintain\
    \ issues and pull requests for their\n   own benefit, but these have no formal\
    \ standing in the working group\n   process.\n"
- title: 5.2.  Issue Tracking Mode
  contents:
  - "5.2.  Issue Tracking Mode\n   In addition to managing documents, the working\
    \ group might choose to\n   use GitHub for tracking outstanding issues.  In this\
    \ mode of\n   interaction, a record of the existence of substantive technical\n\
    \   discussions is tracked using issues in the issue tracker.  However,\n   discussion\
    \ of any substantial matters is always conducted on mailing\n   lists.\n   Under\
    \ this mode, issues and pull requests can be opened by anyone,\n   but anything\
    \ deemed substantive MUST be resolved exclusively on the\n   mailing list.  Discussion\
    \ on GitHub is limited to recording the state\n   of issues.  Only editorial matters\
    \ can be resolved using the issue\n   tracker.\n   Chairs and editors are given\
    \ discretion in determining what issues\n   are substantive.  As documents mature,\
    \ it is generally prudent to\n   prefer consulting the mailing list where there\
    \ is doubt.  As with\n   other working group decisions, chairs are the arbiters\
    \ in case of\n   dispute.\n   A recurrent problem with this mode of interaction\
    \ is the tendency for\n   discussions to spontaneously develop in the issue tracker.\
    \  This\n   requires a degree of discipline from chairs and editors to ensure\n\
    \   that any substantive matters are taken to the mailing list.\n   Retaining\
    \ mailing lists as the primary venue for discussion of\n   substantive matters\
    \ ensures that this mode, along with the document\n   management mode, is most\
    \ compatible with existing work practices for\n   working groups.  Participants\
    \ in a working group that operates under\n   either model can reasonably be expected\
    \ to receive all relevant\n   communication about the work of the group from the\
    \ working group\n   mailing list.\n   Though the mailing list is used for making\
    \ decisions, the issue\n   tracker can still be a useful record of the state of\
    \ issues.  It is\n   often useful if chairs or editors record details of decisions\
    \ in\n   issue comments when closing issues as resolved.\n"
- title: 5.3.  Issue Discussion Mode
  contents:
  - "5.3.  Issue Discussion Mode\n   This GitHub interaction mode differs from the\
    \ other modes in that\n   discussion relating to substantive technical matters\
    \ is allowed to\n   occur on GitHub issues.  Though decisions are always subject\
    \ to\n   confirmation on the mailing list, participants are permitted to\n   conduct\
    \ substantive discussions on the issue tracker.  In some cases,\n   this can include\
    \ making some decisions without involving the working\n   group mailing list.\n\
    \   A working group mailing list remains a critical venue for decision\n   making,\
    \ even where issue discussion occurs elsewhere.  Working group\n   mailing lists\
    \ generally include a wider audience than those who\n   follow issue discussion,\
    \ so difficult issues always benefit from list\n   discussion.\n   Decisions about\
    \ working group consensus MUST always be confirmed\n   using the working group\
    \ mailing list.  However, depending on the\n   maturity of documents, this might\
    \ be a more lightweight interaction\n   such as sending an email confirmation\
    \ for an initial set of\n   resolutions arising from discussions on the issue\
    \ tracker.\n   Using the mailing list to resolve difficult or controversial issues\n\
    \   is strongly encouraged.  In those cases, the issue tracker might be\n   used\
    \ to more fully develop an understanding of problems before\n   initiating a discussion\
    \ on the mailing list, along lines similar to\n   the design team process (see\
    \ Section 6.5 of [RFC2418]).\n   As a more involved process, adopting this mode\
    \ can require changes in\n   policies as documents become more mature.\n"
- title: 5.3.1.  Early Design Phases
  contents:
  - "5.3.1.  Early Design Phases\n   During early phases of the design of a protocol,\
    \ chairs MAY allow\n   editors to manage all aspects of issues.  Editors are permitted\
    \ to\n   make decisions about how to both identify and resolve technical\n   issues,\
    \ including making any changes that editors feel necessary.\n   The primary reason\
    \ to grant editors more discretionary power is to\n   improve the speed with which\
    \ changes can be made.  In many cases,\n   documents that are adopted by a working\
    \ group are already\n   sufficiently mature, and a looser process is not beneficial.\
    \  A\n   looser process increases the risk of missing issues that need working\n\
    \   group consensus and integrating substantive changes based on\n   decisions\
    \ that don't reflect the consensus of the working group.\n   Changes made by editors\
    \ under this process do not lack options for\n   identifying and correcting problems.\
    \  GitHub and Git provide tools\n   for ensuring that changes are tracked and\
    \ can be audited.  Within the\n   usual working group process, it is expected\
    \ that Internet-Drafts will\n   receive regular review.  Also, process checkpoints\
    \ like Working Group\n   Last Call (WGLC; Section 7.4 of [RFC2418]) provide additional\n\
    \   safeguards against abuse.\n   Working groups are advised against allowing\
    \ editors this degree of\n   flexibility for the entirety of a document life cycle.\
    \  Once a\n   document is more stable and mature, it could be useful to move to\
    \ a\n   more tightly controlled process.\n"
- title: 5.3.2.  Managing Mature Documents
  contents:
  - "5.3.2.  Managing Mature Documents\n   As a document matures, it becomes more\
    \ important to understand not\n   just that the document as a whole retains the\
    \ support of the working\n   group, but that changes are not made without wider\
    \ consultation.\n   Chairs MAY choose to manage the process of deciding which\
    \ issues are\n   substantive.  For instance, chairs might reserve the ability\
    \ to use\n   the \"design\" label for new issues (see Section 5.4.1) and to close\n\
    \   issues marked as \"design\".  Chairs SHOULD always allow document\n   editors\
    \ to identify and address editorial issues as they see fit.\n   As documents mature\
    \ further, explicit confirmation of technical\n   decisions with the working group\
    \ mailing list becomes more important.\n   Chairs can declare working group consensus\
    \ regarding the resolution\n   of issues in the abstract, allowing editors discretion\
    \ on how to\n   capture the decisions in documents.\n   More mature documents\
    \ require not only consensus, but consensus about\n   specific text.  Ideally,\
    \ substantive changes to documents that have\n   passed WGLC are proposed as pull\
    \ requests and MUST be discussed on\n   the mailing list.  Having chairs explicitly\
    \ confirm consensus on\n   changes ensures that previous consensus decisions are\
    \ not overturned\n   without cause.  Chairs MAY institute this stricter process\
    \ prior to\n   WGLC.\n      |  Note: It is generally sufficient to trust editors\
    \ to manage\n      |  adherence with these policies, aided by the transparency\n\
    \      |  provided by the version control system.  There are tools that\n    \
    \  |  can be used to more tightly control access to repositories, but\n      |\
    \  they can be overly constraining.\n"
- title: 5.4.  Issue Labeling Schemes
  contents:
  - "5.4.  Issue Labeling Schemes\n   Several schemes for use of issue labels in managing\
    \ issues have been\n   used successfully.  This section outlines these strategies\
    \ and how\n   they might be applied.\n   A design/editorial split (see Section\
    \ 5.4.1) is useful in all cases\n   in which the issue tracking capability is\
    \ used.  A working group that\n   only uses GitHub for issue tracking might find\
    \ that distinction\n   sufficient for their needs.\n   Working groups or editors\
    \ might use additional labels as they choose.\n   Any label that is used as part\
    \ of a process requires that the process\n   be documented and announced by working\
    \ group chairs.  Editors SHOULD\n   be permitted to use labels to manage issues\
    \ without any formal\n   process significance being attached to those issues.\n"
- title: 5.4.1.  Editorial/Design Labeling
  contents:
  - "5.4.1.  Editorial/Design Labeling\n   The most important distinction about an\
    \ issue is whether it is\n   substantive.  The labels of \"editorial\" and \"\
    design\" are used to\n   represent this distinction.\n   An issue labeled as \"\
    editorial\" has no substantive effect on a\n   document except to the extent that\
    \ addressing the issue might make\n   understanding the specification easier.\
    \  Resolution of \"editorial\"\n   issues can be left to the discretion of editors.\n\
    \   An issue labeled as \"design\" has or might have a substantive effect\n  \
    \ on a document.  For protocol specifications, a \"design\" issue is one\n   that\
    \ might affect implementations or interoperability requirements.\n   Addressing\
    \ a \"design\" issue ultimately requires working group\n   consensus, even if\
    \ the resolution is to make no change.\n   This distinction can be applied to\
    \ all types of documents.  For\n   instance, a \"design\" issue for an Informational\
    \ document might be\n   raised to discuss possible changes to important concepts\
    \ in the\n   document.\n"
- title: 5.4.2.  Decision Labeling
  contents:
  - "5.4.2.  Decision Labeling\n   Labels can be used to manage processes.  As documents\
    \ mature and\n   issues become more numerous, labels can be used to clearly mark\
    \ the\n   status of issues.  In particular, the labeling of issues can be used\n\
    \   to help manage working group decisions.\n   For documents that are less mature,\
    \ issues with resolutions but no\n   specific proposals for changes to text might\
    \ be marked \"editor-ready\"\n   as a way of signaling that there is consensus\
    \ on an approach, but no\n   specific proposal.  Chairs might use this to signal\
    \ that discussion\n   is complete and that editors are to be given discretion\
    \ in the\n   construction of text.\n   In contrast, if specific text is a prerequisite\
    \ for resolving issues,\n   as might be the case for more mature documents, a\
    \ \"proposal-ready\"\n   label might be used by editors to mark issues that they\
    \ believe to\n   have acceptable resolutions.\n   For resolved issues, a \"has-consensus\"\
    \ label might be used by chairs\n   to mark issues for which formal working group\
    \ decisions have been\n   made (Section 6.1 of [RFC2418]).\n   A \"future\" or\
    \ \"next-version\" label might be used to mark and thereby\n   save issues for\
    \ a future version of, or extension to, a protocol,\n   particularly where a resolution\
    \ is made to take no action.\n"
- title: 5.4.3.  Component Labeling
  contents:
  - "5.4.3.  Component Labeling\n   Repositories with multiple interrelated documents\
    \ or a complex\n   document with multiple logical components might benefit from\
    \ labels\n   that identify different aspects of the work.  The choice of\n   appropriate\
    \ labels for components will depend on the structure of\n   specific documents.\n"
- title: 5.4.4.  Other Labels
  contents:
  - "5.4.4.  Other Labels\n   Other labels can be used depending on the needs of editors\
    \ and\n   working group processes.  For example,\n   *  An \"invalid\" label might\
    \ be used for issues that were raised in\n      error.\n   *  A \"blocked\" label\
    \ might indicate an issue is awaiting resolution\n      of an external process\
    \ or related issue.\n   *  A \"parked\" label might be used to indicate issues\
    \ that do not\n      require immediate working group attention.\n"
- title: 6.  Internet-Draft Publication
  contents:
  - "6.  Internet-Draft Publication\n   During the development of a document, individual\
    \ revisions of the\n   document can be built and formally submitted as an Internet-Draft.\n\
    \   This creates a stable snapshot and makes the content of the in-\n   progress\
    \ document available to a wider audience.  Documents submitted\n   as Internet-Drafts\
    \ are not expected to address all open issues or\n   merge outstanding pull requests.\n\
    \   Section 7.1 of [RFC2418] recommends that editors create a new\n   Internet-Draft\
    \ submission two weeks prior to every session, which\n   includes IETF meetings,\
    \ other in-person meetings, and telephone or\n   video conferences.  Though discussion\
    \ could use the current version\n   of a document from version control, participants\
    \ in a session cannot\n   be expected to monitor changes to documents in real\
    \ time; a published\n   Internet-Draft ensures that there is a common, stable\
    \ state that is\n   known to all participants.\n   Internet-Drafts that use a\
    \ GitHub repository SHOULD include a notice\n   that includes a reference to the\
    \ repository.  This notice might also\n   include information about where to discuss\
    \ the draft.\n   Revisions used to generate documents that are submitted as Internet-\n\
    \   Drafts SHOULD be tagged in repositories to provide a record of\n   submissions.\n\
    \   Working group chairs MAY request a revision of an Internet-Draft\n   being\
    \ managed on GitHub at any time, in consultation with document\n   editors.\n"
- title: 7.  Assessing Consensus
  contents:
  - "7.  Assessing Consensus\n   The work that occurs on GitHub could be part of the\
    \ consensus\n   process, but the ultimate decision on consensus regarding a document\n\
    \   is made by the chairs [RFC2026].\n   GitHub facilitates more involved interactions,\
    \ which can result in a\n   much higher level of activity than a typical working\
    \ group mailing\n   list.  Participants who wish to limit their time commitment\
    \ might\n   follow GitHub activity selectively, either by following only specific\n\
    \   issues or by occasionally reviewing the state of the document.  Other\n  \
    \ participants might not use GitHub at all.  Chairs are reminded that\n   assessing\
    \ consensus based on GitHub content alone cannot be assumed\n   to reach all interested\
    \ participants.\n   As described in [RFC2418], chairs consider input from all\
    \ discussion\n   venues when assessing consensus.  These include mailing lists,\
    \ IETF\n   meetings, and interim meetings in addition to discussion on GitHub.\n\
    \   Each venue has different selection biases that might need to be\n   considered.\n\
    \   A working group chair MUST consult the working group mailing list for\n  \
    \ any issue that is potentially contentious.  Relying on input provided\n   through\
    \ GitHub alone might result in gaining input from a narrower\n   set of participants.\
    \  This includes important milestones like Working\n   Group Last Call, where\
    \ review from the widest possible audience\n   ensures a higher quality document.\n\
    \   If permitted, GitHub will be used for technical discussion and\n   decisions,\
    \ especially during early stages of development of a\n   document.  Any decisions\
    \ are confirmed through review within the\n   working group and, ultimately, through\
    \ Working Group Last Call; see\n   Section 7.4 of [RFC2418].\n   The use of issues\
    \ and labels has been effective in managing\n   contentious issues.  Explicitly\
    \ labeling closed issues to identify\n   those with formal consensus means that\
    \ there is no confusion about\n   the status of issues.\n"
- title: 8.  Continuous Integration
  contents:
  - "8.  Continuous Integration\n   Various third-party services offer the ability\
    \ to run tests and other\n   work when changes are made to a repository.\n   One\
    \ common practice is to use these continuous integration services\n   to build\
    \ a text or HTML version of a document.  This is then\n   published to GitHub\
    \ Pages, which allows users to view a version of\n   the most recent revision\
    \ of a document.  Including a prominent link\n   to this version of the document\
    \ (such as in the README) makes it\n   easier for new contributors to find a readable\
    \ copy of the most\n   recent version of a draft.  In addition, including links\
    \ to\n   differences between this generated version and any published document\n\
    \   helps contributors identify recent changes.\n   Continuous integration can\
    \ also validate pull requests and other\n   changes for errors.  The most basic\
    \ check is whether the source file\n   can be transformed successfully into a\
    \ valid Internet-Draft.  For\n   example, this might include checking that the\
    \ XML source is\n   syntactically correct.\n   For a document that uses formal\
    \ languages as part of the\n   specification, such as schema or source code, a\
    \ continuous\n   integration system might also be used to validate any formal\
    \ language\n   that the document contains.  Tests for any source code that the\n\
    \   document contains might be run, or examples might be checked for\n   correctness.\n"
- title: 9.  Advice to Editors
  contents:
  - "9.  Advice to Editors\n   Document editors are primarily responsible for maintaining\
    \ documents.\n   Taking on a few additional tasks can greatly improve the process\
    \ for\n   the working group.\n   Using GitHub means that it is more likely that\
    \ a contribution is made\n   by users who are not very familiar with the work.\
    \  Pull requests from\n   new contributors can contain errors or omissions.  Duplicate\
    \ issues\n   are commonplace.  Proposed changes might have grammatical errors\
    \ or\n   they might diverge from existing style.  If a change is generally\n \
    \  sound, rather than rejecting the pull request or requesting changes,\n   editors\
    \ could instead accept the change and then make any necessary\n   corrections.\n\
    \   Editors SHOULD NOT close a pull request or issue without first\n   understanding\
    \ why the item was created.  Editors and chairs SHOULD\n   try to explain every\
    \ action clearly and concisely.  Even if a\n   contributor seems rude, being courteous\
    \ in response is always best.\n   If a contributor makes a comment that raises\
    \ a new issue, editors can\n   create an issue or, if there is an obvious solution,\
    \ a pull request.\n   It does not matter what venue the issue was raised in (e.g.,\
    \ email,\n   issue discussion, a pull request review); capturing issues quickly\n\
    \   ensures that problems become visible and can be tracked.\n   This takes a\
    \ little more effort, but these simple steps can help\n   encourage contributions,\
    \ which will ultimately improve the quality of\n   documents.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Continuity of operations is always a consideration\
    \ when taking a\n   dependency on an external service.  If GitHub were to fail\
    \ in some\n   way, anyone relying upon its services would be seriously affected.\n\
    \   Widespread use of Git reduces the exposure to a system failure\n   because\
    \ the primary repository is replicated in multiple locations.\n   This includes\
    \ hosted web pages; the content of web pages is\n   maintained as a branch in\
    \ the main repository.\n   However, other information maintained on GitHub is\
    \ more vulnerable to\n   loss.  This includes issues and discussion on those issues,\n\
    \   discussion and reviews of commits and pull requests, and any content\n   hosted\
    \ on the wiki.  Tools exist for extracting this information for\n   backup.\n\
    \   As specified in [RFC8875], backup copies of repositories and other\n   important\
    \ data SHOULD be maintained.\n   The potential for malicious actions by compromised\
    \ or malcontent\n   editors, chairs, and area directors is relevant in maintaining\
    \ the\n   integrity of the content that GitHub hosts.  Backups allow for\n   recovery\
    \ of content, and regular submissions as Internet-Drafts\n   ensure that work\
    \ is not lost completely.\n   A compromise of GitHub does not pose a significant\
    \ threat to working\n   group operations as it is expected that most data, aside\
    \ from\n   individual credentials, is made public.\n   A compromise of credentials\
    \ could mean loss of control for\n   repositories an organizations.  All contributors,\
    \ especially those\n   with commit or admin privileges SHOULD use current best\
    \ practices for\n   protection of credentials, such as multi-factor authentication.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2026]  Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n              3\", BCP 9, RFC 2026, DOI 10.17487/RFC2026,\
    \ October 1996,\n              <https://www.rfc-editor.org/info/rfc2026>.\n  \
    \ [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n          \
    \    Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2418]\
    \  Bradner, S., \"IETF Working Group Guidelines and\n              Procedures\"\
    , BCP 25, RFC 2418, DOI 10.17487/RFC2418,\n              September 1998, <https://www.rfc-editor.org/info/rfc2418>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [GLOSSARY] GitHub, \"GitHub glossary\", March\
    \ 2020,\n              <https://help.github.com/en/github/getting-started-with-\n\
    \              github/github-glossary>.\n   [RFC7991]  Hoffman, P., \"The \"xml2rfc\"\
    \ Version 3 Vocabulary\",\n              RFC 7991, DOI 10.17487/RFC7991, December\
    \ 2016,\n              <https://www.rfc-editor.org/info/rfc7991>.\n   [RFC8875]\
    \  Cooper, A. and P. Hoffman, \"Working Group GitHub\n              Administration\"\
    , RFC 8875, DOI 10.17487/RFC8875, August\n              2020, <https://www.rfc-editor.org/info/rfc8875>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This work would not have been possible without the hard work\
    \ of those\n   people who have trialed the use of GitHub at the IETF.  Alia Atlas\n\
    \   contributed significant text to an earlier draft version of this\n   document.\
    \  Tommy Pauly, Rich Salz, and Christopher Wood all provided\n   significant input.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Thomson\n   Mozilla\n   Email: mt@lowentropy.net\n\
    \   Barbara Stark\n"
