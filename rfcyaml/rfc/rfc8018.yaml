- title: __initial_text__
  contents:
  - "           PKCS #5: Password-Based Cryptography Specification\n             \
    \                 Version 2.1\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides recommendations for the implementation of\n\
    \   password-based cryptography, covering key derivation functions,\n   encryption\
    \ schemes, message authentication schemes, and ASN.1 syntax\n   identifying the\
    \ techniques.\n   This document represents a republication of PKCS #5 v2.1 from\
    \ RSA\n   Laboratories' Public-Key Cryptography Standards (PKCS) series.  By\n\
    \   publishing this RFC, change control is transferred to the IETF.\n   This document\
    \ also obsoletes RFC 2898.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8018.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Notation  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Overview  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  Salt and Iteration Count  . . . . . . . . . . . . . . . .\
    \ . .   7\n     4.1.  Salt  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     4.2.  Iteration Count . . . . . . . . . . . . . . . . . . . . .\
    \   9\n   5.  Key Derivation Functions  . . . . . . . . . . . . . . . . . .  \
    \ 9\n     5.1.  PBKDF1  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \     5.2.  PBKDF2  . . . . . . . . . . . . . . . . . . . . . . . . .  11\n  \
    \ 6.  Encryption Schemes  . . . . . . . . . . . . . . . . . . . . .  13\n    \
    \ 6.1.  PBES1 . . . . . . . . . . . . . . . . . . . . . . . . . .  13\n      \
    \ 6.1.1.  PBES1 Encryption Operation  . . . . . . . . . . . . .  13\n       6.1.2.\
    \  PBES1 Decryption Operation  . . . . . . . . . . . . .  15\n     6.2.  PBES2\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  15\n       6.2.1.  PBES2\
    \ Encryption Operation  . . . . . . . . . . . . .  16\n       6.2.2.  PBES2 Decryption\
    \ Operation  . . . . . . . . . . . . .  16\n   7.  Message Authentication Schemes\
    \  . . . . . . . . . . . . . . .  17\n     7.1.  PBMAC1  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  17\n       7.1.1.  PBMAC1 Generation Operation\
    \ . . . . . . . . . . . . .  17\n       7.1.2.  PBMAC1 Verification Operation\
    \ . . . . . . . . . . . .  18\n   8.  Security Considerations . . . . . . . .\
    \ . . . . . . . . . . .  18\n   9.  Normative References  . . . . . . . . . .\
    \ . . . . . . . . . .  19\n   Appendix A.  ASN.1 Syntax . . . . . . . . . . .\
    \ . . . . . . . . .  23\n     A.1.  PBKDF1  . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  23\n     A.2.  PBKDF2  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  23\n     A.3.  PBES1 . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  25\n     A.4.  PBES2 . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  26\n     A.5.  PBMAC1  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  26\n   Appendix B.  Supporting Techniques  . . . . . . . . . . . .\
    \ . . .  27\n     B.1.  Pseudorandom Functions  . . . . . . . . . . . . . . .\
    \ . .  28\n       B.1.1.  HMAC-SHA-1  . . . . . . . . . . . . . . . . . . . .\
    \ .  28\n       B.1.2.  HMAC-SHA-2  . . . . . . . . . . . . . . . . . . . . .\
    \  29\n     B.2.  Encryption Schemes  . . . . . . . . . . . . . . . . . . .  29\n\
    \       B.2.1.  DES-CBC-Pad . . . . . . . . . . . . . . . . . . . . .  30\n  \
    \     B.2.2.  DES-EDE3-CBC-Pad  . . . . . . . . . . . . . . . . . .  30\n    \
    \   B.2.3.  RC2-CBC-Pad . . . . . . . . . . . . . . . . . . . . .  30\n      \
    \ B.2.4.  RC5-CBC-Pad . . . . . . . . . . . . . . . . . . . . .  31\n       B.2.5.\
    \  AES-CBC-Pad . . . . . . . . . . . . . . . . . . . . .  32\n     B.3.  Message\
    \ Authentication Schemes  . . . . . . . . . . . . .  33\n       B.3.1.  HMAC-SHA-1\
    \  . . . . . . . . . . . . . . . . . . . . .  33\n       B.3.2.  HMAC-SHA-2  .\
    \ . . . . . . . . . . . . . . . . . . . .  33\n   Appendix C.  ASN.1 Module .\
    \ . . . . . . . . . . . . . . . . . . .  34\n   Appendix D.  Revision History\
    \ of PKCS #5  . . . . . . . . . . . .  38\n   Appendix E.  About PKCS . . . .\
    \ . . . . . . . . . . . . . . . . .  39\n   Acknowledgements  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  40\n   Authors' Addresses  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  40\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document provides recommendations for the implementation\
    \ of\n   password-based cryptography, covering the following aspects:\n   -  key\
    \ derivation functions\n   -  encryption schemes\n   -  message authentication\
    \ schemes\n   -  ASN.1 syntax identifying the techniques\n   The recommendations\
    \ are intended for general application within\n   computer and communications\
    \ systems and, as such, include a fair\n   amount of flexibility.  They are particularly\
    \ intended for the\n   protection of sensitive information such as private keys\
    \ as in\n   PKCS #8 [PKCS8] [RFC5958].  It is expected that application standards\n\
    \   and implementation profiles based on these specifications may include\n  \
    \ additional constraints.\n   Other cryptographic techniques based on passwords,\
    \ such as password-\n   based key entity authentication and key establishment\
    \ protocols\n   [BELLOV] [JABLON] [WU] are outside the scope of this document.\n\
    \   Guidelines for the selection of passwords are also outside the scope.\n  \
    \ This document supersedes PKCS #5 version 2.0 [RFC2898] but includes\n   compatible\
    \ techniques.\n   This document represents a republication of PKCS #5 v2.1 [PKCS5_21]\n\
    \   from RSA Laboratories' Public-Key Cryptography Standards (PKCS)\n   series.\n"
- title: 2.  Notation
  contents:
  - "2.  Notation\n   C       ciphertext, an octet string\n   c       iteration count,\
    \ a positive integer\n   DK      derived key, an octet string\n   dkLen   length\
    \ in octets of derived key, a positive integer\n   EM      encoded message, an\
    \ octet string\n   Hash    underlying hash function\n   hLen    length in octets\
    \ of pseudorandom function output, a positive\n           integer\n   l      \
    \ length in blocks of derived key, a positive integer\n   IV      initialization\
    \ vector, an octet string\n   K       encryption key, an octet string\n   KDF\
    \     key derivation function\n   M       message, an octet string\n   P     \
    \  password, an octet string\n   PRF     underlying pseudorandom function\n  \
    \ PS      padding string, an octet string\n   psLen   length in octets of padding\
    \ string, a positive integer\n   S       salt, an octet string\n   T       message\
    \ authentication code, an octet string\n   T_1, ..., T_l, U_1, ..., U_c\n    \
    \       intermediate values, octet strings\n   01, 02, ..., 08\n           octets\
    \ with value 1, 2, ..., 8\n   \\xor    bit-wise exclusive-or of two octet strings\n\
    \   ||  ||  octet length operator\n   ||      concatenation operator\n   <i..j>\
    \  substring extraction operator: extracts octets i through j,\n           0 <=\
    \ i <= j\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   In many applications of public-key cryptography, user security\
    \ is\n   ultimately dependent on one or more secret text values or passwords.\n\
    \   Since a password is not directly applicable as a key to any\n   conventional\
    \ cryptosystem, however, some processing of the password\n   is required to perform\
    \ cryptographic operations with it.  Moreover,\n   as passwords are often chosen\
    \ from a relatively small space, special\n   care is required in that processing\
    \ to defend against search attacks.\n   A general approach to password-based cryptography,\
    \ as described by\n   Morris and Thompson [MORRIS] for the protection of password\
    \ tables,\n   is to combine a password with a salt to produce a key.  The salt\
    \ can\n   be viewed as an index into a large set of keys derived from the\n  \
    \ password and need not be kept secret.  Although it may be possible\n   for an\
    \ opponent to construct a table of possible passwords (a so-\n   called \"dictionary\
    \ attack\"), constructing a table of possible keys\n   will be difficult, since\
    \ there will be many possible keys for each\n   password.  An opponent will thus\
    \ be limited to searching through\n   passwords separately for each salt.\n  \
    \ Another approach to password-based cryptography is to construct key\n   derivation\
    \ techniques that are relatively expensive, thereby\n   increasing the cost of\
    \ exhaustive search.  One way to do this is to\n   include an iteration count\
    \ in the key derivation technique,\n   indicating how many times to iterate some\
    \ underlying function by\n   which keys are derived.  A modest number of iterations\
    \ (say, 1000) is\n   not likely to be a burden for legitimate parties when computing\
    \ a\n   key, but will be a significant burden for opponents.\n   Salt and iteration\
    \ count formed the basis for password-based\n   encryption in PKCS #5 v2.0, and\
    \ are adopted here as well for the\n   various cryptographic operations.  Thus,\
    \ password-based key\n   derivation as defined here is a function of a password,\
    \ a salt, and\n   an iteration count, where the latter two quantities need not\
    \ be kept\n   secret.\n   From a password-based key derivation function, it is\
    \ straightforward\n   to define password-based encryption and message authentication\n\
    \   schemes.  As in PKCS #5 v2.0, the password-based encryption schemes\n   here\
    \ are based on an underlying, conventional encryption scheme,\n   where the key\
    \ for the conventional scheme is derived from the\n   password.  Similarly, the\
    \ password-based message authentication\n   scheme is based on an underlying conventional\
    \ scheme.  This\n   two-layered approach makes the password-based techniques modular\
    \ in\n   terms of the underlying techniques they can be based on.\n   It is expected\
    \ that the password-based key derivation functions may\n   find other applications\
    \ than just the encryption and message\n   authentication schemes defined here.\
    \  For instance, one might derive\n   a set of keys with a single application\
    \ of a key derivation function,\n   rather than derive each key with a separate\
    \ application of the\n   function.  The keys in the set would be obtained as substrings\
    \ of the\n   output of the key derivation function.  This approach might be\n\
    \   employed as part of key establishment in a session-oriented protocol.\n  \
    \ Another application is password checking, where the output of the key\n   derivation\
    \ function is stored (along with the salt and iteration\n   count) for the purposes\
    \ of subsequent verification of a password.\n   Throughout this document, a password\
    \ is considered to be an octet\n   string of arbitrary length whose interpretation\
    \ as a text string is\n   unspecified.  In the interest of interoperability, however,\
    \ it is\n   recommended that applications follow some common text encoding rules.\n\
    \   ASCII and UTF-8 [RFC3629] are two possibilities.  (ASCII is a subset\n   of\
    \ UTF-8.)\n   Although the selection of passwords is outside the scope of this\n\
    \   document, guidelines have been published [NISTSP63] that may well be\n   taken\
    \ into account.\n"
- title: 4.  Salt and Iteration Count
  contents:
  - "4.  Salt and Iteration Count\n   Inasmuch as salt and iteration count are central\
    \ to the techniques\n   defined in this document, some further discussion is warranted.\n"
- title: 4.1.  Salt
  contents:
  - "4.1.  Salt\n   A salt in password-based cryptography has traditionally served\
    \ the\n   purpose of producing a large set of keys corresponding to a given\n\
    \   password, one of which is selected at random according to the salt.\n   An\
    \ individual key in the set is selected by applying a key derivation\n   function\
    \ KDF, as\n                              DK = KDF (P, S)\n   where DK is the derived\
    \ key, P is the password, and S is the salt.\n   This has two benefits:\n    \
    \  1.  It is difficult for an opponent to precompute all the keys, or\n      \
    \    even the most likely keys, corresponding to a dictionary of\n          passwords.\
    \  If the salt is 64 bits long, for instance, there\n          will be as many\
    \ as 2^64 keys for each password.  An opponent\n          is thus limited to searching\
    \ for passwords after a password-\n          based operation has been performed\
    \ and the salt is known.\n      2.  It is unlikely that the same key will be selected\
    \ twice.\n          Again, if the salt is 64 bits long, the chance of \"collision\"\
    \n          between keys does not become significant until about 2^32 keys\n \
    \         have been produced, according to the Birthday Paradox.  The\n      \
    \    fact that collisions are unlikely addresses some concerns\n          about\
    \ interactions between multiple uses of the same key that\n          may arise\
    \ when using some encryption and authentication\n          techniques.\n   In\
    \ password-based encryption, the party encrypting a message can gain\n   assurance\
    \ that these benefits are realized simply by selecting a\n   large and sufficiently\
    \ random salt when deriving an encryption key\n   from a password.  A party generating\
    \ a message authentication code\n   can gain such assurance in a similar fashion.\n\
    \   The party decrypting a message or verifying a message authentication\n   code,\
    \ however, cannot be sure that a salt supplied by another party\n   has actually\
    \ been generated at random.  It is possible, for instance,\n   that the salt may\
    \ have been copied from another password-based\n   operation in an attempt to\
    \ exploit interactions between multiple uses\n   of the same key.  For instance,\
    \ suppose two legitimate parties\n   exchange an encrypted message, where the\
    \ encryption key is an 80-bit\n   key derived from a shared password with some\
    \ salt.  An opponent could\n   take the salt from that encryption and provide\
    \ it to one of the\n   parties as though it were for a 40-bit key.  If the party\
    \ reveals the\n   result of decryption with the 40-bit key, the opponent may be\
    \ able to\n   solve for the 40-bit key.  In the case that 40-bit key is the first\n\
    \   half of the 80-bit key, the opponent can then readily solve for the\n   remaining\
    \ 40 bits of the 80-bit key.\n   To defend against such attacks, either the interaction\
    \ between\n   multiple uses of the same key should be carefully analyzed, or the\n\
    \   salt should contain data that explicitly distinguishes between\n   different\
    \ operations.  For instance, the salt might have an\n   additional, non-random\
    \ octet that specifies whether the derived key\n   is for encryption, for message\
    \ authentication, or for some other\n   operation.\n   Based on this, the following\
    \ is recommended for salt selection:\n      1.  If there is no concern about interactions\
    \ between multiple\n          uses of the same key (or a prefix of that key) with\
    \ the\n          password-based encryption and authentication techniques\n   \
    \       supported for a given password, then the salt may be generated\n     \
    \     at random and need not be checked for a particular format by\n         \
    \ the party receiving the salt.  It should be at least eight\n          octets\
    \ (64 bits) long.\n      2.  Otherwise, the salt should contain data that explicitly\n\
    \          distinguishes between different operations and different key\n    \
    \      lengths, in addition to a random part that is at least eight\n        \
    \  octets long, and this data should be checked or regenerated by\n          the\
    \ party receiving the salt.  For instance, the salt could\n          have an additional\
    \ non-random octet that specifies the purpose\n          of the derived key. \
    \ Alternatively, it could be the encoding\n          of a structure that specifies\
    \ detailed information about the\n          derived key, such as the encryption\
    \ or authentication\n          technique and a sequence number among the different\
    \ keys\n          derived from the password.  The particular format of the\n \
    \         additional data is left to the application.\n   Note: If a random number\
    \ generator or pseudorandom generator is not\n   available, a deterministic alternative\
    \ for generating the salt (or\n   the random part of it) is to apply a password-based\
    \ key derivation\n   function to the password and the message M to be processed.\
    \  For\n   instance, the salt could be computed with a key derivation function\n\
    \   as S = KDF (P, M).  This approach is not recommended if the message M\n  \
    \ is known to belong to a small message space (e.g., \"Yes\" or \"No\"),\n   however,\
    \ since then there will only be a small number of possible\n   salts.\n"
- title: 4.2.  Iteration Count
  contents:
  - "4.2.  Iteration Count\n   An iteration count has traditionally served the purpose\
    \ of increasing\n   the cost of producing keys from a password, thereby also increasing\n\
    \   the difficulty of attack.  Mathematically, an iteration count of c\n   will\
    \ increase the security strength of a password by log2(c) bits\n   against trial-based\
    \ attacks like brute force or dictionary attacks.\n   Choosing a reasonable value\
    \ for the iteration count depends on\n   environment and circumstances, and varies\
    \ from application to\n   application.  This document follows the recommendations\
    \ made in FIPS\n   Special Publication 800-132 [NISTSP132], which says\n     \
    \ The iteration count shall be  selected as large as possible, as\n      long\
    \ as the time required to generate the key using the entered\n      password is\
    \ acceptable for the users. [...] A minimum iteration\n      count of 1,000 is\
    \ recommended.  For especially critical keys, or\n      for very powerful systems\
    \ or systems where user-perceived\n      performance is not critical, an iteration\
    \ count of 10,000,000 may\n      be appropriate.\n"
- title: 5.  Key Derivation Functions
  contents:
  - "5.  Key Derivation Functions\n   A key derivation function produces a derived\
    \ key from a base key and\n   other parameters.  In a password-based key derivation\
    \ function, the\n   base key is a password, and the other parameters are a salt\
    \ value and\n   an iteration count, as outlined in Section 3.\n   The primary\
    \ application of the password-based key derivation\n   functions defined here\
    \ is in the encryption schemes in Section 6 and\n   the message authentication\
    \ scheme in Section 7.  Other applications\n   are certainly possible, hence the\
    \ independent definition of these\n   functions.\n   Two functions are specified\
    \ in this section: PBKDF1 and PBKDF2.\n   PBKDF2 is recommended for new applications;\
    \ PBKDF1 is included only\n   for compatibility with existing applications and\
    \ is not recommended\n   for new applications.\n   A typical application of the\
    \ key derivation functions defined here\n   might include the following steps:\n\
    \      1.  Select a salt S and an iteration count c, as outlined in\n        \
    \  Section 4.\n      2.  Select a length in octets for the derived key, dkLen.\n\
    \      3.  Apply the key derivation function to the password, the salt,\n    \
    \      the iteration count and the key length to produce a derived\n         \
    \ key.\n      4.  Output the derived key.\n   Any number of keys may be derived\
    \ from a password by varying the\n   salt, as described in Section 3.\n"
- title: 5.1.  PBKDF1
  contents:
  - "5.1.  PBKDF1\n   PBKDF1 applies a hash function, which shall be MD2 [RFC1319],\
    \ MD5\n   [RFC1321], or SHA-1 [NIST180], to derive keys.  The length of the\n\
    \   derived key is bounded by the length of the hash function output,\n   which\
    \ is 16 octets for MD2 and MD5 and 20 octets for SHA-1.  PBKDF1\n   is compatible\
    \ with the key derivation process in PKCS #5 v1.5\n   [PKCS5_15].\n   PBKDF1 is\
    \ recommended only for compatibility with existing\n   applications since the\
    \ keys it produces may not be large enough for\n   some applications.\n   PBKDF1\
    \ (P, S, c, dkLen)\n   Options:        Hash       underlying hash function\n \
    \  Input:          P          password, an octet string\n                   S\
    \          salt, an octet string\n                   c          iteration count,\
    \ a positive integer\n                   dkLen      intended length in octets\
    \ of derived key,\n                              a positive integer, at most 16\
    \ for MD2 or\n                              MD5 and 20 for SHA-1\n   Output: \
    \        DK         derived key, a dkLen-octet string\n   Steps:\n      1.  If\
    \ dkLen > 16 for MD2 and MD5, or dkLen > 20 for SHA-1, output\n          \"derived\
    \ key too long\" and stop.\n      2.  Apply the underlying hash function Hash\
    \ for c iterations to\n          the concatenation of the password P and the salt\
    \ S, then\n          extract the first dkLen octets to produce a derived key DK:\n\
    \                            T_1 = Hash (P || S) ,\n                         \
    \   T_2 = Hash (T_1) ,\n                            ...\n                    \
    \        T_c = Hash (T_{c-1}) ,\n                            DK = T_c<0..dkLen-1>\n\
    \      3.  Output the derived key DK.\n"
- title: 5.2.  PBKDF2
  contents:
  - "5.2.  PBKDF2\n   PBKDF2 applies a pseudorandom function (see Appendix B.1 for\
    \ an\n   example) to derive keys.  The length of the derived key is\n   essentially\
    \ unbounded.  (However, the maximum effective search space\n   for the derived\
    \ key may be limited by the structure of the underlying\n   pseudorandom function.\
    \  See Appendix B.1 for further discussion.)\n   PBKDF2 is recommended for new\
    \ applications.\n   PBKDF2 (P, S, c, dkLen)\n   Options:        PRF        underlying\
    \ pseudorandom function (hLen\n                              denotes the length\
    \ in octets of the\n                              pseudorandom function output)\n\
    \   Input:          P          password, an octet string\n                   S\
    \          salt, an octet string\n                   c          iteration count,\
    \ a positive integer\n                   dkLen      intended length in octets\
    \ of the derived\n                              key, a positive integer, at most\n\
    \                              (2^32 - 1) * hLen\n   Output:         DK      \
    \   derived key, a dkLen-octet string\n   Steps:\n      1.  If dkLen > (2^32 -\
    \ 1) * hLen, output \"derived key too long\"\n          and stop.\n      2.  Let\
    \ l be the number of hLen-octet blocks in the derived key,\n          rounding\
    \ up, and let r be the number of octets in the last\n          block:\n      \
    \             l = CEIL (dkLen / hLen)\n                   r = dkLen - (l - 1)\
    \ * hLen\n          Here, CEIL (x) is the \"ceiling\" function, i.e., the smallest\n\
    \          integer greater than, or equal to, x.\n      3.  For each block of\
    \ the derived key apply the function F defined\n          below to the password\
    \ P, the salt S, the iteration count c,\n          and the block index to compute\
    \ the block:\n                   T_1 = F (P, S, c, 1) ,\n                   T_2\
    \ = F (P, S, c, 2) ,\n                   ...\n                   T_l = F (P, S,\
    \ c, l) ,\n          where the function F is defined as the exclusive-or sum of\
    \ the\n          first c iterates of the underlying pseudorandom function PRF\n\
    \          applied to the password P and the concatenation of the salt S\n   \
    \       and the block index i:\n                   F (P, S, c, i) = U_1 \\xor\
    \ U_2 \\xor ... \\xor U_c\n          where\n                   U_1 = PRF (P, S\
    \ || INT (i)) ,\n                   U_2 = PRF (P, U_1) ,\n                   ...\n\
    \                   U_c = PRF (P, U_{c-1}) .\n          Here, INT (i) is a four-octet\
    \ encoding of the integer i, most\n          significant octet first.\n      4.\
    \  Concatenate the blocks and extract the first dkLen octets to\n          produce\
    \ a derived key DK:\n                   DK = T_1 || T_2 ||  ...  || T_l<0..r-1>\n\
    \      5.  Output the derived key DK.\n   Note: The construction of the function\
    \ F follows a \"belt-and-\n   suspenders\" approach.  The iterates U_i are computed\
    \ recursively to\n   remove a degree of parallelism from an opponent; they are\
    \ exclusive-\n   ored together to reduce concerns about the recursion degenerating\n\
    \   into a small set of values.\n"
- title: 6.  Encryption Schemes
  contents:
  - "6.  Encryption Schemes\n   An encryption scheme, in the symmetric setting, consists\
    \ of an\n   encryption operation and a decryption operation, where the encryption\n\
    \   operation produces a ciphertext from a message under a key, and the\n   decryption\
    \ operation recovers the message from the ciphertext under\n   the same key. \
    \ In a password-based encryption scheme, the key is a\n   password.\n   A typical\
    \ application of a password-based encryption scheme is a\n   private-key protection\
    \ method, where the message contains private-key\n   information, as in PKCS #8.\
    \  The encryption schemes defined here\n   would be suitable encryption algorithms\
    \ in that context.\n   Two schemes are specified in this section: PBES1 and PBES2.\
    \  PBES2 is\n   recommended for new applications; PBES1 is included only for\n\
    \   compatibility with existing applications and is not recommended for\n   new\
    \ applications.\n"
- title: 6.1.  PBES1
  contents:
  - "6.1.  PBES1\n   PBES1 combines the PBKDF1 function (Section 5.1) with an underlying\n\
    \   block cipher, which shall be either DES [NIST46] or RC2 [RFC2268] in\n   cipher\
    \ block chaining (CBC) mode [NIST81].  PBES1 is compatible with\n   the encryption\
    \ scheme in PKCS #5 v1.5 [PKCS5_15].\n   PBES1 is recommended only for compatibility\
    \ with existing\n   applications, since it supports only two underlying encryption\n\
    \   schemes, each of which has a key size (56 or 64 bits) that may not be\n  \
    \ large enough for some applications.\n"
- title: 6.1.1.  PBES1 Encryption Operation
  contents:
  - "6.1.1.  PBES1 Encryption Operation\n   The encryption operation for PBES1 consists\
    \ of the following steps,\n   which encrypt a message M under a password P to\
    \ produce a ciphertext\n   C:\n      1.  Select an eight-octet salt S and an iteration\
    \ count c, as\n          outlined in Section 4.\n      2.  Apply the PBKDF1 key\
    \ derivation function (Section 5.1) to the\n          password P, the salt S,\
    \ and the iteration count c to produce a\n          derived key DK of length 16\
    \ octets:\n                    DK = PBKDF1 (P, S, c, 16)\n      3.  Separate the\
    \ derived key DK into an encryption key K\n          consisting of the first eight\
    \ octets of DK and an\n          initialization vector IV consisting of the next\
    \ eight octets:\n                    K   = DK<0..7>\n                    IV  =\
    \ DK<8..15>\n      4.  Concatenate M and a padding string PS to form an encoded\n\
    \          message EM:\n                    EM = M || PS\n          where the\
    \ padding string PS consists of 8-(||M|| mod 8) octets\n          each with value\
    \ 8-(||M|| mod 8).  The padding string PS will\n          satisfy one of the following\
    \ statements:\n                    PS = 01, if ||M|| mod 8 = 7 ;\n           \
    \         PS = 02 02, if ||M|| mod 8 = 6 ;\n                    ...\n        \
    \            PS = 08 08 08 08 08 08 08 08, if ||M|| mod 8 = 0.\n          The\
    \ length in octets of the encoded message will be a multiple\n          of eight,\
    \ and it will be possible to recover the message M\n          unambiguously from\
    \ the encoded message.  (This padding rule is\n          taken from RFC 1423 [RFC1423].)\n\
    \      5.  Encrypt the encoded message EM with the underlying block\n        \
    \  cipher (DES or RC2) in CBC mode under the encryption key K\n          with\
    \ initialization vector IV to produce the ciphertext C.\n          For DES, the\
    \ key K shall be considered as a 64-bit encoding of\n          a 56-bit DES key\
    \ with parity bits ignored (see [NIST46]).  For\n          RC2, the \"effective\
    \ key bits\" shall be 64 bits.\n      6.  Output the ciphertext C.\n   The salt\
    \ S and the iteration count c may be conveyed to the party\n   performing decryption\
    \ in an AlgorithmIdentifier value (see Appendix\n   A.3).\n"
- title: 6.1.2.  PBES1 Decryption Operation
  contents:
  - "6.1.2.  PBES1 Decryption Operation\n   The decryption operation for PBES1 consists\
    \ of the following steps,\n   which decrypt a ciphertext C under a password P\
    \ to recover a message\n   M:\n      1.  Obtain the eight-octet salt S and the\
    \ iteration count c.\n      2.  Apply the PBKDF1 key derivation function (Section\
    \ 5.1) to the\n          password P, the salt S, and the iteration count c to\
    \ produce a\n          derived key DK of length 16 octets:\n                 \
    \   DK = PBKDF1 (P, S, c, 16)\n      3.  Separate the derived key DK into an encryption\
    \ key K\n          consisting of the first eight octets of DK and an\n       \
    \   initialization vector IV consisting of the next eight octets:\n          \
    \           K = DK<0..7>\n                     IV  = DK<8..15>\n      4.  Decrypt\
    \ the ciphertext C with the underlying block cipher (DES\n          or RC2) in\
    \ CBC mode under the encryption key K with\n          initialization vector IV\
    \ to recover an encoded message EM.  If\n          the length in octets of the\
    \ ciphertext C is not a multiple of\n          eight, output \"decryption error\"\
    \ and stop.\n      5.  Separate the encoded message EM into a message M and a\
    \ padding\n          string PS:\n                     EM = M || PS\n         \
    \ where the padding string PS consists of some number psLen\n          octets\
    \ each with value psLen, where psLen is between 1 and 8.\n          If it is not\
    \ possible to separate the encoded message EM in\n          this manner, output\
    \ \"decryption error\" and stop.\n      6.  Output the recovered message M.\n"
- title: 6.2.  PBES2
  contents:
  - "6.2.  PBES2\n   PBES2 combines a password-based key derivation function, which\
    \ shall\n   be PBKDF2 (Section 5.2) for this version of PKCS #5, with an\n   underlying\
    \ encryption scheme (see Appendix B.2 for examples).  The\n   key length and any\
    \ other parameters for the underlying encryption\n   scheme depend on the scheme.\n\
    \   PBES2 is recommended for new applications.\n"
- title: 6.2.1.  PBES2 Encryption Operation
  contents:
  - "6.2.1.  PBES2 Encryption Operation\n   The encryption operation for PBES2 consists\
    \ of the following steps,\n   which encrypt a message M under a password P to\
    \ produce a ciphertext\n   C, applying a selected key derivation function KDF\
    \ and a selected\n   underlying encryption scheme:\n      1.  Select a salt S\
    \ and an iteration count c, as outlined in\n          Section 4.\n      2.  Select\
    \ the length in octets, dkLen, for the derived key for\n          the underlying\
    \ encryption scheme.\n      3.  Apply the selected key derivation function to\
    \ the password P,\n          the salt S, and the iteration count c to produce\
    \ a derived key\n          DK of length dkLen octets:\n                     DK\
    \ = KDF (P, S, c, dkLen)\n      4.  Encrypt the message M with the underlying\
    \ encryption scheme\n          under the derived key DK to produce a ciphertext\
    \ C.  (This\n          step may involve selection of parameters such as an\n \
    \         initialization vector and padding, depending on the underlying\n   \
    \       scheme.)\n      5.  Output the ciphertext C.\n   The salt S, the iteration\
    \ count c, the key length dkLen, and\n   identifiers for the key derivation function\
    \ and the underlying\n   encryption scheme may be conveyed to the party performing\
    \ decryption\n   in an AlgorithmIdentifier value (see Appendix A.4).\n"
- title: 6.2.2.  PBES2 Decryption Operation
  contents:
  - "6.2.2.  PBES2 Decryption Operation\n   The decryption operation for PBES2 consists\
    \ of the following steps,\n   which decrypt a ciphertext C under a password P\
    \ to recover a message\n   M:\n      1.  Obtain the salt S for the operation.\n\
    \      2.  Obtain the iteration count c for the key derivation function.\n   \
    \   3.  Obtain the key length in octets, dkLen, for the derived key\n        \
    \  for the underlying encryption scheme.\n      4.  Apply the selected key derivation\
    \ function to the password P,\n          the salt S, and the iteration count c\
    \ to produce a derived key\n          DK of length dkLen octets:\n           \
    \         DK = KDF (P, S, c, dkLen)\n      5.  Decrypt the ciphertext C with the\
    \ underlying encryption scheme\n          under the derived key DK to recover\
    \ a message M.  If the\n          decryption function outputs \"decryption error\"\
    , then output\n          \"decryption error\" and stop.\n      6.  Output the\
    \ recovered message M.\n"
- title: 7.  Message Authentication Schemes
  contents:
  - "7.  Message Authentication Schemes\n   A message authentication scheme consists\
    \ of a MAC (Message\n   Authentication Code) generation operation and a MAC verification\n\
    \   operation, where the MAC generation operation produces a MAC from a\n   message\
    \ under a key, and the MAC verification operation verifies the\n   message authentication\
    \ code under the same key.  In a password-based\n   message authentication scheme,\
    \ the key is a password.\n   One scheme is specified in this section: PBMAC1.\n"
- title: 7.1.  PBMAC1
  contents:
  - "7.1.  PBMAC1\n   PBMAC1 combines a password-based key derivation function, which\
    \ shall\n   be PBKDF2 (Section 5.2) for this version of PKCS #5, with an\n   underlying\
    \ message authentication scheme (see Appendix B.3 for an\n   example).  The key\
    \ length and any other parameters for the underlying\n   message authentication\
    \ scheme depend on the scheme.\n"
- title: 7.1.1.  PBMAC1 Generation Operation
  contents:
  - "7.1.1.  PBMAC1 Generation Operation\n   The MAC generation operation for PBMAC1\
    \ consists of the following\n   steps, which process a message M under a password\
    \ P to generate a\n   message authentication code T, applying a selected key derivation\n\
    \   function KDF and a selected underlying message authentication scheme:\n  \
    \    1.  Select a salt S and an iteration count c, as outlined in\n          Section\
    \ 4.\n      2.  Select a key length in octets, dkLen, for the derived key for\n\
    \          the underlying message authentication function.\n      3.  Apply the\
    \ selected key derivation function to the password P,\n          the salt S, and\
    \ the iteration count c to produce a derived key\n          DK of length dkLen\
    \ octets:\n                    DK = KDF (P, S, c, dkLen)\n      4.  Process the\
    \ message M with the underlying message\n          authentication scheme under\
    \ the derived key DK to generate a\n          message authentication code T.\n\
    \      5.  Output the message authentication code T.\n   The salt S, the iteration\
    \ count c, the key length dkLen, and\n   identifiers for the key derivation function\
    \ and underlying message\n   authentication scheme may be conveyed to the party\
    \ performing\n   verification in an AlgorithmIdentifier value (see Appendix A.5).\n"
- title: 7.1.2.  PBMAC1 Verification Operation
  contents:
  - "7.1.2.  PBMAC1 Verification Operation\n   The MAC verification operation for\
    \ PBMAC1 consists of the following\n   steps, which process a message M under\
    \ a password P to verify a\n   message authentication code T:\n      1.  Obtain\
    \ the salt S and the iteration count c.\n      2.  Obtain the key length in octets,\
    \ dkLen, for the derived key\n          for the underlying message authentication\
    \ scheme.\n      3.  Apply the selected key derivation function to the password\
    \ P,\n          the salt S, and the iteration count c to produce a derived key\n\
    \          DK of length dkLen octets:\n                    DK = KDF (P, S, c,\
    \ dkLen)\n      4.  Process the message M with the underlying message\n      \
    \    authentication scheme under the derived key DK to verify the\n          message\
    \ authentication code T.\n      5.  If the message authentication code verifies,\
    \ output \"correct\";\n          else output \"incorrect\".\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Password-based cryptography is generally limited\
    \ in the security that\n   it can provide, particularly for methods such as those\
    \ defined in\n   this document where offline password search is possible.  While\
    \ the\n   use of salt and iteration count can increase the complexity of attack\n\
    \   (see Section 4 for recommendations), it is essential that passwords\n   are\
    \ selected well, and relevant guidelines (e.g., [NISTSP63]) should\n   be taken\
    \ into account.  It is also important that passwords be\n   protected well if\
    \ stored.\n   In general, different keys should be derived from a password for\n\
    \   different uses to minimize the possibility of unintended\n   interactions.\
    \  For password-based encryption with a single algorithm,\n   a random salt is\
    \ sufficient to ensure that different keys will be\n   produced.  In certain other\
    \ situations, as outlined in Section 4, a\n   structured salt is necessary.  The\
    \ recommendations in Section 4\n   should thus be taken into account when selecting\
    \ the salt value.\n   For information on security considerations for MD2 [RFC1319],\
    \ see\n   [RFC6149]; for MD5 [RFC1321], see [RFC6151]; and for SHA-1 [NIST180],\n\
    \   see [RFC6194].\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [ANSIX952] ANSI, \"Triple Data Encryption Algorithm\
    \ Modes of\n              Operation\", Accredited Standards Committee X9, X9.52-1998,\n\
    \              July 1998.\n   [BELLOV]   Bellovin, S. and M. Merritt, \"Encrypted\
    \ Key Exchange:\n              Password-based Protocols Secure against Dictionary\n\
    \              Attacks\", Proceedings of the IEEE Symposium on Research in\n \
    \             Security and Privacy, pages 72-84, IEEE Computer Society,\n    \
    \          DOI 10.1109/RISP.1992.213269, 1992.\n   [COCHRAN]  Cochran, M., \"\
    Notes on the Wang et al. 2^63 SHA-1\n              Differential Path\", Cryptology\
    \ ePrint Archive: Report\n              2007/474, August 2008, <http://eprint.iacr.org/2007/474>.\n\
    \   [ISO8824-1]\n              International Organization for Standardization,\n\
    \              \"Information technology - Abstract Syntax Notation One\n     \
    \         (ASN.1) - Specification of basic notation\", ISO/IEC\n             \
    \ 8824-1:2008, 2008.\n   [ISO8824-2]\n              International Organization\
    \ for Standardization,\n              \"Information technology - Abstract Syntax\
    \ Notation One\n              (ASN.1) - Information object specification\", ISO/IEC\n\
    \              8824-2:2008, 2008.\n   [ISO8824-3]\n              International\
    \ Organization for Standardization,\n              \"Information technology -\
    \ Abstract Syntax Notation One\n              (ASN.1) - Constraint specification\"\
    , ISO/IEC 8824-3:2008,\n              2008.\n   [ISO8824-4]\n              International\
    \ Organization for Standardization,\n              \"Information technology -\
    \ Abstract Syntax Notation One\n              (ASN.1) - Parameterization of ASN.1\
    \ specifications\",\n              ISO/IEC 8824-4:2008, 2008.\n   [JABLON]   Jablon,\
    \ D., \"Strong Password-Only Authenticated Key\n              Exchange\", ACM\
    \ SIGCOMM Computer Communication Review,\n              Volume 26, Issue 5, DOI\
    \ 10.1145/242896.242897, October\n              1996.\n   [MORRIS]   Morris, R.\
    \ and K. Thompson, \"Password security: A case\n              history\", Communications\
    \ of the ACM, Vol. 22, Issue 11,\n              pages 594-597, DOI 10.1145/359168.359172,\
    \ November 1979.\n   [NIST46]   National Institute of Standards and Technology\
    \ (NIST),\n              \"Data Encryption Standard\", FIPS PUB 46-3, October\
    \ 1999.\n   [NIST81]   National Institute of Standards and Technology (NIST),\n\
    \              \"DES Modes of Operation\", FIPS PUB 81, December 2, 1980.\n  \
    \ [NIST180]  National Institute of Standards and Technology, \"Secure\n      \
    \        Hash Standard (SHS)\", FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015.\n   [NIST197]  National Institute of Standards and Technology (NIST),\n\
    \              \"Advance Encryption Standard (AES)\", FIPS PUB 197,\n        \
    \      November 2001.\n   [NIST198]  National Institute of Standards and Technology\
    \ (NIST),\n              \"The Keyed - Hash Message Authentication Code (HMAC)\"\
    ,\n              FIPS PUB 198-1, July 2008.\n   [NISTSP63] National Institute\
    \ of Standards and Technology (NIST),\n              \"Electronic Authentication\
    \ Guideline\", NIST Special\n              Publication 800-63-2, DOI 10.6028/NIST.SP.800-63-2,\
    \ August\n              2013.\n   [NISTSP132]\n              National Institute\
    \ of Standards and Technology (NIST),\n              \"Recommendation for Password-Based\
    \ Key Derivation, Part 1:\n              Storage Applications\", NIST Special\
    \ Publication 800-132,\n              DOI 10.6028/NIST.SP.800-132, December 2010.\n\
    \   [PKCS5_15] RSA Laboratories, \"PKCS #5: Password-Based Encryption\n      \
    \        Standard Version 1.5\", November 1993.\n   [PKCS5_21] RSA Laboratories,\
    \ \"PKCS #5: Password-Based Encryption\n              Standard Version 2.1\",\
    \ October 2012.\n   [PKCS8]    Kaliski, B., \"Public-Key Cryptography Standards\
    \ (PKCS) #8:\n              Private-Key Information Syntax Specification Version\
    \ 1.2\",\n              RFC 5208, DOI 10.17487/RFC5208, May 2008,\n          \
    \    <http://www.rfc-editor.org/info/rfc5208>.\n   [RC5]      Rivest, R.L., \"\
    The RC5 encryption algorithm\", In\n              Proceedings of the Second International\
    \ Workshop on Fast\n              Software Encryption, pages 86-96, Springer-Verlag,\n\
    \              DOI 10.1007/3-540-60590-8_7, 1994.\n   [RFC1319]  Kaliski, B.,\
    \ \"The MD2 Message-Digest Algorithm\", RFC 1319,\n              DOI 10.17487/RFC1319,\
    \ April 1992,\n              <http://www.rfc-editor.org/info/rfc1319>.\n   [RFC1321]\
    \  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n             \
    \ DOI 10.17487/RFC1321, April 1992,\n              <http://www.rfc-editor.org/info/rfc1321>.\n\
    \   [RFC1423]  Balenson, D., \"Privacy Enhancement for Internet Electronic\n \
    \             Mail: Part III: Algorithms, Modes, and Identifiers\",\n        \
    \      RFC 1423, DOI 10.17487/RFC1423, February 1993,\n              <http://www.rfc-editor.org/info/rfc1423>.\n\
    \   [RFC2040]  Baldwin, R. and R. Rivest, \"The RC5, RC5-CBC, RC5-CBC-Pad,\n \
    \             and RC5-CTS Algorithms\", RFC 2040, DOI 10.17487/RFC2040,\n    \
    \          October 1996, <http://www.rfc-editor.org/info/rfc2040>.\n   [RFC2104]\
    \  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n              Hashing\
    \ for Message Authentication\", RFC 2104,\n              DOI 10.17487/RFC2104,\
    \ February 1997,\n              <http://www.rfc-editor.org/info/rfc2104>.\n  \
    \ [RFC2268]  Rivest, R., \"A Description of the RC2(r) Encryption\n          \
    \    Algorithm\", RFC 2268, DOI 10.17487/RFC2268, March 1998,\n              <http://www.rfc-editor.org/info/rfc2268>.\n\
    \   [RFC2898]  Kaliski, B., \"PKCS #5: Password-Based Cryptography\n         \
    \     Specification Version 2.0\", RFC 2898,\n              DOI 10.17487/RFC2898,\
    \ September 2000,\n              <http://www.rfc-editor.org/info/rfc2898>.\n \
    \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n         \
    \     10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n            \
    \  2003, <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC5652]  Housley, R.,\
    \ \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652, DOI\
    \ 10.17487/RFC5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC5958]  Turner, S., \"Asymmetric Key Packages\", RFC 5958,\n          \
    \    DOI 10.17487/RFC5958, August 2010,\n              <http://www.rfc-editor.org/info/rfc5958>.\n\
    \   [RFC6149]  Turner, S. and L. Chen, \"MD2 to Historic Status\",\n         \
    \     RFC 6149, DOI 10.17487/RFC6149, March 2011,\n              <http://www.rfc-editor.org/info/rfc6149>.\n\
    \   [RFC6151]  Turner, S. and L. Chen, \"Updated Security Considerations\n   \
    \           for the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n      \
    \        RFC 6151, DOI 10.17487/RFC6151, March 2011,\n              <http://www.rfc-editor.org/info/rfc6151>.\n\
    \   [RFC6194]  Polk, T., Chen, L., Turner, S., and P. Hoffman, \"Security\n  \
    \            Considerations for the SHA-0 and SHA-1 Message-Digest\n         \
    \     Algorithms\", RFC 6194, DOI 10.17487/RFC6194, March 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6194>.\n   [WANG]     Wang, X., Yao, A.C.,\
    \ and F. Yao, \"Cryptanalysis on SHA-1\",\n              presented by Adi Shamir\
    \ at the rump session of CRYPTO\n              2005, <http://csrc.nist.gov/groups/ST/hash/documents/\n\
    \              Wang_SHA1-New-Result.pdf>.\n   [WU]       Wu, T., \"The Secure\
    \ Remote Password protocol\", In\n              Proceedings of the 1998 Internet\
    \ Society Network and\n              Distributed System Security Symposium, pages\
    \ 97-111,\n              Internet Society, 1998,\n              <https://www.isoc.org/isoc/conferences/ndss/98/wu.pdf>.\n"
- title: Appendix A.  ASN.1 Syntax
  contents:
  - "Appendix A.  ASN.1 Syntax\n   This section defines ASN.1 syntax for the key derivation\
    \ functions,\n   the encryption schemes, the message authentication scheme, and\n\
    \   supporting techniques.  The intended application of these definitions\n  \
    \ includes PKCS #8 and other syntax for key management, encrypted data,\n   and\
    \ integrity-protected data.  (Various aspects of ASN.1 are\n   specified in several\
    \ ISO/IEC standards [ISO8824-1] [ISO8824-2]\n   [ISO8824-3] [ISO8824-4].)\n  \
    \ The object identifier pkcs-5 identifies the arc of the OID tree from\n   which\
    \ the OIDs (specific to PKCS #5) in this section are derived:\n   rsadsi OBJECT\
    \ IDENTIFIER ::= {iso(1) member-body(2) us(840) 113549}\n   pkcs OBJECT IDENTIFIER\
    \   ::= {rsadsi 1}\n   pkcs-5 OBJECT IDENTIFIER ::= {pkcs 5}\n"
- title: A.1.  PBKDF1
  contents:
  - "A.1.  PBKDF1\n   No object identifier is given for PBKDF1, as the object identifiers\n\
    \   for PBES1 are sufficient for existing applications, and PBKDF2 is\n   recommended\
    \ for new applications.\n"
- title: A.2.  PBKDF2
  contents:
  - "A.2.  PBKDF2\n   The object identifier id-PBKDF2 identifies the PBKDF2 key derivation\n\
    \   function (Section 5.2).\n      id-PBKDF2 OBJECT IDENTIFIER ::= {pkcs-5 12}\n\
    \   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type PBKDF2-params:\n   PBKDF2-params ::= SEQUENCE {\n       salt\
    \ CHOICE {\n           specified OCTET STRING,\n           otherSource AlgorithmIdentifier\
    \ {{PBKDF2-SaltSources}}\n       },\n       iterationCount INTEGER (1..MAX),\n\
    \       keyLength INTEGER (1..MAX) OPTIONAL,\n       prf AlgorithmIdentifier {{PBKDF2-PRFs}}\
    \ DEFAULT\n       algid-hmacWithSHA1 }\n   The fields of type PBKDF2-params have\
    \ the following meanings:\n      -  salt specifies the salt value or the source\
    \ of the salt value.\n         It shall either be an octet string or an algorithm\
    \ ID with an\n         OID in the set PBKDF2-SaltSources, which is reserved for\
    \ future\n         versions of PKCS #5.\n         The salt-source approach is\
    \ intended to indicate how the salt\n         value is to be generated as a function\
    \ of parameters in the\n         algorithm ID, application data, or both.  For\
    \ instance, it may\n         indicate that the salt value is produced from the\
    \ encoding of a\n         structure that specifies detailed information about\
    \ the derived\n         key as suggested in Section 4.1.  Some of the information\
    \ may\n         be carried elsewhere, e.g., in the encryption algorithm ID.\n\
    \         However, such facilities are deferred to a future version of\n     \
    \    PKCS #5.\n         In this version, an application may achieve the benefits\n\
    \         mentioned in Section 4.1 by choosing a particular\n         interpretation\
    \ of the salt value in the specified alternative.\n      PBKDF2-SaltSources ALGORITHM-IDENTIFIER\
    \ ::= { ... }\n      -  iterationCount specifies the iteration count.  The maximum\n\
    \         iteration count allowed depends on the implementation.  It is\n    \
    \     expected that implementation profiles may further constrain the\n      \
    \   bounds.\n      -  keyLength, an optional field, is the length in octets of\
    \ the\n         derived key.  The maximum key length allowed depends on the\n\
    \         implementation; it is expected that implementation profiles may\n  \
    \       further constrain the bounds.  The field is provided for\n         convenience\
    \ only; the key length is not cryptographically\n         protected.  If there\
    \ is concern about interaction between\n         operations with different key\
    \ lengths for a given salt (see\n         Section 4.1), the salt should distinguish\
    \ among the different\n         key lengths.\n      -  prf identifies the underlying\
    \ pseudorandom function.  It shall\n         be an algorithm ID with an OID in\
    \ the set PBKDF2-PRFs, which\n         for this version of PKCS #5 shall consist\
    \ of id-hmacWithSHA1\n         (see Appendix B.1.1) and any other OIDs defined\
    \ by the\n         application.\n      PBKDF2-PRFs ALGORITHM-IDENTIFIER ::= {\n\
    \        {NULL IDENTIFIED BY id-hmacWithSHA1},\n        {NULL IDENTIFIED BY id-hmacWithSHA224},\n\
    \        {NULL IDENTIFIED BY id-hmacWithSHA256},\n        {NULL IDENTIFIED BY\
    \ id-hmacWithSHA384},\n        {NULL IDENTIFIED BY id-hmacWithSHA512},\n     \
    \   {NULL IDENTIFIED BY id-hmacWithSHA512-224},\n        {NULL IDENTIFIED BY id-hmacWithSHA512-256},\n\
    \        ...\n      }\n   The default pseudorandom function is HMAC-SHA-1:\n \
    \        algid-hmacWithSHA1 AlgorithmIdentifier {{PBKDF2-PRFs}} ::=\n        \
    \     {algorithm id-hmacWithSHA1, parameters NULL : NULL}\n"
- title: A.3.  PBES1
  contents:
  - "A.3.  PBES1\n   Different object identifiers identify the PBES1 encryption scheme\n\
    \   (Section 6.1) according to the underlying hash function in the key\n   derivation\
    \ function and the underlying block cipher, as summarized in\n   the following\
    \ table:\n           Hash Function  Block Cipher      OID\n                MD2\
    \           DES         pkcs-5.1\n                MD2           RC2         pkcs-5.4\n\
    \                MD5           DES         pkcs-5.3\n                MD5     \
    \      RC2         pkcs-5.6\n               SHA-1          DES         pkcs-5.10\n\
    \               SHA-1          RC2         pkcs-5.11\n      pbeWithMD2AndDES-CBC\
    \ OBJECT IDENTIFIER  ::= {pkcs-5 1}\n      pbeWithMD2AndRC2-CBC OBJECT IDENTIFIER\
    \  ::= {pkcs-5 4}\n      pbeWithMD5AndDES-CBC OBJECT IDENTIFIER  ::= {pkcs-5 3}\n\
    \      pbeWithMD5AndRC2-CBC OBJECT IDENTIFIER  ::= {pkcs-5 6}\n      pbeWithSHA1AndDES-CBC\
    \ OBJECT IDENTIFIER ::= {pkcs-5 10}\n      pbeWithSHA1AndRC2-CBC OBJECT IDENTIFIER\
    \ ::= {pkcs-5 11}\n   For each OID, the parameters field associated with the OID\
    \ in an\n   AlgorithmIdentifier shall have type PBEParameter:\n   PBEParameter\
    \ ::= SEQUENCE {\n      salt OCTET STRING (SIZE(8)),\n      iterationCount INTEGER\
    \ }\n   The fields of type PBEParameter have the following meanings:\n      -\
    \  salt specifies the salt value, an eight-octet string.\n      -  iterationCount\
    \ specifies the iteration count.\n"
- title: A.4.  PBES2
  contents:
  - "A.4.  PBES2\n   The object identifier id-PBES2 identifies the PBES2 encryption\
    \ scheme\n   (Section 6.2).\n   id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n \
    \  The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type PBES2-params:\n   PBES2-params ::= SEQUENCE {\n      keyDerivationFunc\
    \ AlgorithmIdentifier {{PBES2-KDFs}},\n      encryptionScheme AlgorithmIdentifier\
    \ {{PBES2-Encs}} }\n   The fields of type PBES2-params have the following meanings:\n\
    \      -  keyDerivationFunc identifies the underlying key derivation\n       \
    \  function.  It shall be an algorithm ID with an OID in the set\n         PBES2-KDFs,\
    \ which for this version of PKCS #5 shall consist of\n         id-PBKDF2 (Appendix\
    \ A.2).\n   PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n      { {PBKDF2-params IDENTIFIED\
    \ BY id-PBKDF2}, ... }\n      -  encryptionScheme identifies the underlying encryption\
    \ scheme.\n         It shall be an algorithm ID with an OID in the set PBES2-Encs,\n\
    \         whose definition is left to the application.  Examples of\n        \
    \ underlying encryption schemes are given in Appendix B.2.\n   PBES2-Encs ALGORITHM-IDENTIFIER\
    \ ::= { ... }\n"
- title: A.5.  PBMAC1
  contents:
  - "A.5.  PBMAC1\n   The object identifier id-PBMAC1 identifies the PBMAC1 message\n\
    \   authentication scheme (Section 7.1).\n   id-PBMAC1 OBJECT IDENTIFIER ::= {pkcs-5\
    \ 14}\n   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type PBMAC1-params:\n   PBMAC1-params ::=  SEQUENCE {\n      keyDerivationFunc\
    \ AlgorithmIdentifier {{PBMAC1-KDFs}},\n      messageAuthScheme AlgorithmIdentifier\
    \ {{PBMAC1-MACs}} }\n   The keyDerivationFunc field has the same meaning as the\
    \ corresponding\n   field of PBES2-params (Appendix A.4) except that the set of\
    \ OIDs is\n   PBMAC1-KDFs.\n   PBMAC1-KDFs ALGORITHM-IDENTIFIER ::=\n      { {PBKDF2-params\
    \ IDENTIFIED BY id-PBKDF2}, ... }\n   The messageAuthScheme field identifies the\
    \ underlying message\n   authentication scheme.  It shall be an algorithm ID with\
    \ an OID in\n   the set PBMAC1-MACs, whose definition is left to the application.\n\
    \   Examples of underlying encryption schemes are given in Appendix B.3.\n   PBMAC1-MACs\
    \ ALGORITHM-IDENTIFIER ::= { ... }\n"
- title: Appendix B.  Supporting Techniques
  contents:
  - "Appendix B.  Supporting Techniques\n   This section gives several examples of\
    \ underlying functions and\n   schemes supporting the password-based schemes in\
    \ Sections 5, 6, and\n   7.\n   While these supporting techniques are appropriate\
    \ for applications to\n   implement, none of them is required to be implemented.\
    \  It is\n   expected, however, that profiles for PKCS #5 will be developed that\n\
    \   specify particular supporting techniques.\n   This section also gives object\
    \ identifiers for the supporting\n   techniques.  The object identifiers digestAlgorithm\
    \ and\n   encryptionAlgorithm identify the arcs from which certain algorithm\n\
    \   OIDs referenced in this section are derived:\n   digestAlgorithm OBJECT IDENTIFIER\
    \ ::= {rsadsi 2} encryptionAlgorithm\n   OBJECT IDENTIFIER ::= {rsadsi 3}\n"
- title: B.1.  Pseudorandom Functions
  contents:
  - "B.1.  Pseudorandom Functions\n   Examples of pseudorandom function for PBKDF2\
    \ (Section 5.2) include\n   HMAC with SHA-1, SHA-224, SHA-256, SHA-384, SHA-512,\
    \ SHA-512/224, and\n   SHA-512/256.  Applications may employ other schemes as\
    \ well.\n"
- title: B.1.1.  HMAC-SHA-1
  contents:
  - "B.1.1.  HMAC-SHA-1\n   HMAC-SHA-1 is the pseudorandom function corresponding\
    \ to the HMAC\n   message authentication code [RFC2104] based on the SHA-1 hash\n\
    \   function [NIST180].  The pseudorandom function is the same function\n   by\
    \ which the message authentication code is computed, with a full-\n   length output.\
    \  (The first argument to the pseudorandom function PRF\n   serves as HMAC's \"\
    key\", and the second serves as HMAC's \"text\".  In\n   the case of PBKDF2, the\
    \ \"key\" is thus the password and the \"text\" is\n   the salt.)  HMAC-SHA-1\
    \ has a variable key length and a 20-octet\n   (160-bit) output value.\n   Although\
    \ the length of the key to HMAC-SHA-1 is essentially\n   unbounded, the effective\
    \ search space for pseudorandom function\n   outputs may be limited by the structure\
    \ of the function.  In\n   particular, when the key is longer than 512 bits, HMAC-SHA-1\
    \ will\n   first hash it to 160 bits.  Thus, even if a long derived key\n   consisting\
    \ of several pseudorandom function outputs is produced from\n   a key, the effective\
    \ search space for the derived key will be at most\n   160 bits.  Although the\
    \ specific limitation for other key sizes\n   depends on details of the HMAC construction,\
    \ one should assume, to be\n   conservative, that the effective search space is\
    \ limited to 160 bits\n   for other key sizes as well.\n   (The 160-bit limitation\
    \ should not generally pose a practical\n   limitation in the case of password-based\
    \ cryptography, since the\n   search space for a password is unlikely to be greater\
    \ than 160 bits.)\n   The object identifier id-hmacWithSHA1 identifies the HMAC-SHA-1\n\
    \   pseudorandom function:\n   id-hmacWithSHA1 OBJECT IDENTIFIER ::= {digestAlgorithm\
    \ 7}\n   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type NULL.  This object identifier is\n   employed in the object\
    \ set PBKDF2-PRFs (Appendix A.2).\n   Note: Although HMAC-SHA-1 was designed as\
    \ a message authentication\n   code, its proof of security is readily modified\
    \ to accommodate\n   requirements for a pseudorandom function, under stronger\
    \ assumptions.\n   A hash function may also meet the requirements of a pseudorandom\n\
    \   function under certain assumptions.  For instance, the direct\n   application\
    \ of a hash function to the concatenation of the \"key\" and\n   the \"text\"\
    \ may be appropriate, provided that \"text\" has appropriate\n   structure to\
    \ prevent certain attacks.  HMAC-SHA-1 is preferable,\n   however, because it\
    \ treats \"key\" and \"text\" as separate arguments and\n   does not require \"\
    text\" to have any structure.\n   During 2004 and 2005, there were a number of\
    \ attacks on SHA-1 that\n   reduced its perceived effective strength against collision\
    \ attacks to\n   62 bits instead of the expected 80 bits (e.g., Wang et al. [WANG],\n\
    \   confirmed by M. Cochran [COCHRAN]).  However, since these attacks\n   centered\
    \ on finding collisions between values, they are not a direct\n   security consideration\
    \ here because the collision-resistant property\n   is not required by the HMAC\
    \ authentication scheme.\n"
- title: B.1.2.  HMAC-SHA-2
  contents:
  - "B.1.2.  HMAC-SHA-2\n   HMAC-SHA-2 refers to the set of pseudorandom functions\
    \ corresponding\n   to the HMAC message authentication code (now a FIPS standard\n\
    \   [NIST198]) based on the new SHA-2 functions (FIPS 180-4 [NIST180]).\n   HMAC-SHA-2\
    \ has a variable key length and variable output value\n   depending on the hash\
    \ function chosen (SHA-224, SHA-256, SHA-384,\n   SHA-512, SHA-512/224, or SHA-512/256)\
    \ -- that is, 28, 32, 48, or 64\n   octets.\n   Using the new hash functions extends\
    \ the search space for the\n   produced keys.  Where SHA-1 limits the search space\
    \ to 20 octets,\n   SHA-2 sets new limits of 28, 32, 48, and 64 octets.\n   Object\
    \ identifiers for HMAC are defined as follows:\n   id-hmacWithSHA224 OBJECT IDENTIFIER\
    \ ::= {digestAlgorithm 8}\n   id-hmacWithSHA256 OBJECT IDENTIFIER ::= {digestAlgorithm\
    \ 9}\n   id-hmacWithSHA384 OBJECT IDENTIFIER ::= {digestAlgorithm 10}\n   id-hmacWithSHA512\
    \ OBJECT IDENTIFIER ::= {digestAlgorithm 11}\n   id-hmacWithSHA512-224 OBJECT\
    \ IDENTIFIER ::= {digestAlgorithm 12}\n   id-hmacWithSHA512-256 OBJECT IDENTIFIER\
    \ ::= {digestAlgorithm 13}\n"
- title: B.2.  Encryption Schemes
  contents:
  - "B.2.  Encryption Schemes\n   An example encryption scheme for PBES2 (Section\
    \ 6.2) is AES-CBC-Pad.\n   The schemes defined in PKCS #5 v2.0 [RFC2898], DES-CBC-Pad,\n\
    \   DES-EDE3-CBC-Pad, RC2-CBC-Pad, and RC5-CBC-Pad, are still supported,\n   but\
    \ DES-CBC-Pad, DES-EDE3-CBC-Pad, RC2-CBC-Pad are now considered\n   legacy and\
    \ should only be used for backwards compatibility reasons.\n   The object identifiers\
    \ given in this section are intended to be\n   employed in the object set PBES2-Encs\
    \ (Appendix A.4).\n"
- title: B.2.1.  DES-CBC-Pad
  contents:
  - "B.2.1.  DES-CBC-Pad\n   DES-CBC-Pad is single-key DES [NIST46] in CBC mode [NIST81]\
    \ with the\n   padding operation specified in RFC 1423 [RFC1423] (see Section\
    \ 6.1.1\n   of this document).  DES-CBC-Pad has an eight-octet encryption key\
    \ and\n   an eight-octet initialization vector.  The key is considered as a\n\
    \   64-bit encoding of a 56-bit DES key with parity bits ignored.\n   The object\
    \ identifier desCBC (defined in the NIST/OSI Implementors'\n   Workshop agreements)\
    \ identifies the DES-CBC-Pad encryption scheme:\n   desCBC OBJECT IDENTIFIER ::=\n\
    \      {iso(1) identified-organization(3) oiw(14) secsig(3)\n       algorithms(2)\
    \ 7}\n   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type OCTET STRING (SIZE(8)),\n   specifying the initialization vector\
    \ for CBC mode.\n"
- title: B.2.2.  DES-EDE3-CBC-Pad
  contents:
  - "B.2.2.  DES-EDE3-CBC-Pad\n   DES-EDE3-CBC-Pad is three-key triple-DES in CBC\
    \ mode [ANSIX952] with\n   the padding operation specified in RFC 1423 [RFC1423].\n\
    \   DES-EDE3-CBC-Pad has a 24-octet encryption key and an eight-octet\n   initialization\
    \ vector.  The key is considered as the concatenation of\n   three eight-octet\
    \ keys, each of which is a 64-bit encoding of a\n   56-bit DES key with parity\
    \ bits ignored.\n   The object identifier des-EDE3-CBC identifies the DES-EDE3-CBC-Pad\n\
    \   encryption scheme:\n   des-EDE3-CBC OBJECT IDENTIFIER ::= {encryptionAlgorithm\
    \ 7}\n   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type OCTET STRING (SIZE(8)),\n   specifying the initialization vector\
    \ for CBC mode.\n   Note: An OID for DES-EDE3-CBC without padding is given in\
    \ ANSI X9.52\n   [ANSIX952]; the one given here is preferred since it specifies\n\
    \   padding.\n"
- title: B.2.3.  RC2-CBC-Pad
  contents:
  - "B.2.3.  RC2-CBC-Pad\n   RC2-CBC-Pad is the RC2 encryption algorithm [RFC2268]\
    \ in CBC mode\n   with the padding operation specified in RFC 1423 [RFC1423].\n\
    \   RC2-CBC-Pad has a variable key length, from one to 128 octets, a\n   separate\
    \ \"effective key bits\" parameter from one to 1024 bits that\n   limits the effective\
    \ search space independent of the key length, and\n   an eight-octet initialization\
    \ vector.\n   The object identifier rc2CBC identifies the RC2-CBC-Pad encryption\n\
    \   scheme:\n   rc2CBC OBJECT IDENTIFIER ::= {encryptionAlgorithm 2}\n   The parameters\
    \ field associated with OID in an AlgorithmIdentifier\n   shall have type RC2-CBC-Parameter:\n\
    \   RC2-CBC-Parameter ::= SEQUENCE {\n       rc2ParameterVersion INTEGER OPTIONAL,\n\
    \       iv OCTET STRING (SIZE(8)) }\n   The fields of type RC2-CBCParameter have\
    \ the following meanings:\n      -  rc2ParameterVersion is a proprietary RSA Security\
    \ Inc. encoding\n         of the \"effective key bits\" for RC2.  The following\
    \ encodings\n         are defined:\n               Effective Key Bits        \
    \ Encoding\n                       40                    160\n               \
    \        64                    120\n                      128                \
    \     58\n                     b >= 256                  b\n   If the rc2ParameterVersion\
    \ field is omitted, the \"effective key bits\"\n   defaults to 32.  (This is for\
    \ backward compatibility with certain\n   very old implementations.)\n      -\
    \  iv is the eight-octet initialization vector.\n"
- title: B.2.4.  RC5-CBC-Pad
  contents:
  - "B.2.4.  RC5-CBC-Pad\n   RC5-CBC-Pad is the RC5 encryption algorithm [RC5] in\
    \ CBC mode with\n   the padding operation specified in RFC 5652 [RFC5652], which\
    \ is a\n   generalization of the padding operation specified in RFC 1423\n   [RFC1423].\
    \  The scheme is fully specified in [RFC2040].  RC5-CBC-Pad\n   has a variable\
    \ key length, from 0 to 256 octets, and supports both a\n   64-bit block size\
    \ and a 128-bit block size.  For the former, it has\n   an eight-octet initialization\
    \ vector, and for the latter, a 16-octet\n   initialization vector.  RC5-CBC-Pad\
    \ also has a variable number of\n   \"rounds\" in the encryption operation, from\
    \ 8 to 127.\n   Note: For RC5 with a 64-bit block size, the padding string is\
    \ as\n   defined in RFC 1423 [RFC1423].  For RC5 with a 128-bit block size,\n\
    \   the padding string consists of 16-(||M|| mod 16) octets each with\n   value\
    \ 16-(||M|| mod 16).\n   The object identifier rc5-CBC-PAD [RFC2040] identifies\
    \ the\n   RC5-CBC-Pad encryption scheme:\n   rc5-CBC-PAD OBJECT IDENTIFIER ::=\
    \ {encryptionAlgorithm 9}\n   The parameters field associated with this OID in\
    \ an\n   AlgorithmIdentifier shall have type RC5-CBC-Parameters:\n   RC5-CBC-Parameters\
    \ ::= SEQUENCE {\n      version INTEGER {v1-0(16)} (v1-0),\n      rounds INTEGER\
    \ (8..127),\n      blockSizeInBits INTEGER (64 | 128),\n      iv OCTET STRING\
    \ OPTIONAL }\n   The fields of type RC5-CBC-Parameters have the following meanings:\n\
    \      -  version is the version of the algorithm, which shall be v1-0.\n    \
    \  -  rounds is the number of rounds in the encryption operation,\n         which\
    \ shall be between 8 and 127.\n      -  blockSizeInBits is the block size in bits,\
    \ which shall be 64 or\n         128.\n      -  iv is the initialization vector,\
    \ an eight-octet string for\n         64-bit RC5 and a 16-octet string for 128-bit\
    \ RC5.  The default\n         is a string of the appropriate length consisting\
    \ of zero\n         octets.\n"
- title: B.2.5.  AES-CBC-Pad
  contents:
  - "B.2.5.  AES-CBC-Pad\n   AES-CBC-Pad is the AES encryption algorithm [NIST197]\
    \ in CBC mode\n   with the padding operation specified in RFC 5652 [RFC5652].\n\
    \   AES-CBC-Pad has a variable key length of 16, 24, or 32 octets and has\n  \
    \ a 16-octet block size.  It has a 16-octet initialization vector.\n   Note: For\
    \ AES, the padding string consists of 16-(||M|| mod 16)\n   octets each with value\
    \ 16-(||M|| mod 16).\n   For AES, object identifiers are defined depending on\
    \ key size and\n   operation mode.  For example, the 16-octet (128-bit) key AES\n\
    \   encryption scheme in CBC mode would be aes128-CBC-Pad identifying the\n  \
    \ AES-CBC-PAD encryption scheme using a 16-octet key:\n   aes128-CBC-PAD OBJECT\
    \ IDENTIFIER ::= {aes 2}\n   The AES object identifier is defined in Appendix\
    \ C.\n   The parameters field associated with this OID in an\n   AlgorithmIdentifier\
    \ shall have type OCTET STRING (SIZE(16)),\n   specifying the initialization vector\
    \ for CBC mode.\n"
- title: B.3.  Message Authentication Schemes
  contents:
  - "B.3.  Message Authentication Schemes\n   An example message authentication scheme\
    \ for PBMAC1 (Section 7.1) is\n   HMAC-SHA-1.\n"
- title: B.3.1.  HMAC-SHA-1
  contents:
  - "B.3.1.  HMAC-SHA-1\n   HMAC-SHA-1 is the HMAC message authentication scheme [RFC2104]\
    \ based\n   on the SHA-1 hash function [NIST180].  HMAC-SHA-1 has a variable key\n\
    \   length and a 20-octet (160-bit) message authentication code.\n   The object\
    \ identifier id-hmacWithSHA1 (see Appendix B.1.1) identifies\n   the HMAC-SHA-1\
    \ message authentication scheme.  (The object identifier\n   is the same for both\
    \ the pseudorandom function and the message\n   authentication scheme; the distinction\
    \ is to be understood by\n   context.)  This object identifier is intended to\
    \ be employed in the\n   object set PBMAC1-Macs (Appendix A.5).\n"
- title: B.3.2.  HMAC-SHA-2
  contents:
  - "B.3.2.  HMAC-SHA-2\n   HMAC-SHA-2 refers to the set of HMAC message authentication\
    \ schemes\n   [NIST198] based on the SHA-2 functions [NIST180].  HMAC-SHA-2 has\
    \ a\n   variable key length and a message authentication code whose length is\n\
    \   based on the hash function chosen (SHA-224, SHA-256, SHA-384,\n   SHA-512,\
    \ SHA-512/224, or SHA-512/256) -- that is, 28, 32, 48, or 64\n   octets.\n   The\
    \ object identifiers id-hmacWithSHA224, id-hmacWithSHA256,\n   id-hmacWithSHA384,\
    \ id-hmacWithSHA512, id-hmacWithSHA512-224, and\n   id-hmacWithSHA512-256 (see\
    \ Appendix B.1.2) identify the HMAC-SHA-2\n   schemes.  The object identifiers\
    \ are the same for both the\n   pseudorandom functions and the message authentication\
    \ schemes; the\n   distinction is to be understood by context.  These object identifiers\n\
    \   are intended to be employed in the object set PBMAC1-Macs (Appendix\n   A.5).\n"
- title: Appendix C.  ASN.1 Module
  contents:
  - "Appendix C.  ASN.1 Module\n   For reference purposes, the ASN.1 syntax in the\
    \ preceding sections is\n   presented as an ASN.1 module here.\n   -- PKCS #5\
    \ v2.1 ASN.1 Module\n   -- Revised October 27, 2012\n   -- This module has been\
    \ checked for conformance with the\n   -- ASN.1 standard by the OSS ASN.1 Tools\n\
    \   PKCS5v2-1 {\n      iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-5(5)\n\
    \      modules(16) pkcs5v2-1(2)\n   }\n   DEFINITIONS EXPLICIT TAGS ::=\n   BEGIN\n\
    \   -- ========================\n   -- Basic object identifiers\n   -- ========================\n\
    \   nistAlgorithms OBJECT IDENTIFIER ::= {joint-iso-itu-t(2) country(16)\n   \
    \                                      us(840) organization(1)\n             \
    \                            gov(101) csor(3) 4}\n   oiw    OBJECT IDENTIFIER\
    \ ::= {iso(1) identified-organization(3) 14}\n   rsadsi OBJECT IDENTIFIER ::=\
    \ {iso(1) member-body(2) us(840) 113549}\n   pkcs   OBJECT IDENTIFIER ::= {rsadsi\
    \ 1}\n   pkcs-5 OBJECT IDENTIFIER ::= {pkcs 5}\n   -- =======================\n\
    \   -- Basic types and classes\n   -- =======================\n   AlgorithmIdentifier\
    \ { ALGORITHM-IDENTIFIER:InfoObjectSet } ::=\n     SEQUENCE {\n       algorithm\
    \ ALGORITHM-IDENTIFIER.&id({InfoObjectSet}),\n       parameters ALGORITHM-IDENTIFIER.&Type({InfoObjectSet}\n\
    \       {@algorithm}) OPTIONAL\n   }\n   ALGORITHM-IDENTIFIER ::= TYPE-IDENTIFIER\n\
    \   -- ======\n   -- PBKDF2\n   -- ======\n   PBKDF2Algorithms ALGORITHM-IDENTIFIER\
    \ ::= {\n      {PBKDF2-params IDENTIFIED BY id-PBKDF2},\n      ...\n   }\n   id-PBKDF2\
    \ OBJECT IDENTIFIER ::= {pkcs-5 12}\n   algid-hmacWithSHA1 AlgorithmIdentifier\
    \ {{PBKDF2-PRFs}} ::=\n      {algorithm id-hmacWithSHA1, parameters NULL : NULL}\n\
    \   PBKDF2-params ::= SEQUENCE {\n       salt CHOICE {\n         specified OCTET\
    \ STRING,\n         otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n \
    \      },\n       iterationCount INTEGER (1..MAX),\n       keyLength INTEGER (1..MAX)\
    \ OPTIONAL,\n       prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT\n       algid-hmacWithSHA1\n\
    \   }\n   PBKDF2-SaltSources ALGORITHM-IDENTIFIER ::= { ... }\n   PBKDF2-PRFs\
    \ ALGORITHM-IDENTIFIER ::= {\n     {NULL IDENTIFIED BY id-hmacWithSHA1},\n   \
    \  {NULL IDENTIFIED BY id-hmacWithSHA224},\n     {NULL IDENTIFIED BY id-hmacWithSHA256},\n\
    \     {NULL IDENTIFIED BY id-hmacWithSHA384},\n     {NULL IDENTIFIED BY id-hmacWithSHA512},\n\
    \     {NULL IDENTIFIED BY id-hmacWithSHA512-224},\n     {NULL IDENTIFIED BY id-hmacWithSHA512-256},\n\
    \     ...\n   }\n   -- =====\n   -- PBES1\n   -- =====\n   PBES1Algorithms ALGORITHM-IDENTIFIER\
    \ ::= {\n      {PBEParameter IDENTIFIED BY pbeWithMD2AndDES-CBC}  |\n      {PBEParameter\
    \ IDENTIFIED BY pbeWithMD2AndRC2-CBC}  |\n      {PBEParameter IDENTIFIED BY pbeWithMD5AndDES-CBC}\
    \  |\n      {PBEParameter IDENTIFIED BY pbeWithMD5AndRC2-CBC}  |\n      {PBEParameter\
    \ IDENTIFIED BY pbeWithSHA1AndDES-CBC} |\n      {PBEParameter IDENTIFIED BY pbeWithSHA1AndRC2-CBC},\n\
    \      ...\n   }\n   pbeWithMD2AndDES-CBC OBJECT IDENTIFIER ::= {pkcs-5 1}\n \
    \  pbeWithMD2AndRC2-CBC OBJECT IDENTIFIER ::= {pkcs-5 4}\n   pbeWithMD5AndDES-CBC\
    \ OBJECT IDENTIFIER ::= {pkcs-5 3}\n   pbeWithMD5AndRC2-CBC OBJECT IDENTIFIER\
    \ ::= {pkcs-5 6}\n   pbeWithSHA1AndDES-CBC OBJECT IDENTIFIER ::= {pkcs-5 10}\n\
    \   pbeWithSHA1AndRC2-CBC OBJECT IDENTIFIER ::= {pkcs-5 11}\n   PBEParameter ::=\
    \ SEQUENCE {\n       salt OCTET STRING (SIZE(8)),\n       iterationCount INTEGER\n\
    \   }\n   -- =====\n   -- PBES2\n   -- =====\n   PBES2Algorithms ALGORITHM-IDENTIFIER\
    \ ::= {\n      {PBES2-params IDENTIFIED BY id-PBES2},\n      ...\n   }\n   id-PBES2\
    \ OBJECT IDENTIFIER ::= {pkcs-5 13}\n   PBES2-params ::= SEQUENCE {\n      keyDerivationFunc\
    \ AlgorithmIdentifier {{PBES2-KDFs}},\n      encryptionScheme AlgorithmIdentifier\
    \ {{PBES2-Encs}}\n   }\n   PBES2-KDFs ALGORITHM-IDENTIFIER ::= {\n      {PBKDF2-params\
    \ IDENTIFIED BY id-PBKDF2},\n      ...\n   }\n   PBES2-Encs ALGORITHM-IDENTIFIER\
    \ ::= { ... }\n   -- ======\n   -- PBMAC1\n   -- ======\n   PBMAC1Algorithms ALGORITHM-IDENTIFIER\
    \ ::= {\n      {PBMAC1-params IDENTIFIED BY id-PBMAC1},\n      ...\n   }\n   id-PBMAC1\
    \ OBJECT IDENTIFIER ::= {pkcs-5 14}\n   PBMAC1-params ::=  SEQUENCE {\n      \
    \ keyDerivationFunc AlgorithmIdentifier {{PBMAC1-KDFs}},\n       messageAuthScheme\
    \ AlgorithmIdentifier {{PBMAC1-MACs}}\n   }\n   PBMAC1-KDFs ALGORITHM-IDENTIFIER\
    \ ::= {\n      {PBKDF2-params IDENTIFIED BY id-PBKDF2},\n      ...\n   }\n   PBMAC1-MACs\
    \ ALGORITHM-IDENTIFIER ::= { ... }\n   -- =====================\n   -- Supporting\
    \ techniques\n   -- =====================\n   digestAlgorithm OBJECT IDENTIFIER\
    \     ::= {rsadsi 2}\n   encryptionAlgorithm OBJECT IDENTIFIER ::= {rsadsi 3}\n\
    \   SupportingAlgorithms ALGORITHM-IDENTIFIER ::= {\n      {NULL IDENTIFIED BY\
    \ id-hmacWithSHA1}                   |\n      {OCTET STRING (SIZE(8)) IDENTIFIED\
    \ BY desCBC}          |\n      {OCTET STRING (SIZE(8)) IDENTIFIED BY des-EDE3-CBC}\
    \    |\n      {RC2-CBC-Parameter IDENTIFIED BY rc2CBC}               |\n     \
    \ {RC5-CBC-Parameters IDENTIFIED BY rc5-CBC-PAD},        |\n      {OCTET STRING\
    \ (SIZE(16)) IDENTIFIED BY aes128-CBC-PAD} |\n      {OCTET STRING (SIZE(16)) IDENTIFIED\
    \ BY aes192-CBC-PAD} |\n      {OCTET STRING (SIZE(16)) IDENTIFIED BY aes256-CBC-PAD},\n\
    \       ...\n   }\n   id-hmacWithSHA1 OBJECT IDENTIFIER ::= {digestAlgorithm 7}\n\
    \   id-hmacWithSHA224 OBJECT IDENTIFIER ::= {digestAlgorithm 8}\n   id-hmacWithSHA256\
    \ OBJECT IDENTIFIER ::= {digestAlgorithm 9}\n   id-hmacWithSHA384 OBJECT IDENTIFIER\
    \ ::= {digestAlgorithm 10}\n   id-hmacWithSHA512 OBJECT IDENTIFIER ::= {digestAlgorithm\
    \ 11}\n   id-hmacWithSHA512-224 OBJECT IDENTIFIER ::= {digestAlgorithm 12}\n \
    \  id-hmacWithSHA512-256 OBJECT IDENTIFIER ::= {digestAlgorithm 13}\n   desCBC\
    \ OBJECT IDENTIFIER ::= {oiw secsig(3) algorithms(2) 7}\n   des-EDE3-CBC OBJECT\
    \ IDENTIFIER ::= {encryptionAlgorithm 7}\n   rc2CBC OBJECT IDENTIFIER ::= {encryptionAlgorithm\
    \ 2}\n   RC2-CBC-Parameter ::= SEQUENCE {\n      rc2ParameterVersion INTEGER OPTIONAL,\n\
    \      iv OCTET STRING (SIZE(8))\n   }\n   rc5-CBC-PAD OBJECT IDENTIFIER ::= {encryptionAlgorithm\
    \ 9}\n   RC5-CBC-Parameters ::= SEQUENCE {\n      version INTEGER {v1-0(16)} (v1-0),\n\
    \      rounds INTEGER (8..127),\n      blockSizeInBits INTEGER (64 | 128),\n \
    \     iv OCTET STRING OPTIONAL\n   }\n   aes OBJECT IDENTIFIER ::= { nistAlgorithms\
    \ 1 }\n   aes128-CBC-PAD OBJECT IDENTIFIER ::= { aes 2 }\n   aes192-CBC-PAD OBJECT\
    \ IDENTIFIER ::= { aes 22 }\n   aes256-CBC-PAD OBJECT IDENTIFIER ::= { aes 42\
    \ }\n   END\n"
- title: 'Appendix D.  Revision History of PKCS #5'
  contents:
  - "Appendix D.  Revision History of PKCS #5\n   Versions 1.0 - 1.3\n      Versions\
    \ 1.0 - 1.3 were distributed to participants in RSA Data\n      Security Inc.'s\
    \ Public-Key Cryptography Standards meetings in\n      February and March 1991.\n\
    \   Version 1.4\n      Version 1.4 was part of the June 3, 1991 initial public\
    \ release of\n      PKCS.  Version 1.4 was published as NIST/OSI Implementors'\n\
    \      Workshop document SEC-SIG-91-20.\n   Version 1.5\n      Version 1.5 incorporated\
    \ several editorial changes, including\n      updates to the references and the\
    \ addition of a revision history.\n   Version 2.0\n      Version 2.0 incorporates\
    \ major editorial changes in terms of the\n      document structure, and introduces\
    \ the PBES2 encryption scheme,\n      the PBMAC1 message authentication scheme,\
    \ and independent\n      password-based key derivation functions.  This version\
    \ continues\n      to support the encryption process in version 1.5.\n   Version\
    \ 2.1\n      This document transfers PKCS #5 into the IETF and includes some\n\
    \      minor changes from the authors for this submission.\n      o  Introduces\
    \ AES/CBC as an encryption scheme for PBES2 and HMAC\n         with the hash functions\
    \ SHA-224, SHA-256, SHA-384, SHA-512,\n         SHA-512/224, and SHA-512/256 as\
    \ pseudorandom functions for\n         PBKDF2 and message authentication schemes\
    \ for PBMAC1.\n      o  Changes references for PKCS #5 to RFC 2898 and for PKCS\
    \ #8 to\n         RFCs 5208 and 5898.\n      o  Incorporates corrections of two\
    \ editorial errata reported on\n         PKCS #5 [RFC2898].\n      o  Added security\
    \ considerations for MD2, MD5, and SHA-1.\n"
- title: Appendix E.  About PKCS
  contents:
  - "Appendix E.  About PKCS\n   The Public-Key Cryptography Standards are specifications\
    \ produced by\n   RSA Laboratories in cooperation with secure systems developers\n\
    \   worldwide for the purpose of accelerating the deployment of public-\n   key\
    \ cryptography.  First published in 1991 as a result of meetings\n   with a small\
    \ group of early adopters of public-key technology, the\n   PKCS documents have\
    \ become widely referenced and implemented.\n   Contributions from the PKCS series\
    \ have become part of many formal\n   and de facto standards, including ANSI X9\
    \ documents, PKIX, Secure\n   Electronic Transaction (SET), S/MIME, and SSL.\n\
    \   Further development of most PKCS documents occurs through the IETF.\n   Suggestions\
    \ for improvement are welcome.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is based on a contribution of RSA Laboratories,\
    \ the\n   research center of RSA Security Inc.\n   RC2 and RC5 are trademarks\
    \ of EMC Corporation.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kathleen M. Moriarty (editor)\n   Dell EMC\n   176 South\
    \ Street\n   Hopkinton, MA  01748\n   United States of America\n   Email: Kathleen.Moriarty@Dell.com\n\
    \   Burt Kaliski\n   Verisign\n   12061 Bluemont Way\n   Reston, VA  20190\n \
    \  United States of America\n   Email: bkaliski@verisign.com\n   URI:   http://verisignlabs.com\n\
    \   Andreas Rusch\n   RSA\n   345 Queen Street\n   Brisbane, QLD  4000\n   Australia\n\
    \   Email: andreas.rusch@rsa.com\n"
