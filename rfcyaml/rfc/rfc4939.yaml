- contents:
  - "                Definitions of Managed Objects for iSNS\n                    (Internet
    Storage Name Service)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The iSNS (Internet Storage Name Service) protocol provides storage\n
    \  name service functionality on an IP network that is being used for\n   iSCSI
    (Internet Small Computer System Interface) or iFCP (Internet\n   Fibre Channel
    Protocol) storage.  This document provides a mechanism\n   to monitor multiple
    iSNS Servers, including information about\n   registered objects in an iSNS Server.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. The Internet-Standard Management Framework ......................3\n
    \  2. Introduction ....................................................3\n      2.1.
    Requirement Levels .........................................3\n   3. Technical
    Description ...........................................4\n      3.1. iSNS Registered
    Objects ....................................4\n      3.2. iSNS MIB Structure .........................................5\n
    \     3.3. iSNS Server Info ...........................................5\n           3.3.1.
    Control Node Information ............................6\n           3.3.2. Discovery
    Domain Set (DDS) ..........................6\n           3.3.3. Discovery Domain
    (DD) ...............................6\n           3.3.4. Registered Storage Objects
    ..........................6\n                  3.3.4.1. Registered Entities ........................6\n
    \                 3.3.4.2. Registered Portals .........................6\n                  3.3.4.3.
    Registered Portal Groups ...................7\n                  3.3.4.4. Registered
    iSCSI Nodes .....................7\n                  3.3.4.5. Registered FC Ports
    ........................7\n                  3.3.4.6. Registered FC Nodes ........................7\n
    \     3.4. Multiple Server Instances ..................................7\n      3.5.
    iSNS Notifications .........................................7\n   4. MIB References
    ..................................................7\n   5. MIB Module ......................................................8\n
    \  6. IANA Considerations ............................................75\n   7.
    Security Considerations ........................................76\n   8. Normative
    References ...........................................77\n   9. Informative References
    .........................................78\n   10. Acknowledgements ..............................................78\n"
  title: Table of Contents
- contents:
  - "1.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies a MIB\n
    \  module that is compliant to the SMIv2, which is described in STD 58,\n   RFC
    2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n"
  title: 1.  The Internet-Standard Management Framework
- contents:
  - "2.  Introduction\n   The iSNS protocol, as described in RFC 4171 [RFC4171], can
    be used by\n   IP-based storage devices for dynamic registration and discovery
    of\n   other storage devices in the network.  It has the capability to group\n
    \  devices into storage Discovery Domains, and Discovery Domains into\n   Discovery
    Domain Sets.  The iSNS MIB is designed to allow Simple\n   Network Management
    Protocol (SNMP) to be used to monitor iSNS servers\n   supporting iSCSI [RFC3720]
    and iFCP [RFC4172].\n"
  - contents:
    - "2.1.  Requirement Levels\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 2.1.  Requirement Levels
  title: 2.  Introduction
- contents:
  - '3.  Technical Description

    '
  - contents:
    - "3.1.  iSNS Registered Objects\n   The following entity relationship figure
      indicates the objects that\n   can be registered in the iSNS, and their relationship
      to each other.\n                    +--------------+    +-----------+\n                    |
      \   NETWORK   |1  *|           |\n                    |    ENTITY    |----|
      \ PORTAL   |\n                    |              |    |           |\n                    +--------------+
      \   +-----------+\n                            |1            |1  |*\n                            |
      \            |   |\n                            |             |*  |\n                            |
      \  +----------+  |\n                            |   |  PORTAL  |  |\n                            |
      \  |  GROUP   |  |\n                            |   +----------+  |\n                            |
      \   |*           |\n                            |    |            |\n                            |*
      \  |1           |*\n   +----------+    +-------------+    +----------+    +-----------+\n
      \  |   FC     |1  *|   STORAGE   |*  *| DISCOVERY|*  *| DISCOVERY |\n   |  DEVICE
      \ |----|    NODE     |----|  DOMAIN  |----|  DOMAIN   |\n   |          |    |
      \            |    |          |    |    SET    |\n   +----------+    +-------------+
      \   +----------+    +-----------+\n               * represents 0 to many possible
      relationships\n"
    title: 3.1.  iSNS Registered Objects
  - contents:
    - "3.2.  iSNS MIB Structure\n   The MIB is divided into sections for iSNS server
      information, iSNS\n   server registered objects information, and iSNS notifications.\n
      \  +--------------+    +--------------+\n   | MANAGED iSNS |1  *| CONTROL NODE
      |\n   |    SERVER    |----|    INFO      |\n   |     INFO     |    +--------------+\n
      \  +--------------+\n          |1    |1\n          |     |      +--------------+\n
      \         |     |     *|  DDS AND DD  |\n          |     +------|     INFO     |\n
      \         |            |              |\n          |            +--------------+\n
      \         |\n          |            +-------------+\n          |           *|
      REGISTERED  |\n          +------------|  ENTITIES   |\n                       |
      \   INFO     |\n                       +-------------+\n   +-----------------+\n
      \  |     iSNS        |\n   |  NOTIFICATION   |\n   |     INFO        |\n   +-----------------+\n
      \  The sections that are required to implement are for iSNS Server\n   management
      and notification.\n"
    title: 3.2.  iSNS MIB Structure
  - contents:
    - "3.3.  iSNS Server Info\n   The isnsServerInfo section provides the ability
      to monitor multiple\n   iSNS Server instances.  The isnsServerTable table provides\n
      \  information on each server instance.  This table is indexed by the\n   variable
      isnsServerIndex.  The table indicates current settings for\n   each iSNS server
      being managed.  The network address, TCP and UDP\n   ports being used by a server
      for iSNSP registrations and queries can\n   be determined from this table.\n
      \  The count of objects registered in each iSNS server instance is shown\n   in
      the table isnsNumObjectsTable.  The provides a summary of the\n   number Discovery
      Domain Sets, Discovery Domains, Entities, Portals,\n   Portal Groups, iSCSI
      Nodes, and iFCP FC Nodes and Ports.\n"
    - contents:
      - "3.3.1.  Control Node Information\n   As defined in the iSNS specification,
        Control Nodes are objects that\n   have been registered with the server and
        are allowed to manage the\n   iSNS server.  These Control Nodes are identified
        by their iSCSI Node\n   Name or iFCP FC Port Name.  The isnsControlNodeInfo
        section of the\n   MIB provides the ability to view the currently registered
        set of\n   iSCSI and iFCP control nodes.\n"
      title: 3.3.1.  Control Node Information
    - contents:
      - "3.3.2.  Discovery Domain Set (DDS)\n   The isnsDdsInfo section provides information
        on each registered DDS,\n   the Discovery Domain members of each DDS, for
        each iSNS Server\n   instance being managed.  DDSs provide a method to group
        multiple\n   Discovery Domains for easier control.  As described in the iSNS\n
        \  Specification [RFC4171], a DDS can be enabled or disabled, which in\n   turn
        enables or disables the member Discovery Domains.  Discovery\n   Domains that
        are contained in an enabled DDS are then enforced by an\n   iSNS Server.\n"
      title: 3.3.2.  Discovery Domain Set (DDS)
    - contents:
      - "3.3.3.  Discovery Domain (DD)\n   The isnsDdInfo section provides information
        on each registered DD,\n   and the DD members, for each iSNS Server instance
        being managed.  DDs\n   are collections of storage nodes and portals that
        are allowed to\n   discover one another.  DD members can be iSCSI nodes, Entity
        Portals,\n   or iFCP nodes.\n"
      title: 3.3.3.  Discovery Domain (DD)
    - contents:
      - "3.3.4.  Registered Storage Objects\n   The isnsReg section provides information
        on the registered storage\n   objects for a specific iSNS Server instance.
        \ This section is divided\n   into subsections for Entities, Portals, and
        iSCSI Nodes, as well as\n   iFCP Port and Node information.\n"
      - contents:
        - "3.3.4.1.  Registered Entities\n   The isnsRegEntityInfo section provides
          information on the registered\n   entities.  Entities are collections of
          storage nodes and portals.\n"
        title: 3.3.4.1.  Registered Entities
      - contents:
        - "3.3.4.2.  Registered Portals\n   The isnsRegPortalInfo section provides
          information on the registered\n   portals for a specific iSNS Server instance.
          \ Portals are logical\n   IP-Address, TCP/UDP Port pairs that provide access
          to storage nodes\n   contained in the associated Entity.\n"
        title: 3.3.4.2.  Registered Portals
      - contents:
        - "3.3.4.3.  Registered Portal Groups\n   The isnsRegPortalGroupInfo section
          provides information on the\n   registered portal groups for a specific
          iSNS Server instance.  As\n   described in iSCSI [RFC3720], Portal Groups
          provide a mapping between\n   Portals and iSCSI Storage Nodes contained
          in an Entity.\n"
        title: 3.3.4.3.  Registered Portal Groups
      - contents:
        - "3.3.4.4.  Registered iSCSI Nodes\n   The isnsRegIscsiNodeInfo section provides
          information on the\n   registered iSCSI Nodes for a specific iSNS Server
          instance.  The\n   iSCSI nodes are individual storage targets or initiators.\n"
        title: 3.3.4.4.  Registered iSCSI Nodes
      - contents:
        - "3.3.4.5.  Registered FC Ports\n   The isnsRegFcPortInfo section provides
          information on the registered\n   FC Ports for a specific iSNS Server instance.
          \ The FC Ports are ports\n   associated with an iFCP gateway.\n"
        title: 3.3.4.5.  Registered FC Ports
      - contents:
        - "3.3.4.6.  Registered FC Nodes\n   The isnsRegFcNodeInfo section provides
          information on the registered\n   FC Nodes for a specific iSNS Server instance.
          \ The FC nodes are\n   individual storage devices associated with an iFCP
          gateway.\n"
        title: 3.3.4.6.  Registered FC Nodes
      title: 3.3.4.  Registered Storage Objects
    title: 3.3.  iSNS Server Info
  - contents:
    - "3.4.  Multiple Server Instances\n   The management of multiple instances of
      iSNS servers by the agent is\n   supported.  As described in Section 3.3, each
      managed iSNS server\n   instance has an entry in the table isnsServerTable.\n"
    title: 3.4.  Multiple Server Instances
  - contents:
    - "3.5.  iSNS Notifications\n   The isnsNotification section provides SNMP notifications
      for iSNS\n   Server state changes.\n"
    title: 3.5.  iSNS Notifications
  title: 3.  Technical Description
- contents:
  - "4.  MIB References\n   The following MIB module has IMPORTS from [RFC2578], [RFC2579],\n
    \  [RFC2580], [RFC3411], [RFC4001], [RFC4044], and [RFC4133].  In\n   REFERENCE
    clauses, it also refers to [RFC3720], [RFC4171], and\n   [RFC4172].\n"
  title: 4.  MIB References
- contents:
  - "5.  MIB Module\n   ISNS-MIB DEFINITIONS ::= BEGIN\n      IMPORTS\n      --  From
    RFC 2578\n          MODULE-IDENTITY,\n          OBJECT-TYPE,\n          NOTIFICATION-TYPE,\n
    \         Integer32,\n          Unsigned32,\n          Gauge32,\n          mib-2\n
    \              FROM SNMPv2-SMI\n      --  From RFC 2579\n          TEXTUAL-CONVENTION,\n
    \         TimeStamp,\n          TruthValue\n               FROM SNMPv2-TC\n      --
    \ From RFC 2580\n          OBJECT-GROUP,\n          MODULE-COMPLIANCE,\n          NOTIFICATION-GROUP\n
    \              FROM SNMPv2-CONF\n      --  From RFC 3411\n          SnmpAdminString\n
    \              FROM SNMP-FRAMEWORK-MIB\n      --  From RFC 4001\n          InetAddressType,\n
    \         InetAddress,\n          InetPortNumber\n               FROM INET-ADDRESS-MIB\n
    \     --  From RFC 4044\n          FcNameIdOrZero,\n          FcAddressIdOrZero\n
    \              FROM FC-MGMT-MIB\n      --  From RFC 4133\n          PhysicalIndex\n
    \              FROM ENTITY-MIB\n            ;\n      isnsMIB  MODULE-IDENTITY\n
    \           LAST-UPDATED \"200707110000Z\"\n            ORGANIZATION \"IETF IPS
    Working Group\"\n            CONTACT-INFO \"\n              Attn: Kevin Gibbons\n
    \                   2Wire, Inc.\n                    1704 Automation Parkway\n
    \                   San Jose, CA 95131\n                    USA\n                    Tel:
    +1 408-895-1387\n                    Fax: +1 408-428-9590\n                    Email:
    kgibbons@yahoo.com\n                    G.D. Ramkumar\n                    SnapTell,
    Inc.\n                    2741 Middlefield Rd, Suite 200\n                    Palo
    Alto, CA 94306\n                    USA\n                    Tel: +1 650-326-7627\n
    \                   Fax: +1 650-326-7620\n                    Email: gramkumar@stanfordalumni.org\n
    \                   Scott Kipp\n                    Brocade\n                    4
    McDATA Pkwy\n                    Broomfield, CO 80021\n                    USA\n
    \                   Tel: +1 720-558-3452\n                    Fax: +1 720-558-8999\n
    \                   Email: skipp@brocade.com\n                          \"\n               DESCRIPTION\n
    \                      \"This module defines management information\n                        specific
    to internet Storage Name Service\n                        (iSNS) management.\n
    \                       Copyright (C) The IETF Trust (2007).\n                        This
    version of this MIB module is part\n                        of RFC 4939; see the
    RFC itself for full\n                        legal notices.\"\n               REVISION
    \   \"200707110000Z\"\n               DESCRIPTION\n                        \"Initial
    version of iSNS Management Module.\n                         This MIB published
    as RFC 4939.\"\n                 ::=  { mib-2 163 }\n         --\n         --
    \ Textual Conventions\n         --\n      IsnsDiscoveryDomainSetId ::= TEXTUAL-CONVENTION\n
    \         DISPLAY-HINT   \"d\"\n          STATUS         current\n          DESCRIPTION\n
    \     \"The unique Discovery Domain Set Identifier associated with a\n       Discovery
    Domain Set (DDS).\"\n          REFERENCE      \"RFC 4171, Section 6.11.1.1\"\n
    \         SYNTAX         Unsigned32 ( 1 .. 4294967295 )\n      IsnsDdsStatusType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"The status of a Discovery Domain Set (DDS) registered in the\n       iSNS.
    \ The initially assigned values are below:\n                    Bit           Status\n
    \                ---------       ---------\n                    31            DDS
    Enabled\n                 All others       RESERVED\n       Setting a bit to 1
    indicates the feature is enabled.\n       Otherwise, it is disabled.  The future
    assignment of any of\n       the reserved values will be documented in a revision
    of\n       RFC 4171.\"\n          REFERENCE      \"RFC 4171, Section 6.11.1.3\"\n
    \         SYNTAX         BITS {\n              reserved0(0), reserved1(1), reserved2(2),\n
    \             reserved3(3), reserved4(4), reserved5(5),\n              reserved6(6),
    reserved7(7), reserved8(8),\n              reserved9(9), reserved10(10), reserved11(11),\n
    \             reserved12(12), reserved13(13), reserved14(14),\n              reserved15(15),
    reserved16(16), reserved17(17),\n              reserved18(18), reserved19(19),
    reserved20(20),\n              reserved21(21), reserved22(22), reserved23(23),\n
    \             reserved24(24), reserved25(25), reserved26(26),\n              reserved27(27),
    reserved28(28), reserved29(29),\n              reserved30(30),\n              ddsEnabled
    (31)\n                              }\n      IsnsDiscoveryDomainId ::= TEXTUAL-CONVENTION\n
    \         DISPLAY-HINT   \"d\"\n          STATUS         current\n          DESCRIPTION\n
    \     \"The unique Discovery Domain Identifier (DD_ID) associated\n       with
    each Discovery Domain (DD).  This is used to\n       uniquely index and reference
    a DD.\"\n          REFERENCE      \"RFC 4171, Section 6\"\n          SYNTAX         Unsigned32
    ( 1 .. 4294967295 )\n      IsnsDdFeatureType ::= TEXTUAL-CONVENTION\n          STATUS
    \        current\n          DESCRIPTION\n      \"This type defines the features
    that each Discovery Domain\n       (DD) has.\n                    Bit           Status\n
    \                ---------       ---------\n                    31            Boot
    List\n                 All others       RESERVED\n       Boot List: this feature
    indicates that the targets\n       in this DD provide boot capabilities for the
    member\n       initiators.\n       Setting a bit to 1 indicates the feature is
    enabled.\n       Otherwise, it is disabled.  The future assignment of any of\n
    \      the reserved values will be documented in a revision of\n       RFC 4171.\"\n
    \         REFERENCE      \"RFC 4171, Section 6.11.2.9\"\n          SYNTAX         BITS
    {\n              reserved0(0), reserved1(1), reserved2(2),\n              reserved3(3),
    reserved4(4), reserved5(5),\n              reserved6(6), reserved7(7), reserved8(8),\n
    \             reserved9(9), reserved10(10), reserved11(11),\n              reserved12(12),
    reserved13(13), reserved14(14),\n              reserved15(15), reserved16(16),
    reserved17(17),\n              reserved18(18), reserved19(19), reserved20(20),\n
    \             reserved21(21), reserved22(22), reserved23(23),\n              reserved24(24),
    reserved25(25), reserved26(26),\n              reserved27(27), reserved28(28),
    reserved29(29),\n              reserved30(30),\n              bootlist(31)\n                              }\n
    \     IsnsDdDdsModificationType ::= TEXTUAL-CONVENTION\n          STATUS         current\n
    \         DESCRIPTION\n      \"The methods that can be used to modify the Discovery\n
    \      Domain and Discovery Domain Sets in an iSNS Server\n       instance.\n
    \             Bit             Flag Description\n           ---------   ------------------------------------\n
    \              0       Control Nodes are allowed\n               1       Target
    iSCSI Nodes are allowed\n               2       Initiator iSCSI Nodes are allowed\n
    \              3       Target iFCP Ports are allowed\n               4       Initiator
    iFCP Ports are allowed\n       Setting a bit to 1 indicates the feature is\n       enabled.
    \ Otherwise, it is disabled.\"\n          REFERENCE      \"RFC 4171, Section 2.4\"\n
    \         SYNTAX         BITS {\n                            controlNode(0),\n
    \                           targetIscsiNode(1),\n                            initiatorIscsiNode(2),\n
    \                           targetIfcpNode(3),\n                            initiatorIfcpNode(4)\n
    \                             }\n      IsnsEntityIndexIdOrZero ::= TEXTUAL-CONVENTION\n
    \         DISPLAY-HINT   \"d\"\n          STATUS         current\n          DESCRIPTION\n
    \     \"The identifier for the unique integer Entity Index\n       associated
    with an iSNS registered Entity object, and the\n       value zero.  The value
    zero is object-specific and MUST\n       therefore be defined as part of the description
    of any\n       object that uses this syntax.  Examples of the usage of\n       zero
    might include situations where the Entity is unknown,\n       or not yet registered
    in the iSNS server.  If a value of\n       zero is not valid for an object, then
    that MUST be\n       indicated.\"\n          REFERENCE      \"RFC 4171, Section
    6\"\n          SYNTAX         Unsigned32 ( 0 .. 4294967295 )\n      IsnsPortalGroupIndexId
    ::= TEXTUAL-CONVENTION\n          DISPLAY-HINT   \"d\"\n          STATUS         current\n
    \         DESCRIPTION\n      \"The identifier for the unique integer Portal Group
    Index\n       associated with an iSNS registered Portal Group object.\"\n          REFERENCE
    \     \"RFC 4171, Section 6\"\n          SYNTAX         Unsigned32 ( 1 .. 4294967295
    )\n      IsnsPortalIndexId ::= TEXTUAL-CONVENTION\n          DISPLAY-HINT   \"d\"\n
    \         STATUS         current\n          DESCRIPTION\n      \"The identifier
    for the unique integer Portal Index\n       associated with an iSNS registered
    Portal object.  The\n       index is created by the iSNS Server for mapping between\n
    \      registered objects.  The Portal Index used for a specific\n       portal
    IP-address and port number pair is only persistent\n       across reboots for
    portals that have been explicitly added\n       to a Discovery Domain (DD).  If
    a portal is not explicitly\n       registered in any DD, then the index used for
    a portal can\n       change after a server reinitialization.\"\n          REFERENCE
    \     \"RFC 4171, Section 6\"\n          SYNTAX         Unsigned32 ( 1 .. 4294967295
    )\n      IsnsPortalPortTypeId ::= TEXTUAL-CONVENTION\n          STATUS         current\n
    \         DESCRIPTION\n      \"The UDP or TCP port type being used by a Portal
    for an\n       Entity.\"\n          REFERENCE      \"RFC 4171, Section 6.3.2\"\n
    \         SYNTAX         INTEGER { udp(1), tcp(2) }\n      IsnsPortalGroupTagIdOrNull
    ::= TEXTUAL-CONVENTION\n          DISPLAY-HINT   \"d\"\n          STATUS         current\n
    \         DESCRIPTION\n      \"The Portal Group Tag (PGT) represents an association\n
    \      between a Portal and iSCSI Node using the value range\n       0 to 65535.
    \ A PGT with no association is a NULL\n       value.  The value of -1 indicates
    a NULL value.\"\n          REFERENCE      \"RFC 4171, Section 6.5.4, and RFC 3720\"\n
    \         SYNTAX         Integer32 ( -1 .. 65535 )\n      IsnsPortalSecurityType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"Indicates security attribute settings for a Portal that is\n       registered
    in the iSNS server.  The bitmapVALID field must\n       be set in order for the
    contents to be considered valid\n       information.  The definitions of the bit
    fields are based\n       on RFC 4171.  The initial representation of each bit
    setting\n       (0 or 1) is indicated below.\n             Bit             Flag
    Description\n           ---------   ------------------------------------\n              25
    \      1 = Tunnel Mode Preferred; 0 = No Preference\n              26       1
    = Transport Mode Preferred; 0 = No\n                       Preference\n              27
    \      1 = PFS Enabled; 0 = PFS Disabled\n              28       1 = Aggressive
    Mode Enabled; 0 = Disabled\n              29       1 = Main Mode Enabled; 0 =
    MM Disabled\n              30       1 = IKE/IPsec Enabled; 0 = IKE/IPsec\n                       Disabled\n
    \             31       1 = Bitmap VALID; 0 = INVALID\n           All others  RESERVED\n
    \      The future assignment of any of the reserved values will be\n       documented
    in a revision of RFC 4171.\"\n          REFERENCE      \"RFC 4171, Section 6.3.9\"\n
    \         SYNTAX        BITS {\n              reserved0(0), reserved1(1), reserved2(2),\n
    \             reserved3(3), reserved4(4), reserved5(5),\n              reserved6(6),
    reserved7(7), reserved8(8),\n              reserved9(9), reserved10(10), reserved11(11),\n
    \             reserved12(12), reserved13(13), reserved14(14),\n              reserved15(15),
    reserved16(16), reserved17(17),\n              reserved18(18), reserved19(19),
    reserved20(20),\n              reserved21(21), reserved22(22), reserved23(23),\n
    \             reserved24(24),\n              tunnelModePreferred(25),\n              transportModePreferred(26),\n
    \             pfsEnabled(27),\n              agressiveModeEnabled(28),\n              mainModeEnabled(29),\n
    \             ikeIPsecEnabled(30),\n              bitmapVALID(31)\n                             }\n
    \     IsnsNodeIndexId ::= TEXTUAL-CONVENTION\n          DISPLAY-HINT   \"d\"\n
    \         STATUS         current\n          DESCRIPTION\n      \"The identifier
    for the unique integer Node Index associated\n       with a storage node.  This
    index provides a 1-to-1 mapping\n       to an iSCSI node name.  The iSCSI node
    name maximum length\n       is too long to be used for an index directly.  The
    iSCSI\n       node index used for a specific iSCSI node name is identical\n       in
    all DDs, and is persistent across server\n       reinitializations when the iSCSI
    node is a member of a\n       Discovery Domain (DD) or is registered as a Control
    Node.\n       Furthermore, index values for recently deregistered objects\n       SHOULD
    NOT be reused in the short term.\"\n          REFERENCE      \"RFC 4171, Section
    6.4.5\"\n          SYNTAX         Unsigned32 ( 1 .. 4294967295 )\n      IsnsIscsiNodeType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"The iSCSI Node Type defines the functions of the registered\n       object.
    \ The definitions of each setting are defined in\n       RFC 4171.\n                    Bit
    \         Node Type\n                 ---------       ---------\n                    29
    \           Control\n                    30            Initiator\n                    31
    \           Target\n                 All others       RESERVED\n       Setting
    a bit to 1 indicates the node has the corresponding\n       characteristics.  The
    future assignment of any of the\n       reserved values will be documented in
    a revision of\n       RFC 4171.\"\n          REFERENCE      \"RFC 4171, Section
    6.4.2\"\n          SYNTAX         BITS {\n              reserved0(0), reserved1(1),
    reserved2(2),\n              reserved3(3), reserved4(4), reserved5(5),\n              reserved6(6),
    reserved7(7), reserved8(8),\n              reserved9(9), reserved10(10), reserved11(11),\n
    \             reserved12(12), reserved13(13), reserved14(14),\n              reserved15(15),
    reserved16(16), reserved17(17),\n              reserved18(18), reserved19(19),
    reserved20(20),\n              reserved21(21), reserved22(22), reserved23(23),\n
    \             reserved24(24), reserved25(25), reserved26(26),\n              reserved27(27),
    reserved28(28),\n              control(29),\n              initiator(30),\n              target(31)\n
    \                             }\n      IsnsFcClassOfServiceType ::= TEXTUAL-CONVENTION\n
    \         STATUS         current\n          DESCRIPTION\n      \"This defines
    the Fibre Channel Class of Service types\n       that are supported by the registered
    port.  The\n       definitions are as defined in RFC 4171.\n             Bit              FC
    COS Type\n           ---------          ----------------\n              28             Fibre
    Channel Class 3 Supported\n              29             Fibre Channel Class 2
    Supported\n           All others        RESERVED\n       Setting a bit to 1 indicates
    the class of service is\n       supported.  The future assignment of any of the\n
    \      reserved values will be documented in a revision of\n       RFC 4171.\"\n
    \         REFERENCE      \"RFC 4171, Section 6.6.8\"\n          SYNTAX         BITS
    {\n              reserved0(0), reserved1(1), reserved2(2),\n              reserved3(3),
    reserved4(4), reserved5(5),\n              reserved6(6), reserved7(7), reserved8(8),\n
    \             reserved9(9), reserved10(10), reserved11(11),\n              reserved12(12),
    reserved13(13), reserved14(14),\n              reserved15(15), reserved16(16),
    reserved17(17),\n              reserved18(18), reserved19(19), reserved20(20),\n
    \             reserved21(21), reserved22(22), reserved23(23),\n              reserved24(24),
    reserved25(25), reserved26(26),\n              reserved27(27),\n              class3(28),\n
    \             class2(29)\n                              }\n      IsnsIscsiScnType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"The iSCSI Node State Change Notification (SCN) values\n       for a node
    as defined in RFC 4171.\n                Bit                Description\n             ------------
    \      ----------------\n              24                Initiator and self information
    only\n              25                Target and self information only\n              26
    \               Management registration/SCN\n              27                Object
    removed\n              28                Object added\n              29                Object
    updated\n              30                DD or DDS member removed (Mgmt\n                                Reg/SCN
    only)\n              31 (Lsb)          DD or DDS member added (Mgmt\n                                Reg/SCN
    only)\n              All others        Reserved\n       Setting a bit to 1 indicates
    that type of SCN is enabled.\n       The future assignment of any of the reserved
    values will be\n       documented in a revision of RFC 4171.\"\n          REFERENCE
    \     \"RFC 4171, Section 6.4.4\"\n          SYNTAX         BITS {\n              reserved0(0),
    reserved1(1), reserved2(2),\n              reserved3(3), reserved4(4), reserved5(5),\n
    \             reserved6(6), reserved7(7), reserved8(8),\n              reserved9(9),
    reserved10(10), reserved11(11),\n              reserved12(12), reserved13(13),
    reserved14(14),\n              reserved15(15), reserved16(16), reserved17(17),\n
    \             reserved18(18), reserved19(19), reserved20(20),\n              reserved21(21),
    reserved22(22), reserved23(23),\n              initiatorAndSelfOnly(24),\n              targetAndSelfOnly(25),\n
    \             managementRegistrationScn(26),\n              objectRemoved(27),\n
    \             objectAdded(28),\n              objectUpdated(29),\n              ddOrDdsMemberRemoved(30),\n
    \             ddOrDdsMemberAdded(31)\n                              }\n      IsnsIfcpScnType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"The iFCP State Change Notification (SCN) values for an iFCP\n       object
    as defined in RFC 4171.\n                Bit                Description\n             ------------
    \      ----------------\n              24                Initiator and self information
    only\n              25                Target and self information only\n              26
    \               Management registration/SCN\n              27                Object
    removed\n              28                Object added\n              29                Object
    updated\n              30                DD or DDS member removed (Mgmt\n                                Reg/SCN
    only)\n              31 (Lsb)          DD or DDS member added (Mgmt\n                                Reg/SCN
    only)\n              All others        Reserved\n       Setting a bit to 1 indicates
    that type of SCN is enabled.\n       The future assignment of any of the reserved
    values will be\n       documented in a revision of RFC 4171.\"\n          REFERENCE
    \     \"RFC 4171, Section 6.6.12\"\n          SYNTAX         BITS {\n              reserved0(0),
    reserved1(1), reserved2(2),\n              reserved3(3), reserved4(4), reserved5(5),\n
    \             reserved6(6), reserved7(7), reserved8(8),\n              reserved9(9),
    reserved10(10), reserved11(11),\n              reserved12(12), reserved13(13),
    reserved14(14),\n              reserved15(15), reserved16(16), reserved17(17),\n
    \             reserved18(18), reserved19(19), reserved20(20),\n              reserved21(21),
    reserved22(22), reserved23(23),\n              initiatorAndSelfOnly(24),\n              targetAndSelfOnly(25),\n
    \             managementRegistrationScn(26),\n              objectRemoved(27),\n
    \             objectAdded(28),\n              objectUpdated(29),\n              ddOrDdsMemberRemoved(30),\n
    \             ddOrDdsMemberAdded(31)\n                              }\n      IsnsFcPortRoleType
    ::= TEXTUAL-CONVENTION\n          STATUS         current\n          DESCRIPTION\n
    \     \"The FC Port Role defines the functions of the registered\n       object.
    \ The definitions of each setting are defined in\n       RFC 4171.\n                    Bit
    \         Port Role\n                 ---------       ---------\n                    29
    \           Control\n                    30            FCP Initiator\n                    31
    \           FCP Target\n                All others        RESERVED\n       Setting
    a bit to 1 indicates the port has the corresponding\n       characteristics.  The
    future assignment of any of the\n       reserved values will be documented in
    a revision of\n       RFC 4171.\"\n          REFERENCE      \"RFC 4171, Section
    6.6.13\"\n          SYNTAX         BITS {\n              reserved0(0), reserved1(1),
    reserved2(2),\n              reserved3(3), reserved4(4), reserved5(5),\n              reserved6(6),
    reserved7(7), reserved8(8),\n              reserved9(9), reserved10(10), reserved11(11),\n
    \             reserved12(12), reserved13(13), reserved14(14),\n              reserved15(15),
    reserved16(16), reserved17(17),\n              reserved18(18), reserved19(19),
    reserved20(20),\n              reserved21(21), reserved22(22), reserved23(23),\n
    \             reserved24(24), reserved25(25), reserved26(26),\n              reserved27(27),
    reserved28(28),\n              control(29),\n              initiator(30),\n              target(31)\n
    \                             }\n      IsnsSrvrDiscoveryMethodsType ::= TEXTUAL-CONVENTION\n
    \         STATUS         current\n          DESCRIPTION\n      \"The types of
    iSNS Server discovery methods that are enabled\n       on an iSNS Server.  The
    options are DHCP, Service Location\n       Protocol (SLP), multicast group iSNS
    heartbeat, broadcast\n       group iSNS heartbeat, configured server list, and
    other.\n       The iSNS Server may support additional discovery methods\n       not
    indicated.\"\n          REFERENCE      \"RFC 4171, Section 2.5\"\n          SYNTAX
    \        BITS {\n                            dhcp(0),\n                            slp(1),\n
    \                           multicastGroupHb(2),\n                            broadcastHb(3),\n
    \                           cfgdServerList(4),\n                            other(5)\n
    \                                 }\n      --\n      -- Internet Storage Name
    Service Management\n      --\n      isnsNotifications           OBJECT IDENTIFIER
    ::=\n                                      { isnsMIB 0 }\n      isnsObjects                 OBJECT
    IDENTIFIER ::=\n                                      { isnsMIB 1 }\n      isnsConformance
    \            OBJECT IDENTIFIER ::=\n                                      { isnsMIB
    2 }\n      --\n      -- iSNS Server instance managed objects --------------------\n
    \     --\n      isnsServerInfo OBJECT IDENTIFIER ::= { isnsObjects 1 }\n      isnsServerTable
    \            OBJECT-TYPE\n          SYNTAX                  SEQUENCE OF IsnsServerEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This table provides a list of the iSNS Server instances\n
    \      that are managed through the same SNMP context.\"\n          ::= { isnsServerInfo
    1 }\n      isnsServerEntry             OBJECT-TYPE\n          SYNTAX                  IsnsServerEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This is a row in the iSNS Server instance table.
    \ The number\n       of rows is dependent on the number of iSNS Server instances\n
    \      that are being managed through the same SNMP context.\"\n          INDEX
    \  { isnsServerIndex }\n          ::= { isnsServerTable 1 }\n      IsnsServerEntry
    ::=\n          SEQUENCE {\n             isnsServerIndex           Unsigned32,\n
    \            isnsServerName            SnmpAdminString,\n             isnsServerIsnsVersion
    \    Unsigned32,\n             isnsServerVendorInfo      SnmpAdminString,\n             isnsServerPhysicalIndex
    \  PhysicalIndex,\n             isnsServerTcpPort         InetPortNumber,\n             isnsServerUdpPort
    \        InetPortNumber,\n             isnsServerDiscontinuityTime\n                                       TimeStamp,\n
    \            isnsServerRole            INTEGER,\n             isnsServerDiscoveryMethodsEnabled\n
    \                                      IsnsSrvrDiscoveryMethodsType,\n             isnsServerDiscoveryMcGroupType\n
    \                                      InetAddressType,\n             isnsServerDiscoveryMcGroupAddress\n
    \                                      InetAddress,\n             isnsServerEsiNonResponseThreshold\n
    \                                      Unsigned32,\n             isnsServerEnableControlNodeMgtScn\n
    \                                      TruthValue,\n             isnsServerDefaultDdDdsStatus\n
    \                                      INTEGER,\n             isnsServerUpdateDdDdsSupported\n
    \                                      IsnsDdDdsModificationType,\n             isnsServerUpdateDdDdsEnabled\n
    \                                      IsnsDdDdsModificationType\n                   }\n
    \     isnsServerIndex             OBJECT-TYPE\n          SYNTAX                  Unsigned32
    ( 1 .. 4294967295 )\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"This object uniquely
    identifies the iSNS Server being\n       managed by the SNMP context and is the
    key for this table.\n       This is an instance index for each iSNS Server being\n
    \      managed.  The value of this object is used elsewhere in\n       the MIB
    to reference specific iSNS Servers.\"\n          ::= { isnsServerEntry 1 }\n      isnsServerName
    \             OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A non-unique name that can be assigned to the iSNS
    Server\n       instance.  If not configured, then the string SHALL be\n       zero-length.\"\n
    \         ::= { isnsServerEntry 2 }\n      isnsServerIsnsVersion       OBJECT-TYPE\n
    \         SYNTAX                  Unsigned32 ( 0 .. 65535 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The iSNS version value as contained in messages received\n       from
    the current primary server.  The header of each iSNSP\n       message contains
    the iSNS version of the sender.  If\n       unknown, the reported value is 0.\"\n
    \         REFERENCE               \"RFC 4171\"\n          DEFVAL                  {
    1 }\n          ::= { isnsServerEntry 3 }\n      isnsServerVendorInfo        OBJECT-TYPE\n
    \         SYNTAX                  SnmpAdminString\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"If this
    server instance is utilizing the product of a\n       particular 'vendor', then
    this managed object contains\n       that vendor's name and version.  Otherwise,
    the\n       string SHALL be zero-length.  The format of the string\n       is
    as follows: Vendor Name, Vendor Version, Vendor\n       Defined Information.\n
    \            Field           Description\n           ---------       ----------------\n
    \         Vendor Name      The name of the vendor (if one exists)\n          Vendor
    Version   The version of the vendor product\n          Vendor Defined   This follows
    the second comma in the\n                           string, if one exists, and
    is vendor\n                           defined\n      \"\n          ::= { isnsServerEntry
    4 }\n      isnsServerPhysicalIndex     OBJECT-TYPE\n          SYNTAX                  PhysicalIndex\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"An index identifying the network interface for
    this iSNS\n       Server within a network entity.  This index maps to the\n       entPhysicalIndex
    of entPhysicalTable table in RFC 4133.  The\n       entPhysicalClass value for
    the table row must be 'port', as\n       the interface must be able to send and
    receive data.\"\n          REFERENCE           \"RFC 4133, RFC 4171, Section 2.5
    - 2.8\"\n          ::= { isnsServerEntry 5 }\n      isnsServerTcpPort           OBJECT-TYPE\n
    \         SYNTAX                  InetPortNumber\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Indicates
    the TCP port this iSNS instance is accepting\n       iSNSP messages on, generally
    the iSNS well-known port.\n       The well-known TCP port for iSNSP is 3205.  If
    TCP is\n       not supported by this server instance, then the value\n       is
    0.\"\n          ::= { isnsServerEntry 6 }\n      isnsServerUdpPort           OBJECT-TYPE\n
    \         SYNTAX                  InetPortNumber\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Indicates
    the UDP port this iSNS instance is accepting\n       iSNSP messages on; generally,
    the iSNS well-known port.\n       The well-known UDP port for iSNSP is 3205.  If
    UDP is\n       not supported by this server instance, then the value\n       is
    0.\"\n          ::= { isnsServerEntry 7 }\n      isnsServerDiscontinuityTime OBJECT-TYPE\n
    \          SYNTAX                 TimeStamp\n           MAX-ACCESS             read-only\n
    \          STATUS                 current\n           DESCRIPTION\n      \"The
    value of sysUpTime on the most recent occasion that\n       this iSNS server became
    active or suffered a\n       discontinuity.\"\n          ::= { isnsServerEntry
    8 }\n      isnsServerRole              OBJECT-TYPE\n           SYNTAX                 INTEGER
    { notSet(1),\n                                            server(2),\n                                            backupServer(3)
    }\n           MAX-ACCESS             read-only\n           STATUS                 current\n
    \          DESCRIPTION\n      \"The current operational mode of this iSNS Server
    instance.\n             Value             Description\n           ---------         ----------------\n
    \           notSet           The iSNS Server role is not\n                             configured.\n
    \           server           The iSNS Server instance is\n                             an
    operational iSNS Server.\n            backupServer     The iSNS Server instance
    is\n                             currently acting as a backup.\"\n          REFERENCE
    \              \"RFC 4171, Section 2.7 - 2.8\"\n          ::= { isnsServerEntry
    9 }\n      isnsServerDiscoveryMethodsEnabled  OBJECT-TYPE\n          SYNTAX                  IsnsSrvrDiscoveryMethodsType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Indicates the discovery methods currently enabled
    for\n       this iSNS Server instance.  This allows a client to\n       determine
    what discovery methods can be used for\n       this iSNS Server.  Additional methods
    of discovery may\n       also be supported.\"\n          ::= { isnsServerEntry
    10 }\n      isnsServerDiscoveryMcGroupType   OBJECT-TYPE\n          SYNTAX                  InetAddressType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The type of Internet address in\n       isnsServerDiscoveryMcGroupAddress.
    \ If the address is\n       specified, then it must be a valid multicast address
    and the\n       value of this object must be ipv4(1), ipv6(2), ipv4z(3), or\n
    \      ipv6z(4); otherwise, the value of this object is\n       unknown(0), and
    the value of\n       isnsServerDiscoveryMcGroupAddress is the zero-length string.\"\n
    \         ::= { isnsServerEntry 11 }\n      isnsServerDiscoveryMcGroupAddress
    \ OBJECT-TYPE\n          SYNTAX                  InetAddress\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The multicast group that iSNS Heartbeat messages are\n       sent to if
    multicast-based discovery has been enabled\n       for this server instance.  If
    not configured, then the\n       string SHALL be zero-length.  The format of this\n
    \      object is specified by isnsServerDiscoveryMcGroupType.\"\n          ::=
    { isnsServerEntry 12 }\n      isnsServerEsiNonResponseThreshold OBJECT-TYPE\n
    \         SYNTAX                  Unsigned32 ( 0 .. 65535 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Entity Status Inquiry (ESI) Non-Response Threshold -\n       the number
    of ESI messages that will be sent without\n       receiving a response before
    an entity is deregistered\n       from the iSNS database.  A value of 0 indicates\n
    \      Entities will never be deregistered due to non-receipt\n       of ESI messages.\"\n
    \         REFERENCE \"RFC 4171, Section 2.4\"\n          DEFVAL                  {
    3 }\n          ::= { isnsServerEntry 13 }\n      isnsServerEnableControlNodeMgtScn
    \ OBJECT-TYPE\n          SYNTAX                  TruthValue\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Indicates if the iSNS Server administrative option to send\n       Management
    SCNs to Control Nodes is enabled.  Management\n       SCNs are used by Control
    Nodes to monitor and control an\n       iSNS Server.  If enabled, Control Nodes
    can register to\n       receive Management SCNs.\"\n          REFERENCE \"RFC
    4171, Section 2.2.3, 2.4\"\n          DEFVAL                  { true }\n          ::=
    { isnsServerEntry 14 }\n      isnsServerDefaultDdDdsStatus OBJECT-TYPE\n          SYNTAX
    \                 INTEGER { inNoDomain(1),\n                                            inDefaultDdAndDds(2)
    }\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This indicates the Discovery Domain (DD) and Discovery\n
    \      Domain Set (DDS) membership status for a new device\n       when registered
    in the iSNS Server instance.  Either the\n       new device will not be in a DD/DDS,
    or will be placed\n       into a default DD and default DDS.  The default setting\n
    \      is inNoDomain.\"\n          REFERENCE \"RFC 4171, Section 2.4\"\n          DEFVAL
    \                 { inNoDomain }\n          ::= { isnsServerEntry 15 }\n      isnsServerUpdateDdDdsSupported
    OBJECT-TYPE\n          SYNTAX                  IsnsDdDdsModificationType\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The methods that this iSNS Server instance supports\n       to modify
    Discovery Domains and Discovery Domain Sets.\"\n          REFERENCE  \"RFC 4171,
    Section 2.4\"\n          ::= { isnsServerEntry 16 }\n      isnsServerUpdateDdDdsEnabled
    OBJECT-TYPE\n          SYNTAX                  IsnsDdDdsModificationType\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"This indicates the methods this server instance currently\n       allows
    for modifying Discovery Domains and Discovery\n       Domain Sets.\"\n          REFERENCE
    \ \"RFC 4171, Sec 2.2.2 and 2.4\"\n          ::= { isnsServerEntry 17 }\n      --\n
    \     -- Count of objects currently registered in a server instance\n      --\n
    \     isnsNumObjectsTable         OBJECT-TYPE\n          SYNTAX                  SEQUENCE
    OF\n                                      IsnsNumObjectsEntry\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Table providing the number of registered objects of each\n       type
    in the iSNS Server instance.  The number of entries is\n       dependent upon
    the number of iSNS Server instances being\n       managed.\"\n          ::= {
    isnsServerInfo 2 }\n      isnsNumObjectsEntry         OBJECT-TYPE\n          SYNTAX
    \                 IsnsNumObjectsEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Entry
    of an iSNS Server instance.\"\n          AUGMENTS { isnsServerEntry }\n           ::=
    { isnsNumObjectsTable 1 }\n      IsnsNumObjectsEntry ::= SEQUENCE  {\n           isnsNumDds
    \            Gauge32,\n           isnsNumDd              Gauge32,\n           isnsNumEntities
    \       Gauge32,\n           isnsNumPortals         Gauge32,\n           isnsNumPortalGroups
    \   Gauge32,\n           isnsNumIscsiNodes      Gauge32,\n           isnsNumFcPorts
    \        Gauge32,\n           isnsNumFcNodes         Gauge32\n                                         }\n
    \     isnsNumDds                  OBJECT-TYPE\n          SYNTAX                  Gauge32
    ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The current total number
    of Discovery Domain Sets\n       in this iSNS instance.  This is the number of
    rows\n       in the isnsDdsTable.\"\n          ::= { isnsNumObjectsEntry 1 }\n
    \     isnsNumDd                   OBJECT-TYPE\n          SYNTAX                  Gauge32
    ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The current total number
    of Discovery Domains\n       in this iSNS instance.  This is the number of rows
    in the\n       isnsDdTable.\"\n          ::= { isnsNumObjectsEntry 2 }\n      isnsNumEntities
    \            OBJECT-TYPE\n          SYNTAX                  Gauge32 ( 0 .. 4294967295
    )\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The current number of Entities registered in this\n
    \      iSNS Server instance.  This is the number of rows in\n       the isnsRegEntityTable
    for this instance.\"\n          ::= { isnsNumObjectsEntry 3 }\n      isnsNumPortals
    \             OBJECT-TYPE\n          SYNTAX                  Gauge32 ( 0 .. 4294967295
    )\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The current total number of Portals registered
    in iSNS.\n       This is the number of rows in isnsRegPortalTable.\"\n          ::=
    { isnsNumObjectsEntry 4 }\n      isnsNumPortalGroups         OBJECT-TYPE\n          SYNTAX
    \                 Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    current total number of Portal Groups registered in\n       iSNS.  This is the
    number of rows in isnsRegPgTable.\"\n          ::= { isnsNumObjectsEntry 5 }\n
    \     isnsNumIscsiNodes           OBJECT-TYPE\n          SYNTAX                  Gauge32
    ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The current total number
    of iSCSI node entries registered\n       in the iSNS.  This is the number rows
    in\n       isnsRegIscsiNodeTable.\"\n          ::= { isnsNumObjectsEntry 6 }\n
    \     isnsNumFcPorts              OBJECT-TYPE\n          SYNTAX                  Gauge32
    ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The current total number
    of FC Port entries registered\n       in the iSNS.  This is the number of rows
    in\n       isnsRegFcPortTable.\"\n          ::= { isnsNumObjectsEntry 7 }\n      isnsNumFcNodes
    \             OBJECT-TYPE\n          SYNTAX                  Gauge32 ( 0 .. 4294967295
    )\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The current total number of FC node entries registered\n
    \      in the iSNS.  This is the number of rows in\n       isnsRegFcNodeTable.\"\n
    \         ::= { isnsNumObjectsEntry 8 }\n      --\n      -- Control node information\n
    \     --\n      isnsControlNodeInfo     OBJECT IDENTIFIER ::=\n                                           {
    isnsServerInfo 3 }\n      --\n      -- Specific iSCSI Nodes authorized to register
    as Control\n      -- Nodes\n      --\n      isnsControlNodeIscsiTable   OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF\n                                    IsnsControlNodeIscsiEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Specified iSCSI Nodes that can register or are
    registered\n       as control nodes.  The number of rows is dependent on the\n
    \      number of iSCSI Control Nodes.\"\n          ::= { isnsControlNodeInfo 1
    }\n      isnsControlNodeIscsiEntry      OBJECT-TYPE\n          SYNTAX                  IsnsControlNodeIscsiEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This is an iSCSI Control Node entry for a specific
    iSNS\n       server instance.\"\n           INDEX          { isnsServerIndex,\n
    \                           isnsControlNodeIscsiNodeIndex }\n           ::= {
    isnsControlNodeIscsiTable 1 }\n      IsnsControlNodeIscsiEntry ::= SEQUENCE {\n
    \          isnsControlNodeIscsiNodeIndex     IsnsNodeIndexId,\n           isnsControlNodeIscsiNodeName
    \     SnmpAdminString,\n           isnsControlNodeIscsiIsRegistered  TruthValue,\n
    \          isnsControlNodeIscsiRcvMgtSCN     TruthValue\n                                          }\n
    \     isnsControlNodeIscsiNodeIndex  OBJECT-TYPE\n          SYNTAX                  IsnsNodeIndexId\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The index for the iSCSI storage node authorized
    to act\n       as a control node.\"\n           ::= { isnsControlNodeIscsiEntry
    1 }\n      isnsControlNodeIscsiNodeName   OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The iSCSI Name of the initiator or target associated
    with\n       the storage node.  The iSCSI Name cannot be longer than\n       223
    bytes.  The iSNS Server internal maximum size is 224\n       bytes to provide
    NULL termination.  This is the iSCSI Node\n       Name for the storage node authorized
    and/or acting as a\n       control node.\"\n           ::= { isnsControlNodeIscsiEntry
    2 }\n      isnsControlNodeIscsiIsRegistered OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n       \"Indicates whether the control node is currently\n
    \       registered in the iSNS Server instance.\"\n           ::= { isnsControlNodeIscsiEntry
    3 }\n      isnsControlNodeIscsiRcvMgtSCN  OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n       \"Indicates whether the Control Node has registered
    to\n        receive Management SCNs.  Management SCNs are sent to\n        a Control
    Node if they are enabled, as indicated by\n        isnsServerEnableControlNodeMgtScn,
    and the Control\n        Node has registered for them.\"\n          REFERENCE
    \"RFC 4171, Section 2.2.3, 2.4\"\n           ::= { isnsControlNodeIscsiEntry 4
    }\n      --\n      -- Specific FC Ports authorized to register as Control\n      --
    Nodes\n      --\n      isnsControlNodeFcPortTable  OBJECT-TYPE\n          SYNTAX
    \                 SEQUENCE OF\n                                    IsnsControlNodeFcPortEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Specified FC Ports that can register or are registered
    as\n       control nodes.  The number of rows is dependent on the\n       number
    of FC Port Control Nodes.\"\n          ::= { isnsControlNodeInfo 2 }\n      isnsControlNodeFcPortEntry
    \ OBJECT-TYPE\n          SYNTAX                  IsnsControlNodeFcPortEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"FC Port control node entry.\"\n           INDEX
    \         { isnsServerIndex,\n                            isnsControlNodeFcPortWwpn
    }\n           ::= { isnsControlNodeFcPortTable 1 }\n      IsnsControlNodeFcPortEntry
    ::= SEQUENCE  {\n           isnsControlNodeFcPortWwpn          FcNameIdOrZero,\n
    \          isnsControlNodeFcPortIsRegistered  TruthValue,\n           isnsControlNodeFcPortRcvMgtSCN
    \    TruthValue\n                                               }\n      isnsControlNodeFcPortWwpn
    \  OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero (SIZE(8))\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The FC Port World Wide Port Name that can and/or is acting\n       as
    a Control Node for the specified iSNS Server.  A zero-\n       length string is
    not valid for this managed object.\n       This managed object, combined with
    the isnsServerIndex, is\n       the key for this table.\"\n           ::= { isnsControlNodeFcPortEntry
    1 }\n      isnsControlNodeFcPortIsRegistered OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n       \"Indicates whether the control node is currently\n
    \       registered in the iSNS Server instance.\"\n           ::= { isnsControlNodeFcPortEntry
    2 }\n      isnsControlNodeFcPortRcvMgtSCN OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n       \"Indicates whether the Control Node has registered
    to\n        receive Management SCNs.  Management SCNs are sent to\n        a Control
    Node if they are enabled, as indicated by\n        isnsServerEnableControlNodeMgtScn,
    and the Control\n        Node has registered for them.\"\n          REFERENCE
    \"RFC 4171, Section 2.2.3, 2.4\"\n           ::= { isnsControlNodeFcPortEntry
    3 }\n      --\n      -- Discovery Domain Set information\n      --\n      isnsDdsInfo
    \    OBJECT IDENTIFIER ::= { isnsServerInfo 4 }\n      --\n      -- Discovery
    Domain Set Registrations -----------------\n      --\n      isnsDdsTable                OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF IsnsDdsEntry\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"A table containing configuration information for each\n       Discovery
    Domain Set (DDS) registered in the iSNS Server\n       instance.  The number of
    rows in the table is dependent\n       on the number of DDSs registered in the
    specified iSNS\n       server instance.\"\n          ::= { isnsDdsInfo 1 }\n      isnsDdsEntry
    \               OBJECT-TYPE\n          SYNTAX                  IsnsDdsEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one Discovery Domain Set (DDS) registered\n
    \      in the iSNS Server instance.\"\n          INDEX   { isnsServerIndex, isnsDdsId}\n
    \         ::= { isnsDdsTable 1 }\n      IsnsDdsEntry ::=\n          SEQUENCE {\n
    \            isnsDdsId             IsnsDiscoveryDomainSetId,\n             isnsDdsSymbolicName
    \  SnmpAdminString,\n             isnsDdsStatus         IsnsDdsStatusType\n                   }\n
    \     isnsDdsId                   OBJECT-TYPE\n          SYNTAX                  IsnsDiscoveryDomainSetId\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The ID that refers to this Discovery Domain Set
    and\n       index to the table.\"\n          ::= { isnsDdsEntry 1 }\n      isnsDdsSymbolicName
    \        OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Discovery Domain Set Symbolic Name field contains\n       a unique
    variable-length description (up to 255 bytes)\n       that is associated with
    the DDS.  If a Symbolic Name is\n       not provided, then one will be generated
    by the iSNS\n       server.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsDdsEntry 2 }\n      isnsDdsStatus               OBJECT-TYPE\n          SYNTAX
    \                 IsnsDdsStatusType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    status of this Discovery Domain Set (DDS).\"\n          REFERENCE \"RFC 4171,
    Section 6.11.1.3\"\n          ::= { isnsDdsEntry 3 }\n      --\n      -- Discovery
    Domain Set Members --------------------\n      --\n      --\n      -- DDS Membership
    Assignment\n      --\n      isnsDdsMemberTable          OBJECT-TYPE\n          SYNTAX
    \                 SEQUENCE OF IsnsDdsMemberEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"A table
    containing Discovery Domains (DDs) that have\n       been assigned to specific
    Discovery Domain Sets (DDSs).\n       The number of rows in the table is dependent
    on the\n       number of DD to DDS relationships in the iSNS instance.\"\n          ::=
    { isnsDdsInfo 2 }\n      isnsDdsMemberEntry          OBJECT-TYPE\n          SYNTAX
    \                 IsnsDdsMemberEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    mapping of one Discovery Domain (DD) to a Discovery\n       Domain Set (DDS).
    \ This indicates the DD is a member of\n       the DDS.\"\n          INDEX   {
    isnsServerIndex,\n                    isnsDdsId,\n                    isnsDdsMemberDdId
    }\n          ::= { isnsDdsMemberTable 1 }\n      IsnsDdsMemberEntry ::=\n          SEQUENCE
    {\n             isnsDdsMemberDdId       IsnsDiscoveryDomainId,\n             isnsDdsMemberSymbolicName
    SnmpAdminString\n                   }\n      isnsDdsMemberDdId           OBJECT-TYPE\n
    \         SYNTAX                  IsnsDiscoveryDomainId\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The ID that identifies the Discovery Domain\n       that is a member of
    the Discovery Domain Set.\"\n          ::= { isnsDdsMemberEntry 1 }\n      isnsDdsMemberSymbolicName
    \  OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Symbolic Name of the Discovery Domain that is a member\n       of
    this DDS.  This value SHALL be identical to the object\n       isnsDdSymbolicName
    for the associated DD ID.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsDdsMemberEntry 2 }\n      --\n      -- Discovery Domain information\n      --\n
    \     isnsDdInfo     OBJECT IDENTIFIER ::= { isnsServerInfo 5 }\n      --\n      --
    Discovery Domain Registrations ------------------------\n      --\n      isnsDdTable
    \                OBJECT-TYPE\n          SYNTAX                  SEQUENCE OF IsnsDdEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing configuration information for
    each\n       Discovery Domain (DD) registered in the iSNS.  The number\n       of
    rows in the table is dependent on the number of DDs\n       registered in the
    iSNS instance.\"\n          ::= { isnsDdInfo 1 }\n      isnsDdEntry                 OBJECT-TYPE\n
    \         SYNTAX                  IsnsDdEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Information
    on a Discovery Domain (DD) registered in\n       the iSNS Server instance.\"\n
    \         INDEX   { isnsServerIndex, isnsDdId}\n          ::= { isnsDdTable 1
    }\n      IsnsDdEntry::=\n          SEQUENCE {\n             isnsDdId             IsnsDiscoveryDomainId,\n
    \            isnsDdSymbolicName   SnmpAdminString,\n             isnsDdFeatures
    \      IsnsDdFeatureType\n                   }\n      isnsDdId                    OBJECT-TYPE\n
    \         SYNTAX                  IsnsDiscoveryDomainId\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The ID that refers to this Discovery Domain, and the\n       index to
    the table.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsDdEntry
    1 }\n      isnsDdSymbolicName          OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The Discovery Domain Symbolic Name field contains
    a\n       unique variable-length description (up to 255 bytes)\n       that is
    associated with the DD.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsDdEntry 2 }\n      isnsDdFeatures              OBJECT-TYPE\n          SYNTAX
    \                 IsnsDdFeatureType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"This
    defines the features the Discovery Domain has.\"\n          REFERENCE \"RFC 4171,
    Section 6.11.2.9\"\n          ::= { isnsDdEntry 3 }\n      --\n      -- Discovery
    Domain Members --------------------\n      --\n      --\n      -- DD iSCSI Node
    Membership Assignment\n      --\n      isnsDdIscsiMemberTable      OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF\n                                    IsnsDdIscsiMemberEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing iSCSI node indexes that have
    been\n       assigned to specific DDs in this iSNS Server instance.  The\n       number
    of rows in the table is dependent on the number of\n       relationships between
    iSCSI Nodes and DDs registered in the\n       iSNS instance.\"\n          ::=
    { isnsDdInfo 2 }\n      isnsDdIscsiMemberEntry      OBJECT-TYPE\n          SYNTAX
    \                 IsnsDdIscsiMemberEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    mapping of one iSCSI Node to a Discovery Domain to\n       indicate membership
    in the DD.  The indexes are the iSNS\n       server instance, the DD ID of the
    Discovery Domain, and\n       the iSCSI Node Index of the iSCSI Node.\"\n          INDEX
    \  { isnsServerIndex,\n                    isnsDdId,\n                    isnsDdIscsiMemberIndex
    }\n          ::= { isnsDdIscsiMemberTable 1 }\n      IsnsDdIscsiMemberEntry::=\n
    \         SEQUENCE {\n             isnsDdIscsiMemberIndex   IsnsNodeIndexId,\n
    \            isnsDdIscsiMemberName    SnmpAdminString,\n             isnsDdIscsiMemberIsRegistered
    TruthValue\n                   }\n      isnsDdIscsiMemberIndex      OBJECT-TYPE\n
    \         SYNTAX                  IsnsNodeIndexId\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    index for this member iSCSI node entry.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsDdIscsiMemberEntry 1 }\n      isnsDdIscsiMemberName       OBJECT-TYPE\n
    \         SYNTAX                  SnmpAdminString (SIZE (0..223))\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The iSCSI Name associated with the storage node.  The\n       iSCSI Name
    cannot be longer than 223 bytes.  The iSNS\n       server internal maximum size
    is 224 bytes to provide\n       NULL termination.  This is the iSCSI Name for
    the storage\n       node that is a member of the DD.  This value maps 1 to 1\n
    \      to the isnsDdIscsiMemberIndex node index.  The iSCSI Name\n       field
    is too long to be easily used for an index directly.\n       The node index used
    for a specific node name is only\n       persistent across iSNS Server reinitializations
    for nodes\n       that are in a Discovery Domain (DD) or are registered\n       control
    nodes.  This value is only required during row\n       creation if the storage
    node is not yet registered in the\n       iSNS Server instance.  If the storage
    node is not yet\n       registered, then the iSCSI Name MUST be provided with
    the\n       iSCSI node index during row creation in order to create the\n       1-to-1
    mapping.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsDdIscsiMemberEntry
    2 }\n      isnsDdIscsiMemberIsRegistered OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This indicates whether this member of the DD is
    currently\n       registered in the iSNS Server instance.  iSCSI Storage\n       Node
    members do not need to be currently registered in\n       order for their iSCSI
    Name and Index to be added to\n       a DD.\"\n          REFERENCE \"RFC 4171,
    Section 6.11\"\n          ::= { isnsDdIscsiMemberEntry 3 }\n      --\n      --
    DD Portal Membership Assignment\n      --\n      isnsDdPortalMemberTable     OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF\n                                    IsnsDdPortalMemberEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing currently registered and unregistered\n
    \      portal objects that have been explicitly assigned to\n       specific DDs.
    \ Explicit assignment of a portal to a DD\n       is only done when a specific
    set of portals are preferred\n       for use within a DD.  Otherwise, for iSCSI,
    the Portal\n       Group Object should be used for identifying which portals\n
    \      provide access to which storage nodes.  The number of rows\n       in the
    table is dependent on the number of explicit\n       relationships between portals
    and DDs registered in the\n       iSNS.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsDdInfo 3 }\n      isnsDdPortalMemberEntry     OBJECT-TYPE\n
    \         SYNTAX                  IsnsDdPortalMemberEntry\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Each entry indicates an explicit addition of a portal to a\n       discovery
    domain.  The explicit addition of an entity portal\n       to a discovery domain
    indicates the portal is preferred for\n       access to nodes of the entity for
    this discovery domain.\n       Registered Portal Group objects are used in iSCSI
    to\n       indicate mapping of portals to nodes across all discovery\n       domains.
    \ Portals that have been explicitly mapped to a\n       discovery domain will
    be returned as part of a query that\n       is scoped to that discovery domain.
    \ If no portal of an\n       entity has been explicitly mapped to a discovery
    domain,\n       then all portals of the entity that provide access to a\n       storage
    node are returned as part of a query.  The table\n       indexes are the server
    instance, the DD ID of the Discovery\n       Domain, and the Portal Index of the
    portal.\"\n          INDEX   { isnsServerIndex,\n                    isnsDdId,\n
    \                   isnsDdPortalMemberIndex }\n          ::= { isnsDdPortalMemberTable
    1 }\n      IsnsDdPortalMemberEntry ::=\n          SEQUENCE {\n             isnsDdPortalMemberIndex
    \       IsnsPortalIndexId,\n             isnsDdPortalMemberAddressType  InetAddressType,\n
    \            isnsDdPortalMemberAddress      InetAddress,\n             isnsDdPortalMemberPortType
    \    IsnsPortalPortTypeId,\n             isnsDdPortalMemberPort         InetPortNumber,\n
    \            isnsDdPortalMemberIsRegistered TruthValue\n                   }\n
    \     isnsDdPortalMemberIndex     OBJECT-TYPE\n          SYNTAX                  IsnsPortalIndexId\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The index for a portal explicitly contained in
    the discovery\n       domain.  This managed object, combined with isnsServerIndex\n
    \      and isnsDdId, is the key for this table.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsDdPortalMemberEntry 1 }\n      isnsDdPortalMemberAddressType
    \ OBJECT-TYPE\n          SYNTAX                  InetAddressType\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The type of Inet address in isnsDdPortalMemberAddress.  If\n       the
    address is specified, then it must be a valid unicast\n       address and the
    value of this object must be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4);
    otherwise, the value\n       of this object is unknown(0), and the value of\n
    \      isnsDdPortalMemberAddress is the zero-length string.\"\n          ::= {
    isnsDdPortalMemberEntry 2 }\n      isnsDdPortalMemberAddress   OBJECT-TYPE\n          SYNTAX
    \                 InetAddress\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The Inet Address for
    the portal.  The format of this\n       object is specified by isnsDdPortalMemberAddressType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsDdPortalMemberEntry
    3 }\n      isnsDdPortalMemberPortType  OBJECT-TYPE\n          SYNTAX                  IsnsPortalPortTypeId\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The port type for the portal, either UDP or TCP.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsDdPortalMemberEntry
    4 }\n      isnsDdPortalMemberPort      OBJECT-TYPE\n          SYNTAX                  InetPortNumber
    ( 1 .. 65535 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The port number for
    the portal.  Whether the portal\n       type is TCP or UDP is indicated by\n       isnsDdPortalMemberPortType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsDdPortalMemberEntry
    5 }\n      isnsDdPortalMemberIsRegistered OBJECT-TYPE\n          SYNTAX                  TruthValue\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This indicates whether this member of the DD is
    currently\n       registered in the iSNS Server instance.  Portals that are\n
    \      DD members do not need to be currently registered in\n       order for
    them to be added to a DD.\"\n          REFERENCE \"RFC 4171, Section 6.11\"\n
    \         ::= { isnsDdPortalMemberEntry 6 }\n      --\n      -- DD FC Port Membership
    Assignment\n      --\n      isnsDdFcPortMemberTable     OBJECT-TYPE\n          SYNTAX
    \                 SEQUENCE OF\n                                    IsnsDdFcPortMemberEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing FC Port World Wide Names (WWN)
    that\n       have been assigned to specific DDs.  The number of rows\n       in
    the table is dependent on the number of relationships\n       between FC Ports
    and DDs registered in the iSNS.\"\n          ::= { isnsDdInfo 4 }\n      isnsDdFcPortMemberEntry
    \    OBJECT-TYPE\n          SYNTAX                  IsnsDdFcPortMemberEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The association of one FC Port with a Discovery
    Domain.\n       Membership of an FC Port in a Discovery Domain is\n       indicated
    by creating a row for the appropriate DD ID\n       and FC Port WWN.\"\n          INDEX
    \  { isnsServerIndex,\n                    isnsDdId,\n                    isnsDdFcPortMemberPortName
    }\n          ::= { isnsDdFcPortMemberTable 1 }\n      IsnsDdFcPortMemberEntry
    ::=\n          SEQUENCE {\n             isnsDdFcPortMemberPortName FcNameIdOrZero,\n
    \            isnsDdFcPortMemberIsRegistered TruthValue\n          }\n      isnsDdFcPortMemberPortName
    \ OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero (SIZE(8))\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Port WWN of the FC Port that is a member of the DD.  The\n       value
    MUST be a valid FC WWN, as per the FC-GS (Fibre Channel -\n       Generic Services)
    standard.  This managed object, combined\n       with the isnsServerIndex and
    isnsDdId are the key for this\n       table.  A zero-length string is not a valid
    value for this\n       managed object.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsDdFcPortMemberEntry 1 }\n      isnsDdFcPortMemberIsRegistered
    OBJECT-TYPE\n          SYNTAX                  TruthValue\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"This indicates whether this member of the DD is currently\n       registered
    in the iSNS Server instance.\"\n          REFERENCE \"RFC 4171, Section 6.11\"\n
    \         ::= { isnsDdFcPortMemberEntry 2 }\n      --\n      --  Registered Device
    Information\n      --\n      isnsReg    OBJECT IDENTIFIER ::= { isnsServerInfo
    6 }\n      isnsRegEntityInfo           OBJECT IDENTIFIER\n                                     ::=
    { isnsReg    1 }\n      --\n      -- iSNS Registered Entities Table\n      --\n
    \     isnsRegEntityTable          OBJECT-TYPE\n          SYNTAX                  SEQUENCE
    OF IsnsRegEntityEntry\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"A table containing registered
    Entity objects in each iSNS\n       server instance.  The number of entries in
    the table is\n       dependent on the number of Entity objects registered in the\n
    \      iSNS Server instances.  All Entity objects are registered in\n       the
    iSNS using the iSNS protocol.\"\n          ::= { isnsRegEntityInfo 1 }\n      isnsRegEntityEntry
    \         OBJECT-TYPE\n          SYNTAX                  IsnsRegEntityEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one registered Entity object in
    an iSNS\n       server instance.\"\n          INDEX   { isnsServerIndex,\n                    isnsRegEntityIndex
    }\n          ::= { isnsRegEntityTable 1 }\n      IsnsRegEntityEntry ::=\n          SEQUENCE
    {\n             isnsRegEntityIndex          IsnsEntityIndexIdOrZero,\n             isnsRegEntityEID
    \           SnmpAdminString,\n             isnsRegEntityProtocol       Unsigned32,\n
    \            isnsRegEntityManagementAddressType\n                                         InetAddressType,\n
    \            isnsRegEntityManagementAddress\n                                         InetAddress,\n
    \            isnsRegEntityTimestamp      TimeStamp,\n             isnsRegEntityVersionMin
    \    Unsigned32,\n             isnsRegEntityVersionMax     Unsigned32,\n             isnsRegEntityRegistrationPeriod\n
    \                                        Unsigned32\n                  }\n      isnsRegEntityIndex
    \         OBJECT-TYPE\n          SYNTAX                  IsnsEntityIndexIdOrZero\n
    \                                        ( 1 .. 4294967295 )\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Entity Index for this entity.  This index is assigned\n       by the
    iSNS Server when an Entity is initially registered.\n       The Entity Index can
    be used to represent a registered\n       Entity object in situations where the
    Entity EID would\n       be too long/unwieldy.  Zero is not a valid value for
    this\n       object.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsRegEntityEntry 1 }\n      isnsRegEntityEID            OBJECT-TYPE\n          SYNTAX
    \                 SnmpAdminString\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    EID is a unique registered Entity object identifier, as\n       specified in the
    iSNS Specification.  This is the iSNS\n       Entity Identifier for the registered
    Entity object.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= {
    isnsRegEntityEntry 2 }\n      isnsRegEntityProtocol       OBJECT-TYPE\n          SYNTAX
    \                 Unsigned32 ( 1 .. 4294967295 )\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    block storage protocol supported by this entity, as\n       defined in the iSNS
    Specification, Section 6.2.2.  The\n       following values are initially assigned.\n
    \                Type Value       Entity Type\n                 ----------       -----------\n
    \                   1             No Protocol\n                    2             iSCSI\n
    \                   3             iFCP\n                  All Others      As assigned
    by IANA\n       The full set of current Block Storage Protocols are\n       specified
    in the IANA-maintained registry of assigned\n       iSNS parameters.  Please refer
    to RFC 4171 and the iSNS\n       parameters maintained at IANA.\"\n          REFERENCE
    \ \"RFC 4171, Section 6.2.2, and IANA Assignments\"\n          ::= { isnsRegEntityEntry
    3 }\n      isnsRegEntityManagementAddressType OBJECT-TYPE\n          SYNTAX                  InetAddressType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The type of Inet address in isnsRegEntityManagementAddress.\n
    \      If the address is specified, then it must be a valid unicast\n       address
    and the value of this object must be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4);
    otherwise, the value of\n       this object is unknown(0), and the value of\n
    \      isnsRegEntityManagementAddress is the zero-length string.\"\n          ::=
    { isnsRegEntityEntry 4 }\n      isnsRegEntityManagementAddress OBJECT-TYPE\n          SYNTAX
    \                 InetAddress\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The iSNS Management
    IP Address for the registered Entity\n       object.  The format of this object
    is specified by\n       isnsRegEntityManagementAddressType.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegEntityEntry 5 }\n      isnsRegEntityTimestamp
    \     OBJECT-TYPE\n          SYNTAX                  TimeStamp\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The iSNS Entity Registration Timestamp for the registered\n       Entity
    object.  This is the most recent date and time that\n       the registered Entity
    object, and associated registered\n       objects contained in the Entity, were
    registered or\n       updated.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegEntityEntry 6 }\n      isnsRegEntityVersionMin     OBJECT-TYPE\n
    \         SYNTAX                  Unsigned32 ( 0 .. 254 | 255 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The minimum version supported for the block storage protocol\n       specified
    by isnsRegEntityProtocol.  The protocol version\n       specified can be from
    1 to 254.  A value of 255 is a wildcard\n       value, indicating no minimum version
    value has been specified\n       for this Entity.  Entity registrations with an\n
    \      isnsRegEntityProtocol of 'No Protocol' SHALL have an\n       isnsRegEntityVersionMin
    value of 0.\"\n          REFERENCE \"RFC 4171, Section 6.2.5\"\n          ::=
    { isnsRegEntityEntry 7 }\n      isnsRegEntityVersionMax     OBJECT-TYPE\n          SYNTAX
    \                 Unsigned32 ( 0 .. 254 | 255 )\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    maximum version supported for the block storage protocol\n       specified by
    isnsRegEntityProtocol.  The protocol version\n       specified can be from 1 to
    254.  A value of 255 is a wildcard\n       value, indicating no maximum version
    value has been specified\n       for this Entity.  Entity registrations with an\n
    \      isnsRegEntityProtocol of 'No Protocol' SHALL have an\n       isnsRegEntityVersionMax
    value of 0.\"\n          REFERENCE \"RFC 4171, Section 6.2.5\"\n          ::=
    { isnsRegEntityEntry 8 }\n      isnsRegEntityRegistrationPeriod OBJECT-TYPE\n
    \         SYNTAX                  Unsigned32 ( 0 .. 4294967295 )\n          UNITS
    \                  \"seconds\"\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    iSNS Entity Status Inquiry (ESI) registration period,\n       which indicates
    the maximum time, in seconds, that the\n       registration will be maintained
    without receipt of an iSNSP\n       message from the entity.  If the Registration
    Period is set\n       to 0, then the Entity SHALL NOT be deregistered due to no\n
    \      contact with the entity.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegEntityEntry 9 }\n      --\n      -- Registered Objects
    Associated With an Entity Information\n      --\n      isnsRegEntityNumObjectsTable
    \   OBJECT-TYPE\n          SYNTAX                  SEQUENCE OF\n                                    IsnsRegEntityNumObjectsEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing information on the number of
    registered\n       objects associated with a registered Entity in the iSNS\n       server
    instance.  The number of entries in the table is\n       dependent on the number
    of registered Entity objects in the\n       iSNS.\"\n          ::= { isnsRegEntityInfo
    2 }\n      isnsRegEntityNumObjectsEntry    OBJECT-TYPE\n          SYNTAX                  IsnsRegEntityNumObjectsEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on the number of registered objects
    associated\n       with a registered Entity object in an iSNS Server instance.\"\n
    \         INDEX   { isnsServerIndex,\n                    isnsRegEntityIndex }\n
    \         ::= { isnsRegEntityNumObjectsTable 1 }\n      IsnsRegEntityNumObjectsEntry
    ::=\n          SEQUENCE {\n             isnsRegEntityInfoNumPortals      Gauge32,\n
    \            isnsRegEntityInfoNumPortalGroups Gauge32,\n             isnsRegEntityInfoNumIscsiNodes
    \  Gauge32,\n             isnsRegEntityInfoNumFcPorts      Gauge32,\n             isnsRegEntityInfoNumFcNodes
    \     Gauge32\n                  }\n      isnsRegEntityInfoNumPortals OBJECT-TYPE\n
    \         SYNTAX                  Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The number of Portals associated with this Entity.\"\n          ::= {
    isnsRegEntityNumObjectsEntry 1 }\n      isnsRegEntityInfoNumPortalGroups OBJECT-TYPE\n
    \         SYNTAX                  Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The number of Portal Groups associated with this Entity.\"\n          ::=
    { isnsRegEntityNumObjectsEntry 2 }\n      isnsRegEntityInfoNumIscsiNodes OBJECT-TYPE\n
    \         SYNTAX                  Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The number of iSCSI Storage Nodes associated with this\n       Entity.\"\n
    \         ::= { isnsRegEntityNumObjectsEntry 3 }\n      isnsRegEntityInfoNumFcPorts
    OBJECT-TYPE\n          SYNTAX                  Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The number of FC Ports associated with this Entity.\"\n          ::= {
    isnsRegEntityNumObjectsEntry 4 }\n      isnsRegEntityInfoNumFcNodes OBJECT-TYPE\n
    \         SYNTAX                  Gauge32 ( 0 .. 4294967295 )\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The number of FC Nodes associated with this Entity.\"\n          ::= {
    isnsRegEntityNumObjectsEntry 5 }\n      --\n      -- iSNS Registered Portal Information\n
    \     --\n      isnsRegPortalInfo           OBJECT IDENTIFIER\n                                     ::=
    { isnsReg  2 }\n      --\n      -- iSNS Registered Portal Table\n      --\n      isnsRegPortalTable
    \         OBJECT-TYPE\n          SYNTAX                  SEQUENCE OF IsnsRegPortalEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing the registered Portals in the
    iSNS.\n       The number of entries is dependent on the number of\n       Portals
    registered in the iSNS.\"\n          ::= { isnsRegPortalInfo 1 }\n      isnsRegPortalEntry
    \         OBJECT-TYPE\n          SYNTAX                  IsnsRegPortalEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one registered Entity Portal in
    the iSNS.\n       The Entity Index is part of the table index to quickly\n       find
    Portals that support a specific Entity.\"\n          INDEX   { isnsServerIndex,\n
    \                   isnsRegEntityIndex,\n                    isnsRegPortalPortalIndex
    }\n          ::= { isnsRegPortalTable 1 }\n      IsnsRegPortalEntry ::=\n          SEQUENCE
    {\n             isnsRegPortalPortalIndex    IsnsPortalIndexId,\n             isnsRegPortalAddressType
    \   InetAddressType,\n             isnsRegPortalAddress        InetAddress,\n
    \            isnsRegPortalPortType       IsnsPortalPortTypeId,\n             isnsRegPortalPort
    \          InetPortNumber,\n             isnsRegPortalSymbolicName   SnmpAdminString,\n
    \            isnsRegPortalEsiInterval    Unsigned32,\n             isnsRegPortalEsiPortType
    \   IsnsPortalPortTypeId,\n             isnsRegPortalEsiPort        InetPortNumber,\n
    \            isnsRegPortalScnPortType    IsnsPortalPortTypeId,\n             isnsRegPortalScnPort
    \       InetPortNumber,\n             isnsRegPortalSecurityInfo   IsnsPortalSecurityType\n
    \                 }\n      isnsRegPortalPortalIndex    OBJECT-TYPE\n          SYNTAX
    \                 IsnsPortalIndexId\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    index for this Entity Portal.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegPortalEntry 1 }\n      isnsRegPortalAddressType    OBJECT-TYPE\n
    \         SYNTAX                  InetAddressType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    type of Inet address in isnsRegPortalAddress.  If the\n       address is specified,
    then it must be a valid unicast\n       address and the value of this object must
    be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\n       of
    this object is unknown(0), and the value of\n       isnsRegPortalAddress is the
    zero-length string.\"\n          ::= { isnsRegPortalEntry 2 }\n      isnsRegPortalAddress
    \       OBJECT-TYPE\n          SYNTAX                  InetAddress\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Inet Address for this Portal as defined in the iSNS\n       Specification,
    RFC 4171.  The format of this object is\n       specified by isnsRegPortalAddressType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegPortalEntry
    3 }\n      isnsRegPortalPortType       OBJECT-TYPE\n          SYNTAX                  IsnsPortalPortTypeId\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The port type for this Portal, either UDP or TCP,
    as\n       defined in the iSNS Specification, RFC 4171.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegPortalEntry 4 }\n      isnsRegPortalPort
    \          OBJECT-TYPE\n          SYNTAX                  InetPortNumber ( 1 ..
    65535 )\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The port number for this Portal as defined in the\n
    \      iSNS Specification, RFC 4171.  Whether the Portal type\n       is TCP or
    UDP is indicated by isnsRegPortalPortType.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsRegPortalEntry 5 }\n      isnsRegPortalSymbolicName
    \  OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Symbolic Name for this Portal as defined in the iSNS\n       Specification,
    RFC 4171.  If not provided, then the string\n       SHALL be zero-length.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegPortalEntry
    6 }\n      isnsRegPortalEsiInterval    OBJECT-TYPE\n          SYNTAX                  Unsigned32
    ( 0 .. 65535 )\n          UNITS                   \"seconds\"\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Entity Status Inquiry (ESI) Interval for this Portal\n       as defined
    in the iSNS Specification, RFC 4171.  A value of\n       0 indicates that ESI
    monitoring has not been configured for\n       this Portal.\"\n          REFERENCE
    \"RFC 4171, Section 6.3.4\"\n          ::= { isnsRegPortalEntry 7 }\n      isnsRegPortalEsiPortType
    \   OBJECT-TYPE\n          SYNTAX                  IsnsPortalPortTypeId\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The port type for the ESI Port, either UDP or TCP, as\n       defined
    in the iSNS Specification, RFC 4171.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsRegPortalEntry 8 }\n      isnsRegPortalEsiPort        OBJECT-TYPE\n
    \         SYNTAX                  InetPortNumber\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    TCP or UDP port number used for ESI monitoring.  Whether\n       the port type
    is TCP or UDP is indicated by\n       isnsRegPortalEsiPortType.  A value of 0
    indicates that ESI\n       monitoring is not enabled for this Portal.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegPortalEntry 9 }\n      isnsRegPortalScnPortType
    \   OBJECT-TYPE\n          SYNTAX                  IsnsPortalPortTypeId\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The port type for the SCN Port, either UDP or TCP, as\n       defined
    in the iSNS Specification, RFC 4171.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsRegPortalEntry 10 }\n      isnsRegPortalScnPort        OBJECT-TYPE\n
    \         SYNTAX                  InetPortNumber\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    TCP or UDP port used to receive SCN messages from the\n       iSNS Server.  Whether
    the port type is TCP or UDP is\n       indicated by isnsRegPortalScnPortType.
    \ A value of 0\n       indicates that SCN message receipt is not enabled for this\n
    \      Portal.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= {
    isnsRegPortalEntry 11 }\n      isnsRegPortalSecurityInfo   OBJECT-TYPE\n          SYNTAX
    \                 IsnsPortalSecurityType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Indicates
    security attribute settings for the Portal as\n       registered in the iSNS server.
    \ The bit for bitmapVALID must\n       be set in order for this attribute to contain
    valid\n       information.  Setting a bit to 1 indicates the\n       feature is
    enabled.\"\n          REFERENCE \"RFC 4171, Section 6.3.9\"\n          ::= { isnsRegPortalEntry
    12 }\n      --\n      -- iSNS Registered Portal Group Information\n      --\n
    \     isnsRegPortalGroupInfo      OBJECT IDENTIFIER\n                                     ::=
    { isnsReg  3 }\n      --\n      -- iSNS Registered Portal Group (PG) Table\n      --\n
    \     isnsRegPgTable              OBJECT-TYPE\n          SYNTAX                  SEQUENCE
    OF IsnsRegPgEntry\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"A table containing the
    registered Portal Groups (PGs) in\n       the iSNS Server instance.  The number
    of entries is\n       dependent on the number of Portal Groups registered in\n
    \      the iSNS.\"\n          ::= { isnsRegPortalGroupInfo 1 }\n      isnsRegPgEntry
    \             OBJECT-TYPE\n          SYNTAX                  IsnsRegPgEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one registered Portal Group in the
    iSNS\n       server instance.  The Entity Index is part of the table\n       index
    to quickly find Portal Groups that support Portals\n       and iSCSI Storage Nodes
    in a specific Entity.\"\n          INDEX   { isnsServerIndex,\n                    isnsRegEntityIndex,\n
    \                   isnsRegPgIndex }\n          ::= { isnsRegPgTable 1 }\n      IsnsRegPgEntry
    ::=\n          SEQUENCE {\n             isnsRegPgIndex              IsnsPortalGroupIndexId,\n
    \            isnsRegPgIscsiNodeIndex     IsnsNodeIndexId,\n             isnsRegPgIscsiName
    \         SnmpAdminString,\n             isnsRegPgPortalPortalIndex  IsnsPortalIndexId,\n
    \            isnsRegPgPortalAddressType  InetAddressType,\n             isnsRegPgPortalAddress
    \     InetAddress,\n             isnsRegPgPortalPortType     IsnsPortalPortTypeId,\n
    \            isnsRegPgPortalPort         InetPortNumber,\n             isnsRegPgPGT
    \               IsnsPortalGroupTagIdOrNull\n                   }\n      isnsRegPgIndex
    \             OBJECT-TYPE\n          SYNTAX                  IsnsPortalGroupIndexId\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The PG Index for this node.  The index is created
    by the\n       iSNS Server instance for uniquely identifying registered\n       objects.
    \ The PG object is registered at the same time a\n       Portal or Storage Node
    is registered using the iSNS\n       protocol.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsRegPgEntry 1 }\n      isnsRegPgIscsiNodeIndex
    \    OBJECT-TYPE\n          SYNTAX                  IsnsNodeIndexId\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The index for the iSCSI Node associated with this PG.\n       This index
    can be used to reference the\n       isnsRegIscsiNodeTable.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegPgEntry 2 }\n      isnsRegPgIscsiName
    \         OBJECT-TYPE\n          SYNTAX                  SnmpAdminString (SIZE
    (0..223))\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The iSCSI Name of the initiator or target associated
    with\n       the storage node.  The iSCSI Name cannot be longer than\n       223
    bytes.  The iSNS Server internal maximum size is 224\n       bytes to provide
    NULL termination.  This is the PG iSCSI\n       Name that uniquely identifies
    the iSCSI Storage Node that\n       is associated with this PG.\"\n          ::=
    { isnsRegPgEntry 3 }\n      isnsRegPgPortalPortalIndex  OBJECT-TYPE\n          SYNTAX
    \                 IsnsPortalIndexId\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    Portal Index for the Portal associated with this PG.\n       This index can be
    used to reference the isnsRegPortalTable.\"\n          ::= { isnsRegPgEntry 4
    }\n      isnsRegPgPortalAddressType  OBJECT-TYPE\n          SYNTAX                  InetAddressType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The type of Inet address in isnsRegPgPortalAddress.
    \ If\n       the address is specified, then it must be a valid unicast\n       address
    and the value of this object must be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4);
    otherwise, the value\n       of this object is unknown(0), and the value of\n
    \      isnsRegPgPortalAddress is the zero-length string.\"\n          ::= { isnsRegPgEntry
    5 }\n      isnsRegPgPortalAddress      OBJECT-TYPE\n          SYNTAX                  InetAddress\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The Inet Address for the Portal that is associated
    with\n       the PG.  The format of this object is specified by\n       isnsRegPgPortalAddressType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegPgEntry 6
    }\n      isnsRegPgPortalPortType     OBJECT-TYPE\n          SYNTAX                  IsnsPortalPortTypeId\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The port type, either UDP or TCP, for the Portal
    that\n       is associated with this registered PG object.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegPgEntry 7 }\n      isnsRegPgPortalPort
    \        OBJECT-TYPE\n          SYNTAX                  InetPortNumber ( 1 ..
    65535 )\n          MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The port number for the Portal that is associated
    with\n       this registered PG object.  Whether the Portal type is\n       TCP
    or UDP is indicated by isnsRegPgPortalPortType.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsRegPgEntry 8 }\n      isnsRegPgPGT                OBJECT-TYPE\n
    \         SYNTAX                  IsnsPortalGroupTagIdOrNull\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Portal Group Tag (PGT) for the registered iSCSI Portal\n       Group
    object in an iSNS Server instance.  This indicates\n       the tag value that
    the Portal uses for access to the iSCSI\n       Storage Node.  The PGT is used
    for coordinated access\n       between multiple Portals, as described in the iSCSI\n
    \      Specification, RFC 3720.  A PGT with no association is a\n       NULL value.
    \ The value of -1 indicates a NULL value.\"\n          REFERENCE \"RFC 4171, Section
    6, and RFC 3720\"\n          ::= { isnsRegPgEntry 9 }\n      --\n      -- iSNS
    Registered iSCSI Node Information\n      --\n      isnsRegIscsiNodeInfo  OBJECT
    IDENTIFIER ::= { isnsReg  4 }\n      --\n      -- iSNS Registered iSCSI Node Table\n
    \     --\n      isnsRegIscsiNodeTable       OBJECT-TYPE\n          SYNTAX                  SEQUENCE
    OF IsnsRegIscsiNodeEntry\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"A table containing the
    registered iSCSI Nodes in the iSNS\n       server instance.  Storage devices register
    using the iSNS\n       protocol.  While a device cannot be registered in an iSNS\n
    \      server using SNMP, an entry can be deleted in order to\n       remove 'stale'
    entries.  The number of entries is related\n       to the number of iSCSI nodes
    registered in the iSNS.\"\n          ::= { isnsRegIscsiNodeInfo 1 }\n      isnsRegIscsiNodeEntry
    \      OBJECT-TYPE\n          SYNTAX                  IsnsRegIscsiNodeEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one iSCSI node that has been registered
    in\n       the iSNS Server instance.  New rows cannot be added using\n       SNMP.\"\n
    \         INDEX { isnsServerIndex,\n                  isnsRegEntityIndex,\n                  isnsRegIscsiNodeIndex
    }\n          ::= { isnsRegIscsiNodeTable 1 }\n      IsnsRegIscsiNodeEntry ::=
    SEQUENCE {\n          isnsRegIscsiNodeIndex          IsnsNodeIndexId,\n          isnsRegIscsiNodeName
    \          SnmpAdminString,\n          isnsRegIscsiNodeType           IsnsIscsiNodeType,\n
    \         isnsRegIscsiNodeAlias          SnmpAdminString,\n          isnsRegIscsiNodeScnTypes
    \      IsnsIscsiScnType,\n          isnsRegIscsiNodeWwnToken       FcNameIdOrZero,\n
    \         isnsRegIscsiNodeAuthMethod     SnmpAdminString\n                                       }\n
    \     isnsRegIscsiNodeIndex       OBJECT-TYPE\n          SYNTAX                  IsnsNodeIndexId\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The index for this iSCSI node.\"\n          REFERENCE
    \"RFC 4171, Section 6\"\n          ::= { isnsRegIscsiNodeEntry 1 }\n      isnsRegIscsiNodeName
    \       OBJECT-TYPE\n          SYNTAX                  SnmpAdminString (SIZE (0..223))\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The iSCSI Name of the initiator or target associated
    with\n       the storage node.  The iSCSI Name cannot be longer than\n       223
    bytes.  The iSNS Server internal maximum size is 224\n       bytes to provide
    NULL termination.  This is the iSCSI Name\n       that uniquely identifies the
    initiator, initiator/target,\n       target, or control node in the network.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegIscsiNodeEntry
    2 }\n      isnsRegIscsiNodeType        OBJECT-TYPE\n          SYNTAX                  IsnsIscsiNodeType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The Node Type defining the functions of this iSCSI
    node.\"\n          ::= { isnsRegIscsiNodeEntry 3 }\n      isnsRegIscsiNodeAlias
    \      OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Alias name of the iSCSI node.  This is a variable-length\n       text-based
    description of up to 255 bytes.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegIscsiNodeEntry 4 }\n      isnsRegIscsiNodeScnTypes    OBJECT-TYPE\n
    \         SYNTAX                  IsnsIscsiScnType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    State Change Notification (SCN) types enabled for this\n       iSCSI node.\"\n
    \         REFERENCE \"RFC 4171, Section 6.4.4\"\n          ::= { isnsRegIscsiNodeEntry
    5 }\n      isnsRegIscsiNodeWwnToken    OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"This contains a globally unique 64-bit integer
    value that\n       can be used to represent the World Wide Node Name of the\n
    \      iSCSI device in a Fibre Channel fabric.  This identifier is\n       used
    during the device registration process, and MUST\n       conform to the requirements
    in RFC 4171.  A zero-length string\n       for this managed object indicates that
    a Node WWN token has\n       not been assigned.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsRegIscsiNodeEntry 6 }\n      isnsRegIscsiNodeAuthMethod
    \ OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"This attribute contains a null-terminated string containing\n       UTF-8
    text listing the iSCSI authentication methods enabled\n       for this iSCSI Node,
    in order of preference.  The text\n       values used to identify iSCSI authentication
    methods are\n       embedded in this string attribute and delineated by a\n       comma.
    \ The text values are identical to those found in\n       RFC 3720 - iSCSI.  Additional
    vendor-specific text values\n       are also possible.\"\n          REFERENCE
    \"RFC 4171, Section 6, and RFC 3720\"\n          ::= { isnsRegIscsiNodeEntry 7
    }\n      --\n      -- iSNS Registered FC Node Information\n      --\n      isnsRegFcNodeInfo
    \    OBJECT IDENTIFIER ::= { isnsReg  5 }\n      --\n      -- iSNS Registered
    FC Node Table\n      --\n      isnsRegFcNodeTable          OBJECT-TYPE\n          SYNTAX
    \                 SEQUENCE OF IsnsRegFcNodeEntry\n          MAX-ACCESS              not-accessible\n
    \         STATUS                  current\n          DESCRIPTION\n      \"A table
    containing the registered FC Nodes in the iSNS.\n       This supports iFCP as
    defined in RFC 4172.\"\n          ::= { isnsRegFcNodeInfo 1 }\n      isnsRegFcNodeEntry
    \         OBJECT-TYPE\n          SYNTAX                  IsnsRegFcNodeEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one registered FC node that has
    been\n       registered in the iSNS.\"\n          INDEX { isnsServerIndex,\n                   isnsRegFcNodeWwnn
    }\n          ::= { isnsRegFcNodeTable 1 }\n      IsnsRegFcNodeEntry ::= SEQUENCE
    {\n          isnsRegFcNodeWwnn           FcNameIdOrZero,\n          isnsRegFcNodeSymbolicName
    \  SnmpAdminString,\n          isnsRegFcNodeAddressType    InetAddressType,\n
    \         isnsRegFcNodeAddress        InetAddress,\n          isnsRegFcNodeIPA
    \           OCTET STRING,\n          isnsRegFcNodeProxyIscsiName SnmpAdminString,\n
    \         isnsRegFcNodeNumFcPorts     Gauge32\n                                      }\n
    \     isnsRegFcNodeWwnn           OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero
    (SIZE(8))\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The FC Node World Wide
    Node Name as defined in the iSNS\n       Specification, RFC 4171.  A zero-length
    string is not valid\n       for this managed object.\"\n          REFERENCE \"RFC
    4171, Section 6\"\n          ::= { isnsRegFcNodeEntry 1 }\n      isnsRegFcNodeSymbolicName
    \  OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The FC Node Symbolic Name of the node as defined in the\n       iSNS Specification,
    RFC 4171.  This is a variable-length\n       text-based description.  If not provided,
    then the string\n       SHALL be zero-length.\"\n          REFERENCE \"RFC 4171,
    Section 6\"\n          ::= { isnsRegFcNodeEntry 2 }\n      isnsRegFcNodeAddressType
    \   OBJECT-TYPE\n          SYNTAX                  InetAddressType\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The type of Inet address in isnsRegFcNodeAddress.  If\n       the address
    is specified, then it must be a valid unicast\n       address and the value of
    this object must be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4); otherwise,
    the value\n       of this object is unknown(0), and the value of\n       isnsRegFcNodeAddress
    is the zero-length string.\"\n          ::= { isnsRegFcNodeEntry 3 }\n      isnsRegFcNodeAddress
    \       OBJECT-TYPE\n          SYNTAX                  InetAddress\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The FC Node Inet address of the node as defined in the\n       iSNS Specification,
    RFC 4171.  The format of this object is\n       specified by isnsRegFcNodeAddressType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegFcNodeEntry
    4 }\n      isnsRegFcNodeIPA            OBJECT-TYPE\n          SYNTAX                  OCTET
    STRING (SIZE(8))\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"This managed object
    identifies the FC Initial Process\n       Associator of the node as defined in
    the iSNS\n       Specification, RFC 4171.\"\n          REFERENCE \"RFC 4171, Section
    6\"\n          ::= { isnsRegFcNodeEntry 5 }\n      isnsRegFcNodeProxyIscsiName
    OBJECT-TYPE\n          SYNTAX                  SnmpAdminString (SIZE (0..223))\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The iSCSI Name used to represent the FC Node in
    the IP\n       network.  It is used as a pointer to the matching iSCSI Name\n
    \      entry in the iSNS Server.  Its value is usually registered\n       by an
    FC-iSCSI gateway connecting the IP network to the\n       fabric containing the
    FC device.\"\n          REFERENCE  \"RFC 4171, Section 6\"\n          ::= { isnsRegFcNodeEntry
    6 }\n      isnsRegFcNodeNumFcPorts     OBJECT-TYPE\n          SYNTAX                  Gauge32
    ( 0 .. 4294967295 )\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The number of FC Ports
    associated with this FC Node.\"\n          ::= { isnsRegFcNodeEntry 7 }\n      --\n
    \     -- iSNS Registered FC Port Table\n      --\n      isnsRegFcPortTable          OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF IsnsRegFcPortEntry\n          MAX-ACCESS
    \             not-accessible\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Information on registered FC N_Ports in the iSNS.  FC Ports\n       are
    associated with registered FC Nodes.  This supports\n       iFCP as defined in
    RFC 4172.\"\n          REFERENCE \"RFC 4172, Section 4\"\n          ::= { isnsRegFcNodeInfo
    2 }\n      isnsRegFcPortEntry          OBJECT-TYPE\n          SYNTAX                   IsnsRegFcPortEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one FC Port that has been registered
    in\n       iSNS.\"\n          REFERENCE \"RFC 4172, Section 4\"\n          INDEX
    { isnsServerIndex,\n                  isnsRegEntityIndex,\n                  isnsRegFcPortWwpn
    }\n          ::= { isnsRegFcPortTable 1 }\n      IsnsRegFcPortEntry ::= SEQUENCE
    {\n          isnsRegFcPortWwpn              FcNameIdOrZero,\n          isnsRegFcPortID
    \               FcAddressIdOrZero,\n          isnsRegFcPortType              Unsigned32,\n
    \         isnsRegFcPortSymbolicName      SnmpAdminString,\n          isnsRegFcPortFabricPortWwn
    \    FcNameIdOrZero,\n          isnsRegFcPortHA                FcAddressIdOrZero,\n
    \         isnsRegFcPortAddressType       InetAddressType,\n          isnsRegFcPortAddress
    \          InetAddress,\n          isnsRegFcPortFcCos             IsnsFcClassOfServiceType,\n
    \         isnsRegFcPortFc4Types          OCTET STRING,\n          isnsRegFcPortFc4Descr
    \         SnmpAdminString,\n          isnsRegFcPortFc4Features       OCTET STRING,\n
    \         isnsRegFcPortScnTypes          IsnsIfcpScnType,\n          isnsRegFcPortRole
    \             IsnsFcPortRoleType,\n          isnsRegFcPortFcNodeWwnn        FcNameIdOrZero,\n
    \         isnsRegFcPortPpnWwn            FcNameIdOrZero\n                                      }\n
    \     isnsRegFcPortWwpn           OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero
    (SIZE(8))\n          MAX-ACCESS              not-accessible\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The FC Port's World
    Wide Port Name as defined in the iSNS\n       Specification, RFC 4171.  A zero-length
    string is not valid\n       for this managed object.\"\n          REFERENCE \"RFC
    4171, Section 6\"\n          ::= { isnsRegFcPortEntry 1 }\n      isnsRegFcPortID
    \            OBJECT-TYPE\n          SYNTAX                  FcAddressIdOrZero\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The FC Port's Port ID as defined in the iSNS Specification,\n
    \      RFC 4171.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsRegFcPortEntry 2 }\n      isnsRegFcPortType           OBJECT-TYPE\n          SYNTAX
    \                 Unsigned32 ( 0 .. 65535 )\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    FC Port Type as defined in the iSNS Specification,\n       RFC 4171, and the Fibre
    Channel Generic Services\n       Specification.  Current values are as shown below:\n
    \             unknown      (0),\n              nPort        (1),\n              nlPort
    \      (2),\n              fNlPort      (3),\n              fPort        (129),
    \    -- x'81'\n              flPort       (130),     -- x'82'\n              ePort
    \       (132),     -- x'84'\n              bPort        (133),     -- x'85'\n
    \             mFcpPort     (65297),   -- x'FF11'\n              iFcpPort     (65298),
    \  -- x'FF12'\n              unknownEnd   (65535)\n       The future assignment
    of any additional values will be\n       documented in a revision of RFC 4171.\"\n
    \         REFERENCE \"RFC 4171, Section 6.6.3\"\n          ::= { isnsRegFcPortEntry
    3 }\n      isnsRegFcPortSymbolicName OBJECT-TYPE\n          SYNTAX                SnmpAdminString\n
    \         MAX-ACCESS            read-only\n          STATUS                current\n
    \         DESCRIPTION\n      \"The FC Port Symbolic Name as defined in the iSNS\n
    \      Specification, RFC 4171.  If not provided, then the\n       string SHALL
    be zero-length.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::=
    { isnsRegFcPortEntry 4 }\n      isnsRegFcPortFabricPortWwn  OBJECT-TYPE\n          SYNTAX
    \                 FcNameIdOrZero\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    Fabric Port WWN for this entry as defined in the iSNS\n       Specification, RFC
    4171.  A zero-length string for this\n       managed object indicates that the
    Fabric Port WWN is not\n       known, or has not yet been registered with the
    iSNS Server.\"\n          REFERENCE \"RFC 4171, Section 6\"\n         ::= { isnsRegFcPortEntry
    5 }\n      isnsRegFcPortHA             OBJECT-TYPE\n          SYNTAX                  FcAddressIdOrZero\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The FC Port Hard Address as defined in the iSNS\n
    \      Specification, RFC 4171.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegFcPortEntry 6 }\n      isnsRegFcPortAddressType    OBJECT-TYPE\n
    \         SYNTAX                  InetAddressType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    type of Inet address in isnsRegFcPortAddress.  If\n       the address is specified,
    then it must be a valid unicast\n       address and the value of this object must
    be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4); otherwise, the value\n       of
    this object is unknown(0), and the value of\n       isnsRegFcPortAddress is the
    zero-length string.\"\n          ::= { isnsRegFcPortEntry 7 }\n      isnsRegFcPortAddress
    \       OBJECT-TYPE\n          SYNTAX                  InetAddress\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The FC Port Inet Address as defined in the iSNS\n       Specification,
    RFC 4171.  The format of this object is\n       specified by isnsRegFcPortAddressType.\"\n
    \         REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegFcPortEntry
    8 }\n      isnsRegFcPortFcCos          OBJECT-TYPE\n          SYNTAX                  IsnsFcClassOfServiceType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The FC Port Class of Service as defined in the
    iSNS\n       Specification, RFC 4171.\"\n          REFERENCE  \"RFC 4171, Section
    6\"\n          ::= { isnsRegFcPortEntry 9 }\n      isnsRegFcPortFc4Types       OBJECT-TYPE\n
    \         SYNTAX                  OCTET STRING (SIZE (32))\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The FC Port FC-4 Types as defined in the iSNS\n       Specification, RFC
    4171.\"\n          REFERENCE \"RFC 4171, Section 6.6.9\"\n          ::= { isnsRegFcPortEntry
    10 }\n      isnsRegFcPortFc4Descr       OBJECT-TYPE\n          SYNTAX                  SnmpAdminString
    (SIZE(4..255))\n          MAX-ACCESS              read-only\n          STATUS
    \                 current\n          DESCRIPTION\n      \"The FC Port FC-4 Descriptor
    as defined in the iSNS\n       Specification, RFC 4171.  The FC-4 Descriptor cannot
    be\n       longer than 255 bytes.  The iSNS Server internal maximum\n       size
    is 256 bytes to provide NULL termination.\"\n           REFERENCE \"RFC 4171,
    Section 6.6.10\"\n         ::= { isnsRegFcPortEntry 11 }\n      isnsRegFcPortFc4Features
    \   OBJECT-TYPE\n          SYNTAX                  OCTET STRING (SIZE (128))\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The FC Port FC-4 Features as defined in the iSNS\n
    \      Specification, RFC 4171.\"\n          REFERENCE \"RFC 4171, Section 6.6.11\"\n
    \         ::= { isnsRegFcPortEntry 12 }\n      isnsRegFcPortScnTypes       OBJECT-TYPE\n
    \         SYNTAX                  IsnsIfcpScnType\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    iFCP State Change Notification (SCN) types enabled for\n       the registered
    object.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegFcPortEntry
    13 }\n      isnsRegFcPortRole           OBJECT-TYPE\n          SYNTAX                  IsnsFcPortRoleType\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The FC Port Role defines the role of the registered\n
    \      object.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= {
    isnsRegFcPortEntry 14 }\n      isnsRegFcPortFcNodeWwnn     OBJECT-TYPE\n          SYNTAX
    \                 FcNameIdOrZero\n          MAX-ACCESS              read-only\n
    \         STATUS                  current\n          DESCRIPTION\n      \"The
    FC Node World Wide Node Name that is associated with\n       this FC Port as defined
    in the iSNS Specification, RFC 4171.\n       This managed object may contain a
    zero-length string prior\n       to a device registering this value with the iSNS
    Server.\"\n          REFERENCE \"RFC 4171, Section 6\"\n          ::= { isnsRegFcPortEntry
    15 }\n      isnsRegFcPortPpnWwn         OBJECT-TYPE\n          SYNTAX                  FcNameIdOrZero\n
    \         MAX-ACCESS              read-only\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The Permanent Port Name (PPN) attribute is the
    FC Port Name WWPN\n       of the first Storage Node registered in the iSNS Database\n
    \      that is associated with a particular FC Device (FC Node).\n       The PPN
    of all subsequent Storage Node registrations that\n       are associated with
    that FC Device (FC Node) SHALL be set\n       to the FC Port Name WWPN of the
    first Storage Node, as\n       defined in the iSNS Specification, RFC 4171.  This
    managed\n       object may contain a zero-length string prior to a device\n       registering
    this value with the iSNS Server.\"\n          REFERENCE \"RFC 4171, Section 6\"\n
    \         ::= { isnsRegFcPortEntry 16 }\n      --\n      --  Mapping from FC Node
    to Entity - FC Port\n      --\n      isnsRegFcNodePortTable      OBJECT-TYPE\n
    \         SYNTAX                  SEQUENCE OF\n                                    IsnsRegFcNodePortEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"A table containing the mapping of a registered
    FC Node and\n       associated registered iFCP Port to the supporting registered\n
    \      Entity object in an iSNS Server instance.\"\n          ::= { isnsRegFcNodeInfo
    3 }\n      isnsRegFcNodePortEntry      OBJECT-TYPE\n          SYNTAX                  IsnsRegFcNodePortEntry\n
    \         MAX-ACCESS              not-accessible\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Information on one mapping from an FC Node and
    iFCP Port to\n       an Entity object registered in an iSNS.\"\n          INDEX
    { isnsServerIndex,\n                  isnsRegFcNodeWwnn,\n                  isnsRegFcPortWwpn
    }\n          ::= { isnsRegFcNodePortTable 1 }\n      IsnsRegFcNodePortEntry ::=
    SEQUENCE {\n              isnsRegFcNodePortEntityIndex IsnsEntityIndexIdOrZero\n
    \                                         }\n      isnsRegFcNodePortEntityIndex
    OBJECT-TYPE\n          SYNTAX                  IsnsEntityIndexIdOrZero\n          MAX-ACCESS
    \             read-only\n          STATUS                  current\n          DESCRIPTION\n
    \     \"The Entity Index for the registered Entity object\n       associated with
    the FC Port and FC Node.  This managed\n       object may contain the value of
    zero prior to a device\n       registering this value with the iSNS Server.\"\n
    \         ::= { isnsRegFcNodePortEntry 1 }\n      --\n      -- iSNS Notifications
    Information -----------------\n      --\n      isnsNotificationsInfo        OBJECT
    IDENTIFIER\n                                        ::= { isnsObjects 2 }\n      isnsInstanceInfo
    \           OBJECT-TYPE\n          SYNTAX                  SnmpAdminString\n          MAX-ACCESS
    \             accessible-for-notify\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Textual information about the notification event
    and the\n       iSNS Server generating the notification.  An example is:\n       iSNS
    Server Started.\"\n          ::= { isnsNotificationsInfo 1 }\n      isnsAddressNotificationType
    OBJECT-TYPE\n          SYNTAX                  InetAddressType\n          MAX-ACCESS
    \             accessible-for-notify\n          STATUS                  current\n
    \         DESCRIPTION\n      \"The type of Inet address in isnsAddressNotification.
    \ If\n       the address is specified, then it must be a valid unicast\n       address
    and the value of this object must be ipv4(1),\n       ipv6(2), ipv4z(3), or ipv6z(4);
    otherwise, the value\n       of this object is unknown(0), and the value of\n
    \      isnsAddressNotification is the zero-length string.\"\n          ::= { isnsNotificationsInfo
    2 }\n      isnsAddressNotification     OBJECT-TYPE\n          SYNTAX                  InetAddress\n
    \         MAX-ACCESS              accessible-for-notify\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Identifies the IP address of the iSNS Server.  The
    format of\n       this object is specified by isnsAddressNotificationType.\n       The
    IP address will always be specified in the notification\n       unless an error
    causes the IP address to not be known.\"\n          ::= { isnsNotificationsInfo
    3 }\n      isnsTcpPortNotification     OBJECT-TYPE\n          SYNTAX                  InetPortNumber\n
    \         MAX-ACCESS              accessible-for-notify\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Indicates the TCP port the iSNS Server is using,\n
    \      or 0 if TCP-based registrations are not supported.\"\n          ::= { isnsNotificationsInfo
    4 }\n      isnsUdpPortNotification     OBJECT-TYPE\n          SYNTAX                  InetPortNumber\n
    \         MAX-ACCESS              accessible-for-notify\n          STATUS                  current\n
    \         DESCRIPTION\n      \"Indicates the UDP port the iSNS Server is using,\n
    \      or 0 if UDP-based registrations are not supported.\"\n          ::= { isnsNotificationsInfo
    5 }\n      --\n      -- iSNS Notification Block -----------------\n      --\n
    \     isnsServerStart             NOTIFICATION-TYPE\n          OBJECTS {\n              isnsInstanceInfo,\n
    \             isnsAddressNotificationType,\n              isnsAddressNotification,\n
    \             isnsTcpPortNotification,\n              isnsUdpPortNotification\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"This notification is sent when an iSNS Server begins\n       operation.
    \ The notification provides the following:\n              isnsInstanceInfo : iSNS
    Server textual information\n              isnsAddressTypeNotification : iSNS Server
    address type\n              isnsAddressNotification : iSNS Server address\n              isnsTcpPortNotification
    : iSNS Server TCP Port\n              isnsUdpPortNotification : iSNS Server UDP
    Port\n      \"\n          ::= { isnsNotifications 1 }\n      isnsServerShutdown
    \         NOTIFICATION-TYPE\n          OBJECTS {\n              isnsInstanceInfo,\n
    \             isnsAddressNotificationType,\n              isnsAddressNotification,\n
    \             isnsTcpPortNotification,\n              isnsUdpPortNotification\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"This notification is sent when an iSNS Server is\n       shutdown.  The
    notification provides the following:\n              isnsInstanceInfo : iSNS Server
    textual information\n              isnsAddressTypeNotification : iSNS Server address
    type\n              isnsAddressNotification : iSNS Server address\n              isnsTcpPortNotification
    : iSNS Server TCP Port\n              isnsUdpPortNotification : iSNS Server UDP
    Port\n      \"\n          ::= { isnsNotifications 2 }\n      ------------------------------------------------------------\n
    \     --\n      -- Compliance Information\n      --\n      isnsCompliances OBJECT
    IDENTIFIER ::= { isnsConformance 1 }\n      isnsIscsiServerCompliance MODULE-COMPLIANCE\n
    \         STATUS                  current\n          DESCRIPTION\n      \"Initial
    compliance statement for an iSNS Server\n       providing support to iSCSI clients.\"\n
    \         MODULE       -- this module\n          MANDATORY-GROUPS {\n              isnsServerAttributesGroup,\n
    \             isnsServerIscsiControlNodeGroup,\n              isnsServerIscsiDdsDdObjGroup,\n
    \             isnsServerRegIscsiObjGroup,\n              isnsServerNumObjectsGroup,\n
    \             isnsNotificationsObjGroup,\n              isnsServerNotificationGroup\n
    \                          }\n          OBJECT isnsServerDiscoveryMcGroupType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsServerDiscoveryMcGroupAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsDdPortalMemberAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsDdPortalMemberAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegEntityManagementAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsRegEntityManagementAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegPortalAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsRegPortalAddress\n          SYNTAX
    InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n      \"Only
    addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their related SIZE
    need to be supported.\"\n          OBJECT isnsRegPgPortalAddressType\n          SYNTAX
    InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsRegPgPortalAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsAddressNotificationType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, ipv6z\n       is required.\"\n          OBJECT isnsAddressNotification\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z\n       and their
    related SIZE need to be supported.\"\n          ::= { isnsCompliances 1 }\n      isnsIfcpServerCompliance
    MODULE-COMPLIANCE\n          STATUS                  current\n          DESCRIPTION\n
    \     \"Initial compliance statement for an iSNS Server\n       providing support
    to iFCP Clients.\"\n          MODULE       -- this module\n          MANDATORY-GROUPS
    {\n              isnsServerAttributesGroup,\n              isnsServerIfcpPortControlNodeGroup,\n
    \             isnsServerIfcpDdsDdObjGroup,\n              isnsServerRegIfcpObjGroup,\n
    \             isnsServerNumObjectsGroup,\n              isnsNotificationsObjGroup,\n
    \             isnsServerNotificationGroup\n                           }\n          OBJECT
    isnsServerDiscoveryMcGroupType\n          SYNTAX InetAddressType { unknown(0),
    ipv4(1), ipv6(2),\n                                     ipv4z(3), ipv6z(4) }\n
    \         DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6, ipv4z, and
    ipv6z\n       is required.\"\n          OBJECT isnsServerDiscoveryMcGroupAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsDdPortalMemberAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsDdPortalMemberAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegEntityManagementAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsRegEntityManagementAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegPortalAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsRegPortalAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegFcNodeAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsRegFcNodeAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsRegFcPortAddressType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsRegFcPortAddress\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          OBJECT isnsAddressNotificationType\n
    \         SYNTAX InetAddressType { unknown(0), ipv4(1), ipv6(2),\n                                     ipv4z(3),
    ipv6z(4) }\n          DESCRIPTION\n      \"Only support for unknown, ipv4, ipv6,
    ipv4z, and ipv6z\n       is required.\"\n          OBJECT isnsAddressNotification\n
    \         SYNTAX InetAddress (SIZE (0 | 4 | 8 | 16 | 20 ))\n          DESCRIPTION\n
    \     \"Only addresses for unknown, ipv4, ipv6, ipv4z, ipv6z,\n       and their
    related SIZE need to be supported.\"\n          ::= { isnsCompliances 2 }\n   isnsGroups
    OBJECT IDENTIFIER ::= { isnsConformance 2 }\n      isnsServerAttributesGroup      OBJECT-GROUP\n
    \         OBJECTS {\n             isnsServerName,\n             isnsServerIsnsVersion,\n
    \            isnsServerVendorInfo,\n             isnsServerPhysicalIndex,\n             isnsServerTcpPort,\n
    \            isnsServerUdpPort,\n             isnsServerDiscontinuityTime,\n             isnsServerRole,\n
    \            isnsServerDiscoveryMethodsEnabled,\n             isnsServerDiscoveryMcGroupType,\n
    \            isnsServerDiscoveryMcGroupAddress,\n             isnsServerEsiNonResponseThreshold,\n
    \            isnsServerEnableControlNodeMgtScn,\n             isnsServerDefaultDdDdsStatus,\n
    \            isnsServerUpdateDdDdsSupported,\n             isnsServerUpdateDdDdsEnabled\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server attributes.\"\n             ::= { isnsGroups 1 }\n      isnsServerNumObjectsGroup
    \     OBJECT-GROUP\n          OBJECTS {\n             isnsNumDds,\n             isnsNumDd,\n
    \            isnsNumEntities,\n             isnsNumPortals,\n             isnsNumPortalGroups,\n
    \            isnsNumIscsiNodes,\n             isnsNumFcPorts,\n             isnsNumFcNodes,\n
    \            isnsRegEntityInfoNumPortals,\n             isnsRegEntityInfoNumPortalGroups,\n
    \            isnsRegEntityInfoNumIscsiNodes,\n             isnsRegEntityInfoNumFcPorts,\n
    \            isnsRegEntityInfoNumFcNodes\n                  }\n          STATUS
    \                 current\n          DESCRIPTION\n      \"Managed objects indicating
    the number of registered objects\n       in an iSNS Server or the number of registered
    objects\n       associated with a registered Entity.  These managed objects\n
    \      are optional to implement.\"\n             ::= { isnsGroups 2 }\n      isnsServerIscsiControlNodeGroup
    \   OBJECT-GROUP\n          OBJECTS {\n             isnsControlNodeIscsiNodeName,\n
    \            isnsControlNodeIscsiIsRegistered,\n             isnsControlNodeIscsiRcvMgtSCN\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server iSCSI control node managed objects.\"\n             ::= {
    isnsGroups 3 }\n      isnsServerIfcpPortControlNodeGroup   OBJECT-GROUP\n          OBJECTS
    {\n             isnsControlNodeFcPortIsRegistered,\n             isnsControlNodeFcPortRcvMgtSCN\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server iFCP Port control node managed objects.\"\n             ::=
    { isnsGroups 4 }\n      isnsServerIscsiDdsDdObjGroup   OBJECT-GROUP\n          OBJECTS
    {\n             isnsDdsSymbolicName,\n             isnsDdsStatus,\n             isnsDdsMemberSymbolicName,\n
    \            isnsDdSymbolicName,\n             isnsDdFeatures,\n             isnsDdIscsiMemberName,\n
    \            isnsDdIscsiMemberIsRegistered,\n             isnsDdPortalMemberAddressType,\n
    \            isnsDdPortalMemberAddress,\n             isnsDdPortalMemberPortType,\n
    \            isnsDdPortalMemberPort,\n             isnsDdPortalMemberIsRegistered\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server DDS and DD managed objects for iSCSI.\"\n             ::=
    { isnsGroups 5 }\n      isnsServerIfcpDdsDdObjGroup    OBJECT-GROUP\n          OBJECTS
    {\n             isnsDdsSymbolicName,\n             isnsDdsStatus,\n             isnsDdSymbolicName,\n
    \            isnsDdFeatures,\n             isnsDdPortalMemberAddressType,\n             isnsDdPortalMemberAddress,\n
    \            isnsDdPortalMemberPortType,\n             isnsDdPortalMemberPort,\n
    \            isnsDdPortalMemberIsRegistered,\n             isnsDdFcPortMemberIsRegistered\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server DDS and DD managed objects for iFCP.\"\n             ::= {
    isnsGroups 6 }\n      isnsServerRegIscsiObjGroup   OBJECT-GROUP\n          OBJECTS
    {\n             isnsRegEntityEID,\n             isnsRegEntityProtocol,\n             isnsRegEntityManagementAddressType,\n
    \            isnsRegEntityManagementAddress,\n             isnsRegEntityTimestamp,\n
    \            isnsRegEntityVersionMin,\n             isnsRegEntityVersionMax,\n
    \            isnsRegEntityRegistrationPeriod,\n             isnsRegEntityInfoNumPortals,\n
    \            isnsRegEntityInfoNumPortalGroups,\n             isnsRegEntityInfoNumIscsiNodes,\n
    \            isnsRegEntityInfoNumFcPorts,\n             isnsRegEntityInfoNumFcNodes,\n
    \            isnsRegPortalAddressType,\n             isnsRegPortalAddress,\n             isnsRegPortalPortType,\n
    \            isnsRegPortalPort,\n             isnsRegPortalSymbolicName,\n             isnsRegPortalEsiInterval,\n
    \            isnsRegPortalEsiPortType,\n             isnsRegPortalEsiPort,\n             isnsRegPortalScnPortType,\n
    \            isnsRegPortalScnPort,\n             isnsRegPortalSecurityInfo,\n
    \            isnsRegPgIscsiNodeIndex,\n             isnsRegPgIscsiName,\n             isnsRegPgPortalPortalIndex,\n
    \            isnsRegPgPortalAddressType,\n             isnsRegPgPortalAddress,\n
    \            isnsRegPgPortalPortType,\n             isnsRegPgPortalPort,\n             isnsRegPgPGT,\n
    \            isnsRegIscsiNodeName,\n             isnsRegIscsiNodeType,\n             isnsRegIscsiNodeAlias,\n
    \            isnsRegIscsiNodeScnTypes,\n             isnsRegIscsiNodeWwnToken,\n
    \            isnsRegIscsiNodeAuthMethod\n                  }\n          STATUS
    \                 current\n          DESCRIPTION\n      \"iSNS Server registered
    iSCSI managed objects.\"\n             ::= { isnsGroups 7 }\n      isnsServerRegIfcpObjGroup
    \   OBJECT-GROUP\n          OBJECTS {\n             isnsRegEntityEID,\n             isnsRegEntityProtocol,\n
    \            isnsRegEntityManagementAddressType,\n             isnsRegEntityManagementAddress,\n
    \            isnsRegEntityTimestamp,\n             isnsRegEntityVersionMin,\n
    \            isnsRegEntityVersionMax,\n             isnsRegEntityRegistrationPeriod,\n
    \            isnsRegEntityInfoNumPortals,\n             isnsRegEntityInfoNumPortalGroups,\n
    \            isnsRegEntityInfoNumIscsiNodes,\n             isnsRegEntityInfoNumFcPorts,\n
    \            isnsRegEntityInfoNumFcNodes,\n             isnsRegPortalAddressType,\n
    \            isnsRegPortalAddress,\n             isnsRegPortalPortType,\n             isnsRegPortalPort,\n
    \            isnsRegPortalSymbolicName,\n             isnsRegPortalEsiInterval,\n
    \            isnsRegPortalEsiPortType,\n             isnsRegPortalEsiPort,\n             isnsRegPortalScnPortType,\n
    \            isnsRegPortalScnPort,\n             isnsRegPortalSecurityInfo,\n
    \            isnsRegFcPortID,\n             isnsRegFcPortType,\n             isnsRegFcPortSymbolicName,\n
    \            isnsRegFcPortFabricPortWwn,\n             isnsRegFcPortHA,\n             isnsRegFcPortAddressType,\n
    \            isnsRegFcPortAddress,\n             isnsRegFcPortFcCos,\n             isnsRegFcPortFc4Types,\n
    \            isnsRegFcPortFc4Descr,\n             isnsRegFcPortFc4Features,\n
    \            isnsRegFcPortScnTypes,\n             isnsRegFcPortRole,\n             isnsRegFcPortFcNodeWwnn,\n
    \            isnsRegFcPortPpnWwn,\n             isnsRegFcNodeSymbolicName,\n             isnsRegFcNodeAddressType,\n
    \            isnsRegFcNodeAddress,\n             isnsRegFcNodeIPA,\n             isnsRegFcNodeProxyIscsiName,\n
    \            isnsRegFcNodeNumFcPorts,\n             isnsRegFcNodePortEntityIndex\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Server registered iFCP managed objects.\"\n             ::= { isnsGroups
    8 }\n      isnsNotificationsObjGroup    OBJECT-GROUP\n          OBJECTS {\n             isnsInstanceInfo,\n
    \            isnsAddressNotificationType,\n             isnsAddressNotification,\n
    \            isnsTcpPortNotification,\n             isnsUdpPortNotification\n
    \                 }\n          STATUS                  current\n          DESCRIPTION\n
    \     \"iSNS Notification managed objects.\"\n             ::= { isnsGroups 9
    }\n      isnsServerNotificationGroup  NOTIFICATION-GROUP\n          NOTIFICATIONS
    {\n             isnsServerStart,\n             isnsServerShutdown\n                        }\n
    \         STATUS                  current\n          DESCRIPTION\n      \"iSNS
    Server Notification managed objects.\"\n             ::= { isnsGroups 10 }\n   END\n"
  title: 5.  MIB Module
- contents:
  - "6.  IANA Considerations\n   The MIB module in this document uses the following
    IANA-assigned\n   OBJECT IDENTIFIER values recorded in the SMI Numbers registry:\n
    \        Descriptor        OBJECT IDENTIFIER value\n         ----------        -----------------------\n
    \        isnsMIB           { mib-2 163 }\n   This RFC utilizes the IANA registry
    of iSNS parameters.  This\n   registry was created for the iSNS Specification
    [RFC4171], and is\n   located at http://www.iana.org/assignments/isns-parameters.\n
    \  Specifically, the isnsRegEntityProtocol values used in the MIB module\n   are
    the values for the Block Storage Protocols that IANA assigns and\n   documents
    in http://www.iana.org/assignments/isns-parameters.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   There are no management objects defined in this
    MIB module that have\n   a MAX-ACCESS clause of read-write and/or read-create.
    \ So, if this\n   MIB module is implemented correctly, then there is no risk that
    an\n   intruder can alter or create any management objects of this MIB\n   module
    via direct SNMP SET operations.\n   Some of the readable objects in this MIB module
    (i.e., objects with a\n   MAX-ACCESS other than not-accessible) may be considered
    sensitive or\n   vulnerable in some network environments.  It is thus important
    to\n   control even GET and/or NOTIFY access to these objects and possibly\n   to
    even encrypt the values of these objects when sending them over\n   the network
    via SNMP.  These are the tables and objects and their\n   sensitivity/vulnerability:\n
    \  The isnsDdsMemberTable contains information about which Discovery\n   Domains
    may be enabled at the same time.\n   The isnsDdTable contains information about
    Discovery Domains,\n   containing storage nodes with an ability to communicate
    and exchange\n   storage data.\n   The isnsDdIscsiMemberTable indicates which
    iSCSI nodes are contained\n   in which Discovery Domains.\n   The isnsDdPortalMemberTable
    indicates which iSCSI portals are\n   contained in which Discovery Domains.\n
    \  The isnsDdFcPortMemberTable indicates which iFCP FC N_Ports are\n   contained
    in which Discovery Domains.\n   The isnsControlNodeIscsiTable indicates which
    iSCSI nodes have the\n   ability to possibly control an iSNS server.\n   The isnsControlNodeFcPortTable
    indicates which iFCP FC N_Ports have\n   the ability to possibly control an iSNS
    server.\n   The above object tables provide information about storage objects\n
    \  sessions, and can indicate to a user who is communicating and\n   exchanging
    storage data.\n   SNMP versions prior to SNMPv3 did not include adequate security.\n
    \  Even if the network itself is secure (for example by using IPsec),\n   even
    then, there is no control as to who on the secure network is\n   allowed to access
    and GET/SET (read/change/create/delete) the objects\n   in this MIB module.\n
    \  It is RECOMMENDED that implementers consider the security features as\n   provided
    by the SNMPv3 framework (see [RFC3410], section 8),\n   including full support
    for the SNMPv3 cryptographic mechanisms (for\n   authentication and privacy).\n
    \  Further, deployment of SNMP versions prior to SNMPv3 is NOT\n   RECOMMENDED.
    \ Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable cryptographic
    security.  It is then a customer/operator\n   responsibility to ensure that the
    SNMP entity giving access to an\n   instance of this MIB module is properly configured
    to give access to\n   the objects only to those principals (users) that have legitimate\n
    \  rights to indeed GET or SET (change/create/delete) them.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC2578]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case J.,\n              Rose,
    M., and S. Waldbusser, \"Structure of Management\n              Information Version
    2 (SMIv2)\", STD 58, RFC 2578, April\n              1999.\n   [RFC2579]  McCloghrie,
    K., Perkins, D., Schoenwaelder, J., Case, J.,\n              Rose, M., and S.
    Waldbusser, \"Textual Conventions for\n              SMIv2\", STD 58, RFC 2579,
    April 1999.\n   [RFC2580]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,
    J.,\n              Rose, M., and S. Waldbusser, \"Conformance Statements for\n
    \             SMIv2\", STD 58, RFC 2580, April 1999.\n   [RFC3411]  Harrington,
    D., Presuhn, R., and B. Wijnen, \"An\n              Architecture for Describing
    Simple Network Management\n              Protocol (SNMP) Management Frameworks\",
    STD 62, RFC 3411,\n              December 2002.\n   [RFC3720]  Satran, J., Meth,
    K., Sapuntzakis, C., Chadalapaka, M.,\n              and E. Zeidner, \"Internet
    Small Computer Systems Interface\n              (iSCSI)\", RFC 3720, March 2004.\n
    \  [RFC4001]  Daniele, M., Haberman, B., Routhier, S., and J.\n              Schoenwaelder,
    \"Textual Conventions for Internet Network\n              Addresses\", RFC 4001,
    February 2005.\n   [RFC4044]  McCloghrie, K., \"Fibre Channel Management MIB\",
    RFC 4044,\n              May 2005.\n   [RFC4133]  McCloghrie, K. and A. Bierman,
    \"Entity MIB (Version 3)\",\n              RFC 4133, August 2005.\n   [RFC4171]
    \ Tseng, J., Gibbons, K., Travostino, F., Du Laney, C., and\n              J.
    Souza, \"Internet Storage Name Service (iSNS)\", RFC\n              4171, September
    2005.\n   [RFC4172]  Monia, C., Mullendore, R., Travostino, F., Jeong, W., and\n
    \             M. Edwards, \"iFCP - A Protocol for Internet Fibre Channel\n              Storage
    Networking\", RFC 4172, September 2005.\n"
  title: 8.  Normative References
- contents:
  - "9.  Informative References\n   [RFC3410]   Case, J., Mundy, R., Partain, D.,
    and B. Stewart,\n              \"Introduction and Applicability Statements for
    Internet-\n              Standard Management Framework\", RFC 3410, December 2002.\n"
  title: 9.  Informative References
- contents:
  - "10.  Acknowledgements\n   This memo is a product of the IP Storage (IPS) working
    group within\n   the Internet Engineering Task Force.\n   We wish to acknowledge
    the contributions and comments from the IPS\n   WG, including the following:\n
    \        IPS WG Chair: David Black\n         Former Editors: Josh Tseng and Tom
    McSweeney\n         MIB Editors: Keith McCloghrie and Bert Wijnen\n"
  title: 10.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Kevin Gibbons\n   2Wire, Inc.\n   1704 Automation Parkway\n
    \  San Jose, CA 95131\n   USA\n   Tel:   +1 408-895-1387\n   Fax:   +1 408-428-9590\n
    \  EMail: kgibbons@yahoo.com\n   G.D. Ramkumar\n   SnapTell, Inc.\n   2741 Middlefield
    Rd, Suite 200\n   Palo Alto, CA 94306\n   USA\n   Tel:   +1 650-326-7627\n   Fax:
    \  +1 650-326-7620\n   EMail: gramkumar@stanfordalumni.org\n   Scott Kipp\n   Brocade\n
    \  4 McDATA Pkwy\n   Broomfield, CO 80021\n   USA\n   Tel:   +1 720-558-3452\n
    \  Fax:   +1 720-558-8999\n   EMail: skipp@brocade.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
