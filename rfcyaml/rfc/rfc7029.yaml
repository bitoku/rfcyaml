- title: __initial_text__
  contents:
  - ' Extensible Authentication Protocol (EAP) Mutual Cryptographic Binding

    '
- title: Abstract
  contents:
  - "Abstract\n   As the Extensible Authentication Protocol (EAP) evolves, EAP peers\n\
    \   rely increasingly on information received from the EAP server.  EAP\n   extensions\
    \ such as channel binding or network posture information are\n   often carried\
    \ in tunnel methods; peers are likely to rely on this\n   information.  Cryptographic\
    \ binding is a facility described in RFC\n   3748 that protects tunnel methods\
    \ against man-in-the-middle attacks.\n   However, cryptographic binding focuses\
    \ on protecting the server\n   rather than the peer.  This memo explores attacks\
    \ possible when the\n   peer is not protected from man-in-the-middle attacks and\
    \ recommends\n   cryptographic binding based on an Extended Master Session Key,\
    \ a new\n   form of cryptographic binding that protects both peer and server\n\
    \   along with other mitigations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7029.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Keywords for Requirement Levels ............................5\n  \
    \ 2. An Example Problem ..............................................5\n   3.\
    \ The Server Insertion Attack .....................................6\n      3.1.\
    \ Conditions for the Attack ..................................7\n      3.2. Mitigation\
    \ Strategies ......................................8\n           3.2.1. Server\
    \ Authentication ...............................8\n           3.2.2. Server Policy\
    \ .......................................9\n           3.2.3. Existing Cryptographic\
    \ Binding .....................12\n           3.2.4. Introducing EMSK-Based Cryptographic\
    \ Binding .......12\n           3.2.5. Mix Key into Long-Term Credentials .................14\n\
    \      3.3. Intended Intermediates ....................................14\n  \
    \ 4. Recommendations ................................................15\n    \
    \  4.1. Mutual Cryptographic Binding ..............................15\n      4.2.\
    \ State Tracking ............................................15\n      4.3. Certificate\
    \ Naming ........................................16\n      4.4. Inner Mixing ..............................................16\n\
    \   5. Survey of Tunnel Methods .......................................16\n  \
    \    5.1. Tunnel EAP (TEAP) Method ..................................16\n    \
    \  5.2. Flexible Authentication via Secure Tunneling (FAST) .......17\n      5.3.\
    \ EAP Tunneled Transport Layer Security (EAP-TTLS) ..........17\n   6. Security\
    \ Considerations ........................................17\n   7. Acknowledgements\
    \ ...............................................18\n   8. References .....................................................18\n\
    \      8.1. Normative References ......................................18\n  \
    \    8.2. Informative References ....................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP) [RFC3748] provides\n\
    \   authentication between a peer (a party accessing some service) and a\n   authentication\
    \ server.  Traditionally, peers have not relied\n   significantly on information\
    \ received from EAP servers.  However,\n   facilities such as EAP channel binding\
    \ [RFC6677] provide the peer\n   with confirmation of information about the resource\
    \ it is accessing.\n   Other facilities such as EAP Posture Transport [PT-EAP]\
    \ permit a peer\n   and EAP server to discuss the security properties of accessed\n\
    \   networks.  Both of these facilities provide peers with information\n   they\
    \ need to rely on and provide attackers who are able to\n   impersonate an EAP\
    \ server to a peer with new opportunities for\n   attack.\n   Instead of adding\
    \ these new facilities to all EAP methods, work has\n   focused on adding support\
    \ to tunnel methods [RFC6678].  There are\n   numerous tunnel methods, including\
    \ [RFC4851] and [RFC5281], and work\n   on building a Standards Track tunnel method\
    \ [TEAP].  These tunnel\n   methods are extensible.  By adding an extension to\
    \ support a facility\n   such as channel binding to a tunnel method, an extension\
    \ can be used\n   with any inner method carried in the tunnel.\n   Tunnel methods\
    \ need to be careful about man-in-the-middle attacks.\n   See [RFC6678] (Sections\
    \ 3.2 and 4.6.3) and [TUNNEL-MITM] for a\n   detailed description of these attacks.\
    \  For example, an attack can\n   happen when a peer is willing to perform authentication\
    \ inside and\n   outside a tunnel.  An attacker can impersonate the EAP server\
    \ and\n   offer the inner method to the peer.  However, on the other side, the\n\
    \   attacker acts as a man-in-the-middle and opens a tunnel to the real\n   EAP\
    \ server.  Figure 1 illustrates this attack.  At the end of the\n   attack, the\
    \ EAP server believes it is talking to the peer.  At the\n   inner method level,\
    \ this is true.  At the outer method level,\n   however, the server is talking\
    \ to the attacker.\n    Peer                Attacker         Service         AAA\
    \ Server\n     |                     |                 |                |\n  \
    \   |                     |                 |                |\n     |Peer Initiates\
    \ Connection to a Service |                |\n     |---------------------+-------X-------->|\
    \                |\n     |   (Intercepted by an Attacker)        |           \
    \     |\n     |                     |                 |                |\n   \
    \  |                     |        Tunnel Establishment      |\n     |        \
    \             |<-------------------------------->|\n     |                   \
    \  |                 |                |\n     |                     |..................................|\n\
    \     |                     |              Tunnel              |\n     |    Non-Tunneled\
    \     |                 |                |\n     |       Method        |  Tunneled\
    \ Authentication Method  |\n     |<===================>|<================================>|\n\
    \     |                     |                 |                |\n     |     \
    \                |..................................|\n     |                \
    \     |                 |                |\n     |                     |    Attacker\
    \     |<--- MSK keys --|\n     |                     | Connected as    |     \
    \           |\n     |                     |      Peer       |                |\n\
    \     |                     |<--------------->|                |\n   A classic\
    \ tunnel attack where the attacker inserts an extra tunnel\n   between the attacker\
    \ and EAP server.\n                      Figure 1: Classic Tunnel Attack\n   There\
    \ are two mitigation strategies for this classic attack.  First,\n   security\
    \ policy can be set up so that the same method is not offered\n   by a server\
    \ both inside and outside a tunnel.  Second, a technical\n   solution is available\
    \ if the inner method is sufficiently strong:\n   cryptographic binding is a security\
    \ property of a tunnel method under\n   which the EAP server confirms that the\
    \ inner and outer parties are\n   the same.  Cryptographic binding is typically\
    \ implemented by\n   requiring the outer party (the other end of the tunnel) to\
    \ prove\n   knowledge of the Master Session Key (MSK) of the inner method.  This\n\
    \   proves to the server that the inner and outer exchanges are with the\n   same\
    \ party.  RFC 3748's definition of cryptographic binding allows\n   for an optional\
    \ proof to the peer that the inner and outer exchanges\n   are with the same party.\
    \  As discussed below, proving knowledge of\n   the MSK is insufficient to prove\
    \ to the peer that the inner and outer\n   exchanges are with the same party.\n"
- title: 1.1.  Keywords for Requirement Levels
  contents:
  - "1.1.  Keywords for Requirement Levels\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  An Example Problem
  contents:
  - "2.  An Example Problem\n   The GSS-EAP (Generic Security Service Extensible Authentication\n\
    \   Protocol) mechanism [GSS-EAP] provides application authentication\n   using\
    \ EAP.  A peer could reasonably trust some applications\n   significantly more\
    \ than others.  If the peer sends confidential\n   information to some applications,\
    \ an attacker may gain significant\n   value from convincing the peer that the\
    \ attacker is the trusted\n   application.  Channel bindings are used to provide\
    \ information to the\n   peer about the application service to which the peer\
    \ connects.  Prior\n   to channel bindings, peers could not distinguish one Network\
    \ Access\n   Service (NAS) from another, so attacks where one NAS impersonated\n\
    \   another were out of scope.  However, channel bindings add this\n   capability\
    \ and thus expands the threat model of EAP.  The GSS-EAP\n   mechanism requires\
    \ distinguishing one service from another.\n   Consider the following example.\
    \  A relatively untrusted service, say\n   a print server, has been compromised.\
    \  A user is attempting to\n   connect to a trusted service such as a financial\
    \ application.  Both\n   the print server and the financial application use an\
    \ Authentication,\n   Authorization, and Accounting protocol (AAA) to transport\
    \ EAP\n   authentication back to the user's EAP server.  The print server\n  \
    \ mounts a man-in-the-middle attack on the user's connection to the\n   financial\
    \ application and claims to be the application.\n   The print server offers a\
    \ tunnel method towards the peer.  The print\n   server extracts the inner method\
    \ from the tunnel and sends it on\n   towards the AAA server.  Channel binding\
    \ happens at the tunnel method\n   though.  So, the print server is happy to confirm\
    \ that it is the\n   financial application.  After the inner method completes,\
    \ the EAP\n   server sends the MSK to the print server over the AAA protocol.\
    \  If\n   only the MSK is needed for cryptographic binding, then the print\n \
    \  server can successfully perform cryptographic binding and may be able\n   to\
    \ impersonate the financial application to the peer.\n    Peer               \
    \ Attacker         Service         AAA Server\n     |                     |  \
    \               |                |\n     |                     |             \
    \    |                |\n     |Peer Initiates Connection to a Service |      \
    \          |\n     |---------------------+----X----------->|                |\n\
    \     |   (Intercepted by an Attacker)        |                |\n     |     \
    \                |                 |                |\n     |                \
    \     |                 |                |\n     | Tunnel Establishment|     \
    \            |                |\n     |<------------------->|                \
    \ |                |\n     |.....................|                 |         \
    \       |\n     |       Tunnel        |                 |                |\n \
    \    |                     |                                  |\n     |      Tunneled\
    \       |             Non-Tunneled         |\n     |       Method        |   \
    \     Authentication Method     |\n     |<===================>|<================================>|\n\
    \     |                     |(Same as Inner Method from Tunnel)|\n     |.....................|\
    \                 |                |\n     |                     |           \
    \      |                |\n     |        Peer         |                 |    \
    \            |\n     |    Connected to     |<----------------------MSK keys --|\n\
    \     |      Attacker       |                 |                |\n     |<------------------->|\
    \                 |                |\n     |                     |           \
    \      |                |\n   A modified tunnel attack when an extra server rather\
    \ than extra\n   client is inserted.\n    Figure 2: Channel Binding Requires More\
    \ than Cryptographic Binding\n   This attack is not specific to GSS-EAP.  The\
    \ channel bindings\n   specification [RFC6677] describes a number of situations\
    \ where\n   channel bindings are important for network access.  In these\n   situations,\
    \ one NAS could impersonate another by using a similar\n   attack.\n"
- title: 3.  The Server Insertion Attack
  contents:
  - "3.  The Server Insertion Attack\n   The previous section described an example\
    \ of the server insertion\n   attack.  In this attack, one party adds a layer\
    \ of tunneling such\n   that from the perspective of the EAP peer, there are more\
    \ methods\n   than from the perspective of the EAP server.  This attack is most\n\
    \   beneficial when the party inserting the extra tunnel is a legitimate\n   NAS,\
    \ so mitigations need to be able to prevent a legitimate NAS from\n   inappropriately\
    \ adding a layer of tunneling.  Some deployments\n   utilize an intentional intermediary\
    \ that adds an extra level of EAP\n   tunneling between the peer and the EAP server;\
    \ see Section 3.3 for a\n   discussion.\n"
- title: 3.1.  Conditions for the Attack
  contents:
  - "3.1.  Conditions for the Attack\n   For an inserted server attack to have value,\
    \ the attacker needs to\n   gain an advantage from its attack.  An attacker could\
    \ gain an\n   advantage in the following ways:\n   o  The attacker can send information\
    \ to a peer that the peer would\n      trust from the EAP server but not the attacker.\
    \  Examples of this\n      include channel-binding responses.\n   o  The peer\
    \ sends information to the attacker that was intended for\n      the EAP server.\
    \  For example, the inner user identity may disclose\n      privacy-sensitive\
    \ information.  The channel-binding request may\n      disclose what service the\
    \ peer wishes to connect to.\n   o  The attacker may influence session parameters.\
    \  For example, if\n      the attacker can influence the MSK, then the attacker\
    \ may be able\n      to read or influence session traffic and mount an attack\
    \ on the\n      confidentiality or integrity of the resulting session.\n   o \
    \ An attacker may impact availability of the session.  In practice\n      though,\
    \ an attacker that can mount a server insertion attack is\n      likely to be\
    \ able to impact availability in other ways.\n   For this attack to be possible,\
    \ the following conditions need to\n   hold:\n   1.  The attacker needs to be\
    \ able to establish a tunnel method with\n       the peer over which the peer\
    \ will authenticate.\n   2.  The attacker needs to be able to respond to any inner\n\
    \       authentication.  For example, an attacker who is a legitimate NAS\n  \
    \     can forward the inner authentication over AAA towards the EAP\n       server.\
    \  Note that the inner authentication may not be EAP.\n   3.  Typically, the attacker\
    \ needs to be able to complete the tunnel\n       method after inner authentication.\
    \  This may not be necessary if\n       the attacker is gaining advantage from\
    \ information sent by the\n       peer over the tunnel.\n   4.  In some cases,\
    \ the attacker may need to complete a Secure\n       Association Protocol (SAP)\
    \ or otherwise demonstrate knowledge of\n       the MSK after the tunnel method\
    \ successfully completes.\n   Attackers who are legitimate NASes are the primary\
    \ focus of this\n   memo.  Previous work has provided mitigation against attackers\
    \ who\n   are not NASes; these mitigations are briefly discussed.\n"
- title: 3.2.  Mitigation Strategies
  contents:
  - '3.2.  Mitigation Strategies

    '
- title: 3.2.1.  Server Authentication
  contents:
  - "3.2.1.  Server Authentication\n   If the peer confirms the identity of the party\
    \ that the tunnel method\n   is established with, the peer prevents the first\
    \ condition (attacker\n   establishing a tunnel method).  Many tunnel methods\
    \ rely on Transport\n   Layer Security (TLS) [RFC5281] [TEAP].  The specifications\
    \ for these\n   methods tend to encourage or mandate certificate checking.  If\
    \ the\n   TLS certificate is validated back to a trust anchor and the identity\n\
    \   of the tunnel method server confirmed, then the first attack\n   condition\
    \ cannot be met.\n   Many challenges make server authentication difficult.  There\
    \ is not\n   an obvious name by which to identify a tunnel method server.  It\
    \ is\n   not obvious where in the tunnel server certificate the name should be\n\
    \   found.  One particularly problematic practice is to use a certificate\n  \
    \ that names the host on which the tunnel server runs.  Given such a\n   name,\
    \ it is very difficult for a peer to understand whether that\n   server is intended\
    \ to be a tunnel method server for the realm.\n   It's not clear what trust anchors\
    \ to use for tunnel servers.  Using\n   commercial Certificate Authorities (CAs)\
    \ is probably undesirable\n   because tunnel servers often operate in a closed\
    \ community and are\n   often provisioned with certificates issued by that community.\
    \  Using\n   commercial CAs can be particularly problematic with peers that\n\
    \   support hostnames in certificates.  Then anyone who can obtain a\n   certificate\
    \ for any host in the domain being contacted can\n   impersonate a tunnel server.\n\
    \   These difficulties lead to poor deployment of good certificate\n   validation.\
    \  Many peers make it easy to disable certificate\n   validation.  Other peers\
    \ validate back to trust anchors but do not\n   check names of certificates. \
    \ What name types are supported and what\n   configuration is easy to perform\
    \ depend significantly on the peer in\n   question.\n   Specifications also make\
    \ the problem worse.  For example, [RFC5281]\n   indicates that the only impact\
    \ of failing to perform certificate\n   validation is that the inner method can\
    \ be attacked.  Administrators\n   and implementors believing this claim may believe\
    \ that protection\n   from passive attacks is sufficient.\n   In addition, some\
    \ deployments such as provisioning or strong inner\n   methods are designed to\
    \ work without certificate validation.\n   Section 3.9 of the tunnel requirements\
    \ document [RFC6678] discusses\n   this requirement.\n"
- title: 3.2.2.  Server Policy
  contents:
  - "3.2.2.  Server Policy\n   Server policy can potentially prevent the second condition\
    \ (attacker\n   being able to respond to inner authentication) from being possible.\n\
    \   If the server only performs a particular inner authentication within\n   a\
    \ tunnel, then the attacker cannot gain a response to the inner\n   authentication\
    \ without there being such a tunnel.  The attacker may\n   be able to add a second\
    \ layer of tunnels; see Figure 3.  The inner\n   tunnel may limit the attacker's\
    \ capabilities; for example, if channel\n   binding is performed over tunnel t2\
    \ in the figure, then an attacker\n   cannot observe or influence it.\n    Peer\
    \                Attacker         Service         AAA Server\n     |         \
    \            |                 |                |\n     |                    \
    \ |                 |                |\n     |Peer Initiates Connection to a Service\
    \ |                |\n     |---------------------+----X----------->|         \
    \       |\n     |   (Intercepted by an Attacker)        |                |\n \
    \    |                     |                 |                |\n     |      \
    \               |                 |                |\n     | Tunnel Establishment|\
    \                 |                |\n     |<------------------->|           \
    \      |                |\n     |.....................|                 |    \
    \            |\n     |       Tunnel t1     |                 |               \
    \ |\n     |                     |                 |                |\n     |..........................................\
    \ .............|\n     |                        Tunnel t2                    \
    \   |\n     |                                                        |\n     |\
    \                                                        |\n     |           \
    \            Inner Method                     |\n     |<======================================================>|\n\
    \     |                                                        |\n     |..........................................\
    \ .............|\n     |                     |                 |             \
    \   |\n     |.....................|                 |                |\n     |\
    \                     |                 |                |\n     |        Peer\
    \         |                 |                |\n     |    Connected to     |<----------------------MSK\
    \ keys --|\n     |      Attacker       |                 |                |\n\
    \     |<------------------->|                 |                |\n     |     \
    \                |                 |                |\n   A tunnel t1 from the\
    \ peer to the attacker contains a tunnel t2 from\n   the peer to the home EAP\
    \ server.  Inside tunnel t2 is an inner\n   authentication.\n                \
    \    Figure 3: Multiple Layered Tunnels\n   Peer policy can be combined with this\
    \ server policy to help prevent\n   conditions 1 (attacker can establish a tunnel\
    \ the peer will use) and\n   2 (attacker can respond to inner authentication).\
    \  If the peer\n   requires exactly one tunnel of a particular type and the EAP\
    \ server\n   only performs inner authentication over a tunnel of this type, then\n\
    \   the attacker cannot establish tunnel t1 in the figure above.\n   Configuring\
    \ this peer policy may be more challenging than configuring\n   policy on the\
    \ EAP server.\n   An attacker may be able to mount a more traditional man-in-the-middle\n\
    \   attack in this instance; see Figure 4.  This policy on the peer and\n   EAP\
    \ server combined with a tunnel method that supports cryptographic\n   binding\
    \ will allow the EAP server to detect the attacker.  This means\n   the attacker\
    \ cannot act as a legitimate NAS and, in particular, does\n   not obtain the MSK.\
    \  So, if the tunnel between the attacker and peer\n   also requires cryptographic\
    \ binding and if the cryptographic binding\n   requires both the EAP server and\
    \ peer to prove knowledge of the inner\n   MSK, then the authentication will fail.\
    \  If cryptographic binding is\n   not performed, then this attack may succeed.\n\
    \     Peer                Attacker         Service         AAA Server\n      |\
    \                     |                 |                |\n      |          \
    \           |                 |                |\n      |Peer Initiates Connection\
    \ to a Service |                |\n      |---------------------+----X----------->|\
    \                |\n      |   (Intercepted by an Attacker)        |          \
    \      |\n      |                     |                 |                |\n \
    \     |                     |                 |                |\n      | Tunnel\
    \ Establishment|       Tunnel Establishment       |\n      |<------------------->|<-------------------------------->|\n\
    \      |.....................|.................... .............|\n      |   \
    \    Tunnel t1     |             Tunnel t2            |\n      |             \
    \        |                                  |\n      |      Tunneled       | \
    \                                 |\n      |       Method        |        Tunneled\
    \ Method           |\n      |<===================>|<================================>|\n\
    \      |                     |                                  |\n      |.....................|..................................|\n\
    \      |                     |                 |                |\n      |   \
    \     Peer         |                 |                |\n      |    Connected\
    \ to     |                 |                |\n      |      Attacker       | \
    \                |                |\n      |<------------------->|           \
    \      |                |\n      |                     |                 |   \
    \             |\n   A tunnel t1 extends from the peer to the attacker.  A tunnel\
    \ t2\n   extends from the attacker to the home EAP server.  An inner EAP\n   authentication\
    \ is forwarded unmodified by the attacker from tunnel t1\n   to tunnel t2.  The\
    \ attacker can observe this inner authentication.\n             Figure 4: A Traditional\
    \ Man-in-the-Middle Attack\n   Cryptographic binding is only a valuable component\
    \ of a defense if\n   the inner authentication is a key-deriving EAP method. \
    \ Most tunnel\n   methods also support non-EAP inner authentication such as Microsoft\n\
    \   CHAP version 2 [RFC2759].  This may undermine cryptographic binding\n   in\
    \ a number of ways.  An attacker may be able to convert an EAP\n   method into\
    \ a compatible non-EAP form of the same credential to\n   suppress cryptographic\
    \ binding.  In addition, an inner authentication\n   may be available through\
    \ an entirely different means.  For example, a\n   Lightweight Directory Access\
    \ Protocol [RFC4510] or other directory\n   server may provide an attacker a way\
    \ to get challenges and provide\n   responses for an authentication mechanism\
    \ entirely outside of the\n   AAA/EAP context.  An attacker with this capability\
    \ may be able to get\n   around server policy requiring an inner authentication\
    \ be used only\n   in a given type of tunnel.\n   To recap, the following policy\
    \ conditions appear sufficient to\n   prevent a server insertion attack:\n   1.\
    \  Peer and EAP server require a particular inner EAP method used\n       within\
    \ a particular tunnel method.\n   2.  The inner EAP method's authentication is\
    \ only available within\n       the tunnel and through no other means including\
    \ non-EAP means.\n   3.  The inner EAP method produces a key.\n   4.  The tunnel\
    \ method uses cryptographic binding and the peer\n       requires the other end\
    \ of the tunnel to prove knowledge of the\n       inner MSK.\n"
- title: 3.2.3.  Existing Cryptographic Binding
  contents:
  - "3.2.3.  Existing Cryptographic Binding\n   The most advanced examples of cryptographic\
    \ binding today work at two\n   levels.  First, the server and peer prove to each\
    \ other knowledge of\n   the inner MSK.  Then, the inner MSK is combined with\
    \ some outer key\n   material to form the tunnel's EAP keys.  This is sufficient\
    \ to detect\n   an inserted server or peer provided that the attacker does not\
    \ learn\n   the inner MSK.  This seems sufficient to defend against attackers\
    \ who\n   cannot act as a legitimate NAS.\n   The definition of cryptographic\
    \ binding in [RFC3748] does not require\n   these steps.  To meet that definition,\
    \ it would be sufficient for a\n   peer to prove knowledge of the inner key to\
    \ the EAP server.  This\n   would open some additional attacks.  For example,\
    \ by indicating\n   success, an attacker might be able to mask a cryptographic\
    \ binding\n   failure.  The peer is unlikely to be able to detect the failure,\n\
    \   especially if only the tunnel key material is used for the final\n   keys.\n\
    \   As discussed in the previous section, cryptographic binding is only\n   effective\
    \ when the inner method is EAP.\n"
- title: 3.2.4.  Introducing EMSK-Based Cryptographic Binding
  contents:
  - "3.2.4.  Introducing EMSK-Based Cryptographic Binding\n   Cryptographic binding\
    \ can be strengthened when the inner EAP method\n   supports an Extended Master\
    \ Session Key (EMSK).  The EMSK is never\n   disclosed to any party other than\
    \ the EAP server or peer, so even a\n   legitimate NAS cannot learn the EMSK.\
    \  So, if the same techniques\n   currently applied to the inner MSK are applied\
    \ to the inner EMSK,\n   then condition 3 (completing tunnel authentication) will\
    \ not hold\n   because the attacker cannot complete this new form of cryptographic\n\
    \   binding.  This does not prevent the attacker from learning\n   confidential\
    \ information such as a channel-binding request sent over\n   the tunnel prior\
    \ to cryptographic binding.\n   Obviously, as with all forms of cryptographic\
    \ binding, cryptographic\n   binding only works for key-deriving inner EAP methods.\
    \  Also, some\n   deployments (see Section 3.3) insert intermediates between the\
    \ peer\n   and the EAP server.  EMSK-based cryptographic binding is incompatible\n\
    \   with these deployments because the intermediate cannot learn the\n   EMSK.\n\
    \   Formally, EMSK-based cryptographic binding is a security claim for\n   EAP\
    \ tunnel methods that holds when:\n   1.  The peer proves to the server that the\
    \ peer participating in any\n       inner method is the same as the peer for the\
    \ tunnel method.\n   2.  The server proves to the peer that the server for any\
    \ inner\n       method is the same as the server for the tunnel method.\n   3.\
    \  The MSK and EMSK for the tunnel depend on the MSK and EMSK of\n       inner\
    \ methods.\n   4.  The peer MUST be able to force the authentication to fail if\
    \ the\n       peer is unable to confirm the identity of the server.\n   5.  Proofs\
    \ offered need to be secure even against attackers who know\n       the inner\
    \ method MSK.\n   If EMSK-based cryptographic binding is not an optional facility,\
    \ it\n   provides a strong defense against server insertion attacks and other\n\
    \   tunnel man-in-the-middle (MITM) attacks for inner methods that\n   provide\
    \ an EMSK.  The strength of the defense is dependent on the\n   strength of the\
    \ inner method.  EMSK-based cryptographic binding MAY\n   be provided as an optional\
    \ facility.  The value of EMSK-based\n   cryptographic binding is reduced somewhat\
    \ if it is an optional\n   feature.  It permits configurations where a peer uses\
    \ other means to\n   authenticate the server if the peer has sufficient information\n\
    \   configured to validate the certificate and identity of an EAP server\n   while\
    \ using EMSK-based cryptographic binding for deployments where\n   that is possible.\n\
    \   If EMSK-based cryptographic binding is an optional facility, the\n   negotiation\
    \ of whether to use it MUST be protected by the inner MSK\n   or EMSK.  Typically,\
    \ the MSK will be used because the primary\n   advantage of making EMSK-based\
    \ cryptographic binding an optional\n   facility is to permit intermediates who\
    \ know only the MSK to decline\n   to use EMSK-based cryptographic binding.  The\
    \ peer MUST have an\n   opportunity to fail the authentication after the server\
    \ declines to\n   use EMSK-based cryptographic binding.\n"
- title: 3.2.5.  Mix Key into Long-Term Credentials
  contents:
  - "3.2.5.  Mix Key into Long-Term Credentials\n   Another defense against tunnel\
    \ MITM attacks, potentially including\n   server insertion attacks, is to use\
    \ a different credential for\n   tunneled methods from other authentications.\
    \  This may prevent the\n   second condition (attacker being able to respond to\
    \ inner\n   authentication) from taking place.  For example, if key material from\n\
    \   the tunnel is mixed into a shared secret or password that is the\n   basis\
    \ of the inner authentication, then the second condition will not\n   hold unless\
    \ the attacker already knows this shared secret.  The\n   advantage of this approach\
    \ is that it seems to be the only way to\n   strengthen non-EAP inner authentications\
    \ within a tunnel.\n   There are several disadvantages.  Choosing a function to\
    \ mix the\n   tunnel key material into the inner authentication will be very\n\
    \   dependent on the inner authentication.  In addition, this appears to\n   involve\
    \ a layering violation.  However, exploring the possibility of\n   providing a\
    \ solution like this seems important because it can\n   function for inner authentications\
    \ where no other approach will work.\n"
- title: 3.3.  Intended Intermediates
  contents:
  - "3.3.  Intended Intermediates\n   Some deployments introduce a tunnel server separate\
    \ from the EAP\n   server; see [RFC5281] for an example of this style of deployment.\n\
    \   The tunnel server is between the NAS and the EAP server.  The only\n   difference\
    \ between such an intermediate and an attacker is that the\n   intermediate provides\
    \ some function valuable to the peer or EAP\n   server and that the intermediate\
    \ is trusted by the peer.  If peers\n   are configured with the necessary information\
    \ to validate\n   certificates of these intermediates and to confirm their identity,\n\
    \   then tunnel MITM and inserted server attacks can be defended against.\n  \
    \ The intermediates need to be trusted with regard to channel binding\n   and\
    \ other services that the peer depends on.\n   Support for trusted intermediates\
    \ is not a requirement according to\n   the tunnel method requirements.\n   It\
    \ seems reasonable to treat trusted intermediates as a special case\n   if they\
    \ are supported and to focus on the security of the case where\n   there are not\
    \ intermediates in the tunnel as the common case.\n"
- title: 4.  Recommendations
  contents:
  - '4.  Recommendations

    '
- title: 4.1.  Mutual Cryptographic Binding
  contents:
  - "4.1.  Mutual Cryptographic Binding\n   The Tunnel EAP method [TEAP] should gain\
    \ support for EMSK-based\n   cryptographic binding.\n   As channel-binding support\
    \ is added to existing EAP methods, EMSK-\n   based cryptographic binding or some\
    \ other form of cryptographic\n   binding that protects against server insertion\
    \ should also be added\n   to these methods.  Mutual cryptographic binding may\
    \ also be valuable\n   when other services are added to EAP methods that may require\
    \ a peer\n   trust an EAP server.\n"
- title: 4.2.  State Tracking
  contents:
  - "4.2.  State Tracking\n   Today, mutual authentication in EAP is thought of as\
    \ a security claim\n   about a method.  However, in practice, it's an attribute\
    \ of a\n   particular exchange.  Mutual authentication can be obtained via\n \
    \  checking certificates, through mutual cryptographic binding, or in\n   very\
    \ controlled cases through carefully crafted peer and server\n   policy combined\
    \ with existing cryptographic binding.  Using services\n   like channel binding\
    \ that involve the peer trusting the EAP server\n   should require mutual authentication\
    \ be present in the session.\n   To accomplish this, implementations including\
    \ channel binding or\n   other peer services MUST track whether mutual authentication\
    \ has\n   happened.  They SHOULD default to not permitting these peer services\n\
    \   unless mutual authentication has happened.  They SHOULD support a\n   configuration\
    \ where the peer fails to authenticate unless mutual\n   authentication takes\
    \ place.  Discussion of whether this configuration\n   should be recommended as\
    \ a default is required.\n   The Tunnel EAP method [TEAP] should permit peers\
    \ to force\n   authentication failure if they are unable to perform mutual\n \
    \  authentication.  The protocol should permit this to be deferred until\n   after\
    \ mutual cryptographic binding is considered.\n   Services such as channel binding\
    \ should be deferred until after\n   cryptographic binding or mutual cryptographic\
    \ binding.\n   An additional complication arises when a tunnel method authenticates\n\
    \   multiple parties such as authenticating both the peer machine and the\n  \
    \ peer user to the EAP server.  Depending on how mutual authentication\n   is\
    \ achieved, only some of these parties may have confidence in it.\n   For example,\
    \ if a strong shared secret is used to mutually\n   authenticate the user and\
    \ the EAP server, the machine may not have\n   confidence that the EAP server\
    \ is the authenticated party if the\n   machine cannot trust the user not to disclose\
    \ the shared secret to an\n   attacker.  In these cases, the parties that have\
    \ achieved mutual\n   authentication need to be considered when evaluating whether\
    \ to use\n   peer services.\n"
- title: 4.3.  Certificate Naming
  contents:
  - "4.3.  Certificate Naming\n   Work is required to promote interoperable deployment\
    \ of server\n   certificate validation by peers.  A standard way to name EAP servers\n\
    \   is required.  Recommendations for what name forms peers should\n   implement\
    \ is required.\n"
- title: 4.4.  Inner Mixing
  contents:
  - "4.4.  Inner Mixing\n   More consideration of the proposal to mix some key material\
    \ into\n   inner authentications is desired.  Currently, the proposal is under-\n\
    \   defined and fairly invasive.  Are there versions of this proposal\n   that\
    \ would be valuable?  Is there a way to view it as something more\n   abstract\
    \ so that it does not involve a combinatorial explosion as a\n   result of considering\
    \ specific tunnels and inner methods?\n"
- title: 5.  Survey of Tunnel Methods
  contents:
  - '5.  Survey of Tunnel Methods

    '
- title: 5.1.  Tunnel EAP (TEAP) Method
  contents:
  - "5.1.  Tunnel EAP (TEAP) Method\n   The Tunnel EAP method [TEAP] provides several\
    \ features designed to\n   limit man-in-the-middle vulnerabilities and provide\
    \ a safe platform\n   for peer services.\n   TEAP implementations support checking\
    \ the Network Access Identifier\n   (NAI) realm portion against a DNS subjectAlternativeName\
    \ in the\n   certificate of the TEAP server.  TEAP supports EMSK-based\n   cryptographic\
    \ binding as a way to achieve mutual cryptographic\n   binding.  TEAP also supports\
    \ MSK-based cryptographic binding for\n   cases where the EMSK is not available;\
    \ this cryptographic binding\n   does not provide sufficient assurance for peer\
    \ services.  TEAP\n   provides recommendations on conditions that need to be met\
    \ prior to\n   using peer services.  These recommendations explicitly address\
    \ when\n   the MSK-based cryptographic binding is sufficient and when EMSK-based\n\
    \   cryptographic binding is required.  TEAP meets the recommendations\n   for\
    \ implementations outlined in this memo.\n"
- title: 5.2.  Flexible Authentication via Secure Tunneling (FAST)
  contents:
  - "5.2.  Flexible Authentication via Secure Tunneling (FAST)\n   EAP-FAST [RFC4851]\
    \ provides MSK-based cryptographic binding.\n   EAP-FAST requires that server\
    \ certificates be validated.  However, no\n   guidance is given on how servers\
    \ are named, so the specification does\n   not provide enough guidance to interoperably\
    \ enforce this\n   requirement.\n   EAP-FAST does not support channel binding\
    \ or other peer services,\n   although the protocol is extensible and TLVs could\
    \ be defined for\n   peer services.  If the certificates are actually validated\
    \ and names\n   checked, then EAP-FAST would provide security guarantees sufficient\n\
    \   to use these peer services.  However, the cryptographic binding in\n   EAP-FAST\
    \ is not strong enough to secure peer services if the server\n   certificate is\
    \ not validated and name checked.\n"
- title: 5.3.  EAP Tunneled Transport Layer Security (EAP-TTLS)
  contents:
  - "5.3.  EAP Tunneled Transport Layer Security (EAP-TTLS)\n   The EAP Tunneled Transport\
    \ Layer Security Version 0 (EAP-TTLS)\n   [RFC5281] does not support cryptographic\
    \ binding.  It also does not\n   support peer services such as channel binding\
    \ although they could be\n   added using extensible AVPs.\n   EAP-TTLS recommends\
    \ that implementations SHOULD validate certificates\n   but gives no guidance\
    \ on how to handle naming.  Even if certificates\n   are validated, EAP-TTLS is\
    \ not generally suited to peer services.  As\n   an example, EAP-TTLS does not\
    \ include protected result indication.\n   So, an unprotected EAP success packet\
    \ can end the authentication.  In\n   addition, it is difficult for a peer to\
    \ request services such as\n   channel binding because the server ends the authentication\
    \ as soon as\n   authentication is successful.\n   A variety of extensions, including\
    \ EAP-TTLS version 1, improve some\n   of these concerns.  Specification and implementation\
    \ issues\n   complicate analysis of these extensions.  As an example, most\n \
    \  implementations can be tricked into using EAP-TTLS version 0.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This memo examines the security considerations\
    \ of providing new\n   classes of service within EAP methods.  Traditionally,\
    \ the primary\n   focus of EAP is authenticating the peer to the network.  However,\
    \ as\n   the peer places trust in the EAP server, mutual authentication\n   becomes\
    \ more important.  This memo examines the security of mutual\n   authentication\
    \ for EAP tunnel methods.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank Alan DeKok for helping\
    \ to explore\n   these attacks.  Alan focused the discussion on the importance\
    \ of\n   inner authentications that are not EAP and proposed mixing in key\n \
    \  material as a way to resolve these authentications.\n   Jari Arkko provided\
    \ a review of the attack and valuable context on\n   past efforts in developing\
    \ cryptographic binding.\n   Sam Hartman's and Margaret Wasserman's work on this\
    \ memo is funded by\n   Huawei.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and\
    \ H.\n              Levkowetz, \"Extensible Authentication Protocol (EAP)\", RFC\n\
    \              3748, June 2004.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [GSS-EAP]  Hartman, S. and J. Howlett, \"A GSS-API\
    \ Mechanism for the\n              Extensible Authentication Protocol\", Work\
    \ in Progress,\n              August 2012.\n   [PT-EAP]   Cam-Winget, N. and P.\
    \ Sangster, \"PT-EAP: Posture Transport\n              (PT) Protocol For EAP Tunnel\
    \ Methods\", Work in Progress,\n              March 2013.\n   [RFC2759]  Zorn,\
    \ G., \"Microsoft PPP CHAP Extensions, Version 2\", RFC\n              2759, January\
    \ 2000.\n   [RFC4510]  Zeilenga, K., \"Lightweight Directory Access Protocol\n\
    \              (LDAP): Technical Specification Road Map\", RFC 4510, June\n  \
    \            2006.\n   [RFC4851]  Cam-Winget, N., McGrew, D., Salowey, J., and\
    \ H. Zhou, \"The\n              Flexible Authentication via Secure Tunneling Extensible\n\
    \              Authentication Protocol Method (EAP-FAST)\", RFC 4851, May\n  \
    \            2007.\n   [RFC5281]  Funk, P. and S. Blake-Wilson, \"Extensible Authentication\n\
    \              Protocol Tunneled Transport Layer Security Authenticated\n    \
    \          Protocol Version 0 (EAP-TTLSv0)\", RFC 5281, August 2008.\n   [RFC6677]\
    \  Hartman, S., Clancy, T., and K. Hoeper, \"Channel-Binding\n              Support\
    \ for Extensible Authentication Protocol (EAP)\n              Methods\", RFC 6677,\
    \ July 2012.\n   [RFC6678]  Hoeper, K., Hanna, S., Zhou, H., and J. Salowey,\n\
    \              \"Requirements for a Tunnel-Based Extensible Authentication\n \
    \             Protocol (EAP) Method\", RFC 6678, July 2012.\n   [TEAP]     Zhou,\
    \ H., Cam-Winget, N., Salowey, J., and S. Hanna,\n              \"Tunnel EAP Method\
    \ (TEAP) Version 1\", Work in Progress,\n              September 2013.\n   [TUNNEL-MITM]\n\
    \              Asokan, N., Niemi, V., and K. Nyberg, \"Man-in-the-Middle\n   \
    \           in Tunnelled Authentication Protocols\", Cryptology ePrint\n     \
    \         Archive: Report 2002/163, November 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sam Hartman\n   Painless Security\n   EMail: hartmans-ietf@mit.edu\n\
    \   Margaret Wasserman\n   Painless Security\n   EMail: mrw@painless-security.com\n\
    \   URI:   http://www.painless-security.com/\n   Dacheng Zhang\n   Huawei\n  \
    \ EMail: zhangdacheng@huawei.com\n"
