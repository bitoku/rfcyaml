- contents:
  - '          Definition of Managed Objects for Battery Monitoring

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in the Internet community.\n   In
    particular, it defines managed objects that provide information on\n   the status
    of batteries in managed devices.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7577.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  The Internet-Standard Management Framework  . . . . . .
    . . .   5\n   3.  Design of the Battery MIB Module  . . . . . . . . . . . . .
    .   6\n     3.1.  MIB Module Structure  . . . . . . . . . . . . . . . . . .   6\n
    \    3.2.  Battery Technologies  . . . . . . . . . . . . . . . . . .   8\n       3.2.1.
    \ Guidelines for Adding Battery Technologies  . . . . .   9\n     3.3.  Battery
    Identification  . . . . . . . . . . . . . . . . .   9\n     3.4.  Charging Cycles
    . . . . . . . . . . . . . . . . . . . . .  10\n     3.5.  Charge Control  . .
    . . . . . . . . . . . . . . . . . . .  10\n     3.6.  Imported Definitions  .
    . . . . . . . . . . . . . . . . .  11\n   4.  Definitions . . . . . . . . . .
    . . . . . . . . . . . . . . .  11\n   5.  Security Considerations . . . . . .
    . . . . . . . . . . . . .  33\n   6.  IANA Considerations . . . . . . . . . .
    . . . . . . . . . . .  36\n     6.1.  SMI Object Identifier Registration  . .
    . . . . . . . . .  36\n     6.2.  Battery Technology Registration . . . . . .
    . . . . . . .  36\n   7.  References  . . . . . . . . . . . . . . . . . . . .
    . . . . .  37\n     7.1.  Normative References  . . . . . . . . . . . . . . .
    . . .  37\n     7.2.  Informative References  . . . . . . . . . . . . . . . .
    .  38\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  40\n
    \  Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  40\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Today, more and more managed devices contain batteries that
    supply\n   them with power when disconnected from electrical power distribution\n
    \  grids.  Common examples are nomadic and mobile devices, such as\n   notebook
    computers, netbooks, and smartphones.  The status of\n   batteries in such a device,
    particularly the charging status, is\n   typically controlled by automatic functions
    that act locally on the\n   device and manually by users of the device.\n   In
    addition to this, there is a need to monitor battery status of\n   these devices
    by network management systems.  This document defines a\n   portion of the Management
    Information Base (MIB) that provides a\n   means for monitoring batteries in or
    attached to managed devices.\n   The Battery MIB module defined in Section 4 meets
    the requirements\n   for monitoring the status of batteries specified in RFC 6988\n
    \  [RFC6988].\n   The Battery MIB module provides for monitoring the battery status.\n
    \  According to the framework for energy management [RFC7326], it is an\n   Energy
    Managed Object; thus, MIB modules such as the Power and Energy\n   Monitoring
    MIB [RFC7460] could, in principle, be implemented for\n   batteries.  The Battery
    MIB extends the more generic aspects of\n   energy management by adding battery-specific
    information.  Amongst\n   other things, the Battery MIB enables the monitoring
    of:\n   o  the current charge of a battery,\n   o  the age of a battery (charging
    cycles),\n   o  the state of a battery (e.g., being recharged),\n   o  last usage
    of a battery, and\n   o  maximum energy provided by a battery (remaining and total\n
    \     capacity).\n   Further, means are provided for battery-powered devices to
    send\n   notifications to inform the management system of needed replacement\n
    \  when the current battery charge has dropped below a certain\n   threshold.
    \ The same applies to the age of a battery.\n   Many battery-driven devices have
    existing instrumentation for\n   monitoring the battery status because this is
    already needed for\n   local control of the battery by the device.  This reduces
    the effort\n   for implementing the managed objects defined in this document.
    \ For\n   many devices, only additional software will be needed; no additional\n
    \  hardware instrumentation for battery monitoring is necessary.\n   Since there
    are a lot of devices in use that contain more than one\n   battery, means for
    battery monitoring defined in this document\n   support addressing multiple batteries
    within a single device.  Also,\n   batteries today often come in packages that
    can include\n   identification and might contain additional hardware and firmware.\n
    \  The former allows tracing a battery and allows continuous monitoring\n   even
    if the battery is installed in another device.  The firmware\n   version is useful
    information as the battery behavior might be\n   different for different firmware
    versions.\n   Not explicitly in the scope of definitions in this document are
    very\n   small backup batteries, for example, batteries used on a PC\n   motherboard
    to run the clock circuit and retain configuration memory\n   while the system
    is turned off.  Other means may be required for\n   reporting on these batteries.
    \ However, the MIB module defined in\n   Section 3.1 can be used for this purpose.\n
    \  A traditional type of managed device containing batteries is an\n   Uninterruptible
    Power Supply (UPS) system; these supply other devices\n   with electrical energy
    when the main power supply fails.  There is\n   already a MIB module for managing
    UPS systems defined in RFC 1628\n   [RFC1628].  The UPS MIB module includes managed
    objects for\n   monitoring the batteries contained in a UPS system.  However,
    the\n   information provided by the UPS MIB objects is limited and tailored\n
    \  to the particular needs of UPS systems.\n   A huge variety of battery technologies
    are available, and they are\n   evolving over time.  For different applications,
    different battery\n   technologies are preferable, for example, because of different\n
    \  weight, cost, robustness, charging time, etc.  Some technologies,\n   such
    as lead-acid batteries, are continuously in use for decades,\n   while others,
    such as nickel-based battery technologies (nickel-\n   cadmium and nickel-metal
    hydride), have, to a wide extent, been\n   replaced by lithium-based battery technologies
    (lithium-ion and\n   lithium polymer).\n   The Battery MIB module uses a generic
    abstraction of batteries that\n   is independent of particular battery technologies
    and expected to be\n   applicable to future technologies as well.  While identification
    of a\n   particular battery technology is supported by an extensible list of\n
    \  battery technology identifiers (see Section 3.2), individual\n   properties
    of the technologies are not modeled by the abstraction.\n   In particular, methods
    for charging a battery, and the parameters of\n   those methods, which vary greatly
    between different technologies are\n   not individually modeled.\n   Instead,
    the Battery MIB module uses a simple common charging model\n   with batteries
    being in one of the following states: 'charging',\n   'maintaining charge', 'not
    charging', and 'discharging'.  Control of\n   the charging process is limited
    to requests for transitions between\n   these states.  For charging controllers
    that use charging state\n   engines with more states, implementations of the Battery
    MIB module\n   need to map those states to the four listed above.\n   For energy
    management systems that require finer-grained control of\n   the battery charging
    process, additional means need to be developed;\n   for example, MIB modules that
    model richer sets of charging states\n   and parameters for charging states.\n
    \  All use cases sketched above assume that the batteries are contained\n   in
    a managed entity.  In a typical case, this entity also hosts the\n   SNMP applications
    (command responder and notification generator) and\n   the charging controller
    for contained batteries.  For definitions in\n   this document, it is not strictly
    required that batteries be\n   contained in the same managed entity, even though
    the Battery MIB\n   module (defined further below) uses the containment tree of
    the\n   Entity MIB module [RFC6933] for battery indexing.\n   External batteries
    can be supported as long as the charging\n   controller for these batteries is
    connected to the SNMP applications\n   that implement the Battery MIB module.
    \ An example with an external\n   battery is shown in the figure below.  It illustrates
    that the\n   Battery MIB module is designed as an interface between the management\n
    \  system and battery charging controller.  Out of scope of this\n   document
    is the interface between the battery charging controller and\n   controlled batteries.\n
    \                +-----------------------------------+\n                 |         management
    system         |\n                 +-----------------+-----------------+\n                                   |\n
    \                                  | Battery MIB\n                                   |\n
    \                +-----------------+-----------------+\n                 | managed
    element |                 |\n                 |                 |                 |\n
    \                |  +--------------+--------------+  |\n                 |  |
    battery charging controller |  |\n                 |  +-----+--------------+--------+
    \ |\n                 |        |              |           |\n                 |
    \ +-----+-----+        |           |\n                 |  | internal  |        |
    \          |\n                 |  | battery   |        |           |\n                 |
    \ +-----------+        |           |\n                 +-----------------------+-----------+\n
    \                                        |\n                                   +-----+-----+\n
    \                                  | external  |\n                                   |
    battery   |\n                                   +-----------+\n     Figure 1:
    Battery MIB as Interface between Management System and\n         Battery-Charging
    Controller Supporting External Batteries\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
    interpreted as described in RFC\n   2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies MIB\n
    \  modules that are compliant to the SMIv2, which is described in STD\n   58,
    RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58,RFC\n   2580 [RFC2580].\n"
  title: 2.  The Internet-Standard Management Framework
- contents:
  - '3.  Design of the Battery MIB Module

    '
  - contents:
    - "3.1.  MIB Module Structure\n   The Battery MIB module defined in this document
      defines objects for\n   reporting information about batteries.  All managed
      objects providing\n   information on the status of a battery are contained in
      a single\n   table called \"batteryTable\".  The batteryTable contains one\n
      \  conceptual row per battery.\n   Batteries are indexed by the entPhysicalIndex
      of the\n   entPhysicalTable defined in the Entity MIB module [RFC6933].  An\n
      \  implementation of the Entity MIB module complying with the\n   entity4CRCompliance
      MODULE-COMPLIANCE statement is required for\n   compliant implementations of
      the Battery MIB module.\n   If a battery is replaced, and the replacing battery
      uses the same\n   physical connector as the replaced battery, then the replacing\n
      \  battery MUST be indexed with the same value of object\n   entPhysicalIndex
      as the replaced battery.\n   The kind of entity in the entPhysicalTable of the
      Entity MIB module\n   is indicated by the value of enumeration object entPhysicalClass.\n
      \  All batteries SHOULD have the value of object entPhysicalClass set to\n   battery(14)
      in their row of the entPhysicalTable.\n   The batteryTable contains three groups
      of objects.  The first group\n   (OIDs ending with 1-9) provides information
      on static properties of\n   the battery.  The second group of objects (OIDs
      ending with 10-18)\n   provides information on the current battery state, if
      it is charging\n   or discharging, how much it is charged, its remaining capacity,
      the\n   number of experienced charging cycles, etc.\n      batteryTable(1)\n
      \     +--batteryEntry(1) [entPhysicalIndex]\n         +-- r-n SnmpAdminString
      batteryIdentifier(1)\n         +-- r-n SnmpAdminString batteryFirmwareVersion(2)\n
      \        +-- r-n Enumeration     batteryType(3)\n         +-- r-n Unsigned32
      \     batteryTechnology(4)\n         +-- r-n Unsigned32      batteryDesignVoltage(5)\n
      \        +-- r-n Unsigned32      batteryNumberOfCells(6)\n         +-- r-n Unsigned32
      \     batteryDesignCapacity(7)\n         +-- r-n Unsigned32      batteryMaxChargingCurrent(8)\n
      \        +-- r-n Unsigned32      batteryTrickleChargingCurrent(9)\n         +--
      r-n Unsigned32      batteryActualCapacity(10)\n         +-- r-n Unsigned32      batteryChargingCycleCount(11)\n
      \        +-- r-n DateAndTime     batteryLastChargingCycleTime(12)\n         +--
      r-n Enumeration     batteryChargingOperState(13)\n         +-- rwn Enumeration
      \    batteryChargingAdminState(14)\n         +-- r-n Unsigned32      batteryActualCharge(15)\n
      \        +-- r-n Unsigned32      batteryActualVoltage(16)\n         +-- r-n
      Integer32       batteryActualCurrent(17)\n         +-- r-n Integer32       batteryTemperature(18)\n
      \        +-- rwn Unsigned32      batteryAlarmLowCharge(19)\n         +-- rwn
      Unsigned32      batteryAlarmLowVoltage(20)\n         +-- rwn Unsigned32      batteryAlarmLowCapacity(21)\n
      \        +-- rwn Unsigned32      batteryAlarmHighCycleCount(22)\n         +--
      rwn Integer32       batteryAlarmHighTemperature(23)\n         +-- rwn Integer32
      \      batteryAlarmLowTemperature(24)\n         +-- r-n SnmpAdminString batteryCellIdentifier(25)\n
      \  The third group of objects in this table (OIDs ending with 19-25) is\n   used
      for notifications.  Threshold objects (OIDs ending with 19-24)\n   indicate
      thresholds that can be used to raise an alarm if a property\n   of the battery
      exceeds one of them.  Raising an alarm may include\n   sending a notification.\n
      \  The Battery MIB defines seven notifications for indicating:\n   1.  a battery-charging
      state change that was not triggered by writing\n       to object batteryChargingAdminState,\n
      \  2.  a low-battery charging state,\n   3.  a critical-battery state in which
      it cannot be used for power\n       supply,\n   4.  an aged battery that may
      need to be replaced,\n   5.  a battery that has exceeded a temperature threshold,\n
      \  6.  a battery that has been connected, and\n   7.  disconnection of one or
      more batteries.\n   Notifications 2-5 can use object batteryCellIdentifier to
      indicate a\n   specific cell or a set of cells within the battery that have\n
      \  triggered the notification.\n"
    title: 3.1.  MIB Module Structure
  - contents:
    - "3.2.  Battery Technologies\n   Static information in the batteryTable includes
      battery type and\n   technology.  The battery type distinguishes primary (not\n
      \  rechargeable) batteries from rechargeable (secondary) batteries and\n   capacitors.
      \ The battery technology describes the actual technology\n   of a battery, which
      typically is a chemical technology.\n   Since battery technologies are the subject
      of intensive research and\n   widely used technologies are often replaced by
      successor technologies\n   within a few years, the list of battery technologies
      was not chosen\n   as a fixed list.  Instead, IANA has created a registry for
      battery\n   technologies at <http://www.iana.org/assignments/battery-\n   technologies>
      where numbers are assigned to battery technologies.\n   The table below shows
      battery technologies known today that are in\n   commercial use with the numbers
      assigned to them by IANA.  New\n   entries can be added to the IANA registry
      if new technologies are\n   developed or if missing technologies are identified.
      \ Note that there\n   exists a huge number of battery types that are not listed
      in the IANA\n   registry.  Many of them are experimental or cannot be used in
      an\n   economically useful way.  New entries should be added to the IANA\n   registry
      only if the respective technologies are in commercial use\n   and relevant to
      standardized battery monitoring over the Internet.\n      +--------------------------------+---------------+\n
      \     | Battery Technology             |      Value    |\n      +--------------------------------+---------------+\n
      \     | Reserved                       |             0 |\n      | Unknown                        |
      \            1 |\n      | Other                          |             2 |\n
      \     | Zinc-carbon                    |             3 |\n      | Zinc chloride
      \                 |             4 |\n      | Nickel oxyhydroxide            |
      \            5 |\n      | Lithium-copper oxide           |             6 |\n
      \     | Lithium-iron disulfide         |             7 |\n      | Lithium-manganese
      dioxide      |             8 |\n      | Zinc-air                       |             9
      |\n      | Silver oxide                   |            10 |\n      | Alkaline
      \                      |            11 |\n      | Lead-acid                      |
      \           12 |\n      | Valve-Regulated Lead-Acid, Gel |            13 |\n
      \     | Valve-Regulated Lead-Acid, AGM |            14 |\n      | Nickel-cadmium
      \                |            15 |\n      | Nickel-metal hydride           |
      \           16 |\n      | Nickel-zinc                    |            17 |\n
      \     | Lithium-ion                    |            18 |\n      | Lithium polymer
      \               |            19 |\n      | Double layer capacitor         |
      \           20 |\n      | Unassigned                     | 21-4294967295 |\n
      \     +--------------------------------+---------------+\n"
    - contents:
      - "3.2.1.  Guidelines for Adding Battery Technologies\n   New entries can be
        added to the IANA registry if new technologies are\n   developed or if missing
        technologies are identified.  Note that there\n   exists a huge number of
        battery types that are not listed in the IANA\n   registry.  Many of them
        are experimental or cannot be used in an\n   economically useful way.  New
        entries should be added to the IANA\n   registry only if the respective technologies
        are in commercial use\n   and relevant to standardized battery monitoring
        over the Internet.\n"
      title: 3.2.1.  Guidelines for Adding Battery Technologies
    title: 3.2.  Battery Technologies
  - contents:
    - "3.3.  Battery Identification\n   There are two identifiers to be used: the
      entPhysicalUUID defined in\n   the Entity MIB [RFC6933] module and the batteryIdentifier
      defined in\n   this module.  A battery is linked to an entPhysicalUUID through
      the\n   shared entPhysicalIndex.\n   The batteryIdentifier uniquely identifies
      the battery itself while\n   the entPhysicalUUID identifies the slot of the
      device in which the\n   battery is (currently) contained.  For a non-replaceable
      battery,\n   both identifiers are always linked to the same physical battery.
      \ But\n   for batteries that can be replaced, the identifiers have different\n
      \  functions.\n   The entPhysicalUUID is always the same for a certain battery
      slot of\n   a containing device even if the contained battery is replaced by\n
      \  another.  The batteryIdentifier is a representation of the battery\n   identifier
      set by the battery manufacturer.  It is tied to the\n   battery and usually
      cannot be changed.\n   Many manufacturers deliver not just plain batteries but
      battery\n   packages including additional hardware and firmware.  Typically,\n
      \  these modules include a battery identifier that can by retrieved by a\n   device
      in which a battery has been installed.  The value of the\n   object batteryIdentifier
      is an exact representation of this\n   identifier.  The batteryIdentifier is
      useful when batteries are\n   removed and reinstalled in the same device or
      in other devices.\n   Then, the device or the network management system can
      trace batteries\n   and achieve continuity of battery monitoring.\n"
    title: 3.3.  Battery Identification
  - contents:
    - "3.4.  Charging Cycles\n   The lifetime of a battery can be approximated using
      the measure of\n   charging cycles.  A commonly used definition of a charging
      cycle is\n   the amount of discharge equal to the design (or nominal) capacity
      of\n   the battery [SBS].  This means that a single charging cycle may\n   include
      several steps of partial charging and discharging until the\n   amount of discharging
      has reached the design capacity of the battery.\n   After that, the next charging
      cycle immediately starts.\n"
    title: 3.4.  Charging Cycles
  - contents:
    - "3.5.  Charge Control\n   Managed object batteryChargingOperState indicates
      the current\n   operational charging state of a battery and is a read-only object.\n
      \  For controlling the charging state, object batteryChargingAdminState\n   can
      be used.  Writing to this object initiates a request to adapt the\n   operational
      state according to the value that has been written.\n   By default, the batteryChargingAdminState
      object is set to notSet(1).\n   In this state, the charging controller is using
      its predefined\n   policies to decide which operational state is suitable in
      the current\n   situation.\n   Setting the value of object batteryChargingAdminState
      may result in\n   not changing the state of the battery to this value or even
      in\n   setting the charging state to another value than the requested one.\n
      \  Due to operational conditions and limitations of the implementation\n   of
      the Battery MIB module, changing the battery status according to a\n   set value
      of object batteryChargingAdminState might not be possible.\n   For example,
      the charging controller might, at any time, decide to\n   enter state discharging(5),
      if there is an operational need to use\n   the battery for supplying power.\n
      \  The object batteryChargingAdminState will not automatically change\n   when
      the object batteryChargingOperState changes.  If the operational\n   state is
      changed, e.g., to the state discharging(5) due to\n   operational conditions,
      the admin state will remain in its current\n   state.  The charging controller
      SHOULD change the operational state\n   to the state indicated by the object
      batteryChargingAdminState as\n   soon as operational conditions allow this change.\n
      \  If a state change of the object batteryChargingAdminState is desired\n   upon
      change of the operational state, the object\n   batteryChargingOperState must
      be polled or the notification\n   batteryChargingStateNotification must be used
      to get notified about\n   the state change.  This could be used, e.g., if maintaining
      charge is\n   not desired after fully charging a battery even if the charging\n
      \  controller and battery support it.  The object\n   batteryChargingAdminState
      can then be set to doNotCharge(3) when the\n   object batteryChargingOperState
      changes from charging(2) to\n   maintainingCharge(3).  Another use case would
      be when performing\n   several charge and discharge cycles for battery maintenance.\n"
    title: 3.5.  Charge Control
  - contents:
    - "3.6.  Imported Definitions\n   The BATTERY-MIB module defined in this document
      imports definitions\n   from the following MIB modules: SNMPv2-SMI [RFC2578],
      SNMPv2-TC\n   [RFC2579], SNMPv2-CONF [RFC2580], SNMP-FRAMEWORK-MIB [RFC3411],
      and\n   ENTITY-MIB [RFC6933].\n"
    title: 3.6.  Imported Definitions
  title: 3.  Design of the Battery MIB Module
- contents:
  - "4.  Definitions\n  BATTERY-MIB DEFINITIONS ::= BEGIN\n  IMPORTS\n      MODULE-IDENTITY,
    OBJECT-TYPE, NOTIFICATION-TYPE,\n      mib-2, Integer32, Unsigned32\n          FROM
    SNMPv2-SMI                                -- RFC 2578\n      DateAndTime\n          FROM
    SNMPv2-TC                                 -- RFC 2579\n      MODULE-COMPLIANCE,
    OBJECT-GROUP, NOTIFICATION-GROUP\n          FROM SNMPv2-CONF                               --
    RFC 2580\n      SnmpAdminString\n          FROM SNMP-FRAMEWORK-MIB                        --
    RFC 3411\n      entPhysicalIndex\n          FROM ENTITY-MIB;                               --
    RFC 6933\n  batteryMIB MODULE-IDENTITY\n      LAST-UPDATED \"201506150000Z\"         --
    15 June 2015\n      ORGANIZATION \"IETF EMAN Working Group\"\n      CONTACT-INFO\n
    \         \"General Discussion: eman@ietf.org\n          To Subscribe: <http://www.ietf.org/mailman/listinfo/eman>\n
    \         Archive: <http://www.ietf.org/mail-archive/web/eman>\n          Editor:\n
    \           Juergen Quittek\n            NEC Europe, Ltd.\n            NEC Laboratories
    Europe\n            Kurfuersten-Anlage 36\n            69115 Heidelberg\n            Germany\n
    \           Tel: +49 6221 4342-115\n            Email: quittek@neclab.eu\"\n      DESCRIPTION\n
    \         \"This MIB module defines a set of objects for monitoring\n          batteries
    of networked devices and of their components.\n          Copyright (c) 2015 IETF
    Trust and the persons identified as\n          authors of the code.  All rights
    reserved.\n          Redistribution and use in source and binary forms, with or\n
    \         without modification, is permitted pursuant to, and subject\n          to
    the license terms contained in, the Simplified BSD License\n          set forth
    in Section 4.c of the IETF Trust's Legal Provisions\n          Relating to IETF
    Documents\n          (http://trustee.ietf.org/license-info).\n          This version
    of this MIB module is part of RFC 7577; see\n          the RFC itself for full
    legal notices.\"\n  --  Revision history\n      REVISION \"201506150000Z\"         --
    15 June 2015\n      DESCRIPTION\n          \"Initial version published as RFC
    7577.\"\n      ::= { mib-2 233 }\n  --******************************************************************\n
    \ -- Top-Level Structure of the MIB Module\n  --******************************************************************\n
    \ batteryNotifications OBJECT IDENTIFIER ::= { batteryMIB 0 }\n  batteryObjects
    \      OBJECT IDENTIFIER ::= { batteryMIB 1 }\n  batteryConformance   OBJECT IDENTIFIER
    ::= { batteryMIB 2 }\n  --==================================================================\n
    \ -- 1.  Object Definitions\n  --==================================================================\n
    \ --------------------------------------------------------------------\n  -- 1.1.
    \ Battery Table\n  --------------------------------------------------------------------\n
    \ batteryTable  OBJECT-TYPE\n      SYNTAX      SEQUENCE OF BatteryEntry\n      MAX-ACCESS
    \ not-accessible\n      STATUS      current\n      DESCRIPTION\n          \"This
    table provides information on batteries.  It contains\n          one conceptual
    row per battery in a managed entity.\n          Batteries are indexed by the entPhysicalIndex
    of the\n          entPhysicalTable defined in the ENTITY-MIB (RFC 6933).\n          For
    implementations of the BATTERY-MIB, an implementation of\n          the ENTITY-MIB
    complying with the entity4CRCompliance\n          MODULE-COMPLIANCE statement
    of the ENTITY-MIB is required.\n          If batteries are replaced, and the replacing
    battery uses\n          the same physical connector as the replaced battery, then\n
    \         the replacing battery SHOULD be indexed with the same value\n          of
    object entPhysicalIndex as the replaced battery.\"\n      ::= { batteryObjects
    1 }\n  batteryEntry OBJECT-TYPE\n      SYNTAX      BatteryEntry\n      MAX-ACCESS
    \ not-accessible\n      STATUS      current\n      DESCRIPTION\n          \"An
    entry providing information on a battery.\"\n      INDEX  { entPhysicalIndex }\n
    \     ::= { batteryTable 1 }\n  BatteryEntry ::=\n      SEQUENCE {\n         batteryIdentifier
    \              SnmpAdminString,\n         batteryFirmwareVersion          SnmpAdminString,\n
    \        batteryType                     INTEGER,\n         batteryTechnology
    \              Unsigned32,\n         batteryDesignVoltage            Unsigned32,\n
    \        batteryNumberOfCells            Unsigned32,\n         batteryDesignCapacity
    \          Unsigned32,\n         batteryMaxChargingCurrent       Unsigned32,\n
    \        batteryTrickleChargingCurrent   Unsigned32,\n         batteryActualCapacity
    \          Unsigned32,\n         batteryChargingCycleCount       Unsigned32,\n
    \        batteryLastChargingCycleTime    DateAndTime,\n         batteryChargingOperState
    \       INTEGER,\n         batteryChargingAdminState       INTEGER,\n         batteryActualCharge
    \            Unsigned32,\n         batteryActualVoltage            Unsigned32,\n
    \        batteryActualCurrent            Integer32,\n         batteryTemperature
    \             Integer32,\n         batteryAlarmLowCharge           Unsigned32,\n
    \        batteryAlarmLowVoltage          Unsigned32,\n         batteryAlarmLowCapacity
    \        Unsigned32,\n         batteryAlarmHighCycleCount      Unsigned32,\n         batteryAlarmHighTemperature
    \    Integer32,\n         batteryAlarmLowTemperature      Integer32,\n         batteryCellIdentifier
    \          SnmpAdminString\n      }\n  batteryIdentifier OBJECT-TYPE\n      SYNTAX
    \     SnmpAdminString\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object contains an identifier for the battery.\n
    \         Many manufacturers deliver not only simple batteries but\n          battery
    packages including additional hardware and firmware.\n          Typically, these
    modules include an identifier that can be\n          retrieved by a device in
    which a battery has been installed.\n          The identifier is useful when batteries
    are removed and\n          reinstalled in the same or other devices.  Then, the
    device\n          or the network management system can trace batteries and\n          achieve
    continuity of battery monitoring.\n          If the battery is identified by more
    than one value,\n          for example, by a model number and a serial number,\n
    \         then the value of this object is a concatenation of these\n          values,
    separated by the colon symbol ':'.  The values\n          should be ordered so
    that a more significant value comes\n          before a less significant one.
    \ In the example above, the\n          (more significant) model number would be
    first, and the serial\n          number would follow: '<model number>:<serial
    number>'.\n          If the battery identifier cannot be represented using the\n
    \         ISO/IEC IS 10646-1 character set, then a hexadecimal\n          encoding
    of a binary representation of the entire battery\n          identifier must be
    used.\n          The value of this object must be an empty string if there\n          is
    no battery identifier or if the battery identifier is\n          unknown.\"\n
    \     ::= { batteryEntry 1 }\n  batteryFirmwareVersion OBJECT-TYPE\n      SYNTAX
    \     SnmpAdminString\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object indicates the version number of the
    firmware\n          that is included in a battery module.\n          Many manufacturers
    deliver not pure batteries but battery\n          packages including additional
    hardware and firmware.\n          Since the behavior of the battery may change
    with the\n          firmware, it may be useful to retrieve the firmware version\n
    \         number.\n          The value of this object must be an empty string
    if there\n          is no firmware or if the version number of the firmware is\n
    \         unknown.\"\n      ::= { batteryEntry 2 }\n  batteryType OBJECT-TYPE\n
    \     SYNTAX      INTEGER {\n                      unknown(1),\n                      other(2),\n
    \                     primary(3),\n                      rechargeable(4),\n                      capacitor(5)\n
    \                 }\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object indicates the type of battery.\n          It
    distinguishes between primary (not rechargeable)\n          batteries, rechargeable
    (secondary) batteries, and\n          capacitors.  Capacitors are not really batteries
    but\n          are often used in the same way as a battery.\n          The value
    other(2) can be used if the battery type is known\n          but is none of the
    ones above.  Value unknown(1) is to be used\n          if the type of battery
    cannot be determined.\"\n      ::= { batteryEntry 3 }\n  batteryTechnology OBJECT-TYPE\n
    \     SYNTAX      Unsigned32\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object indicates the technology used by the
    battery.\n          Numbers identifying battery technologies are registered at\n
    \         IANA.  A current list of assignments can be found at\n          <http://www.iana.org/assignments/battery-technologies>.\n
    \         Value unknown(1) MUST be used if the technology of the\n          battery
    cannot be determined.\n          Value other(2) can be used if the battery technology
    is known\n          but is not one of the types already registered at IANA.\"\n
    \     ::= { batteryEntry 4 }\n  batteryDesignVoltage OBJECT-TYPE\n      SYNTAX
    \     Unsigned32\n      UNITS       \"millivolt\"\n      MAX-ACCESS  read-only\n
    \     STATUS      current\n      DESCRIPTION\n          \"This object provides
    the design (or nominal) voltage of the\n          battery in units of millivolt
    (mV).\n          Note that the design voltage is a constant value and\n          typically
    different from the actual voltage of the battery.\n          A value of 0 indicates
    that the design voltage is unknown.\"\n      ::= { batteryEntry 5 }\n  batteryNumberOfCells
    OBJECT-TYPE\n      SYNTAX      Unsigned32\n      MAX-ACCESS  read-only\n      STATUS
    \     current\n      DESCRIPTION\n          \"This object indicates the number
    of cells contained in the\n          battery.\n          A value of 0 indicates
    that the number of cells is unknown.\"\n      ::= { batteryEntry 6 }\n  batteryDesignCapacity
    OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS       \"milliampere hours\"\n
    \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the design (or nominal) capacity of\n          the battery in
    units of milliampere hours (mAh).\n          Note that the design capacity is
    a constant value and\n          typically different from the actual capacity of
    the battery.\n          Usually, this is a value provided by the manufacturer
    of the\n          battery.\n          A value of 0 indicates that the design capacity
    is\n          unknown.\"\n      ::= { batteryEntry 7 }\n  batteryMaxChargingCurrent
    OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS       \"milliampere\"\n
    \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the maximum current to be used for\n          charging the battery
    in units of milliampere (mA).\n          Note that the maximum charging current
    may not lead to\n          optimal charge of the battery and that some batteries
    can\n          only be charged with the maximum current for a limited\n          amount
    of time.\n          A value of 0 indicates that the maximum charging current is\n
    \         unknown.\"\n      ::= { batteryEntry 8 }\n  batteryTrickleChargingCurrent
    OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS       \"milliampere\"\n
    \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the recommended average current\n          to be used for trickle
    charging the battery in units of\n          mA.\n          Typically, this is
    a value recommended by the manufacturer\n          of the battery or by the manufacturer
    of the charging\n          circuit.\n          A value of 0 indicates that the
    recommended trickle charging\n          current is unknown.\"\n      ::= { batteryEntry
    9 }\n  batteryActualCapacity OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS
    \      \"milliampere hours\"\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object provides the actual capacity of the\n
    \         battery in units of mAh.\n          Typically, the actual capacity of
    a battery decreases\n          with time and with usage of the battery.  It is
    usually\n          lower than the design capacity.\n          Note that the actual
    capacity needs to be measured and is\n          typically an estimate based on
    observed discharging and\n          charging cycles of the battery.\n          A
    value of 'ffffffff'H indicates that the actual capacity\n          cannot be determined.\"\n
    \     ::= { batteryEntry 10 }\n  batteryChargingCycleCount OBJECT-TYPE\n      SYNTAX
    \     Unsigned32\n      MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n
    \         \"This object indicates the number of completed charging\n          cycles
    that the battery underwent.  In line with the\n          Smart Battery Data Specification
    Revision 1.1, a charging\n          cycle is defined as the process of discharging
    the battery\n          by a total amount equal to the battery design capacity
    as\n          given by object batteryDesignCapacity.  A charging cycle\n          may
    include several steps of charging and discharging the\n          battery until
    the discharging amount given by\n          batteryDesignCapacity has been reached.
    \ As soon as a\n          charging cycle has been completed, the next one starts\n
    \         immediately, independent of the battery's current charge at\n          the
    end of the cycle.\n          For batteries of type primary(3), the value of this
    object is\n          always 0.\n          A value of 'ffffffff'H indicates that
    the number of charging\n          cycles cannot be determined.\"\n      ::= {
    batteryEntry 11 }\n  batteryLastChargingCycleTime OBJECT-TYPE\n      SYNTAX      DateAndTime\n
    \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n          \"The
    date and time of the last charging cycle.  The value\n          '0000000000000000'H
    is returned if the battery has not been\n          charged yet or if the last
    charging time cannot be\n          determined.\n          For batteries of type
    primary(1), the value of this object is\n          always '0000000000000000'H.\"\n
    \     ::= { batteryEntry 12 }\n  batteryChargingOperState OBJECT-TYPE\n      SYNTAX
    \     INTEGER {\n                      unknown(1),\n                      charging(2),\n
    \                     maintainingCharge(3),\n                      noCharging(4),\n
    \                     discharging(5)\n                  }\n      MAX-ACCESS  read-only\n
    \     STATUS      current\n      DESCRIPTION\n          \"This object indicates
    the current charging state of the\n          battery.\n          Value unknown(1)
    indicates that the charging state of the\n          battery cannot be determined.\n
    \         Value charging(2) indicates that the battery is being\n          charged
    in a way such that the charge of the battery\n          increases.\n          Value
    maintainingCharge(3) indicates that the battery is\n          being charged with
    a low-average current that compensates\n          self-discharging.  This includes
    trickle charging, float\n          charging, and other methods for maintaining
    the current\n          charge of a battery.  In typical implementations of charging\n
    \         controllers, state maintainingCharge(3) is only applied\n          if
    the battery is fully charged or almost fully charged.\n          Value noCharging(4)
    indicates that the battery is not being\n          charged or discharged by electric
    current between the\n          battery and electric circuits external to the battery.\n
    \         Note that the battery may still be subject to\n          self-discharging.\n
    \         Value discharging(5) indicates that the battery is either\n          used
    as the power source for electric circuits external to\n          the battery or
    discharged intentionally by the\n          charging controller, e.g., for the
    purpose of battery\n          maintenance.  In any case, the charge of the battery\n
    \         decreases.\"\n      ::= { batteryEntry 13 }\n  batteryChargingAdminState
    OBJECT-TYPE\n      SYNTAX      INTEGER {\n                      notSet(1),\n                      charge(2),\n
    \                     doNotCharge(3),\n                      discharge(4)\n                  }\n
    \     MAX-ACCESS  read-write\n      STATUS      current\n      DESCRIPTION\n          \"The
    value of this object indicates the desired\n          charging state of the battery.
    \ The real state is\n          indicated by object batteryChargingOperState.  See
    the\n          definition of object batteryChargingOperState for a\n          description
    of the values.\n          When this object is initialized by an implementation
    of the\n          BATTERY-MIB module, its value is set to notSet(1).  In this\n
    \         case, the charging controller is free to choose which\n          operational
    state is suitable.\n          When the batteryChargingAdminState object is set,
    then the\n          BATTERY-MIB implementation must try to set the battery\n          to
    the indicated state.  The result will be indicated by\n          object batteryChargingOperState.\n
    \         Setting object batteryChargingAdminState to value notSet(1)\n          is
    a request to the charging controller to operate\n          autonomously and choose
    the operational state that is\n          suitable.\n          Setting object batteryChargingAdminState
    to value charge(2)\n          is a request to enter the operational state charging(2)
    until\n          the battery is fully charged.  When the battery is fully\n          charged,
    or if the battery was already fully charged or\n          almost fully charged
    at the time of the request, the\n          operational state will change to maintainingCharge(3)
    if the\n          charging controller and the battery support the functionality\n
    \         of maintaining the charge, or it will change to noCharging(4)\n          otherwise.\n
    \         Setting object batteryChargingAdminState to value\n          doNotCharge(3)
    is a request for entering operational\n          state noCharging(4).\n          Setting
    object batteryChargingAdminState to value\n          discharge(4) is a request
    for entering operational\n          state discharging(5).  Discharging can be
    accomplished\n          by ordinary use, applying a dedicated load, or any other\n
    \         means.  An example for applying this state is battery\n          maintenance.
    \ If the battery is empty or almost empty, the\n          operational state will
    change to noCharging(4).\n          The charging controller will decide which
    charge condition\n          will be considered empty dependent on the battery\n
    \         technology used.  This is done to avoid damage on the\n          battery
    due to deep discharge.\n          Due to operational conditions and limitations
    of the\n          implementation of the BATTERY-MIB module, changing the\n          battery
    status according to a set value of object\n          batteryChargingAdminState
    may not be possible.\n          Setting the value of object batteryChargingAdminState\n
    \         may result in not changing the state of the battery\n          to this
    value or even in setting the charging state\n          to another value than the
    requested one.  For example,\n          the charging controller might at any time
    decide to\n          enter state discharging(5), if there is an operational need\n
    \         to use the battery for supplying power.\"\n      ::= { batteryEntry
    14 }\n  batteryActualCharge OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS
    \      \"milliampere hours\"\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object provides the actual charge of the battery\n
    \         in units of mAh.\n          Note that the actual charge needs to be
    measured and is\n          typically an estimate based on observed discharging
    and\n          charging cycles of the battery.\n          A value of 'ffffffff'H
    indicates that the actual charge\n          cannot be determined.\"\n      ::=
    { batteryEntry 15 }\n  batteryActualVoltage OBJECT-TYPE\n      SYNTAX      Unsigned32\n
    \     UNITS       \"millivolt\"\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object provides the actual voltage of the
    battery\n          in units of mV.\n          A value of 'ffffffff'H indicates
    that the actual voltage\n          cannot be determined.\"\n      ::= { batteryEntry
    16 }\n  batteryActualCurrent OBJECT-TYPE\n      SYNTAX      Integer32\n      UNITS
    \      \"milliampere\"\n      MAX-ACCESS  read-only\n      STATUS      current\n
    \     DESCRIPTION\n          \"This object provides the actual charging or discharging\n
    \         current of the battery in units of mA.\n          The charging current
    is represented by positive values,\n          and the discharging current is represented
    by negative values.\n          A value of '7fffffff'H indicates that the actual
    current\n          cannot be determined.\"\n      ::= { batteryEntry 17 }\n  batteryTemperature
    OBJECT-TYPE\n      SYNTAX      Integer32\n      UNITS       \"deci-degrees Celsius\"\n
    \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n          \"The
    ambient temperature at or within close proximity\n          of the battery.\n
    \         A value of '7fffffff'H indicates that the temperature\n          cannot
    be determined.\"\n      ::= { batteryEntry 18 }\n  batteryAlarmLowCharge OBJECT-TYPE\n
    \     SYNTAX      Unsigned32\n      UNITS       \"milliampere hours\"\n      MAX-ACCESS
    \ read-write\n      STATUS      current\n      DESCRIPTION\n          \"This object
    provides the lower-threshold value for object\n          batteryActualCharge.
    \ If the value of object\n          batteryActualCharge falls below this threshold,\n
    \         a low-battery alarm will be raised.  The alarm procedure may\n          include
    generating a batteryLowNotification.\n          This object should be set to a
    value such that when the\n          batteryLowNotification is generated, the battery
    is still\n          sufficiently charged to keep the device(s) that it powers\n
    \         operational for a time long enough to take actions before\n          the
    powered device(s) enters a 'sleep' or 'off' state.\n          A value of 0 indicates
    that no alarm will be raised for any\n          value of object batteryActualVoltage.\"\n
    \     ::= { batteryEntry 19 }\n    batteryAlarmLowVoltage OBJECT-TYPE\n        SYNTAX
    \     Unsigned32\n        UNITS       \"millivolt\"\n        MAX-ACCESS  read-write\n
    \       STATUS      current\n        DESCRIPTION\n            \"This object provides
    the lower-threshold value for object\n            batteryActualVoltage.  If the
    value of object\n            batteryActualVoltage falls below this threshold,\n
    \           a low-battery alarm will be raised.  The alarm procedure may\n            include
    generating a batteryLowNotification.\n            This object should be set to
    a value such that when the\n            batteryLowNotification is generated, the
    battery is still\n            sufficiently charged to keep the device(s) that
    it powers\n            operational for a time long enough to take actions before\n
    \           the powered device(s) enters a 'sleep' or 'off' state.\n            A
    value of 0 indicates that no alarm will be raised for any\n            value of
    object batteryActualVoltage.\"\n        ::= { batteryEntry 20 }\n  batteryAlarmLowCapacity
    OBJECT-TYPE\n      SYNTAX      Unsigned32\n      UNITS       \"milliampere hours\"\n
    \     MAX-ACCESS  read-write\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the lower-threshold value for object\n          batteryActualCapacity.
    \ If the value of object\n          batteryActualCapacity falls below this threshold,\n
    \         a battery aging alarm will be raised.  The alarm procedure\n          may
    include generating a batteryAgingNotification.\n          A value of 0 indicates
    that no alarm will be raised for any\n          value of object batteryActualCapacity.\"\n
    \     ::= { batteryEntry 21 }\n  batteryAlarmHighCycleCount OBJECT-TYPE\n      SYNTAX
    \     Unsigned32\n      MAX-ACCESS  read-write\n      STATUS      current\n      DESCRIPTION\n
    \         \"This object provides the upper-threshold value for object\n          batteryChargingCycleCount.
    \ If the value of object\n          batteryChargingCycleCount rises above this
    threshold,\n          a battery aging alarm will be raised.  The alarm procedure\n
    \         may include generating a batteryAgingNotification.\n          A value
    of 0 indicates that no alarm will be raised for any\n          value of object
    batteryChargingCycleCount.\"\n      ::= { batteryEntry 22 }\n  batteryAlarmHighTemperature
    OBJECT-TYPE\n      SYNTAX      Integer32\n      UNITS       \"deci-degrees Celsius\"\n
    \     MAX-ACCESS  read-write\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the upper-threshold value for object\n          batteryTemperature.
    \ If the value of object\n          batteryTemperature rises above this threshold,
    a battery\n          high temperature alarm will be raised.  The alarm procedure\n
    \         may include generating a batteryTemperatureNotification.\n          A
    value of '7fffffff'H indicates that no alarm will be\n          raised for any
    value of object batteryTemperature.\"\n      ::= { batteryEntry 23 }\n  batteryAlarmLowTemperature
    OBJECT-TYPE\n      SYNTAX      Integer32\n      UNITS       \"deci-degrees Celsius\"\n
    \     MAX-ACCESS  read-write\n      STATUS      current\n      DESCRIPTION\n          \"This
    object provides the lower-threshold value for object\n          batteryTemperature.
    \ If the value of object\n          batteryTemperature falls below this threshold,
    a battery\n          low temperature alarm will be raised.  The alarm procedure\n
    \         may include generating a batteryTemperatureNotification.\n          A
    value of '7fffffff'H indicates that no alarm will be\n          raised for any
    value of object batteryTemperature.\"\n      ::= { batteryEntry 24 }\n  batteryCellIdentifier
    OBJECT-TYPE\n      SYNTAX      SnmpAdminString\n      MAX-ACCESS  read-only\n
    \     STATUS      current\n      DESCRIPTION\n          \"The value of this object
    identifies one or more cells of a\n          battery.  The format of the cell
    identifier may vary between\n          different implementations.  It should uniquely
    identify one\n          or more cells of the indexed battery.\n          This
    object can be used for batteries, such as lithium\n          polymer batteries
    for which battery controllers monitor\n          cells individually.\n          This
    object is used by notifications of types\n          batteryLowNotification, batteryTemperatureNotification,\n
    \         batteryCriticalNotification, and batteryAgingNotification.\n          These
    notifications can use the value of this object to\n          indicate the event
    that triggered the generation of the\n          notification in more detail by
    specifying a single cell\n          or a set of cells within the battery that
    is specifically\n          addressed by the notification.\n          An example
    use case for this object is a single cell in a\n          battery that exceeds
    the temperature indicated by object\n          batteryAlarmHighTemperature.  In
    such a case, a\n          batteryTemperatureNotification can be generated that
    not\n          only indicates the battery for which the temperature limit\n          has
    been exceeded but also the particular cell.\n          The initial value of this
    object is the empty string.  The\n          value of this object is set each time
    a\n          batteryLowNotification, batteryTemperatureNotification,\n          batteryCriticalNotification,
    or batteryAgingNotification\n          is generated.\n          When a notification
    is generated that does not indicate a\n          specific cell or set of cells,
    the value of this object is\n          set to the empty string.\"\n      ::= {
    batteryEntry 25 }\n  --==================================================================\n
    \ -- 2.  Notifications\n  --==================================================================\n
    \ batteryChargingStateNotification NOTIFICATION-TYPE\n      OBJECTS     {\n          batteryChargingOperState\n
    \     }\n      STATUS      current\n      DESCRIPTION\n          \"This notification
    can be generated when a charging state\n          of the battery (indicated by
    the value of object\n          batteryChargingOperState) is triggered by an event
    other\n          than a write action to object batteryChargingAdminState.\n          Such
    an event may, for example, be triggered by a local\n          battery controller.\"\n
    \     ::= { batteryNotifications 1 }\n  batteryLowNotification NOTIFICATION-TYPE\n
    \     OBJECTS     {\n          batteryActualCharge,\n          batteryActualVoltage,\n
    \         batteryCellIdentifier\n      }\n      STATUS      current\n      DESCRIPTION\n
    \         \"This notification can be generated when the current charge\n          (batteryActualCharge)
    or the current voltage\n          (batteryActualVoltage) of the battery falls
    below a\n          threshold defined by object batteryAlarmLowCharge or object\n
    \         batteryAlarmLowVoltage, respectively.\n          Note that, typically,
    this notification is generated in a\n          state where the battery is still
    sufficiently charged to keep\n          the device(s) that it powers operational
    for some time.\n          If the charging state of the battery has become critical,\n
    \         i.e., the device(s) powered by the battery must go to a\n          'sleep'
    or 'off' state, then the batteryCriticalNotification\n          should be used
    instead.\n          If the low charge or voltage has been detected for a single\n
    \         cell or a set of cells of the battery and not for the entire\n          battery,
    then object batteryCellIdentifier should be set to\n          a value that identifies
    the cell or set of cells.\n          Otherwise, the value of object batteryCellIdentifier
    should\n          be set to the empty string when this notification is\n          generated.\n
    \         The notification should not be sent again for the same\n          battery
    or cell before either (a) the current voltage or\n          the current charge,
    respectively, has become higher than the\n          corresponding threshold through
    charging or (b) an indication\n          of a maintenance action has been detected,
    such as a battery\n          disconnection event or a reinitialization of the
    battery\n          monitoring system.\n          This notification should not
    be sent when the battery is in\n          a charging mode, i.e., the value of
    object\n          batteryChargingOperState is charging(2).\"\n      ::= { batteryNotifications
    2 }\n  batteryCriticalNotification NOTIFICATION-TYPE\n      OBJECTS     {\n          batteryActualCharge,\n
    \         batteryActualVoltage,\n          batteryCellIdentifier\n      }\n      STATUS
    \     current\n      DESCRIPTION\n          \"This notification can be generated
    when the current charge\n          of the battery falls so low that it cannot
    provide a\n          sufficient power supply function for regular operation\n
    \         of the powered device(s).  The battery needs to be charged\n          before
    it can be used for regular power supply again.  The\n          battery may still
    provide sufficient power for a 'sleep'\n          mode of a powered device(s)
    or for a transition into an 'off'\n          mode.\n          If the critical
    state is caused by a single cell or a set of\n          cells of the battery,
    then object batteryCellIdentifier\n          should be set to a value that identifies
    the cell or set of\n          cells.  Otherwise, the value of object batteryCellIdentifier\n
    \         should be set to the empty string when this notification is\n          generated.\n
    \         The notification should not be sent again for the same\n          battery
    before either the battery charge has increased\n          through charging to
    a non-critical value or an indication\n          of a maintenance action has been
    detected, such as a battery\n          disconnection event or a reinitialization
    of the battery\n          monitoring system.\n          This notification should
    not be sent when the battery is in\n          a charging mode, i.e., the value
    of object\n          batteryChargingOperState is charging(2).\"\n      ::= { batteryNotifications
    3 }\n  batteryTemperatureNotification NOTIFICATION-TYPE\n      OBJECTS     {\n
    \         batteryTemperature,\n          batteryCellIdentifier\n      }\n      STATUS
    \     current\n      DESCRIPTION\n          \"This notification can be generated
    when the measured\n          temperature (batteryTemperature) rises above the
    threshold\n          defined by object batteryAlarmHighTemperature or falls\n
    \         below the threshold defined by object\n          batteryAlarmLowTemperature.\n
    \         If the low or high temperature has been detected for a\n          single
    cell or a set of cells of the battery and not for the\n          entire battery,
    then object batteryCellIdentifier should be\n          set to a value that identifies
    the cell or set of cells.\n          Otherwise, the value of object batteryCellIdentifier
    should\n          be set to the empty string when this notification is\n          generated.\n
    \         It may occur that the temperature alternates between values\n          slightly
    below and slightly above a threshold.  For limiting\n          the notification
    rate in such a case, this notification\n          should not be sent again for
    the same battery or cell,\n          respectively, within a time interval of 10
    minutes.\n          An exception to the rate limitations occurs immediately\n
    \         after the reinitialization of the battery monitoring system.\n          At
    this point in time, if the battery temperature is above\n          the threshold
    defined by object batteryAlarmHighTemperature\n          or below the threshold
    defined by object\n          batteryAlarmLowTemperature, respectively, then this\n
    \         notification should be sent, independent of the time at\n          which
    previous notifications for the same battery or cell,\n          respectively,
    had been sent.\"\n      ::= { batteryNotifications 4 }\n  batteryAgingNotification
    NOTIFICATION-TYPE\n      OBJECTS     {\n          batteryActualCapacity,\n          batteryChargingCycleCount,\n
    \         batteryCellIdentifier\n      }\n      STATUS      current\n      DESCRIPTION\n
    \         \"This notification can be generated when the actual\n          capacity
    (batteryActualCapacity) falls below a threshold\n          defined by object batteryAlarmLowCapacity\n
    \         or when the charging cycle count of the battery\n          (batteryChargingCycleCount)
    exceeds the threshold defined\n          by object batteryAlarmHighCycleCount.\n
    \         If the aging has been detected for a single cell or a set\n          of
    cells of the battery and not for the entire battery, then\n          object batteryCellIdentifier
    should be set to a value that\n          identifies the cell or set of cells.
    \ Otherwise, the value\n          of object batteryCellIdentifier should be set
    to the empty\n          string when this notification is generated.\n          This
    notification should not be sent again for the same\n          battery or cell,
    respectively, before an indication of a\n          maintenance action has been
    detected, such as a battery\n          disconnection event or a reinitialization
    of the battery\n          monitoring system.\"\n      ::= { batteryNotifications
    5 }\n  batteryConnectedNotification NOTIFICATION-TYPE\n      OBJECTS     {\n          batteryIdentifier\n
    \     }\n      STATUS      current\n      DESCRIPTION\n          \"This notification
    can be generated when it has been\n          detected that a battery has been
    connected.  The battery\n          can be identified by the value of object batteryIdentifier\n
    \         as well as by the value of index entPhysicalIndex that is\n          contained
    in the OID of object batteryIdentifier.\"\n      ::= { batteryNotifications 6
    }\n  batteryDisconnectedNotification NOTIFICATION-TYPE\n      STATUS      current\n
    \     DESCRIPTION\n          \"This notification can be generated when it has
    been\n          detected that one or more batteries have been disconnected.\"\n
    \     ::= { batteryNotifications 7 }\n  --==================================================================\n
    \ -- 3.  Conformance Information\n  --==================================================================\n
    \ batteryCompliances OBJECT IDENTIFIER ::= { batteryConformance 1 }\n  batteryGroups
    \     OBJECT IDENTIFIER ::= { batteryConformance 2 }\n  --------------------------------------------------------------------\n
    \ -- 3.1.  Compliance Statements\n  --------------------------------------------------------------------\n
    \ batteryCompliance MODULE-COMPLIANCE\n      STATUS      current\n      DESCRIPTION\n
    \         \"The compliance statement for implementations of the\n          BATTERY-MIB
    module.\n          A compliant implementation MUST implement the objects\n          defined
    in the mandatory groups batteryDescriptionGroup\n          and batteryStatusGroup.\n
    \         Note that this compliance statement requires\n          compliance with
    the entity4CRCompliance\n          MODULE-COMPLIANCE statement of the\n          ENTITY-MIB
    (RFC 6933).\"\n      MODULE  -- this module\n          MANDATORY-GROUPS {\n              batteryDescriptionGroup,\n
    \             batteryStatusGroup\n          }\n          GROUP   batteryAlarmThresholdsGroup\n
    \         DESCRIPTION\n             \"A compliant implementation does not have
    to implement\n              the batteryAlarmThresholdsGroup.\"\n          GROUP
    \  batteryNotificationsGroup\n          DESCRIPTION\n             \"A compliant
    implementation does not have to implement\n              the batteryNotificationsGroup.\"\n
    \         GROUP   batteryPerCellNotificationsGroup\n          DESCRIPTION\n             \"A
    compliant implementation does not have to implement\n              the batteryPerCellNotificationsGroup.\"\n
    \         GROUP   batteryAdminGroup\n          DESCRIPTION\n             \"A compliant
    implementation does not have to implement\n              the batteryAdminGroup.\"\n
    \         OBJECT batteryAlarmLowCharge\n          MIN-ACCESS  read-only\n          DESCRIPTION\n
    \             \"A compliant implementation is not required\n              to support
    set operations on this object.\"\n          OBJECT batteryAlarmLowVoltage\n          MIN-ACCESS
    \ read-only\n          DESCRIPTION\n              \"A compliant implementation
    is not required\n              to support set operations on this object.\"\n          OBJECT
    batteryAlarmLowCapacity\n          MIN-ACCESS  read-only\n          DESCRIPTION\n
    \             \"A compliant implementation is not required\n              to support
    set operations on this object.\"\n          OBJECT batteryAlarmHighCycleCount\n
    \         MIN-ACCESS  read-only\n          DESCRIPTION\n              \"A compliant
    implementation is not required\n              to support set operations on this
    object.\"\n          OBJECT batteryAlarmHighTemperature\n          MIN-ACCESS
    \ read-only\n          DESCRIPTION\n              \"A compliant implementation
    is not required\n              to support set operations on this object.\"\n          OBJECT
    batteryAlarmLowTemperature\n          MIN-ACCESS  read-only\n          DESCRIPTION\n
    \             \"A compliant implementation is not required\n              to support
    set operations on this object.\"\n      ::= { batteryCompliances 1 }\n  --------------------------------------------------------------------\n
    \ -- 3.2.  MIB Grouping\n  --------------------------------------------------------------------\n
    \ batteryDescriptionGroup OBJECT-GROUP\n      OBJECTS {\n         batteryIdentifier,\n
    \        batteryFirmwareVersion,\n         batteryType,\n         batteryTechnology,\n
    \        batteryDesignVoltage,\n         batteryNumberOfCells,\n         batteryDesignCapacity,\n
    \        batteryMaxChargingCurrent,\n         batteryTrickleChargingCurrent\n
    \     }\n      STATUS      current\n      DESCRIPTION\n         \"A compliant
    implementation MUST implement the objects\n         contained in this group.\"\n
    \     ::= { batteryGroups 1 }\n  batteryStatusGroup OBJECT-GROUP\n      OBJECTS
    {\n         batteryActualCapacity,\n         batteryChargingCycleCount,\n         batteryLastChargingCycleTime,\n
    \        batteryChargingOperState,\n         batteryActualCharge,\n         batteryActualVoltage,\n
    \        batteryActualCurrent,\n         batteryTemperature\n      }\n      STATUS
    \     current\n      DESCRIPTION\n         \"A compliant implementation MUST implement
    the objects\n         contained in this group.\"\n      ::= { batteryGroups 2
    }\n  batteryAdminGroup OBJECT-GROUP\n      OBJECTS {\n         batteryChargingAdminState\n
    \     }\n      STATUS      current\n      DESCRIPTION\n         \"A compliant
    implementation does not have to implement the\n         object contained in this
    group.\"\n      ::= { batteryGroups 3 }\n  batteryAlarmThresholdsGroup OBJECT-GROUP\n
    \     OBJECTS {\n         batteryAlarmLowCharge,\n         batteryAlarmLowVoltage,\n
    \        batteryAlarmLowCapacity,\n         batteryAlarmHighCycleCount,\n         batteryAlarmHighTemperature,\n
    \        batteryAlarmLowTemperature\n      }\n      STATUS      current\n      DESCRIPTION\n
    \        \"A compliant implementation does not have to implement the\n         objects
    contained in this group.\"\n      ::= { batteryGroups 4 }\n  batteryNotificationsGroup
    NOTIFICATION-GROUP\n      NOTIFICATIONS {\n         batteryChargingStateNotification,\n
    \        batteryLowNotification,\n         batteryCriticalNotification,\n         batteryAgingNotification,\n
    \        batteryTemperatureNotification,\n         batteryConnectedNotification,\n
    \        batteryDisconnectedNotification\n      }\n      STATUS      current\n
    \     DESCRIPTION\n          \"A compliant implementation does not have to implement
    the\n          notifications contained in this group.\"\n      ::= { batteryGroups
    5 }\n  batteryPerCellNotificationsGroup OBJECT-GROUP\n      OBJECTS {\n         batteryCellIdentifier\n
    \     }\n      STATUS      current\n      DESCRIPTION\n          \"A compliant
    implementation does not have to implement the\n          object contained in this
    group.\"\n      ::= { batteryGroups 6 }\n  END\n"
  title: 4.  Definitions
- contents:
  - "5.  Security Considerations\n   There are a number of management objects defined
    in this MIB module\n   with a MAX-ACCESS clause of read-write.  Such objects may
    be\n   considered sensitive or vulnerable in some network environments.  The\n
    \  support for SET operations in a non-secure environment without proper\n   protection
    opens devices to attack.  These are the tables and objects\n   and their sensitivity/vulnerability:\n
    \  o  batteryChargingAdminState:\n      Setting the battery charging state can
    be beneficial for an\n      operator for various reasons such as charging batteries
    when the\n      price of electricity is low.  However, setting the charging state\n
    \     can be used by an attacker to discharge batteries of devices and\n      thereby
    switching these devices off if they are powered solely by\n      batteries.  In
    particular, if the batteryAlarmLowCharge and\n      batteryAlarmLowVoltage can
    also be set, this attack will go\n      unnoticed (i.e., no notifications are
    sent).\n   o  batteryAlarmLowCharge and batteryAlarmLowVoltage:\n      These objects
    set the threshold for an alarm to be raised when the\n      battery charge or
    voltage falls below the corresponding one of\n      them.  An attacker setting
    one of these alarm values can switch\n      off the alarm by setting it to the
    'off' value 0, or it can modify\n      the alarm behavior by setting it to any
    other value.  The result\n      may be loss of data if the battery runs empty
    without warning to a\n      recipient expecting such a notification.\n   o  batteryAlarmLowCapacity
    and batteryAlarmHighCycleCount:\n      These objects set the threshold for an
    alarm to be raised when the\n      battery becomes older and less performant than
    required for stable\n      operation.  An attacker setting this alarm value can
    switch off\n      the alarm by setting it to the 'off' value 0 or modify the alarm\n
    \     behavior by setting it to any other value.  This may lead to\n      either
    a costly replacement of a working battery or use of\n      batteries that are
    too old or too weak.  The consequence of the\n      latter could be that, e.g.,
    a battery cannot provide power long\n      enough between two scheduled charging
    actions causing the powered\n      device to shut down and potentially lose data.\n
    \  o  batteryAlarmHighTemperature and batteryAlarmLowTemperature:\n      These
    objects set thresholds for an alarm to be raised when the\n      battery rises
    above / falls below them.  An attacker setting one\n      of these alarm values
    can switch off these alarms by setting them\n      to the 'off' value '7fffffff'H,
    or it can modify the alarm\n      behavior by setting them to any other value.
    \ The result may be,\n      e.g., an unnecessary shutdown of a device if\n      batteryAlarmHighTemperature
    is set too low, there is damage to the\n      device by temperatures that are
    too high if switched off or set to\n      values that are too high, or there is
    damage to the battery when,\n      e.g., it is being charged.  Batteries can also
    be damaged, e.g.,\n      in an attempt to charge them at temperatures that are
    too low.\n   Some of the readable objects in this MIB module (i.e., objects with
    a\n   MAX-ACCESS other than not-accessible) may be considered sensitive or\n   vulnerable
    in some network environments.  It is thus important to\n   control even GET and/or
    NOTIFY access to these objects and possibly\n   to even encrypt the values of
    these objects when sending them over\n   the network via SNMP.  These are the
    tables and objects and their\n   sensitivity/vulnerability:\n   All potentially
    sensible or vulnerable objects of this MIB module are\n   in the batteryTable.
    \ In general, there are no serious operational\n   vulnerabilities foreseen in
    case of an unauthorized read access to\n   this table.  However, corporate confidentiality
    issues need to be\n   considered.  The following information or parts of it might
    be a\n   trade secret:\n   o  the number of batteries installed in a managed node
    (batteryIndex)\n   o  properties of these batteries (batteryActualCapacity and\n
    \     batteryChargingCycleCount)\n   o  the time at which the next replacement
    cycle for batteries can be\n      expected (batteryAlarmLowCapacity and batteryAlarmHighCycleCount)\n
    \  o  the types of batteries in use and their firmware versions\n      (batteryIdentifier,
    batteryFirmwareVersion, batteryType, and\n      batteryTechnology)\n   For any
    battery-powered device whose use can be correlated to an\n   individual or a small
    group of individuals, the following objects\n   have the potential to reveal information
    about those individuals'\n   activities or habits (e.g., if they are near a power
    outlet, if they\n   have been using their devices heavily, etc.):\n   o  batteryChargingCycleCount\n
    \  o  batteryLastChargingCycleTime\n   o  batteryChargingOperState\n   o  batteryActualCharge\n
    \  o  batteryActualVoltage\n   o  batteryActualCurrent\n   o  batteryTemperature\n
    \  o  batteryAlarmLowCharge\n   o  batteryAlarmLowVoltage\n   o  batteryAlarmLowCapacity\n
    \  o  batteryAlarmHighCycleCount\n   o  batteryAlarmHighTemperature\n   o  batteryAlarmLowTemperature\n
    \  Implementers of this specification should use appropriate privacy\n   protections
    as discussed in Section 9 of \"Requirements for Energy\n   Management\" [RFC6988].
    \ Battery monitoring of devices used by\n   individuals or in homes should only
    occur with proper authorization.\n   SNMP versions prior to SNMPv3 did not include
    adequate security.\n   Even if the network itself is secure (for example by using
    IPsec),\n   there is no control as to who on the secure network is allowed to\n
    \  access and GET/SET (read/change/create/delete) the objects in this\n   MIB
    module.\n   Implementations SHOULD provide the security features described by
    the\n   SNMPv3 framework (see [RFC3410]), and implementations claiming\n   compliance
    to the SNMPv3 standard MUST include full support for\n   authentication and privacy
    via the User-based Security Model (USM)\n   [RFC3414] with the AES cipher algorithm
    [RFC3826].  Implementations\n   MAY also provide support for the Transport Security
    Model (TSM)\n   [RFC5591] in combination with a secure transport such as SSH\n
    \  [RFC5592] or TLS/DTLS [RFC6353].\n   Further, deployment of SNMP versions prior
    to SNMPv3 is NOT\n   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3
    and to\n   enable cryptographic security.  It is then a customer/operator\n   responsibility
    to ensure that the SNMP entity giving access to an\n   instance of this MIB module
    is properly configured to give access to\n   the objects only to those principals
    (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)
    them.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  SMI Object Identifier Registration\n   The Battery MIB module defined
      in this document uses the following\n   IANA-assigned OBJECT IDENTIFIER value
      recorded in the SMI Numbers\n   registry:\n             Descriptor        OBJECT
      IDENTIFIER value\n             ----------        -----------------------\n             batteryMIB
      \       { mib-2 233 }\n"
    title: 6.1.  SMI Object Identifier Registration
  - contents:
    - "6.2.  Battery Technology Registration\n   Object batteryTechnology defined
      in Section 4 reports battery\n   technologies.  Eighteen values for battery
      technologies have\n   initially been defined.  They are listed in a table in
      Section 3.2.\n   For ensuring extensibility of this list, IANA has created a
      registry\n   for battery technologies at <http://www.iana.org/assignments/battery-\n
      \  technologies> and filled it with the initial list given in\n   Section 3.2.\n
      \  New assignments of numbers for battery technologies will be\n   administered
      by IANA through Expert Review [RFC5226].  Experts must\n   check for sufficient
      relevance of a battery technology to be added\n   according to the guidelines
      in Section 3.2.1.\n"
    title: 6.2.  Battery Technology Registration
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2578]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,
      Ed., \"Structure of Management Information\n              Version 2 (SMIv2)\",
      STD 58, RFC 2578,\n              DOI 10.17487/RFC2578, April 1999,\n              <http://www.rfc-editor.org/info/rfc2578>.\n
      \  [RFC2579]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,
      Ed., \"Textual Conventions for SMIv2\",\n              STD 58, RFC 2579, DOI
      10.17487/RFC2579, April 1999,\n              <http://www.rfc-editor.org/info/rfc2579>.\n
      \  [RFC2580]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,
      Ed., \"Conformance Statements for SMIv2\",\n              STD 58, RFC 2580,
      DOI 10.17487/RFC2580, April 1999,\n              <http://www.rfc-editor.org/info/rfc2580>.\n
      \  [RFC3411]  Harrington, D., Presuhn, R., and B. Wijnen, \"An\n              Architecture
      for Describing Simple Network Management\n              Protocol (SNMP) Management
      Frameworks\", STD 62, RFC 3411,\n              DOI 10.17487/RFC3411, December
      2002,\n              <http://www.rfc-editor.org/info/rfc3411>.\n   [RFC3414]
      \ Blumenthal, U. and B. Wijnen, \"User-based Security Model\n              (USM)
      for version 3 of the Simple Network Management\n              Protocol (SNMPv3)\",
      STD 62, RFC 3414,\n              DOI 10.17487/RFC3414, December 2002,\n              <http://www.rfc-editor.org/info/rfc3414>.\n
      \  [RFC3826]  Blumenthal, U., Maino, F., and K. McCloghrie, \"The\n              Advanced
      Encryption Standard (AES) Cipher Algorithm in the\n              SNMP User-based
      Security Model\", RFC 3826,\n              DOI 10.17487/RFC3826, June 2004,\n
      \             <http://www.rfc-editor.org/info/rfc3826>.\n   [RFC5226]  Narten,
      T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations
      Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May
      2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5591]
      \ Harrington, D. and W. Hardaker, \"Transport Security Model\n              for
      the Simple Network Management Protocol (SNMP)\",\n              STD 78, RFC
      5591, DOI 10.17487/RFC5591, June 2009,\n              <http://www.rfc-editor.org/info/rfc5591>.\n
      \  [RFC5592]  Harrington, D., Salowey, J., and W. Hardaker, \"Secure\n              Shell
      Transport Model for the Simple Network Management\n              Protocol (SNMP)\",
      RFC 5592, DOI 10.17487/RFC5592, June\n              2009, <http://www.rfc-editor.org/info/rfc5592>.\n
      \  [RFC6353]  Hardaker, W., \"Transport Layer Security (TLS) Transport\n              Model
      for the Simple Network Management Protocol (SNMP)\",\n              STD 78,
      RFC 6353, DOI 10.17487/RFC6353, July 2011,\n              <http://www.rfc-editor.org/info/rfc6353>.\n
      \  [RFC6933]  Bierman, A., Romascanu, D., Quittek, J., and M.\n              Chandramouli,
      \"Entity MIB (Version 4)\", RFC 6933,\n              DOI 10.17487/RFC6933, May
      2013,\n              <http://www.rfc-editor.org/info/rfc6933>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC1628]  Case, J., Ed., \"UPS Management
      Information Base\",\n              RFC 1628, DOI 10.17487/RFC1628, May 1994,\n
      \             <http://www.rfc-editor.org/info/rfc1628>.\n   [RFC3410]  Case,
      J., Mundy, R., Partain, D., and B. Stewart,\n              \"Introduction and
      Applicability Statements for Internet-\n              Standard Management Framework\",
      RFC 3410,\n              DOI 10.17487/RFC3410, December 2002,\n              <http://www.rfc-editor.org/info/rfc3410>.\n
      \  [RFC6988]  Quittek, J., Ed., Chandramouli, M., Winter, R., Dietz, T.,\n              and
      B. Claise, \"Requirements for Energy Management\",\n              RFC 6988,
      DOI 10.17487/RFC6988, September 2013,\n              <http://www.rfc-editor.org/info/rfc6988>.\n
      \  [RFC7326]  Parello, J., Claise, B., Schoening, B., and J. Quittek,\n              \"Energy
      Management Framework\", RFC 7326,\n              DOI 10.17487/RFC7326, September
      2014,\n              <http://www.rfc-editor.org/info/rfc7326>.\n   [RFC7460]
      \ Chandramouli, M., Claise, B., Schoening, B., Quittek, J.,\n              and
      T. Dietz, \"Monitoring and Control MIB for Power and\n              Energy\",
      RFC 7460, DOI 10.17487/RFC7460, March 2015,\n              <http://www.rfc-editor.org/info/rfc7460>.\n
      \  [SBS]      \"Smart Battery Data Specification\", Revision 1.1, December\n
      \             1998.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   We would like to thank Steven Chew, Bill Mielke, and Alan
    Luchuk for\n   their valuable input.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Juergen Quittek\n   NEC Europe, Ltd.\n   NEC Laboratories
    Europe\n   Network Research Division\n   Kurfuersten-Anlage 36\n   Heidelberg
    \ 69115\n   Germany\n   Phone: +49 6221 4342-115\n   Email: quittek@neclab.eu\n
    \  Rolf Winter\n   NEC Europe, Ltd.\n   NEC Laboratories Europe\n   Network Research
    Division\n   Kurfuersten-Anlage 36\n   Heidelberg  69115\n   Germany\n   Phone:
    +49 6221 4342-121\n   Email: Rolf.Winter@neclab.eu\n   Thomas Dietz\n   NEC Europe,
    Ltd.\n   NEC Laboratories Europe\n   Network Research Division\n   Kurfuersten-Anlage
    36\n   Heidelberg  69115\n   Germany\n   Phone: +49 6221 4342-128\n   Email: Thomas.Dietz@neclab.eu\n"
  title: Authors' Addresses
