- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                       F. Hao, Ed.
  contents:
  - "Independent Submission                                       F. Hao, Ed.\n  \
    \            Schnorr Non-interactive Zero-Knowledge Proof\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Schnorr non-interactive zero-knowledge\n\
    \   (NIZK) proof, a non-interactive variant of the three-pass Schnorr\n   identification\
    \ scheme.  The Schnorr NIZK proof allows one to prove\n   the knowledge of a discrete\
    \ logarithm without leaking any information\n   about its value.  It can serve\
    \ as a useful building block for many\n   cryptographic protocols to ensure that\
    \ participants follow the\n   protocol specification honestly.  This document\
    \ specifies the Schnorr\n   NIZK proof in both the finite field and the elliptic\
    \ curve settings.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8235.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Notation  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   2.  Schnorr NIZK Proof over Finite Field  . . . . . . . . . .\
    \ . .   4\n     2.1.  Group Parameters  . . . . . . . . . . . . . . . . . . .\
    \ .   4\n     2.2.  Schnorr Identification Scheme . . . . . . . . . . . . . .\
    \   4\n     2.3.  Non-interactive Zero-Knowledge Proof  . . . . . . . . . .  \
    \ 5\n     2.4.  Computation Cost  . . . . . . . . . . . . . . . . . . . .   6\n\
    \   3.  Schnorr NIZK Proof over Elliptic Curve  . . . . . . . . . . .   6\n  \
    \   3.1.  Group Parameters  . . . . . . . . . . . . . . . . . . . .   6\n    \
    \ 3.2.  Schnorr Identification Scheme . . . . . . . . . . . . . .   7\n     3.3.\
    \  Non-interactive Zero-Knowledge Proof  . . . . . . . . . .   8\n     3.4.  Computation\
    \ Cost  . . . . . . . . . . . . . . . . . . . .   8\n   4.  Variants of Schnorr\
    \ NIZK proof  . . . . . . . . . . . . . . .   9\n   5.  Applications of Schnorr\
    \ NIZK proof  . . . . . . . . . . . . .   9\n   6.  Security Considerations .\
    \ . . . . . . . . . . . . . . . . . .  10\n   7.  IANA Considerations . . . .\
    \ . . . . . . . . . . . . . . . . .  11\n   8.  References  . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  11\n     8.1.  Normative References  . . .\
    \ . . . . . . . . . . . . . . .  11\n     8.2.  Informative References  . . .\
    \ . . . . . . . . . . . . . .  12\n   Acknowledgements  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  13\n   Author's Address  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A well-known principle for designing robust public key protocols\
    \ is\n   as follows: \"Do not assume that a message you receive has a\n   particular\
    \ form (such as g^r for known r) unless you can check this\"\n   [AN95].  This\
    \ is the sixth of the eight principles defined by Ross\n   Anderson and Roger\
    \ Needham at Crypto '95.  Hence, it is also known as\n   the \"sixth principle\"\
    .  In the past thirty years, many public key\n   protocols failed to prevent attacks,\
    \ which can be explained by the\n   violation of this principle [Hao10].\n   While\
    \ there may be several ways to satisfy the sixth principle, this\n   document\
    \ describes one technique that allows one to prove the\n   knowledge of a discrete\
    \ logarithm (e.g., r for g^r) without revealing\n   its value.  This technique\
    \ is called the Schnorr NIZK proof, which is\n   a non-interactive variant of\
    \ the three-pass Schnorr identification\n   scheme [Stinson06].  The original\
    \ Schnorr identification scheme is\n   made non-interactive through a Fiat-Shamir\
    \ transformation [FS86],\n   assuming that there exists a secure cryptographic\
    \ hash function\n   (i.e., the so-called random oracle model).\n   The Schnorr\
    \ NIZK proof can be implemented over a finite field or an\n   elliptic curve (EC).\
    \  The technical specification is basically the\n   same, except that the underlying\
    \ cyclic group is different.  For\n   completeness, this document describes the\
    \ Schnorr NIZK proof in both\n   the finite field and the EC settings.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  Notation
  contents:
  - "1.2.  Notation\n   The following notation is used in this document:\n   o  Alice:\
    \ the assumed identity of the prover in the protocol\n   o  Bob: the assumed identity\
    \ of the verifier in the protocol\n   o  a | b: a divides b\n   o  a || b: concatenation\
    \ of a and b\n   o  [a, b]: the interval of integers between and including a and\
    \ b\n   o  t: the bit length of the challenge chosen by Bob\n   o  H: a secure\
    \ cryptographic hash function\n   o  p: a large prime\n   o  q: a large prime\
    \ divisor of p-1, i.e., q | p-1\n   o  Zp*: a multiplicative group of integers\
    \ modulo p\n   o  Gq: a subgroup of Zp* with prime order q\n   o  g: a generator\
    \ of Gq\n   o  g^d: g raised to the power of d\n   o  a mod b: a modulo b\n  \
    \ o  Fp: a finite field of p elements, where p is a prime\n   o  E(Fp): an elliptic\
    \ curve defined over Fp\n   o  G: a generator of the subgroup over E(Fp) with\
    \ prime order n\n   o  n: the order of G\n   o  h: the cofactor of the subgroup\
    \ generated by G, which is equal to\n      the order of the elliptic curve divided\
    \ by n\n   o  P x [b]: multiplication of a point P with a scalar b over E(Fp)\n"
- title: 2.  Schnorr NIZK Proof over Finite Field
  contents:
  - '2.  Schnorr NIZK Proof over Finite Field

    '
- title: 2.1.  Group Parameters
  contents:
  - "2.1.  Group Parameters\n   When implemented over a finite field, the Schnorr\
    \ NIZK proof may use\n   the same group setting as DSA [FIPS186-4].  Let p and\
    \ q be two large\n   primes with q | p-1.  Let Gq denote the subgroup of Zp* of\
    \ prime\n   order q, and g be a generator for the subgroup.  Refer to the DSA\n\
    \   examples in the NIST Cryptographic Toolkit [NIST_DSA] for values of\n   (p,\
    \ q, g) that provide different security levels.  A level of 128-bit\n   security\
    \ or above is recommended.  Here, DSA groups are used only as\n   an example.\
    \  Other multiplicative groups where the discrete logarithm\n   problem (DLP)\
    \ is intractable are also suitable for the implementation\n   of the Schnorr NIZK\
    \ proof.\n"
- title: 2.2.  Schnorr Identification Scheme
  contents:
  - "2.2.  Schnorr Identification Scheme\n   The Schnorr identification scheme runs\
    \ interactively between Alice\n   (prover) and Bob (verifier).  In the setup of\
    \ the scheme, Alice\n   publishes her public key A = g^a mod p, where a is the\
    \ private key\n   chosen uniformly at random from [0, q-1].\n   The protocol works\
    \ in three passes:\n   1.  Alice chooses a number v uniformly at random from [0,\
    \ q-1] and\n       computes V = g^v mod p.  She sends V to Bob.\n   2.  Bob chooses\
    \ a challenge c uniformly at random from [0, 2^t-1],\n       where t is the bit\
    \ length of the challenge (say, t = 160).  Bob\n       sends c to Alice.\n   3.\
    \  Alice computes r = v - a * c mod q and sends it to Bob.\n   At the end of the\
    \ protocol, Bob performs the following checks.  If\n   any check fails, the identification\
    \ is unsuccessful.\n   1.  To verify A is within [1, p-1] and A^q = 1 mod p;\n\
    \   2.  To verify V = g^r * A^c mod p.\n   The first check ensures that A is a\
    \ valid public key, hence the\n   discrete logarithm of A with respect to the\
    \ base g actually exists.\n   It is worth noting that some applications may specifically\
    \ exclude\n   the identity element as a valid public key.  In that case, one shall\n\
    \   check A is within [2, p-1] instead of [1, p-1].\n   The process is summarized\
    \ in the following diagram.\n          Alice                               Bob\n\
    \         -------                             -----\n   choose random v from [0,\
    \ q-1]\n   compute V = g^v mod p    -- V ->\n   compute r = v-a*c mod q  <- c\
    \ -- choose random c from [0, 2^t-1]\n                            -- b -> check\
    \ 1) A is a valid public key\n                                          2) V =\
    \ g^r * A^c mod p\n   Information Flows in Schnorr Identification Scheme over\
    \ Finite Field\n"
- title: 2.3.  Non-interactive Zero-Knowledge Proof
  contents:
  - "2.3.  Non-interactive Zero-Knowledge Proof\n   The Schnorr NIZK proof is obtained\
    \ from the interactive Schnorr\n   identification scheme through a Fiat-Shamir\
    \ transformation [FS86].\n   This transformation involves using a secure cryptographic\
    \ hash\n   function to issue the challenge instead.  More specifically, the\n\
    \   challenge is redefined as c = H(g || V || A || UserID || OtherInfo),\n   where\
    \ UserID is a unique identifier for the prover and OtherInfo is\n   OPTIONAL data.\
    \  Here, the hash function H SHALL be a secure\n   cryptographic hash function,\
    \ e.g., SHA-256, SHA-384, SHA-512,\n   SHA3-256, SHA3-384, or SHA3-512.  The bit\
    \ length of the hash output\n   should be at least equal to that of the order\
    \ q of the considered\n   subgroup.\n   OtherInfo is defined to allow flexible\
    \ inclusion of contextual\n   information (also known as \"labels\" in [ABM15])\
    \ in the Schnorr NIZK\n   proof so that the technique defined in this document\
    \ can be generally\n   useful.  For example, some security protocols built on\
    \ top of the\n   Schnorr NIZK proof may wish to include more contextual information\n\
    \   such as the protocol name, timestamp, and so on.  The exact items (if\n  \
    \ any) in OtherInfo shall be left to specific protocols to define.\n   However,\
    \ the format of OtherInfo in any specific protocol must be\n   fixed and explicitly\
    \ defined in the protocol specification.\n   Within the hash function, there must\
    \ be a clear boundary between any\n   two concatenated items.  It is RECOMMENDED\
    \ that one should always\n   prepend each item with a 4-byte integer that represents\
    \ the byte\n   length of that item.  OtherInfo may contain multiple subitems.\
    \  In\n   that case, the same rule shall apply to ensure a clear boundary\n  \
    \ between adjacent subitems.\n"
- title: 2.4.  Computation Cost
  contents:
  - "2.4.  Computation Cost\n   In summary, to prove the knowledge of the exponent\
    \ for A = g^a, Alice\n   generates a Schnorr NIZK proof that contains: {UserID,\
    \ OtherInfo, V =\n   g^v mod p, r = v - a*c mod q}, where c = H(g || V || A ||\
    \ UserID ||\n   OtherInfo).\n   To generate a Schnorr NIZK proof, the cost is\
    \ roughly one modular\n   exponentiation: that is to compute g^v mod p.  In practice,\
    \ this\n   exponentiation may be precomputed in the offline manner to optimize\n\
    \   efficiency.  The cost of the remaining operations (random number\n   generation,\
    \ modular multiplication, and hashing) is negligible as\n   compared with the\
    \ modular exponentiation.\n   To verify the Schnorr NIZK proof, the cost is approximately\
    \ two\n   exponentiations: one for computing A^q mod p and the other for\n   computing\
    \ g^r * A^c mod p.  (It takes roughly one exponentiation to\n   compute the latter\
    \ using a simultaneous exponentiation technique as\n   described in [MOV96].)\n"
- title: 3.  Schnorr NIZK Proof over Elliptic Curve
  contents:
  - '3.  Schnorr NIZK Proof over Elliptic Curve

    '
- title: 3.1.  Group Parameters
  contents:
  - "3.1.  Group Parameters\n   When implemented over an elliptic curve, the Schnorr\
    \ NIZK proof may\n   use the same EC setting as ECDSA [FIPS186-4].  For the illustration\n\
    \   purpose, only curves over the prime fields (e.g., NIST P-256) are\n   described\
    \ here.  Other curves over the binary fields (see\n   [FIPS186-4]) that are suitable\
    \ for ECDSA can also be used for\n   implementing the Schnorr NIZK proof.  Let\
    \ E(Fp) be an elliptic curve\n   defined over a finite field Fp, where p is a\
    \ large prime.  Let G be a\n   base point on the curve that serves as a generator\
    \ for the subgroup\n   over E(Fp) of prime order n.  The cofactor of the subgroup\
    \ is denoted\n   h, which is usually a small value (not more than 4).  Details\
    \ on EC\n   operations, such as addition, negation and scalar multiplications,\n\
    \   can be found in [MOV96].  Data types and conversions including\n   elliptic-curve-point-to-octet-string\
    \ and vice versa can be found in\n   Section 2.3 of [SEC1].  Here, the NIST curves\
    \ are used only as an\n   example.  Other secure curves such as Curve25519 are\
    \ also suitable\n   for the implementation as long as the elliptic curve discrete\n\
    \   logarithm problem (ECDLP) remains intractable.\n"
- title: 3.2.  Schnorr Identification Scheme
  contents:
  - "3.2.  Schnorr Identification Scheme\n   In the setup of the scheme, Alice publishes\
    \ her public key\n   A = G x [a], where a is the private key chosen uniformly\
    \ at random\n   from [1, n-1].\n   The protocol works in three passes:\n   1.\
    \  Alice chooses a number v uniformly at random from [1, n-1] and\n       computes\
    \ V = G x [v].  She sends V to Bob.\n   2.  Bob chooses a challenge c uniformly\
    \ at random from [0, 2^t-1],\n       where t is the bit length of the challenge\
    \ (say, t = 80).  Bob\n       sends c to Alice.\n   3.  Alice computes r = v -\
    \ a * c mod n and sends it to Bob.\n   At the end of the protocol, Bob performs\
    \ the following checks.  If\n   any check fails, the verification is unsuccessful.\n\
    \   1.  To verify A is a valid point on the curve and A x [h] is not the\n   \
    \    point at infinity;\n   2.  To verify V = G x [r] + A x [c].\n   The first\
    \ check ensures that A is a valid public key, hence the\n   discrete logarithm\
    \ of A with respect to the base G actually exists.\n   Unlike in the DSA-like\
    \ group setting where a full modular\n   exponentiation is required to validate\
    \ a public key, in the ECDSA-\n   like setting, the public key validation incurs\
    \ almost negligible cost\n   due to the cofactor being small (e.g., 1, 2, or 4).\n\
    \   The process is summarized in the following diagram.\n   Alice            \
    \                   Bob\n   -------                             -----\n   choose\
    \ random v from [1, n-1]\n   compute V = G x [v]          -- V ->\n   compute\
    \ r = v - a * c mod n  <- c -- choose random c from [0, 2^t-1]\n             \
    \                   -- b -> check 1) A is a valid public key\n               \
    \                               2) V = G x [r] + A x [c]\n            Information\
    \ Flows in Schnorr Identification Scheme\n                            over Elliptic\
    \ Curve\n"
- title: 3.3.  Non-interactive Zero-Knowledge Proof
  contents:
  - "3.3.  Non-interactive Zero-Knowledge Proof\n   Same as before, the non-interactive\
    \ variant is obtained through a\n   Fiat-Shamir transformation [FS86], by using\
    \ a secure cryptographic\n   hash function to issue the challenge instead.  The\
    \ challenge c is\n   defined as c = H(G || V || A || UserID || OtherInfo), where\
    \ UserID is\n   a unique identifier for the prover and OtherInfo is OPTIONAL data\
    \ as\n   explained earlier.\n"
- title: 3.4.  Computation Cost
  contents:
  - "3.4.  Computation Cost\n   In summary, to prove the knowledge of the discrete\
    \ logarithm for A =\n   G x [a] with respect to base G over the elliptic curve,\
    \ Alice\n   generates a Schnorr NIZK proof that contains: {UserID, OtherInfo,\
    \ V =\n   G x [v], r = v - a*c mod n}, where c = H(G || V || A || UserID ||\n\
    \   OtherInfo).\n   To generate a Schnorr NIZK proof, the cost is one scalar\n\
    \   multiplication: that is to compute G x [v].\n   To verify the Schnorr NIZK\
    \ proof in the EC setting, the cost is\n   approximately one multiplication over\
    \ the elliptic curve: i.e.,\n   computing G x [r] + A x [c] (using the same simultaneous\
    \ computation\n   technique as before).  The cost of public key validation in\
    \ the EC\n   setting is essentially free.\n"
- title: 4.  Variants of Schnorr NIZK proof
  contents:
  - "4.  Variants of Schnorr NIZK proof\n   In the finite field setting, the prover\
    \ sends (V, r) (along with\n   UserID and OtherInfo), and the verifier first computes\
    \ c, and then\n   checks for V = g^r * A^c mod p.  This requires the transmission\
    \ of an\n   element V of Zp, whose size is typically between 2048 and 3072 bits,\n\
    \   and an element r of Zq whose size is typically between 224 and 256\n   bits.\
    \  It is possible to reduce the amount of transmitted data to two\n   elements\
    \ of Zq as below.\n   In the modified variant, the prover works exactly the same\
    \ as before,\n   except that it sends (c, r) instead of (V, r).  The verifier\
    \ computes\n   V = g^r * A^c mod p and then checks whether H(g || V || A || UserID\n\
    \   || OtherInfo) = c.  The security of this modified variant follows\n   from\
    \ the fact that one can compute V from (c, r) and c from (V, r).\n   Therefore,\
    \ sending (c, r) is equivalent to sending (V, c, r), which\n   in turn is equivalent\
    \ to sending (V, r).  Thus, the size of the\n   Schnorr NIZK proof is significantly\
    \ reduced.  However, the\n   computation costs for both the prover and the verifier\
    \ stay the same.\n   The same optimization technique also applies to the elliptic\
    \ curve\n   setting by replacing (V, r) with (c, r), but the benefit is extremely\n\
    \   limited.  When V is encoded in the compressed form, this optimization\n  \
    \ only saves 1 bit.  The computation costs for generating and verifying\n   the\
    \ NIZK proof remain the same as before.\n"
- title: 5.  Applications of Schnorr NIZK proof
  contents:
  - "5.  Applications of Schnorr NIZK proof\n   Some key exchange protocols, such\
    \ as J-PAKE [HR08] and YAK [Hao10],\n   rely on the Schnorr NIZK proof to ensure\
    \ participants have the\n   knowledge of discrete logarithms, hence following\
    \ the protocol\n   specification honestly.  The technique described in this document\
    \ can\n   be directly applied to those protocols.\n   The inclusion of OtherInfo\
    \ also makes the Schnorr NIZK proof\n   generally useful and flexible to cater\
    \ for a wide range of\n   applications.  For example, the described technique\
    \ may be used to\n   allow a user to demonstrate the proof of possession (PoP)\
    \ of a long-\n   term private key to a Certification Authority (CA) during the\
    \ public\n   key registration phrase.  It must be ensured that the hash contains\n\
    \   data that links the proof to one particular key registration\n   procedure\
    \ (e.g., by including the CA name, the expiry date, the\n   applicant's email\
    \ contact, and so on, in OtherInfo).  In this case,\n   the Schnorr NIZK proof\
    \ is functionally equivalent to a self-signed\n   Certificate Signing Request\
    \ generated by using DSA or ECDSA.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The Schnorr identification protocol has been\
    \ proven to satisfy the\n   following properties, assuming that the verifier is\
    \ honest and the\n   discrete logarithm problem is intractable (see [Stinson06]).\n\
    \   1.  Completeness -- a prover who knows the discrete logarithm is\n       always\
    \ able to pass the verification challenge.\n   2.  Soundness -- an adversary who\
    \ does not know the discrete\n       logarithm has only a negligible probability\
    \ (i.e., 2^(-t)) to\n       pass the verification challenge.\n   3.  Honest verifier\
    \ zero-knowledge -- a prover leaks no more than one\n       bit of information\
    \ to the honest verifier: whether the prover\n       knows the discrete logarithm.\n\
    \   The Fiat-Shamir transformation is a standard technique to transform a\n  \
    \ three-pass interactive Zero-Knowledge Proof protocol (in which the\n   verifier\
    \ chooses a random challenge) to a non-interactive one,\n   assuming that there\
    \ exists a secure cryptographic hash function.\n   Since the hash function is\
    \ publicly defined, the prover is able to\n   compute the challenge by itself,\
    \ hence making the protocol non-\n   interactive.  In this case, the hash function\
    \ (more precisely, the\n   random oracle in the security proof) implements an\
    \ honest verifier,\n   because it assigns a uniformly random challenge c to each\
    \ commitment\n   (g^v or G x [v]) sent by the prover.  This is exactly what an\
    \ honest\n   verifier would do.\n   It is important to note that in Schnorr's\
    \ identification scheme and\n   its non-interactive variant, a secure random number\
    \ generator is\n   REQUIRED.  In particular, bad randomness in v may reveal the\
    \ secret\n   discrete logarithm.  For example, suppose the same random value V\
    \ =\n   g^v mod p is used twice by the prover (e.g., because its random\n   number\
    \ generator failed), but the verifier chooses different\n   challenges c and c'\
    \ (or the hash function is used on two different\n   OtherInfo data, producing\
    \ two different values c and c').  The\n   adversary now observes two proof transcripts\
    \ (V, c, r) and (V, c',\n   r'), based on which he can compute the secret key\
    \ a by:\n   (r-r')/(c'-c) = (v-a*c-v+a*c')/(c'-c) = a mod q.\n   More generally,\
    \ such an attack may even work for a slightly better\n   (but still bad) random\
    \ number generator, where the value v is not\n   repeated, but the adversary knows\
    \ a relation between two values v and\n   v' such as v' = v + w for some known\
    \ value w.  Suppose the adversary\n   observes two proof transcripts (V, c, r)\
    \ and (V', c', r').  He can\n   compute the secret key a by:\n   (r-r'+w)/(c'-c)\
    \ = (v-a*c-v-w+a*c'+w)/(c'-c) = a mod q.\n   This example reinforces the importance\
    \ of using a secure random\n   number generator to generate the ephemeral secret\
    \ v in Schnorr's\n   schemes.\n   Finally, when a security protocol relies on\
    \ the Schnorr NIZK proof\n   for proving the knowledge of a discrete logarithm\
    \ in a non-\n   interactive way, the threat of replay attacks shall be considered.\n\
    \   For example, the Schnorr NIZK proof might be replayed back to the\n   prover\
    \ itself (to introduce some undesirable correlation between\n   items in a cryptographic\
    \ protocol).  This particular attack is\n   prevented by the inclusion of the\
    \ unique UserID in the hash.  The\n   verifier shall check the prover's UserID\
    \ is a valid identity and is\n   different from its own.  Depending on the context\
    \ of specific\n   protocols, other forms of replay attacks should be considered,\
    \ and\n   appropriate contextual information included in OtherInfo whenever\n\
    \   necessary.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ABM15]    Abdalla, M., Benhamouda, F., and P.\
    \ MacKenzie, \"Security\n              of the J-PAKE Password-Authenticated Key\
    \ Exchange\n              Protocol\", 2015 IEEE Symposium on Security and Privacy,\n\
    \              DOI 10.1109/sp.2015.41, May 2015.\n   [AN95]     Anderson, R. and\
    \ R. Needham, \"Robustness principles for\n              public key protocols\"\
    , Proceedings of the 15th Annual\n              International Cryptology Conference\
    \ on Advances in\n              Cryptology, DOI 10.1007/3-540-44750-4_19, 1995.\n\
    \   [FS86]     Fiat, A. and A. Shamir, \"How to Prove Yourself: Practical\n  \
    \            Solutions to Identification and Signature Problems\",\n         \
    \     Proceedings of the 6th Annual International Cryptology\n              Conference\
    \ on Advances in Cryptology,\n              DOI 10.1007/3-540-47721-7_12, 1986.\n\
    \   [MOV96]    Menezes, A., Oorschot, P., and S. Vanstone, \"Handbook of\n   \
    \           Applied Cryptography\", 1996.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [SEC1]     \"\
    Standards for Efficient Cryptography. SEC 1: Elliptic\n              Curve Cryptography\"\
    , SECG SEC1-v2, May 2009,\n              <http://www.secg.org/sec1-v2.pdf>.\n\
    \   [Stinson06]\n              Stinson, D., \"Cryptography: Theory and Practice\"\
    , 3rd\n              Edition, CRC, 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [FIPS186-4]\n              National Institute\
    \ of Standards and Technology, \"Digital\n              Signature Standard (DSS)\"\
    , FIPS PUB 186-4,\n              DOI 10.6028/NIST.FIPS.186-4, July 2013,\n   \
    \           <http://nvlpubs.nist.gov/nistpubs/FIPS/\n              NIST.FIPS.186-4.pdf>.\n\
    \   [Hao10]    Hao, F., \"On Robust Key Agreement Based on Public Key\n      \
    \        Authentication\", 14th International Conference on\n              Financial\
    \ Cryptography and Data Security,\n              DOI 10.1007/978-3-642-14577-3_33,\
    \ February 2010.\n   [HR08]     Hao, F. and P. Ryan, \"Password Authenticated\
    \ Key Exchange\n              by Juggling\", Lecture Notes in Computer Science,\
    \ pp.\n              159-171, from 16th Security Protocols Workshop (SPW'08),\n\
    \              DOI 10.1007/978-3-642-22137-8_23, 2011.\n   [NIST_DSA] NIST Cryptographic\
    \ Toolkit, \"DSA Examples\",\n              <http://csrc.nist.gov/groups/ST/toolkit/documents/\n\
    \              Examples/DSA2_All.pdf>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The editor of this document would like to thank Dylan Clarke,\
    \ Robert\n   Ransom, Siamak Shahandashti, Robert Cragie, Stanislav Smyshlyaev,\
    \ and\n   Tibor Jager for many useful comments.  Tibor Jager pointed out the\n\
    \   optimization technique and the vulnerability issue when the ephemeral\n  \
    \ secret v is not generated randomly.  This work is supported by the\n   EPSRC\
    \ First Grant (EP/J011541/1) and the ERC Starting Grant (No.\n   306994).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Feng Hao (editor)\n   Newcastle University (UK)\n   Urban\
    \ Sciences Building, School of Computing, Newcastle University\n   Newcastle Upon\
    \ Tyne\n   United Kingdom\n   Phone: +44 (0)191-208-6384\n   Email: feng.hao@ncl.ac.uk\n"
