Abstract This document describes a URN (Uniform Resource Name) namespace that is designed to allow Public Identifiers to be expressed in URI (Uniform Resource Identifiers) syntax.
Introduction XML [1] external entities have two identifiers: a system identifier and a public identifier.
The system identifier is a URI, by definition, but the public identifier is simply a string.
Historically, the system identifier of an external entity has been a local, or system specific identifier while the public identifier has been a more global, persistent name.
Unfortunately, public identifiers do not fit neatly into the existing web architecture because they are not legal URIs.
Many new specifications (XSLT, XML Schema, etc.) have the implicit or explicit requirement that all external identifiers be URIs.
The purpose of this namespace is to allow public identifiers to be encoded in URNs in a reliable, comparable way.
This document describes a scheme for representing public identifiers as URNs by introducing a public identifier namespace, "publicid".
This namespace specification is for a formal namespace.
Any string which consists only of the public identifier characters (defined by Production 13 of Extensible Markup Language (XML)
1.0 Second Edition [1]) is a legal public identifier.
In addition to the character set restriction, public identifiers must be normalized by changing all strings of whitespace (the characters #x20, #x9, #xD, and #xA) to single space characters (#x20), and removing all leading and trailing whitespace.
In keeping with this specification's goal of allowing public identifiers to be encoded in a reliable, comparable way, this specification mandates that public identifiers be normalized before encoding them into URNs.
Throughout this specification, we assume that normalization has already been performed.
1.2 Formal Public Identifiers SGML [2] defines a restricted subset of public identifier called a "Formal Public Identifier" (FPI).
FPIs are strings composed from the same range of characters as public identifiers, but with an explicit internal structure.
The structure of Formal Public Identifiers is normatively described in SGML [2]; we review it here for convenience.
Most Formal Public Identifiers consist of the following fields, in this order: an owner identifier, a public text class, a public text description, a public text language or public text designating sequence, and an optional public text display version.
In other words, most FPIs look like this: owner//class
python.org//DTD XML Bookmark Exchange Language 1.0//EN//XML
ISO 8879:1986//ENTITIES Added Latin 1//EN
This document describes an algorithm for encoding public identifiers into URNs that explicitly allows the structured nature of formal public identifiers to be preserved.
However, an algorithm for correctly identifying a Formal Public Identifier and determining the various fields within it is out of scope for this document and not necessary for the implementation of this URN namespace.
Specification Template Namespace ID: "publicid" requested.
Registration Version Number: 1 Registration Date: 2001 05 08
Declared registrant of the namespace: Norman Walsh Sun Microsystems,
Inc. One Network Drive MS UBURO2 201 Burlington, MA 01803 0902
The Namespace Specific String (NSS) for URNs in the "publicid" namespace has the following structure
character is transcribed as "%3F".
Extensible Markup Language (XML) Version 1.0 Second Edition [1] Standard Generalized Markup Language (SGML)
[2] Registration procedures for public text owner identifiers [3]
: The identifier uniqueness considerations for URNs in the "publicid" namespace are the same as the identifier uniqueness considerations for public identifiers.
Formal Public Identifiers with registered owner identifiers are required to be unique.
For unregistered owner identifiers and informal public identifiers, they may or may not be unique.
No enforcement policy can be asserted.
Identifier persistence considerations: The persistence of URNs in the "publicid" namespace is the same as the persistence of the corresponding public identifier.
The "publicid" namespace is available for a wide range of uses; it cannot be subjected to a uniform persistence policy.
As a general rule, formal public identifiers with registered owner identifiers are more likely to be persistent than informal public identifiers or formal public identifiers with unregistered owner identifiers.
One exception to this rule is the "IDN" scheme for producing a registered owner identifier from a domain name.
That scheme contains at least all the weaknesses associated with the persistence of domain names.
It is important to note that a properly registered owner identifier can apply any policy desired to the portion of the "publicid" URN namespace identified by that owner identifier.
Process of identifier assignment: Identifiers in the "publicid" namespace are assigned by applying the conversions described above to a public identifier.
In order to provide a URN in this namespace for a resource that does not have a public identifier, one must be created (according to the rules for creating public identifiers).
There is no requirement that a resource have only one public identifier.
Process of identifier resolution: Identifiers in the "publicid" namespace may be resolved by the same policies and procedures as public identifiers.
Public identifiers can be resolved in many different ways.
Many existing systems provide facilities for resolving them by way of OASIS TR9401 [6] Catalog files.
Other systems resolve them by mapping each component to a local pathname component.
And some systems simply "know about" a fixed set of public identifiers.
In addition, URNs in the 'publicid' namespace may be resolvable by other mechanisms unique to URIs (such as caches).
Rules for Lexical Equivalence: Whitespace normalization is performed before constructing a URN in the "publicid" namespace, so URNs are lexically equivalent if and only if they are lexically identical.
Conformance with URN Syntax: No special considerations.
URNs in this namespace conform to both RFC 2141 and RFC 2396.
The following examples are not guaranteed to be real.
They are listed for pedagogical reasons only.
ISO/IEC 10179:1996//DTD DSSSL Architecture//EN" becomes "urn:
DTD DSSSL Architecture:EN" "ISO 8879:1986//ENTITIES Added Latin 1//EN" becomes "urn:
IDN example.org:DTD XML Bookmarks 1.0:EN:XML"
" //ArborText::prod//DTD Help Document::19970708//EN" becomes "urn:
DTD Help Document;19970708:EN" "foo" becomes "urn:
:foo" "3 3 6" becomes "urn:
Inc.//DTD Book Version 1.0" becomes "urn:
Acme, Inc.:DTD Book Version 1.0" 4.
There are no additional security considerations other than those normally associated with the use and resolution of URNs in general.
