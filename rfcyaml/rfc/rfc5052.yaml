- contents:
  - '             Forward Error Correction (FEC) Building Block

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes how to use Forward Error Correction (FEC)\n
    \  codes to efficiently provide and/or augment reliability for bulk data\n   transfer
    over IP multicast.  This document defines a framework for\n   the definition of
    the information that needs to be communicated in\n   order to use an FEC code
    for bulk data transfer, in addition to the\n   encoded data itself, and for definition
    of formats and codes for\n   communication of that information.  Both information
    communicated\n   with the encoded data itself and information that needs to be\n
    \  communicated 'out-of-band' are considered.  The procedures for\n   specifying
    new FEC codes, defining the information communication\n   requirements associated
    with those codes and registering them with\n   the Internet Assigned Numbers Authority
    (IANA) are also described.\n   The requirements on Content Delivery Protocols
    that wish to use FEC\n   codes defined within this framework are also defined.
    \ The companion\n   document titled \"The Use of Forward Error Correction (FEC)
    in\n   Reliable Multicast\" describes some applications of FEC codes for\n   delivering
    content.  This document obsoletes RFC 3452.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Definitions and Abbreviations ...................................4\n   3.
    Requirements Notation ...........................................4\n   4. Rationale
    .......................................................5\n   5. Applicability
    Statement .........................................6\n   6. Functionality ...................................................6\n
    \     6.1. FEC Schemes ................................................8\n      6.2.
    FEC Object Transmission Information .......................10\n           6.2.1.
    Transport of FEC Object Transmission Information ...11\n           6.2.2. Opacity
    of FEC Object Transmission Information .....12\n           6.2.3. Mandatory FEC
    Object Transmission\n                  Information Elements ...............................12\n
    \          6.2.4. Common FEC Object Transmission Information\n                  Elements
    ...........................................12\n           6.2.5. Scheme-Specific
    FEC Object Transmission\n                  Information Element ................................13\n
    \     6.3. FEC Payload ID ............................................13\n   7.
    FEC Scheme Specifications ......................................14\n   8. CDP
    Specifications .............................................17\n   9. Common Algorithms
    ..............................................18\n      9.1. Block Partitioning
    Algorithm ..............................18\n           9.1.1. First Step .........................................18\n
    \          9.1.2. Second step ........................................19\n   10.
    Requirements from Other Building Blocks .......................20\n   11. Security
    Considerations .......................................20\n   12. IANA Considerations
    ...........................................21\n      12.1. Explicit IANA Assignment
    Guidelines ......................21\n   13. Changes from RFC 3452 .........................................22\n
    \  14. Acknowledgments ...............................................23\n   15.
    References ....................................................23\n      15.1.
    Normative References .....................................23\n      15.2. Informative
    References ...................................23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes how to use Forward Error Correction
    (FEC)\n   codes to provide support for reliable delivery of content within the\n
    \  context of a Content Delivery Protocol (CDP).  This document\n   describes
    a building block as defined in [10], specifically Section\n   4.2 of that document,
    and follows the general guidelines provided in\n   [5].\n   The purpose of this
    building block is to define a framework for\n   forward error correction such
    that:\n   1.  CDPs can be designed to operate with a range of different FEC\n
    \      codes/schemes, without needing to know details of the specific\n       FEC
    code/scheme that may be used.\n   2.  FEC schemes can be designed to operate with
    a range of different\n       CDPs, without needing to know details of the specific
    CDPs.\n   Note that a 'CDP' in the context of this document may consist of\n   several
    distinct protocol mechanisms and may support any kind of\n   application requiring
    reliable transport -- for example, object\n   delivery and streaming applications.\n
    \  This document also provides detailed guidelines on how to write an\n   RFC
    for an FEC scheme corresponding to a new FEC Encoding ID (for\n   both Fully-Specified
    and Under-Specified FEC Schemes -- see Section\n   4).\n   RFC 3452 [3], which
    is obsoleted by this document, contained a\n   previous version, which was published
    in the \"Experimental\" category.\n   RFC 3452 was published as an Experimental
    RFC in part due to the lack\n   at that time of specified congestion control strategies
    suitable for\n   use with Reliable Multicast protocols.\n   This Proposed Standard
    specification is thus based on RFC 3452 [3]\n   updated according to accumulated
    experience and growing protocol\n   maturity since the publication of RFC 3452
    [3].  Said experience\n   applies both to this specification itself and to congestion
    control\n   strategies related to the use of this specification.\n   The differences
    between RFC 3452 [3] and this document are listed in\n   Section 13.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions and Abbreviations\n   Object:  An ordered sequence of octets
    to be transferred by the\n      transport protocol.  For example, a file or stream.\n
    \  Symbol:  A unit of data processed by the Forward Error Correction\n      code.
    \ A symbol is always considered as a unit, i.e., it is either\n      completely
    received or completely lost.\n   Source symbol:  A symbol containing information
    from the original\n      object.\n   Repair symbol:  A symbol containing information
    generated by the FEC\n      code which can be used to recover lost source symbols.\n
    \  Encoding symbol:  A source symbol or a repair symbol.\n   Encoder:  The FEC
    scheme specific functions required to transform a\n      object into FEC encoded
    data.  That is, the functions that produce\n      repair symbols using source
    symbols.\n   Decoder:  The FEC scheme-specific functions required to transform\n
    \     received FEC-encoded data into a copy of the original object.\n   Receiver:
    \ A system supporting the receiving functions of a CDP and\n      FEC scheme according
    to this specification.\n   Sender:  A system supporting the sending functions
    of a CDP and FEC\n      scheme according to this specification.\n   Source Block:
    \ A part of the object formed from a subset of the\n      object's source symbols.\n
    \  CDP:  Content Delivery Protocol\n   FEC:  Forward Error Correction\n"
  title: 2.  Definitions and Abbreviations
- contents:
  - "3.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [1].\n"
  title: 3.  Requirements Notation
- contents:
  - "4.  Rationale\n   An FEC code, in the general sense, is a valuable basic component
    of\n   any CDP that is to provide reliable delivery of an object.  Using FEC\n
    \  codes is effective in the context of IP multicast and reliable\n   delivery
    because FEC encoding symbols can be useful to all receivers\n   for reconstructing
    an object even when the receivers have received\n   different encoding symbols.
    \ Furthermore, FEC codes can ameliorate or\n   even eliminate the need for feedback
    from receivers to senders to\n   request retransmission of lost packets.\n   Central
    to this document is the concept of an 'FEC Scheme', which we\n   distinguish from
    the concept of an 'FEC code' or 'FEC algorithm'.  An\n   FEC scheme defines the
    ancillary information and procedures which,\n   combined with an FEC code or algorithm
    specification, fully define\n   how the FEC code can be used with CDPs.  An FEC
    scheme may be\n   associated with a single standardized FEC code (A 'Fully-Specified'\n
    \  FEC scheme) or may be applicable to many FEC codes (An 'Under-\n   Specified'
    FEC scheme).\n   This document describes a framework for the definition of FEC\n
    \  schemes.  Definition of actual FEC schemes is outside the scope of\n   this
    document.  This document also defines requirements for reliable\n   CDPs that
    make use of FEC schemes.  Any CDP that is compliant to the\n   requirements specified
    in this document can make use of any FEC\n   scheme that is defined within the
    framework described here.  Note\n   that FEC schemes may place restrictions on
    the types of CDP they are\n   intended to be used with.  For example, some FEC
    schemes may be\n   specific to particular types of application, such as file delivery
    or\n   streaming.\n   The goal of the FEC building block is to describe functionality\n
    \  directly related to FEC codes that is common to all reliable CDPs and\n   to
    all FEC schemes, and to leave out any additional functionality\n   that is specific
    to particular CDPs or particular FEC schemes.  The\n   primary functionality described
    in this document that is common to\n   all such CDPs that use FEC codes is the
    definition and transport of\n   three kinds of information from sender to receiver(s):\n
    \     1) encoding symbols themselves,\n      2) ancillary information associated
    with encoding symbols (or\n         groups of such symbols, such as the group
    of symbols in a\n         single packet, or the group of symbols related to a
    single\n         source block), and\n      3) ancillary information associated
    with the whole object being\n         transferred.\n   It is important to note
    that this information is only required by the\n   receiver if one or more of the
    encoding symbols to which it relates\n   are received.\n   This document does
    not describe how receivers may request\n   transmission of particular encoding
    symbols for an object.  This is\n   because although there are CDPs where requests
    for transmission are\n   of use, there are also CDPs that do not require such
    requests.\n   The companion document [4] should be consulted for a full explanation\n
    \  of the benefits of using FEC codes for reliable content delivery\n   using
    IP multicast.  FEC codes are also useful in the context of\n   unicast, and thus
    the scope and applicability of this document is not\n   limited to IP multicast.\n"
  title: 4.  Rationale
- contents:
  - "5.  Applicability Statement\n   The FEC building block does not provide any support
    for congestion\n   control.  Any complete multicast CDP MUST provide congestion
    control\n   that conforms to [6], in particular, Section 3.2 of that document.\n
    \  Thus, congestion control MUST be provided by another building block\n   when
    the FEC building block is used in a CDP.\n   A more complete description of the
    applicability of FEC codes can be\n   found in the companion document [4].\n"
  title: 5.  Applicability Statement
- contents:
  - "6.  Functionality\n   This section describes FEC information that is to be sent
    either in\n   packets also containing FEC encoding symbols or 'out-of-band'.  The\n
    \  FEC information is associated with transmission of encoding symbols\n   related
    to a particular object.  There are three classes of packets\n   that may contain
    FEC information: data packets, session-control\n   packets, and feedback packets.
    \ They generally contain different\n   kinds of FEC information.  Note that some
    CDPs may not use session-\n   control or feedback packets.\n   Data packets may
    sometimes serve as session-control packets as well;\n   both data and session-control
    packets generally travel downstream\n   from the sender towards receivers and
    are sent to a multicast channel\n   or to a specific receiver using unicast.  Session-control
    packets may\n   additionally travel upstream from receivers to senders.\n   As
    a general rule, feedback packets travel upstream from receivers to\n   the sender.
    \ Sometimes, however, they might be sent to a multicast\n   channel or to another
    receiver or to some intermediate node or\n   neighboring router that provides
    recovery services.\n   This document specifies both the FEC information that must
    be carried\n   in data packets and the FEC information that must be communicated\n
    \  from sender to receiver(s) either out-of-band or in data packets.\n   Specification
    of protocol mechanisms for transporting this\n   information, for example, field
    and packet formats, is out of scope\n   of this document.  Instead, this document
    specifies at a higher level\n   the information that must be communicated and
    provides detailed\n   requirements for FEC Scheme and Content Delivery Protocol\n
    \  specifications, which are where the detailed field and packet formats\n   should
    be defined.\n   FEC information is classified as follows:\n   1.  FEC information
    associated with an object\n       This is information that is essential for the
    FEC decoder to\n       decode a specific object.  An example of this information
    is the\n       identity of the FEC scheme that is being used to encode the\n       object,
    in the form of the FEC Encoding ID.  The FEC Encoding ID\n       is described
    further below.  This information may also include\n       FEC scheme-specific
    parameters for the FEC decoder.\n   2.  FEC information associated with specific
    encoding symbols for an\n       object\n       This is information that is associated
    with one or more encoding\n       symbols and is thus needed by the decoder whenever
    one or more of\n       those encoding symbols have been received.  Depending on
    the FEC\n       scheme, information may be associated with individual symbols\n
    \      and/or with groups of symbols.  One common such grouping is the\n       group
    of symbols included within a single packet.  Many FEC\n       schemes also segment
    the object being encoded into multiple\n       'source blocks', each of which
    is processed independently for FEC\n       purposes.  Information about each source
    block is another type of\n       information associated with a group of encoding
    symbols -- in\n       this case, the group of symbols which are related to a given\n
    \      source block.\n   Two 'containers' are provided for communicating the FEC
    information\n   described above, but there is not necessarily a one-to-one\n   correspondence
    between the class of FEC information and the mechanism\n   used.  The two mechanisms
    are:\n   a.  FEC Object Transmission Information\n       CDPs must provide a reliable
    mechanism for communicating certain\n       FEC information from sender to receiver(s).
    \ This information is\n       known as 'FEC Object Transmission Information' and
    its contents\n       depend on the particular FEC scheme.  It includes all information\n
    \      of the first class above and may include information of the\n       second
    class.  The FEC Object Transmission Information can be\n       sent to a receiver
    within the data packet headers, within session\n       control packets, or by
    some other means.\n   b.  FEC Payload ID\n       CDPs must provide a mechanism
    for communicating information which\n       identifies (for FEC purposes) the
    encoding symbols carried by a\n       packet.  This information is known as the
    FEC Payload ID, and its\n       contents depend on the FEC scheme.  It includes
    only information\n       of the second class above.  A data packet that carries
    encoding\n       symbols MUST include an FEC Payload ID.\n"
  - contents:
    - "6.1.  FEC Schemes\n   Two types of FEC scheme are defined by this document:
      'Fully-\n   Specified' FEC schemes and 'Under-Specified' FEC schemes.  An FEC\n
      \  scheme is a Fully-Specified FEC scheme if the encoding scheme is\n   formally
      and Fully-Specified, in a way that independent implementors\n   can implement
      both encoder and decoder from a specification that is\n   an IETF RFC.\n   It
      is possible that an FEC scheme may not be a Fully-Specified FEC\n   scheme,
      because either a specification is simply not available or a\n   party exists
      that owns the encoding scheme and is not willing to\n   disclose the algorithm
      or specification.  We refer to such an FEC\n   encoding scheme as an Under-Specified
      FEC scheme.\n   FEC schemes are identified by an FEC Encoding ID, which is an
      integer\n   identifier assigned by IANA.  The FEC Encoding ID allows receivers
      to\n   select the appropriate FEC decoder.  The value of the FEC Encoding ID\n
      \  MUST be the same for all transmission of encoding symbols related to\n   a
      particular object, but MAY vary across different transmissions of\n   encoding
      symbols about different objects, even if transmitted to the\n   same set of
      multicast channels and/or using a single upper-layer\n   session.\n   The FEC
      Instance ID is an integer value that identifies a specific\n   instance of an
      Under-Specified FEC scheme.  This value is not used\n   for Fully-Specified
      FEC schemes.  The FEC Instance ID is scoped by\n   the FEC Encoding ID, and
      FEC Instance ID values are subject to IANA\n   registration.\n   The FEC Encoding
      ID for Fully-Specified FEC Schemes and both the FEC\n   Encoding ID and FEC
      Instance ID for Under-Specified FEC Schemes are\n   essential for the decoder
      to decode an object.  Thus, they are part\n   of the FEC Object Transmission
      Information.\n   The following requirements apply to all FEC schemes, whether
      Fully-\n   Specified or Under-Specified:\n   o  The type, semantics, and an
      encoding format for the FEC Payload ID\n      and the FEC Object Transmission
      Information MUST be defined.\n   o  A value for the FEC Encoding ID MUST be
      reserved and associated\n      with the types, semantics, and encoding format
      of the FEC Payload\n      ID and the FEC Object Transmission Information.\n
      \  The specification for an Under-Specified FEC Scheme MAY allocate a\n   sub-field
      within the Scheme-specific FEC Object Transmission\n   Information element which
      is for instance-specific information.  Each\n   specific instance of the Under-Specified
      FEC Scheme may then use this\n   field in an instance-specific way.  The FEC
      scheme should define the\n   scheme-specific FEC Object Transmission Information
      element in such a\n   way that receivers that do not support the received FEC
      Instance ID\n   can still parse and interpret the scheme-specific FEC Object\n
      \  Transmission Information element with the exception of the instance-\n   specific
      field.\n   An already defined Under-Specified FEC Scheme (i.e., FEC Encoding
      ID\n   value) MUST be reused if the associated FEC Payload ID and FEC Object\n
      \  Transmission Information have the required fields and encoding\n   formats
      for a new Under-Specified FEC scheme instance.\n   An instance of an Under-Specified
      FEC scheme is fully identified by\n   the tuple (FEC Encoding ID, FEC Instance
      ID).  The tuple MUST\n   identify a single scheme instance that has at least
      one\n   implementation.  The party that owns this tuple MUST be able to\n   provide
      information on how to obtain the Under-Specified FEC scheme\n   instance identified
      by the tuple, e.g., a pointer to a publicly\n   available reference-implementation
      or the name and contacts of a\n   company that sells it, either separately or
      embedded in another\n   product.\n   This specification reserves the range 0-127
      for the values of FEC\n   Encoding IDs for Fully-Specified FEC schemes and the
      range 128-255\n   for the values of Under-Specified FEC schemes.\n"
    title: 6.1.  FEC Schemes
  - contents:
    - "6.2.  FEC Object Transmission Information\n   The FEC Object Transmission Information
      contains information which is\n   essential to the decoder in order to decode
      the encoded object.  It\n   may also contain information which is required to
      decode certain\n   groups of encoding symbols, for example, individual Source
      Blocks\n   within the object.  This information is communicated reliably by
      the\n   CDP to the receiver(s) as described in Section 8.\n   The FEC Object
      Transmission Information may consist of several\n   elements and each element
      may be one of three types, as follows:\n   Mandatory:  These elements are defined
      in this specification and are\n      each mandatory for at least one of the
      two types of FEC Scheme.\n      Each FEC scheme specifies how the values of
      the Mandatory FEC\n      Object Transmission Information elements are determined
      and each\n      CDP specifies how this information is encoded and reliably\n
      \     communicated to the receiver(s).  The Mandatory FEC Object\n      Transmission
      Information includes the identification of the FEC\n      Scheme, which is needed
      by the receiver to determine whether it\n      supports the FEC Scheme.\n   Common:
      \ These elements are defined in this specification and are\n      optional to
      be used by an FEC scheme.  Each FEC scheme specifies\n      which of the Common
      FEC Object Transmission Information elements\n      it uses and how the values
      of these elements are determined.\n   Scheme-specific:  An FEC scheme may specify
      a single Scheme-specific\n      FEC Object Transmission Information element.
      \ The FEC scheme\n      specifies the type, semantics, and encoding format of
      the Scheme-\n      specific FEC Object Transmission Information element.  The\n
      \     resulting octet string is known as the \"encoded Scheme-specific\n      FEC
      Object Transmission Information\".  Each CDP specifies how the\n      encoded
      Scheme-specific FEC Object Transmission is communicated\n      reliably to the
      receiver(s), i.e., exactly where it shall be\n      carried within packets of
      the CDP.  Note that although from the\n      point of view of this specification
      and of CDPs, there is only a\n      single Scheme-specific FEC Object Transmission
      Information\n      element, the FEC scheme may specify this element to contain\n
      \     multiple distinct pieces of information.\n   Each FEC scheme specifies
      an encoding format for the Common and\n   Scheme-specific FEC Object Transmission
      Information.  Each CDP must\n   specify at least one of the following:\n   1.
      \ A means to reliably communicate the Common FEC Object\n       Transmission
      Information elements to the receiver(s) using the\n       encoding format defined
      by the FEC scheme.\n   2.  An alternative, CDP-specific, encoding format for
      each of the\n       Common FEC Object Transmission Information elements.\n   The
      Mandatory and Common FEC Object Transmission Information elements\n   are defined
      in the sections below.\n"
    - contents:
      - "6.2.1.  Transport of FEC Object Transmission Information\n   It is the responsibility
        of the CDP to reliably transport the FEC\n   Object Transmission Information
        to the receiver(s).\n   It is important to note that the encoding format of
        the Mandatory FEC\n   Object Transmission Information elements (the FEC Encoding
        ID) is\n   defined by the CDP.  This is so that the receiver can identify
        the\n   FEC Scheme to be used for interpreting the remaining FEC Object\n
        \  Transmission Information elements.  All CDPs must define encoding\n   formats
        for the Mandatory FEC Object Transmission Information\n   element.\n   Common
        FEC Object Transmission Information elements can be\n   transported in two
        different ways: (a) the FEC Scheme defines an\n   encoding format for the
        Common FEC Object Transmission Information\n   elements that it uses, and
        the CDP transports this encoded data\n   block, or (b) the CDP defines an
        encoding format for each Common FEC\n   Object Transmission Information element
        and transports the\n   information in this format.\n   An FEC Scheme MUST
        define an encoding format for the Common FEC\n   Object Transmission Information
        elements that it uses.  The resulting\n   octet string is known as the \"encoded
        Common FEC Object Transmission\n   Information\".  A CDP MAY define individual
        encoding formats for each\n   of the Common FEC Object Transmission Information
        elements.  The\n   choice of which way the Common FEC Object Transmission
        Information\n   elements shall be transported, (a) or (b), is made by the
        Content\n   Delivery Protocol, and a particular method SHOULD be defined in
        the\n   Content Delivery Protocol specification.  Note that a CDP may provide\n
        \  support for one or both options.\n   In the case that the CDP uses the
        encoding format specified by the\n   FEC scheme, it may simply concatenate
        the encoded Common FEC Object\n   Transmission Information and the encoded
        Scheme-specific FEC Object\n   Transmission Information, or it may carry each
        in a separate field or\n   wrapper within the CDP.  In the former case, the
        concatenated octet\n   string is known as the encoded FEC Object Transmission
        Information.\n   The FEC scheme must define the encoding format for the Common
        FEC\n   Object Transmission Information elements that it uses in such a way\n
        \  that the length of each element is either fixed or can be determined\n
        \  from the encoded data itself.\n   The encoding format of the Scheme-specific
        FEC Object Transmission\n   Information element is defined by the FEC scheme.
        \ CDPs specify only\n   how the resulting octet sequence is communicated.
        \ As with the\n   encoding format for the Common FEC Object Transmission Information\n
        \  elements, the length of the Scheme-specific FEC Object Transmission\n   Information
        must either be fixed or be possible to determine from the\n   encoded data
        itself.\n"
      title: 6.2.1.  Transport of FEC Object Transmission Information
    - contents:
      - "6.2.2.  Opacity of FEC Object Transmission Information\n   The Scheme-specific
        FEC Object Transmission Information element is\n   opaque to the CDP in the
        sense that inspecting the contents of this\n   element can only be done if
        FEC scheme-specific logic is included in\n   the CDP.\n   Any encoding formats
        defined by the FEC scheme for the Common FEC\n   Object Transmission Information
        elements are also opaque to the CDP\n   in the same sense.\n   Any encoding
        formats defined by the CDP for the Common FEC Object\n   Transmission Information
        elements are not opaque in this sense,\n   although it must be considered
        that different FEC Schemes may use\n   different combinations of the Common
        FEC Object Transmission\n   Information elements.\n"
      title: 6.2.2.  Opacity of FEC Object Transmission Information
    - contents:
      - "6.2.3.  Mandatory FEC Object Transmission Information Elements\n   The Mandatory
        FEC Object Transmission Information element is:\n   FEC Encoding ID:  an integer
        between 0 and 255 inclusive identifying\n      a specific FEC scheme (Fully-Specified
        or Under-Specified.)\n"
      title: 6.2.3.  Mandatory FEC Object Transmission Information Elements
    - contents:
      - "6.2.4.  Common FEC Object Transmission Information Elements\n   The Common
        FEC Object Transmission Information elements are described\n   below.  Note
        that with the exception of the FEC Instance ID, this\n   specification does
        not provide complete definitions of these fields.\n   Instead, only aspects
        of the abstract type are defined.  The precise\n   type and semantics are
        defined for each FEC scheme in the FEC scheme\n   specification.\n   FEC Instance
        ID:  an integer between 0 and 65535 inclusive\n      identifying an instance
        of an Under-Specified FEC scheme\n   Transfer-Length:  a non-negative integer
        indicating the length of the\n      object in octets\n   Encoding-Symbol-Length:
        \ a non-negative integer indicating the length\n      of each encoding symbol
        in octets\n   Maximum-Source-Block-Length:  a non-negative integer indicating
        the\n      maximum number of source symbols in a source block\n   Max-Number-of-Encoding-Symbols:
        \ a non-negative integer indicating\n      the maximum number of encoding
        symbols (i.e., source plus repair\n      symbols in the case of a systematic
        code)\n   The FEC Instance ID MUST be used by all Under-Specified FEC schemes\n
        \  and MUST NOT be used by Fully-Specified FEC Schemes.\n   FEC Schemes define
        the precise type of those of the above elements\n   that they use and in particular
        may restrict the value range of each\n   element.  FEC Schemes also define
        an encoding format for the subset\n   of the above elements that they use.
        \ CDPs may also provide an\n   encoding format for each element; in which
        case, this encoding format\n   MUST be capable of representing values up to
        (2^^16)-1 in the case of\n   the FEC Instance ID, (2^^48)-1 in the case of
        the Transfer-Length,\n   and up to (2^^32)-1 for the other elements.  CDPs
        may additionally or\n   alternatively provide a mechanism to transport the
        encoded Common FEC\n   Object Transmission information defined by the FEC
        scheme.  For\n   example, FLUTE [8] specifies an XML-based encoding format
        for these\n   elements, but can also transport FEC scheme-specific encoding
        formats\n   within the EXT-FTI LCT header extension.\n"
      title: 6.2.4.  Common FEC Object Transmission Information Elements
    - contents:
      - "6.2.5.  Scheme-Specific FEC Object Transmission Information Element\n   The
        Scheme-specific FEC Object Transmission Information element may\n   be used
        by an FEC Scheme to communicate information that is essential\n   to the decoder
        and that cannot adequately be represented within the\n   Mandatory or Common
        FEC Object Transmission Information elements.\n   From the point of view of
        a CDP, the Scheme-specific FEC Object\n   Transmission Information element
        is an opaque, variable length, octet\n   string.  The FEC Scheme defines the
        structure of this octet string,\n   which may contain multiple distinct elements.\n"
      title: 6.2.5.  Scheme-Specific FEC Object Transmission Information Element
    title: 6.2.  FEC Object Transmission Information
  - contents:
    - "6.3.  FEC Payload ID\n   The FEC Payload ID contains information that indicates
      to the FEC\n   decoder the relationships between the encoding symbols carried
      by a\n   particular packet and the FEC encoding transformation.  For example,\n
      \  if the packet carries source symbols, then the FEC Payload ID\n   indicates
      which source symbols of the object are carried by the\n   packet.  If the packet
      carries repair symbols, then the FEC Payload\n   ID indicates how those repair
      symbols were constructed from the\n   object.\n   The FEC Payload ID may also
      contain information about larger groups\n   of encoding symbols of which those
      contained in the packet are part.\n   For example, the FEC Payload ID may contain
      information about the\n   source block the symbols are related to.\n   The FEC
      Payload ID for a given packet is essential to the decoder if\n   and only if
      the packet itself is received.  Thus, it must be possible\n   to obtain the
      FEC Payload ID from the received packet.  Usually, the\n   FEC Payload ID is
      simply carried explicitly as a separate field\n   within each packet.  In this
      case, the size of the FEC Payload ID\n   field SHOULD be a small fraction of
      the packet size.  Some FEC\n   schemes may specify means for deriving the relationship
      between the\n   carried encoding symbols and the object implicitly from other\n
      \  information within the packet, such as protocol headers already\n   present.
      \ Such FEC schemes could obviously only be used with CDPs\n   which provided
      the appropriate information from which the FEC Payload\n   ID could be derived.\n
      \  The encoding format of the FEC Payload ID, including its size, is\n   defined
      by the FEC Scheme.  CDPs specify how the FEC Payload ID is\n   carried within
      data packets, i.e., the position of the FEC Payload ID\n   within the CDP packet
      format and the how it is associated with\n   encoding symbols.\n   FEC schemes
      for systematic FEC codes (that is, those codes in which\n   the original source
      data is included within the encoded data) MAY\n   specify two FEC Payload ID
      formats, one for packets carrying only\n   source symbols and another for packets
      carrying at least one repair\n   symbol.  CDPs must include an indication of
      which of the two FEC\n   Payload ID formats is included in each packet if they
      wish to support\n   such FEC Schemes.\n"
    title: 6.3.  FEC Payload ID
  title: 6.  Functionality
- contents:
  - "7.  FEC Scheme Specifications\n   A specification for a new FEC scheme MUST include
    the following\n   things:\n   1.  The FEC Encoding ID value that uniquely identifies
    the FEC\n       scheme.  This value MUST be registered with IANA as described
    in\n       Section 12.\n   2.  The type, semantics, and encoding format of one
    or two FEC\n       Payload IDs.  Where two FEC Payload ID formats are specified,\n
    \      then the FEC scheme MUST be a systematic FEC code and one FEC\n       Payload
    ID format MUST be designated for use with packets\n       carrying only source
    symbols, and the other FEC Payload ID format\n       MUST be designated for use
    with packets carrying at least one\n       repair symbol.\n   3.  The type and
    semantics of the FEC Object Transmission\n       Information.  The FEC Scheme
    MAY define additional restrictions\n       on the type (including value range)
    of the Common FEC Object\n       Transmission Information elements.\n   4.  An
    encoding format for the Common FEC Object Transmission\n       Information elements
    used by the FEC Scheme.\n   Fully-Specified FEC schemes MUST further specify:\n
    \  1.  A full specification of the FEC code.\n       This specification MUST precisely
    define the valid FEC Object\n       Transmission Information values, the valid
    FEC Payload ID values,\n       and the valid packet payload sizes for any given
    object (where\n       packet payload refers to the space -- not necessarily contiguous\n
    \      -- within a packet dedicated to carrying encoding symbol octets).\n       Furthermore,
    given an object, valid values for each of the FEC\n       Object Transmission
    Information elements used by the FEC Scheme,\n       a valid FEC Payload ID value,
    and a valid packet payload size,\n       the specification MUST uniquely define
    the values of the encoding\n       symbol octets to be included in the packet
    payload of a packet\n       with the given FEC Payload ID value.\n       A common
    and simple way to specify the FEC code to the required\n       level of detail
    is to provide a precise specification of an\n       encoding algorithm which,
    given an object, valid values for each\n       of the FEC Object Transmission
    Information elements used by the\n       FEC Scheme for the object, a valid FEC
    Payload ID, and packet\n       payload length as input produces the exact value
    of the encoding\n       symbol octets as output.\n   2.  A description of practical
    encoding and decoding algorithms.\n       This description need not be to the
    same level of detail as for\n       (1) above; however, it must be sufficient
    to demonstrate that\n       encoding and decoding of the code is both possible
    and practical.\n   FEC scheme specifications MAY additionally define the following:\n
    \  1.  Type, semantics, and encoding format of a Scheme-specific FEC\n       Object
    Transmission Information element.\n   Note that if an FEC scheme does not define
    a Scheme-specific FEC\n   Object Transmission Information element, then such an
    element MUST\n   NOT be introduced in future versions of the FEC Scheme.  This\n
    \  requirement is included to ensure backwards-compatibility of CDPs\n   designed
    to support only FEC Schemes that do not use the Scheme-\n   specific FEC Object
    Transmission Information element.\n   Whenever an FEC scheme specification defines
    an 'encoding format' for\n   an element, this must be defined in terms of a sequence
    of octets\n   that can be embedded within a protocol.  The length of the encoding\n
    \  format MUST either be fixed, or it must be possible to derive the\n   length
    from examining the encoded octets themselves.  For example,\n   the initial octets
    may include some kind of length indication.\n   FEC schemes SHOULD make use of
    the Common FEC Object Transmission\n   Information elements in preference to including
    information in a\n   Scheme-specific FEC Object Transmission Information element.\n
    \  FEC scheme specifications SHOULD use the terminology defined in this\n   document
    and SHOULD follow the following format:\n   1. Introduction  <define whether the
    scheme is Fully-Specified or\n      Under-Specified>\n      <describe the use-cases
    addressed by this FEC scheme>\n   2. Formats and Codes\n       2.1 FEC Payload
    ID(s)  <define the type and format of one or two\n          FEC Payload IDs>\n
    \      2.2 FEC Object Transmission Information\n          2.2.1 Mandatory  <define
    the value of the FEC Encoding ID for\n              this FEC scheme>\n          2.2.2
    Common  <describe which Common FEC Object Transmission\n              Information
    elements are used by this FEC scheme, define\n              their value ranges,
    and define an encoding format for\n              them>\n          2.2.3 Scheme-Specific
    \ <define the Scheme-specific FEC Object\n              Transmission Information,
    including an encoding format, if\n              required>\n   3. Procedures  <describe
    any procedures that are specific to this FEC\n      scheme, in particular derivation
    and interpretation of the fields\n      in the FEC Payload ID and FEC Object Transmission
    Information.>\n   4. FEC code specification (for Fully-Specified FEC schemes only)\n
    \     <provide a complete specification of the FEC Code>\n   Specifications MAY
    include additional sections such as those\n   containing examples.\n   Each FEC
    scheme MUST be specified independently of all other FEC\n   schemes; for example,
    in a separate specification or a completely\n   independent section of a larger
    specification.\n"
  title: 7.  FEC Scheme Specifications
- contents:
  - "8.  CDP Specifications\n   A specification for a CDP that uses this building
    block MUST include\n   the following things:\n   1.  Definitions of an encoding
    format for the Mandatory FEC Object\n       Transmission Information element.\n
    \  2.  A means to reliably communicate the Mandatory FEC Object\n       Transmission
    Information element from sender to receiver(s) using\n       the encoding format
    defined in (1).\n   3.  Means to reliably communicate the Common FEC Object Transmission\n
    \      Information element from sender to receiver(s) using either or\n       both
    of (a) the encoding format defined by the FEC Scheme or (b)\n       encoding formats
    defined by the CDP\n   4.  A means to reliably communicate the Scheme-specific
    FEC Object\n       Transmission Information element from sender to receiver(s)
    using\n       the encoding format of the Scheme-specific FEC Object\n       Transmission
    Information element defined by the FEC scheme.\n   5.  A means to communicate
    the FEC Payload ID in association with a\n       data packet.  Note that the encoding
    format of the FEC Payload ID\n       is defined by the FEC Scheme.\n   If option
    (b) of (3) above is used, then the CDP MUST specify an\n   encoding format for
    the Common FEC Object Transmission Information\n   elements.\n   CDPs MAY additionally
    specify the following things:\n   1.  A means to indicate whether the FEC Payload
    ID within a packet is\n       encoded according to the format for packets including
    only source\n       symbols or according to the format for packets including at
    least\n       one repair symbol.\n"
  title: 8.  CDP Specifications
- contents:
  - "9.  Common Algorithms\n   This section describes certain algorithms that are
    expected to be\n   commonly required by FEC schemes or by CDPs.  FEC Schemes and
    CDPs\n   SHOULD use these algorithms in preference to scheme- or protocol-\n   specific
    algorithms, where appropriate.\n"
  - contents:
    - "9.1.  Block Partitioning Algorithm\n   This algorithm computes a partitioning
      of an object into source\n   blocks so that all source blocks are as close to
      being equal length\n   as possible.  A first number of source blocks are of
      the same larger\n   length, and the remaining second number of source blocks
      are of the\n   same smaller length.\n   This algorithm is described in two steps,
      the second of which may be\n   useful in itself as an independent algorithm
      in some cases.  In the\n   first step, the number of source symbols (T) and
      the number of source\n   blocks (N) are derived from the Object transfer length
      (L), Maximum\n   Source Block Length (B), and Symbol Length (E).\n   In the
      second step, the partitioning of the object is derived from\n   the number of
      source symbols (T) and the number of source blocks (N).\n   The partitioning
      is defined in terms of a first number of source\n   blocks (I), a second number
      of source blocks (N-I), the length of\n   each of the first source blocks (A_large),
      and the length of each of\n   the second source blocks (A_small).\n   The following
      notation is used in the description below:\n      ceil[x]  denotes x rounded
      up to the nearest integer.\n      floor[x] denotes x rounded down to the nearest
      integer.\n"
    - contents:
      - "9.1.1.  First Step\n   Input:\n   B  -- Maximum Source Block Length, i.e.,
        the maximum number of source\n         symbols per source block\n   L  --
        Transfer Length in octets\n   E  -- Encoding Symbol Length in octets\n   Output:\n
        \  T  -- the number of source symbols in the object.\n   N  -- the number
        of source blocks into which the object shall be\n         partitioned.\n   Algorithm:\n
        \  1.  The number of source symbols in the transport object is computed\n
        \      as T = ceil[L/E].\n   2.  The transport object shall be partitioned
        into N = ceil[T/B]\n       source blocks.\n"
      title: 9.1.1.  First Step
    - contents:
      - "9.1.2.  Second step\n   Input:\n   T  -- the number of source symbols in
        the object.\n   N  -- the number of source blocks into which the object is\n
        \     partitioned.\n   Output:\n   I  -- the number of larger source blocks.\n
        \  A_large  -- the length of each of the larger source blocks in\n      symbols.\n
        \  A_small  -- the length of each of the smaller source blocks in\n      symbols.\n
        \  Algorithm:\n   1.  A_large = ceil[T/N]\n   2.  A_small = floor[T/N]\n   3.
        \ I = T - A_small * N\n   Each of the first I source blocks then consists
        of A_large source\n   symbols; each source symbol is E octets in length.  Each
        of the\n   remaining N-I source blocks consist of A_small source symbols;
        each\n   source symbol is E octets in length, except that the last source\n
        \  symbol of the last source block is L-((L-1)/E) rounded down to the\n   nearest
        integer)*E octets in length.\n"
      title: 9.1.2.  Second step
    title: 9.1.  Block Partitioning Algorithm
  title: 9.  Common Algorithms
- contents:
  - "10.  Requirements from Other Building Blocks\n   The FEC building block does
    not provide any support for congestion\n   control.  Any complete CDP MUST provide
    congestion control that\n   conforms to [6], and thus this MUST be provided by
    another building\n   block when the FEC building block is used in a CDP.\n   There
    are no other specific requirements from other building blocks\n   for the use
    of this FEC building block.  However, any CDP that uses\n   the FEC building block
    may use other building blocks, for example, to\n   provide support for sending
    higher level session information within\n   data packets containing FEC encoding
    symbols.\n"
  title: 10.  Requirements from Other Building Blocks
- contents:
  - "11.  Security Considerations\n   Data delivery can be subject to denial-of-service
    attacks by\n   attackers which send corrupted packets that are accepted as\n   legitimate
    by receivers.  This is particularly a concern for\n   multicast delivery because
    a corrupted packet may be injected into\n   the session close to the root of the
    multicast tree, in which case,\n   the corrupted packet will arrive at many receivers.
    \ This is\n   particularly a concern for the FEC building block because the use
    of\n   even one corrupted packet containing encoding data may result in the\n
    \  decoding of an object that is completely corrupted and unusable.  It\n   is
    thus RECOMMENDED that source authentication and integrity checking\n   are applied
    to decoded objects before delivering objects to an\n   application.  For example,
    a SHA-1 hash [7] of an object may be\n   appended before transmission, and the
    SHA-1 hash is computed and\n   checked after the object is decoded, but before
    it is delivered to an\n   application.  Source authentication SHOULD be provided,
    for example,\n   by including a digital signature verifiable by the receiver and\n
    \  computed on top of the hash value.  It is also RECOMMENDED that a\n   packet
    authentication protocol such as Timed Efficient Stream Loss-\n   Tolerant Authentication
    (TESLA) [9] be used to detect and discard\n   corrupted packets upon arrival.
    \ Furthermore, it is RECOMMENDED that\n   Reverse Path Forwarding checks be enabled
    in all network routers and\n   switches along the path from the sender to receivers
    to limit the\n   possibility of a bad agent successfully injecting a corrupted
    packet\n   into the multicast tree data path.\n   Another security concern is
    that some FEC information may be obtained\n   by receivers out-of-band in a session
    description, and if the session\n   description is forged or corrupted, then the
    receivers will not use\n   the correct protocol for decoding content from received
    packets.  To\n   avoid these problems, it is RECOMMENDED that measures be taken
    to\n   prevent receivers from accepting incorrect session descriptions,\n   e.g.,
    by using source authentication to ensure that receivers only\n   accept legitimate
    session descriptions from authorized senders.\n"
  title: 11.  Security Considerations
- contents:
  - "12.  IANA Considerations\n   Values of FEC Encoding IDs and FEC Instance IDs
    are subject to IANA\n   registration.  They are in the registry named \"Reliable
    Multicast\n   Transport (RMT) FEC Encoding IDs and FEC Instance IDs\" located
    at\n   time of publication at:\n               http://www.iana.org/assignments/rmt-fec-parameters\n
    \  FEC Encoding IDs and FEC Instance IDs are hierarchical: FEC Encoding\n   IDs
    scope independent ranges of FEC Instance IDs.  Only FEC Encoding\n   IDs that
    correspond to Under-Specified FEC schemes scope a\n   corresponding set of FEC
    Instance IDs.\n   The FEC Encoding ID and FEC Instance IDs are non-negative integers.\n
    \  In this document, the range of values for FEC Encoding IDs is 0 to\n   255.
    \ Values from 0 to 127 are reserved for Fully-Specified FEC\n   schemes, and Values
    from 128 to 255 are reserved for Under-Specified\n   FEC schemes, as described
    in more detail in Section 6.1.\n"
  - contents:
    - "12.1.  Explicit IANA Assignment Guidelines\n   This document defines a name-space
      for FEC Encoding IDs named:\n               ietf:rmt:fec:encoding\n   The values
      that can be assigned within the \"ietf:rmt:fec:encoding\"\n   name-space are
      numeric indexes in the range [0, 255], boundaries\n   included.  Assignment
      requests are granted on a \"IETF Consensus\"\n   basis as defined in [2].  Section
      7 defines explicit requirements\n   that documents defining new FEC Encoding
      IDs should meet.\n   This document also defines a name-space for FEC Instance
      IDs named:\n               ietf:rmt:fec:encoding:instance\n   The \"ietf:rmt:fec:encoding:instance\"
      name-space is a sub-name-space\n   associated with the \"ietf:rmt:fec:encoding\"
      name-space.  Each value\n   of \"ietf:rmt:fec:encoding\" assigned in the range
      [128, 255] has a\n   separate \"ietf:rmt:fec:encoding:instance\" sub-name-space
      that it\n   scopes.  Values of \"ietf:rmt:fec:encoding\" in the range [0, 127]
      do\n   not scope a \"ietf:rmt:fec:encoding:instance\" sub-name-space.\n   The
      values that can be assigned within each \"ietf:rmt:fec:encoding:\n   instance\"
      sub-name-space are non-negative integers less than 65536.\n   Assignment requests
      are granted on a \"First Come First Served\" basis\n   as defined in [2].  The
      same value of \"ietf:rmt:fec:encoding:\n   instance\" can be assigned within
      multiple distinct sub-name-spaces,\n   i.e., the same value of \"ietf:rmt:fec:encoding:instance\"
      can be used\n   for multiple values of \"ietf:rmt:fec:encoding\".\n   Requestors
      of \"ietf:rmt:fec:encoding:instance\" assignments MUST\n   provide the following
      information:\n   o  The value of \"ietf:rmt:fec:encoding\" that scopes the \"ietf:rmt:\n
      \     fec:encoding:instance\" sub-name-space.  This must be in the range\n      [128,
      255].\n   o  Point of contact information\n   o  A pointer to publicly accessible
      documentation describing the\n      Under-Specified FEC scheme, associated with
      the value of \"ietf:\n      rmt:fec:encoding:instance\" assigned, and a way
      to obtain it (e.g.,\n      a pointer to a publicly available reference-implementation
      or the\n      name and contacts of a company that sells it, either separately
      or\n      embedded in a product).\n   It is the responsibility of the requestor
      to keep all the above\n   information up to date.\n"
    title: 12.1.  Explicit IANA Assignment Guidelines
  title: 12.  IANA Considerations
- contents:
  - "13.  Changes from RFC 3452\n   This section lists the changes between the Experimental
    version of\n   this specification, [3], and this version:\n   o  The requirements
    for definition of a new FEC Scheme and the\n      requirements for specification
    of new Content Delivery Protocols\n      that use FEC Schemes are made more explicit
    to permit independent\n      definition of FEC Schemes and Content Delivery Protocols.\n
    \  o  The definitions of basic FEC Schemes have been removed with the\n      intention
    of publishing these separately.\n   o  The FEC Object Transmission Information
    (OTI) is more explicitly\n      defined, and in particular, three classes of FEC
    OTI (Mandatory,\n      Common, and Scheme-specific) are introduced to permit reusable\n
    \     definition of explicit fields in Content Delivery Protocols to\n      carry
    these elements.\n   o  FEC Schemes are required to specify a complete encoding
    for the\n      FEC Object Transmission, which can be carried transparently by\n
    \     Content Delivery protocols (instead of defining explicit\n      elements).\n
    \  o  The possibility for FEC Schemes to define two FEC Payload ID\n      formats
    for use with source and repair packets, respectively, in\n      the case of systematic
    FEC codes is introduced.\n   o  The file blocking algorithm from FLUTE is included
    here as a\n      common algorithm that is recommended to be reused by FEC Schemes\n
    \     when appropriate.\n"
  title: 13.  Changes from RFC 3452
- contents:
  - "14.  Acknowledgments\n   This document is largely based on RFC 3452 [3], and
    thus thanks are\n   due to the additional authors of that document: J. Gemmell,
    L. Rizzo,\n   M.  Handley, and J. Crowcroft.\n"
  title: 14.  Acknowledgments
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n         Considerations
      Section in RFCs\", BCP 26, RFC 2434, October\n         1998.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [3]   Luby, M., Vicisano, L., Gemmell, J.,
      Rizzo, L., Handley, M.,\n         and J. Crowcroft, \"Forward Error Correction
      (FEC) Building\n         Block\", RFC 3452, December 2002.\n   [4]   Luby, M.,
      Vicisano, L., Gemmell, J., Rizzo, L., Handley, M.,\n         and J. Crowcroft,
      \"The Use of Forward Error Correction (FEC) in\n         Reliable Multicast\",
      RFC 3453, December 2002.\n   [5]   Kermode, R. and L. Vicisano, \"Author Guidelines
      for Reliable\n         Multicast Transport (RMT) Building Blocks and Protocol\n
      \        Instantiation documents\", RFC 3269, April 2002.\n   [6]   Mankin,
      A., Romanov, A., Bradner, S., and V. Paxson, \"IETF\n         Criteria for Evaluating
      Reliable Multicast Transport and\n         Application Protocols\", RFC 2357,
      June 1998.\n   [7]   Federal Information Processing Standards Publication (FIPS
      PUB)\n         180-1, Secure Hash Standard, 17 April 1995.\n   [8]   Paila,
      T., Luby, M., Lehtonen, R., Roca, V., and R. Walsh,\n         \"FLUTE - File
      Delivery over Unidirectional Transport\", RFC\n         3926, October 2004.\n
      \  [9]   Perrig, A., Song, D., Canetti, R., Tygar, J., and B. Briscoe,\n         \"Timed
      Efficient Stream Loss-Tolerant Authentication (TESLA):\n         Multicast Source
      Authentication Transform Introduction\", RFC\n         4082, June 2005.\n   [10]
      \ Whetten, B., Vicisano, L., Kermode, R., Handley, M., Floyd, S.,\n         and
      M. Luby, \"Reliable Multicast Transport Building Blocks for\n         One-to-Many
      Bulk-Data Transfer\", RFC 3048, January 2001.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Authors' Addresses\n   Mark Watson\n   Digital Fountain\n   39141 Civic Center
    Drive\n   Suite 300\n   Fremont, CA  94538\n   U.S.A.\n   EMail: mark@digitalfountain.com\n
    \  Michael Luby\n   Digital Fountain\n   39141 Civic Center Drive\n   Suite 300\n
    \  Fremont, CA  94538\n   U.S.A.\n   EMail: luby@digitalfountain.com\n   Lorenzo
    Vicisano\n   Digital Fountain\n   39141 Civic Center Drive\n   Suite 300\n   Fremont,
    CA  94538\n   U.S.A.\n   EMail: lorenzo@digitalfountain.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
