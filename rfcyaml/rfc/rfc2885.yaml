- title: __initial_text__
  contents:
  - '                      Megaco Protocol version 0.8

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is common text with Recommendation H.248 as\n   redetermined\
    \ in Geneva, February 2000.  It must be read in\n   conjunction with the Megaco\
    \ Errata, RFC 2886.  A merged document\n   presenting the Megaco protocol with\
    \ the Errata incorporated will be\n   available shortly.\n   The protocol presented\
    \ in this document meets the requirements for a\n   media gateway control protocol\
    \ as presented in RFC 2805.\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n   1. SCOPE..........................................................6\n\
    \   2. REFERENCES.....................................................6\n   2.1\
    \ Normative references..........................................6\n   2.2 Informative\
    \ references........................................8\n   3. DEFINITIONS....................................................9\n\
    \   4. ABBREVIATIONS.................................................10\n   5.\
    \ CONVENTIONS...................................................11\n   6. CONNECTION\
    \ MODEL..............................................11\n   6.1 Contexts.....................................................14\n\
    \        6.1.1 Context Attributes and Descriptors....................15\n    \
    \    6.1.2 Creating, Deleting and Modifying Contexts.............15\n   6.2 Terminations.................................................15\n\
    \        6.2.1 Termination Dynamics..................................16\n    \
    \    6.2.2 TerminationIDs........................................17\n        6.2.3\
    \ Packages..............................................17\n        6.2.4 Termination\
    \ Properties and Descriptors................18\n        6.2.5 Root Termination......................................20\n\
    \   7. COMMANDS......................................................20\n   7.1\
    \ Descriptors..................................................21\n        7.1.1\
    \ Specifying Parameters.................................21\n        7.1.2 Modem\
    \ Descriptor......................................22\n        7.1.3 Multiplex\
    \ Descriptor..................................22\n        7.1.4 Media Descriptor......................................23\n\
    \        7.1.5 Termination State Descriptor..........................23\n    \
    \    7.1.6 Stream Descriptor.....................................24\n        7.1.7\
    \ LocalControl Descriptor...............................24\n        7.1.8 Local\
    \ and Remote Descriptors..........................25\n        7.1.9 Events Descriptor.....................................28\n\
    \        7.1.10 EventBuffer Descriptor...............................31\n    \
    \    7.1.11 Signals Descriptor...................................31\n        7.1.12\
    \ Audit Descriptor.....................................32\n        7.1.13 ServiceChange\
    \ Descriptor.............................33\n        7.1.14 DigitMap Descriptor..................................33\n\
    \        7.1.15 Statistics Descriptor................................38\n    \
    \    7.1.16 Packages Descriptor..................................39\n        7.1.17\
    \ ObservedEvents Descriptor............................39\n        7.1.18  Topology\
    \ Descriptor.................................39\n   7.2 Command Application Programming\
    \ Interface....................42\n        7.2.1 Add...................................................43\n\
    \        7.2.2 Modify................................................44\n    \
    \    7.2.3 Subtract..............................................45\n        7.2.4\
    \ Move..................................................46\n        7.2.5 AuditValue............................................47\n\
    \        7.2.6 AuditCapabilities.....................................48\n    \
    \    7.2.7 Notify................................................49\n        7.2.8\
    \ ServiceChange.........................................50\n        7.2.9 Manipulating\
    \ and Auditing Context Attributes..........54\n        7.2.10 Generic Command\
    \ Syntax...............................54\n   7.3 Command Error Codes..........................................55\n\
    \   8. TRANSACTIONS..................................................56\n   8.1\
    \ Common Parameters............................................58\n        8.1.1\
    \ Transaction Identifiers...............................58\n        8.1.2 Context\
    \ Identifiers...................................58\n   8.2 Transaction Application\
    \ Programming Interface................58\n        8.2.1 TransactionRequest....................................59\n\
    \        8.2.2 TransactionReply......................................59\n    \
    \    8.2.3 TransactionPending....................................60\n   8.3 Messages.....................................................61\n\
    \   9. TRANSPORT.....................................................61\n   9.1\
    \ Ordering of Commands.........................................62\n   9.2 Protection\
    \ against Restart Avalanche.........................63\n   10. SECURITY CONSIDERATIONS......................................64\n\
    \   10.1 Protection of Protocol Connections..........................64\n   10.2\
    \ Interim AH scheme...........................................65\n   10.3 Protection\
    \ of Media Connections.............................66\n   11.  MG-MGC CONTROL\
    \ INTERFACE....................................66\n   11.1 Multiple Virtual MGs........................................67\n\
    \   11.2 Cold Start..................................................68\n   11.3\
    \ Negotiation of Protocol Version.............................68\n   11.4 Failure\
    \ of an MG............................................69\n   11.5 Failure of an\
    \ MGC...........................................69\n   12. PACKAGE DEFINITION...........................................70\n\
    \   12.1 Guidelines for defining packages............................71\n    \
    \    12.1.1 Package..............................................71\n        12.1.2\
    \ Properties...........................................72\n        12.1.3 Events...............................................72\n\
    \        12.1.4 Signals..............................................73\n    \
    \    12.1.5 Statistics...........................................73\n        12.1.6\
    \ Procedures...........................................73\n   12.2 Guidelines\
    \ to defining Properties, Statistics and Parameters\n        to Events and Signals.......................................73\n\
    \   12.3 Lists.......................................................74\n   12.4\
    \ Identifiers.................................................74\n   12.5 Package\
    \ Registration........................................74\n   13.  IANA CONSIDERATIONS.........................................74\n\
    \   13.1 Packages....................................................74\n   13.2\
    \ Error Codes.................................................75\n   13.3 ServiceChange\
    \ Reasons.......................................76\n   ANNEX A: BINARY ENCODING\
    \ OF THE PROTOCOL (NORMATIVE).............77\n   A.1 Coding of wildcards..........................................77\n\
    \   A.2 ASN.1 syntax specification...................................78\n   A.3\
    \ Digit maps and path names....................................94\n   ANNEX B\
    \ TEXT ENCODING OF THE PROTOCOL (NORMATIVE)................95\n   B.1 Coding of\
    \ wildcards..........................................95\n   B.2 ABNF specification...........................................95\n\
    \   ANNEX C TAGS FOR MEDIA STREAM PROPERTIES (NORMATIVE)............107\n   C.1\
    \ General Media Attributes....................................107\n   C.2 Mux\
    \ Properties..............................................108\n   C.3 General\
    \ bearer properties...................................109\n   C.4 General ATM\
    \ properties......................................109\n   C.5 Frame Relay.................................................112\n\
    \   C.6 IP..........................................................113\n   C.7\
    \ ATM AAL2....................................................113\n   C.8 ATM\
    \ AAL1....................................................114\n   C.9 Bearer Capabilities.........................................116\n\
    \   C.10 AAL5 Properties............................................123\n   C.11\
    \ SDP Equivalents............................................124\n   C.12 H.245......................................................124\n\
    \   ANNEX D TRANSPORT OVER IP (NORMATIVE)...........................125\n   D.1\
    \ Transport over IP/UDP using Application Level Framing.......125\n        D.1.1\
    \ Providing At-Most-Once Functionality.................125\n        D.1.2 Transaction\
    \ identifiers and three-way handshake......126\n                D.1.2.1 Transaction\
    \ identifiers....................126\n                D.1.2.2 Three-way handshake........................126\n\
    \        D.1.3 Computing retransmission timers......................127\n    \
    \    D.1.4 Provisional responses................................128\n        D.1.5\
    \ Repeating Requests, Responses and Acknowledgements...128\n   D.2  using TCP..................................................130\n\
    \           D.2.1 Providing the At-Most-Once functionality..........130\n    \
    \       D.2.2 Transaction identifiers and three way handshake...130\n        \
    \   D.2.3 Computing retransmission timers...................131\n           D.2.4\
    \ Provisional responses.............................131\n           D.2.5 Ordering\
    \ of commands..............................131\n   ANNEX E BASIC PACKAGES..........................................131\n\
    \   E.1 Generic.....................................................131\n    \
    \    E.1.1 Properties...........................................132\n        E.1.2\
    \ Events...............................................132\n        E.1.3 Signals..............................................133\n\
    \        E.1.4 Statistics...........................................133\n   E.2\
    \ Base Root Package...........................................133\n        E.2.1\
    \ Properties...........................................134\n        E.2.2 Events...............................................135\n\
    \        E.2.3 Signals..............................................135\n    \
    \    E.2.4 Statistics...........................................135\n        E.2.5\
    \ Procedures...........................................135\n   E.3 Tone Generator\
    \ Package......................................135\n        E.3.1 Properties...........................................135\n\
    \        E.3.2 Events...............................................136\n    \
    \    E.3.3 Signals..............................................136\n        E.3.4\
    \ Statistics...........................................136\n        E.3.5 Procedures...........................................136\n\
    \   E.4 Tone Detection Package......................................137\n    \
    \    E.4.1 Properties...........................................137\n        E.4.2\
    \ Events...............................................137\n        E.4.3 Signals..............................................139\n\
    \        E.4.4 Statistics...........................................139\n    \
    \    E.4.5 Procedures...........................................139\n   E.5 Basic\
    \ DTMF Generator Package................................140\n        E.5.1 Properties...........................................140\n\
    \        E.5.2 Events...............................................140\n    \
    \    E.5.3 Signals..............................................140\n        E.5.4\
    \ Statistics...........................................141\n        E.5.5 Procedures...........................................141\n\
    \   E.6 DTMF detection Package......................................141\n    \
    \    E.6.1 Properties...........................................142\n        E.6.2\
    \ Events...............................................142\n        E.6.3 Signals..............................................143\n\
    \        E.6.4 Statistics...........................................143\n    \
    \    E.6.5 Procedures...........................................143\n   E.7 Call\
    \ Progress Tones Generator Package.......................143\n        E.7.1 Properties...........................................144\n\
    \        E.7.2 Events...............................................144\n    \
    \    E.7.3 Signals..............................................144\n        E.7.4\
    \ Statistics...........................................145\n        E.7.5 Procedures...........................................145\n\
    \   E.8 Call Progress Tones Detection Package.......................145\n    \
    \    E.8.1 Properties...........................................145\n        E.8.2\
    \ Events...............................................145\n        E.8.3 Signals..............................................145\n\
    \        E.8.4 Statistics...........................................145\n    \
    \    E.8.5 Procedures...........................................146\n   E.9 Analog\
    \ Line Supervision Package.............................146\n        E.9.1 Properties...........................................146\n\
    \        E.9.2 Events...............................................146\n    \
    \    E.9.3 Signals..............................................147\n        E.9.4\
    \ Statistics...........................................148\n        E.9.5 Procedures...........................................148\n\
    \   E.10 Basic Continuity Package...................................148\n    \
    \    E.10.1 Properties..........................................148\n        E.10.2\
    \ Events..............................................148\n        E.10.3 Signals.............................................149\n\
    \        E.10.4 Statistics..........................................150\n    \
    \    E.10.5 Procedures..........................................150\n   E.11 Network\
    \ Package............................................150\n        E.11.1 Properties..........................................150\n\
    \        E.11.2 Events..............................................151\n    \
    \    E.11.3 Signals.............................................152\n        E.11.4\
    \ Statistics..........................................152\n        E.11.5 Procedures..........................................153\n\
    \   E.12 RTP  Package...............................................153\n    \
    \    E.12.1 Properties..........................................153\n        E.12.2\
    \ Events..............................................153\n        E.12.3 Signals.............................................153\n\
    \        E.12.4 Statistics..........................................153\n    \
    \    E.12.5 Procedures..........................................154\n   E.13 TDM\
    \ Circuit Package........................................154\n        E.13.1 Properties..........................................155\n\
    \        E.13.2 Events..............................................155\n    \
    \    E.13.3 Signals.............................................155\n        E.13.4\
    \ Statistics..........................................156\n        E.13.5 Procedures..........................................156\n\
    \   APPENDIX A EXAMPLE CALL FLOWS (INFORMATIVE).....................157\n   A.1\
    \ Residential Gateway to Residential Gateway Call.............157\n        A.1.1\
    \ Programming Residential GW Analog Line Terminations for\n        Idle Behavior..............................................157\n\
    \        A.1.2 Collecting Originator Digits and Initiating Termination\n     \
    \   ...........................................................159\n   Authors'\
    \ Addresses..............................................168\n   Full Copyright\
    \ Statement........................................170\n"
- title: 1. SCOPE
  contents:
  - "1. SCOPE\n   This document defines the protocol used between elements of a\n\
    \   physically decomposed multimedia gateway.  There are no functional\n   differences\
    \ from a system view between a decomposed gateway, with\n   distributed sub-components\
    \ potentially on more than one physical\n   device, and a monolithic gateway such\
    \ as described in H.246. This\n   recommendation does not define how gateways,\
    \ multipoint control units\n   or integrated voice response units (IVRs) work.\
    \  Instead it creates a\n   general framework that is suitable for these applications.\
    \  Packet\n   network interfaces may include IP, ATM or possibly others.  The\n\
    \   interfaces will support a variety of SCN signalling systems,\n   including\
    \ tone signalling, ISDN, ISUP, QSIG, and GSM.  National\n   variants of these\
    \ signalling systems will be supported where\n   applicable.\n   The protocol\
    \ definition in this document is common text with ITU-T\n   Recommendation H.248.\
    \  It meets the requirements documented in RFC\n   2805.\n"
- title: 2. REFERENCES
  contents:
  - '2. REFERENCES

    '
- title: 2.1 Normative references
  contents:
  - "2.1 Normative references\n   ITU-T Recommendation H.225.0 (1998): \"Call Signalling\
    \ Protocols and\n   Media Stream Packetization for Packet Based Multimedia Communications\n\
    \   Systems\".\n   ITU-T Recommendation H.235 (02/98): \"Security and encryption\
    \ for\n   H-Series (H.323 and other H.245-based) multimedia terminals\".\n   ITU-T\
    \ Recommendation H.245 (1998): \"Control Protocol for Multimedia\n   Communication\"\
    .\n   ITU-T Recommendation H.323 (1998): \"Packet Based Multimedia\n   Communication\
    \ Systems\".\n   ITU-T Recommendation I.363.1 (08/96), \"B-ISDN ATM Adaptation\
    \ Layer\n   specification: Type 1 AAL\".\n   ITU-T Recommendation I.363.2 (09/97),\
    \ \"B-ISDN ATM Adaptation Layer\n   specification: Type 2 AAL\".\n   ITU-T Recommendation\
    \ I.363.5 (08/96), \"B-ISDN ATM Adaptation Layer\n   specification: Type 5 AAL\"\
    .\n   ITU-T Recommendation I.366.1 (06/98), \"Segmentation and Reassembly\n  \
    \ Service Specific Convergence Sublayer for the AAL type 2\".\n   ITU-T Recommendation\
    \ I.366.2 (02/99), \"AAL type 2 service specific\n   convergence sublayer for\
    \ trunking\".\n   ITU-T Recommendation I.371 (08/96), \"Traffic control and congestion\n\
    \   control in B-ISDN\".\n   ITU-T Recommendation Q.763 (09/97), \"Signalling\
    \ System No. 7 - ISDN\n   user part formats and codes\".\n   ITU-T Recommendation\
    \ Q.765, \"Signalling System No. 7 - Application\n   transport mechanism\".\n\
    \   ITU-T Recommendation Q.931 (05/98): \"Digital Subscriber Signalling\n   System\
    \ No.  1 (DSS 1) - ISDN User-Network Interface Layer 3\n   Specification for Basic\
    \ Call Control\".\n   ITU-T Recommendation Q.2630.1 (1999), \"AAL Type 2 Signalling\
    \ Protocol\n   (Capability Set 1)\".\n   ITU-T Recommendation Q.2931 (10/95),\
    \ \"Broadband Integrated Services\n   Digital Network (B-ISDN) - Digital Subscriber\
    \ Signalling System No.\n   2 (DSS 2) - User-Network Interface (UNI) - Layer 3\
    \ specification for\n   basic call/connection control\".\n   ITU-T Recommendation\
    \ Q.2941.1 (09/97), \"Digital Subscriber Signalling\n   System No. 2 - Generic\
    \ Identifier Transport\".\n   ITU-T Recommendation Q.2961 (10/95), \"Broadband\
    \ integrated services\n   digital network (B-ISDN) - Digital subscriber signalling\
    \ system no.2\n   (DSS 2) - additional traffic parameters\".\n   ITU-T Recommendation\
    \ Q.2961.2 (06/97), \"Digital subscriber signalling\n   system No. 2 - Additional\
    \ traffic parameters: Support of ATM transfer\n   capability in the broadband\
    \ bearer capability information element.\"\n   ITU-T Recommendation X.213 (11/1995),\
    \ \"Information technology - Open\n   System Interconnection - Network service\
    \ definition plus Amendment 1\n   (08/1997), Addition of the Internet protocol\
    \ address format\n   identifier\".\n   ITU-T Recommendation V.76 (08/96), \"Generic\
    \ multiplexer using V.42\n   LAPM-based procedures\".\n   ITU-T Recommendation\
    \ X.680 (1997): \"Information technology-Abstract\n   Syntax Notation One (ASN.1):\
    \ Specification of basic notation\".\n   ITU-T Recommendation H.246 (1998), \"\
    Interworking of H-series\n   multimedia terminals with H-series multimedia terminals\
    \ and\n   voice/voiceband terminals on GSTN and ISDN\".\n   Rose, M. and D. Cass,\
    \ \"ISO Transport Service on top of the TCP,\n   Version 3\", RFC 1006, May 1987.\n\
    \   Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications:\n \
    \  ABNF\", RFC 2234, November 1997.\n   Handley, M. and  V. Jacobson, \"SDP: Session\
    \ Description Protocol\",\n   RFC 2327, April 1998.\n   Kent, S. and R. Atkinson,\
    \ \"IP Authentication Header\", RFC 2402,\n   November 1998.\n   Kent, S. and\
    \ R. Atkinson, \"IP Encapsulating Security Payload (ESP)\",\n   RFC 2406, November\
    \ 1998.\n"
- title: 2.2 Informative references
  contents:
  - "2.2 Informative references\n   ITU-T Recommendation E.180/Q.35 (1998): \"Technical\
    \ characteristics of\n   tones for the telephone service\".\n   CCITT Recommendation\
    \ G.711 (1988), \"Pulse Code Modulation (PCM) of\n   voice frequencies\".\n  \
    \ ITU-T Recommendation H.221 (05/99),\"Frame structure for a 64 to 1920\n   kbit/s\
    \ channel in audiovisual teleservices\".\n   ITU-T Recommendation H.223 (1996),\
    \ \"Multiplexing protocol for low bit\n   rate multimedia communication\".\n \
    \  ITU-T Recommendation Q.724 (1988): \"Signalling procedures\".\n   Postel, J.,\
    \ \"User Datagram Protocol\", STD 6, RFC 768, August 1980.\n   Postel, J., \"\
    Internet protocol\", STD 5, RFC 791, September 1981.\n   Postel, J., \"TRANSMISSION\
    \ CONTROL PROTOCOL\", STD 7, RFC 793,\n   September 1981.\n   Simpson, W., \"\
    The Point-to-Point Protocol\", STD 51, RFC 1661, July\n   1994.\n   Schulzrinne,\
    \ H., Casner, S., Frederick, R. and V. Jacobson, \"RTP: A\n   Transport Protocol\
    \ for Real-Time Applications\", RFC 1889, January\n   1996.\n   Schulzrinne, H.,\
    \ \"RTP Profile for Audio and Video Conferences with\n   Minimal Control\", RFC\
    \ 1890, January 1996.\n   Kent, S. and R. Atkinson, \"Security Architecture for\
    \ the Internet\n   Protocol\", RFC 2401, November 1998.\n   Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version 6 (IPv6)\n   Specification\", RFC 2460,\
    \ December 1998.\n   Handley, M., Schulzrinne, H., Schooler, E. and J. Rosenberg,\
    \ \"SIP:\n   Session Initiation Protocol\", RFC 2543, March 1999.\n   Greene,\
    \ N., Ramalho, M. and B. Rosen, \"Media Gateway control protocol\n   architecture\
    \ and requirements\", RFC 2805, April 1999.\n"
- title: 3. DEFINITIONS
  contents:
  - "3. DEFINITIONS\n   Access Gateway: A type of gateway that provides a User to\
    \ Network\n   Interface (UNI) such as ISDN.\n   Descriptor: A syntactic element\
    \ of the protocol that groups related\n   properties.  For instance, the properties\
    \ of a media flow on the MG\n   can be set by the MGC by including the appropriate\
    \ descriptor in a\n   command.\n   Media Gateway (MG): The media gateway converts\
    \ media provided in one\n   type of network to the format required in another\
    \ type of network.\n   For example, a MG could terminate bearer channels from\
    \ a switched\n   circuit network (e.g., DS0s) and media streams from a packet\
    \ network\n   (e.g., RTP streams in an IP network).  This gateway may be capable\
    \ of\n   processing audio, video and T.120 alone or in any combination, and\n\
    \   will be capable of full duplex media translations.  The MG may also\n   play\
    \ audio/video messages and performs other IVR functions, or may\n   perform media\
    \ conferencing.\n   Media Gateway Controller (MGC): Controls the parts of the\
    \ call state\n   that pertain to connection control for media channels in a MG.\n\
    \   Multipoint Control Unit (MCU): An entity that controls the setup and\n   coordination\
    \ of a multi-user conference that typically includes\n   processing of audio,\
    \ video and data.\n   Residential Gateway: A gateway that interworks an analogue\
    \ line to a\n   packet network. A residential gateway typically contains one or\
    \ two\n   analogue lines and is located at the customer premises.\n   SCN FAS\
    \ Signalling Gateway: This function contains the SCN Signalling\n   Interface\
    \ that terminates SS7, ISDN or other signalling links where\n   the call control\
    \ channel and bearer channels are collocated in the\n   same physical span.\n\
    \   SCN NFAS Signalling Gateway: This function contains the SCN\n   Signalling\
    \ Interface that terminates SS7 or other signalling links\n   where the call control\
    \ channels are separated from bearer channels.\n   Stream: Bidirectional media\
    \ or control flow received/sent by a media\n   gateway as part of a call or conference.\n\
    \   Trunk: A communication channel between two switching systems such as\n   a\
    \ DS0 on a T1 or E1 line.\n   Trunking Gateway: A gateway between SCN network\
    \ and packet network\n   that typically terminates a large number of digital circuits.\n"
- title: 4. ABBREVIATIONS
  contents:
  - "4. ABBREVIATIONS\n   This recommendation defines the following terms.\n   ATM\
    \          Asynchronous Transfer Mode\n   BRI          Basic Rate Interface\n\
    \   CAS          Channel Associated Signalling\n   DTMF         Dual Tone Multi-Frequency\n\
    \   FAS          Facility Associated Signalling\n   GW           GateWay\n   IANA\
    \         Internet Assigned Numbers Authority\n   IP           Internet Protocol\n\
    \   ISUP         ISDN User Part\n   MG           Media Gateway\n   MGC       \
    \   Media Gateway Controller\n   NFAS         Non-Facility Associated Signalling\n\
    \   PRI          Primary Rate Interface\n   PSTN         Public Switched Telephone\
    \ Network\n   QoS          Quality of Service\n   RTP          Real-time Transport\
    \ Protocol\n   SCN          Switched Circuit Network\n   SG           Signalling\
    \ Gateway\n   SS7          Signalling System No. 7\n"
- title: 5. CONVENTIONS
  contents:
  - "5. CONVENTIONS\n   In this recommendation, \"shall\" refers to a mandatory requirement,\n\
    \   while \"should\" refers to a suggested but optional feature or\n   procedure.\
    \ The term \"may\" refers to an optional course of action\n   without expressing\
    \ a preference.\n"
- title: 6. CONNECTION MODEL
  contents:
  - "6. CONNECTION MODEL\n   The connection model for the protocol describes the logical\
    \ entities,\n   or objects, within the Media Gateway that can be controlled by\
    \ the\n   Media Gateway Controller.  The main abstractions used in the\n   connection\
    \ model are Terminations and Contexts.\n   A Termination sources and/or sinks\
    \ one or more streams.  In a\n   multimedia conference, a Termination can be multimedia\
    \ and sources or\n   sinks multiple media streams.  The media stream parameters,\
    \ as well\n   as modem, and bearer parameters are encapsulated within the\n  \
    \ Termination.\n   A Context is an association between a collection of Terminations.\n\
    \   There is a special type of Context, the null Context, which contains\n   all\
    \ Terminations that are not associated to any other Termination.\n   For instance,\
    \ in a decomposed access gateway, all idle lines are\n   represented by Terminations\
    \ in the null Context.\n          +------------------------------------------------------+\n\
    \          |Media Gateway                                         |\n        \
    \  | +-------------------------------------------------+  |\n          | |Context\
    \                          +-------------+ |  |\n          | |               \
    \                  | Termination | |  |\n          | |                       \
    \          |-------------| |  |\n          | |  +-------------+             +->|\
    \ SCN Bearer  |<---+->\n          | |  | Termination |   +-----+   |  |   Channel\
    \   | |  |\n          | |  |-------------|   |     |---+  +-------------+ |  |\n\
    \        <-+--->| RTP Stream  |---|  *  |                      |  |\n        \
    \  | |  |             |   |     |---+  +-------------+ |  |\n          | |  +-------------+\
    \   +-----+   |  | Termination | |  |\n          | |                         \
    \     |  |-------------| |  |\n          | |                              +->|\
    \ SCN Bearer  |<---+->\n          | |                                 |   Channel\
    \   | |  |\n          | |                                 +-------------+ |  |\n\
    \          | +-------------------------------------------------+  |\n        \
    \  |                                                      |\n          |     \
    \                                                 |\n          |             \
    \       +------------------------------+  |\n          |                    |Context\
    \                       |  |\n          |  +-------------+   |              +-------------+\
    \ |  |\n          |  | Termination |   | +-----+      | Termination | |  |\n \
    \         |  |-------------|   | |     |      |-------------| |  |\n        <-+->|\
    \ SCN Bearer  |   | |  *  |------| SCN Bearer  |<---+->\n          |  |   Channel\
    \   |   | |     |      |   Channel   | |  |\n          |  +-------------+   |\
    \ +-----+      +-------------+ |  |\n          |                    +------------------------------+\
    \  |\n          |                                                      |\n   \
    \       |                                                      |\n          |\
    \ +-------------------------------------------------+  |\n          | |Context\
    \                                          |  |\n          | |  +-------------+\
    \                +-------------+ |  |\n          | |  | Termination |   +-----+\
    \      | Termination | |  |\n          | |  |-------------|   |     |      |-------------|\
    \ |  |\n        <-+--->| SCN Bearer  |---|  *  |------| SCN Bearer  |<---+->\n\
    \          | |  |   Channel   |   |     |      |   Channel   | |  |\n        \
    \  | |  +-------------+   +-----+      +-------------+ |  |\n          | +-------------------------------------------------+\
    \  |\n          | ___________________________________________________  |\n   \
    \       +------------------------------------------------------+\n           \
    \     Figure 1: Example of H.248 Connection Model\n   Figure 1 is a graphical\
    \ depiction of these concepts.  The diagram of\n   Figure 1 gives several examples\
    \ and is not meant to be an all-\n   inclusive illustration.  The asterisk box\
    \ in each of the Contexts\n   represents the logical association of Terminations\
    \ implied by the\n   Context.\n   The example below shows an example of one way\
    \ to accomplish a call-\n   waiting scenario in a decomposed access gateway, illustrating\
    \ the\n   relocation of a Termination between Contexts.   Terminations T1 and\n\
    \   T2 belong to Context C1 in a two-way audio call.  A second audio call\n  \
    \ is waiting for T1 from Termination T3.  T3 is alone in Context C2.\n   T1 accepts\
    \ the call from T3, placing T2 on hold.  This action results\n   in T1 moving\
    \ into Context C2, as shown below.\n          +------------------------------------------------------+\n\
    \          |Media Gateway                                         |\n        \
    \  | +-------------------------------------------------+  |\n          | |Context\
    \ C1                                       |  |\n          | |  +-------------+\
    \                +-------------+ |  |\n          | |  | Term. T2    |   +-----+\
    \      | Term. T1    | |  |\n          | |  |-------------|   |     |      |-------------|\
    \ |  |\n        <-+--->| RTP Stream  |---|  *  |------| SCN Bearer  |<---+->\n\
    \          | |  |             |   |     |      |   Channel   | |  |\n        \
    \  | |  +-------------+   +-----+      +-------------+ |  |\n          | +-------------------------------------------------+\
    \  |\n          |                                                      |\n   \
    \       | +-------------------------------------------------+  |\n          |\
    \ |Context C2                                       |  |\n          | |      \
    \                           +-------------+ |  |\n          | |              \
    \      +-----+      | Term. T3    | |  |\n          | |                    | \
    \    |      |-------------| |  |\n          | |                    |  *  |------|\
    \ SCN Bearer  |<---+->\n          | |                    |     |      |   Channel\
    \   | |  |\n          | |                    +-----+      +-------------+ |  |\n\
    \          | +-------------------------------------------------+  |\n        \
    \  +------------------------------------------------------+\n      Figure 2: Example\
    \ Call Waiting Scenario / Alerting Applied to T1\n          +------------------------------------------------------+\n\
    \          |Media Gateway                                         |\n        \
    \  | +-------------------------------------------------+  |\n          | |Context\
    \ C1                                       |  |\n          | |  +-------------+\
    \                                |  |\n          | |  | Term. T2    |   +-----+\
    \                      |  |\n          | |  |-------------|   |     |        \
    \              |  |\n        <-+--->| RTP Stream  |---|  *  |                \
    \      |  |\n          | |  |             |   |     |                      | \
    \ |\n          | |  +-------------+   +-----+                      |  |\n    \
    \      | +-------------------------------------------------+  |\n          | \
    \                                                     |\n          | +-------------------------------------------------+\
    \  |\n          | |Context C2                                       |  |\n   \
    \       | |  +-------------+                +-------------+ |  |\n          |\
    \ |  | Term. T1    |   +-----+      | Term. T3    | |  |\n          | |  |-------------|\
    \   |     |      |-------------| |  |\n        <-+--->| SCN Bearer  |---|  * \
    \ |------| SCN Bearer  |<---+->\n          | |  |   Channel   |   |     |    \
    \  |   Channel   | |  |\n          | |  +-------------+   +-----+      +-------------+\
    \ |  |\n          | +-------------------------------------------------+  |\n \
    \         +------------------------------------------------------+\n         \
    \  Figure 3. Example Call Waiting Scenario / Answer by T1\n"
- title: 6.1 Contexts
  contents:
  - "6.1 Contexts\n   A Context is an association between a number of Terminations.\
    \  The\n   Context describes the topology (who hears/sees whom) and the media\n\
    \   mixing and/or switching parameters if more than two Terminations are\n   involved\
    \ in the association.\n   There is a special Context called the null Context.\
    \ It contains\n   Terminations that are not associated to any other Termination.\n\
    \   Terminations in the null Context can have their parameters examined\n   or\
    \ modified, and may have events detected on them.\n   In general, an Add command\
    \ is used to add Terminations to Contexts.\n   If the MGC does not specify an\
    \ existing Context to which the\n   Termination is to be added, the MG creates\
    \ a new Context.  A\n   Termination may be removed from a Context with a Subtract\
    \ command,\n   and a Termination may be moved from one Context to another with\
    \ a\n   Move command. A Termination SHALL exist in only one Context at a\n   time.\n\
    \   The maximum number of Terminations in a Context is a MG property.\n   Media\
    \ gateways that offer only point-to-point connectivity might\n   allow at most\
    \ two Terminations per Context. Media gateways that\n   support multipoint conferences\
    \ might allow three or more terminations\n   per Context.\n"
- title: 6.1.1 Context Attributes and Descriptors
  contents:
  - "6.1.1 Context Attributes and Descriptors\n   The attributes of Contexts are:\n\
    \    .  ContextID.\n    .  The topology (who hears/sees whom).  The topology of\
    \ a Context\n       describes the flow of media between the Terminations within\
    \ a\n       Context.  In contrast, the mode of a Termination (send/receive/_)\n\
    \       describes the flow of the media at the ingress/egress of the\n       media\
    \ gateway.\n    .  The priority is used for a context in order to provide the\
    \ MG\n       with information about a certain precedence handling for a\n    \
    \   context. The MGC can also use the priority to control\n       autonomously\
    \ the traffic precedence in the MG in a smooth way in\n       certain situations\
    \ (e.g.  restart), when a lot of contexts must\n       be handled simultaneously.\n\
    \    .  An indicator for an emergency call is also provided to allow a\n     \
    \  preference handling in the MG.\n"
- title: 6.1.2 Creating, Deleting and Modifying Contexts
  contents:
  - "6.1.2 Creating, Deleting and Modifying Contexts\n   The protocol can be used\
    \ to (implicitly) create Contexts and modify\n   the parameter values of existing\
    \ Contexts.  The protocol has commands\n   to add Terminations to Contexts, subtract\
    \ them from Contexts, and to\n   move Terminations between Contexts.  Contexts\
    \ are deleted implicitly\n   when the last remaining Termination is subtracted\
    \ or moved out.\n"
- title: 6.2 Terminations
  contents:
  - "6.2 Terminations\n   A Termination is a logical entity on a MG that sources and/or\
    \ sinks\n   media and/or control streams.  A Termination is described by a number\n\
    \   of characterizing Properties, which are grouped in a set of\n   Descriptors\
    \ that are included in commands. Terminations have unique\n   identities (TerminationIDs),\
    \ assigned by the MG at the time of their\n   creation.\n   Terminations representing\
    \ physical entities have a semi-permanent\n   existence.  For example, a Termination\
    \ representing a TDM channel\n   might exist for as long as it is provisioned\
    \ in the gateway.\n   Terminations representing ephemeral information flows, such\
    \ as RTP\n   flows, would usually exist only for the duration of their use.\n\
    \   Ephemeral Terminations are created by means of an Add command.  They\n   are\
    \ destroyed by means of a Subtract command.  In contrast, when a\n   physical\
    \ Termination is Added to or Subtracted from a Context, it is\n   taken from or\
    \ to the null Context, respectively.\n   Terminations may have signals applied\
    \ to them.  Signals are MG\n   generated media streams such as tones and announcements\
    \ as well as\n   line signals such as hookswitch.  Terminations may be programmed\
    \ to\n   detect Events, the occurrence of which can trigger notification\n   messages\
    \ to the MGC, or action by the MG.  Statistics may be\n   accumulated on a Termination.\
    \  Statistics are reported to the MGC\n   upon request (by means of the AuditValue\
    \ command, see section 7.2.5)\n   and when the Termination is taken out of the\
    \ call it is in.\n   Multimedia gateways may process multiplexed media streams.\
    \  For\n   example, Recommendation H.221 describes a frame structure for\n   multiple\
    \ media streams multiplexed on a number of digital 64 kbit/s\n   channels.  Such\
    \ a case is handled in the connection model in the\n   following way.  For every\
    \ bearer channel that carries part of the\n   multiplexed streams, there is a\
    \ Termination.  The Terminations that\n   source/sink the digital channels are\
    \ connected to a separate\n   Termination called the multiplexing Termination.\
    \ This Termination\n   describes the multiplex used (e.g. how the H.221 frames\
    \ are carried\n   over the digital channels used).  The MuxDescriptor is used\
    \ to this\n   end.  If multiple media are carried, this Termination contains\n\
    \   multiple StreamDescriptors. The media streams can be associated with\n   streams\
    \ sourced/sunk by other Terminations in the Context.\n   Terminations may be created\
    \ which represent multiplexed bearers, such\n   as an ATM AAL2.  When a new multiplexed\
    \ bearer is to be created, an\n   ephemeral termination is created in a context\
    \ established for this\n   purpose.  When the termination is subtracted, the multiplexed\
    \ bearer\n   is destroyed.\n"
- title: 6.2.1 Termination Dynamics
  contents:
  - "6.2.1 Termination Dynamics\n   The protocol can be used to create new Terminations\
    \ and to modify\n   property values of existing Terminations.  These modifications\n\
    \   include the possibility of adding or removing events and/or signals.\n   The\
    \ Termination properties, and events and signals are described in\n   the ensuing\
    \ sections. An MGC can only release/modify terminations and\n   the resources\
    \ that the termination represents which it has previously\n   seized via, e.g.,\
    \ the Add command.\n"
- title: 6.2.2 TerminationIDs
  contents:
  - "6.2.2 TerminationIDs\n   Terminations are referenced by a TerminationID, which\
    \ is an arbitrary\n   schema chosen by the MG.\n   TerminationIDs of physical\
    \ Terminations are provisioned in the Media\n   Gateway. The TerminationIDs may\
    \ be chosen to have structure.  For\n   instance, a TerminationID may consist\
    \ of trunk group and a trunk\n   within the group.\n   A wildcarding mechanism\
    \ using two types of wildcards can be used with\n   TerminationIDs.  The two wildcards\
    \ are ALL and CHOOSE.  The former is\n   used to address multiple Terminations\
    \ at once, while the latter is\n   used to indicate to a media gateway that it\
    \ must select a Termination\n   satisfying the partially specified TerminationID.\
    \  This allows, for\n   instance, that a MGC instructs a MG to choose a circuit\
    \ within a\n   trunk group.\n   When ALL is used in the TerminationID of a command,\
    \ the effect is\n   identical to repeating the command with each of the matching\n\
    \   TerminationIDs.  Since each of these commands may generate a\n   response,\
    \ the size of the entire response may be large.  If\n   individual responses are\
    \ not required, a wildcard response may be\n   requested.  In such a case, a single\
    \ response is generated, which\n   contains the UNION of all of the individual\
    \ responses which otherwise\n   would have been generated, with duplicate values\
    \ suppressed.\n   Wildcard response may be particularly useful in the Audit commands.\n\
    \   The encoding of the wildcarding mechanism is detailed in Annexes A\n   and\
    \ B.\n"
- title: 6.2.3 Packages
  contents:
  - "6.2.3 Packages\n   Different types of gateways may implement Terminations that\
    \ have\n   widely differing characteristics.  Variations in Terminations are\n\
    \   accommodated in the protocol by allowing Terminations to have\n   optional\
    \ Properties, Events, Signals and Statistics implemented by\n   MGs.\n   In order\
    \ to achieve MG/MGC interoperability, such options are grouped\n   into Packages,\
    \ and a Termination realizes a set of such Packages.\n   More information on definition\
    \ of packages can be found in section\n   12.  An MGC can audit a Termination\
    \ to determine which Packages it\n   realizes.\n   Properties, Events, Signals\
    \ and Statistics defined in Packages, as\n   well as parameters to them, are referenced\
    \ by identifiers (Ids).\n   Identifiers are scoped. For each package, PropertyIds,\
    \ EventIds,\n   SignalIds, StatisticsIds and ParameterIds have unique name spaces\
    \ and\n   the same identifier may be used in each of them.  Two PropertyIds in\n\
    \   different packages may also have the same identifier, etc.\n"
- title: 6.2.4 Termination Properties and Descriptors
  contents:
  - "6.2.4 Termination Properties and Descriptors\n   Terminations have properties.\
    \  The properties have unique\n   PropertyIDs.  Most properties have default values.\
    \  When a\n   Termination is created, properties get their default values, unless\n\
    \   the controller specifically sets a different value.  The default\n   value\
    \ of a property of a physical Termination can be changed by\n   setting it to\
    \ a different value when the Termination is in the null\n   Context.  Every time\
    \ such a Termination returns to the null Context,\n   the values of its properties\
    \ are reset to this default value.\n   There are a number of common properties\
    \ for Terminations and\n   properties specific to media streams. The common properties\
    \ are also\n   called the termination state properties.  For each media stream,\n\
    \   there are local properties and properties of the received and\n   transmitted\
    \ flows.\n   Properties not included in the base protocol are defined in Packages.\n\
    \   These properties are referred to by a name consisting of the\n   PackageName\
    \ and a PropertyId.  Most properties have default values\n   described in the\
    \ Package description. Properties may be read- only or\n   read/write.  The possible\
    \ values of a property may be audited, as can\n   their current values.  For properties\
    \ that are read/write, the MGC\n   can set their values.  A property may be declared\
    \ as \"Global\" which\n   has a single value shared by all terminations realizing\
    \ the package.\n   Related properties are grouped into descriptors for convenience.\n\
    \   When a Termination is Added to a Context, the value of its read/write\n  \
    \ properties can be set by including the appropriate descriptors as\n   parameters\
    \ to the Add command.  Properties not mentioned in the\n   command retain their\
    \ prior values.  Similarly, a property of a\n   Termination in a Context may have\
    \ its value changed by the Modify\n   command.  Properties not mentioned in the\
    \ Modify command retain their\n   prior values. Properties may also have their\
    \ values changed when a\n   Termination is moved from one Context to another as\
    \ a result of a\n   Move command.  In some cases, descriptors are returned as\
    \ output from\n   a command.\n   The following table lists all of the possible\
    \ Descriptors and their\n   use.  Not all descriptors are legal as input or output\
    \ parameters to\n   every command.\n   Descriptor Name           Description\n\
    \   Modem                     Identifies modem type and properties when\n    \
    \                         applicable.\n   Mux                       Describes\
    \ multiplex type for multimedia\n                             terminations (e.g.\
    \ H.221, H.223, H.225.0)\n                             and Terminations forming\
    \ the input mux.\n   Media                     A list of media stream specifications\
    \ (see\n                             7.1.4).\n   TerminationState          Properties\
    \ of a Termination (which can be\n                             defined in Packages)\
    \ that are not stream\n                             specific.\n   Stream     \
    \               A list of remote/local/localControl\n                        \
    \     descriptors for a single stream.\n   Local                     Contains\
    \ properties that specify the media\n                             flows that the\
    \ MG receives from the remote\n                             entity.\n   Remote\
    \                    Contains properties that specify the media\n            \
    \                 flows that the MG sends to the remote\n                    \
    \         entity.\n   LocalControl              Contains properties (which can\
    \ be defined\n                             in packages) that are of interest between\n\
    \                             the MG and the MGC.\n   Events                 \
    \   Describes events to be detected by the MG\n                             and\
    \ what to do when an event is detected.\n   EventBuffer               Describes\
    \ events to be detected by the MG\n                             when Event Buffering\
    \ is active.\n   Signals                   Describes signals and/or actions to\
    \ be\n                             applied (e.g. Busy Tone) to the\n         \
    \                    Terminations.\n   Audit                     In Audit commands,\
    \ identifies which\n                             information is desired.\n   Packages\
    \                  In AuditValue, returns a list of Packages\n               \
    \              realized by Termination.\n   DigitMap                  Instructions\
    \ for handling DTMF tones at\n                             the MG.\n   ServiceChange\
    \             In ServiceChange, what, why service change\n                   \
    \          occurred, etc.\n   ObservedEvents            In Notify or AuditValue,\
    \ report of events\n                             observed.\n   Statistics    \
    \            In Subtract and Audit, Report of\n                             Statistics\
    \ kept on a Termination.\n"
- title: 6.2.5 Root Termination
  contents:
  - "6.2.5 Root Termination\n   Occasionally, a command must refer to the entire gateway,\
    \ rather than\n   a termination within it.  A special TerminationID, \"Root\"\
    \ is reserved\n   for this purpose.  Packages may be defined on Root.  Root thus\
    \ may\n   have properties and events (signals  are not appropriate for root).\n\
    \   Accordingly, the root TerminationID may appear in:\n    .  a Modify command\
    \ - to change a property or set an event\n    .  a Notify command - to report\
    \ an event\n    .  an AuditValue return - to examine the values of properties\n\
    \       implemented on root\n    .  an AuditCapability - to determine what properties\
    \ of root are\n       implemented\n    .  a ServiceChange - to declare the gateway\
    \ in or out of service.\n   Any other use of the root TerminationID is an error.\n"
- title: 7. COMMANDS
  contents:
  - "7. COMMANDS\n   The protocol provides commands for manipulating the logical entities\n\
    \   of the protocol connection model, Contexts and Terminations.\n   Commands\
    \ provide control at the finest level of granularity supported\n   by the protocol.\
    \  For example, Commands exist to add Terminations to\n   a Context, modify Terminations,\
    \ subtract Terminations from a Context,\n   and audit properties of Contexts or\
    \ Terminations. Commands provide\n   for complete control of the properties of\
    \ Contexts and Terminations.\n   This includes specifying which events a Termination\
    \ is to report,\n   which signals/actions are to be applied to a Termination and\n\
    \   specifying the topology of a Context (who hears/sees whom).\n   Most commands\
    \ are for the specific use of the Media Gateway\n   Controller as command initiator\
    \ in controlling Media Gateways as\n   command responders.  The exceptions are\
    \ the Notify and ServiceChange\n   commands: Notify is sent from Media Gateway\
    \ to Media Gateway\n   Controller, and ServiceChange may be sent by either entity.\
    \  Below is\n   an overview of the commands; they are explained in more detail\
    \ in\n   section 7.2.\n   1. Add. The Add command adds a termination to a context.\
    \  The Add\n      command on the first Termination in a Context is used to create\
    \ a\n      Context.\n   2. Modify. The Modify command modifies the properties,\
    \ events and\n      signals of a termination.\n   3. Subtract. The Subtract command\
    \ disconnects a Termination from its\n      Context and returns statistics on\
    \ the Termination's participation\n      in the Context.  The Subtract command\
    \ on the last Termination in a\n      Context deletes the Context.\n   4. Move.\
    \ The Move command atomically moves a Termination to another\n      context.\n\
    \   5. AuditValue. The AuditValue command returns the current state of\n     \
    \ properties, events,  signals and statistics of Terminations.\n   6. AuditCapabilities.\
    \ The AuditCapabilities command returns all the\n      possible values for Termination\
    \ properties, events and signals\n      allowed by the Media Gateway.\n   7. Notify.\
    \ The Notify command allows the Media Gateway to inform the\n      Media Gateway\
    \ Controller of the occurrence of events in the Media\n      Gateway.\n   8. ServiceChange.\
    \ The ServiceChange Command allows the Media Gateway\n      to notify the Media\
    \ Gateway Controller that a Termination or group\n      of Terminations is about\
    \ to be taken out of service or has just\n      been returned to service.   ServiceChange\
    \ is also used by the MG\n      to announce its availability to an MGC (registration),\
    \ and to\n      notify the MGC of impending or completed restart of the MG.  The\n\
    \      MGC may announce a handover to the MG by sending it a\n      ServiceChange\
    \ command.  The MGC may also use ServiceChange to\n      instruct the MG to take\
    \ a Termination or group of Terminations in\n      or out of service.\n   These\
    \ commands are detailed in sections 7.2.1 through 7.2.8\n"
- title: 7.1 Descriptors
  contents:
  - "7.1 Descriptors\n   The parameters to a command are termed Descriptors. A Descriptor\n\
    \   consists of a name and a list of items. Some items may have values.\n   Many\
    \ Commands share common Descriptors.  This subsection enumerates\n   these Descriptors.\
    \  Descriptors may be returned as output from a\n   command.  Parameters and parameter\
    \ usage specific to a given Command\n   type are described in the subsection that\
    \ describes the Command.\n"
- title: 7.1.1 Specifying Parameters
  contents:
  - "7.1.1 Specifying Parameters\n   Command parameters are structured into a number\
    \ of descriptors. In\n   general, the text format of descriptors is\n   DescriptorName=<someID>{parm=value,\
    \ parm=value_.}.\n   Parameters may be fully specified, over-specified or under-specified:\n\
    \   1. Fully specified parameters have a single, unambiguous value that\n    \
    \  the command initiator is instructing the command responder to use\n      for\
    \ the specified parameter.\n   2. Under-specified parameters, using the CHOOSE\
    \ value, allow the\n      command responder to choose any value it can support.\n\
    \   3. Over-specified parameters have a list of potential values.  The\n     \
    \ list order specifies the command initiator's order of preference\n      of selection.\
    \  The command responder chooses one value from the\n      offered list and returns\
    \ that value to the command initiator.\n   Unspecified mandatory parameters (i.e.\
    \ mandatory parameters not\n   specified in a descriptor) result in the command\
    \ responder retaining\n   the previous value for that parameter.  Unspecified\
    \ optional\n   parameters result in the command responder using the default value\
    \ of\n   the parameter.  Whenever a parameter is underspecified or\n   overspecified,\
    \ the descriptor containing the value chosen by the\n   responder is included\
    \ as output from the command.\n   Each command specifies the TerminationId the\
    \ command operates on.\n   This TerminationId may be \"wildcarded\".  When the\
    \ TerminationId of a\n   command is wildcarded, the effect shall be as if the\
    \ command was\n   repeated with each of the TerminationIds matched.\n"
- title: 7.1.2 Modem Descriptor
  contents:
  - "7.1.2 Modem Descriptor\n   The Modem descriptor specifies the modem type and\
    \ parameters, if any,\n   required for use in e.g. H.324 and text conversation.\
    \  The descriptor\n   includes the following modem types: V.18, V.22, V.22bis,\
    \ V.32,\n   V.32bis, V.34, V.90, V.91, Synchronous ISDN, and allows for\n   extensions.\
    \  By default, no modem descriptor is present in a\n   Termination.\n"
- title: 7.1.3 Multiplex Descriptor
  contents:
  - "7.1.3 Multiplex Descriptor\n   In multimedia calls, a number of media streams\
    \ are carried on a\n   (possibly different) number of bearers.  The multiplex\
    \ descriptor\n   associates the media and the bearers. The descriptor includes\
    \ the\n   multiplex type:\n    . H.221\n    . H.223,\n    . H.226,\n    . V.76,\n\
    \    . Possible Extensions\n   and a set of TerminationIDs representing the multiplexed\
    \ inputs, in\n   order.  For example:\n       Mux = H.221{ MyT3/1/2, MyT3/2/13,\
    \ MyT3/3/6, MyT3/21/22}\n"
- title: 7.1.4 Media Descriptor
  contents:
  - "7.1.4 Media Descriptor\n   The Media Descriptor specifies the parameters for\
    \ all the media\n   streams.  These parameters are structured into two descriptors,\
    \ a\n   Termination State Descriptor, which specifies the properties of a\n  \
    \ termination that are not stream dependent, and one or more Stream\n   Descriptors\
    \ each of which describes a single media stream.\n   A stream is identified by\
    \ a StreamID.  The StreamID is used to link\n   the streams in a Context that\
    \ belong together. Multiple streams\n   exiting a termination shall be synchronized\
    \ with each other.  Within\n   the Stream Descriptor, there are up to three subsidiary\
    \ descriptors,\n   LocalControl, Local, and Remote. The relationship between these\n\
    \   descriptors is thus:\n   Media Descriptor\n        TerminationStateDescriptor\n\
    \        Stream Descriptor\n                LocalControl Descriptor\n        \
    \        Local Descriptor\n                Remote Descriptor\n   As a convenience\
    \ a LocalControl, Local, or Remote descriptor may be\n   included in the Media\
    \ Descriptor without an enclosing Stream\n   descriptor.  In this case, the StreamID\
    \ is assumed to be 1.\n"
- title: 7.1.5 Termination State Descriptor
  contents:
  - "7.1.5 Termination State Descriptor\n   The Termination State Descriptor contains\
    \ the ServiceStates property,\n   the EventBufferControl property and properties\
    \ of a termination\n   (defined in Packages) that are not stream specific.\n \
    \  The ServiceStates property describes the overall state of the\n   termination\
    \ (not stream-specific).  A Termination can be in one of\n   the following states:\
    \ \"test\", \"out of service\", or \"in service\".  The\n   \"test\" state indicates\
    \ that the termination is being tested. The\n   state \"out of service\" indicates\
    \ that the termination cannot be used\n   for traffic.  The state \"in service\"\
    \ indicates that a termination can\n   be used or is being used for normal traffic.\
    \  \"in service\" is the\n   default state.\n   Values assigned to Properties\
    \ may be simple values\n   (integer/string/enumeration) or may be underspecified,\
    \ where more\n   than one value is supplied and the MG may make a choice:\n  \
    \  .  Alternative Values: multiple values in a list, one of which must\n     \
    \  be selected\n    .  Ranges: minimum and maximum values, any value between min\
    \ and max\n       must be selected, boundary values included\n    .  Greater Than/Less\
    \ Than: value must be greater/less than specified\n       value\n    .  CHOOSE\
    \ Wildcard: the MG chooses from the allowed values for the\n       property\n\
    \   The EventBufferControl property  specifies whether events are\n   buffered\
    \ following detection of an event in the Events Descriptor, or\n   processed immediately.\
    \  See section 7.1.9 for details.\n"
- title: 7.1.6 Stream Descriptor
  contents:
  - "7.1.6 Stream Descriptor\n   A Stream descriptor specifies the parameters of a\
    \ single bi-\n   directional stream.  These parameters are structured into three\n\
    \   descriptors: one that contains termination properties specific to a\n   stream\
    \ and one each for local and remote flows. The Stream Descriptor\n   includes\
    \ a StreamID which identifies the stream.  Streams are created\n   by specifying\
    \ a new StreamID on one of the terminations in a Context.\n   A stream is deleted\
    \ by setting empty Local and Remote descriptors for\n   the stream with ReserveGroup\
    \ and ReserveValue in LocalControl set to\n   \"false\" on all terminations in\
    \ the context that previously supported\n   that stream.\n   StreamIDs are of\
    \ local significance between MGC and MG and they are\n   assigned by the MGC.\
    \  Within a context, StreamID is a means by which\n   to indicate which media\
    \ flows are interconnected:  streams with the\n   same StreamID are connected.\n\
    \   If a termination is moved from one context to another, the effect on\n   the\
    \ context to which the termination is moved is the same as in the\n   case that\
    \ a new termination were added with the same StreamIDs as the\n   moved termination.\n"
- title: 7.1.7 LocalControl Descriptor
  contents:
  - "7.1.7 LocalControl Descriptor\n   The LocalControl Descriptor contains the Mode\
    \ property, the\n   ReserveGroup and ReserveValue properties and properties of\
    \ a\n   termination (defined in Packages) that are stream specific, and are\n\
    \   of interest between the MG and the MGC.  Values of properties may be\n   underspecified\
    \ as in section 7.1.1.\n   The allowed values for the mode property are send-only,\
    \ receive-only,\n   send/receive, inactive and loop-back.  \"Send\" and \"receive\"\
    \ are with\n   respect to the exterior of the context, so that, for example, a\n\
    \   stream set to mode=sendonly does not pass received media into the\n   context.\
    \  Signals and Events are not affected by mode.\n   The boolean-valued Reserve\
    \ properties, ReserveValue and ReserveGroup,\n   of a Termination indicate what\
    \ the MG is expected to do when it\n   receives a  local and/or remote descriptor.\n\
    \   If the value of a Reserve property is True, the MG SHALL reserve\n   resources\
    \ for all alternatives specified in the local and/or remote\n   descriptors for\
    \ which it currently has resources available.  It SHALL\n   respond with the alternatives\
    \ for which it reserves resources.  If it\n   cannot not support any of the alternatives,\
    \ it SHALL respond with a\n   reply to the MGC that contains empty local and/or\
    \ remote descriptors.\n   If the value of a Reserve property is False, the MG\
    \ SHALL choose one\n   of the alternatives specified in the local descriptor (if\
    \ present)\n   and one of the alternatives specified in the remote descriptor\
    \ (if\n   present).  If the MG has not yet reserved resources to support the\n\
    \   selected alternative, it SHALL reserve the resources.  If, on the\n   other\
    \ hand, it already reserved resources for the Termination\n   addressed (because\
    \ of a prior exchange with ReserveValue and/or\n   ReserveGroup equal to True),\
    \ it SHALL release any excess resources it\n   reserved previously.  Finally,\
    \ the MG shall send a reply to the MGC\n   containing the alternatives for the\
    \ local and/or remote descriptor\n   that it selected.  If the MG does not have\
    \ sufficient resources to\n   support any of the alternatives specified, is SHALL\
    \ respond with\n   error 510 (insufficient resources).\n   The default value of\
    \ ReserveValue and ReserveGroup is False.\n   A new setting of the LocalControl\
    \ Descriptor completely replaces the\n   previous setting of that descriptor in\
    \ the MG.  Thus to retain\n   information from the previous setting the MGC must\
    \ include that\n   information in the new setting.  If the MGC wishes to delete\
    \ some\n   information from the existing descriptor, it merely resends the\n \
    \  descriptor (in a Modify command) with the unwanted information\n   stripped\
    \ out.\n"
- title: 7.1.8 Local and Remote Descriptors
  contents:
  - "7.1.8 Local and Remote Descriptors\n   The MGC uses Local and Remote descriptors\
    \ to reserve and commit MG\n   resources for media decoding and encoding for the\
    \ given Stream(s) and\n   Termination to which they apply.  The MG includes these\
    \ descriptors\n   in its response to indicate what it is actually prepared to\
    \ support.\n   The MG SHALL include additional properties and their values in\
    \ its\n   response if these properties are mandatory yet not present in the\n\
    \   requests made by the MGC (e.g., by specifying detailed video encoding\n  \
    \ parameters where the MGC only specified the payload type).\n   Local refers\
    \ to the media received by the MG and Remote refers to the\n   media sent by the\
    \ MG.\n   When text encoding the protocol, the descriptors consist of session\n\
    \   descriptions as defined in SDP (RFC2327).  In session descriptions\n   sent\
    \ from the MGC to the MG, the following exceptions to the syntax\n   of RFC 2327\
    \ are allowed:\n    .  the \"s=\", \"t=\" and \"o=\" lines are optional,\n   \
    \ .  the use of CHOOSE is allowed in place of a single parameter\n       value,\
    \ and\n    .  the use of alternatives is allowed in place of a single parameter\n\
    \       value.\n   When multiple session descriptions are provided in one descriptor,\n\
    \   the \"v=\" lines are required as delimiters; otherwise they are\n   optional\
    \ in session descriptions sent to the MG.  Implementations\n   shall accept session\
    \ descriptions that are fully conformant to\n   RFC2327. When binary encoding\
    \ the protocol the descriptor consists of\n   groups of properties (tag-value\
    \ pairs) as specified in Annex C.  Each\n   such group may contain the parameters\
    \ of a session description.\n   Below, the semantics of the local and remote descriptors\
    \ are\n   specified in detail.  The specification consists of two parts.  The\n\
    \   first part specifies the interpretation of the contents of the\n   descriptor.\
    \  The second part specifies the actions the MG must take\n   upon receiving the\
    \ local and remote descriptors.  The actions to be\n   taken by the MG depend\
    \ on the values of the ReserveValue and\n   ReserveGroup properties of the LocalControl\
    \ descriptor.\n   Either the local or the remote descriptor or both may be\n \
    \   .  unspecified (i.e., absent),\n    .  empty,\n    .  underspecified through\
    \ use of CHOOSE in a property value,\n    .  fully specified, or\n    .  overspecified\
    \ through presentation of multiple groups of\n       properties and possibly multiple\
    \ property values in one or more\n       of these groups.\n   Where the descriptors\
    \ have been passed from the MGC to the MG, they\n   are interpreted according\
    \ to the rules given in section 7.1.1, with\n   the following additional comments\
    \ for clarification:\n   (a) An unspecified Local or Remote descriptor is considered\
    \ to be a\n   missing mandatory parameter.  It requires the MG to use whatever\
    \ was\n   last specified for that descriptor.  It is possible that there was no\n\
    \   previously-specified value, in which case the descriptor concerned is\n  \
    \ ignored in further processing of the command.\n   (b) An empty Local (Remote)\
    \ descriptor in a message from the MGC\n   signifies a request to release any\
    \ resources reserved for the media\n   flow received (sent).\n   (c) If multiple\
    \ groups of properties are present in a Local or Remote\n   descriptor or multiple\
    \ values within a group, the order of preference\n   is descending.\n   (d) Underspecified\
    \ or overspecified properties within a group of\n   properties sent by the MGC\
    \ are requests for  the MG to choose one or\n   more values which it can support\
    \ for each of those properties.  In\n   case of an overspecified property, the\
    \ list of values is in\n   descending order of preference.\n   Subject to the\
    \ above rules, subsequent action depends on the values\n   of the ReserveValue\
    \ and ReserveGroup properties in LocalControl.\n   If ReserveGroup is true, the\
    \ MG reserves the resources required to\n   support any of the requested property\
    \ group alternatives that it can\n   currently support.  If ReserveValue is true,\
    \ the MG reserves the\n   resources required to support any of the requested property\
    \ value\n   alternatives that it can currently support.\n   NOTE -  If a Local\
    \ or Remote descriptor contains multiple groups of\n   properties, and ReserveGroup\
    \ is true, then the MG is requested to\n   reserve resources so that it can decode\
    \ or encode the media stream\n   according to any of the alternatives.  For instance,\
    \ if the Local\n   descriptor contains two groups of properties, one specifying\n\
    \   packetized G.711 A-law audio and the other G.723.1 audio, the MG\n   reserves\
    \ resources so that it can decode one audio stream encoded in\n   either G.711\
    \ A-law format or G.723.1 format.  The MG does not have to\n   reserve resources\
    \ to decode two audio streams simultaneously, one\n   encoded in G.711 A-law and\
    \ one in G.723.1.  The intention for the use\n   of  ReserveValue is analogous.\n\
    \   If ReserveGroup is true or ReserveValue is true, then the following\n   rules\
    \ apply.\n    .  If the MG has insufficient resources to support all alternatives\n\
    \       requested by the MGC and the MGC requested resources in both\n       Local\
    \ and Remote,  the MG should reserve resources to support at\n       least one\
    \ alternative each within Local and Remote.\n    .  If the MG has insufficient\
    \ resources to support at least one\n       alternative  within a Local  (Remote)\
    \ descriptor received from\n       the MGC, it shall return an empty Local (Remote)\
    \ in response.\n    .  In its response to the MGC, when the MGC included Local\
    \ and\n       Remote descriptors, the MG SHALL include Local and Remote\n    \
    \   descriptors for all groups of properties and property values it\n       reserved\
    \ resources for.  If the MG is incapable of supporting at\n       least one of\
    \ the alternatives within the Local (Remote)\n       descriptor received from\
    \ the MGC, it SHALL return an empty Local\n       (Remote) descriptor.\n    .\
    \  If the Mode property of the LocalControl descriptor is RecvOnly\n       or\
    \ SendRecv, the MG must be prepared to receive media encoded\n       according\
    \ to any of the alternatives included in its response to\n       the MGC.\n  \
    \  .  If ReserveGroup is False and ReserveValue is false, then the MG\n      \
    \ SHOULD apply the following rules to resolve Local and Remote to a\n       single\
    \ alternative each:\n    .  The MG chooses the first alternative in Local for\
    \ which it is\n       able to support at least one alternative in Remote.\n  \
    \  .  If the MG is unable to support at least one Local and one Remote\n     \
    \  alternative, it returns Error 510 (Insufficient Resources).\n    .  The MG\
    \ returns its selected alternative in each of Local and\n       Remote.\n   A\
    \ new setting of a Local or Remote Descriptor completely replaces the\n   previous\
    \ setting of that descriptor in the MG.  Thus to retain\n   information from the\
    \ previous setting the MGC must include that\n   information in the new setting.\
    \  If the MGC wishes to delete some\n   information from the existing descriptor,\
    \ it merely resends the\n   descriptor (in a Modify command) with the unwanted\
    \ information\n   stripped out.\n"
- title: 7.1.9 Events Descriptor
  contents:
  - "7.1.9 Events Descriptor\n   The EventsDescriptor parameter contains a RequestIdentifier\
    \ and a\n   list of events that the Media Gateway is requested to detect and\n\
    \   report.  The RequestIdentifier is used to correlate the request with\n   the\
    \ notifications that it may trigger.  Requested events include, for\n   example,\
    \ fax tones, continuity test results, and on-hook and off-hook\n   transitions.\n\
    \   Each event in the descriptor contains the Event name, an optional\n   streamID,\
    \ an optional KeepActive flag, and optional parameters.  The\n   Event name consists\
    \ of a Package Name (where the event is defined)\n   and an EventID. The ALL wildcard\
    \ may be used for the EventID,\n   indicating that all events from the specified\
    \ package have to be\n   detected.  The default streamID is 0, indicating that\
    \ the event to be\n   detected is not related to a particular media stream.  Events\
    \ can\n   have parameters.  This allows a single event description to have some\n\
    \   variation in meaning without creating large numbers of individual\n   events.\
    \  Further event parameters are defined in the package.\n   The default action\
    \ of the MG, when it detects an event in the Events\n   Descriptor, is to send\
    \ a Notify command to the MG.  Any other action\n   is for further study.\n  \
    \ If the value of the EventBufferControl property equals LockStep,\n   following\
    \ detection of such an event, normal handling of events is\n   suspended. Any\
    \ event which is subsequently detected and occurs in the\n   EventBuffer Descriptor\
    \ is added to the end of the EventBuffer (a FIFO\n   queue), along with the time\
    \ that it was detected.  The MG SHALL wait\n   for a new EventsDescriptor to be\
    \ loaded.  A new EventsDescriptor can\n   be loaded either as the result of receiving\
    \ a command with a new\n   EventsDescriptor, or by activating an embedded EventsDescriptor.\n\
    \   If EventBufferControl equals Off, the MG continues processing based\n   on\
    \ the active EventsDescriptor.\n   In the case that an embedded EventsDescriptor\
    \ being activated, the MG\n   continues event processing based on the newly activated\n\
    \   EventsDescriptor (Note -  for purposes of EventBuffer handling,\n   activation\
    \ of an embedded EventsDescriptor is equivalent to receipt\n   of a new EventsDescriptor).\n\
    \   When the MG receives a command with a new EventsDescriptor, one or\n   more\
    \ events may have been buffered in the EventBuffer in the MG. The\n   value of\
    \ EventBufferControl then determines how the MG treats such\n   buffered events.\n\
    \   Case 1\n   If EventBufferControl = LockStep  and the MG receives a new\n \
    \  EventsDescriptor it will check the FIFO EventBuffer and take the\n   following\
    \ actions:\n   1. If the EventBuffer is empty, the MG waits for detection of events\n\
    \      based on the new EventsDescriptor.\n   2. If the EventBuffer is non-empty,\
    \ the MG processes the FIFO queue\n      starting with the first event:\n    \
    \     a) If the event in the queue is in the events listed in the new\n      \
    \   EventsDescriptor, the default action of the MG is to send a\n         Notify\
    \ command to the MGC and remove the event from the\n         EventBuffer.  Any\
    \ other action is for further study.  The time\n         stamp of the Notify shall\
    \ be the time the event was actually\n         detected.  The MG then waits for\
    \ a new EventsDescriptor. While\n         waiting for a new EventsDescriptor,\
    \ any events matching the\n         EventsBufferDescriptor will be placed in \
    \ the EventBuffer and\n         the event processing will repeat from step 1.\n\
    \         b) If the event is not in the new EventsDescriptor, the MG\n       \
    \  SHALL discard the event and repeat from step 1.\n   Case 2\n   If EventBufferControl\
    \ equals Off and the MG receives a new\n   EventsDescriptor, it processes new\
    \ events with the new\n   EventsDescriptor.\n   If the MG receives a command instructing\
    \ it to set the value of\n   EventBufferControl to Off, all events in the EventBuffer\
    \ SHALL be\n   discarded.\n   The MG may report several events in a single Transaction\
    \ as long as\n   this does not unnecessarily delay the reporting of individual\
    \ events.\n   For procedures regarding transmitting the Notify command, refer\
    \ to\n   the appropriate annex for specific transport considerations.\n   The\
    \ default value of EventBufferControl is Off.\n   Note -  Since the EventBufferControl\
    \ property is in the\n   TerminationStateDescriptor, the MG might receive a command\
    \ that\n   changes the EventBufferControl property and does not include an\n \
    \  EventsDescriptor.\n   Normally, detection of an event shall cause any active\
    \ signals to\n   stop.  When KeepActive is specified in the event, the MG shall\
    \ not\n   interrupt any signals active on the Termination on which the event is\n\
    \   detected.\n   An event can include an Embedded Signals descriptor and/or an\n\
    \   Embedded Events Descriptor which, if present, replaces the current\n   Signals/Events\
    \ descriptor when the event is detected.  It is\n   possible, for example, to\
    \ specify that the dial-tone Signal be\n   generated when an off-hook Event is\
    \ detected, or that the dial-tone\n   Signal be stopped when a digit is detected.\
    \  A media gateway\n   controller shall not send EventsDescriptors with an event\
    \ both marked\n   KeepActive and containing an embedded SignalsDescriptor.\n \
    \  Only one level of embedding is permitted.  An embedded\n   EventsDescriptor\
    \ SHALL NOT contain another embedded EventsDescriptor;\n   an embedded EventsDescriptor\
    \ may contain an embedded\n   SignalsDescriptor.\n   An EventsDescriptor received\
    \ by a media gateway replaces any previous\n   Events Descriptor.  Event notification\
    \ in process shall complete, and\n   events detected after the command containing\
    \ the new EventsDescriptor\n   executes, shall be processed according to the new\
    \ EventsDescriptor.\n"
- title: 7.1.10 EventBuffer Descriptor
  contents:
  - "7.1.10 EventBuffer Descriptor\n   The EventBuffer Descriptor contains a list\
    \ of events, with their\n   parameters if any, that the MG is requested to detect\
    \ and buffer when\n   EventBufferControl equals LockStep (see 7.1.9).\n"
- title: 7.1.11 Signals Descriptor
  contents:
  - "7.1.11 Signals Descriptor\n   A SignalsDescriptor is a parameter that contains\
    \ the set of signals\n   that the Media Gateway is asked to apply to a Termination.\
    \ A\n   SignalsDescriptor contains a number of signals and/or sequential\n   signal\
    \ lists.  A SignalsDescriptor may contain zero signals and\n   sequential signal\
    \ lists.  Support of sequential signal lists is\n   optional.\n   Signals are\
    \ defined in packages.  Signals shall be named with a\n   Package name (in which\
    \ the signal is defined) and a SignalID.  No\n   wildcard shall be used in the\
    \ SignalID.  Signals that occur in a\n   SignalsDescriptor have an optional StreamID\
    \ parameter (default is 0,\n   to indicate that the signal is not related to a\
    \ particular media\n   stream), an optional signal type (see below), an optional\
    \ duration\n   and possibly parameters defined in the package that defines the\n\
    \   signal.  This allows a single signal to have some variation in\n   meaning,\
    \ obviating the need to create large numbers of individual\n   signals.  Finally,\
    \ the optional parameter \"notifyCompletion\" allows a\n   MGC to indicate that\
    \ it wishes to be  notified when the signal\n   finishes playout.  When the MGC\
    \ enables the signal completion event\n   (see section E.1.2) in an Events Descriptor,\
    \ that event is detected\n   whenever a signal terminates and \"notifyCompletion\"\
    \ for that signal\n   is set to TRUE.  The signal completion event of section\
    \ E.1.2 has a\n   parameter that indicates how the signal terminated: it played\
    \ to\n   completion, it was interrupted by an event, it was halted because a\n\
    \   new SignalsDescriptor arrived, or the signal did not complete for\n   some\
    \ other reason.\n   The duration is an integer value that is expressed in hundredths\
    \ of a\n   second.\n   There are three types of signals:\n    .  on/off - the\
    \ signal lasts until it is turned off,\n    .  timeout - the signal lasts until\
    \ it is turned off or a specific\n       period of time elapses,\n    .  brief\
    \ - the signal duration is so short that it will stop on its\n       own unless\
    \ a new signal is applied that causes it to stop; no\n       timeout value is\
    \ needed.\n   If the signal type is specified in a SignalsDescriptor, it overrides\n\
    \   the default signal type (see Section 12.1.4). If duration is\n   specified\
    \ for an on/off signal, it SHALL be ignored.\n   A sequential signal list consists\
    \ of a signal list identifier, a\n   sequence of signals to be played sequentially,\
    \ and a signal type.\n   Only the trailing element of the sequence of signals\
    \ in a sequential\n   signal list may be an on/off signal.  If the trailing element\
    \ of the\n   sequence is an on/off signal, the signal type of the sequential\n\
    \   signal list shall be on/off as well.  If the sequence of signals in a\n  \
    \ sequential signal list contains signals of type timeout and the\n   trailing\
    \ element is not of type on/off, the type of the sequential\n   signal list SHALL\
    \ be set to timeout.  The duration of a sequential\n   signal list with type timeout\
    \ is the sum of the durations of the\n   signals it contains.  If the sequence\
    \ of signals in a sequential\n   signal list contains only signals of type brief,\
    \ the type of the\n   sequential signal list SHALL be set to brief.  A signal\
    \ list is\n   treated as a single signal of the specified type when played out.\n\
    \   Multiple signals and sequential signal lists in the same\n   SignalsDescriptor\
    \ shall be played simultaneously.\n   Signals are defined as proceeding from the\
    \ termination towards the\n   exterior of the Context unless otherwise specified\
    \ in a package.\n   When the same Signal is applied to multiple Terminations within\
    \ one\n   Transaction, the MG should consider using the same resource to\n   generate\
    \ these Signals.\n   Production of a Signal on a Termination is stopped by application\
    \ of\n   a new SignalsDescriptor, or detection of an Event on the Termination\n\
    \   (see section 7.1.9).\n   A new SignalsDescriptor replaces any existing SignalsDescriptor.\
    \  Any\n   signals applied to the Termination not in the replacement descriptor\n\
    \   shall be stopped, and new signals are applied, except as follows.\n   Signals\
    \ present in the replacement descriptor and containing the\n   KeepActive flagshall\
    \ be continued if they are currently playing and\n   have not already completed.\
    \  If a replacement signal descriptor\n   contains a signal that is not currently\
    \ playing and contains the\n   KeepActive flag, that signal SHALL be ignored.\
    \  If the replacement\n   descriptor contains a sequential signal list with the\
    \ same identifier\n   as the existing descriptor, then\n    .  the signal type\
    \ and sequence of signals in the sequential signal\n       list in the replacement\
    \ descriptor shall be ignored, and\n    .  the playing of the signals in the sequential\
    \ signal list in the\n       existing descriptor shall not be interrupted.\n"
- title: 7.1.12 Audit Descriptor
  contents:
  - "7.1.12 Audit Descriptor\n   The Audit Descriptor specifies what information is\
    \ to be audited.\n   The Audit Descriptor specifies the list of descriptors to\
    \ be\n   returned.  Audit may be used in any command to force the return of a\n\
    \   descriptor even if the descriptor in the command was not present, or\n   had\
    \ no underspecified parameters.  Possible items in the Audit\n   Descriptor are:\n\
    \         Modem\n         Mux\n         Events\n         Media\n         Signals\n\
    \         ObservedEvents\n         DigitMap\n         Statistics\n         Packages\n\
    \         EventBuffer\n   Audit may be empty, in which case, no descriptors are\
    \ returned.  This\n   is useful in Subtract, to inhibit return of statistics,\
    \ especially\n   when using wildcard.\n"
- title: 7.1.13 ServiceChange Descriptor
  contents:
  - "7.1.13 ServiceChange Descriptor\n   The ServiceChangeDescriptor contains the\
    \ following parameters:\n    . ServiceChangeMethod\n    . ServiceChangeReason\n\
    \    . ServiceChangeAddress\n    . ServiceChangeDelay\n    . ServiceChangeProfile\n\
    \    . ServiceChangeVersion\n    . ServiceChangeMGCId\n    . TimeStamp\n   See\
    \ section 7.2.8.\n"
- title: 7.1.14 DigitMap Descriptor
  contents:
  - "7.1.14 DigitMap Descriptor\n   A DigitMap is a dialing plan resident in the Media\
    \ Gateway used for\n   detecting and reporting digit events received on a Termination.\
    \  The\n   DigitMap Descriptor contains a DigitMap name and the DigitMap to be\n\
    \   assigned.  A digit map may be preloaded into the MG by management\n   action\
    \ and referenced by name in an EventsDescriptor, may be defined\n   dynamically\
    \ and subsequently referenced by name, or the actual\n   digitmap itself may be\
    \ specified in the EventsDescriptor. It is\n   permissible for a digit map completion\
    \ event within an Events\n   Descriptor to refer by name to a DigitMap which is\
    \ defined by a\n   DigitMap Descriptor within the same command, regardless of\
    \ the\n   transmitted order of the respective descriptors.\n   DigitMaps defined\
    \ in a DigitMapDescriptor can occur in any of the\n   standard Termination manipulation\
    \ Commands of the protocol.  A\n   DigitMap, once defined, can be used on all\
    \ Terminations specified by\n   the (possibly wildcarded) TerminationID in such\
    \ a command.  DigitMaps\n   defined on the root Termination are global and can\
    \ be used on every\n   Termination in the MG, provided that a DigitMap with the\
    \ same name\n   has not been defined on the given Termination. When a DigitMap\
    \ is\n   defined dynamically in a DigitMap Descriptor:\n    .  A new DigitMap\
    \ is created by specifying a name that is not yet\n       defined.  The value\
    \ shall be present.\n    .  A DigitMap value is updated by supplying a new value\
    \ for a name\n       that is already defined.  Terminations presently using the\n\
    \       digitmap shall continue to use the old definition; subsequent\n      \
    \ EventsDescriptors specifying the name, including any\n       EventsDescriptor\
    \ in the command containing the DigitMap\n       descriptor, shall use the new\
    \ one.\n    .  A DigitMap is deleted by supplying an empty value for a name that\n\
    \       is already defined.  Terminations presently using the digitmap\n     \
    \  shall continue to use the old definition.\n   The collection of digits according\
    \ to a DigitMap may be protected by\n   three timers, viz. a start timer (T),\
    \ short timer (S), and long timer\n   (L).\n   1. The start timer (T) is used\
    \ prior to any digits having been\n      dialed.\n   2. If the Media Gateway can\
    \ determine that at least one more digit is\n      needed for a digit string to\
    \ match any of the allowed patterns in\n      the digit map, then the interdigit\
    \ timer value should be set to a\n      long (L) duration (e.g. 16 seconds).\n\
    \   3. If the digit string has matched one of the patterns in a digit\n      map,\
    \ but it is possible that more digits could be received which\n      would cause\
    \ a match with a different pattern, then instead of\n      reporting the match\
    \ immediately, the MG must apply the short timer\n      (S) and wait for more\
    \ digits.\n   The timers are configurable parameters to a DigitMap.  The Start\n\
    \   timer is started at the beginning of every digit map use, but can be\n   overridden.\n\
    \   The formal syntax of the digit map is described by the DigitMap rule\n   in\
    \ the formal syntax description of the protocol (see Annex A and\n   Annex B).\
    \ A DigitMap, according to this syntax, is defined either by\n   a string or by\
    \ a list of strings. Each string in the list is an\n   alternative event sequence,\
    \ specified either as a sequence of digit\n   map symbols or as a regular expression\
    \ of digit map symbols.  These\n   digit map symbols, the digits \"0\" through\
    \ \"9\" and letters \"A\" through\n   a maximum value depending on the signalling\
    \ system concerned, but\n   never exceeding \"K\", correspond to specified events\
    \ within a package\n   which has been designated in the Events Descriptor on the\
    \ termination\n   to which the digit map is being applied.  (The mapping between\
    \ events\n   and digit map symbols is defined in the documentation for packages\n\
    \   associated with channel-associated signalling systems such as DTMF,\n   MF,\
    \ or R2.  Digits \"0\" through \"9\" MUST be mapped to the\n   corresponding digit\
    \ events within the signalling system concerned.\n   Letters should be allocated\
    \ in logical fashion, facilitating the use\n   of range notation for alternative\
    \ events.)\n   The letter \"x\" is used as a wildcard, designating any event\n\
    \   corresponding to symbols in the range \"0\"-\"9\".  The string may also\n\
    \   contain explicit ranges and, more generally, explicit sets of\n   symbols,\
    \ designating alternative events any one of which satisfies\n   that position\
    \ of the digit map.  Finally, the dot symbol \".\" stands\n   for zero or more\
    \ repetitions of the event selector (event, range of\n   events, set of alternative\
    \ events, or wildcard) that precedes it.  As\n   a consequence of the third timing\
    \ rule above, inter-event timing\n   while matching the dot symbol uses the short\
    \ timer by default.\n   In addition to these event symbols, the string may contain\
    \ \"S\" and\n   \"L\" inter-event timing specifiers and the \"Z\" duration modifier.\
    \  \"S\"\n   and \"L\" respectively indicate that the MG should use the short\
    \ (S)\n   timer or the long (L) timer for subsequent events, over-riding the\n\
    \   timing rules described above. A timer specifier following a dot\n   specifies\
    \ inter-event timing for all events matching the dot as well\n   as for subsequent\
    \ events.  If an explicit timing specifier is in\n   effect in one alternative\
    \ event sequence, but none is given in any\n   other candidate alternative, the\
    \ timer value set by the explicit\n   timing specifier must be used.  If all sequences\
    \ with explicit timing\n   controls are dropped from the candidate set, timing\
    \ reverts to the\n   default rules given above.  Finally, if conflicting timing\
    \ specifiers\n   are in effect in different alternative sequences, the results\
    \ are\n   undefined.\n   A \"Z\" designates a long duration event: placed in front\
    \ of the\n   symbol(s) designating the event(s) which satisfy a given digit\n\
    \   position, it indicates that that position is satisfied only if the\n   duration\
    \ of the event exceeds the long-duration threshold.  The value\n   of this threshold\
    \ is assumed to be provisioned in the MG.\n   A digit map is active while the\
    \ events descriptor which invoked it is\n   active and it has not completed. \
    \ A digit map completes when:\n    .  a timer has expired, or\n    .  an alternative\
    \ event sequence has been matched and no other\n       alternative event sequence\
    \ in the digit map could be matched\n       through detection of an additional\
    \ event (unambiguous match), or\n    .  an event has been detected such that a\
    \ match to a complete\n       alternative event sequence of the digit map will\
    \ be impossible no\n       matter what additional events are received.\n   Upon\
    \ completion, a digit map completion event as defined in the\n   package providing\
    \ the events being mapped into the digit map shall be\n   generated.  At that\
    \ point the digit map is deactivated.  Subsequent\n   events in the package are\
    \ processed as per the currently active event\n   processing mechanisms.\n   Pending\
    \ completion, successive events shall be processed according to\n   the following\
    \ rules:\n   1. The \"current dial string\", an internal variable, is initially\n\
    \      empty.  The set of candidate alternative event sequences includes\n   \
    \   all of the alternatives specified in the digit map.\n   2. At each step, a\
    \ timer is set to wait for the next event, based\n      either on the default\
    \ timing rules given above or on explicit\n      timing specified in one or more\
    \ alternative event sequences. If\n      the timer expires and a member of the\
    \ candidate set of\n      alternatives is fully satisfied, a timeout completion\
    \ with full\n      match is reported.  If the timer expires and part or none of\
    \ any\n      candidate alternative is satisfied, a timeout completion with\n \
    \     partial match is reported.\n   3. If an event is detected before the timer\
    \ expires, it is mapped to\n      a digit string symbol and provisionally added\
    \ to the end of the\n      current dial string.  The duration of the event (long\
    \ or not long)\n      is noted if and only if this is relevant in the current\
    \ symbol\n      position (because at least one of the candidate alternative event\n\
    \      sequences includes the \"Z\" modifier at this position in the\n      sequence).\n\
    \   4. The current dial string is compared to the candidate alternative\n    \
    \  event sequences.  If and only if a sequence expecting a long-\n      duration\
    \ event at this position is matched (i.e. the event had\n      long duration and\
    \ met the specification for this position), then\n      any alternative event\
    \ sequences not specifying a long duration\n      event at this position are discarded,\
    \ and the current dial string\n      is modified by inserting a \"Z\" in front\
    \ of the symbol representing\n      the latest event.  Any sequence expecting\
    \ a long-duration event at\n      this position but not matching the observed\
    \ event is discarded\n      from the candidate set.   If alternative event sequences\
    \ not\n      specifying a long duration event in the given position remain in\n\
    \      the candidate set after application of the above rules, the\n      observed\
    \ event duration is treated as irrelevant in assessing\n      matches to them.\n\
    \   5. If exactly one candidate remains, a completion event is generated\n   \
    \   indicating an unambiguous match.  If no candidates remain, the\n      latest\
    \ event is removed from the current dial string and a\n      completion event\
    \ is generated indicating full match if one of the\n      candidates from the\
    \ previous step was fully satisfied before the\n      latest event was detected,\
    \ or partial match otherwise.  The event\n      removed from the current dial\
    \ string will then be reported as per\n      the currently active event processing\
    \ mechanisms.\n   6. If no completion event is reported out of step 5 (because\
    \ the\n      candidate set still contains more than one alternative event\n  \
    \    sequence), processing returns to step 2.\n   A digit map is activated whenever\
    \ a new event descriptor is applied\n   to the termination or embedded event descriptor\
    \ is activated, and\n   that event descriptor contains a digit map completion\
    \ event which\n   itself contains a digit map parameter.  Each new activation\
    \ of a\n   digit map begins at step 1 of the above procedure, with a clear\n \
    \  current dial string.  Any previous contents of the current dial\n   string\
    \ from an earlier activation are lost.  While the digit map is\n   activated,\
    \ detection is enabled for all events defined in the package\n   containing the\
    \ specified digit map completion event.  Normal event\n   behaviour (e.g. stopping\
    \ of signals unless the digit completion event\n   has the KeepActive flag enabled)\
    \ continues to apply for each such\n   event detected, except that the events\
    \ in the package containing the\n   specified digit map completion event other\
    \ than the completion event\n   itself are not individually notified.\n   Note\
    \ that if a package contains a digit map completion event, then an\n   event specification\
    \ consisting of the package name with a wildcarded\n   ItemID (Property Name)\
    \ will activate a digit map if the event\n   includes a digit map parameter. \
    \ Regardless of whether a digit map is\n   activated, this form of event specification\
    \ will cause the individual\n   events to be reported to the MGC as they are detected.\n\
    \   As an example, consider the following dial plan:\n      0                \
    \             Local operator\n      00                            Long distance\
    \ operator\n      xxxx                          Local extension number\n     \
    \                               (starts with 1-7)\n      8xxxxxxx            \
    \          Local number\n      #xxxxxxx                      Off-site extension\n\
    \      *xx                           Star services\n      91xxxxxxxxxx       \
    \           Long distance number\n      9011 + up to 15 digits        International\
    \ number\n   If the DTMF detection package described in Annex E (section E.6)\
    \ is\n   used to collect the dialled digits, then the dialling plan shown\n  \
    \ above results in the following digit map:\n      (0| 00|[1-7]xxx|8xxxxxxx|Fxxxxxxx|Exx|91xxxxxxxxxx|9011x.)\n"
- title: 7.1.15 Statistics Descriptor
  contents:
  - "7.1.15 Statistics Descriptor\n   The Statistics parameter provides information\
    \ describing the status\n   and usage of a Termination during its existence within\
    \ a specific\n   Context.  There is a set of standard statistics kept for each\n\
    \   termination where appropriate (number of octets sent and received for\n  \
    \ example).  The particular statistical properties that are reported\n   for a\
    \ given Termination are determined by the Packages realized by\n   the Termination.\
    \  By default, statistics are reported when the\n   Termination is Subtracted\
    \ from the Context.  This behavior can be\n   overridden by including an empty\
    \ AuditDescriptor in the Subtract\n   command.  Statistics may also be returned\
    \ from the AuditValue\n   command, or any Add/Move/Modify command using the Audit\
    \ descriptor.\n   Statistics are cumulative; reporting Statistics does not reset\
    \ them.\n   Statistics are reset when a Termination is Subtracted from a Context.\n"
- title: 7.1.16 Packages Descriptor
  contents:
  - "7.1.16 Packages Descriptor\n   Used only with the AuditValue command, the PackageDescriptor\
    \ returns\n   a list of Packages realized by the Termination.\n"
- title: 7.1.17 ObservedEvents Descriptor
  contents:
  - "7.1.17 ObservedEvents Descriptor\n   ObservedEvents is supplied with the Notify\
    \ command to inform the MGC\n   of which event(s) were detected.  Used with the\
    \ AuditValue command,\n   the ObservedEventsDescriptor returns events in the event\
    \ buffer which\n   have not been Notified. ObservedEvents contains the RequestIdentifier\n\
    \   of the EventsDescriptor that triggered the notification, the event(s)\n  \
    \ detected and the detection time(s).  Detection times are reported\n   with a\
    \ precision of hundredths of a second.  Time is expressed in\n   UTC.\n"
- title: 7.1.18  Topology Descriptor
  contents:
  - "7.1.18  Topology Descriptor\n   A topology descriptor is used to specify flow\
    \ directions between\n   terminations in a Context.  Contrary to the descriptors\
    \ in previous\n   sections, the topology descriptor applies to a Context instead\
    \ of a\n   Termination.  The default topology of a Context is that each\n   termination's\
    \ transmission is received by all other terminations.\n   The Topology Descriptor\
    \ is optional to implement.\n   The Topology Descriptor occurs before the commands\
    \ in an action.  It\n   is possible to have an action containing only a Topology\
    \ Descriptor,\n   provided that the context to which the action applies already\
    \ exists.\n   A topology descriptor consists of a sequence of triples of the form\n\
    \   (T1, T2, association). T1 and T2 specify Terminations within the\n   Context,\
    \ possibly using the ALL or CHOOSE wildcard.  The association\n   specifies how\
    \ media flows between these two Terminations as follows.\n    .  (T1, T2, isolate)\
    \ means that the Terminations matching T2 do not\n       receive media from the\
    \ Terminations matching T1, nor vice versa.\n    .  (T1, T2, oneway) means that\
    \ the Terminations that match T2\n       receive media from the Terminations matching\
    \ T1, but not vice\n       versa.  In this case use of the ALL wildcard such that\
    \ there are\n       Terminations that match both T1 and T2 is not allowed.\n \
    \   .  (T1, T2, bothway) means that the Terminations matching T2 receive\n   \
    \    media from the Terminations matching T1, and vice versa.  In this\n     \
    \  case it is allowed to use wildcards such that there are\n       Terminations\
    \ that match both T1 and T2.  However, if there is a\n       Termination that\
    \ matches both, no loopback is introduced;\n       loopbacks are created by setting\
    \ the TerminationMode.  CHOOSE\n       wildcards may be used in T1 and T2 as well,\
    \ under the following\n       restrictions:\n    .  the action (see section 8)\
    \ of which the topology descriptor is\n       part contains an Add command in\
    \ which a CHOOSE wildcard is used;\n    .  if a CHOOSE wildcard occurs in T1 or\
    \ T2, then a partial name\n       SHALL NOT be specified.\n   The CHOOSE wildcard\
    \ in a topology descriptor matches the\n   TerminationID that the MG assigns in\
    \ the first Add command that uses\n   a CHOOSE wildcard in the same action.  An\
    \ existing Termination that\n   matches T1 or T2 in the Context to which a Termination\
    \ is added, is\n   connected to the newly added Termination as specified by the\
    \ topology\n   descriptor. The default association when a termination is not\n\
    \   mentioned in the Topology descriptor is bothway (if T3 is added to a\n   context\
    \ with T1 and T2 with topology (T3,T1,oneway) it will be\n   connected bothway\
    \ to T2).\n   The figure below and the table following it show some examples of\
    \ the\n   effect of including topology descriptors in actions.  In these\n   examples\
    \ it is assumed that the topology descriptors are applied in\n   sequence.\n \
    \           Context 1           Context 2           Context 3\n      +------------------+\
    \  +------------------+  +------------------+\n      |      +----+      |  | \
    \     +----+      |  |      +----+      |\n      |      | T2 |      |  |     \
    \ | T2 |      |  |      | T2 |      |\n      |      +----+      |  |      +----+\
    \      |  |      +----+      |\n      |       ^  ^       |  |          ^     \
    \  |  |          ^       |\n      |       |  |       |  |          |       | \
    \ |          |       |\n      |    +--+  +--+    |  |          +---+   |  |  \
    \        +--+    |\n      |    |        |    |  |              |   |  |      \
    \       |    |\n      |    v        v    |  |              v   |  |          \
    \   |    |\n      | +----+    +----+ |  | +----+    +----+ |  | +----+    +----+\
    \ |\n      | | T1 |<-->| T3 | |  | | T1 |<-->| T3 | |  | | T1 |<-->| T3 | |\n\
    \      | +----+    +----+ |  | +----+    +----+ |  | +----+    +----+ |\n    \
    \  +------------------+  +------------------+  +------------------+\n       1.\
    \ No Topology Desc.  2. T1, T2 Isolate     3. T3, T2 oneway\n            Context\
    \ 1           Context 2           Context 3\n      +------------------+  +------------------+\
    \  +------------------+\n      |      +----+      |  |      +----+      |  | \
    \     +----+      |\n      |      | T2 |      |  |      | T2 |      |  |     \
    \ | T2 |      |\n      |      +----+      |  |      +----+      |  |      +----+\
    \      |\n      |          |       |  |          ^       |  |       ^  ^     \
    \  |\n      |          |       |  |          |       |  |       |  |       |\n\
    \      |          +--+    |  |          +---+   |  |    +--+  +--+    |\n    \
    \  |             |    |  |              |   |  |    |        |    |\n      | \
    \            v    |  |              v   |  |    v        v    |\n      | +----+\
    \    +----+ |  | +----+    +----+ |  | +----+    +----+ |\n      | | T1 |<-->|\
    \ T3 | |  | | T1 |<-->| T3 | |  | | T1 |<-->| T3 | |\n      | +----+    +----+\
    \ |  | +----+    +----+ |  | +----+    +----+ |\n      +------------------+  +------------------+\
    \  +------------------+\n       4. T2, T3 oneway      5. T2, T3 bothway     6.\
    \ T1, T2 bothway\n              Figure 4: A Sequence Of Example Topologies\n \
    \             Topology                Description\n                  1       \
    \      No topology descriptors\n           When no topology descriptors are included,\
    \ all\n           terminations have a both way connection to all\n           other\
    \ terminations.\n                  2                 T1, T2, Isolate\n       \
    \    Removes the connection between T1 and T2.\n             T3 has a both way\
    \ connection with both T1 and\n             T2.  T1 and T2 have bothway connection\
    \ to T3.\n                  3                 T3, T2, oneway\n           A oneway\
    \ connection from T3 to T2 (i.e. T2\n           receives media flow from T3).\
    \  A bothway\n           connection between T1 and T3.\n                  4  \
    \     T2, T3, oneway\n           A oneway connection between T2 to T3.\n     \
    \      T1 and T3 remain bothway connected\n                  5       T2, T3 bothway\n\
    \           T2 is bothway connected to T3.  This results in\n           the same\
    \ as 2.\n                  6       T1, T2 bothway (T2, T3 bothway\n          \
    \                and T1,T3 bothway may be implied\n                          or\
    \ explicit).\n           All terminations have a bothway connection to\n     \
    \      all other terminations.\n   A oneway connection must implemented in such\
    \ a way that the other\n   Terminations in the Context are not aware of the change\
    \ in topology.\n"
- title: 7.2 Command Application Programming Interface
  contents:
  - "7.2 Command Application Programming Interface\n   Following is an Application\
    \ Programming Interface (API) describing\n   the Commands of the protocol.  This\
    \ API is shown to illustrate the\n   Commands and their parameters and is not\
    \ intended to specify\n   implementation (e.g. via use of blocking function calls).\
    \  It\n   describes the input parameters in parentheses after the command name\n\
    \   and the return values in front of the Command. This is only for\n   descriptive\
    \ purposes; the actual Command syntax and encoding are\n   specified in later\
    \ subsections.  All parameters enclosed by square\n   brackets ([. . . ]) are\
    \ considered optional.\n"
- title: 7.2.1 Add
  contents:
  - "7.2.1 Add\n   The Add Command adds a Termination to a Context.\n   TerminationID\n\
    \   [,MediaDescriptor]\n   [,ModemDescriptor]\n   [,MuxDescriptor]\n   [,EventsDescriptor]\n\
    \   [,SignalsDescriptor]\n   [,DigitMapDescriptor]\n   [,ObservedEventsDescriptor]\n\
    \   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n   [,PackagesDescriptor]\n\
    \        Add( TerminationID\n        [, MediaDescriptor]\n        [, ModemDescriptor]\n\
    \        [, MuxDescriptor]\n        [, EventsDescriptor]\n        [, SignalsDescriptor]\n\
    \        [, DigitMapDescriptor]\n        [, AuditDescriptor]\n        )\n   The\
    \ TerminationID specifies the termination to be added to the\n   Context.  The\
    \ Termination is either created, or taken from the null\n   Context.  For an existing\
    \ Termination, the TerminationID would be\n   specific.  For a Termination that\
    \ does not yet exist, the\n   TerminationID is specified as CHOOSE  in the command.\
    \ The new\n   TerminationID will be returned.  Wildcards may be used in an Add,\
    \ but\n   such usage would be unusual.  If the wildcard matches more than one\n\
    \   TerminationID, all possible matches are attempted, with results\n   reported\
    \ for each one.  The order of attempts when multiple\n   TerminationIDs match\
    \ is not specified.\n   The optional MediaDescriptor describes all media streams.\n\
    \   The optional ModemDescriptor and MuxDescriptor specify a modem and\n   multiplexer\
    \ if applicable. For convenience, if a Multiplex Descriptor\n   is present in\
    \ an Add command and lists any Terminations that are not\n   currently in the\
    \ Context, such Terminations are added to the context\n   as if individual Add\
    \ commands listing the Terminations were invoked.\n   If an error occurs on such\
    \ an implied Add, error 471 - Implied Add\n   for Multiplex failure shall be returned\
    \ and further processing of the\n   command shall cease.\n   The EventsDescriptor\
    \ parameter is optional.  If present, it provides\n   the list of events that\
    \ should be detected on the Termination.\n   The SignalsDescriptor parameter is\
    \ optional.  If present, it provides\n   the list of signals that should be applied\
    \ to the Termination.\n   The DigitMapDescriptor parameter is optional.  If present,\
    \ defines a\n   DigitMap definition that may be used in an EventsDescriptor.\n\
    \   The AuditDescriptor is optional.  If present, the command will return\n  \
    \ descriptors as specified in the AuditDescriptor.\n   All descriptors that can\
    \ be modified could be returned by MG if a\n   parameter was underspecified or\
    \ overspecified.  ObservedEvents,\n   Statistics, and Packages, and the EventBuffer\
    \ Descriptors are\n   returned only if requested in the AuditDescriptor.  Add\
    \ SHALL NOT be\n   used on a Termination with a serviceState of \"OutofService\"\
    .\n"
- title: 7.2.2 Modify
  contents:
  - "7.2.2 Modify\n   The Modify Command modifies the properties of a Termination.\n\
    \   TerminationID\n   [,MediaDescriptor]\n   [,ModemDescriptor]\n   [,MuxDescriptor]\n\
    \   [,EventsDescriptor]\n   [,SignalsDescriptor]\n   [,DigitMapDescriptor]\n \
    \  [,ObservedEventsDescriptor]\n   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n\
    \   [,PackagesDescriptor]\n        Modify( TerminationID\n        [, MediaDescriptor]\n\
    \        [, ModemDescriptor]\n        [, MuxDescriptor]\n        [, EventsDescriptor]\n\
    \        [, SignalsDescriptor]\n        [, DigitMapDescriptor]\n        [, AuditDescriptor]\n\
    \        )\n   The TerminationID may be specific if a single Termination in the\n\
    \   Context is to be modified.  Use of wildcards in the TerminationID may\n  \
    \ be appropriate for some operations. If the wildcard matches more than\n   one\
    \ TerminationID, all possible matches are attempted, with results\n   reported\
    \ for each one.  The order of attempts when multiple\n   TerminationIDs match\
    \ is not specified. The CHOOSE option is an error,\n   as the Modify command may\
    \ only be used on existing Terminations.\n   The remaining parameters to Modify\
    \ are the same as those to Add.\n   Possible return values are the same as those\
    \ to Add.\n"
- title: 7.2.3 Subtract
  contents:
  - "7.2.3 Subtract\n   The Subtract Command disconnects a Termination from its Context\
    \ and\n   returns statistics on the Termination's participation in the Context.\n\
    \   TerminationID\n   [,MediaDescriptor]\n   [,ModemDescriptor]\n   [,MuxDescriptor]\n\
    \   [,EventsDescriptor]\n   [,SignalsDescriptor]\n   [,DigitMapDescriptor]\n \
    \  [,ObservedEventsDescriptor]\n   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n\
    \   [,PackagesDescriptor]\n        Subtract(TerminationID\n        [, AuditDescriptor]\n\
    \        )\n   TerminationID in the input parameters represents the Termination\
    \ that\n   is being subtracted.  The TerminationID may be specific or may be a\n\
    \   wildcard value indicating that all (or a set of related) Terminations\n  \
    \ in the Context of the Subtract Command are to be subtracted. If the\n   wildcard\
    \ matches more than one TerminationID, all possible matches\n   are attempted,\
    \ with results reported for each one.  The order of\n   attempts when multiple\
    \ TerminationIDs match is not specified. The\n   CHOOSE option is an error, as\
    \ the Subtract command may only be used\n   on existing Terminations.  ALL may\
    \ be used as the ContextID as well\n   as the TerminationId in a Subtract, which\
    \ would have the effect of\n   deleting all contexts, deleting all ephemeral terminations,\
    \ and\n   returning all physical terminations to Null context.\n   By default,\
    \ the Statistics parameter is returned to report\n   information collected on\
    \ the Termination or Terminations specified in\n   the Command.  The information\
    \ reported applies to the Termination's\n   or Terminations' existence in the\
    \ Context from which it or they are\n   being subtracted.\n   The AuditDescriptor\
    \ is optional.  If present, the command will return\n   descriptors as specified\
    \ in the AuditDescriptor.   Possible return\n   values are the same as those to\
    \ Add.\n   When a provisioned Termination is Subtracted from a context, its\n\
    \   property values shall revert to:\n    .  the default value, if specified for\
    \ the property and not\n       overridden by provisioning,\n    .  otherwise,\
    \ the provisioned value.\n"
- title: 7.2.4 Move
  contents:
  - "7.2.4 Move\n   The Move Command moves a Termination to another Context from its\n\
    \   current Context in one atomic operation.  The Move command is the\n   only\
    \ command that refers to a Termination in a Context different from\n   that to\
    \ which the command is applied.  The Move command shall not be\n   used to move\
    \ Terminations to or from the null Context.\n   TerminationID\n   [,MediaDescriptor]\n\
    \   [,ModemDescriptor]\n   [,MuxDescriptor]\n   [,EventsDescriptor]\n   [,SignalsDescriptor]\n\
    \   [,DigitMapDescriptor]\n   [,ObservedEventsDescriptor]\n   [,EventBufferDescriptor]\n\
    \   [,StatisticsDescriptor]\n   [,PackagesDescriptor]\n        Move( TerminationID\n\
    \        [, MediaDescriptor]\n        [, ModemDescriptor]\n        [, MuxDescriptor]\n\
    \        [, EventsDescriptor]\n        [, SignalsDescriptor]\n        [, DigitMapDescriptor]\n\
    \        [, AuditDescriptor]\n        )\n   The TerminationID specifies the Termination\
    \ to be moved.  It may be\n   wildcarded.  If the wildcard matches more than one\
    \ TerminationID, all\n   possible matches are attempted, with results reported\
    \ for each one.\n   The order of attempts when multiple TerminationIDs match is\
    \ not\n   specified. By convention, the Termination is subtracted from its\n \
    \  previous Context. The Context to which the Termination is moved is\n   indicated\
    \ by the target ContextId in the Action.  If the last\n   remaining Termination\
    \ is moved out of a Context, the Context is\n   deleted.\n   The remaining descriptors\
    \ are processed as in the Modify Command.\n   The AuditDescriptor with the Statistics\
    \ option, for example, would\n   return statistics on the Termination just prior\
    \ to the Move.\n   Possible descriptors returned from Move are the same as for\
    \ Add.\n   Move SHALL NOT be used on a Termination with a serviceState of\n  \
    \ \"OutofService\".\n"
- title: 7.2.5 AuditValue
  contents:
  - "7.2.5 AuditValue\n   The AuditValue Command returns the current values of properties,\n\
    \   events, signals and statistics associated with Terminations.\n   TerminationID\n\
    \   [,MediaDescriptor]\n   [,ModemDescriptor]\n   [,MuxDescriptor]\n   [,EventsDescriptor]\n\
    \   [,SignalsDescriptor]\n   [,DigitMapDescriptor]\n   [,ObservedEventsDescriptor]\n\
    \   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n   [,PackagesDescriptor]\n\
    \        AuditValue(TerminationID,\n        AuditDescriptor\n        )\n   TerminationID\
    \ may be specific or wildcarded. If the wildcard matches\n   more than one TerminationID,\
    \ all possible matches are attempted, with\n   results reported for each one.\
    \  The order of attempts when multiple\n   TerminationIDs match is not specified.\
    \ If a wildcarded response is\n   requested, only one command return is generated,\
    \ with the contents\n   containing the union of the values of all Terminations\
    \ matching the\n   wildcard.  This convention may reduce the volume of data required\
    \ to\n   audit a group of Terminations.  Use of CHOOSE is an error.\n   The appropriate\
    \ descriptors, with the current values for the\n   Termination, are returned from\
    \ AuditValue.  Values appearing in\n   multiple instances of a descriptor are\
    \ defined to be alternate values\n   supported, with each parameter in a descriptor\
    \ considered\n   independent.\n   ObservedEvents returns a list of events in the\
    \ EventBuffer,\n   PackagesDescriptor returns a list of packages realized by the\n\
    \   Termination.  DigitMapDescriptor returns the name or value of the\n   current\
    \ DigitMap for the Termination.  DigitMap requested in an\n   AuditValue command\
    \ with TerminationID ALL returns all DigitMaps in\n   the gateway.  Statistics\
    \ returns the current values of all statistics\n   being kept on the Termination.\
    \  Specifying an empty Audit Descriptor\n   results in only the TerminationID\
    \ being returned.  This may be useful\n   to get a list of TerminationIDs when\
    \ used with wildcard.\n   AuditValue results depend on the Context, viz. specific,\
    \ null, or\n   wildcarded.  The TerminationID may be specific, or wildcarded.\
    \  The\n   following illustrates other information that can be obtained with the\n\
    \   Audit Command:\n      ContextID     TerminationID   Information Obtained\n\
    \      Specific      wildcard        Audit of matching\n                     \
    \               Terminations in a Context\n      Specific      specific      \
    \  Audit of a single\n                                    Termination in a Context\n\
    \      Null          Root            Audit of Media Gateway state\n          \
    \                          and events\n      Null          wildcard        Audit\
    \ of all matching\n                                    Terminations in the Null\n\
    \                                    Context\n      Null          specific   \
    \     Audit of a single\n                                    Termination outside\
    \ of any\n                                    Context\n      All           wildcard\
    \        Audit of all matching\n                                    Terminations\
    \ and the Context\n                                    to which they are associated\n\
    \      All           Root            List of all ContextIds\n"
- title: 7.2.6 AuditCapabilities
  contents:
  - "7.2.6 AuditCapabilities\n   The AuditCapabilities Command returns the possible\
    \ values of\n   properties, events, signals and statistics associated with\n \
    \  Terminations.\n   TerminationID\n   [,MediaDescriptor]\n   [,ModemDescriptor]\n\
    \   [,MuxDescriptor]\n   [,EventsDescriptor]\n   [,SignalsDescriptor]\n   [,ObservedEventsDescriptor]\n\
    \   [,EventBufferDescriptor]\n   [,StatisticsDescriptor]\n        AuditCapabilities(TerminationID,\n\
    \        AuditDescriptor\n        )\n   The appropriate descriptors, with the\
    \ possible values for the\n   Termination are returned from AuditCapabilities.\
    \  Descriptors may be\n   repeated where there are multiple possible values. \
    \ If a wildcarded\n   response is requested, only one command return is generated,\
    \ with the\n   contents containing the union of the values of all Terminations\n\
    \   matching the wildcard.  This convention may reduce the volume of data\n  \
    \ required to audit a group of Terminations.\n   Interpretation of what capabilities\
    \ are requested for various values\n   of ContextID and TerminationID is the same\
    \ as in AuditValue.\n   The EventsDescriptor returns the list of possible events\
    \ on the\n   Termination together with the list of all possible values for the\n\
    \   EventsDescriptor Parameters.  The SignalsDescriptor returns the list\n   of\
    \ possible signals that could be applied to the Termination together\n   with\
    \ the list of all possible values for the Signals Parameters.\n   StatisticsDescriptor\
    \ returns the names of the statistics being kept\n   on the termination.  ObservedEventsDescriptor\
    \ returns the names of\n   active events on the termination.  DigitMap and Packages\
    \ are not\n   legal in AuditCapability.\n"
- title: 7.2.7 Notify
  contents:
  - "7.2.7 Notify\n   The Notify Command allows the Media Gateway to notify the Media\n\
    \   Gateway Controller of events occurring within the Media Gateway.\n       \
    \ Notify(TerminationID,\n        ObservedEventsDescriptor,\n        [ErrorDescriptor]\n\
    \        )\n   The TerminationID parameter specifies the Termination issuing the\n\
    \   Notify Command.  The TerminationID shall be a fully qualified name.\n   The\
    \ ObservedEventsDescriptor contains the RequestID and a list of\n   events that\
    \ the Media Gateway detected in the order that they were\n   detected. Each event\
    \ in the list is accompanied by parameters\n   associated with the event and an\
    \ indication of the time that the\n   event was detected.  Procedures for sending\
    \ Notify commands with\n   RequestID equal to 0 are for further study.\n   Notify\
    \ Commands with RequestID not equal to 0 shall occur only as the\n   result of\
    \ detection of an event specified by an Events Descriptor\n   which is active\
    \ on the termination concerned.\n   The RequestID returns the RequestID parameter\
    \ of the EventsDescriptor\n   that triggered the Notify Command.  It is used to\
    \ correlate the\n   notification with the request that triggered it.  The events\
    \ in the\n   list must have been requested via the triggering EventsDescriptor\
    \ or\n   embedded events descriptor unless the RequestID is 0 (which is for\n\
    \   further study).\n"
- title: 7.2.8 ServiceChange
  contents:
  - "7.2.8 ServiceChange\n   The ServiceChange Command allows the Media Gateway to\
    \ notify the\n   Media Gateway Controller that a Termination or group of Terminations\n\
    \   is about to be taken out of service or has just been returned to\n   service.\
    \   The Media Gateway Controller may indicate that\n   Termination(s) shall be\
    \ taken out of or returned to service.  The\n   Media Gateway may notify the MGC\
    \ that the capability of a Termination\n   has changed.  It also allows a MGC\
    \ to hand over control of a MG to\n   another MGC.\n   TerminationID,\n   [ServiceChangeDescriptor]\n\
    \        ServiceChange(TerminationID,\n        ServiceChangeDescriptor\n     \
    \   )\n   The TerminationID parameter specifies the Termination(s) that are\n\
    \   taken out of or returned to service.  Wildcarding of Termination\n   names\
    \ is permitted, with the exception that the CHOOSE mechanism\n   shall not be\
    \ used.  Use of the \"Root\" TerminationID indicates a\n   ServiceChange affecting\
    \ the entire Media Gateway.\n   The ServiceChangeDescriptor contains the following\
    \ parameters as\n   required:\n    .  ServiceChangeMethod\n    .  ServiceChangeReason\n\
    \    .  ServiceChangeDelay\n    .  ServiceChangeAddress\n    .  ServiceChangeProfile\n\
    \    .  ServiceChangeVersion\n    .  ServiceChangeMgcId\n    .  TimeStamp\n  \
    \ The ServiceChangeMethod parameter specifies the type of ServiceChange\n   that\
    \ will or has occurred:\n   1) Graceful - indicates that the specified Terminations\
    \ will be taken\n      out of service after the specified ServiceChangeDelay;\
    \ established\n      connections are not yet affected, but the Media Gateway Controller\n\
    \      should refrain from establishing new connections and should\n      attempt\
    \ to gracefully tear down existing connections. The MG\n      should set termination\
    \ serviceState at the expiry of\n      ServiceChangeDelay or the removal of the\
    \ termination from an\n      active context (whichever is first), to \"out of\
    \ service\".\n   2) Forced - indicates that the specified Terminations were taken\n\
    \      abruptly out of service and any established connections associated\n  \
    \    with them were lost. The MGC is responsible for cleaning up the\n      context\
    \ (if any) with which the failed termination is associated.\n      At a minimum\
    \ the termination shall be subtracted from the context.\n      The termination\
    \ serviceState should be \"out of service\".\n   3) Restart - indicates that service\
    \ will be restored on the specified\n      Terminations after expiration of the\
    \ ServiceChangeDelay. The\n      serviceState should be set  to \"inService\"\
    \ upon expiry of\n      ServiceChangeDelay.\n   4) Disconnected - always applied\
    \ with the Root TerminationID,\n      indicates that the MG lost communication\
    \ with the MGC, but it was\n      subsequently restored.  Since MG state may have\
    \ changed, the MGC\n      may wish to use the Audit command to resynchronize its\
    \ state with\n      the MG's.\n   5) Handoff - sent from the MGC to the MG, this\
    \ reason indicates that\n      the MGC is going out of service and a new MGC association\
    \ must be\n      established. Sent from the MG to the MGC, this indicates that\
    \ the\n      MG is attempting to establish a new association in accordance with\n\
    \      a Handoff received from the MGC with which it was previously\n      associated.\n\
    \   6) Failover - sent from MG to MGC to indicate the primary MG is out\n    \
    \  of service and a secondary MG is taking over.\n   7) Another value whose meaning\
    \ is mutually understood between the MG\n      and the MGC.\n   The ServiceChangeReason\
    \ parameter specifies the reason why the\n   ServiceChange has or will occur.\
    \  It consists of an alphanumeric\n   token (IANA registered) and an explanatory\
    \ string.\n   The optional ServiceChangeAddress parameter specifies the address\n\
    \   (e.g., IP port number for IP networks) to be used for subsequent\n   communications.\
    \  It can be specified in the input parameter\n   descriptor or the returned result\
    \ descriptor.  ServiceChangeAddress\n   and ServiceChangeMgcId parameters must\
    \ not both be present in the\n   ServiceChangeDescriptor or the ServiceChangeResultDescriptor.\
    \  The\n   serviceChangeAddress provides an address to be used within the\n  \
    \ context of the association currently being negotiated, while the\n   ServiceChangeMgcId\
    \ provides an alternate address where the MG should\n   seek to establish another\
    \ association.\n   The optional ServiceChangeDelay parameter is expressed in seconds.\n\
    \   If the delay is absent or set to zero, the delay value should be\n   considered\
    \ to be null.  In the case of a \"graceful\"\n   ServiceChangeMethod, a null delay\
    \ indicates that the Media Gateway\n   Controller should wait for the natural\
    \ removal of existing\n   connections and should not establish new connections.\
    \  .  For\n   \"graceful\" only, a null delay means the MG must not set serviceState\n\
    \   \"out of service\" until the termination is in the null context.\n   The optional\
    \ ServiceChangeProfile parameter specifies the Profile (if\n   any) of the protocol\
    \ supported.  The ServiceChangeProfile includes\n   the version of the profile\
    \ supported.\n   The optional ServiceChangeVersion parameter contains the protocol\n\
    \   version and is used if protocol version negotiation occurs (see\n   section\
    \ 11.3).\n   The optional TimeStamp parameter specifies the actual time as kept\
    \ by\n   the sender.  It can be used by the responder to determine how its\n \
    \  notion of time differs from that of its correspondent.  TimeStamp is\n   sent\
    \ with a precision of hundredths of a second, and is expressed in\n   UTC.\n \
    \  The optional Extension parameter may contain any value whose meaning\n   is\
    \ mutually understood by the MG and MGC.\n   A ServiceChange Command specifying\
    \ the \"Root\" for the TerminationID\n   and ServiceChangeMethod equal to Restart\
    \ is a registration command by\n   which a Media Gateway announces its existence\
    \ to the Media Gateway\n   Controller.  The Media Gateway is expected to be provisioned\
    \ with the\n   name of one primary and optionally some number of alternate Media\n\
    \   Gateway Controllers.    Acknowledgement of the ServiceChange Command\n   completes\
    \ the registration process.  The MG may specify the transport\n   ServiceChangeAddress\
    \ to be used by the MGC for sending messages in\n   the ServiceChangeAddress parameter\
    \ in the input\n   ServiceChangeDescriptor. The MG may specify an address in the\n\
    \   ServiceChangeAddress parameter of the ServiceChange request, and the\n   MGC\
    \ may also do so in the ServiceChange reply.  In either case, the\n   recipient\
    \ must use the supplied address as the destination for all\n   subsequent transaction\
    \ requests within the association.  At the same\n   time, as indicated in section\
    \ 9, transaction replies and pending\n   indications must be sent to the address\
    \ from which the corresponding\n   requests originated.  This must be done even\
    \ if it implies extra\n   messaging because commands and responses cannot be packed\
    \ together.\n   The TimeStamp parameter shall be sent with a registration command\
    \ and\n   its response.\n   The Media Gateway Controller may return an ServiceChangeMgcId\n\
    \   parameter that describes the Media Gateway Controller that should\n   preferably\
    \ be contacted for further service by the Media Gateway.  In\n   this case the\
    \ Media Gateway shall reissue the ServiceChange command\n   to the new Media Gateway\
    \ Controller.   The Gateway specified in an\n   ServiceChangeMgcId, if provided,\
    \ shall be contacted before any\n   further alternate MGCs.  On a HandOff message\
    \ from MGC to MG, the\n   ServiceChangeMgcId is the new MGC that will take over\
    \ from the\n   current MGC.\n   The return from ServiceChange is empty except\
    \ when the Root\n   terminationID is used.  In that case it includes the following\n\
    \   parameters as required:\n    .  ServiceChangeAddress, if the responding MGC\
    \ wishes to specify an\n       new destination for messages from the MG for the\
    \ remainder of the\n       association;\n    .  ServiceChangeMgcId, if the responding\
    \ MGC does not wish to\n       sustain an association with the MG;\n    .  ServiceChangeProfile,\
    \ if the responder wishes to negotiate the\n       profile to be used for the\
    \ association;\n    .  ServiceChangeVersion, if the responder wishes to negotiate\
    \ the\n       version of the protocol to be used for the association.\n   The\
    \ following ServiceChangeReasons are defined.  This list may be\n   extended by\
    \ an IANA registration as outlined in section 13.3\n        900 Service Restored\n\
    \        901 Cold Boot\n        902 Warm Boot\n        903 MGC Directed Change\n\
    \        904 Termination malfunctioning\n        905 Termination taken out of\
    \ service\n        906 Loss of lower layer connectivity (e.g. downstream sync)\n\
    \        907 Transmission Failure\n        908 MG Impending Failure\n        909\
    \ MGC Impending Failure\n        910 Media Capability Failure\n        911 Modem\
    \ Capability Failure\n        912 Mux Capability Failure\n        913 Signal Capability\
    \ Failure\n        914 Event Capability Failure\n        915 State Loss\n"
- title: 7.2.9 Manipulating and Auditing Context Attributes
  contents:
  - "7.2.9 Manipulating and Auditing Context Attributes\n   The commands of the protocol\
    \ as discussed in the preceding sections\n   apply to terminations.  This section\
    \ specifies how contexts are\n   manipulated and audited.\n   Commands are grouped\
    \ into actions (see section 8).  An action applies\n   to one context.  In addition\
    \ to commands, an action may contain\n   context manipulation and auditing instructions.\n\
    \   An action request sent to a MG may include a request to audit\n   attributes\
    \ of a context.  An action may also include a request to\n   change the attributes\
    \ of a context.\n   The context properties that may be included in an action reply\
    \ are\n   used to return information to a MGC.  This can be information\n   requested\
    \ by an audit of context attributes or details of the effect\n   of manipulation\
    \ of a context.\n   If a MG receives an action which contains both a request to\
    \ audit\n   context attributes and a request to manipulate those attributes, the\n\
    \   response SHALL include the values of the attributes after processing\n   the\
    \ manipulation request.\n"
- title: 7.2.10 Generic Command Syntax
  contents:
  - "7.2.10 Generic Command Syntax\n   The protocol can be encoded in a binary format\
    \ or in a text format.\n   MGCs should support both encoding formats.  MGs may\
    \ support both\n   formats.\n   The protocol syntax for the binary format of the\
    \ protocol is defined\n   in Annex A.  Annex C specifies the encoding of the Local\
    \ and Remote\n   descriptors for use with the binary format.\n   A complete ABNF\
    \ of the text encoding of the protocol per RFC2234 is\n   given in Annex B.  SDP\
    \ is used as the encoding of the Local and\n   Remote Descriptors for use with\
    \ the text encoding as modified in\n   section 7.1.8.\n"
- title: 7.3 Command Error Codes
  contents:
  - "7.3 Command Error Codes\n   Errors consist of an IANA registered error code and\
    \ an explanatory\n   string.  Sending the explanatory string is optional.  Implementations\n\
    \   are encouraged to append diagnostic information to the end of the\n   string.\n\
    \   When a MG reports an error to a MGC, it does so in an error\n   descriptor.\
    \  An error descriptor consists of an error code and\n   optionally the associated\
    \ explanatory string.\n   The identified error codes are:\n        400 - Bad Request\n\
    \        401 - Protocol Error\n        402 - Unauthorized\n        403 - Syntax\
    \ Error in Transaction\n        404 - Syntax Error in TransactionReply\n     \
    \   405 - Syntax Error in TransactionPending\n        406 - Version Not Supported\n\
    \        410 - Incorrect identifier\n        411 - The transaction refers to an\
    \ unknown ContextId\n        412 - No ContextIDs available\n        421 - Unknown\
    \ action or illegal combination of actions\n        422 - Syntax Error in Action\n\
    \        430 - Unknown TerminationID\n        431 - No TerminationID matched a\
    \ wildcard\n        432 - Out of TerminationIDs or No TerminationID available\n\
    \        433 - TerminationID is already in a Context\n        440 - Unsupported\
    \ or unknown Package\n        441 - Missing RemoteDescriptor\n        442 - Syntax\
    \ Error in Command\n        443 - Unsupported or Unknown Command\n        444\
    \ - Unsupported or Unknown Descriptor\n        445 - Unsupported or Unknown Property\n\
    \        446 - Unsupported or Unknown Parameter\n        447 - Descriptor not\
    \ legal in this command\n        448 - Descriptor appears twice in a command\n\
    \        450 - No such property in this package\n        451 - No such event in\
    \ this package\n        452 - No such signal in this package\n        453 - No\
    \ such statistic in this package\n        454 - No such parameter value in this\
    \ package\n        455 - Parameter illegal in this Descriptor\n        456 - Parameter\
    \ or Property appears twice in this Descriptor\n        461 - TransactionIDs in\
    \ Reply do not match Request\n        462 - Commands in Transaction Reply do not\
    \ match commands in\n              request\n        463 - TerminationID of Transaction\
    \ Reply does not match\n              request\n        464 - Missing reply in\
    \ Transaction Reply\n        465 - TransactionID in Transaction Pending does not\
    \ match any\n              open request\n        466 - Illegal Duplicate Transaction\
    \ Request\n        467 - Illegal Duplicate Transaction Reply\n        471 - Implied\
    \ Add for Multiplex failure\n        500 - Internal Gateway Error\n        501\
    \ - Not Implemented\n        502 - Not ready.\n        503 - Service Unavailable\n\
    \        504 - Command Received from unauthorized entity\n        505 - Command\
    \ Received before Restart Response\n        510 - Insufficient resources\n   \
    \     512 - Media Gateway unequipped to detect requested Event\n        513 -\
    \ Media Gateway unequipped to generate requested Signals\n        514 - Media\
    \ Gateway cannot send the specified announcement\n        515 - Unsupported Media\
    \ Type\n        517 - Unsupported or invalid mode\n        518 - Event buffer\
    \ full\n        519 - Out of space to store digit map\n        520 - Media Gateway\
    \ does not have a digit map\n        521 - Termination is \"ServiceChangeing\"\
    \n        526 - Insufficient bandwidth\n        529 - Internal hardware failure\n\
    \        530 - Temporary Network failure\n        531 - Permanent Network failure\n\
    \        581 - Does Not Exist\n"
- title: 8. TRANSACTIONS
  contents:
  - "8. TRANSACTIONS\n   Commands between the Media Gateway Controller and the Media\
    \ Gateway\n   are grouped into Transactions, each of which is identified by a\n\
    \   TransactionID.  Transactions consist of one or more Actions.  An\n   Action\
    \ consists of a series of Commands that are limited to operating\n   within a\
    \ single Context.   Consequently each Action typically\n   specifies a ContextID.\
    \  However, there are two circumstances where a\n   specific ContextID is not\
    \ provided with an Action.  One is the case\n   of modification of a Termination\
    \ outside of a Context.  The other is\n   where the controller requests the gateway\
    \ to create a new Context.\n   Following is a graphic representation of the Transaction,\
    \ Action and\n   Command relationships.\n       +----------------------------------------------------------+\n\
    \       | Transaction x                                            |\n       |\
    \  +----------------------------------------------------+  |\n       |  | Action\
    \ 1                                           |  |\n       |  | +---------+  +---------+\
    \  +---------+  +---------+ |  |\n       |  | | Command |  | Command |  | Command\
    \ |  | Command | |  |\n       |  | |    1    |  |    2    |  |    3    |  |  \
    \  4    | |  |\n       |  | +---------+  +---------+  +---------+  +---------+\
    \ |  |\n       |  +----------------------------------------------------+  |\n\
    \       |                                                          |\n       |\
    \  +----------------------------------------------------+  |\n       |  | Action\
    \ 2                                           |  |\n       |  | +---------+  \
    \                                      |  |\n       |  | | Command |         \
    \                               |  |\n       |  | |    1    |                \
    \                        |  |\n       |  | +---------+                       \
    \                 |  |\n       |  +----------------------------------------------------+\
    \  |\n       |                                                          |\n  \
    \     |  +----------------------------------------------------+  |\n       | \
    \ | Action 3                                           |  |\n       |  | +---------+\
    \  +---------+  +---------+              |  |\n       |  | | Command |  | Command\
    \ |  | Command |              |  |\n       |  | |    1    |  |    2    |  |  \
    \  3    |              |  |\n       |  | +---------+  +---------+  +---------+\
    \              |  |\n       |  +----------------------------------------------------+\
    \  |\n       +----------------------------------------------------------+\n  \
    \            Figure 5 Transactions, Actions and Commands\n   Transactions are\
    \ presented as TransactionRequests.  Corresponding\n   responses to a TransactionRequest\
    \ are received in a single reply,\n   possibly preceded by a number of TransactionPending\
    \ messages (see\n   section 8.2.3).\n   Transactions guarantee ordered Command\
    \ processing.  That is, Commands\n   within a Transaction are executed sequentially.\
    \ Ordering of\n   Transactions is NOT guaranteed - transactions may be executed\
    \ in any\n   order, or simultaneously.\n   At the first failing Command in a Transaction,\
    \ processing of the\n   remaining Commands in that Transaction stops.  If a command\
    \ contains\n   a wildcarded TerminationID, the command is attempted with each\
    \ of the\n   actual TerminationIDs matching the wildcard.  A response within the\n\
    \   TransactionReply is included for each matching TerminationID, even if\n  \
    \ one or more instances generated an error.  If any TerminationID\n   matching\
    \ a wildcard results in an error when executed, any commands\n   following the\
    \ wildcarded command are not attempted.  Commands may be\n   marked as \"Optional\"\
    \ which can override this behaviour -  if a\n   command marked as Optional results\
    \ in an error, subsequent commands\n   in the Transaction will be executed.  A\
    \ TransactionReply includes the\n   results for all of the Commands in the corresponding\n\
    \   TransactionRequest.  The TransactionReply includes the return values\n   for\
    \ the Commands that were executed successfully, and the Command and\n   error\
    \ descriptor for any Command that failed.  TransactionPending is\n   used to periodically\
    \ notify the receiver that a Transaction has not\n   completed yet, but is actively\
    \ being processed.\n   Applications SHOULD implement an application level timer\
    \ per\n   transaction.  Expiration of the timer should cause a retransmission\n\
    \   of the request.  Receipt of a Reply should cancel the timer.  Receipt\n  \
    \ of Pending should restart the timer.\n"
- title: 8.1 Common Parameters
  contents:
  - '8.1 Common Parameters

    '
- title: 8.1.1 Transaction Identifiers
  contents:
  - "8.1.1 Transaction Identifiers\n   Transactions are identified by a TransactionID,\
    \ which is assigned by\n   sender and is unique within the scope of the sender.\n"
- title: 8.1.2 Context Identifiers
  contents:
  - "8.1.2 Context Identifiers\n   Contexts are identified by a ContextID, which is\
    \ assigned by the\n   Media Gateway and is unique within the scope of the Media\
    \ Gateway.\n   The Media Gateway Controller shall use the ContextID supplied by\
    \ the\n   Media Gateway in all subsequent Transactions relating to that\n   Context.\
    \  The protocol makes reference to a distinguished value that\n   may be used\
    \ by the Media Gateway Controller when referring to a\n   Termination that is\
    \ currently not associated with a Context, namely\n   the null ContextID.\n  \
    \ The CHOOSE wildcard is used to request that the Media Gateway create\n   a new\
    \ Context.  The MGC shall not use partially specified ContextIDs\n   containing\
    \ the CHOOSE wildcard.\n   The MGC may use the ALL wildcard to address all Contexts\
    \ on the MG.\n"
- title: 8.2 Transaction Application Programming Interface
  contents:
  - "8.2 Transaction Application Programming Interface\n   Following is an Application\
    \ Programming Interface (API) describing\n   the Transactions of the protocol.\
    \  This API is shown to illustrate\n   the Transactions and their parameters and\
    \ is not intended to specify\n   implementation (e.g. via use of blocking function\
    \ calls).  It will\n   describe the input parameters and return values expected\
    \ to be used\n   by the various Transactions of the protocol from a very high\
    \ level.\n   Transaction syntax and encodings are specified in later subsections.\n"
- title: 8.2.1 TransactionRequest
  contents:
  - "8.2.1 TransactionRequest\n   The TransactionRequest is invoked by the sender.\
    \  There is one\n   Transaction per request invocation.  A request contains one\
    \ or more\n   Actions, each of which specifies its target Context and one or more\n\
    \   Commands per Context.\n       TransactionRequest(TransactionId {\n       \
    \       ContextID {Command _ Command},\n                               . . .\n\
    \              ContextID  {Command _ Command } })\n   The TransactionID parameter\
    \ must specify a value for later\n   correlation with the TransactionReply or\
    \ TransactionPending response\n   from the receiver.\n   The ContextID parameter\
    \ must specify a value to pertain to all\n   Commands that follow up to either\
    \ the next specification of a\n   ContextID parameter or the end of the TransactionRequest,\
    \ whichever\n   comes first.\n   The Command parameter represents one of the Commands\
    \ mentioned in the\n   \"Command Details\" subsection titled \"Application Programming\n\
    \   Interface\".\n"
- title: 8.2.2 TransactionReply
  contents:
  - "8.2.2 TransactionReply\n   The TransactionReply is invoked by the receiver. \
    \ There is one reply\n   invocation per transaction.  A reply contains one or\
    \ more Actions,\n   each of which must specify its target Context and one or more\n\
    \   Responses per Context.\n        TransactionReply(TransactionID {\n       \
    \         ContextID { Response _ Response },\n                               \
    \ . . .\n                ContextID { Response _ Response } })\n   The TransactionID\
    \ parameter must be the same as that of the\n   corresponding TransactionRequest.\n\
    \   The ContextID parameter must specify a value to pertain to all\n   Responses\
    \ for the action.  The ContextID may be specific or null.\n   Each of the Response\
    \ parameters represents a return value as\n   mentioned in section 7.2, or an\
    \ error descriptor if the command\n   execution encountered an error. Commands\
    \ after the point of failure\n   are not processed and, therefore, Responses are\
    \ not issued for them.\n   An exception to this occurs if a command has been marked\
    \ as optional\n   in the Transaction request. If the optional command  generates\
    \ an\n   error, the transaction still continues to execute, so the Reply\n   would,\
    \ in this case, have Responses after an Error.\n   If the receiver encounters\
    \ an error in processing a ContextID, the\n   requested Action response will consist\
    \ of the context ID and a single\n   error descriptor, 422 Syntax Error in Action.\n\
    \   If the receiver encounters an error such that it cannot determine a\n   legal\
    \ Action, it will return a TransactionReply consisting of the\n   TransactionID\
    \ and a single error descriptor, 422 Syntax Error in\n   Action. If the end of\
    \ an action cannot be reliably determined but one\n   or more Actions can be parsed,\
    \ it will process them and then send 422\n   Syntax Error in Action as the last\
    \ action for the transaction.  If\n   the receiver encounters an error such that\
    \ is cannot determine a\n   legal Transaction, it will return a TransactionReply\
    \ with a null\n   TransactionID and a single error descriptor (403 Syntax Error\
    \ in\n   Transaction).\n   If the end of a transaction can not be reliably determined\
    \ and one or\n   more Actions can be parsed, it will process them and then return\
    \ 403\n   Syntax Error in Transaction as the last action reply for the\n   transaction.\
    \  If no Actions can be parsed, it will return 403 Syntax\n   Error in Transaction\
    \ as the only reply\n   If the terminationID cannot be reliably determined it\
    \ will send 442\n   Syntax Error in Command as the action reply.\n   If the end\
    \ of a command cannot be reliably determined it will return\n   442 Syntax Error\
    \ in Transaction as the reply to the last action it\n   can parse.\n"
- title: 8.2.3 TransactionPending
  contents:
  - "8.2.3 TransactionPending\n   The receiver invokes the TransactionPending.  A\
    \ TransactionPending\n   indicates that the Transaction is actively being processed,\
    \ but has\n   not been completed.  It is used to prevent the sender from assuming\n\
    \   the TransactionRequest was lost where the Transaction will take some\n   time\
    \ to complete.\n        TransactionPending(TransactionID { } )\n   The TransactionID\
    \ parameter must be the same as that of the\n   corresponding TransactionRequest.\
    \  A property of root\n   (normalMGExecutionTime) is settable by the MGC to indicate\
    \ the\n   interval within which the MGC expects a response to any transaction\n\
    \   from the MG.  Another property (normalMGCExecutionTime) is settable\n   by\
    \ the MGC to indicate the interval within which the MG should\n   expects a response\
    \ to any transaction from the MGC.  Senders may\n   receive more than one TransactionPending\
    \ for a command.  If a\n   duplicate request is received when pending, the responder\
    \ may send a\n   duplicate pending immediately, or continue waiting for its timer\
    \ to\n   trigger another Transaction Pending.\n"
- title: 8.3 Messages
  contents:
  - "8.3 Messages\n   Multiple Transactions can be concatenated into a Message.  Messages\n\
    \   have a header, which includes the identity of the sender. The Message\n  \
    \ Identifier (MID) of a message is set to a provisioned name (e.g.\n   domain\
    \ address/domain name/device name) of the entity transmitting\n   the message.\
    \  Domain name is a suggested default.\n   Every Message contains a Version Number\
    \ identifying the version of\n   the protocol the message conforms to.  Versions\
    \ consist of one or two\n   digits, beginning with version 1 for the present version\
    \ of the\n   protocol.\n   The transactions in a message are treated independently.\
    \  There is no\n   order implied, there is no application or protocol acknowledgement\
    \ of\n   a message.\n"
- title: 9. TRANSPORT
  contents:
  - "9. TRANSPORT\n   The transport mechanism for the protocol should allow the reliable\n\
    \   transport of transactions between an MGC and MG. The transport shall\n   remain\
    \ independent of what particular commands are being sent and\n   shall be applicable\
    \ to all application states.  There are several\n   transports defined for the\
    \ protocol, which are defined in normative\n   Annexes to this document.  Additional\
    \ Transports may be defined as\n   additional annexes in subsequent editions of\
    \ this document, or in\n   separate documents.  For transport of the protocol\
    \ over IP, MGCs\n   shall implement both TCP and UDP/ALF, an MG shall implement\
    \ TCP or\n   UDP/ALF or both.\n   The MG is provisioned with a name or address\
    \ (such as DNS name or IP\n   address) of a primary and zero or more secondary\
    \ MGCs (see section\n   7.2.8) that is the address the MG uses to send messages\
    \ to the MGC.\n   If TCP or UDP is used as the protocol transport and the port\
    \ to which\n   the initial ServiceChange request is to be sent is not otherwise\n\
    \   known, that request should be sent to the default port number for the\n  \
    \ protocol.  This port number is 2944 for text-encoded operation or\n   2945 for\
    \ binary-encoded operation, for either UDP or TCP.  The MGC\n   receives the message\
    \ containing the ServiceChange request from the MG\n   and can determine the MG's\
    \ address from it.  As described in section\n   7.2.8, either the MG or the MGC\
    \ may supply an address in the\n   ServiceChangeAddress parameter to which subsequent\
    \ transaction\n   requests must be addressed, but responses (including the response\
    \ to\n   the initial ServiceChange request) must always be sent back to the\n\
    \   address which was the source of the corresponding request.\n"
- title: 9.1 Ordering of Commands
  contents:
  - "9.1 Ordering of Commands\n   This document does not mandate that the underlying\
    \ transport protocol\n   guarantees the sequencing of transactions sent to an\
    \ entity.  This\n   property tends to maximize the timeliness of actions, but\
    \ it has a\n   few drawbacks.  For example:\n    .  Notify commands may be delayed\
    \ and arrive at the MGC after the\n       transmission of a new command changing\
    \ the EventsDescriptor\n    .  If a new command is transmitted before a previous\
    \ one is\n       acknowledged, there is no guarantee that prior command will be\n\
    \       executed before the new one.\n   Media Gateway Controllers that want to\
    \ guarantee consistent operation\n   of the Media Gateway may use the following\
    \ rules.  These rules are\n   with respect to commands that are in different transactions.\n\
    \   Commands that are in the same transaction are executed in order (see\n   section\
    \ 8).\n   1. When a Media Gateway handles several Terminations, commands\n   \
    \   pertaining to the different Terminations may be sent in parallel,\n      for\
    \ example following a model where each Termination (or group of\n      Terminations)\
    \ is controlled by its own process or its own thread.\n   2. On a Termination,\
    \ there should normally be at most one outstanding\n      command (Add or Modify\
    \ or Move), unless the outstanding commands\n      are in the same transaction.\
    \  However, a Subtract command may be\n      issued at any time.  In consequence,\
    \ a Media Gateway may sometimes\n      receive a Modify command that applies to\
    \ a previously subtracted\n      Termination.  Such commands should be ignored,\
    \ and an error code\n      should be returned.\n   3. On a given Termination,\
    \ there should normally be at most one\n      outstanding Notify command at any\
    \ time.\n   4. In some cases, an implicitly or explicitly wildcarded Subtract\n\
    \      command that applies to a group of Terminations may step in front\n   \
    \   of a pending Add command.  The Media Gateway Controller should\n      individually\
    \ delete all Terminations for which an Add command was\n      pending at the time\
    \ of the global Subtract command.  Also, new Add\n      commands for Terminations\
    \ named by the wild-carding (or implied in\n      a Multiplex descriptor) should\
    \ not be sent until the wild-carded\n      Subtract command is acknowledged.\n\
    \   5. AuditValue and AuditCapability are not subject to any sequencing.\n   6.\
    \ ServiceChange shall always be the first command sent by a MG as\n      defined\
    \ by the restart procedure. Any other command or response\n      must be delivered\
    \ after this ServiceChange command.\n   These rules do not affect the command\
    \ responder, which should always\n   respond to commands.\n"
- title: 9.2 Protection against Restart Avalanche
  contents:
  - "9.2 Protection against Restart Avalanche\n   In the event that a large number\
    \ of Media Gateways are powered on\n   simultaneously and they were to all initiate\
    \ a ServiceChange\n   transaction, the Media Gateway Controller would very likely\
    \ be\n   swamped, leading to message losses and network congestion during the\n\
    \   critical period of service restoration. In order to prevent such\n   avalanches,\
    \ the following behavior is suggested:\n   1. When a Media Gateway is powered\
    \ on, it should initiate a restart\n      timer to a random value, uniformly distributed\
    \ between 0 and a\n      maximum waiting delay (MWD). Care should be taken to\
    \ avoid\n      synchronicity of the random number generation between multiple\n\
    \      Media Gateways that would use the same algorithm.\n   2. The Media Gateway\
    \ should then wait for either the end of this\n      timer or the detection of\
    \ a local user activity, such as for\n      example an off-hook transition on\
    \ a residential Media Gateway.\n   3. When the timer elapses, or when an activity\
    \ is detected, the Media\n      Gateway should initiate the restart procedure.\n\
    \   The restart procedure simply requires the MG to guarantee that the\n   first\
    \ message that the Media Gateway Controller sees from this MG is\n   a ServiceChange\
    \ message informing the Media Gateway Controller about\n   the restart.\n   Note\
    \ -  The value of MWD is a configuration parameter that depends on\n   the type\
    \ of the Media Gateway. The following reasoning may be used to\n   determine the\
    \ value of this delay on residential gateways.\n   Media Gateway Controllers are\
    \ typically dimensioned to handle the\n   peak hour traffic load, during which,\
    \ in average, 10% of the lines\n   will be busy, placing calls whose average duration\
    \ is typically 3\n   minutes.  The processing of a call typically involves 5 to\
    \ 6 Media\n   Gateway Controller transactions between each Media Gateway and the\n\
    \   Media Gateway Controller.  This simple calculation shows that the\n   Media\
    \ Gateway Controller is expected to handle 5 to 6 transactions\n   for each Termination,\
    \ every 30 minutes on average, or, to put it\n   otherwise, about one transaction\
    \ per Termination every 5 to 6 minutes\n   on average.  This suggests that a reasonable\
    \ value of MWD for a\n   residential gateway would be 10 to 12 minutes.  In the\
    \ absence of\n   explicit configuration, residential gateways should adopt a value\
    \ of\n   600 seconds for MWD.\n   The same reasoning suggests that the value of\
    \ MWD should be much\n   shorter for trunking gateways or for business gateways,\
    \ because they\n   handle a large number of Terminations, and also because the\
    \ usage\n   rate of these Terminations is much higher than 10% during the peak\n\
    \   busy hour, a typical value being 60%.  These Terminations, during the\n  \
    \ peak hour, are this expected to contribute about one transaction per\n   minute\
    \ to the Media Gateway Controller load. A reasonable algorithm\n   is to make\
    \ the value of MWD per \"trunk\" Termination six times shorter\n   than the MWD\
    \ per residential gateway, and also inversely proportional\n   to the number of\
    \ Terminations that are being restarted. For example\n   MWD should be set to\
    \ 2.5 seconds for a gateway that handles a T1\n   line, or to 60 milliseconds\
    \ for a gateway that handles a T3 line.\n"
- title: 10. SECURITY CONSIDERATIONS
  contents:
  - "10. SECURITY CONSIDERATIONS\n   This section covers security when using the protocol\
    \ in an IP\n   environment.\n"
- title: 10.1 Protection of Protocol Connections
  contents:
  - "10.1 Protection of Protocol Connections\n   A security mechanism is clearly needed\
    \ to prevent unauthorized\n   entities from using the protocol defined in this\
    \ document for setting\n   up unauthorized calls or interfering with authorized\
    \ calls.  The\n   security mechanism for the protocol when transported over IP\
    \ networks\n   is IPsec [RFC2401 to RFC2411].\n   The AH header [RFC2402] affords\
    \ data origin authentication,\n   connectionless integrity and optional anti-replay\
    \ protection of\n   messages passed between the MG and the MGC. The ESP header\
    \ [RFC2406]\n   provides confidentiality of messages, if desired. For instance,\
    \ the\n   ESP encryption service should be requested if the session\n   descriptions\
    \ are used to carry session keys, as defined in SDP.\n   Implementations of the\
    \ protocol defined in this document employing\n   the ESP header SHALL comply\
    \ with section 5 of [RFC2406], which\n   defines a minimum set of algorithms for\
    \ integrity checking and\n   encryption. Similarly, implementations employing\
    \ the AH header SHALL\n   comply with section 5 of [RFC2402], which defines a\
    \ minimum set of\n   algorithms for integrity checking using manual keys.\n  \
    \ Implementations SHOULD use IKE [RFC2409] to permit more robust keying\n   options.\
    \ Implementations employing IKE SHOULD support authentication\n   with RSA signatures\
    \ and RSA public key encryption.\n"
- title: 10.2 Interim AH scheme
  contents:
  - "10.2 Interim AH scheme\n   Implementation of IPsec requires that the AH or ESP\
    \ header be\n   inserted immediately after the IP header. This cannot be easily\
    \ done\n   at the application level.  Therefore, this presents a deployment\n\
    \   problem for the protocol defined in this document where the\n   underlying\
    \ network implementation does not support IPsec.\n   As an interim solution, an\
    \ optional AH header is defined within the\n   H.248 protocol header. The header\
    \ fields are exactly those of the\n   SPI, SEQUENCE NUMBER and DATA fields as\
    \ defined in [RFC2402]. The\n   semantics of the header fields are the same as\
    \ the \"transport mode\"\n   of [RFC2402], except for the calculation of the Integrity\
    \ Check value\n   (ICV). In IPsec, the ICV is calculated over the entire IP packet\n\
    \   including the IP header. This prevents spoofing of the IP addresses.\n   To\
    \ retain the same functionality, the ICV calculation should be\n   performed across\
    \ the entire transaction prepended by a synthesized IP\n   header consisting of\
    \ a 32 bit source IP address, a 32 bit destination\n   address and an 16 bit UDP\
    \ encoded as 10 hex digits.  When the interim\n   AH mechanism is employed when\
    \ TCP is the transport Layer, the UDP\n   Port above becomes the TCP port, and\
    \ all other operations are the\n   same.\n   Implementations of the H.248 protocol\
    \ SHALL implement IPsec where the\n   underlying operating system and the transport\
    \ network supports IPsec.\n   Implementations of the protocol using IPv4 SHALL\
    \ implement the\n   interim AH scheme. However, this interim scheme SHALL NOT\
    \ be used\n   when the underlying network layer supports IPsec. IPv6\n   implementations\
    \ are assumed to support IPsec and SHALL NOT use the\n   interim AH scheme.\n\
    \   All implementations of the interim AH mechanism SHALL comply with\n   section\
    \ 5 of [RFC2402] which defines a minimum set of algorithms for\n   integrity checking\
    \ using manual keys.\n   The interim AH interim scheme does not provide protection\
    \ against\n   eavesdropping; thus forbidding third parties from monitoring the\n\
    \   connections set up by a given termination. Also, it does not provide\n   protection\
    \ against replay attacks.  These procedures do not\n   necessarily protect against\
    \ denial of service attacks by misbehaving\n   MGs or misbehaving MGCs. However,\
    \ they will provide an identification\n   of these misbehaving entities, which\
    \ should then be deprived of their\n   authorization through maintenance procedures.\n"
- title: 10.3 Protection of Media Connections
  contents:
  - "10.3 Protection of Media Connections\n   The protocol allows the MGC to provide\
    \ MGs with \"session keys\" that\n   can be used to encrypt the audio messages,\
    \ protecting against\n   eavesdropping.\n   A specific problem of packet networks\
    \ is \"uncontrolled barge-in\".\n   This attack can be performed by directing\
    \ media packets to the IP\n   address and UDP port used by a connection. If no\
    \ protection is\n   implemented, the packets must be decompressed and the signals\
    \ must be\n   played on the \"line side\".\n   A basic protection against this\
    \ attack is to only accept packets from\n   known sources, checking for example\
    \ that the IP source address and\n   UDP source port match the values announced\
    \ in the Remote Descriptor.\n   This has two inconveniences: it slows down connection\
    \ establishment\n   and it can be fooled by source spoofing:\n    .  To enable\
    \ the address-based protection, the MGC must obtain the\n       remote session\
    \ description of the egress MG and pass it to the\n       ingress MG.  This requires\
    \ at least one network roundtrip, and\n       leaves us with a dilemma: either\
    \ allow the call to proceed\n       without waiting for the round trip to complete,\
    \ and risk for\n       example, \"clipping\" a remote announcement, or wait for\
    \ the full\n       roundtrip and settle for slower call-set-up procedures.\n \
    \   .  Source spoofing is only effective if the attacker can obtain\n       valid\
    \ pairs of source destination addresses and ports, for\n       example by listening\
    \ to a fraction of the traffic. To fight\n       source spoofing, one could try\
    \ to control all access points to\n       the network.  But this is in practice\
    \ very hard to achieve.\n   An alternative to checking the source address is to\
    \ encrypt and\n   authenticate the packets, using a secret key that is conveyed\
    \ during\n   the call set-up procedure. This will not slow down the call set-up,\n\
    \   and provides strong protection against address spoofing.\n"
- title: 11.  MG-MGC CONTROL INTERFACE
  contents:
  - "11.  MG-MGC CONTROL INTERFACE\n   The control association between MG and MGC\
    \ is initiated at MG cold\n   start, and announced by a ServiceChange message,\
    \ but can be changed\n   by subsequent events, such as failures or manual service\
    \ events.\n   While the protocol does not have an explicit mechanism to support\n\
    \   multiple MGCs controlling a physical MG, it has been designed to\n   support\
    \ the multiple logical MG (within a single physical MG) that\n   can be associated\
    \ with different MGCs.\n"
- title: 11.1 Multiple Virtual MGs
  contents:
  - "11.1 Multiple Virtual MGs\n   A physical Media Gateway may be partitioned into\
    \ one or more Virtual\n   MGs.  A virtual MG consists of a set of statically partitioned\n\
    \   physical Terminations and/or sets of ephemeral Terminations.  A\n   physical\
    \ Termination is controlled by one MGC.  The model does not\n   require that other\
    \ resources be statically allocated, just\n   Terminations.  The mechanism for\
    \ allocating Terminations to virtual\n   MGs is a management method outside the\
    \ scope of the protocol.  Each\n   of the virtual MGs appears to the MGC as a\
    \ complete MG client.\n   A physical MG may have only one network interface, which\
    \ must be\n   shared across virtual MGs.  In such a case, the packet/cell side\n\
    \   Termination is shared.  It should be noted however, that in use, such\n  \
    \ interfaces require an ephemeral instance of the Termination to be\n   created\
    \ per flow, and thus sharing the Termination is\n   straightforward.  This mechanism\
    \ does lead to a complication, namely\n   that the MG must always know which of\
    \ its controlling MGCs should be\n   notified if an event occurs on the interface.\n\
    \   In normal operation, the Virtual MG will be instructed by the MGC to\n   create\
    \ network flows (if it is the originating side), or to expect\n   flow requests\
    \ (if it is the terminating side), and no confusion will\n   arise.  However,\
    \ if an unexpected event occurs, the Virtual MG must\n   know what to do with\
    \ respect to the physical resources it is\n   controlling.\n   If recovering from\
    \ the event requires manipulation of a physical\n   interface's state, only one\
    \ MGC should do so.  These issues are\n   resolved by allowing any of the MGCs\
    \ to create EventsDescriptors to\n   be notified of such events, but only one\
    \ MGC can have read/write\n   access to the physical interface properties; all\
    \ other MGCs have\n   read-only access.  The management mechanism is used to designate\n\
    \   which MGC has read/write capability, and is designated the Master\n   MGC.\n\
    \   Each virtual MG has its own Root Termination.  In most cases the\n   values\
    \ for the properties of the Root Termination are independently\n   settable by\
    \ each MGC.  Where there can only be one value, the\n   parameter is read-only\
    \ to all but the Master MGC.\n   ServiceChange may only be applied to a Termination\
    \ or set of\n   Terminations partitioned to the Virtual MG or created (in the\
    \ case of\n   ephemeral Terminations) by that Virtual MG.\n"
- title: 11.2 Cold Start
  contents:
  - "11.2 Cold Start\n   A MG is pre-provisioned by a management mechanism outside\
    \ the scope\n   of this protocol with a Primary and (optionally) an ordered list\
    \ of\n   Secondary MGCs.  Upon a cold start of the MG, it will issue a\n   ServiceChange\
    \ command with a \"Restart\" method, on the Root\n   Termination to its primary\
    \ MGC.  If the MGC accepts the MG, it will\n   send a Transaction Accept, with\
    \ the ServiceChangeMgcId set to itself.\n   If the MG receives an ServiceChangeMgcId\
    \ not equal to the MGC it\n   contacted, it sends a ServiceChange to the MGC specified\
    \ in the\n   ServiceChangeMgcId.  It continues this process until it gets a\n\
    \   controlling MGC to accept its registration, or it fails to get a\n   reply.\
    \  Upon failure to obtain a reply, either from the Primary MGC,\n   or a designated\
    \ successor, the MG tries its pre-provisioned Secondary\n   MGCs, in order.  If\
    \ the MG is unable to comply and it has established\n   a transport connection\
    \ to the MGC, it should close that connection.\n   In any event, it should reject\
    \ all subsequent requests from the MGC\n   with Error 406 Version Not Supported.\n\
    \   It is possible that the reply to a ServiceChange with Restart will be\n  \
    \ lost, and a command will be received by the MG prior to the receipt\n   of the\
    \ ServiceChange response.  The MG shall issue error 505 -\n   Command Received\
    \ before Restart Response.\n"
- title: 11.3 Negotiation of Protocol Version
  contents:
  - "11.3 Negotiation of Protocol Version\n   The first ServiceChange command from\
    \ an MG shall contain the version\n   number of the protocol supported by the\
    \ MG in the\n   ServiceChangeVersion parameter. Upon receiving such a message,\
    \ if the\n   MGC supports only a lower version, then the MGC shall send a\n  \
    \ ServiceChangeReply with the lower version and thereafter all the\n   messages\
    \ between MG and MGC shall conform to the lower version of the\n   protocol. \
    \ If the MG is unable to comply and it has established a\n   transport connection\
    \ to the MGC, it should close that connection.  In\n   any event, it should reject\
    \ all subsequent requests from the MGC with\n   Error 406 Version Not supported.\n\
    \   If the MGC supports a higher version than the MG but is able to\n   support\
    \ the lower version proposed by the MG, it shall send a\n   ServiceChangeReply\
    \ with the lower version and thereafter all the\n   messages between MG and MGC\
    \ shall conform to the lower version of the\n   protocol. If the MGC is unable\
    \ to comply, it shall reject the\n   association, with Error 406 Version Not Supported.\n\
    \   Protocol version negotiation may also occur at \"handoff\" and\n   \"failover\"\
    \ ServiceChanges.\n   When extending the protocol with new versions, the following\
    \ rules\n   should be followed.\n   1. Existing protocol elements, i.e., procedures,\
    \ parameters,\n      descriptor, property,  values, should not be changed unless\
    \ a\n      protocol error needs to be corrected or it becomes necessary to\n \
    \     change the operation of the service that is being supported by the\n   \
    \   protocol.\n   2. The semantics of a command, a parameter, descriptor, property,\n\
    \      value should not be changed.\n   3. Established rules for formatting and\
    \ encoding messages and\n      parameters should not be modified.\n   4. When\
    \ information elements are found to be obsolete they can be\n      marked as not\
    \ used. However, the identifier for that information\n      element will be marked\
    \ as reserved. In that way it can not be used\n      in future versions.\n"
- title: 11.4 Failure of an MG
  contents:
  - "11.4 Failure of an MG\n   If a MG fails, but is capable of sending a message\
    \ to the MGC, it\n   sends a ServiceChange with an appropriate method (graceful\
    \ or forced)\n   and specifies the Root TerminationID.  When it returns to service,\
    \ it\n   sends a ServiceChange with a \"Restart\" method.\n   Allowing the MGC\
    \ to send duplicate messages to both MGs accommodates\n   pairs of MGs that are\
    \ capable of redundant failover of one of the\n   MGs.  Only the Working MG shall\
    \ accept or reject transactions.  Upon\n   failover, the Primary MG sends a ServiceChange\
    \ command with a\n   \"Failover\" method and a \"MG Impending Failure\" reason.\
    \  The MGC then\n   uses the primary MG as the active MG.  When the error condition\
    \ is\n   repaired, the Working MG can send a \"ServiceChange\" with a \"Restart\"\
    \n   method.\n"
- title: 11.5 Failure of an MGC
  contents:
  - "11.5 Failure of an MGC\n   If the MG detects a failure of its controlling MGC,\
    \ it attempts to\n   contact the next MGC on its pre-provisioned list.  It starts\
    \ its\n   attempts at the beginning (Primary MGC), unless that was the MGC that\n\
    \   failed, in which case it starts at its first Secondary MGC.  It sends\n  \
    \ a ServiceChange message with a \"Failover\" method and a \" MGC\n   Impending\
    \ Failure\" reason.\n   In partial failure, or manual maintenance reasons, an\
    \ MGC may wish to\n   direct its controlled MGs to use a different MGC.  To do\
    \ so, it sends\n   a ServiceChange method to the MG with a \"HandOff\" method,\
    \ and its\n   designated replacement in ServiceChangeMgcId. The MG should send\
    \ a\n   ServiceChange message with a \"Handoff\" method and a \"MGC directed\n\
    \   change\" reason to the designated MGC.  If it fails to get a reply, or\n \
    \  fails to see an Audit command subsequently, it should behave as if\n   its\
    \ MGC failed, and start contacting secondary MGCs.  If the MG is\n   unable to\
    \ establish a control relationship with any MGC, it shall\n   wait a random amount\
    \ of time as described in section 9.2 and then\n   start contacting its primary,\
    \ and if necessary, its secondary MGCs\n   again.\n   No recommendation is made\
    \ on how the MGCs involved in the Handoff\n   maintain state information; this\
    \ is considered to be out of scope of\n   this recommendation. The MGC and MG\
    \ may take the following steps when\n   Handoff occurs.  When the MGC initiates\
    \ a HandOff, the handover\n   should be transparent to Operations on the Media\
    \ Gateway.\n   Transactions can be executed in any order, and could be in progress\n\
    \   when the ServiceChange is executed.  Accordingly, commands in\n   progress\
    \ continue, transaction replies are sent to the new MGC (after\n   a new control\
    \ association is established), and the MG should expect\n   outstanding transaction\
    \ replies from the new MGC.  No new messages\n   shall be sent to the new MGC\
    \ until the control association is\n   established.  Repeated transaction requests\
    \ shall be directed to the\n   new MGC.  The MG shall maintain state on all terminations\
    \ and\n   contexts.\n   It is possible that the MGC could be implemented in such\
    \ a way that a\n   failed MGC is replaced by a working MGC where the identity\
    \ of the new\n   MGC is the same as the failed one.  In such a case,\n   ServiceChangeMgcId\
    \ would be specified with the previous value and the\n   MG shall behave as if\
    \ the value was changed, and send a ServiceChange\n   message, as above.\n   Pairs\
    \ of MGCs that are capable of redundant failover can notify the\n   controlled\
    \ MGs of the failover by the above mechanism.\n"
- title: 12. PACKAGE DEFINITION
  contents:
  - "12. PACKAGE DEFINITION\n   The primary mechanism for extension is by means of\
    \ Packages.\n   Packages define additional Properties, Events, Signals and Statistics\n\
    \   that may occur on Terminations.\n   Packages defined by IETF will appear in\
    \ separate RFCs.\n   Packages defined by ITU-T may appear in the relevant recommendations\n\
    \   (e.g. as annexes).\n   1. A public document or a standard forum document,\
    \ which can be\n      referenced as the document that describes the package following\n\
    \      the guideline above, should be specified.\n   2. The document shall specify\
    \ the version of the Package that it\n      describes.\n   3. The document should\
    \ be available on a public web server and should\n      have a stable URL. The\
    \ site should provide a mechanism to provide\n      comments and appropriate responses\
    \ should be returned.\n"
- title: 12.1 Guidelines for defining packages
  contents:
  - "12.1 Guidelines for defining packages\n   Packages define Properties, Events,\
    \ Signals, and Statistics.\n   Packages may also define new error codes according\
    \ to the guidelines\n   given in section 13.2. This is a matter of documentary\
    \ convenience:\n   the package documentation is submitted to IANA in support of\
    \ the\n   error code registration. If a package is modified, it is unnecessary\n\
    \   to provide IANA with a new document reference in support of the error\n  \
    \ code unless the description of the error code itself is modified.\n   Names\
    \ of all such defined constructs shall consist of the PackageID\n   (which uniquely\
    \ identifies the package) and the ID of the item (which\n   uniquely identifies\
    \ the item in that package).  In the text encoding\n   the two shall be separated\
    \ by a forward slash (\"/\") character.\n   Example: togen/playtone is the text\
    \ encoding to refer to the play\n   tone signal in the tone generation package.\n\
    \   A Package will contain the following sections:\n"
- title: 12.1.1 Package
  contents:
  - "12.1.1 Package\n   Overall description of the package, specifying:\n    .  Package\
    \ Name: only descriptive,\n    .  PackageID:  Is an identifier\n    .  Description:\n\
    \    .  Version: A new version of a package can only add additional\n       Properties,\
    \ Events, Signals, Statistics and new possible values\n       for an existing\
    \ parameter described in the original package. No\n       deletions or modifications\
    \ shall be allowed. A version is  an\n       integer in the range from 1 to 99.\n\
    \    .  Extends (Optional): A package may extend an existing package. The\n  \
    \     version of the original package must be specified. When a package\n    \
    \   extends another package it shall only add additional Properties,\n       Events,\
    \ Signals, Statistics and new possible values for an\n       existing parameter\
    \ described in the original package. An extended\n       package shall not redefine\
    \ or overload a name defined in the\n       original package.  Hence, if package\
    \ B version 1 extends package A\n       version 1, version 2 of B will not be\
    \ able to extend the A version\n       2 if A version 2 defines a name already\
    \ in B version 1.\n"
- title: 12.1.2 Properties
  contents:
  - "12.1.2 Properties\n   Properties defined by the package, specifying:\n    . \
    \ Property Name: only descriptive.\n    .  PropertyID:  Is an identifier\n   \
    \ .  Description:\n    .  Type: One of:\n          String: UTF-8 string\n    \
    \      Integer: 4 byte signed integer\n          Double: 8 byte signed integer\n\
    \          Character: Unicode UTF-8 encoding of a single letter.\n           \
    \       Could be more than one octet.\n          Enumeration: One of a list of\
    \ possible unique values (See 12.3)\n          Sub-list: A list of several values\
    \ from a list\n          Boolean\n    .  Possible Values:\n    .  Defined in:\
    \ Which H.248 descriptor the property is defined in.\n       LocalControl is for\
    \ stream dependent properties. TerminationState\n       is for stream independent\
    \ properties.\n    .  Characteristics: Read / Write or both, and (optionally),\
    \ global:\n       Indicates whether a property is read-only, or read-write, and\
    \ if\n       it is global.  If Global is omitted, the property is not global.\n\
    \       If a property is declared as global, the value of the property is\n  \
    \     shared by all terminations realizing the package.\n"
- title: 12.1.3 Events
  contents:
  - "12.1.3 Events\n   Events defined by the package, specifying:\n    .  Event name:\
    \ only descriptive.\n    .  EventID:  Is an identifier\n    .  Description:\n\
    \    .  EventsDescriptor Parameters: Parameters used by the MGC to\n       configure\
    \ the event, and found in the EventsDescriptor.  See\n       section 12.2.\n \
    \   .  ObservedEventsDescriptor Parameters: Parameters returned to the\n     \
    \  MGC in  Notify requests and in replies to command requests from\n       the\
    \ MGC that audit ObservedEventsDescriptor, and found in the\n       ObservedEventsDescriptor.\
    \  See section 12.2.\n"
- title: 12.1.4 Signals
  contents:
  - "12.1.4 Signals\n    .  Signals defined by the package, specifying:\n    .  Signal\
    \ Name: only descriptive.\n    .  SignalID:  Is an identifier. SignalID is used\
    \ in a\n       SignalsDescriptor\n    .  Description\n    .  SignalType: One of:\n\
    \           - OO (On/Off)\n           - TO (TimeOut)\n           - BR (Brief)\n\
    \   Note -  SignalType may be defined such that it is dependent on the\n   value\
    \ of one or more parameters. Signals that would be played with\n   SignalType\
    \ BR should have a default duration. The package has to\n   define the default\
    \ duration and signalType.\n    .  Duration: in hundredths of seconds\n    . \
    \ Additional Parameters: See section 12.2\n"
- title: 12.1.5 Statistics
  contents:
  - "12.1.5 Statistics\n   Statistics defined by the package, specifying:\n    . \
    \ Statistic name: only descriptive.\n    .  StatisticID:  Is an identifier.  StatisticID\
    \ is used in a\n       StatisticsDescriptor.\n    .  Description\n    .  Units:\
    \ unit of measure, e.g. milliseconds, packets.\n"
- title: 12.1.6 Procedures
  contents:
  - "12.1.6 Procedures\n   Additional guidance on the use of the package.\n"
- title: 12.2 Guidelines to defining Properties, Statistics and Parameters to
  contents:
  - "12.2 Guidelines to defining Properties, Statistics and Parameters to\n     Events\
    \ and Signals.\n    . Parameter Name: only descriptive\n    . ParameterID: Is\
    \ an identifier\n    . Type: One of:\n         String: UTF-8 octet string\n  \
    \       Integer: 4 octet signed integer\n         Double: 8 octet signed integer\n\
    \         Character: Unicode UTF-8 encoding of a single letter. Could be\n   \
    \      more than one octet.\n         Enumeration: One of a list of possible unique\
    \ values (See 12.3)\n         Sub-list: A list of several values from a list\n\
    \         Boolean\n    . Possible values:\n    . Description:\n"
- title: 12.3 Lists
  contents:
  - "12.3 Lists\n   Possible values for parameters include enumerations.  Enumerations\n\
    \   may be defined in a list.  It is recommended that the list be IANA\n   registered\
    \ so that packages that extend the list can be defined\n   without concern for\
    \ conflicting names.\n"
- title: 12.4 Identifiers
  contents:
  - "12.4 Identifiers\n   Identifiers in text encoding shall be strings of up to 64\
    \ characters,\n   containing no spaces, starting with an alphanumeric character\
    \ and\n   consisting of alphanumeric characters and / or digits, and possibly\n\
    \   including the special character underscore (\"_\").\n   Identifiers in binary\
    \ encoding are 2 octets long.\n   Both text and binary values shall be specified\
    \ for each identifier,\n   including identifiers used as values in enumerated\
    \ types.\n"
- title: 12.5 Package Registration
  contents:
  - "12.5 Package Registration\n   A package can be registered with IANA for interoperability\
    \ reasons.\n   See section 13 for IANA considerations.\n"
- title: 13.  IANA CONSIDERATIONS
  contents:
  - '13.  IANA CONSIDERATIONS

    '
- title: 13.1 Packages
  contents:
  - "13.1 Packages\n   The following considerations SHALL be met to register a package\
    \ with\n   IANA:\n   1. A unique string name, unique serial number and version\
    \ number is\n      registered for each package.  The string name is used with\
    \ text\n      encoding.  The serial number shall be used with binary encoding.\n\
    \      Serial Numbers 60000-64565 are reserved for private use. Serial\n     \
    \ number 0 is reserved.\n   2. A contact name, email and postal addresses for\
    \ that contact shall\n      be specified.  The contact information shall be updated\
    \ by the\n      defining organization as necessary.\n   3. A reference to a document\
    \ that describes the package, which should\n      be public:\n      The document\
    \ shall specify the version of the Package that it\n      describes.\n      If\
    \ the document is public, it should be located on a public web\n      server and\
    \ should have a stable URL. The site should provide a\n      mechanism to provide\
    \ comments and appropriate responses should be\n      returned.\n   4. Packages\
    \ registered by other than recognized standards bodies\n      shall have a minimum\
    \ package name length of 8 characters.\n   5. All other package names are first\
    \ come-first served if all other\n      conditions are met\n"
- title: 13.2 Error Codes
  contents:
  - "13.2 Error Codes\n   The following considerations SHALL be met to register an\
    \ error code\n   with IANA:\n   1. An error number and a one line (80 character\
    \ maximum) string is\n      registered for each error.\n   2. A complete description\
    \ of the conditions under which the error is\n      detected shall be included\
    \ in a publicly available document.  The\n      description shall be sufficiently\
    \ clear to differentiate the error\n      from all other existing error codes.\n\
    \   3. The document should be available on a public web server and should\n  \
    \    have a stable URL.\n   4. Error numbers registered by recognized standards\
    \ bodies shall have\n      3 or 4 character error numbers.\n   5. Error numbers\
    \ registered by all other organizations or individuals\n      shall have 4 character\
    \ error numbers.\n   6. An error number shall not be redefined, nor modified except\
    \ by the\n      organization or individual that originally defined it, or their\n\
    \      successors or assigns.\n"
- title: 13.3 ServiceChange Reasons
  contents:
  - "13.3 ServiceChange Reasons\n   The following considerations SHALL be met to register\
    \ service change\n   reason with IANA:\n   1. A one phrase, 80-character maximum,\
    \ unique reason code is\n      registered for each reason.\n   2. A complete description\
    \ of the conditions under which the reason is\n      used is detected shall be\
    \ included in a publicly available\n      document.  The description shall be\
    \ sufficiently clear to\n      differentiate the reason from all other existing\
    \ reasons.\n   3. The document should be available on a public web server and\
    \ should\n      have a stable URL.\n"
- title: 'ANNEX A: BINARY ENCODING OF THE PROTOCOL (NORMATIVE)'
  contents:
  - "ANNEX A: BINARY ENCODING OF THE PROTOCOL (NORMATIVE)\n   This Annex specifies\
    \ the syntax of messages using the notation\n   defined in ASN.1 [ITU-T Recommendation\
    \ X.680 (1997): Information\n   Technology - Abstract Syntax Notation One (ASN.1)\
    \ - Specification of\n   basic notation.]. Messages shall be encoded for transmission\
    \ by\n   applying the basic encoding rules specified in [ITU-T Recommendation\n\
    \   X.690(1994) Information Technology - ASN.1 Encoding Rules:\n   Specification\
    \ of Basic Encoding Rules (BER)].\n"
- title: A.1 Coding of wildcards
  contents:
  - "A.1 Coding of wildcards\n   The use of wildcards ALL and CHOOSE is allowed in\
    \ the protocol.  This\n   allows a MGC to partially specify Termination IDs and\
    \ let the MG\n   choose from the values that conform to the partial specification.\n\
    \   Termination IDs may encode a hierarchy of names.  This hierarchy is\n   provisioned.\
    \ For instance, a TerminationID may consist of a trunk\n   group, a trunk within\
    \ the group and a circuit.  Wildcarding must be\n   possible at all levels.  The\
    \ following paragraphs explain how this is\n   achieved.\n   The ASN.1 description\
    \ uses octet strings of up to 8 octets in length\n   for Termination IDs.  This\
    \ means that Termination IDs consist of at\n   most 64 bits.  A fully specified\
    \ Termination ID may be preceded by a\n   sequence of wildcarding fields.  A wildcarding\
    \ field is octet in\n   length.  Bit 7 (the most significant bit) of this octet\
    \ specifies\n   what type of wildcarding is invoked:  if the bit value equals\
    \ 1, then\n   the ALL wildcard is used; if the bit value if 0, then the CHOOSE\n\
    \   wildcard is used.  Bit 6 of the wildcarding field specifies whether\n   the\
    \ wildcarding pertains to one level in the hierarchical naming\n   scheme (bit\
    \ value 0) or to the level of the hierarchy specified in\n   the wildcarding field\
    \ plus all lower levels (bit value 1).  Bits 0\n   through 5 of the wildcarding\
    \ field specify the bit position in the\n   Termination ID at which the starts.\n\
    \   We illustrate this scheme with some examples.  In these examples, the\n  \
    \ most significant bit in a string of bits appears on the left hand\n   side.\n\
    \   Assume that Termination IDs are three octets long and that each octet\n  \
    \ represents a level in a hierarchical naming scheme.  A valid\n   Termination\
    \ ID is\n        00000001 00011110 01010101.\n   Addressing ALL names with prefix\
    \ 00000001 00011110 is done as\n   follows:\n        wildcarding field: 10000111\n\
    \        Termination ID: 00000001 00011110 xxxxxxxx.\n   The values of the bits\
    \ labeled \"x\" is irrelevant and shall be ignored\n   by the receiver.\n   Indicating\
    \ to the receiver that is must choose a name with 00011110\n   as the second octet\
    \ is done as follows:\n        wildcarding fields: 00010111 followed by 00000111\n\
    \        Termination ID: xxxxxxxx 00011110 xxxxxxxx.\n   The first wildcard field\
    \ indicates a CHOOSE wildcard for the level in\n   the naming hierarchy starting\
    \ at bit 23, the highest level in our\n   assumed naming scheme.  The second wildcard\
    \ field indicates a CHOOSE\n   wildcard for the level in the naming hierarchy\
    \ starting at bit 7, the\n   lowest level in our assumed naming scheme.\n   Finally,\
    \ a CHOOSE-wildcarded name with the highest level of the name\n   equal to 00000001\
    \ is specified as follows:\n        wildcard field: 01001111\n        Termination\
    \ ID: 0000001 xxxxxxxx xxxxxxxx .\n   Bit value 1 at bit position 6 of the first\
    \ octet of the wildcard\n   field indicates that the wildcarding pertains to the\
    \ specified level\n   in the naming hierarchy and all lower levels.\n   Context\
    \ IDs may also be wildcarded.  In the case of Context IDs,\n   however, specifying\
    \ partial names is not allowed.  Context ID 0x0\n   SHALL be used to indicate\
    \ the NULL Context, Context ID 0xFFFFFFFE\n   SHALL be used to indicate a CHOOSE\
    \ wildcard, and Context ID\n   0xFFFFFFFF SHALL be used to indicate an ALL wildcard.\n\
    \   TerminationID 0xFFFFFFFFFFFFFFFF SHALL be used to indicate the ROOT\n   Termination.\n"
- title: A.2 ASN.1 syntax specification
  contents:
  - "A.2 ASN.1 syntax specification\n   This section contains the ASN.1 specification\
    \ of the H.248 protocol\n   syntax.\n   NOTE -  In case a transport mechanism\
    \ is used that employs\n   application level framing, the definition of Transaction\
    \ below\n   changes.  Refer to the annex defining the transport mechanism for\
    \ the\n   definition that applies in that case.\n   NOTE - The ASN.1 specification\
    \ below contains a clause defining\n   TerminationIDList as a sequence of TerminationIDs.\
    \  The length of\n   this sequence SHALL be one.  The SEQUENCE OF construct is\
    \ present\n   only to allow future extensions.\n   MEDIA-GATEWAY-CONTROL DEFINITIONS\
    \ AUTOMATIC TAGS::= BEGIN\n   MegacoMessage ::= SEQUENCE\n   {\n        authHeader\
    \      AuthenticationHeader OPTIONAL,\n        mess            Message\n   }\n\
    \   AuthenticationHeader ::= SEQUENCE\n   {\n        secParmIndex    SecurityParmIndex,\n\
    \        seqNum          SequenceNum,\n        ad              AuthData\n   }\n\
    \   SecurityParmIndex ::= OCTET STRING(SIZE(4))\n   SequenceNum       ::= OCTET\
    \ STRING(SIZE(4))\n   AuthData          ::= OCTET STRING (SIZE (16..32))\n   Message\
    \ ::= SEQUENCE\n   {\n        version         INTEGER(0..99),\n   -- The version\
    \ of the protocol defined here is equal to 1.\n        mId             MId,  \
    \  -- Name/address of message originator\n        messageBody             CHOICE\n\
    \        {\n                messageError    ErrorDescriptor,\n               \
    \ transactions    SEQUENCE OF Transaction\n        },\n        ...\n   }\n   MId\
    \ ::= CHOICE\n   {\n        ip4Address                      IP4Address,\n    \
    \    ip6Address                      IP6Address,\n        domainName         \
    \             DomainName,\n        deviceName                      PathName,\n\
    \        mtpAddress                      OCTET STRING(SIZE(2)),\n    -- Addressing\
    \ structure of mtpAddress:\n    --        15                0\n    --        |\
    \  PC        | NI |\n    --           14 bits    2 bits\n         ...\n   }\n\
    \   DomainName ::= SEQUENCE\n   {\n        name            IA5String,\n      \
    \  -- The name starts with an alphanumeric digit followed by a\n        -- sequence\
    \ of alphanumeric digits, hyphens and dots.  No two\n        -- dots shall occur\
    \ consecutively.\n        portNumber      INTEGER(0..65535) OPTIONAL\n   }\n \
    \  IP4Address ::= SEQUENCE\n   {\n        address         OCTET STRING (SIZE(4)),\n\
    \        portNumber      INTEGER(0..65535) OPTIONAL\n   }\n   IP6Address ::= SEQUENCE\n\
    \   {\n        address         OCTET STRING (SIZE(16)),\n        portNumber  \
    \    INTEGER(0..65535) OPTIONAL\n   }\n   PathName ::= IA5String(SIZE (1..64))\n\
    \   -- See section A.3\n   Transaction ::= CHOICE\n   {\n        transactionRequest\
    \      TransactionRequest,\n        transactionPending      TransactionPending,\n\
    \        transactionReply        TransactionReply,\n        transactionResponseAck\
    \  TransactionResponseAck,\n             -- use of response acks is dependent\
    \ on underlying\n   transport\n        ...\n   }\n   TransactionId ::= INTEGER(0..4294967295)\
    \  -- 32 bit unsigned integer\n   TransactionRequest ::= SEQUENCE\n   {\n    \
    \    transactionId           TransactionId,\n        actions                 SEQUENCE\
    \ OF ActionRequest,\n        ...\n   }\n   TransactionPending ::= SEQUENCE\n \
    \  {\n        transactionId           TransactionId,\n        ...\n   }\n   TransactionReply\
    \ ::= SEQUENCE\n   {\n        transactionId           TransactionId,\n       \
    \ transactionResult       CHOICE\n        {\n             transactionError   ErrorDescriptor,\n\
    \             actionReplies      SEQUENCE OF ActionReply\n        },\n       \
    \ ...\n   }\n   TransactionResponseAck ::= SEQUENCE\n   {\n        firstAck  \
    \      TransactionId,\n        lastAck         TransactionId OPTIONAL\n   }\n\
    \   ErrorDescriptor ::= SEQUENCE\n   {\n        errorCode       ErrorCode,\n \
    \       errorText       ErrorText OPTIONAL\n   }\n   ErrorCode ::= INTEGER(0..65535)\n\
    \   -- See section 13 for IANA considerations w.r.t. error codes\n   ErrorText\
    \ ::= IA5String\n   ContextID ::= INTEGER(0..4294967295)\n   -- Context NULL Value:\
    \ 0\n   -- Context CHOOSE Value: 429467294 (0xFFFFFFFE)\n   -- Context ALL Value:\
    \ 4294967295 (0xFFFFFFFF)\n   ActionRequest ::= SEQUENCE\n   {\n        contextId\
    \               ContextID,\n        contextRequest          ContextRequest OPTIONAL,\n\
    \        contextAttrAuditReq     ContextAttrAuditRequest OPTIONAL,\n        commandRequests\
    \         SEQUENCE OF CommandRequest\n   }\n   ActionReply ::= SEQUENCE\n   {\n\
    \        contextId               ContextID,\n        errorDescriptor         ErrorDescriptor\
    \ OPTIONAL,\n        contextReply            ContextRequest OPTIONAL,\n      \
    \  commandReply            SEQUENCE OF CommandReply\n   }\n   ContextRequest ::=\
    \ SEQUENCE\n   {\n        priority                INTEGER(0..15) OPTIONAL,\n \
    \       emergency               BOOLEAN OPTIONAL,\n        topologyReq       \
    \      SEQUENCE OF TopologyRequest OPTIONAL,\n        ...\n   }\n   ContextAttrAuditRequest\
    \ ::= SEQUENCE\n   {\n   topology     NULL OPTIONAL,\n        emergency      \
    \ NULL OPTIONAL,\n        priority        NULL OPTIONAL,\n        ...\n   }\n\
    \   CommandRequest ::= SEQUENCE\n   {\n        command                 Command,\n\
    \        optional                NULL OPTIONAL,\n        wildcardReturn      \
    \    NULL OPTIONAL,\n        ...\n   }\n   Command ::= CHOICE\n   {\n        addReq\
    \                  AmmRequest,\n        moveReq                 AmmRequest,\n\
    \        modReq                  AmmRequest,\n        -- Add, Move, Modify requests\
    \ have the same parameters\n        subtractReq             SubtractRequest,\n\
    \        auditCapRequest         AuditRequest,\n        auditValueRequest    \
    \   AuditRequest,\n        notifyReq               NotifyRequest,\n        serviceChangeReq\
    \        ServiceChangeRequest,\n        ...\n   }\n   CommandReply ::= CHOICE\n\
    \   {\n        addReply                AmmsReply,\n        moveReply         \
    \      AmmsReply,\n        modReply                AmmsReply,\n        subtractReply\
    \           AmmsReply,\n        -- Add, Move, Modify, Subtract replies have the\
    \ same parameters\n        auditCapReply           AuditReply,\n        auditValueReply\
    \         AuditReply,\n        notifyReply             NotifyReply,\n        serviceChangeReply\
    \      ServiceChangeReply,\n        ...\n   }\n   TopologyRequest ::= SEQUENCE\n\
    \   {\n        terminationFrom         TerminationID,\n        terminationTo \
    \          TerminationID,\n        topologyDirection       ENUMERATED\n      \
    \  {\n                bothway(0),\n                isolate(1),\n             \
    \   oneway(2)\n        }\n   }\n   AmmRequest ::= SEQUENCE\n   {\n        terminationID\
    \           TerminationIDList,\n        mediaDescriptor         MediaDescriptor\
    \ OPTIONAL,\n        modemDescriptor         ModemDescriptor OPTIONAL,\n     \
    \   muxDescriptor           MuxDescriptor OPTIONAL,\n        eventsDescriptor\
    \        EventsDescriptor OPTIONAL,\n        eventBufferDescriptor   EventBufferDescriptor\
    \ OPTIONAL,\n        signalsDescriptor       SignalsDescriptor OPTIONAL,\n   \
    \     digitMapDescriptor      DigitMapDescriptor OPTIONAL,\n        auditDescriptor\
    \         AuditDescriptor OPTIONAL,\n        ...\n   }\n   AmmsReply ::= SEQUENCE\n\
    \   {\n        terminationID           TerminationIDList,\n        terminationAudit\
    \        TerminationAudit OPTIONAL\n   }\n   SubtractRequest ::= SEQUENCE\n  \
    \ {\n        terminationID           TerminationIDList,\n        auditDescriptor\
    \         AuditDescriptor OPTIONAL,\n        ...\n   }\n   AuditRequest ::= SEQUENCE\n\
    \   {\n        terminationID           TerminationID,\n        auditDescriptor\
    \         AuditDescriptor,\n        ...\n   }\n   AuditReply ::= SEQUENCE\n  \
    \ {\n        terminationID           TerminationID,\n        auditResult     \
    \        AuditResult\n   }\n   AuditResult ::= CHOICE\n   {\n        contextAuditResult\
    \      TerminationIDList,\n        terminationAuditResult  TerminationAudit\n\
    \   }\n   AuditDescriptor ::= SEQUENCE\n   {\n        auditToken      BIT STRING\n\
    \        {\n                muxToken(0), modemToken(1), mediaToken(2),\n     \
    \           eventsToken(3), signalsToken(4),\n                digitMapToken(5),\
    \ statsToken(6),\n                observedEventsToken(7),\n                packagesToken(8),\
    \ eventBufferToken(9)\n        } OPTIONAL,\n        ...\n   }\n   TerminationAudit\
    \ ::= SEQUENCE OF AuditReturnParameter\n   AuditReturnParameter ::= CHOICE\n \
    \  {\n        errorDescriptor                 ErrorDescriptor,\n        mediaDescriptor\
    \                 MediaDescriptor,\n        modemDescriptor                 ModemDescriptor,\n\
    \        muxDescriptor                   MuxDescriptor,\n        eventsDescriptor\
    \                EventsDescriptor,\n        eventBufferDescriptor           EventBufferDescriptor,\n\
    \        signalsDescriptor               SignalsDescriptor,\n        digitMapDescriptor\
    \              DigitMapDescriptor,\n        observedEventsDescriptor        ObservedEventsDescriptor,\n\
    \        statisticsDescriptor            StatisticsDescriptor,\n        packagesDescriptor\
    \              PackagesDescriptor,\n        ...\n   }\n   NotifyRequest ::= SEQUENCE\n\
    \   {\n        terminationID                   TerminationIDList,\n        observedEventsDescriptor\
    \        ObservedEventsDescriptor,\n        errorDescriptor                 ErrorDescriptor\
    \ OPTIONAL,\n        ...\n   }\n   NotifyReply ::= SEQUENCE\n   {\n        terminationID\
    \                   TerminationIDList OPTIONAL,\n        errorDescriptor     \
    \            ErrorDescriptor OPTIONAL,\n        ...\n   }\n   ObservedEventsDescriptor\
    \ ::= SEQUENCE\n   {\n        requestId                       RequestID,\n   \
    \     observedEventLst                SEQUENCE OF ObservedEvent\n   }\n   ObservedEvent\
    \ ::= SEQUENCE\n   {\n        eventName                       EventName,\n   \
    \     streamID                        StreamID OPTIONAL,\n        eventParList\
    \                    SEQUENCE OF EventParameter,\n        timeNotation       \
    \             TimeNotation OPTIONAL\n   }\n   EventName ::= PkgdName\n   EventParameter\
    \ ::= SEQUENCE\n   {\n        eventParameterName              Name,\n        value\
    \                           Value\n   }\n   ServiceChangeRequest ::= SEQUENCE\n\
    \   {\n        terminationID                   TerminationIDList,\n        serviceChangeParms\
    \              ServiceChangeParm,\n        ...\n   }\n   ServiceChangeReply ::=\
    \ SEQUENCE\n   {\n        terminationID                   TerminationIDList,\n\
    \        serviceChangeResult             ServiceChangeResult,\n        ...\n \
    \  }\n   -- For ServiceChangeResult, no parameters are mandatory.  Hence the\n\
    \   -- distinction between ServiceChangeParm and ServiceChangeResParm.\n   ServiceChangeResult\
    \ ::= CHOICE\n   {\n        errorDescriptor                 ErrorDescriptor,\n\
    \        serviceChangeResParms           ServiceChangeResParm\n   }\n   WildcardField\
    \ ::= OCTET STRING(SIZE(1))\n   TerminationID ::= SEQUENCE\n   {\n        wildcard\
    \        SEQUENCE OF WildcardField,\n        id              OCTET STRING(SIZE(1..8))\n\
    \   }\n   -- See Section A.1 for explanation of wildcarding mechanism.\n   --\
    \ Termination ID 0xFFFFFFFFFFFFFFFF indicates the ROOT Termination.\n   TerminationIDList\
    \ ::= SEQUENCE OF TerminationID\n   MediaDescriptor ::= SEQUENCE\n   {\n     \
    \   termStateDescr  TerminationStateDescriptor OPTIONAL,\n        streams    \
    \     CHOICE\n                {\n                        oneStream       StreamParms,\n\
    \                        multiStream     SEQUENCE OF StreamDescriptor\n      \
    \          },\n        ...\n   }\n   StreamDescriptor ::= SEQUENCE\n   {\n   \
    \     streamID                        StreamID,\n        streamParms         \
    \            StreamParms\n   }\n   StreamParms ::= SEQUENCE\n   {\n        localControlDescriptor\
    \     LocalControlDescriptor OPTIONAL,\n        localDescriptor            LocalRemoteDescriptor\
    \ OPTIONAL,\n        remoteDescriptor           LocalRemoteDescriptor OPTIONAL,\n\
    \        ...\n   }\n   LocalControlDescriptor ::= SEQUENCE\n   {\n        streamMode\
    \      StreamMode OPTIONAL,\n        reserveValue    BOOLEAN,\n        reserveGroup\
    \    BOOLEAN,\n        propertyParms   SEQUENCE OF PropertyParm,\n        ...\n\
    \   }\n   StreamMode ::= ENUMERATED\n   {\n        sendOnly(0),\n        recvOnly(1),\n\
    \        sendRecv(2),\n        inactive(3),\n        loopBack(4),\n          \
    \      ...\n   }\n   -- In PropertyParm, value is a SEQUENCE OF octet string.\
    \  When sent\n   -- by an MGC the interpretation is as follows:\n   -- empty sequence\
    \ means CHOOSE\n   -- one element sequence specifies value\n   -- longer sequence\
    \ means \"choose one of the values\"\n   -- The relation field may only be selected\
    \ if the value sequence\n   -- has length 1.  It indicates that the MG has to\
    \ choose a value\n   -- for the property. E.g., x > 3 (using the greaterThan\n\
    \   -- value for relation) instructs the MG to choose any value larger\n   --\
    \ than 3 for property x.\n   -- The range field may only be selected if the value\
    \ sequence\n   -- has length 2.  It indicates that the MG has to choose a value\n\
    \   -- in the range between the first octet in the value sequence and\n   -- the\
    \ trailing octet in the value sequence, including the\n   -- boundary values.\n\
    \   -- When sent by the MG, only responses to an AuditCapability request\n   --\
    \ may contain multiple values, a range, or a relation field.\n   PropertyParm\
    \ ::= SEQUENCE\n   {\n        name            PkgdName,\n        value       \
    \    SEQUENCE OF OCTET STRING,\n        extraInfo       CHOICE\n             \
    \   {\n                        relation        Relation,\n                   \
    \     range           BOOLEAN\n                } OPTIONAL\n   }\n   Name ::= OCTET\
    \ STRING(SIZE(2))\n   PkgdName ::= OCTET STRING(SIZE(4))\n   -- represents Package\
    \ Name (2 octets) plus Property Name (2 octets)\n   -- To wildcard a package use\
    \ 0xFFFF for first two octets, choose\n   -- is not allowed. To reference native\
    \ property tag specified in\n   -- Annex C, use 0x0000 as first two octets.\n\
    \   -- Wildcarding of Package Name is permitted only if Property Name is\n   --\
    \ also wildcarded.\n   Relation ::= ENUMERATED\n   {\n        greaterThan(0),\n\
    \        smallerThan(1),\n        unequalTo(2),\n        ...\n   }\n   LocalRemoteDescriptor\
    \ ::= SEQUENCE\n   {\n        propGrps        SEQUENCE OF PropertyGroup,\n   \
    \     ...\n   }\n   PropertyGroup ::= SEQUENCE OF PropertyParm\n   TerminationStateDescriptor\
    \ ::= SEQUENCE\n   {\n        propertyParms           SEQUENCE OF PropertyParm,\n\
    \        eventBufferControl      EventBufferControl OPTIONAL,\n        serviceState\
    \            ServiceState OPTIONAL,\n        ...\n   }\n   EventBufferControl\
    \ ::= ENUMERATED\n   {\n        Off(0),\n        LockStep(1),\n        ...\n \
    \  }\n   ServiceState ::= ENUMERATED\n   {\n        test(0),\n        outOfSvc(1),\n\
    \        inSvc(2),\n         ...\n   }\n   MuxDescriptor   ::= SEQUENCE\n   {\n\
    \        muxType                 MuxType,\n        termList                SEQUENCE\
    \ OF TerminationID,\n        nonStandardData         NonStandardData OPTIONAL,\n\
    \        ...\n   }\n   MuxType ::= ENUMERATED\n   {\n        h221(0),\n      \
    \  h223(1),\n        h226(2),\n        v76(3),\n        ...\n   }\n   StreamID\
    \ ::= INTEGER(0..65535)  -- 16 bit unsigned integer\n   EventsDescriptor ::= SEQUENCE\n\
    \   {\n        requestID               RequestID,\n        eventList         \
    \      SEQUENCE OF RequestedEvent\n   }\n   RequestedEvent ::= SEQUENCE\n   {\n\
    \        pkgdName                PkgdName,\n        streamID                StreamID\
    \ OPTIONAL,\n        eventAction             RequestedActions OPTIONAL,\n    \
    \    evParList               SEQUENCE OF EventParameter\n   }\n   RequestedActions\
    \ ::= SEQUENCE\n   {\n        keepActive              BOOLEAN,\n        eventDM\
    \                 EventDM OPTIONAL,\n        secondEvent             SecondEventsDescriptor\
    \ OPTIONAL,\n        signalsDescriptor       SignalsDescriptor OPTIONAL,\n   \
    \     ...\n   }\n   EventDM ::= CHOICE\n   {    digitMapName    DigitMapName,\n\
    \        digitMapValue   DigitMapValue\n   }\n   SecondEventsDescriptor ::= SEQUENCE\n\
    \   {\n        requestID               RequestID,\n        eventList         \
    \      SEQUENCE OF SecondRequestedEvent\n   }\n   SecondRequestedEvent ::= SEQUENCE\n\
    \   {\n        pkgdName                PkgdName,\n        streamID           \
    \     StreamID OPTIONAL,\n        eventAction             SecondRequestedActions\
    \ OPTIONAL,\n        evParList               SEQUENCE OF EventParameter\n   }\n\
    \   SecondRequestedActions ::= SEQUENCE\n   {\n        keepActive            \
    \  BOOLEAN,\n        eventDM                 EventDM OPTIONAL,\n        signalsDescriptor\
    \       SignalsDescriptor OPTIONAL,\n        ...\n   }\n   EventBufferDescriptor\
    \ ::= SEQUENCE OF ObservedEvent\n   SignalsDescriptor ::= SEQUENCE OF SignalRequest\n\
    \   SignalRequest ::=CHOICE\n   {\n        signal          Signal,\n        seqSigList\
    \      SeqSigList\n   }\n   SeqSigList ::= SEQUENCE\n   {\n        id        \
    \      INTEGER(0..65535),\n        signalList      SEQUENCE OF Signal\n   }\n\
    \   Signal ::= SEQUENCE\n   {\n        signalName              SignalName,\n \
    \       streamID                StreamID OPTIONAL,\n        sigType          \
    \       SignalType OPTIONAL,\n        duration                INTEGER (0..65535)\
    \ OPTIONAL,\n        notifyCompletion        BOOLEAN OPTIONAL,\n        keepActive\
    \              BOOLEAN OPTIONAL,\n        sigParList              SEQUENCE OF\
    \ SigParameter\n   }\n   SignalType ::= ENUMERATED\n   {\n        brief(0),\n\
    \        onOff(1),\n        timeOut(2),\n        ...\n   }\n   SignalName ::=\
    \ PkgdName\n   SigParameter ::= SEQUENCE\n   {\n        sigParameterName     \
    \           Name,\n        value                           Value\n   }\n   RequestID\
    \ ::= INTEGER(0..4294967295)   -- 32 bit unsigned integer\n   ModemDescriptor\
    \ ::= SEQUENCE\n   {\n        mtl                     SEQUENCE OF ModemType,\n\
    \        mpl                     SEQUENCE OF PropertyParm,\n        nonStandardData\
    \         NonStandardData OPTIONAL\n   }\n   ModemType ::= ENUMERATED\n   {\n\
    \        v18(0),\n        v22(1),\n        v22bis(2),\n        v32(3),\n     \
    \   v32bis(4),\n        v34(5),\n        v90(6),\n        v91(7),\n        synchISDN(8),\n\
    \        ...\n   }\n   DigitMapDescriptor ::= SEQUENCE\n   {\n        digitMapName\
    \            DigitMapName,\n        digitMapValue           DigitMapValue\n  \
    \ }\n   DigitMapName ::= Name\n   DigitMapValue ::= SEQUENCE\n   {\n        startTimer\
    \              INTEGER(0..99) OPTIONAL,\n        shortTimer              INTEGER(0..99)\
    \ OPTIONAL,\n        longTimer               INTEGER(0..99) OPTIONAL,\n      \
    \  digitMapBody            IA5String\n        -- See Section A.3 for explanation\
    \ of digit map syntax\n   }\n   ServiceChangeParm ::= SEQUENCE\n   {\n       \
    \ serviceChangeMethod     ServiceChangeMethod,\n        serviceChangeAddress \
    \   ServiceChangeAddress OPTIONAL,\n        serviceChangeVersion    INTEGER(0..99)\
    \ OPTIONAL,\n        serviceChangeProfile    ServiceChangeProfile OPTIONAL,\n\
    \        serviceChangeReason     Value,\n        serviceChangeDelay      INTEGER(0..4294967295)\
    \ OPTIONAL,\n                                    -- 32 bit unsigned integer\n\
    \        serviceChangeMgcId      MId OPTIONAL,\n        timeStamp            \
    \   TimeNotation OPTIONAL,\n        nonStandardData         NonStandardData OPTIONAL,\n\
    \   }\n   ServiceChangeAddress ::= CHOICE\n   {\n        portNumber      INTEGER(0..65535),\
    \ -- TCP/UDP port number\n        ip4Address      IP4Address,\n        ip6Address\
    \      IP6Address,\n        domainName      DomainName,\n        deviceName  \
    \    PathName,\n        mtpAddress      OCTET STRING(SIZE(2)),\n        ...\n\
    \   }\n   ServiceChangeResParm ::= SEQUENCE\n   {\n        serviceChangeMgcId\
    \      MId OPTIONAL,\n        serviceChangeAddress    ServiceChangeAddress OPTIONAL,\n\
    \        serviceChangeVersion    INTEGER(0..99) OPTIONAL,\n        serviceChangeProfile\
    \    ServiceChangeProfile OPTIONAL\n   }\n   ServiceChangeMethod ::= ENUMERATED\n\
    \   {\n        failover(0),\n        forced(1),\n        graceful(2),\n      \
    \  restart(3),\n        disconnected(4),\n        handOff(5),\n        ...\n \
    \  }\n   ServiceChangeProfile ::= SEQUENCE\n   {\n        profileName     Name,\n\
    \        version         INTEGER(0..99)\n   }\n   PackagesDescriptor ::= SEQUENCE\
    \ OF PackagesItem\n   PackagesItem ::= SEQUENCE\n   {\n        packageName   \
    \          Name,\n        packageVersion  INTEGER(0..99)\n   }\n   StatisticsDescriptor\
    \ ::= SEQUENCE OF StatisticsParameter\n   StatisticsParameter ::= SEQUENCE\n \
    \  {\n        statName                PkgdName,\n        statValue           \
    \    Value\n   }\n   NonStandardData ::= SEQUENCE\n   {\n        nonStandardIdentifier\
    \   NonStandardIdentifier,\n        data                    OCTET STRING\n   }\n\
    \   NonStandardIdentifier                ::= CHOICE\n   {\n        object    \
    \              OBJECT IDENTIFIER,\n        h221NonStandard         H221NonStandard,\n\
    \        experimental            IA5STRING(SIZE(8)),\n    -- first two characters\
    \ should be \"X-\" or \"X+\"\n        ...\n   }\n   H221NonStandard ::= SEQUENCE\n\
    \   {    t35CountryCode     INTEGER(0..255), -- country, as per T.35\n       \
    \ t35Extension       INTEGER(0..255), -- assigned nationally\n        manufacturerCode\
    \   INTEGER(0..65535), -- assigned nationally\n        ...\n   }\n   TimeNotation\
    \ ::= SEQUENCE\n   {\n        date            IA5String(SIZE(8)),  -- yyyymmdd\
    \ format\n        time            IA5String(SIZE(8))  -- hhmmssss format\n   }\n\
    \   Value ::= OCTET STRING\n   END\n"
- title: A.3 Digit maps and path names
  contents:
  - "A.3 Digit maps and path names\n   From a syntactic viewpoint, digit maps are\
    \ strings with syntactic\n   restrictions imposed upon them.  The syntax of valid\
    \ digit maps is\n   specified in ABNF [RFC 2234].  The syntax for digit maps presented\
    \ in\n   this section is for illustrative purposes only. The definition of\n \
    \  digitMap in Annex B takes precedence in the case of differences\n   between\
    \ the two.\n   digitMap = (digitString / LWSP \"(\" LWSP digitStringList LWSP\
    \ \")\"\n   LWSP)\n   digitStringList = digitString *( LWSP \"/\" LWSP digitString\
    \ )\n   digitString = 1*(digitStringElement)\n   digitStringElement = digitPosition\
    \ [DOT]\n   digitPosition = digitMapLetter / digitMapRange\n   digitMapRange =\
    \ (\"x\" / LWSP \"[\" LWSP digitLetter LWSP \"]\" LWSP)\n   digitLetter = *((DIGIT\
    \ \"-\" DIGIT) /digitMapLetter)\n   digitMapLetter = DIGIT               ;digits\
    \ 0-9\n        / %x41-4B / %x61-6B             ;a-k and A-K\n        / \"L\" \
    \  / \"S\"                   ;Inter-event timers\n                           \
    \             ;(long, short)\n        / \"Z\"                           ;Long\
    \ duration event\n   LWSP = *(WSP / COMMENT / EOL)\n   WSP = SP / HTAB\n   COMMENT\
    \ = \";\" *(SafeChar / RestChar / WSP) EOL\n   EOL = (CR [LF]) / LF\n   SP = %x20\n\
    \   HTAB = %x09\n   CR = %x0D\n   LF = %x0A\n   SafeChar = DIGIT / ALPHA / \"\
    +\" / \"-\" / \"&\" / \"!\" / \"_\" / \"/\" /\n    \"'\" / \"?\" / \"@\" / \"\
    ^\" / \"`\" / \"~\" / \"*\" / \"$\" / \"\\\" /\n   \"(\" / \")\" / \"%\" / \"\
    .\"\n   RestChar = \";\" / \"[\" / \"]\" / \"{\" / \"}\" / \":\" / \",\" / \"\
    #\" /\n                \"<\" / \">\" / \"=\" / %x22\n   DIGIT = %x30-39      \
    \                ; digits 0 through 9\n   ALPHA = %x41-5A / %x61-7A    ; A-Z,\
    \ a-z\n   A path name is also a string with syntactic restrictions imposed\n \
    \  upon it.  The ABNF production defining it is copied from Annex B.\n   PathName\
    \ = NAME *([\"/\"] [\"*\"] [\"@\"] (ALPHA / DIGIT)) [\"*\"]\n   NAME = ALPHA *63(ALPHA\
    \ / DIGIT / \"_\" )\n"
- title: ANNEX B TEXT ENCODING OF THE PROTOCOL (NORMATIVE)
  contents:
  - 'ANNEX B TEXT ENCODING OF THE PROTOCOL (NORMATIVE)

    '
- title: B.1 Coding of wildcards
  contents:
  - "B.1 Coding of wildcards\n   In a text encoding of the protocol, while TerminationIDs\
    \ are\n   arbitrary, by judicious choice of names, the wildcard character, \"\
    *\"\n   may be made more useful.  When the wildcard character is encountered,\n\
    \   it will \"match\" all TerminationIDs having the same previous and\n   following\
    \ characters (if appropriate).  For example, if there were\n   TerminationIDs\
    \ of R13/3/1, R13/3/2 and R13/3/3, the TerminationID\n   R13/3/* would match all\
    \ of them.  There are some circumstances where\n   ALL Terminations must be referred\
    \ to.  The TerminationID \"*\"\n   suffices, and is referred to as ALL. The CHOOSE\
    \ TerminationID \"$\" may\n   be used to signal to the MG that it has to create\
    \ an ephemeral\n   Termination or select an idle physical Termination.\n"
- title: B.2 ABNF specification
  contents:
  - "B.2 ABNF specification\n   The protocol syntax is presented in ABNF according\
    \ to RFC2234.\n   megacoMessage        = LWSP [authenticationHeader SEP ] message\n\
    \   authenticationHeader = AuthToken EQUAL SecurityParmIndex COLON\n         \
    \                 SequenceNum COLON AuthData\n   SecurityParmIndex    = \"0x\"\
    \ 8(HEXDIG)\n   SequenceNum          = \"0x\" 8(HEXDIG)\n   AuthData         \
    \    = \"0x\" 32*64(HEXDIG)\n   message    = MegacopToken SLASH Version SEP mId\
    \ SEP messageBody\n   ; The version of the protocol defined here is equal to 1.\n\
    \   messageBody          = ( errorDescriptor / transactionList )\n   transactionList\
    \      = 1*( transactionRequest / transactionReply /\n                       \
    \   transactionPending / transactionResponseAck )\n   ;Use of response acks is\
    \ dependent on underlying transport\n   transactionPending   = PendingToken EQUAL\
    \ TransactionID LBRKT RBRKT\n   transactionResponseAck = ResponseAckToken LBRKT\
    \ transactionAck\n                                        *(COMMA transactionAck)\
    \ RBRKT\n   transactionAck = transactionID / (transactionID \"-\" transactionID)\n\
    \   transactionRequest   = TransToken EQUAL TransactionID LBRKT\n            \
    \              actionRequest *(COMMA actionRequest) RBRKT\n   actionRequest  \
    \      = CtxToken EQUAL ContextID LBRKT ((\n                          contextRequest\
    \ [COMMA  commandRequestList])\n                          / commandRequestList)\
    \ RBRKT\n   contextRequest          = ((contextProperties [COMMA contextAudit])\n\
    \                           / contextAudit)\n   contextProperties    = contextProperty\
    \ *(COMMA contextProperty)\n   ; at-most-once\n   contextProperty  = (topologyDescriptor\
    \ / priority / EmergencyToken)\n   contextAudit    = ContextAuditToken LBRKT\n\
    \                          contextAuditProperties *(COMMA\n                  \
    \        contextAuditProperties) RBRKT\n   ; at-most-once\n   contextAuditProperties\
    \ = ( TopologyToken / EmergencyToken /\n                              PriorityToken\
    \ )\n   commandRequestList= [\"O-\"] commandRequest *(COMMA [\"O-\"]\n   commandRequest)\n\
    \   commandRequest     = ( ammRequest / subtractRequest / auditRequest\n     \
    \                      / notifyRequest / serviceChangeRequest)\n   transactionReply\
    \     = ReplyToken EQUAL TransactionID LBRKT\n                          ( errorDescriptor\
    \ / actionReplyList ) RBRKT\n   actionReplyList      = actionReply *(COMMA actionReply\
    \ )\n   actionReply          = CtxToken EQUAL ContextID LBRKT\n              \
    \            ( errorDescriptor / commandReply ) RBRKT\n   commandReply       =\
    \ (( contextProperties [COMMA commandReplyList] )\n                          \
    \ / commandReplyList )\n   commandReplyList     = commandReplys *(COMMA commandReplys\
    \ )\n   commandReplys        = (serviceChangeReply / auditReply / ammsReply\n\
    \                           / notifyReply )\n   ;Add Move and Modify have the\
    \ same request parameters\n   ammRequest           = (AddToken / MoveToken / ModifyToken\
    \ ) EQUAL\n                          TerminationID [LBRKT ammParameter *(COMMA\n\
    \                          ammParameter) RBRKT]\n   ;at-most-once\n   ammParameter\
    \         = (mediaDescriptor / modemDescriptor /\n                           muxDescriptor\
    \ / eventsDescriptor /\n                           signalsDescriptor / digitMapDescriptor\
    \ /\n                           eventBufferDescriptor / auditDescriptor)\n   ammsReply\
    \            = (AddToken / MoveToken / ModifyToken /\n                       \
    \    SubtractToken ) EQUAL TerminationID [ LBRKT\n                           terminationAudit\
    \ RBRKT ]\n   subtractRequest      =  [\"W-\"] SubtractToken EQUAL TerminationID\n\
    \                           [ LBRKT auditDescriptor RBRKT]\n   auditRequest  \
    \       = [\"W-\"] (AuditValueToken / AuditCapToken )\n                      \
    \  EQUAL TerminationID LBRKT auditDescriptor RBRKT\n   auditReply           =\
    \ (AuditValueToken / AuditCapToken )\n                          ( contextTerminationAudit\
    \  / auditOther)\n   auditOther           = EQUAL TerminationID LBRKT\n      \
    \                    terminationAudit RBRKT\n   terminationAudit     = auditReturnParameter\
    \ *(COMMA\n                        auditReturnParameter)\n   contextTerminationAudit\
    \ = EQUAL CtxToken ( terminationIDList /\n                          LBRKT errorDescriptor\
    \ RBRKT )\n   ;at-most-once except errorDescriptor\n   auditReturnParameter =\
    \ (mediaDescriptor / modemDescriptor /\n                           muxDescriptor\
    \ / eventsDescriptor /\n                           signalsDescriptor / digitMapDescriptor\
    \ /\n                     observedEventsDescriptor / eventBufferDescriptor /\n\
    \                           statisticsDescriptor / packagesDescriptor /\n    \
    \                        errorDescriptor )\n   auditDescriptor      = AuditToken\
    \ LBRKT [ auditItem\n                          *(COMMA auditItem) ] RBRKT\n  \
    \ notifyRequest        = NotifyToken EQUAL TerminationID\n                   \
    \       LBRKT ( observedEventsDescriptor\n                                [ COMMA\
    \ errorDescriptor ] ) RBRKT\n   notifyReply          = NotifyToken EQUAL TerminationID\n\
    \                          [ LBRKT errorDescriptor RBRKT ]\n   serviceChangeRequest\
    \ = ServiceChangeToken EQUAL TerminationID\n                          LBRKT serviceChangeDescriptor\
    \ RBRKT\n   serviceChangeReply   = ServiceChangeToken EQUAL TerminationID\n  \
    \                        [LBRKT (errorDescriptor /\n                         \
    \ serviceChangeReplyDescriptor) RBRKT]\n   errorDescriptor   = ErrorToken EQUAL\
    \ ErrorCode\n                       LBRKT [quotedString] RBRKT\n   ErrorCode \
    \           = 1*4(DIGIT) ; could be extended\n   TransactionID        = UINT32\n\
    \   mId                  = (( domainAddress / domainName )\n                 \
    \         [\":\" portNumber]) / mtpAddress / deviceName\n   ; ABNF allows two\
    \ or more consecutive \".\" although it is meaningless\n   ; in a domain name.\n\
    \   domainName           = \"<\" (ALPHA / DIGIT) *63(ALPHA / DIGIT / \"-\" /\n\
    \                          \".\") \">\"\n   deviceName           = pathNAME\n\
    \   ContextID            = (UINT32 / \"*\" / \"-\" / \"$\")\n   domainAddress\
    \        = \"[\" (IPv4address / IPv6address) \"]\"\n   ;RFC2373 contains the definition\
    \ of IP6Addresses.\n   IPv6address          = hexpart [ \":\" IPv4address ]\n\
    \   IPv4address          = V4hex DOT V4hex DOT V4hex DOT V4hex\n   V4hex     \
    \           = 1*3(DIGIT) ; \"0\"..\"225\"\n   ; this production, while occurring\
    \ in RFC2373, is not referenced\n   ; IPv6prefix           = hexpart SLASH 1*2DIGIT\n\
    \   hexpart          = hexseq \"::\" [ hexseq ] / \"::\" [ hexseq ] / hexseq\n\
    \   hexseq               = hex4 *( \":\" hex4)\n   hex4                 = 1*4HEXDIG\n\
    \   portNumber           = UINT16\n   ; An mtp address is two octets long\n  \
    \ mtpAddress           = MTPToken LBRKT octetString RBRKT\n   terminationIDList\
    \    = LBRKT TerminationID *(COMMA TerminationID)\n   RBRKT\n   ; Total length\
    \ of pathNAME must not exceed 64 chars.\n   pathNAME        = [\"*\"] NAME *(\"\
    /\" / \"*\"/ ALPHA / DIGIT /\"_\" / \"$\" )\n                          [\"@\"\
    \ pathDomainName ]\n   ; ABNF allows two or more consecutive \".\" although it\
    \ is meaningless\n   ; in a path domain name.\n   pathDomainName       = (ALPHA\
    \ / DIGIT / \"*\" )\n                          *63(ALPHA / DIGIT / \"-\" / \"\
    *\" / \".\")\n   TerminationID        = \"ROOT\" / pathNAME / \"$\" / \"*\"\n\
    \   mediaDescriptor = MediaToken LBRKT mediaParm *(COMMA mediaParm)\n        \
    \                RBRKT\n   ; at-most-once per item\n   ; and either streamParm\
    \ or streamDescriptor but not both\n   mediaParm            = (streamParm / streamDescriptor\
    \ /\n                           terminationStateDescriptor)\n   ; at-most-once\n\
    \   streamParm           = ( localDescriptor / remoteDescriptor /\n          \
    \                 localControlDescriptor )\n   streamDescriptor     = StreamToken\
    \ EQUAL StreamID LBRKT streamParm\n                          *(COMMA streamParm)\
    \ RBRKT\n   localControlDescriptor = LocalControlToken LBRKT localParm\n     \
    \                       *(COMMA localParm) RBRKT\n   ; at-most-once per item\n\
    \   localParm            = ( streamMode / propertyParm /\n   reservedValueMode\n\
    \        / reservedGroupMode )\n   reservedValueMode       = ReservedValueToken\
    \ EQUAL ( \"ON\" / \"OFF\" )\n   reservedGroupMode       = ReservedGroupToken\
    \ EQUAL ( \"ON\" / \"OFF\" )\n   streamMode           = ModeToken EQUAL streamModes\n\
    \   streamModes          = (SendonlyToken / RecvonlyToken /\n   SendrecvToken\
    \ /\n                          InactiveToken / LoopbackToken )\n   propertyParm\
    \         = pkgdName parmValue\n   parmValue            = (EQUAL alternativeValue/\
    \ INEQUAL VALUE)\n   alternativeValue     = ( VALUE / LSBRKT VALUE *(COMMA VALUE)\
    \ RSBRKT\n   /\n                          LSBRKT VALUE DOT DOT VALUE RSBRKT )\n\
    \   INEQUAL              = LWSP (\">\" / \"<\" / \"#\" ) LWSP\n   LSBRKT     \
    \          = LWSP \"[\" LWSP\n   RSBRKT               = LWSP \"]\" LWSP\n   localDescriptor\
    \      = LocalToken LBRKT octetString RBRKT\n   remoteDescriptor     = RemoteToken\
    \ LBRKT octetString RBRKT\n   eventBufferDescriptor= EventBufferToken LBRKT observedEvent\n\
    \                          *( COMMA observedEvent ) RBRKT\n   eventBufferControl\
    \     = BufferToken EQUAL ( \"OFF\" / LockStepToken )\n   terminationStateDescriptor\
    \ = TerminationStateToken LBRKT\n               terminationStateParm *( COMMA\
    \ terminationStateParm )\n   RBRKT\n   ; at-most-once per item\n   terminationStateParm\
    \ =(propertyParm / serviceStates /\n   eventBufferControl )\n   serviceStates\
    \        = ServiceStatesToken EQUAL ( TestToken /\n                          OutOfSvcToken\
    \ / InSvcToken )\n   muxDescriptor        = MuxToken EQUAL MuxType  terminationIDList\n\
    \   MuxType              = ( H221Token / H223Token / H226Token /\n           \
    \            V76Token / extensionParameter )\n   StreamID             = UINT16\n\
    \   pkgdName             = (PackageName SLASH ItemID) ;specific item\n       \
    \             / (PackageName SLASH \"*\") ;all events in package\n           \
    \         / (\"*\" SLASH \"*\") ; all events supported by the MG\n   PackageName\
    \          = NAME\n   ItemID               = NAME\n   eventsDescriptor     = EventsToken\
    \ EQUAL RequestID LBRKT\n                         requestedEvent *( COMMA requestedEvent\
    \ ) RBRKT\n   requestedEvent       = pkgdName [ LBRKT eventParameter\n       \
    \                   *( COMMA eventParameter ) RBRKT ]\n   ; at-most-once each\
    \ of KeepActiveToken , eventDM and eventStream\n   ;at most one of either embedWithSig\
    \ or embedNoSig but not both\n   ;KeepActiveToken and embedWithSig must not both\
    \ be present\n   eventParameter       = ( embedWithSig / embedNoSig / KeepActiveToken\n\
    \                           /eventDM / eventStream / eventOther )\n   embedWithSig\
    \         = EmbedToken LBRKT signalsDescriptor\n                             [COMMA\
    \ embedFirst ] RBRKT\n   embedNoSig           = EmbedToken LBRKT embedFirst RBRKT\n\
    \   ; at-most-once of each\n   embedFirst      = EventsToken EQUAL RequestID LBRKT\n\
    \               secondRequestedEvent *(COMMA secondRequestedEvent) RBRKT\n   secondRequestedEvent\
    \ = pkgdName [ LBRKT secondEventParameter\n                          *( COMMA\
    \ secondEventParameter ) RBRKT ]\n   ; at-most-once each of embedSig , KeepActiveToken,\
    \ eventDM or\n   ; eventStream\n   ; KeepActiveToken and embedSig must not both\
    \ be present\n   secondEventParameter = ( EmbedSig / KeepActiveToken / eventDM\
    \ /\n                            eventStream / eventOther )\n   embedSig  = EmbedToken\
    \ LBRKT signalsDescriptor RBRKT\n   eventStream          = StreamToken EQUAL StreamID\n\
    \   eventOther           = eventParameterName parmValue\n   eventParameterName\
    \   = NAME\n   eventDM              = DigitMapToken ((EQUAL digitMapName ) /\n\
    \                          (LBRKT digitMapValue RBRKT ))\n   signalsDescriptor\
    \    = SignalsToken LBRKT [ signalParm\n                          *(COMMA signalParm)]\
    \ RBRKT\n   signalParm           = signalList / signalRequest\n   signalRequest\
    \        = signalName [ LBRKT sigParameter\n                          *(COMMA\
    \ sigParameter) RBRKT ]\n   signalList           = SignalListToken EQUAL signalListId\
    \ LBRKT\n                          signalListParm *(COMMA signalListParm) RBRKT\n\
    \   signalListId         = UINT16\n   ;exactly once signalType, at most once duration\
    \ and every signal\n   ;parameter\n   signalListParm       = signalRequest\n \
    \  signalName           = pkgdName\n   ;at-most-once sigStream, at-most-once sigSignalType,\n\
    \   ;at-most-once sigDuration, every signalParameterName at most once\n   sigParameter\
    \    = sigStream / sigSignalType / sigDuration / sigOther\n                  \
    \ / notifyCompletion / KeepActiveToken\n   sigStream            = StreamToken\
    \ EQUAL StreamID\n   sigOther             = sigParameterName parmValue\n   sigParameterName\
    \     = NAME\n   sigSignalType        = SignalTypeToken EQUAL signalType\n   signalType\
    \           = (OnOffToken / TimeOutToken / BriefToken)\n   sigDuration       \
    \   = DurationToken EQUAL UINT16\n   notifyCompletion     = NotifyCompletionToken\
    \ EQUAL (\"ON\" / \"OFF\")\n   observedEventsDescriptor = ObservedEventsToken\
    \ EQUAL RequestID\n                      LBRKT observedEvent *(COMMA observedEvent)\
    \ RBRKT\n   ;time per event, because it might be buffered\n   observedEvent  \
    \      = [ TimeStamp LWSP COLON] LWSP\n                          pkgdName [ LBRKT\
    \ observedEventParameter\n                          *(COMMA observedEventParameter)\
    \ RBRKT ]\n   ;at-most-once eventStream, every eventParameterName at most once\n\
    \   observedEventParameter = eventStream / eventOther\n   RequestID          \
    \  = UINT32\n   modemDescriptor      = ModemToken (( EQUAL modemType) /\n    \
    \                      (LSBRKT modemType *(COMMA modemType) RSBRKT))\n       \
    \                   [ LBRKT NAME parmValue\n                         *(COMMA NAME\
    \ parmValue) RBRKT ]\n   ; at-most-once\n   modemType            = (V32bisToken\
    \ / V22bisToken / V18Token /\n                           V22Token / V32Token /\
    \ V34Token / V90Token /\n                        V91Token / SynchISDNToken / extensionParameter)\n\
    \   digitMapDescriptor   = DigitMapToken EQUAL digitMapName\n                \
    \          ( LBRKT digitMapValue RBRKT )\n   digitMapName       = NAME\n   digitMapValue\
    \      = [\"T\" COLON Timer COMMA] [\"S\" COLON Timer COMMA]\n               \
    \           [\"L\" COLON Timer COMMA] digitMap\n   Timer              = 1*2DIGIT\n\
    \   digitMap =\n        digitString / LWSP \"(\" LWSP digitStringList LWSP \"\
    )\" LWSP)\n   digitStringList      = digitString *( LWSP \"|\" LWSP digitString\
    \ )\n   digitString          = 1*(digitStringElement)\n   digitStringElement \
    \  = digitPosition [DOT]\n   digitPosition        = digitMapLetter / digitMapRange\n\
    \   digitMapRange      = (\"x\" / LWSP \"[\" LWSP digitLetter LWSP \"]\" LWSP)\n\
    \   digitLetter          = *((DIGIT \"-\" DIGIT ) / digitMapLetter)\n   digitMapLetter\
    \       = DIGIT   ;Basic event symbols\n                   / %x41-4B / %x61-6B\
    \ ; a-k, A-K\n                   / \"L\" / \"S\"   ;Inter-event timers (long,\
    \ short)\n                   / Z\"         ;Long duration modifier\n   ;at-most-once\n\
    \   auditItem            = ( MuxToken / ModemToken / MediaToken /\n          \
    \                 SignalsToken / EventBufferToken /\n                        \
    \   DigitMapToken / StatsToken / EventsToken /\n                           ObservedEventsToken\
    \ / PackagesToken )\n   serviceChangeDescriptor = ServicesToken LBRKT serviceChangeParm\n\
    \                            *(COMMA serviceChangeParm) RBRKT\n   serviceChangeParm\
    \    = (serviceChangeMethod / serviceChangeReason /\n                        \
    \  serviceChangeDelay / serviceChangeAddress /\n                         serviceChangeProfile\
    \ / extension / TimeStamp /\n                          serviceChangeMgcId / serviceChangeVersion\
    \ )\n   serviceChangeReplyDescriptor = ServicesToken LBRKT\n                 \
    \      servChgReplyParm *(COMMA servChgReplyParm) RBRKT\n   ;at-most-once. Version\
    \ is REQUIRED on first ServiceChange response\n   servChgReplyParm     = (serviceChangeAddress\
    \ / serviceChangeMgcId /\n                          serviceChangeProfile / serviceChangeVersion\
    \ )\n   serviceChangeMethod  = MethodToken EQUAL (FailoverToken /\n          \
    \                ForcedToken / GracefulToken / RestartToken /\n              \
    \            DisconnectedToken / HandOffToken /\n                          extensionParameter)\n\
    \   serviceChangeReason  = ReasonToken  EQUAL VALUE\n   serviceChangeDelay   =\
    \ DelayToken   EQUAL UINT32\n   serviceChangeAddress = ServiceChangeAddressToken\
    \ EQUAL VALUE\n   serviceChangeMgcId   = MgcIdToken   EQUAL mId\n   serviceChangeProfile\
    \ = ProfileToken EQUAL NAME SLASH Version\n   serviceChangeVersion = VersionToken\
    \ EQUAL Version\n   extension            = extensionParameter parmValue\n   packagesDescriptor\
    \   = PackagesToken LBRKT packagesItem\n                          *(COMMA packagesItem)\
    \ RBRKT\n   Version              = 1*2(DIGIT)\n   packagesItem         = NAME\
    \ \"-\" UINT16\n   TimeStamp            = Date \"T\" Time ; per ISO 8601:1988\n\
    \   ; Date = yyyymmdd\n   Date                 = 8(DIGIT)\n   ; Time = hhmmssss\n\
    \   Time                 = 8(DIGIT)\n   statisticsDescriptor = StatsToken LBRKT\
    \ statisticsParameter\n                         *(COMMA statisticsParameter )\
    \ RBRKT\n   ;at-most-once per item\n   statisticsParameter  = pkgdName EQUAL VALUE\n\
    \   topologyDescriptor   = TopologyToken LBRKT terminationA COMMA\n          \
    \                terminationB COMMA topologyDirection RBRKT\n   terminationA \
    \        = TerminationID\n   terminationB         = TerminationID\n   topologyDirection\
    \    = BothwayToken / IsolateToken / OnewayToken\n   priority             = PriorityToken\
    \ EQUAL UINT16\n   extensionParameter   = \"X\"  (\"-\" / \"+\") 1*6(ALPHA / DIGIT)\n\
    \   ; octetString is used to describe SDP defined in RFC2327.\n   ; Caution should\
    \ be taken if CRLF in RFC2327 is used.\n   ; To be safe, use EOL in this ABNF.\n\
    \   ; Whenever \"}\" appears in SDP, it is escaped by \"\\\", e.g., \"\\}\"\n\
    \   octetString          = *(nonEscapeChar)\n   nonEscapeChar        = ( \"\\\
    }\" / %x01-7C / %x7E-FF )\n   quotedString         = DQUOTE 1*(SafeChar / RestChar/\
    \ WSP) DQUOTE\n   UINT16               = 1*5(DIGIT)  ; %x0-FFFF\n   UINT32   \
    \            = 1*10(DIGIT) ; %x0-FFFFFFFF\n   NAME                 = ALPHA *63(ALPHA\
    \ / DIGIT / \"_\" )\n   VALUE                = quotedString / 1*(SafeChar)\n \
    \  SafeChar             = DIGIT / ALPHA / \"+\" / \"-\" / \"&\" /\n          \
    \                \"!\" / \"_\" / \"/\" / \"'\" / \"?\" / \"@\" /\n           \
    \               \"^\" / \"`\" / \"~\" / \"*\" / \"$\" / \"\\\" /\n           \
    \               \"(\" / \")\" / \"%\" / \"|\" / \".\"\n   EQUAL              \
    \  = LWSP %x3D LWSP ; \"=\"\n   COLON                = %x3A           ; \":\"\n\
    \   LBRKT                = LWSP %x7B LWSP ; \"{\"\n   RBRKT                = LWSP\
    \ %x7D LWSP ; \"}\"\n   COMMA                = LWSP %x2C LWSP ; \",\"\n   DOT\
    \                  = %x2E           ; \".\"\n   SLASH                = %x2F  \
    \         ; \"/\"\n   ALPHA                = %x41-5A / %x61-7A ; A-Z / a-z\n \
    \  DIGIT                = %x30-39         ; 0-9\n   DQUOTE               = %x22\
    \            ; \" (Double Quote)\n   HEXDIG               = ( DIGIT / \"A\" /\
    \ \"B\" / \"C\" / \"D\" / \"E\" / \"F\" )\n   SP                   = %x20    \
    \    ; space\n   HTAB                 = %x09        ; horizontal tab\n   CR  \
    \                 = %x0D        ; Carriage return\n   LF                   = %x0A\
    \        ; linefeed\n   LWSP                 = *( WSP / COMMENT / EOL )\n   EOL\
    \                  = (CR [LF] / LF )\n   WSP                  = SP / HTAB ; white\
    \ space\n   SEP                  = ( WSP / EOL / COMMENT) LWSP\n   COMMENT   \
    \           = \";\" *(SafeChar/ RestChar / WSP / %x22) EOL\n   RestChar      \
    \       = \";\" / \"[\" / \"]\" / \"{\" / \"}\" / \":\" / \",\" / \"#\"\n   /\n\
    \                          \"<\" / \">\" / \"=\"\n   AddToken                \
    \   = (\"Add\"                   / \"A\")\n   AuditToken                 = (\"\
    Audit\"                 / \"AT\")\n   AuditCapToken              = (\"AuditCapability\"\
    \       / \"AC\")\n   AuditValueToken            = (\"AuditValue\"           \
    \ / \"AV\")\n   AuthToken                  = (\"Authentication\"        / \"AU\"\
    )\n   BothwayToken               = (\"Bothway\"               / \"BW\")\n   BriefToken\
    \                 = (\"Brief\"                 / \"BR\")\n   BufferToken     \
    \           = (\"Buffer\"                / \"BF\")\n   CtxToken              \
    \     = (\"Context\"               / \"C\")\n   ContextAuditToken          = (\"\
    ContextAudit\"          / \"CA\")\n   DigitMapToken              = (\"DigitMap\"\
    \              / \"DM\")\n   DiscardToken               = (\"Discard\"       \
    \        / \"DS\")\n   DisconnectedToken          = (\"Disconnected\"        \
    \  / \"DC\")\n   DelayToken                 = (\"Delay\"                 / \"\
    DL\")\n   DurationToken              = (\"Duration\"              / \"DR\")\n\
    \   EmbedToken                 = (\"Embed\"                 / \"EB\")\n   EmergencyToken\
    \             = (\"Emergency\"             / \"EM\")\n   ErrorToken          \
    \       = (\"Error\"                 / \"ER\")\n   EventBufferToken          \
    \ = (\"EventBuffer\"           / \"EB\")\n   EventsToken                = (\"\
    Events\"                / \"E\")\n   FailoverToken              = (\"Failover\"\
    \              / \"FL\")\n   ForcedToken                = (\"Forced\"        \
    \        / \"FO\")\n   GracefulToken              = (\"Graceful\"            \
    \  / \"GR\")\n   H221Token                  = (\"H221\" )\n   H223Token      \
    \            = (\"H223\" )\n   H226Token                  = (\"H226\" )\n   HandOffToken\
    \               = (\"HandOff\"               / \"HO\")\n   InactiveToken     \
    \         = (\"Inactive\"              / \"IN\")\n   IsolateToken            \
    \   = (\"Isolate\"               / \"IS\")\n   InSvcToken                 = (\"\
    InService\"             / \"IV\")\n   KeepActiveToken            = (\"KeepActive\"\
    \            / \"KA\")\n   LocalToken                 = (\"Local\"           \
    \      / \"L\")\n   LocalControlToken          = (\"LocalControl\"          /\
    \ \"O\")\n   LockStepToken              = (\"LockStep\"              / \"SP\"\
    )\n   LoopbackToken              = (\"Loopback\"              / \"LB\")\n   MediaToken\
    \                 = (\"Media\"                 / \"M\")\n   MegacopToken     \
    \          = (\"MEGACO\"                / \"!\")\n   MethodToken             \
    \   = (\"Method\"                / \"MT\")\n   MgcIdToken                 = (\"\
    MgcIdToTry\"            / \"MG\")\n   ModeToken                  = (\"Mode\" \
    \                 / \"MO\")\n   ModifyToken                = (\"Modify\"     \
    \           / \"MF\")\n   ModemToken                 = (\"Modem\"            \
    \     / \"MD\")\n   MoveToken                  = (\"Move\"                  /\
    \ \"MV\")\n   MTPToken                   = (\"MTP\")\n   MuxToken            \
    \       = (\"Mux\"                   / \"MX\")\n   NotifyToken               \
    \ = (\"Notify\"                / \"N\")\n   NotifyCompletionToken      = (\"NotifyCompletion\"\
    \      / \"NC\")\n   ObservedEventsToken        = (\"ObservedEvents\"        /\
    \ \"OE\")\n   OnewayToken                = (\"Oneway\"                / \"OW\"\
    )\n   OnOffToken                 = (\"OnOff\"                 / \"OO\")\n   OutOfSvcToken\
    \              = (\"OutOfService\"          / \"OS\")\n   PackagesToken      \
    \        = (\"Packages\"              / \"PG\")\n   PendingToken             \
    \  = (\"Pending\"               / \"PN\")\n   PriorityToken              = (\"\
    Priority\"              / \"PR\")\n   ProfileToken               = (\"Profile\"\
    \               / \"PF\")\n   ReasonToken                = (\"Reason\"       \
    \         / \"RE\")\n   RecvonlyToken              = (\"ReceiveOnly\"        \
    \   / \"RC\")\n   ReplyToken                 = (\"Reply\"                 / \"\
    P\")\n   RestartToken               = (\"Restart\"               / \"RS\")\n \
    \  RemoteToken                = (\"Remote\"                / \"R\")\n   ReservedGroupToken\
    \         = (\"ReservedGroup\"         / \"RG\")\n   ReservedValueToken      \
    \   = (\"ReservedValue\"         / \"RV\")\n   SendonlyToken              = (\"\
    SendOnly\"              / \"SO\")\n   SendrecvToken              = (\"SendReceive\"\
    \           / \"SR\")\n   ServicesToken              = (\"Services\"         \
    \     / \"SV\")\n   ServiceStatesToken         = (\"ServiceStates\"         /\
    \ \"SI\")\n   ServiceChangeToken         = (\"ServiceChange\"         / \"SC\"\
    )\n   ServiceChangeAddressToken  = (\"ServiceChangeAddress\"  / \"AD\")\n   SignalListToken\
    \            = (\"SignalList\"            / \"SL\")\n   SignalsToken         \
    \      = (\"Signals\"               / \"SG\")\n   SignalTypeToken            =\
    \ (\"SignalType\"            / \"SY\")\n   StatsToken                 = (\"Statistics\"\
    \            / \"SA\")\n   StreamToken                = (\"Stream\"          \
    \      / \"ST\")\n   SubtractToken              = (\"Subtract\"              /\
    \ \"S\")\n   SynchISDNToken             = (\"SynchISDN\"             / \"SN\"\
    )\n   TerminationStateToken      = (\"TerminationState\"      / \"TS\")\n   TestToken\
    \                  = (\"Test\"                  / \"TE\")\n   TimeOutToken   \
    \            = (\"TimeOut\"               / \"TO\")\n   TopologyToken        \
    \      = (\"Topology\"              / \"TP\")\n   TransToken                 =\
    \ (\"Transaction\"           / \"T\")\n   ResponseAckToken           = (\"TransactionResponseAck\"\
    / \"K\")\n   V18Token                   = (\"V18\")\n   V22Token             \
    \      = (\"V22\")\n   V22bisToken                = (\"V22b\")\n   V32Token  \
    \                 = (\"V32\")\n   V32bisToken                = (\"V32b\")\n  \
    \ V34Token                   = (\"V34\")\n   V76Token                   = (\"\
    V76\")\n   V90Token                   = (\"V90\")\n   V91Token               \
    \    = (\"V91\")\n"
- title: ANNEX C TAGS FOR MEDIA STREAM PROPERTIES (NORMATIVE)
  contents:
  - "ANNEX C TAGS FOR MEDIA STREAM PROPERTIES (NORMATIVE)\n   Parameters for Local\
    \ descriptors and Remote descriptors are specified\n   as tag-value pairs if binary\
    \ encoding is used for the protocol.  This\n   annex contains the property names\
    \ (PropertyID), the tags (Property\n   Tag), type of the property (Type) and the\
    \ values (Value).Values\n   presented in the Value field when the field contains\
    \ references shall\n   be regarded as \"information\". The reference contains\
    \ the normative\n   values.  If a value field does not contain a reference then\
    \ the\n   values in that field can be considered as \"normative\".\n   Tags are\
    \ given as hexadecimal numbers in this annex. When setting the\n   value of a\
    \ property, a MGC may underspecify the value according to\n   one of the mechanisms\
    \ specified in section 7.1.1.\n   For type \"enumeration\" the value is represented\
    \ by the value in\n   brackets, e.g., Send(0), Receive(1).\n"
- title: C.1 General Media Attributes
  contents:
  - "C.1 General Media Attributes\n   PropertyID      Property        Type       \
    \        Value\n                       Tag\n   Media               1001      Enumeration\
    \      Audio(0), Video(1),\n                                                 \
    \ Data(2),\n   Transmission mode   1002      Enumeration      Send(0), Receive(1),\n\
    \                                                  Send&Receive(2)\n   Number\
    \ of Channels  1003      Unsigned         0-255\n                            \
    \     Integer\n   Sampling rate       1004      Unsigned         0-2^32\n    \
    \                             Integer\n   Bitrate             1005      Integer\
    \          (0..4294967295)\n      Note - units of 100 bit/s\n   ACodec       \
    \       1006      Octet String     Audio Codec Type:\n      Reference: ITU-T Rec.\
    \ Q.765 - Application transport mechanism.\n      Non-ITU codecs are defined with\
    \ the appropriate standards\n      organisation under a defined Organizational\
    \ Identifier.\n   Samplepp            1007      Unsigned         Maximum samples\
    \ or\n                                 Integer          frames per packet: 0-\n\
    \                                                  65535\n   Silencesupp     \
    \    1008      BOOLEAN          Silence Suppression:\n                       \
    \                           True/false\n   Encrypttype         1009      Octet\
    \ string     Ref.: rec. H.245\n   Encryptkey          100A      Octet string \
    \    Encryption key\n                                 SIZE(0..65535)\n      Ref.:\
    \ rec. H.235\n   Echocanc           100B       Enumeration      Echo Canceller:\n\
    \                                                  Off(0), G.165(1),\n       \
    \                                           G168(2)\n   Gain               100C\
    \       Unsigned         Gain in db: 0-65535\n                               \
    \  Integer\n   Jitterbuff         100D       Unsigned         Jitter buffer size\
    \ in\n                                 Integer          ms: 0-65535\n   PropDelay\
    \          100E       Unsigned         Propagation Delay:\n                  \
    \               Integer          0..65535\n      Maximum propagation delay in\
    \ milliseconds for the bearer\n      connection between two  media gateways. The\
    \ maximum delay will be\n      dependent on the bearer technology.\n   RTPpayload\
    \         100F       integer          Payload type in RTP\n                  \
    \                                Profile for Audio and\n                     \
    \                             Video Conferences\n                            \
    \                      with Minimal Control\n      Ref.: RFC 1890\n"
- title: C.2 Mux Properties
  contents:
  - "C.2 Mux Properties\n   PropertyID     Property    Type                Value\n\
    \                     Tag\n   H.221              2001      Octet     Ref.: rec.\
    \ H.245,\n                                string    H222LogicalChannelParameters\n\
    \   H223               2002      Octet     Ref.: rec. H.245,\n               \
    \                 string    H223LogicalChannelParameters\n   V76             \
    \   2003      Octet     Ref.: rec. H.245,\n                                String\
    \    V76LogicalChannelParameters\n   H2250              2004      Octet     Ref.:\
    \ rec. H.245,\n                                String    H2250LogicalChannelParameters\n"
- title: C.3 General bearer properties
  contents:
  - "C.3 General bearer properties\n   PropertyID     Property       Type        \
    \        Value\n                    Tag\n   Mediatx            3001      Enumeration\
    \    Media Transport Type:\n                                               TDM\
    \ Circuit(0), ATM(1),\n                                               FR(2), Ipv4(3),\
    \ Ipv6(4),\n                                               _\n   BIR         \
    \       3002      4 OCTET        Value depends on\n                          \
    \                     transport technology\n   NSAP               3003      1-20\
    \ OCTETS    See NSAP\n      Reference: ITU X.213 Annex A\n"
- title: C.4 General ATM properties
  contents:
  - "C.4 General ATM properties\n   PropertyID         Property  Type           Value\n\
    \                      Tag\n   AESA               4001      20 OCTETS      ATM\
    \ End System Address\n   VPVC               4002      2 x 16 bit     VPC/VCI\n\
    \                                integer\n   SC                 4003      4 bits\
    \         Service Category\n      Reference: ITU Recommendation Q.2931 (1995)\n\
    \   BCOB               4004      5 bit integer  Broadband Bearer Class\n     \
    \ Reference: ITU Recommendation Q.2961.2 (06/97)\n   BBTC               4005 \
    \     octet          Broadband Transfer\n                                    \
    \           Capability\n      Reference: ITU Recommendation Q.2961 (10/95)\n \
    \  ATC                4006      Enumeration    I.371 ATM Traffic\n           \
    \                                    Capability\n      Reference: ITU Recommendation\
    \ I.371:\n      DBR(0), SBR1(1), SBR2(2), SBR(3), ABT/IT(4), ABT/DT(5), ABR(6)\n\
    \   STC                4007      2 bits         Susceptibility to\n          \
    \                                     clipping\n      Reference: ITU Recommendation\
    \ Q.2931 (1995)\n      00 Susceptible\n      01 Not-susceptible\n   UPCC     \
    \          4008      2 bits         User Plane Connection\n                  \
    \                             configuration:\n      Reference: ITU Recommendation\
    \ Q.2931 (1995)\n      00 Pt-to-pt,\n      01 Pt-to-mpt\n   PCR0             \
    \  4009      24 bit         Peak Cell Rate (For\n                            \
    \    integer        CLP=0)\n      Reference: ITU Recommendation I.371\n   SCR0\
    \               400A      24 bit         Sustainable Cell Rate\n             \
    \                   integer        (For CLP=0)\n      Reference: ITU Recommendation\
    \ I.371\n   MBS0               400B      24 bit         Maximum Burst Size (For\n\
    \                                integer        CLP=0)\n      Reference: ITU Recommendation\
    \ I.371\n   PCR1               400C      24 bit         Peak Cell Rate (For\n\
    \                                integer        CLP=0+1)\n      Reference: ITU\
    \ Recommendation I.371\n   SCR2               400D      24 bit         Sustainable\
    \ Cell Rate\n                                integer        (For CLP=0+1)\n  \
    \    Reference: ITU Recommendation I.371\n   MBS3               400E      24 bit\
    \         Maximum Burst Size (For\n                                integer   \
    \     CLP=0+1)\n      Reference: ITU Recommendation I.371\n   BEI            \
    \    400F      Boolean        Best Effort Indicator\n   TI                 4010\
    \      Boolean        Tagging\n   FD                 4011      Boolean       \
    \ Frame Discard\n   FCDV               4012      24 bit         Forward P-P CDV\n\
    \                                integer\n   BCDV               4013      24 bit\
    \         Backward P-P CDV\n                                integer\n   FCLR0\
    \              4014      8 bit integer  Forward Cell Loss Ratio\n            \
    \                                   (For CLP=0)\n   BCLR0              4015  \
    \    8 bit integer  Backward P-P Cell Loss\n                                 \
    \              Ratio (For CLP=0)\n   FCLR1              4016      8 bit integer\
    \  Forward Cell Loss Ratio\n   BCLR1              4017      8 bit integer  Backward\
    \ P-P Cell Loss\n                                               Ratio (For CLP=0+1)\n\
    \   FCDV               4018      24 bit         Forward Cell Delay\n         \
    \                       integer        Variation\n   BCDV               4019 \
    \     24 bit         Backward Cell Delay\n                                integer\
    \        Variation\n   FACDV              401A      24 bit         Forward Acceptable\
    \ P-P-P\n                                integer        CDV\n   BACDV        \
    \      401B      24 bit         Backward Acceptable P-P\n                    \
    \            integer        CDV\n   FCCDV              401C      24 bit      \
    \   Forward Cumulative P-P\n                                integer        CDV\n\
    \   BCCDV              401D      24 bit         Backward Cumulative P-P\n    \
    \                            integer        CDV\n   FCLR               401E  \
    \    8 bit integer  Acceptable Forward Cell\n                                \
    \               Loss Ratio\n   BCLR               401F      8 bit integer  Acceptable\
    \ Backward Cell\n                                               Loss Ratio\n \
    \  EETD               4020      16 bit         End-to-end transit delay\n    \
    \                            integer\n   Mediatx (See       4021             \
    \        AAL Type\n   General\n   Properties)\n      Reference: ITU Recommendation\
    \ Q.2931 (1995)\n   QosClass           4022      Integer 0-4    Qos Class\n  \
    \    Reference: ITU Recommendation Q.2931 (1995)\n      QoS Parameter Application:\n\
    \    Qos Class0  QoS                       ApplicationBest Effort\n          \
    \      Parameter Unspecified\n        0       Unspecified               Best EffortConstant\
    \ Bit rate\n                Specified                 circuit emulation\n    \
    \    1       Specified                 Constant Bit rate circuit\n           \
    \     Specified                 emulationVariable bit rate\n                 \
    \                         video and audio\n        2       Specified         \
    \        Variable bit rate video and\n                Specified              \
    \   audioConnection-oriented data\n        3       Specified                 Connection-oriented\n\
    \                Specified                 dataConnectionless data\n        4\
    \       Specified                 Connectionless data\n   AALtype            4023\
    \      1 OCTET        AAL Type\n      Reference: ITU Recommendation Q.2931 (1995)\n\
    \      00000000        AAL for voice\n      00000001        AAL type 1\n     \
    \ 00000010        AAL type 2\n      00000011        AAL type 3/4\n      00000101\
    \        AAL type 5\n      00010000        user defined AAL\n"
- title: C.5 Frame Relay
  contents:
  - "C.5 Frame Relay\n   PropertyID       Property  Type               Value\n   \
    \                 Tag\n   DLCI             5001      Unsigned Integer   Data link\
    \ connection\n                                                 id\n   CID    \
    \          5002      Unsigned Integer   sub-channel id.\n   SID/Noiselevel   5003\
    \      Unsigned Integer   silence insertion\n                                \
    \                 descriptor\n   Primary Payload  5004      Unsigned Integer \
    \  Primary Payload Type\n   type\n      Covers FAX and codecs\n"
- title: C.6 IP
  contents:
  - "C.6 IP\n   PropertyID       Property  Type               Value\n            \
    \        Tag\n   IPv4             6001      32 BITS            Ipv4Address:\n\
    \                              Ipv4Address\n      Reference: IETF RFC791\n   IPv6\
    \             6002      128 BITS           IPv6 Address:\n      Reference: IETF\
    \ RFC2460\n   Port             6003      unsigned integer   0-65535\n   Porttype\
    \         6004      enumerated         TCP(0), UDP(1),\n                     \
    \                            SCTP(2)\n"
- title: C.7 ATM AAL2
  contents:
  - "C.7 ATM AAL2\n   PropertyID       Property  Type               Value\n      \
    \              Tag\n   AESA             7001      20 OCTETS          AAL2 service\
    \ endpoint\n                                                 address\n      as\
    \ defined in Reference: ITU Recommendation Q.2630.1\n      ESEA\n      NSEA\n\
    \   BIR              See C.3   4 OCTETS           Served user generated\n    \
    \                                             reference\n      as defined in Reference:\
    \ ITU Recommendation Q.2630.1\n      SUGR\n   ALC              7002      12 OCTETS\
    \          AAL2 link\n                                                 characteristics\n\
    \      as defined in Reference: ITU Recommendation Q.2630.1\n      max/average\
    \ CPS-SDU bitrate,\n      max/average CPS-SDU size\n   SSCS             7003 \
    \     I.366.2:                   Service\n                              audio\
    \ (8 OCTETS)           specific\n                              multirate (3 OCTETS)\
    \       convergence\n                              or I.366.1:               \
    \ sublayer\n                              SAR-assured (14 OCTETS)/   information\n\
    \                              unassured (7 OCTETS)\n      as defined in Reference:\
    \ Q.2630.1 and used in I.366.1 and I.366.2\n      I.366.2: audio/multirate\n \
    \     I.366.1: SAR-assured/unassured\n   SUT              7004      1..254 octets\
    \      Served user transport\n                                               \
    \  parameter\n      as defined in Reference: ITU Recommendation Q.2630.1\n   TCI\
    \              7005      BOOLEAN            Test connection\n                \
    \                                 indicator\n      as defined in Reference: ITU\
    \ Recommendation  Q.2630.1\n   Timer_CU         7006      32 bit integer     Timer-CU:\
    \ Milliseconds\n                                                 to hold partially\n\
    \                                                 filled cell before\n       \
    \                                          sending.\n   MaxCPSSDU        7007\
    \      8 bit integer      Maximum Common Part\n                              \
    \                   Sublayer Service Data\n                                  \
    \               Unit\n      Ref.: rec. Q.2630.1\n   SCLP             7008    \
    \  Boolean            Set Cell Local\n                                       \
    \          PriorityLP bit:\n                                                 True\
    \ if CLP bit is to\n                                                 be set\n\
    \   EETR             7009      Boolean            Timing Requirements\n      Reference:\
    \ ITU Recommendation Q.2931 (1995)\n      End to End Timing Required:\n      In\
    \ broadband bearer capability\n   CID              700A      8 bits          \
    \   subchannel id, 0-255\n      Ref.: rec. I.363.2 (09/97)\n"
- title: C.8 ATM AAL1
  contents:
  - "C.8 ATM AAL1\n   PropertyID       Property  Type               Value\n      \
    \              Tag\n   BIR              See                          GIT (Generic\n\
    \                    Table                        Identifier Transport)      \
    \                        4 OCTETS\n                    C.3\n      Ref.: Recommendation\
    \ Q.2941.1 (09/97)\n   AAL1ST           8001      1 OCTET            AAL1 Subtype:\n\
    \      Reference: ITU Recommendation Q.2931 (1995)\n      00000000       Null\n\
    \      00000001       voiceband signal transport on 64kbit/s\n      00000010 \
    \      circuit transport\n      00000100       high-quality audio signal transport\n\
    \      00000101       video signal transport\n   CBRR             8002      1\
    \ OCTET            CBR Rate\n      Reference: ITU Recommendation Q.2931 (1995)\n\
    \      00000001           64 kbit/s\n      00000100       1544 kbit/s\n      00000101\
    \       6312 kbit/s\n      00000110      32064 kbit/s\n      00000111      44736\
    \ kbit/s\n      00001000      97728 kbit/s\n      00010000        2048 kbit/s\n\
    \      00010001        8448 kbit/s\n      00010010      34368 kbit/s\n      00010011\
    \    139264 kbit/s\n      01000000      n x 64 kbit/s\n      01000001        n\
    \ * 8 kbit/s\n   MULT             See                          Multiplier, or\
    \ n x\n                    Table                        64k/8k/300\n         \
    \           C.9\n      Reference: ITU Recommendation Q.2931 (1995)\n   SCRI  \
    \           8003      1 OCTECT           Source Clock Frequency\n            \
    \                                     Recovery Method\n      Reference: ITU Recommendation\
    \ Q.2931 (1995)\n      00000000    NULL\n      00000001    SRTS\n      00000010\
    \    ACM\n   ECM              8004      1 OCTECT           Error Correction\n\
    \                                                 Method\n      Reference: ITU\
    \ Recommendation Q.2931 (1995)\n      00000000    Null\n      00000001    FEC-LOSS\n\
    \      00000010    FEC-DELAY\n   SDTB             8005      16 bit integer   \
    \  Structured Data\n                                                 Transfer\
    \ Blocksize\n      Reference: ITU Recommendation I.363.1\n      Block size of\
    \ SDT CBR service\n   PFCI             8006      8 bit integer      Partially\
    \ filled cells\n                                                 indentifier\n\
    \      Reference: ITU Recommendation I.363.1\n      1-47\n   EETR            \
    \ See       See Table C.7      See Table C.7\n                    Table\n    \
    \                C.7\n"
- title: C.9 Bearer Capabilities
  contents:
  - "C.9 Bearer Capabilities\n   PropertyID       Property  Type               Value\n\
    \                    Tag\n   TMR              9001      1 OCTET            Transmission\
    \ Medium\n                                                 Requirement (Q.763)\n\
    \      Reference: ITU Recommendation Q.763(09/97)\n      Bit 8 7 6 5 4 3 2 1\n\
    \      00000000 - speech\n      00000001 - spare\n      00000010 - 64 kbit/s unrestricted\n\
    \      00000011 - 3.1 kHz audio\n      00000100 - reserved for alternate speech\
    \ (service 2)/64 kbit/s\n      unrestricted (service 1)\n      00000101 - reserved\
    \ for alternate 64 kbit/s unrestricted (service\n      1)/speech (service 2)\n\
    \      00000110 - 64 kbit/s preferred\n      00000111 - 2 x 64 kbit/s unrestricted\n\
    \      00001000 - 384 kbit/s unrestricted\n      00001001 - 1536 kbit/s unrestricted\n\
    \      00001010 - 1920 kbit/s unrestricted\n      00001011 through 00001111- spare\n\
    \      00010000 - 3 x 64 kbit/s unrestricted\n      00010001 - 4 x 64 kbit/s unrestricted\n\
    \      00010010 -  5 x 64 kbit/s unrestricted\n      00010011 spare\n      00010100\
    \ - 7 x 64 kbit/s unrestricted\n      00010101 - 8 x 64 kbit/s unrestricted\n\
    \      00010110 - 9 x 64 kbit/s unrestricted\n      00010111 - 10 x 64 kbit/s\
    \ unrestricted\n      00011000 - 11 x 64 kbit/s unrestricted\n      00011001 -\
    \ 12 x 64 kbit/s unrestricted\n      00011010 - 13 x 64 kbit/s unrestricted\n\
    \      00011011 - 14 x 64 kbit/s unrestricted\n      00011100 - 15 x 64 kbit/s\
    \ unrestricted\n      00011101 - 16 x 64 kbit/s unrestricted\n      00011110 -\
    \ 17 x 64 kbit/s unrestricted\n      00011111 - 18 x 64 kbit/s unrestricted\n\
    \      00100000 - 19 x 64 kbit/s unrestricted\n      00100001 - 20 x 64 kbit/s\
    \ unrestricted\n      00100010 - 21 x 64 kbit/s unrestricted\n      00100011 -\
    \ 22 x 64 kbit/s unrestricted\n      00100100 - 23x 64 kbit/s unrestricted\n \
    \     00100101 - spare\n      00100110 - 25 x 64 kbit/s unrestricted\n      00100111\
    \ - 26 x 64 kbit/s unrestricted\n      00101000 - 27 x 64 kbit/s unrestricted\n\
    \      00101001 - 28 x 64 kbit/s unrestricted\n      00101010 - 29 x 64 kbit/s\
    \ unrestricted\n      00101011 through 11111111 Spare\n   TMRSR            9002\
    \      1 OCTET            Transmission Medium\n                              \
    \                   Requirement Subrate\n      0 - unspecified\n      1 - 8kbit/s\n\
    \      2 - 16kbit/s\n      3 - 32kbit/s\n   Contcheck        9003      BOOLEAN\
    \            Continuity Check\n      Reference: ITU Recommendation Q.763(09/97)\n\
    \      0 - Not required on this circuit\n      1 - Required on this circuit\n\
    \   ITC              9004      5 BITS             Information Transfer\n     \
    \                                            Capability\n      Reference: ITU\
    \ Recommendation Q.763(09/97)\n      Bits 5 4 3 2 1\n      00000 - Speech\n  \
    \    01000 -Unrestricted digital information\n      01001- Restricted digital\
    \ information\n      10000 3.1 kHz audio\n      10001 - Unrestricted digital information\
    \ with tones/announcements\n      (Note 2)\n      11000 -Video\n      All other\
    \ values are reserved.\n   TransMode        9005      2 BITS             Transfer\
    \ Mode\n      Reference: ITU Recommendation Q.931 (1998)\n      Bit 2 1\n    \
    \  00 - Circuit mode\n      10 - Packet mode\n   TransRate        9006      5\
    \ BITS             Transfer Rate\n      Reference: ITU Recommendation Q.931 (1998)\n\
    \      Bit 5 4 3 2 1\n      00000 - This code shall be used for packet mode calls\n\
    \      10000 - 64 kbit/s\n      10001 - 2 x 64 kbit/s\n      10011 -384 kbit/s\n\
    \      10101 -1536 kbit/s\n      10111 -1920 kbit/s\n      11000 - Multirate (64\
    \ kbit/s base rate)\n   MULT             9007      7 BITS             Rate Multiplier\n\
    \      Reference: ITU Recommendation Q.931 (1998)\n      Any value from 2 to n\
    \ (maximum number of B-channels)\n   USI              9008      5 BITS       \
    \      User Information Layer\n                                              \
    \   1 Protocol\n      Reference: ITU Recommendation Q.931 (1998)\n      Bits 5\
    \ 4 3 2 1\n      00001 - CCITT standardized rate adaption V.110 and X.30.\n  \
    \    00010 - Recommendation G.711  u-law\n      00011 - Recommendation G.711 A-law\n\
    \      00100 - Recommendation G.721 32 kbit/s ADPCM and Recommendation\n     \
    \ I.460.\n      00101 - Recommendations H.221 and H.242\n      00110 - Recommendations\
    \ H.223 and H.245\n      00111 - Non-ITU-T standardized rate adaption.\n     \
    \ 01000 - ITU-T standardized rate adaption V.120.\n      01001 - CCITT standardized\
    \ rate adaption X.31 HDLC flag stuffing.\n      All other values are reserved.\n\
    \   syncasync        9009      BOOLEAN            Synchronous/\n             \
    \                                    Asynchronous\n      Reference: ITU Recommendation\
    \ Q.931 (1998)\n      0 - Synchronous data\n      1 - Asynchronous data\n   negotiation\
    \      900A      BOOLEAN            Negotiation\n      Reference: ITU Recommendation\
    \ Q.931 (1998)\n      0 - In-band negotiation possible\n      1 - In-band negotiation\
    \ not possible\n   Userrate         900B      5 BITS             User Rate\n \
    \     Reference: ITU Recommendation Q.931 (1998)\n      Bits 5 4 3 2 1\n     \
    \ 00000 - Rate is indicated by E-bits specified in Recommendation\n      I.460\
    \  or may be negotiated in-band\n      00001 - 0.6 kbit/s Recommendations V.6\
    \  and X.1\n      00010 - 1.2 kbit/s Recommendation V.6\n      00011 - 2.4 kbit/s\
    \ Recommendations V.6 and X.1\n      00100 - 3.6 kbit/s Recommendation V.6\n \
    \     00101 - 4.8 kbit/s Recommendations V.6 and X.1\n      00110 - 7.2 kbit/s\
    \ RecommendationV.6\n      00111 - 8 kbit/s Recommendation I.460\n      01000\
    \ - 9.6 kbit/s Recommendations V.6 and X.1\n      01001 - 14.4 kbit/s Recommendation\
    \ V.6\n      01010 - 16 kbit/s Recommendation I.460\n      01011 - 19.2 kbit/s\
    \ Recommendation V.6\n      01100 - 32 kbit/s Recommendation I.460\n      01101\
    \ - 38.4 kbit/s Recommendation V.110\n      01110 - 48 kbit/s Recommendations\
    \ V.6 and X.1\n      01111 - 56 kbit/s Recommendation V.6\n      10010 - 57.6\
    \ kbit/s Recommendation V.14 extended\n      10011 - 28.8 kbit/s Recommendation\
    \ V.110\n      10100 - 24 kbit/s Recommendation V.110\n      10101 - 0.1345 kbit/s\
    \ Recommendation X.1\n      10110 - 0.100 kbit/s Recommendation X.1\n      10111\
    \ - 0.075/1.2 kbit/s Recommendations V.6 and X.1\n      11000 - 1.2/0.075 kbit/s\
    \ Recommendations V.6 and X.1\n      11001 - 0.050 kbit/s Recommendations V.6\
    \ and X.1\n      11010 - 0.075 kbit/s Recommendations V.6 and X.1\n      11011\
    \ - 0.110 kbit/s Recommendations V.6 and X.1\n      11100 - 0.150 kbit/s Recommendations\
    \ V.6 and X.1\n      11101 - 0.200 kbit/s Recommendations V.6 and X.1\n      11110\
    \ - 0.300 kbit/s Recommendations V.6 and X.1\n      11111 - 12 kbit/s Recommendation\
    \ V.6\n      All other values are reserved.\n   INTRATE          900C      2 BITS\
    \             Intermediate Rate\n      Reference: ITU Recommendation Q.931 (1998)\n\
    \      Bit 2 1\n      00 - Not used\n      01 - 8 kbit/s\n      10 - 16 kbit/s\n\
    \      11 - 32 kbit/s\n   nictx            900D      BOOLEAN            Network\
    \ Independent\n                                                 Clock (NIC) on\n\
    \                                                 transmission\n      Reference:\
    \ ITU Recommendation Q.931 (1998)\n      0 - Not required to send data with network\
    \ independent clock\n      1 - Required to send data with network independent\
    \ clock\n   nicrx            900E      BOOLEAN            Network independent\n\
    \                                                 clock (NIC) on\n           \
    \                                      reception\n      Reference: ITU Recommendation\
    \ Q.931 (1998)\n      0 - Cannot accept data with network independent clock (i.e.\n\
    \      sender does not support this optional procedure)\n      1 - Can accept\
    \ data with network independent clock (i.e. sender\n      does support this optional\
    \ procedure)\n   flowconttx       900F      BOOLEAN            Flow Control on\n\
    \                                                 transmission (Tx)\n      Reference:\
    \ ITU Recommendation Q.931 (1998)\n      0 - Not required to send data with flow\
    \ control mechanism\n      1 - Required to send data with flow control mechanism\n\
    \   flowcontrx       9010      BOOLEAN            Flow control on\n          \
    \                                       reception (Rx)\n      Reference: ITU Recommendation\
    \ Q.931 (1998)\n      0 - Cannot accept data with flow control mechanism (i.e.\
    \ sender\n      does not support this optional procedure)\n      1 - Can accept\
    \ data with flow control mechanism (i.e. sender does\n      support this optional\
    \ procedure)\n   rateadapthdr     9011      BOOLEAN            Rate adaption\n\
    \                                                 header/no header\n      Reference:\
    \ ITU Recommendation Q.931 (1998)\n      0 - Rate adaption header not included\n\
    \      1 - Rate adaption header included\n   multiframe       9012      BOOLEAN\
    \            Multiple frame\n                                                \
    \ establishment support\n                                                 in data\
    \ link\n      Reference: ITU Recommendation Q.931 (1998)\n      0 - Multiple frame\
    \ establishment not supported. Only UI frames\n      allowed.\n      1 - Multiple\
    \ frame establishment supported\n   OPMODE           9013      BOOLEAN       \
    \     Mode of operation\n      Reference: ITU Recommendation Q.931 (1998)\n  \
    \    0 Bit transparent mode of operation\n      1 Protocol sensitive mode of operation\n\
    \   llidnegot        9014      BOOLEAN            Logical link\n             \
    \                                    identifier negotiation\n      Reference:\
    \ ITU Recommendation Q.931 (1998)\n      0 Default, LLI = 256 only\n      1 Full\
    \ protocol negotiation\n   assign           9015      BOOLEAN            Assignor/assignee\n\
    \      Reference: ITU Recommendation Q.931 (1998)\n      0 Message originator\
    \ is \"Default assignee\"\n      1 Message originator is \"Assignor only\"\n \
    \  inbandneg        9016      BOOLEAN            In-band/out-band\n          \
    \                                       negotiation\n      Reference: ITU Recommendation\
    \ Q.931 (1998)\n      0- Negotiation is done with USER INFORMATION messages on\
    \ a\n      temporary signalling connection\n      1- Negotiation is done in-band\
    \ using logical link zero\n   stopbits         9017      2 BITS             Number\
    \ of stop bits\n      Reference: ITU Recommendation Q.931 (1998)\n      Bits 2\
    \ 1\n      00 - Not used\n      01 - 1 bit\n      10 - 1.5 bits\n      11 - 2\
    \ bits\n   databits         9018      2 BIT              Number of data bits\n\
    \                                                 excluding parity Bit\n     \
    \                                            if present\n      Reference: ITU\
    \ Recommendation Q.931 (1998)\n      Bit 2 1\n      00 - Not used\n      01 -\
    \ 5 bits\n      10 - 7 bits\n      11 - 8 bits\n   parity           9019     \
    \ 3 BIT              Parity information\n      Reference: ITU Recommendation Q.931\
    \ (1998)\n      Bit 3 2 1\n      000 - Odd\n      010 - Even\n      011 -None\n\
    \      100 - Forced to 0\n      101 - Forced to 1\n      All other values are\
    \ reserved.\n   duplexmode       901A      BOOLEAN            Mode duplex\n  \
    \    Reference: ITU Recommendation Q.931 (1998)\n      0 - Half duplex\n     \
    \ 1 - Full duplex\n   modem            901B      6 BIT              Modem Type\n\
    \      Reference: ITU Recommendation Q.931 (1998)\n      Bits 6 5 4 3 2 1\n  \
    \    00000 through 000101 National Use\n      010001 - Recommendation V.21\n \
    \     010010 - Recommendation V.22\n      010011 - Recommendation V.22 bis\n \
    \     010100 - Recommendation V.23\n      010101 - Recommendation V.26\n     \
    \ 011001 - Recommendation V.26 bis\n      010111 -Recommendation V.26 ter\n  \
    \    011000 - RecommendationV.27\n      011001 - Recommendation V.27 bis\n   \
    \   011010 - Recommendation V.27 ter\n      011011 - Recommendation V.29\n   \
    \   011101 - Recommendation V.32\n      011110 - Recommendation V.34\n      100000\
    \ through 101111 National Use\n      110000 through 111111 User Specified\n  \
    \ layer2prot       901C      5 BIT              User information layer\n     \
    \                                            2 protocol\n      Reference: ITU\
    \ Recommendation Q.931 (1998)\n      Bit 5 4 3 2 1\n      00010 - Recommendation\
    \ Q.921/I.441 [3]\n      00110 - Recommendation X.25 [5], link layer\n      01100\
    \ - LAN logical link control (ISO/IEC 8802-2)\n      All other values are reserved.\n\
    \   layer3prot       901D      5 BIT              User information layer\n   \
    \                                              3 protocol\n      Reference: ITU\
    \ Recommendation Q.931 (1998)\n      Bit 5 4 3 2 1\n      00010 - Recommendation\
    \ Q.931/I.451\n      00110 - Recommendation X.25, packet layer\n      01011 -\
    \ ISO/IEC TR 9577 (Protocol identification in the network\n      layer)\n    \
    \  All other values are reserved.\n   addlayer3prot    901E      OCTET       \
    \       Additional User\n                                                 Information\
    \ layer 3\n                                                 protocol\n      Reference:\
    \ ITU Recommendation Q.931 (1998)\n      Bits 4321 4321\n      1100 1100 - Internet\
    \ Protocol (RFC 791) (ISO/IEC TR 9577)\n      1100 1111 - Point-to-point Protocol\
    \ (RFC 1548)\n   DialledN         901F      30 OCTETS          Dialled Number\n\
    \   DiallingN        9020      30 OCTETS          Dialling Number\n   ECHOCI \
    \          9021      Enumeration        Echo Control\n                       \
    \                          Information\n      echo canceler off (0), incoming\
    \ echo canceler on (1), outgoing\n      echo canceler on (2), incoming and outgoing\
    \ echo canceler on (3)\n   NCI              9022      1 OCTET            Nature\
    \ of Connection\n                                                 Indicators\n\
    \      Reference: ITU Recommendation Q.763\n      Bits 8 7 6 5 4 3 2 1\n     \
    \ Bits 2 1 Satellite Indicator\n      0 0           no satellite circuit in the\
    \ connection\n      0 1  one satellite circuit in the connection\n      1 0  two\
    \ satellite circuits in the connection\n      1 1  spare\n      Bits 4 3 Continuity\
    \ check indicator\n      0 0  continuity check not required\n      0 1  continuity\
    \ check required on this circuit\n      1 0  continuity check performed on a previous\
    \ circuit\n      1 1          spare\n      Bits 5 Echo control device indicator\n\
    \      0  outgoing echo control device not included\n      1   outgoing echo control\
    \ device included\n      Bits 8 7 6 Spare\n"
- title: C.10 AAL5 Properties
  contents:
  - "C.10 AAL5 Properties\n   PropertyID       Property  Type               Value\n\
    \                    Tag\n   FMSDU            A001      32 bit integer     Forward\
    \ Maximum CPCS-\n                                                 SDU Size:\n\
    \      Reference: ITU Recommendation Q.2931 (1995)\n      Maximum CPCS-SDU size\
    \ sent in the direction from the calling user\n      to the called user.\n   BMSDU\
    \            A002      32 bit integer     Backwards Maximum\n                \
    \                                 CPCS-SDU Size\n      Reference: ITU Recommendation\
    \ Q.2931 (1995)\n      Maximum CPCS-SDU size sent in the direction from the called\
    \ user\n      to the calling user.\n   SSCS             See       See table C.7\
    \      See table C.7\n                    table\n                    C.7\n   \
    \   Additional values:\n      VPI/VCI\n   SC               See       See Table\
    \ C.4      See table C.4\n                    Table\n                    C.4\n"
- title: C.11 SDP Equivalents
  contents:
  - "C.11 SDP Equivalents\n   PropertyID       Property  Type               Value\n\
    \                    Tag\n   SDP_V            B001      STRING             Protocol\
    \ Version\n   SDP_O            B002      STRING             Owner/creator and\n\
    \                                                 session ID\n   SDP_S       \
    \     B003      STRING             Sesson name\n   SDP_I            B004     \
    \ STRING             Session identifier\n   SDP_U            B005      STRING\
    \             URI of descriptor\n   SDC_E            B006      STRING        \
    \     email address\n   SDP_P            B007      STRING             phone number\n\
    \   SDP_C            B008      STRING             Connection information\n   SDP_B\
    \            B009      STRING             Bandwidth Information\n   SDP_Z    \
    \        B00A      STRING             time zone adjustment\n   SDP_K         \
    \   B00B      STRING             Encryption Key\n   SDP_A            B00C    \
    \  STRING             Zero or more session\n                                 \
    \                attributes\n   SDP_T            B00D      STRING            \
    \ Active Session Time\n   SDP_R            B00E      STRING             Zero or\
    \ more repeat\n                                                 times\n      Reference\
    \ in all cases: IETF RFC2327, \"Session Description\n      Protocol\"\n"
- title: C.12 H.245
  contents:
  - "C.12 H.245\n   PropertyID       Property  Type           Value\n            \
    \        Tag\n   OLC              C001      octet string   The value of H.245\n\
    \                                             OpenLogicalChannel\n           \
    \                                  structure.\n   OLCack           C002      octet\
    \ string   The value of H.245\n                                             OpenLogicalChannelAck\n\
    \                                             structure.\n   OLCcnf          \
    \ C003      octet string   The value of H.245\n                              \
    \               OpenLogicalChannelConfirm\n                                  \
    \           structure.\n   OLCrej           C004      octet string   The value\
    \ of H.245\n                                             OpenLogicalChannelReject\n\
    \                                             structure.\n   CLC             \
    \ C005      octet string   The value of H.245\n                              \
    \               CloseLogicalChannel\n                                        \
    \     structure.\n   CLCack           C006      octet string   The value of H.245\n\
    \                                             CloseLogicalChannelAck\n       \
    \                                      structure.\n      Reference in all cases:\
    \ ITU-T Recommendation H.245\n"
- title: ANNEX D TRANSPORT OVER IP (NORMATIVE)
  contents:
  - 'ANNEX D TRANSPORT OVER IP (NORMATIVE)

    '
- title: D.1 Transport over IP/UDP using Application Level Framing
  contents:
  - "D.1 Transport over IP/UDP using Application Level Framing\n   Protocol messages\
    \ defined in this document may be transmitted over\n   UDP.  When no port is provided\
    \ by the peer (see section 7.2.8),\n   commands should be sent to the default\
    \ port number, 2944 for text-\n   encoded operation or 2945 for binary-encoded\
    \ operation.  Responses\n   must be sent to the address and port from which the\
    \ corresponding\n   commands were sent except if the response is to a handoff\
    \ or\n   failover, in which case the procedures of 11.5 apply.\n   Implementors\
    \ using IP/UDP with ALF should be aware of the\n   restrictions of the MTU on\
    \ the maximum message size.\n"
- title: D.1.1 Providing At-Most-Once Functionality
  contents:
  - "D.1.1 Providing At-Most-Once Functionality\n   Messages, being carried over UDP,\
    \ may be subject to losses. In the\n   absence of a timely response, commands\
    \ are repeated. Most commands\n   are not idempotent.  The state of the MG would\
    \ become unpredictable\n   if, for example, Add commands were executed several\
    \ times.  The\n   transmission procedures shall thus provide an \"At-Most-Once\"\
    \n   functionality.\n   Peer protocol entities are expected to keep in memory\
    \ a list of the\n   responses that they sent to recent transactions and a list\
    \ of the\n   transactions that are currently outstanding. The transaction\n  \
    \ identifier of each incoming message is compared to the transaction\n   identifiers\
    \ of the recent responses sent to the same MId. If a match\n   is found, the entity\
    \ does not execute the transaction, but simply\n   repeats the response. If no\
    \ match is found, the message will be\n   compared to the list of currently outstanding\
    \ transactions. If a\n   match is found in that list, indicating a duplicate transaction,\
    \ the\n   entity does not execute the transaction (see section 8.2.3 for\n   procedures\
    \ on sending TransactionPending).\n   The procedure uses a long timer value, noted\
    \ LONG-TIMER in the\n   following.  The timer should be set larger than the maximum\
    \ duration\n   of a transaction, which should take into account the maximum number\n\
    \   of repetitions, the maximum value of the repetition timer and the\n   maximum\
    \ propagation delay of a packet in the network.  A suggested\n   value is 30 seconds.\n\
    \   The copy of the responses may be destroyed either LONG-TIMER seconds\n   after\
    \ the response is issued, or when the entity receives a\n   confirmation that\
    \ the response has been received, through the\n   \"Response Acknowledgement parameter\"\
    . For transactions that are\n   acknowledged through this parameter, the entity\
    \ shall keep a copy of\n   the transaction-id for LONG-TIMER seconds after the\
    \ response is\n   issued, in order to detect and ignore duplicate copies of the\n\
    \   transaction request that could be produced by the network.\n"
- title: D.1.2 Transaction identifiers and three-way handshake
  contents:
  - 'D.1.2 Transaction identifiers and three-way handshake

    '
- title: D.1.2.1 Transaction identifiers
  contents:
  - "D.1.2.1 Transaction identifiers\n   Transaction identifiers are 32 bit integer\
    \ numbers.  A Media Gateway\n   Controller may decide to use a specific number\
    \ space for each of the\n   MGs that they manage, or to use the same number space\
    \ for all MGs\n   that belong to some arbitrary group.  MGCs may decide to share\
    \ the\n   load of managing a large MG between several independent processes.\n\
    \   These processes will share the same transaction number space.  There\n   are\
    \ multiple possible implementations of this sharing, such as having\n   a centralized\
    \ allocation of transaction identifiers, or pre-\n   allocating non-overlapping\
    \ ranges of identifiers to different\n   processes.  The implementations shall\
    \ guarantee that unique\n   transaction identifiers are allocated to all transactions\
    \ that\n   originate from a logical MGC (identical mId). MGs can simply detect\n\
    \   duplicate transactions by looking at the transaction identifier and\n   mId\
    \ only.\n"
- title: D.1.2.2 Three-way handshake
  contents:
  - "D.1.2.2 Three-way handshake\n   The TransactionResponse Acknowledgement parameter\
    \ can be found in any\n   message. It carries a set of \"confirmed transaction-id\
    \ ranges\".\n   Entities may choose to delete the copies of the responses to\n\
    \   transactions whose id is included in \"confirmed transaction-id\n   ranges\"\
    \ received in the transaction response messages. They should\n   silently discard\
    \ further commands when the transaction-id falls\n   within these ranges.\n  \
    \ The \"confirmed transaction-id ranges\" values shall not be used if\n   more\
    \ than LONG-TIMER seconds have elapsed since the MG issued its\n   last response\
    \ to that MGC, or when a MG resumes operation.  In this\n   situation, transactions\
    \ should be accepted and processed, without any\n   test on the transaction-id.\n\
    \   Messages that carry the \"Transaction Response Acknowledgement\"\n   parameter\
    \ may be transmitted in any order.  The entity shall retain\n   the \"confirmed\
    \ transaction-id ranges\" receivedfor LONG-TIMER seconds.\n   In the binary encoding,\
    \ if only the firstAck is present in a response\n   acknowledgement (see Annex\
    \ A.2), only one transaction is\n   acknowledged.  If both firstAck and lastAck\
    \ are present, then the\n   range of transactions from firstAck to lastAck is\
    \ acknowledged.  In\n   the text encoding, a horizontal dash is used to indicate\
    \ a range of\n   transactions being acknowledged (see Annex B.2).\n"
- title: D.1.3 Computing retransmission timers
  contents:
  - "D.1.3 Computing retransmission timers\n   It is the responsibility of the requesting\
    \ entity to provide suitable\n   time outs for all outstanding transactions, and\
    \ to retry transactions\n   when time outs have been exceeded. Furthermore, when\
    \ repeated\n   transactions fail to be acknowledged, it is the responsibility\
    \ of the\n   requesting entity to seek redundant services and/or clear existing\
    \ or\n   pending connections.\n   The specification purposely avoids specifying\
    \ any value for the\n   retransmission timers. These values are typically network\
    \ dependent.\n   The retransmission timers should normally estimate the timer\
    \ value by\n   measuring the time spent between the sending of a command and the\n\
    \   return of a response.\n   Note -  One possibility is to use the algorithm\
    \ implemented in TCP-\n   IP, which uses two variables:\n    .  The average acknowledgement\
    \ delay, AAD, estimated through an\n       exponentially smoothed average of the\
    \ observed delays.\n    .  The average deviation, ADEV, estimated through an exponentially\n\
    \       smoothed average of the absolute value of the difference between\n   \
    \    the observed delay and the current average.  The retransmission\n       timer,\
    \ in TCP, is set to the sum of the average delay plus N\n       times the average\
    \ deviation. The maximum value of the timer\n       should however be bounded\
    \ for the protocol defined in this\n       document, in order to guarantee that\
    \ no repeated packet would be\n       received by the gateways after LONG-TIMER\
    \ seconds.  A suggested\n       maximum value is 4 seconds.\n   After any retransmission,\
    \ the entity should do the following:\n    .  It should double the estimated value\
    \ of the average delay, AAD\n    .  It should compute a random value, uniformly\
    \ distributed between\n       0.5 AAD and AAD\n    .  It should set the retransmission\
    \ timer to the sum of that random\n       value and N times the average deviation.\n\
    \   This procedure has two effects. Because it includes an exponentially\n   increasing\
    \ component, it will automatically slow down the stream of\n   messages in case\
    \ of congestion. Because it includes a random\n   component, it will break the\
    \ potential synchronization between\n   notifications triggered by the same external\
    \ event.\n"
- title: D.1.4 Provisional responses
  contents:
  - "D.1.4 Provisional responses\n   Executing some transactions may require a long\
    \ time. Long execution\n   times may interact with the timer based retransmission\
    \ procedure.\n   This may result either in an inordinate number of retransmissions,\
    \ or\n   in timer values that become too long to be efficient. Entities that\n\
    \   can predict that a transaction will require a long execution time may\n  \
    \ send a provisional response, \"Transaction Pending\".\n   Entities that receive\
    \ a Transaction Pending shall switch to a\n   different repetition timer for repeating\
    \ requests.  The root\n   termination has a property (ProvisionalResponseTimerValue),\
    \ which can\n   be set to the requested maximum number of milliseconds between\n\
    \   receipt of a command and transmission of the TransactionPending\n   response.\
    \  Upon receipt of a final response, an immediate\n   confirmation shall be sent,\
    \ and normal repetition timers shall be\n   used thereafter.  Receipt of a Transaction\
    \ Pending after receipt of a\n   reply shall be ignored.\n"
- title: D.1.5 Repeating Requests, Responses and Acknowledgements
  contents:
  - "D.1.5 Repeating Requests, Responses and Acknowledgements\n   The protocol is\
    \ organized as a set of transactions, each of which is\n   composed request and\
    \ a response, commonly referred to as an\n   acknowledgement.  The protocol messages,\
    \ being carried over UDP, may\n   be subject to losses. In the absence of a timely\
    \ response,\n   transactions are repeated. Entities are expected to keep in memory\
    \ a\n   list of the responses that they sent to recent transactions, i.e. a\n\
    \   list of all the responses they sent over the last LONG-TIMER seconds,\n  \
    \ and a list of the transactions that are currently being executed.\n   The repetition\
    \ mechanism is used to guard against three types of\n   possible errors:\n   \
    \ .  transmission errors, when for example a packet is lost due to\n       noise\
    \ on a line or congestion in a queue;\n    .  component failure, when for example\
    \ an interface to a entity\n       becomes unavailable;\n    .  entity failure,\
    \ when for example an entire entity become\n       unavailable.\n   The entities\
    \ should be able to derive from the past history an\n   estimate of the packet\
    \ loss rate due to transmission errors.  In a\n   properly configured system,\
    \ this loss rate should be kept very low,\n   typically less than 1%.  If a Media\
    \ Gateway Controller or a Media\n   Gateway has to repeat a message more than\
    \ a few times, it is very\n   legitimate to assume that something else than a\
    \ transmission error is\n   occurring.  For example, given a loss rate of 1%,\
    \ the probability\n   that five consecutive transmission attempts fail is 1 in\
    \ 100 billion,\n   an event that should occur less than once every 10 days for\
    \ a Media\n   Gateway Controller that processes 1 000 transactions per second.\n\
    \   (Indeed, the number of repetition that is considered excessive should\n  \
    \ be a function of the prevailing packet loss rate.)  We should note\n   that\
    \ the \"suspicion threshold\", which we will call \"Max1\", is\n   normally lower\
    \ than the \"disconnection threshold\", which should be\n   set to a larger value.\n\
    \   A classic retransmission algorithm would simply count the number of\n   successive\
    \ repetitions, and conclude that the association is broken\n   after retransmitting\
    \ the packet an excessive number of times\n   (typically between 7 and 11 times.)\
    \ In order to account for the\n   possibility of an undetected or in-progress\
    \ \"failover\", we modify the\n   classic algorithm so that if the Media Gateway\
    \ receives a valid\n   ServiceChange message announcing a failover, it will start\n\
    \   transmitting outstanding commands to that new MGC.  Responses to\n   commands\
    \ are still transmitted to the source address of the command.\n   In order to\
    \ automatically adapt to network load, this document\n   specifies exponentially\
    \ increasing timers.  If the initial timer is\n   set to 200 milliseconds, the\
    \ loss of a fifth retransmission will be\n   detected after about 6 seconds. \
    \ This is probably an acceptable\n   waiting delay to detect a failover.   The\
    \ repetitions should continue\n   after that delay not only in order to perhaps\
    \ overcome a transient\n   connectivity problem, but also in order to allow some\
    \ more time for\n   the execution of a failover - waiting a total delay of 30\
    \ seconds is\n   probably acceptable.\n   It is, however, important that the maximum\
    \ delay of retransmissions\n   be bounded.  Prior to any retransmission, it is\
    \ checked that the time\n   elapsed since the sending of the initial datagram\
    \ is no greater than\n   T-MAX. If more than T-MAX time has elapsed, the MG concludes\
    \ that the\n   MGC has failed, and it begins its recovery process. When the MG\n\
    \   establishes a new control association, it can retransmit to the new\n   MGC.\
    \  Alternatively, a MG may use a ServiceChange with\n   ServiceChangeMethod equal\
    \ to disconnected to inform the new MGC that\n   the MG lost one or more transactions.\
    \  The value T-MAX is related to\n   the LONG-TIMER value: the LONG-TIMER value\
    \ is obtained by adding to\n   T-MAX the maximum propagation delay in the network.\n"
- title: D.2  using TCP
  contents:
  - "D.2  using TCP\n   Protocol messages as defined in this document may be transmitted\
    \ over\n   TCP.  When no port is specified by the other side (see section\n  \
    \ 7.2.8), the commands should be sent to the default port. The defined\n   protocol\
    \ has messages as the unit of transfer, while TCP is a\n   stream-oriented protocol.\
    \  TPKT, according to RFC1006 SHALL be used\n   to delineate messages within the\
    \ TCP stream.\n   In a transaction-oriented protocol, there are still ways for\n\
    \   transaction requests or responses to be lost.  As such, it is\n   recommended\
    \ that entities using TCP transport implement application\n   level timers for\
    \ each request and each response, similar to those\n   specified for application\
    \ level framing over UDP.\n"
- title: D.2.1 Providing the At-Most-Once functionality
  contents:
  - "D.2.1 Providing the At-Most-Once functionality\n   Messages, being carried over\
    \ TCP, are not subject to transport\n   losses, but loss of a transaction request\
    \ or its reply may\n   nonetheless be noted in real implementations. In the absence\
    \ of a\n   timely response, commands are repeated. Most commands are not\n   idempotent.\
    \  The state of the MG would become unpredictable if, for\n   example, Add commands\
    \ were executed several times.\n   To guard against such losses, it is recommended\
    \ that entities follow\n   the procedures in section D.1.1\n"
- title: D.2.2 Transaction identifiers and three way handshake
  contents:
  - "D.2.2 Transaction identifiers and three way handshake\n   For the same reasons,\
    \ it is possible that transaction replies may be\n   lost even with a reliable\
    \ delivery protocol such as TCP.  It is\n   recommended that entities follow the\
    \ procedures in section D.1.2.2.\n"
- title: D.2.3 Computing retransmission timers
  contents:
  - "D.2.3 Computing retransmission timers\n   With reliable delivery, the incidence\
    \ of loss of a transaction\n   request or reply is expected to be very low.  Therefore,\
    \ only simple\n   timer mechanisms are required. Exponential back-off algorithms\
    \ should\n   not be necessary, although they could be employed where, as in an\n\
    \   MGC, the code to do so is already required, since MGCs must implement\n  \
    \ ALF/UDP as well as TCP.\n"
- title: D.2.4 Provisional responses
  contents:
  - "D.2.4 Provisional responses\n   As with UDP, executing some transactions may\
    \ require a long time.\n   Entities that can predict that a transaction will require\
    \ a long\n   execution time may send a provisional response, \"Transaction\n \
    \  Pending\". They should send this response if they receive a repetition\n  \
    \ of a transaction that is still being executed.\n   Entities that receive a Transaction\
    \ Pending shall switch to a longer\n   repetition timer for that transaction.\n\
    \   Entities shall retain Transactions and replies until they are\n   confirmed.\
    \  The basic procedure of section D.1.4 should be followed,\n   but simple timer\
    \ values should be sufficient. There is no need to\n   send an immediate confirmation\
    \ upon receipt of a final response.\n"
- title: D.2.5 Ordering of commands
  contents:
  - "D.2.5 Ordering of commands\n   TCP provides ordered delivery of transactions.\
    \  No special procedures\n   are required.  It should be noted that ALF/UDP allows\
    \ sending entity\n   to modify its behavior under congestion, and in particular,\
    \ could\n   reorder transactions when congestion is encountered.  TCP could not\n\
    \   achieve the same results.\n"
- title: ANNEX E BASIC PACKAGES
  contents:
  - "ANNEX E BASIC PACKAGES\n   This Annex contains definitions of some packages for\
    \ use with the\n   Megaco protocol.\n"
- title: E.1 Generic
  contents:
  - "E.1 Generic\n   PackageID: g (0x000e)\n   Version: 1\n   Extends: None\n   Description:\
    \ Generic package for commonly encountered items.\n"
- title: E.1.1 Properties
  contents:
  - "E.1.1 Properties\n   None\n"
- title: E.1.2 Events
  contents:
  - "E.1.2 Events\n   Cause\n   -----\n   EventID:     cause (0x0001)\n   Generic\
    \ error event\n   ObservedEvents Descriptor Parameters:\n        General Cause\n\
    \        -------------\n        ParameterID: Generalcause (0x0001)\n        Description:\
    \ This parameter groups the failures into six\n        groups, which the MGC may\
    \ act upon.\n        Possible values:        Enumerated,\n                \"NR\"\
    \ Normal Release (0x0001)\n                \"UR\" Unavailable Resources (0x0002)\n\
    \                \"FT\" Failure, Temporary (0x0003)\n                \"FP\" Failure,\
    \ Permanent (0x0004)\n                \"IW\" Interworking Error (0x0005)\n   \
    \             \"UN\" Unsupported (0x0006)\n        Failure Cause\n        -------------\n\
    \        ParameterID: Failurecause (0x0002)\n        Description: The Release\
    \ Cause is the value generated by the\n        Released equipment, i.e. a released\
    \ network connection.\n        The concerned value is defined in the appropriate\
    \ bearer\n        control protocol.\n        Possible Values: OCTET STRING\n \
    \  Signal Completion\n   -----------------\n   EventID: sc (0x0002)\n   Indicates\
    \ termination of one or more signals for which the\n   notifyCompletion parameter\
    \ was set to \"ON\".  For further procedural\n   description, see sections 7.1.11,\
    \ 7.1.17, and 7.2.7.\n   ObservedEvents Descriptor parameters:\n        Signal\
    \ Identity\n        ---------------\n        ParameterID:  SigID (0x0001)\n  \
    \      This parameter identifies the signals which have terminated.\n        Type:\
    \ list\n        Possible values: a list of signals and/or sequential signal\n\
    \        lists which have terminated.  A signal outside of a sequential\n    \
    \    signal list shall be identified using the pkgdName syntax\n        without\
    \ wildcarding.  An individual signal inside of a\n        sequential signal list\
    \ shall be identified using the sequential\n        signal list syntax with the\
    \ correct signal list identifier,\n        enclosing the name of the specific\
    \ signal which terminated in\n        pkgdName syntax.\n        Termination Method\n\
    \        ------------------\n        ParameterID:  Meth (0x0002)\n        Indicates\
    \ the means by which the signal terminated.\n        Type: enumeration\n     \
    \   Possible values:\n                \"TO\" (0x0001) Duration expired\n     \
    \           \"EV\" (0x0002) Interrupted by event\n                \"SD\" (0x0003)\
    \ Halted by new Signals Descriptor\n                \"NC\" (0x0004) Not completed,\
    \ other cause\n"
- title: E.1.3 Signals
  contents:
  - "E.1.3 Signals\n   None\n"
- title: E.1.4 Statistics
  contents:
  - "E.1.4 Statistics\n   None\n"
- title: E.2 Base Root Package
  contents:
  - "E.2 Base Root Package\n   Base Root Package\n   PackageID: root (0x000f)\n  \
    \ Version: 1\n   Extends: None\n   Description: This package defines Gateway wide\
    \ properties.\n"
- title: E.2.1 Properties
  contents:
  - "E.2.1 Properties\n   MaxNrOfContexts\n   ---------------\n   PropertyID: maxNumberOfContexts\
    \ (0x0001)\n   The value of this property gives the maximum number of contexts\
    \ that\n   can exist at any time.  The NULL context is not included in this\n\
    \   number.\n   Type: Double\n   Possible values: 1 and up\n   MaxTerminationsPerContext\n\
    \   -------------------------\n   PropertyID: maxTerminationsPerContext (0x0002)\n\
    \   The maximum number of allowed terminations in a context, see section\n   6.1\n\
    \   Type: Integer\n   Possible Values: any integer\n   Defined In: TerminationState\n\
    \   normalMGExecutionTime\n   ---------------------\n   PropertyId: normalMGExecutionTime\
    \ (0x0003)\n   Settable by the MGC to indicate the interval within which the MGC\n\
    \   expects a response to any transaction from the MG (exclusive of\n   network\
    \ delay)\n   Type: Integer\n   Possible Values: any integer, represents milliseconds\n\
    \   normalMGCExecutionTime\n   ----------------------\n   PropertyId: normalMGCExecutionTime\
    \ (0x0004)\n   Settable by the MGC to indicate the interval within which the MG\n\
    \   should expects a response to any transaction from the MGC (exclusive\n   of\
    \ network delay)\n   Type: Integer\n   Possible Values: any integer, represents\
    \ milliseconds\n   ProvisionalResponseTimerValue\n   -----------------------------\n\
    \   PropertyId: ProvisionalResponseTimerValue (0x0005)\n   Indicates the time\
    \ within which to expect a Pending Response if a\n   Transaction cannot be completed.\
    \  Initially set to\n   normalMGExecutionTime or normalMGCExecutionTime as appropriate,\
    \ plus\n   network delay, but may be lowered.\n"
- title: E.2.2 Events
  contents:
  - "E.2.2 Events\n   None\n"
- title: E.2.3 Signals
  contents:
  - "E.2.3 Signals\n   None\n"
- title: E.2.4 Statistics
  contents:
  - "E.2.4 Statistics\n   None\n"
- title: E.2.5 Procedures
  contents:
  - "E.2.5 Procedures\n   None\n"
- title: E.3 Tone Generator Package
  contents:
  - "E.3 Tone Generator Package\n   PackageID: tonegen (0x0001)\n   Version: 1\n \
    \  Extends: None\n   Description:\n   This package defines signals to generate\
    \ audio tones. This package\n   does not specify parameter values. It is intended\
    \ to be extendable.\n   Generally, tones are defined as an individual signal with\
    \ a\n   parameter, ind, representing \"interdigit\" time delay, and a tone id\n\
    \   to be used with playtones.  A tone id should be kept consistent with\n   any\
    \ tone generation for the same tone. MGs are expected to be\n   provisioned with\
    \ the characteristics of appropriate tones for the\n   country in which the MG\
    \ is located.\n"
- title: E.3.1 Properties
  contents:
  - "E.3.1 Properties\n   None\n"
- title: E.3.2 Events
  contents:
  - "E.3.2 Events\n   None\n"
- title: E.3.3 Signals
  contents:
  - "E.3.3 Signals\n   Play tone\n   ---------\n   SignalID: pt (0x0001)\n   Plays\
    \ audio tone over an audio channel\n   Signal Type: Brief\n   Duration: Provisioned\n\
    \   Additional Parameters:\n        Tone id list\n        ------------\n     \
    \   ParameterID: tl (0x0001)\n        Type: list of tone ids.\n        List of\
    \ tones to be played in sequence. The list  SHALL contain\n        one or more\
    \ tone ids.\n        Inter signal duration\n        ---------------------\n  \
    \      ParameterID: ind (0x0002)\n        Type: integer.\n        Timeout between\
    \ two consecutive tones in milliseconds\n   No tone ids are specified in this\
    \ package. Packages that extend this\n   package can add possible values for tone\
    \ id as well as adding\n   individual tone signals.\n"
- title: E.3.4 Statistics
  contents:
  - "E.3.4 Statistics\n   None\n"
- title: E.3.5 Procedures
  contents:
  - "E.3.5 Procedures\n   None\n"
- title: E.4 Tone Detection Package
  contents:
  - "E.4 Tone Detection Package\n   PackageID: tonedet (0x0002)\n   Version: 1\n \
    \  Extends: None\n   This Package defines events for audio tone detection. Tones\
    \ are\n   selected by name (tone id). MGs are expected to be provisioned with\n\
    \   the characteristics of appropriate tones for the country in which the\n  \
    \ MG is located.\n   This package does not specify parameter values. It is intended\
    \ to be\n   extendable.\n"
- title: E.4.1 Properties
  contents:
  - "E.4.1 Properties\n   None\n"
- title: E.4.2 Events
  contents:
  - "E.4.2 Events\n   Start tone detected\n   -------------------\n   EventID: std,\
    \ 0x0001\n   Detects the start of a tone. The characteristics of positive tone\n\
    \   detection is implementation dependent.\n   EventsDescriptor parameters:\n\
    \        Tone id list\n        ------------\n        ParameterID: tl (0x0001)\n\
    \        Type:  list of tone ids\n        Possible values: The only tone id defined\
    \ in this package is\n        \"wild card\" which is \"*\" in text encoding and\
    \ 0x0000 in binary.\n        Extensions to this package would add possible values\
    \ for tone\n        id. If tl is \"wild card\", any tone id is detected.\n   ObservedEventsDescriptor\
    \ parameters:\n        Tone id\n        --------\n        ParameterID: tid (0x0003)\n\
    \        Type: Enumeration\n        Possible values: \"wildcard\" as defined above\
    \ is the only value\n        defined in this package. Extensions to this package\
    \ would add\n        additional possible values for tone id.\n   End tone detected\n\
    \   -----------------\n   EventID: etd, 0x0002\n   Detects the end of a tone.\n\
    \   EventDescriptor parameters:\n        Tone id list\n        ------------\n\
    \        ParameterID: tl (0x0001)\n        Type: enumeration or list of enumerated\
    \ types\n        Possible values: No possible values are specified in this\n \
    \       package. Extensions to this package would add possible values\n      \
    \  for tone id.\n   ObservedEventsDescriptor parameters:\n        Tone id\n  \
    \      -------\n        ParameterID: tid (0x0003)\n        Type: Enumeration\n\
    \        Possible values: \"wildcard\" as defined above is the only value\n  \
    \      defined in this package. Extensions to this package would add\n       \
    \ possible values for tone id\n        Duration\n        --------\n        ParameterId:\
    \ dur (0x0002)\n        Type: integer, in milliseconds\n        This parameter\
    \ contains the duration of the tone from first\n        detection until it stopped.\n\
    \   Long tone detected\n   ------------------\n   EventID: ltd, 0x0003\n   Detects\
    \ that a tone has been playing for at least a certain amount of\n   time\n   EventDescriptor\
    \ parameters:\n        Tone id list\n        ------------\n        ParameterID:\
    \ tl (0x0001)\n        Type: enumeration or list\n        Possible values: \"\
    wildcard\" as defined above is the only value\n        defined in this package.\
    \ Extensions to this package would add\n        possible values for tone id\n\
    \        Duration:\n        ---------\n        ParameterID: dur (0x0002)\n   \
    \     Type: integer, duration to test against\n        Possible values: any legal\
    \ integer, expressed in milliseconds.\n   ObservedEventsDescriptor parameters:\n\
    \        Tone id\n        -------\n        ParameterID: tid (0x0003)\n       \
    \ Possible values: No possible values are specified in this\n        package.\
    \ Extensions to this package would add possible values\n        for tone id.\n"
- title: E.4.3 Signals
  contents:
  - "E.4.3 Signals\n   None\n"
- title: E.4.4 Statistics
  contents:
  - "E.4.4 Statistics\n   None\n"
- title: E.4.5 Procedures
  contents:
  - "E.4.5 Procedures\n   None\n"
- title: E.5 Basic DTMF Generator Package
  contents:
  - "E.5 Basic DTMF Generator Package\n   PackageID: dg (0x0003) Version: 1 Extends:\
    \ tonegen version 1\n   This package defines the basic DTMF tones as signals and\
    \ extends the\n   allowed values of parameter tl of playtone in tonegen.\n"
- title: E.5.1 Properties
  contents:
  - "E.5.1 Properties\n   None\n"
- title: E.5.2 Events
  contents:
  - "E.5.2 Events\n   None\n"
- title: E.5.3 Signals
  contents:
  - "E.5.3 Signals\n   dtmf character 0\n   ----------------\n   SignalID: d0 (0x0010)\n\
    \   Generate DTMF 0 tone. The physical characteristic of DTMF 0 is\n   defined\
    \ in the gateway.\n   Signal Type: Brief\n   Duration: Provisioned\n   Additional\
    \ Parameters:\n   None\n   Additional Values:\n   -----------------\n   d0 (0x0010)\
    \ is defined as a toneid for playtone.\n   The other dtmf characters are specified\
    \ in exactly the same way. A\n   table with all signal names and signal IDs is\
    \ included.  Note that\n   each dtmf character is defined as both a signal and\
    \ a toneid, thus\n   extending the basic tone generation package.  Also note that\
    \ dtmf\n   SignalIds are different from the names used in a digit map.\n     \
    \           Signal Name         Signal ID/tone id\n                dtmf character\
    \ 0    d0 (0x0010)\n                dtmf character 1    d1 (0x0011)\n        \
    \        dtmf character 2    d2 (0x0012)\n                dtmf character 3   \
    \ d3 (0x0013)\n                dtmf character 4    d4 (0x0014)\n             \
    \   dtmf character 5    d5 (0x0015)\n                dtmf character 6    d6 (0x0016)\n\
    \                dtmf character 7    d7 (0x0017)\n                dtmf character\
    \ 8    d8 (0x0018)\n                dtmf character 9    d9 (0x0019)\n        \
    \        dtmf character *    ds (0x0020)\n                dtmf character #   \
    \ do (0x0021)\n                dtmf character A    da (0x001a)\n             \
    \   dtmf character B    db (0x001b)\n                dtmf character C    dc (0x001c)\n\
    \                dtmf character D    dd (0x001d)\n"
- title: E.5.4 Statistics
  contents:
  - "E.5.4 Statistics\n   None\n"
- title: E.5.5 Procedures
  contents:
  - "E.5.5 Procedures\n   None\n"
- title: E.6 DTMF detection Package
  contents:
  - "E.6 DTMF detection Package\n   PackageID: dd (0x0004)\n   Version: 1\n   Extends:\
    \ tonedet version 1\n   This package defines the basic DTMF tones detection. This\
    \ Package\n   extends the possible values of tone id in the \"start tone detected\"\
    \n   \"end tone detected\" and \"long tone detected\" events.\n   Additional tone\
    \ id values are all tone ids described in package dg\n   (basic DTMF generator\
    \ package).\n   The following table maps DTMF events to digit map symbols as\n\
    \   described in section 7.1.14.\n                DTMF                Event  Symbol\n\
    \                d0                  \"0\"\n                d1               \
    \   \"1\"\n                d2                  \"2\"\n                d3     \
    \             \"3\"\n                d4                  \"4\"\n             \
    \   d5                  \"5\"\n                d6                  \"6\"\n   \
    \             d7                  \"7\"\n                d8                  \"\
    8\"\n                d9                  \"9\"\n                da           \
    \       \"A\" or \"a\"\n                db                  \"B\" or \"b\"\n \
    \               dc                  \"C\" or \"c\"\n                dd       \
    \           \"D\" or \"d\"\n                ds                  \"E\" or \"e\"\
    \n                do                  \"F\" or \"f\"\n"
- title: E.6.1 Properties
  contents:
  - "E.6.1 Properties\n   None\n"
- title: E.6.2 Events
  contents:
  - "E.6.2 Events\n   DTMF digits\n   -----------\n   EventIds are defined with the\
    \ same names as the SignalIds defined in\n   the table found in section E.5.3.\n\
    \   DigitMap Completion Event\n   -------------------------\n   EventID: ce, 0x0001\n\
    \   Generated when a digit map completes as described in section 7.1.14.\n   EventsDescriptor\
    \ parameters: digit map processing is activated only\n   if a digit map parameter\
    \ is present, specifying a digit map by name\n   or by value.  Other parameters\
    \ such as a KeepActive flag or embedded\n   Events or Signals Descriptors may\
    \ be present.\n   ObservedEventsDescriptor parameters:\n        DigitString\n\
    \        -----------\n        ParameterID: ds (0x0001)\n        Type: string of\
    \ digit map symbols (possibly empty) returned as\n        a quotedString.\n  \
    \      Possible values: a sequence of the characters \"0\" through \"9\",\n  \
    \      \"A\" through \"F\", and the long duration modifier \"L\".\n        Description:\
    \ the portion of the current dial string as\n        described in section 7.1.14\
    \ which matched part or all of an\n        alternative event sequence specified\
    \ in the digit map.\n        Termination Method\n        ------------------\n\
    \        ParameterID:    Meth (0x0003)\n        Type: enumeration\n        Possible\
    \ values:\n                \"UM\" (0x0001) Unambiguous match\n               \
    \ \"PM\"  (0x0002) Partial match, completion by timer\n                expiry\
    \ or unmatched event\n                \"FM\"  (0x0003) Full match, completion\
    \ by timer expiry\n                or unmatched event\n        Description: indicates\
    \ the reason for generation of the event.\n        See the procedures in section\
    \ 7.1.14.\n"
- title: E.6.3 Signals
  contents:
  - "E.6.3 Signals\n   None\n"
- title: E.6.4 Statistics
  contents:
  - "E.6.4 Statistics\n   None\n"
- title: E.6.5 Procedures
  contents:
  - "E.6.5 Procedures\n   None\n"
- title: E.7 Call Progress Tones Generator Package
  contents:
  - "E.7 Call Progress Tones Generator Package\n   PackageID: cg, 0x0005\n   Version:\
    \ 1\n   Extends: tonegen version 1\n   This package defines the basic call progress\
    \ tones as signals and\n   extends the allowed values of the tl parameter of playtone\
    \ in\n   tonegen.\n"
- title: E.7.1 Properties
  contents:
  - "E.7.1 Properties\n   None\n"
- title: E.7.2 Events
  contents:
  - "E.7.2 Events\n   None\n"
- title: E.7.3 Signals
  contents:
  - "E.7.3 Signals\n   Dial Tone\n   ---------\n   SignaID: dt (0x0030)\n   Generate\
    \ dial tone. The physical characteristic of dial tone is\n   available in the\
    \ gateway.\n   Signal Type: Timeout\n   Duration: Provisioned\n   Additional Parameters:\n\
    \   None\n   Additional Values\n   -----------------\n   dt (0x0030) is defined\
    \ as a tone id for playtone The other tones of\n   this package are defined in\
    \ exactly the same way.  A table with all\n   signal names and  signal IDs is\
    \ included.  Note that each tone is\n   defined as both a signal and a toneid,\
    \ thus extending the basic tone\n   generation package.\n            Signal Name\
    \                 Signal ID/tone id\n            Dial Tone                   dt\
    \ (0x0030)\n            Ringing Tone                rt (0x0031)\n            Busy\
    \ Tone                   bt (0x0032)\n            Congestion Tone            \
    \ ct (0x0033)\n            Special Information Tone    sit(0x0034)\n         \
    \   Warning Tone                wt (0x0035)\n            Payphone Recognition\
    \ Tone   pt (0x0036)\n            Call Waiting Tone           cw (0x0037)\n  \
    \          Caller Waiting Tone         cr (0x0038)\n"
- title: E.7.4 Statistics
  contents:
  - "E.7.4 Statistics\n   None\n"
- title: E.7.5 Procedures
  contents:
  - "E.7.5 Procedures\n   NOTE -  The required set of tone ids corresponds to those\
    \ defined in\n   Recommendation E.180/Q.35 [ITU-T Recommendation E.180/Q.35 (1998)].\n\
    \   See E.180 for definition of the meanings of these tones.\n"
- title: E.8 Call Progress Tones Detection Package
  contents:
  - "E.8 Call Progress Tones Detection Package\n   PackageID: cd (0x0006)\n   Version:\
    \ 1\n   Extends: tonedet version 1\n   This package defines the basic call progress\
    \ detection tones. This\n   Package extends the possible values of tone id in\
    \ the \"start tone\n   detected\", \"end tone detected\" and \"long tone detected\"\
    \ events.\n   Additional values\n   -----------------\n   tone id values are defined\
    \ for start tone detected, end tone detected\n   and long tone detected with the\
    \ same values as those in package cg\n   (call progress tones generation package).\n\
    \   The required set of tone ids corresponds to Recommendation E.180/Q.35\n  \
    \ [ITU-T Recommendation E.180/Q.35 (1998)].  See Recommendation\n   E.180/Q.35\
    \ for definition of the meanings of these tones.\n"
- title: E.8.1 Properties
  contents:
  - "E.8.1 Properties\n   none\n"
- title: E.8.2 Events
  contents:
  - "E.8.2 Events\n   Events are defined as in the call progress tones generator package\n\
    \   (cg) for the tones listed in the table of section E.7.3\n"
- title: E.8.3 Signals
  contents:
  - "E.8.3 Signals\n   none\n"
- title: E.8.4 Statistics
  contents:
  - "E.8.4 Statistics\n   none\n"
- title: E.8.5 Procedures
  contents:
  - "E.8.5 Procedures\n   none\n"
- title: E.9 Analog Line Supervision Package
  contents:
  - "E.9 Analog Line Supervision Package\n   PackageID: al, 0x0009\n   Version: 1\n\
    \   Extends: None\n   This package defines events and signals for an analog line.\n"
- title: E.9.1 Properties
  contents:
  - "E.9.1 Properties\n   None\n"
- title: E.9.2 Events
  contents:
  - "E.9.2 Events\n   onhook\n   ------\n   EventID: on (0x0004)\n   Detects handset\
    \ going on hook. Whenever an events descriptor is\n   activated that requests\
    \ monitoring for an on-hook event and the line\n   is already on-hook, then the\
    \ MG shall immediately generate an on-hook\n   event.\n   EventDescriptor parameters\n\
    \   None\n   ObservedEventsDescriptor parameters\n   None\n   offhook\n   -------\n\
    \   EventID: of (0x0005)\n   Detects handset going off hook. Whenever an events\
    \ descriptor is\n   activated that requests monitoring for an off-hook event and\
    \ the line\n   is already off-hook, then the MG shall immediately generate an\
    \ off-\n   hook event.\n   EventDescriptor parameters\n   None\n   ObservedEventsDescriptor\
    \ parameters\n   None\n   flashhook\n   ---------\n   EventID: fl, 0x0006\n  \
    \ Detects handset flash. A flash occurs when an onhook is followed by\n   an offhook\
    \ between a minimum and maximum duration.\n   EventDescriptor parameters\n   \
    \     Minimum duration\n        ----------------\n        ParameterID: mindur\
    \ (0x0004)\n        Type: integer in milliseconds\n        Default value is provisioned\n\
    \        Maximum duration\n        ----------------\n        ParameterID: maxdur\
    \ (0x0005)\n        Type: integer in milliseconds\n        Default value is provisioned\n\
    \   ObservedEventsDescriptor parameters\n   None\n"
- title: E.9.3 Signals
  contents:
  - "E.9.3 Signals\n   ring\n   ----\n   SignalID: ri, 0x0002\n   Applies ringing\
    \ on the line\n   Signal Type: TimeOut\n   Duration: Provisioned\n   Additional\
    \ Parameters:\n        Cadence\n        -------\n        ParameterID: cad (0x0006)\n\
    \        Type: list of integers representing durations of alternating on\n   \
    \     and off segments, constituting a complete ringing cycle\n        starting\
    \ with an on. Units in milliseconds.\n        Default is fixed or provisioned.\
    \  Restricted function MGs may\n        ignore cadence  values they are incapable\
    \ of generating.\n        Frequency\n        ---------\n        ParameterID: freq\
    \ (0x0007)\n        Type: integer in Hz\n        Default is fixed or provisioned.\
    \  Restricted function MGs may\n        ignore frequency  values they are incapable\
    \ of generating.\n"
- title: E.9.4 Statistics
  contents:
  - "E.9.4 Statistics\n   None\n"
- title: E.9.5 Procedures
  contents:
  - "E.9.5 Procedures\n   None\n"
- title: E.10 Basic Continuity Package
  contents:
  - "E.10 Basic Continuity Package\n   PackageID: ct (0x000a)\n   Version: 1\n   Extends:\
    \ None\n   This package defines events and signals for continuity test. The\n\
    \   continuity test includes provision of either a loopback or\n   transceiver\
    \ functionality.\n"
- title: E.10.1 Properties
  contents:
  - "E.10.1 Properties\n   None\n"
- title: E.10.2 Events
  contents:
  - "E.10.2 Events\n   Completion\n   ----------\n   EventID: cmp, 0x0005\n   This\
    \ event detects test completion of continuity test.\n   EventDescriptor parameters\n\
    \   None\n   ObservedEventsDescriptor parameters\n        Result\n        ------\n\
    \        ParameterID: res (0x0008)\n        Type: Enumeration\n        Possible\
    \ values: success (0x0001), failure (0x0000)\n"
- title: E.10.3 Signals
  contents:
  - "E.10.3 Signals\n   Continuity test\n   ---------------\n   SignalID: ct (0x0003)\n\
    \   Initiates sending of continuity test tone on the termination to which\n  \
    \ it is applied.\n   Signal Type: TimeOut\n   Default value is provisioned\n \
    \  Additional Parameters:\n   None\n   Respond\n   -------\n   SignalID: rsp (0x0004)\n\
    \   The signal is used to respond to a continuity test .  See section\n   E.10.5\
    \ for further explanation.\n   Signal Type: TimeOut\n   Default duration is provisioned\n\
    \   Additional Parameters:\n   None.\n"
- title: E.10.4 Statistics
  contents:
  - "E.10.4 Statistics\n   None\n"
- title: E.10.5 Procedures
  contents:
  - "E.10.5 Procedures\n   When a MGC wants to initiate a continuity test, it sends\
    \ a command to\n   the MG containing\n    .  a signals descriptor with the ct\
    \ signal, and\n    .  an events descriptor containing the cmp event.\n   Upon\
    \ reception of a command containing the ct signal and cmp event,\n   the MG initiates\
    \ the continuity test tone for the specified\n   termination.  If the return tone\
    \ is detected before the signal times\n   out, the cmp event shall be generated\
    \ with the value of the result\n   parameter equal to success.  In all other cases,\
    \ the cmp event shall\n   be generated with the value of the result parameter\
    \ equal to failure.\n   When a MGC wants the MG to respond to a continuity test,\
    \ it sends a\n   command to the MG containing a signals descriptor with the rsp\n\
    \   signal.  Upon reception of a command with the rsp signal, the MG\n   awaits\
    \ reception of the continuity test tone.  When the tone is\n   received before\
    \ the rsp signal times out, the MG returns the\n   applicable return tone.  If\
    \ the rsp signal times out, the MG removes\n   the detection and the return tone\
    \ (if that was playing).\n   When a continuity test is performed on a termination,\
    \ no echo devices\n   or codecs shall be active on that termination.\n   Performing\
    \ voice path assurance as part of continuity testing is\n   provisioned by bilateral\
    \ agreement between network operators.\n"
- title: E.11 Network Package
  contents:
  - "E.11 Network Package\n   PackageID: nt (0x000b)\n   Version: 1\n   Extends: None\n\
    \   This package defines properties of network terminations independent\n   of\
    \ network type.\n"
- title: E.11.1 Properties
  contents:
  - "E.11.1 Properties\n   Maximum Jitter Buffer\n   ---------------------\n   PropertyID:\
    \ jit (0x0007)\n   This property puts a maximum size on the jitter buffer.\n \
    \  Type: integer in milliseconds\n   Possible Values: This property is specified\
    \ in milliseconds.\n   Defined In: LocalControlDescriptor\n   Characteristics:\
    \ read/write\n"
- title: E.11.2 Events
  contents:
  - "E.11.2 Events\n   network failure\n   ---------------\n   EventID: netfail, 0x0005\n\
    \   The termination generates this event upon detection of a failure due\n   to\
    \ external or internal network reasons.\n   EventDescriptor parameters\n   None\n\
    \   ObservedEventsDescriptor parameters\n   cause\n   -----\n   ParameterID: cs\
    \ (0x0001)\n   Type: String\n   Possible values: any text string\n   This parameter\
    \ may be included with the failure event to provide\n   diagnostic information\
    \ on the reason of failure.\n   quality alert\n   -------------\n   EventID: qualert,\
    \ 0x0006\n   This property allows the MG to indicate a loss of quality of the\n\
    \   network connection. The MG may do this by measuring packet loss,\n   interarrival\
    \ jitter, propogation delay and then indicating this using\n   a percentage of\
    \ quality loss.\n   EventDescriptor parameters\n        Threshold\n        ---------\n\
    \        ParameterId: th (0x0001)\n        Type: integer\n        Possible Values:\
    \ threshold for percent of quality loss\n        measured, calculated based on\
    \ a provisioned method, that could\n        take into consideration packet loss,\
    \ jitter, and delay for\n        example.  Event is triggered when calculation\
    \ exceeds the\n        threshold.\n   ObservedEventsDescriptor parameters\n  \
    \      Threshold\n        ---------\n        ParameterId: th (0x0001)\n      \
    \  Type: integer\n        Possible Values: percent of quality loss measured, calculated\n\
    \        based on a provisioned method, that could take into\n        consideration\
    \ packet loss, jitter, and delay for example.\n"
- title: E.11.3 Signals
  contents:
  - "E.11.3 Signals\n   none\n"
- title: E.11.4 Statistics
  contents:
  - "E.11.4 Statistics\n   Duration\n   --------\n   StatisticsID: dur (0x0001)\n\
    \   Description: Provides duration of time the termination has been in\n   the\
    \ context.\n   Type: Double, in milliseconds\n   Octets Sent\n   -----------\n\
    \   StatisticID: os (0x0002)\n   Type: double\n   Possible Values: any 64 bit\
    \ integer\n   Octets Received\n   ---------------\n   StatisticID: or (0x0003)\n\
    \   Type: double\n   Possible Values: any 64 bit integer\n"
- title: E.11.5 Procedures
  contents:
  - "E.11.5 Procedures\n   none\n"
- title: E.12 RTP  Package
  contents:
  - "E.12 RTP  Package\n   PackageID: rtp (0x000c)\n   Version: 1\n   Extends: Network\
    \ Package version 1\n   This package is used to support packet based multimedia\
    \ data transfer\n   by means of the Real-time Transport Protocol (RTP) [RFC 1889].\n"
- title: E.12.1 Properties
  contents:
  - "E.12.1 Properties\n   None\n"
- title: E.12.2 Events
  contents:
  - "E.12.2 Events\n   Payload Transition EventID: pltrans, 0x0001 This event detects\
    \ and\n   notifies when there is a transition of the RTP payload format from\n\
    \   one format to another.\n   EventDescriptor parameters\n   None\n   ObservedEventsDescriptor\
    \ parameters\n        rtppayload\n        ----------\n        ParameterID: rtppltype,\
    \ 0x01\n        Type: list of enumerated types.\n        Possible values: The\
    \ encoding method shall be specified by\n        using one or several valid encoding\
    \ names, as defined in the\n        RTP AV Profile or registered with IANA.\n"
- title: E.12.3 Signals
  contents:
  - "E.12.3 Signals\n   None\n"
- title: E.12.4 Statistics
  contents:
  - "E.12.4 Statistics\n   Packets Sent ------------ StatisticID: ps (0x0004)\n  \
    \ Type: double\n   Possible Values: any 64 bit integer\n   Packets Received ----------------\
    \ StatisticID: pr (0x0005)\n   Type: double\n   Possible Values: any 64 bit integer\n\
    \   Packet Loss ----------- StatisticID: pl (0x0006)\n   Describes the current\
    \ rate of packet loss on an RTP stream, as\n   defined in IETF RFC 1889. Packet\
    \ loss is expressed as percentage\n   value: number of packets lost in the interval\
    \ between two reception\n   reports, divided by the number of packets expected\
    \ during that\n   interval.\n   Type: double\n   Possible Values: a 32 bit whole\
    \ number and a 32 bit fraction.\n   Jitter\n   ------\n   StatisticID: jit (0x0007)\n\
    \   Requests the current value of the interarrival jitter on an RTP\n   stream\
    \ as defined in IETF RFC 1889. Jitter measures the variation in\n   interarrival\
    \ time for RTP data packets.\n   Delay\n   -----\n   StatisticID:delay (0x0008)\n\
    \   Requests the current value of packet propagation delay expressed in\n   timestamp\
    \ units. Same as average latency.\n"
- title: E.12.5 Procedures
  contents:
  - "E.12.5 Procedures\n   none\n"
- title: E.13 TDM Circuit Package
  contents:
  - "E.13 TDM Circuit Package\n   PackageID: tdmc (0x000d)\n   Version: 1\n   Extends:\
    \ Network Package version 1\n   This package is used to support TDM circuit terminations.\n"
- title: E.13.1 Properties
  contents:
  - "E.13.1 Properties\n   Echo Cancellation\n   -----------------\n   PropertyID:\
    \ ec (0x0008)\n   By default, the telephony gateways always perform echo cancellation.\n\
    \   However, it is necessary, for some calls, to turn off these\n   operations.\n\
    \   Type: boolean\n   Possible Values:\n        \"on\" (when the echo cancellation\
    \ is requested) and\n        \"off\" (when it is turned off.)\n   The default\
    \ is \"on\".\n   Defined In: LocalControlDescriptor\n   Characteristics: read/write\n\
    \   Gain Control\n   ------------\n   PropertyID: gain (0x000a)\n   Gain control,\
    \ or usage of of signal level adaptation and noise level\n   reduction is used\
    \ to adapt the level of the signal. However, it is\n   necessary, for example\
    \ for modem calls, to turn off this function.\n   Type: enumeration (integer)\n\
    \   Possible Values:\n   The gain control parameter may either be specified as\
    \ \"automatic\"\n   (0xffffffff), or as an explicit number of decibels of gain\
    \ (any other\n   integer value).  The default is provisioned in the MG.\n   Defined\
    \ In: LocalControlDescriptor\n   Characteristics: read/write\n"
- title: E.13.2 Events
  contents:
  - "E.13.2 Events\n   none\n"
- title: E.13.3 Signals
  contents:
  - "E.13.3 Signals\n   none\n"
- title: E.13.4 Statistics
  contents:
  - "E.13.4 Statistics\n   None\n"
- title: E.13.5 Procedures
  contents:
  - "E.13.5 Procedures\n   None\n"
- title: APPENDIX A EXAMPLE CALL FLOWS (INFORMATIVE)
  contents:
  - "APPENDIX A EXAMPLE CALL FLOWS (INFORMATIVE)\n   All Megaco implementors must\
    \ read the normative part of this document\n   carefully before implementing from\
    \ it. No one should use the examples\n   in this section as stand-alone explanations\
    \ of how to create protocol\n   messages.\n   The examples in this section use\
    \ SDP for encoding of the Local and\n   Remote stream descriptors. SDP is defined\
    \ in RFC 2327. If there is\n   any discrepancy between the SDP in the examples,\
    \ and RFC 2327, the\n   RFC should be consulted for correctness. Audio profiles\
    \ used are\n   those defined in RFC 1890, and others registered with IANA. For\n\
    \   example, G.711 A-law is called PCMA in the SDP, and is assigned\n   profile\
    \ 0. G.723 is profile 4, and H263 is profile 34. See also\n        http://www.iana.org/numbers.htm#R\n"
- title: A.1 Residential Gateway to Residential Gateway Call
  contents:
  - "A.1 Residential Gateway to Residential Gateway Call\n   This example scenario\
    \ illustrates the use of the elements of the\n   protocol to set up a Residential\
    \ Gateway to Residential Gateway call\n   over an IP-based network.  For simplicity,\
    \ this example assumes that\n   both Residential Gateways involved in the call\
    \ are controlled by the\n   same Media Gateway Controller.\n"
- title: A.1.1 Programming Residential GW Analog Line Terminations for Idle
  contents:
  - "A.1.1 Programming Residential GW Analog Line Terminations for Idle\n      Behavior\n\
    \   The following illustrates the API invocations from the Media Gateway\n   Controller\
    \ and Media Gateways to get the Terminations in this\n   scenario programmed for\
    \ idle behavior.  Both the originating and\n   terminating Media Gateways have\
    \ idle AnalogLine Terminations\n   programmed to look for call initiation events\
    \ (i.e.-offhook) by using\n   the Modify Command with the appropriate parameters.\
    \  The null Context\n   is used to indicate that the Terminations are not yet\
    \ involved in a\n   Context. The ROOT termination is used to indicate the entire\
    \ MG\n   instead of a termination within the MG.\n   In this example, MG1 has\
    \ the IP address 124.124.124.222, MG2 is\n   125.125.125.111, and the MGC is 123.123.123.4.\
    \ The default Megaco\n   port is 55555 for all three.\n   1. An MG registers with\
    \ an MGC using the ServiceChange command:\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]\n\
    \   Transaction = 9998 {\n       Context = - {\n           ServiceChange = ROOT\
    \ {Services {\n               Method=Restart,\n               ServiceChangeAddress=55555,\
    \ Profile=ResGW/1}\n           }\n       }\n   }\n   2. The MGC sends a reply:\n\
    \   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\n   Reply = 9998 {\n      Context\
    \ = - {ServiceChange = ROOT {\n        Services {ServiceChangeAddress=55555, Profile=ResGW/1}\
    \ } }\n   }\n   3. The MGC programs a Termination in the NULL context. The\n \
    \  terminationId is A4444, the streamId is 1, the requestId in the\n   Events\
    \ descriptor is 2222. The   mId is the identifier of the sender\n   of this message,\
    \ in this case, it is the IP address and port\n   [123.123.123.4]:55555. Mode\
    \ for this stream is set to SendReceive.\n   \"al\" is the analog line supervision\
    \ package.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\n   Transaction\
    \ = 9999 {\n       Context = - {\n           Modify = A4444 {\n              \
    \ Media { Stream = 1 {\n                        LocalControl {\n             \
    \               Mode = SendReceive,\n                            ds0/gain=2, \
    \ ; in dB,\n                            ds0/ec=G165\n                        },\n\
    \                        Local {\n   v=0\n   c=IN IP4 $\n   m=audio $ RTP/AVP\
    \ 0\n   a=fmtp:PCMU VAD=X-NNVAD ; special voice activity\n                   \
    \        ; detection algorithm\n                        }\n                  \
    \  }\n               },\n               Events = 2222 {al/of}\n           }\n\
    \       }\n   }\n   The dialplan script could have been loaded into the MG previously.\n\
    \   Its function would be to wait for the OffHook, turn on dialtone and\n   start\
    \ collecting DTMF digits. However in this example, we use the\n   digit map, which\
    \ is put into place after the offhook is detected\n   (step 5 below).\n   Note\
    \ that the embedded EventsDescriptor could have been used to\n   combine steps\
    \ 3 and 4 with steps 8 and 9, eliminating steps 6 and 7.\n   4. The MG1 accepts\
    \ the Modify with this reply:\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\n\
    \   Reply = 9999 {\n      Context = - {Modify = A4444}\n   }\n   5. A similar\
    \ exchange happens between MG2 and the MGC, resulting in\n   an idle Termination\
    \ called A5555.\n"
- title: A.1.2 Collecting Originator Digits and Initiating Termination
  contents:
  - "A.1.2 Collecting Originator Digits and Initiating Termination\n   The following\
    \ builds upon the previously shown conditions.  It\n   illustrates the transactions\
    \ from the Media Gateway Controller and\n   originating Media Gateway (MG1) to\
    \ get the originating Termination\n   (A4444) through the stages of digit collection\
    \ required to initiate a\n   connection to the terminating Media Gateway (MG2).\n\
    \   6. MG1 detects an offhook event from User 1 and reports it to the\n   Media\
    \ Gateway Controller via the Notify Command.\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\n\
    \   Transaction = 10000 {\n      Context = - {\n          Notify = A4444 {ObservedEvents\
    \ =2222 {\n            19990729T22000000:al/of}}\n      }\n   }\n   7. And the\
    \ Notify is acknowledged.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\n\
    \   Reply = 10000 {\n       Context = - {Notify = A4444}\n   }\n   8. The MGC\
    \ Modifies the termination to play dial tone, to look for\n   digits according\
    \ to Dialplan0 and to look for the on-hook event now.\n   MGC to MG1:\n   MEGACO/1\
    \ [123.123.123.4]:55555\n   Transaction = 10001 {\n       Context = - {\n    \
    \       Modify = A4444 {\n               Events = 2223 {\n                   al/on,\
    \ dd/ce {DigitMap=Dialplan0}\n               },\n               Signals {cg/dt},\n\
    \               DigitMap= Dialplan0{\n   (0| 00|[1-7]xxx|8xxxxxxx|Fxxxxxxx|Exx|91xxxxxxxxxx|9011x.)}\n\
    \           }\n       }\n   }\n   9. And the Modify is acknowledged.\n   MG1 to\
    \ MGC:\n   MEGACO/1 [124.124.124.222]:55555\n   Reply = 10001 {\n       Context\
    \ = - {Modify = A4444}\n   }\n   10. Next, digits are accumulated by MG1 as they\
    \ are dialed by User\n   1.  Dialtone is stopped upon detection of the first digit.\
    \ When an\n   appropriate match is made of collected digits against the currently\n\
    \   programmed Dialplan for A4444, another Notify is sent to the Media\n   Gateway\
    \ Controller.\n   MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\n   Transaction\
    \ = 10002 {\n      Context = - {\n          Notify = A4444 {ObservedEvents =2223\
    \ {\n            19990729T22010001:dd/ce{ds=\"916135551212\",Meth=FM}}}\n    \
    \  }\n   }\n   11. And the Notify is acknowledged.\n   MGC to MG1:\n   MEGACO/1\
    \ [123.123.123.4]:55555\n   Reply = 10002 {\n       Context = - {Notify = A4444}\n\
    \   }\n   12. The controller then analyses the digits and determines that a\n\
    \   connection needs to be made from MG1 to MG2. Both the TDM\n   termination\
    \ A4444, and an RTP termination are added to a new context\n   in MG1. Mode is\
    \ ReceiveOnly since Remote descriptor values are not\n   yet specified. Preferred\
    \ codecs are in the MGC's preferred order of\n   choice.\n   MGC to MG1:\n   MEGACO/1\
    \ [123.123.123.4]:55555\n   Transaction = 10003 {\n       Context = $ {\n    \
    \      Add = A4444,\n          Add = $ {\n              Media {\n            \
    \    Stream = 1 {\n                     LocalControl {\n                     \
    \    Mode = ReceiveOnly,\n                         nt/jit=40, ; in ms\n      \
    \               },\n                     Local {\n   v=0\n   c=IN IP4 $\n   m=audio\
    \ $ RTP/AVP 4\n   a=ptime:30\n   v=0\n   c=IN IP4 $\n   m=audio $ RTP/AVP 0\n\
    \                     }\n                }\n             }\n          }\n    \
    \   }\n   }\n   NOTE -  The MGC states its preferred parameter values as a series\
    \ of\n   sdp blocks in  Local. The MG fills in the Local Descriptor in the\n \
    \  Reply.\n   13. MG1 acknowledges the new Termination and fills in the Local\
    \ IP\n   address and UDP port. It also makes a choice for the codec based on\n\
    \   the MGC preferences in Local. MG1 sets the RTP port to 2222.\n   MEGACO/1\
    \ [124.124.124.222]:55555\n   Reply = 10003 {\n      Context = 2000 {\n      \
    \   Add = A4444,\n         Add=A4445{\n            Media {\n                Stream\
    \ = 1 {\n                    Local {\n   v=0\n   c=IN IP4 124.124.124.222\n  \
    \ m=audio 2222 RTP/AVP 4\n   a=ptime:30\n   a=recvonly\n                    }\
    \ ; RTP profile for G.723 is 4\n                }\n            }\n         }\n\
    \      }\n   }\n   14. The MGC will now associate A5555 with a new Context on\
    \ MG2, and\n   establish an RTP Stream (i.e, A5556 will be assigned), SendReceive\n\
    \   connection through to the originating user, User 1. The MGC also\n   sets\
    \ ring on A5555.\n   MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555\n   Transaction\
    \ = 50003 {\n       Context = $ {\n          Add = A5555  { Media {\n        \
    \       Stream = 1 {\n                    LocalControl {Mode = SendReceive} }},\n\
    \                Events=1234{al/of}\n               Signals {al/ri}\n        \
    \       },\n          Add  = $ {Media {\n               Stream = 1 {\n       \
    \             LocalControl {\n                       Mode = SendReceive,\n   \
    \                    nt/jit=40 ; in ms\n                    },\n             \
    \       Local {\n   v=0\n   c=IN IP4 $\n   m=audio $ RTP/AVP 4\n   a=ptime:30\n\
    \                    },\n                    Remote {\n   v=0\n   c=IN IP4 124.124.124.222\n\
    \   m=audio 2222 RTP/AVP 4\n   a=ptime:30\n                    } ; RTP profile\
    \ for G.723 is 4\n                }\n             }\n         }\n      }\n   }\n\
    \   15. This is acknowledged. The stream port number is different from\n   the\
    \ control port number. In this case it is 1111 (in the SDP).\n   MG2 to MGC:\n\
    \   MEGACO/1 [124.124.124.222]:55555\n   Reply = 50003 {\n      Context = 5000\
    \ {\n        Add = A5555{}\n         Add = A5556{\n            Media {\n     \
    \          Stream = 1 {\n                   Local {\n   v=0\n   c=IN IP4 125.125.125.111\n\
    \   m=audio 1111 RTP/AVP 4\n   }\n               } ; RTP profile for G723 is 4\n\
    \            }\n          }\n      }\n   }\n   16. The above IPAddr and UDPport\
    \ need to be given to MG1 now.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\n\
    \   Transaction = 10005 {\n     Context = 2000 {\n       Modify = A4444 {\n  \
    \       Signals {cg/rt}\n       },\n       Modify = A4445 {\n          Media {\n\
    \               Stream = 1 {\n                   Remote {\n   v=0\n   c=IN IP4\
    \ 125.125.125.111\n   m=audio 1111 RTP/AVP 4\n                   }\n         \
    \      } ; RTP profile for G723 is 4\n           }\n       }\n     }\n   }\n \
    \  MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\n   Reply = 10005 {\n    \
    \  Context = 2000 {Modify = A4444, Modify = A4445}\n   }\n   17. The two gateways\
    \ are now connected and User 1 hears the\n   RingBack. The MG2 now waits until\
    \ User2 picks up the receiver and\n   then the two-way call is established.\n\
    \   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555\n   Transaction = 50005\
    \ {\n      Context = 5000 {\n          Notify = A5555 {ObservedEvents =1234 {\n\
    \            19990729T22020002:al/of}}\n      }\n   }\n   From MGC to MG2:\n \
    \  MEGACO/1 [123.123.123.4]:55555\n   Reply = 50005 {\n       Context = - {Notify\
    \ = A5555}\n   }\n   From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555\n   Transaction\
    \ = 50006 {\n      Context = 5000 {\n         Modify = A5555 {\n            Events\
    \ = 1235 {al/on},\n            Signals { } ; to turn off ringing\n         }\n\
    \      }\n   }\n   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555\n   Reply\
    \ = 50006 {\n    Context = 5000 {Modify = A4445}\n   }\n   18. Change mode on\
    \ MG1 to SendReceive, and stop the ringback.\n   MGC to MG1:\n   MEGACO/1 [123.123.123.4]:55555\n\
    \   Transaction = 10006 {\n      Context = 2000 {\n         Modify = A4445 {\n\
    \            Media {\n               Stream = 1 {\n                  LocalControl\
    \ {\n                     Mode=SendReceive\n                  }\n            \
    \   }\n            }\n         },\n         Modify = A4444 {\n            Signals\
    \ { }\n         }\n      }\n   }\n   from MG1 to MGC:\n   MEGACO/1 [124.124.124.222]:55555\n\
    \   Reply = 10006 {\n      Context = 2000 {Modify = A4445, Modify = A4444}}\n\
    \   19. The MGC decides to Audit the RTP termination on MG2.\n   MEGACO/1 [123.123.123.4]:55555\n\
    \   Transaction = 50007 {\n      Context = - {AuditValue = A5556{\n         Audit{Media,\
    \ DigitMap, Events, Signals, Packages, Statistics\n   }}\n      }\n   }\n   20.\
    \ The MG2 replies. An RTP termination has no events nor signals,\n   so these\
    \ are left out in the reply .\n   MEGACO/1 [125.125.125.111]:55555\n   Reply =\
    \ 50007 {\n      Context = - {\n   AuditValue = A5556 {\n             Media {\n\
    \                Stream = 1 {\n                    LocalControl { Mode = SendReceive,\n\
    \                       nt/jit=40 },\n                    Local {\n   v=0\n  \
    \ c=IN IP4 125.125.125.111\n   m=audio 1111 RTP/AVP  4\n   a=ptime:30\n      \
    \             },\n                    Remote {\n   v=0\n   c=IN IP4 124.124.124.222\n\
    \   m=audio 2222 RTP/AVP  4\n   a=ptime:30\n                    } } },\n     \
    \        Packages {nt-1, rtp-1},\n             Statistics { rtp/ps=1200,  ; packets\
    \ sent\n                          nt/os=62300, ; octets sent\n               \
    \           rtp/pr=700, ; packets received\n                          nt/or=45100,\
    \ ; octets received\n                          rtp/pl=0.2,  ; % packet loss\n\
    \                          rtp/jit=20,\n                          rtp/delay=40\
    \ } ; avg latency\n          }\n       }\n   }\n   21. When the MGC receives an\
    \ onhook signal from one of the MGs, it\n   brings down the call. In this example,\
    \ the user at MG2 hangs up\n   first.\n   From MG2 to MGC:\n   MEGACO/1 [125.125.125.111]:55555\n\
    \   Transaction = 50008 {\n      Context = 5000 {\n          Notify = A5555 {ObservedEvents\
    \ =1235 {\n             19990729T24020002:al/on}\n          }\n      }\n   }\n\
    \   From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555\n   Reply = 50008 {\n\
    \       Context = - {Notify = A5555}\n   }\n   22. The MGC now sends both MGs\
    \ a Subtract to take down the call.\n   Only the subtracts to MG2 are shown here.\
    \ Each termination has its\n   own set of statistics that it gathers. An MGC may\
    \ not need to\n   request both to be returned. A5555 is a physical termination,\
    \ and\n   A5556 is an RTP termination.\n   From MGC to MG2:\n   MEGACO/1 [123.123.123.4]:55555\n\
    \   Transaction = 50009 {\n      Context = 5000 {\n         Subtract = A5555 {Audit{Statistics}},\n\
    \         Subtract = A5556 {Audit{Statistics}}\n      }\n   }\n   From MG2 to\
    \ MGC:\n   MEGACO/1 [125.125.125.111]:55555\n   Reply = 50009 {\n      Context\
    \ = 5000 {\n        Subtract = A5555 {\n             Statistics {\n          \
    \      nt/os=45123, ; Octets Sent\n                nt/dur=40 ; in seconds\n  \
    \              }\n          },\n          Subtract = A5556 {\n             Statistics\
    \ {\n                rtp/ps=1245, ; packets sent\n                nt/os=62345,\
    \ ; octets sent\n                rtp/pr=780, ; packets received\n            \
    \    nt/or=45123, ; octets received\n                rtp/pl=10, ;  % packets lost\n\
    \                rtp/jit=27,\n                rtp/delay=48 ; average latency\n\
    \             }\n          }\n      }\n   }\n   23. The MGC now sets up both MG1\
    \ and MG2 to be ready to detect the\n   next off-hook event. See step 1. Note\
    \ that this could be the default\n   state of a termination in the null context,\
    \ and if this were the\n   case, no message need be sent from the MGC to the MG.\
    \ Once a\n   termination returns to the null context, it goes back to the default\n\
    \   termination values for that termination.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Fernando Cuervo\n   Nortel Networks\n   P.O. Box 3511,\
    \ Station C\n   Ottawa, ON K1Y 4H7\n   Canada\n   E-mail: fcuervo@nortelnetworks.com\n\
    \   Nancy Greene\n   Nortel Networks\n   P.O. Box 3511, Station C\n   Ottawa,\
    \ ON K1Y 4H7\n   Canada\n   E-mail: ngreene@nortelnetworks.com\n   Christian Huitema\n\
    \   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA 98052-6399\n \
    \  USA\n   E-mail: huitema@microsoft.com\n   Abdallah Rayhan\n   Nortel Networks\n\
    \   P.O. Box 3511, Station C\n   Ottawa, ON K1Y 4H7\n   Canada\n   E-mail: arayhan@nortelnetworks.com\n\
    \   Brian Rosen\n   Marconi\n   1000 FORE Drive\n   Warrendale, PA 15086\n   USA\n\
    \   E-mail: brian.rosen@marconi.com\n   John Segers\n   Lucent Technologies, Room\
    \ HE 303\n   Dept. Forward Looking Work\n   P.O. Box 18, 1270 AA  Huizen\n   The\
    \ Netherlands\n   E-mail: jsegers@lucent.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
