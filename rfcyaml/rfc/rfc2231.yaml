- contents:
  - "           MIME Parameter Value and Encoded Word Extensions:\n              Character
    Sets, Languages, and Continuations\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "1.  Abstract\n   This memo defines extensions to the RFC 2045 media type and
    RFC 2183\n   disposition parameter value mechanisms to provide\n    (1)   a means
    to specify parameter values in character sets\n          other than US-ASCII,\n
    \   (2)   to specify the language to be used should the value be\n          displayed,
    and\n    (3)   a continuation mechanism for long parameter values to\n          avoid
    problems with header line wrapping.\n   This memo also defines an extension to
    the encoded words defined in\n   RFC 2047 to allow the specification of the language
    to be used for\n   display as well as the character set.\n"
  title: 1.  Abstract
- contents:
  - "2.  Introduction\n   The Multipurpose Internet Mail Extensions, or MIME [RFC-2045,
    RFC-\n   2046, RFC-2047, RFC-2048, RFC-2049], define a message format that\n   allows
    for:\n    (1)   textual message bodies in character sets other than\n          US-ASCII,\n
    \   (2)   non-textual message bodies,\n    (3)   multi-part message bodies, and\n
    \   (4)   textual header information in character sets other than\n          US-ASCII.\n
    \  MIME is now widely deployed and is used by a variety of Internet\n   protocols,
    including, of course, Internet email.  However, MIME's\n   success has resulted
    in the need for additional mechanisms that were\n   not provided in the original
    protocol specification.\n   In particular, existing MIME mechanisms provide for
    named media type\n   (content-type field) parameters as well as named disposition\n
    \  (content-disposition field).  A MIME media type may specify any\n   number
    of parameters associated with all of its subtypes, and any\n   specific subtype
    may specify additional parameters for its own use. A\n   MIME disposition value
    may specify any number of associated\n   parameters, the most important of which
    is probably the attachment\n   disposition's filename parameter.\n   These parameter
    names and values end up appearing in the content-type\n   and content-disposition
    header fields in Internet email.  This\n   inherently imposes three crucial limitations:\n
    \   (1)   Lines in Internet email header fields are folded\n          according
    to RFC 822 folding rules.  This makes long\n          parameter values problematic.\n
    \   (2)   MIME headers, like the RFC 822 headers they often\n          appear
    in, are limited to 7bit US-ASCII, and the\n          encoded-word mechanisms of
    RFC 2047 are not available\n          to parameter values.  This makes it impossible
    to have\n          parameter values in character sets other than US-ASCII\n          without
    specifying some sort of private per-parameter\n          encoding.\n    (3)   It
    has recently become clear that character set\n          information is not sufficient
    to properly display some\n          sorts of information -- language information
    is also\n          needed [RFC-2130].  For example, support for\n          handicapped
    users may require reading text string\n          aloud. The language the text
    is written in is needed\n          for this to be done correctly.  Some parameter
    values\n          may need to be displayed, hence there is a need to\n          allow
    for the inclusion of language information.\n   The last problem on this list is
    also an issue for the encoded words\n   defined by RFC 2047, as encoded words
    are intended primarily for\n   display purposes.\n   This document defines extensions
    that address all of these\n   limitations. All of these extensions are implemented
    in a fashion\n   that is completely compatible at a syntactic level with existing
    MIME\n   implementations. In addition, the extensions are designed to have as\n
    \  little impact as possible on existing uses of MIME.\n   IMPORTANT NOTE:  These
    mechanisms end up being somewhat gibbous when\n   they actually are used. As such,
    these mechanisms should not be used\n   lightly; they should be reserved for situations
    where a real need for\n   them exists.\n"
  - contents:
    - "2.1.  Requirements notation\n   This document occasionally uses terms that
      appear in capital letters.\n   When the terms \"MUST\", \"SHOULD\", \"MUST NOT\",
      \"SHOULD NOT\", and \"MAY\"\n   appear capitalized, they are being used to indicate
      particular\n   requirements of this specification. A discussion of the meanings
      of\n   these terms appears in [RFC- 2119].\n"
    title: 2.1.  Requirements notation
  title: 2.  Introduction
- contents:
  - "3.  Parameter Value Continuations\n   Long MIME media type or disposition parameter
    values do not interact\n   well with header line wrapping conventions.  In particular,
    proper\n   header line wrapping depends on there being places where linear\n   whitespace
    (LWSP) is allowed, which may or may not be present in a\n   parameter value, and
    even if present may not be recognizable as such\n   since specific knowledge of
    parameter value syntax may not be\n   available to the agent doing the line wrapping.
    The result is that\n   long parameter values may end up getting truncated or otherwise\n
    \  damaged by incorrect line wrapping implementations.\n   A mechanism is therefore
    needed to break up parameter values into\n   smaller units that are amenable to
    line wrapping. Any such mechanism\n   MUST be compatible with existing MIME processors.
    This means that\n    (1)   the mechanism MUST NOT change the syntax of MIME media\n
    \         type and disposition lines, and\n    (2)   the mechanism MUST NOT depend
    on parameter ordering\n          since MIME states that parameters are not order\n
    \         sensitive.  Note that while MIME does prohibit\n          modification
    of MIME headers during transport, it is\n          still possible that parameters
    will be reordered when\n          user agent level processing is done.\n   The
    obvious solution, then, is to use multiple parameters to contain\n   a single
    parameter value and to use some kind of distinguished name\n   to indicate when
    this is being done.  And this obvious solution is\n   exactly what is specified
    here: The asterisk character (\"*\") followed\n   by a decimal count is employed
    to indicate that multiple parameters\n   are being used to encapsulate a single
    parameter value.  The count\n   starts at 0 and increments by 1 for each subsequent
    section of the\n   parameter value.  Decimal values are used and neither leading
    zeroes\n   nor gaps in the sequence are allowed.\n   The original parameter value
    is recovered by concatenating the\n   various sections of the parameter, in order.
    \ For example, the\n   content-type field\n        Content-Type: message/external-body;
    access-type=URL;\n         URL*0=\"ftp://\";\n         URL*1=\"cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar\"\n
    \  is semantically identical to\n        Content-Type: message/external-body;
    access-type=URL;\n          URL=\"ftp://cs.utk.edu/pub/moore/bulk-mailer/bulk-mailer.tar\"\n
    \  Note that quotes around parameter values are part of the value\n   syntax;
    they are NOT part of the value itself.  Furthermore, it is\n   explicitly permitted
    to have a mixture of quoted and unquoted\n   continuation fields.\n"
  title: 3.  Parameter Value Continuations
- contents:
  - "4.  Parameter Value Character Set and Language Information\n   Some parameter
    values may need to be qualified with character set or\n   language information.
    \ It is clear that a distinguished parameter\n   name is needed to identify when
    this information is present along\n   with a specific syntax for the information
    in the value itself.  In\n   addition, a lightweight encoding mechanism is needed
    to accommodate 8\n   bit information in parameter values.\n   Asterisks (\"*\")
    are reused to provide the indicator that language and\n   character set information
    is present and encoding is being used. A\n   single quote (\"'\") is used to delimit
    the character set and language\n   information at the beginning of the parameter
    value. Percent signs\n   (\"%\") are used as the encoding flag, which agrees with
    RFC 2047.\n   Specifically, an asterisk at the end of a parameter name acts as
    an\n   indicator that character set and language information may appear at\n   the
    beginning of the parameter value. A single quote is used to\n   separate the character
    set, language, and actual value information in\n   the parameter value string,
    and an percent sign is used to flag\n   octets encoded in hexadecimal.  For example:\n
    \       Content-Type: application/x-stuff;\n         title*=us-ascii'en-us'This%20is%20%2A%2A%2Afun%2A%2A%2A\n
    \  Note that it is perfectly permissible to leave either the character\n   set
    or language field blank.  Note also that the single quote\n   delimiters MUST
    be present even when one of the field values is\n   omitted.  This is done when
    either character set, language, or both\n   are not relevant to the parameter
    value at hand.  This MUST NOT be\n   done in order to indicate a default character
    set or language --\n   parameter field definitions MUST NOT assign a default character
    set\n   or language.\n"
  - contents:
    - "4.1.  Combining Character Set, Language, and Parameter Continuations\n   Character
      set and language information may be combined with the\n   parameter continuation
      mechanism. For example:\n   Content-Type: application/x-stuff\n    title*0*=us-ascii'en'This%20is%20even%20more%20\n
      \   title*1*=%2A%2A%2Afun%2A%2A%2A%20\n    title*2=\"isn't it!\"\n   Note that:\n
      \   (1)   Language and character set information only appear at\n          the
      beginning of a given parameter value.\n    (2)   Continuations do not provide
      a facility for using more\n          than one character set or language in the
      same\n          parameter value.\n    (3)   A value presented using multiple
      continuations may\n          contain a mixture of encoded and unencoded segments.\n
      \   (4)   The first segment of a continuation MUST be encoded if\n          language
      and character set information are given.\n    (5)   If the first segment of
      a continued parameter value is\n          encoded the language and character
      set field delimiters\n          MUST be present even when the fields are left
      blank.\n"
    title: 4.1.  Combining Character Set, Language, and Parameter Continuations
  title: 4.  Parameter Value Character Set and Language Information
- contents:
  - "5.  Language specification in Encoded Words\n   RFC 2047 provides support for
    non-US-ASCII character sets in RFC 822\n   message header comments, phrases, and
    any unstructured text field.\n   This is done by defining an encoded word construct
    which can appear\n   in any of these places.  Given that these are fields intended
    for\n   display, it is sometimes necessary to associate language information\n
    \  with encoded words as well as just the character set.  This\n   specification
    extends the definition of an encoded word to allow the\n   inclusion of such information.
    \ This is simply done by suffixing the\n   character set specification with an
    asterisk followed by the language\n   tag.  For example:\n          From: =?US-ASCII*EN?Q?Keith_Moore?=
    <moore@cs.utk.edu>\n"
  title: 5.  Language specification in Encoded Words
- contents:
  - "6.  IMAP4 Handling of Parameter Values\n   IMAP4 [RFC-2060] servers SHOULD decode
    parameter value continuations\n   when generating the BODY and BODYSTRUCTURE fetch
    attributes.\n"
  title: 6.  IMAP4 Handling of Parameter Values
- contents:
  - "7.  Modifications to MIME ABNF\n   The ABNF for MIME parameter values given in
    RFC 2045 is:\n   parameter := attribute \"=\" value\n   attribute := token\n                ;
    Matching of attributes\n                ; is ALWAYS case-insensitive.\n   This
    specification changes this ABNF to:\n   parameter := regular-parameter / extended-parameter\n
    \  regular-parameter := regular-parameter-name \"=\" value\n   regular-parameter-name
    := attribute [section]\n   attribute := 1*attribute-char\n   attribute-char :=
    <any (US-ASCII) CHAR except SPACE, CTLs,\n                     \"*\", \"'\", \"%\",
    or tspecials>\n   section := initial-section / other-sections\n   initial-section
    := \"*0\"\n   other-sections := \"*\" (\"1\" / \"2\" / \"3\" / \"4\" / \"5\" /\n
    \                         \"6\" / \"7\" / \"8\" / \"9\") *DIGIT)\n   extended-parameter
    := (extended-initial-name \"=\"\n                          extended-value) /\n
    \                        (extended-other-names \"=\"\n                          extended-other-values)\n
    \  extended-initial-name := attribute [initial-section] \"*\"\n   extended-other-names
    := attribute other-sections \"*\"\n   extended-initial-value := [charset] \"'\"
    [language] \"'\"\n                             extended-other-values\n   extended-other-values
    := *(ext-octet / attribute-char)\n   ext-octet := \"%\" 2(DIGIT / \"A\" / \"B\"
    / \"C\" / \"D\" / \"E\" / \"F\")\n   charset := <registered character set name>\n
    \  language := <registered language tag [RFC-1766]>\n   The ABNF given in RFC
    2047 for encoded-words is:\n   encoded-word := \"=?\" charset \"?\" encoding \"?\"
    encoded-text \"?=\"\n   This specification changes this ABNF to:\n   encoded-word
    := \"=?\" charset [\"*\" language] \"?\" encoded-text \"?=\"\n"
  title: 7.  Modifications to MIME ABNF
- contents:
  - "8.  Character sets which allow specification of language\n   In the future it
    is likely that some character sets will provide\n   facilities for inline language
    labeling. Such facilities are\n   inherently more flexible than those defined
    here as they allow for\n   language switching in the middle of a string.\n   If
    and when such facilities are developed they SHOULD be used in\n   preference to
    the language labeling facilities specified here. Note\n   that all the mechanisms
    defined here allow for the omission of\n   language labels so as to be able to
    accommodate this possible future\n   usage.\n"
  title: 8.  Character sets which allow specification of language
- contents:
  - "9.  Security Considerations\n   This RFC does not discuss security issues and
    is not believed to\n   raise any security issues not already endemic in electronic
    mail and\n   present in fully conforming implementations of MIME.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  References\n   [RFC-822]\n        Crocker, D., \"Standard for the Format
    of ARPA Internet\n        Text Messages\", STD 11, RFC 822 August 1982.\n   [RFC-1766]\n
    \       Alvestrand, H., \"Tags for the Identification of\n        Languages\",
    RFC 1766, March 1995.\n   [RFC-2045]\n        Freed, N., and N. Borenstein, \"Multipurpose
    Internet Mail\n        Extensions (MIME) Part One: Format of Internet Message\n
    \       Bodies\", RFC 2045, December 1996.\n   [RFC-2046]\n        Freed, N. and
    N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part Two:
    Media Types\", RFC 2046,\n        December 1996.\n   [RFC-2047]\n        Moore,
    K., \"Multipurpose Internet Mail Extensions (MIME)\n        Part Three: Representation
    of Non-ASCII Text in Internet\n        Message Headers\", RFC 2047, December 1996.\n
    \  [RFC-2048]\n        Freed, N., Klensin, J. and J. Postel, \"Multipurpose\n
    \       Internet Mail Extensions (MIME) Part Four: MIME\n        Registration
    Procedures\", RFC 2048, December 1996.\n   [RFC-2049]\n        Freed, N. and N.
    Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part Five:
    Conformance Criteria and\n        Examples\", RFC 2049, December 1996.\n   [RFC-2060]\n
    \       Crispin, M., \"Internet Message Access Protocol - Version\n        4rev1\",
    RFC 2060, December 1996.\n   [RFC-2119]\n        Bradner, S., \"Key words for
    use in RFCs to Indicate\n        Requirement Levels\", RFC 2119, March 1997.\n
    \  [RFC-2130]\n        Weider, C., Preston, C., Simonsen, K., Alvestrand, H.,\n
    \       Atkinson, R., Crispin, M., and P. Svanberg, \"Report from the\n        IAB
    Character Set Workshop\", RFC 2130, April 1997.\n   [RFC-2183]\n        Troost,
    R., Dorner, S. and K. Moore, \"Communicating\n        Presentation Information
    in Internet Messages:  The\n        Content-Disposition Header\", RFC 2183, August
    1997.\n"
  title: 10.  References
- contents:
  - "11.  Authors' Addresses\n   Ned Freed\n   Innosoft International, Inc.\n   1050
    Lakes Drive\n   West Covina, CA 91790\n   USA\n   Phone: +1 626 919 3600\n   Fax:
    \  +1 626 919 3614\n   EMail: ned.freed@innosoft.com\n   Keith Moore\n   Computer
    Science Dept.\n   University of Tennessee\n   107 Ayres Hall\n   Knoxville, TN
    37996-1301\n   USA\n   EMail: moore@cs.utk.edu\n"
  title: 11.  Authors' Addresses
- contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (1997).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 12.  Full Copyright Statement
