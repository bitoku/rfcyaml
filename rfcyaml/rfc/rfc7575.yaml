- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                         M. Behringer
  contents:
  - "Internet Research Task Force (IRTF)                         M. Behringer\n  \
    \         Autonomic Networking: Definitions and Design Goals\n"
- title: Abstract
  contents:
  - "Abstract\n   Autonomic systems were first described in 2001.  The fundamental\
    \ goal\n   is self-management, including self-configuration, self-optimization,\n\
    \   self-healing, and self-protection.  This is achieved by an autonomic\n   function\
    \ having minimal dependencies on human administrators or\n   centralized management\
    \ systems.  It usually implies distribution\n   across network elements.\n   This\
    \ document defines common language and outlines design goals (and\n   what are\
    \ not design goals) for autonomic functions.  A high-level\n   reference model\
    \ illustrates how functional elements in an Autonomic\n   Network interact.  This\
    \ document is a product of the IRTF's Network\n   Management Research Group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Network\n   Management Research Group of the Internet Research Task Force\
    \ (IRTF).\n   Documents approved for publication by the IRSG are not a candidate\n\
    \   for any level of Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7575.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction to Autonomic Networking  . . . . . . .\
    \ . . . . .   3\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Design Goals  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     3.1.  Self-Management . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n     3.2.  Coexistence with Traditional Management . . . . . . . .\
    \ .   6\n     3.3.  Secure by Default . . . . . . . . . . . . . . . . . . . .\
    \   7\n     3.4.  Decentralization and Distribution . . . . . . . . . . . .  \
    \ 8\n     3.5.  Simplification of Autonomic Node Northbound Interfaces  .   8\n\
    \     3.6.  Abstraction . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \   3.7.  Autonomic Reporting . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 3.8.  Common Autonomic Networking Infrastructure  . . . . . . .   9\n     3.9.\
    \  Independence of Function and Layer  . . . . . . . . . . .  10\n     3.10. Full\
    \ Life-Cycle Support . . . . . . . . . . . . . . . . .  10\n   4.  Not among the\
    \ Design Goals  . . . . . . . . . . . . . . . . .  11\n     4.1.  Eliminate Human\
    \ Operators . . . . . . . . . . . . . . . .  11\n     4.2.  Eliminate Emergency\
    \ Fixes . . . . . . . . . . . . . . . .  11\n     4.3.  Eliminate Central Control\
    \ . . . . . . . . . . . . . . . .  11\n   5.  An Autonomic Reference Model  .\
    \ . . . . . . . . . . . . . . .  12\n   6.  Security Considerations . . . . .\
    \ . . . . . . . . . . . . . .  13\n   7.  Informative References  . . . . . .\
    \ . . . . . . . . . . . . .  13\n   Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  15\n   Authors' Addresses  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  15\n"
- title: 1.  Introduction to Autonomic Networking
  contents:
  - "1.  Introduction to Autonomic Networking\n   Autonomic systems were first described\
    \ in a manifesto by IBM in 2001\n   [Kephart].  The fundamental concept involves\
    \ eliminating external\n   systems from a system's control loops and closing of\
    \ control loops\n   within the autonomic system itself, with the goal of providing\
    \ the\n   system with self-management capabilities, including self-\n   configuration,\
    \ self-optimization, self-healing, and self-protection.\n   IP networking was\
    \ initially designed with similar properties in mind.\n   An IP network should\
    \ be distributed and redundant to withstand\n   outages in any part of the network.\
    \  Routing protocols such as OSPF\n   and IS-IS exhibit properties of self-management\
    \ and can thus be\n   considered autonomic in the definition of this document.\n\
    \   However, as IP networking evolved, the ever-increasing intelligence\n   of\
    \ network elements was often not put into protocols to follow this\n   paradigm,\
    \ but was put into external configuration systems.  This\n   configuration made\
    \ network elements dependent on some process that\n   manages them, either a human\
    \ or a network management system.\n   Autonomic functions can be defined in two\
    \ ways:\n   o  On a node level: Nodes interact with each other to form feedback\n\
    \      loops.\n   o  On a system level: Feedback loops include central elements\
    \ as\n      well.\n   System-level autonomy is implicitly or explicitly the subject\
    \ in many\n   IETF working groups, where interactions with controllers or network\n\
    \   management systems are discussed.\n   This work specifically focuses on node-level\
    \ autonomic functions.  It\n   focuses on intelligence of algorithms at the node\
    \ level, to minimize\n   dependency on human administrators and central management\
    \ systems.\n   Some network deployments benefit from a fully autonomic approach,\
    \ for\n   example, networks with a large number of relatively simple devices.\n\
    \   Most currently deployed networks, however, will require a mixed\n   approach,\
    \ where some functions are autonomic and others are centrally\n   managed.  Central\
    \ management of networking functions clearly has\n   advantages and will be chosen\
    \ for many networking functions.  This\n   document does not discuss which functions\
    \ should be centralized or\n   follow an autonomic approach.  Instead, it should\
    \ help make the\n   decision which is the best approach for a given situation.\n\
    \   Autonomic function cannot always discover all required information;\n   for\
    \ example, policy-related information requires human input, because\n   policy\
    \ is by its nature derived and specified by humans.  Where input\n   from some\
    \ central intelligence is required, it is provided in a\n   highly abstract, network-wide\
    \ form.\n   Autonomic Computing in general and Autonomic Networking in particular\n\
    \   have been the subject of academic study for many years.  There is\n   much\
    \ literature, including several useful overview papers (e.g.,\n   [Samaan], [Movahedi],\
    \ and [Dobson]).  In the present document, we\n   focus on concepts and definitions\
    \ that seem sufficiently mature to\n   become the basis for interoperable specifications\
    \ in the near future.\n   In particular, such specifications will need to coexist\
    \ with\n   traditional methods of network configuration and management, rather\n\
    \   than realizing an exclusively autonomic system with all the\n   properties\
    \ that it would require.\n   There is an important difference between \"automatic\"\
    \ and \"autonomic\".\n   \"Automatic\" refers to a predefined process, such as\
    \ a script.\n   \"Autonomic\" is used in the context of self-management.  It includes\n\
    \   feedback loops between elements as well as northbound to central\n   elements.\
    \  See also the definitions in the next section.  Generally,\n   an automatic\
    \ process works in a given environment but has to be\n   adapted if the environment\
    \ changes.  An autonomic process can adapt\n   to changing environments.\n   This\
    \ document provides the definitions and design goals for Autonomic\n   Networking\
    \ in the IETF and IRTF.  It represents the consensus of the\n   IRTF's Network\
    \ Management Research Group (NMRG).\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   We make the following definitions.\n   Autonomic: Self-managing\
    \ (self-configuring, self-protecting, self-\n   healing, self-optimizing); however,\
    \ allowing high-level guidance by a\n   central entity, through Intent (see below).\
    \  An autonomic function\n   adapts on its own to a changing environment.\n  \
    \ Automatic: A process that occurs without human intervention, with\n   step-by-step\
    \ execution of rules.  However, it relies on humans\n   defining the sequence\
    \ of rules, so is not Autonomic in the full\n   sense.  For example, a start-up\
    \ script is automatic but not\n   autonomic.  An automatic function may need manual\
    \ adjustments if the\n   environment changes.\n   Intent: An abstract, high-level\
    \ policy used to operate the network.\n   Its scope is an autonomic domain, such\
    \ as an enterprise network.  It\n   does not contain configuration or information\
    \ for a specific node\n   (see Section 3.2 on how Intent coexists with alternative\
    \ management\n   paradigms).  It may contain information pertaining to a node\
    \ with a\n   specific role (for example, an edge switch) or a node running a\n\
    \   specific function.  Intent is typically defined and provided by a\n   central\
    \ entity.\n   Autonomic Domain: A collection of autonomic nodes that instantiate\n\
    \   the same Intent.\n   Autonomic Function: A feature or function that requires\
    \ no\n   configuration and can derive all required information through self-\n\
    \   knowledge, discovery, or Intent.\n   Autonomic Service Agent: An agent implemented\
    \ on an autonomic node\n   that implements an autonomic function, either in part\
    \ (in the case of\n   a distributed function) or whole.\n   Autonomic Node: A\
    \ node that employs exclusively autonomic functions.\n   It requires (!) no configuration.\
    \  (Note that configuration can be\n   used to override an autonomic function.\
    \  See Section 3.2 for more\n   details.)  An Autonomic Node may operate on any\
    \ layer of the\n   networking stack.  Examples are routers, switches, personal\n\
    \   computers, call managers, etc.\n   Autonomic Network: A network containing\
    \ exclusively autonomic nodes.\n   It may contain one or several autonomic domains.\n"
- title: 3.  Design Goals
  contents:
  - "3.  Design Goals\n   This section explains the high-level goals of Autonomic\
    \ Networking,\n   independent of any specific solutions.\n"
- title: 3.1.  Self-Management
  contents:
  - "3.1.  Self-Management\n   The original design goals of autonomic systems as described\
    \ in\n   [Kephart] also apply to Autonomic Networks.  The overarching goal is\n\
    \   self-management, which is comprised of several \"self\" properties.\n   The\
    \ most commonly cited are:\n   o  Self-configuration: Functions do not require\
    \ configuration, by\n      either an administrator or a management system.  They\
    \ configure\n      themselves, based on self-knowledge, discovery, and Intent.\n\
    \      Discovery is the default way for an autonomic function to receive\n   \
    \   the information it needs to operate.\n   o  Self-healing: Autonomic functions\
    \ adapt on their own to changes in\n      the environment and heal problems automatically.\n\
    \   o  Self-optimizing: Autonomic functions automatically determine ways\n   \
    \   to optimize their behavior against a set of well-defined goals.\n   o  Self-protection:\
    \ Autonomic functions automatically secure\n      themselves against potential\
    \ attacks.\n   Almost any network can be described as \"self-managing\", as long\
    \ as\n   the definition of \"self\" is large enough.  For example, a well-\n \
    \  defined Software-Defined Networking (SDN) system, including the\n   controller\
    \ elements, can be described overall as \"autonomic\", if the\n   controller provides\
    \ an interface to the administrator that has the\n   same properties as mentioned\
    \ above (high level, network-wide, etc.).\n   For the work in the IETF and IRTF,\
    \ we define the \"self\" properties on\n   the node level.  It is the design goal\
    \ to make functions on network\n   nodes self-managing, in other words, minimally\
    \ dependent on\n   management systems or controllers, as well as human operators.\
    \  Self-\n   managing functions on a node might need to exchange information with\n\
    \   other nodes in order to achieve this design goal.\n   As mentioned in the\
    \ introduction, closed-loop control is an important\n   aspect of self-managing\
    \ systems.  This implies peer-to-peer dialogues\n   between the parties that make\
    \ up the closed loop.  Such dialogues\n   require two-way \"discussion\" or \"\
    negotiation\" between each pair or\n   groups of peers involved in the loop, so\
    \ they cannot readily use\n   typical top-down command-response protocols.  Also,\
    \ a discovery phase\n   is unavoidable before such closed-loop control can take\
    \ place.\n   Multiparty protocols are also possible but can be significantly more\n\
    \   complex.\n"
- title: 3.2.  Coexistence with Traditional Management
  contents:
  - "3.2.  Coexistence with Traditional Management\n   For the foreseeable future,\
    \ autonomic nodes and networks will be the\n   exception; autonomic behavior will\
    \ initially be defined function by\n   function.  Therefore, coexistence with\
    \ other network management\n   paradigms has to be considered.  Examples are management\
    \ by command\n   line, SNMP, SDN (with related APIs), the Network Configuration\n\
    \   Protocol (NETCONF), etc.\n   Conflict resolution between a) autonomic default\
    \ behavior and Intent\n   and b) other methods is therefore required.  This is\
    \ achieved through\n   prioritization.  Generally, autonomic mechanisms define\
    \ a network-\n   wide behavior, whereas the alternative methods are typically\
    \ on a\n   node-by-node basis.  Node-based management concepts take a higher\n\
    \   priority over autonomic methods.  This is in line with current\n   examples\
    \ of autonomic functions; for example, with routing, a\n   (statically configured)\
    \ route has priority over the routing\n   algorithm.  In short:\n   o  lowest\
    \ priority: autonomic default behavior\n   o  medium priority: autonomic Intent\n\
    \   o  highest priority: node-specific network management concepts, such\n   \
    \   as command line, SNMP, SDN, NETCONF, etc.  How these concepts are\n      prioritized\
    \ is outside the scope of this document.\n   The above prioritization essentially\
    \ results in the actions of the\n   human administrator always being able to overrule\
    \ autonomic behavior.\n   This is generally the expectation of network operators\
    \ today and\n   therefore remains a design principle here.  In critical systems,\
    \ such\n   as atomic power plants, sometimes the opposite philosophy is used:\n\
    \   The expectation is that a well-defined algorithm is more reliable\n   than\
    \ a human operator, especially in rare exception cases.\n   Networking generally\
    \ does not follow this philosophy yet.  However,\n   warnings should be issued\
    \ if node-specific overrides may conflict\n   with autonomic behavior.\n   In\
    \ other fields, autonomic mechanisms disengage automatically if\n   certain conditions\
    \ occur: The autopilot in a plane switches off if\n   the plane is outside a predefined\
    \ envelope of flight parameters.  The\n   assumption is that the algorithms only\
    \ work correctly if the input\n   values are in expected ranges.  However, some\
    \ opinions suggest that\n   exactly in exceptional conditions is the worst moment\
    \ to switch off\n   autonomic behavior, since the pilots have no full understanding\
    \ of\n   the situation at this point and may be under high levels of stress.\n\
    \   For this reason, we suggest here to NOT generally disable autonomic\n   functions\
    \ if they encounter unexpected conditions, because it is\n   expected that this\
    \ adds another level of unpredictability in\n   networks, when the situation may\
    \ already be hard to understand.\n"
- title: 3.3.  Secure by Default
  contents:
  - "3.3.  Secure by Default\n   All autonomic interactions should be secure by default.\
    \  This\n   requires that any member of an autonomic domain can assert its\n \
    \  membership using a domain identity, for example, a certificate issued\n   by\
    \ a domain certification authority.  This domain identity is used\n   for nodes\
    \ to learn about their neighboring nodes, to determine the\n   boundaries of the\
    \ domain, and to cryptographically secure\n   interactions within the domain.\
    \  Nodes from different domains can\n   also mutually verify their identity and\
    \ secure interactions as long\n   as they have a mutually respected trust anchor.\n\
    \   A strong, cryptographically verifiable domain identity is a\n   fundamental\
    \ cornerstone in Autonomic Networking.  It can be leveraged\n   to secure all\
    \ communications and thus allows automatic security\n   without traditional configuration,\
    \ for example, preshared keys.  See\n   also the document \"Making The Internet\
    \ Secure By Default\" [Behringer]\n   for more information.\n   Autonomic functions\
    \ must be able to adapt their behavior depending on\n   the domain of the node\
    \ they are interacting with.\n"
- title: 3.4.  Decentralization and Distribution
  contents:
  - "3.4.  Decentralization and Distribution\n   The goal of Autonomic Networking\
    \ is to minimize dependencies on\n   central elements; therefore, decentralization\
    \ and distribution are\n   fundamental to the concept.  If a problem can be solved\
    \ in a\n   distributed manner, it should not be centralized.\n   In certain cases,\
    \ it is today operationally preferable to keep a\n   central repository of information,\
    \ for example, a user database on an\n   Authentication, Authorization, and Accounting\
    \ (AAA) server.  An\n   Autonomic Network should be able to use such central systems,\
    \ in\n   order to be deployable.  It is possible to distribute such databases\n\
    \   as well, and such efforts should be at least considered.  Depending\n   on\
    \ the case, distribution may not be simple replication but may\n   involve more\
    \ complex interactions and organization.\n"
- title: 3.5.  Simplification of Autonomic Node Northbound Interfaces
  contents:
  - "3.5.  Simplification of Autonomic Node Northbound Interfaces\n   Even in a decentralized\
    \ solution, certain information flows with\n   central entities are required.\
    \  Examples are high-level service\n   definitions, as well as network status\
    \ requests, audit information,\n   logging, and aggregated reporting.\n   Therefore,\
    \ nodes in an Autonomic Network require a northbound\n   interface.  However,\
    \ the design goal is to maintain this interface as\n   simple and high level as\
    \ possible.\n"
- title: 3.6.  Abstraction
  contents:
  - "3.6.  Abstraction\n   An administrator or autonomic management system interacts\
    \ with an\n   Autonomic Network on a high level of abstraction.  Intent is defined\n\
    \   at a level of abstraction that is much higher than that of typical\n   configuration\
    \ parameters, for example, \"optimize my network for\n   energy efficiency\".\
    \  Intent must not be used to convey low-level\n   commands or concepts, since\
    \ those are on a different abstraction\n   level.\n   For example, the administrator\
    \ should not be exposed to the version\n   of the IP protocol running in the network.\n\
    \   Also on the reporting and feedback side, an Autonomic Network\n   abstracts\
    \ information and provides high-level messages such as \"the\n   link between\
    \ node x and y is down\" (possibly with an identifier for\n   the specific link,\
    \ in case of multiple links).\n"
- title: 3.7.  Autonomic Reporting
  contents:
  - "3.7.  Autonomic Reporting\n   An Autonomic Network, while minimizing the need\
    \ for user\n   intervention, still needs to provide users with visibility like\
    \ in\n   traditional networks.  However, in an Autonomic Network, reporting\n\
    \   should happen on a network-wide basis.  Information about the network\n  \
    \ should be collected and aggregated by the network itself and\n   presented in\
    \ a consolidated fashion to the administrator.\n   The layers of abstraction that\
    \ are provided via Intent need to be\n   supported for reporting functions as\
    \ well, in order to give users an\n   indication about the effectiveness of their\
    \ Intent.  For example, in\n   order to assess how effective the network performs\
    \ with regards to\n   the Intent \"optimize my network for energy efficiency\"\
    , the network\n   should provide aggregate information about the number of ports\
    \ that\n   were able to be shut down, and the corresponding energy savings,\n\
    \   while validating current service levels are, on aggregate, still met.\n  \
    \ Autonomic network events should concern the Autonomic Network as a\n   whole,\
    \ not individual systems in isolation.  For example, the same\n   failure symptom\
    \ should not be reported from every system that\n   observes it, but only once\
    \ for the Autonomic Network as a whole.\n   Ultimately, the Autonomic Network\
    \ should support exception-based\n   management, in which only events that truly\
    \ require user attention\n   actually cause the user to be notified.  This requires\
    \ capabilities\n   that allow systems within the network to compare information\
    \ and\n   apply specific algorithms to determine what should be reported.\n"
- title: 3.8.  Common Autonomic Networking Infrastructure
  contents:
  - "3.8.  Common Autonomic Networking Infrastructure\n   [RFC7576] points out that\
    \ there are already a number of autonomic\n   functions available today.  However,\
    \ they are largely independent,\n   and each has its own methods and protocols\
    \ to communicate, discover,\n   define, and distribute policy, etc.\n   The goal\
    \ of the work on Autonomic Networking in the IETF is therefore\n   not just to\
    \ create autonomic functions but to define a common\n   infrastructure that autonomic\
    \ functions can use.  This Autonomic\n   Networking Infrastructure may contain\
    \ common control and management\n   functions such as messaging, service discovery,\
    \ negotiation, Intent\n   distribution, self-monitoring, and diagnostics, etc.\
    \  A common\n   approach to define and manage Intent is also required.\n   Refer\
    \ to the reference model below: All the components around the\n   \"Autonomic\
    \ Service Agents\" should be common components, such that the\n   Autonomic Service\
    \ Agents do not have to replicate common tasks\n   individually.\n"
- title: 3.9.  Independence of Function and Layer
  contents:
  - "3.9.  Independence of Function and Layer\n   Autonomic functions may reside on\
    \ any layer in the networking stack.\n   For example, Layer 2 switching today\
    \ is already relatively autonomic\n   in many environments, since most switches\
    \ can be plugged together in\n   many ways and will automatically build a simple\
    \ Layer 2 topology.\n   Routing functions run on a higher layer and can be autonomic\
    \ on Layer\n   3.  Even application-layer functionality such as unified\n   communications\
    \ can be autonomic.\n   \"Autonomic\" in the context of this framework is a property\
    \ of a\n   function that is implemented on a node.  Autonomic functions can be\n\
    \   implemented on any node type, for example, a switch, router, server,\n   or\
    \ call manager.\n   An Autonomic Network requires an overall control plane for\
    \ autonomic\n   nodes to communicate.  As in general IP networking, IP is the\n\
    \   spanning layer that binds all those elements together; autonomic\n   functions\
    \ in the context of this framework should therefore operate\n   at the IP layer.\
    \  This concerns neighbor discovery protocols and\n   other functions in the Autonomic\
    \ Control Plane.\n"
- title: 3.10.  Full Life-Cycle Support
  contents:
  - "3.10.  Full Life-Cycle Support\n   An autonomic function does not depend on external\
    \ input to operate;\n   it needs to understand its current situation and surroundings\
    \ and\n   operate according to its current state.  Therefore, an autonomic\n \
    \  function must understand the full life cycle of the device it runs\n   on,\
    \ from manufacturing and initial testing through deployment,\n   testing, troubleshooting,\
    \ and decommissioning.\n   The state of the life cycle of an autonomic node is\
    \ reflected in a\n   state model.  The behavior of an autonomic function may be\
    \ different\n   for different deployment states.\n"
- title: 4.  Not among the Design Goals
  contents:
  - "4.  Not among the Design Goals\n   This section identifies various items that\
    \ are explicitly not design\n   goals in the IETF and IRTF for Autonomic Networks;\
    \ they are mentioned\n   to avoid misunderstandings of the general intention.\
    \  They address\n   some commonly expressed concerns from network administrators\
    \ and\n   architects.\n"
- title: 4.1.  Eliminate Human Operators
  contents:
  - "4.1.  Eliminate Human Operators\n   Section 3.1 states that \"It is the design\
    \ goal to make functions\n   [...] minimally dependent on [...] human operators\"\
    .  However, it is\n   not a design goal to completely eliminate them.  The problem\
    \ targeted\n   by Autonomic Networking is the error-prone and hard-to-scale model\
    \ of\n   individual configuration of network elements, traditionally by manual\n\
    \   commands but today mainly by scripting and/or configuration\n   management\
    \ databases.  This does not, however, imply the elimination\n   of skilled human\
    \ operators, who will still be needed for oversight,\n   policy management, diagnosis,\
    \ reaction to help-desk tickets, etc.\n   The main impact on administrators should\
    \ be less tedious detailed\n   work and more high-level work.  (They should become\
    \ more like doctors\n   than hospital orderlies.)\n"
- title: 4.2.  Eliminate Emergency Fixes
  contents:
  - "4.2.  Eliminate Emergency Fixes\n   However good the autonomous mechanisms, sometimes\
    \ there will be fault\n   conditions, etc., that they cannot deal with correctly.\
    \  At that\n   point, skilled operator interventions will be needed to correct\
    \ or\n   work around the problem.  Hopefully, this can be done by high-level\n\
    \   mechanisms (adapting the policy database in some way), but, in some\n   cases,\
    \ direct intervention at the device level may be unavoidable.\n   This is obviously\
    \ the case for hardware failures, even if the\n   Autonomic Network has bypassed\
    \ the fault for the time being.  \"Truck\n   rolls\" will not be eliminated when\
    \ faulty equipment needs to be\n   replaced.  However, this may be less urgent\
    \ if the autonomic system\n   automatically reconfigures to minimize the operational\
    \ impact.\n"
- title: 4.3.  Eliminate Central Control
  contents:
  - "4.3.  Eliminate Central Control\n   While it is a goal to simplify northbound\
    \ interfaces (Section 3.5),\n   it is not a goal to eliminate central control,\
    \ but to allow it on a\n   higher abstraction level.  Senior management might\
    \ fear loss of\n   control of an Autonomic Network.  In fact, this is no more\
    \ likely\n   than with a traditional network; the emphasis on automatically\n\
    \   applying general policy and security rules might even provide more\n   central\
    \ control.\n"
- title: 5.  An Autonomic Reference Model
  contents:
  - "5.  An Autonomic Reference Model\n   An Autonomic Network consists of Autonomic\
    \ Nodes.  Those nodes\n   communicate with each other through an Autonomic Control\
    \ Plane that\n   provides a robust and secure communications overlay.  The Autonomic\n\
    \   Control Plane is self-organizing and autonomic itself.\n   An Autonomic Node\
    \ contains various elements, such as autonomic\n   service agents that implement\
    \ autonomic functions.  Figure 1 shows a\n   reference model of an autonomic node.\
    \  The elements and their\n   interaction are:\n   o  Autonomic Service Agents:\
    \ They implement the autonomic behavior of\n      a specific service or function.\n\
    \   o  Self-knowledge: An autonomic node knows its own properties and\n      capabilities\n\
    \   o  Network Knowledge (Discovery): An Autonomic Service Agent may\n      require\
    \ various discovery functions in the network, such as\n      service discovery.\n\
    \   o  Feedback Loops: Control elements outside the node may interact\n      with\
    \ autonomic nodes through feedback loops.\n   o  An Autonomic User Agent, providing\
    \ a front-end to external users\n      (administrators and management applications)\
    \ through which they\n      can receive reports and monitor the Autonomic Network.\n\
    \   o  Autonomic Control Plane: Allows the node to communicate with other\n  \
    \    autonomic nodes.  Autonomic functions such as Intent distribution,\n    \
    \  feedback loops, discovery mechanisms, etc., use the Autonomic\n      Control\
    \ Plane.  The Autonomic Control Plane can run in-band, over\n      a configured\
    \ VPN, over a self-managing overlay network as\n      described in [ACP], or over\
    \ a traditional out-of-band network.\n      Security is a requirement for the\
    \ Autonomic Control Plane, which\n      can be bootstrapped by a mechanism as\
    \ described in [BOOTSTRAP].\n   +------------------------------------------------------------+\n\
    \   |                      +------------+                        |\n   |     \
    \                 | Feedback   |                        |\n   |              \
    \        |    Loops   |                        |\n   |                      +------------+\
    \                        |\n   |                            ^                \
    \               |\n   |                    Autonomic User Agent              \
    \      |\n   |                            V                               |\n\
    \   | +-----------+        +------------+        +------------+  |\n   | | Self-\
    \     |        | Autonomic  |        | Network    |  |\n   | | knowledge |<------>|\
    \ Service    |<------>| Knowledge  |  |\n   | |           |        | Agents  \
    \   |        | (Discovery)|  |\n   | +-----------+        +------------+     \
    \   +------------+  |\n   |                            ^                     ^\
    \         |\n   |                            |                     |         |\n\
    \   |                            V                     V         |\n   |------------------------------------------------------------|\n\
    \   |                 Autonomic Control Plane                    |\n   |------------------------------------------------------------|\n\
    \   |           Standard Operating System Functions              |\n   +------------------------------------------------------------+\n\
    \              Figure 1: Reference Model for an Autonomic Node\n   At the time\
    \ of finalizing this document, this reference model is\n   being worked out in\
    \ more detail.  See [Reference-Model] for more\n   details.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document provides definitions and design\
    \ goals for Autonomic\n   Networking.  A full threat analysis will be required\
    \ as part of the\n   development of solutions, taking account of potential attacks\
    \ from\n   within the network as well as from outside.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [ACP]      Behringer, M., Bjarnason, S., BL, B.,\
    \ and T. Eckert, \"An\n              Autonomic Control Plane\", Work in Progress,\n\
    \              draft-behringer-anima-autonomic-control-plane-02, March\n     \
    \         2015.\n   [Behringer]\n              Behringer, M., Pritikin, M., and\
    \ S. Bjarnason, \"Making The\n              Internet Secure By Default\", Work\
    \ in Progress,\n              draft-behringer-default-secure-00, January 2014.\n\
    \   [BOOTSTRAP]\n              Pritikin, M., Behringer, M., and S. Bjarnason,\n\
    \              \"Bootstrapping Key Infrastructures\", Work in Progress,\n    \
    \          draft-pritikin-anima-bootstrapping-keyinfra-01, February\n        \
    \      2015.\n   [Dobson]   Dobson, S., Denazis, S., Fernandez, A., Gaiti, D.,\n\
    \              Gelenbe, E., Massacci, F., Nixon, P., Saffre, F., Schmidt,\n  \
    \            N., and F. Zambonelli, \"A survey of autonomic\n              communications\"\
    , ACM Transactions on Autonomous and\n              Adaptive Systems (TAAS), Volume\
    \ 1, Issue 2, Pages 223-259,\n              DOI 10.1145/1186778.1186782, December\
    \ 2006.\n   [GANA]     ETSI, \"Autonomic network engineering for the self-managing\n\
    \              Future Internet (AFI); Generic Autonomic Network\n            \
    \  Architecture (An Architectural Reference Model for\n              Autonomic\
    \ Networking, Cognitive Networking and Self-\n              Management)\", ETSI\
    \ GS AFI 002, April 2013,\n              <http://www.etsi.org/deliver/etsi_gs/\n\
    \              AFI/001_099/002/01.01.01_60/gs_afi002v010101p.pdf>.\n   [Kephart]\
    \  Kephart, J. and D. Chess, \"The Vision of Autonomic\n              Computing\"\
    , IEEE Computer, vol. 36, no. 1, pp. 41-50,\n              DOI 10.1109/MC.2003.1160055,\
    \ January 2003.\n   [Movahedi] Movahedi, Z., Ayari, M., Langar, R., and G. Pujolle,\
    \ \"A\n              Survey of Autonomic Network Architectures and Evaluation\n\
    \              Criteria\", IEEE Communications Surveys & Tutorials, Volume\n \
    \             14, Issue 2, Pages 464-490,\n              DOI 10.1109/SURV.2011.042711.00078,\
    \ 2012.\n   [Reference-Model]\n              Behringer, M., Ed., Carpenter, B.,\
    \ Eckert, T., Ciavaglia,\n              L., and B. Liu, \"A Reference Model for\
    \ Autonomic\n              Networking\", Work in Progress, draft-behringer-anima-\n\
    \              reference-model-02, June 2015.\n   [RFC7576]  Jiang, S., Carpenter,\
    \ B., and M. Behringer, \"General Gap\n              Analysis for Autonomic Networking\"\
    , RFC 7576,\n              DOI 10.17487/RFC7576, June 2015,\n              <http://www.rfc-editor.org/info/rfc7576>.\n\
    \   [Samaan]   Samaan, N. and A. Karmouch, \"Towards Autonomic Network\n     \
    \         Management: an Analysis of Current and Future Research\n           \
    \   Directions\", IEEE Communications Surveys and Tutorials,\n              Volume\
    \ 11, Issue 3, Page(s) 22-36,\n              DOI 10.1109/SURV.2009.090303, 2009.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many parts of this work on Autonomic Networking are the\
    \ result of a\n   large team project at Cisco Systems.  In alphabetical order:\
    \ Ignas\n   Bagdonas, Parag Bhide, Balaji BL, Toerless Eckert, Yves Hertoghs,\n\
    \   Bruno Klauser.\n   We thank the following people for their input to this document:\n\
    \   Dimitri Papadimitriou, Rene Struik, Kostas Pentikousis, Dave Oran,\n   and\
    \ Diego Lopez Garcia.\n   The ETSI working group AFI <http://portal.etsi.org/afi>\
    \ defines a\n   similar framework for Autonomic Networking in the \"General Autonomic\n\
    \   Network Architecture\" [GANA].  Many concepts explained in this\n   document\
    \ can be mapped to the GANA framework.  The mapping is outside\n   the scope of\
    \ this document.  Special thanks to Ranganai Chaparadza\n   for his comments and\
    \ help on this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael H. Behringer\n   Cisco Systems\n   Building D,\
    \ 45 Allee des Ormes\n   Mougins  06250\n   France\n   EMail: mbehring@cisco.com\n\
    \   Max Pritikin\n   Cisco Systems\n   5330 Airport Blvd\n   Boulder, CO  80301\n\
    \   United States\n   EMail: pritikin@cisco.com\n   Steinthor Bjarnason\n   Cisco\
    \ Systems\n   Mail Stop LYS01/5\n   Philip Pedersens vei 1\n   LYSAKER, AKERSHUS\
    \  1366\n   Norway\n   EMail: sbjarnas@cisco.com\n   Alexander Clemm\n   Cisco\
    \ Systems\n   170 West Tasman Drive\n   San Jose, CA  95134-1706\n   United States\n\
    \   EMail: alex@cisco.com\n   Brian Carpenter\n   Department of Computer Science\n\
    \   University of Auckland\n   PB 92019\n   Auckland  1142\n   New Zealand\n \
    \  EMail: brian.e.carpenter@gmail.com\n   Sheng Jiang\n   Huawei Technologies\
    \ Co., Ltd\n   Q14, Huawei Campus\n   No.156 Beiqing Road\n   Hai-Dian District,\
    \ Beijing  100095\n   China\n   EMail: jiangsheng@huawei.com\n   Laurent Ciavaglia\n\
    \   Alcatel Lucent\n   Route de Villejust\n   Nozay  91620\n   France\n   EMail:\
    \ laurent.ciavaglia@alcatel-lucent.com\n"
