- title: __initial_text__
  contents:
  - "               Extensible Authentication Protocol (EAP)\n                   \
    \ Password Authenticated Exchange\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines an Extensible Authentication Protocol (EAP)\n\
    \   method called EAP-PAX (Password Authenticated eXchange).  This method\n  \
    \ is a lightweight shared-key authentication protocol with optional\n   support\
    \ for key provisioning, key management, identity protection,\n   and authenticated\
    \ data exchange.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Language Requirements ......................................3\n  \
    \    1.2. Terminology ................................................3\n   2.\
    \ Overview ........................................................5\n      2.1.\
    \ PAX_STD Protocol ...........................................6\n      2.2. PAX_SEC\
    \ Protocol ...........................................7\n      2.3. Authenticated\
    \ Data Exchange ................................9\n      2.4. Key Derivation ............................................10\n\
    \      2.5. Verification Requirements .................................11\n  \
    \    2.6. PAX Key Derivation Function ...............................12\n   3.\
    \ Protocol Specification .........................................13\n      3.1.\
    \ Header Specification ......................................13\n           3.1.1.\
    \ Op-Code ............................................13\n           3.1.2. Flags\
    \ ..............................................14\n           3.1.3. MAC ID .............................................14\n\
    \           3.1.4. DH Group ID ........................................14\n  \
    \         3.1.5. Public Key ID ......................................15\n    \
    \       3.1.6. Mandatory to Implement .............................15\n      3.2.\
    \ Payload Formatting ........................................16\n      3.3. Authenticated\
    \ Data Exchange (ADE) .........................18\n      3.4. Integrity Check\
    \ Value (ICV) ...............................19\n   4. Security Considerations\
    \ ........................................19\n      4.1. Server Certificates .......................................20\n\
    \      4.2. Server Security ...........................................20\n  \
    \    4.3. EAP Security Claims .......................................21\n    \
    \       4.3.1. Protected Ciphersuite Negotiation ..................21\n      \
    \     4.3.2. Mutual Authentication ..............................21\n        \
    \   4.3.3. Integrity Protection ...............................21\n          \
    \ 4.3.4. Replay Protection ..................................21\n           4.3.5.\
    \ Confidentiality ....................................21\n           4.3.6. Key\
    \ Derivation .....................................21\n           4.3.7. Key Strength\
    \ .......................................22\n           4.3.8. Dictionary Attack\
    \ Resistance .......................22\n           4.3.9. Fast Reconnect .....................................22\n\
    \           4.3.10. Session Independence ..............................22\n  \
    \         4.3.11. Fragmentation .....................................23\n    \
    \       4.3.12. Channel Binding ...................................23\n      \
    \     4.3.13. Cryptographic Binding .............................23\n        \
    \   4.3.14. Negotiation Attack Prevention .....................23\n   5. IANA\
    \ Considerations ............................................23\n   6. Acknowledgments\
    \ ................................................24\n   7. References .....................................................24\n\
    \      7.1. Normative References ......................................24\n  \
    \    7.2. Informative References ....................................25\n   Appendix\
    \ A. Key Generation from Passwords ........................ 27\n   Appendix B.\
    \ Implementation Suggestions ........................... 27\n     B.1. WiFi Enterprise\
    \ Network ................................... 27\n     B.2. Mobile Phone Network\
    \ ...................................... 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   EAP-PAX (Password Authenticated eXchange) is an Extensible\n\
    \   Authentication Protocol (EAP) method [RFC3748] designed for\n   authentication\
    \ using a shared key.  It makes use of two separate\n   subprotocols, PAX_STD\
    \ and PAX_SEC.  PAX_STD is a simple, lightweight\n   protocol for mutual authentication\
    \ using a shared key, supporting\n   Authenticated Data Exchange (ADE).  PAX_SEC\
    \ complements PAX_STD by\n   providing support for shared-key provisioning and\
    \ identity protection\n   using a server-side public key.\n   The idea motivating\
    \ EAP-PAX is a desire for device authentication\n   bootstrapped by a simple Personal\
    \ Identification Number (PIN).  If a\n   weak key is used or a expiration period\
    \ has elapsed, the\n   authentication server forces a key update.  Rather than\
    \ using a\n   symmetric key exchange, the client and server perform a Diffie-\n\
    \   Hellman key exchange, which provides forward secrecy.\n   Since implementing\
    \ a Public Key Infrastructure (PKI) can be\n   cumbersome, PAX_SEC defines multiple\
    \ client security policies,\n   selectable based on one's threat model.  In the\
    \ weakest mode, PAX_SEC\n   allows the use of raw public keys completely eliminating\
    \ the need for\n   a PKI.  In the strongest mode, PAX_SEC requires that EAP servers\
    \ use\n   certificates signed by a trusted Certification Authority (CA).  In\n\
    \   the weaker modes, during provisioning PAX_SEC is vulnerable to a\n   man-in-the-middle\
    \ dictionary attack.  In the strongest mode, EAP-PAX\n   is provably secure under\
    \ the Random Oracle model.\n   EAP-PAX supports the generation of strong key material;\
    \ mutual\n   authentication; resistance to desynchronization, dictionary, and\n\
    \   man-in-the-middle attacks; ciphersuite extensibility with protected\n   negotiation;\
    \ identity protection; and the authenticated exchange of\n   data, useful for\
    \ implementing channel binding.  These features\n   satisfy the EAP method requirements\
    \ for wireless LANs [RFC4017],\n   making EAP-PAX ideal for wireless environments\
    \ such as IEEE 802.11\n   [IEEE.80211].\n"
- title: 1.1.  Language Requirements
  contents:
  - "1.1.  Language Requirements\n   In this document, several words are used to signify\
    \ the requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This section describes the various variables and functions\
    \ used in\n   the EAP-PAX protocol.  They will be referenced frequently in later\n\
    \   sections.\n   Variables:\n   CID\n      User-supplied client ID, specified\
    \ as a Network Access Identifier\n      (NAI) [RFC4282], restricted to 65535 octets\n\
    \   g\n      public Diffie-Hellman generator, typically the integer 2 [RFC2631]\n\
    \   M\n      128-bit random integer generated by the server\n   N\n      128-bit\
    \ random integer generated by the client\n   X\n      256-bit random integer generated\
    \ by the server\n   Y\n      256-bit random integer generated by the client\n\
    \   Keys:\n   AK\n      authentication key shared between the client and EAP server\n\
    \   AK'\n      new authentication key generated during a key update\n   CertPK\n\
    \      EAP server's certificate containing public key PK\n   CK\n      Confirmation\
    \ Key generated from the MK and used during\n      authentication to prove knowledge\
    \ of AK\n   EMSK\n      Extended Master Session Key also generated from the MK\
    \ and\n      containing additional keying material\n   IV\n      Initialization\
    \ Vector used to seed ciphers; exported to the\n      authenticator\n   MID\n\
    \      Method ID used to construct the EAP Session ID and consequently\n     \
    \ name all the exported keys [IETF.KEY]\n   MK\n      Master Key between the client\
    \ and EAP server from which all other\n      EAP method session keys are derived\n\
    \   MSK\n      Master Session Key generated from the MK and exported by the EAP\n\
    \      method to the authenticator\n   PK\n      EAP server's public key\n   Operations:\n\
    \   enc_X(Y)\n      encryption of message Y with public key X\n   MAC_X(Y)\n \
    \     keyed message authentication code computed over message Y with\n      symmetric\
    \ key X\n   PAX-KDF-W(X, Y, Z)\n      PAX Key Derivation Function computed using\
    \ secret X, identifier Y,\n      and seed Z, and producing W octets of output\n\
    \   ||\n      string or binary data concatenation\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   The EAP framework [RFC3748] defines four basic steps that occur\n\
    \   during the execution of an EAP conversation between client and\n   server.\
    \  The first phase, discovery, is handled by the underlying\n   link-layer protocol.\
    \  The authentication phase is defined here.  The\n   key distribution and secure\
    \ association phases are handled\n   differently depending on the underlying protocol,\
    \ and are not\n   discussed in this document.\n        +--------+            \
    \                         +--------+\n        |        |                EAP-Request/Identity\
    \ |        |\n        | CLIENT |<------------------------------------| SERVER\
    \ |\n        |        |                                     |        |\n     \
    \   |        | EAP-Response/Identity               |        |\n        |     \
    \   |------------------------------------>|        |\n        |        |     \
    \                                |        |\n        |        |        EAP-PAX\
    \ (STD or SEC)         |        |\n        |        |<----------------------------------->|\
    \        |\n        |        | ...                             ... |        |\n\
    \        |        |<----------------------------------->|        |\n        |\
    \        |                                     |        |\n        |        |\
    \          EAP-Success or EAP-Failure |        |\n        |        |<------------------------------------|\
    \        |\n        +--------+                                     +--------+\n\
    \                    Figure 1: EAP-PAX Packet Exchanges\n   There are two distinct\
    \ subprotocols that can be executed.  The first,\n   PAX_STD, is used during typical\
    \ authentications.  The second,\n   PAX_SEC, provides more secure features such\
    \ as key provisioning and\n   identity protection.\n   PAX_STD and PAX_SEC have\
    \ two modes of operation.  When an AK update\n   is being performed, the client\
    \ and server exchange Diffie-Hellman\n   exponents g^X and g^Y, which are computed\
    \ modulo prime P or over an\n   elliptic curve multiplicative group.  When no\
    \ update is being\n   performed, and only session keys are being derived, X and\
    \ Y are\n   exchanged.  Using Diffie-Hellman during the key update provides\n\
    \   forward secrecy, and secure key derivation when a weak provisioned\n   key\
    \ is used.\n   The main deployment difference between PAX_STD and PAX_SEC is that\n\
    \   PAX_SEC requires a server-side public key.  More specifically, that\n   means\
    \ a private key known only to the server with corresponding\n   public key being\
    \ transmitted to the client during each PAX_SEC\n   session.  For every authentication,\
    \ the client is required to compute\n   computationally intensive public-key operations.\
    \  PAX_STD, on the\n   other hand, uses purely symmetric operations, other than\
    \ a possible\n   Diffie-Hellman exchange.\n   Each of the protocols is now defined.\n"
- title: 2.1.  PAX_STD Protocol
  contents:
  - "2.1.  PAX_STD Protocol\n   PAX_STD is a simple nonce-based authentication using\
    \ the strong\n   long-term key.  The client and server each exchange 256 bits\
    \ of\n   random data, which is used to seed the PAX-KDF for generation of\n  \
    \ session keys.  The randomly exchanged data in the protocol differs\n   depending\
    \ on whether a key update is being performed.  If no key\n   update is being performed,\
    \ then let:\n   o  A = X\n   o  B = Y\n   o  E = X || Y\n   Thus, A and B are\
    \ 256-bit values and E is their 512-bit\n   concatenation.  To provide forward\
    \ secrecy and security, let the\n   following be true when a key update is being\
    \ performed:\n   o  A = g^X\n   o  B = g^Y\n   o  E = g^(XY)\n   Here A and B\
    \ are Diffie-Hellman exponents whose length is determined\n   by the Diffie-Hellman\
    \ group size.  The value A is data transmitted\n   from the server to the client,\
    \ and B is data transmitted from the\n   client to the server.  The value E is\
    \ the entropy computed by each\n   that is used in Section 2.4 to perform key\
    \ derivation.\n   The full protocol is as follows:\n   o  PAX_STD-1 : client <-\
    \ server : A\n   o  PAX_STD-2 : client -> server : B, CID, MAC_CK(A, B, CID),\n\
    \      [optional ADE]\n   o  PAX_STD-3 : client <- server : MAC_CK(B, CID), [optional\
    \ ADE]\n   o  PAX-ACK : client -> server : [optional ADE]\n   See Section 2.3\
    \ for more information on the ADE component, and\n   Section 2.4 for the key derivation\
    \ process, including derivation of\n   CK.\n"
- title: 2.2.  PAX_SEC Protocol
  contents:
  - "2.2.  PAX_SEC Protocol\n   PAX_SEC is the high-security protocol designed to\
    \ provide identity\n   protection and support for provisioning.  PAX_SEC requires\
    \ a server-\n   side public key, and public-key operations for every authentication.\n\
    \   PAX_SEC can be performed with and without key update.  Let A, B, and\n   E\
    \ be defined as in the previous section.\n   The exchanges for PAX_SEC are as\
    \ follows:\n   o  PAX_SEC-1 : client <- server : M, PK or CertPK\n   o  PAX_SEC-2\
    \ : client -> server : Enc_PK(M, N, CID)\n   o  PAX_SEC-3 : client <- server :\
    \ A, MAC_N(A, CID)\n   o  PAX_SEC-4 : client -> server : B, MAC_CK(A, B, CID),\
    \ [optional\n      ADE]\n   o  PAX_SEC-5 : client <- server : MAC_CK(B, CID),\
    \ [optional ADE]\n   o  PAX-ACK : client -> server : [optional ADE]\n   See Section\
    \ 2.3 for more information on the ADE component, and\n   Section 2.4 for the key\
    \ derivation process, including derivation of\n   CK.\n   Use of CertPK is optional\
    \ in PAX_SEC; however, careful consideration\n   should be given before omitting\
    \ the CertPK.  The following table\n   describes the risks involved when using\
    \ PAX_SEC without a\n   certificate.\n        Certificate    |    Provisioning\
    \     |       Identity\n            Mode       |                     |      Protection\n\
    \     ==================+=====================+======================\n      \
    \ No Certificate  |    MiTM offline     |   ID reveal attack\n               \
    \        |  dictionary attack  |\n     ------------------+---------------------+---------------------\n\
    \        Self-Signed    |    MiTM offline     |   ID reveal attack\n        Certificate\
    \    |  dictionary attack  |\n     ------------------+---------------------+---------------------\n\
    \       Certificate/PK  |    MiTM offline     |   ID reveal attack\n         \
    \ Caching      |  dictionary attack  |  during first auth\n     ------------------+---------------------+---------------------\n\
    \         CA-Signed     |   secure mutual     |   secure mutual\n        Certificate\
    \    |   authentication    |   authentication\n                Figure 2: Table\
    \ of Different Security Modes\n   When using PAX_SEC to support provisioning with\
    \ a weak key, use of a\n   CA-signed certificate is RECOMMENDED.  When not using\
    \ a CA-signed\n   certificate, the initial authentication is vulnerable to an\
    \ offline\n   man-in-the-middle (MiTM) dictionary attack.\n   When using PAX_SEC\
    \ to support identity protection, use of either a\n   CA-signed certificate or\
    \ key caching is RECOMMENDED.  Caching\n   involves a client recording the public\
    \ key of the EAP server and\n   verifying its consistency between sessions, similar\
    \ to Secure SHell\n   (SSH) Protocol [RFC4252].  Otherwise, an attacker can spoof\
    \ an EAP\n   server during a session and gain knowledge of a client's identity.\n\
    \   Whenever certificates are used, clients MUST validate that the\n   certificate's\
    \ extended key usage, KeyPurposeID, is either\n   \"eapOverPPP\" or \"eapOverLAN\"\
    \ [RFC3280][RFC4334].  If the underlying\n   EAP transport protocol is known,\
    \ then the client MUST differentiate\n   between these values.  For example, an\
    \ IEEE 802.11 supplicant SHOULD\n   require KeyPurposeID == eapOverLAN.  By not\
    \ distinguishing, a client\n   could accept as valid an unauthorized server certificate.\n\
    \   When using EAP-PAX with Wireless LAN, clients SHOULD validate that\n   the\
    \ certificate's wlanSSID extension matches the SSID of the network\n   to which\
    \ it is currently authenticating.\n   In order to facilitate discussion of packet\
    \ validations, three client\n   security policies for PAX_SEC are defined.\n \
    \  open\n      Clients support both use of PK and CertPK.  If CertPK is used,\
    \ the\n      client MUST validate the KeyPurposeID.\n   caching\n      Clients\
    \ save PK for each EAP server the first time it encounters\n      the server,\
    \ and SHOULD NOT authenticate to EAP servers whose\n      public key has been\
    \ changed.  If CertPK is used, the client MUST\n      validate the KeyPurposeID.\n\
    \   strict\n      In strict mode, clients require servers to present a valid\n\
    \      certificate signed by a trusted CA.  As with the other modes, the\n   \
    \   KeyPurposeID MUST be validated.\n   Servers SHOULD support the PAX_SEC mode\
    \ of operation, and SHOULD\n   support both the use of PK and CertPK with PAX_SEC.\
    \  Clients MUST\n   support PAX_SEC, and MUST be capable of accepting both raw\
    \ public\n   keys and certificates from the server.  Local security policy will\n\
    \   define which forms of key or certificate authentications are\n   permissible.\
    \  Default configurations SHOULD require a minimum of the\n   caching security\
    \ policy, and MAY require strict.\n   The ability to perform key management on\
    \ the AK is built in to EAP-\n   PAX through the use of AK'.  However, key management\
    \ of the server\n   public key is beyond the scope of this document.  If self-signed\n\
    \   certificates are used, the deployers should be aware that expired\n   certificates\
    \ may be difficult to replace when the caching security\n   mode is used.\n  \
    \ See Section 4 for further discussion on security considerations.\n"
- title: 2.3.  Authenticated Data Exchange
  contents:
  - "2.3.  Authenticated Data Exchange\n   Messages PAX_STD-2, PAX_STD-3, PAX_SEC-4,\
    \ PAX_SEC-5, and PAX_ACK\n   contain optional component ADE.  This component is\
    \ used to convey\n   authenticated data between the client and server during the\n\
    \   authentication.\n   The Authenticated Data Exchanged (ADE) can be used in\
    \ a variety of\n   ways, including the implementation of channel bindings.  Channel\n\
    \   bindings allow link-layer network properties to be securely validated\n  \
    \ by the EAP client and server during the authentication session.\n   It is important\
    \ to note that ADE is not encrypted, so any data\n   included will not be confidential.\
    \  However, since these packets are\n   all protected by the Integrity Check Value\
    \ (ICV), authenticity is\n   guaranteed.\n   The ADE element consists of an arbitrary\
    \ number of subelements, each\n   with length and type specified.  If the number\
    \ and size of\n   subelements is too large, packet fragmentation will be necessary.\n\
    \   Vendor-specific options are supported.  See Section 3.3.\n   Note that more\
    \ than 1.5 round-trips may be necessary to execute a\n   particular authenticated\
    \ protocol within EAP-PAX.  In this case,\n   instead of sending an EAP-Success\
    \ after receiving the PAX_ACK, the\n   server can continue sending PAX_ACK messages\
    \ with attached elements.\n   The client responds to these PAX_ACK messages with\
    \ PAX_ACK messages\n   possibly containing more ADE elements.  Such an execution\
    \ could look\n   something like the following:\n        +--------+           \
    \                          +--------+\n        |        |                    \
    \       PAX_STD-1 |        |\n        |        |<------------------------------------|\
    \        |\n        |        | PAX_STD-2(ADE[1])                   |        |\n\
    \        |        |------------------------------------>|        |\n        |\
    \        |                   PAX_STD-3(ADE[2]) |        |\n        |        |<------------------------------------|\
    \        |\n        |        | PAX_ACK(ADE[3])                     |        |\n\
    \        |        |------------------------------------>|        |\n        |\
    \        |                     PAX_ACK(ADE[4]) |        |\n        |        |<------------------------------------|\
    \        |\n        |        |                                     |        |\n\
    \        |        |                 ...                 |        |\n        |\
    \        |                                     |        |\n        |        |\
    \ PAX_ACK(ADE[i])                     |        |\n        |        |------------------------------------>|\
    \        |\n        |        |                   PAX_ACK(ADE[i+1]) |        |\n\
    \        |        |<------------------------------------|        |\n        |\
    \        |                                     |        |\n        |        |\
    \                 ...                 |        |\n        |        |         \
    \                            |        |\n        |        |          EAP-Success\
    \ or EAP-Failure |        |\n        |        |<------------------------------------|\
    \        |\n        +--------+                                     +--------+\n\
    \          Figure 3: Extended Diagram of EAP-PAX Packet Exchanges\n"
- title: 2.4.  Key Derivation
  contents:
  - "2.4.  Key Derivation\n   Keys are derived independently of which authentication\
    \ mechanism was\n   used.  The process uses the entropy value E computed as described\n\
    \   above.  Session and authentication keys are computed as follows:\n   o  AK'\
    \ = PAX-KDF-16(AK, \"Authentication Key\", E)\n   o  MK = PAX-KDF-16(AK, \"Master\
    \ Key\", E)\n   o  CK = PAX-KDF-16(MK, \"Confirmation Key\", E)\n   o  ICK = PAX-KDF-16(MK,\
    \ \"Integrity Check Key\", E)\n   o  MID = PAX-KDF-16(MK, \"Method ID\", E)\n\
    \   o  MSK = PAX-KDF-64(MK, \"Master Session Key\", E)\n   o  EMSK = PAX-KDF-64(MK,\
    \ \"Extended Master Session Key\", E)\n   o  IV = PAX-KDF-64(0x00^16, \"Initialization\
    \ Vector\", E)\n   The IV is computed using a 16-octet NULL key.  The value of\
    \ AK' is\n   only used to replace AK if a key update is being performed.  The\
    \ EAP\n   Method ID is represented in ASCII as 32 hexadecimal characters\n   without\
    \ any octet delimiters such as colons or dashes.\n   The EAP Key Management Framework\
    \ [IETF.KEY] recommends specification\n   of key names and scope.  The EAP-PAX\
    \ Method-ID is the MID value\n   computed as described above.  The EAP peer name\
    \ is the CID value\n   exchanged in PAX_STD-2 and PAX_SEC-2.  The EAP server name\
    \ is an\n   empty string.\n"
- title: 2.5.  Verification Requirements
  contents:
  - "2.5.  Verification Requirements\n   In order for EAP-PAX to be secure, MACs must\
    \ be properly verified\n   each step of the way.  Any packet with an ICV (see\
    \ Section 3.4) that\n   fails validation must be silently discarded.  After ICV\
    \ validation,\n   the following checks must be performed:\n   PAX_STD-2\n    \
    \  The server MUST validate the included MAC, as it serves to\n      authenticate\
    \ the client to the server.  If this validation fails,\n      the server MUST\
    \ send an EAP-Failure message.\n   PAX_STD-3\n      The client MUST validate the\
    \ included MAC, as it serves to\n      authenticate the server to the client.\
    \  If this validation fails,\n      the client MUST send an EAP-Failure message.\n\
    \   PAX_SEC-1\n      The client MUST validate PK or CertPK in a manner specified\
    \ by its\n      local security policy (see Section 2.2).  If this validation\n\
    \      fails, the client MUST send an EAP-Failure message.\n   PAX_SEC-2\n   \
    \   The server MUST verify that the decrypted value of M matches the\n      value\
    \ transmitted in PAX_SEC-1.  If this validation fails, the\n      server MUST\
    \ send an EAP-Failure message.\n   PAX_SEC-3\n      The client MUST validate the\
    \ included MAC, as it serves to prevent\n      replay attacks.  If this validation\
    \ fails, the client MUST send an\n      EAP-Failure message.\n   PAX_SEC-4\n \
    \     The server MUST validate the included MAC, as it serves to\n      authenticate\
    \ the client to the server.  If this validation fails,\n      the server MUST\
    \ send an EAP-Failure message.\n   PAX_SEC-5\n      The client MUST validate the\
    \ included MAC, as it serves to\n      authenticate the server to the client.\
    \  If this validation fails,\n      the client MUST send an EAP-Failure message.\n\
    \   PAX-ACK\n      If PAX-ACK is received in response to a message fragment, the\n\
    \      receiver continues the protocol execution.  If PAX-ACK is received\n  \
    \    in response to PAX_STD-3 or PAX_SEC-5, then the server MUST send\n      an\
    \ EAP-Success message.  This indicates a successful execution of\n      PAX.\n"
- title: 2.6.  PAX Key Derivation Function
  contents:
  - "2.6.  PAX Key Derivation Function\n   The PAX-KDF is a secure key derivation\
    \ function used to generate\n   various keys from the provided entropy and shared\
    \ key.\n   PAX-KDF-W(X, Y, Z)\n   W  length, in octets, of the desired output\n\
    \   X  secret key used to protect the computation\n   Y  public identifier for\
    \ the key being derived\n   Z  exchanged entropy used to seed the KDF\n   Let's\
    \ define some variables and functions:\n   o  M_i = MAC_X(Y || Z || i), where\
    \ i is an 8-bit unsigned integer\n   o  L = ceiling(W/16)\n   o  F(A, B) = first\
    \ A octets of binary data B\n   We define PAX-KDF-W(X, Y, Z) = F(W, M_1 || M_2\
    \ || ... || M_L).\n   Consequently for the two values of W used in this document,\
    \ we have:\n   o  PAX-KDF-16(X, Y, Z) = MAC_X(Y || Z || 0x01)\n   o  PAX-KDF-64(X,\
    \ Y, Z) = MAC_X(Y || Z || 0x01) || MAC_X(Y || Z ||\n      0x02) || MAC_X(Y ||\
    \ Z || 0x03) || MAC_X(Y || Z || 0x04)\n   The MAC used in the PRF is extensible\
    \ and is the same MAC used in the\n   rest of the protocol.  It is specified in\
    \ the EAP-PAX header.\n"
- title: 3.  Protocol Specification
  contents:
  - "3.  Protocol Specification\n   In this section, the packet format and content\
    \ for the EAP-PAX\n   messages are defined.\n   EAP-PAX packets have the following\
    \ structure:\n    --- bit offset --->\n     0                   1            \
    \       2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Code      |  Identifier   |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Type      |    OP-Code    |     Flags     |    MAC ID     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  DH Group ID  | Public Key ID |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n    |                                     \
    \                          |\n    ...                         Payload        \
    \                   ...\n    |                                               \
    \                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    ...\
    \                           ICV                             ...\n    |       \
    \                                                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 4: EAP-PAX Packet Structure\n"
- title: 3.1.  Header Specification
  contents:
  - "3.1.  Header Specification\n   The Code, Identifier, Length, and Type fields\
    \ are all part of the EAP\n   header, and defined in [RFC3748].  IANA has allocated\
    \ EAP Method Type\n   46 for EAP-PAX; thus, the Type field in the EAP header MUST\
    \ be 46.\n"
- title: 3.1.1.  Op-Code
  contents:
  - "3.1.1.  Op-Code\n   The OP-Code field is one of the following values:\n   o \
    \ 0x01 : PAX_STD-1\n   o  0x02 : PAX_STD-2\n   o  0x03 : PAX_STD-3\n   o  0x11\
    \ : PAX_SEC-1\n   o  0x12 : PAX_SEC-2\n   o  0x13 : PAX_SEC-3\n   o  0x14 : PAX_SEC-4\n\
    \   o  0x15 : PAX_SEC-5\n   o  0x21 : PAX-ACK\n"
- title: 3.1.2.  Flags
  contents:
  - "3.1.2.  Flags\n   The flags field is broken up into 8 bits each representing\
    \ a binary\n   flag.  The field is defined as the Logical OR of the following\n\
    \   values:\n   o  0x01 : more fragments (MF)\n   o  0x02 : certificate enabled\
    \ (CE)\n   o  0x04 : ADE Included (AI)\n   o  0x08 - 0x80 : reserved\n   The MF\
    \ flag is set if the current packet required fragmentation, and\n   further fragments\
    \ need to be transmitted.  If a packet does not\n   require fragmentation, the\
    \ MF flag is not set.\n   When a payload requires fragmentation, each fragment\
    \ is transmitted,\n   and the receiving party responds with a PAX-ACK packet for\
    \ each\n   received fragment.\n   When using PAX_STD, the CE flag MUST be zero.\
    \  When using PAX_SEC,\n   the CE flag MUST be set if PAX_SEC-1 includes CertPK.\
    \  It MUST NOT be\n   set if PAX_SEC-1 includes PK.  If CE is set in PAX_SEC-1,\
    \ it MUST be\n   set in PAX_SEC-2, PAX_SEC-3, PAX_SEC-4, and PAX_SEC-5.  If either\n\
    \   party detects an inconsistent value of the CE flag, he MUST send an\n   EAP-Failure\
    \ message and discontinue the session.\n   The AI flag indicates the presence\
    \ of an ADE element.  AI MUST only\n   be set on packets PAX_STD-2, PAX_STD-3,\
    \ PAX_SEC-4, PAX_SEC-5, and\n   PAX_ACK if an ADE element is included.  On packets\
    \ of other types,\n   ADE elements MUST be silently discarded as they cannot be\n\
    \   authenticated.\n"
- title: 3.1.3.  MAC ID
  contents:
  - "3.1.3.  MAC ID\n   The MAC field specifies the cryptographic hash used to generate\
    \ the\n   keyed hash value.  The following are currently supported:\n   o  0x01\
    \ : HMAC_SHA1_128 [FIPS198] [FIPS180]\n   o  0x02 : HMAC_SHA256_128 [FIPS180]\n"
- title: 3.1.4.  DH Group ID
  contents:
  - "3.1.4.  DH Group ID\n   The Diffie-Hellman group field specifies the group used\
    \ in the\n   Diffie-Hellman computations.  The following are currently supported:\n\
    \   o  0x00 : NONE (iff not performing a key update)\n   o  0x01 : 2048-bit MODP\
    \ Group (IANA DH Group 14) [RFC3526]\n   o  0x02 : 3072-bit MODP Group (IANA DH\
    \ Group 15) [RFC3526]\n   o  0x03 : NIST ECC Group P-256 [FIPS186]\n   If no key\
    \ update is being performed, the DH Group ID field MUST be\n   zero.  Otherwise,\
    \ the DH Group ID field MUST NOT be zero.\n"
- title: 3.1.5.  Public Key ID
  contents:
  - "3.1.5.  Public Key ID\n   The Public Key ID field specifies the cipher used to\
    \ encrypt the\n   client's EAP-Response in PAX_SEC-2.\n   The following are currently\
    \ supported:\n   o  0x00 : NONE (if using PAX_STD)\n   o  0x01 : RSAES-OAEP [RFC3447]\n\
    \   o  0x02 : RSA-PKCS1-V1_5 [RFC3447]\n   o  0x03 : El-Gamal Over NIST ECC Group\
    \ P-256 [FIPS186]\n   If PAX_STD is being executed, the Public Key ID field MUST\
    \ be zero.\n   If PAX_SEC is being executed, the Public Key ID field MUST NOT\
    \ be\n   zero.\n   When using RSAES-OAEP, the hash algorithm and mask generation\n\
    \   algorithm used SHALL be the MAC specified by the MAC ID, keyed using\n   an\
    \ all-zero key.  The label SHALL be null.\n   The RSA-based schemes specified\
    \ here do not dictate the length of the\n   public keys.  DER encoding rules will\
    \ specify the key size in the key\n   or certificate [X.690].  Key sizes SHOULD\
    \ be used that reflect the\n   desired level of security.\n"
- title: 3.1.6.  Mandatory to Implement
  contents:
  - "3.1.6.  Mandatory to Implement\n   The following ciphersuite is mandatory to\
    \ implement and achieves\n   roughly 112 bits of security:\n   o  HMAC_SHA1_128\n\
    \   o  IANA DH Group 14 (2048 bits)\n   o  RSA-PKCS1-V1_5 (RECOMMEND 2048-bit\
    \ public key)\n   The following ciphersuite is RECOMMENDED and achieves 128 bits\
    \ of\n   security:\n   o  HMAC_SHA256_128\n   o  IANA DH Group 15 (3072 bits)\n\
    \   o  RSAES-OAEP (RECOMMEND 3072-bit public key)\n"
- title: 3.2.  Payload Formatting
  contents:
  - "3.2.  Payload Formatting\n   This section describes how to format the payload\
    \ field.  Depending on\n   the packet type, different values are transmitted.\
    \  Sections 2.1 and\n   2.2 define the fields, and in what order they are to be\
    \ concatenated.\n   For simplicity and since many field lengths can vary with\
    \ the\n   ciphersuite, each value is prepended with a 2-octet length value\n \
    \  encoded as an integer as described below.  This length field MUST\n   equal\
    \ the length in octets of the subsequent value field.\n              --- octet\
    \ offset --->\n               0                   1\n               0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5\n              +---+---------------------\n          \
    \    |len|  value ....\n              +---+--------\n                Figure 5:\
    \ Length Encoding for Data Elements\n   All integer values are stored as octet\
    \ arrays in network-byte order,\n   with the most significant octet first.  Integers\
    \ are padded on the\n   most significant end to reach octet boundaries.\n   Public\
    \ keys and certificates SHALL be in X.509 format [RFC3280]\n   encoded using the\
    \ Distinguished Encoding Rules (DER) format [X.690].\n   Strings are not null-terminated\
    \ and are encoded using UTF-8.  Binary\n   data, such as message authentication\
    \ codes, are transmitted as-is.\n   MACs are computed by concatenating the specified\
    \ values in the\n   specified order.  Note that for MACs, length fields are not\
    \ included,\n   though the resulting MAC will itself have a length field.  Values\
    \ are\n   encoded as described above, except that no length field is specified.\n\
    \   To illustrate this process, an example is presented.  What follows is\n  \
    \ the encoding of the payload for PAX_STD-2.  The three basic steps\n   will be\
    \ computing the MAC, forming the payload, and encrypting the\n   payload.\n  \
    \ To create the MAC, we first need to form the buffer that will be\n   MACed.\
    \  For this example, assume that no key update is being done and\n   HMAC_SHA1_128\
    \ is used such that the result will be a 16-octet value.\n   --- octet offset\
    \ --->\n    0                   1                   2                   3\n  \
    \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       32-octet integer A                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       32-octet integer B                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ...\
    \                    variable length CID                    ...\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  ||\n                  ||\n           CK --> MAC\n         \
    \         ||\n                  \\/\n   --- octet offset --->\n    0         \
    \          1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      16-octet MAC output      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 6: Example Encoding of PAX_STD-2 MAC Data\n   With this,\
    \ we can now create the encoded payload:\n   --- octet offset --->\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |32 |                     32-octet integer B\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       | L |                                                       |\n   +-+-+-+-+\
    \                                                       +\n   |              \
    \                                                 |\n   ...                  \
    \      L-octet CID                        ...\n   |                          \
    \                                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |16 |       MAC computed above      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 7: Example Encoding of PAX_STD-2 Packet\n   These 52+L octets\
    \ are then attached to the packet as the payload.\n   The ICV is then computed\
    \ by MACing the packet headers and payload,\n   and appended after the payload\
    \ (see Section 3.4).\n"
- title: 3.3.  Authenticated Data Exchange (ADE)
  contents:
  - "3.3.  Authenticated Data Exchange (ADE)\n   This section describes the formatting\
    \ of the ADE elements.  ADE\n   elements can only occur on packets of type PAX_STD-2,\
    \ PAX_STD-3,\n   PAX_SEC-4, PAX_SEC-5, and PAX_ACK.  Values included in other\
    \ packets\n   MUST be silently ignored.\n   The ADE element is preceded by its\
    \ 2-octet length L.  Each subelement\n   has first a 2-octet length Li followed\
    \ by a 2-octet type Ti.  The\n   entire ADE element looks as follows:\n   ---\
    \ octet offset --->\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ | L |L1 |T1 |                                                   |\n   +-+-+-+-+-+-+\
    \                                                   +\n   |                  \
    \                                             |\n   ...                 subADE-1,\
    \ type T1, length L1              ...\n   |                                  \
    \                             |\n   +                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   |L2 |T2 |                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                                   +\n   |                                  \
    \                             |\n   ...                 subADE-2, type T2, length\
    \ L2              ...\n   |                                                  \
    \             |\n   +         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         | more subADE elements...                           ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 8: Encoding of ADE Components\n   The following type\
    \ values have been allocated:\n   o  0x01 : Vendor Specific\n   o  0x02 : Client\
    \ Channel Binding Data\n   o  0x03 : Server Channel Binding Data\n   The first\
    \ three octets of a subADE utilizing type code 0x01 must be\n   the vendor's Enterprise\
    \ Number [RFC3232] as registered with IANA.\n   The format for such a subADE is\
    \ as follows:\n   --- octet offset --->\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Li | 1 | ENi |                                                 |\n   +-+-+-+-+-+-+-+\
    \                                                 +\n   |                    \
    \                                           |\n   ...   subADE-i, type Vendor\
    \ Specific, length Li, vendor ENi  ...\n   |                                 \
    \                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 9: Encoding of Vendor-specific ADE\n   Channel binding\
    \ subADEs have yet to be defined.  Future IETF\n   documents will specify the\
    \ format for these subADE fields.\n"
- title: 3.4.  Integrity Check Value (ICV)
  contents:
  - "3.4.  Integrity Check Value (ICV)\n   The ICV is computed as the MAC over the\
    \ entire EAP packet, including\n   the EAP header, the EAP-PAX header, and the\
    \ EAP-PAX payload.  The MAC\n   is keyed using the 16-octet ICK, using the MAC\
    \ type specified by the\n   MAC ID in the EAP-PAX header.  For packets of type\
    \ PAX_STD-1,\n   PAX_SEC-1, PAX_SEC-2, and PAX_SEC-3, where the MK has not yet\
    \ been\n   derived, the MAC is keyed using a zero-octet NULL key.\n   If the ICV\
    \ field is incorrect, the receiver MUST silently discard the\n   packet.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Any authentication protocol, especially one geared\
    \ for wireless\n   environments, must assume that adversaries have many capabilities.\n\
    \   In general, one must assume that all messages between the client and\n   server\
    \ are delivered via the adversary.  This allows passive\n   attackers to eavesdrop\
    \ on all traffic, while active attackers can\n   modify data in any way before\
    \ delivery.\n   In this section, we discuss the security properties and requirements\n\
    \   of EAP-PAX with respect to this threat model.  Also note that the\n   security\
    \ of PAX can be proved using under the Random Oracle model.\n"
- title: 4.1.  Server Certificates
  contents:
  - "4.1.  Server Certificates\n   PAX_SEC can be used in several configurations.\
    \  It can be used with\n   or without a server-side certificate.  Section 2.2\
    \ details the\n   possible modes and the resulting security risk.\n   When using\
    \ PAX_SEC for identity protection and not using a CA-signed\n   certificate, an\
    \ attacker can convince a client to reveal his\n   username.  To achieve this,\
    \ an attacker can simply forge a PAX_SEC-1\n   message and send it to the client.\
    \  The client would respond with a\n   PAX_SEC-2 message containing his encrypted\
    \ username.  The attacker\n   can then use his associated private key to decrypt\
    \ the client's\n   username.  Use of key caching can reduce the risk of identity\n\
    \   revelation by allowing clients to detect when the EAP server to which\n  \
    \ they are accustom has a different public key.\n   When provisioning with PAX_SEC\
    \ and not using a CA-signed certificate,\n   an attacker could first forge a PAX_SEC-1\
    \ message and send it to the\n   client.  The client would respond with a PAX_SEC-2\
    \ message.  Using\n   the decrypted value of N, an attacker could forge a PAX_SEC-3\n\
    \   message.  Once the client responds with a PAX_SEC-4 message, an\n   attacker\
    \ can guess values of the weak AK and compute CK = PAX-KDF(AK,\n   \"Confirmation\
    \ Key\", g^XY).  Given enough time, the attacker can\n   obtain both the old AK\
    \ and new AK' and forge a responding PAX_SEC-5.\n"
- title: 4.2.  Server Security
  contents:
  - "4.2.  Server Security\n   In order to maintain a reasonable security policy,\
    \ the server should\n   manage five pieces of information concerning each user,\
    \ most\n   obviously, the username and current key.  In addition, the server\n\
    \   must keep a bit that indicates whether the current key is weak.  Weak\n  \
    \ keys must be updated prior to key derivation.  Also, the server\n   should track\
    \ the date of last key update.  To implement the coarse-\n   grained forward secrecy,\
    \ the authentication key must be updated on a\n   regular basis, and this field\
    \ can be used to expire keys.  Last, the\n   server should track the previous\
    \ key, to prevent attacks where an\n   adversary desynchronizes the key state\
    \ by interfering with PAX-ACK\n   packets.  See Appendix B for more suggested\
    \ implementation strategies\n   that prevent key desynchronization attacks.\n\
    \   Since the client keys are stored in plaintext on the server, special\n   care\
    \ should be given to the overall security of the authentication\n   server.  An\
    \ operating system-level attack yielding root access to an\n   intruder would\
    \ result in the compromise of all client credentials.\n"
- title: 4.3.  EAP Security Claims
  contents:
  - "4.3.  EAP Security Claims\n   This section describes EAP-PAX in terms of specific\
    \ security\n   terminology as required by [RFC3748].\n"
- title: 4.3.1.  Protected Ciphersuite Negotiation
  contents:
  - "4.3.1.  Protected Ciphersuite Negotiation\n   In the initial packet from the\
    \ server, the server specifies the\n   ciphersuite in the packet header.  The\
    \ server is in total control of\n   the ciphersuite; thus, a client not supporting\
    \ the specified\n   ciphersuite will not be able to authenticate.  In addition,\
    \ each\n   client's local security policy should specify secure ciphersuites the\n\
    \   client will accept.  The ciphersuite specified in PAX_STD-1 and\n   PAX_SEC-1\
    \ MUST remain the same in successive packets within the same\n   authentication\
    \ session.  Since later packets are covered by an ICV\n   keyed with the ICK,\
    \ the server can verify that the originally\n   transmitted ciphersuite was not\
    \ altered by an adversary.\n"
- title: 4.3.2.  Mutual Authentication
  contents:
  - "4.3.2.  Mutual Authentication\n   Both PAX_STD and PAX_SEC authenticate the client\
    \ and the server, and\n   consequently achieve explicit mutual authentication.\n"
- title: 4.3.3.  Integrity Protection
  contents:
  - "4.3.3.  Integrity Protection\n   The ICV described in Section 3.4 provides integrity\
    \ protection once\n   the integrity check key has been derived.  The header values\
    \ in the\n   unprotected packets can be verified when an ICV is received later\
    \ in\n   the session.\n"
- title: 4.3.4.  Replay Protection
  contents:
  - "4.3.4.  Replay Protection\n   EAP-PAX is inherently designed to avoid replay\
    \ attacks by\n   cryptographically binding each packet to the previous one.  Also\
    \ the\n   EAP sequence number is covered by the ICV to further strengthen\n  \
    \ resistance to replay attacks.\n"
- title: 4.3.5.  Confidentiality
  contents:
  - "4.3.5.  Confidentiality\n   With identity protection enabled, PAX_SEC provides\
    \ full\n   confidentiality.\n"
- title: 4.3.6.  Key Derivation
  contents:
  - "4.3.6.  Key Derivation\n   Session keys are derived using the PAX-KDF and fresh\
    \ entropy supplied\n   by both the client and the server.  Since the key hierarchy\
    \ is\n   derived from the shared password, only someone with knowledge of that\n\
    \   password or the capability of guessing it is capable of deriving the\n   session\
    \ keys.  One of the main benefits of PAX_SEC is that it allows\n   you to bootstrap\
    \ a strong shared secret using a weak password while\n   preventing offline dictionary\
    \ attacks.\n"
- title: 4.3.7.  Key Strength
  contents:
  - "4.3.7.  Key Strength\n   Authentication keys are 128 bits.  The key generation\
    \ is protected by\n   a Diffie-Hellman key exchange.  It is believed that a 3000-bit\
    \ MODP\n   public-key scheme is roughly equivalent [RFC3766] to a 128-bit\n  \
    \ symmetric-key scheme.  Consequently, EAP-PAX requires the use of a\n   Diffie-Hellman\
    \ group with modulus larger than 3000.  Also, the\n   exponent used as the private\
    \ DH parameter must be at least twice as\n   large as the key eventually generated.\
    \  Consequently, EAP-PAX uses\n   256-bit DH exponents.  Thus, the authentication\
    \ keys contain the full\n   128 bits of security.\n   Future ciphersuites defined\
    \ for EAP-PAX MUST contain a minimum of 128\n   bits of security.\n"
- title: 4.3.8.  Dictionary Attack Resistance
  contents:
  - "4.3.8.  Dictionary Attack Resistance\n   EAP-PAX is resistant to dictionary attacks,\
    \ except for the case where\n   a weak password is initially used and the server\
    \ is not using a\n   certificate for authentication.  See Section 4.1 for more\
    \ information\n   on resistance to dictionary attacks.\n"
- title: 4.3.9.  Fast Reconnect
  contents:
  - "4.3.9.  Fast Reconnect\n   Although a specific fast reconnection option is not\
    \ included,\n   execution of PAX_STD requires very little computation time and\
    \ is\n   therefore bound primarily by the latency of the Authentication,\n   Authorization,\
    \ and Accounting (AAA) server.\n"
- title: 4.3.10.  Session Independence
  contents:
  - "4.3.10.  Session Independence\n   This protocol easily achieves backward secrecy\
    \ through, among other\n   things, use of the PAX-KDF.  Given a current session\
    \ key, attackers\n   can discover neither the entropy used to generate it nor\
    \ the key used\n   to encrypt that entropy as it was transmitted across the network.\n\
    \   This protocol has coarse-grained forward secrecy.  Compromised\n   session\
    \ keys are only useful on data for that session, and one cannot\n   derive AK\
    \ from them.  If an attacker can discover AK, that value can\n   only be used\
    \ to compromise session keys derived using that AK.\n   Reasonably frequent password\
    \ updates will help mitigate such attacks.\n   Session keys are independently\
    \ generated using fresh nonces for each\n   session, and therefore the sessions\
    \ are independent.\n"
- title: 4.3.11.  Fragmentation
  contents:
  - "4.3.11.  Fragmentation\n   Fragmentation and reassembly is supported through\
    \ the fragmentation\n   flag in the header.\n"
- title: 4.3.12.  Channel Binding
  contents:
  - "4.3.12.  Channel Binding\n   EAP-PAX can be extended to support channel bindings\
    \ through the use\n   of its subADE fields.\n"
- title: 4.3.13.  Cryptographic Binding
  contents:
  - "4.3.13.  Cryptographic Binding\n   EAP-PAX does not include any cryptographic\
    \ binding.  This is relevant\n   only for tunneled methods.\n"
- title: 4.3.14.  Negotiation Attack Prevention
  contents:
  - "4.3.14.  Negotiation Attack Prevention\n   EAP is susceptible to an attack where\
    \ an attacker uses NAKs to\n   convince an EAP client and server to use a less\
    \ secure method, and\n   can be prevented using method-specific integrity protection\
    \ on NAK\n   messages.  Since EAP-PAX does not have suitable keys derived for\
    \ this\n   integrity protection at the beginning of a PAX conversation, this is\n\
    \   not included.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document requires IANA to maintain the namespace\
    \ for the\n   following header fields: MAC ID, DH Group ID, Public Key ID, and\
    \ ADE\n   type.  The initial namespace populations are as follows.\n   MAC ID\
    \ Namespace:\n   o  0x01 : HMAC_SHA1_128\n   o  0x02 : HMAC_SHA256_128\n   DH\
    \ Group ID Namespace:\n   o  0x00 : NONE\n   o  0x01 : IANA DH Group 14\n   o\
    \  0x02 : IANA DH Group 15\n   o  0x03 : NIST ECC Group P-256\n   Public Key ID\
    \ Namespace:\n   o  0x00 : NONE\n   o  0x01 : RSAES-OAEP\n   o  0x02 : RSA-PKCS1-V1_5\n\
    \   o  0x03 : El-Gamal Over NIST ECC Group P-256\n   ADE Type Namespace:\n   o\
    \  0x01 : Vendor Specific\n   o  0x02 : Client Channel Binding Data\n   o  0x03\
    \ : Server Channel Binding Data\n   Allocation of values for these namespaces\
    \ shall be reviewed by a\n   Designated Expert appointed by the IESG.  The Designated\
    \ Expert will\n   post a request to the EAP WG mailing list (or a successor designated\n\
    \   by the Designated Expert) for comment and review, including an\n   Internet-Draft.\
    \  Before a period of 30 days has passed, the\n   Designated Expert will either\
    \ approve or deny the registration\n   request and publish a notice of the decision\
    \ to the EAP WG mailing\n   list or its successor, as well as informing IANA.\
    \  A denial notice\n   must be justified by an explanation and, in the cases where\
    \ it is\n   possible, concrete suggestions on how the request can be modified\
    \ so\n   as to become acceptable.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   The authors would like to thank Jonathan Katz for discussion\
    \ with\n   respect to provable security, Bernard Aboba for technical guidance,\n\
    \   Jari Arkko for his expert review, and Florent Bersani for feedback\n   and\
    \ suggestions.  Finally, the authors would like to thank the\n   Defense Information\
    \ Systems Agency for initially funding this work.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FIPS180]    National Institute for Standards\
    \ and Technology, \"Secure\n                Hash Standard\", Federal Information\
    \ Processing Standard\n                180-2, August 2002.\n   [FIPS186]    National\
    \ Institute for Standards and Technology,\n                \"Digital Signature\
    \ Standard (DSS)\", Federal Information\n                Processing Standard 186,\
    \ May 1994.\n   [FIPS198]    National Institute for Standards and Technology,\
    \ \"The\n                Keyed-Hash Message Authentication Code (HMAC)\", Federal\n\
    \                Information Processing Standard 198, March 2002.\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3232]    Reynolds, J., \"Assigned\
    \ Numbers: RFC 1700 is Replaced by\n                an On-line Database\", RFC\
    \ 3232, January 2002.\n   [RFC3280]    Housley, R., Polk, W., Ford, W., and D.\
    \ Solo, \"Internet\n                X.509 Public Key Infrastructure Certificate\
    \ and\n                Certificate Revocation List (CRL) Profile\", RFC 3280,\n\
    \                April 2002.\n   [RFC3447]    Jonsson, J. and B. Kaliski, \"Public-Key\
    \ Cryptography\n                Standards (PKCS) #1: RSA Cryptography Specifications\n\
    \                Version 2.1\", RFC 3447, February 2003.\n   [RFC3526]    Kivinen,\
    \ T. and M. Kojo, \"More Modular Exponential\n                (MODP) Diffie-Hellman\
    \ groups for Internet Key Exchange\n                (IKE)\", RFC 3526, May 2003.\n\
    \   [RFC3748]    Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and\n    \
    \            H. Levkowetz, \"Extensible Authentication Protocol\n            \
    \    (EAP)\", RFC 3748, June 2004.\n   [RFC4282]    Aboba, B., Beadles, M., Arkko,\
    \ J., and P. Eronen, \"The\n                Network Access Identifier\", RFC 4282,\
    \ December 2005.\n   [RFC4334]    Housley, R. and T. Moore, \"Certificate Extensions\
    \ and\n                Attributes Supporting Authentication in Point-to-Point\n\
    \                Protocol (PPP) and Wireless Local Area Networks (WLAN)\",\n \
    \               RFC 4334, February 2006.\n   [X.690]      International Telecommunications\
    \ Union, \"Information\n                technology - ASN.1 encoding rules: Specification\
    \ of\n                Basic Encoding Rules (BER), Canonical Encoding Rules\n \
    \               (CER) and Distinguished Encoding Rules (DER)\", Data\n       \
    \         Networks and Open System Communication Recommendation\n            \
    \    X.690, July 2002.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IETF.KEY]   Aboba, B., Simon, D., Arkko, J.,\
    \ Eronen, P., and H.\n                Levkowetz, \"Extensible Authentication Protocol\
    \ (EAP) Key\n                Management Framework\", Work in Progress.\n   [IEEE.80211]\
    \ Institute of Electrical and Electronics Engineers,\n                \"Information\
    \ technology - Telecommunications and\n                information exchange between\
    \ systems - Local and\n                metropolitan area networks - Specific Requirements\
    \ Part\n                11:  Wireless LAN Medium Access Control (MAC) and\n  \
    \              Physical Layer (PHY) Specifications\", IEEE Standard\n        \
    \        802.11-1997, 1997.\n   [RFC2631]    Rescorla, E., \"Diffie-Hellman Key\
    \ Agreement Method\", RFC\n                2631, June 1999.\n   [RFC3766]    Orman,\
    \ H. and P. Hoffman, \"Determining Strengths For\n                Public Keys\
    \ Used For Exchanging Symmetric Keys\", BCP 86,\n                RFC 3766, April\
    \ 2004.\n   [RFC4017]    Stanley, D., Walker, J., and B. Aboba, \"Extensible\n\
    \                Authentication Protocol (EAP) Method Requirements for\n     \
    \           Wireless LANs\", RFC 4017, March 2005.\n   [RFC4252]    Ylonen, T.\
    \ and C. Lonvick, \"The Secure Shell (SSH)\n                Authentication Protocol\"\
    , RFC 4252, January 2006.\n"
- title: Appendix A.  Key Generation from Passwords
  contents:
  - "Appendix A.  Key Generation from Passwords\n   If a 128-bit key is not available\
    \ to bootstrap the authentication\n   process, then one must be generated from\
    \ some sort of weak preshared\n   key.  Note that the security of the hashing\
    \ process is unimportant,\n   as long as it does not significantly decrease the\
    \ password's entropy.\n   Resistance to dictionary attacks is provided by PAX_SEC.\n\
    \   Consequently, computing the SHA-1 of the password and truncating the\n   output\
    \ to 128 bits is RECOMMENDED as a means of converting a weak\n   password to a\
    \ key for provisioning.\n   When using other preshared credentials, such as a\
    \ Kerberos Data\n   Encryption Standard (DES) key, or an MD4-hashed Microsoft\
    \ Challenge\n   Handshake Authentication Protocol (MSCHAP) password, to provision\n\
    \   clients, these keys SHOULD still be put through SHA-1 before being\n   used.\
    \  This serves to protect the credentials from possible\n   compromise, and also\
    \ keeps things uniform.  As an example, consider\n   provisioning using an existing\
    \ Kerberos credential.  The initial key\n   computation could be SHA1_128(string2key(password)).\
    \  The KDC,\n   storing string2key(password), would also be able to compute this\n\
    \   initial key value.\n"
- title: Appendix B.  Implementation Suggestions
  contents:
  - "Appendix B.  Implementation Suggestions\n   In this section, two implementation\
    \ strategies are discussed.  The\n   first describes how best to implement and\
    \ deploy EAP-PAX in an\n   enterprise network for IEEE 802.11i authentication.\
    \  The second\n   describes how to use EAP-PAX for device authentication in a\
    \ 3G-style\n   mobile phone network.\n"
- title: B.1.  WiFi Enterprise Network
  contents:
  - "B.1.  WiFi Enterprise Network\n   For the purposes of this section, a wireless\
    \ enterprise network is\n   defined to have the following characteristics:\n \
    \  o  Users wish to obtain network access through IEEE 802.11 access\n      points.\n\
    \   o  Users can possibly have multiple devices (laptops, PDAs, etc.)\n      they\
    \ wish to authenticate.\n   o  A preexisting authentication framework already\
    \ exists, for\n      example, a Microsoft Active Directory domain or a Kerberos\
    \ realm.\n   Two of the biggest challenges in an enterprise WiFi network is key\n\
    \   provisioning and support for multiple devices.  Consequently, it is\n   recommended\
    \ that the client's Network Access Identifier (NAI) have\n   the format username/KID@realm,\
    \ where KID is a key ID that can be used\n   to distinguish between different\
    \ devices.\n   The client's supplicant can use a variety of sources to automatically\n\
    \   generate the KID.  Two of the better choices would likely be the\n   computer's\
    \ NETBIOS name, or local Ethernet adapter's MAC address.\n   The wireless adapter's\
    \ address may be a suboptimal choice, as the\n   user may only have one PCCARD\
    \ adapter for multiple systems.\n   With an authentication system already in place,\
    \ there is a natural\n   choice for the provisioned key.  Clients can authenticate\
    \ using their\n   preexisting password.  When the server is presented with a new\
    \ KID,\n   it can create a new key record on the server and use the user's\n \
    \  current password as the provisioned key.  For example, for Active\n   Directory,\
    \ the supplicant could use Microsoft's NtPasswordHash\n   function to generate\
    \ a key verifiable by the server.  It is suggested\n   that this key then be fed\
    \ through SHA1_128 before being used in a\n   non-Microsoft authentication protocol.\n\
    \   After a key update, the server should keep track of both the old and\n   new\
    \ authentication keys.  When two keys exist, the server should\n   attempt to\
    \ use both to validate the MACs on transmitted packets.\n   Once a client successfully\
    \ authenticates using the new key, the\n   server should discard the old key.\
    \  This prevents desynchronization\n   attacks.\n"
- title: B.2.  Mobile Phone Network
  contents:
  - "B.2.  Mobile Phone Network\n   In a mobile phone system, we no longer need to\
    \ worry about supporting\n   multiple keys per identity.  Presumably, each mobile\
    \ device has a\n   unique identity.  However, if multiple devices per identity\
    \ are\n   desired, a method similar to that presented in Section B.1 could be\n\
    \   used.\n   Provisioning could easily be accomplished by issuing customers a\
    \ 6-\n   digit PIN they could type into their phone's keypad.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   T. Charles Clancy\n   DoD Laboratory for Telecommunications\
    \ Sciences\n   8080 Greenmeade Drive\n   College Park, MD  20740\n   USA\n   EMail:\
    \ clancy@ltsnet.net\n   William A. Arbaugh\n   University of Maryland\n   Department\
    \ of Computer Science\n   College Park, MD  20742\n   USA\n   EMail: waa@cs.umd.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
