- contents:
  - "           Event Notification Management Information Base for\n  Data over Cable
    Service Interface Specifications (DOCSIS)-Compliant\n            Cable Modems
    and Cable Modem Termination Systems\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in the Internet community.\n   In
    particular, it defines a basic set of managed objects for Simple\n   Network Management
    Protocol (SNMP) based event notification\n   management of Data Over Cable Service
    Interface Specification\n   (DOCSIS) compliant Cable Modems and Cable Modem Termination
    Systems.\n   This MIB is defined as an extension to the DOCSIS Cable Device MIB.\n
    \  This memo specifies a MIB module in a manner that is compliant to the\n   Structure
    of Management Information Version 2 (SMIv2).  The set of\n   objects is consistent
    with the SNMP framework and existing SNMP\n   standards.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. The Internet-Standard Management Framework ......................2\n
    \  2. Glossary ........................................................2\n      2.1.
    BPI - Baseline Privacy Interface ...........................3\n      2.2. BPI
    - Baseline Privacy Plus Interface ......................3\n      2.3. CATV .......................................................3\n
    \     2.4. CM - Cable Modem ...........................................3\n      2.5.
    CMTS - Cable Modem Termination System ......................3\n      2.6. DOCSIS
    .....................................................3\n      2.7. Downstream
    .................................................4\n      2.8. Head-end ...................................................4\n
    \     2.9. MAC Packet .................................................4\n      2.10.
    RF ........................................................4\n      2.11. SID
    .......................................................4\n      2.12. TLV .......................................................4\n
    \     2.13. Upstream ..................................................4\n   3.
    Overview ........................................................4\n      3.1.
    Structure of the MIB .......................................5\n   4. Definitions
    .....................................................5\n   5. Contributors ...................................................35\n
    \  6. Acknowledgements ...............................................36\n   7.
    Security Considerations ........................................36\n   8. IANA
    Considerations ............................................37\n   9. References
    .....................................................37\n      9.1. Normative
    References ......................................37\n      9.2. Informative References
    ....................................38\n"
  title: Table of Contents
- contents:
  - "1.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [16].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies a MIB\n
    \  module that is compliant to the SMIv2, which is described in STD 58,\n   RFC
    2578 [2], STD 58, RFC 2579 [3] and STD 58, RFC 2580 [4].\n"
  title: 1.  The Internet-Standard Management Framework
- contents:
  - "2.  Glossary\n   The terms in this document are derived either from normal cable\n
    \  system usage, or from the documents associated with the Data Over\n   Cable
    Service Interface Specification (DOCSIS) process.\n"
  - contents:
    - "2.1.  BPI - Baseline Privacy Interface\n   A mechanism for providing data privacy
      over the HFC network in DOCSIS\n   1.0 systems [8].\n"
    title: 2.1.  BPI - Baseline Privacy Interface
  - contents:
    - "2.2.  BPI - Baseline Privacy Plus Interface\n   A mechanism that extends the
      Baseline Privacy Interface with the\n   addition of CM authentication over the
      HFC network in DOCSIS 1.1/2.0\n   systems and beyond [9].\n"
    title: 2.2.  BPI - Baseline Privacy Plus Interface
  - contents:
    - "2.3.  CATV\n   Originally \"Community Antenna Television\", now used to refer
      to any\n   cable or hybrid fiber and cable system used to deliver video signals\n
      \  to a community.\n"
    title: 2.3.  CATV
  - contents:
    - "2.4.  CM - Cable Modem\n   A CM acts as a \"slave\" station in a DOCSIS-compliant
      cable data\n   system.\n"
    title: 2.4.  CM - Cable Modem
  - contents:
    - "2.5.  CMTS - Cable Modem Termination System\n   A generic term covering a cable
      bridge or cable router in a head-end.\n   A CMTS acts as the master station
      in a DOCSIS-compliant cable data\n   system.  It is the only station that transmits
      downstream, and it\n   controls the scheduling of upstream transmissions by
      its associated\n   CMs.\n"
    title: 2.5.  CMTS - Cable Modem Termination System
  - contents:
    - "2.6.  DOCSIS\n   DOCSIS stands for \"Data-over-Cable Service Interface Specifications\"\n
      \  and refers to the ITU-T J.112 Annex B standard for cable modem\n   systems
      [10], [13] commonly known as DOCSIS 1.0.  The DOCSIS 1.1\n   specification is
      an extension of DOCSIS 1.0, with new features to\n   support quality of service,
      fragmentation, and requirements for\n   European cable plants [14].\n   DOCSIS
      2.0 [15] builds upon DOCSIS 1.1 and provides all of the\n   features and functionality
      that DOCSIS 1.1 provides.  In addition, it\n   provides some significant enhancements
      in upstream capacity over\n   DOCSIS 1.1, such as 30.72 Mbps maximum upstream
      channel capacity,\n   Synchronous-Code Division Multiple Access (CDMA) operation,
      increased\n   robustness to upstream noise and channel impairments, Enhanced
      Reed-\n   Solomon error correction, and Trellis Coded Modulation.\n"
    title: 2.6.  DOCSIS
  - contents:
    - "2.7.  Downstream\n   The direction from the CMTS to the CM.\n"
    title: 2.7.  Downstream
  - contents:
    - "2.8.  Head-end\n   The origination point in most cable systems of the subscriber
      video\n   signals.  Generally also the location of the CMTS equipment.\n"
    title: 2.8.  Head-end
  - contents:
    - "2.9.  MAC Packet\n   A term referring to DOCSIS Protocol Data Unit (PDU).\n"
    title: 2.9.  MAC Packet
  - contents:
    - "2.10.  RF\n   A term referring to Radio Frequency.\n"
    title: 2.10.  RF
  - contents:
    - "2.11.  SID\n   A term referring to DOCSIS Service ID.  The SID identifies a\n
      \  particular upstream bandwidth allocation and class-of-service\n   management
      for DOCSIS, and identifies a particular bidirectional\n   security association
      for BPI.\n"
    title: 2.11.  SID
  - contents:
    - "2.12.  TLV\n   TLV stands for Type/Length/Value.  TLV is an encoding method\n
      \  consisting of three fields.  The first field indicates the type of\n   element,
      the second field indicates the length of the element, and\n   the third field
      contains the element's value.\n"
    title: 2.12.  TLV
  - contents:
    - "2.13.  Upstream\n   The direction from the CM to the CMTS.\n"
    title: 2.13.  Upstream
  title: 2.  Glossary
- contents:
  - "3.  Overview\n   Offering High Speed Internet Service in the cable industry has
    become\n   extremely successful.  DOCSIS devices are being deployed at a rate
    of\n   multiple thousands per day.  Although operators are enjoying\n   successful
    deployment, they are also facing the challenge of properly\n   managing deployed
    devices.  Operators are using Simple Network\n   Management Protocol, a set of
    Management Information Base (MIB)\n   required by DOCSIS, and SNMP Notifications
    to manage deployed DOCSIS\n   devices.  The usage of SNMP Notification for event
    reporting is\n   becoming more popular as an effective and efficient method for\n
    \  network monitoring.\n   Unfortunately, only a minimal set of SNMP Notifications
    is currently\n   available.  This notification MIB, in conjunction with [11] and
    [12],\n   provides a minimum set of standard DOCSIS Notifications that DOCSIS\n
    \  devices SHOULD support to enable successful management of DOCSIS\n   devices
    and networks.\n   This document defines a set of objects required for the event\n
    \  notification management of DOCSIS-compliant Cable Modems (CMs) and\n   Cable
    Modem Termination Systems (CMTSs).  The MIB module is derived\n   from the DOCSIS
    [11] and [12].\n   Appendix H of [11] defines all DOCSIS 1.1 required events,
    and\n   Appendix D of [12] does that for DOCSIS 2.0.  The notifications\n   specified
    in this document are used to notify these events via SNMP.\n   In this document,
    the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\",
    \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n   and \"OPTIONAL\" are
    to be interpreted as described in RFC 2119 [1].\n"
  - contents:
    - "3.1.  Structure of the MIB\n   This DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB
      was designed to extend\n   the RFC2669 [5] notification module.\n   Two groups
      of SNMP notification objects are defined in this document.\n   One group defines
      notifications for cable modem events, and the other\n   group defines notifications
      for cable modem termination system\n   events.\n   DOCSIS defines numerous events,
      and each event is assigned to a\n   functional category.  This MIB defines a
      notification object for each\n   functional category.  The varbinding list of
      each notification\n   includes information about the event that occurred on
      the device.\n"
    title: 3.1.  Structure of the MIB
  title: 3.  Overview
- contents:
  - "4.  Definitions\n   The MIB module defined here IMPORTs from SNMPv2-SMI [2],
    SNMPv2-CONF\n   [3], DOCS-CABLE-DEVICE-MIB [5], DOCS-IF-MIB [6], and IF-MIB [7].\n
    \  DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB DEFINITIONS ::= BEGIN\n     IMPORTS\n
    \          MODULE-IDENTITY,\n           OBJECT-TYPE,\n           NOTIFICATION-TYPE,\n
    \          mib-2\n                 FROM SNMPv2-SMI -- RFC 2578\n           MODULE-COMPLIANCE,\n
    \          OBJECT-GROUP,\n           NOTIFICATION-GROUP\n                 FROM
    SNMPv2-CONF -- RFC 2580\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           docsDevSwFilename,\n           docsDevSwServer,\n
    \          docsDevServerDhcp,\n           docsDevServerTime\n                 FROM
    DOCS-CABLE-DEVICE-MIB -- RFC 2669\n           docsIfCmCmtsAddress,\n           docsIfCmtsCmStatusMacAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfCmtsCmStatusModulationType\n                 FROM DOCS-IF-MIB
    -- RFC 4546\n           ifPhysAddress\n                 FROM IF-MIB;  -- RFC 2863\n
    \    docsDevNotifMIB MODULE-IDENTITY\n           LAST-UPDATED    \"200605240000Z\"
    -- May 24, 2006\n           ORGANIZATION    \"IETF IP over Cable Data Network\n
    \                           Working Group\"\n           CONTACT-INFO\n               \"
    \       Azlina Ahmad\n                Postal: Cisco Systems, Inc.\n                        170
    West Tasman Drive\n                        San Jose, CA 95134, U.S.A.\n                Phone:
    \  408 853 7927\n                E-mail: azlina@cisco.com\n                        Greg
    Nakanishi\n                Postal: Motorola\n                        6450 Sequence
    Drive\n                        San Diego, CA 92121, U.S.A.\n                Phone:
    \  858 404 2366\n                E-mail: gnakanishi@motorola.com\n                IETF
    IPCDN Working Group\n                General Discussion: ipcdn@ietf.org\n                Subscribe:
    http://www.ietf.org/mailman/listinfo/ipcdn\n                Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn\n
    \               Co-chairs: Richard Woundy,\n                             richard_woundy@cable.comcast.com\n
    \                          Jean-Francois Mule, jf.mule@cablelabs.com\"\n           DESCRIPTION\n
    \              \"The Event Notification MIB is an extension of the\n               CABLE
    DEVICE MIB.  It defines various notification\n               objects for both
    cable modem and cable modem termination\n               systems.  Two groups of
    SNMP notification objects are\n               defined.  One group is for notifying
    cable modem events,\n               and one group is for notifying cable modem
    termination\n               system events.\n               DOCSIS defines numerous
    events, and each event is\n               assigned to a functional category.  This
    MIB defines\n               a notification object for each functional category.\n
    \              The varbinding list of each notification includes\n               information
    about the event that occurred on the\n               device.\n               Copyright
    (C) The Internet Society (2006).  This version\n               of this MIB module
    is part of RFC 4547; see the RFC\n               itself for full legal notices.\"\n
    \          REVISION \"200605240000Z\" -- May 24, 2006\n           DESCRIPTION\n
    \              \"Initial version, published as RFC 4547.\"\n           ::= { mib-2
    132 }\n   docsDevNotifControl OBJECT IDENTIFIER ::= { docsDevNotifMIB 1}\n   docsDevCmNotifs
    OBJECT IDENTIFIER ::= { docsDevNotifMIB 2 0 }\n   docsDevCmtsNotifs OBJECT IDENTIFIER
    ::= { docsDevNotifMIB 3 0 }\n   docsDevCmNotifControl OBJECT-TYPE\n       SYNTAX
    BITS {\n           cmInitTLVUnknownNotif( 0),\n           cmDynServReqFailNotif(
    1),\n           cmDynServRspFailNotif( 2),\n           cmDynServAckFailNotif(
    3),\n           cmBpiInitNotif( 4),\n           cmBPKMNotif( 5),\n           cmDynamicSANotif(
    6),\n           cmDHCPFailNotif( 7),\n           cmSwUpgradeInitNotif( 8),\n           cmSwUpgradeFailNotif(
    9),\n           cmSwUpgradeSuccessNotif( 10),\n           cmSwUpgradeCVCNotif(
    11),\n           cmTODFailNotif( 12),\n           cmDCCReqFailNotif( 13),\n           cmDCCRspFailNotif(
    14),\n           cmDCCAckFailNotif( 15)\n       }\n      MAX-ACCESS read-write\n
    \     STATUS current\n      DESCRIPTION\n          \"The object is used to enable
    specific CM notifications.\n           For example, if the first bit is set, then\n
    \          docsDevCmInitTLVUnknownNotif is enabled.  If it is not set,\n           the
    notification is disabled.  Note that notifications are\n           also under
    the control of the MIB modules defined in\n           RFC3413.\n           If
    the device is rebooted,the value of this object SHOULD\n           revert to the
    default value.\n          \"\n      DEFVAL { {} }\n      ::= { docsDevNotifControl
    1 }\n   docsDevCmtsNotifControl OBJECT-TYPE\n       SYNTAX BITS {\n           cmtsInitRegReqFailNotif(
    0),\n           cmtsInitRegRspFailNotif( 1),\n           cmtsInitRegAckFailNotif(
    2),\n           cmtsDynServReqFailNotif( 3),\n           cmtsDynServRspFailNotif(
    4),\n           cmtsDynServAckFailNotif( 5),\n           cmtsBpiInitNotif( 6),\n
    \          cmtsBPKMNotif( 7),\n           cmtsDynamicSANotif( 8),\n           cmtsDCCReqFailNotif(
    9),\n           cmtsDCCRspFailNotif( 10),\n           cmtsDCCAckFailNotif( 11)\n
    \      }\n       MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n
    \         \"The object is used to enable specific CMTS notifications.\n           For
    example, if the first bit is set, then\n           docsDevCmtsInitRegRspFailNotif
    is enabled.  If it is not set,\n           the notification is disabled.  Note
    that notifications are\n           also under the control of the MIB modules defined
    in\n           RFC3413.\n           If the device is rebooted,the value of this
    object SHOULD\n           revert to the default value.\n          \"\n       DEFVAL
    { {} }\n       ::= { docsDevNotifControl 2 }\n   docsDevCmInitTLVUnknownNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"Notification to indicate that an unknown TLV was\n             encountered
    during the TLV parsing process.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - ifPhysAddress: the MAC address
    of the cable\n              interface of this cable modem.\n            - docsIfCmCmtsAddress:
    the MAC address of the CMTS\n              to which the CM is connected (if there
    is a cable\n              card/interface in the CMTS, then it is actually the\n
    \             MAC address of the cable interface to which it is\n              connected).\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level (1.0,
    1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 1 }\n   docsDevCmDynServReqFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmStatusDocsisOperMode,\n           docsIfCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic service\n            request during the dynamic
    services process.\n            This notification sends additional information
    about\n            the event by including the following objects in its\n            varbinding
    list.\n            - docsDevEvLevel: the priority level associated with the\n
    \             event.\n            - docsDevEvId: the unique identifier of the
    event that\n              occurred.\n            - docsDevEvText: a textual description
    of the event.\n            - ifPhysAddress: the MAC address of the cable\n              interface
    of this cable modem.\n            - docsIfCmCmtsAddress: the MAC address of the
    CMTS\n              to which the CM is connected to (if there is a cable\n              card/interface
    in the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 2 }\n   docsDevCmDynServRspFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \" A notification to report the failure of a dynamic service\n            response
    during the dynamic services process.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - ifPhysAddress: the MAC address
    of the cable\n              interface of this cable modem.\n            - docsIfCmCmtsAddress:
    the MAC address of the CMTS\n              to which the CM is connected (if there
    is a cable\n              card/interface in the CMTS, then it is actually the\n
    \             MAC address of the cable interface to which it is\n              connected).\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level (1.0,
    1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 3}\n   docsDevCmDynServAckFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmStatusDocsisOperMode,\n           docsIfCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic service\n            acknowledgement during
    the dynamic services process.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - ifPhysAddress: the MAC address
    of the cable\n              interface of this cable modem.\n            - docsIfCmCmtsAddress:
    the MAC address of the CMTS\n              to which the CM is connected (if there
    is a cable\n              card/interface in the CMTS, then it is actually the\n
    \             MAC address of the cable interface to which it is\n              connected).\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level (1.0,
    1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 4}\n   docsDevCmBpiInitNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmStatusDocsisOperMode,\n           docsIfCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a BPI\n            initialization attempt during the
    registration process.\n            This notification sends additional information
    about\n            the event by including the following objects in its\n            varbinding
    list.\n            - docsDevEvLevel: the priority level associated with the\n
    \             event.\n            - docsDevEvId: the unique identifier of the
    event that\n              occurred.\n            - docsDevEvText: a textual description
    of the event.\n            - ifPhysAddress: the MAC address of the cable\n              interface
    of this cable modem.\n            - docsIfCmCmtsAddress: the MAC address of the
    CMTS\n              to which the CM is connected (if there is a cable\n              card/interface
    in the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 5 }\n   docsDevCmBPKMNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a Baseline\n            Privacy
    Key Management (BPKM) operation.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - ifPhysAddress: the MAC address
    of the cable\n              interface of this cable modem.\n            - docsIfCmCmtsAddress:
    the MAC address of the CMTS\n              to which the CM is connected (if there
    is a cable\n              card/interface in the CMTS, then it is actually the\n
    \             MAC address of the cable interface to which it is\n              connected).\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level (1.0,
    1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 6 }\n   docsDevCmDynamicSANotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmStatusDocsisOperMode,\n           docsIfCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic security\n            association operation.\n
    \           This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    ifPhysAddress: the MAC address of the cable\n              interface of this cable
    modem.\n            - docsIfCmCmtsAddress: the MAC address of the CMTS\n              to
    which the CM is connected (if there is a cable\n              card/interface in
    the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 7 }\n   docsDevCmDHCPFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsDevServerDhcp,\n           docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a DHCP operation.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - ifPhysAddress:
    the MAC address of the cable\n              interface of this cable modem.\n            -
    docsIfCmCmtsAddress: the MAC address of the CMTS\n              to which the CM
    is connected (if there is a cable\n              card/interface in the CMTS, then
    it is actually the\n              MAC address of the cable interface to which
    it is\n              connected).\n            - docsDevServerDhcp: the IP address
    of the DHCP server.\n            - docsIfDocsisBaseCapability: the highest\n              version
    of the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is
    capable of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level
    (1.0, 1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 8 }\n   docsDevCmSwUpgradeInitNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsDevSwFilename,\n
    \          docsDevSwServer,\n           docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to indicate that a software upgrade\n            has
    been initiated on the device.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - ifPhysAddress: the MAC address
    of the cable\n              interface of this cable modem.\n            - docsIfCmCmtsAddress:
    the MAC address of the CMTS\n              to which the CM is connected (if there
    is a cable\n              card/interface in the CMTS, then it is actually the\n
    \             MAC address of the cable interface to which it is\n              connected).\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmStatusDocsisOperMode: the QOS level (1.0,
    1.1)\n              that the CM is operating in.\n            - docsIfCmStatusModulationType:
    the upstream modulation\n              methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmNotifs 9 }\n   docsDevCmSwUpgradeFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          ifPhysAddress,\n           docsIfCmCmtsAddress,\n           docsDevSwFilename,\n
    \          docsDevSwServer,\n           docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a software upgrade\n            attempt.\n
    \           This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    ifPhysAddress: the MAC address of the cable\n              interface of this cable
    modem.\n            - docsIfCmCmtsAddress: the MAC address of the CMTS\n              to
    which the CM is connected (if there is a cable\n              card/interface in
    the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsDevSwFilename: the
    software image file name\n            - docsDevSwServer: the IP address of the
    server that\n              the image is retrieved from.\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 10 }\n   docsDevCmSwUpgradeSuccessNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsDevSwFilename,\n           docsDevSwServer,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmStatusDocsisOperMode,\n           docsIfCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the software upgrade success\n            status.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - ifPhysAddress:
    the MAC address of the cable\n              interface of this cable modem.\n            -
    docsIfCmCmtsAddress: the MAC address of the CMTS\n              to which the CM
    is connected (if there is a cable\n              card/interface in the CMTS, then
    it is actually the\n              MAC address of the cable interface to which
    it is\n              connected).\n            - docsDevSwFilename: the software
    image file name\n            - docsDevSwServer: the IP address of the server that\n
    \             the image is retrieved from.\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 11 }\n   docsDevCmSwUpgradeCVCFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report that the verification of the\n            code
    file has failed during a secure software upgrade\n            attempt.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - ifPhysAddress:
    the MAC address of the cable\n              interface of this cable modem.\n            -
    docsIfCmCmtsAddress: the MAC address of the CMTS\n              to which the CM
    is connected (if there is a cable\n              card/interface in the CMTS, then
    it is actually the\n              MAC address of the cable interface to which
    it is\n              connected).\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 12 }\n   docsDevCmTODFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsDevServerTime,\n           docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a time of day\n            operation.\n
    \           This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    ifPhysAddress: the MAC address of the cable\n              interface of this cable
    modem.\n            - docsIfCmCmtsAddress: the MAC address of the CMTS\n              to
    which the CM is connected (if there is a cable\n              card/interface in
    the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsDevServerTime: the
    IP address of the time server.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 13 }\n   docsDevCmDCCReqFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \" A notification to report the failure of a dynamic channel\n            change
    request during the dynamic channel change process\n            on the CM.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - ifPhysAddress:
    the MAC address of the cable\n              interface of this cable modem.\n            -
    docsIfCmCmtsAddress: the MAC address of the CMTS\n              to which the CM
    is connected (if there is a cable\n              card/interface in the CMTS, then
    it is actually the\n              MAC address of the cable interface to which
    it is\n              connected).\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 14 }\n   docsDevCmDCCRspFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a dynamic channel\n            change
    response during the dynamic channel\n            change process on the CM.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - ifPhysAddress:
    the MAC address of the cable\n              interface of this cable modem.\n            -
    docsIfCmCmtsAddress: the MAC address of the CMTS\n              to which the CM
    is connected (if there is a cable\n              card/interface in the CMTS, then
    it is actually the\n              MAC address of the cable interface to which
    it is\n              connected).\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmStatusModulationType: the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 15 }\n   docsDevCmDCCAckFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           ifPhysAddress,\n           docsIfCmCmtsAddress,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmStatusDocsisOperMode,\n
    \          docsIfCmStatusModulationType\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A notification to report the failure of a dynamic channel\n            change
    acknowledgement during the dynamic channel\n            change process on the
    CM.\n            This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    ifPhysAddress: the MAC address of the cable\n              interface of this cable
    modem.\n            - docsIfCmCmtsAddress: the MAC address of the CMTS\n              to
    which the CM is connected (if there is a cable\n              card/interface in
    the CMTS, then it is actually the\n              MAC address of the cable interface
    to which it is\n              connected).\n            - docsIfDocsisBaseCapability:
    the highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n
    \             that the device is capable of supporting.\n            - docsIfCmStatusDocsisOperMode:
    the QOS level (1.0, 1.1)\n              that the CM is operating in.\n            -
    docsIfCmtsCmStatusModulationType the upstream modulation\n              methodology
    used by the CM.\n           \"\n       ::= { docsDevCmNotifs 16}\n   docsDevCmtsInitRegReqFailNotif
    NOTIFICATION-TYPE\n       OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n
    \          docsDevEvText,\n           docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n
    \          docsIfCmtsCmStatusDocsisRegMode,\n           docsIfDocsisBaseCapability,\n
    \          docsIfCmtsCmStatusModulationType\n       }\n       STATUS current\n
    \      DESCRIPTION\n           \"A notification to report the failure of a registration\n
    \           request from a CM during the CM initialization\n            process
    that was detected on the CMTS.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 1 }\n   docsDevCmtsInitRegRspFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a registration\n            response during the CM initialization\n
    \           process that was detected by the CMTS.\n            This notification
    sends additional information about\n            the event by including the following
    objects in its\n            varbinding list.\n            - docsDevEvLevel: the
    priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 2 }\n   docsDevCmtsInitRegAckFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a registration\n            acknowledgement from the
    CM during the CM\n            initialization process that was detected by the
    CMTS.\n            This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n              with which
    this notification is associated.\n            - ifPhysAddress: the MAC address
    of the CMTS\n              (if there is a cable card/interface in the CMTS,\n
    \             then it is actually the MAC address of the cable\n              interface
    that connected to the CM) cable interface\n              connected to the CM.\n
    \           - docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n              that
    the reporting CM is operating in.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmtsCmStatusModulationType:
    the upstream\n              modulation methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmtsNotifs 3 }\n   docsDevCmtsDynServReqFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \       }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic service\n            request during the dynamic
    services process\n            that was detected by the CMTS.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 4 }\n   docsDevCmtsDynServRspFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic service\n            response during the dynamic
    services process\n            that was detected by the CMTS.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 5 }\n   docsDevCmtsDynServAckFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic service\n            acknowledgement during
    the dynamic services\n            process that was detected by the CMTS.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 6 }\n   docsDevCmtsBpiInitNotif NOTIFICATION-TYPE\n       OBJECTS
    {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a BPI\n            initialization attempt during the
    CM registration process\n            that was detected by the CMTS.\n            This
    notification sends additional information about\n            the event by including
    the following objects in its\n            varbinding list.\n            - docsDevEvLevel:
    the priority level associated with the\n              event.\n            - docsDevEvId:
    the unique identifier of the event that\n              occurred.\n            -
    docsDevEvText: a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 7 }\n   docsDevCmtsBPKMNotif NOTIFICATION-TYPE\n       OBJECTS
    {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a BPKM operation\n            that is detected by the
    CMTS.\n            This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n              with which
    this notification is associated.\n            - ifPhysAddress: the MAC address
    of the CMTS\n              (if there is a cable card/interface in the CMTS,\n
    \             then it is actually the MAC address of the cable\n              interface
    that connected to the CM) cable interface\n              connected to the CM.\n
    \           - docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n              that
    the reporting CM is operating in.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmtsCmStatusModulationType:
    the upstream\n              modulation methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmtsNotifs 8 }\n   docsDevCmtsDynamicSANotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic security\n            association operation
    that is detected by the CMTS.\n            This notification sends additional
    information about\n            the event by including the following objects in
    its\n            varbinding list.\n            - docsDevEvLevel: the priority
    level associated with the\n              event.\n            - docsDevEvId: the
    unique identifier of the event that\n              occurred.\n            - docsDevEvText:
    a textual description of the event.\n            - docsIfCmtsCmStatusMacAddress:
    the MAC address of the CM\n              with which this notification is associated.\n
    \           - ifPhysAddress: the MAC address of the CMTS\n              (if there
    is a cable card/interface in the CMTS,\n              then it is actually the
    MAC address of the cable\n              interface that connected to the CM) cable
    interface\n              connected to the CM.\n            - docsIfCmtsCmStatusDocsisRegMode:
    the QOS level (1.0, 1.1)\n              that the reporting CM is operating in.\n
    \           - docsIfDocsisBaseCapability: the highest\n              version of
    the DOCSIS specification (1.0, 1.1, 2.0)\n              that the device is capable
    of supporting.\n            - docsIfCmtsCmStatusModulationType: the upstream\n
    \             modulation methodology used by the CM.\n           \"\n       ::=
    { docsDevCmtsNotifs 9 }\n   docsDevCmtsDCCReqFailNotif NOTIFICATION-TYPE\n       OBJECTS
    {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic channel\n            change request during
    the dynamic channel\n            change process and is detected by the CMTS.\n
    \           This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n              with which
    this notification is associated.\n            - ifPhysAddress: the MAC address
    of the CMTS\n              (if there is a cable card/interface in the CMTS,\n
    \             then it is actually the MAC address of the cable\n              interface
    that connected to the CM) cable interface\n              connected to the CM.\n
    \           - docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n              that
    the reporting CM is operating in.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmtsCmStatusModulationType:
    the upstream\n              modulation methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmtsNotifs 10 }\n   docsDevCmtsDCCRspFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic channel\n            change response during
    the dynamic channel\n            change process and is detected by the CMTS.\n
    \           This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n              with which
    this notification is associated.\n            - ifPhysAddress: the MAC address
    of the CMTS\n              (if there is a cable card/interface in the CMTS,\n
    \             then it is actually the MAC address of the cable\n              interface
    that connected to the CM) cable interface\n              connected to the CM.\n
    \           - docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n              that
    the reporting CM is operating in.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmtsCmStatusModulationType:
    the upstream\n              modulation methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmtsNotifs 11 }\n   docsDevCmtsDCCAckFailNotif NOTIFICATION-TYPE\n
    \      OBJECTS {\n           docsDevEvLevel,\n           docsDevEvId,\n           docsDevEvText,\n
    \          docsIfCmtsCmStatusMacAddress,\n           ifPhysAddress,\n           docsIfCmtsCmStatusDocsisRegMode,\n
    \          docsIfDocsisBaseCapability,\n           docsIfCmtsCmStatusModulationType\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A notification
    to report the failure of a dynamic channel\n            change acknowledgement
    during the dynamic channel\n            change process and is detected by the
    CMTS.\n            This notification sends additional information about\n            the
    event by including the following objects in its\n            varbinding list.\n
    \           - docsDevEvLevel: the priority level associated with the\n              event.\n
    \           - docsDevEvId: the unique identifier of the event that\n              occurred.\n
    \           - docsDevEvText: a textual description of the event.\n            -
    docsIfCmtsCmStatusMacAddress: the MAC address of the CM\n              with which
    this notification is associated.\n            - ifPhysAddress: the MAC address
    of the CMTS\n              (if there is a cable card/interface in the CMTS,\n
    \             then it is actually the MAC address of the cable\n              interface
    that connected to the CM) cable interface\n              connected to the CM.\n
    \           - docsIfCmtsCmStatusDocsisRegMode: the QOS level (1.0, 1.1)\n              that
    the reporting CM is operating in.\n            - docsIfDocsisBaseCapability: the
    highest\n              version of the DOCSIS specification (1.0, 1.1, 2.0)\n              that
    the device is capable of supporting.\n            - docsIfCmtsCmStatusModulationType:
    the upstream\n              modulation methodology used by the CM.\n           \"\n
    \      ::= { docsDevCmtsNotifs 12}\n   --\n   --Conformance definitions\n   --\n
    \  docsDevNotifConformance OBJECT IDENTIFIER\n      ::= { docsDevNotifMIB 4 }\n
    \  docsDevNotifGroups OBJECT IDENTIFIER\n      ::= { docsDevNotifConformance 1
    }\n   docsDevNotifCompliances OBJECT IDENTIFIER\n      ::= { docsDevNotifConformance
    2 }\n   docsDevCmNotifCompliance MODULE-COMPLIANCE\n       STATUS current\n       DESCRIPTION\n
    \      \"The compliance statement for CM Notifications and Control.\"\n       MODULE
    --docsDevNotif\n         MANDATORY-GROUPS {\n                  docsDevCmNotifControlGroup,\n
    \                 docsDevCmNotificationGroup\n              }\n       ::= { docsDevNotifCompliances
    1 }\n   docsDevCmNotifControlGroup OBJECT-GROUP\n       OBJECTS {\n           docsDevCmNotifControl\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"This group represents
    objects that allow control\n            over CM Notifications.\"\n       ::= {
    docsDevNotifGroups 1 }\n   docsDevCmNotificationGroup NOTIFICATION-GROUP\n       NOTIFICATIONS
    {\n           docsDevCmInitTLVUnknownNotif,\n           docsDevCmDynServReqFailNotif,\n
    \          docsDevCmDynServRspFailNotif,\n           docsDevCmDynServAckFailNotif,\n
    \          docsDevCmBpiInitNotif,\n           docsDevCmBPKMNotif,\n           docsDevCmDynamicSANotif,\n
    \          docsDevCmDHCPFailNotif,\n           docsDevCmSwUpgradeInitNotif,\n
    \          docsDevCmSwUpgradeFailNotif,\n           docsDevCmSwUpgradeSuccessNotif,\n
    \          docsDevCmSwUpgradeCVCFailNotif,\n           docsDevCmTODFailNotif,\n
    \          docsDevCmDCCReqFailNotif,\n           docsDevCmDCCRspFailNotif,\n           docsDevCmDCCAckFailNotif\n
    \      }\n       STATUS current\n       DESCRIPTION\n           \"A collection
    of CM notifications providing device status\n      and control.\"\n       ::=
    { docsDevNotifGroups 2 }\n   docsDevCmtsNotifCompliance MODULE-COMPLIANCE\n       STATUS
    current\n       DESCRIPTION\n           \"The compliance statement for DOCSIS
    CMTS Notification\n            and Control.\"\n       MODULE --docsDevNotif\n
    \         MANDATORY-GROUPS {\n             docsDevCmtsNotifControlGroup,\n             docsDevCmtsNotificationGroup\n
    \         }\n       ::= { docsDevNotifCompliances 2 }\n   docsDevCmtsNotifControlGroup
    OBJECT-GROUP\n       OBJECTS {\n           docsDevCmtsNotifControl\n       }\n
    \      STATUS current\n       DESCRIPTION\n           \"This group represents
    objects that allow control\n            over CMTS Notifications.\"\n       ::=
    { docsDevNotifGroups 3 }\n   docsDevCmtsNotificationGroup NOTIFICATION-GROUP\n
    \      NOTIFICATIONS {\n           docsDevCmtsInitRegReqFailNotif,\n           docsDevCmtsInitRegRspFailNotif,\n
    \          docsDevCmtsInitRegAckFailNotif ,\n           docsDevCmtsDynServReqFailNotif,\n
    \          docsDevCmtsDynServRspFailNotif,\n           docsDevCmtsDynServAckFailNotif,\n
    \          docsDevCmtsBpiInitNotif,\n           docsDevCmtsBPKMNotif,\n           docsDevCmtsDynamicSANotif,\n
    \          docsDevCmtsDCCReqFailNotif,\n           docsDevCmtsDCCRspFailNotif,\n
    \          docsDevCmtsDCCAckFailNotif\n       }\n       STATUS current\n       DESCRIPTION\n
    \          \"A collection of CMTS notifications providing device\n            status
    and control.\"\n       ::= { docsDevNotifGroups 4 }\n   END\n"
  title: 4.  Definitions
- contents:
  - "5.  Contributors\n   Thanks go to the following people, who have made significant\n
    \  contributions to this document: Junming Gao, Jean-Francois Mule, Dave\n   Raftus,
    Pak Siripunkaw, and Rich Woundy.\n"
  title: 5.  Contributors
- contents:
  - "6.  Acknowledgements\n   This document was produced by the IPCDN Working Group.
    \ Thanks to\n   Harrie Hazewinkel and Bert Wijnen for their thorough review and\n
    \  insightful comments on this document.  Special thanks to Rich Woundy,\n   who
    made several valuable suggestions to improve the notifications.\n"
  title: 6.  Acknowledgements
- contents:
  - "7.  Security Considerations\n   There are two management objects defined in this
    MIB module with a\n   MAX-ACCESS clause of read-write and/or read-create\n   (docsDevCmNotifControl
    and docsDevCmtsNotifControl).  Such objects\n   may be considered sensitive or
    vulnerable in some network\n   environments.  The support for SET operations in
    a non-secure\n   environment without proper protection can have a negative effect
    on\n   network operations.\n   Setting docsDevCmNotifControl or docsDevCmtsNotifControl
    may cause\n   flooding of notifications, which can disrupt network service.\n
    \  Besides causing \"flooding\", changing the objects can also mean that\n   notifications
    will not be emitted when one intends that to happen.\n   This MIB defines a number
    of notification objects that send detailed\n   information about the event that
    caused the generation of the\n   notification.  Information in the notification
    message includes:\n   event priority, the event Id, the event message body, the
    CM DOCSIS\n   capability, the CM DOCSIS QOS level, the CM DOCSIS upstream\n   modulation
    type, the cable interface MAC address of the cable modem,\n   and the cable card
    MAC address of the CMTS to which the modem is\n   connected.  The monitoring of
    these notification messages could be\n   used to gather information about the
    state of the network and devices\n   (CM and CMTS) attached to the network.\n
    \  SNMP versions prior to SNMPv3 did not include adequate security.\n   Even if
    the network itself is secure (for example by using IPSec),\n   even then there
    is no control as to who on the secure network is\n   allowed to access and GET/SET
    (read/change/create/delete) the objects\n   in this MIB module.\n   It is RECOMMENDED
    that implementers consider the security features as\n   provided by the SNMPv3
    framework (see [16], section 8), including\n   full support for the SNMPv3 cryptographic
    mechanisms (for\n   authentication and privacy).\n   Further, deployment of SNMP
    versions prior to SNMPv3 is NOT\n   RECOMMENDED.  Instead, it is RECOMMENDED to
    deploy SNMPv3 and to\n   enable cryptographic security.  It is then a customer/operator\n
    \  responsibility to ensure that the SNMP entity giving access to an\n   instance
    of this MIB module is properly configured to give access to\n   the objects only
    to those principals (users) that have legitimate\n   rights to indeed GET or SET
    (change/create/delete) them.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   The MIB module defined in this document uses the
    following IANA-\n   assigned OBJECT IDENTIFIER values recorded in the SMI Numbers\n
    \  registry:\n   Descriptor        OBJECT IDENTIFIER value\n   ----------        -----------------------\n
    \  docsDevNotifMIB   { mib-2 132 }\n"
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   McCloghrie, K., Perkins, D., and J. Schoenwaelder, \"Structure\n         of
      Management Information Version 2 (SMIv2)\", STD 58, RFC 2578,\n         April
      1999.\n   [3]   McCloghrie, K., Perkins, D., and J. Schoenwaelder, \"Textual\n
      \        Conventions for SMIv2\", STD 58, RFC 2579, April 1999.\n   [4]   McCloghrie,
      K., Perkins, D., and J. Schoenwaelder, \"Conformance\n         Statements for
      SMIv2\", STD 58, RFC 2580, April 1999.\n   [5]   St. Johns, M., \"DOCSIS Cable
      Device MIB Cable Device Management\n         Information Base for DOCSIS compliant
      Cable Modems and Cable\n         Modem Termination Systems\", RFC 2669, August
      1999.\n   [6]   Raftus, D. and E. Cardona, \"Radio Frequency (RF) Interface\n
      \        Management Information Base for Data over Cable Service\n         Interface
      Specifications (DOCSIS) 2.0 Compliant RF Interfaces\",\n         RFC 4546, June
      2006.\n   [7]   McCloghrie, K. and F. Kastenholz, \"The Interfaces Group MIB\",\n
      \        RFC 2863, June 2000.\n   [8]   SCTE Data Standards Subcommittee, \"Data-Over-Cable
      Service\n         Interface Specifications: DOCSIS 1.0 Baseline Privacy Interface\n
      \        Specification SCTE 22-2\", 2002,\n         <http://www.scte.org/standards/>.\n
      \  [9]   CableLabs, \"Baseline Privacy Plus Interface Specification SP-\n         BPI+040407\",
      April 2004,\n         <http://www.cablemodem.com/specifications/>.\n   [10]
      \ SCTE Data Standards Subcommittee, \"Data-Over-Cable Service\n         Interface
      Specifications: DOCSIS 1.0 Operations Support System\n         Interface Specification
      Radio Frequency Interface SCTE 22-3\",\n         2002, <http://www.scte.org/standards/>.\n
      \  [11]  CableLabs, \"Data-Over-Cable Service Interface Specifications:\n         Operations
      Support System Interface Specification CM-SP-\n         OSSIv1.1-C01-050907\",
      September 2005,\n         <http://www.cablemodem.com/specifications/>.\n   [12]
      \ CableLabs, \"Data-Over-Cable Service Interface Specifications:\n         Operations
      Support System Interface Specification CM-SP-\n         OSSIv2.0-I09-050812\",
      August 2005,\n         <http://www.cablemodem.com/specifications/>.\n   [13]
      \ SCTE Data Standards Subcommittee, \"Data-Over-Cable Service\n         Interface
      Specifications: DOCSIS 1.0 Radio Frequency Interface\n         Specification
      SCTE 22-1\", 2002,\n         <http://www.scte.org/standards/>.\n   [14]  CableLabs,
      \"Data-Over-Cable Service Interface Specifications:\n         Radio Frequency
      Interface Specification CM-SP-RFIv1.1-C01-\n         050907\", September 2005,\n
      \        <http://www.cablemodem.com/specifications/>.\n   [15]  CableLabs, \"Data-Over-Cable
      Service Interface Specifications:\n         Radio Frequency Interface Specification
      CM-SP-RFIv2.0-I10-\n         051209\", December 2005,\n         <http://www.cablemodem.com/specifications/>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [16]  Case, J., Mundy, R., Partain, D., and
      B. Stewart, \"Introduction\n         and Applicability Statements for Internet-Standard
      Management\n         Framework\", RFC 3410, December 2002.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Azlina Ahmad\n   Cisco Systems, Inc.\n   170 West Tasman
    Drive\n   San Jose, CA 95134\n   US\n   Phone: 408 853 7927\n   EMail: azlina@cisco.com\n
    \  Greg Nakanishi\n   Motorola\n   6450 Sequence Dr.\n   San Diego, CA  92126\n
    \  US\n   Phone: 858 404-2366\n   EMail: gnakanishi@motorola.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
