Abstract The Internet Key Exchange Version 2
(IKEv2) protocol did have support for raw public keys, but it only supported RSA raw public keys.
In constrained environments, it is useful to make use of other types of public keys, such as those based on Elliptic Curve Cryptography.
This document updates RFC 7296, adding support for other types of raw public keys to IKEv2. 1.
This document replaces an algorithm specific version of raw public keys of the Internet Key Exchange Version 2 (IKEv2)
[RFC7296] with a generic version of raw public keys that is algorithm agnostic.
In [RFC5996], IKEv2 had support for PKCS #1 encoded RSA keys, i.e., a DER encoded RSAPublicKey structure (see [RSA] and [RFC3447]).
Other raw public key types are, however, not supported.
In [RFC7296], this feature was removed; this document reintroduces support for raw public keys to IKEv2 in a more generic way.
DNSSEC allows public keys to be associated with domain names for usage with security protocols like IKEv2 and Transport Layer Security (TLS)
but it relies on extensions in those protocols to be specified.
The Raw Public Keys in Transport Layer Security specification ([RFC7250]) adds generic support for raw public keys to TLS by reusing the SubjectPublicKeyInfo format from the X.509 Public Key Infrastructure Certificate profile [RFC5280].
This document is similar to the Raw Public Keys in Transport Layer Security specification and applies the concept to IKEv2 to support all public key formats defined by PKIX.
This approach also allows future public key extensions to be supported without the need to introduce further enhancements to IKEv2.
To support new types of public keys in IKEv2, the following changes are needed:  A new Certificate Encoding format needs to be defined for carrying the SubjectPublicKeyInfo structure.
Section 3 specifies this new encoding format.
A new Certificate Encoding that has been allocated by IANA.
Section 5 contains the details about the IANA registration.
The base IKEv2 specification includes support for RSA and DSA signatures, but the Signature Authentication in IKEv2
so that signature methods over any key type can be used.
Implementations using raw public keys SHOULD use the Digital Signature method described in RFC 7427.
When using raw public keys, the authenticated identity is not usually the identity from the ID payload, but instead the public key itself is used as the identity for the other end.
This means that ID payload contents might not be useful for authentication purposes.
It might still be used for policy decisions, for example to simplify the policy lookup.
Alternatively, the ID NULL type [RFC7619] can be used to indicate that the ID payload is not relevant to this authentication.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Certificate Encoding Payload Section 3.6 of RFC 7296 defines the Certificate payload format as shown in Figure 1.
3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
This field indicates the type of certificate or certificate related information contained in the Certificate Data field.
In order to provide a simple and standard way to indicate the key type when the encoding type is "Raw Public Key", the SubjectPublicKeyInfo structure of the PKIX certificate is used.
This is a very simple encoding, as most of the ASN.1 part can be included literally and recognized by block comparison.
See Appendix A of [RFC7250] for a detailed breakdown.
In addition, Appendix A of this document has several examples.
In addition to the Certificate payload, the Cert Encoding for Raw Public Key can be used in the Certificate Request payload.
In that case, the Certification Authority field MUST be empty if the "Raw Public Key" certificate encoding is used.
For RSA keys, the implementations MUST follow the public key processing rules of Section 1.2 of the Additional Algorithms and Identifiers for RSA Cryptography for PKIX ([RFC4055])
even when the SubjectPublicKeyInfo is not part of a certificate but is instead sent as a Certificate Data field.
This means that RSASSA PSS and RSASSA PSS params inside the SubjectPublicKeyInfo structure MUST be sent when applicable.
An IKEv2 deployment using raw public keys needs to utilize an out of  band public key validation procedure to be confident in the authenticity of the keys being used.
One way to achieve this goal is to use a configuration mechanism for provisioning raw public keys into the IKEv2 software.
"Smart object" deployments are likely to use such preconfigured public keys.
Another approach is to rely on secure DNS to associate public keys with domain names using the IPSECKEY DNS RRtype [RFC4025].
More information can be found in DNS Based Authentication of Named Entities (DANE) [RFC6394].
This document does not change the security assumptions made by the IKEv2 specification since "Raw RSA Key" support was already available in IKEv2 in [RFC5996].
This document only generalizes raw public key support.
This appendix provides examples of the actual payloads sent on the wire.
This first example uses the 256 bit ECDSA private/public key pair defined in Section 8.1 of the IKEv2 ECDSA document [RFC4754].
The public key is as follows:
(1.2.840.10045.3.1.7)  Public key x coordinate:
4911c20f dbe71e36 99d91339 afbb903e e17255dc
The SubjectPublicKeyInfo ASN.1 object is as follows:
957c 2b57 c023 5fb7 4897
1339 afbb 903e e172 00000040
: 55dc The first byte (00) of the bit string indicates that there is no "number of unused bits", and the second byte (04) indicates uncompressed form ([RFC5480]).
Those two octets are followed by the values of X and Y. The final encoded SubjectPublicKeyInfo object is as follows:
4200 04cb 28e0 999b 00000020
7dd7 2e97 566e a1c0 6695
9768 d058 ff49 11c2 0fdb
This will result in the final IKEv2 Certificate Payload: 00000000:
NN00 0060 0f30 5930 1306 072a 8648
9716 cbbf 917d d72e 9756
1339 afbb 903e e172 55dc
Where NN is the next payload type (i.e., the type of payload that immediately follows this Certificate payload).
This second example uses a random 1024 bit RSA key.
The public key is as follows:  Algorithm: rsaEncryption (1.2.840.113549.1.1.1)  Modulus n (1024 bits, decimal): 1323562071162740912417075551025599045700 3972512968992059076067098474693867078469 7654066339302927451756327389839253751712 9485277759962777278073526290329821841100 9721044682579432931952695408402169276996 5181887843758615443536914372816830537901 8976615344413864477626646564638249672329 04996914356093900776754835411
Modulus n (1024 bits, hexadecimal):
bc7b4347 49c7b386 00bfa84b 44f88187 9a2dda08
f5806c2a ed6a6172 ff0dc3d4 cd601638 e8ca348e
12e209b1 fddba58a 8c62b369 038a3d1e aa727c1f
39ae49ed 6ebc30f8 d9b52e23 385a4019 15858c59
f7cb3e66 3d8fe9f9 ecfa1230 66f36835 8ceaefd3
Exponent e (17 bits, decimal):
65537  Exponent e (17 bits, hexadecimal): 10001
The SubjectPublicKeyInfo ASN.1 object is as follows:
9a2d da08 d1f0 145a 00000020:
ff0d c3d4 cd60 1638 00000030:
e8ca 348e bdca 5742 31ca
09b1 00000040: fddb a58a 8c62 b369 038a
d9b5 2e23 385a 4019 00000060:
0f8f 8fe9 f7cb 3e66 3d8f e9f9 ecfa 1230 00000080:
8cea efd3 0203 0100 01
The first byte (00) of the bit string indicates that there is no "number of unused bits".
Inside that bit string, there is an ASN.1 sequence having 2 integers.
The second byte (30) indicates that this is the beginning of the sequence, and the next byte (81) indicates the length does not fit in 7 bits, but requires one byte, so the length is in the next byte (89).
Then starts the first integer with tag (02) and length (81 81).
After that we have the modulus (prefixed with 0
so it will not be a negative number).
After the modulus, there follows the tag (02) and length (03) of the exponent, and the last 3 bytes are the exponent.
The final encoded SubjectPublicKeyInfo object is as follows: 00000000: 3081 9f30 0d06 092a 8648
8d00 3081 8902 8181 00bc
d4cd 6016 38e8 ca34 8ebd ca57
59be 72f3 43fb 1eb8 00000080:
: f9ec fa12 3066 f368 358c eaef
This will result in the final IKEv2 Certificate Payload: 00000000:
NN00 00a7 0f30 819f 300d 0609
: 8187 9a2d da08 d1f0 145a
dc97 12e2 09b1 fddb a58a 8c62 00000060:
: 30f8 d9b5 2e23 385a 4019 1585
8fe9 f7cb 00000090: 3e66 3d8f e9f9 ecfa 1230
Where NN is the next payload type (i.e., the type of the payload that immediately follows this Certificate payload).
