- title: __initial_text__
  contents:
  - "                                                        Brian Harvey\n      \
    \                                                         SU-AI\n"
- title: 'Re: File Transfer Protocol                              May 28, 1975'
  contents:
  - 'Re: File Transfer Protocol                              May 28, 1975

    '
- title: 'Ref: RFC 354, 385, 414, 448, 454, 630, 542, 640                        1'
  contents:
  - "Ref: RFC 354, 385, 414, 448, 454, 630, 542, 640                        1\n  \
    \                     One More Try on the FTP                         2\n   This\
    \ is a slight revision of RFC 686, mainly differing in the\n   discussion of print\
    \ files.  Reading several RFCs that I (sigh)\n   never heard of before writing\
    \ 686 has convinced me that although\n   I was right all along it was for the\
    \ wrong reasons.  The list of\n   reply codes is also slightly different to reflect\
    \ the four lists\n   in RFCs 354, 454, 542, and 640 more completely.  Let me also\n\
    \   suggest that if there are no objections before June 1, everyone\n   take it\
    \ as official that HELP should return 200, that SRVR should\n   be used as discussed\
    \ below, and that \"permanent\" 4xx errors be\n   changed to 5xx.  And thanks\
    \ to Jon Postel who just spent all\n   evening helping me straighten this all\
    \ out.                        2a\n   Aside from a cry of anguish by the site responsible\
    \ for the\n   security hassle described below, I've only had one comment on\n\
    \   this, which was unfavorable but, alas, unspecific.  Let me just\n   say, in\
    \ the hopes of avoiding more such, that I am not just\n   trying to step on toes\
    \ for the fun of it, and that I don't think\n   the positive changes to FTP-1\
    \ proposed here are necessarily the\n   best possible thing.  What they are, I\
    \ think, is easily doable.\n   The great-FTP-in-the-sky isn't showing any signs\
    \ of universal\n   acceptability, and it shouldn't stand in the way of solving\n\
    \   immediate problems.                                                2b\n  \
    \                    Leaving Well Enough Alone                        3\n"
- title: I recently decided it was time for an overhaul of our FTP user and
  contents:
  - 'I recently decided it was time for an overhaul of our FTP user and

    '
- title: server programs.  This was my first venture into the world of
  contents:
  - 'server programs.  This was my first venture into the world of

    '
- title: network protocols, and I soon discovered that there was a lot we
  contents:
  - 'network protocols, and I soon discovered that there was a lot we

    '
- title: were doing wrong--and a few things that everyone seemed to be doing
  contents:
  - 'were doing wrong--and a few things that everyone seemed to be doing

    '
- title: differently from each other.  When I enquired about this, the
  contents:
  - 'differently from each other.  When I enquired about this, the

    '
- title: response from some quarters was "Oh, you're running Version 1!"        4
  contents:
  - 'response from some quarters was "Oh, you''re running Version 1!"        4

    '
- title: Since, as far as I can tell, all but one network host are running
  contents:
  - 'Since, as far as I can tell, all but one network host are running

    '
- title: version 1, and basically transferring files OK, it seems to me that
  contents:
  - 'version 1, and basically transferring files OK, it seems to me that

    '
- title: the existence on paper of an unused protocol should not stand in the
  contents:
  - 'the existence on paper of an unused protocol should not stand in the

    '
- title: way of maintaining the current one unless there is a good reason to
  contents:
  - "way of maintaining the current one unless there is a good reason to\n       \
    \                            1\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - 'One More Try on the FTP

    '
- title: believe that the new one is either imminent or strongly superior or
  contents:
  - 'believe that the new one is either imminent or strongly superior or

    '
- title: both.  (I understand, by the way, that FTP-2 represents a lot of
  contents:
  - 'both.  (I understand, by the way, that FTP-2 represents a lot of

    '
- title: thought and effort by several people who are greater network experts
  contents:
  - 'thought and effort by several people who are greater network experts

    '
- title: than I, and that it isn't nice of me to propose junking all that
  contents:
  - 'than I, and that it isn''t nice of me to propose junking all that

    '
- title: work, and I hereby apologize for it.)  Let me list what strike me as
  contents:
  - 'work, and I hereby apologize for it.)  Let me list what strike me as

    '
- title: the main differences in FTP-2 and examine their potential impact on
  contents:
  - 'the main differences in FTP-2 and examine their potential impact on

    '
- title: the world.                                                             5
  contents:
  - "the world.                                                             5\n  \
    \ 1.  FTP-2 uses TELNET-2.  The main advantage of the new Telnet\n   protocol\
    \ is that it allows flexible negotiation about things like\n   echoing.  But the\
    \ communicators in the case of FTP are computer\n   programs, not people, and\
    \ don't want any echoing anyway.  The\n   argument that new hosts might not know\
    \ about old Telnet seems an\n   unlikely one for quite some time to come; if TELNET-2\
    \ ever does\n   really take over the world, FTP-1 could be implemented in it.\
    \      5a\n   2.  FTP-2 straightens out the \"print file\" mess.  First of all,\n\
    \   there are two separate questions here: what command one ought to\n   give\
    \ to establish a print file transfer, and which end does what\n   sort of conversion.\
    \  For the second question, although all of the\n   FTP-1 documents are confusing\
    \ on the subject, I think it is\n   perfectly obvious what to do: if the user\
    \ specifies, and the\n   server accepts, an ASCII or EBCDIC print file transfer\
    \ parameter\n   sequence, then the data sent over the network should contain\n\
    \   Fortran control characters.  That is, the source file should\n   contain Fortran\
    \ controls, and should be sent over the net as is,\n   and reformatted if necessary\
    \ not by the SERVER as the protocol\n   says but by the RECIPIENT (server for\
    \ STOR, user for RETR). (The\n   \"Telnet print file\" non-issue will be debunked\
    \ below.)\n   As a non-Fortran-user I may be missing something here but I don't\n\
    \   think so; it is just like the well-understood TYPE E in which the\n   data\
    \ is sent in EBCDIC and the recipient can format it for local\n   use as desired.\
    \  One never reformats a file from ASCII to EBCDIC\n   at the sending end.  Perhaps\
    \ the confusion happened because the\n   protocol authors had in mind using these\
    \ types to send files\n   directly to a line printer at the server end, and indeed\
    \ maybe\n   that's all it's good for and nobody's user program will implement\n\
    \   TYPE P RETR.                                                       5b\n  \
    \ As for the specific commands used to negotiate such a transfer,\n   there may\
    \ currently be some confusion because the most recent\n   FTP-1 document on the\
    \ subject (RFC 454) invents a new command,\n   FORM, which is not in general use\
    \ as far as I know.  (Most of my\n                                   2\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   experiments have been on PDP-10s; perhaps other systems\
    \ have\n   adopted this command.)  FTP-2 puts the format argument in the\n   TYPE\
    \ command as a second argument. Either way, using a\n   two-dimensional scheme\
    \ to specify the combinations of\n   ASCII/EBCDIC and ASA/normal conveys no more\
    \ information than the\n   present A-P-E-F scheme.  FTP-2 also introduces the\
    \ notion of\n   Telnet formatted vs. non-print files.  These types are used when\n\
    \   a Telnet format oriented system is sending a file to an ASA\n   oriented one,\
    \ and the recipient needs to know, not what is coming\n   over the net, but how\
    \ to solve a local file storage problem.  It\n   is unnecessary and unfair for\
    \ hosts to have to negotiate\n   something which does not acttually affect what\
    \ gets sent over the\n   net.  It is unnecessary because the sending user process\
    \ (there\n   is no problem if the user process is receiving) need not\n   understand\
    \ what the issue is, it need only make the server\n   understand by transmitting\
    \ a message from the human user to the\n   server process.  Any TYPE parameter\
    \ must be understood by both\n   processes even if the user treats it just like\
    \ some other type.    5c\n   To take a specific example, if I want to send an\
    \ ASCII file to a\n   360, my FTP user program needs to have built into it the\n\
    \   knowledge that there are two TYPEs which are really the same, AN\n   and AT\
    \ in the FTP-2 notation. If tomorrow someone needs to know\n   the ultimate use\
    \ of a binary file (for instance, the old PDP-6\n   DECtape format stores dump\
    \ files differently from ordinary data\n   files), I will have to add another\
    \ piece of information to my FTP\n   user and server (maybe they try to read such\
    \ a file from me).\n   Instead, information which affects only the RECIPIENT of\
    \ a file,\n   and not the format AS SENT OVER THE NET, should be specified in\n\
    \   some form which the sending process can ignore.  This is what the\n   SRVR\
    \ command should be used for.                                   5d\n   If a user\
    \ at a 360 wants to retrieve a \"Telnet print file\" from\n   another system,\
    \ he might tell his FTP user process something like  5e\n      TYPE A\n      DISP\
    \ PRINT\n      RETR FOO etc.                                                 \
    \ 5e1\n   (or whatever syntax they use in their FTP).  If a user at a 10\n   wants\
    \ to send such a file to a 360, he would say                   5f\n      TYPE\
    \ A\n                                   3\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n      SRVR PRINT\n      STOR FOO etc.              \
    \                                    5f1\n   His FTP user program would send on\
    \ the SRVR command without\n   comment. Suppose that the transformation is one\
    \ which might be\n   used in either direction between the same two hosts.  (This\
    \ is\n   not the case for the Telnet print file thing because two 360s\n   would\
    \ be using ASA format.)  Then the user process could accept\n   the equivalent\
    \ of DISP PRINT from the user, and if the transfer\n   turned out to be a STOR\
    \ it would decide to send SRVR PRINT first.\n   In this way the FTP user program\
    \ can be written so that the human\n   user types the same command regardless\
    \ of the direction of\n   transfer.                                          \
    \                5g\n   Thus, FTP servers which care about the distinction between\
    \ Telnet\n   print and non-print could implement SRVR N and SRVR T.  Ideally\n\
    \   the SRVR parameters should be registered with Jon Postel to avoid\n   conflicts,\
    \ although it is not a disaster if two sites use the\n   same parameter for different\
    \ things.  I suggest that parameters\n   be allowed to be more than one letter,\
    \ and that an initial letter\n   X be used for really local idiosyncracies.  The\
    \ following should\n   be considered as registered:                          \
    \             5h\n      T - Telnet print file                                \
    \          5h1\n      N - Normal.                                            \
    \        5h2\n         Means to turn off any previous SRVR in effect. (This makes\n\
    \         \"non-print\" the default case, rather than\n         making \"Telnet\
    \ print\" and \"non-print\" equal.  It is\n         probably a good idea if a\
    \ user program can count on\n         being able to turn off an earlier SRVR without\
    \ having\n         to know a specific inverse for it.  Servers which do not\n\
    \         implement any other SRVR parameters need not implement\n         SRVR\
    \ N either; user processes shouldn't send SRVR N\n         just for the hell of\
    \ it.)\n   3.  FTP-2 reshuffles reply codes somewhat.  There have been four\n\
    \   attempts altogether, that I know of, at specifying a list of\n   reply codes:\
    \ RFCs 354 and 454 for FTP-1, and RFCs 542 and 640 for\n   FTP-2. There is not\
    \ much to choose from among the first three of\n   these, which are basically\
    \ the same, except for a slight increase\n   in specificity each time through,\
    \ e.g., the introduction of reply\n                                   4\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   code 456 for a rename which fails because a file\
    \ of the same\n   (new) name already exists.  This increased specificity of reply\n\
    \   codes doesn't seem to be much of a virtue; if a rename operation\n   fails,\
    \ it is the human user, not the FTP user program, who needs\n   to know that it\
    \ was because of a name conflict rather than some\n   other file system error.\
    \  I am all for putting such information\n   in the text part of FTP replies.\
    \  Some real problems are actually\n   addressed in the reply code revision of\
    \ RFC 640, in which the\n   basic scheme for assigning reply code numbers is more\
    \ rational\n   than either the FTP-1 scheme or the original FTP-2 scheme.\n  \
    \ However, I think that most of the benefits of RFC 640 can be\n   obtained in\
    \ a way which does not require cataclysmic\n   reprogramming.  More on this below.\
    \                                5i\n   4.  FTP-2 was established by a duly constituted\
    \ ARPAnet committee\n   and we are duty-bound to implement it.  I don't suppose\
    \ anyone\n   would actually put it that baldly, but I've heard things which\n\
    \   amounted to that.  It's silly.                                     5j\n  \
    \ 5.  FTP-2 specifies default sockets for the data connection.\n   Most places\
    \ use the default sockets already anyway, and it is\n   easy enough to ignore\
    \ the 255 message if you want to.  This is a\n   security issue, of course, and\
    \ I'm afraid that I can't work up\n   much excitement about helping the CIA keep\
    \ track of what anti-war\n   demonstrations I attended in 1968 and which Vietnamese\
    \ hamlets to\n   bomb for the greatest strategic effect even if they do pay my\n\
    \   salary indirectly.  I could rave about this subject for pages,\n   and probably\
    \ will if I ever get around to writing an argument\n   against MAIL-2, but for\
    \ now let me just get one anecdote off my\n   chest:  I have access to an account\
    \ at an ARPAnet host because I\n   am responsible at my own site for local maintenance\
    \ of a program\n   which was written by, and is maintained by, someone at the\
    \ other\n   site.  However, the other site doesn't really trust us outsiders\n\
    \   (the account is shared by people in my position at several other\n   hosts)\
    \ to protect their vital system security, so every week they\n   run a computer\
    \ program to generate a new random password for the\n   account (last week's was\
    \ HRHPUK) and notify us all by network\n   mail.  Well, on my system and at least\
    \ one of the others, that\n   mail isn't read protected.  I delete my mail when\
    \ I read it, but\n   since it is hard enough remembering HRHPUK without them changing\n\
    \   it every week, I naturally write it in a file on our system.\n   That file\
    \ could in principle be read protected but it isn't,\n   since sometimes I'm in\
    \ someone else's office when I want to use\n                                 \
    \  5\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   it, and the other passwords in it are for open guest\
    \ accounts\n   which are widely known.  Moral #1: Security freaks are pretty\n\
    \   weird.  Moral #2: If you have a secret don't keep it on the\n   ARPAnet. \
    \ (In the past week I have heard about two newly\n   discovered holes in TENEX\
    \ security.)                               5k\n   6.  FTP-2 is available online\
    \ and FTP-1 isn't, so new hosts can't\n   find out how to do it.  Aargh!!!  What\
    \ a reason for doing\n   anything! Surely it would be less costly for someone\
    \ to type it\n   in again than for everyone to reprogram.  Meanwhile these new\n\
    \   hosts can ask Jon or Geoff or Bobby or even me for help in\n   getting FTP\
    \ up.                                                    5l\n   7.  FTP-2 has\
    \ some changes to the strange MODEs and STRUs.  This\n   is another thing I can't\
    \ get too excited about.  We support only\n   MODE S and STRU F and that will\
    \ probably still be true even if we\n   are forced into FTP-2.  If the relatively\
    \ few people who do very\n   large file transfers need to improve the restart\
    \ capability, they\n   can do so within FTP-1 without impacting the rest of us.\
    \  The\n   recent implementation of paged file transfers by TENEX shows that\n\
    \   problems of individual systems can be solved within the FTP-1\n   framework.\
    \ If the IBM people have some problem about record\n   structure in FTP-1, for\
    \ example, let them solve it in FTP-1, and\n   whatever the solution is, nobody\
    \ who isn't affected has to\n   reprogram.                                   \
    \                      5m\n"
- title: Well, to sum up, I am pretty happy with the success I've had
  contents:
  - 'Well, to sum up, I am pretty happy with the success I''ve had

    '
- title: transferring files around the network the way things are.  When I do
  contents:
  - 'transferring files around the network the way things are.  When I do

    '
- title: run into trouble it's generally because some particular host hasn't
  contents:
  - 'run into trouble it''s generally because some particular host hasn''t

    '
- title: implemented some particular feature of FTP-1, and there's no reason
  contents:
  - 'implemented some particular feature of FTP-1, and there''s no reason

    '
- title: to suppose they'll do it any faster if they also have to convert to
  contents:
  - 'to suppose they''ll do it any faster if they also have to convert to

    '
- title: FTP-2 at the same time.  The main thing about FTP-2, as I said at
  contents:
  - 'FTP-2 at the same time.  The main thing about FTP-2, as I said at

    '
- title: the beginning, is that its existence is an excuse for not solving
  contents:
  - 'the beginning, is that its existence is an excuse for not solving

    '
- title: problems in FTP-1.  Some such problems are quite trivial except for
  contents:
  - 'problems in FTP-1.  Some such problems are quite trivial except for

    '
- title: the fact that people are reluctant to go against anything in the
  contents:
  - 'the fact that people are reluctant to go against anything in the

    '
- title: protocol document, as if the latter were the Holy Writ.  A few
  contents:
  - 'protocol document, as if the latter were the Holy Writ.  A few

    '
- title: 'actually require some coordinated effort.  Here is my problem list:    6'
  contents:
  - "actually require some coordinated effort.  Here is my problem list:    6\n  \
    \ 1.  It is almost true that an FTP user program can understand\n   reply codes\
    \ by the following simple algorithm:                     6a\n      a. Replies\
    \ starting with 0 or 1 should be typed out and\n      otherwise ignored.     \
    \                                        6a1\n                               \
    \    6\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n      b. Replies starting with 2 indicate success (of\
    \ this step or\n      of the whole operation, depending on the command).     \
    \        6a2\n      c. Replies starting with 4 or 5 indicate failure of the\n\
    \      command.                                                       6a3\n  \
    \    d. Replies starting with 3 are only recognized in three cases:\n      the\
    \ initial 300 message, the 330 password request, and the\n      350 MAIL response.\
    \  (Note that the user program need not\n      distinguish which 300 message it\
    \ got, merely whether or not it\n      is expecting one right now.)          \
    \                         6a4\n   The only real problem with this, aside from\
    \ bugs in a few servers\n   whose maintainers tell me they're working on it, is\
    \ the HELP\n   command, which is not in the original protocol and which returns\n\
    \   0xx, 1xx, or 2xx depending on the server.  (Sometimes more than\n   one message\
    \ is returned.) The word from one network protocol\n   expert at BBN is that (a)\
    \ 050 or 030 is the correct response to\n   HELP, and (b) there is a perfectly\
    \ good mechanism in the protocol\n   for multi-line responses.  Unfortunately\
    \ this does not do much\n   good in dealing with reality.  There seems to be a\
    \ uniform\n   procedure for handling the STAT command:                       \
    \    6b\n      151 information\n      151 information\n      151 ...\n      151\
    \ information\n      200 END OF STATUS                                       \
    \       6b1\n   which fits right in with the above algorithm.  This is despite\n\
    \   the fact that 1xx is supposed to constitute a positive response\n   to a command\
    \ like STAT, so that according to RFC 354 it ought to\n   be                 \
    \                                                6c\n      151-information\n \
    \     information\n      ...\n      151 information                          \
    \                      6c1\n   instead.  RFC 414, which approves of the 200 reply\
    \ for STAT, also\n   gives 200 for HELP.  (It seems to me, by the way, that 050\
    \ and\n   030 aren't good enough as responses to HELP since they\n   \"constitute\
    \ neither a positive nor a negative acknowledgement\" of\n                   \
    \                7\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   the HELP command and thus don't tell the user program\
    \ when it\n   ought to ask the human user what to do next.)  I suggest that,\n\
    \   despite RFC 354, a 200 response be given by all servers at the\n   end of\
    \ whatever other HELP it gives as of, let's say, June 1.\n   The alternatives\
    \ are either to let the current rather chaotic\n   situation continue forever\
    \ while waiting for FTP-2, or to try to\n   standardize everyone on a multi-line\
    \ 1xx for both HELP and STAT.\n   I'm against changing STAT, which works perfectly\
    \ for everyone as\n   far as I can tell, and it should be clear that I'm against\n\
    \   waiting for FTP-2.  Unfortunately there is no real mechanism for\n   \"officially\"\
    \ adopting my plan, but I bet if TENEX does it on June\n   1 the rest of the world\
    \ will come along.                           6d\n   2.  Another reply code problem\
    \ is the use of 9xx for\n   \"experimental\" replies not in the protocol.  This\
    \ includes the\n   BBN mail-forwarding message and one other that I know of. \
    \ This\n   procedure is sanctioned by RFC 385, but it seems like a bad idea\n\
    \   to me.  For one thing, the user program has no way of knowing\n   whether\
    \ the reply is positive, negative, or irrelevant.  The\n   examples I've been\
    \ burned by all should have been 0xx messages.\n   I propose that all such messages\
    \ be given codes in the 000-599\n   range, chosen to fit the scheme given above\
    \ for interpreting\n   reply codes.  x9x or xx9 could be used to indicate experiments.\
    \    6e\n   3.  One more on reply codes: RFC 630 (the one about the TENEX mod\n\
    \   to the reply codes for MAIL and MLFL) raises the issue of\n   \"temporary\"\
    \ versus \"permanent\" failures within the 4xx category.\n   RFC 640 deals with\
    \ this question in the FTP-2 context by changing\n   the meaning of 4xx and 5xx\
    \ so that the former are for temporary\n   errors and the latter are for permanent\
    \ errors.  I like this\n   idea, and I think it could easily be adapted for FTP-1\
    \ use in a\n   way which would allow people to ignore the change and still win.\n\
    \   At present, I believe that the only program which attempts to\n   distinguish\
    \ between temporary and permanent errors is the TENEX\n   mailer.  For other programs,\
    \ no distinction is currently made\n   between 4xx and 5xx responses; both indicate\
    \ failure, and any\n   retrials are done by the human user based on the text part\
    \ of the\n   message.  A specific set of changes to the reply codes is\n   proposed\
    \ below.                                                    6f\n   Perhaps I should\
    \ make a few more points about RFC 640, since it's\n   the best thing about FTP-2\
    \ and the only argument for it I find at\n                                   8\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   all convincing.  Let me try to pick out the virtues\
    \ of 640 and\n   indicate how they might be achieved in FTP-1.               \
    \       6g\n      a.  The 3xx category is used uniformly for \"positive\n    \
    \  intermediate replies\" where further negotiation in the Telnet\n      connection\
    \ is required, as for RNFR.  I'm afraid this one\n      can't be changed without\
    \ affecting existing user programs.\n      (One of my goals here is to enable\
    \ existing user programs to\n      work while some servers continue as now and\
    \ others adopt the\n      suggestions I make below.) However, although this 3xx\
    \ idea is\n      logically pleasing, it is not really necessary for a\n      simple-minded\
    \ user program to be able to interpret replies.\n      The only really new 3xx\
    \ in RFC 640 is the 350 code for RNFR.\n      But this would only be a real\n\
    \      improvement for the user program if there were also a 2xx code\n      which\
    \ might be returned after RNFR, which is not the case.\n      640 also abolishes\
    \ the 300 initial connection message with\n      220, but again there is clearly\
    \ no conflict here.              6g1\n      b.  The use of 1xx is expanded to\
    \ include what is now the 250\n      code for the beginning of a file transfer.\
    \  The idea is that a\n      1xx message doesn't affect the state of the user\
    \ process, but\n      this is not really true.  Consider the file transfer commands.\n\
    \      The state diagram on page 13 of RFC 640 is slightly\n      misleading.\
    \ It appears as if 1xx replies are simply ignored by\n      the user program.\
    \  In reality, that little loop hides a lot of\n      work: the file transfer\
    \ itself!  If the server replied to the\n      file transfer command immediately\
    \ with a 2xx message, it would\n      be a bug in the server, not a successful\
    \ transfer.  The real\n      state diagram is more like                      \
    \               6g2\n         B --> cmd --> W --> 1 --> W --> 2 --> S\n      (with\
    \ branches out from the \"W\"s for bad replies).  It should\n      be clear from\
    \ this diagram that the user program, if it trusts\n      the server to know what\
    \ it's doing, can expect a 2xx instead\n      of the 1xx without getting confused,\
    \ since it knows which of\n      the W states it's in.  In fact, the use of 1xx\
    \ in file\n      transfer is very different from its other uses, which are\n \
    \     indeed more like the 0xx and 1xx replies in FTP-1.  I'd call\n      this\
    \ particular point a bug in RFC 640.                        6g3\n      c.  Automatic\
    \ programs which use FTP (like mailers) can decide\n                         \
    \          9\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n      whether to queue or abandon an unsuccessful transfer\
    \ based on\n      the distinction between 4xx and 5xx codes.  I like this\n  \
    \    idea, although those temporary errors virtually never happen\n      in real\
    \ life.  This could be accomplished in FTP-1 by moving\n      many of the 4xx\
    \ replies to 5xx.  Mailers would be modified to\n      use the first digit to\
    \ decide whether or not to retry.  This\n      scheme does not cause any catastrophes\
    \ if some server is slow\n      in converting; it merely leads to unnecessary\
    \ retries.  A few\n      CPU cycles would be wasted in the month following the\
    \ official\n      switch.  Thus, this feature is very different from (a) and\n\
    \      (b), which could lead to catastrophic failures if not\n      implemented\
    \ all at once.  (Yes, I know that FTP-2 is supposed\n      to be done on a different\
    \ ICP socket.  I am not discussing\n      FTP-2 but whether its virtues can be\
    \ transferred to FTP-1.)\n      The specific codes involved are listed below.\
    \                  6g4\n      d.  The use of the second digit to indicate the\
    \ type of\n      message.  (The proposed division is not totally clean;\n    \
    \  for example, why is 150 (\"file status okay; about to open\n      data connection\"\
    ) considered to be more about the file\n      system than about the data connection?)\
    \  This can easily\n      be done, since the second digit is not currently important\n\
    \      to any user process--the TENEX mailer is, in this plan,\n      already\
    \ due for modification because of (c).  Since this\n      is mostly an aesthetic\
    \ point, I'm hesitant to do it if it\n      would be difficult for anyone.  In\
    \ particular, I would want to\n      leave the 25x messages alone, in case some\
    \ user programs\n      distinguish these.  This is especially likely for the ones\n\
    \      which are entirely meant for the program: 251 and 255.\n      Therefore\
    \ I propose that if this idea is adopted in FTP-1\n      the meanings of x2x and\
    \ x5x be interchanged.  This proposal is\n      reflected in the specific list\
    \ below.                          6g5\n"
- title: Let me summarize the specific changes to FTP-1 I'd like to see made,
  contents:
  - 'Let me summarize the specific changes to FTP-1 I''d like to see made,

    '
- title: 'most of which are merely documentation changes to reflect reality:     7'
  contents:
  - "most of which are merely documentation changes to reflect reality:     7\n  \
    \ 1.  HELP should return 200.  All commands should return 2xx if\n   successful,\
    \ and I believe all do except HELP.                      7a\n   2.  The definition\
    \ of 1xx messages should be changed to read:\n   \"Informative replies to status\
    \ inquiries.  These constitute\n   neither a positive nor a negative acknowledgment.\"\
    \                 7b\n                                   10\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n   3.  Experimental reply codes should be of the form\
    \ x9x or xx9,\n   where the first digit is chosen to reflect the significance\
    \ of\n   the reply to automated user programs.  Reply codes greater than\n   599\
    \ are not permitted.  The xx9 form should be used if the reply\n   falls into\
    \ one of the existing categories for the second digit.\n   User programs are encouraged\
    \ to determine the significance of the\n   reply from the first digit, rather\
    \ than requiring a specific\n   reply code, when possible.                   \
    \                      7c\n   4.  The STAT command with no argument is considered\
    \ a request for\n   a directory listing for the current working directory, except\n\
    \   that it may be given along with TELNET SYNCH while a transfer is\n   in progress,\
    \ in which case it is a request for the status of that\n   transfer.  (Everyone\
    \ seems to do the first part of this.  I'm not\n   sure if anyone actually implements\
    \ the second.  This is just\n   getting the protocol to agree with reality.) \
    \ The reply to a STAT\n   command should be zero or more 1xx messages followed\
    \ by a 200.     7d\n   5.  TYPEs P and F mean that the source file contains ASA\
    \ control\n   characters and that the recipient program should reformat it if\n\
    \   necessary.  Servers which care about Telnet-print vs. non-print\n   should\
    \ implement SRVR T and SRVR N.  All user processes should\n   provide a way for\
    \ the human user to specify an arbitrary SRVR\n   command.                   \
    \                                        7e\n   6.  (This is just a resolution\
    \ of a loose end in documentation.)\n   Nested reply codes are not allowed.  I\
    \ don't think this really\n   needs more discussion; they never happen and can't\
    \ possibly work,\n   and FTP user programs shouldn't have to worry about them.\
    \          7f\n   Here is a list of the current FTP-1 replies, and how they should\n\
    \   be renumbered for the new scheme.  The changes from 4xx to 5xx\n   should\
    \ be REQUIRED as of June 1; changes in the second or third\n   digit are not so\
    \ important.  (As explained above, it will not be\n   catastrophic even if some\
    \ hosts do not meet the requirement.) The\n   list also contains one new possible\
    \ reply adapted from RFC 640.\n   Replies invented in RFC 454 are so noted; since\
    \ some of them are\n   for commands largely not implemented like REIN, they may\
    \ be\n   irrelevant.                                                        7g\n\
    \      OLD   NEW   TEXT\n                                                    \
    \                 7g1\n      0x0   0x0   (These messages are not very well defined\
    \ nor very\n                                   11\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n                  important.  Servers should use their\
    \ judgment.)\n      100   110   System status reply.  (Since nobody does STAT\
    \ as\n      in\n                  the protocol, this may be a moot point.)\n \
    \     110   111   System busy doing...  (This RFC 454 message could\n        \
    \          easily be considered an example of the one above,\n               \
    \   but since the 454 authors want to distinguish it,\n                  here\
    \ it is in another number.)\n      150   150   \"File status reply.\"  (If this\
    \ were really that,\n      it\n                  would be switched to 120, but\
    \ I believe what is\n      meant\n                  is the response to a bare\
    \ STAT in mid-transfer,\n      which\n                  is more a connection status\
    \ reply than a file\n      status\n                  reply.)\n      151   121\
    \   Directory listing reply.\n      200   200   Last command ok.\n      201  \
    \ 251   ABOR ok.                                           7g2\n      202   252\
    \   ABOR ignored, no transfer in progress.\n      new   206   Command ignored,\
    \ superfluous here.\n      230   230   Login complete.\n      231   231   Logout\
    \ complete.  (RFC 454: Closing connection.)\n      232   232   Logout command\
    \ will be processed when transfer is\n                  complete.            \
    \                              7g3\n      233   233   Logout complete, parameters\
    \ reinitialized.  (RFC\n      454               for REIN)                    \
    \                7g4\n      250   250   Transfer started correctly.\n      251\
    \   251   MARK yyyy = mmmm\n      252   252   Transfer completed ok.\n      253\
    \   223   Rename ok.\n      254   224   Delete ok.\n      255   255   SOCK nnnn\n\
    \      256   256   Mail completed ok.\n      300   300   Connection greeting\n\
    \      301   301   Command incomplete (no crlf)\n      330   330   Enter password\
    \                                     7g5\n      331   331   Enter account (RFC\
    \ 454)\n      350   350   Enter mail.                                        7g6\n\
    \      400   huh?  \"This service not implemented.\"  I don't\n      understand\n\
    \                  this; how does it differ from 506?  If it means no\n      \
    \                             12\f"
- title: NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700
  contents:
  - 'NWG/RFC# 691                                    BH 6-JUN-75 23:15  32700

    '
- title: One More Try on the FTP
  contents:
  - "One More Try on the FTP\n      FTP\n                  at all, who gave the message?\
    \  Flush.              7g7\n      401   451   Service not accepting users now,\
    \ goodbye.\n      430   430   Foo, you are a password hacker!\n      431   531\
    \   Invalid user or password.\n      432   532   User invalid for this service.\n\
    \      433   533   Need account to write files.\n      434   454   Logout by operator.\n\
    \      435   455   Logout by system.\n      436   456   Service shutting down.\n\
    \      450   520   File not found.\n      451   521   Access denied.\n      452\
    \   452   Transfer incomplete, connection closed.            7g8\n      453  \
    \ 423   Transfer incomplete, insufficient storage space.\n      454   454   Can't\
    \ connect to your socket.\n      455   425   Random file system error (RFC 454)\
    \                 7g9\n      456   526   Name duplication, rename failed (RFC\
    \ 454)\n      457   557   Bad transfer parameters (TYPE, BYTE, etc) (RFC\n   \
    \   454)\n      500   500   Command gibberish.\n      501   501   Argument gibberish.\n\
    \      502   502   Argument missing.\n      503   503   Arguments conflict.\n\
    \      504   504   You can't get there from here.\n      505   505   Command conflicts\
    \ with previous command.\n      506   506   Action not implemented.\n      507\
    \   507   Some other problem.  (RFC 454)\n      550   520   Bad syntax in pathname.\
    \  (RFC454)                 7g10\n"
