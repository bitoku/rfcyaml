- title: __initial_text__
  contents:
  - "                     ISO Transport Protocol Specification\nThis document is distributed\
    \ as an RFC for information only.\nIt does not specify a standard for the ARPA\
    \ Internet.\nNote:  This document appeared in:\nISO/TC97/SC16/WG6.  Information\
    \ Processing Systems - Open Systems\n    Interconnection - Transport Protocol\
    \ Specification.  Computer\n    Communication Review 12, 3-4 (July/October 1982),\
    \ pp.  24-67.\nand differs from it only in format.\nTable of Contents\n0.   Introduction\n\
    1.   Scope and Field of Application\n2.   References\nSection One - General\n\
    3.   Definitions\n4.   Symbols and Abbreviations\n5.   Overview\n     5.1  Service\
    \ provided by the transport layer\n     5.2  Service assumed from the network\
    \ layer\n     5.3  Functions of the transport layer\n     5.4  Model of the transport\
    \ layer\nSection Two - Transport Protocol Specification\n6.   Protocol Mechanisms\n\
    \     6.1  Assignment to network connection\n     6.2  Transport protocol data\
    \ unit (TPDU) transfer\n     6.3  Data TPDU length and segmenting\n     6.4  Concatenation\
    \ and separation\n     6.5  Connection establishment\n     6.6  Connection refusal\n\
    \     6.7  Release\n     6.8  Implicit termination\n     6.9  Spurious disconnect\n\
    \     6.10 Data TPDU numbering\n     6.14 Retention until acknowledgement of TPDUs\n\
    \     6.15 Resynchronization\n     6.16 Multiplexing and demultiplexing\n    \
    \ 6.17 Explicit flow control\n     6.18 Checksum\n     6.19 Frozen references\n\
    \     6.20 Retransmission on timeout\n     6.21 Resequencing\n     6.22 Inactivity\
    \ control\n     6.23 Treatment of protocol errors\n     6.24 Splitting and recombining\n\
    7.   Protocol Classes\n     7.0  Protocol description of class 0:  simple class\n\
    \     7.1  Protocol description of class 1:  basic error recovery class\n    \
    \ 7.2  Protocol description of class 2:  multiplexing class\n     7.3  Protocol\
    \ description of class 3:  error recovery and multiplexing\n                 \
    \                           class\n     7.4  Protocol description of class 4:\
    \  error detection and recovery class\n8.   Encoding\n     8.1  Summary\n    \
    \ 8.2  Structure\n     8.3  Connection Request (CR)\n     8.4  Connection Confirm\
    \ (CC)\n     8.5  Disconnect Request (DR)\n     8.6  Disconnect Confirm (DC)\n\
    \     8.7  Data (DT\n     8.8  Expedited Data (ED)\n     8.9  Data Acknowledgement\
    \ (AK)\n     8.10 Expedited Data Acknowledgement (EA)\n     8.11 Reject (RJ)\n\
    \     8.12 TPDU Error (ERR)\nSection Three  -  Conformance\n9.   Conformance\n\
    0.   Introduction\n        The Transport Protocol Standard is one of a set of\
    \ International\nStandards produced to facilitate the interconection of computer\n\
    systems.  The set of standards covers the services and protocols\nrequired to\
    \ achieve such interconnection.\n        The Transport Protocol Standard is positioned\
    \ with respect to\nService Standard (DP aaaa).  It also uses and makes reference\
    \ to the\nNetwork Service Standard (DP bbbb), whose provisions it assumes in\n\
    order to accomplish the transport protocol's aims.  The\ninterrelationship of\
    \ these standards is depicted in Figure 1.\n-----------------------------------TRANSPORT\
    \ SERVICE DEFINITION-----\n Transport                --Reference to aims---------------\n\
    \ Protocol\n Specification            --Reference to assumptions--------\n------------------------------------NETWORK\
    \ SERVICE DEFINITION------\nFigure 1  -  Relationship between the transport protocol\
    \ and adjacent\n             services\n        The standard specifies a common\
    \ encoding and a number of \nclasses of transport protocol procedures to be used\
    \ with different \nnetwork qualities of service.\n        It is intended that\
    \ the Transport Protocol should be simple \nbut general enough to cater for the\
    \ total range of Network Service\nqualities possible, without restricting future\
    \ extensions.\n        The protocol is structured to give rise to classes of protocol\
    \ \nwhich are designed to minimize possible incompatibilities and \nimplementation\
    \ costs.\n        The classes are selectable with respect to the Transport and\
    \ \nNetwork Services in providing the required quality of service for the\ninterconnection\
    \ of two session entities (note that each class provides\na different set of functions\
    \ for enhancement of service qualities).\n        This protocol standard is concerned\
    \ with optimisation of network\ntariffs and the following qualities of service:\n\
    \     a)  different throughput rates;\n     b)  different error rates;\n     c)\
    \  integrity of data requirements;\n     d)  reliability requirements.\n     \
    \   The aim of this standard is primarily to provide a definition \nfor implementors.\
    \  Since the protocol is complex, the document contains\nmuch material which is\
    \ advisory or descriptive, but mandatory\nrequirements on implementations are\
    \ clearly identified. \n        It should be noted that, as the number of valid\
    \ protocol sequences \nto establish confidence that an implementation correctly\
    \ operates the\nprotocol in a representative sample of circumstances.  It is,\
    \ however,\nintended that this standard can be used in circumstances where two\n\
    implementations fail to communicate in order to determine whether one\nor both\
    \ have failed to operate the protocol correctly.\n        The variations and options\
    \ available within this standard are\nessential to enable a Transport Service\
    \ to be provided for a wide\nvariety of applications over a variety of network\
    \ qualities.  Thus, a\nminimally conforming implementation will not be suitable\
    \ for use in\nall possible circumstances.  It is important therefore to qualify\
    \ all\nreferences to this standard with statements of the options provided or\n\
    required or with statements of the intended purpose of provision or\nuse.\n1.\
    \      Scope and Field of Application\n1.1     This International Standard Specifies:\n\
    \        a)  five classes of procedures\n                1) Class 0.  Simple class;\n\
    \                2) Class 1.  Basic error recovery class;\n                3)\
    \ Class 2.  Multiplexing class;\n                4) Class 3.  Error recovery class;\n\
    \                5) Class 4.  Error detection and recovery class,\n          \
    \      for the transfer of data and control information from\n               \
    \ one transport entity to a peer transport entity;\n        b)  the means of negotiating\
    \ the class of procedures to be \n            used by the transport entities;\n\
    \        c)  the encoding of the transport protocol data units used for\n    \
    \        the transfer of data and control information;\n        d)  the functional\
    \ requirements of equipment within a\n            computer system claiming to\
    \ implement these procedures.\n1.2     The procedures are defined in terms of:\n\
    \        a)  the interactions between peer transport entities through\n      \
    \      the exchange of transport protocol data units;\n        b)  the interactions\
    \ between a transport entity and the\n            transport service user in the\
    \ same system through the exchange of\n            transport service primitives;\n\
    \            service primitives.\n1.3     This International Standard is applicable\
    \ to equipment which \n        supports the Transport Layer of the OSI Reference\
    \ Model and which\n        wishes to interconnect in an open systems environment.\n\
    2.      References\nISO 7498        Information processing systems - Open systems\
    \ inter-\n                connection - Basic Reference Model\nDP aaaa        \
    \ Information processing systems - Open systems inter-\n                connection\
    \ - Transport service definition (N1169).\nDP bbbb         Information processing\
    \ systems - Open systems inter-\n                connection - Connection-oriented\
    \ network service\n                definition (N729)\nSection One - General\n\
    3.      Definitions\n3.1     Equipment:  Hardware or software or a combination\
    \ of both; it\n        need not be physically distinct within a computer system.\n\
    3.2     Transport service user:  An abstract representation of the\n        totality\
    \ of those entities within a single system that make \n        use of the transport\
    \ service.\n3.3     Network service provider:  An abstract machine which models\
    \ \n        the totality of the entities providing the network service,\n    \
    \    as viewed by a transport entity.\n        Explanatory Notes\n        1. \
    \ Definitions 3.1 to 3.3 relate to terms used in clause 1.\n        2.  This standard\
    \ makes use of the terms, concepts, and \n            definition defined in ISO\
    \ 7498.\n4.      Symbols and Abbreviations\n4.1     Data Units\n        TPDU \
    \   Transport protocol data unit\n        TSDU    Transport service data unit\n\
    \        NSDU    Network service data unit\n        CR TPDU         Connection\
    \ request TPDU\n        CC TPDU         Connection confirm TPDU\n        DR TPDU\
    \         Disconnect request TPDU\n        DC TPDU         Disconnect confirm\
    \ TPDU\n        DT TPDU         Data TPDU\n        ED TPDU         Expedited data\
    \ TPDU\n        AK TPDU         Data acknowledge TPDU\n        EA TPDU       \
    \  Expedited acknowledge TPDU\n        RJ TPDU         Rejected TPDU\n       \
    \ ERR TPDU        Error TPDU\n4.3     TPDU fields\n        LI              Length\
    \ indicator (field)\n        CDT             Credit (field)\n        TSAP-ID \
    \        Transport service access point identifier\n                        (field)\n\
    \        DST-REF         Destination reference (field)\n        SCE-REF      \
    \   Source reference (field)\n        EOT             End of TSDU mark\n     \
    \   TPDU-NR         DT TPDU number (field)\n        ED-TPDU-NR      ED TPDU number\
    \ (field)\n        YR-TU-NR        Sequence number response (field)\n4.4     Parameters\n\
    \        T (R)           Receive sequence number\n        T (S)           Send\
    \ sequence number\n4.5     Timer variables\n        T1              Elapse time\
    \ between retransmissions\n        N               The maximum number of retransmissions\n\
    \        L               Bound for the maximum time between the\n            \
    \            decision to transmit a TPDU and the receipt of\n                \
    \        any response relating to it\n        T-WAIT          Maximum time for\
    \ a reassignment to take place\n                        before TC failure is assumed\n\
    \        I               Inactivity timer - Maximum time allowed to \n       \
    \                 elapse between receipt of TPDUs before TC \n               \
    \         failure is assumed\n        W               Window timer - Maximum interval\
    \ between trans-\n                        mission of up to date window information\n\
    4.6     Other variables\n        n               The number of bits in the sequence\
    \ number\n4.7     Miscellaneous\n        TS-user         Transport service user\n\
    \        TSAP            Transport service access point\n        NSAP        \
    \    Network service access point\n        TC              Transport connection\n\
    \        NC              Network Connection\n5.      Overview of the Transport\
    \ Protocol\n5.1     Service Provided by the Transport Layer\n        The services\
    \ provided by the protocol described in this\n        Primitive              \
    \                 Parameters\n------------------------------------------------------------------------\n\
    T-CONNECT       Request                 To Transport Address, From \n        \
    \        Indication              Transport Address, Expedited\n              \
    \                          Data Option, Quality of\n                         \
    \               Service, TS-User data.\n------------------------------------------------------------------------\n\
    T-CONNECT       Response                Responding Address, Quality \n       \
    \         Confirmation            of Service, Expedited Data\n               \
    \                         Option, TS-User data.\n------------------------------------------------------------------------\n\
    T-DATA          Request                 TS-User data.\n                Indication\n\
    ------------------------------------------------------------------------\nT-EXPEDITED\
    \     Request                 TS-User data.\nDATA            Indication      \n\
    ------------------------------------------------------------------------\nT-DISCONNECT\
    \    Request                 TS-User data.\n------------------------------------------------------------------------\n\
    T-DISCONNECT    Indication              Disconnect reason, TS-User\n         \
    \                               data.\n------------------------------------------------------------------------\n\
    \                Figure 1.  Transport Service Primitives\n5.2     Service Assumed\
    \ from the Network Layer\n        Primitive               X/Y             Parameters\
    \      X/Y/Z\n------------------------------------------------------------------------\n\
    N-CONNECT  Request               X              Called Address,    X\n       \
    \    Indication            X              Calling Address,   X\n           Response\
    \              X              NS-User data,      Z\n           Confirmation  \
    \        X              QOS.               X\n------------------------------------------------------------------------\n\
    N-DATA     Request                X              NS-User data,      X\n      \
    \     Indication             X              Conf. Request      Y\n------------------------------------------------------------------------\n\
    N-DATA      Request               Y\nACKNOWLEDGE Indication\n------------------------------------------------------------------------\n\
    N-EXPEDITED Request               Y     \nDATA        Indication             \
    \               NS-User data       Y\n------------------------------------------------------------------------\n\
    N-RESET      Request              X               \n             Indication  \
    \         X\n             Response             X\n             Confirmation  \
    \       X\n------------------------------------------------------------------------\n\
    N-DISCONNECT Request              X               NS-User data       Z\n     \
    \        Indication           X\n------------------------------------------------------------------------\n\
    \        X - The Transport Protocol assumes that this facility is \n         \
    \   provided in all networks.\n        Y - The Transport Protocol assumes that\
    \ this facility is\n            provided in some networks and a mechanism is provided\n\
    \            to optionally use the facility.\n        Z - The Transport Protocol\
    \ does not use this parameter.\n                Figure 2.  Network Service Primitives\n\
    5.3     Functions of the Transport Layer\n5.3.1   Connection Oriented Functions\n\
    5.3.1.1  Overview of Functions\n        The functions in the transport layer are\
    \ at least those\nnecessary to bridge the gap between the services available from\
    \ the\nnetwork layer and those to be offered to the transport users.\n       \
    \ The functions in the transport layer are concerned with the\nphase, and the\
    \ release phase.\n5.3.1.1.1  Establishment Phase\n        The goal of the establishment\
    \ phase is to establish a\ntransport connection, i.e., between two transport users.\
    \  The\nfunctions of transport layer during this phase must match the\nrequested\
    \ class of services with the services provided by the network\nlayer as follows:\n\
    \        o  Select network service which best matches the requirement\n      \
    \     of the TS-user taking into account charges for various\n           services.\n\
    \        o  Decide whether to multiplex multiple transport connection\n      \
    \     onto a single network connection.\n        o  Establish the optimum TPDU\
    \ size.\n        o  Select the functions that will be operational upon entering\n\
    \           the data transfer phase.\n        o  Map transport addresses onto\
    \ network addresses.\n        o  Provide a means to distinguish between two different\n\
    \           transport connections.\n        o  Transportation of user's data.\n\
    5.3.1.1.2  Data Transfer Phase\n        The purpose of the data transfer phase\
    \ is to permit two-way\nsimultaneous transport of TSDUs between the session entities\
    \ connected\nby the transport connection.  This purpose is achieved by means of\n\
    two-way simultaneous communication in the Transport protocol and by\nthe following\
    \ functions. Each of these functions is used or not used\nin accordance with the\
    \ result of the selection performed in the\nestablishment phase.\n        o  Concatenation\
    \ and Separation\n           A function used to collect several TPDUs into a single\n\
    \           NSDU; the destination transport entity separates the TPDUs.\n    \
    \    o  Segmenting and Reassembling\n           The splitting of a single data\
    \ TSDU into multiple TPDUs\n        o  Multiplexing and Demultiplexing\n     \
    \      A function used to share a single network connection\n           between\
    \ two or more transport connections.\n        o  Splitting and Recombing\n   \
    \        A function allowing the simultaneous use of two or more\n           network\
    \ connections to support the same transport connec-\n           tion.\n      \
    \  o  Flow Control\n           A function used to regulate the flow of TPDUs between\
    \ two\n           transport entities on one transport connection.\n        o \
    \ Error Detection\n           A function used to detect the loss, corruption,\n\
    \           duplication, misordering or misdelivery of TPDUs.\n        o  Transport\
    \ Connection Identification\n           A means to uniquely identify a transport\
    \ connection\n           between the pair of transport entities supporting the\n\
    \           connection during the lifetime of the transport\n           connection.\n\
    \        o  Error Recovery\n           A function used to recover from detected\
    \ and signalled\n           errors.\n        o  Expedited Data\n           A function\
    \ used to bypass the flow control of normal data \n           TPDU.  Expedited\
    \ data TPDUs' flow is controlled by \n           separate flow control.\n    \
    \    o  TSDU Delimiting\n           A function used to determine the beginning\
    \ and ending of\n           a TSDU.\n5.3.1.1.3  Release Phase\n        A function\
    \ to provide a disconnection of the transport\n        A class defines a set of\
    \ functions.   In this protocol five\n        classes are defined:\n        o\
    \  Class 0:  Simple Class\n        o  Class 1:  Basic Error Recovery Class\n \
    \       o  Class 2:  Multiplexing Class\n        o  Class 3:  Error Recovery and\
    \ Multiplexing Class\n        o  Class 4:  Error Detection and Recovery Class.\n\
    \        Note that with the exception of classes 0 and 1, transport \n       \
    \ connections of different class may be multiplexed together\n        onto the\
    \ same network connection.\n5.3.1.2.2  Options within Classes\n        Options\
    \ define potential functions which may be used within\n        a class.\n5.3.1.2.3\
    \  Negotiation\n        Classes and options within classes are negotiated during\n\
    \        the connection establishment phase.\n5.3.1.2.4  Choice of the Class of\
    \ Protocol\n        The choice will be made by the transport entities according\n\
    \        to:\n        o  the users requirement expressed via T-CONNECT service\n\
    \           primitives.  In particular, for the choice of the\n           class\
    \ of protocol, the following rules apply:\n           - if the TS-User requests\
    \ either transmission of \n             user data during the connection phase,\
    \ or use of\n             Expedited data transfer, then Class 0 cannot be\n  \
    \           selected.\n           - if the TS-User requests use of Expedited data\
    \ \n             transfer, then Class 2 with the non-explicit \n             flow\
    \ control option cannot be selected.\n        o  the quality of the available\
    \ Network services;\n        o  the user required service versus cost ratio \n\
    \           acceptable for the transport user.\n        The following is a classification\
    \ of network services in terms\na given network connection.\n        Type A: Network\
    \ connection with acceptable residual error\n                rate (for example\
    \ not signalled by 'clear' or 'reset')\n                and acceptable rate of\
    \ signalled failures.\n        Type B: Network connections with acceptable residual\
    \ error\n                rate (for example not signalled by 'clear' or 'reset')\n\
    \                but unacceptable rate of signalled failures.    \n        Type\
    \ C: Network connections with residual error rate not \n                acceptable\
    \ to the TS-user.\n        It is assumed that each transport entity is aware of\
    \ the\nquality of service provided by particular Network connections.\n5.3.1.3\
    \  Potential Functions\n        The protocol described in this document does not\
    \ include the\nfollowing set of functions which have been identified as potential\n\
    transport layer functions:\n        o  provision for encryption\n        o  provision\
    \ for accounting mechanisms\n        o  provision for status exchanges and monitoring\
    \ of quality\n           of service\n        o  provision for blocking\n     \
    \   o  temporary release of network connections\n5.4     Model of the Transport\
    \ Layer\n             TSAP                               TSAP\n        Transport\
    \ Protocol              Transport Protocol\n             Entity              \
    \             Entity\n              NSAP   -------                    NSAP  -------\n\
    \               |     (NSAP)                      |     (NSAP)\n             \
    \  |       |                         |       |\n               |       |-------------------------|--------\n\
    \               |                                 |              \n          \
    \     -----------------------------------\nservice primitives as defined by the\
    \ transport service definition DP\naaaa.  Service primitives will cause or be\
    \ the result of Transport\nProtocol Data Unit exchanges between the peer Transport\
    \ Protocol\nentities supporting a Transport Connection.  These protocol exchanges\n\
    are effected using the services of the Network Layer as defined by the\nNetwork\
    \ Service Definition DP bbbb through one or more NSAPs.\n        Transport connection\
    \ endpoints are identified in end systems\nby an internal, implementation dependent,\
    \ mechanism so that the\nTransport User and the Transport Protocol entity can\
    \ refer to each\nTransport connection.\nSection Two - Transport Protocol Specification\n\
    6.      Protocol Mechanisms\n        Several functions are described as 'inherent'\
    \ or 'pervasive'.\nInherent functions must be invoked for every transport connection.\n\
    Pervasive functions are optional, but if one is invoked for the first\ntransport\
    \ connection over a network connection, it must also be invoked\nfor any and all\
    \ other transport connections which use that network\nconnection during its lifetime.\n\
    6.1     Assignment to Network Connection\n        Purpose:  Assignment of transport\
    \ connections to network\n                  connections.\n        Network Service\
    \ Primitives:\n        N-CONNECT\n        N-DISCONNECT\n        Description:\n\
    \        This function is inherent.\n        Before a transport connection can\
    \ be created or used, it must\nbe assigned to one (or more if splitting function\
    \ is being used)\nnetwork connection(s).  Both transport entities involved must\
    \ become\naware of this assignment.  A transport connection may be assigned to\
    \ a\nsuitable existing network connection; one or more new network\nconnections\
    \ may also be created for the purpose.\n        An existing network connection,\
    \ which connects the relevant\ntransport entities, is unsuitable for assignment\
    \ of a transport\nconnection if, for example:\n           connection.\n      \
    \  o  the protocol class preferred or in use for the transport \n           connection\
    \ is incompatible with the current usage of the \n           network connection\
    \ as regards the use of pervasive\n           functions (e.g., multiplexing).\n\
    \        When a new network connection is created, the quality of\nservice requested\
    \ is a local matter, though it will normally be\nrelated to the requirements of\
    \ transport connection(s) expected to be\nassigned to it.\n        A Network Connection\
    \ with no transport connections will be\navailable after initial establishment\
    \ or because explicit\ndisconnection of all the transport connections previously\
    \ assigned to\nit has taken place.  Either Transport entity may as a local\nmatter\
    \ choose to disconnect the Network Connection or assign other\nTransport Connections\
    \ to it.\n6.2     Transport Protocol Data Unit (TPDU) Transfer\n        Purpose:\
    \  To convey transport protocol data unit in user \n                  data fields\
    \ of network service primitives.\n        Network Service Primitives\n       \
    \ N-DATA\n        N-EXPEDITED DATA\n        Description:\n        This function\
    \ is inherent.\n        The Transport Protocol Data Units (TPDUs) defined for\
    \ the\nprotocol are listed in Figure 3.\n                TPDU name           \
    \     Abbreviation\n        Connection Request                      CR\n     \
    \   Connection Confirm                      CC\n        Disconnect Request   \
    \                   DR\n        Disconnect Confirm                      DC\n \
    \       Data                                    DT\n        Expedited Data   \
    \                       ED\n        Data Acknowledge                        AK\n\
    \        Expedited Acknowledge                   EA\n        Reject          \
    \                        RJ\n        TPDUs are conveyed using the NS-User data\
    \ parameters of the\nNetwork Service primitives, primarily with the N-DATA, but\
    \ also with\nN-EXPEDITED primitives.\n        Transport entities shall accept\
    \ all permissible assignments and\nmay issue any permissible assignments.  The\
    \ permissible assignments of\nTPDUs to these primitives are shown in Figure 4.\
    \  Concatenation of\nTPDUs is also permitted (see section 6.4).\nPrimitive   \
    \            Applicable TPDUs                        Note\nN-DATA            \
    \      CR, CC, DR, DT, ED,\n                        AK, EA, RJ, DC, ERR\nN-EXPEDITED\
    \             ED, EA                                  1\nNotes:\n1.  This assignment\
    \ is permissible only when using class 1 and when\n    the network expedited variant\
    \ has been agreed.\nFigure 4.  Network Service Primitives which can convey TPDUs.\n\
    6.3     Data TPDU Length and Segmenting\n        Purpose:  Mapping between one\
    \ TSDU and TPDUs.\n        TPDUs and fields used:\n        DT\n        -  End\
    \ of TSDU (1 bit)\n        Description:\n        The data field of Data TPDUs\
    \ may contain any number of octets\nup to an agreed maximum as negotiated at connection\
    \ time.  \n        A transport entity uses an End of TSDU mark as defined below:\n\
    \        In each Data TPDU a transport entity may indicate the end of a\nTSDU.\n\
    \        Category 1      Having the End of TSDU mark set to yes.  These\n    \
    \                    TPDUs may or may not have the maximum length.\n        Category\
    \ 2      Having the End of TSDU mark set to no.  These\n                     \
    \   TPDUs do not necessarily have the maximum\neither a single category 1 DT TPDU\
    \ or consecutive category 2 followed\nby a category 1 DT TPDU.\n6.4     Concatenation\
    \ and Separation\n        Pupose:  Conveyance of multiple TPDUs in one NSDU.\n\
    \        Description:\n        All TPDUs carry in their TPDU header a length indicator\
    \ (see\nSection 8.2.1).  Additionally, TPDUs are classified as either Data\nTPDUs\
    \ or Control TPDUs.  Control TPDUs may or may not contain a data\nfield.  For\
    \ TPDUs containing data the length of the data field is\nindicated by the length\
    \ of the NSDU.  These provisions permit any\nnumber of Control TPDUs that may\
    \ not contain data to be concatenated\nwith a single control TPDU which may contain\
    \ data or with a single\nData TPDU.  The control TPDUs without data must precede\
    \ the TPDU with\ndata, if any.  The number of TPDUs so concatenated is terminated\
    \ by\nthe end of the NSDU.\n        The concatenated set of TPDUs may be for the\
    \ same or different\ntransport connections.  An implementation shall accept concatenated\n\
    TPDUs and may concatenate TPDUs before transmission.  The transport\nentity shall\
    \ not send a concatenated set of TPDUs which exceeds twice\nthe overall maximum\
    \ TPDU length for all the TCs assigned to the\nnetwork connection.\n6.5     Connection\
    \ Establishment\n        Purpose:  Creation of a new transport connection.\n \
    \       Network Service Primitives:\n        N-DATA\n        TPDUs and fields\
    \ used:\n        CR, CC\n        - source reference (16 bits)\n        - initial\
    \ credit (if applicable)\n        - calling transport address (optional)\n   \
    \     - called transport address (optional)\n        - user data (optional)\n\
    \        - TPDU size (optional)\n        - sequence number length (optional)\n\
    \        - checksum selection (optional)\n        - acknowledgement time (optional)\n\
    \        - alternative protocol classes (zero or more)\n        - version number\
    \ (optional)\n        - security (optional)\n        - proposed options\n    \
    \    CC\n        - destination reference (16 bits)\n        - selected protocol\
    \ class\n        - selected options\n        Description:\n        This function\
    \ is inherent:\n        A transport connection is established by means of one\n\
    transport entity (the initiator) transmitting a Connection Request\n(CR) TPDU\
    \ to the other transport entity (the responder), which replies\nwith a Connection\
    \ Confirm (CC) TPDU.  Before sending the CR TPDU, the\ninitiator assigns the transport\
    \ connection being created to one (or\nmore if the splitting function is being\
    \ used) network connection(s).\nIt is this set of network connections over which\
    \ the TPDUs are sent.\nDuring this exchange, all information and parameters needed\
    \ for the\ntransport entities to operate must be exchanged or negotiated.\n  \
    \      The following information is exchanged:\n        o  references.  Each transport\
    \ entity chooses a reference which\n           is 16 bits long and which is arbitrary\
    \ except for the following\n           restrictions:\n           - it cannot already\
    \ be in use or \"frozen\" (see \"Frozen\n             References\", Section 6.19).\n\
    \           - it cannot be zero.\n        Each transport entity is responsible\
    \ for selecting the\nReference which the partner will use.  This mechanism is\
    \ symmetrical\nand therefore avoids the need to assign a status of master or slave\
    \ to\npartners and avoids call collision.  This mechanism also provides\nidentification\
    \ of the transport connection independent of the network\nconnection. The range\
    \ of References used for transport connections, in\na given transport entity,\
    \ is a local system parameter.\n        o  addresses (optional).  Indicate the\
    \ calling and called\n           transport service access points.  When either\
    \ network\n           address unambiguously defines the transport address this\n\
    \           information may be omitted.\n        o  user data.  Not available\
    \ in class 0.  Up to 32 octets in\n           in other classes.\n        The following\
    \ negotiations take place:\n        o  protocol class.  The initiator shall propose\
    \ a preferred\nclass and any number of alternatives.  (Except that no alternatives\
    \ are\nallowed when class 0 is the preference.)  The initiator should assume\n\
    when it sends the CR TPDU that its preferred class will be agreed to,\nand commence\
    \ the functions associated with that class.\n        Note:  This means, for example,\
    \ that when a class which\nincludes resynchronization (see \"Resynchronization\"\
    , Section 6.15) is\npreferred, resynchronization will occur if a reset is signalled\
    \ during\nconnection establishment.\n        When the responder has decided which\
    \ class is to be used, it\nshall indicate this in the CC TPDU and shall invoke\
    \ the appropriate\nfunctions for the class.  The responder may select the preferred\n\
    class, or any of the alternative classes or may select class 0 if\nclass 1 is\
    \ proposed or class 2 if class 3 or 4 is proposed. (see\nSection 9)\n        If\
    \ the preferred class is not selected, then on receipt of the\nCC TPDU, the initiator\
    \ shall adjust its functions accordingly.\n        o  TPDU Size.  The initiator\
    \ may propose a maximum size for\nTPDUs, and the responder may accept this value\
    \ or respond with any\nvalue between the proposed value and 128 in the set of\
    \ values\navailable (see \"Encoding\", Section 8).\n        o  sequence number\
    \ length.  Either normal or extended is\navailable.  When the sequence number\
    \ is extended, the credit field (if\napplicable) is also extended.\n        o\
    \  checksum selection.  This defines whether or not TPDUs of\nthe connection are\
    \ to include a checksum.\n        o  version number.  This defines the version\
    \ of the transport\nprotocol standard used for this connection.\n        o  security\
    \ parameter.  This parameter and its semantics are\nuser defined.\n        o \
    \ quality of service parameter.  This defines the throughput,\ndelay, priority\
    \ and residual error rate.\n        o  The use of Network Receipt Confirmation\
    \ and Network\nexpedited is negotiated when class 1 is to be used.\n        The\
    \ negotiation rules for the options are such that the\ninitiator may propose either\
    \ to use or not to use the option.  The\nresponder may either accept the proposed\
    \ choice or select the\nmandatory alternative defined in Section 9.\n        During\
    \ the establishment phase of the transport connection,\nthe use of the expedited\
    \ data option field of CR/CC  allows both\nTransport Service user to negotiate\
    \ the use or non use of the\nexpedited data transport service as described in\
    \ the transport service\ndefinitions.\n        The following table summarizes\
    \ the negotiation possibilities\nfor the options.\n                          \
    \      Proposition Made        Possible\n                                by the\
    \ Initiator        Selection by \n        Option                             \
    \             the Responder\nTransport expedited data             Yes        \
    \          Yes or No\ntransfer service                     No                \
    \       No\nUse of receipt confir-               Yes                  Yes or No\n\
    mation (class 1 only)                No                       No\nUse of the network\
    \                   Yes                  Yes or No\nexpedited variant        \
    \            No                       No\n(class 1 only)\nNon use of checksum\
    \                  Yes                  Yes or No\n(class 4 only)            \
    \           No                       No\nNon use of explicit                 \
    \ Yes                  Yes or No\nflow control (class 2 only)          No    \
    \                   No\nUse of extended format               Yes             \
    \     Yes or No\n                                     No                     \
    \  No\n        In class 2, whenever a transport entity requests or agrees to\n\
    the Transport Expedited data transfer service or to the use of\nextended formats,\
    \ it must also request or agree (respectively) to the\nuse of explicit flow control.\n\
    6.6     Connection Refusal\n        DR\n        -  reason (1 octet)\n        -\
    \  user data (maximum of 64 octets)\n        ERR\n        -  reject code (1 octet)\n\
    \        -  rejected TPDU parameter\n        Description:\n        If a transport\
    \ connection cannot be accepted, the called\ntransport entity shall respond to\
    \ the CR TPDU with a DR TPDU.  The\nclearing reason shall indicate why the connection\
    \ was not accepted.\nThe source reference field in the DR TPDU is set to zero\
    \ to indicate\nan unassigned reference.\n        If the CR is regarded as an invalid\
    \ TPDU, the called transport\nentity will respond by sending an ERR TPDU.  On\
    \ receipt of this TPDU,\nthe calling entity will regard the connection as closed.\n\
    6.7     Release\n        Variants:  'implicit' or 'explicit'\n        Purpose:\
    \  Termination of the transport connection.\n        Network Service Primitives:\n\
    \        N-DISCONNECT (implicit variant only)\n        N-DATA\n        TPDUs and\
    \ fields used:\n        DR\n        - clearing reason (1 octet)\n        - user\
    \ data (maximum of 64 octets)\n        DC\n        Description:\n        This\
    \ function is inherent.\n        In the 'implicit' variant, either transport entity\
    \ disconnects\na transport connection by disconnecting the network connection\
    \ to\nwhich it is assigned.  Similarly when a transport entity is informed\nthat\
    \ the network connection has been disconnected by the peer\n        In the 'explicit'\
    \ variant, either transport entity transmits a\nDisconnect Request (DR) TPDU,\
    \ and the other responds with a Disconnect\nConfirm (DC) TPDU.  When the DC TPDU\
    \ is sent or received by a\ntransport entity, that entity should consider the\
    \ transport connection\nnot to exist (note 1).  After the sending of a DR TPDU,\
    \ other TPDUs\nreceived before the DC TPDU are ignored.  It is possible that a\n\
    disconnect collision will occur, when both transport entities send a\nDR TPDU\
    \ at about the same time.  This results in each transport entity\nreceiving a\
    \ DR, after sending one.  Each transport entity shall\nconsider the received DR\
    \ TPDU as a confirmation of its DR TPDU, and\nshall not send or expect to receive\
    \ a DC TPDU.\n        The DR can convey a limited amount (up to 64 octets) of\
    \ data.\n6.8     Implicit Termination\n        Purpose:  Termination of a Transport\
    \ Connection on the\noccurrence of a signalled error for which recovery functions\
    \ are not\noperative.\n        Network Service Primitives:\n        N-DISCONNECT\
    \ Indication\n        N-RESET Indication\n        Description:\n        When,\
    \ on the network connection to which a Transport\nConnection is assigned, an N-DISCONNECT\
    \ or N-RESET Indication occurs,\nboth transport entities shall consider that the\
    \ transport connection\nno longer exists, and so inform the session entities.\n\
    Note 1:\n        When a connection has been released, after the exchange of DR\n\
    and DC, the reference can be re-used immediately (except in Class 4,\nwhere the\
    \ Frozen Reference function is used, see Section 6.19).  This\nis because the\
    \ releasing transport entity does not know with certainty\nthat the remote transport\
    \ entity considers use of the reference to be\nended.  Therefore, the reference\
    \ should not be re-used for further\nconnections.  (In practice, the reference\
    \ may be re-used after a\nreasonable period when it is possible to be reasonably\
    \ certain that\nthe remote transport entity will not continue to use it).\n6.9\
    \     Spurious Disconnect\n        Purpose:  To deal with the arrival of an \"\
    unknown\" DR TPDU.\n        DR, DC\n        - source reference\n        - destination\
    \ reference\n        Description:\n        A DR TPDU can be received for a transport\
    \ connection which\ndoes not exist.  Rather than treating this as an error, a\
    \ DC TPDU\nshould be send back which reflects the references of the DR TPDU.\n\
    Note:\n        This only applies when one or more transport connections using\n\
    a multiplexing class exist over the network connection, or when no\ntransport\
    \ connections exist.  At other times it is a protocol error.\n6.10    Data TPDU\
    \ Numbering\n        Variants:  'normal' or 'extended'\n        Purpose:   Numbering\
    \ of DT TPDUs for use in recovery, \n                   flow control, or sequencing\
    \ functions.\n        TPDUs and Fields Used:\n        DT\n        - TPDU-NR (7\
    \ or 31 bits)\n        Description:\n        DT TPDUs transmitted in each direction\
    \ on a transport \nconnection bear a sequence number 'TPDU-NR'.  Its value in\
    \ the first\nDT TPDU in each direction after connection establishment will be\
    \ zero.\nThereafter each TPDU had 'TPDU-NR' one greater than the previous.  \n\
    Modulo 2**7 arithmetic is used in the 'normal' variant, and modulo 2**31\nin the\
    \ 'extended' variant.\n        In the sections that follow, the relationships\
    \ 'greater than'\nand 'less than' are used in connection with TPDU numbers.  In\
    \ all \nsuch uses, the numbers being compared cover a range less than the \nmodulus\
    \ and in fact lie within a contiguous set of TPDU numbers called\na 'window'.\
    \  The window has a known starting TPDU number and finishing \nnumber.  The term\
    \ 'less than' means 'occurring sooner in the window\nsequence' and the term 'greater\
    \ than' means 'occurring later in the\nwindow sequence'.\n6.11    Expedited Data\
    \ Transfer\n        Network Service Primitives:\n        N-DATA\n        N-EXPEDITED\
    \ DATA\n        TPDUs and Fields Used:\n        ED\n        - ED TPDU-NR (7 or\
    \ 31 bits)\n        EA\n        - YR-TU-NR (7 or 31 bits)\n        Description:\n\
    \        Each expedited TSDU is conveyed as the data field of an Expedited\nData\
    \ (ED) TPDU.  \n        Each ED TPDU received must be acknowledged by an Expedited\n\
    Acknowledge (EA) TPDU.  \n        There may only be one ED TPDU unacknowledged\
    \ at any time for each\ndirection of a transport connection.  \n        In the\
    \ 'network expedited' variant (available in class 1 only),\nED and EA TPDUs are\
    \ conveyed in the data fields of N-EXPEDITED DATA\nprimitives.  Otherwise, N-DATA\
    \ is used.  \n6.12    Reassignment\n        Purpose:  Assignment of a Transport\
    \ Connection to a different\nNetwork Connection.\n        TPDUs and Fields Used:\n\
    \        CR\n        - source reference\n        RJ, DR\n        - destination\
    \ reference\n        Description:\n        When the Network Connection to which\
    \ a Transport Connection was\nassigned no longer exists, the Transport Connection\
    \ can be assigned to\nanother Network Connection.  \nhas received a TPDU for the\
    \ Transport Connection on a Network Connection\nwith calling and called network\
    \ addresses which imply \nthe same transport entities as the old.  The TPDU will\
    \ have been sent \nas a result of the assigning transport entity commencing resynchronization,\n\
    and will thus be a RJ, or a retransmitted CR or DR.  \n        The Transport Connection\
    \ shall be recognised as having been\nassigned to the Network Connection on which\
    \ the TPDU was received.  \n6.13    Reassignment After Failure\n        Purpose:\
    \  Recovery from network provider initiated disconnect.\n        Network Service\
    \ Primitives:\n        N-DISCONNECT Indication \n        Description:\n      \
    \  When a N-DISCONNECT Indication arrives for the network connection\nto which\
    \ a transport connection is assigned, the transport connection must \nbe reassigned\
    \ by its initiator (see \"Reassignment\")\n        If the reassignment has not\
    \ successfully occurred within a time\nof T-wait seconds, then the transport connection\
    \ must be considered as\nnon-existent by both transport entities.1\n        1.\
    \      The CR TPDU does not have a destination reference;\n                nevertheless\
    \ it can be distinguished from a new\n                connection attempt by having\
    \ the same source \n                reference.  \n        NOTE:  The value of\
    \ T-wait has to be agreed by the communicating\ntransport entities.  \n6.14  \
    \  Retention Until Acknowledgement of TPDUs\n        Variants:  'confirmation\
    \ of receipt' or 'AK'\n        Purpose:  To enable and minimize retransmission\
    \ after\npossible loss of TPDUs.\n        Network Service Primitives:\n      \
    \  N-DATA\n        N-DATA ACKNOWLEDGE\n        RJ, AK, EA\n        - YR-TU-NR\
    \ (7 or 31 bits)\n        DT\n        - TPDU-NR (7 or 31 bits)\n        ED\n \
    \       - ED TPDU-NR (7 or 31 bits)\n        Description:  \n        Copies of\
    \ the following TPDUs shall be retained upon transmission\nto permit their later\
    \ retransmission:\n                CR, CC, DR, DT, ED.\n        NOTE:  If DR is\
    \ sent in response to CR there is no need to \nretain a copy of the DR.\n    \
    \    In the 'confirmation of receipt' variant, applicable only \nin Class 1, transport\
    \ entities receiving N-DATA Indications which\nconvey DT TPDUs and have the confirmation\
    \ request field set shall\nissue a N-DATA Acknowledge Request at the earliest\
    \ possible\nopportunity (1).  \n        (1)     It is a local matter for each\
    \ transport entity to \n                decide which N-DATA Requests should have\
    \ the \n                confirmation request parameter set.  This decision\n \
    \               will normally be related to the amount of storage \n         \
    \       available for retained copies of the DT TPDUs.  \n                Use\
    \ of the confirmation request parameter may\n                affect the quality\
    \ of network service.  \n        After each TPDU is acknowledged, as shown in\
    \ Figure 5,\nthe copy need not be retained.  Copies may also be discarded when\n\
    the transport connection ceases to exist.  \n        TPDU                    \
    \        ACKNOWLEDGED BY\n        CR              receipt of CC, DR, or ERR, TPDU\n\
    \        DR              receipt of DC or DR (in case of collision)\n        \
    \                TPDU\n        CC              receipt of RJ, DT, AK, ED, EA TPDUs\
    \ (or \n                        N-DATA ACKNOWLEDGE Indication.)\n            \
    \            field set.  \n        DT              receipt of Data Acknowledge\
    \ (AK) or\n        (Note 2)        Reject (RJ) TPDU for which 'YR-TU-NR'\n   \
    \                     is greater than 'TPDU-NR' in the DT TPDU.\n        ED  \
    \            receipt of EA TPDU for which 'YR-TU-NR' \n                      \
    \  is equal to 'ED-TPDU-NR' in the ED TPDU.        Notes:\n        1.      Applies\
    \ to 'confirmation of receipt' variant.\n        2.      Applies to 'AK' variant.\
    \  \n                Figure 5.  Acknowledgement of TPDUs\n6.15    Resynchronization\n\
    \        Purpose:  To restore the connection to normal after an \nerror.  \n \
    \       Network Service Primitives:\n        N-RESET Indication\n        TPDUs\
    \ and Fields Used:\n        CR, DR, CC, DC\n        RJ, EA\n        - YR-TU-NR\
    \ (7 or 31 bits)\n        DT                      \n        - TPDU-NR (7 or 31\
    \ bits)\n        ED\n        - ED TPDU-NR (7 or 31 bits)\n        Description:\n\
    \        After the reset of an underlying network connection,\nthe resynchronization\
    \ procedures below are carried out by both\ntransport entities.  \n        After\
    \ a network connection failure, the reassignment after\nfailure function is invoked\
    \ and then the resynchronization function.  \nThe sequence of events at the two\
    \ transport entities is the following:\n        o       if a CR is retained then\
    \ retransmit it.\n        o       if a DR is retained then retransmit it.\n  \
    \      o       otherwise, resynchronize data:\n                -       send RJ\
    \ TPDU with 'YR-TU-NR' field set to\n                        the 'TPDU-NR' of\
    \ the first unreceived DT\n                        TPDU\n                -   \
    \    when RJ TPDU has been received retransmit any\n                        ED\
    \ TPDUs then DT TPDUs which are unacknowledged\n                -       any ED\
    \ TPDUs received which are duplicates shall\n                        be acknowledged\
    \ (by EA TPDUs) and discarded.  \n        Events at the other transport entity:\n\
    \        The transport entity shall not send any TPDUs until after \nreceipt of\
    \ the TPDU which commenced resynchronization.  This TPDU\ntherefore serves two\
    \ purposes, namely indication of re-assignment\nand commencement of resynchronization.\
    \  \n        o       if the first received TPDU os a DR, then transmit\n     \
    \           a DC TPDU.\n        o       if the first received TPDU is a CR and\
    \ the transport\n                connection is not idle, this means that a CC\
    \ TPDU is\n                retained:  then retransmit it followed by any ED TPDU\
    \ \n                and then DT TPDUs which are outstanding (that may or\n   \
    \             may not have been transmitted previously).  \n        NOTE:  no\
    \ TPDUs can be transmitted using network expedited until \nCC becomes acknowledged,\
    \ to prevent the network expedited overtaking the \nCC.  \n        o       if\
    \ the first received TPDU is a RJ, then act as follows:\n                -   \
    \    if a DR TPDU is retained, then retransmit it\n                -       if\
    \ a CC TPDU remains unacknowledged, then carry\n                        out the\
    \ data resynchronization procedure described\n                        below\n\
    \                -       otherwise resynchronize data:\n                     \
    \   -       send RJ TPDU with 'YR-TU-NR' field set to\n                      \
    \  -       retransmit any ED TPDUs then DT TPDUs which\n                     \
    \           are unacknowledged\n                        -       any ED TPDUs received\
    \ which are duplicates \n                                should be acknowledged\
    \ (by EA TPDUs) and \n                                discarded.  \n        NOTE:\
    \  It is possible for a transport entity using the Class 1\nprotocol to decide\
    \ on a local basis to issue an N-RESET Request.  The effect\nof this request at\
    \ the remote transport entity is to force it to perform\nthe resynchronization\
    \ mechanism.  This possibility may be used to remove \ncongestion within the network\
    \ connection.  \n6.16    Multiplexing and Demultiplexing\n        Purpose:  Concurrent\
    \ sharing of a network connection by several\ntransport connections.\n       \
    \ TPDUs and Fields Used:\n        CC, DR, DC, DT, AK, ED, EA, RJ, ERR\n      \
    \  - destination reference\n        Description:\n        This function is pervasive.\
    \  \n        When this function is in operation, more than one transport \nconnection\
    \ can be simultaneously assigned to the same network connection.\n        Every\
    \ TPDU (including DT TPDUs) must carry the destination \nreference, to identify\
    \ the transport connection to which it refers.  \n6.17    Explicit Flow Control\n\
    \        Purpose:  Regulation of flow of DT TPDUs independently of \nthe flow\
    \ control in the other layers.  \n        TPDUs and Fields Used:\n        CR,\
    \ CC, AK, RJ\n        - CDT (4 or 16 bits)\n        DT\n        - TPDU-NR (7 or\
    \ 31 bits)\n        AK, RJ\n        Description:\n        The mechanism depends\
    \ on the class.  Thus the description can\nbe found in the section describing\
    \ the class. \n6.18    Checksum\n        Purpose:  To detect corruption of TPDUs\
    \ by the network service\nprovider.  \n        TPDUs and Fields Used:\n      \
    \  All TPDUs\n        - checksum (16 bits - 32 bits)\n        Description:\n \
    \       When a TPDU is to be transmited for a TC which has selected the\nchecksum\
    \ option, the sending transport entity must generate a checksum\nfor the TPDU\
    \ and store it in the checksum parameter in the variable\npart of the TPDU header.\
    \  The checksum must be generated as follows:\n        1.      Set up the complete\
    \ TPDU, including the header and \nuser data (if any).  The header must include\
    \ the checksum parameter in\nits variable part.  The value field of the checksum\
    \ parameter must be\nset to zero at this point.  \n        2.      Initialize\
    \ two variables to zero.  Let these variables \nbe called C0 and C1.  \n     \
    \   3.      For each octet of the TPDU, including the header, \nvariable part\
    \ of the header and the user data, add the octet value to \nC0, and then add the\
    \ value of C0 to C1.  Octets should be processed\nsequentially, starting with\
    \ the first octet (the Length Indicator) and\nproceeding through the TPDU.  All\
    \ addition is to be performed modulo 255.\n        4.      Calculate the value\
    \ field of the checksum parameter as\nfollows.  Let the offset into the TPDU of\
    \ the first octet of the value \nfield be 'n' (where the first octet of the TPDU,\
    \ the Length Indicator\nof the header, is considered to be at offset 1).  Let\
    \ the length \nof the TPDU, i.e. the number of times the above operation was repeated,\n\
    be 'L'.  Let the first octet of the checksum value, i.e., the one at offset\n\
    'n' be called 'X', and the second octet, at offset 'n+1', be called 'Y'.  \nThen:\
    \  \n        X = (((L - n) *  C0) - C1) modulo 255\n        Y = (((L - n + 1)\
    \ * (-C0)) + C1) modulo 255\n                                NOTE\n        An\
    \ implementation may use one's complete arithmetic as an\n        alternative\
    \ to modulo 255 arithmetic.  However, if either\n        of the checksum octets\
    \ X and Y has the value minus zero\n        (i.e., 255) then it must be converted\
    \ to plus zero \n        (i.e., 0) before being stored.  \n        When a TPDU\
    \ is received for a TC for which the checksum option\nhas been selected, the TPDU\
    \ must be verified to ensure that it has been\nreceived correctly.  This is done\
    \ by computing the checksum, using the\nsame algorithm by which it was generated.\
    \  The nature of the checksum\nalgorithm is such that it is not necessary to compare\
    \ explicitly the stored\nchecksum bytes.  The procedure described below may be\
    \ used to verify that \na TPDU has been correctly received.  \n        1.    \
    \  Initialize two variable to zero.  Let these variables\nbe called C0 and C1.\
    \  \n        2.      For each octet in the received TPDU, add the value of\nthe\
    \ octet to C0 and then add the value of C0 to C1, starting with the\nfirst octet\
    \ and proceeding sequentially through the TPDU.  All \naddition is to be performed\
    \ modulo 255.  \n        3.      When all octets have been sequentially processed,\
    \ the\nvalues of C0 and C1 should be zero.  If either or both of them is \nnon-zero,\
    \ the TPDU has been received incorrectly and the verification\nhas failed.  Otherwise,\
    \ the TPDU has been received correctly and the \nTPDU should be processed normally.\
    \  \n                                NOTE\n        An implementation may use one's\
    \ complement arithmetic as an\n        alternative to modulo 255 arithmetic. \
    \ In this case, if either\n        C0 or C1 has the value minus zero (i.e., 255)\
    \ it is to be \n        regarded as though it was plus zero (i.e., 0)\n      \
    \  If a checksum verification failure occurs, it is not possible\nto determine\
    \ the TC that the TPDU relates to, since the Reference field\nof the TPDU may\
    \ have been received incorrectly.  Therefore, all TCs\nmultiplexed onto the same\
    \ NC must be treated as though a network signalled\nerror has occurred.  \n6.19\
    \    Frozen References\n        Purpose:  To prevent re-use of a reference while\
    \ TPDUs associated\nwith the old use of the reference may still exist.  \nduring\
    \ which time it will not be reused.  The circumstances under which\nthis is done,\
    \ and the period of time for which the reference remains\nfrozen depends on the\
    \ class.   \n6.20    Retransmission on Timeout\n        Purpose:  To cope with\
    \ unsignalled loss of TPDUs by the network\nservice provider.  \n        TPDUs\
    \ and Fields Used:\n        CR, CC, DR, DT, ED, AK\n        Description:  \n \
    \       The description is given in the section related to class 4.  \n6.21  \
    \  Resequencing \n        Purpose:  To cope with misordering of TPDUs by the network\n\
    service provider.  \n        TPDUs and Field Used:\n        DT\n        - TPDU\
    \ NR\n        ED\n        - ED TPDU NR\n        Description:\n        The description\
    \ is given in the section related to class 4.  \n6.22    Inactivity Control\n\
    \        Purpose:  To cope with unsignalled termination of a network\nconnection.\
    \  \n        TPDUs and Fields Used:\n        AK\n        Description:\n      \
    \  The description is given in the section related to class 4.  \n        TPDUs\
    \ and Fields Used:\n        ERR\n        - reject cause\n        - TPDU in error\
    \ (string of octets)\n        DR\n        - reason code\n        Description:\n\
    \        This function is inherent.  \n        Any received TPDU which is invalid\
    \ or which cannot be dealt with by\nany operative function, or which is regarded\
    \ as a violation of the protocol\nrules of the class in use (e.g., receipt in\
    \ a wrong state, window error,\nsequencing error, TPDU with incorrect format),\
    \ shall be considered as a \nprotocol error.  Such an error shall be signalled\
    \ to the transport entity\nresponsible by the sending of an TPDU Error (ERR) TPDU\
    \ or by initiating a \nrelease.  The ERR TPDU conveys the octets of the offending\
    \ TPDU up to\nand including the octet where the error was detected.  \n      \
    \  In general, no further action is defined for the sender of \nERR TPDU, since\
    \ it is expected that the offender will either correct \nthe error, or close the\
    \ connection.  \n        Action to be done by the receiver depends on local implementation\n\
    decision; e.g., freeze the connection, report to management, disconnect.  \nNOTES:\
    \  \n        1.      Further action is a local implementation issue.  Care\nshould\
    \ be taken by the transport entity receiving several invalid TPDUs\nor ERR TPDUs\
    \ to avoid looping if the error is repeatedly generated.  \n        2.      There\
    \ are two cases in which specific action is defined\nfor the receiver of the ERR\
    \ TPDU (see Sections 6.6 and 7.0.7).  \n6.24    Splitting and Recombining\n  \
    \      Purpose:  To allow a transport connection to make use of \nmultiple network\
    \ connections to provide additional resilience against\nnetwork failure, to increase\
    \ throughput, or for other reasons.  \n        Description:\n        This function\
    \ is available only in Class 4.  \nconnection may be sent over any assigned network\
    \ connection.  The \nresequencing function of Class 4 (see Section 6.21) is used\
    \ to ensure\nthat TPDUs are processed in the correct sequence.  \n        If the\
    \ use of Class 4 is not accepted by the remote transport\nentity following the\
    \ negotiation rules, only the network connection\nover which the CR TPDU was sent\
    \ may be used for this transport\nconnection.  \n        The splitting function\
    \ should only be used where the \nsupporting network connections provide similar\
    \ transmit delay.  \n   Protocol Mechanism           Variant         0  1  2 \
    \ 3  4\nAssignment to Network Conn.                     *  *  *  *  *\nTPDU Transfer\
    \                                   *  *  *  *  *\nDT TPDU Length and Segmenting\
    \                   *  *  *  *  *\nConcatenation and Separation              \
    \         *  *  *  *\nConnection Establishment                        *  *  *\
    \  *  *\nConnection Refusal                              *  *  *  *  *\nRelease\
    \                         implicit        *\n                                explicit\
    \           *  *  *  *\nImplicit Termination                            *    \
    \ *\nDT TPDU Numbering               normal             *  m  m  m\n         \
    \                       extended            (1)o o  o\nExpedited Data Transfer\
    \         network exp.      ao\n                                not \"       \
    \       m  *  *  *\n                                                     (1)\n\
    Reassigment                                        *     *\nReassignment after\
    \ Failure                         *     *\nRetention until Acknowledge-    Conf.\
    \ Receipt     ao\nment of TPDUs                   AK                 m     * \
    \ *\nResynchronization                                  *     *\nExplicit Flow\
    \ Control With                            m  *  *\n                      Without\
    \                   *  *  o \nChecksum   (use of)                            \
    \             m\n           (non-use of)                         *  *  *  *  o\n\
    Frozen References                                           *\nRetransmission\
    \ on Timeout                                   *\nResequencing               \
    \                                 *\nInactivity Control                      \
    \                    *\nTreatment of Protocol Errors                    *  * \
    \ *  *  *\nSplitting and recombining                                   *\n(1)\
    \  not applicable in class 2 when the non use of explicit flow\ncontrol is selected.\
    \  \n7.      PROTOCOL CLASSES\n        The details of the implementation of the\
    \ protocol \nmechanisms are in certain cases different for different classes.\
    \  \nFor this reason, the following table is not intended to provide a \ncomplete\
    \ description of the classes, but more to give an overview of \nhow each class\
    \ works.  The exact definition of the protocol is given \nin the subsequent sections.\n\
    \                            KEY\n        *  include in the class (always)\n \
    \       m  mandatory function (negotiable but always implemented)\n        o \
    \ additional function (negotiable but not necessarily implemented)\n        ao\
    \ additional function (negotiable but not necessarily implemented).\n        \
    \     Use of this option depends on the willingness of both transport \n     \
    \        entities and availability of network service.\n        na not applicable.\n\
    7.0     PROTOCOL DESCRIPTION OF CLASS 0: SIMPLE CLASS\n7.0.1   Characteristics\
    \ of Class 0\nwith the CCITT recommendations S.70 for Teletex terminals.\n   \
    \     The class is designed for use in association with \nnetwork connections\
    \ of type A (see 5.3.1.2.4.).\n7.0.2   Functions of Class 0\n        This class\
    \ is designed to have minimum functionality.\nIt provides only the functions needed\
    \ for connection \nestablishment with negotiation, data transfer with segmenting\
    \ and \nprotocol error reporting.\n        Class 0 provides transport connections\
    \ with flow \ncontrol based on the network service provided flow control, and\
    \ \ndisconnection based on the network service disconnection.\n7.0.3   Protocol\
    \ Mechanisms of Class 0\n7.0.3.1  Connection Establishment Phase\n        Connection\
    \ shall be made in accordance with the \ngeneral rules (Assignment of Network\
    \ Connection, Connection \nEstablishment and Connection Refusal) with the following\
    \ \nrestrictions:\n        o  No exchange of user data is allowed.\n        o\
    \  Only TSAP-ID and TPDU size parameters are allowed.\n7.0.3.2  Data Transfer\
    \ Phase\n        o  Segmenting  (DT TDPU length and Segmenting)\n        o  Detection\
    \ and indication of procedural errors.\n7.0.3.3  Release Phase\n        There\
    \ is no explicit transport connection release \nprocedure for this class.  The\
    \ lifetime of the transport connection \nis directly correlated to the lifetime\
    \ of the network connection.\n7.0.4   Connection Establishment for Class 0\n \
    \       The connection establishment function is used \nwith the contraint that\
    \ only the transport entity which has \nrequested the establishment of the network\
    \ connection may send the \nCR TPDU.  If the calling transport entity receives\
    \ a CR TPDU, it \n7.0.5   Data Transfer Procedures\n7.0.5.1  General \n      \
    \  The data transfer procedures described in the \nfollowing subsections apply\
    \ only when the transport layer is in the \ndata transfer phase, that is after\
    \ completion of Transport \nConnection establishment.\n7.0.5.2  Transport Data\
    \ TPDU maximum length\n        For Class 0 the standard maximum transport data\
    \ \nTPDU length is 128 octets including the data TPDU header octets.\n       \
    \ Other maximum TPDU lengths may be supported in \nconjunction with the optional\
    \ transport data TPDU size negotiation \nfunction (see Section 8.3 and 8.4). \
    \ Optional maximum data field \nlengths shall be chosen from the following list:\
    \  256, 512, 1024 \nand 2048 octets.\n        TSDUs are transmitted using the\
    \ segmenting function.\n7.0.6   Release  Procedure\n        The \"implicit\" variant\
    \ of the release function is used.\n7.0.7   Treatment of invalid TPDUs\n     \
    \   The \"treatment of protocol errors' function is used.\n7.0.8   Behaviour after\
    \ an error signalled by the network service.\n        The implicit termination\
    \ function is used and the \nhigh layer is informed about this disconnection.\n\
    7.0.9   Supported Options\n        None\n7.1     PROTOCOL DESCRIPTION OF CLASS\
    \ 1:  BASIC ERROR RECOVERY CLASS\n7.1.1   Characteristics of Class 1\n       \
    \ The characteristic of this class is that it \nprovides a basic transport connection\
    \ with minimal overheads.\n        The main purpose of the class if to recover\
    \ from \nreliability criteria.  Class 1 has been designed to be used in \nassociation\
    \ with type B network connections.\n7.1.2   Functions of Class 1\n        Class\
    \ 1 provides transport connections with flow \ncontrol based on the network service\
    \ provided flow control, error \nrecovery, expedited data transfer, disconnection,\
    \ and also the \nability to support consecutive Transport connections on a network\
    \ \nconnection.\n        This class provides the functionality of Class 0 \nplus\
    \ the ability to recover after a failure signalled by the Network \nService, without\
    \ involving the user of the Transport Service.\n7.1.3   Protocol Mechanisms of\
    \ Class 1\n        Class 1 protocol mechanisms include Class 0 \nprotocol mechanisms\
    \ plus the following:\n7.1.3.1  User Data in the Connection Phase\n        Class\
    \ 1 provides the possibility of conveying \ndata in the connection request and\
    \ confirm commands.\n7.1.3.2  Numbering of Data TPDU\n        Each Data TPDU transmitted\
    \ between transport entities for \neach direction of transmission in a transport\
    \ connection is \nsequentially numbered.\n7.1.3.3  Release\n        The \"explicit\"\
    \ variant of the release function is used.\n7.1.3.4  Error Recovery\n        The\
    \ sending Transport entity keeps a copy of transmitted \nTPDUs until it receives\
    \ an acknowledgment which allows copies to be released.\nAfter a failure is indicated\
    \ by the nerwork service (Reset, \nDisconnect), the resynchronization function\
    \ is used to determine\nwhich TPDUs must be retransmitted.\n        Resynchronization\
    \ may also be invoked by a transport entity\nas a local matter.  For that purpose\
    \ the Resynchronization function is\nused (see note at the end of Section 6.15).\n\
    Two methods of acknowledgment are provided in the Retention until \nAcknowledgement\
    \ of TPDUs function:\n        o  use of AK TPDU (\"AK\" variant) - mandatory\n\
    \           Note:  The credit field of the AK TPDU is\n           not used in\
    \ this class (always Set to zero).\n        o  use of network layer Confirmation\
    \ of Receipt Service.\n           ('confirmation of receipt' variant) - optional\n\
    \        The variant to be used is negotiated during the \nConnection Establishment\
    \ Phase.  The default option is the \"AK TPDU\" \nvariant.  Use of Network Layer\
    \ Receipt Confirmation is allowed only \nin Class 1, and depends on the availability\
    \ of the network layer \nreceipt confirmation service, the expected cost reduction,\
    \ and the \nagreement of both transport entities to use it.\n7.1.4   Connection\
    \ Establishment Procedures for Class 1\n        The 'assignment to network connection'\
    \ and \n'connection establishment' mechanisms are used.  From the point at \n\
    which a transport entity issues a CR proposing the use of Class 1 or \na CC accepting\
    \ the use of Class 1  the following mechanisms must be \navailable to deal with\
    \ signalled errors during connection \nestablishment:\n        o  Reassignment\
    \ after failure\n        o  Retention until Acknowledgement of TPDUs\n       \
    \ o  Resynchronization\n        If no DT or ED TPDU is to be sent, receipt of\
    \ a CC should be\nacknowledged.\n7.1.5   Data Transfer Phase\n        Data transfer\
    \ is accomplished using the 'TPDU  \ntransfer' 'Concatenation' and 'DT TPDU Length\
    \ and Segmenting' \nmechanisms.  'DT TPDU Numbering' and 'Retention until \nAcknowledgement\
    \ of TPDUs' are used in support of error recovery.\n7.1.5.1  Behaviour after an\
    \ error\n        After receiving a network reset, the Resynchronization\nmechanism\
    \ is invoked.  After receiving a network disconnect, the\n'Reassignment after\
    \ Failure' mechanism is invoked after which the\n'Resynchronization' mechanism\
    \ is invoked.\nConnection.\n7.1.5.2  Procedure for Expedited Data Transfer\n \
    \       The Expedited Data Transfer mechanism is used.  \nTwo methods are possible\
    \ to provide the function:\n        o  non network expedited variant\n       \
    \    Note: (1) This method is always included in this class.\n           Note:\
    \ (2) The EDTPDU-NR of the ED TPDU contains an\nidentification number.  This number\
    \ must be different for successive ED TPDUs.\nThat is, when an ED TPDU has been\
    \ sent and an EA TPDU for the ED \nTPDU has been received, the next ED TPDU must\
    \ have a different value \nin the EDTPDU-NR field.  No other significance is attached\
    \ to \nEDTPDU-NR field.  It is recommended but not essential, that the \nvalues\
    \ used be consecutive modulo 128.\n        o  network expedited variant\n    \
    \       Note: (1) The use of this method is \ndetermined through negotiation during\
    \ transport connection \nestablishment.\n7.1.6   Release Procedures\n        The\
    \ 'explicit' variant of the Release mechanism is used.\n        Receipt of an\
    \ error indication by a transport \nentity, which, prior to this event has sent\
    \ a DR, causes this \ntransport entity to retransmit DR.  Only DC and DR will\
    \ be accepted \nand interpreted as the completion of the connection release \n\
    sequence.  The related Reference will become unassigned.\n7.1.7   Treatment of\
    \ Unknown TPDUs\n        The 'Treatment of Protocol Errors' mechanism is used.\n\
    7.1.8   Supported Options\n        Use of network receipt confirmation.\n    \
    \    Use of network expedited.\n7.2     PROTOCOL DESCRIPTION OF CLASS 2: MULTIPLEXING\
    \ CLASS\nway to multiplex several transport connections onto a single network\
    \ \nconnection.  This class has been designed to be used in association \nwith\
    \ type A network connections.\n        Use of Explicit Flow Control\n        The\
    \ objective is to provide flow control to help \navoid congestion at end-points\
    \ and on the network connection.  \nTypical use is when traffic is heavy and continuous,\
    \ or when there \nis intensive multiplexing.  Use of flow control can optimize\
    \ \nresponse times and resource utilization.\n        Non Use of Explicit Flow\
    \ Control (optional)\n        The objective is to provide a basic transport \n\
    connection with minimal overheads suitable when independence of \ntransport and\
    \ network connection lifetime is desirable.  The class \nwould typically be used\
    \ for unsophisticated terminals, and when no  \nmultiplexing onto network connections\
    \ is required.  Expedited data \nis never available.\n7.2.2   Functions of Class\
    \ 2\n        Class 2 provides transport connections with or \nwithout individual\
    \ flow control - no error detection or error \nrecovery is provided.\n       \
    \ If the network resets or clears, the transport \nconnection is terminated without\
    \ the transport clearing sequence \nand the transport user is informed.\n    \
    \    When explicit flow control is used a credit \nmechanism is defined allowing\
    \ the receiver to inform the sender of \nthe exact amount of data he is willing\
    \ to receive and expedited data \ntransfer is available.\n7.2.3   Protocol Mechanisms\
    \ of Class 2\n7.2.3.1  Connection Establishment Phase\n        The connection\
    \ establishment function shall be used.\n7.2.3.1.1  User Data in the Connection\
    \ Phase\n        Class 2 provides the possibility to convey data in the \nconnection\
    \ request and confirm commands.\nThis uniquely identifies the transport connection\
    \ within the \nreceiving transport entity and thus allows multiplexing.\n7.2.3.3\
    \  Release Phase\n        The release of a transport connection results either\
    \ \nfrom the use of the 'explicit' variant of the release function or  \nfrom\
    \ the Implicit Termination function.\n7.2.3.4  Protocol Mechanisms when Explicit\
    \ Flow Control is used.\n        The following mechanisms are provided:\n7.2.3.4.1\
    \  Numbering of Data TPDU\n        Each Data TPDU transmitted between transport\
    \ entities \nfor each direction of transmission in a transport connection is \n\
    sequentially numbered.\n        Each Data TPDU contains a Send Sequence Number\
    \ T(S).\n7.2.3.4.2  Flow Control Principles\n        The receiver of data TPDUs\
    \ holds a count of the sequence\nnumber of the next expected TPDU.  This count\
    \ is called the \nReceive Sequence Number, T(R). The receiver indicated to the\
    \ sender\nthe number of Data TPDUs he is ready to receive by means of a 'credit'\n\
    mechanism.  Credits are given using the credit field in the AK TPDU.\nThe value\
    \ of the credit field, in conjunction with the value of T(R) \ntransported by\
    \ the YR-TU-NR (your TPDU number) field\nof the AK TPDU, is used by the receiver\
    \ of the AK TPDU to determine\nwhether and how many Data TPDUs may be accepted\
    \ by the sender of the\nAK TPDU. Precise definition of flow control principles\
    \ appears in Section \n7.2.5.5.3.\n7.2.3.4.3  Expedited Flow\n        The non\
    \ network expedited variant is used.  Normal \nflow is the flow of data subject\
    \ to the flow control mechanism, \nexpedited flow is the flow of data that the\
    \ sender may send without \nexplicit agreement of the receiver.  This expedited\
    \ flow has a \nlimited capability and could for example be used to carry session\
    \ \nsupervisory commands.\n        The number of expedited data units outstanding\
    \ at any \ntime is limited to one and the amount of TS-user data is limited (up\
    \ \nto 16 octets).\ndata will arrive after the expedited data.\n7.2.4   Connection\
    \ Establishment Procedures for Class 2\n7.2.4.1  References\n        See Section\
    \ 6.5 for reference assignment.  Receipt of \nany TPDU with a reference that is\
    \ not assigned to a transport \nconnection other than a Disconnect Request (DR)\
    \ or Connection \nRequest (CR) will be ignored.\n        Receipt of a Disconnect\
    \ Request (DR) for an unassigned\nReference will result in a Disconnect Confirm\
    \ (DC) response.\n7.2.4.2  Connection Eastablishment\n        This phase is achieved\
    \ by exchange of CR/CC TPDU using \nthe 'connection establishment' function. \
    \ Since the multiplexing \nfunction is in use, then more than one transport connection\
    \ may be \nassigned to the same network connection concurrently.  The \nrestrictions\
    \ of Class 0 does not apply to this class and the other \nhigher classes.\n7.2.5\
    \   Data Transfer Procedures for Class 2\n        The data transfer procedures\
    \ described in the \nfollowing section apply independently to each transport connection\
    \ \nexisting between two transport entities.\n7.2.5.1  TPDU Maximum Length and\
    \ Segmenting\n        The general rules defined in Section 6.3 apply.\n7.2.5.2\
    \  Concatenation\n        The general rules defined in Section 6.4 apply.\n7.2.5.3\
    \  Sending Data TPDU (No Explicit Flow Control Option)\n        In this case the\
    \ data TPDU is built in accordance \nwith the rules stated in Section 6.2 and\
    \ 6.3 and sent without any \nadditional mechanisms.  Thus, the DT TPDU NR field\
    \ may take any \nvalue and no AK TPDU is used.\n7.2.5.4  Sending Data TPDU (When\
    \ Explicit Flow Control is Used)\n        On each transport connection the transmission\
    \ of Data \n        This authorization is provided through the use of \nthe TPDUs\
    \ Credit field.  Credit field values are only present in \nthe following TPDUs:\
    \  CR, CC, AK..\n7.2.5.4.1  Numbering of Data TPDUs\n        Each Data TPDU transmitted\
    \ between transport entities, \nfor each direction of transmission in a transport\
    \ connection, is \nsequentially numbered.\n        The sender of Data TPDUs holds\
    \ a count of the next \nTPDU to be sent.  This count is called the Send Sequence\
    \ Number\nT(S).  The sender indicates to the receiver the number of the data \n\
    TPDU he sends by putting the current T(S) value into the TPDU-NR \nfield of the\
    \ data TPDU.\n        Sequence numbering is performed modulo 2**n, where n \n\
    is the number of bits of the sequence number field.  The T(S) \ncounter cycles\
    \ through the entire range 0 to (2**n)-1.\n        At connection establishment\
    \ time both Transport \nentities initialize their T(S) and T(R) counts to zero\
    \ (i.e. the \nfirst Data TPDU to be transmitted between transport entities for\
    \ a \ngiven direction of data transmission after the connection \nestablishment\
    \ has a TPDU-NR field set to zero).\n        Receipt of a Data TPDU whose TPDU-NR\
    \ field is not \nequal to the expected value T(R), is to be regarded as a protocol\
    \ \nerror.\n        Operations described above are summarized as follows:\n  \
    \      o  initalization\n           T(S) = 0     T(R) = 0\n               Sending\
    \ of Data TPDU\n                         put T(S) into the TPDU-NR field of \n\
    \                         the Data TPDU to be sent\n                         T(S)\
    \ = (T(S) + 1) (modulo 2**n)\n               Receiving of Data TPDU\n        \
    \                 TPDU-NR field of the received data \n                      \
    \   TPDU which is not equal to T(R) is \n                         a protocol error.\n\
    7.2.5.4.2  Window Definition\n        For each transport connection and for each\
    \ direction \nof data transmission a 'transmit window' is defined as the (possibly\
    \ \nnull) ordered set of consecutive data TPDUs authorized to be \ntransmitted\
    \ in that direction.  At any given time, the lowest \nsequence number of a data\
    \ TPDU which a transport entity is \nauthorized to transmit is referred to as\
    \ the 'lowest window edge'.  \nThe 'upper window edge' is calculated  by adding\
    \ the credit \nallocation, given by the value of the Credit (CDT) field contained\
    \ \nin a received TPDU, to the lower window edge.  Note that a transport \nentity\
    \ is authorized to send data TPDUs with sequence numbers up to \nbut not including\
    \ the upper window edge.\n7.2.5.4.3  Flow Control\n        Flow control is performed\
    \ as follows:\n        o  initialization time\n           Lower window edge =\
    \ 0\n           Upper window edge = N (Credit received either in\n           CR\
    \ or in CC and N < 2**p < 2** (n-1), where P is the number of \n           bits\
    \ in credit field of CR and CC.\n        o  Sending of a Data TPDU\n         \
    \  Send data TPDUs while T(S) is less than the upper window\n           edge.\
    \  If T(S) equals the upper window edge then wait for \n           additional\
    \ credit before sending.\n        o  Reception of Data TPDU (with TPDU NR = T(R)\n\
    \           If T(R) is greater than or equal to the upper window edge\n      \
    \     authorized to the sending transport entity, then the receiving\n       \
    \    transport entity shall use the Treatment of Protocol Errors \n          \
    \ function.  Otherwise T(R) shall be incremented.\n           Sending Credit\n\
    \                    Send AK TPDU with YR-TU-NR = T(R) and Credit equals N.\n\
    \                    (Where N = number of additional data \n                 \
    \   TPDUs the entity is prepared to receive.)\n           Receiving Credit in\
    \ AK.\n7.2.5.4.4  Reducing the Upper Window Edge\n        The value of the upper\
    \ window edge cannot be decreased \nin this class.  If, at a certain point of\
    \ time, the upper window edge \nvalue is U, the reception of an AK TPDU having\
    \ YR-TU-NR = M and CDT \n= N such that:\n        (U-M) (mod. 2**n) > N\nis a protocol\
    \ error\n        Provided the previous statements are respected, CDT \nfield may\
    \ take any value including zero.\n7.2.5.4.5  Procedure for Expedited Data Transfer\n\
    \        The procedure of expedited data transfer allows a \ntransport entity\
    \ to transmit data to the remote transport entity \nwithout following the flow\
    \ control procedure of the normal data \nflow.  This procedure can only apply\
    \ in the transfer phase.\n        The expedited procedure has no effect on the\
    \ transfer \nand flow control applying to normal Data TPDUs.\n        To transmit\
    \ expedited data, the transport entity sends \nan expedited data TPDU (ED TPDU).\
    \  The size of a data field is \nlimited (up to 16 octets).  The data field contains\
    \ a complete ED \nTSDU.  The remote transport will then confirm the receipt of\
    \ the ED \nTPDU by transmitting an expedited TPDU acknowledgement (EA TPDU). \
    \ \nA transport entity can send another ED TPDU only after having \nreceived an\
    \ EA TPDU for the previously transmitted ED TPDU.  In \nclass 2 the ED TPDU NR\
    \ field of the ED and YR-TU-NR field of the EA \nTPDU are not defined and may\
    \ take any value.\n7.2.6   Release Procedures for Class 2\n        The data phase\
    \ ends after a transport entity has sent \nor received a Disconnect Request (DR).\
    \  The transport entity will \nignore any incoming TPDU except DC or DR.\n   \
    \     If the network resets or clears the network \nconnection, all transport\
    \ connections are terminated without the \ntransport clearing sequence.  The References\
    \ become frozen.\n        For Class 2 the explicit variant of the 'release' \n\
    mechanism is used, enabling transport connections to be cleared \nindependently\
    \ of the underlying network connection.\n        The 'Treatment of Protocol Error'\
    \ mechanism in Section \n6.23 is used.\n7.2.8   Behaviour after an Error signalled\
    \ by the Network Layer.\n        The implicit termination mechanism is used.\n\
    7.2.9   Supported Options\n        Non use of explicit flow control.\n       \
    \ Extended formats.\n7.3     PROTOCOL DESCRIPTION OF CLASS 3: ERROR RECOVERY AND\
    \ MULTIPLEXING CLASS\n7.3.1   Characteristics of Class 3\n        The characteristics\
    \ of Class 3 in addition to those of \nClass 2 is to mask errors indicated by\
    \ the network.  Selection of \nthis class is usually based upon reliability criteria.\
    \  Class 3 has \nbeen designed to be used in association with type B network connections.\n\
    7.3.2   Functions of Class 3\n        This class provides the functionality of\
    \ Class 2 (with \nuse of explicit flow control) plus the ability to recover after\
    \ a \nfailure signalled by the Network Layer without involving the user \nof the\
    \ transport service.\n        The mechanisms used to achieve this functionality\
    \ also \nallow the implementation of more flexible flow control.\n7.3.3   Protocol\
    \ Mechanisms of Class 3\n        Class 3 mechanisms include Class 2 (with use\
    \ of \nexplicit flow control option) mechanisms and the ability to recover \n\
    after a failure signalled by the network without informing the user \nof the transport\
    \ connection.\n7.3.3.1  Error Recovery Principles\n        The sending transport\
    \ entity keeps a copy of \ntransmitted Data TPDUs and ED TPDUs until it receives\
    \ a positive \naknowledgement which allows copies to be released.  It may also\
    \ \nreceive an RJ command inviting it to retransmit or transmit all Data \nTPDUs,\
    \ if any, from the point in the sequence indicated in the  RJ \ncommand.\n   \
    \     Error recovery for ED TPDU is achieved by retransmission\n(see 7.3.5.3).\
    \  \n7.3.3.2  Relationship between Flow Control and Error Recovery\n        Acknowledgement\
    \ is performed by use of the T(R) count.          A\n credit is associated with\
    \ this acknowledgement which may\nbe equal to or greater than zero.  Thus it is\
    \ possible to acknowledge\ndata without giving the right to send new data.  \n\
    \        Credit may be reduced, by the use of the RJ TPDU.  \n7.3.4   Connection\
    \ Establishment Procedure for Class 3\n        The rules for Class 2 (with use\
    \ of explicit flow \ncontrol) apply with the addition of the following rules which\
    \ apply \non receipt of an eror indication from the Network layer.\n        o\
    \  Reception of an error indication by a \n           transport entity which,\
    \ prior to this event, has \n           sent a CR and has not yer received a CC,\
    \ causes \n           the transport entity to retransmit CR.\n        o  Reception\
    \ of an error indication by a \n           transport entity to wait for reception\
    \ of CR, RJ \n           or DR TPDU.  In this case:\n           - Reception of\
    \ CR will cause the transport \n             entity to retransmit CC.\n      \
    \     - Reception of RJ will cause the transport \n             entity to transmit\
    \ an RJ with a YR-TU-NR \n             equal to zero and enter the data phase.\n\
    \           - Reception of a DR will cause termination \n             of the transport\
    \ connection as for Classes 1 \n             and 2 (see 7.1.4).\n7.3.5   Data\
    \ Transfer Procedures for Class 3\n7.3.5.1  Acknowledgement\n        The 'AK'\
    \ variant of the Retention until \nAcknowledgement of TPDUs function is used.\n\
    7.3.5.2  Retransmission Procedure\ntransport reject condition is signalled to\
    \ the remote transport \nentity by transmission of an RJ TPDU whose YR-TU-NR field\
    \ indicates \nthe sequence number of the next expected Data TPDU.\n        On\
    \ receipt of a RJ TPDU, a Transport entity shall \naccept credit to the value\
    \ contained in the credit field and shall \nre-transmit TPDUs, starting with the\
    \ one whose number is specified in \nthe YR-TU-NR field of the received RJ TPDU,\
    \ subject to the new \ncredit.\n        The transport entity shall not specify\
    \ a T(R) in the \nRJ TPDU less than that which has previously been acknowledged.\
    \  \nReceipt of an RJ TPDU with a T(R) which has been previously\nacknowledged\
    \ will be considered a protocol error.\n        Additional DT TPDUs pending initial\
    \ transmission may \nfollow the retransmitted DT TPDU(s) if the window is not\
    \ closed.\n7.3.5.3  Reducing the upper window edge\n        It is possible to\
    \ decrease the value of the upper \nwindow edge down to the sequence number transported\
    \ by YR-TU-NR \nfield of the RJ TPDU.  Receipt of an DT TPDU which would have\
    \ been \ninside the window before the reduction is not a protocol error and \n\
    this TPDU may be discarded.\n        Note:  In such a case the credit equal to\
    \ zero  \nachieves the effect of a Receive not Ready Condition.\n7.3.5.4  Behaviour\
    \ after an error signalled by the network layer\n        After receiving an error\
    \ indication from the Network \nService, the transport entity shall tranmit to\
    \ the remove entity an \nRJ TPDU with YR-TU-NR field indicating the sequence number\
    \ of the \nnext expected Data TPDU.\n7.3.5.5  Procedure for Expedited Data Transfer\n\
    \        In Class 3, the ED TPDU-NR field of the Expedited \nData (ED) TPDU contains\
    \ an identification number.  This number must \nbe different for successive ED\
    \ TPDUs.  That is, when an ED TPDU has \nbeen sent and an EA TPDU for the ED TPDU\
    \ has been received, the next \nED TPDU must have a different value in the NR\
    \ field of the ED \nTPDU.  No other significance is attached to this field.  It\
    \ is \nrecommended, however, that the values used be consecutive modulo \n2**n.\
    \  When a transport entity receives an ED TPDU for a transport \nconnection, it\
    \ shall respond by transmitting an expedited \nthe NR field of the received ED\
    \ TPDU.  If, and only if, this value \nis different from the NR field of the previously\
    \ received ED TPDU, \nthe data contained in the TPDU is to be passed to the session\
    \ entity.\n        If an error indication from the Network layer is \nreceived\
    \ before the receipt of the expected Expedited Acknowledgement \n(EA) TPDU, the\
    \ transport entity shall retransmit the ED TPDU with \nthe same value in the NR\
    \ field.  By the rule described in the \nprevious paragraph, the session entity\
    \ does not receive data \ncorresponding to the same expedited TPDU more than once.\n\
    7.3.6   Release Procedures for Class 3\n        The rules for Class 2 apply with\
    \ the addition of the  \nfollowing rule:\n        Receipt of an eror indication\
    \ by a transport entity, \nwhich prior to this event has sent a DR, causes this\
    \ transport \nentity to retransmit DR.  Only DC and DR will be accepted and \n\
    interpreted as the completion of the connection clearing sequence.  \nThe related\
    \ Reference will become unassigned.\n7.3.7   Treatment of Invalid TPDUs\n    \
    \    The 'Treatment of Protocol Errors' mechanism is used.\n7.3.8   Supported\
    \ Options\n        Extended formats.\n7.4     PROTOCOL DESCRIPTION OF CLASS 4:\
    \ ERROR DETECTION AND RECOVERY CLASS\n7.4.1   Characteristics of Class 4\n   \
    \     The characteristic of Class 4, in addition to those of \nClass 3, is the\
    \ detection of errors which occur as a result of the \nlow grade of service available\
    \ from the network layer.  The kinds of \nerrors to be detected include:  TPDU\
    \ loss, TPDU delivery out of \nsequence, TPDU duplication.  These errors may afect\
    \ control TPDUs as \nwell as Data TPDUs.\n        Class 4 has been designed to\
    \ be usd in association \nwith network connections of type C.\n7.4.2   Functions\
    \ of Class 4\n        This class provides the functionality of Class 3, plus \n\
    \        This detection of errors is made by extended use of \nthe sequence numbering\
    \ of Classes 2 and 3, by a timeout mechanism, \nand by additional protocol mechanisms.\n\
    \        This class additionally detects and recovers from \ndamaged TPDUs by\
    \ using a checksum mechamism.  The use of the \nchecksum mechanism must be available\
    \ but its use or its non use is \nsubject to negotiation.  Class 4 does not attempt\
    \ to deal with \ndetection of errors due to the misdelivery of TPDUs.\n7.4.3 \
    \  Protocol Mechanisms of Class 4\n7.4.3.1  Network Service Data Unit Lifetime\n\
    \        The network layer is assumed to provide, as an aspect \nof its grade\
    \ of service, for a bound on the maximum lifetime of \nNSDUs in the network. \
    \ This value is known by the Transport Layer.  \nThe maximum time which may elapse\
    \ between the transmission of an \nNSDU into the network layer and the receipt\
    \ of any copy of it is \nreferred to as M.\n7.4.3.2  Average Transit Delay\n \
    \       It is assumed that there is some value of transmit \ndelay in the network,\
    \ typically much less than M, which will be the \nmaximum delay suffered by all\
    \ but a small proportion of NSDUs.  This  \nvalue is referred to as E.\n7.4.3.3\
    \  Remote Acknowledge Time Assumptions\n        Any transport entity is assumed\
    \ to provide a bound for the \nmaximum time which can elapse between its receipt\
    \ of a TPDU from\nthe Network Layer and its transmisssion of the Corresponding\
    \ response.\nthis value is referred to as A/L.  The corresponding time given by\
    \ the \nremote transport entity is referred to as A/R.  The values for these\n\
    timers may be conventionally established or may be established\nat connection\
    \ establishment time.  \n7.4.3.4  Local Retransmission Time\n        The local\
    \ transport entity is assumed to maintain a \nbound on the time it will wait for\
    \ an acknowledgement before \nretransmitting the TPDU.  This time is the local\
    \ retransmission time \nand is referred to as T1.\n                  T1 = 2*E\
    \ +  X  + Ar?\n7.4.3.5  Persistence Time\n        The local transport entity is\
    \ assumed to provide a \nbound for the maximum time for which it may continue\
    \ to retransmit \na TPDU requiring positive acknowledgment.  This value is referred\
    \ to \nas R.\n        The value is clearly related to the time elapsed \nbetween\
    \ retransmission, T1, and the maximum number of \nretransmissions, N.  It is not\
    \ less than T1*N+X, where X is small \nquantity to allow for additional internal\
    \ delays, the granularity of \nthe mechanism used to implement T1 and so on. \
    \ Because R is a bound, \nthe exact value of X is unimportant as long as it is\
    \ bounded and \nthe value of a bound is known.\n7.4.3.6  Bound on Reference Identifier\
    \ and Sequence Numbers\n        Using the above values, a bound L may be established\
    \ \nfor the maximum time between the decision to transmit a TPDU and the \nreceipt\
    \ of any response relating to it.  The value of L is given by:\n             \
    \     L = 2*M+R+Ar\n        It is necessary to wait for a period L before reusing\
    \ \nany reference or sequence number, to avoid confusion in case a TPDU \nreferring\
    \ to it may be duplicated or delayed.\n        (Note:  In practive, the value\
    \ of L may be \nunacceptably large.  It may also be only a statistical figure\
    \ at a \ncertain confidence level.  A smaller value may therefore be used \nwhere\
    \ this still allows the required quality of service to be \nprovided).\n7.4.3.7\
    \  Inactivity Time\n        To protect against unsignalled breaks in the network\
    \ \nconnection (Half-open connections), each transport entity maintains \nan inactivity\
    \ time interval.   If the interval passes without \nreceipt of some TPDU, the\
    \ transport entity will terminate the TC by \nmaking use of the release procedure.\
    \  This interval is referred to \nas I.\n7.4.3.8  Window Time\n        A transport\
    \ entity maintains a time to ensure that \nthere is a maximum interval between\
    \ transmission of up-to-date \nwindow information.  This interval is referred\
    \ to as the window \n        In class 4, the transport entity associates a response\
    \ time\nwith TPDUs sent requiring a response.  If an appropriate response is \n\
    not received within time T1, the recovery procedure must be invoked\nby the sender.\
    \  This will usually involve the retransmission of the \ncorresponding TPDU. \
    \ \n        A TPDU may be transmitted a maximum number of times,  \nThis number\
    \ is referred to a N.  The value of N is chosen so that \nthe required quality\
    \ of service can be provided given the known \ncharacteristics of the network\
    \ connection.\n7.4.3.10  Relationship of Times and Intervals\n        The following\
    \ note describes the relationship between \nthe time described in Section 7.4.3.1\
    \ - 7.4.3.9.\n        Note:\n             a.   The interrelationship of times\
    \ for the worst case \n                  is as follows:\n                  M:\
    \   maximum transit delay of the network (see \n                       7.4.3.1)\n\
    \                  Ar  maximum acknowledgement time of the remote \n         \
    \              transport entity (see 7.4.3.3)\n                  R:   maximum\
    \ local retransmission time (see \n                       7.4.3.5)\n         \
    \         N:   maximum number of transmission for a single \n                \
    \       TPDU (see 7.4.3.9)\n                  L:   maximum time for a TPDU to\
    \ be valid (see \n                       7.4.3.6)\n                          \
    \                   R = T * (N-1)\n                                          \
    \        1\n                            R\n                            *\n   \
    \                         M\n             L              *\n                 \
    \           A                =2*M  +  A   + R\n                             R\
    \                         R\n                                 t      t\n     \
    \        b.   The interrelationship of times for the average \n              \
    \    case is as follows (see 7.4.3.4)\n                  E:        average transit\
    \ delay for the network \n                            (E<<M)\n               \
    \   X:        TPDU processing time\n                  T :       average time from\
    \ sending a TPDU until \n                   1        the receipt of its acknowledgement\
    \ (see \n                            7.4.3.4)\n                  A :       maximum\
    \ acknowledgement time of the \n                   R        remote transport entity\
    \ (see 7.4.3.3)\n                         X\n                         E\n    \
    \                     A         T  = 2*E + X + A\n                          R\
    \         1              R\n                         E\nt                t\n7.4.3.11\
    \  Sequence Numbering\n        In Class 4 sequence numbering is applied to certain\
    \ \ncontrol TPDUs and their acknowledgements, as well as to DT TPDUs.  \nThese\
    \ are ED and its acknowledgement EA.\n        The length of sequence numbers may\
    \ be negotiated at \nconnection establishment.  Where other than the default length\
    \ is \nused, an extended header format is used for sequenced TPDUs \ncontaining\
    \ additional octets of sequence numbers.  Extended header \nformat includes a\
    \ credit field on the appropriate TPDU types \nallowing extended credit allocation.\n\
    7.4.4   Procedures for Connection Establishment Phase\n        The following features\
    \ pertain to connection \nestablishment for Class 4:\n        o  In Class 4, a\
    \ connection is not considered \n           TPDU by immediately sending a DT,\
    \ ED or AK TPDU.\n        o  As a result of duplication, a CR TPDU may be \n \
    \          received specifying a source reference which \n           is already\
    \ in use with the sending transport \n           entity.  If the receiving transport\
    \ entity \n           is in the data transfer phase, having \n           completed\
    \ the 3-way TPDU exchange procedure, \n           the receiving transport entity\
    \ should ignore \n           such a TPDU.  Otherwise a CC TPDU should be \n  \
    \         transmitted.\n        o  As a result of duplication or \n          \
    \ retransmission, a CC TPDU may be received \n           specifying a paired reference\
    \ which is \n           already in use.  The receiving transport \n          \
    \ entity should ignore such a CC TPDU.\n        o  A CC TPDU may be received specifying\
    \ a \n           reference which is in the frozen state.  The \n           response\
    \ to such a TPDU should be a DR TPDU.\n7.4.4.1  Connection Request\n        When\
    \ a transport entity transmits a CR TPDU it starts \ntimer T1.  If this timer\
    \ expires before a CC TPDU is received, the \nCR TPDU is retransmitted and the\
    \ timer restarted.  After \ntransmission of the CR TPDU N times, the connection\
    \ establishment \nprocedure is abandoned and the failure reported to the transport\
    \ \nuser.  The reference must be placed in the frozen state for a period \nL (see\
    \ section 7.4.3.6).\n7.4.4.2  Incomimg Connection Request\n        An incoming\
    \ connection request is processed as for Class 3\n7.4.4.3  Connection Confirm\n\
    \        When a transport entity transmits a CC TPDU it starts \ntimer T1.  If\
    \ this timer expires before an AK or DT TPDU is \nreceived, the CC TPDU is retransmitted\
    \ according to the \nretransmission principles in Section 7.4.3.9\n7.4.4.4  Incoming\
    \ Connection Confirm\n        When a CC TPDU is received, the receiving transport\
    \ entity\nenters the data transfer phase.  It must immediately transmit an\n7.4.4.5\
    \  Incoming Acknowledgement\n        When an AK, DT or ED TPDU is received the\
    \ receiving \ntransport entity can enter the data transfer phase.  If the entity\
    \ \nhas data to send it may send DT TPDUs or an ED TPDU.  The DT TPDUs \nare subject\
    \ to flow control.  Otherwise, the transport entity must \nobey the inactivity\
    \ principles (see Section 7.4.5.8).\n7.4.4.6  Unsuccessful Connection\n      \
    \  When a DR TPDU is received in response to a CR TPDU, \nthe timer T1 is cancelled\
    \ and the reference placed in the frozen \nstate for a period L (see Section 7.4.6.1).\n\
    7.4.4.7  Initial Credit Allocation\n        The CR and CC TPDUs may allocate an\
    \ initial credit value \nto their respective recipients.  This value is limited\
    \ to 15 by the \nencoding of the TPDU.  Where the extended header format is in\
    \ use, \ncredit values greater than 15 must be allocated using AK TPDUs.\n7.4.4.8\
    \  Exchange of Acknowledge Time\n        A transport entity may transmit the value\
    \ it intends \nto use for AL at connection establishment, as the 'Acknowledge\
    \ \nTime' parameter in the CR or CC TPDU (depending on whether the \ntransport\
    \ entity is initiating or accepting the transport \nconnection).  If this parameter\
    \ is present in a received CR or CC \nTPDU, the value of AR should be set accordingly.\
    \  If this \nparameter is not present, AR may be assumed to be insignificant in\
    \ \ncomparison to E the typical maximum transit delay.\n7.4.5   Procedure for\
    \ Data Transfer Phase\n7.4.5.1  Sequence Control\n        The receiving transport\
    \ entity is responsible for \nmaintaining the proper sequence of DT TPDUs.\n \
    \       DT TPDUs received out of sequence must not be \ndelivered to the TS-user\
    \ until in-sequence TPDUs have also been \nreceived.\n        AK TPDUs also contain\
    \ information allowing the \nreceiving transport entity to process them in the\
    \ correct order.\n7.4.5.2  Duplicate DT TPDUs\nreused for the period L after their\
    \ previous use.  Otherwise, a  \nnew, valid TPDU could be confused with a duplicated\
    \ TPDU which had \npreviously been received and acknowledged.\n        Duplicated\
    \ DT TPDUs must be acknowledged, since the \nduplicated TPDU may be the result\
    \ of a retransmission resulting from \nthe loss of an AK TPDU.\n        The data\
    \ contained in a duplicated DT TPDU should be\nignored.\n7.4.5.3  Retransmission\
    \ Principles\n        When a transport entity has some outstanding DT or ED \n\
    TPDUs that require acknowledgement, it will check that no T1 \ninterval elapses\
    \ without the arrival of an AK or EA TPDU that \nacknowledges one of them.  If\
    \ the timer expires, the first TPDU is \nretransmitted and the timer is restarted.\
    \  After N transmissions \n(N-1 retransmissions) the connection is assumed to\
    \ have failed and \nthe release phase is entered, and the transport user is informed.\n\
    \        DT TPDUs which fall beyond the current window (due to \nreduction of\
    \ the upper window edge) are not retransmitted until \nadvancement of the upper\
    \ window edge so permits.\n     Note:     This requirement can be met by different\
    \ \n                       means, for example.\n             1.   One timer is\
    \ associated with each TPDU.  If the \n                  timer expires, the associated\
    \ TPDU will be \n                  retransmitted, and the timer T1 will be \n\
    \                  restarted for all subsequent DT TPDUs.\n             2.   One\
    \ timer is associated with each TC:\n                  if the transport entity\
    \ transmits a DT TPDU \n                  requiring acknowledgement, it starts\
    \ timer \n                  T1,\n                  if the transport entity receives\
    \ a TPDU that \n                  acknowledges one of the TPDUs to be \n     \
    \             acknowledged, timer T1 is restarted,\n                  if the transport\
    \ entity receives a TPDU that \n                  acknowledges the last TPDU to\
    \ be \n                  acknowledged, timer T1 is stopped.\n7.4.5.4  Acknowledgement\
    \ Principles\n        A transport entity operating class 4 must acknowledge \n\
    all TPDUs received requiring acknowledgment.  To avoid unnecessary \nretransmissions\
    \ and to avoid delays to transmission by the remote \ntransport entity, the delay\
    \ for acknowledgement should not exceed \ntimer A  (see Section 7.4.3.2).\n  \
    \     L\n        There are two TPDU types that must be acknowledged:  \nED and\
    \ DT.  Receipt of an ED TPDU must be acknowledged by an EA \nTPDU.  A DT TPDU\
    \ is acknowledged with an AK TPDU.\n        An AK TPDU has the sequence number\
    \ of the next DT \nTPDU the receiving transport entity expects to receive.  It\
    \ thus \nacknowledges receipt of all DT TPDUs with sequence numbers less than\
    \ \nthe acknowledgement number.\n        An AK TPDU may be repeated at any time,\
    \ using the \nsequence number in the last AK TPDU sent.\n7.4.5.5  Flow Control\
    \ Principles\n        Flow control in Class 4 is subject to the same \nprinciples\
    \ as in Classes 2 and 3.  The credit mechanism and window \nprinciple of those\
    \ classes still apply, except that in class 4, the \nupper window edge can be\
    \ reduced by the receiving transport entity \nby sending an AK TPDU with a smaller\
    \ credit.\n        A receiving transport entity may send an AK TPDU at \nany time\
    \ to change the window size.  This AK TPDU may acknowledge a \nnew DT TPDU or\
    \ may repeat a previous acknowledgement.\n7.4.5.6  Window Synchronization Principles\n\
    \        To ensure the synchronization of flow control \ninformation the window\
    \ timer provokes the frequent exchange of AK \nTPDUs between transport entities.\
    \  The window timer maintains a \nminimum level of TPDU traffic between transport\
    \ entities cooperating \nin a transport connection.\n        In Class 4 the window\
    \ size can be reduced in any AK \nTPDU.  Due to the possibility of misordering\
    \ of AK TPDUs and the\nassociated loss of efficiency, the AK TPDU for class 4\
    \ \nincludes an additional field called the AK TPDU  subsequence \nparameter.\n\
    set to one for the first time the AK TPDU is resent with reduced \ncredit.\n \
    \       When an AK TPDU is transmitted whose sequence \nnumber is increased, the\
    \ 'sub-sequence' parameter is omitted \nuntil credit reduction takes place.\n\
    \        When an AK TPDU is received, it must be processed \n(i.e., its contents\
    \ made use of) only if:\n        o  The sequence number is greater than in any\n\
    \           previously received AK TPDU, or,\n        o  The sequence number is\
    \ equal to the highest \n           in any previously received AK TPDU, and the\
    \ \n           sub-sequence parameter is greater than in \n           any previously\
    \ received AK TPDU having the\n           same sequence number (where an \n  \
    \         absent sub-sequence parameter is regarded \n           as having a value\
    \ of zero), or\n        o  The sequence number and sub-sequence \n           parameter\
    \ are both equal to the highest in \n           any previously received AK TPDU\
    \ (where an \n           absent sub-sequence parameter is regarded as \n     \
    \      having a value of zero), and the credit \n           field is greater than\
    \ in any previously \n           received AK TPDU having the same sequence \n\
    \           and sub-sequence numbers. \n        When an AK TPDU is transmitted\
    \ which opens a closed \nwindow (i.e. increases credit from zero), it should be\
    \ retransmitted \nat an interval of T1.  Transmission should occur a maximum of\
    \ N \ntimes, after which the usual inactivity retransmission timer should \nbe\
    \ reverted to.  Retransmission may also cease if the local \ntransport entity\
    \ becomes sure that the new credit information has \nbeen received by the remote\
    \ transport entity.\n        If a transport entity receives an AK TPDU containing\
    \ \na 'Flow Control Confirmation' parameter, whose Lower Window Edge and \nYour-Sub-Sequence\
    \ fields are equal to its own lower window edge and \nsub-sequence number, it\
    \ may note that the credit available at the \nremote transport entity (relative\
    \ the Lower Window Edge field) is at \nleast equal to the value conveyed as Your\
    \ Credit.  This enables the \ntransport entity to cease the frequent retransmission\
    \ of window \ninformation, if it thereby knows that the remote window is open.\n\
    has sufficient credit to prevent deadlock.  When an AK TPDU is \ntransmitted in\
    \ response to a DT TPDU, the transport entity may \nnormally assume that the transmitter\
    \ of the DT TPDU will ensure that \nthe AK TPDU is received, be retransmission\
    \ of the DT TPDU if \nnecessary.  Therefore, it can normally be assumed that the\
    \ credit \nconveyed in such an AK TPDU will be available to the remote \ntransport\
    \ entity, and frequent retransmission is unnecessary.\n        The assumption\
    \ that the DT TPDU will be retransmitted \nmay be incorrect if credit reduction\
    \ has taken place.  Therefore, a \ntransport entity may not make this assumption\
    \ if the \nsequence number of the DT TPDU is less than or equal to the highest\
    \ \nvalue for which permission to transmit (i.e., credit) has been given \nand\
    \ subsequently withdrawn.\n        Upon receipt of an AK TPDU which increases\
    \ the upper \nwindow edge, a transport entity may transmit an AK TPDU which \n\
    repeats the information contained in the received TPDU in a 'Flow \nControl Confirmation'\
    \ parameter in its variable part an thereby \nassures the transmitter of the original\
    \ AK TPDU of its own state.  \nSuch an AK TPDU may be tranmmitted:\n        o\
    \  Upon receipt of a duplicated AK TPDU \n           (i.e., one which is identical\
    \ in all fields, \n           including the sub-sequence parameter if \n     \
    \      present, to the most recently received AK \n           TPDU which was not\
    \ discarded due to \n           detection of a sequence error), not \n       \
    \    containing the 'Flow Control Confirmation' \n           parameter.\n    \
    \    o  Upon receipt of an AK TPDU which increases \n           the upper window\
    \ edge but does not increase \n           the lower window edge, when the upper\
    \ window \n           edge was formerly equal to the lower window \n         \
    \  edge.\n7.4.5.7  Procedure for Expedited Data\n        The procedure for expedited\
    \ data is as for Class 3, \nwith the following exceptions.\n        The ED TPDU\
    \ has a sequence number which is allocated \nfrom a separate sequence space from\
    \ that of the DT TPDUs.  The EA \nTPDU carries the same sequence number as the\
    \ corresponding ED TPDU.  \nOnly a single ED TPDU may be transmitted and awaiting\
    \ \nacknowledgements at any time.\nTPDU sequence number is recorded in an EA TPDU\
    \ sent to the other \ntransport entity.\n        The sender of an ED TPDU shall\
    \ not send any new DT \nTPDU with higher T(S) until it receives the EA TPDU. \
    \ This \nguarantees the arrival of the ED TPDU before any subsequently sent \n\
    DT TPDUs.\n7.4.5.8  Inactivity Principles\n        If the Inactivity Time I passes\
    \ without receipt of \nsome TPDU, the transport entity will terminate the TC by\
    \ making use \nof the release procedure.  To present expiration of the remote\
    \ \ntransport entity's inactivity times when no data is being sent, the \nlocal\
    \ transport entity must send AK TPDUs at suitable intervals in \nthe absence of\
    \ data, having regard to the probability of TPDU loss.   \nThe Window Synchronization\
    \ Principles (see 7.4.5.6) may ensure that \nthis requirement is met.\n      \
    \  Note: It is likely that the release procedure \ninitiated due to inactivity\
    \ timer expiration will fail, as such \nexpiration indicates probable failure\
    \ of the supporting NC or of the \nremote transport entity.  This case is described\
    \ in Section 7.4.6.\n7.4.6   Procedures for Release Phase\n        The rules for\
    \ class 3 apply.  The DR TPDU is subject \nto the usual retransmission procedure.\
    \  After N retransmissions, the \ntransport connection is considered disconnected,\
    \ the Reference is \nplaced in the frozen state for a period L and retransmission\
    \ ceases.\n        The DC TPDU is sent only in response to a DR TPDU, and \nis\
    \ not subject to the retransmission procedure.\n        The DC TPDU when received\
    \ allows the transport entity \nto release all resources maintained for the transport\
    \ connection.\n        The DR TPDU does not carry a sequence number.  Any \npreviously\
    \ transmitted TPDUs (including DT and ED) which are \nreceived after the DR TPDU\
    \ result in a further DR TPDU but are \notherwise ignored.  After disconnection,\
    \ for whatever reason, the \nReference is placed in the frozen state for a period\
    \ L.\n7.4.6.1  Unassigned Frozen References\n        When a transport connection\
    \ is terminated, the \ncorresponding references cannot be immediately reused since\
    \ TPDUs \n        After an event involving loss of transport entity \nstate information,\
    \ including the status of reference assignments, \nall references relating to\
    \ network connections whose transport \nstate information has been lost must be\
    \ placed in the frozen state \nfor a period L.\n        If a DC TPDU is received\
    \ for a local reference which \nis in the frozen state, or with a remore reference\
    \ not matching the \nalready recorded one, this DC TPDU shall be ignored.\n7.4.7\
    \   Treatment of Invalid TPDUs\n        The 'Treatment of Protocol Erorrs' function\
    \ is used.\n7.4.8   Supported Options\n        Non use of checksum.\n        Use\
    \ of extended formats.\n8.      ENCODING\n8.1     Summary\n                  \
    \                  Classes\n                                  0  1  2  3  4  \
    \ Sect.       Code\nCR Connection Request             x  x  x  x  x   8.3    \
    \  1110xxxx\nCC Connection Confirm             x  x  x  x  x   8.4      1101xxxx\n\
    DR Disconnect Request             x  x  x  x  x   8.5      10000000\nDC Disconnect\
    \ Confirm                x  x  x  x   8.6      11000000\nDT Data             \
    \              x  x  x  x  x   8.7      11110000\nED Expedited Data          \
    \          x  NF x  x   8.8      00010000\nAK Data Acknowledgement           \
    \ NRC  NF x  x   8.9      0110xxxx\n    (Note 1)\nEA Expedited Data          \
    \          x  NF x  x   8.10     00100000\n   Acknowledgement\nRJ Reject (Note\
    \ 1)                   x     x      8.11     0101xxxx\nnot available (Note 2)\
    \                             -      00110000\nnot available (Note 2)        \
    \                     -      1001xxxx\nnot available (Note 2)                \
    \             -      1010xxxx\nWhere xxxx (bits 4-1) is used to signal the CDT\n\
    Note 1: In extended header format, the code for AK=0110 0000 and the \n      \
    \  code for RJ=0101 0000.\nNote 2: These codes are already in use in compatible\
    \ protocols \n        defines by standards organizations other than CCITT/ISO.\n\
    NF:     Not available when the non explicit flow control option is \n        selected.\n\
    NRC:    Not available when the receipt confirmation option is \n        selected.\n\
    8.2     Structure\n        As defined in the previous sections, all the Transport\
    \ \nProtocol Data Units (TPDU) shall contain an integral number of \noctets. \
    \ The octets in a TPDU are numbered starting from 1 and \nincreasing in the order\
    \ of transmission.  The bits in an octet are \nnumbered from 1 to 8, where bit\
    \ 1 is the low-ordered bit.\n        There are tao types of TPDUs:\n        o\
    \  Data TPDUs, used to transfer Transport Service \n           Data Units (TSDUs).\
    \  The structure of the TSDUs is \n           maintained by means of the TSDU\
    \ End Mark.\n        o  Control TPDUs, used to control the transport \n      \
    \     protocol functions, including the optional \n           functions.\nOctets\
    \  1  2  3  4           n  n+1          p  p+1\n        ------------      --------------\
    \   --------------   --------   \n        LI|  | |  |  ...    |  |   |    ....\
    \ | |    |   .... |             \n        ------------      --------------   --------------\
    \   --------\n         <--- Fixed Part -----><-- Variable Part->\n           \
    \                        (including checksum   \n                            \
    \        where applicable)\n        o  Length Indicator Field (LI)\n        o\
    \  Fixed Part\n        o  Variable Part (may be omitted)\n        o  Data Field\
    \ (may be omitted)\nThe length Indicator Field, Fixed Part and Variable Part constitute\
    \ \nthe Header of the TPDU.\n8.2.1   Length Indicator Field\n        This field\
    \ is contained in the first octet of the \nTPDUs.  The length is indicated by\
    \ a binary number, with a maximum \nvalue of 254 (11111110).  The length indicated\
    \ is the header length, \nincluding parameters, but excluding the length indicator\
    \ field and \nuser data, if any.  The value 255 (11111111) is reserved for \n\
    possible extensions.\n8.2.2   Fixed Part\n        The fixed part contains frequently\
    \ occurring functions \nincluding the code of the TPDU.  The length and the structure\
    \ of the \nfixed part are defined by the TPDU code, defined by bits 5 to 8 of\
    \ \nthe second octet of the header.\n8.2.2.1  TPDU Code\n        This field contains\
    \ the TPDU code and is contained in \nOctet 2 of the header.  It is used to define\
    \ the structure of the\nremaining header.  This field is a full octet except in\
    \ the \nfollowing cases:\n             1110 xxxx      Connecting Request\n   \
    \          1101 xxxx      Connection Confirm\n             0101 xxxx      Reject\n\
    \             0110 xxxx      Data Acknowledgement\n        Where xxxx (bits 4-1)\
    \ is used to signal the CDT.\n        Any other bit pattern may be used to define\
    \ a TPDU Code.\n        Only those codes defined in Section 8.1 are currently\
    \ valid.\n8.2.3   Variable Part\n        The variable part is used to define parameters\
    \ \nthe variable part which is a LI minus the length of the fixed part.\n    \
    \    Since the currently defined minimum fixed part for \nheaders which allow\
    \ parameters is four octets, and since the length \nindication field is limited\
    \ to a maximum of 254, the maximum length \nof the variable part is 250 octets.\n\
    \        Each parameter contained within the variable part is \ncoded as follows:\n\
    \                      Bits 8   7   6   5   4   3   2   1\n        Octets\n  \
    \      n+1                            Parameter Code\n        n+2            \
    \                Parameter Length \n                                        Indication\
    \ (e.g.\"m\")\n        n+3                            Parameter Value\n      \
    \  n+2+m\n        o       The parameter code field is coded in binary and, \n\
    \                without extensions, provides a maximum number of \n         \
    \       255 different parameters.  However, as noted below, \n               \
    \ bits 8 and 7 indicates the source of definition, \n                so the practical\
    \ maximum number of different \n                parameters is less.  Parameter\
    \ code 1111 1111 is \n                reserved for possible extensions of the\
    \ parameter code.\n        o       The parameter length indication indicates the\
    \ length, \n                in octets, of the parameter value field.  The length\n\
    \                is indicated by a binary number, \"m\" with a theoretical \n\
    \                maximum value of 255.  The practical maximum value of \n    \
    \            \"m\" is lower.  For example, in the case of a single parameter \n\
    \                contained within the variable part, two octets \n           \
    \     are required for the Parameter Code and the Parameter Length \n        \
    \        Indication itself.  Thus, the value of \"m\"  is limited \n         \
    \       to 248.  For larger fixed parts of the header and for \n             \
    \   each succeedimg parameter, the maximum value of \"m\" decreases.\n       \
    \ o       The parameter value field contains the value of the \n             \
    \   parameter identified in the parameter code field.\n        o       No standard\
    \ parameter codes use bits 8 and 7 with the \n                value 00.\n    \
    \    o       Implementations shall accept the parameters defined in \n       \
    \         the variable part in any order.  If any parameter is \n            \
    \    duplicated then the later value will be used.\n        All TPDU types may\
    \ contain a checksum parameter in \ntheir variable part.  This parameter must\
    \ always be present except \nwhen the non use of checksum option is selected.\n\
    \             Parameter Code:     1100 0011\n             Parameter Length:  \
    \    2\n             Parameter Value:    Result of checksum algorithm.      \n\
    \                                 This algorithm is specified in \n          \
    \                       Section 6.18.\n8.2.4   Data Field      This field contains\
    \ transparent user data.  \nRestrictions on its size are noted for each command.\n\
    8.3     Connections Request (CR)\n8.3.1   Structure\n        1     2         3\
    \        4     5    6     7     8     p   p+1\n        LI  CR  CDT 00000000 00000000\
    \ SOURCE-   class  VARIABLE  USER DATA\n                                     \
    \ REFERENCE options   PART\n8.3.2   LI\n        See Section  8.2.1\n8.3.3   Fixed\
    \ Part (Octets 2 to 7)\n             CR:       Connection Request Code:      1110\n\
    \             CDT:      Initial Credit Allocation (set to 0000 in    \n      \
    \                 Classes 0 and 1 when specified as preferred class).\n      \
    \       SOURCE REFERENCE:        Reference selected by the transport \n      \
    \                                entity initiating the CR TPDU to \n         \
    \                             identify the requested TC.\n             CLASSES:\
    \   Bits 8-5 octer 7 defines the preferred Transport \n                      \
    \  Protocol class to be operated over the requested \n                       \
    \ TC.  This field may take on one of the following \n                        values.\n\
    \                                 0000           Class 0\n                   \
    \              0001           Class 1\n                                 0010 \
    \          Class 2\n                                 0011           Class 3\n\
    \                                 0100           Class 4\n        Bits 4-1 of\
    \ octet 7 are reserved for options to be \nused on the requested transport connection.\n\
    \        The use of bits 4-1 is as follows:\n                  BIT           \
    \ OPTION\n                  4              0    always\n                  3  \
    \            0    always\n                  2              =0   use of normal\
    \ formats\n                                 =1   use of extended formats\n   \
    \               1              =0   use of explicit flow control \n          \
    \                            in Class 2\n                                 =1 \
    \  no use of explicit flow \n                                      control in\
    \ Class 2\n        Note:\n        1.  It is not valid to request 'use of expedited\
    \ data \n            transfer' (Additional option parameter) and no use of \n\
    \            explicit flow control in Class 2' (bit 1 = 1).\n        2.  Bits\
    \ 4 to 1 are always zero in Class 0 and have \n            no meaning.\n8.3.4\
    \   Variable Part (Octets 8 to p)\n        The following parameters are permitted\
    \ in the variable part:\n        o  Transport Service Access Point Identifier\
    \ (TSAP-ID)\n           Parameter code 11000001 for the identifier of the Calling\
    \ TSAP.\n           11000010 for the identifier of the Called TSAP.\n        If\
    \ a TSPA-ID is given in the request it may be \nreturned in the confirmation.\n\
    \        o  TPDU size\n        This parameter defines the proposed maximum TPDU\
    \ size \n(in octets including the header) to be used over the requested \ntransport\
    \ connection.  The coding of this parameter is:\n        Parameter value field\n\
    \        00001101  8192 octets (not allowed in Class 0 of 1)\n        00001100\
    \  4096 octets (not allowed in Class 0 of 1)\n        00001011  2048 octets\n\
    \        00001010  1024 octets\n        00001001  512 octets\n        00001000\
    \  256 octets\n        00000111  128 octets\n        Default value is 00000111\
    \ (128 octets)\n        Version Number (not used in Class 0)\n        Parameter\
    \ code 11000100\n        Parameter value field 00000001\n        Default value\
    \ 00000001\n        Default value 00000001 (not used in Class 0)\n       o Security\
    \ Parameter (not used in Class 0)\n         This parameter is user defined.\n\
    \         Parameter code 11000101\n         Parameter value and length field are\
    \ user defined\n       o Checksum (not used in Classes 0 through 3)\n        \
    \     See Section 8.2.3.1\n         This parameter must always be present in a\
    \ CR TPDU  \n         requesting Class 4, even if the checksum selection \n  \
    \       parameter is used to request non-use of the checksum facility.\n     \
    \  o Additional Option Selection (not used in Class 0)\n        This parameter\
    \ defines the selection to be made as to \n        Parameter length:  1\n    \
    \    Parameter value field:\n        Bits related to options particular to one\
    \ class are \n        not meaningful and may take any value in the other classes.\n\
    \             BITS                OPTION\n             4    1=   Use of network\
    \ expedited in Class 1\n                  0=   Non use of network expedited in\
    \ Class 1\n             3    1=   Use of receipt confirmation in Class 1\n   \
    \               0=   Use of explicit AK variant in Class 1\n             2   \
    \ 0=   Checksums are to be used in Class 4\n                  1=   Checksums are\
    \ not to be used in Class 4\n             1    1=   Use of transport expedited\
    \ data transfer \n                       service\n                  0=   No use\
    \ of transport expedited data transfer \n                       service\n    \
    \         Default falue is 00000001\n        o Alternative protocol class (not\
    \ used in Class 0)\n             Parameter code 11000111\n             Parameter\
    \ length  n\n        Parameter value encoded as a sequence of single \noctets.\
    \  Each octet is encoded as for octet 7 but with bits 4-1 set \nto zero (i.e.,\
    \ no alternative option selections permitted).\n        o  Acknowledge Time\n\
    \        This parameter conveys the maximum acknowledge time \n        AL to the\
    \ remote transport entity.  It is an indication only, and \n        is not subject\
    \ to negotiation (see section 7.4.5.3).\n        Parameter Code 10000101\n   \
    \     Parameter Value field: n a binary number (2 octets)\n        n is the maximum\
    \ acknowledge time, expressed in \n        milliseconds.\n                   \
    \         1st 3 octets   :    Targer value, \n                               \
    \                 calling-called user \n                                     \
    \           direction\n                            2nd 3 octets   :    Min. acceptable,\
    \ \n                                                calling-called  \n       \
    \                                         user direction\n                   \
    \         3rd 3 octets    :   Target value, \n                               \
    \                 called-calling user \n                                     \
    \           direction\n                            4th 3 octets  :     Min. acceptable,\
    \ \n                                                called-calling user \n   \
    \                                             direction\n             Values are\
    \ expressed in octets per second.\n        o Residual          Parameter code:\
    \     10000110\n          error rate\n                            Length     \
    \   :     3\n                            1st octet     :     Target value, power\
    \ \n                                                of 10\n                  \
    \          2nd octet     :     Min. acceptable, \n                           \
    \                     power of 10\n                            3rd octet     :\
    \     TSDU size of \n                                                interest,\
    \ expressed \n                                                as a power of 2\n\
    \        o  Priority         Parameter code:     10000111\n                  \
    \          Length        :     2\n                            Value         :\
    \     Integer\n        o  Transit          Parameter code:     10001000\n    \
    \         delay\n                            Length        :     8\n         \
    \                   1st 2 octets  :     Target value, \n                     \
    \                           calling-called user \n                           \
    \                     direction\n                            3rd 2 octets  : \
    \    Target value, \n                                                called-calling\
    \ user \n                                                direction.\n        \
    \                    4th 2 octets  :     Max. acceptable, \n                 \
    \                               called-calling user \n                       \
    \                         direction\n             Values are expressed in milliseconds.\n\
    8.3.5   User Data (Octets p+1 to the end)\n        No user data are permitted\
    \ in class 0, and are \noptional in the other classes.  Where permitted, it may\
    \ not exceed \n32 octets.\n8.4     Connection Confirm (CC)\n8.4.1   Structure\n\
    \        1     2     3     4     5     6    7    8    p   p+1\n        LI CC \
    \ CDT DST-REF SOURCE-REF  class  VARIABLE  USER DATA\n          1101         \
    \                options  Part             \n8.4.2   LT\n        See Section 8.2.1.\
    \  \n8.4.3   Fixed Part (Octets 2 to 7)\n             CC                     \
    \ :          Connection Confirm \n                                           \
    \     Code:  1101\n             CDT                     :          Initial Credit\
    \ \n                                                Allocation (set to \n    \
    \                                            0000 in Classes 0 \n            \
    \                                    and 1).\n             DST-REFERENCE     \
    \      :          Reference \n                                               \
    \ identifying the \n                                                requested\
    \ transport \n                                                connection at the\
    \ \n                                                remote transport \n      \
    \                                          entity.\n             SOURCE REFERENCE\
    \        :          Reference selected \n                                    \
    \            identify the \n                                                confirmed\
    \ TC.\n             CLASSES                 :          Defines the selected \n\
    \                                                transport protocol class to \n\
    \                                                be operated over the accepted\
    \ \n                                                TC according to the \n   \
    \                                             negotiation rules specified \n \
    \                                               in Section 6.5.\n8.4.4   Variable\
    \ part (Octet 8 to p)\n        See Section 8.3.4\n8.4.5   User Data (Octets p+1\
    \ to the end)\n        See Section 8.3.5\n8.5     Disconnect Request (DR)\n8.5.1\
    \   Structure\nLI  DR        DST-REF   SOURCE-REF    REASON    VARIABLE  USER\
    \ DATA \n   10000000                                       PART              \
    \ \n8.5.2   LI\n             See Section 8.2.1\n8.5.3   Fixed Part (Octets 2 to\
    \ 7)\n        DR                :      Disconnect Request Code:   1000\n     \
    \   DST-REFERENCE     :      Reference identifying the TC at \n              \
    \                   the remote transport entity.\n        SOURCE REFERENCE  :\
    \      Reference identifying the TC at \n                                 the\
    \ transport entity initiating  \n                                 the command.\
    \  Value zero when \n                                 reference is unassigned.\n\
    \        REASON            :      Defines the reason for \n                  \
    \               disconnecting the TC.  This field \n                         \
    \        shall take one of the following \n                                 values:\n\
    \                                 The following values can be used \n        \
    \                         initiated by session entity.\n                     \
    \            128 + 1 - Remote transport entity \n                            \
    \     congestion at connect request time\n                                *128\
    \ + 2 - Connection negotiation failed \n                                (i.e.\
    \ proposed class(es) not supported).\n                                 128 + 3\
    \ - Duplicated connection detected\n                                 128 + 4 -\
    \ Mismatched references\n                                 128 + 5 - Protocol error\n\
    \                                 128 + 6 - Not used\n                       \
    \          128 + 7 - Reference overflow\n                                 128\
    \ + 8 - Connection request refused on this \n                                \
    \ network connection\n                                 128 + 9 - Not used\n  \
    \                               128 + 10 - Header or parameter length invalid\n\
    \             The following values can be used for all classes.\n            \
    \      0 -  Reason not specified\n                  1 -  Congested at TSAP\n \
    \                 *2   Session entity not attached to TSAP\n                 \
    \ *3   Address unknown\n             Note:     Reasons marked with '*' may be\
    \ reported to \n                       the TS-user as 'persistent', other reasons\
    \ \n                       as 'transient'.\n8.5.4   Variable Part (Octets 8 to\
    \ 10)\n        o    A parameter may be provided to allow additional \n       \
    \      information related to the clearing of the connection.\n             Parameter\
    \ code:       11100000\n             Parameter Value Field:  Additional information.\
    \  This \n        o    Checksum (see 8.2.3.1)\n8.5.5   User Data (Octets p+1 to\
    \ the end)\n        Not allowed in class 0,\n        This field may not exceed\
    \ 64 octers and is used \nto carry TS-User data.  The successful transfer of this\
    \ data is not \nguaranteed.\n8.6     Disconnect Confirm (DC)\n        (Not used\
    \ in Class 0)\n8.6.1   Structure\n        1     2         3       4       5  \
    \    6        7        p\n        LI             DST-REFERENCE  SOURCE-REFERENCE\
    \  Variable Part\n           11000000\n8.6.2   LI\n        See Section 8.2.1\n\
    8.6.3   Fixed Part (Octets 2 to 6)\n             DC            :     Disconnect\
    \ Confirm Code:  1100\n             DST-REFERENCE :     See Section 8.3.3\n  \
    \           SOURCE-REFERENCE:   See Section 8.4.3\n8.6.4   Variable Part\n   \
    \          Checksum (see 8.2.3.1)\n8.7     Data (DT)\n8.7.1   Structure\n    \
    \         Normal Format for Class 0 to 1\n        1     2          3         \
    \  4         5\n        LI   DT     E    TPDU-NR    User Data\n           11110000\
    \ 0                        \n                    T                        \n1\
    \        2        3        4          5          6       p     p+1\nLI       \
    \      DST-REFERENCE    E   TPDU-NR   Variable Part  User Data\n   11110000  \
    \                   O\n                                T\n        Extended Format\
    \ for optional use in Classes 2,3 and 4\n        1       2      3       4    \
    \ 5,6,7,8    9        p p+1\n        LI   DT     DST-REFERENCE  E  TPDU-NR  Variable\
    \  User Data\n           11110000                O\n                         \
    \          T\n8.7.2   LI\n        Section 8.2.1\n8.7.3   Fixed Part\n        (Classes\
    \ 0 to 1  : -  Octets  2 to 3; classes 2,3,4 \nnormal format:  Octets 2 to 5;\
    \ classes 2,3,4 extended format: - \nOctets 2 to 8)\n             DT         \
    \    :    Data Transfer Code:  1111\n             DST-REFERENCE  :    See Section\
    \ 8.4.3\n             EOT            :    When set to ONE, indicates that \n \
    \                                the current DT TPDU is the last \n          \
    \                       Data Unit of a complete DT TPDU \n                   \
    \              sequence (End of TSDU).\n             TPDU-NR        :    TPDU\
    \ Send Sequence Number (Zero in \n                                 Class 0), may\
    \ take any value in \n                                 Class 2 without explicit\
    \ flow \n                                 control.\n8.7.4   Variable Part\n  \
    \      Checksum (See 8.2.3.1)\n8.7.5   User Data Field\n        This field contains\
    \ data of the TSDU being transmitted.\nThe length of this field is limited to\
    \ the negotiated TPDU size for \nthis transport connection minus 3 octets in Classes\
    \ 0 and 1,\nand minus 5 octets (normal header format) or \n8.8     Expedited Data\
    \ (ED)\n        (Not used in Class 2 when \"no explicit flow \n         control\"\
    \ option is selected.)\n8.8.1   Structure\n        Normal Format\n     1     \
    \   2      3        4        EOT 5        6     p        p + 1\n     LI      \
    \ ED    DST-REFERENCE     EDTPDU-NR    Variable Part  User Data\n           00010000\
    \                 1.\n        Extended Format\n     1        2        3      4\
    \        EOT 5,6,7,8  9    p          p + 1\n     LI       ED     DST-REFERENCE\
    \       EDTPDU-NR  Variable Part   User Data\n           00010000            \
    \        1.\n8.8.2   LI\n        See Section 8.2.1\n8.8.3   Fixed Part\n     \
    \   (Octets 2 to 5, normal format: 2 to 8, extended format)\n        ED:     \
    \       Expedited Data command code: 0001\n        DST-REFERENCE: Same as Section\
    \ 8.4.3\n        ED TPDU-NR:    Expedited TPDU identification number \n      \
    \                 (Classes 1, 3, and 4; may take any value in \n             \
    \          Class 2).\n8.8.4   Variable Part\n        Checksum (See 8.2.3.1)\n\
    8.8.5   User Data Field\n        This field contains an expedited TSDU.  Up to\
    \ 16 octets.\n8.9     Data Acknowledgement (AK)\n        Flow Control Confirmation\
    \ (class 4 only - optionally used)\n        This parameter contains a copy of\
    \ the information received \nin an AK TPDU, to allow the transmitter of the AK\
    \ TPDU to be certain \nof the state of the receiving transport entity (See Section\
    \ 7.4.5.6).\n        Parameter Code:  100001011\n        Parameter value field\
    \ 64 bits, used as follows:\n        o  Lower Window Edge (32 bits)\n        \
    \   Bit 32 is set to zero, bits 31 to 1 contain the \n           YR-TU-NR value\
    \ of the received AK TPDU.  When normal \n           format is in use, only the\
    \ least significant seven \n           bits (bits 1 to 7) of this field are significant.\n\
    \        o  Your Sub-Sequence (16 bits)\n           Contains the value of the\
    \ sub-sequence parameter of \n           the received AK TPDU, or zero if this\
    \ parameter was \n           not present.\n        o  Your Credit (16 bits)\n\
    \           Contains the value of the CDT field of the received AK \n        \
    \   TPDU.  When normal format is in use, only the least \n           significant\
    \ four bits (bits 1 to 4) of this field are \n           significant.\n8.10  \
    \  Expedited Data Acknowledgement (EA)\n        (Not applicable for Class 0 and\
    \ Class 2 when the no \n        explicit flow control option is selected).\n8.10.1\
    \  Structure\n        Normal Format\n     1       2       3       4         5\
    \               6         p\n     LI      EA      DST-REFERENCE      . YR-TU-NR\
    \     Variable Part\n            00100000                  0.\n        Extended\
    \ Format\n     1      2         3       4          5,6,7,8            9      p\n\
    \     LI     EA        DST-REFERENCE       . YR-TU-NR        Variable Part\n \
    \          00100000                     0.\n        Normal Format\n      1   \
    \    2          3          4         5            6       p\n      LI      AK\
    \ CDT     DST-REFERENCE         . YR-TU-NR  Variable Part\n             0110 \
    \                           0.\n        Extended Format\n     1      2       \
    \  3       4        5,6,7,8       9,10    11    p\n     LI     AK        DST-REFERENCE\
    \     . YR-TU-NR   CDT     Variable Part\n           01100000                \
    \   0.\n8.9.2   LI\n        See Section 8.2.1\n8.9.3   Fixed Part\n        (Octets\
    \ 2 to 5, normal format:  2 to 10, extended format)\n        AK:            Acknowledgement\
    \ command code:  0110\n        CDT:           Credit Value (set to 0 in class\
    \ 1)\n        DST-REFERENCE: Same as Section 8.4.3\n        YR-TU-NR:      Sequence\
    \ number indicating the next expected \n                       DT TPDU number.\n\
    8.9.4   Variable Part\n        Checksum (See 8.2.3.1)\n        Sub-sequence number\
    \ (class 4 only - optionally used).\n        This parameter is used to ensure\
    \ that AK TPDUs are \n        processed in the correct sequence.  If it is absent,\
    \ this is \n        equivalent to transmitting the parameter with a value of zero.\n\
    \        Parameter Code:  100001010\n        Parameter Value: 16-bit sub-sequence\
    \ number.\n8.10.2  LI\n        (Octets 2 to 5, normal format; 2 to 8, extended\
    \ \n        format)\n        EA:            Acknowledgement command code:  0010\n\
    \        DST-REFERENCE: Same as Section 8.4.3\n        YR-TU-NR:      Identification\
    \ of the ED TPDU being \n                       acknowledged.  May take any value\
    \ in Class 2.\n8.10.4  Variable Part\n        Checksum (See 8.2.3.1)\n8.11   \
    \ Reject (RJ)\n        (Not used in Classes 0, 2, and 4)\n8.11.1  Structure\n\
    \        Normal Format\n       1       2        3       4          EOT 5     \
    \     6       p\n       LI      RJ CDT   DST-REFERENCE       . YR-TU-NR    Variable\
    \ Part\n              0101                        0.\n        Extended Format\n\
    \      1        2       3        4          EOT 5,6,7,8    9,10     11      p\n\
    \      LI       RJ      DST-REFERENCE        .  YR-TU-NR   CDT      Variable\n\
    \              0l0l0000                                              Part\n8.11.2\
    \  LI\n        See Section 8.2.1\n8.11.3  Fixed Part\n        (Octets 2 to 5,\
    \ normal format; 2 to 10, extended format)\n        RJ:            Reject Command\
    \ Code:  0101\n        CDT:           Credit Value (set to 0 in class 1)\n   \
    \     DST-REFERENCE: Same as Section 8.4.3\n8.11.4  Variable Part\n        No\
    \ parameters exclusive to this TPDU type.\n8.12    TPDU Error (ERR)\n      1 \
    \        2          3        4        5             6\n      LI        ERR   \
    \     DST-REFERENCE     Reject        Parameters\n               01110000    \
    \                  Cause\n8.12.1  LI\n        See Section 8.2.1\n8.12.2  Fixed\
    \ Part\n        ERR:           TPDU Error Code: 0111\n        DST-REFERENCE: Same\
    \ as Section 8.4.3\n        REJECT CAUSE:  \n                       00000000 \
    \ Reason not specified\n                       00000001  Invalid parameter code\n\
    \                       00000010  Invalid TPDU type\n                       00000011\
    \  Invalid parameter value\n8.12.3  Variable Part (Octets 6 to the end)\n    \
    \    Parameter Code:  1100001\n        Parameter Value Field:\n        Contains\
    \ the bit pattern of the rejected TPDU up to and \nincluding the octet which caused\
    \ the rejection.  This parameter is \nmandatory in Class 0.\n        Checksum\
    \ (See Section 8.2.3.1)\nSECTION THREE - CONFORMANCE\n9.      CONFORMANCE\n  \
    \      Implementations claiming conformance to this standard shall:\n        2.\
    \   If other classes are implemented, the following rules \n             shall\
    \ be observed:\n             a)  If Class 3 or Class 4 is implemented then Class\
    \ 2 \n             must be implemented\n             b)  If Class 1 is implemented\
    \ then Class 0 must be \n             implemented.\n        3.   The following\
    \ table defines the requirements for the \n             implementation of the\
    \ options defined in previous \n             sections:\n                     \
    \                           Class\n                                          \
    \  0     1    2     3    4\n        TPDU with Checksum                 no    no\
    \   no    no    m\n        TPDU without Checksum               m     m    m  \
    \   m    o\n        Expedited Data Transfer            no     m    m     m   \
    \ m\n        No Expedited Data Transfer          m     m    m     m    m\n   \
    \     Flow Control in Class 2            no    no    m    no   no\n        No\
    \ Flow Control in Class 2         no    no    o    no   no\n        7 bits format\
    \ (normal)             m     m    m     m    m\n        31 bits format (extended)\
    \          no    no    o     o    o\n        Use of Receipt Confirmation in  \
    \   no     o   no    no   no\n        Class 1\n        No use of Receipt Confirmation\
    \ in  no     m   no    no   no\n        Class 1\n        Use of Network Expedited\
    \ in Class  no     o   no    no   no\n        1, if T-EXPEDITED DATA necessary\n\
    \        No use of Network Expedited in     no     m   no    no   no\n       \
    \ Class 1, if T-EXPEDITED DATA necessary\n        o  -  optional:     An implementation\
    \ may or may not \n                            provide this user-selected option.\n\
    \        m  -  mandatory:    An implementation must provide for this \n      \
    \                      option\n        no  -               An implementation shall\
    \ not provide \n                            this option.\n             sizes can\
    \ be supported in Classes 1,2,3, or 4, then \n             all permitted TPDU\
    \ sizes between the maximum and 128 \n             octets shall be supported.\n\
    \        5.   Claims of conformance shall state:\n             a)  which class\
    \ of protocol is supported.\n"
