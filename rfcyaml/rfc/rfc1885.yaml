- title: __initial_text__
  contents:
  - "               Internet Control Message Protocol (ICMPv6)\n               for\
    \ the Internet Protocol Version 6 (IPv6)\n                             Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a set of Internet Control Message Protocol\n\
    \   (ICMP) messages for use with version 6 of the Internet Protocol\n   (IPv6).\
    \  The Internet Group Management Protocol (IGMP) messages\n   specified in STD\
    \ 5, RFC 1112 have been merged into ICMP, for IPv6,\n   and are included in this\
    \ document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction........................................3\n\
    \   2. ICMPv6 (ICMP for IPv6)..............................3\n         2.1 Message\
    \ General Format.......................3\n         2.2 Message Source Address\
    \ Determination.........4\n         2.3 Message Checksum Calculation.................5\n\
    \         2.4 Message Processing Rules.....................5\n   3. ICMPv6 Error\
    \ Messages...............................8\n         3.1 Destination Unreachable\
    \ Message..............8\n         3.2 Packet Too Big Message......................10\n\
    \         3.3 Time Exceeded Message.......................11\n         3.4 Parameter\
    \ Problem Message...................12\n   4. ICMPv6 Informational Messages......................14\n\
    \         4.1 Echo Request Message........................14\n         4.2 Echo\
    \ Reply Message..........................15\n         4.3 Group Membership Messages...................17\n\
    \   5. References.........................................19\n   6. Acknowledgements...................................19\n\
    \   7. Security Considerations............................19\n   Authors' Addresses....................................20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Internet Protocol, version 6 (IPv6) is a new version\
    \ of IP.  IPv6\n   uses the Internet Control Message Protocol (ICMP) as defined\
    \ for IPv4\n   [RFC-792], with a number of changes.  The Internet Group Membership\n\
    \   Protocol (IGMP) specified for IPv4 [RFC-1112] has also been revised\n   and\
    \ has been absorbed into ICMP for IPv6. The resulting protocol is\n   called ICMPv6,\
    \ and has an IPv6 Next Header value of 58.\n   This document describes the format\
    \ of a set of control messages used\n   in ICMPv6.  It does not describe the procedures\
    \ for using these\n   messages to achieve functions like Path MTU discovery or\
    \ multicast\n   group membership maintenance; such procedures are described in\
    \ other\n   documents (e.g., [RFC-1112, RFC-1191]).  Other documents may also\n\
    \   introduce additional ICMPv6 message types, such as Neighbor Discovery\n  \
    \ messages [IPv6-DISC], subject to the general rules for ICMPv6\n   messages given\
    \ in section 2 of this document.\n   Terminology defined in the IPv6 specification\
    \ [IPv6] and the IPv6\n   Routing and Addressing specification [IPv6-ADDR] applies\
    \ to this\n   document as well.\n"
- title: 2. ICMPv6 (ICMP for IPv6)
  contents:
  - "2. ICMPv6 (ICMP for IPv6)\n   ICMPv6 is used by IPv6 nodes to report errors encountered\
    \ in\n   processing packets, and to perform other internet-layer functions,\n\
    \   such as diagnostics (ICMPv6 \"ping\") and multicast membership\n   reporting.\
    \  ICMPv6 is an integral part of IPv6 and MUST be fully\n   implemented by every\
    \ IPv6 node.\n"
- title: 2.1 Message General Format
  contents:
  - "2.1 Message General Format\n   ICMPv6 messages are grouped into two classes:\
    \ error messages and\n   informational messages.  Error messages are identified\
    \ as such by\n   having a zero in the high-order bit of their message Type field\n\
    \   values.  Thus, error messages have message Types from 0 to 127;\n   informational\
    \ messages have message Types from 128 to 255.\n   This document defines the message\
    \ formats for the following ICMPv6\n   messages:\n        ICMPv6 error messages:\n\
    \             1    Destination Unreachable      (see section 3.1)\n          \
    \   2    Packet Too Big               (see section 3.2)\n             3    Time\
    \ Exceeded                (see section 3.3)\n             4    Parameter Problem\
    \            (see section 3.4)\n        ICMPv6 informational messages:\n     \
    \        128  Echo Request                 (see section 4.1)\n             129\
    \  Echo Reply                   (see section 4.2)\n             130  Group Membership\
    \ Query       (see section 4.3)\n             131  Group Membership Report   \
    \   (see section 4.3)\n             132  Group Membership Reduction   (see section\
    \ 4.3)\n   Every ICMPv6 message is preceded by an IPv6 header and zero or more\n\
    \   IPv6 extension headers. The ICMPv6 header is identified by a Next\n   Header\
    \ value of 58 in the immediately preceding header.  (NOTE: this\n   is different\
    \ than the value used to identify ICMP for IPv4.)\n   The ICMPv6 messages have\
    \ the following general format:\n       0                   1                \
    \   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +   \
    \                      Message Body                          +\n      |      \
    \                                                         |\n   The type field\
    \ indicates the type of the message. Its value\n   determines the format of the\
    \ remaining data.\n   The code field depends on the message type. It is used to\
    \ create an\n   additional level of message granularity.\n   The checksum field\
    \ is used to detect data corruption in the ICMPv6\n   message and parts of the\
    \ IPv6 header.\n"
- title: 2.2 Message Source Address Determination
  contents:
  - "2.2 Message Source Address Determination\n   A node that sends an ICMPv6 message\
    \ has to determine both the Source\n   and Destination IPv6 Addresses in the IPv6\
    \ header before calculating\n   the checksum.  If the node has more than one unicast\
    \ address, it must\n   choose the Source Address of the message as follows:\n\
    \    (a) If the message is a response to a message sent to one of the\n      \
    \  node's unicast addresses, the Source Address of the reply must\n        be\
    \ that same address.\n    (b) If the message is a response to a message sent to\
    \ a multicast or\n        anycast group in which the node is a member, the Source\
    \ Address\n        of the reply must be a unicast address belonging to the\n \
    \       interface on which the multicast or anycast packet was received.\n   \
    \ (c) If the message is a response to a message sent to an address\n        that\
    \ does not belong to the node, the Source Address should be\n        that unicast\
    \ address belonging to the node that will be most\n        helpful in diagnosing\
    \ the error. For example, if the message is\n        a response to a packet forwarding\
    \ action that cannot complete\n        successfully, the Source Address should\
    \ be a unicast address\n        belonging to the interface on which the packet\
    \ forwarding\n        failed.\n    (d) Otherwise, the node's routing table must\
    \ be examined to\n        determine which interface will be used to transmit the\
    \ message\n        to its destination, and a unicast address belonging to that\n\
    \        interface must be used as the Source Address of the message.\n"
- title: 2.3 Message Checksum Calculation
  contents:
  - "2.3 Message Checksum Calculation\n   The checksum is the 16-bit one's complement\
    \ of the one's complement\n   sum of the entire ICMPv6 message starting with the\
    \ ICMPv6 message\n   type field, prepended with a \"pseudo-header\" of IPv6 header\
    \ fields,\n   as specified in [IPv6, section 8.1].  The Next Header value used\
    \ in\n   the pseudo-header is 58.  (NOTE: the inclusion of a pseudo-header in\n\
    \   the ICMPv6 checksum is a change from IPv4; see [IPv6] for the\n   rationale\
    \ for this change.)\n   For computing the checksum, the checksum field is set\
    \ to zero.\n"
- title: 2.4 Message Processing Rules
  contents:
  - "2.4 Message Processing Rules\n   Implementations MUST observe the following rules\
    \ when processing\n   ICMPv6 messages (from [RFC-1122]):\n    (a) If an ICMPv6\
    \ error message of unknown type is received, it MUST\n        be passed to the\
    \ upper layer.\n    (b) If an ICMPv6 informational message of unknown type is\
    \ received,\n        it MUST be silently discarded.\n    (c) Every ICMPv6 error\
    \ message (type < 128) includes as much of the\n        IPv6 offending (invoking)\
    \ packet (the packet that caused the\n        error) as will fit without making\
    \ the error message packet\n        exceed 576 octets.\n    (d) In those cases\
    \ where the internet-layer protocol is required to\n        pass an ICMPv6 error\
    \ message to the upper-layer protocol, the\n        upper-layer protocol type\
    \ is extracted from the original packet\n        (contained in the body of the\
    \ ICMPv6 error message) and used to\n        select the appropriate upper-layer\
    \ protocol entity to handle the\n        error.\n        If the original packet\
    \ had an unusually large amount of\n        extension headers, it is possible\
    \ that the upper-layer protocol\n        type may not be present in the ICMPv6\
    \ message, due to truncation\n        of the original packet to meet the 576-octet\
    \ limit.  In that\n        case, the error message is silently dropped after any\
    \ IPv6-layer\n        processing.\n    (e) An ICMPv6 error message MUST NOT be\
    \ sent as a result of\n        receiving:\n         (e.1) an ICMPv6 error message,\
    \ or\n         (e.2) a packet destined to an IPv6 multicast address (there are\n\
    \               two exceptions to this rule: (1) the Packet Too Big\n        \
    \       Message - Section 3.2 - to allow Path MTU discovery to\n             \
    \  work for IPv6 multicast, and (2) the Parameter Problem\n               Message,\
    \ Code 2 - Section 3.4 - reporting an unrecognized\n               IPv6 option\
    \ that has the Option Type highest-order two\n               bits set to 10),\
    \ or\n         (e.3) a packet sent as a link-layer multicast, (the exception\n\
    \               from e.2 applies to this case too), or\n         (e.4) a packet\
    \ sent as a link-layer broadcast, (the exception\n               from e.2 applies\
    \ to this case too), or\n         (e.5) a packet whose source address does not\
    \ uniquely identify\n               a single node -- e.g., the IPv6 Unspecified\
    \ Address, an\n               IPv6 multicast address, or an address known by the\
    \ ICMP\n               message sender to be an IPv6 anycast address.\n    (f)\
    \ Finally, to each sender of an erroneous data packet, an IPv6\n        node MUST\
    \ limit the rate of ICMPv6 error messages sent, in order\n        to limit the\
    \ bandwidth and forwarding costs incurred by the\n        error messages when\
    \ a generator of erroneous packets does not\n        respond to those error messages\
    \ by ceasing its transmissions.\n        There are a variety of ways of implementing\
    \ the rate-limiting\n        function, for example:\n         (f.1) Timer-based\
    \ - for example, limiting the rate of\n               transmission of error messages\
    \ to a given source, or to\n               any source, to at most once every T\
    \ milliseconds.\n         (f.2)  Bandwidth-based - for example, limiting the rate\
    \ at\n               which error messages are sent from a particular interface\n\
    \               to some fraction F of the attached link's bandwidth.\n       \
    \ The limit parameters (e.g., T or F in the above examples) MUST\n        be configurable\
    \ for the node, with a conservative default value\n        (e.g., T = 1 second,\
    \ NOT 0 seconds, or F = 2 percent, NOT 100\n        percent).\n   The following\
    \ sections describe the message formats for the above\n   ICMPv6 messages.\n"
- title: 3. ICMPv6 Error Messages
  contents:
  - '3. ICMPv6 Error Messages

    '
- title: 3.1 Destination Unreachable Message
  contents:
  - "3.1 Destination Unreachable Message\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +                as will fit without the ICMPv6 packet          +\n      |\
    \                       exceeding 576 octets                    |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      1\n   Code           0 - no route to destination\n                  1 -\
    \ communication with destination\n                        administratively prohibited\n\
    \                  2 - not a neighbor\n                  3 - address unreachable\n\
    \                  4 - port unreachable\n   Unused         This field is unused\
    \ for all code values.\n                  It must be initialized to zero by the\
    \ sender\n                  and ignored by the receiver.\n   Description\n   A\
    \ Destination Unreachable message SHOULD be generated by a router, or\n   by the\
    \ IPv6 layer in the originating node, in response to a packet\n   that cannot\
    \ be delivered to its destination address for reasons other\n   than congestion.\
    \  (An ICMPv6 message MUST NOT be generated if a\n   packet is dropped due to\
    \ congestion.)\n   If the reason for the failure to deliver is lack of a matching\
    \ entry\n   in the forwarding node's routing table, the Code field is set to 0\n\
    \   (NOTE: this error can occur only in nodes that do not hold a \"default\n \
    \  route\" in their routing tables).\n   If the reason for the failure to deliver\
    \ is administrative\n   prohibition, e.g., a \"firewall filter\", the Code field\
    \ is set to 1.\n   If the reason for the failure to deliver is that the next destination\n\
    \   address in the Routing header is not a neighbor of the processing\n   node\
    \ but the \"strict\" bit is set for that address, then the Code\n   field is set\
    \ to 2.\n   If there is any other reason for the failure to deliver, e.g.,\n \
    \  inability to resolve the IPv6 destination address into a\n   corresponding\
    \ link address, or a link-specific problem of some sort,\n   then the Code field\
    \ is set to 3.\n   A destination node SHOULD send a Destination Unreachable message\
    \ with\n   Code 4 in response to a packet for which the transport protocol\n \
    \  (e.g., UDP) has no listener, if that transport protocol has no\n   alternative\
    \ means to inform the sender.\n   Upper layer notification\n   A node receiving\
    \ the ICMPv6 Destination Unreachable message MUST\n   notify the upper-layer protocol.\n"
- title: 3.2 Packet Too Big Message
  contents:
  - "3.2 Packet Too Big Message\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             MTU                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \                       exceeding 576 octets                    |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      2\n   Code           0\n   MTU            The Maximum Transmission Unit\
    \ of the next-hop link.\n   Description\n   A Packet Too Big MUST be sent by a\
    \ router in response to a packet\n   that it cannot forward because the packet\
    \ is larger than the MTU of\n   the outgoing link.  The information in this message\
    \ is used as part\n   of the Path MTU Discovery process [RFC-1191].\n   Sending\
    \ a Packet Too Big Message makes an exception to one of the\n   rules of when\
    \ to send an ICMPv6 error message, in that unlike other\n   messages, it is sent\
    \ in response to a packet received with an IPv6\n   multicast destination address,\
    \ or a link-layer multicast or link-\n   layer broadcast address.\n   Upper layer\
    \ notification\n   An incoming Packet Too Big message MUST be passed to the upper-layer\n\
    \   protocol.\n"
- title: 3.3 Time Exceeded Message
  contents:
  - "3.3 Time Exceeded Message\n       0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \                       exceeding 576 octets                    |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      3\n   Code           0 - hop limit exceeded in transit\n              \
    \    1 - fragment reassembly time exceeded\n   Unused         This field is unused\
    \ for all code values.\n                  It must be initialized to zero by the\
    \ sender\n                  and ignored by the receiver.\n   Description\n   If\
    \ a router receives a packet with a Hop Limit of zero, or a router\n   decrements\
    \ a packet's Hop Limit to zero, it MUST discard the packet\n   and send an ICMPv6\
    \ Time Exceeded message with Code 0 to the source of\n   the packet.  This indicates\
    \ either a routing loop or too small an\n   initial Hop Limit value.\n   The router\
    \ sending an ICMPv6 Time Exceeded message with Code 0 SHOULD\n   consider the\
    \ receiving interface of the packet as the interface on\n   which the packet forwarding\
    \ failed in following rule (d) for\n   selecting the Source Address of the message.\n\
    \   Upper layer notification\n   An incoming Time Exceeded message MUST be passed\
    \ to the upper-layer\n   protocol.\n"
- title: 3.4 Parameter Problem Message
  contents:
  - "3.4 Parameter Problem Message\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                            Pointer                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \                       exceeding 576 octets                    |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      4\n   Code           0 - erroneous header field encountered\n         \
    \         1 - unrecognized Next Header type encountered\n                  2 -\
    \ unrecognized IPv6 option encountered\n   Pointer        Identifies the octet\
    \ offset within the\n                  invoking packet where the error was detected.\n\
    \                  The pointer will point beyond the end of the ICMPv6\n     \
    \             packet if the field in error is beyond what can fit\n          \
    \        in the 576-byte limit of an ICMPv6 error message.\n   Description\n \
    \  If an IPv6 node processing a packet finds a problem with a field in\n   the\
    \ IPv6 header or extension headers such that it cannot complete\n   processing\
    \ the packet, it MUST discard the packet and SHOULD send an\n   ICMPv6 Parameter\
    \ Problem message to the packet's source, indicating\n   the type and location\
    \ of the problem.\n   The pointer identifies the octet of the original packet's\
    \ header\n   where the error was detected. For example, an ICMPv6 message with\n\
    \   Type field = 4, Code field = 1, and Pointer field = 40 would indicate\n  \
    \ that the IPv6 extension header following the IPv6 header of the\n   original\
    \ packet holds an unrecognized Next Header field value.\n   Upper layer notification\n\
    \   A node receiving this ICMPv6 message MUST notify the upper-layer\n   protocol.\n"
- title: 4. ICMPv6 Informational Messages
  contents:
  - '4. ICMPv6 Informational Messages

    '
- title: 4.1 Echo Request Message
  contents:
  - "4.1 Echo Request Message\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Any legal IPv6 address.\n   ICMPv6 Fields:\n   Type       \
    \    128\n   Code           0\n   Identifier     An identifier to aid in matching\
    \ Echo Replies\n                  to this Echo Request.  May be zero.\n   Sequence\
    \ Number\n                  A sequence number to aid in matching Echo Replies\n\
    \                  to this Echo Request.  May be zero.\n   Data           Zero\
    \ or more octets of arbitrary data.\n   Description\n   Every node MUST implement\
    \ an ICMPv6 Echo responder function that\n   receives Echo Requests and sends\
    \ corresponding Echo Replies.  A node\n   SHOULD also implement an application-layer\
    \ interface for sending Echo\n   Requests and receiving Echo Replies, for diagnostic\
    \ purposes.\n   Upper layer notification\n   A node receiving this ICMPv6 message\
    \ MAY notify the upper-layer\n   protocol.\n"
- title: 4.2 Echo Reply Message
  contents:
  - "4.2 Echo Reply Message\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Copied from the Source Address field of the invoking\n    \
    \              Echo Request packet.\n   ICMPv6 Fields:\n   Type           129\n\
    \   Code           0\n   Identifier     The identifier from the invoking Echo\
    \ Request message.\n   Sequence       The sequence number from the invoking Echo\
    \ Request\n   Number         message.\n   Data           The data from the invoking\
    \ Echo Request message.\n   Description\n   Every node MUST implement an ICMPv6\
    \ Echo responder function that\n   receives Echo Requests and sends corresponding\
    \ Echo Replies.  A node\n   SHOULD also implement an application-layer interface\
    \ for sending Echo\n   Requests and receiving Echo Replies, for diagnostic purposes.\n\
    \   The source address of an Echo Reply sent in response to a unicast\n   Echo\
    \ Request message MUST be the same as the destination address of\n   that Echo\
    \ Request message.\n   An Echo Reply SHOULD be sent in response to an Echo Request\
    \ message\n   sent to an IPv6 multicast address.  The source address of the reply\n\
    \   MUST be a unicast address belonging to the interface on which the\n   multicast\
    \ Echo Request message was received.\n   The data received in the ICMPv6 Echo\
    \ Request message MUST be returned\n   entirely and unmodified in the ICMPv6 Echo\
    \ Reply message, unless the\n   Echo Reply would exceed the MTU of the path back\
    \ to the Echo\n   requester, in which case the data is truncated to fit that path\
    \ MTU.\n   Upper layer notification\n   Echo Reply messages MUST be passed to\
    \ the ICMPv6 user interface,\n   unless the corresponding Echo Request originated\
    \ in the IP layer.\n"
- title: 4.3 Group Membership Messages
  contents:
  - "4.3 Group Membership Messages\n   The ICMPv6 Group Membership Messages have the\
    \ following format:\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \     Maximum Response Delay    |          Unused               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                                                               +\n      |\
    \                          Multicast                            |\n      +   \
    \                                                            +\n      |      \
    \                     Address                             |\n      +         \
    \                                                      +\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   IPv6 Fields:\n   Destination Address\n                  In a Group Membership\
    \ Query message, the multicast\n                  address of the group being queried,\
    \ or the Link-Local\n                  All-Nodes multicast address.\n        \
    \          In a Group Membership Report or a Group Membership\n              \
    \    Reduction message, the multicast address of the\n                  group\
    \ being reported or terminated.\n   Hop Limit      1\n   ICMPv6 Fields:\n   Type\
    \           130 - Group Membership Query\n                  131 - Group Membership\
    \ Report\n                  132 - Group Membership Reduction\n   Code        \
    \   0\n   Maximum Response Delay\n                  In Query messages, the maximum\
    \ time that responding\n                  Report messages may be delayed, in milliseconds.\n\
    \                  In Report and Reduction messages, this field is\n         \
    \         is initialized to zero by the sender and ignored by\n              \
    \    receivers.\n   Unused         Initialized to zero by the sender; ignored\
    \ by receivers.\n   Multicast Address\n                  The address of the multicast\
    \ group about which the\n                  message is being sent.  In Query messages,\
    \ the Multicast\n                  Address field may be zero, implying a query\
    \ for all\n                  groups.\n   Description\n   The ICMPv6 Group Membership\
    \ messages are used to convey information\n   about multicast group membership\
    \ from nodes to their neighboring\n   routers.  The details of their usage is\
    \ given in [RFC-1112].\n"
- title: 5. References
  contents:
  - "5. References\n   [IPv6]       Deering, S., and R. Hinden, \"Internet Protocol,\
    \ Version\n                6, Specification\", RFC 1883, Xerox PARC, Ipsilon\n\
    \                Networks, December 1995.\n   [IPv6-ADDR]  Hinden, R., and S.\
    \ Deering, Editors, \"IP Version 6\n                Addressing Architecture\"\
    , RFC 1884, Ipsilon Networks,\n                Xerox PARC, December 1995.\n  \
    \ [IPv6-DISC]  Narten, T., Nordmark, E., and W. Simpson, \"Neighbor\n        \
    \        Discovery for IP Version 6 (IPv6)\", Work in Progress.\n   [RFC-792]\
    \    Postel, J., \"Internet Control Message Protocol\", STD 5,\n             \
    \   RFC 792, USC/Information Sciences Institute, September\n                1981.\n\
    \   [RFC-1112]   Deering, S., \"Host Extensions for IP Multicasting\", STD\n \
    \               5, RFC 1112, Stanford University, August 1989.\n   [RFC-1122]\
    \   Braden, R., \"Requirements for Internet Hosts -\n                Communication\
    \ Layers\", STD 3, RFC 1122, USC/Information\n                Sciences Institute,\
    \ October 1989.\n   [RFC-1191]   Mogul, J., and S. Deering, \"Path MTU Discovery\"\
    , RFC\n                1191, DECWRL, Stanford University, November 1990.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   The document is derived from previous ICMP drafts of\
    \ the SIPP and\n   IPng working group.\n   The IPng working group and particularly\
    \ Robert Elz, Jim Bound, Bill\n   Simpson, Thomas Narten, Charlie Lynn, Bill Fink,\
    \ and Scott Bradner\n   (in chronological order) provided extensive review information\
    \ and\n   feedback.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 'Authors'' Addresses:'
  contents:
  - "Authors' Addresses:\n   Alex Conta                            Stephen Deering\n\
    \   Digital Equipment Corporation         Xerox Palo Alto Research Center\n  \
    \ 110 Spitbrook Rd                      3333 Coyote Hill Road\n   Nashua, NH 03062\
    \                      Palo Alto, CA 94304\n   Phone: +1-603-881-0744        \
    \        Phone: +1-415-812-4839\n   EMail: conta@zk3.dec.com              EMail:\
    \ deering@parc.xerox.com\n"
