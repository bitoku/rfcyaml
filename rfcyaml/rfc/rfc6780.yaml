- contents:
  - '                   RSVP ASSOCIATION Object Extensions

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The RSVP ASSOCIATION object was defined in the context of GMPLS-\n
    \  controlled Label Switched Paths (LSPs).  In this context, the object\n   is
    used to associate recovery LSPs with the LSP they are protecting.\n   This object
    also has broader applicability as a mechanism to\n   associate RSVP state.  This
    document defines how the ASSOCIATION\n   object can be more generally applied.
    \ This document also defines\n   Extended ASSOCIATION objects that, in particular,
    can be used in the\n   context of the MPLS Transport Profile (MPLS-TP).  This
    document\n   updates RFC 2205, RFC 3209, and RFC 3473.  It also generalizes the\n
    \  definition of the Association ID field defined in RFC 4872.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6780.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions Used in This Document ..........................4\n   2.
    Generalized Association ID Field Definition .....................4\n   3. Non-GMPLS
    and Non-Recovery Usage ................................4\n      3.1. Upstream
    Initiated Association .............................5\n           3.1.1. Path Message
    Format .................................5\n           3.1.2. Path Message Processing
    .............................6\n      3.2. Downstream Initiated Association ...........................7\n
    \          3.2.1. Resv Message Format .................................8\n           3.2.2.
    Resv Message Processing .............................8\n      3.3. Association
    Types ..........................................9\n           3.3.1. Resource
    Sharing Association Type ...................9\n           3.3.2. Unknown Association
    Types ..........................10\n   4. IPv4 and IPv6 Extended ASSOCIATION Objects
    .....................10\n      4.1. IPv4 and IPv6 Extended ASSOCIATION Object
    Format ..........11\n      4.2. Processing ................................................13\n
    \  5. Compatibility ..................................................14\n   6.
    Security Considerations ........................................14\n   7. IANA
    Considerations ............................................15\n      7.1. IPv4
    and IPv6 Extended ASSOCIATION Objects ................15\n      7.2. Resource
    Sharing Association Type .........................15\n   8. Acknowledgments ................................................16\n
    \  9. References .....................................................16\n      9.1.
    Normative References ......................................16\n      9.2. Informative
    References ....................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   End-to-end and segment recovery are defined for GMPLS-controlled\n
    \  Label Switched Paths (LSPs) in [RFC4872] and [RFC4873], respectively.\n   Both
    definitions use the ASSOCIATION object to associate recovery\n   LSPs with the
    LSP they are protecting.  Additional narrative on how\n   such associations are
    to be identified is provided in [RFC6689].\n   This document expands the possible
    usage of the ASSOCIATION object to\n   non-GMPLS and non-recovery contexts.  The
    expanded usage applies\n   equally to GMPLS LSPs [RFC3473], MPLS LSPs [RFC3209],
    and non-LSP\n   RSVP sessions [RFC2205] [RFC2207] [RFC3175] [RFC4860].  This document\n
    \  also reviews how associations should be made in the case in which the\n   object
    is carried in a Path message; additionally, it defines usage\n   with Resv messages.
    \ This section also discusses usage of the\n   ASSOCIATION object outside the
    context of GMPLS LSPs.\n   Some examples of non-LSP association being used to
    enable resource\n   sharing are:\n   o  Voice Call-Waiting:\n      A bidirectional
    voice call between two endpoints, A and B, is\n      signaled using two separate
    unidirectional RSVP reservations for\n      the flows A->B and B->A.  If endpoint
    A wishes to put the A-B call\n      on hold and join a separate A-C call, it is
    desirable that network\n      resources on common links be shared between the
    A-B and A-C calls.\n      The B->A and C->A subflows of the call can share resources
    using\n      existing RSVP sharing mechanisms, but only if they use the same\n
    \     destination IP addresses and ports.  Since by definition, the RSVP\n      reservations
    for the subflows A->B and A->C of the call must have\n      different IP addresses
    in the SESSION objects, this document\n      defines a new mechanism to associate
    the subflows and allow them\n      to share resources.\n   o  Voice Shared Line:\n
    \     A voice shared line is a single number that rings multiple\n      endpoints
    (which may be geographically diverse), such as phone\n      lines to a manager's
    desk and to their assistant.  A Voice over IP\n      (VoIP) system that models
    these calls as multiple point-to-point\n      unicast pre-ring reservations would
    result in significantly over-\n      counting bandwidth on shared links, since
    RSVP unicast\n      reservations to different endpoints cannot share bandwidth.
    \ So, a\n      new mechanism is defined in this document to allow separate\n      unicast
    reservations to be associated and to share resources.\n   o  Symmetric NAT:\n
    \     RSVP permits sharing of resources between multiple flows addressed\n      to
    the same destination D, even from different senders S1 and S2.\n      However,
    if D is behind a NAT operating in symmetric mode\n      [RFC5389], it is possible
    that the destination port of the flows\n      S1->D and S2->D may be different
    outside the NAT.  In this case,\n      these flows cannot share resources using
    RSVP, since the SESSION\n      objects for these two flows outside the NAT have
    different\n      destination ports.  This document defines a new mechanism to\n
    \     associate these flows and allow them to share resources.\n   In order to
    support the wider usage of the ASSOCIATION object, this\n   document generalizes
    the definition of the Association ID field\n   defined in RFC 4872.  This generalization
    has no impact on existing\n   implementations.  When using the procedures defined
    below,\n   association is identified based on exact ASSOCIATION object matching.\n
    \  Some of the other matching mechanisms defined in RFC 4872, e.g.,\n   matching
    based on Session IDs, are not generalized.  This document\n   allows for, but
    does not specify, association type-specific\n   processing.\n   This document
    also defines the Extended ASSOCIATION objects that can\n   be used in the context
    of MPLS-TP.  The scope of the Extended\n   ASSOCIATION objects is not limited
    to MPLS-TP.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Generalized Association ID Field Definition\n   The Association ID field
    is carried in the IPv4 and IPv6 ASSOCIATION\n   objects defined in [RFC4872].
    \ The [RFC4872] definition of the field\n   reads:\n      A value assigned by
    the LSP head-end.  When combined with the\n      Association Type and Association
    Source, this value uniquely\n      identifies an association.\n   This document
    allows for the origination of ASSOCIATION objects by\n   nodes other than \"the
    LSP head-end\".  As such, the definition of the\n   Association ID field needs
    to be generalized to accommodate such\n   usage.  This document defines the Association
    ID field of the IPv4\n   and IPv6 ASSOCIATION objects as:\n      A value assigned
    by the node that originated the association.\n      When combined with the other
    fields carried in the object, this\n      value uniquely identifies an association.\n
    \  This change in definition does not impact the procedures or\n   mechanisms
    defined in [RFC4872] or [RFC4873], nor does it impact the\n   existing implementations
    of [RFC4872] or [RFC4873].\n"
  title: 2.  Generalized Association ID Field Definition
- contents:
  - "3.  Non-GMPLS and Non-Recovery Usage\n   While the ASSOCIATION object [RFC4872]
    is defined in the context of\n   GMPLS recovery, the object can have wider application.
    \ [RFC4872]\n   defines the object to be used to \"associate LSPs with each other\",\n
    \  and then defines an Association Type field to identify the type of\n   association
    being identified.  It also specifies that the Association\n   Type field is to
    be considered when determining association, i.e.,\n   there may be type-specific
    association rules.  As defined by\n   [RFC4872] and reviewed in [RFC6689], this
    is the case for recovery\n   type ASSOCIATION objects.  [RFC6689], notably the
    text related to\n   resource sharing types, can also be used as the foundation
    for a\n   generic method for associating LSPs when there is no type-specific\n
    \  association defined.\n   The remainder of this section defines the general
    rules to be\n   followed when processing ASSOCIATION objects.  Object usage in
    both\n   Path and Resv messages is discussed.  The usage applies equally to\n
    \  GMPLS LSPs [RFC3473], MPLS LSPs [RFC3209], and non-LSP RSVP sessions\n   [RFC2205]
    [RFC2207] [RFC3175] [RFC4860].  As described below,\n   association is always
    done based on matching either Path state to\n   Path state, or Resv state to Resv
    state, but not Path state to Resv\n   State.  This section applies to the ASSOCIATION
    objects defined in\n   [RFC4872].\n"
  - contents:
    - "3.1.  Upstream-Initiated Association\n   Upstream-initiated association is
      represented in ASSOCIATION objects\n   carried in Path messages and can be used
      to associate RSVP Path state\n   across MPLS Tunnels / RSVP sessions.  (Note,
      per [RFC3209], an MPLS\n   tunnel is represented by an RSVP SESSION object,
      and multiple LSPs\n   may be represented within a single tunnel.)  Cross-LSP
      association\n   based on Path state is defined in [RFC4872].  This section extends\n
      \  that definition by specifying generic association rules and usage for\n   non-LSP
      uses.  This section does not modify processing required to\n   support [RFC4872]
      and [RFC4873], which is reviewed in Section 3 of\n   [RFC6689].  The use of
      an ASSOCIATION object in a single session is\n   not precluded.\n"
    - contents:
      - "3.1.1.  Path Message Format\n   This section provides the Backus-Naur Form
        (BNF), see [RFC5511], for\n   Path messages containing ASSOCIATION objects.
        \ BNF is provided for\n   both MPLS and for non-LSP session usage.  Unmodified
        RSVP message\n   formats and some optional objects are not listed.\n   The
        formats for MPLS and GMPLS sessions are unmodified from [RFC4872]\n   and
        can be represented based on the BNF in [RFC3209] as:\n         <Path Message>
        ::= <Common Header> [ <INTEGRITY> ]\n                            <SESSION>
        <RSVP_HOP>\n                            <TIME_VALUES>\n                            [
        <EXPLICIT_ROUTE> ]\n                            <LABEL_REQUEST>\n                            [
        <SESSION_ATTRIBUTE> ]\n                            [ <ASSOCIATION> ... ]\n
        \                           [ <POLICY_DATA> ... ]\n                            <sender
        descriptor>\n   The format for non-LSP sessions as based on the BNF in [RFC2205]
        is:\n         <Path Message> ::= <Common Header> [ <INTEGRITY> ]\n                            <SESSION>
        <RSVP_HOP>\n                            <TIME_VALUES>\n                           [
        <ASSOCIATION> ... ]\n                           [ <POLICY_DATA> ... ]\n                           [
        <sender descriptor> ]\n   In general, relative ordering of ASSOCIATION objects
        with respect to\n   each other, as well as with respect to other objects,
        is not\n   significant.  Relative ordering of ASSOCIATION objects of the same\n
        \  type SHOULD be preserved by transit nodes.\n"
      title: 3.1.1.  Path Message Format
    - contents:
      - "3.1.2.  Path Message Processing\n   This section is based on, and extends,
        the processing rules described\n   in [RFC4872] and [RFC4873], which is reviewed
        in [RFC6689].  This\n   section applies equally to GMPLS LSPs, MPLS LSPs,
        and non-LSP session\n   state.  Note, as previously stated, this section does
        not modify\n   processing required to support [RFC4872] and [RFC4873].\n   A
        node sending a Path message chooses when an ASSOCIATION object is\n   to be
        included in the outgoing Path message.  To indicate association\n   between
        multiple sessions, an appropriate ASSOCIATION object MUST be\n   included
        in the outgoing Path messages corresponding to each of the\n   associated
        sessions.  In the absence of Association-Type-specific\n   rules for identifying
        association, the included ASSOCIATION object\n   MUST be identical.  When
        there is an Association-Type-specific\n   definition of association rules,
        the definition SHOULD allow for\n   association based on identical ASSOCIATION
        objects.  This document\n   does not define any Association-Type-specific
        rules.  (See Section 3\n   of [RFC6689] for a review of Association-Type-specific
        rules derived\n   from [RFC4872].)\n   When creating an ASSOCIATION object,
        the originator MUST format the\n   object as defined in Section 16.1 of [RFC4872].
        \ The originator MUST\n   set the Association Type field based on the type
        of association being\n   identified.  The Association ID field MUST be set
        to a value that\n   uniquely identifies the specific association within the
        context of\n   the Association Source field.  The Association Source field
        MUST be\n   set to a unique address assigned to the node originating the\n
        \  association.\n   A downstream node can identify an upstream-initiated association
        by\n   performing the following checks.  When a node receives a Path\n   message,
        it MUST check each ASSOCIATION object received in the Path\n   message to
        determine if the object contains an Association Type field\n   value supported
        by the node.  For each ASSOCIATION object containing\n   a supported association
        type, the node MUST then check to see if the\n   object matches an ASSOCIATION
        object received in any other Path\n   message.  To perform this matching,
        a node MUST examine the Path\n   state of all other sessions and compare the
        fields contained in the\n   newly received ASSOCIATION object with the fields
        contained in the\n   Path state's ASSOCIATION objects.  An association is
        deemed to exist\n   when the same values are carried in all fields of the
        ASSOCIATION\n   objects being compared.  Type-specific processing of ASSOCIATION\n
        \  objects is outside the scope of this document.\n   Note that as more than
        one association may exist, the described\n   matching MUST continue after
        a match is identified and MUST be\n   performed against all local Path state.
        \ It is also possible for\n   there to be no match identified.\n   Unless
        there are type-specific processing rules, downstream nodes\n   MUST forward
        all ASSOCIATION objects received in a Path message in\n   any corresponding
        outgoing Path messages without modification.  This\n   processing MUST be
        followed for unknown Association Type field\n   values.\n"
      title: 3.1.2.  Path Message Processing
    title: 3.1.  Upstream-Initiated Association
  - contents:
    - "3.2.  Downstream-Initiated Association\n   Downstream-initiated association
      is represented in ASSOCIATION\n   objects carried in Resv messages and can be
      used to associate RSVP\n   Resv state across MPLS Tunnels/RSVP sessions.  Cross-LSP
      association,\n   based on Path state, is defined in [RFC4872].  This section
      defines\n   cross-session association based on Resv state.  This section places\n
      \  no additional requirements on implementations supporting [RFC4872]\n   and
      [RFC4873].  Note, the use of an ASSOCIATION object in a single\n   session is
      not precluded.\n"
    - contents:
      - "3.2.1.  Resv Message Format\n   This section provides the Backus-Naur Form
        (BNF), see [RFC5511], for\n   Resv messages containing ASSOCIATION objects.
        \ BNF is provided for\n   both MPLS and for non-LSP session usage.  Unmodified
        RSVP message\n   formats and some optional objects are not listed.\n   The
        formats for MPLS, GMPLS, and non-LSP sessions are identical and\n   are represented
        based on the BNF in [RFC2205] and [RFC3209]:\n         <Resv Message> ::=
        <Common Header> [ <INTEGRITY> ]\n                            <SESSION>  <RSVP_HOP>\n
        \                           <TIME_VALUES>\n                            [ <RESV_CONFIRM>
        ]  [ <SCOPE> ]\n                            [ <ASSOCIATION> ... ]\n                            [
        <POLICY_DATA> ... ]\n                            <STYLE> <flow descriptor
        list>\n   Relative ordering of ASSOCIATION objects with respect to each other,\n
        \  as well as with respect to other objects, is not currently\n   significant.
        \ Relative ordering of ASSOCIATION objects of the same\n   type SHOULD be
        preserved by transit nodes.\n"
      title: 3.2.1.  Resv Message Format
    - contents:
      - "3.2.2.  Resv Message Processing\n   This section applies equally to GMPLS
        LSPs, MPLS LSPs, and non-LSP\n   session state.\n   A node sending a Resv
        message chooses when an ASSOCIATION object is\n   to be included in the outgoing
        Resv message.  A node that wishes to\n   allow upstream nodes to associate
        Resv state across RSVP sessions\n   MUST include an ASSOCIATION object in
        the outgoing Resv messages\n   corresponding to the RSVP sessions to be associated.
        \ In the absence\n   of Association-Type-specific rules for identifying association,
        the\n   included ASSOCIATION objects MUST be identical.  When there is an\n
        \  Association-Type-specific definition of association rules, the\n   definition
        SHOULD allow for association based on identical\n   ASSOCIATION objects.  This
        document does not define any Association-\n   Type-specific rules.\n   When
        creating an ASSOCIATION object, the originator MUST format the\n   object
        as defined in Section 16.1 of [RFC4872].  The originator MUST\n   set the
        Association Type field based on the type of association being\n   identified.
        \ The Association ID field MUST be set to a value that\n   uniquely identifies
        the specific association within the context of\n   the Association Source
        field.  The Association Source field MUST be\n   set to a unique address assigned
        to the node originating the\n   association.\n   An upstream node can identify
        a downstream-initiated association by\n   performing the following checks.
        \ When a node receives a Resv\n   message, it MUST check each ASSOCIATION
        object received in the Resv\n   message to determine if the object contains
        an Association Type field\n   value supported by the node.  For each ASSOCIATION
        object containing\n   a supported association type, the node MUST then check
        to see if the\n   object matches an ASSOCIATION object received in any other
        Resv\n   message.  To perform this matching, a node MUST examine the Resv\n
        \  state of all other sessions and compare the fields contained in the\n   newly
        received ASSOCIATION object with the fields contained in the\n   Resv state's
        ASSOCIATION objects.  An association is deemed to exist\n   when the same
        values are carried in all fields of the ASSOCIATION\n   objects being compared.
        \ Type-specific processing of ASSOCIATION\n   objects is outside the scope
        of this document.\n   Note that as more than one association may exist, the
        described\n   matching MUST continue after a match is identified and MUST
        be\n   performed against all local Resv state.  It is also possible for\n
        \  there to be no match identified.\n   Unless there are type-specific processing
        rules, upstream nodes MUST\n   forward all ASSOCIATION objects received in
        a Resv message in any\n   corresponding outgoing Resv messages without modification.
        \ This\n   processing MUST be followed for unknown Association Type field\n
        \  values.\n"
      title: 3.2.2.  Resv Message Processing
    title: 3.2.  Downstream-Initiated Association
  - contents:
    - "3.3.  Association Types\n   Two association types are currently defined: recovery
      and resource\n   sharing.  Recovery type association is only applicable within
      the\n   context of recovery [RFC4872] [RFC4873].  Resource sharing is\n   applicable
      to any context and its general use is defined in this\n   section.\n"
    - contents:
      - "3.3.1.  Resource Sharing Association Type\n   The Resource Sharing Association
        Type was defined in [RFC4873] and\n   was defined within the context of GMPLS
        and upstream-initiated\n   association.  This section presents a definition
        of the resource\n   sharing association that allows for its use with any RSVP
        session\n   type and in both Path and Resv messages.  This definition is\n
        \  consistent with the definition of the resource sharing association\n   type
        in [RFC4873] and no changes are required by this section in\n   order to support
        [RFC4873].  The Resource Sharing Association Type\n   MUST be supported by
        any implementation compliant with this document.\n   The Resource Sharing
        Association Type is used to enable resource\n   sharing across RSVP sessions.
        \ Per [RFC4873], resource sharing uses\n   the Association Type field value
        of 2.  ASSOCIATION objects with an\n   Association Type with the value Resource
        Sharing MAY be carried in\n   Path and Resv messages.  Association for the
        Resource Sharing type\n   MUST follow the procedures defined in Section 3.1.2
        for upstream-\n   initiated (Path message) association and Section 3.2.1 for\n
        \  downstream-initiated (Resv message) association.  There are no type-\n
        \  specific association rules, processing rules, or ordering\n   requirements.
        \ Note that, as is always the case with association as\n   enabled by this
        document, no associations are made across Path and\n   Resv state.\n   Once
        an association is identified, resources MUST be considered as\n   shared across
        the identified sessions by the admission-control\n   function.  Since the
        implementation specifics of the admission-\n   control function is outside
        the scope of RSVP, we observe that how\n   resource sharing is actually reflected
        may vary according to specific\n   implementations (e.g., depending on the
        specific admission-control\n   and resource-management algorithm, or on how
        local policy is taken\n   into account).\n"
      title: 3.3.1.  Resource Sharing Association Type
    - contents:
      - "3.3.2.  Unknown Association Types\n   As required by Sections 3.1.2 and 3.2.2
        above, a node that receives\n   an ASSOCIATION object containing an unknown
        ASSOCIATION type forwards\n   all received ASSOCIATION objects as defined
        above.  The node MAY also\n   identify associations per the defined processing,
        e.g., to make this\n   information available via a management interface.\n"
      title: 3.3.2.  Unknown Association Types
    title: 3.3.  Association Types
  title: 3.  Non-GMPLS and Non-Recovery Usage
- contents:
  - "4.  IPv4 and IPv6 Extended ASSOCIATION Objects\n   [RFC4872] defines the IPv4
    ASSOCIATION object and the IPv6\n   ASSOCIATION object.  As defined, these objects
    each contain an\n   Association Source field and a 16-bit Association ID field.
    \ As\n   previously described, the contents of the object uniquely identify an\n
    \  association.  Because the Association ID field is a 16-bit field, an\n   association
    source can allocate up to 65536 different associations\n   and no more.  There
    are scenarios where this number is insufficient\n   (for example, where the association
    identification is best known and\n   identified by a fairly centralized entity,
    and therefore may be\n   involved in a large number of associations).\n   An additional
    case that cannot be supported using the existing\n   ASSOCIATION objects is presented
    by MPLS-TP LSPs.  Per [RFC6370],\n   MPLS-TP LSPs can be identified based on an
    operator-unique global\n   identifier.  As defined in [RFC6370], \"global identifier\",
    or\n   Global_ID, is based on [RFC5003] and includes the operator's\n   Autonomous
    System Number (ASN).\n   This section defines new ASSOCIATION objects to support
    extended\n   identification in order to address the previously described\n   limitations.
    \ Specifically, the IPv4 Extended ASSOCIATION object and\n   IPv6 Extended ASSOCIATION
    object are defined below.  Both new objects\n   include the fields necessary to
    enable identification of a larger\n   number of associations as well as MPLS-TP-required
    identification.\n   The IPv4 Extended ASSOCIATION object and IPv6 Extended ASSOCIATION\n
    \  object SHOULD be supported by an implementation compliant with this\n   document.
    \ The processing rules for the IPv4 and IPv6 Extended\n   ASSOCIATION object are
    described below and are based on the rules for\n   the IPv4 and IPv6 ASSOCIATION
    objects as previously described.\n"
  - contents:
    - "4.1.  IPv4 and IPv6 Extended ASSOCIATION Object Format\n   The IPv4 Extended
      ASSOCIATION object (Class-Num of the form 11bbbbbb\n   with value = 199, C-Type
      = 3) has the format:\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |            Length             | Class-Num(199)|  C-Type (3)   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |       Association Type        |       Association ID          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                    IPv4 Association Source                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                   Global Association Source                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     :                               .                               :\n      :
      \                   Extended Association ID                    :\n      :                               .
      \                              :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  The IPv6 Extended ASSOCIATION object (Class-Num of the form 11bbbbbb\n   with
      value = 199, C-Type = 4) has the format:\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |            Length             | Class-Num(199)|  C-Type (4)   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |       Association Type        |       Association ID          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                                                               |\n      |
      \                   IPv6 Association Source                    |\n      |                                                               |\n
      \     |                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                   Global Association Source                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     :                               .                               :\n      :
      \                   Extended Association ID                    :\n      :                               .
      \                              :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Association Type: 16 bits\n      Same as for IPv4 and IPv6 ASSOCIATION objects,
      see [RFC4872].\n   Association ID: 16 bits\n      Same as for IPv4 and IPv6
      ASSOCIATION objects, see Section 2.\n   Association Source: 4 or 16 bytes\n
      \     Same as for IPv4 and IPv6 ASSOCIATION objects, see [RFC4872].\n   Global
      Association Source: 4 bytes\n      This field contains a value that is a unique
      global identifier or\n      the special value zero (0).  When non-zero and not
      overridden by\n      local policy, the Global_ID as defined in [RFC6370] SHALL
      be used.\n      The special value zero indicates that no global identifier is\n
      \     present.  Use of the special value zero SHOULD be limited to\n      entities
      contained within a single operator.\n      If the Global Association Source
      field value is derived from a\n      2-octet ASN, then the two high-order octets
      of this 4-octet field\n      MUST be set to zero.\n   Extended Association ID:
      variable, 4-byte aligned\n      This field contains data that is additional
      information to support\n      unique identification.  The length and contents
      of this field is\n      scoped by the Association Source.  The length of this
      field is\n      derived from the object Length field and as such MUST have a\n
      \     length of zero or be 4-byte aligned.  A length of zero indicates\n      that
      this field is omitted.\n"
    title: 4.1.  IPv4 and IPv6 Extended ASSOCIATION Object Format
  - contents:
    - "4.2.  Processing\n   The processing of an IPv4 or IPv6 Extended ASSOCIATION
      object MUST be\n   identical to the processing of an IPv4 or IPv6 ASSOCIATION
      object as\n   previously described, except as extended by this section.  This\n
      \  section applies to ASSOCIATION objects included in both Path and Resv\n   messages.\n
      \  The following are the modified procedures for Extended ASSOCIATION\n   object
      processing:\n   o  When creating an Extended ASSOCIATION object, the originator
      MUST\n      format the object as defined in this document.\n   o  The originator
      MUST set the Association Type, Association ID, and\n      Association Source
      fields as described in Section 4.\n   o  When ASN-based global identification
      of the Association Source is\n      desired, the originator MUST set the Global
      Association Source\n      field.  When ASN-based global identification is not
      desired, the\n      originator MUST set the Global Association Source field
      to zero\n      (0).\n   o  The Extended ASSOCIATION object originator MAY include
      the\n      Extended Association ID field.  The field is included based on\n
      \     local policy.  The field MUST be included when the Association ID\n      field
      is insufficient to uniquely identify association within the\n      scope of
      the source of the association.  When included, this field\n      MUST be set
      to a value that, when taken together with the other\n      fields in the object,
      uniquely identifies the association being\n      identified.\n   o  The object
      Length field is set based on the length of the Extended\n      Association ID
      field.  When the Extended Association ID field is\n      omitted, the object
      Length field MUST be set to 16 or 28 for the\n      IPv4 and IPv6 ASSOCIATION
      objects, respectively.  When the\n      Extended Association ID field is present,
      the object Length field\n      MUST be set to indicate the additional bytes
      carried in the\n      Extended Association ID field, including pad bytes.\n
      \     Note: Per [RFC2205], the object Length field is set to the total\n      object
      length in bytes, is always a multiple of 4, and is at least\n      4.\n   The
      procedures related to association identification are not modified\n   by this
      section.  It is important to note that Section 4 defines the\n   identification
      of associations based on ASSOCIATION object matching\n   and that such matching,
      in the absence of type-specific comparison\n   rules, is based on the comparison
      of all fields in an ASSOCIATION\n   object.  This applies equally to ASSOCIATION
      objects and Extended\n   ASSOCIATION objects.\n"
    title: 4.2.  Processing
  title: 4.  IPv4 and IPv6 Extended ASSOCIATION Objects
- contents:
  - "5.  Compatibility\n   Per [RFC4872], the ASSOCIATION object uses an object class
    number of\n   the form 11bbbbbb to ensure compatibility with non-supporting nodes.\n
    \  Per [RFC2205], such nodes will ignore the object but forward it\n   without
    modification.  This is also the action taken for unknown\n   association types
    as discussed above in Section 3.1.2, 3.2.2, and\n   3.3.2.\n   Per [RFC4872],
    transit nodes that support the ASSOCIATION object but\n   not the Extended Association
    C-Types will \"transmit, without\n   modification, any received ASSOCIATION object
    in the corresponding\n   outgoing Path message\".  Per [RFC2205], an egress node
    that supports\n   the ASSOCIATION object but not the Extended Association C-Types,
    may\n   generate an \"Unknown object C-Type\" error.  This error will propagate\n
    \  to the ingress node for standard error processing.\n   Operators wishing to
    use a function supported by a particular\n   association type should ensure that
    the type is supported on any node\n   that is expected to act on the association.\n"
  title: 5.  Compatibility
- contents:
  - "6.  Security Considerations\n   A portion of this document reviews procedures
    defined in [RFC4872]\n   and [RFC4873] and does not define new procedures.  As
    such, no new\n   security considerations are introduced in this portion of the\n
    \  document.\n   Section 3 defines broader usage of the ASSOCIATION object, but
    does\n   not fundamentally expand on the association function that was\n   previously
    defined in [RFC4872] and [RFC4873].  Section 4 increases\n   the number of bits
    that are carried in an ASSOCIATION object (by 32),\n   and similarly does not
    expand on the association function that was\n   previously defined.  This broader
    definition does allow for\n   additional information to be conveyed, but this
    information is not\n   fundamentally different from the information that is already
    carried\n   in RSVP.  Therefore, there are no new risks or security\n   considerations
    introduced by this document.\n   For a general discussion on MPLS- and GMPLS-related
    security issues,\n   including RSVP's chain of trust security model, see the MPLS/GMPLS\n
    \  security framework [RFC5920].\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   IANA has assigned new values for namespaces defined
    in this document\n   and they are summarized in this section.\n"
  - contents:
    - "7.1.  IPv4 and IPv6 Extended ASSOCIATION Objects\n   Per this document, IANA
      has assigned two new C-Types (which are\n   defined in Section 3.1) for the
      existing ASSOCIATION object in the\n   \"Class Names, Class Numbers, and Class
      Types\" section of the\n   \"Resource Reservation Protocol (RSVP) Parameters\"
      registry located at\n   http://www.iana.org/assignments/rsvp-parameters:\n   199
      \ ASSOCIATION                           [RFC4872]\n        Class Types or C-Types\n
      \          3   Type 3 IPv4 Extended Association   [RFC6780]\n           4   Type
      4 IPv6 Extended Association   [RFC6780]\n"
    title: 7.1.  IPv4 and IPv6 Extended ASSOCIATION Objects
  - contents:
    - "7.2.  Resource Sharing Association Type\n   This document also broadens the
      potential usage of the Resource\n   Sharing Association Type defined in [RFC4873].
      \ As such, IANA has\n   updated the reference of the Resource Sharing Association
      Type\n   included in the associated registry.  Per this document, IANA has\n
      \  also corrected the duplicate usage of '(R)' in this registry.  In\n   particular,
      the \"Association Type\" registry found at\n   http://www.iana.org/assignments/gmpls-sig-parameters/
      has been\n   updated as follows:\n      OLD:\n        2         Resource Sharing
      (R)      [RFC4873]\n      NEW:\n        2         Resource Sharing (S)      [RFC4873][RFC6780]\n
      \  There are no other IANA considerations introduced by this document.\n"
    title: 7.2.  Resource Sharing Association Type
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   Valuable comments and input were received from Dimitri
    Papadimitriou,\n   Fei Zhang, and Adrian Farrel.  We thank Subha Dhesikan for
    her\n   contribution to the early work on sharing of resources across RSVP\n   reservations.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2205]  Braden, R., Ed., Zhang, L., Berson,
      S., Herzog, S., and S.\n              Jamin, \"Resource ReSerVation Protocol
      (RSVP) -- Version 1\n              Functional Specification\", RFC 2205, September
      1997.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n
      \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3209]
      \ Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and
      G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\",
      RFC 3209, December 2001.\n   [RFC3473]  Berger, L., Ed., \"Generalized Multi-Protocol
      Label\n              Switching (GMPLS) Signaling Resource ReserVation\n              Protocol-Traffic
      Engineering (RSVP-TE) Extensions\", RFC\n              3473, January 2003.\n
      \  [RFC4872]  Lang, J., Ed., Rekhter, Y., Ed., and D. Papadimitriou,\n              Ed.,
      \"RSVP-TE Extensions in Support of End-to-End\n              Generalized Multi-Protocol
      Label Switching (GMPLS)\n              Recovery\", RFC 4872, May 2007.\n   [RFC4873]
      \ Berger, L., Bryskin, I., Papadimitriou, D., and A. Farrel,\n              \"GMPLS
      Segment Recovery\", RFC 4873, May 2007.\n   [RFC5511]  Farrel, A., \"Routing
      Backus-Naur Form (RBNF): A Syntax\n              Used to Form Encoding Rules
      in Various Routing Protocol\n              Specifications\", RFC 5511, April
      2009.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2207]  Berger, L. and T. O'Malley, \"RSVP
      Extensions for IPSEC\n              Data Flows\", RFC 2207, September 1997.\n
      \  [RFC3175]  Baker, F., Iturralde, C., Le Faucheur, F., and B. Davie,\n              \"Aggregation
      of RSVP for IPv4 and IPv6 Reservations\", RFC\n              3175, September
      2001.\n   [RFC4860]  Le Faucheur, F., Davie, B., Bose, P., Christou, C., and
      M.\n              Davenport, \"Generic Aggregate Resource ReSerVation\n              Protocol
      (RSVP) Reservations\", RFC 4860, May 2007.\n   [RFC5003]  Metz, C., Martini,
      L., Balus, F., and J. Sugimoto,\n              \"Attachment Individual Identifier
      (AII) Types for\n              Aggregation\", RFC 5003, September 2007.\n   [RFC5389]
      \ Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n
      \  [RFC5920]  Fang, L., Ed., \"Security Framework for MPLS and GMPLS\n              Networks\",
      RFC 5920, July 2010.\n   [RFC6370]  Bocci, M., Swallow, G., and E. Gray, \"MPLS
      Transport\n              Profile (MPLS-TP) Identifiers\", RFC 6370, September
      2011.\n   [RFC6689]  Berger, L., \"Usage of the RSVP ASSOCIATION Object\", RFC\n
      \             6689, July 2012.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Lou Berger\n   LabN Consulting, L.L.C.\n   Phone: +1-301-468-9228\n
    \  EMail: lberger@labn.net\n   Francois Le Faucheur\n   Cisco Systems\n   Greenside,
    400 Avenue de Roumanille\n   Sophia Antipolis 06410\n   France\n   EMail: flefauch@cisco.com\n
    \  Ashok Narayanan\n   Cisco Systems\n   300 Beaver Brook Road\n   Boxborough,
    MA 01719\n   United States\n   EMail: ashokn@cisco.com\n"
  title: Authors' Addresses
