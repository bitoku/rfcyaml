- title: __initial_text__
  contents:
  - '                   US Secure Hash Algorithm 1 (SHA1)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The purpose of this document is to make the SHA-1 (Secure Hash\n\
    \   Algorithm 1) hash algorithm conveniently available to the Internet\n   community.\
    \  The United States of America has adopted the SHA-1 hash\n   algorithm described\
    \ herein as a Federal Information Processing\n   Standard.  Most of the text herein\
    \ was taken by the authors from FIPS\n   180-1.  Only the C code implementation\
    \ is \"original\".\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Most of the text herein was taken from [FIPS 180-1].  Only\
    \ the C code\n   implementation is \"original\" but its style is similar to the\n\
    \   previously published MD4 and MD5 RFCs [RFCs 1320, 1321].\n   The SHA-1 is\
    \ based on principles similar to those used by Professor\n   Ronald L. Rivest\
    \ of MIT when designing the MD4 message digest\n   algorithm [MD4] and is modeled\
    \ after that algorithm [RFC 1320].\n   Useful comments from the following, which\
    \ have been incorporated\n   herein, are gratefully acknowledged:\n      Tony\
    \ Hansen\n      Garrett Wollman\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Overview of Contents...........................................\
    \  2\n   2. Definitions of Bit Strings and Integers........................  3\n\
    \   3. Operations on Words............................................  3\n  \
    \ 4. Message Padding................................................  4\n   5.\
    \ Functions and Constants Used...................................  6\n   6. Computing\
    \ the Message Digest...................................  6\n   6.1 Method 1......................................................\
    \  6\n   6.2 Method 2......................................................  7\n\
    \   7. C Code.........................................................  8\n  \
    \ 7.1 .h file.......................................................  8\n   7.2\
    \ .c file....................................................... 10\n   7.3 Test\
    \ Driver................................................... 18\n   8. Security\
    \ Considerations........................................ 20\n   References........................................................\
    \ 21\n   Authors' Addresses................................................ 21\n\
    \   Full Copyright Statement.......................................... 22\n"
- title: 1. Overview of Contents
  contents:
  - "1. Overview of Contents\n   NOTE: The text below is mostly taken from [FIPS 180-1]\
    \ and assertions\n   therein of the security of SHA-1 are made by the US Government,\
    \ the\n   author of [FIPS 180-1], and not by the authors of this document.\n \
    \  This document specifies a Secure Hash Algorithm, SHA-1, for computing\n   a\
    \ condensed representation of a message or a data file.  When a\n   message of\
    \ any length < 2^64 bits is input, the SHA-1 produces a\n   160-bit output called\
    \ a message digest.  The message digest can then,\n   for example, be input to\
    \ a signature algorithm which generates or\n   verifies the signature for the\
    \ message.  Signing the message digest\n   rather than the message often improves\
    \ the efficiency of the process\n   because the message digest is usually much\
    \ smaller in size than the\n   message.  The same hash algorithm must be used\
    \ by the verifier of a\n   digital signature as was used by the creator of the\
    \ digital\n   signature.  Any change to the message in transit will, with very\
    \ high\n   probability, result in a different message digest, and the signature\n\
    \   will fail to verify.\n   The SHA-1 is called secure because it is computationally\
    \ infeasible\n   to find a message which corresponds to a given message digest,\
    \ or to\n   find two different messages which produce the same message digest.\n\
    \   Any change to a message in transit will, with very high probability,\n   result\
    \ in a different message digest, and the signature will fail to\n   verify.\n\
    \   Section 2 below defines the terminology and functions used as\n   building\
    \ blocks to form SHA-1.\n"
- title: 2. Definitions of Bit Strings and Integers
  contents:
  - "2. Definitions of Bit Strings and Integers\n   The following terminology related\
    \ to bit strings and integers will be\n   used:\n   a. A hex digit is an element\
    \ of the set {0, 1, ... , 9, A, ... , F}.\n      A hex digit is the representation\
    \ of a 4-bit string.  Examples:  7\n      = 0111, A = 1010.\n   b. A word equals\
    \ a 32-bit string which may be represented as a\n      sequence of 8 hex digits.\
    \  To convert a word to 8 hex digits each\n      4-bit string is converted to\
    \ its hex equivalent as described in\n      (a) above.  Example:\n      1010 0001\
    \ 0000 0011 1111 1110 0010 0011 = A103FE23.\n   c. An integer between 0 and 2^32\
    \ - 1 inclusive may be represented as\n      a word.  The least significant four\
    \ bits of the integer are\n      represented by the right-most hex digit of the\
    \ word\n      representation.  Example: the integer 291 = 2^8+2^5+2^1+2^0 =\n\
    \      256+32+2+1 is represented by the hex word, 00000123.\n      If z is an\
    \ integer, 0 <= z < 2^64, then z = (2^32)x + y where 0 <=\n      x < 2^32 and\
    \ 0 <= y < 2^32.  Since x and y can be represented as\n      words X and Y, respectively,\
    \ z can be represented as the pair of\n      words (X,Y).\n   d. block = 512-bit\
    \ string.  A block (e.g., B) may be represented as a\n      sequence of 16 words.\n"
- title: 3. Operations on Words
  contents:
  - "3. Operations on Words\n   The following logical operators will be applied to\
    \ words:\n   a. Bitwise logical word operations\n      X AND Y  =  bitwise logical\
    \ \"and\" of  X and Y.\n      X OR Y   =  bitwise logical \"inclusive-or\" of\
    \ X and Y.\n      X XOR Y  =  bitwise logical \"exclusive-or\" of X and Y.\n \
    \     NOT X    =  bitwise logical \"complement\" of X.\n      Example:\n     \
    \          01101100101110011101001001111011\n         XOR   01100101110000010110100110110111\n\
    \               --------------------------------\n           =   00001001011110001011101111001100\n\
    \   b. The operation X + Y is defined as follows:  words X and Y\n      represent\
    \ integers x and y, where 0 <= x < 2^32 and 0 <= y < 2^32.\n      For positive\
    \ integers n and m, let n mod m be the remainder upon\n      dividing n by m.\
    \  Compute\n         z  =  (x + y) mod 2^32.\n      Then 0 <= z < 2^32.  Convert\
    \ z to a word,  Z, and define Z = X +\n      Y.\n   c. The circular left shift\
    \ operation S^n(X), where X is a word and n\n      is an integer with 0 <= n <\
    \ 32, is defined by\n         S^n(X)  =  (X << n) OR (X >> 32-n).\n      In the\
    \ above, X << n is obtained as follows: discard the left-most\n      n bits of\
    \ X and then pad the result with n zeroes on the right\n      (the result will\
    \ still be 32 bits).  X >> n is obtained by\n      discarding the right-most n\
    \ bits of X and then padding the result\n      with n zeroes on the left.  Thus\
    \ S^n(X) is equivalent to a\n      circular shift of X by n positions to the left.\n"
- title: 4. Message Padding
  contents:
  - "4. Message Padding\n   SHA-1 is used to compute a message digest for a message\
    \ or data file\n   that is provided as input.  The message or data file should\
    \ be\n   considered to be a bit string.  The length of the message is the\n  \
    \ number of bits in the message (the empty message has length 0).  If\n   the\
    \ number of bits in a message is a multiple of 8, for compactness\n   we can represent\
    \ the message in hex.  The purpose of message padding\n   is to make the total\
    \ length of a padded message a multiple of 512.\n   SHA-1 sequentially processes\
    \ blocks of 512 bits when computing the\n   message digest.  The following specifies\
    \ how this padding shall be\n   performed.  As a summary, a \"1\" followed by\
    \ m \"0\"s followed by a 64-\n   bit integer are appended to the end of the message\
    \ to produce a\n   padded message of length 512 * n.  The 64-bit integer is the\
    \ length\n   of the original message.  The padded message is then processed by\
    \ the\n   SHA-1 as n 512-bit blocks.\n   Suppose a message has length l < 2^64.\
    \  Before it is input to the\n   SHA-1, the message is padded on the right as\
    \ follows:\n   a. \"1\" is appended.  Example: if the original message is \"01010000\"\
    ,\n      this is padded to \"010100001\".\n   b. \"0\"s are appended.  The number\
    \ of \"0\"s will depend on the original\n      length of the message.  The last\
    \ 64 bits of the last 512-bit block\n      are reserved\n      for the length\
    \ l of the original message.\n      Example:  Suppose the original message is\
    \ the bit string\n         01100001 01100010 01100011 01100100 01100101.\n   \
    \   After step (a) this gives\n         01100001 01100010 01100011 01100100 01100101\
    \ 1.\n      Since l = 40, the number of bits in the above is 41 and 407 \"0\"\
    s\n      are appended, making the total now 448.  This gives (in hex)\n      \
    \   61626364 65800000 00000000 00000000\n         00000000 00000000 00000000 00000000\n\
    \         00000000 00000000 00000000 00000000\n         00000000 00000000.\n \
    \  c. Obtain the 2-word representation of l, the number of bits in the\n     \
    \ original message.  If l < 2^32 then the first word is all zeroes.\n      Append\
    \ these two words to the padded message.\n      Example: Suppose the original\
    \ message is as in (b).  Then l = 40\n      (note that l is computed before any\
    \ padding).  The two-word\n      representation of 40 is hex 00000000 00000028.\
    \  Hence the final\n      padded message is hex\n         61626364 65800000 00000000\
    \ 00000000\n         00000000 00000000 00000000 00000000\n         00000000 00000000\
    \ 00000000 00000000\n         00000000 00000000 00000000 00000028.\n      The\
    \ padded message will contain 16 * n words for some n > 0.\n      The padded message\
    \ is regarded as a sequence of n blocks M(1) ,\n      M(2), first characters (or\
    \ bits) of the message.\n"
- title: 5. Functions and Constants Used
  contents:
  - "5. Functions and Constants Used\n   A sequence of logical functions f(0), f(1),...,\
    \ f(79) is used in\n   SHA-1.  Each f(t), 0 <= t <= 79, operates on three 32-bit\
    \ words B, C,\n   D and produces a 32-bit word as output.  f(t;B,C,D) is defined\
    \ as\n   follows: for words B, C, D,\n      f(t;B,C,D) = (B AND C) OR ((NOT B)\
    \ AND D)         ( 0 <= t <= 19)\n      f(t;B,C,D) = B XOR C XOR D           \
    \             (20 <= t <= 39)\n      f(t;B,C,D) = (B AND C) OR (B AND D) OR (C\
    \ AND D)  (40 <= t <= 59)\n      f(t;B,C,D) = B XOR C XOR D                  \
    \      (60 <= t <= 79).\n   A sequence of constant words K(0), K(1), ... , K(79)\
    \ is used in the\n   SHA-1.  In hex these are given by\n      K(t) = 5A827999\
    \         ( 0 <= t <= 19)\n      K(t) = 6ED9EBA1         (20 <= t <= 39)\n   \
    \   K(t) = 8F1BBCDC         (40 <= t <= 59)\n      K(t) = CA62C1D6         (60\
    \ <= t <= 79).\n"
- title: 6. Computing the Message Digest
  contents:
  - "6. Computing the Message Digest\n   The methods given in 6.1 and 6.2 below yield\
    \ the same message digest.\n   Although using method 2 saves sixty-four 32-bit\
    \ words of storage, it\n   is likely to lengthen execution time due to the increased\
    \ complexity\n   of the address computations for the { W[t] } in step (c).  There\
    \ are\n   other computation methods which give identical results.\n"
- title: 6.1 Method 1
  contents:
  - "6.1 Method 1\n   The message digest is computed using the message padded as described\n\
    \   in section 4.  The computation is described using two buffers, each\n   consisting\
    \ of five 32-bit words, and a sequence of eighty 32-bit\n   words.  The words\
    \ of the first 5-word buffer are labeled A,B,C,D,E.\n   The words of the second\
    \ 5-word buffer are labeled H0, H1, H2, H3, H4.\n   The words of the 80-word sequence\
    \ are labeled W(0), W(1),..., W(79).\n   A single word buffer TEMP is also employed.\n\
    \   To generate the message digest, the 16-word blocks M(1), M(2),...,\n   M(n)\
    \ defined in section 4 are processed in order.  The processing of\n   each M(i)\
    \ involves 80 steps.\n   Before processing any blocks, the H's are initialized\
    \ as follows: in\n   hex,\n      H0 = 67452301\n      H1 = EFCDAB89\n      H2\
    \ = 98BADCFE\n      H3 = 10325476\n      H4 = C3D2E1F0.\n   Now M(1), M(2), ...\
    \ , M(n) are processed.  To process M(i), we\n   proceed as follows:\n      a.\
    \ Divide M(i) into 16 words W(0), W(1), ... , W(15), where W(0)\n         is the\
    \ left-most word.\n      b. For t = 16 to 79 let\n         W(t) = S^1(W(t-3) XOR\
    \ W(t-8) XOR W(t-14) XOR W(t-16)).\n      c. Let A = H0, B = H1, C = H2, D = H3,\
    \ E = H4.\n      d. For t = 0 to 79 do\n         TEMP = S^5(A) + f(t;B,C,D) +\
    \ E + W(t) + K(t);\n         E = D;  D = C;  C = S^30(B);  B = A; A = TEMP;\n\
    \      e. Let H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4\n  \
    \       + E.\n   After processing M(n), the message digest is the 160-bit string\n\
    \   represented by the 5 words\n         H0 H1 H2 H3 H4.\n"
- title: 6.2 Method 2
  contents:
  - "6.2 Method 2\n   The method above assumes that the sequence W(0), ... , W(79)\
    \ is\n   implemented as an array of eighty 32-bit words.  This is efficient\n\
    \   from the standpoint of minimization of execution time, since the\n   addresses\
    \ of W(t-3), ...  ,W(t-16) in step (b) are easily computed.\n   If space is at\
    \ a premium, an alternative is to regard { W(t) } as a\n   circular queue, which\
    \ may be implemented using an array of sixteen\n   32-bit words W[0], ... W[15].\
    \  In this case, in hex let\n   MASK = 0000000F.  Then processing of M(i) is as\
    \ follows:\n      a. Divide M(i) into 16 words W[0], ... , W[15], where W[0] is\
    \ the\n         left-most word.\n      b. Let A = H0, B = H1, C = H2, D = H3,\
    \ E = H4.\n      c. For t = 0 to 79 do\n         s = t AND MASK;\n         if\
    \ (t >= 16) W[s] = S^1(W[(s + 13) AND MASK] XOR W[(s + 8) AND\n         MASK]\
    \ XOR W[(s + 2) AND MASK] XOR W[s]);\n         TEMP = S^5(A) + f(t;B,C,D) + E\
    \ + W[s] + K(t);\n         E = D; D = C; C = S^30(B); B = A; A = TEMP;\n     \
    \ d. Let H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4\n       \
    \  + E.\n"
- title: 7. C Code
  contents:
  - "7. C Code\n   Below is a demonstration implementation of SHA-1 in C.  Section\
    \ 7.1\n   contains the header file, 7.2 the C code, and 7.3 a test driver.\n"
- title: 7.1 .h file
  contents:
  - '7.1 .h file

    '
- title: /*
  contents:
  - "/*\n *  sha1.h\n *\n *  Description:\n *      This is the header file for code\
    \ which implements the Secure\n *      Hashing Algorithm 1 as defined in FIPS\
    \ PUB 180-1 published\n *      April 17, 1995.\n *\n *      Many of the variable\
    \ names in this code, especially the\n *      single character names, were used\
    \ because those were the names\n *      used in the publication.\n *\n *     \
    \ Please read the file sha1.c for more information.\n *\n */\n"
- title: '#ifndef _SHA1_H_'
  contents:
  - '#ifndef _SHA1_H_

    '
- title: '#define _SHA1_H_'
  contents:
  - '#define _SHA1_H_

    '
- title: '#include <stdint.h>'
  contents:
  - '#include <stdint.h>

    '
- title: /*
  contents:
  - "/*\n * If you do not have the ISO standard stdint.h header file, then you\n *\
    \ must typdef the following:\n *    name              meaning\n *  uint32_t  \
    \       unsigned 32 bit integer\n *  uint8_t          unsigned 8 bit integer (i.e.,\
    \ unsigned char)\n *  int_least16_t    integer of >= 16 bits\n *\n */\n"
- title: '#ifndef _SHA_enum_'
  contents:
  - '#ifndef _SHA_enum_

    '
- title: '#define _SHA_enum_'
  contents:
  - '#define _SHA_enum_

    '
- title: enum
  contents:
  - 'enum

    '
- title: '{'
  contents:
  - "{\n    shaSuccess = 0,\n    shaNull,            /* Null pointer parameter */\n\
    \    shaInputTooLong,    /* input data too long */\n    shaStateError       /*\
    \ called Input after Result */\n"
- title: '};'
  contents:
  - '};

    '
- title: '#endif'
  contents:
  - '#endif

    '
- title: '#define SHA1HashSize 20'
  contents:
  - '#define SHA1HashSize 20

    '
- title: /*
  contents:
  - "/*\n *  This structure will hold context information for the SHA-1\n *  hashing\
    \ operation\n */\n"
- title: typedef struct SHA1Context
  contents:
  - 'typedef struct SHA1Context

    '
- title: '{'
  contents:
  - "{\n    uint32_t Intermediate_Hash[SHA1HashSize/4]; /* Message Digest  */\n  \
    \  uint32_t Length_Low;            /* Message length in bits      */\n    uint32_t\
    \ Length_High;           /* Message length in bits      */\n                 \
    \              /* Index into message block array   */\n    int_least16_t Message_Block_Index;\n\
    \    uint8_t Message_Block[64];      /* 512-bit message blocks      */\n    int\
    \ Computed;               /* Is the digest computed?         */\n    int Corrupted;\
    \             /* Is the message digest corrupted? */\n"
- title: '} SHA1Context;'
  contents:
  - '} SHA1Context;

    '
- title: /*
  contents:
  - "/*\n *  Function Prototypes\n */\n"
- title: int SHA1Reset(  SHA1Context *);
  contents:
  - 'int SHA1Reset(  SHA1Context *);

    '
- title: int SHA1Input(  SHA1Context *,
  contents:
  - "int SHA1Input(  SHA1Context *,\n                const uint8_t *,\n          \
    \      unsigned int);\n"
- title: int SHA1Result( SHA1Context *,
  contents:
  - "int SHA1Result( SHA1Context *,\n                uint8_t Message_Digest[SHA1HashSize]);\n"
- title: '#endif'
  contents:
  - '#endif

    '
- title: 7.2 .c file
  contents:
  - '7.2 .c file

    '
- title: /*
  contents:
  - "/*\n *  sha1.c\n *\n *  Description:\n *      This file implements the Secure\
    \ Hashing Algorithm 1 as\n *      defined in FIPS PUB 180-1 published April 17,\
    \ 1995.\n *\n *      The SHA-1, produces a 160-bit message digest for a given\n\
    \ *      data stream.  It should take about 2**n steps to find a\n *      message\
    \ with the same digest as a given message and\n *      2**(n/2) to find any two\
    \ messages with the same digest,\n *      when n is the digest size in bits. \
    \ Therefore, this\n *      algorithm can serve as a means of providing a\n * \
    \     \"fingerprint\" for a message.\n *\n *  Portability Issues:\n *      SHA-1\
    \ is defined in terms of 32-bit \"words\".  This code\n *      uses <stdint.h>\
    \ (included via \"sha1.h\" to define 32 and 8\n *      bit unsigned integer types.\
    \  If your C compiler does not\n *      support 32 bit unsigned integers, this\
    \ code is not\n *      appropriate.\n *\n *  Caveats:\n *      SHA-1 is designed\
    \ to work with messages less than 2^64 bits\n *      long.  Although SHA-1 allows\
    \ a message digest to be generated\n *      for messages of any number of bits\
    \ less than 2^64, this\n *      implementation only works with messages with a\
    \ length that is\n *      a multiple of the size of an 8-bit character.\n *\n\
    \ */\n"
- title: '#include "sha1.h"'
  contents:
  - '#include "sha1.h"

    '
- title: /*
  contents:
  - "/*\n *  Define the SHA1 circular left shift macro\n */\n"
- title: '#define SHA1CircularShift(bits,word) \'
  contents:
  - "#define SHA1CircularShift(bits,word) \\\n                (((word) << (bits))\
    \ | ((word) >> (32-(bits))))\n"
- title: /* Local Function Prototyptes */
  contents:
  - '/* Local Function Prototyptes */

    '
- title: void SHA1PadMessage(SHA1Context *);
  contents:
  - 'void SHA1PadMessage(SHA1Context *);

    '
- title: void SHA1ProcessMessageBlock(SHA1Context *);
  contents:
  - 'void SHA1ProcessMessageBlock(SHA1Context *);

    '
- title: /*
  contents:
  - "/*\n *  SHA1Reset\n *\n *  Description:\n *      This function will initialize\
    \ the SHA1Context in preparation\n *      for computing a new SHA1 message digest.\n\
    \ *\n *  Parameters:\n *      context: [in/out]\n *          The context to reset.\n\
    \ *\n *  Returns:\n *      sha Error Code.\n *\n */\n"
- title: int SHA1Reset(SHA1Context *context)
  contents:
  - 'int SHA1Reset(SHA1Context *context)

    '
- title: '{'
  contents:
  - "{\n    if (!context)\n    {\n        return shaNull;\n    }\n    context->Length_Low\
    \             = 0;\n    context->Length_High            = 0;\n    context->Message_Block_Index\
    \    = 0;\n    context->Intermediate_Hash[0]   = 0x67452301;\n    context->Intermediate_Hash[1]\
    \   = 0xEFCDAB89;\n    context->Intermediate_Hash[2]   = 0x98BADCFE;\n    context->Intermediate_Hash[3]\
    \   = 0x10325476;\n    context->Intermediate_Hash[4]   = 0xC3D2E1F0;\n    context->Computed\
    \   = 0;\n    context->Corrupted  = 0;\n    return shaSuccess;\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n *  SHA1Result\n *\n *  Description:\n *      This function will return the\
    \ 160-bit message digest into the\n *      Message_Digest array  provided by the\
    \ caller.\n *      NOTE: The first octet of hash is stored in the 0th element,\n\
    \ *            the last octet of hash in the 19th element.\n *\n *  Parameters:\n\
    \ *      context: [in/out]\n *          The context to use to calculate the SHA-1\
    \ hash.\n *      Message_Digest: [out]\n *          Where the digest is returned.\n\
    \ *\n *  Returns:\n *      sha Error Code.\n *\n */\n"
- title: int SHA1Result( SHA1Context *context,
  contents:
  - "int SHA1Result( SHA1Context *context,\n                uint8_t Message_Digest[SHA1HashSize])\n"
- title: '{'
  contents:
  - "{\n    int i;\n    if (!context || !Message_Digest)\n    {\n        return shaNull;\n\
    \    }\n    if (context->Corrupted)\n    {\n        return context->Corrupted;\n\
    \    }\n    if (!context->Computed)\n    {\n        SHA1PadMessage(context);\n\
    \        for(i=0; i<64; ++i)\n        {\n            /* message may be sensitive,\
    \ clear it out */\n            context->Message_Block[i] = 0;\n        }\n   \
    \     context->Length_Low = 0;    /* and clear length */\n        context->Length_High\
    \ = 0;\n        context->Computed = 1;\n    }\n    for(i = 0; i < SHA1HashSize;\
    \ ++i)\n    {\n        Message_Digest[i] = context->Intermediate_Hash[i>>2]\n\
    \                            >> 8 * ( 3 - ( i & 0x03 ) );\n    }\n    return shaSuccess;\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n *  SHA1Input\n *\n *  Description:\n *      This function accepts an array\
    \ of octets as the next portion\n *      of the message.\n *\n *  Parameters:\n\
    \ *      context: [in/out]\n *          The SHA context to update\n *      message_array:\
    \ [in]\n *          An array of characters representing the next portion of\n\
    \ *          the message.\n *      length: [in]\n *          The length of the\
    \ message in message_array\n *\n *  Returns:\n *      sha Error Code.\n *\n */\n"
- title: int SHA1Input(    SHA1Context    *context,
  contents:
  - "int SHA1Input(    SHA1Context    *context,\n                  const uint8_t \
    \ *message_array,\n                  unsigned       length)\n"
- title: '{'
  contents:
  - "{\n    if (!length)\n    {\n        return shaSuccess;\n    }\n    if (!context\
    \ || !message_array)\n    {\n        return shaNull;\n    }\n    if (context->Computed)\n\
    \    {\n        context->Corrupted = shaStateError;\n        return shaStateError;\n\
    \    }\n    if (context->Corrupted)\n    {\n         return context->Corrupted;\n\
    \    }\n    while(length-- && !context->Corrupted)\n    {\n    context->Message_Block[context->Message_Block_Index++]\
    \ =\n                    (*message_array & 0xFF);\n    context->Length_Low +=\
    \ 8;\n    if (context->Length_Low == 0)\n    {\n        context->Length_High++;\n\
    \        if (context->Length_High == 0)\n        {\n            /* Message is\
    \ too long */\n            context->Corrupted = 1;\n        }\n    }\n    if (context->Message_Block_Index\
    \ == 64)\n    {\n        SHA1ProcessMessageBlock(context);\n    }\n    message_array++;\n\
    \    }\n    return shaSuccess;\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n *  SHA1ProcessMessageBlock\n *\n *  Description:\n *      This function\
    \ will process the next 512 bits of the message\n *      stored in the Message_Block\
    \ array.\n *\n *  Parameters:\n *      None.\n *\n *  Returns:\n *      Nothing.\n\
    \ *\n *  Comments:\n *      Many of the variable names in this code, especially\
    \ the\n *      single character names, were used because those were the\n *  \
    \    names used in the publication.\n *\n *\n */\n"
- title: void SHA1ProcessMessageBlock(SHA1Context *context)
  contents:
  - 'void SHA1ProcessMessageBlock(SHA1Context *context)

    '
- title: '{'
  contents:
  - "{\n    const uint32_t K[] =    {       /* Constants defined in SHA-1   */\n \
    \                           0x5A827999,\n                            0x6ED9EBA1,\n\
    \                            0x8F1BBCDC,\n                            0xCA62C1D6\n\
    \                            };\n    int           t;                 /* Loop\
    \ counter                */\n    uint32_t      temp;              /* Temporary\
    \ word value        */\n    uint32_t      W[80];             /* Word sequence\
    \               */\n    uint32_t      A, B, C, D, E;     /* Word buffers     \
    \           */\n    /*\n     *  Initialize the first 16 words in the array W\n\
    \     */\n    for(t = 0; t < 16; t++)\n    {\n        W[t] = context->Message_Block[t\
    \ * 4] << 24;\n        W[t] |= context->Message_Block[t * 4 + 1] << 16;\n    \
    \    W[t] |= context->Message_Block[t * 4 + 2] << 8;\n        W[t] |= context->Message_Block[t\
    \ * 4 + 3];\n    }\n    for(t = 16; t < 80; t++)\n    {\n       W[t] = SHA1CircularShift(1,W[t-3]\
    \ ^ W[t-8] ^ W[t-14] ^ W[t-16]);\n    }\n    A = context->Intermediate_Hash[0];\n\
    \    B = context->Intermediate_Hash[1];\n    C = context->Intermediate_Hash[2];\n\
    \    D = context->Intermediate_Hash[3];\n    E = context->Intermediate_Hash[4];\n\
    \    for(t = 0; t < 20; t++)\n    {\n        temp =  SHA1CircularShift(5,A) +\n\
    \                ((B & C) | ((~B) & D)) + E + W[t] + K[0];\n        E = D;\n \
    \       D = C;\n        C = SHA1CircularShift(30,B);\n        B = A;\n       \
    \ A = temp;\n    }\n    for(t = 20; t < 40; t++)\n    {\n        temp = SHA1CircularShift(5,A)\
    \ + (B ^ C ^ D) + E + W[t] + K[1];\n        E = D;\n        D = C;\n        C\
    \ = SHA1CircularShift(30,B);\n        B = A;\n        A = temp;\n    }\n    for(t\
    \ = 40; t < 60; t++)\n    {\n        temp = SHA1CircularShift(5,A) +\n       \
    \        ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];\n        E = D;\n  \
    \      D = C;\n        C = SHA1CircularShift(30,B);\n        B = A;\n        A\
    \ = temp;\n    }\n    for(t = 60; t < 80; t++)\n    {\n        temp = SHA1CircularShift(5,A)\
    \ + (B ^ C ^ D) + E + W[t] + K[3];\n        E = D;\n        D = C;\n        C\
    \ = SHA1CircularShift(30,B);\n        B = A;\n        A = temp;\n    }\n    context->Intermediate_Hash[0]\
    \ += A;\n    context->Intermediate_Hash[1] += B;\n    context->Intermediate_Hash[2]\
    \ += C;\n    context->Intermediate_Hash[3] += D;\n    context->Intermediate_Hash[4]\
    \ += E;\n    context->Message_Block_Index = 0;\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n *  SHA1PadMessage\n *\n *  Description:\n *      According to the standard,\
    \ the message must be padded to an even\n *      512 bits.  The first padding\
    \ bit must be a '1'.  The last 64\n *      bits represent the length of the original\
    \ message.  All bits in\n *      between should be 0.  This function will pad\
    \ the message\n *      according to those rules by filling the Message_Block array\n\
    \ *      accordingly.  It will also call the ProcessMessageBlock function\n *\
    \      provided appropriately.  When it returns, it can be assumed that\n *  \
    \    the message digest has been computed.\n *\n *  Parameters:\n *      context:\
    \ [in/out]\n *          The context to pad\n *      ProcessMessageBlock: [in]\n\
    \ *          The appropriate SHA*ProcessMessageBlock function\n *  Returns:\n\
    \ *      Nothing.\n *\n */\n"
- title: void SHA1PadMessage(SHA1Context *context)
  contents:
  - 'void SHA1PadMessage(SHA1Context *context)

    '
- title: '{'
  contents:
  - "{\n    /*\n     *  Check to see if the current message block is too small to\
    \ hold\n     *  the initial padding bits and length.  If so, we will pad the\n\
    \     *  block, process it, and then continue padding into a second\n     *  block.\n\
    \     */\n    if (context->Message_Block_Index > 55)\n    {\n        context->Message_Block[context->Message_Block_Index++]\
    \ = 0x80;\n        while(context->Message_Block_Index < 64)\n        {\n     \
    \       context->Message_Block[context->Message_Block_Index++] = 0;\n        }\n\
    \        SHA1ProcessMessageBlock(context);\n        while(context->Message_Block_Index\
    \ < 56)\n        {\n            context->Message_Block[context->Message_Block_Index++]\
    \ = 0;\n        }\n    }\n    else\n    {\n        context->Message_Block[context->Message_Block_Index++]\
    \ = 0x80;\n        while(context->Message_Block_Index < 56)\n        {\n     \
    \       context->Message_Block[context->Message_Block_Index++] = 0;\n        }\n\
    \    }\n    /*\n     *  Store the message length as the last 8 octets\n     */\n\
    \    context->Message_Block[56] = context->Length_High >> 24;\n    context->Message_Block[57]\
    \ = context->Length_High >> 16;\n    context->Message_Block[58] = context->Length_High\
    \ >> 8;\n    context->Message_Block[59] = context->Length_High;\n    context->Message_Block[60]\
    \ = context->Length_Low >> 24;\n    context->Message_Block[61] = context->Length_Low\
    \ >> 16;\n    context->Message_Block[62] = context->Length_Low >> 8;\n    context->Message_Block[63]\
    \ = context->Length_Low;\n    SHA1ProcessMessageBlock(context);\n"
- title: '}'
  contents:
  - '}

    '
- title: 7.3 Test Driver
  contents:
  - "7.3 Test Driver\n   The following code is a main program test driver to exercise\
    \ the code\n   in sha1.c.\n"
- title: /*
  contents:
  - "/*\n *  sha1test.c\n *\n *  Description:\n *      This file will exercise the\
    \ SHA-1 code performing the three\n *      tests documented in FIPS PUB 180-1\
    \ plus one which calls\n *      SHA1Input with an exact multiple of 512 bits,\
    \ plus a few\n *      error test checks.\n *\n *  Portability Issues:\n *    \
    \  None.\n *\n */\n"
- title: '#include <stdint.h>'
  contents:
  - '#include <stdint.h>

    '
- title: '#include <stdio.h>'
  contents:
  - '#include <stdio.h>

    '
- title: '#include <string.h>'
  contents:
  - '#include <string.h>

    '
- title: '#include "sha1.h"'
  contents:
  - '#include "sha1.h"

    '
- title: /*
  contents:
  - "/*\n *  Define patterns for testing\n */\n"
- title: '#define TEST1   "abc"'
  contents:
  - '#define TEST1   "abc"

    '
- title: '#define TEST2a  "abcdbcdecdefdefgefghfghighijhi"'
  contents:
  - '#define TEST2a  "abcdbcdecdefdefgefghfghighijhi"

    '
- title: '#define TEST2b  "jkijkljklmklmnlmnomnopnopq"'
  contents:
  - '#define TEST2b  "jkijkljklmklmnlmnomnopnopq"

    '
- title: '#define TEST2   TEST2a TEST2b'
  contents:
  - '#define TEST2   TEST2a TEST2b

    '
- title: '#define TEST3   "a"'
  contents:
  - '#define TEST3   "a"

    '
- title: '#define TEST4a  "01234567012345670123456701234567"'
  contents:
  - '#define TEST4a  "01234567012345670123456701234567"

    '
- title: '#define TEST4b  "01234567012345670123456701234567"'
  contents:
  - "#define TEST4b  \"01234567012345670123456701234567\"\n    /* an exact multiple\
    \ of 512 bits */\n"
- title: '#define TEST4   TEST4a TEST4b'
  contents:
  - '#define TEST4   TEST4a TEST4b

    '
- title: char *testarray[4] =
  contents:
  - 'char *testarray[4] =

    '
- title: '{'
  contents:
  - "{\n    TEST1,\n    TEST2,\n    TEST3,\n    TEST4\n"
- title: '};'
  contents:
  - '};

    '
- title: long int repeatcount[4] = { 1, 1, 1000000, 10 };
  contents:
  - 'long int repeatcount[4] = { 1, 1, 1000000, 10 };

    '
- title: char *resultarray[4] =
  contents:
  - 'char *resultarray[4] =

    '
- title: '{'
  contents:
  - "{\n    \"A9 99 3E 36 47 06 81 6A BA 3E 25 71 78 50 C2 6C 9C D0 D8 9D\",\n   \
    \ \"84 98 3E 44 1C 3B D2 6E BA AE 4A A1 F9 51 29 E5 E5 46 70 F1\",\n    \"34 AA\
    \ 97 3C D4 C4 DA A4 F6 1E EB 2B DB AD 27 31 65 34 01 6F\",\n    \"DE A3 56 A2\
    \ CD DD 90 C7 A7 EC ED C5 EB B5 63 93 4F 46 04 52\"\n"
- title: '};'
  contents:
  - '};

    '
- title: int main()
  contents:
  - 'int main()

    '
- title: '{'
  contents:
  - "{\n    SHA1Context sha;\n    int i, j, err;\n    uint8_t Message_Digest[20];\n\
    \    /*\n     *  Perform SHA-1 tests\n     */\n    for(j = 0; j < 4; ++j)\n  \
    \  {\n        printf( \"\\nTest %d: %d, '%s'\\n\",\n                j+1,\n   \
    \             repeatcount[j],\n                testarray[j]);\n        err = SHA1Reset(&sha);\n\
    \        if (err)\n        {\n            fprintf(stderr, \"SHA1Reset Error %d.\\\
    n\", err );\n            break;    /* out of for j loop */\n        }\n      \
    \  for(i = 0; i < repeatcount[j]; ++i)\n        {\n            err = SHA1Input(&sha,\n\
    \                  (const unsigned char *) testarray[j],\n                  strlen(testarray[j]));\n\
    \            if (err)\n            {\n                fprintf(stderr, \"SHA1Input\
    \ Error %d.\\n\", err );\n                break;    /* out of for i loop */\n\
    \            }\n        }\n        err = SHA1Result(&sha, Message_Digest);\n \
    \       if (err)\n        {\n            fprintf(stderr,\n            \"SHA1Result\
    \ Error %d, could not compute message digest.\\n\",\n            err );\n    \
    \    }\n        else\n        {\n            printf(\"\\t\");\n            for(i\
    \ = 0; i < 20 ; ++i)\n            {\n                printf(\"%02X \", Message_Digest[i]);\n\
    \            }\n            printf(\"\\n\");\n        }\n        printf(\"Should\
    \ match:\\n\");\n        printf(\"\\t%s\\n\", resultarray[j]);\n    }\n    /*\
    \ Test some error returns */\n    err = SHA1Input(&sha,(const unsigned char *)\
    \ testarray[1], 1);\n    printf (\"\\nError %d. Should be %d.\\n\", err, shaStateError\
    \ );\n    err = SHA1Reset(0);\n    printf (\"\\nError %d. Should be %d.\\n\",\
    \ err, shaNull );\n    return 0;\n"
- title: '}'
  contents:
  - '}

    '
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   This document is intended to provide convenient\
    \ open source access by\n   the Internet community to the United States of America\
    \ Federal\n   Information Processing Standard Secure Hash Function SHA-1 [FIPS\n\
    \   180-1].  No independent assertion of the security of this hash\n   function\
    \ by the authors for any particular use is intended.\n"
- title: References
  contents:
  - "References\n   [FIPS 180-1] \"Secure Hash Standard\", United States of American,\n\
    \                National Institute of Science and Technology, Federal\n     \
    \           Information Processing Standard (FIPS) 180-1, April\n            \
    \    1993.\n   [MD4]        \"The MD4 Message Digest Algorithm,\" Advances in\n\
    \                Cryptology - CRYPTO '90 Proceedings, Springer-Verlag,\n     \
    \           1991, pp. 303-311.\n   [RFC 1320]   Rivest, R., \"The MD4 Message-Digest\
    \ Algorithm\", RFC\n                1320, April 1992.\n   [RFC 1321]   Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC\n                1321, April 1992.\n\
    \   [RFC 1750]   Eastlake, D., Crocker, S. and J. Schiller, \"Randomness\n   \
    \             Requirements for Security\", RFC 1750, December 1994.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Donald E. Eastlake, 3rd\n   Motorola\n   155 Beaver Street\n\
    \   Milford, MA 01757 USA\n   Phone:   +1 508-634-2066 (h)\n            +1 508-261-5434\
    \ (w)\n   Fax:     +1 508-261-4777\n   EMail:   Donald.Eastlake@motorola.com\n\
    \   Paul E. Jones\n   Cisco Systems, Inc.\n   7025 Kit Creek Road\n   Research\
    \ Triangle Park, NC 27709 USA\n   Phone:   +1 919 392 6948\n   EMail:   paulej@packetizer.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
