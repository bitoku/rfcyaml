- title: __initial_text__
  contents:
  - '                  X.400 Use of Extended Character Sets

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Since 1988, X.400 has had the capacity for carrying a large\
    \ number of\n   different character sets in a message by using the body part\n\
    \   \"GeneralText\" defined by ISO/IEC 10021-7.\n   Since 1992, the Internet also\
    \ has the means of passing around\n   messages containing multiple character sets,\
    \ by using the mechanism\n   defined in RFC-MIME.\n   This RFC defines a suggested\
    \ method of using \"GeneralText\" in order\n   to harmonize as much as possible\
    \ the usage of this body part.\n"
- title: 2.  General principles
  contents:
  - '2.  General principles

    '
- title: 2.1.  Goals
  contents:
  - "2.1.  Goals\n   The target of this memo is to define a way of using existing\n\
    \   standards to achieve:\n    (1)  in the short term, a standard for sending\
    \ E-mail in the\n         European languages (Latin letters with European accents,\n\
    \         Greek and Cyrillic)\n    (2)  in the medium term, extending this to\
    \ cover the Hebrew and\n         Arabic character sets\n    (3)  in the long term,\
    \ opening up true international E-mail by\n         allowing the full character\
    \ set specified in ISO-10646 to be\n         used.\n   The author believes that\
    \ this document gives a specification that can\n   easily accomodate the use of\
    \ any character set in the ISO registry,\n   and, by giving guidance rules for\
    \ choosing character sets, will help\n   interworking.\n"
- title: 2.2.  Families of character sets
  contents:
  - '2.2.  Families of character sets

    '
- title: 2.2.1.  ISO 6937/T.61
  contents:
  - "2.2.1.  ISO 6937/T.61\n   ISO 6937 is a code technique used and recommended in\
    \ T.51 and T.101\n   (Teletex and Videotex service) and in X.500, providing a\
    \ repertoire\n   of 333 characters from the Latin script by use of non- spacing\n\
    \   diacritical marks. It corresponds closely to CCITT recommendation\n   T.61.\n\
    \   The problem with that technique is that the character stream comes in\n  \
    \ two modes, i.e., some characters are coded with one byte and some\n   with two\
    \ (composite characters). This makes information processing\n   systems such as\
    \ an E-mail UA or GW more complex.\n   It is also not extensible to other languages\
    \ like Korean or Chinese,\n   or even Greek, without invoking the character set\
    \ switching\n   techniques of ISO 2022.\n"
- title: 2.2.2.  ISO 8859
  contents:
  - "2.2.2.  ISO 8859\n   ISO 8859 defines a set of character sets, each suitable\
    \ for use in\n   some group of languages. Each character in ISO 8859 is coded\
    \ in a\n   single byte.\n   There are currently 11 parts of ISO 8859, plus a \"\
    supplementary\" set,\n   registered as ISO IR 154. Most languages using single-byte\
    \ characters\n   can be written in one or another of the ISO 8859 sets.  There\
    \ are\n   sets covering Greek, Hebrew and Arabic, but there is still\n   controversy\
    \ over the problem of the rendering direction for Hebrew\n   and Arabic.\n   All\
    \ the ISO 8859 sets include US-ASCII as a subset. All use 8 bits.\n   ISO 8859\
    \ is regarded by many as a solution; for instance, the X\n   windows system now\
    \ comes with ISO-8859-1 as the \"standard\" character\n   set, with the possibility\
    \ of specifying others. But since the same\n   applications often do not support\
    \ character set switching within\n   text, it is problematic to use these in a\
    \ truly multilingual\n   environment.  (Also, most fonts claiming to be \"ISO-\
    \ 8859-1\" in X11R5\n   are actually 7-bit fonts. The implied lie is very unfortunate.)\n\
    \   It turns out to work fine, however, if the second language is\n   English,\
    \ since this can be written in all ISO 8859 sets.\n   The parts 3 and 4 have not\
    \ seen wide acceptance, and it is expected\n   that they will be discarded. They\
    \ should therefore not be used.\n   Note that an ISO 8859 set is actually 2 sets\
    \ in the ISO sense: US-\n   ASCII in the G0 set and another character set in the\
    \ G1 set.  The\n   overloading of the word \"character set\" is unfortunate, but\n\
    \   traditional.\n"
- title: 2.2.3.  ISO 10646
  contents:
  - "2.2.3.  ISO 10646\n   At the moment of writing, ISO 10646 has just been accepted\
    \ as an\n   International Standard. It is basically a 32-bit character set, with\n\
    \   all of the currently used characters being numbered by the first 16\n   bits,\
    \ leaving some room for expansion.\n   It is not possible to use ISO 10646 as\
    \ a normal character set,\n   because it does not conform to the rules for usage\
    \ of byte values set\n   down in ISO 2022 and other places; it uses the \"control\
    \ space\" for\n   (parts of) graphic character codes.\n   There are a number of\
    \ ways to encode ISO 10646 characters \"on the\n   wire\". There are methods within\
    \ the ISO 2022 standard to switch to\n   these, either as \"other coding system\
    \ without return\" or as \"other\n   coding system with return\" (that is, you\
    \ can go back from it to the\n   one you came from using an ISO 2022 escape sequence).\n\
    \   The following registrations have been made:\n    ISO 10646 UCS-2 Level 1 has\
    \ been registered with ESC 2/5 2/15 4/0,\n    ISO 10646 UCS-4 Level 1 has been\
    \ registered with ESC 2/5 2/15 4/1,\n   The following are applied for:\n    Reg#\
    \ Escape sequence  Standard/Sponsor   Description\n    174  ESC 2/5 2/15 F   ISO/IEC\
    \ 10646      UCS-2, Level 2\n    175  ESC 2/5 2/15 F   ISO/IEC 10646      UCS-4,\
    \ Level 2\n    176  ESC 2/5 2/15 F   ISO/IEC 10646      UCS-2, Level 3\n    177\
    \  ESC 2/5 2/15 F   ISO/IEC 10646      UCS-4, Level 3\n    178  ESC 2/5 F    \
    \    ISO/IEC 10646      UTF-1\n    << NOTE: The registration numbers for UCS-2\
    \ level 1 and UCS-4\n    level 1 are not known. Neither are the assigned final\
    \ characters\n    for the other sets. Information requested!>>\n   This character\
    \ set will become very important in the future, but at\n   the moment, few systems\
    \ are able to support this directly.\n   The GeneralText body part can be used\
    \ for carrying any of these\n   character sets.\n"
- title: 2.3.  Body parts that can be used in X.400
  contents:
  - "2.3.  Body parts that can be used in X.400\n   At the moment, no established\
    \ way of transferring a full set of\n   characters in X.400-based E-mail exists.\
    \  In the future, it is likely\n   that a new body part, based in ISO 10646, will\
    \ be available, or\n   GeneralText may be able to use ISO 10646, but this matter\
    \ has not yet\n   been clarified.\n   In the short term, the deployed and available\
    \ body parts are:\n    (1)  IA5Text\n    (2)  For X.400/84: ISO6937Text and Teletex\n\
    \    (3)  For X.400/88: GeneralText\n   IA5Text is the method of choice for E-mail\
    \ that contains only\n   characters from IA5 (equivalent to US-ASCII).\n   The\
    \ ISO6937Text body part is defined in the ISO DIS documents\n   corresponding\
    \ to X.400(84) [10]; these never became a standard, so\n   they are now quite\
    \ difficult to find. It is in principle limited to\n   using text that can be\
    \ presented in ISO 6937, but since ISO 6937\n   refers to the ISO 2022 method\
    \ of changing character sets, it is\n   theoretically possible to use any ISO\
    \ registered character set, but\n   there is no facility for announcing the character\
    \ sets used. This\n   makes interworking with equipment that does not support\
    \ the same\n   character sets complex.\n   It is still, however, the only body\
    \ part suitable for carrying non-\n   paginated text in non-basic character sets\
    \ in X.400(84).\n   Teletex, which is identical in all versions of the X.400 standard,\n\
    \   has the same problem of implicit ISO6937, but has the added problem\n   that\
    \ it also specifies a page format, with, for instance, a left\n   margin of 5\
    \ character positions. This is often not desirable.\n   The details of Teletex\
    \ are specified in recommendation T.51 and its\n   relatives.\n   GeneralText\
    \ is defined in ISO 10021-8, the part of [9] that\n   corresponds to CCITT recommendation\
    \ [11]. It is an Extended body\n   part, so no modification to CCITT implementations\
    \ is needed to carry\n   it.\n   GeneralText is suitable for interchange, since\
    \ it has got proper\n   announcement facilities. It can use any number of character\
    \ sets, and\n   announces them both in the Encoded Information Types of the X.400\n\
    \   envelope and the parameters of the body part.\n   We recommend this body part\
    \ for carrying unformatted text in\n   X.400/88.\n"
- title: 3.  GUIDELINES FOR THE GENERATION OF GENERALTEXT
  contents:
  - '3.  GUIDELINES FOR THE GENERATION OF GENERALTEXT

    '
- title: 3.1.  Formal definition of GeneralText
  contents:
  - "3.1.  Formal definition of GeneralText\n   A GeneralText message is a byte stream\
    \ that contains characters and\n   character switching sequences according to\
    \ [12].\n   The X.400 ASN.1 definition of the GeneralText body part is:\n    general-text-body-part\
    \ EXTENDED-BODY-PART-TYPE\n        PARAMETERS GeneralTextParameters IDENTIFIED\
    \ BY id-ep-general-text\n        DATA       GeneralTextData\n        ::= id-et-general-text\n\
    \    GeneralTextParameters ::= SET OF CharacterSetRegistration\n    CharacterSetRegistration\
    \ ::= INTEGER (1..32767)\n    GeneralTextData ::= GeneralString\n   The definition\
    \ is from ISO/IEC 10021-7 [9], Annex I, with\n   modifications made in the MHS\
    \ Implementor' Guide, version 8, chapter\n   3.6.3, bullet F130. It does not appear\
    \ in the CCITT version of the\n   standards.\n"
- title: 3.2.  Brief description of ISO 2022 character set switching
  contents:
  - "3.2.  Brief description of ISO 2022 character set switching\n   There are 4 graphic\
    \ character sets active at any time in a\n   GeneralText message, called G0, G1,\
    \ G2 and G3. In addition, there are\n   2 control character sets, called C0 and\
    \ C1.\n   At any moment, one of the sets G0-G3 is active in code positions 2/1\n\
    \   to 7/14, and another is active in code positions 10/0 to 15/15. The\n   setting\
    \ is achieved by so-called \"locking shift\" sequences.\n   (Formally, code positions\
    \ 2/0 and 7/15 are reserved for \"space\" and\n   \"DEL\" respectively, and only\
    \ 94-character character sets can be used\n   in G0. In practice, this restriction\
    \ is sometimes ignored)\n   Single characters from the non-active sets may be\
    \ invoked by the use\n   of \"single shift\" sequences.\n   The control character\
    \ sets always occupy the code positions 0/0 to\n   1/15 (C0) and 8/0 to 9/15 (C1).\n\
    \   The character sets currently active as G0-G3 and C0-C1 may be changed\n  \
    \ using \"character set designating sequences\".\n   At the beginning of a GeneralText\
    \ message, one must always assume\n   that set 2 (IA5) is active as G0, shifted\
    \ into the lower half, that\n   set 1 (standard) is active as C0, and that no\
    \ G1-G3 or C1 set is\n   invoked. This is specified in the definition of \"GeneralString\"\
    \ in\n   [5], the definition of ASN.1 encoding (section 23.5.2).\n   If this is\
    \ not a suitable initial state, a message must always start\n   with the necessary\
    \ announcers and escape sequences to designate and\n   invoke the character sets\
    \ that are actually used.  The character sets\n   in use may be changed later\
    \ in the message by use of escape\n   sequences.\n   The parameters of a GeneralText\
    \ message always list all the character\n   sets used, by quoting their ISO reference\
    \ numbers.\n   It is impossible to use a character set not registered with ISO\
    \ in a\n   GeneralText message.\n   It is also impossible to decide on the true\
    \ meaning of a byte in a\n   GeneralText message without scanning the whole message\
    \ for shift and\n   escape sequences.\n"
- title: 3.3.  How to use the character sets
  contents:
  - "3.3.  How to use the character sets\n   RECOMMENDATION:\n   When the text to\
    \ be rendered is representable in one of the character\n   sets of ISO-8859, the\
    \ G0 set should be set to ISO 646 International\n   Reference Version (1991),\
    \ also called US-ASCII, ISO-IR-6.\n   The older character set ISO-IR-2, ISO 646\
    \ IRV(1983), should NOT be\n   used.  This means that the escape sequence ESC\
    \ 2/8 4/2 (designating\n   US-ASCII as G0) should always occur at the beginning\
    \ of the message.\n   The G1 set should be set to the character set identified\
    \ by the\n   relevant ISO-8859 part. G2 and G3 are not used.\n   This corresponds\
    \ to the first level of ISO 4873 usage.\n   For the currently defined parts of\
    \ ISO 8859, the character set\n   designations for the G1 set are (relative to\
    \ ISO 8859:1987):\n    Part    ISO IR name             Escape sequence Remarks\n\
    \                                    for G1 use\n    1       ISO-IR-100      \
    \        Esc 2D 41    West Europe (Latin-1)\n    2       ISO-IR-101          \
    \    Esc 2D 42    East European (Latin-2)\n    3       ISO-IR-109            \
    \  Esc 2D 43    (Latin-3)\n    4       ISO-IR-110              Esc 2D 44    (Latin-4)\n\
    \    5       ISO-IR-144              Esc 2D 4C    Cyrillic\n    6       ISO-IR-127\
    \              Esc 2D 47    Arabic\n    7       ISO-IR-126              Esc 2D\
    \ 46    Greek\n    8       ISO-IR-138              Esc 2D 48    Hebrew\n    9\
    \       ISO-IR-148              Esc 2D 4D    Turkish (Latin-5)\n    10      ISO-IR-157\
    \              Not listed   Sami (Latin-6)\n   The escape sequence for 8859-10\
    \ (Latin-6) is not listed in RFC 1345.\n   NOTE: The use of ISO 8859-3 and ISO\
    \ 8859-4 is NOT recommended if\n   other possibilities exist.\n   NOTE: There\
    \ is a debate about the Arabic and Hebrew character sets.\n   These languages\
    \ are normally read right to left, but encodings have\n   been done in both \"\
    visual\" (left to right) and \"phonetic\" (right to\n   left) ordering, there\
    \ is significant disagreement about what the\n   \"right\" way to do it is, and\
    \ the character sets mentioned do not\n   specify it. So, one should be careful\
    \ not to use these character sets\n   until a standard is agreed upon, or the\
    \ result will probably be\n   unreadable (siht ekil).\n   (Note that there is\
    \ some confusion as to what parts are actually\n   standardized; the Norwegian\
    \ standards institute reports that only\n   part 1, 2, 3, 4, 6, 7 and 8 are currently\
    \ standards. Other reports\n   claim that both 8859-10 and 8859-11 are standards,\
    \ and I definitely\n   think that 8859-9 is.)\n   NOTE: ISO has not ruled out\
    \ the possibility of changing the ISO 8859\n   standard. This would involve changing\
    \ the registry information in\n   this table, so this should be assumed valid\
    \ for ISO 8859 versions\n   that are current in 1993.\n   The G1 set should be\
    \ permanently shifted into the upper half of the\n   code page.\n   When the text\
    \ is not representable in one of the ISO-8859 character\n   sets, the following\
    \ rules may be applied:\n    (1)  If any Latin characters are used, keep IA5 as\
    \ the G0 set.\n    (2)  If a mainstream character set is used (Greek, Cyrillic,\n\
    \         Hebrew, Arabic), designate this as the G1 character set,\n         and\
    \ permanently shift this into the upper half of the code\n         page (LS1R).\n\
    \         EXCEPTION: The Japanese community has a long tradition of\n        \
    \ switching between the Japanese 16-bit character set\n         ISO-IR-87 and\
    \ US-ASCII as the G0 set. See [7]\n         for details. If ISO-IR-87 is used,\
    \ that technique should be\n         used instead of the one recommended here.\n\
    \    (3)  If occasional extensions to a character set that is\n         basically\
    \ Latin occur (like accents, national variants\n         and so on), and these\
    \ are available in a single character\n         set, designate the relevant set\
    \ as G2 and use single\n         shift (SS2) to invoke characters from this character\
    \ set.\n         The ISO 8859 supplementary set, ISO-IR-154, is recommended\n\
    \         for this purpose.\n         This corresponds to the ISO 4873 \"second\
    \ level\" application.\n    (4)  If two non-Latin character sets are used, the\
    \ second should\n         be designated as G3, and shifted into the upper half\
    \ of the\n         code page by the use of Locking Shift 3 Right (LS3R).\n   \
    \      This corresponds to the ISO 4873 \"third level\" application.\n    (5)\
    \  If avoidable, use of character sets with floating accents,\n         like ISO\
    \ 6937, should be avoided.\n    (6)  The shifts changing the lower half of the\
    \ code table (SI/SO,\n         LS2 and LS3) should NOT be used.\n   RATIONALE:\
    \ Keeping the G0 set reserved for US-ASCII will ensure that\n   text in US-ASCII\
    \ has the same bit representation always.\n   The use of the upper code page for\
    \ other scripts ensures that both\n   text in these languages and text of this\
    \ type mixed with English can\n   be represented without the use of shift sequences.\n\
    \   If the language and/or content of a text is completely unknown,\n   chapter\
    \ 5 gives an algorithm that may be used to decide upon the\n   character sets.\
    \ This might, for instance, be suitable for use at\n   automatic mail gateways.\n\
    \   NOTE: At the time of this writing, few applications that use ISO 4873\n  \
    \ level 2 and level 3 encoding exist. It has been estimated that\n   implementing\
    \ them in an application that already uses a rich\n   repertoire of characters\
    \ is a matter of programmer-days, not\n   programmer-months, but this has not\
    \ been proven.\n"
- title: 4.  GUIDELINES FOR THE RENDERING OF GENERALTEXT
  contents:
  - "4.  GUIDELINES FOR THE RENDERING OF GENERALTEXT\n   As a basic rule, one should\
    \ NOT assume that any of the rules above\n   are followed.\n   An user agent capable\
    \ of rendering GeneralText should:\n    (1)  ALWAYS be able to identify and render\
    \ characters in IA5, no\n         matter how they are designated and invoked.\n\
    \    (2)  ALWAYS be able to identify and render characters in the\n         \"\
    native\" character sets, no matter how they are designated\n         and invoked.\n\
    \    (3)  ALWAYS indicate the presence of characters that cannot be\n        \
    \ adequately represented on the current output device.\n    (4)  NEVER render\
    \ a character in an unknown or unrepresentable\n         character set by displaying\
    \ the character in the same bit\n         position in the native character set.\n\
    \    (5)  PREFERABLY be able to identify and render characters that are\n    \
    \     the same as characters in the \"native\" character sets, even\n        \
    \ though they are designated and invoked as part of other\n         character\
    \ sets.  This applies in particular to the\n         \"invariant\" part of ISO\
    \ 8859, parts 1 through 6.\n    (6)  PREFERABLY be able to combine the floating\
    \ accents of ISO\n         6937 with their base characters for suitable rendering\
    \ using\n         the capabilities of the current output device.\n    (7)  PREFERABLY\
    \ be able to display text both in a mode using\n         fallbacks for nonrenderable\
    \ characters and in a mode\n         designating nonrenderable characters as such.\n\
    \    (8)  PREFERABLY be able to save the content of a GeneralText\n         message\
    \ to a file or other suitable media, saving all\n         character set information,\
    \ for later processing by other\n         means.  It is not illegal to render\
    \ the character set\n         information into a different format; however, it\
    \ should be\n         noted that it is easy to lose vital information if the format\n\
    \         chosen for representing character sets does not offer the\n        \
    \ possibility of referencing all character sets in the ISO\n         registry\
    \ of character sets.\n   These requirements also apply to gateways that transform\
    \ the message\n   into some other format, for example a gateway that transforms\
    \ a\n   message into MIME using [7] for the purpose.\n"
- title: 5.  RECOMMENDATION FOR SELECTION OF CHARACTER SETS
  contents:
  - '5.  RECOMMENDATION FOR SELECTION OF CHARACTER SETS

    '
- title: 5.1.  Algorithm for selection of character sets
  contents:
  - "5.1.  Algorithm for selection of character sets\n   When one has text in which\
    \ characters from several character sets\n   occurs, and wants to process this\
    \ into a GeneralText document, it is\n   often hard to guess right at the character\
    \ sets to select.\n   The following paragraphs give an algorithm that can be started\
    \ at the\n   beginning of a message, and at the end of it, return a set of\n \
    \  character sets that can be used as G0..G3 character sets, OR an\n   indication\
    \ that the task is impossible.\n    VARIABLES:\n    UsedSets\n         The set\
    \ of character sets that MUST be used for this message\n    UsableSets\n     \
    \    The set of character sets that MAY be used for this message.\n         Each\
    \ set also contains a counter for each character position.\n    PossibleSets\n\
    \         The set of all the character sets known to be usable in the\n      \
    \   destination format.\n         ALGORITHM:\n    1)   Add IA5 (ISO-IR-6) to the\
    \ UsedSets (as G0).\n    2)   Get the next character of the text.  If the text\
    \ is\n         completely analyzed, go to FINISHED\n    3)   If it is in the UsedSets,\
    \ go to 2).\n    4)   Find the set of character sets from PossibleSets in which\
    \ the\n         character occurs. If it does not occur in any, report\n      \
    \   failure.\n    5)   If it is in a single character set in PossibleSets only,\
    \ add\n         this set to UsedSets, and go to 2).\n    6)   If it is in more\
    \ than one character set, add these to\n         PossibleSets (if not already\
    \ present), and increment the\n         counter for that character in all the\
    \ sets. Go to 2).\n    FINISHED)\n    1)   (FINAL SELECTION) Remove any character\
    \ set in UsedSets from\n         PossibleSets.\n         Zero the counters for\
    \ any character in PossibleSets that also\n         occurs in UsedSets.\n    \
    \     WHILE (more characters left)\n           Select one character set and move\
    \ it from PossibleSets to\n           UsedSqets.\n           Zero the counters\
    \ for all characters in this set in the other\n           PossibleSets.\n    \
    \     END WHILE\n         This step can be \"tuned\" any way you want, for instance\
    \ by\n         choosing the character sets most likely to be understood at\n \
    \        the destination first, choosing the character sets covering\n       \
    \  the most characters first, avoiding multi-byte character sets\n         as\
    \ long as possible, or any other scheme suitable for the\n         application.\n"
- title: 5.2.  WHAT TO DO ON FAILURE
  contents:
  - "5.2.  WHAT TO DO ON FAILURE\n   Failure will occur in this schema if a character\
    \ is found that is not\n   in the PossibleSets. It may then be handled in one\
    \ of the following\n   ways:\n    (1)  Replace the character with the SUB control\
    \ character\n    (2)  Replace the character with Keld Simonsen Mnemonics [8].\n\
    \         This is a reversible transformation as long as the\n         recipient\
    \ is aware that it has been used, but requires\n         passing out-of-band information\
    \ to indicate this.\n    (3)  Replace the lost characters with any suitable fallback\
    \ or\n         mnemonic scheme intended for human understanding\n    (4)  Bounce\
    \ the message/refuse the conversion/give up.\n   The action to be taken may be\
    \ different based on the percentage of\n   \"lost\" characters.\n   If the message\
    \ has \"controls\" like \"conversion with loss prohibited\",\n   only the last\
    \ possibility may be used.\n"
- title: 5.3.  RECOMMENDED CHARACTER SETS
  contents:
  - "5.3.  RECOMMENDED CHARACTER SETS\n   There are 2 steps in the algorithm above\
    \ that are left for local\n   judgement:\n    (1)  Selection of the sets to appear\
    \ in PossibleSets.\n    (2)  The algorithm for deciding which character set to\
    \ select in\n         step 9.\n   In the context of generating X.400 GeneralText\
    \ messages, the\n   following is recommended:\n    Sets in PossibleSets:\n   \
    \ ISO-IR-6        Esc 28 42 (G0)  US-ASCII, IA5, ISO646\n    ISO-IR-100      Esc\
    \ 2D 41 (G1)  ISO-8859-1   West Europe\n    ISO-IR-101      Esc 2D 42 (G1)  ISO-8859-2\
    \   Central/Eastern Europe\n    ISO-IR-144      Esc 2D 4C (G1)  ISO-8859-5   Cyrillic\n\
    \    ISO-IR-127      Esc 2D 47 (G1)  ISO-8859-6   Arabic\n    ISO-IR-126     \
    \ Esc 2D 46 (G1)  ISO-8859-7   Greek\n    ISO-IR-138      Esc 2D 48 (G1)  ISO-8859-8\
    \   Hebrew\n    ISO-IR-148      Esc 2D 4D (G1)  ISO-8859-9   Turkish\n   The following\
    \ multi-byte character sets are recommended:\n    ISO-IR-87 (Japanese JIS C6226-1983)\
    \     Esc 24 29 42 (G1)\n    ISO-IR-149 (Korean KS C 5601-1989)      Esc 24 29\
    \ 43 (G1)\n    ISO-IR-58 (Chinese GB 2312-80)          Esc 24 29 41 (G1)\n   It\
    \ is a STRONG recommendation that character sets not listed above,\n   which do\
    \ not add any new characters to the total set of characters\n   given by the character\
    \ sets above, should NOT be used in X.400\n   interchange.\n   ISO-IR-87 is the\
    \ Japanese character set that is allowed in a Teletex\n   string, such as the\
    \ subject field.\n   NOTE: ISO-IR-87 has been \"superseded\" by ISO-IR-168, which\
    \ allows two\n   extra Kanji characters. Any application that handles ISO-IR-87\
    \ should\n   also be able to handle ISO-IR-168.\n   Algorithm for selecting character\
    \ sets:\n   Start at the top of the list above, and add each set only if it is\n\
    \   needed.\n"
- title: 6.  REFERENCES
  contents:
  - "6.  REFERENCES\n   [1]  Information technology - ISO 8-bit code for information\n\
    \        interchange - Structure and rules for implementation, Third\n       \
    \ edition, 1991-12-15.\n   [2]  Information technology - 8-bit single-byte coded\
    \ graphic\n        character sets (parts 1-11; the parts have different dates,\
    \ the\n        ones referenced here are from RFC 1345).\n   [3]  Information technology\
    \ - Coded graphic character set for text\n        communication (parts 1 and 2;\
    \ part 2 dated 1983-12-15).\n   [4]  Code for the representation of names of languages.\
    \ 1988 version.\n   [5]  CCITT Recommendation X.209(1988): Specification of Basic\n\
    \        Encoding Rules for Abstract Syntax Notation One (ASN.1).\n        Technically\
    \ aligned with ISO 8825 and ISO 8825/AD 1.\n   [6]  Information Technology - Universal\
    \ Multiple-Octet Coded\n        Character Set (UCS) - ISO 10646.\n   [7]  Murai,\
    \ J., Crispin M., and E. van der Poel, \"Japanese Character\n        Encoding\
    \ for Internet Message Bodies\", RFC 1468, Keio\n        University, Panda Programming,\
    \ June 1993.\n   [8]  Simonsen, K., \"Character Mnemonics & Character Sets\",\
    \ RFC 1345,\n        Rationel Almen Planlaegning, June 1992.\n   [9]  Information\
    \ Technology - Text communication - Message- Oriented\n        Text Interchange\
    \ Systems (MOTIS) - ISO 10021  - October 1988.\n   [10] ISO DIS documents describing\
    \ X.400/84 with slight extensions.\n        Now very hard to get copies of, since\
    \ they failed to become\n        ISes.\n   [11] CCITT Recommendation X.420 (1988),\
    \ Interpersonal Messaging\n        System.\n   [12] International Standard--Information\
    \ Processing-- ISO 7-bit and\n        8-bit coded character sets--Code extension\
    \ techniques, ISO\n        2022:1986.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   Harald Tveit Alvestrand\n   SINTEF DELAB\n   N-7034\
    \ Trondheim\n   NORWAY\n   EMail: Harald.Alvestrand@delab.sintef.no\n"
