- contents:
  - "               Framework and Security Considerations for\n          Session Initiation
    Protocol (SIP) URI-List Services\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document describes the need for SIP URI-list services and\n
    \  provides requirements for their invocation.  Additionally, it defines\n   a
    framework for SIP URI-list services, which includes security\n   considerations
    applicable to these services.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................2\n   3.
    Requirements ....................................................2\n      3.1.
    Requirements for URI-List Services Using\n           Request-Contained Lists ....................................3\n
    \     3.2. General Requirements for URI-List Services .................3\n   4.
    Framework .......................................................3\n      4.1.
    Carrying URI Lists in SIP ..................................3\n      4.2. Processing
    of URI Lists ....................................4\n      4.3. Results ....................................................5\n
    \  5. Security Considerations .........................................5\n      5.1.
    List Integrity and Confidentiality .........................5\n      5.2. Amplification
    Attacks ......................................5\n      5.3. General Issues .............................................7\n
    \  6. IANA Considerations .............................................7\n   7.
    Acknowledgements ................................................8\n   8. References
    ......................................................8\n      8.1. Normative
    References .......................................8\n      8.2. Informative References
    .....................................8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Some applications require that, at a given moment, a SIP
    [RFC3261] UA\n   (User Agent) performs a similar transaction with a number of
    remote\n   UAs.  For example, an instant messaging application that needs to\n
    \  send a particular message (e.g., \"Hello folks\") to n receivers needs\n   to
    send n MESSAGE requests; one to each receiver.\n   When the transaction that needs
    to be repeated consists of a large\n   request, or when the number of recipients
    is high, or both, the\n   access network of the UA needs to carry a considerable
    amount of\n   traffic.  Completing all the transactions on a low-bandwidth access\n
    \  would require a long time.  This is unacceptable for a number of\n   applications.\n
    \  A solution to this problem consists of introducing URI-list services\n   in
    the network.  The task of a SIP URI-list service is to receive a\n   request that
    contains or references a URI list (i.e., a list of one\n   or more URIs) and send
    a number of similar requests to the\n   destinations in this list.  Once the requests
    are sent, the URI-list\n   service typically informs the UA about their status.
    \ Effectively,\n   the URI-list service behaves as a B2BUA (Back-to-Back-User-Agent).\n
    \  A given URI-list service can take as an input a URI list contained in\n   the
    SIP request sent by the client or an external URI list (e.g., the\n   Request-URI
    is a SIP URI that is associated with a URI list at the\n   server).  External
    URI lists are typically set up using out-of-band\n   mechanisms (e.g., XML Configuration
    Access Protocol (XCAP)\n   [RFC4825]).  An example of a URI-list service for SUBSCRIBE
    requests\n   that uses stored URI lists is described in [RFC4662].\n   The remainder
    of this document provides requirements and a framework\n   for URI-list services
    using request-contained URI lists, external URI\n   lists, or both.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Requirements\n   Section 3.1 discusses requirements that only apply to URI-list\n
    \  services that use request-contained lists, and Section 3.2 discusses\n   requirements
    that also apply to services using external lists.\n"
  - contents:
    - "3.1.  Requirements for URI-List Services Using Request-Contained Lists\n   REQ
      1:  The URI-list service invocation mechanism MUST allow the\n           invoker
      to provide a list of destination URIs to the URI-list\n           service.\n
      \  REQ 2:  The invocation mechanism SHOULD NOT require more than one\n           transaction.\n"
    title: 3.1.  Requirements for URI-List Services Using Request-Contained Lists
  - contents:
    - "3.2.  General Requirements for URI-List Services\n   GEN 1:  A URI-list service
      MAY include services beyond sending\n           requests to the URIs in the
      URI list.  That is, URI-list\n           services can be modeled as application
      servers.  For example,\n           a URI-list service handling INVITE requests
      may behave as a\n           conference server and perform media mixing for all
      the\n           participants.\n   GEN 2:  The interpretation of the meaning
      of the URI list sent by the\n           invoker MUST be at the discretion of
      the application to which\n           the list is sent.\n   GEN 3:  It MUST be
      possible for the invoker to find out about the\n           result of the operations
      performed by the URI-list service\n           with the URI list.  An invoker
      may, for instance, be\n           interested in the status of the transactions
      initiated by the\n           URI-list service.\n   GEN 4:  URI-list services
      MUST NOT send requests to any destination\n           without authenticating
      the invoker.\n"
    title: 3.2.  General Requirements for URI-List Services
  title: 3.  Requirements
- contents:
  - "4.  Framework\n   This framework is not restricted to application servers that
    only\n   provide request fan-out services.  Per GEN 1, this framework also\n   deals
    with application servers that provide a particular service that\n   includes a
    request fan-out (e.g., a conference server that INVITEs\n   several participants
    that are chosen by a user agent).\n"
  - contents:
    - "4.1.  Carrying URI Lists in SIP\n   The requirements related to URI-list services
      that use request-\n   contained lists identify the need for a mechanism to provide
      a SIP\n   URI-list service with a URI list in a single transaction.  We define\n
      \  a new disposition type [RFC2183] for the Content-Disposition header\n   field:
      recipient-list.  Both requests and responses MAY carry\n   recipient-list bodies.
      \ Bodies whose disposition type is recipient-\n   list carry a list of URIs
      that contains the final recipients of the\n   requests to be generated by a
      URI-list service.\n   The default format for recipient-list bodies is service
      specific.\n   So, URI-list services specifications MUST specify a default format\n
      \  for recipient-list bodies used within a particular service.  In any\n   case,
      clients SHOULD NOT include any particular URI more than once in\n   a given
      URI list.\n   A UA server receiving a request with more than one recipient-list\n
      \  body parts (e.g., each body part using a different URI-list format)\n   MUST
      behave as if it had received a single URI list that contains all\n   the URIs
      present in the different body parts.\n   A UA server receiving a recipient-list
      URI list that contains a URI\n   more than once MUST behave as if that URI appeared
      in the URI list\n   only once.  The UA server uses the comparison rules specific
      to the\n   URI scheme of each of the URIs in the URI list to determine if there\n
      \  is any URI that appears more than once.  Additionally, Section 4 of\n   \"Extensible
      Markup Language (XML) Format Extension for Representing\n   Copy Control Attributes
      in Resource Lists\" [RFC5364] discusses cases\n   where duplicated URI entries
      are tagged with different values of the\n   'copyControl' attribute.  Naturally,
      URI-list services using the\n   'copyControl' attribute defined in [RFC5364]
      need to follow the\n   recommendations in [RFC5364] with respect to avoiding
      sending\n   duplicated requests.\n   The way a UA server interprets a URI list
      that it has received is\n   service specific, as described in Section 4.2.\n"
    title: 4.1.  Carrying URI Lists in SIP
  - contents:
    - "4.2.  Processing of URI Lists\n   According to GEN 1 and GEN 2, URI-list services
      can behave as\n   application servers.  That is, taking a URI list as an input,
      they\n   can provide arbitrary services.  So, the interpretation of the URI\n
      \  list by the server depends on the service to be provided.  For\n   example,
      for a conference server, the URIs in the list may identify\n   the initial set
      of participants.  On the other hand, for a server\n   dealing with MESSAGEs,
      the URIs in the list may identify the\n   recipients of an instant message.\n
      \  At the SIP level, this implies that the behavior of application\n   servers
      receiving requests with URI lists SHOULD be specified on a\n   per-service basis.
      \ Examples of such specifications are [RFC5366] for\n   INVITE, [RFC5365] for
      MESSAGE, and [RFC5367] for SUBSCRIBE.\n"
    title: 4.2.  Processing of URI Lists
  - contents:
    - "4.3.  Results\n   According to GEN 3, user agents should have a way to obtain\n
      \  information about the operations performed by the application server.\n   Since
      these operations are service specific, the way user agents are\n   kept informed
      is also service specific.  For example, a user agent\n   establishing an ad
      hoc conference with an INVITE with a URI list may\n   discover which participants
      were successfully brought into the\n   conference by using the conference package
      [RFC4575].\n"
    title: 4.3.  Results
  title: 4.  Framework
- contents:
  - "5.  Security Considerations\n   Security plays an important role in the implementation
    of any URI-\n   list service.  In fact, it is the most important common area across\n
    \  all types of URI-list services.\n   By definition, a URI-list service takes
    one request in and sends a\n   potentially large number of them out.  Attackers
    may attempt to use\n   URI-list services as traffic amplifiers to launch DoS (denial-of-\n
    \  service) attacks.  This section provides guidelines to avoid these\n   attacks.\n"
  - contents:
    - "5.1.  List Integrity and Confidentiality\n   Attackers may attempt to modify
      URI lists sent from clients to\n   servers.  This would cause a different behavior
      at the server than\n   expected by the client (e.g., requests being sent to
      different\n   recipients than the ones specified by the client).  To prevent
      this\n   attack, clients SHOULD integrity protect URI lists using end-to-end\n
      \  mechanisms such as S/MIME or, if not available, hop-by-hop mechanisms\n   such
      as TLS.  Both S/MIME and TLS can also provide URI-list\n   confidentiality if
      needed.\n"
    title: 5.1.  List Integrity and Confidentiality
  - contents:
    - "5.2.  Amplification Attacks\n   URI-list services take a request in and send
      a potentially large\n   number of them out.  Given that URI-list services are
      typically\n   implemented on top of powerful servers with high-bandwidth access\n
      \  links, we should be careful to keep attackers from using them as\n   amplification
      tools to launch DoS attacks.\n   Attackers may attempt to send a URI list containing
      URIs whose host\n   parts route to the victims of the DoS attack.  These victims
      do not\n   need to be SIP nodes; they can be non-SIP endpoints or even routers.\n
      \  If this attack is successful, the result is that an attacker can\n   flood
      a set of nodes, or a single node, with traffic without needing\n   to generate
      a high volume of traffic itself.\n      In any case, note that this problem
      is not specific to SIP URI-\n      list services; it also appears in scenarios
      that relate to\n      multihoming where a server needs to contact a set of IP
      addresses\n      provided by a client.\n   There are several measures that need
      to be taken to prevent this type\n   of attack.  The first one is keeping unauthorized
      users from using\n   URI-list services.  So, URI-list services MUST NOT perform
      any\n   request explosion for an unauthorized user.  URI-list services MUST\n
      \  authenticate users and check whether they are authorized to request\n   the
      service before performing any request fan-out.\n   Note that the risk of this
      attack also exists when a client uses\n   stored URI lists.  Application servers
      MUST use authentication and\n   authorization mechanisms with equivalent security
      properties when\n   dealing with stored and request-contained URI lists.\n   Even
      though the previous rule keeps unauthorized users from using\n   URI-list services,
      authorized users may still launch attacks using\n   these services.  To prevent
      these attacks, we introduce the concept\n   of opt-in lists.  That is, URI-list
      services should not allow a\n   client to place a user (identified by his or
      her URI) in a URI list\n   unless the user has previously agreed to be placed
      in such a URI\n   list.  So, URI-list services MUST NOT send a request to a
      destination\n   that has not agreed to receive requests from the URI-list service\n
      \  beforehand.  Users can agree to receive requests from a URI-list\n   service
      in several ways, such as filling a web page, sending an\n   email, signing a
      contract, or using \"A Framework for Consent-Based\n   Communications in the
      Session Initiation Protocol (SIP)\" [RFC5360],\n   whose requirements are discussed
      in [RFC4453].  Additionally, users\n   MUST be able to further describe the
      requests they are willing to\n   receive.  For example, a user may only want
      to receive requests from\n   a particular URI-list service on behalf of a particular
      user.\n   Effectively, these rules make URI lists that used by URI-list\n   services
      into opt-in lists.\n   When a URI-list service receives a request with a URI
      list from a\n   client, the URI-list service checks whether all the destinations
      have\n   agreed beforehand to receive requests from the service on behalf of\n
      \  this client.  If the URI list has permission to send requests to all\n   of
      the targets in the request, it does so.  If not, it does not send\n   any request
      at all.\n   The Framework for Consent-Based Communications in SIP [RFC5360]\n
      \  specifies a means for the URI-list service to inform the client that\n   some
      permissions were missing and how to request them.\n      Note that the mechanism
      used to obtain permissions should not\n      create opportunities to launch
      DoS amplification attacks.  These\n      attacks would be possible if, for instance,
      the URI-list service\n      automatically contacted the full set of targets
      for which it did\n      not have permissions in order to request permissions.
      \ The URI-\n      list service would be receiving one SIP request and sending
      out a\n      number of authorization request messages.  The Framework for\n
      \     Consent-Based Communications in SIP [RFC5360] avoids this type of\n      attack
      by having the client generate roughly the same amount of\n      traffic towards
      the URI-list service as the service generates\n      towards the destinations.\n
      \  In order to have an interoperable way to meet the requirements\n   related
      to opt-in lists described in this section, URI-list services\n   MUST implement
      and SHOULD use \"A Framework for Consent-Based\n   Communications in SIP\" [RFC5360].\n"
    title: 5.2.  Amplification Attacks
  - contents:
    - "5.3.  General Issues\n   URI-list services MAY have policies that limit the
      number of URIs in\n   the lists they accept, as a very long list could be used
      in a\n   denial-of-service attack to place a large burden on the URI-list\n
      \  service to send a large number of SIP requests.\n   A URI-list service generates
      a set of requests from a URI list.\n   Section 19.1.5 of [RFC3261] provides
      recommendations that need to be\n   taken into consideration when forming a
      request from a URI.\n   Naturally, those recommendations apply to all SIP URI-list
      services.\n   The general requirement GEN 4, which states that URI-list services\n
      \  need to authenticate their clients, and the previous rules apply to\n   URI-list
      services in general.  In addition, specifications dealing\n   with individual
      methods MUST describe the security issues that relate\n   to each particular
      method.\n"
    title: 5.3.  General Issues
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This document defines a new Content-Disposition header
    field\n   disposition type (recipient-list) in Section 4.1.  This value has\n
    \  been registered in the IANA registry for Mail Content Disposition\n   Values
    and Parameters with the following description:\n   recipient-list    The body
    includes a list of URIs to which URI-list\n                     services are to
    be applied.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   Duncan Mills and Miguel A. Garcia-Martin supported the
    idea of 1 to n\n   MESSAGE requests.  Jon Peterson, Dean Willis, and Jonathan
    Rosenberg\n   provided useful comments.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2183]  Troost, R., Dorner, S., and K. Moore, \"Communicating\n
      \             Presentation Information in Internet Messages: The\n              Content-Disposition
      Header Field\", RFC 2183, August 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne,
      H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,
      M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC
      3261,\n              June 2002.\n   [RFC5360]  Rosenberg, J., Camarillo, G.,
      Ed., and D. Willis, \"A\n              Framework for Consent-Based Communications
      in the Session\n              Initiation Protocol (SIP)\", RFC 5360, October
      2008.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC4453]  Rosenberg, J., Camarillo, G., and
      D. Willis, \"Requirements\n              for Consent-Based Communications in
      the Session Initiation\n              Protocol (SIP)\", RFC 4453, April 2006.\n
      \  [RFC4575]  Rosenberg, J., Schulzrinne, H., and O. Levin, \"A Session\n              Initiation
      Protocol (SIP) Event Package for Conference\n              State\", RFC 4575,
      August 2006.\n   [RFC4662]  Roach, A.B., Campbell, B., and J. Rosenberg, \"A
      Session\n              Initiation Protocol (SIP) Event Notification Extension
      for\n              Resource Lists\", RFC 4662, August 2006.\n   [RFC4825]  Rosenberg,
      J., \"The Extensible Markup Language (XML)\n              Configuration Access
      Protocol (XCAP)\", RFC 4825, May 2007.\n   [RFC5364]  Garcia-Martin, M. and
      G. Camarillo, \"Extensible Markup\n              Language (XML) Format Extension
      for Representing Copy\n              Control Attributes in Resource Lists\",
      RFC 5364, October\n              2008.\n   [RFC5365]  Garcia-Martin, M. and
      G. Camarillo, \"Multiple-Recipient\n              MESSAGE Requests in the Session
      Initiation Protocol\n              (SIP)\", RFC 5365, October 2008.\n   [RFC5366]
      \ Camarillo, G. and A. Johnston, \"Conference Establishment\n              Using
      Request-Contained Lists in the Session Initiation\n              Protocol (SIP)\",
      RFC 5366, October 2008.\n   [RFC5367]  Camarillo, G., Roach, A.B., and O. Levin,
      \"Subscriptions\n              to Request-Contained Resource Lists in the Session\n
      \             Initiation  Protocol (SIP)\", RFC 5367, October 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas
    \ 02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Adam Roach\n
    \  Tekelec\n   17210 Campbell Rd Ste 250\n   Dallas, TX  75252\n   USA\n   EMail:
    Adam.Roach@tekelec.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
