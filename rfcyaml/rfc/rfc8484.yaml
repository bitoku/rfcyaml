- contents:
  - '                      DNS Queries over HTTPS (DoH)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a protocol for sending DNS queries and getting\n
    \  DNS responses over HTTPS.  Each DNS query-response pair is mapped\n   into
    an HTTP exchange.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8484.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Selection of DoH Server . . . . . . . . . . . . . . . . . .
    .   4\n   4.  The HTTP Exchange . . . . . . . . . . . . . . . . . . . . . .   4\n
    \    4.1.  The HTTP Request  . . . . . . . . . . . . . . . . . . . .   4\n       4.1.1.
    \ HTTP Request Examples . . . . . . . . . . . . . . . .   5\n     4.2.  The HTTP
    Response . . . . . . . . . . . . . . . . . . . .   7\n       4.2.1.  Handling
    DNS and HTTP Errors  . . . . . . . . . . . .   7\n       4.2.2.  HTTP Response
    Example . . . . . . . . . . . . . . . .   8\n   5.  HTTP Integration  . . . .
    . . . . . . . . . . . . . . . . . .   8\n     5.1.  Cache Interaction . . . .
    . . . . . . . . . . . . . . . .   8\n     5.2.  HTTP/2  . . . . . . . . . . .
    . . . . . . . . . . . . . .  10\n     5.3.  Server Push . . . . . . . . . . .
    . . . . . . . . . . . .  10\n     5.4.  Content Negotiation . . . . . . . . .
    . . . . . . . . . .  10\n   6.  Definition of the \"application/dns-message\"
    Media Type  . . .  10\n   7.  IANA Considerations . . . . . . . . . . . . . .
    . . . . . . .  11\n     7.1.  Registration of the \"application/dns-message\"
    Media Type   11\n   8.  Privacy Considerations  . . . . . . . . . . . . . . .
    . . . .  12\n     8.1.  On the Wire . . . . . . . . . . . . . . . . . . . . .
    . .  12\n     8.2.  In the Server . . . . . . . . . . . . . . . . . . . . . .
    \ 12\n   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  14\n
    \  10. Operational Considerations  . . . . . . . . . . . . . . . . .  15\n   11.
    References  . . . . . . . . . . . . . . . . . . . . . . . . .  16\n     11.1.
    \ Normative References . . . . . . . . . . . . . . . . . .  16\n     11.2.  Informative
    References . . . . . . . . . . . . . . . . .  18\n   Appendix A.  Protocol Development
    . . . . . . . . . . . . . . . .  20\n   Appendix B.  Previous Work on DNS over
    HTTP or in Other Formats .  20\n   Acknowledgments . . . . . . . . . . . . . .
    . . . . . . . . . . .  21\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a specific protocol, DNS over HTTPS
    (DoH), for\n   sending DNS [RFC1035] queries and getting DNS responses over HTTP\n
    \  [RFC7540] using https [RFC2818] URIs (and therefore TLS [RFC8446]\n   security
    for integrity and confidentiality).  Each DNS query-response\n   pair is mapped
    into an HTTP exchange.\n   The described approach is more than a tunnel over HTTP.
    \ It\n   establishes default media formatting types for requests and responses\n
    \  but uses normal HTTP content negotiation mechanisms for selecting\n   alternatives
    that endpoints may prefer in anticipation of serving new\n   use cases.  In addition
    to this media type negotiation, it aligns\n   itself with HTTP features such as
    caching, redirection, proxying,\n   authentication, and compression.\n   The integration
    with HTTP provides a transport suitable for both\n   existing DNS clients and
    native web applications seeking access to\n   the DNS.\n   Two primary use cases
    were considered during this protocol's\n   development.  These use cases are preventing
    on-path devices from\n   interfering with DNS operations, and also allowing web
    applications\n   to access DNS information via existing browser APIs in a safe
    way\n   consistent with Cross Origin Resource Sharing (CORS) [FETCH].  No\n   special
    effort has been taken to enable or prevent application to\n   other use cases.
    \ This document focuses on communication between DNS\n   clients (such as operating
    system stub resolvers) and recursive\n   resolvers.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   A server that supports this protocol is called a \"DoH server\"
    to\n   differentiate it from a \"DNS server\" (one that only provides DNS\n   service
    over one or more of the other transport protocols\n   standardized for DNS).  Similarly,
    a client that supports this\n   protocol is called a \"DoH client\".\n   The key
    words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"
    in this document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
    when, and only when, they appear in all\n   capitals, as shown here.\n"
  title: 2.  Terminology
- contents:
  - "3.  Selection of DoH Server\n   The DoH client is configured with a URI Template
    [RFC6570], which\n   describes how to construct the URL to use for resolution.\n
    \  Configuration, discovery, and updating of the URI Template is done\n   out
    of band from this protocol.  Note that configuration might be\n   manual (such
    as a user typing URI Templates in a user interface for\n   \"options\") or automatic
    (such as URI Templates being supplied in\n   responses from DHCP or similar protocols).
    \ DoH servers MAY support\n   more than one URI Template.  This allows the different
    endpoints to\n   have different properties, such as different authentication\n
    \  requirements or service-level guarantees.\n   A DoH client uses configuration
    to select the URI, and thus the DoH\n   server, that is to be used for resolution.
    \ [RFC2818] defines how\n   HTTPS verifies the DoH server's identity.\n   A DoH
    client MUST NOT use a different URI simply because it was\n   discovered outside
    of the client's configuration (such as through\n   HTTP/2 server push) or because
    a server offers an unsolicited\n   response that appears to be a valid answer
    to a DNS query.  This\n   specification does not extend DNS resolution privileges
    to URIs that\n   are not recognized by the DoH client as configured URIs.  Such\n
    \  scenarios may create additional operational, tracking, and security\n   hazards
    that require limitations for safe usage.  A future\n   specification may support
    this use case.\n"
  title: 3.  Selection of DoH Server
- contents:
  - '4.  The HTTP Exchange

    '
  - contents:
    - "4.1.  The HTTP Request\n   A DoH client encodes a single DNS query into an
      HTTP request using\n   either the HTTP GET or POST method and the other requirements
      of this\n   section.  The DoH server defines the URI used by the request through\n
      \  the use of a URI Template.\n   The URI Template defined in this document
      is processed without any\n   variables when the HTTP method is POST.  When the
      HTTP method is GET,\n   the single variable \"dns\" is defined as the content
      of the DNS\n   request (as described in Section 6), encoded with base64url\n
      \  [RFC4648].\n   Future specifications for new media types for DoH MUST define
      the\n   variables used for URI Template processing with this protocol.\n   DoH
      servers MUST implement both the POST and GET methods.\n   When using the POST
      method, the DNS query is included as the message\n   body of the HTTP request,
      and the Content-Type request header field\n   indicates the media type of the
      message.  POSTed requests are\n   generally smaller than their GET equivalents.\n
      \  Using the GET method is friendlier to many HTTP cache\n   implementations.\n
      \  The DoH client SHOULD include an HTTP Accept request header field to\n   indicate
      what type of content can be understood in response.\n   Irrespective of the
      value of the Accept request header field, the\n   client MUST be prepared to
      process \"application/dns-message\" (as\n   described in Section 6) responses
      but MAY also process other DNS-\n   related media types it receives.\n   In
      order to maximize HTTP cache friendliness, DoH clients using media\n   formats
      that include the ID field from the DNS message header, such\n   as \"application/dns-message\",
      SHOULD use a DNS ID of 0 in every DNS\n   request.  HTTP correlates the request
      and response, thus eliminating\n   the need for the ID in a media type such
      as \"application/dns-\n   message\".  The use of a varying DNS ID can cause
      semantically\n   equivalent DNS queries to be cached separately.\n   DoH clients
      can use HTTP/2 padding and compression [RFC7540] in the\n   same way that other
      HTTP/2 clients use (or don't use) them.\n"
    - contents:
      - "4.1.1.  HTTP Request Examples\n   These examples use HTTP/2-style formatting
        from [RFC7540].\n   These examples use a DoH service with a URI Template of\n
        \  \"https://dnsserver.example.net/dns-query{?dns}\" to resolve IN A\n   records.\n
        \  The requests are represented as bodies with media type \"application/\n
        \  dns-message\".\n   The first example request uses GET to request \"www.example.com\".\n
        \  :method = GET\n   :scheme = https\n   :authority = dnsserver.example.net\n
        \  :path = /dns-query?dns=AAABAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB\n   accept
        = application/dns-message\n   The same DNS query for \"www.example.com\",
        using the POST method would\n   be:\n   :method = POST\n   :scheme = https\n
        \  :authority = dnsserver.example.net\n   :path = /dns-query\n   accept =
        application/dns-message\n   content-type = application/dns-message\n   content-length
        = 33\n   <33 bytes represented by the following hex encoding>\n   00 00 01
        00 00 01 00 00  00 00 00 00 03 77 77 77\n   07 65 78 61 6d 70 6c 65  03 63
        6f 6d 00 00 01 00\n   01\n   In this example, the 33 bytes are the DNS message
        in DNS wire format\n   [RFC1035], starting with the DNS header.\n   Finally,
        a GET-based query for \"a.62characterlabel-makes-base64url-\n   distinct-from-standard-base64.example.com\"
        is shown as an example to\n   emphasize that the encoding alphabet of base64url
        is different than\n   regular base64 and that padding is omitted.\n   The
        DNS query, expressed in DNS wire format, is 94 bytes represented\n   by the
        following:\n   00 00 01 00 00 01 00 00  00 00 00 00 01 61 3e 36\n   32 63
        68 61 72 61 63 74  65 72 6c 61 62 65 6c 2d\n   6d 61 6b 65 73 2d 62 61  73
        65 36 34 75 72 6c 2d\n   64 69 73 74 69 6e 63 74  2d 66 72 6f 6d 2d 73 74\n
        \  61 6e 64 61 72 64 2d 62  61 73 65 36 34 07 65 78\n   61 6d 70 6c 65 03
        63 6f  6d 00 00 01 00 01\n   :method = GET\n   :scheme = https\n   :authority
        = dnsserver.example.net\n   :path = /dns-query? (no space or Carriage Return
        (CR))\n           dns=AAABAAABAAAAAAAAAWE-NjJjaGFyYWN0ZXJsYWJl (no space or
        CR)\n           bC1tYWtlcy1iYXNlNjR1cmwtZGlzdGluY3QtZnJvbS1z (no space or
        CR)\n           dGFuZGFyZC1iYXNlNjQHZXhhbXBsZQNjb20AAAEAAQ\n   accept = application/dns-message\n"
      title: 4.1.1.  HTTP Request Examples
    title: 4.1.  The HTTP Request
  - contents:
    - "4.2.  The HTTP Response\n   The only response type defined in this document
      is \"application/dns-\n   message\", but it is possible that other response
      formats will be\n   defined in the future.  A DoH server MUST be able to process\n
      \  \"application/dns-message\" request messages.\n   Different response media
      types will provide more or less information\n   from a DNS response.  For example,
      one response type might include\n   information from the DNS header bytes while
      another might omit it.\n   The amount and type of information that a media type
      gives are solely\n   up to the format, which is not defined in this protocol.\n
      \  Each DNS request-response pair is mapped to one HTTP exchange.  The\n   responses
      may be processed and transported in any order using HTTP's\n   multi-streaming
      functionality (see Section 5 of [RFC7540]).\n   Section 5.1 discusses the relationship
      between DNS and HTTP response\n   caching.\n"
    - contents:
      - "4.2.1.  Handling DNS and HTTP Errors\n   DNS response codes indicate either
        success or failure for the DNS\n   query.  A successful HTTP response with
        a 2xx status code (see\n   Section 6.3 of [RFC7231]) is used for any valid
        DNS response,\n   regardless of the DNS response code.  For example, a successful
        2xx\n   HTTP status code is used even with a DNS message whose DNS response\n
        \  code indicates failure, such as SERVFAIL or NXDOMAIN.\n   HTTP responses
        with non-successful HTTP status codes do not contain\n   replies to the original
        DNS question in the HTTP request.  DoH\n   clients need to use the same semantic
        processing of non-successful\n   HTTP status codes as other HTTP clients.
        \ This might mean that the\n   DoH client retries the query with the same
        DoH server, such as if\n   there are authorization failures (HTTP status code
        401; see\n   Section 3.1 of [RFC7235]).  It could also mean that the DoH client\n
        \  retries with a different DoH server, such as for unsupported media\n   types
        (HTTP status code 415; see Section 6.5.13 of [RFC7231]), or\n   where the
        server cannot generate a representation suitable for the\n   client (HTTP
        status code 406; see Section 6.5.6 of [RFC7231]), and so\n   on.\n"
      title: 4.2.1.  Handling DNS and HTTP Errors
    - contents:
      - "4.2.2.  HTTP Response Example\n   This is an example response for a query
        for the IN AAAA records for\n   \"www.example.com\" with recursion turned
        on.  The response bears one\n   answer record with an address of 2001:db8:abcd:12:1:2:3:4
        and a TTL\n   of 3709 seconds.\n   :status = 200\n   content-type = application/dns-message\n
        \  content-length = 61\n   cache-control = max-age=3709\n   <61 bytes represented
        by the following hex encoding>\n   00 00 81 80 00 01 00 01  00 00 00 00 03
        77 77 77\n   07 65 78 61 6d 70 6c 65  03 63 6f 6d 00 00 1c 00\n   01 c0 0c
        00 1c 00 01 00  00 0e 7d 00 10 20 01 0d\n   b8 ab cd 00 12 00 01 00  02 00
        03 00 04\n"
      title: 4.2.2.  HTTP Response Example
    title: 4.2.  The HTTP Response
  title: 4.  The HTTP Exchange
- contents:
  - "5.  HTTP Integration\n   This protocol MUST be used with the https URI scheme
    [RFC7230].\n   Sections 8 and 9 discuss additional considerations for the\n   integration
    with HTTP.\n"
  - contents:
    - "5.1.  Cache Interaction\n   A DoH exchange can pass through a hierarchy of
      caches that include\n   both HTTP- and DNS-specific caches.  These caches may
      exist between\n   the DoH server and client, or they may exist on the DoH client\n
      \  itself.  HTTP caches are generic by design; that is, they do not\n   understand
      this protocol.  Even if a DoH client has modified its\n   cache implementation
      to be aware of DoH semantics, it does not follow\n   that all upstream caches
      (for example, inline proxies, server-side\n   gateways, and content delivery
      networks) will be.\n   As a result, DoH servers need to carefully consider the
      HTTP caching\n   metadata they send in response to GET requests (responses to
      POST\n   requests are not cacheable unless specific response header fields are\n
      \  sent; this is not widely implemented and is not advised for DoH).\n   In
      particular, DoH servers SHOULD assign an explicit HTTP freshness\n   lifetime
      (see Section 4.2 of [RFC7234]) so that the DoH client is\n   more likely to
      use fresh DNS data.  This requirement is due to HTTP\n   caches being able to
      assign their own heuristic freshness (such as\n   that described in Section
      4.2.2 of [RFC7234]), which would take\n   control of the cache contents out
      of the hands of the DoH server.\n   The assigned freshness lifetime of a DoH
      HTTP response MUST be less\n   than or equal to the smallest TTL in the Answer
      section of the DNS\n   response.  A freshness lifetime equal to the smallest
      TTL in the\n   Answer section is RECOMMENDED.  For example, if a HTTP response\n
      \  carries three RRsets with TTLs of 30, 600, and 300, the HTTP\n   freshness
      lifetime should be 30 seconds (which could be specified as\n   \"Cache-Control:
      max-age=30\").  This requirement helps prevent expired\n   RRsets in messages
      in an HTTP cache from unintentionally being\n   served.\n   If the DNS response
      has no records in the Answer section, and the DNS\n   response has an SOA record
      in the Authority section, the response\n   freshness lifetime MUST NOT be greater
      than the MINIMUM field from\n   that SOA record (see [RFC2308]).\n   The stale-while-revalidate
      and stale-if-error Cache-Control\n   directives [RFC5861] could be well suited
      to a DoH implementation\n   when allowed by server policy.  Those mechanisms
      allow a client, at\n   the server's discretion, to reuse an HTTP cache entry
      that is no\n   longer fresh.  In such a case, the client reuses either all of
      a\n   cached entry or none of it.\n   DoH servers also need to consider HTTP
      caching when generating\n   responses that are not globally valid.  For instance,
      if a DoH server\n   customizes a response based on the client's identity, it
      would not\n   want to allow global reuse of that response.  This could be\n
      \  accomplished through a variety of HTTP techniques, such as a Cache-\n   Control
      max-age of 0, or by using the Vary response header field (see\n   Section 7.1.4
      of [RFC7231]) to establish a secondary cache key (see\n   Section 4.1 of [RFC7234]).\n
      \  DoH clients MUST account for the Age response header field's value\n   [RFC7234]
      when calculating the DNS TTL of a response.  For example,\n   if an RRset is
      received with a DNS TTL of 600, but the Age header\n   field indicates that
      the response has been cached for 250 seconds,\n   the remaining lifetime of
      the RRset is 350 seconds.  This requirement\n   applies to both DoH client HTTP
      caches and DoH client DNS caches.\n   DoH clients can request an uncached copy
      of a HTTP response by using\n   the \"no-cache\" request Cache-Control directive
      (see Section 5.2.1.4\n   of [RFC7234]) and similar controls.  Note that some
      caches might not\n   honor these directives, either due to configuration or
      interaction\n   with traditional DNS caches that do not have such a mechanism.\n
      \  HTTP conditional requests [RFC7232] may be of limited value to DoH,\n   as
      revalidation provides only a bandwidth benefit and DNS\n   transactions are
      normally latency bound.  Furthermore, the HTTP\n   response header fields that
      enable revalidation (such as \"Last-\n   Modified\" and \"Etag\") are often
      fairly large when compared to the\n   overall DNS response size and have a variable
      nature that creates\n   constant pressure on the HTTP/2 compression dictionary
      [RFC7541].\n   Other types of DNS data, such as zone transfers, may be larger
      and\n   benefit more from revalidation.\n"
    title: 5.1.  Cache Interaction
  - contents:
    - "5.2.  HTTP/2\n   HTTP/2 [RFC7540] is the minimum RECOMMENDED version of HTTP
      for use\n   with DoH.\n   The messages in classic UDP-based DNS [RFC1035] are
      inherently\n   unordered and have low overhead.  A competitive HTTP transport
      needs\n   to support reordering, parallelism, priority, and header compression\n
      \  to achieve similar performance.  Those features were introduced to\n   HTTP
      in HTTP/2 [RFC7540].  Earlier versions of HTTP are capable of\n   conveying
      the semantic requirements of DoH but may result in very\n   poor performance.\n"
    title: 5.2.  HTTP/2
  - contents:
    - "5.3.  Server Push\n   Before using DoH response data for DNS resolution, the
      client MUST\n   establish that the HTTP request URI can be used for the DoH
      query.\n   For HTTP requests initiated by the DoH client, this is implicit in\n
      \  the selection of URI.  For HTTP server push (see Section 8.2 of\n   [RFC7540]),
      extra care must be taken to ensure that the pushed URI is\n   one that the client
      would have directed the same query to if the\n   client had initiated the request
      (in addition to the other security\n   checks normally needed for server push).\n"
    title: 5.3.  Server Push
  - contents:
    - "5.4.  Content Negotiation\n   In order to maximize interoperability, DoH clients
      and DoH servers\n   MUST support the \"application/dns-message\" media type.
      \ Other media\n   types MAY be used as defined by HTTP Content Negotiation (see\n
      \  Section 3.4 of [RFC7231]).  Those media types MUST be flexible enough\n   to
      express every DNS query that would normally be sent in DNS over\n   UDP (including
      queries and responses that use DNS extensions, but not\n   those that require
      multiple responses).\n"
    title: 5.4.  Content Negotiation
  title: 5.  HTTP Integration
- contents:
  - "6.  Definition of the \"application/dns-message\" Media Type\n   The data payload
    for the \"application/dns-message\" media type is a\n   single message of the
    DNS on-the-wire format defined in Section 4.2.1\n   of [RFC1035], which in turn
    refers to the full wire format defined in\n   Section 4.1 of that RFC.\n   Although
    [RFC1035] says \"Messages carried by UDP are restricted to\n   512 bytes\", that
    was later updated by [RFC6891].  This media type\n   restricts the maximum size
    of the DNS message to 65535 bytes.\n   Note that the wire format used in this
    media type is different than\n   the wire format used in [RFC7858] (which uses
    the format defined in\n   Section 4.2.2 of [RFC1035] that includes two length
    bytes).\n   DoH clients using this media type MAY have one or more Extension\n
    \  Mechanisms for DNS (EDNS) options [RFC6891] in the request.  DoH\n   servers
    using this media type MUST ignore the value given for the\n   EDNS UDP payload
    size in DNS requests.\n   When using the GET method, the data payload for this
    media type MUST\n   be encoded with base64url [RFC4648] and then provided as a
    variable\n   named \"dns\" to the URI Template expansion.  Padding characters
    for\n   base64url MUST NOT be included.\n   When using the POST method, the data
    payload for this media type MUST\n   NOT be encoded and is used directly as the
    HTTP message body.\n"
  title: 6.  Definition of the "application/dns-message" Media Type
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  Registration of the \"application/dns-message\" Media Type\n   Type name:
      application\n   Subtype name: dns-message\n   Required parameters: N/A\n   Optional
      parameters: N/A\n   Encoding considerations: This is a binary format.  The contents
      are a\n      DNS message as defined in RFC 1035.  The format used here is for\n
      \     DNS over UDP, which is the format defined in the diagrams in\n      RFC
      1035.\n   Security considerations: See RFC 8484.  The content is a DNS message\n
      \     and thus not executable code.\n   Interoperability considerations: None.\n
      \  Published specification: RFC 8484.\n   Applications that use this media type:\n
      \     Systems that want to exchange full DNS messages.\n   Additional information:\n
      \     Deprecated alias names for this type: N/A\n      Magic number(s): N/A\n
      \     File extension(s): N/A\n      Macintosh file type code(s): N/A\n   Person
      & email address to contact for further information:\n      Paul Hoffman <paul.hoffman@icann.org>\n
      \  Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author: Paul Hoffman
      <paul.hoffman@icann.org>\n   Change controller: IESG\n"
    title: 7.1.  Registration of the "application/dns-message" Media Type
  title: 7.  IANA Considerations
- contents:
  - "8.  Privacy Considerations\n   [RFC7626] discusses DNS privacy considerations
    in both \"on the wire\"\n   (Section 2.4 of [RFC7626]) and \"in the server\" (Section
    2.5 of\n   [RFC7626]) contexts.  This is also a useful framing for DoH's privacy\n
    \  considerations.\n"
  - contents:
    - "8.1.  On the Wire\n   DoH encrypts DNS traffic and requires authentication
      of the server.\n   This mitigates both passive surveillance [RFC7258] and active
      attacks\n   that attempt to divert DNS traffic to rogue servers (see\n   Section
      2.5.1 of [RFC7626]).  DNS over TLS [RFC7858] provides similar\n   protections,
      while direct UDP- and TCP-based transports are\n   vulnerable to this class
      of attack.  An experimental effort to offer\n   guidance on choosing the padding
      length can be found in [RFC8467].\n   Additionally, the use of the HTTPS default
      port 443 and the ability\n   to mix DoH traffic with other HTTPS traffic on
      the same connection\n   can deter unprivileged on-path devices from interfering
      with DNS\n   operations and make DNS traffic analysis more difficult.\n"
    title: 8.1.  On the Wire
  - contents:
    - "8.2.  In the Server\n   The DNS wire format [RFC1035] contains no client identifiers;\n
      \  however, various transports of DNS queries and responses do provide\n   data
      that can be used to correlate requests.  HTTPS presents new\n   considerations
      for correlation, such as explicit HTTP cookies and\n   implicit fingerprinting
      of the unique set and ordering of HTTP\n   request header fields.\n   A DoH
      implementation is built on IP, TCP, TLS, and HTTP.  Each layer\n   contains
      one or more common features that can be used to correlate\n   queries to the
      same identity.  DNS transports will generally carry\n   the same privacy properties
      of the layers used to implement them.\n   For example, the properties of IP,
      TCP, and TLS apply to\n   implementations of DNS over TLS.\n   The privacy considerations
      of using the HTTPS layer in DoH are\n   incremental to those of DNS over TLS.
      \ DoH is not known to introduce\n   new concerns beyond those associated with
      HTTPS.\n   At the IP level, the client address provides obvious correlation\n
      \  information.  This can be mitigated by use of a NAT, proxy, VPN, or\n   simple
      address rotation over time.  It may be aggravated by use of a\n   DNS server
      that can correlate real-time addressing information with\n   other personal
      identifiers, such as when a DNS server and DHCP server\n   are operated by the
      same entity.\n   DNS implementations that use one TCP connection for multiple
      DNS\n   requests directly group those requests.  Long-lived connections have\n
      \  better performance behaviors than short-lived connections; however,\n   they
      group more requests, which can expose more information to\n   correlation and
      consolidation.  TCP-based solutions may also seek\n   performance through the
      use of TCP Fast Open [RFC7413].  The cookies\n   used in TCP Fast Open allow
      servers to correlate TCP sessions.\n   TLS-based implementations often achieve
      better handshake performance\n   through the use of some form of session resumption
      mechanism, such as\n   Section 2.2 of [RFC8446].  Session resumption creates
      trivial\n   mechanisms for a server to correlate TLS connections together.\n
      \  HTTP's feature set can also be used for identification and tracking\n   in
      a number of different ways.  For example, Authentication request\n   header
      fields explicitly identify profiles in use, and HTTP cookies\n   are designed
      as an explicit state-tracking mechanism between the\n   client and serving site
      and often are used as an authentication\n   mechanism.\n   Additionally, the
      User-Agent and Accept-Language request header\n   fields often convey specific
      information about the client version or\n   locale.  This facilitates content
      negotiation and operational work-\n   arounds for implementation bugs.  Request
      header fields that control\n   caching can expose state information about a
      subset of the client's\n   history.  Mixing DoH requests with other HTTP requests
      on the same\n   connection also provides an opportunity for richer data correlation.\n
      \  The DoH protocol design allows applications to fully leverage the\n   HTTP
      ecosystem, including features that are not enumerated here.\n   Utilizing the
      full set of HTTP features enables DoH to be more than\n   an HTTP tunnel, but
      it is at the cost of opening up implementations\n   to the full set of privacy
      considerations of HTTP.\n   Implementations of DoH clients and servers need
      to consider the\n   benefit and privacy impact of these features, and their
      deployment\n   context, when deciding whether or not to enable them.\n   Implementations
      are advised to expose the minimal set of data needed\n   to achieve the desired
      feature set.\n   Determining whether or not a DoH implementation requires HTTP
      cookie\n   [RFC6265] support is particularly important because HTTP cookies
      are\n   the primary state tracking mechanism in HTTP.  HTTP cookies SHOULD\n
      \  NOT be accepted by DOH clients unless they are explicitly required by\n   a
      use case.\n"
    title: 8.2.  In the Server
  title: 8.  Privacy Considerations
- contents:
  - "9.  Security Considerations\n   Running DNS over HTTPS relies on the security
    of the underlying HTTP\n   transport.  This mitigates classic amplification attacks
    for UDP-\n   based DNS.  Implementations utilizing HTTP/2 benefit from the TLS\n
    \  profile defined in Section 9.2 of [RFC7540].\n   Session-level encryption has
    well-known weaknesses with respect to\n   traffic analysis, which might be particularly
    acute when dealing with\n   DNS queries.  HTTP/2 provides further advice about
    the use of\n   compression (see Section 10.6 of [RFC7540]) and padding (see\n
    \  Section 10.7 of [RFC7540]).  DoH servers can also add DNS padding\n   [RFC7830]
    if the DoH client requests it in the DNS query.  An\n   experimental effort to
    offer guidance on choosing the padding length\n   can be found in [RFC8467].\n
    \  The HTTPS connection provides transport security for the interaction\n   between
    the DoH server and client, but it does not provide the\n   response integrity
    of DNS data provided by DNSSEC.  DNSSEC and DoH\n   are independent and fully
    compatible protocols, each solving\n   different problems.  The use of one does
    not diminish the need nor\n   the usefulness of the other.  It is the choice of
    a client to either\n   perform full DNSSEC validation of answers or to trust the
    DoH server\n   to do DNSSEC validation and inspect the AD (Authentic Data) bit
    in\n   the returned message to determine whether an answer was authentic or\n
    \  not.  As noted in Section 4.2, different response media types will\n   provide
    more or less information from a DNS response, so this choice\n   may be affected
    by the response media type.\n   Section 5.1 describes the interaction of this
    protocol with HTTP\n   caching.  An adversary that can control the cache used
    by the client\n   can affect that client's view of the DNS.  This is no different
    than\n   the security implications of HTTP caching for other protocols that\n
    \  use HTTP.\n   In the absence of DNSSEC information, a DoH server can give a
    client\n   invalid data in response to a DNS query.  Section 3 disallows the use\n
    \  of DoH DNS responses that do not originate from configured servers.\n   This
    prohibition does not guarantee protection against invalid data,\n   but it does
    reduce the risk.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Operational Considerations\n   Local policy considerations and similar factors
    mean different DNS\n   servers may provide different results to the same query,
    for\n   instance, in split DNS configurations [RFC6950].  It logically\n   follows
    that the server that is queried can influence the end result.\n   Therefore, a
    client's choice of DNS server may affect the responses\n   it gets to its queries.
    \ For example, in the case of DNS64 [RFC6147],\n   the choice could affect whether
    IPv6/IPv4 translation will work at\n   all.\n   The HTTPS channel used by this
    specification establishes secure two-\n   party communication between the DoH
    client and the DoH server.\n   Filtering or inspection systems that rely on unsecured
    transport of\n   DNS will not function in a DNS over HTTPS environment due to
    the\n   confidentiality and integrity protection provided by TLS.\n   Some HTTPS
    client implementations perform real time third-party\n   checks of the revocation
    status of the certificates being used by\n   TLS.  If this check is done as part
    of the DoH server connection\n   procedure and the check itself requires DNS resolution
    to connect to\n   the third party, a deadlock can occur.  The use of Online Certificate\n
    \  Status Protocol (OCSP) [RFC6960] servers or Authority Information\n   Access
    (AIA) for Certificate Revocation List (CRL) fetching (see\n   Section 4.2.2.1
    of [RFC5280]) are examples of how this deadlock can\n   happen.  To mitigate the
    possibility of deadlock, the authentication\n   given DoH servers SHOULD NOT rely
    on DNS-based references to external\n   resources in the TLS handshake.  For OCSP,
    the server can bundle the\n   certificate status as part of the handshake using
    a mechanism\n   appropriate to the version of TLS, such as using Section 4.4.2.1
    of\n   [RFC8446] for TLS version 1.3.  AIA deadlocks can be avoided by\n   providing
    intermediate certificates that might otherwise be obtained\n   through additional
    requests.  Note that these deadlocks also need to\n   be considered for servers
    that a DoH server might redirect to.\n   A DoH client may face a similar bootstrapping
    problem when the HTTP\n   request needs to resolve the hostname portion of the
    DNS URI.  Just\n   as the address of a traditional DNS nameserver cannot be originally\n
    \  determined from that same server, a DoH client cannot use its DoH\n   server
    to initially resolve the server's host name into an address.\n   Alternative strategies
    a client might employ include 1) making the\n   initial resolution part of the
    configuration, 2) IP-based URIs and\n   corresponding IP-based certificates for
    HTTPS, or 3) resolving the\n   DNS API server's hostname via traditional DNS or
    another DoH server\n   while still authenticating the resulting connection via
    HTTPS.\n   HTTP [RFC7230] is a stateless application-level protocol, and\n   therefore
    DoH implementations do not provide stateful ordering\n   guarantees between different
    requests.  DoH cannot be used as a\n   transport for other protocols that require
    strict ordering.\n   A DoH server is allowed to answer queries with any valid
    DNS\n   response.  For example, a valid DNS response might have the TC\n   (truncation)
    bit set in the DNS header to indicate that the server\n   was not able to retrieve
    a full answer for the query but is providing\n   the best answer it could get.
    \ A DoH server can reply to queries with\n   an HTTP error for queries that it
    cannot fulfill.  In this same\n   example, a DoH server could use an HTTP error
    instead of a non-error\n   response that has the TC bit set.\n   Many extensions
    to DNS, using [RFC6891], have been defined over the\n   years.  Extensions that
    are specific to the choice of transport, such\n   as [RFC7828], are not applicable
    to DoH.\n"
  title: 10.  Operational Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names
      - implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n
      \             November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2308]  Andrews,
      M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\", RFC 2308,
      DOI 10.17487/RFC2308, March 1998,\n              <https://www.rfc-editor.org/info/rfc2308>.\n
      \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n              DOI
      10.17487/RFC6265, April 2011,\n              <https://www.rfc-editor.org/info/rfc6265>.\n
      \  [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,\n              and
      D. Orchard, \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570,
      March 2012,\n              <https://www.rfc-editor.org/info/rfc6570>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Conditional Requests\", RFC 7232,\n              DOI 10.17487/RFC7232,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7232>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI
      10.17487/RFC7235, June 2014,\n              <https://www.rfc-editor.org/info/rfc7235>.\n
      \  [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC7541]
      \ Peon, R. and H. Ruellan, \"HPACK: Header Compression for\n              HTTP/2\",
      RFC 7541, DOI 10.17487/RFC7541, May 2015,\n              <https://www.rfc-editor.org/info/rfc7541>.\n
      \  [RFC7626]  Bortzmeyer, S., \"DNS Privacy Considerations\", RFC 7626,\n              DOI
      10.17487/RFC7626, August 2015,\n              <https://www.rfc-editor.org/info/rfc7626>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8446]  Rescorla, E., \"The
      Transport Layer Security (TLS) Protocol\n              Version 1.3\", RFC 8446,
      DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [FETCH]    \"Fetch Living Standard\", August
      2018,\n              <https://fetch.spec.whatwg.org/>.\n   [RFC2818]  Rescorla,
      E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n
      \             <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC5280]  Cooper,
      D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and
      W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5861]  Nottingham, M., \"HTTP Cache-Control Extensions for Stale\n              Content\",
      RFC 5861, DOI 10.17487/RFC5861, May 2010,\n              <https://www.rfc-editor.org/info/rfc5861>.\n
      \  [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,
      \"DNS64: DNS Extensions for Network Address\n              Translation from
      IPv6 Clients to IPv4 Servers\", RFC 6147,\n              DOI 10.17487/RFC6147,
      April 2011,\n              <https://www.rfc-editor.org/info/rfc6147>.\n   [RFC6891]
      \ Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n              for
      DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April
      2013,\n              <https://www.rfc-editor.org/info/rfc6891>.\n   [RFC6950]
      \ Peterson, J., Kolkman, O., Tschofenig, H., and B. Aboba,\n              \"Architectural
      Considerations on Application Features in\n              the DNS\", RFC 6950,
      DOI 10.17487/RFC6950, October 2013,\n              <https://www.rfc-editor.org/info/rfc6950>.\n
      \  [RFC6960]  Santesson, S., Myers, M., Ankney, R., Malpani, A.,\n              Galperin,
      S., and C. Adams, \"X.509 Internet Public Key\n              Infrastructure
      Online Certificate Status Protocol - OCSP\",\n              RFC 6960, DOI 10.17487/RFC6960,
      June 2013,\n              <https://www.rfc-editor.org/info/rfc6960>.\n   [RFC7258]
      \ Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n              Attack\",
      BCP 188, RFC 7258, DOI 10.17487/RFC7258, May\n              2014, <https://www.rfc-editor.org/info/rfc7258>.\n
      \  [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n              Fast
      Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014,\n              <https://www.rfc-editor.org/info/rfc7413>.\n
      \  [RFC7828]  Wouters, P., Abley, J., Dickinson, S., and R. Bellis, \"The\n
      \             edns-tcp-keepalive EDNS0 Option\", RFC 7828,\n              DOI
      10.17487/RFC7828, April 2016,\n              <https://www.rfc-editor.org/info/rfc7828>.\n
      \  [RFC7830]  Mayrhofer, A., \"The EDNS(0) Padding Option\", RFC 7830,\n              DOI
      10.17487/RFC7830, May 2016,\n              <https://www.rfc-editor.org/info/rfc7830>.\n
      \  [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and
      P. Hoffman, \"Specification for DNS over Transport\n              Layer Security
      (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n
      \  [RFC8467]  Mayrhofer, A., \"Padding Policies for Extension Mechanisms\n              for
      DNS (EDNS(0))\", RFC 8467, DOI 10.17487/RFC8467,\n              October 2018,
      <https://www.rfc-editor.org/info/rfc8467>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Protocol Development\n   This appendix describes the requirements
    used to design DoH.  These\n   requirements are listed here to help readers understand
    the current\n   protocol, not to limit how the protocol might be developed in
    the\n   future.  This appendix is non-normative.\n   The protocol described in
    this document based its design on the\n   following protocol requirements:\n   o
    \ The protocol must use normal HTTP semantics.\n   o  The queries and responses
    must be able to be flexible enough to\n      express every DNS query that would
    normally be sent in DNS over\n      UDP (including queries and responses that
    use DNS extensions, but\n      not those that require multiple responses).\n   o
    \ The protocol must permit the addition of new formats for DNS\n      queries
    and responses.\n   o  The protocol must ensure interoperability by specifying
    a single\n      format for requests and responses that is mandatory to implement.\n
    \     That format must be able to support future modifications to the\n      DNS
    protocol including the inclusion of one or more EDNS options\n      (including
    those not yet defined).\n   o  The protocol must use a secure transport that meets
    the\n      requirements for HTTPS.\n   The following were considered non-requirements:\n
    \  o  Supporting network-specific DNS64 [RFC6147]\n   o  Supporting other network-specific
    inferences from plaintext DNS\n      queries\n   o  Supporting insecure HTTP\n"
  title: Appendix A.  Protocol Development
- contents:
  - "Appendix B.  Previous Work on DNS over HTTP or in Other Formats\n   The following
    is an incomplete list of earlier work that related to\n   DNS over HTTP/1 or representing
    DNS data in other formats.\n   The list includes links to the tools.ietf.org site
    (because these\n   documents are all expired) and web sites of software.\n   o
    \ <https://tools.ietf.org/html/draft-mohan-dns-query-xml>\n   o  <https://tools.ietf.org/html/draft-daley-dnsxml>\n
    \  o  <https://tools.ietf.org/html/draft-dulaunoy-dnsop-passive-dns-cof>\n   o
    \ <https://tools.ietf.org/html/draft-bortzmeyer-dns-json>\n   o  <https://www.nlnetlabs.nl/projects/dnssec-trigger/>\n"
  title: Appendix B.  Previous Work on DNS over HTTP or in Other Formats
- contents:
  - "Acknowledgments\n   This work required a high level of cooperation between experts
    in\n   different technologies.  Thank you Ray Bellis, Stephane Bortzmeyer,\n   Manu
    Bretelle, Sara Dickinson, Massimiliano Fantuzzi, Tony Finch,\n   Daniel Kahn Gilmor,
    Olafur Gudmundsson, Wes Hardaker, Rory Hewitt,\n   Joe Hildebrand, David Lawrence,
    Eliot Lear, John Mattsson, Alex\n   Mayrhofer, Mark Nottingham, Jim Reid, Adam
    Roach, Ben Schwartz, Davey\n   Song, Daniel Stenberg, Andrew Sullivan, Martin
    Thomson, and Sam\n   Weiler.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Paul Hoffman\n   ICANN\n   Email: paul.hoffman@icann.org\n
    \  Patrick McManus\n   Mozilla\n   Email: mcmanus@ducksong.com\n"
  title: Authors' Addresses
