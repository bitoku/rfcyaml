- title: __initial_text__
  contents:
  - '                   Classless IN-ADDR.ARPA delegation

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   This document describes a way to do IN-ADDR.ARPA delegation\
    \ on non-\n   octet boundaries for address spaces covering fewer than 256\n  \
    \ addresses.  The proposed method should thus remove one of the\n   objections\
    \ to subnet on non-octet boundaries but perhaps more\n   significantly, make it\
    \ possible to assign IP address space in smaller\n   chunks than 24-bit prefixes,\
    \ without losing the ability to delegate\n   authority for the corresponding IN-ADDR.ARPA\
    \ mappings.  The proposed\n   method is fully compatible with the original DNS\
    \ lookup mechanisms\n   specified in [1], i.e. there is no need to modify the\
    \ lookup\n   algorithm used, and there should be no need to modify any software\n\
    \   which does DNS lookups.\n   The document also discusses some operational considerations\
    \ to\n   provide some guidance in implementing this method.\n"
- title: 3. Motivation
  contents:
  - "3. Motivation\n   With the proliferation of classless routing technology, it\
    \ has become\n   feasible to assign address space on non-octet boundaries.  In\
    \ case of\n   a very small organization with only a few hosts, assigning a full\n\
    \   24-bit prefix (what was traditionally referred to as a \"class C\n   network\
    \ number\") often leads to inefficient address space\n   utilization.\n   One\
    \ of the problems encountered when assigning a longer prefix (less\n   address\
    \ space) is that it seems impossible for such an organization\n   to maintain\
    \ its own reverse (\"IN-ADDR.ARPA\") zone autonomously.  By\n   use of the reverse\
    \ delegation method described below, the most\n   important objection to assignment\
    \ of longer prefixes to unrelated\n   organizations can be removed.\n   Let us\
    \ assume we have assigned the address spaces to three different\n   parties as\
    \ follows:\n           192.0.2.0/25   to organization A\n           192.0.2.128/26\
    \ to organization B\n           192.0.2.192/26 to organization C\n   In the classical\
    \ approach, this would lead to a single zone like\n   this:\n   $ORIGIN 2.0.192.in-addr.arpa.\n\
    \   ;\n   1               PTR     host1.A.domain.\n   2               PTR    \
    \ host2.A.domain.\n   3               PTR     host3.A.domain.\n   ;\n   129  \
    \           PTR     host1.B.domain.\n   130             PTR     host2.B.domain.\n\
    \   131             PTR     host3.B.domain.\n   ;\n   193             PTR    \
    \ host1.C.domain.\n   194             PTR     host2.C.domain.\n   195        \
    \     PTR     host3.C.domain.\n   The administration of this zone is problematic.\
    \  Authority for this\n   zone can only be delegated once, and this usually translates\
    \ into\n   \"this zone can only be administered by one organization.\"  The other\n\
    \   organizations with address space that corresponds to entries in this\n   zone\
    \ would thus have to depend on another organization for their\n   address to name\
    \ translation.  With the proposed method, this\n   potential problem can be avoided.\n"
- title: 4. Classless IN-ADDR.ARPA delegation
  contents:
  - "4. Classless IN-ADDR.ARPA delegation\n   Since a single zone can only be delegated\
    \ once, we need more points\n   to do delegation on to solve the problem above.\
    \  These extra points\n   of delegation can be introduced by extending the IN-ADDR.ARPA\
    \ tree\n   downwards, e.g. by using the first address or the first address and\n\
    \   the network mask length (as shown below) in the corresponding address\n  \
    \ space to form the the first component in the name for the zones.  The\n   following\
    \ four zone files show how the problem in the motivation\n   section could be\
    \ solved using this method.\n   $ORIGIN 2.0.192.in-addr.arpa.\n   @       IN \
    \     SOA     my-ns.my.domain. hostmaster.my.domain. (...)\n   ;...\n   ;  <<0-127>>\
    \ /25\n   0/25            NS      ns.A.domain.\n   0/25            NS      some.other.name.server.\n\
    \   ;\n   1               CNAME   1.0/25.2.0.192.in-addr.arpa.\n   2         \
    \      CNAME   2.0/25.2.0.192.in-addr.arpa.\n   3               CNAME   3.0/25.2.0.192.in-addr.arpa.\n\
    \   ;\n   ;  <<128-191>> /26\n   128/26          NS      ns.B.domain.\n   128/26\
    \          NS      some.other.name.server.too.\n   ;\n   129             CNAME\
    \   129.128/26.2.0.192.in-addr.arpa.\n   130             CNAME   130.128/26.2.0.192.in-addr.arpa.\n\
    \   131             CNAME   131.128/26.2.0.192.in-addr.arpa.\n   ;\n   ;  <<192-255>>\
    \ /26\n   192/26          NS      ns.C.domain.\n   192/26          NS      some.other.third.name.server.\n\
    \   ;\n   193             CNAME   193.192/26.2.0.192.in-addr.arpa.\n   194   \
    \          CNAME   194.192/26.2.0.192.in-addr.arpa.\n   195             CNAME\
    \   195.192/26.2.0.192.in-addr.arpa.\n   $ORIGIN 0/25.2.0.192.in-addr.arpa.\n\
    \   @       IN      SOA     ns.A.domain. hostmaster.A.domain. (...)\n   @    \
    \           NS      ns.A.domain.\n   @               NS      some.other.name.server.\n\
    \   ;\n   1               PTR     host1.A.domain.\n   2               PTR    \
    \ host2.A.domain.\n   3               PTR     host3.A.domain.\n   $ORIGIN 128/26.2.0.192.in-addr.arpa.\n\
    \   @       IN      SOA     ns.B.domain. hostmaster.B.domain. (...)\n   @    \
    \           NS      ns.B.domain.\n   @               NS      some.other.name.server.too.\n\
    \   ;\n   129             PTR     host1.B.domain.\n   130             PTR    \
    \ host2.B.domain.\n   131             PTR     host3.B.domain.\n   $ORIGIN 192/26.2.0.192.in-addr.arpa.\n\
    \   @       IN      SOA     ns.C.domain. hostmaster.C.domain. (...)\n   @    \
    \           NS      ns.C.domain.\n   @               NS      some.other.third.name.server.\n\
    \   ;\n   193             PTR     host1.C.domain.\n   194             PTR    \
    \ host2.C.domain.\n   195             PTR     host3.C.domain.\n   For each size-256\
    \ chunk split up using this method, there is a need\n   to install close to 256\
    \ CNAME records in the parent zone.  Some\n   people might view this as ugly;\
    \ we will not argue that particular\n   point.  It is however quite easy to automatically\
    \ generate the CNAME\n   resource records in the parent zone once and for all,\
    \ if the way the\n   address space is partitioned is known.\n   The advantage\
    \ of this approach over the other proposed approaches for\n   dealing with this\
    \ problem is that there should be no need to modify\n   any already-deployed software.\
    \  In particular, the lookup mechanism\n   in the DNS does not have to be modified\
    \ to accommodate this splitting\n   of the responsibility for the IPv4 address\
    \ to name translation on\n   \"non-dot\" boundaries.  Furthermore, this technique\
    \ has been in use\n   for several years in many installations, apparently with\
    \ no ill\n   effects.\n   As usual, a resource record like\n   $ORIGIN 2.0.192.in-addr.arpa.\n\
    \   129             CNAME   129.128/26.2.0.192.in-addr.arpa.\n   can be convienently\
    \ abbreviated to\n   $ORIGIN 2.0.192.in-addr.arpa.\n   129             CNAME \
    \  129.128/26\n   Some DNS implementations are not kind to special characters\
    \ in domain\n   names, e.g. the \"/\" used in the above examples.  As [3] makes\
    \ clear,\n   these are legal, though some might feel unsightly.  Because these\
    \ are\n   not host names the restriction of [2] does not apply.  Modern clients\n\
    \   and servers have an option to act in the liberal and correct fashion.\n  \
    \ The examples here use \"/\" because it was felt to be more visible and\n   pedantic\
    \ reviewers felt that the 'these are not hostnames' argument\n   needed to be\
    \ repeated.  We advise you not to be so pedantic, and to\n   not precisely copy\
    \ the above examples, e.g.  substitute a more\n   conservative character, such\
    \ as hyphen, for \"/\".\n"
- title: 5. Operational considerations
  contents:
  - "5. Operational considerations\n   This technique is intended to be used for delegating\
    \ address spaces\n   covering fewer than 256 addresses.  For delegations covering\
    \ larger\n   blocks of addresses the traditional methods (multiple delegations)\n\
    \   can be used instead.\n"
- title: 5.1 Recommended secondary name service
  contents:
  - "5.1 Recommended secondary name service\n   Some older versions of name server\
    \ software will make no effort to\n   find and return the pointed-to name in CNAME\
    \ records if the pointed-\n   to name is not already known locally as cached or\
    \ as authoritative\n   data.  This can cause some confusion in resolvers, as only\
    \ the CNAME\n   record will be returned in the response.  To avoid this problem\
    \ it is\n   recommended that the authoritative name servers for the delegating\n\
    \   zone (the zone containing all the CNAME records) all run as slave\n   (secondary)\
    \ name servers for the \"child\" zones delegated and pointed\n   into via the\
    \ CNAME records.\n"
- title: 5.2 Alternative naming conventions
  contents:
  - "5.2 Alternative naming conventions\n   As a result of this method, the location\
    \ of the zone containing the\n   actual PTR records is no longer predefined. \
    \ This gives flexibility\n   and some examples will be presented here.\n   An\
    \ alternative to using the first address, or the first address and\n   the network\
    \ mask length in the corresponding address space, to name\n   the new zones is\
    \ to use some other (non-numeric) name.  Thus it is\n   also possible to point\
    \ to an entirely different part of the DNS tree\n   (i.e. outside of the IN-ADDR.ARPA\
    \ tree).  It would be necessary to\n   use one of these alternate methods if two\
    \ organizations somehow\n   shared the same physical subnet (and corresponding\
    \ IP address space)\n   with no \"neat\" alignment of the addresses, but still\
    \ wanted to\n   administrate their own IN-ADDR.ARPA mappings.\n   The following\
    \ short example shows how you can point out of the IN-\n   ADDR.ARPA tree:\n \
    \  $ORIGIN 2.0.192.in-addr.arpa.\n   @       IN      SOA     my-ns.my.domain.\
    \ hostmaster.my.domain. (...)\n   ; ...\n   1               CNAME   1.A.domain.\n\
    \   2               CNAME   2.A.domain.\n   ; ...\n   129             CNAME  \
    \ 129.B.domain.\n   130             CNAME   130.B.domain.\n   ;\n   $ORIGIN A.domain.\n\
    \   @       IN      SOA     my-ns.A.domain. hostmaster.A.domain. (...)\n   ; ...\n\
    \   ;\n   host1           A       192.0.2.1\n   1               PTR     host1\n\
    \   ;\n   host2           A       192.0.2.2\n   2               PTR     host2\n\
    \   ;\n   etc.\n   This way you can actually end up with the name->address and\
    \ the\n   (pointed-to) address->name mapping data in the same zone file - some\n\
    \   may view this as an added bonus as no separate set of secondaries for\n  \
    \ the reverse zone is required.  Do however note that the traversal via\n   the\
    \ IN-ADDR.ARPA tree will still be done, so the CNAME records\n   inserted there\
    \ need to point in the right direction for this to work.\n   Sketched below is\
    \ an alternative approach using the same solution:\n   $ORIGIN 2.0.192.in-addr.arpa.\n\
    \   @                  SOA     my-ns.my.domain. hostmaster.my.domain. (...)\n\
    \   ; ...\n   1                  CNAME   1.2.0.192.in-addr.A.domain.\n   2   \
    \               CNAME   2.2.0.192.in-addr.A.domain.\n   $ORIGIN A.domain.\n  \
    \ @                  SOA     my-ns.A.domain. hostmaster.A.domain. (...)\n   ;\
    \ ...\n   ;\n   host1              A       192.0.2.1\n   1.2.0.192.in-addr  PTR\
    \     host1\n   host2              A       192.0.2.2\n   2.2.0.192.in-addr  PTR\
    \     host2\n   It is clear that many possibilities exist which can be adapted\
    \ to the\n   specific requirements of the situation at hand.\n"
- title: 5.3 Other operational issues
  contents:
  - "5.3 Other operational issues\n   Note that one cannot provide CNAME referrals\
    \ twice for the same\n   address space, i.e. you cannot allocate a /25 prefix\
    \ to one\n   organisation, and run IN-ADDR.ARPA this way, and then have the\n\
    \   organisation subnet the /25 into longer prefixes, and attempt to\n   employ\
    \ the same technique to give each subnet control of its own\n   number space.\
    \ This would result in a CNAME record pointing to a CNAME\n   record, which may\
    \ be less robust overall.\n   Unfortunately, some old beta releases of the popular\
    \ DNS name server\n   implementation BIND 4.9.3 had a bug which caused problems\
    \ if a CNAME\n   record was encountered when a reverse lookup was made.  The beta\n\
    \   releases involved have since been obsoleted, and this issue is\n   resolved\
    \ in the released code.  Some software manufacturers have\n   included the defective\
    \ beta code in their product. In the few cases\n   we know of, patches from the\
    \ manufacturers are available or planned\n   to replace the obsolete beta code\
    \ involved.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   With this scheme, the \"leaf sites\" will need\
    \ to rely on one more site\n   running their DNS name service correctly than they\
    \ would be if they\n   had a /24 allocation of their own, and this may add an\
    \ extra\n   component which will need to work for reliable name resolution.\n\
    \   Other than that, the authors are not aware of any additional security\n  \
    \ issues introduced by this mechanism.\n"
- title: 7. Conclusion
  contents:
  - "7. Conclusion\n   The suggested scheme gives more flexibility in delegating authority\n\
    \   in the IN-ADDR.ARPA domain, thus making it possible to assign address\n  \
    \ space more efficiently without losing the ability to delegate the DNS\n   authority\
    \ over the corresponding address to name mappings.\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   Glen A. Herrmannsfeldt described this trick on comp.protocols.tcp-\n\
    \   ip.domains some time ago.  Alan Barrett and Sam Wilson provided\n   valuable\
    \ comments on the newsgroup.\n   We would like to thank Rob Austein, Randy Bush,\
    \ Matt Crawford, Robert\n   Elz, Glen A. Herrmannsfeldt, Daniel Karrenberg, David\
    \ Kessens, Tony\n   Li, Paul Mockapetris, Eric Wassenaar, Michael Patton, Hans\
    \ Maurer,\n   and Peter Koch for their review and constructive comments.\n"
- title: 9. References
  contents:
  - "9. References\n   [1]  Mockapetris, P., \"Domain Names - Concepts and Facilities\"\
    ,\n        STD 13, RFC 1034, November 1987.\n   [2]  Harrenstien, K., Stahl, M.,\
    \ and E. Feinler, \"DoD Internet Host\n        Table Specification\", RFC 952,\
    \ October 1985.\n   [3]  Elz, R., and R. Bush, \"Clarifications to the DNS\n \
    \       Specification\", RFC 2181, July 1997.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Havard Eidnes\n   SINTEF RUNIT\n   N-7034 Trondheim\n\
    \   Norway\n   Phone: +47 73 59 44 68\n   Fax: +47 73 59 17 00\n   EMail: Havard.Eidnes@runit.sintef.no\n\
    \   Geert Jan de Groot\n   Berkeley Software Design, Inc. (BSDI)\n   Hendrik Staetslaan\
    \ 69\n   5622 HM Eindhoven\n   The Netherlands\n   Phone: +31 40 2960509\n   Fax:\
    \   +31 40 2960309\n   EMail: GeertJan.deGroot@bsdi.com\n   Paul Vixie\n   Internet\
    \ Software Consortium\n   Star Route Box 159A\n   Woodside, CA 94062\n   USA\n\
    \   Phone: +1 415 747 0204\n   EMail: paul@vix.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
