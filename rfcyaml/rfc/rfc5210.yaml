- title: __initial_text__
  contents:
  - "        A Source Address Validation Architecture (SAVA) Testbed\n           \
    \            and Deployment Experience\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Because the Internet forwards packets according to the IP destination\n\
    \   address, packet forwarding typically takes place without inspection\n   of\
    \ the source address and malicious attacks have been launched using\n   spoofed\
    \ source addresses.  In an effort to enhance the Internet with\n   IP source address\
    \ validation, a prototype implementation of the IP\n   Source Address Validation\
    \ Architecture (SAVA) was created and an\n   evaluation was conducted on an IPv6\
    \ network.  This document reports\n   on the prototype implementation and the\
    \ test results, as well as the\n   lessons and insights gained from experimentation.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  A Prototype SAVA Implementation  . . . . . . . . . .\
    \ . . . . .  4\n     2.1.  Solution Overview  . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.2.  IP Source Address Validation in the Access Network .\
    \ . . .  6\n     2.3.  IP Source Address Validation at Intra-AS/Ingress Point\
    \ . .  9\n     2.4.  IP Source Address Validation in the Inter-AS Case\n     \
    \      (Neighboring AS) . . . . . . . . . . . . . . . . . . . . .  9\n     2.5.\
    \  IP Source Address Validation in the Inter-AS Case\n           (Non-Neighboring\
    \ AS) . . . . . . . . . . . . . . . . . . . 12\n   3.  SAVA Testbed . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 15\n     3.1.  CNGI-CERNET2 . . . .\
    \ . . . . . . . . . . . . . . . . . . . 15\n     3.2.  SAVA Testbed on CNGI-CERNET2\
    \ Infrastructure  . . . . . . . 16\n   4.  Test Experience and Results  . . .\
    \ . . . . . . . . . . . . . . 17\n     4.1.  Test Scenarios . . . . . . . . .\
    \ . . . . . . . . . . . . . 17\n     4.2.  Test Results . . . . . . . . . . .\
    \ . . . . . . . . . . . . 18\n   5.  Limitations and Issues . . . . . . . . .\
    \ . . . . . . . . . . . 18\n     5.1.  General Issues . . . . . . . . . . . .\
    \ . . . . . . . . . . 18\n     5.2.  Security Issues  . . . . . . . . . . . .\
    \ . . . . . . . . . 20\n     5.3.  Protocol Details . . . . . . . . . . . . .\
    \ . . . . . . . . 20\n   6.  Conclusion . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 21\n   7.  Security Considerations  . . . . . . . . . . . . .\
    \ . . . . . . 22\n   8.  Acknowledgements . . . . . . . . . . . . . . . . . .\
    \ . . . . . 22\n   9.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 23\n     9.1.  Normative References . . . . . . . . . . . . . . . .\
    \ . . . 23\n     9.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . . 23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   By design, the Internet forwards data packets solely based\
    \ on the\n   destination IP address.  The source IP address is not checked during\n\
    \   the forwarding process in most cases.  This makes it easy for\n   malicious\
    \ hosts to spoof the source address of the IP packet.  We\n   believe that it\
    \ would be useful to enforce the validity of the source\n   IP address for all\
    \ the packets being forwarded.\n   Enforcing the source IP address validity would\
    \ help us achieve the\n   following goals:\n   o  Since packets which carry spoofed\
    \ source addresses would not be\n      forwarded, it would be impossible to launch\
    \ network attacks that\n      are enabled by using spoofed source addresses and\
    \ more difficult\n      to successfully carry out attacks enhanced or strengthened\
    \ by the\n      use of spoofed source addresses.\n   o  Being able to assume that\
    \ all packet source addresses are correct\n      would allow traceback to be accomplished\
    \ accurately and with\n      confidence.  This would benefit network diagnosis,\
    \ management,\n      accounting, and applications.\n   As part of the effort in\
    \ developing a Source Address Validation\n   Architecture (SAVA), we implemented\
    \ a SAVA prototype and deployed the\n   prototype in 12 ASes in an operational\
    \ network as part of China Next\n   Generation Internet (CNGI) Project [Wu07].\
    \  We conducted evaluation\n   experiments.  In this document, we first describe\
    \ the prototype\n   solutions and then report experimental results.  We hope that\
    \ this\n   document can provide useful insights to those interested in the\n \
    \  subject, and can serve as an initial input to future IETF effort in\n   this\
    \ area.\n   In recent years, there have been a number of research and engineering\n\
    \   efforts to design IP source address validation mechanisms, such as\n   [RFC2827],\
    \ [Park01], [Li02], [Brem05], and [Snoe01].  Our SAVA\n   prototype implementation\
    \ was inspired by some of the schemes from the\n   proposed or existing solutions.\n\
    \   The prototype implementation and experimental results presented in\n   this\
    \ report serve only as an input, and by no means preempt any\n   solution development\
    \ that may be carried out by future IETF effort.\n   Indeed, the presented solutions\
    \ are experimental approaches and have\n   a number of limitations as discussed\
    \ in Sections 5 and 6.\n"
- title: 2.  A Prototype SAVA Implementation
  contents:
  - '2.  A Prototype SAVA Implementation

    '
- title: 2.1.  Solution Overview
  contents:
  - "2.1.  Solution Overview\n   A multiple-fence solution is proposed in this document.\
    \  That is,\n   there are multiple points in the network at which the validity\
    \ of a\n   packet's source address can be checked.  This is because in the\n \
    \  current single-fence model where source address validity is\n   essentially\
    \ checked only at ingress to the network, deployment has\n   been inadequate to\
    \ the point that there is always sufficient\n   opportunity to mount attacks based\
    \ on spoofed source addresses, and\n   it seems likely that this condition will\
    \ continue in the foreseeable\n   future.  A multiple-fence solution will allow\
    \ \"holes\" in deployment\n   to be covered and validity of the source address\
    \ to be evaluated with\n   increased confidence across the whole Internet.  The\
    \ assumption here\n   is that when validity checking is not universal, it is still\n\
    \   worthwhile to increase the confidence in the validity of source\n   addresses\
    \ and to reduce the opportunities to mount a source address\n   spoofing attack.\n\
    \   Furthermore, the architecture allows for multiple independent and\n   loosely-coupled\
    \ checking mechanisms.  The motivation for this is that\n   in the Internet at\
    \ large, it is unrealistic to expect any single IP\n   source address validation\
    \ mechanism to be universally supported.\n   Different operators and vendors may\
    \ choose to deploy/develop\n   different mechanisms to achieve the same end, and\
    \ there need to be\n   different mechanisms to solve the problem at different\
    \ places in the\n   network.  Furthermore, implementation bugs or configuration\
    \ errors\n   could potentially render an implementation ineffective.  Therefore,\n\
    \   our prototype SAVA implementation is a combination of multiple\n   coexisting\
    \ and cooperating mechanisms.  More specifically, we\n   implement source IP address\
    \ validation at three levels: access\n   network source address validation; intra-AS\
    \ source address\n   validation; and inter-AS source address validation, as shown\
    \ in\n   Figure 1.  The system details can be found in [Wu07].\n             \
    \        __ ____                          __ ____\n                 .-''     \
    \  `':                   .-''       `':\n                 |             |    \
    \              |             |\n                 |   +-+----+  |   Inter-AS SAV\
    \   |   +-+----+  |\n                 |   |Router+--+------------------+---|Router+\
    \  +\n                 |   +--.---+  |                  |   +--.---+  |\n    \
    \  Intra-AS   |      |       \\      Intra-AS   |      |      |\n         SAV\
    \     |   +--+---+    \\        SAV     |   +--+---+  |\n                 |  \
    \ |Router|     \\               |   |Router|  |\n                 |   +--.---+\
    \      \\               '_  +-----+  _\n                 |      |           \\\
    \               `'-------'''\n                /       |            \\\n      \
    \         /        |             \\\n              | +---------------------+\\\
    \n          ----+---------. Router      | \\\n              | ++-------\\------------+\
    \  \\\n              |  |     |  \\    |     |    |\n              |  | +------+|+------++----+|Intra-AS\n\
    \              |  | |Switch|||Switch||Host||SAV\n              |  | +------+|+------++----+|\n\
    \              |  |     |   |  |    \\      |\n              |+-+--++----+|+----++----+\
    \  |\n              ||Host||Host|||Host||Host|  |\n              `+----++----+|+----++----+\
    \ /\n                `--.       |         _.-'\n                    `------|------+''\n\
    \                 Access    |\n                 Network   |\n                \
    \  SAV\n       Key:  SAV - Source Address Validation\n                       \
    \ Figure 1: Solution Overview\n   This document divides source address validation\
    \ into three different\n   classes of solutions:\n   1.  Access network.  This\
    \ prevents a host in a network from spoofing\n       the address of another host\
    \ in the same network segment.  This\n       enables host-granularity of protection\
    \ compared to Intra-AS\n       prevention.  See Section 2.2 for details.\n   2.\
    \  Intra-AS.  When the edge router of an access network performs\n       source\
    \ address validation (e.g., using [RFC2827] and [RFC3704]),\n       hosts are\
    \ prevented from spoofing an arbitrary address, but\n       unless access network\
    \ SAV is employed, they may be able to spoof\n       an address of a host in the\
    \ same network segment.  In a\n       degenerate case, when a router connects\
    \ a single host, the host\n       can't spoof any address.\n   3.  Inter-AS. \
    \ Mechanisms that enforce packet source address\n       correctness at AS boundaries.\
    \  Because the global Internet has a\n       mesh topology, and because different\
    \ networks belong to different\n       administrative authorities, IP source address\
    \ validation at the\n       Inter-AS level is more challenging.  Nevertheless,\
    \ we believe\n       this third level of protection is necessary to detect packets\n\
    \       with spoofed source addresses, when the first two levels of\n       source\
    \ address validation are missing or ineffective.\n   In the following sections,\
    \ we describe the specific mechanisms\n   implemented at each of the three levels\
    \ in detail.\n"
- title: 2.2.  IP Source Address Validation in the Access Network
  contents:
  - "2.2.  IP Source Address Validation in the Access Network\n   At the access network\
    \ level, the solution ensures the host inside the\n   access network cannot use\
    \ the source address of another host.  The\n   host address should be a valid\
    \ address assigned to the host\n   statically or dynamically.  The solution implemented\
    \ in the\n   experiment provides such a function for Ethernet networks.  A layer-3\n\
    \   source address validation architecture device (SAVA Device) for the\n   access\
    \ network (the device can be a function inside the Customer\n   Premises Equipment\
    \ (CPE) router or a separate device) is deployed at\n   the exit of the access\
    \ network.  Source address validation\n   architecture agents (SAVA Agents) are\
    \ deployed inside the access\n   network.  (In fact, these agents could be a function\
    \ inside the first\n   hop router/switch connected to the hosts.)  A set of protocols\
    \ was\n   designed for communication between the host, SAVA Agent, and SAVA\n\
    \   Device.  Only a packet originating from the host that was assigned\n   that\
    \ particular source address may pass through the SAVA Agent and\n   SAVA Device.\n\
    \   Two possible deployment variants exist; we will call them Variant A\n   and\
    \ Variant B.  In Variant A, an agent is mandatory and each host is\n   attached\
    \ to the agent on a dedicated physical port.  In Variant B,\n   hosts are required\
    \ to perform network access authentication and\n   generate key material needed\
    \ to protect each packet.  In this\n   variant, the agent is optional.\n   The\
    \ key function of Variant A is to create a dynamic binding between\n   a switch\
    \ port and valid source IP address, or a binding between Media\n   Access Control\
    \ (MAC) address, source IP address, and switch port.  In\n   the prototype, this\
    \ is established by having hosts employ a new\n   address configuration protocol\
    \ that the switch is capable of\n   tracking.\n   Note:  In a production environment,\
    \ the approach in the prototype\n      would not be sufficient due to reasons\
    \ discussed in Section 5.\n   In Variant A, there are three main participants:\
    \ Source Address\n   Request Client (SARC) on the host, Source Address Validation\
    \ Proxy\n   (SAVP) on the switch, and Source Address Management Server (SAMS).\
    \ as\n   shown in Figure 2.  The solution follows the basic steps below:\n   1.\
    \  The SARC on the end host sends an IP address request.  The SAVP\n       on\
    \ the switch relays this request to the SAMS and records the MAC\n       address\
    \ and incoming port.  If the address has already been\n       predetermined by\
    \ the end host, the end host still needs to put\n       that address in the request\
    \ message for verification by SAMS.\n   2.  After the SAMS receives the IP address\
    \ request, it then allocates\n       a source address for that SARC based on the\
    \ address allocation\n       and management policy of the access network, it stores\
    \ the\n       allocation of the IP address in the SAMS history database for\n\
    \       traceback, then sends response message containing the allocated\n    \
    \   address to the SARC.\n   3.  After the SAVP on the access switch receives\
    \ the response, it\n       binds the IP address and the former stored MAC address\
    \ of the\n       request message with the switch port on the binding table.  Then,\n\
    \       it forwards the issued address to SARC on the end host.\n   4.  The access\
    \ switch begins to filter packets sent from the end\n       host.  Packets which\
    \ do not conform to the tuple (IP address,\n       Switch Port) are discarded.\n\
    \                         ----------------\n                         | SERVER\
    \        |\n                         |    -------    |\n                     \
    \    |    | SAMS |   |\n                         |    --------   |\n         \
    \                -----------------\n                                 |\n     \
    \                            |\n                         ----------------\n  \
    \                       | SWITCH        |\n                         |    -------\
    \    |\n                         |    | SAVP |   |\n                         |\
    \    --------   |\n                         -----------------\n              \
    \                   |\n                                 |\n                  \
    \       ----------------\n                         | END HOST      |\n       \
    \                  |    -------    |\n                         |    | SARC | \
    \  |\n                         |    --------   |\n                         -----------------\n\
    \         Key:     SARC - Source Address Request Client\n                  SAVP\
    \ - Source Address Validation Proxy\n                  SAMS - Source Address Management\
    \ Sever\n           Figure 2: Binding-Based IP Source Address Validation\n   \
    \                        in the Access Network\n   The main idea of Variant B\
    \ is to employ key material from network\n   access authentication for some additional\
    \ validation process.  A\n   session key is derived for each host connecting to\
    \ the network, and\n   each packet sent by the host has cryptographic protection\
    \ that\n   employs this session key.  After establishing which host the packet\n\
    \   comes from, it again becomes possible to track whether the addresses\n   allocated\
    \ to the host match those used by the host.  The mechanism\n   details can be\
    \ found in [XBW07], but the process follows these basic\n   steps:\n   1.  When\
    \ a host wants to establish connectivity, it needs to perform\n       network\
    \ access authentication.\n   2.  The network access devices provide the SAVA Agent\
    \ (often co-\n       located) a session key S.  This key is further distributed\
    \ to the\n       SAVA Device.  The SAVA Device binds the session key and the\n\
    \       host's IP address.\n   3.  When the host sends packet M to somewhere outside\
    \ the access\n       network, either the host or the SAVA Agent needs to generate\
    \ a\n       message authentication code for each using key S and packet M.\n \
    \       In the prototype, the message authentication code is carried in\n    \
    \   an experimental IPv6 extension header.\n   4.  The SAVA Device uses the session\
    \ key to authenticate the\n       signature carried in the packet so that it can\
    \ validate the\n       source address.\n   In our testbed, we implemented and\
    \ tested both solutions.  The\n   switch-based solution has better performance,\
    \ but the switches in the\n   access network would need to be upgraded (usually\
    \ the number of\n   switches in an access network is large).  The signature-based\n\
    \   solution could be deployed between the host and the exit router, but\n   it\
    \ has some extra cost in inserting and validating the signature.\n"
- title: 2.3.  IP Source Address Validation at Intra-AS/Ingress Point
  contents:
  - "2.3.  IP Source Address Validation at Intra-AS/Ingress Point\n   We adopted the\
    \ solution of the source address validation of IP\n   packets at ingress points\
    \ described in [RFC2827] and [RFC3704]; the\n   latter describes source address\
    \ validation at the ingress points of\n   multi-homed access networks.\n"
- title: 2.4.  IP Source Address Validation in the Inter-AS Case (Neighboring AS)
  contents:
  - "2.4.  IP Source Address Validation in the Inter-AS Case (Neighboring AS)\n  \
    \ Our design for the Inter-AS Source Address Validation included the\n   following\
    \ characteristics: It should cooperate among different ASes\n   with different\
    \ administrative authorities and different interests.\n   It should be lightweight\
    \ enough to support high throughput and not to\n   influence forwarding efficiency.\n\
    \   The inter-AS level of SAVA can be classified into two sub-cases:\n   o  Two\
    \ SAVA-compliant ASes exchanging traffic are directly connected;\n   o  Two SAVA-compliant\
    \ ASes are separated by one or more intervening,\n      non-SAVA-compliant providers.\n\
    \                                        ---------\n                         \
    \               | AIMS   |\n                                         ------|-\n\
    \                                               |\n   --------------         \
    \          -----------|-----\n   |  AS-4       |--------  --------|    AS-1  |\
    \    |-------     Global\n   | ------      |ASBR,VE|->|ASBR,VE|    ------|-  \
    \ |ASBR,VE|--->IPv6\n   | |VRGE|      |--------  --------|    | VRGE |   |-------\
    \     Network\n   | ------      |                  |    --------   |\n   ---------------\
    \            ----- -----------------\n                              |ASBR,VE|\
    \    |ASBR,VE|\n                              ---------    ---------\n       \
    \                        /             |\n                              /    \
    \          |\n                             /               |\n               \
    \             /                |\n                        ----------        --------\n\
    \                        |ASBR, VE|        |ASBR,VE|\n                   ---------------\
    \      -------------\n                   |   AS-2      |      |  AS-3     |\n\
    \                   |  -----      |      |   -----   |\n                   | \
    \ |VRGE|     |      |  |VRGE|   |\n                   |  -----      |      | \
    \ ------   |\n                   ---------------      -------------\n        \
    \  Key:     AIMS - AS-IPv6 prefix Mapping Server\n                   ASBR - AS\
    \ Border Router\n                   VE   - Validating Engine\n               \
    \    VR   - Validation Rule\n                   VRGE - Validation Rule Generating\
    \ Engine\n               Figure 3: Inter-ISP (Neighboring AS) Solution\n   Two\
    \ ASes that exchange traffic have a customer-to-provider, provider-\n   to-customer,\
    \ peer-to-peer, or sibling-to-sibling relationship.  In a\n   customer-to-provider\
    \ or provider-to-customer relationship, the\n   customer typically belongs to\
    \ a smaller administrative domain that\n   pays a larger administrative domain\
    \ for access to the rest of\n   Internet.  The provider is an AS that belongs\
    \ to the larger\n   administrative domain.  In a peer-to-peer relationship, the\
    \ two peers\n   typically belong to administrative domains of comparable size\
    \ and\n   find it mutually advantageous to exchange traffic between their\n  \
    \ respective customers.  Two ASes have a sibling-to-sibling\n   relationship if\
    \ they belong to the same administrative domain or to\n   administrative domains\
    \ that have a mutual-transit agreement.\n   An AS-relation-based mechanism is\
    \ used for neighboring SAVA-compliant\n   ASes.  The basic ideas of this AS-relation-based\
    \ mechanism are as\n   follows.  It builds a VR table that associates each incoming\n\
    \   interface of a router with a set of valid source address blocks, and\n   then\
    \ uses it to filter spoofed packets.\n   In the solution implemented on the testbed,\
    \ the solution for the\n   validation of IPv6 prefixes is separated into three\
    \ functional\n   modules: The Validation Rule Generating Engine (VRGE), the Validation\n\
    \   Engine (VE), and the AS-IPv6 prefix Mapping Server (AIMS).\n   Validation\
    \ rules that are generated by the VRGE are expressed as IPv6\n   address prefixes.\n\
    \   The VRGE generates validation rules that are derived according to\n   Table\
    \ 1, and each AS has a VRGE.  The VE loads validation rules\n   generated by VRGE\
    \ to filter packets passed between ASes (in the case\n   of Figure 3, from neighboring\
    \ ASes into AS-1).  In the SAVA testbed,\n   the VE is implemented as a simulated\
    \ layer-2 device on a Linux-based\n   machine inserted into the data path just\
    \ outside each ASBR interface\n   that faces a neighboring AS.  In a real-world\
    \ implementation, it\n   would probably be implemented as a packet-filtering set\
    \ on the ASBR.\n   The AS-IPv6 prefix mapping server is also implemented on a\
    \ Linux\n   machine and derives a mapping between an IPv6 prefix and the AS\n\
    \   number of that prefix.\n  ----------------------------------------------------------------------\n\
    \  |   \\Export| Own     | Customer's| Sibling's | Provider's | Peer's   |\n \
    \ |To  \\     | Address | Address   | Address   | Address    | Address  |\n  |-----\\\
    --------------------------------------------------------------|\n  | Provider\
    \ |    Y    |     Y     |     Y     |            |          |\n  |--------------------------------------------------------------------|\n\
    \  | Customer |    Y    |     Y     |     Y     |     Y      |    Y     |\n  |--------------------------------------------------------------------|\n\
    \  | Peer     |    Y    |     Y     |     Y     |            |          |\n  |--------------------------------------------------------------------|\n\
    \  | Sibling  |    Y    |     Y     |     Y     |     Y      |    Y     |\n  ----------------------------------------------------------------------\n\
    \           Table 1: AS-Relation-Based Inter-AS Filtering\n   Different ASes exchange\
    \ and transmit VR information using the AS-\n   Relation-Based Export Rules in\
    \ the VRGE.  As per Table 1, an AS\n   exports the address prefixes of itself,\
    \ its customers, its providers,\n   its siblings, and its peers to its customers\
    \ and siblings as valid\n   prefixes, while it only exports the address prefixes\
    \ of itself, its\n   customers, and its siblings to its providers and peers as\
    \ valid\n   prefixes.  With the support of the AS-IPv6 prefix mapping server,\n\
    \   only AS numbers of valid address prefixes are transferred between\n   ASes,\
    \ and the AS number is mapped to address prefixes at the VRGE.\n   Only changes\
    \ of AS relation and changes of IP address prefixes\n   belonging to an AS require\
    \ the generation of VR updates.\n   The procedure's principal steps are as follows\
    \ (starting from AS-1 in\n   Figure 3):\n   1.  When the VRGE has initialized,\
    \ it reads its neighboring SAVA-\n       compliant AS table and establishes connections\
    \ to all the VEs in\n       its own AS.\n   2.  The VRGE initiates a VR renewal.\
    \  According to its export table,\n       it sends its own originated VR to VRGEs\
    \ of neighboring ASes.  In\n       this process, VRs are expressed as AS numbers.\n\
    \   3.  When a VRGE receives a new VR from its neighbor, it uses its own\n   \
    \    export table to decide whether it should accept the VR and, if it\n     \
    \  accepts a VR, whether or not it should re-export the VR to other\n       neighboring\
    \ ASes.\n   4.  If the VRGE accepts a VR, it uses the AIMS to transform the AS-\n\
    \       expressed VR into an IPv6 prefix-expressed VR.\n   5.  The VRGE pushes\
    \ the VR to all the VEs in its AS.\n   The VEs use these prefix-based VRs to validate\
    \ the source IP\n   addresses of incoming packets.\n"
- title: 2.5.  IP Source Address Validation in the Inter-AS Case
  contents:
  - "2.5.  IP Source Address Validation in the Inter-AS Case\n      (Non-Neighboring\
    \ AS)\n   In the case where two ASes do not exchange packets directly, it is\n\
    \   not possible to deploy a solution like that described in the previous\n  \
    \ section.  However, it is highly desirable for non-neighboring ISPs to\n   be\
    \ able to form a trust alliance such that packets leaving one AS\n   will be recognized\
    \ by the other and inherit the validation status\n   they possessed on leaving\
    \ the first AS.  There is more than one way\n   to do this.  For the SAVA experiments\
    \ to date, an authentication tag\n   method has been used.  This solution is inspired\
    \ by the work of\n   [Brem05].\n   The key elements of this lightweight authentication\
    \ tag based\n   mechanism are as follows: For each pair of SAVA-compliant ASes,\
    \ there\n   is a pair of unique temporary authentication tags.  All SAVA-\n  \
    \ compliant ASes together form a SAVA AS Alliance.  When a packet is\n   leaving\
    \ its own AS, if the destination IP address belongs to an AS in\n   the SAVA AS\
    \ Alliance, the edge router of this AS looks up the\n   authentication tag using\
    \ the destination AS number as the key, and\n   adds an authentication tag to\
    \ the packet.  When a packet arrives at\n   the destination AS, if the source\
    \ address of the packet belongs to an\n   AS in the SAVA AS Alliance, the edge\
    \ router of the destination AS\n   searches its table for the authentication tag\
    \ using the source AS\n   number as the key, and the authentication tag carried\
    \ in the packet\n   is verified and removed.  As suggested by its name, this particular\n\
    \   method uses a lightweight authentication tag.  For every packet\n   forwarded,\
    \ the authentication tag can be put in an IPv6 hop-by-hop\n   extension header.\
    \  It is reasonable to use a 128-bit shared random\n   number as the authentication\
    \ tag to save the processing overhead\n   brought by using a cryptographic method\
    \ to generate the\n   authentication tag.\n   The benefit of this scheme compared\
    \ to merely turning on local\n   address validation (such as RFC 2827) is as follows:\
    \ when local\n   address validation is employed within a group of networks, it\
    \ is\n   assured that their networks do not send spoofed packets.  But other\n\
    \   networks may still do this.  With the above scheme, however, this\n   capability\
    \ is eliminated.  If someone outside the alliance spoofs a\n   packet using a\
    \ source address from someone within the alliance, the\n   members of the alliance\
    \ refuse to accept such a packet.\n                                +-----+\n \
    \             .-----------------+ REG |-----------------.\n              |   \
    \              +-----+                 |\n              |                    \
    \                     |\n        ,-----+--------                          ,------+-------\n\
    \      ,'     `|        `.                      ,'     ` |       `.\n     /  \
    \      |         \\                     /         |         \\\n    /        \
    \ |          \\                   /          |          \\\n   ;       +--'--+\
    \      +----+             +----+     +-----+       ;\n   |       | ASC +------+ASBR|\
    \             |ASBR+-----+ ASC |       |\n   :       +--.--+      +----+`    \
    \        +----+     +--+--+       :\n    \\         |__________________________________________|\
    \         /\n     \\                   /                    \\               \
    \    /\n      `.               ,'                      `.               ,'\n \
    \       '-------------'                          '-------------'\n           \
    \  AS-1                                     AS-2\n                 Key:   REG\
    \  - Registration Server\n                        ASC  - AS Control Server\n \
    \                       ASBR - AS Border Router\n             Figure 4: Inter-AS\
    \ (Non-Neighboring AS) Solution\n   There are three major components in the system:\
    \ the Registration\n   Server (REG), the AS Control Server (ASC), and the AS Border\
    \ Router\n   (ASBR).\n   The Registration Server is the \"center\" of the trust\
    \ alliance (TA).\n   It maintains a member list for the TA.  It performs two major\n\
    \   functions:\n   o  Processes requests from the AS Control Server, to get the\
    \ member\n      list for the TA.\n   o  Notifies each AS Control Server when the\
    \ member list is changed.\n   Each AS deploying the method has an AS Control Server.\
    \  The AS\n   Control Server has three major functions:\n   o  Communicates with\
    \ the Registration Server, to get the up-to-date\n      member list of TA.\n \
    \  o  Communicates with the AS Control Server in other member ASes in\n      the\
    \ TA, to exchange updates of prefix ownership information and to\n      exchange\
    \ authentication tags.\n   o  Communicates with all AS Border Routers of the local\
    \ AS, to\n      configure the processing component on the AS Border Routers.\n\
    \   The AS Border Router does the work of adding the authentication tag\n   to\
    \ the packet at the sending AS, and the work of verifying and\n   removing the\
    \ authentication tag at the destination AS.\n   In the design of this system,\
    \ in order to decrease the burden on the\n   REG, most of the control traffic\
    \ happens between ASCs.\n   The authentication tag needs to be changed periodically.\
    \  Although\n   the overhead of maintaining and exchanging authentication tags\n\
    \   between AS pairs is O(N) from the point of view of one AS, rather\n   than\
    \ O(N^2), the traffic and processing overhead do increase as the\n   number of\
    \ ASes increases.  Therefore, an automatic authentication tag\n   refresh mechanism\
    \ is utilized in this solution.  In this mechanism,\n   each peer runs the same\
    \ algorithm to automatically generate an\n   authentication tag sequence.  Then\
    \ the authentication tag in packets\n   can be changed automatically with high\
    \ frequency.  To enhance the\n   security, a seed is used for the algorithm to\
    \ generate an\n   authentication tag sequence robust against guessing.  Thus,\
    \ the peers\n   need only to negotiate and change the seed at very low frequency.\n\
    \   This lowers the overhead associated with frequently negotiating and\n   changing\
    \ the authentication tag while maintaining acceptable\n   security.\n   Since\
    \ the authentication tag is put in an IPv6 hop-by-hop extension\n   header, the\
    \ MTU issues should be considered.  Currently we have two\n   solutions to this\
    \ problem.  Neither of the solutions is perfect, but\n   they are both feasible.\
    \  One possible way is to set the MTU at the\n   ASBR to be 1280 bytes, which\
    \ is the minimum MTU for the IPv6.  Thus,\n   there should be no ICMP \"Packet\
    \ Too Big\" message received from the\n   downstream gateways.  The disadvantage\
    \ of this solution is that it\n   doesn't make good use of the available MTU.\
    \  The other possible way\n   is to let the ASBR catch all incoming ICMP \"Packet\
    \ Too Big\" messages,\n   and decrease the value in the MTU field before forwarding\
    \ it into the\n   AS.  The advantage of this solution is that it can make good\
    \ use of\n   the available MTU.  But such processing of ICMP packets at the ASBR\n\
    \   may create a target for a denial-of-service (DoS) attack.\n   Because the\
    \ authentication tag is validated at the border router of\n   the destination\
    \ AS, not the destination host, the destination options\n   header is not chosen\
    \ to carry the authentication tag.\n   Authentication tag management is a critical\
    \ issue.  Our work focused\n   on two points: tag negotiation and tag refresh.\
    \  The tag negotiation\n   happens between the ASCs of a pair of ASes in the SAVA\
    \ AS Alliance.\n   Considering the issue of synchronization and the incentive\
    \ of\n   enabling SAVA, receiver-driven tag negotiation is suggested.  It\n  \
    \ gives more decision power to the receiver AS rather than the sender\n   AS.\
    \  With a receiver-driven scheme, the receiver AS can decide the\n   policies\
    \ of tag management.  The packets tagged with old\n   authentication tags should\
    \ not be allowed indefinitely.  Rather,\n   after having negotiated a new tag,\
    \ the old tag should be set to be\n   invalid after a period of time.  The length\
    \ of this period is a\n   parameter that will control how long the old tag will\
    \ be valid after\n   the new tag has been assigned.  In the experiment, we used\
    \ five\n   seconds.\n   The trust alliance is intended to be established dynamically\
    \ (join\n   and quit), but in this testbed we needed to confirm off-line the\n\
    \   initial trust among alliance members.\n"
- title: 3.  SAVA Testbed
  contents:
  - '3.  SAVA Testbed

    '
- title: 3.1.  CNGI-CERNET2
  contents:
  - "3.1.  CNGI-CERNET2\n   The prototypes of our solutions for SAVA are implemented\
    \ and tested\n   on CNGI-CERNET2.  CNGI-CERNET2 is one of the China Next Generation\n\
    \   Internet (CNGI) backbones, operated by the China Education and\n   Research\
    \ Network (CERNET).  CNGI-CERNET2 connects 25 core nodes\n   distributed in 20\
    \ cities in China at speeds of 2.5-10 Gb/s.  The\n   CNGI-CERNET2 backbones are\
    \ IPv6-only networks rather than being a\n   mixed IPv4/IPv6 infrastructure. \
    \ Only some Customer Premises Networks\n   (CPNs) are dual-stacked.  The CNGI-CERNET2\
    \ backbones, CNGI-CERNET2\n   CPNs, and CNGI-6IX all have globally unique AS numbers.\
    \  Thus a\n   multi-AS testbed environment is provided.\n"
- title: 3.2.  SAVA Testbed on CNGI-CERNET2 Infrastructure
  contents:
  - "3.2.  SAVA Testbed on CNGI-CERNET2 Infrastructure\n   It is intended that eventually\
    \ the SAVA testbed will be implemented\n   directly on the CNGI-CERNET2 backbone,\
    \ but in the early stages the\n   testbed has been implemented across 12 universities\
    \ connected to\n   CNGI-CERNET2.  First, this is because some of the algorithms\
    \ need to\n   be implemented in the testbed routers themselves, and to date they\n\
    \   have not been implemented on any of the commercial routers forming\n   the\
    \ CNGI-CERNET2 backbone.  Second, since CNGI-CERNET2 is an\n   operational backbone,\
    \ any new protocols and networking techniques\n   need to be tested in a non-disruptive\
    \ way.\n                               __\n                             ,'  \\\
    \                            _,...._\n                            ,'    \\____---------------+\
    \     ,'Beijing`.\n                            /      \\  | Inter-AS SAV  |-----|\
    \ Univ    |\n    +---------------+     |         | +---------------+     `-._____,'\n\
    \    | Inter-AS SAV  +-----|         |\n    +------.--------+     |  CNGI-  |\
    \                         _,...._\n           |              | CERNET2 |__---------------+\
    \     ,Northeast`.\n           |              |         | |Inter-AS SAV   |-----|\
    \ Univ    |\n   Tsinghua|University    | Backbone| +---------------+     `-._____,'\n\
    \        ,,-|-._           |         |\n      ,'   |   `.         |         |\n\
    \    ,'+---------+\\        |         |\n   |  |Intra-AS | |       |         |\
    \      ...\n   |  |   SAV   | |       |         |\n   |  +---------+ |       |\
    \         |\n   |       |      |       |         |                         _,...._\n\
    \   |  +---------+ |       |         |__---------------+     ,Chongqing`.\n  \
    \ |  | Access  | |       |         | |Inter-AS SAV   |-----|Univ     |\n   | \
    \ | Network | |       |         | +---------------+     `-._____,'\n   |  |  SAV\
    \    | |       |         |\n    \\ +---------+.'        \\       .'\n     \\ \
    \         ,'          \\      |\n      `.      ,'             \\    /\n      \
    \  ``---'                -_,'\n                  Key:  SAV - Source Address Validation\n\
    \                    Figure 5: CNGI-CERNET2 SAVA Testbed\n   In any case, the\
    \ testbed is fully capable of functional testing of\n   solutions for all parts\
    \ of SAVA.  This includes testing procedures\n   for ensuring the validity of\
    \ IPv6 source addresses in the access\n   network, in packets sent from the access\
    \ network to an IPv6 service\n   provider, in packets sent within one service\
    \ provider's network, in\n   packets sent between neighboring service providers,\
    \ and in packets\n   sent between service providers separated by an intervening\
    \ transit\n   network.\n   The testbed is distributed across 12 universities connected\
    \ to CNGI-\n   CERNET2.\n   Each of the university installations is connected\
    \ to the CNGI-CERNET2\n   backbone through a set of inter-AS Source Address Validation\n\
    \   prototype equipment and traffic monitoring equipment for test result\n   display.\n\
    \   Each university deployed one AS.  Six universities deployed all parts\n  \
    \ of the solution and are hence fully-featured, with validation at the\n   inter-AS,\
    \ intra-AS, and access network levels all able to be tested.\n   In addition,\
    \ a suite of applications that could be subject to\n   spoofing attacks or that\
    \ can be subverted to carry out spoofing\n   attacks were installed on a variety\
    \ of servers.  Two solutions for\n   the access network were deployed.\n"
- title: 4.  Test Experience and Results
  contents:
  - "4.  Test Experience and Results\n   The solutions outlined in section 2 were\
    \ implemented on the testbed\n   described in section 3.  Successful testing of\
    \ all solutions was been\n   carried out, as detailed in the following sections.\n"
- title: 4.1.  Test Scenarios
  contents:
  - "4.1.  Test Scenarios\n   For each of the test scenarios, we tested many cases.\
    \  Taking the\n   Inter-AS (non-neighboring AS) SAVA solution test as an example,\
    \ we\n   classified the test cases into three classes: normal class, dynamic\n\
    \   class, and anti-spoofing class.\n   1.  For normal class, there are three\
    \ cases: Adding authentication\n       tag Test, Removing authentication tag Test,\
    \ and Forwarding\n       packets with valid source address.\n   2.  For dynamic\
    \ class, there are four cases: Updating the\n       authentication tag between\
    \ ASes, The protection for a newly\n       joined member AS, Adding address space,\
    \ and Deleting address\n       space.\n   3.  For anti-spoofing class, there is\
    \ one case: Filtering of packets\n       with forged IP addresses.\n   As is shown\
    \ in Figure 5, we have \"multiple-fence\" design for our SAVA\n   testbed.  If\
    \ source address validation is deployed in the access\n   network, we can get\
    \ a host granularity validation.  If source address\n   validation is deployed\
    \ at the intra-AS level, we can guarantee that\n   the packets sent from this\
    \ point have a correct IP prefix.  If source\n   address validation is deployed\
    \ at the inter-AS level, we can\n   guarantee that the packets sent from this\
    \ point are from the correct\n   AS.\n"
- title: 4.2.  Test Results
  contents:
  - "4.2.  Test Results\n   1.  The test results are consistent with the expected\
    \ ones.  For an\n       AS that has fully-featured SAVA deployment with validation\
    \ at the\n       inter-AS, intra-AS, and access network levels, packets that do\n\
    \       not hold an authenticated source address will not be forwarded in\n  \
    \     the network.  As a result, it is not possible to launch network\n      \
    \ attacks with spoofed source addresses.  Moreover, the traffic in\n       the\
    \ network can be traced back accurately.\n   2.  For the Inter-AS (non-neighboring\
    \ AS) SAVA solution, during the\n       period of authentication tag update, the\
    \ old and the new\n       authentication tags are both valid for source address\
    \ validation;\n       thus, there is no packet loss.\n   3.  For the Inter-AS\
    \ (non-neighboring AS) SAVA solution, the\n       validation function is implemented\
    \ in software on a device\n       running Linux, which simulates the source address\
    \ validation\n       functions of a router interface.  It is a layer-2 device\
    \ because\n       it needs to be transparent to the router interface.  During\
    \ the\n       test, when the devices were connected directly, normal line-rate\n\
    \       forwarding was achieved.  When the devices were connected with\n     \
    \  routers from another vendor, only a very limited forwarding speed\n       was\
    \ achieved.  The reason is that the authentication tags are\n       added on the\
    \ IPv6 hop-by-hop option header, and many current\n       routers can handle the\
    \ hop-by-hop options only at a limited rate.\n"
- title: 5.  Limitations and Issues
  contents:
  - "5.  Limitations and Issues\n   There are several issues both within this overall\
    \ problem area and\n   with the particular approach taken in the experiment.\n"
- title: 5.1.  General Issues
  contents:
  - "5.1.  General Issues\n   There is a long-standing debate about whether the lack\
    \ of universal\n   deployment of source address validation is a technical issue\
    \ that\n   needs a technical solution, or if mere further deployment of existing\n\
    \   tools (such as RFC 2827) would be a more cost effective way to\n   improve\
    \ the situation.  Further deployment efforts of this tool have\n   proved to be\
    \ slow, however.  Some of the solutions prototyped in this\n   experiment allow\
    \ a group of network operators to have additional\n   protection for their networks\
    \ while waiting for universal deployment\n   of simpler tools in the rest of the\
    \ Internet.  This allows them to\n   prevent spoofing attacks that the simple\
    \ tools alone would not be\n   able to prevent, even if already deployed within\
    \ the group.\n   Similarly, since a large fraction of current denial-of-service\n\
    \   attacks can be launched by employing legitimate IP addresses\n   belonging\
    \ to botnet clients, even universal deployment of better\n   source address validation\
    \ techniques would be unable to prevent these\n   attacks.  However, tracing these\
    \ attacks would be easier given that\n   there would be more reliance on the validity\
    \ of source address.\n   There is also a question about the optimal placement\
    \ of the source\n   address validation checks.  The simplest model is placing\
    \ the checks\n   on the border of a network.  Such RFC 2827-style checks are more\n\
    \   widely deployed than full checks ensuring that all addresses within\n   the\
    \ network are correct.  It can be argued that it is sufficient to\n   provide\
    \ such coarse granularity checks, because this makes it at\n   least possible\
    \ to find the responsible network administrators.\n   However, depending on the\
    \ type of network in question, those\n   administrators may or may not find it\
    \ easy to track the specific\n   offending machines or users.  It is obviously\
    \ required that the\n   administrators have a way to trace offending equipment\
    \ or users --\n   even if the network does not block spoofed packets in real-time.\n\
    \   New technology for address validation would also face a number of\n   deployment\
    \ barriers.  For instance, all current technology can be\n   locally and independently\
    \ applied.  A system that requires global\n   operation (such as the Inter-AS\
    \ validation mechanism) would require\n   significant coordination, deployment\
    \ synchronization, configuration,\n   key setup, and other issues, given the number\
    \ of ASes.\n   Similarly, deploying host-based access network address validation\n\
    \   mechanisms requires host changes, and can generally be done only when\n  \
    \ the network owners are in control of all hosts.  Even then, the\n   changing\
    \ availability of the host for all types of products and\n   platforms would likely\
    \ prevent universal deployment even within a\n   single network.\n   There may\
    \ be also be significant costs involved in some of these\n   solutions.  For instance,\
    \ in an environment where access network\n   authentication is normally not required,\
    \ employing an authentication-\n   based access network address validation would\
    \ require deployment of\n   equipment capable of this authentication as well as\
    \ credentials\n   distribution for all devices.  Such undertaking is typically\
    \ only\n   initiated after careful evaluation of the costs and benefits\n   involved.\n\
    \   Finally, all the presented solutions have issues in situations that\n   go\
    \ beyond a simple model of a host connecting to a network via the\n   same single\
    \ interface at all times.  Multihoming, failover, and some\n   forms of mobility\
    \ or wireless solutions may collide with the\n   requirements of source address\
    \ validation.  In general, dynamic\n   changes to the attachment of hosts and\
    \ topology of the routing\n   infrastructure are something that would have to\
    \ be handled in a\n   production environment.\n"
- title: 5.2.  Security Issues
  contents:
  - "5.2.  Security Issues\n   The security vs. scalability of the authentication\
    \ tags in the\n   Inter-AS (non-neighboring AS) SAVA solution presents a difficult\n\
    \   tradeoff.  Some analysis about the difficulty of guessing the\n   authentication\
    \ tag between two AS members was discussed in [Brem05].\n   It is relatively difficult,\
    \ even with using a random number as an\n   \"authentication tag\".  The difficulty\
    \ of guessing can be increased by\n   increasing the length of the authentication\
    \ tag.\n   In any case, the random number approach is definitely vulnerable to\n\
    \   attackers who are on the path between the two ASes.\n   On the other hand,\
    \ using an actual cryptographic hash in the packets\n   will cause a significant\
    \ increase in the amount of effort needed to\n   forward a packet.  In general,\
    \ addition of the option and the\n   calculation of the authentication tag consume\
    \ valuable resources on\n   the forwarding path.  This resource usage comes on\
    \ top of everything\n   else that modern routers need to do at ever increasing\
    \ line speeds.\n   It is far from clear that the costs are worth the benefits.\n"
- title: 5.3.  Protocol Details
  contents:
  - "5.3.  Protocol Details\n   In the current CNGI-CERNET2 SAVA testbed, a 128-bit\
    \ authentication\n   tag is placed in an IPv6 hop-by-hop option header.  The size\
    \ of the\n   packets increases with the authentication tags.  This by itself is\n\
    \   expected to be acceptable, if the network administrator feels that\n   the\
    \ additional protection is needed.  The size increases may result\n   in an MTU\
    \ issue, and we found a way to resolve it in the testbed.\n   Since an IPv6 hop-by-hop\
    \ option header was chosen, the option header\n   has to be examined by all intervening\
    \ routers.  While in theory this\n   should pose no concern, the test results\
    \ show that many current\n   routers handle hop-by-hop options with a much reduced\
    \ throughput\n   compared to normal traffic.\n   The Inter-AS (neighboring AS)\
    \ SAVA solution is based on the AS\n   relation; thus, it may not synchronize\
    \ with the dynamics of route\n   changes very quickly and it may cause false positives.\
    \  Currently,\n   CNGI-CERNET2 is a relatively stable network, and this method\
    \ works\n   well in the testbed.  We will further study the impact of false\n\
    \   positives in an unstable network.\n   The access network address validation\
    \ solution is merely one option\n   among many.  Solutions appear to depend highly\
    \ on the chosen link\n   technology and network architecture.  For instance, source\
    \ address\n   validation on point-to-point links is easy and has generally been\n\
    \   supported by implementations for years.  Validation in shared\n   networks\
    \ has been more problematic, but is increasing in importance\n   given the use\
    \ of Ethernet technology across administrative boundaries\n   (such as in DSL).\
    \  In any case, the prototyped solution has a number\n   of limitations, including\
    \ the decision to use a new address\n   configuration protocol.  In a production\
    \ environment, a solution that\n   is suitable for all IPv6 address assignment\
    \ mechanisms would be\n   needed.\n"
- title: 6.  Conclusion
  contents:
  - "6.  Conclusion\n   Several conclusions can be drawn from the experiment.\n  \
    \ First, the experiment is a proof that a prototype can be built that\n   is deployable\
    \ on loosely-coupled domains of test networks in a\n   limited scale and \"multiple-fence\"\
    \ design for source address\n   validation.  The solution allows different validation\
    \ granularities,\n   and also allows different providers to use different solutions.\
    \  The\n   coupling of components at different levels of granularity can be\n\
    \   loose enough to allow component substitution.\n   Incremental deployment is\
    \ another design principle that was used in\n   the experiment.  The tests have\
    \ demonstrated that benefit is derived\n   even when deployment is incomplete,\
    \ thus giving providers an\n   incentive to be early adopters.\n   The experiment\
    \ also provided a proof of concept for the switch-based\n   local subnet validation,\
    \ network authentication based validation,\n   filter-based Inter-AS validation,\
    \ and authentication tag-based\n   Inter-AS validation mechanisms.  The client\
    \ host and network\n   equipment need to be modified and some new servers should\
    \ be\n   deployed.\n   Nevertheless, as discussed in the previous section, there\
    \ are a\n   number of limitations, issues, and questions in the prototype designs\n\
    \   and the overall source address validation space.\n   It is our hope that some\
    \ of the experiences will help vendors and the\n   Internet standards community\
    \ in these efforts.  Future work in this\n   space should attempt to answer some\
    \ of the issues raised in\n   Section 5.  Some of the key issues going forward\
    \ include:\n   o  Scalability questions and per-packet operations.\n   o  Protocol\
    \ design issues, such as integration to existing address\n      allocation mechanisms,\
    \ use of hop-by-hop headers, etc.\n   o  Cost vs. benefit questions.  These may\
    \ be ultimately answered only\n      by actually employing some of these technologies\
    \ in production\n      networks.\n   o  Trust establishment issue and study of\
    \ false positives.\n   o  Deployability considerations, e.g. modifiability of\
    \ switches,\n      hosts, etc.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The purpose of the document is to report experimental\
    \ results.  Some\n   security considerations of the solution mechanisms of the\
    \ testbed are\n   mentioned in the document, but are not the main problem to be\n\
    \   described in this document.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This experiment was conducted among 12 universities\
    \ -- namely,\n   Tsinghua University, Beijing University, Beijing University of\
    \ Post\n   and Telecommunications, Shanghai Jiaotong University, Huazhong\n  \
    \ University of Science and Technology in Wuhan, Southeast University\n   in Nanjing,\
    \ South China University of Technology in Guangzhou,\n   Northeast University\
    \ in Shenyang, Xi'an Jiaotong University, Shandong\n   University in Jinan, University\
    \ of Electronic Science and Technology\n   of China in Chengdu, and Chongqing\
    \ University.  The authors would\n   like to thank everyone involved in this effort\
    \ in these universities.\n   The authors would like to thank Jari Arkko, Lixia\
    \ Zhang, and Pekka\n   Savola for their detailed review comments on this document,\
    \ and thank\n   Paul Ferguson and Ron Bonica for their valuable advice on the\n\
    \   solution development and the testbed implementation.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2827]  Ferguson, P. and D. Senie, \"Network\
    \ Ingress Filtering:\n              Defeating Denial of Service Attacks which\
    \ employ IP Source\n              Address Spoofing\", BCP 38, RFC 2827, May 2000.\n\
    \   [RFC3704]  Baker, F. and P. Savola, \"Ingress Filtering for Multihomed\n \
    \             Networks\", BCP 84, RFC 3704, March 2004.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Brem05]   Bremler-Barr, A. and H. Levy, \"\
    Spoofing Prevention\n              Method\", INFOCOM 2005.\n   [Li02]     Li,,\
    \ J., Mirkovic, J., Wang, M., Reiher, P., and L.\n              Zhang, \"SAVE:\
    \ Source Address Validity Enforcement\n              Protocol\", INFOCOM  2002.\n\
    \   [Park01]   Park, K. and H. Lee, \"On the effectiveness of route-based\n  \
    \            packet filtering for distributed DoS attack prevention in\n     \
    \         power-law internets\", SIGCOMM 2001.\n   [Snoe01]   Snoeren, A., Partridge,\
    \ C., Sanchez, L., and C. Jones, \"A\n              Hash-based IP traceback\"\
    , SIGCOMM 2001.\n   [Wu07]     Wu, J., Ren, G., and X. Li, \"Source Address Validation:\n\
    \              Architecture and Protocol Design\", ICNP 2007.\n   [XBW07]    Xie,\
    \ L., Bi, J., and J. Wu, \"An Authentication based\n              Source Address\
    \ Spoofing Prevention Method Deployed in IPv6\n              Edge Network\", ICCS\
    \ 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jianping Wu\n   Tsinghua University\n   Computer Science,\
    \ Tsinghua University\n   Beijing  100084\n   China\n   EMail: jianping@cernet.edu.cn\n\
    \   Jun Bi\n   Tsinghua University\n   Network Research Center, Tsinghua University\n\
    \   Beijing  100084\n   China\n   EMail: junbi@cernet.edu.cn\n   Xing Li\n   Tsinghua\
    \ University\n   Electronic Engineering, Tsinghua University\n   Beijing  100084\n\
    \   China\n   EMail: xing@cernet.edu.cn\n   Gang Ren\n   Tsinghua University\n\
    \   Computer Science, Tsinghua University\n   Beijing  100084\n   China\n   EMail:\
    \ rg03@mails.tsinghua.edu.cn\n   Ke Xu\n   Tsinghua University\n   Computer Science,\
    \ Tsinghua University\n   Beijing  100084\n   China\n   EMail: xuke@csnet1.cs.tsinghua.edu.cn\n\
    \   Mark I. Williams\n   Juniper Networks\n   Suite 1508, W3 Tower, Oriental Plaza,\
    \ 1 East Chang'An Ave\n   Dong Cheng District, Beijing  100738\n   China\n   EMail:\
    \ miw@juniper.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
