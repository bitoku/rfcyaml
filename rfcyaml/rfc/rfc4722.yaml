- title: __initial_text__
  contents:
  - '       Media Server Control Markup Language (MSCML) and Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Media Server Control Markup Language (MSCML) is a markup language\n\
    \   used in conjunction with SIP to provide advanced conferencing and\n   interactive\
    \ voice response (IVR) functions.  MSCML presents an\n   application-level control\
    \ model, as opposed to device-level control\n   models.  One use of this protocol\
    \ is for communications between a\n   conference focus and mixer in the IETF SIP\
    \ Conferencing Framework.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions Used in This Document ..........................5\n  \
    \ 2. MSCML Approach ..................................................5\n   3.\
    \ Use of SIP Request Methods ......................................6\n   4. MSCML\
    \ Design ....................................................8\n      4.1. Transaction\
    \ Model ..........................................8\n      4.2. XML Usage ..................................................9\n\
    \           4.2.1. MSCML Time Values ...................................9\n  \
    \ 5. Advanced Conferencing ..........................................10\n    \
    \  5.1. Conference Model ..........................................10\n      5.2.\
    \ Configure Conference Request <configure_conference> .......11\n      5.3. Configure\
    \ Leg Request <configure_leg> .....................13\n      5.4. Terminating\
    \ a Conference ..................................14\n      5.5. Conference Manipulation\
    \ ...................................15\n      5.6. Video Conferencing ........................................16\n\
    \      5.7. Conference Events .........................................17\n  \
    \    5.8. Conferencing with Personalized Mixes ......................18\n    \
    \       5.8.1. MSCML Elements and Attributes for\n                  Personalized\
    \ Mixes .................................19\n           5.8.2. Example Usage of\
    \ Personalized Mixes ................20\n   6. Interactive Voice Response (IVR)\
    \ ...............................23\n      6.1. Specifying Prompt Content .................................24\n\
    \           6.1.1. Use of the Prompt Element ..........................24\n  \
    \    6.2. Multimedia Processing for IVR .............................30\n    \
    \  6.3. Playing Announcements <play> ..............................31\n      6.4.\
    \ Prompt and Collect <playcollect> ..........................32\n           6.4.1.\
    \ Control of Digit Buffering and Barge-In ............33\n           6.4.2. Mapping\
    \ DTMF Keys to Special Functions .............33\n           6.4.3. Collection\
    \ Timers ..................................35\n           6.4.4. Logging Caller\
    \ DTMF Input ..........................36\n           6.4.5. Specifying DTMF Grammars\
    \ ...........................36\n           6.4.6. Playcollect Response ...............................37\n\
    \           6.4.7. Playcollect Example ................................38\n  \
    \    6.5. Prompt and Record <playrecord> ............................38\n    \
    \       6.5.1. Prompt Phase .......................................38\n      \
    \     6.5.2. Record Phase .......................................39\n        \
    \   6.5.3. Playrecord Example .................................41\n      6.6.\
    \ Stop Request <stop> .......................................42\n   7. Call Leg\
    \ Events ................................................43\n      7.1. Keypress\
    \ Events ...........................................43\n           7.1.1. Keypress\
    \ Subscription Examples .....................45\n           7.1.2. Keypress Notification\
    \ Examples .....................45\n      7.2. Signal Events .............................................46\n\
    \           7.2.1. Signal Event Examples ..............................47\n  \
    \ 8. Managing Content <managecontent> ...............................48\n    \
    \  8.1. Managecontent Example .....................................50\n   9. Fax\
    \ Processing .................................................51\n      9.1. Recording\
    \ a Fax <faxrecord> ...............................51\n      9.2. Sending a Fax\
    \ <faxplay> ...................................53\n   10. MSCML Response Attributes\
    \ and Elements ........................56\n      10.1. Mechanism ................................................56\n\
    \      10.2. Base <response> Attributes ...............................56\n  \
    \    10.3. Response Attributes and Elements for <configure_leg> .....57\n    \
    \  10.4. Response Attributes and Elements for <play> ..............57\n      \
    \      10.4.1. Reporting Content Retrieval Errors ...............58\n      10.5.\
    \ Response Attributes and Elements for <playcollect> .......59\n      10.6. Response\
    \ Attributes and Elements for <playrecord> ........60\n      10.7. Response Attributes\
    \ and Elements for <managecontent> .....61\n      10.8. Response Attributes and\
    \ Elements for <faxplay>\n            and <faxrecord> ..........................................61\n\
    \   11. Formal Syntax .................................................62\n  \
    \    11.1. Schema ...................................................62\n   12.\
    \ IANA Considerations ...........................................73\n      12.1.\
    \ IANA Registration of MIME Media Type application/\n            mediaservercontrol+xml\
    \ ...................................73\n   13. Security Considerations .......................................74\n\
    \   14. References ....................................................75\n  \
    \    14.1. Normative References .....................................75\n    \
    \  14.2. Informative References ...................................76\n   Appendix\
    \ A.  Regex Grammar Syntax .................................78\n   Appendix B.\
    \  Contributors .........................................79\n   Appendix C.  Acknowledgements\
    \ .....................................79\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Media Server Control Markup\
    \ Language\n   (MSCML) and its usage.  It describes payloads that one can send\
    \ to a\n   media server using standard SIP INVITE and INFO methods and the\n \
    \  capabilities these payloads implement.  RFC 4240 [2] describes media\n   server\
    \ SIP URI formats.\n   Prior to MSCML, there was not a standard way to deliver\
    \ SIP-based\n   enhanced conferencing.  Basic SIP constructs, such as those described\n\
    \   in RFC 4240 [2], serve simple n-way conferencing well.  The SIP URI\n   provides\
    \ a natural mechanism for identifying a specific SIP\n   conference, while INVITE\
    \ and BYE methods elegantly implement\n   conference join and leave semantics.\
    \  However, enhanced conferencing\n   applications also require features such\
    \ as sizing and resizing, in-\n   conference IVR operations (e.g., recording and\
    \ playing participant\n   names to the full conference), and conference event\
    \ reporting.  MSCML\n   payloads within standard SIP methods realize these features.\n\
    \   The structure and approach of MSCML satisfy the requirements set out\n   in\
    \ RFC 4353 [10].  In particular, MSCML serves as the interface\n   between the\
    \ conference server or focus and a centralized conference\n   mixer.  In this\
    \ case, a media server has the role of the conference\n   mixer.\n   There are\
    \ two broad classes of MSCML functionality.  The first class\n   includes primitives\
    \ for advanced conferencing, such as conference\n   configuration, participant\
    \ leg manipulation, and conference event\n   reporting.  The second class comprises\
    \ primitives for interactive\n   voice response (IVR).  These include collecting\
    \ DTMF digits and\n   playing and recording multimedia content.\n   MSCML fills\
    \ the need for IVR and conference control with requests and\n   responses over\
    \ a SIP transport.  VoiceXML [11] fills the need for IVR\n   with requests and\
    \ responses over a HTTP transport.  This enables\n   developers to use whatever\
    \ model fits their needs best.\n   In general, a media server offers services\
    \ to SIP UACs, such as\n   Application Servers, Feature Servers, and Media Gateway\
    \ Controllers.\n   See the IPCC Reference Architecture [12] for definitions of\
    \ these\n   terms.  It is unlikely, but not prohibited, for end-user SIP UACs\
    \ to\n   have a direct signaling relationship with a media server.  The term\n\
    \   \"client\" is used in this document to refer generically to an entity\n  \
    \ that interacts with the media server using SIP and MSCML.\n   The media server\
    \ fulfills the role of the Media Resource Function\n   (MRF) in the IP Multimedia\
    \ Subsystem (IMS) [13] as described by 3GPP.\n   MSCML and RFC 4240 [2], upon\
    \ which MSCML builds, are specifically\n   focused on the Media resource (Mr)\
    \ interface which supports\n   interactions between application logic and the\
    \ MRF.\n   This document describes a working framework and protocol with which\n\
    \   there is considerable implementation experience.  Application\n   developers\
    \ and service providers have created several MSCML-based\n   services since the\
    \ availability of the initial version in 2001.  This\n   experience is highly\
    \ relevant to the ongoing work of the IETF,\n   particularly the SIP [26], SIPPING\
    \ [27], MMUSIC [28], and XCON [29]\n   work groups, the IMS [30] work in 3GPP,\
    \ and the CCXML work in the\n   Voice Browser Work Group of the W3C.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 2.  MSCML Approach
  contents:
  - "2.  MSCML Approach\n   It is critically important to emphasize that the goal\
    \ of MSCML is to\n   provide an application interface that follows the SIP, HTTP,\
    \ and XML\n   development paradigm to foster easier and more rapid application\n\
    \   deployment.  This goal is reflected in MSCML in two ways.\n   First, the programming\
    \ model is that of peer to peer rather than\n   master-slave.  Importantly, this\
    \ allows the media server to be used\n   simultaneously for multiple applications\
    \ rather than be tied to a\n   single point of control.  It also enables standard\
    \ SIP mechanisms to\n   be used for media server location and load balancing.\n\
    \   Second, MSCML defines constructs and primitives that are meaningful\n   at\
    \ the application level to ensure that programmers are not\n   distracted by unnecessary\
    \ complexity.  For example, the mixing\n   resource operates on constructs such\
    \ as conferences and call\n   participants rather than directly on individual\
    \ media streams.\n   The MSCML paradigm is important to the developer community,\
    \ in that\n   developers and operators conceptually write applications about calls,\n\
    \   conferences, and call legs.  For the majority of developers and\n   applications\
    \ this approach significantly simplifies and speeds\n   development.\n"
- title: 3.  Use of SIP Request Methods
  contents:
  - "3.  Use of SIP Request Methods\n   As mentioned above, MSCML payloads may be\
    \ carried in either SIP\n   INVITE or INFO requests.  The initial INVITE, which\
    \ creates an\n   enhanced conference, MAY include an MSCML payload.  A subsequent\n\
    \   INVITE to the same Request-URI joins a participant leg to the\n   conference.\
    \  This INVITE MAY include an MSCML payload.  The initial\n   INVITE that establishes\
    \ an IVR session MUST NOT include an MSCML\n   payload.  The client sends all\
    \ mid-call MSCML payloads for\n   conferencing and IVR via SIP INFO requests.\n\
    \   SIP INVITE requests that contain both MSCML and Session Description\n   Protocol\
    \ (SDP) body parts are used frequently in conferencing\n   scenarios.  Therefore,\
    \ the media server MUST support message bodies\n   with the MIME type \"multipart/mixed\"\
    \ in SIP INVITE requests.\n   The media server transports MSCML responses in the\
    \ final response to\n   the SIP INVITE containing the matching MSCML request or\
    \ in a SIP INFO\n   message.  The only allowable final response to a SIP INFO\
    \ containing\n   a message body is a 200 OK, per RFC 2976 [3].  Therefore, if\
    \ the\n   client sends the MSCML request via SIP INFO, the media server\n   responds\
    \ with the MSCML response in a separate INFO request.  In\n   general, these responses\
    \ are asynchronous in nature and require a\n   separate transaction due to timing\
    \ considerations.\n   There has been considerable debate on the use of the SIP\
    \ INFO method\n   for any purpose.  Our experience is that MSCML would not have\
    \ been\n   possible without it.  At the time the first MSCML specification was\n\
    \   published, the first SIP Event Notification draft had just been\n   submitted\
    \ as an individual submission.  At that time, there was no\n   mechanism to link\
    \ SUBSCRIBE/NOTIFY to an existing dialog.  This\n   prevented its use in MSCML,\
    \ since all events occurred in an INVITE-\n   established dialog.  And while SUBSCRIBE/NOTIFY\
    \ was well suited for\n   reporting conference events, its semantics seemed inappropriate\
    \ for\n   modifying a participant leg or conference setting where the only\n \
    \  \"event\" was the success or failure of the request.  Lastly, since SIP\n \
    \  INFO was an established RFC, most SIP stack implementations supported\n   it\
    \ at that time.  We had few, if any, interoperability issues as a\n   result.\n\
    \   More recent developments have provided additional reasons why\n   SUBSCRIBE/NOTIFY\
    \ is not appropriate for use in MSCML.  Use of\n   SUBSCRIBE presents two problems.\
    \  The first is semantic.  The purpose\n   of SUBSCRIBE is to register interest\
    \ in User Agent state.  However,\n   using SUBSCRIBE for MSCML results in the\
    \ SUBSCRIBE modifying the User\n   Agent state.  The second reason SUBSCRIBE is\
    \ not appropriate is\n   because MSCML is inherently call based.  The association\
    \ of a SIP\n   dialog with a call leg means MSCML can be incredibly straightforward.\n\
    \   For example, if one used SUBSCRIBE or other SIP method to send\n   commands\
    \ about some context, one must identify that context somehow.\n   Relating commands\
    \ to the SIP dialog they arrive on defines the\n   context for free.  Moreover,\
    \ it is conceptually easy for the\n   developer.  Using NOTIFY to transport MSCML\
    \ responses is also not\n   appropriate, as the NOTIFY would be in response to\
    \ an implicit\n   subscription.  The SIP and SIPPING lists have discussed the\
    \ dangers\n   of implicit subscription.\n   In order to guarantee interoperability\
    \ with this specification, as\n   well as with SIP User Agents that are unaware\
    \ of MSCML, SIP UACs that\n   wish to use MSCML services MUST specify a service\
    \ indicator that\n   supports MSCML in the initial INVITE.  RFC 4240 [2] defines\
    \ the\n   service indicator \"conf\", which MUST be used for MSCML conferencing\n\
    \   applications.  The service indicator \"ivr\" MUST be used for MSCML\n   interactive\
    \ voice response applications.  In this specification, only\n   \"conf\" and \"\
    ivr\" are described.\n   The media server MUST support moving the call between\
    \ services\n   through sending the media server a BYE on the existing dialog and\n\
    \   establishing a new dialog with an INVITE to the desired service.\n   Media\
    \ servers SHOULD support moving between services without\n   requiring modification\
    \ of the previously established SDP parameters.\n   This is achieved by sending\
    \ a re-INVITE on the existing dialog in\n   which the Request-URI is modified\
    \ to specify the new service desired\n   by the client.  This eliminates the need\
    \ for the client to send an\n   INVITE to the caller or gateway to establish new\
    \ SDP parameters.\n   The media server, as a SIP UAS, MUST respond appropriately\
    \ to an\n   INVITE that contains an MSCML body.  If MSCML is not supported, the\n\
    \   media server MUST generate a 415 final response and include a list of\n  \
    \ the supported content types in the response per RFC 3261 [4].  The\n   media\
    \ server MUST also advertise its support of MSCML in responses to\n   OPTIONS\
    \ requests, by including \"application/mediaservercontrol+xml\"\n   as a supported\
    \ content type in an Accept header.  This alleviates the\n   major issues with\
    \ using INFO for the transport of application data;\n   namely, the User Agent's\
    \ proper interpretation of what is, by design,\n   an opaque message request.\n"
- title: 4.  MSCML Design
  contents:
  - '4.  MSCML Design

    '
- title: 4.1.  Transaction Model
  contents:
  - "4.1.  Transaction Model\n   To avoid undue complexity, MSCML establishes two\
    \ rules regarding its\n   usage.  The first is that only one MSCML body may be\
    \ present in a SIP\n   request.  The second is that each MSCML body may contain\
    \ only one\n   request or response.  This greatly simplifies transaction management.\n\
    \   MSCML syntax does provide for the unique identification of multiple\n   requests\
    \ in a single body part.  However, this is not supported in\n   this specification.\n\
    \   Per the guidelines of RFC 3470 [14], MSCML bodies MUST be well formed\n  \
    \ and valid.\n   MSCML is a direct request-response protocol.  There are no\n\
    \   provisional responses, only final responses.  A request may, however,\n  \
    \ result in multiple notifications.  For example, a request for active\n   talker\
    \ reports will result in a notification for each speaker set.\n   This maps to\
    \ the three major element trees for MSCML: <request>,\n   <response>, and <notification>.\n\
    \   Figure 1 shows a request body.  Depending on the command, one can\n   send\
    \ the request in an INVITE or an INFO.  Figure 2 shows a response\n   body.  The\
    \ SIP INFO method transports response bodies.  Figure 3\n   shows a notification\
    \ body.  The SIP INFO method transports\n   notifications.\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n\
    \       ... request body ...\n     </request>\n   </MediaServerControl>\n   Figure\
    \ 1: MSCML Request Format\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl\
    \ version=\"1.0\">\n     <response>\n       ... response body ...\n     </response>\n\
    \   </MediaServerControl>\n   Figure 2: MSCML Response Format\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <notification>\n\
    \       ... notification body ...\n     </notification>\n   </MediaServerControl>\n\
    \   Figure 3: MSCML Notification Format\n   MSCML requests MAY include a client-defined\
    \ ID attribute for the\n   purposes of matching requests and responses.  The values\
    \ used for\n   these IDs need only be unique within the scope of the dialog in\
    \ which\n   the requests are issued.\n"
- title: 4.2.  XML Usage
  contents:
  - "4.2.  XML Usage\n   In the philosophy of XML as a text-based description language,\
    \ and\n   not as a programming language, MSCML makes the choice of many\n   attribute\
    \ values for readability by a human.  Thus, many attributes\n   that would often\
    \ be \"boolean\" instead take \"yes\" or \"no\" values.  For\n   example, what\
    \ does 'report=\"false\"' or 'report=\"1\"' mean?  However,\n   'report=\"yes\"\
    ' is clearer: I want a report.  Some programmers prefer\n   the precision of a\
    \ boolean.  To satisfy both styles, MSCML defines an\n   XML type, \"yesnoType\"\
    , that takes on the values \"yes\" and \"no\" as\n   well as \"true\", \"false\"\
    , \"1\", and \"0\".\n   Many attributes in the MSCML schema have default values.\
    \  In order to\n   limit demands on the XML parser, MSCML applies these values\
    \ at the\n   protocol, not XML, level.  The MSCML schema documents these defaults\n\
    \   as XML annotations to the appropriate attribute.\n"
- title: 4.2.1.  MSCML Time Values
  contents:
  - "4.2.1.  MSCML Time Values\n   For clarity, time values in MSCML are based on\
    \ the time designations\n   described in the Cascading Style Sheets level 2 (CSS2)\
    \ Specification\n   [15].  Their format consists of a number immediately followed\
    \ by an\n   optional time unit identifier of the following form:\n      ms: milliseconds\
    \ (default)\n      s: seconds\n   If no time unit identifier is present, the value\
    \ MUST be interpreted\n   as being in milliseconds.  As extensions to [15] MSCML\
    \ allows the\n   string values \"immediate\" and \"infinite\", which have special\
    \ meaning\n   for certain timers.\n"
- title: 5.  Advanced Conferencing
  contents:
  - '5.  Advanced Conferencing

    '
- title: 5.1.  Conference Model
  contents:
  - "5.1.  Conference Model\n   The advanced conferencing model is a star controller\
    \ model, with both\n   signaling and media directed to a central location.  Figure\
    \ 4 depicts\n   a typical signaling relationship between end users' UACs, a\n\
    \   conference application server, and a media server.\n   RFC 4353 [10] describes\
    \ this model.  The application server is an\n   instantiation of the conference\
    \ focus.  The media server is an\n   instantiation of the media mixer.  Note that\
    \ user-level constructs,\n   such as event notifications, are in the purview of\
    \ the application\n   server.  This is why, for example, the media server sends\
    \ active\n   talker reports using MSCML notifications, while the application\n\
    \   server would instead use the conference package [16] for individual\n   notifications\
    \ to SIP user agents.  Note that we do not recommend the\n   use of the conference\
    \ package for media server to application server\n   notifications because none\
    \ of the filtering and membership\n   information is available at the media server.\n\
    \      +-------+\n      | UAC 1 |---\\   Public URI  +-------------+\n      +-------+\
    \    \\ _____________| Application |\n                    /    /        |   Server\
    \    |     Not shown:\n      +-------+    /    /         +-------------+     RTP\
    \ flows directly\n      | UAC 2 |---/    /                 | Private    between\
    \ UACs and\n      +-------+       /                  |   URI      media server\n\
    \          .          /            +--------------+\n          :         /   \
    \          |              |\n      +-------+    /              | Media Server\
    \ |\n      | UAC n |---/               |              |\n      +-------+     \
    \              +--------------+\n                          Figure 4: Conference\
    \ Model\n      Each UAC sends an INVITE to a Public Conference URI.  Presumably,\n\
    \      the client publishes this URI, or it is an ad hoc URI.  In any\n      event,\
    \ the client generates a Private URI, following the rules\n      specified by\
    \ RFC 4240 [2].  That is, the URI is of the following\n      form:\n      sip:conf=UniqueID@ms.example.net\n\
    \      where UniqueID is a unique conference identifier and\n      ms.example.net\
    \ is the host name or IP address of the media server.\n      There is nothing\
    \ to prevent the UACs from contacting the media\n      server directly.  However,\
    \ one would expect the owner of the media\n      server to restrict who can use\
    \ its resources.\n      As for basic conferencing, described by RFC 4240 [2],\
    \ the first\n      INVITE to the media server with a UniqueID creates a conference.\n\
    \      However, in advanced conferencing, the first INVITE MAY include a\n   \
    \   MSCML <configure_conference> payload rather than the SDP of a\n      conference\
    \ participant.  The <configure_conference> payload\n      conveys extended session\
    \ parameters (e.g., number of participants)\n      that SDP does not readily express,\
    \ but the media server must know\n      to allocate the appropriate resources.\n\
    \      When the conference is created by sending an INVITE containing a\n    \
    \  MSCML <configure_conference> payload, the resulting SIP dialog is\n      termed\
    \ the \"Conference Control Leg.\"  This leg has several useful\n      properties.\
    \  The lifetime of the conference is the same as that of\n      its control leg.\
    \  This ensures that the conference remains in\n      existence even if all participant\
    \ legs leave or have not yet\n      arrived.  In addition, when the client terminates\
    \ the Conference\n      Control Leg, the media server automatically terminates\
    \ all\n      participant legs.  The Conference Control Leg is also used for\n\
    \      play or record operations to/from the entire conference and for\n     \
    \ active talker notifications.  Full conference media operations and\n      active\
    \ talker report subscriptions MUST be executed on the\n      Conference Control\
    \ Leg.\n      Creation of a Conference Control Leg is RECOMMENDED because full\n\
    \      advanced conferencing capabilities are not available without it.\n    \
    \  Clients MUST establish the Conference Control Leg in the initial\n      INVITE\
    \ that creates the conference; it cannot be created later.\n      Once the client\
    \ has created the conference with or without the\n      Conference Control Leg,\
    \ participants can be joined to the\n      conference.  This is achieved by the\
    \ client's directing an INVITE\n      to the Private Conference URI for each participant.\
    \  Using the\n      example conference URI given above, this would be\n      sip:conf=UniqueID@ms.example.net.\n"
- title: 5.2.  Configure Conference Request <configure_conference>
  contents:
  - "5.2.  Configure Conference Request <configure_conference>\n      The <configure_conference>\
    \ request has two attributes that control\n      the resources the media server\
    \ sets aside for the conference.\n      These are described in the list below.\n\
    \      Attributes of <configure_conference>:\n   o  reservedtalkers - optional\
    \ (see note), no default value: The\n      maximum number of talker legs allocated\
    \ for the conference.  Note:\n      required when establishing the Conference\
    \ Control Leg but optional\n      in subsequent <configure_conference> requests.\n\
    \   o  reserveconfmedia - optional, default value \"yes\": Controls\n      allocation\
    \ of resources to enable playing or recording to or from\n      the entire conference\n\
    \   When the reservedtalkers+1st INVITE arrives at the media server, the\n   media\
    \ server SHOULD generate a 486 Busy Here response.  Failure to\n   send a 486\
    \ response to this condition can cause the media server to\n   oversubscribe its\
    \ resources.\n      NOTE: It would be symmetric to have a reservedlisteners parameter.\n\
    \      However, the practical limitation on the media server is the\n      number\
    \ of talkers for a mixer to monitor.  In either case, the\n      client regulates\
    \ who gets into the conference by either proxying\n      the INVITEs from the\
    \ user agent clients or metering to whom it\n      gives the conference URI.\n\
    \   For example, to create a conference with up to 120 active talkers and\n  \
    \ the ability to play audio into the conference or record portions or\n   all\
    \ of the conference full mix, the client specifies both attributes,\n   as shown\
    \ in Figure 6.\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl\
    \ version=\"1.0\">\n     <request>\n       <configure_conference reservedtalkers=\"\
    120\"\n         reserveconfmedia=\"yes\"/>\n     </request>\n   </MediaServerControl>\n\
    \   Figure 6: 120 Speaker MSCML Example\n   In addition to these attributes, a\
    \ <configure_conference> request MAY\n   contain a child <subscribe> element.\
    \  The <subscribe> element is used\n   to request notifications for conference-wide\
    \ active talker events.\n   Detailed information regarding active talker events\
    \ is contained in\n   Section 5.7.\n   The client MUST include a <configure_conference>\
    \ request in the\n   initial INVITE which establishes the conference when creating\
    \ the\n   Conference Control Leg. The client server MUST issue asynchronous\n\
    \   commands, such as <play>, separately (i.e., in INFO messages) to\n   avoid\
    \ ambiguous responses.\n   Media operations on the Conference Control leg are\
    \ performed\n   internally, no external RTP streams are involved.  Accordingly,\
    \ the\n   media server does not expect RTP on the Conference Control Leg.\n  \
    \ Therefore, the client MUST send either no SDP or hold SDP in the\n   INVITE\
    \ request containing a <configure_conference> payload.  The\n   media server MUST\
    \ treat SDP with all media lines set to \"inactive\" or\n   with connection addresses\
    \ set to 0.0.0.0 (for backwards\n   compatibility) as hold SDP.\n   The media\
    \ server sends a response when it has finished processing the\n   <configure_conference>\
    \ request.  The format of the\n   <configure_conference> response is detailed\
    \ in Section 10.2.\n"
- title: 5.3.  Configure Leg Request <configure_leg>
  contents:
  - "5.3.  Configure Leg Request <configure_leg>\n   Conference legs have a number\
    \ of properties the client can modify.\n   These are set using the <configure_leg>\
    \ request.  This request has\n   the attributes described in the list below.\n\
    \   Attributes of <configure_leg>:\n   o  type - optional, default value \"talker\"\
    : Consider this leg's audio\n      for inclusion in the output mix.  Alternative\
    \ is \"listener\".\n   o  dtmfclamp - optional, default value \"yes\": Remove\
    \ detected DTMF\n      digits from the input audio.\n   o  toneclamp - optional,\
    \ default value \"yes\": Remove tones from the\n      input audio.  Tones include\
    \ call progress tones and the like.\n   o  mixmode - optional, default value \"\
    full\": Be a candidate for the\n      full mix.  Alternatives are \"mute\", to\
    \ disallow media in the mix,\n      \"parked\", to disconnect the leg's media\
    \ streams from the\n      conference for IVR operations, \"preferred\", to give\
    \ this stream\n      preferential selection in the mix (i.e., even if not loudest\n\
    \      talker, include media, if present, from this leg in the mix), and\n   \
    \   \"private\", which enables personalized mixes.\n   In addition to these attributes,\
    \ there are four child elements\n   defined for <configure_leg>.  These are <inputgain>,\
    \ <outputgain>,\n   <configure_team>, and <subscribe>.\n   The first two, <inputgain>\
    \ and <outputgain>, modify the gain applied\n   to the input and output audio\
    \ streams, respectively.  These may\n   contain <auto>, to use automatic gain\
    \ control (AGC) or <fixed>.  The\n   <auto> element has the attributes \"startlevel\"\
    , \"targetlevel\", and\n   \"silencethreshold\".  All the parameters are in dB.\
    \  The <fixed>\n   element has the attribute \"level\", which is in dB.  The default\
    \ for\n   both <inputgain> and <outputgain> is <fixed>.  The media server MAY\n\
    \   silently cap <inputgain> or <outputgain> requests that exceed the\n   gain\
    \ limits imposed by the platform.\n   Clients most commonly manipulate only the\
    \ input gain for a conference\n   leg and rely on the mixer to set an optimum\
    \ output gain based on the\n   inputs currently in the mix.  However, as described\
    \ above, MSCML does\n   allow for manipulation of the output gain as well.  Some\
    \ of the IVR\n   commands, such as <play>, enable control of the output gain for\n\
    \   content playback operations.  The interaction of conference output\n   gain\
    \ and IVR playback gain controls is described in Section 6.1.1.\n   Note that\
    \ <inputgain> and <outputgain> settings apply only to\n   conference legs and\
    \ do not apply to IVR sessions.\n   The <configure_team> element is used to create\
    \ and manipulate groups\n   for personalized mixes.  Details of personalized mixes\
    \ are discussed\n   in Section 5.8.\n   The <subscribe> element is used to request\
    \ notifications for call leg\n   related events, such as asynchronous DTMF digit\
    \ reports.  Detailed\n   information regarding call leg events is discussed in\
    \ Section 7.\n   If the default parameters are acceptable for the leg the client\n\
    \   wishes to enter into the conference, then a normal SIP INVITE, with\n   no\
    \ MSCML body, is sufficient.  However, if the client wishes to\n   modify one\
    \ or more of the parameters, the client can include a MSCML\n   body in addition\
    \ to the SDP body.\n   The client can modify the conference leg parameters during\
    \ the\n   conference by issuing a SIP INFO on the dialog representing the\n  \
    \ conference leg.  Of course, the client cannot modify SDP in an INFO\n   message.\n\
    \   The media server sends a response when it has finished processing the\n  \
    \ <configure_leg> request.  The format of the <configure_leg> response\n   is\
    \ detailed in Section 10.3.\n"
- title: 5.4.  Terminating a Conference
  contents:
  - "5.4.  Terminating a Conference\n   To remove a leg from the conference, the client\
    \ issues a SIP BYE\n   request on the selected dialog representing the conference\
    \ leg.\n   The client can terminate all legs in a conference by issuing a SIP\n\
    \   BYE request on the Conference Control Leg.  If one or more\n   participants\
    \ are still in the conference when the media server\n   receives a SIP BYE request\
    \ on the Conference Control Leg, the media\n   server issues SIP BYE requests\
    \ on all remaining conference legs to\n   ensure cleanup of the legs.\n   The\
    \ media server returns a 200 OK to the SIP BYE request as it sends\n   BYE requests\
    \ to the other legs.  This is because we cannot issue a\n   provisional response\
    \ to a non-INVITE request, yet the teardown of the\n   other legs may exceed the\
    \ retransmission timer limits of the original\n   request.  While the conference\
    \ is being cleaned up, the media server\n   MUST reject any new INVITEs to the\
    \ terminated conference with a 486\n   Busy Here response.  This response indicates\
    \ that the specified\n   conference cannot accept any new members, pending deletion.\n"
- title: 5.5.  Conference Manipulation
  contents:
  - "5.5.  Conference Manipulation\n   Once the conference has begun, the client can\
    \ manipulate the\n   conference as a whole or a particular participant leg by\
    \ issuing\n   commands on the associated SIP dialog.  For example, by sending\
    \ MSCML\n   requests on the Conference Control Leg the client can request that\n\
    \   the media server record the conference, play a prompt to the\n   conference,\
    \ or request reports on active talker events.  Similarly,\n   the client may mute\
    \ a participant leg, configure a personalized mix\n   or request reports for call\
    \ leg events, such as DTMF keypresses.\n   Figure 7 shows an example of an MSCML\
    \ command that plays a prompt to\n   all conference participants.\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n\
    \       <play>\n         <prompt>\n           <audio url=\"http://prompts.example.net/en_US/welcome.au\"\
    />\n         </prompt>\n       </play>\n     </request>\n   </MediaServerControl>\n\
    \   Figure 7: Full Conference Audio Command - Play\n   A client can modify a leg\
    \ by issuing an INFO on the dialog associated\n   with the participant leg.  For\
    \ example, Figure 8 mutes a conference\n   leg.\n   <?xml version=\"1.0\" encoding=\"\
    utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n       <configure_leg\
    \ mixmode=\"mute\"/>\n     </request>\n   </MediaServerControl>\n   Figure 8:\
    \ Sample Change Leg Command\n   In Figure 7, we saw a request to play a prompt\
    \ to the entire\n   conference.  The client can also request to play a prompt\
    \ to an\n   individual call leg.  In that case, the MSCML request is issued\n\
    \   within the SIP dialog of the desired conference participant.\n   Section 6\
    \ describes the interactive voice response (IVR) services\n   offered by MSCML.\
    \  If an IVR command arrives on the control channel,\n   it takes effect on the\
    \ whole conference.  This is a mechanism for\n   playing prompts to the entire\
    \ conference (e.g., announcing new\n   participants).  If an IVR command arrives\
    \ on an individual leg, it\n   only affects that leg.  This is a mechanism for\
    \ interacting with\n   users, such as the creation of \"waiting rooms\", allowing\
    \ a user to\n   mute themselves using key presses, allowing a moderator to out-dial,\n\
    \   etc.\n   A participant leg MUST be configured with mixmode=\"parked\" prior\
    \ to\n   the issuance of any IVR commands with prompt content ('prompturl'\n \
    \  attribute or <prompt> element).  Parking the leg isolates the\n   participant's\
    \ input and output media from the conference and allows\n   use of those streams\
    \ for playing and recording purposes.  However,\n   the mixmode has no effect\
    \ if just digit collection or recording is\n   desired. <playcollect> and <playrecord>\
    \ requests without prompt\n   content MAY be sent on participant legs without\
    \ setting\n   mixmode=\"parked\".\n"
- title: 5.6.  Video Conferencing
  contents:
  - "5.6.  Video Conferencing\n   MSCML-controlled advanced conferences, as well as\
    \ RFC 4240 [2]\n   controlled basic conferences, implicitly support video conferencing\n\
    \   in the form of video switching.  In video switching, the video stream\n  \
    \ of the loudest talker (with some hysteresis) is sent to all\n   participants\
    \ other than that talker.  The loudest talker receives the\n   video stream from\
    \ the immediately prior loudest talker.\n   Media servers MUST ensure that participants\
    \ receive video media\n   compatible with their session.  For example, a participant\
    \ who has\n   established an H.263 video stream will not receive video from another\n\
    \   participant employing H.264 media.  Media servers SHOULD implement\n   video\
    \ transcoding to minimize media incompatibilities between\n   participants.\n\
    \   The media server MUST switch video streams only when it receives a\n   refresh\
    \ video frame.  A refresh frame contains all the video\n   information required\
    \ to decode that frame (i.e., there is no\n   dependency on data from previous\
    \ video frames).\n   Refresh frames are large and generally sent infrequently\
    \ to conserve\n   network bandwidth.  The media server MUST implement standard\n\
    \   mechanisms to request that the new loudest talker's video encoder\n   transmits\
    \ a refresh frame to ensure that video can be switched\n   quickly.\n"
- title: 5.7.  Conference Events
  contents:
  - "5.7.  Conference Events\n   A client can subscribe for periodic active talker\
    \ event reports that\n   indicate which participants are included in the conference\
    \ mix.  As\n   these are conference-level events, the subscription and notifications\n\
    \   are sent on the Conference Control Leg.\n   Media servers MAY impose limits\
    \ on the minimum interval for active\n   talker reports for performance reasons.\
    \  If the client request is\n   below the imposed minimum, the media server SHOULD\
    \ set the interval\n   to the minimum value supported.  To limit unnecessary notification\n\
    \   traffic, the media server SHOULD NOT send a report if the active\n   talker\
    \ information for the conference has not changed during the\n   reporting interval.\n\
    \   A request for an active talker report is in Figure 9.  The active\n   talker\
    \ report enumerates the current call legs in the mix.\n   <?xml version=\"1.0\"\
    \ encoding=\"utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n\
    \       <configure_conference>\n         <subscribe>\n           <events>\n  \
    \           <activetalkers report=\"yes\" interval=\"60s\"/>\n           </events>\n\
    \         </subscribe>\n       </configure_conference>\n     </request>\n   </MediaServerControl>\n\
    \   Figure 9: Active Talker Request\n   Event notifications are sent in SIP INFO\
    \ messages.  Figure 10 shows\n   an example of a report.\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\"?>\n   <MediaServerControl version=\"1.0\">\n     <notification>\n\
    \       <conference uniqueid=\"ab34h76z\" numtalkers=\"47\">\n         <activetalkers>\n\
    \           <talker callid=\"myhost4sn123\"/>\n           <talker callid=\"myhost2sn456\"\
    />\n           <talker callid=\"myhost12sn78\"/>\n         </activetalkers>\n\
    \       </conference>\n     </notification>\n   </MediaServerControl>\n   Figure\
    \ 10: Active Talker Event Example\n   The value of the \"callid\" attribute in\
    \ the <talker> element\n   corresponds to the value of the SIP Call-ID header\
    \ of the associated\n   dialog.  This enables the client to associate the active\
    \ talker with\n   a specific participant leg.\n"
- title: 5.8.  Conferencing with Personalized Mixes
  contents:
  - "5.8.  Conferencing with Personalized Mixes\n   MSCML enables clients to create\
    \ personalized mixes through the\n   <configure_team> element for scenarios where\
    \ the standard mixmode\n   settings do not provide sufficient control.  The <configure_team>\n\
    \   element is a child of <configure_leg>.\n   To create personalized mixes, the\
    \ client has to identify the\n   relationships among the participants.  This is\
    \ accomplished by\n   manipulating two MSCML objects.  These objects are:\n  \
    \ 1.  The list of team members (<teammate> elements), set using\n       <configure_team>\n\
    \   2.  The mixmode attribute set through <configure_leg>\n   The media server\
    \ uses the values of these objects to determine which\n   audio inputs to combine\
    \ for output to the participant.  In a normal\n   conference, each participant\
    \ hears the conference mix minus their own\n   input if they are part of the mixed\
    \ output.  The team list enables\n   the client to specify other participants\
    \ that the leg can hear in\n   addition to the normal mixed output.  Note that\
    \ personalized mix\n   settings apply only to audio media and do not affect video\
    \ switching.\n   Team relationships are implicitly symmetric.  If the client sets\n\
    \   participant A as a team member of participant B, then the media\n   server\
    \ automatically sets participant B as a team member for A.\n   The id attribute\
    \ set through <configure_leg> is used to identify the\n   various participants.\
    \  A unique ID MUST be assigned to each\n   participant included in a personalized\
    \ mix.  The IDs used MUST be\n   unique within the scope of the conference in\
    \ which they appear.\n   By itself, the team list only defines those participants\
    \ that the leg\n   can hear.  The mixmode attribute of each team member determines\n\
    \   whether to include their audio input in the personalized mix.  If the\n  \
    \ client sets the teammate's mixmode to private, then it is part of the\n   mix.\
    \  If the mixmode is set to any other value, it is not.\n"
- title: 5.8.1.  MSCML Elements and Attributes for Personalized Mixes
  contents:
  - "5.8.1.  MSCML Elements and Attributes for Personalized Mixes\n   Control of personalized\
    \ mixes rely on two major MSCML elements:\n   1.  <configure_leg>, using the mixmode\
    \ attribute setting\n       mixmode=\"private\"\n   2.  <configure_team>\n   The\
    \ <configure_team> element allows the user to make the participants\n   members\
    \ of a team within a specific conference.  It is a child of the\n   <configure_leg>\
    \ parent element.\n   The client sends the <configure_team> element in a <configure_leg>\n\
    \   request in either a SIP INVITE or SIP INFO.\n   o  In an INVITE, to join a\
    \ participant whose properties differ from\n      the properties established for\
    \ the conference as a whole.\n   o  In an INFO, to change the properties for an\
    \ existing leg.\n   The two attributes of the configure_team element are \"id\"\
    \ and\n   \"action\".  The id attribute MUST contain the unique ID of the leg\n\
    \   being modified, as set in the original <configure_leg> request.  The\n   action\
    \ attribute can take on the values \"add\", \"delete\", \"query\", and\n   \"\
    set\".  The default value is \"query\".  This attribute allows the user\n   to\
    \ modify the team list.  Table 1 describes the actions that can be\n   performed\
    \ on the team list.\n   +--------+----------------------------------------------------------+\n\
    \   | Action | Description                                              |\n  \
    \ +--------+----------------------------------------------------------+\n   |\
    \ add    | Adds a teammate to the mix.                              |\n   | delete\
    \ | Deletes a teammate from the mix.                         |\n   | query  |\
    \ Returns the teammate list to the requestor.  This is the |\n   |        | default\
    \ value.                                           |\n   | set    | Creates a\
    \ team list when followed by <teammate id=\"n\">   |\n   |        | and also removes\
    \ all the teammates from the team list    |\n   |        | for example, when the\
    \ creator (originator) of the team   |\n   |        | list on that specific conference\
    \ leg wants to remove all |\n   |        | of the teammates from the team.  If\
    \ the set operation    |\n   |        | removes all teammates from a participant,\
    \ that           |\n   |        | participant hears the full conference mix. \
    \              |\n   +--------+----------------------------------------------------------+\n\
    \                      Table 1: Configure Team Actions\n"
- title: 5.8.2.  Example Usage of Personalized Mixes
  contents:
  - "5.8.2.  Example Usage of Personalized Mixes\n   A common use of personalized\
    \ mixing is to support coaching of one\n   participant by another.  The coaching\
    \ scenario includes three\n   participants:\n   1.  The Supervisor, who coaches\
    \ the agent.\n   2.  The Agent, who interacts with the customer.\n   3.  The Customer,\
    \ who interacts with the agent.\n   Table 2 illustrates the details of the coached\
    \ conference topology.\n   +-------------+------------+------------+---------+-----------------+\n\
    \   | Participant | ID         | Team       | Mixmode | Hears           |\n  \
    \ |             |            | Members    |         |                 |\n   +-------------+------------+------------+---------+-----------------+\n\
    \   | Supervisor  | supervisor | Agent      | Private | customer +      |\n  \
    \ |             |            |            |         | agent           |\n   |\
    \ Agent       | agent      | Supervisor | Full    | customer +      |\n   |  \
    \           |            |            |         | supervisor      |\n   | Customer\
    \    | customer   | none       | Full    | agent           |\n   +-------------+------------+------------+---------+-----------------+\n\
    \                    Table 2: Coached Conference Example\n   To create this topology,\
    \ the client performs the following actions:\n   1.  The client joins each leg\
    \ to the conference, being certain to\n       include a unique ID in the <configure_leg>\
    \ request.  The leg ID\n       needs to be unique only within the scope of the\
    \ conference to\n       which it belongs.\n   2.  The client configures the teammate\
    \ list and mixmode of each\n       participant, as required.\n   Both actions\
    \ (steps 1 and 2) may be combined in a single MSCML\n   request.  The following\
    \ sections detail these actions and their\n   corresponding MSCML payloads.\n"
- title: 5.8.2.1.  Create the Conference
  contents:
  - "5.8.2.1.  Create the Conference\n   Before joining any participants, the client\
    \ must create the\n   conference by sending a SIP INVITE that contains an MSCML\n\
    \   <configure_conference> request with a unique conference identifier.\n"
- title: 5.8.2.2.  Joining and Configuring the Coach
  contents:
  - "5.8.2.2.  Joining and Configuring the Coach\n   Join the coach leg to the conference\
    \ and configure its desired\n   properties by sending a SIP INVITE containing\
    \ a <configure_leg>\n   request.  The <configure_leg> element sets the leg's unique\
    \ ID to\n   supervisor and its mixmode to private.\n   The corresponding MSCML\
    \ request is as follows.\n   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"\
    1.0\">\n     <request>\n       <configure_leg id=\"supervisor\" mixmode=\"private\"\
    />\n     </request>\n   </MediaServerControl>\n   Figure 11: Join Coach Request\n\
    \   Note that the client cannot configure the teammate list for the coach\n  \
    \ yet, as there are no other participants in the conference.  One must\n   join\
    \ a participant to the conference before one can add it as a\n   teammate for\
    \ another leg.\n"
- title: 5.8.2.3.  Joining and Configuring the Agent
  contents:
  - "5.8.2.3.  Joining and Configuring the Agent\n   Join the agent leg to the conference\
    \ and configure its desired\n   properties by sending a SIP INVITE containing\
    \ a <configure_leg>\n   request.  The <configure_leg> element sets the leg's unique\
    \ ID to\n   \"agent\" and sets the supervisor as a team member of the agent.\n\
    \   Because team member relationships are symmetric, this action also\n   adds\
    \ the agent as a team member for the coach.\n   The corresponding MSCML request\
    \ is as follows.\n   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"\
    1.0\">\n    <request>\n       <configure_leg id=\"agent\">\n         <configure_team\
    \ action=\"set\">\n           <teammate id=\"supervisor\"/>\n         </configure_team>\n\
    \       </configure_leg>\n     </request>\n   </MediaServerControl>\n   Figure\
    \ 12: Join Agent Request\n   Because the desired mixmode for this leg is full,\
    \ which is the\n   default value, there is no need to set it explicitly.\n"
- title: 5.8.2.4.  Joining and Configuring the Client
  contents:
  - "5.8.2.4.  Joining and Configuring the Client\n   Join the client leg to the conference\
    \ and configure its desired\n   properties by sending a SIP INVITE containing\
    \ a <configure_leg>\n   request.  The <configure_leg> element simply sets the\
    \ leg's unique ID\n   to \"customer\".  The media server does not need further\
    \ configuration\n   because the desired mixmode, full, is the default and the\
    \ customer\n   has no team members.\n   The corresponding MSCML request is as\
    \ follows.\n   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"1.0\"\
    >\n     <request>\n       <configure_leg id=\"customer\"/>\n     </request>\n\
    \   </MediaServerControl>\n   Figure 13: Join Client Request\n   Strictly speaking,\
    \ it is not a requirement that the client give the\n   customer leg a unique ID\
    \ because it will not be a team member.\n   However, when using coached conferencing,\
    \ we RECOMMEND that one\n   assign a unique ID to each leg in the initial INVITE\
    \ request.\n   Assigning a unique ID eliminates the need to set it later by sending\n\
    \   a SIP INFO if one later desires personalized mixing for the customer\n   leg.\n\
    \   The conference is now in the desired configuration, shown previously\n   in\
    \ Table 2.\n"
- title: 6.  Interactive Voice Response (IVR)
  contents:
  - "6.  Interactive Voice Response (IVR)\n   In the IVR model, the media server acts\
    \ as a media-processing proxy\n   for the UAC.  This is particularly useful when\
    \ the UAC is a media\n   gateway or other device with limited media processing\
    \ capability.\n   The typical use case for MSCML is when there is an application\
    \ server\n   that is the MSCML client.  The client can use the SIP Service URI\n\
    \   concept (RFC 3087) to initiate a service.  The client then uses RFC\n   4240\
    \ [2] to initiate a MSCML session on a media server.  These\n   relationships\
    \ are shown in Figure 14.\n                             SIP       +--------------+\n\
    \                         Service URI   | Application  |\n                   \
    \   /----------------|    Server    |\n                     /(e.g., RFC 3087)\
    \ +--------------+\n                    /                        |  MSCML\n  \
    \                 /                     SIP | Session\n                  /   \
    \                 +--------------+\n          +-----+/       RTP           | \
    \             |\n          | UAC |======================| Media Server |\n   \
    \       +-----+                      |              |\n                      \
    \                 +--------------+\n                               Figure 14:\
    \ IVR Model\n   The IVR service supports basic Interactive Voice Response functions,\n\
    \   playing announcements, collecting DTMF digits, and recording, based\n   on\
    \ Media Server Control Markup Language (MSCML) directives added to\n   the message\
    \ body of a SIP request.  The major MSCML IVR requests are\n   <play>, <playcollect>,\
    \ and <playrecord>.\n   Multifunction media servers MUST use the URI conventions\
    \ described in\n   RFC 4240 [2].  The service indicator for MSCML IVR MUST be\
    \ set to\n   \"ivr\", as shown in the following example:\n   sip:ivr@ms.example.net\n\
    \   The VoiceXML IVR service indicator is \"dialog\".  This service\n   indicator\
    \ MUST NOT be used for any other interactive voice response\n   control mechanism.\n\
    \   The media server MUST accept MSCML IVR payloads in INFO requests and\n   MUST\
    \ NOT accept MSCML IVR payloads in the initial or subsequent\n   INVITEs.  The\
    \ INFO method reduces certain timing issues that occur\n   with INVITEs and requires\
    \ less processing on both the client and\n   media server.\n   The media server\
    \ notifies the client that the command has completed\n   through a <response>\
    \ message containing final status information and\n   associated data such as\
    \ collected DTMF digits.\n   The media server does not queue IVR requests.  If\
    \ the media server\n   receives a new IVR request while another is in progress,\
    \ the media\n   server stops the first operation and it carries out the new request.\n\
    \   The media server generates a <response> message for the first request\n  \
    \ and returns any data collected up to that point.  If a client wishes\n   to\
    \ stop a request in progress but does not wish to initiate another\n   operation,\
    \ it issues a <stop> request.  This also causes the media\n   server to generate\
    \ a <response> message.\n   The media server treats a SIP re-INVITE that modifies\
    \ the established\n   SDP parameters as an implicit <stop> request.  Examples\
    \ of such SDP\n   modifications include receiving hold SDP or removing an audio\
    \ or\n   video stream.  When this occurs, the media server immediately\n   terminates\
    \ the running <play>, <playcollect>, or <playrecord> request\n   and sends a <response>\
    \ indicating \"reason=stopped\".\n"
- title: 6.1.  Specifying Prompt Content
  contents:
  - "6.1.  Specifying Prompt Content\n   The MSCML IVR requests support two methods\
    \ of specifying content to\n   be delivered to the user.  These are the <prompt>\
    \ element and the\n   prompturl attribute.  Clients MUST NOT utilize both methods\
    \ in a\n   single IVR request.  Clients SHOULD use the more flexible <prompt>\n\
    \   mechanism.  Use of the prompturl attribute is deprecated and may not\n   be\
    \ supported in future MSCML versions.\n"
- title: 6.1.1.  Use of the Prompt Element
  contents:
  - "6.1.1.  Use of the Prompt Element\n   The <prompt> element MAY be included in\
    \ the body of a <play>,\n   <playcollect>, or <playrecord> request to specify\
    \ a prompt sequence\n   to be delivered to the caller.  The prompt sequence consists\
    \ of one\n   or more references to physical content files, spoken variables, or\n\
    \   dynamic URLs that return a sub-sequence of files or variables.  In\n   addition,\
    \ the <prompt> element has several attributes that control\n   playback of the\
    \ included content.  These are described in the list\n   below.\n   Attributes\
    \ of <prompt>:\n   o  baseurl - optional, no default value: For notational convenience,\n\
    \      as well as reducing the MSCML payload size, the \"baseurl\"\n      attribute\
    \ is used to specify a base URL that is prepended to any\n      other URLs in\
    \ the sequence that are not fully qualified.\n   o  delay - optional, default\
    \ value \"0\": The \"delay\" attribute to the\n      prompt element specifies\
    \ the time to pause between repetitions of\n      the <prompt> sequence.  It has\
    \ no effect on the first iteration of\n      the sequence.  Expressed as a time\
    \ value (Section 4.2.1) from 0\n      onwards.\n   o  duration - optional, default\
    \ value \"infinite\": The \"duration\"\n      attribute to the prompt element\
    \ controls the maximum amount of\n      time that may elapse while the media server\
    \ repeats the sequence.\n      This allows the client to set an upper bound on\
    \ the length of\n      play.  Expressed as a time value (Section 4.2.1) from 1ms\
    \ onwards\n      or the strings \"immediate\" and \"infinite\".  \"Immediate\"\
    \ directs\n      the media server to end play immediately, whereas \"infinite\"\
    \n      indicates that the media server imposes no limit.\n   o  gain - optional,\
    \ default value \"0\": Sets the absolute gain to be\n      applied to the content\
    \ contained in <prompt>.  The value of this\n      attribute is specified in units\
    \ of dB.  The media server MAY\n      silently cap values that exceed the gain\
    \ limits imposed by the\n      platform.  The level reverts back to its original\
    \ value when\n      playback of the content contained in <prompt> has been completed.\n\
    \   o  gaindelta - optional, default value \"0\": Sets the relative gain to\n\
    \      be applied to the content contained in <prompt>.  The value of\n      this\
    \ attribute is specified in units of dB.  The media server MAY\n      silently\
    \ cap values which exceed the gain limits imposed by the\n      platform.  The\
    \ level reverts back to its original value when\n      playback of the content\
    \ contained in <prompt> has been completed.\n   o  rate - optional, default value\
    \ \"0\": Specifies the absolute\n      playback rate of the content relative to\
    \ normal as either a\n      positive percentage (faster) or a negative percentage\
    \ (slower).\n      Any value that attempts to set the rate above the maximum allowed\n\
    \      or below the minimum allowed silently sets the rate to the maximum\n  \
    \    or minimum.  The rate reverts back to its original value when\n      playback\
    \ of the content contained in <prompt> has been completed.\n   o  ratedelta -\
    \ optional, default value \"0\": Specifies the playback\n      rate of the content\
    \ relative to it's current rate as either a\n      positive percentage (faster)\
    \ or negative percentage (slower).  Any\n      value that attempts to set the\
    \ rate above the maximum allowed or\n      below the minimum allowed silently\
    \ sets the rate to the maximum or\n      minimum.  The rate reverts back to its\
    \ original value when\n      playback of the content contained in <prompt> has\
    \ completed.\n   o  locale - optional, no default value: Specifies the language\
    \ and\n      country variant used for resolving spoken variables.  The language\n\
    \      is defined as a two-letter code per ISO 639.  The country variant\n   \
    \   is also defined as a two-letter code per ISO 3166.  These codes\n      are\
    \ concatenated with a single underscore (%x5F) character.\n   o  offset - optional,\
    \ default value \"0\": A time value (Section 4.2.1)\n      which specifies the\
    \ time from the beginning of the sequence at\n      which play is to begin.  Offset\
    \ only applies to the first\n      repetition; subsequent repetitions begin play\
    \ at offset 0.\n      Allowable values are positive time values from 0 onwards.\
    \  When\n      the sequence consists of multiple content files, the offset may\n\
    \      select any point in the sequence.  If the offset value is greater\n   \
    \   than the total time of the sequence, it will \"wrap\" to the\n      beginning\
    \ and continue from there until the media server reaches\n      the specified\
    \ offset.\n   o  repeat - optional, default value \"1\": The \"repeat\" attribute\
    \ to\n      the prompt element controls the number of times the media server\n\
    \      plays the sequence in the <prompt> element.  Allowable values are\n   \
    \   integers from 0 on and the string \"infinite\", which indicates that\n   \
    \   repetition should occur indefinitely.  For example, \"repeat=2\"\n      means\
    \ that the sequence will be played twice, and \"repeat=0\",\n      which is allowed,\
    \ means that the sequence is not played.\n   o  stoponerror - optional, default\
    \ value \"no\": Controls media server\n      handling and reporting of errors\
    \ encountered when retrieving\n      remote content.  If set to \"yes\", content\
    \ play will end if a fetch\n      error occurs, and the response will contain\
    \ details regarding the\n      failure.  If set to \"no\", the media server will\
    \ silently move on\n      to the next URL in the sequence if a fetch failure occurs.\n\
    \   Clients MUST NOT include both 'gain' and 'gaindelta' attributes\n   within\
    \ a single <prompt> element.\n   When the client explicitly controls the output\
    \ gain on a conference\n   leg, as described in Section 5.3, the 'gain' and 'gaindelta'\n\
    \   attributes SHOULD interact with the conference leg output gain\n   settings\
    \ in the following manner.\n   o  Conference leg output gain set to <fixed>: The\
    \ operation of the\n      'gain' and 'gaindelta' attributes are unchanged.  However,\
    \ the\n      baseline gain value before any playback changes are applied is the\n\
    \      value specified for the conference leg.\n   o  Conference leg output gain\
    \ set to <auto>: When playback gain\n      controls are used, the automatic gain\
    \ control settings for the leg\n      are suspended for the duration of the playback\
    \ operation.  The\n      operation of the 'gain' and 'gaindelta' attributes are\
    \ unchanged.\n      The automatic gain control settings are reinstated when playback\n\
    \      has finished.\n   Media servers SHOULD support rate controls for content.\
    \  However,\n   media servers MAY silently ignore rate change requests if content\n\
    \   limitations do not allow the request to be honored.  Clients MUST NOT\n  \
    \ include both 'rate' and 'ratedelta' attributes within a single\n   <prompt>\
    \ element.\n   Figure 16 shows a sample prompt block.\n   <prompt stoponerror=\"\
    yes\"\n     baseurl=\"file:////var/mediaserver/prompts/\"\n     locale=\"en_US\"\
    \ offset=\"0\" gain=\"0\" rate=\"0\"\n     delay=\"0\" duration=\"infinite\" repeat=\"\
    1\">\n     <audio url=\"num_dialed.raw\" encoding=\"ulaw\"/>\n     <variable type=\"\
    dig\" subtype=\"ndn\" value=\"3014170700\"/>\n     <audio url=\"num_invalid.wav\"\
    />\n     <audio url=\"please_check.wav\"/>\n   </prompt>\n   Figure 16: Prompt\
    \ Block Example\n"
- title: 6.1.1.1.  <audio> and <variable> Elements
  contents:
  - "6.1.1.1.  <audio> and <variable> Elements\n   Clients compose prompt sequences\
    \ using the <audio> and <variable>\n   elements.  An <audio> element MAY refer\
    \ to content that contains\n   audio, video, or both; the generic name is preserved\
    \ for backwards\n   compatibility.  The <audio> element has the attributes described\
    \ in\n   the list below.\n   Attributes of <audio>:\n   o  url - required, no\
    \ default value: The URL of the content to be\n      retrieved and played.  The\
    \ target may be a local or remote (NFS)\n      \"file://\" scheme URL or an \"\
    http://\" or \"https://\" scheme URL.  If\n      the URL is not fully qualified\
    \ and a \"baseurl\" attribute was set,\n      the value of the \"baseurl\" attribute\
    \ will be prepended to this\n      value to generate the target URL.\n   o  encoding\
    \ - optional, default value \"ulaw\": Specifies the content\n      encoding for\
    \ file formats that are not self-describing (e.g.,\n      .WAV).  Allowable values\
    \ are \"ulaw\", \"alaw\", and \"msgsm\".  This\n      attribute only affects \"\
    file://\" scheme URLs.\n   o  gain - optional, default value \"0\": Sets the absolute\
    \ gain to be\n      applied to the content URL.  The value of this attribute is\n\
    \      specified in units of dB.  The media server MAY silently cap\n      values\
    \ that exceed the gain limits imposed by the platform.  The\n      level reverts\
    \ back to its original value when playback of the\n      content URL has been\
    \ completed.\n   o  gaindelta - optional, default value \"0\": Sets the relative\
    \ gain to\n      be applied to the content URL.  The value of this attribute is\n\
    \      specified in units of dB.  The media server MAY silently cap\n      values\
    \ that  exceed the gain limits imposed by the platform.  The\n      level reverts\
    \ back to its original value when playback of the\n      content URL has been\
    \ completed.\n   o  rate - optional, default value \"0\": Specifies the absolute\n\
    \      playback rate of the content relative to normal as either a\n      positive\
    \ percentage (faster) or a negative percentage (slower).\n      Any value that\
    \ attempts to set the rate above the maximum allowed\n      or below the minimum\
    \ allowed silently sets the rate to the maximum\n      or minimum.  The rate reverts\
    \ back to its original value when\n      playback of the content URL has been\
    \ completed.\n   o  ratedelta - optional, default value \"0\": Specifies the playback\n\
    \      rate of the content relative to it's current rate as either a\n      positive\
    \ percentage (faster) or a negative percentage (slower).\n      Any value that\
    \ attempts to set the rate above the maximum allowed\n      or below the minimum\
    \ allowed silently sets the rate to the maximum\n      or minimum.  The rate reverts\
    \ back to its original value when\n      playback of the content URL has been\
    \ completed.\n   Clients MUST NOT include both 'gain' and 'gaindelta' attributes\n\
    \   within a single <audio> element.\n   When the client explicitly controls the\
    \ output gain on a conference\n   leg, as described in Section 5.3, the 'gain'\
    \ and 'gaindelta'\n   attributes SHOULD interact with the conference leg output\
    \ gain\n   settings in the following manner.\n   o  Conference leg output gain\
    \ set to <fixed>: The operation of the\n      'gain' and 'gaindelta' attributes\
    \ are unchanged.  However, the\n      baseline gain value before any playback\
    \ changes are applied is the\n      value specified for the conference leg.\n\
    \   o  Conference leg output gain set to <auto>: When playback gain\n      controls\
    \ are used, the automatic gain control settings for the leg\n      are suspended\
    \ for the duration of the playback operation.  The\n      operation of the 'gain'\
    \ and 'gaindelta' attributes are unchanged.\n      The automatic gain control\
    \ settings are reinstated when playback\n      has finished.\n   Media servers\
    \ SHOULD support rate controls for content.  However,\n   media servers MAY silently\
    \ ignore rate change requests if content\n   limitations do not allow the request\
    \ to be honored.  Clients MUST NOT\n   include both 'rate' and 'ratedelta' attributes\
    \ within a single\n   <audio> element.\n   Media servers MUST support local and\
    \ remote (NFS) \"file://\" scheme\n   URLs and \"http://\" and \"https://\" scheme\
    \ URLs for content retrieval.\n      NOTE: The provisioning of NFS mount points\
    \ and their mapping to\n      the \"file://\" schema is purely a local matter\
    \ at the media server.\n   MSCML also supports \"http://\" and \"https://\" scheme\
    \ URLS that return\n   a list of physical URLs using the \"text/uri-list\" MIME\
    \ type.  This\n   facility provides flexibility for applications to dynamically\n\
    \   generate prompt sequences at execution time and enables separation of\n  \
    \ this function from the client and media server.\n   Spoken variables are specified\
    \ using the <variable> element.  This\n   element has the attributes described\
    \ in the list below.  MSCML's\n   spoken variables are based on those described\
    \ in Audio Server\n   Protocol [17].\n   Attributes of <variable>:\n   o  type\
    \ - required, no default value: Specifies the major type format\n      of the\
    \ spoken variable to be played.  Allowable values are \"dat\"\n      (date), \"\
    dig\" (digit), \"dur\" (duration), \"mth\" (month), \"mny\"\n      (money), \"\
    num\" (number), \"sil\" (silence), \"str\" (string), \"tme\"\n      (time), and\
    \ \"wkd\" (weekday).\n   o  subtype - optional, no default value: Specifies the\
    \ minor type\n      format of the spoken variable to be played.  Allowable values\n\
    \      depend on the value of the corresponding \"type\" attribute.\n      Possible\
    \ values are \"mdy\", \"ymd\", and \"dmy\" for dates, \"t12\" and\n      \"t24\"\
    \ for times, \"gen\", \"ndn\", \"crd\", and \"ord\" for digits, and\n      \"\
    USD\" for money.\n   o  value - required, no default value: A string that will\
    \ be\n      interpreted based on the formatting information specified in the\n\
    \      \"type\" and \"subtype\" attributes and the \"locale\" attribute of the\n\
    \      parent <prompt> element to render the spoken variable.\n   If the \"locale\"\
    \ attribute was not specified in <prompt>, the media\n   server SHOULD make a\
    \ selection based on platform configuration.  If\n   the precise \"locale\" requested\
    \ cannot be honored, the media server\n   SHOULD select the closest match based\
    \ on the available content.\n   IVR applications normally require specialized\
    \ prompt content that is\n   authored by the application provider.  To deliver\
    \ a quality user\n   interaction, the specialized prompts and spoken variables\
    \ must be\n   generated by the same speaker.  Since the media server inherently\n\
    \   supports multiple simultaneous applications, it is extremely\n   difficult\
    \ to provision all the necessary application prompts and\n   matching spoken variable\
    \ content locally on the media server.\n   Therefore, we STRONGLY RECOMMEND that\
    \ clients employ the dynamic URL\n   mechanism described earlier to generate spoken\
    \ variables using an\n   external web server that returns \"text/uri-list\" content.\n"
- title: 6.2.  Multimedia Processing for IVR
  contents:
  - "6.2.  Multimedia Processing for IVR\n   MSCML IVR requests implicitly support\
    \ multimedia content.  Multimedia\n   capabilities are controlled by the audio\
    \ and video media negotiated\n   for the dialog and the content specified by the\
    \ client for play and\n   record operations.  If the content specified for delivery\
    \ contains\n   both audio and video tracks and the dialog has audio and video\n\
    \   streams, both tracks are streamed to the caller.  Likewise, if the\n   dialog\
    \ has both audio and video streams and the content format\n   specified supports\
    \ both (e.g., .3gp files) the media server records\n   both streams to the file.\n\
    \   If there is a mismatch between the real time media and specified\n   content,\
    \ the media server MUST play or record the appropriate content\n   tracks rather\
    \ than failing the request.  For example, if the client\n   has requested playback\
    \ of content with audio and video tracks but\n   only audio media has been established\
    \ for the dialog, the media\n   server should play the audio track.  If the dialog\
    \ has both audio and\n   video media but the content is audio-only, the media\
    \ server MAY\n   stream a pre-provisioned video track to the caller.  Media servers\n\
    \   SHOULD implement video transcoding functions to minimize\n   incompatibilities\
    \ between real time media and content.\n   The media server MUST begin recording\
    \ video media only when it\n   receives a refresh video frame.  A refresh frame\
    \ contains all the\n   video information required to decode that frame (i.e.,\
    \ there is no\n   dependency on data from previous video frames).  Refresh frames\
    \ are\n   large and generally sent infrequently to conserve network bandwidth.\n\
    \   The media server MUST implement standard mechanisms to request that\n   the\
    \ caller (video encoder) transmit a refresh frame to ensure video\n   recording\
    \ begins quickly.  The media server MUST begin recording the\n   audio track immediately\
    \ while waiting to receive the video refresh\n   frame.\n"
- title: 6.3.  Playing Announcements <play>
  contents:
  - "6.3.  Playing Announcements <play>\n   The client issues a <play> request to\
    \ play an announcement without\n   interruption and with no digit collection.\
    \  One use, for example, is\n   to announce the name of a new participant to the\
    \ entire conference.\n   The <play> request has the attributes described in the\
    \ list below.\n   Attributes of <play>:\n   o  id - optional, no default value:\
    \ Specifies a client-defined ID for\n      purposes of matching requests and responses.\n\
    \   o  offset - optional, default value \"0\": Specifies the time from the\n \
    \     beginning of the URL specified in the 'prompturl' attribute at\n      which\
    \ play will begin.  Expressed as a time value (Section 4.2.1)\n      from 0 onwards.\
    \  If the offset value is greater than the total\n      time of the content, it\
    \ will \"wrap\" to the beginning and continue\n      from there until the media\
    \ server reaches the specified offset.\n      NOTE: Use of this attribute is deprecated.\n\
    \   o  promptencoding - optional, no default value: Specifies the content\n  \
    \    encoding for file formats that are not self-describing (e.g.,\n      .WAV).\
    \  Allowable values are \"ulaw\", \"alaw\", and \"msgsm\".  This\n      attribute\
    \ only affects \"file://\" scheme URLs.  NOTE: Use of this\n      attribute is\
    \ deprecated.\n   o  prompturl - optional, no default value: The URL of the content\
    \ to\n      be retrieved and played.  The target may be a local or remote\n  \
    \    (NFS) \"file://\" scheme URL or an \"http://\" or \"https://\" scheme\n \
    \     URL.  NOTE: Use of this attribute is deprecated.\n   The <play> request\
    \ has one child element defined, <prompt>.  Use of\n   <prompt> is described in\
    \ Section 6.1.1.\n   The client MUST NOT use both the <prompt> element and \"\
    prompturl\"\n   attribute in a single request.  As previously discussed, the\n\
    \   \"prompturl\" attribute is supported for backwards compatibility with\n  \
    \ older MSCML applications, but its use is deprecated.  The more\n   flexible\
    \ <prompt> element SHOULD be used instead.\n   The following play request (Figure\
    \ 17) example shows the delivery of\n   a complex prompt sequence consisting of\
    \ content accessed via NFS and\n   spoken variables.\n   <?xml version=\"1.0\"\
    ?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n       <play id=\"\
    332985001\">\n         <prompt stoponerror=\"yes\"\n           baseurl=\"file:////var/mediaserver/prompts/\"\
    \n           locale=\"en_US\" offset=\"0\" gain=\"0\" rate=\"0\"\n           delay=\"\
    0\" duration=\"infinite\" repeat=\"1\">\n           <audio url=\"num_dialed.raw\"\
    \ encoding=\"ulaw\"/>\n           <variable type=\"dig\" subtype=\"ndn\" value=\"\
    3014170700\"/>\n           <audio url=\"num_invalid.wav\"/>\n           <audio\
    \ url=\"please_check.wav\"/>\n         </prompt>\n       </play>\n     </request>\n\
    \   </MediaServerControl>\n   Figure 17: <Play> Request Example\n   When the announcement\
    \ has finished playing, the media server sends a\n   <response> payload to the\
    \ client in a SIP INFO message.  Details\n   regarding the format of <play> responses\
    \ are provided in Section\n   10.4.\n"
- title: 6.4.  Prompt and Collect <playcollect>
  contents:
  - "6.4.  Prompt and Collect <playcollect>\n   The client issues a <playcollect>\
    \ request to play an announcement\n   (optional) and collect digits.  The <playcollect>\
    \ request is executed\n   in two phases, prompt and collect.  If the client specifies\
    \ prompt\n   content to be played, using the <prompt> element or prompturl\n \
    \  attribute, the media server plays the content before starting the\n   collection\
    \ phase.  If no prompt content is specified, the collect\n   phase begins immediately.\n\
    \   The basic attributes of <playcollect> are the same as those of\n   <play>,\
    \ which were described in Section 6.3.  In addition to these\n   basic attributes,\
    \ <playcollect> defines others which control digit\n   buffering and barge-in\
    \ behavior, collection timers, special purpose\n   DTMF key functions, and logging\
    \ of user DTMF input.  Each functional\n   category and its attributes are described\
    \ below.\n"
- title: 6.4.1.  Control of Digit Buffering and Barge-In
  contents:
  - "6.4.1.  Control of Digit Buffering and Barge-In\n   Whenever the media server\
    \ is processing a call that specifies an\n   MSCML service (i.e., \"conf\" and\
    \ \"ivr\"), the media server continuously\n   looks for DTMF digits and places\
    \ them in a quarantine buffer.  The\n   quarantine buffer is examined when a <playcollect>\
    \ request is\n   received.  The media server compares any previously buffered\
    \ digits\n   for barge-in, and to look for matches with DTMF grammars or special\n\
    \   purpose keys.  This provides the type-ahead behavior for menu\n   traversal\
    \ and other types of IVR interactions.\n   Attributes for Control of Digit Buffering\
    \ and Barge-In:\n   o  cleardigits - optional, default value \"no\": Specifies\
    \ whether\n      previous user input should be considered or ignored for barge-in\n\
    \      purposes and DTMF matching.  When it is set to \"yes\", any\n      previously\
    \ buffered digits are removed, so prior user input is\n      ignored.  If it is\
    \ set to \"no\", previously buffered digits will be\n      considered.  If \"\
    cleardigits\" is set to \"no\" and barge-in is\n      enabled, previously buffered\
    \ digits will immediately terminate the\n      prompt phase.  In this case, the\
    \ prompt is not played, and digit\n      collection begins immediately.\n   o\
    \  barge - optional, default value \"yes\": Specifies whether user\n      input\
    \ will barge the prompt and force transition to the collect\n      phase.  When\
    \ it is set to \"yes\", a DTMF input will barge the\n      prompt.  When it is\
    \ set to \"no\", the prompt phase cannot be\n      barged, and any user input\
    \ during the prompt is placed in the\n      quarantine buffer for inspection during\
    \ the collect phase.  Note\n      that if the \"barge\" attribute is set to \"\
    no\", the \"cleardigits\"\n      attribute implicitly has a value of \"yes\".\
    \  This ensures that the\n      media server does not leave DTMF input that occurred\
    \ prior to the\n      current collection in the quarantine buffer after the request\
    \ is\n      completed.\n"
- title: 6.4.2.  Mapping DTMF Keys to Special Functions
  contents:
  - "6.4.2.  Mapping DTMF Keys to Special Functions\n   The client can define mappings\
    \ between DTMF digits and special\n   functions.  The media server invokes the\
    \ special function if the\n   associated DTMF digit is detected.  MSCML has two\
    \ attributes that\n   define mappings that affect termination of the collect phase.\
    \  These\n   attributes are described in the list below.\n   DTMF Key Mappings\
    \ for <playcollect>:\n   o  escapekey - optional, default value \"*\": Specifies\
    \ a DTMF key that\n      indicates that the user wishes to terminate the current\
    \ operation\n      without saving any input collected to that point.  Detection\
    \ of\n      the mapped DTMF key terminates the request immediately and\n     \
    \ generates a response.\n   o  returnkey - optional, default value \"#\": Specifies\
    \ a DTMF key that\n      indicates that the user has completed input and wants\
    \ to return\n      all collected digits to the client.  When the media server\
    \ detects\n      the returnkey, it immediately terminates collection and returns\n\
    \      the collected digits to the client in the <response> message.\n   MSCML\
    \ defines three additional mappings to enable video cassette\n   recorder (VCR)\
    \ type controls while playing a prompt sequence.  Media\n   servers SHOULD support\
    \ VCR controls.  However, if the media server\n   does not support VCR controls,\
    \ it MUST silently ignore DTMF inputs\n   mapped to VCR functions and complete\
    \ the <playcollect> request.  The\n   VCR control attributes are described in\
    \ the list below.\n   Attributes for VCR Controls:\n   o  skipinterval - optional,\
    \ default value \"6s\": The \"skipinterval\"\n      attribute indicates how far\
    \ the media server should skip backwards\n      or forwards when the rewind key\
    \ (rwkey) or fast forward key\n      (ffkey) is pressed, specified as a time value\
    \ (Section 4.2.1).\n   o  ffkey - optional, no default value: The \"ffkey\" attribute\
    \ maps a\n      DTMF key to a fast forward operation equal to the value of the\n\
    \      \"skipinterval\" attribute.\n   o  rwkey - optional, no default value:\
    \ The \"rwkey\" attribute maps a\n      DTMF key to a rewind action equal to the\
    \ value of the\n      \"skipinterval\" attribute.\n   Clients MUST NOT map the\
    \ same DTMF digit to both the \"rwkey\" and\n   \"ffkey\" attributes in a single\
    \ <playcollect> request.\n   VCR control operations are bounded by the beginning\
    \ and end of the\n   prompt sequence.  A rewind action that moves the offset before\
    \ the\n   beginning of the sequence results in playback starting at the\n   beginning\
    \ of the sequence (i.e., offset=0).  A fast forward action\n   that moves the\
    \ offset past the end of the sequence results in the\n   media server's treating\
    \ the sequence as complete.\n"
- title: 6.4.3.  Collection Timers
  contents:
  - "6.4.3.  Collection Timers\n   MSCML defines several timer attributes that control\
    \ how long the\n   media server waits for digits in the input sequence.  All timer\n\
    \   settings are time values (Section 4.2.1).  The list below describes\n   these\
    \ attributes and their use.\n   Collection Timer Attributes:\n   o  firstdigittimer\
    \ - optional, default value \"5000ms\": Specifies how\n      long the media server\
    \ waits for the initial DTMF input before\n      terminating the collection. \
    \ Expressed as a time value (Section\n      4.2.1) from 1ms onwards or the strings\
    \ \"immediate\" and \"infinite.\"\n      The value \"immediate\" indicates that\
    \ the timer should fire\n      immediately whereas \"infinite\" indicates that\
    \ the timer will never\n      fire.\n   o  interdigittimer - optional, default\
    \ value \"2000ms\": Specifies how\n      long the media server waits between DTMF\
    \ inputs.  Expressed as a\n      time value (Section 4.2.1) from 1ms onwards or\
    \ the strings\n      \"immediate\" and \"infinite.\"  The value \"immediate\"\
    \ indicates that\n      the timer should fire immediately, whereas \"infinite\"\
    \ indicates\n      that the timer will never fire.\n   o  extradigittimer - optional,\
    \ default value \"1000ms\": Specifies how\n      long the media server waits for\
    \ additional user input after the\n      specified number of digits has been collected.\
    \  Expressed as a\n      time value (Section 4.2.1) from 1ms onwards or the strings\n\
    \      \"immediate\" and \"infinite.\"  The value \"immediate\" indicates that\n\
    \      the timer should fire immediately, whereas \"infinite\" indicates\n   \
    \   that the timer will never fire.\n   o  interdigitcriticaltimer - optional,\
    \ defaults to the value of the\n      interdigittimer attribute: Specifies how\
    \ long the media server\n      waits after a grammar has been matched for a subsequent\
    \ digit that\n      may cause a longer match.  Expressed as a time value (Section\n\
    \      4.2.1) from 1ms onwards or the strings \"immediate\" and \"infinite.\"\n\
    \      The value \"immediate\" results in \"shortest match first\" behavior,\n\
    \      whereas \"infinite\" means to wait indefinitely for additional\n      input.\
    \  If not explicitly specified otherwise, this attribute is\n      set to the\
    \ value of the 'interdigittimer' attribute.\n   The extradigittimer setting enables\
    \ the \"returnkey\" input to be\n   associated with the current collection.  For\
    \ example, if maxdigits is\n   set to 3 and returnkey is set to #, the user may\
    \ enter either \"x#\",\n   \"xx#\", or \"xxx#\", where x represents a DTMF digit.\n\
    \   If the media server detects the \"returnkey\" pattern during the\n   \"extradigit\"\
    \ interval, the media server returns the collected digits\n   to the client and\
    \ removes the \"returnkey\" from the digit buffer.\n   If this were not the case,\
    \ the example would return \"xxx\" to the\n   client and leave the terminating\
    \ \"#\" in the digit buffer.  At the\n   next <playcollect> request, the media\
    \ server would process the '#'.\n   This might result in the termination of the\
    \ following prompt, which\n   is clearly not what the user intended.\n   The extradigittimer\
    \ has no effect unless returnkey has been set.\n"
- title: 6.4.4.  Logging Caller DTMF Input
  contents:
  - "6.4.4.  Logging Caller DTMF Input\n   Standard SIP mechanisms, such as those\
    \ discussed in Security\n   Considerations (Section 14), protect MSCML protocol\
    \ exchanges and the\n   information they contain.  These protections do not apply\
    \ to data\n   captured in media server log files.  In general, media server logging\n\
    \   is platform specific and therefore is not covered by this\n   specification.\
    \  However, one aspect of logging, the capture of\n   sensitive information (such\
    \ as personal identification numbers or\n   credit card numbers), is relevant.\
    \  The media server has no means to\n   determine whether the DTMF input it receives\
    \ may be sensitive, as\n   that is in the purview of the client.  Recognizing\
    \ this, MSCML\n   includes a per- request mechanism to suppress logging of captured\n\
    \   DTMF to be enabled by clients as needed.\n   The \"maskdigits\" attribute\
    \ controls whether detected DTMF digits\n   appear in the log output.  Clients\
    \ use this attribute when the media\n   server collects sensitive information\
    \ that should not be accessible\n   through the log files.\n   Maskdigits Attribute:\n\
    \   o  maskdigits - optional, default value \"no\": Controls whether user\n  \
    \    DTMF inputs are captured in media server log files.  The possible\n     \
    \ values for this attribute are \"yes\" and \"no\".\n"
- title: 6.4.5.  Specifying DTMF Grammars
  contents:
  - "6.4.5.  Specifying DTMF Grammars\n   MSCML supports four methods for specifying\
    \ DTMF grammars: the\n   \"maxdigits\" attribute, which provides a simple mechanism\
    \ for\n   collecting any number of digits up to the maximum, regular\n   expressions,\
    \ MGCP [5] digit maps, and H.248.1 [6] digit maps.  A\n   media server MUST support\
    \ the maxdigits and regular expression\n   methods for specifying DTMF grammars\
    \ and SHOULD support MGCP and\n   H.248.1 methods.  A client MUST NOT mix DTMF\
    \ grammar types in a\n   single <playcollect> request.\n   Following is a description\
    \ of the \"maxdigits\" attribute.\n   Maxdigits Attribute:\n   o  maxdigits -\
    \ optional, no default value: Specifies the maximum\n      number of DTMF digits\
    \ to be collected.\n   The <pattern> element specifies a digit pattern or patterns\
    \ for the\n   media server to look for.  This element may contain three different\n\
    \   child elements that specify the type of DTMF grammar used in the\n   expression.\
    \  The <pattern> element has no attributes.\n   <regex> Use regular expressions\
    \ to define DTMF patterns to match.\n      The complete regular expression syntax\
    \ used in MSCML is described\n      in Appendix A.\n   <mgcpdigitmap> Use digit\
    \ maps as specified in MGCP [5].\n   <megacodigitmap> Use digit maps as specified\
    \ in H.248.1 [6].\n   At least one <regex> element MUST be present in <pattern>\
    \ when regex\n   grammars are used.  Multiple <regex> elements MAY be present.\
    \  When\n   <mgcpdigitmap> or <megacodigitmap> grammars are used, <pattern> MUST\n\
    \   contain only one grammar element.\n   The DTMF grammar elements <regex>, <mgcpdigitmap>,\
    \ and\n   <megacodigitmap> have the attributes described in the list below.\n\
    \   Attributes of DTMF Grammar Elements:\n   o  value - required, no default value:\
    \ Specifies a string\n      representing a DTMF grammar matching the parent element\
    \ type\n      (e.g., regex).  Regex values represent a single DTMF grammar.\n\
    \      MGCP and MEGACO digit maps allow multiple grammars to be described\n  \
    \    in a single string.\n   o  name - optional, no default value: Associates\
    \ a client defined\n      name for the grammar that is sent back in the <playcollect>\n\
    \      response.  This attribute is most useful with regex type grammars\n   \
    \   as each grammar element can have a unique name.\n"
- title: 6.4.6.  Playcollect Response
  contents:
  - "6.4.6.  Playcollect Response\n   When the <playcollect> has finished, the media\
    \ server sends a\n   <response> payload to the client in a SIP INFO message.\n\
    \   Details of the <playcollect> response are described in Section 10.5.\n"
- title: 6.4.7.  Playcollect Example
  contents:
  - "6.4.7.  Playcollect Example\n   The following <playcollect> request (Figure 18)\
    \ example depicts use\n   of the \"maxdigits\" attribute to control digit collection.\n\
    \   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n\
    \       <playcollect id=\"332986004\" maxdigits=\"6\" firstdigittimer=\"10000\"\
    \n         interdigittimer=\"5000\" extradigittimer=\"1000\"\n         interdigitcriticaltimer=\"\
    1000\" returnkey=\"#\" escapekey=\"*\"\n         cleardigits=\"no\" barge=\"yes\"\
    \ maskdigits=\"no\">\n         <prompt baseurl=\"http://www.example.com/prompts/\"\
    >\n           <audio url=\"generic/en_US/enter_pin.wav\"/>\n         </prompt>\n\
    \       </playcollect>\n     </request>\n   </MediaServerControl>\n   Figure 18:\
    \ <Playcollect> Request Example Using the Maxdigits\n   Attribute\n"
- title: 6.5.  Prompt and Record <playrecord>
  contents:
  - "6.5.  Prompt and Record <playrecord>\n   The <playrecord> request directs the\
    \ media server to convert and\n   possibly to transcode the RTP payloads it receives\
    \ and store them to\n   the specified URL using the requested content codec(s)\
    \ and file\n   format.  This request proceeds in two phases; prompt and record.\n\
    \   The <playrecord> request shares the basic attributes of <play> and\n   <playcollect>\
    \ as described in Section 6.3.  MSCML also defines other\n   attributes that control\
    \ the behavior of the prompt and recording\n   phases.  These phases and the attributes\
    \ that control them are\n   described in the text and tables below.\n"
- title: 6.5.1.  Prompt Phase
  contents:
  - "6.5.1.  Prompt Phase\n   The presence or absence of a \"prompturl\" attribute\
    \ or child <prompt>\n   element controls whether a prompt is played before recording\
    \ begins.\n   As previously noted, use of the \"prompturl\" attribute is deprecated,\n\
    \   and clients SHOULD use <prompt> instead.\n   When the client requests that\
    \ the media server prompt the caller\n   before recording audio, <playrecord>\
    \ has two stages.  The first is\n   equivalent to a <playcollect> operation. \
    \ The client may set the\n   prompt phase to be interruptible by DTMF input (barge)\
    \ and may\n   specify an escape key that will terminate the <playrecord> request\n\
    \   before the recording phase begins.\n   The list below describes the attributes\
    \ of <playrecord> that specify\n   the behavior of the prompt phase of the request.\n\
    \   Playrecord Attributes for the Prompt Phase:\n   o  barge - optional, default\
    \ value \"yes\": Specifies whether user\n      input will barge the prompt and\
    \ force transition to the record\n      phase.  When it is set to \"yes\", a DTMF\
    \ input will barge the\n      prompt.  When it is set to \"no\", the prompt phase\
    \ cannot be\n      barged, and any user input during the prompt is placed in the\n\
    \      quarantine buffer for inspection during the collect phase.  Note\n    \
    \  that if the \"barge\" attribute is set to \"no\", the \"cleardigits\"\n   \
    \   attribute implicitly has a value of \"yes\".  This ensures that the\n    \
    \  media server does not leave DTMF input that occurred prior to the\n      current\
    \ collection in the quarantine buffer after the request\n      completes.\n  \
    \ o  cleardigits - optional, default value \"no\": Specifies whether\n      previous\
    \ user input should be considered or ignored for barge-in\n      purposes.  When\
    \ it is set to \"yes\", any previously buffered digits\n      are removed, so\
    \ prior user input is ignored.  If it is set to\n      \"no\", previously buffered\
    \ digits will be considered.  If\n      \"cleardigits\" is set to \"no\" and barge-in\
    \ is enabled, previously\n      buffered digits will terminate the prompt phase\
    \ immediately.  In\n      this case, the prompt is not played, and recording begins\n\
    \      immediately.\n   o  escapekey - optional, default value \"*\": Specifies\
    \ a DTMF key that\n      indicates the user wishes to terminate the current operation\n\
    \      without saving any input recorded to that point.  Detection of the\n  \
    \    mapped DTMF key terminates the request immediately and generates a\n    \
    \  response.\n   Detection of the escape key generates a response message, and\
    \ the\n   operation returns immediately.  If the user presses any other keys\n\
    \   and if the prompt is interruptible (barge=\"yes\"), then the play stops\n\
    \   immediately, and the recording phase begins.\n"
- title: 6.5.2.  Record Phase
  contents:
  - "6.5.2.  Record Phase\n   If the request proceeds to the recording phase, the\
    \ media server\n   discards any digits from the collect phase from the quarantine\
    \ buffer\n   to eliminate unintended termination of the recording.  The following\n\
    \   attributes control recording behavior.\n   Playrecord Attributes for the Record\
    \ Phase:\n   o  recurl - required, no default value: Specifies the target URL\
    \ for\n      the recorded content.\n   o  recencoding - optional, default value\
    \ \"ulaw\": Specifies the\n      encoding of the recorded content if it cannot\
    \ be inferred from the\n      recurl.  Possible values are \"ulaw\", \"alaw\"\
    , and \"msgsm.\"\n   o  mode - optional, default value \"overwrite\": Specifies\
    \ whether the\n      recording should overwrite or be appended to the target URL.\n\
    \      Allowable values are \"overwrite\" and \"append.\"\n   o  duration - optional,\
    \ default value \"infinite\": Specifies the\n      maximum allowable duration\
    \ for the recording.  Expressed as a time\n      value (Section 4.2.1) from 1\
    \ onwards or the strings \"immediate\"\n      and \"infinite.\"  The value \"\
    immediate\" indicates that recording\n      will end immediately, whereas \"infinite\"\
    \ indicates recording\n      should continue indefinitely.  If the maximum duration\
    \ is reached,\n      the <playrecord> request will terminate and generate a response.\n\
    \   o  beep - optional, default value \"yes\": Specifies whether a beep\n    \
    \  should be played to the caller immediately prior to the start of\n      the\
    \ recording phase.  Allowable values are \"yes\" and \"no.\"\n   o  initsilence\
    \ - optional, default value \"3000ms\": Specifies how long\n      to wait for\
    \ initial speech input before terminating (canceling)\n      the recording.  Expressed\
    \ as a time value (Section 4.2.1) from 1ms\n      onwards or the strings \"immediate\"\
    \ and \"infinite.\"  The value\n      \"immediate\" indicates that the timer should\
    \ fire immediately,\n      whereas \"infinite\" directs the media server to wait\
    \ indefinitely.\n   o  endsilence - optional, default value \"4000ms\": Specifies\
    \ how long\n      the media server waits after speech has ended to stop the\n\
    \      recording.  Expressed as a time value (Section 4.2.1) from 1ms\n      onwards\
    \ or the strings \"immediate\" and \"infinite.\"  When set to\n      \"infinite\"\
    , the recording will continue indefinitely after speech\n      has ended and will\
    \ only terminate due to a DTMF keypress or\n      because the input has reached\
    \ the maximum desired duration.\n   o  recstopmask - optional, default value \"\
    0123456789ABCD#*\":\n      Specifies a list of individual DTMF characters that,\
    \ if detected,\n      will cause the recording to be terminated.  To ensure that\
    \ the\n      input of a specific key does not cause the recording to stop,\n \
    \     remove the DTMF key from the list.\n   Media servers MUST support local\
    \ and remote (NFS) \"file://\" scheme\n   URLs in the \"recurl\" attribute.  MSCML\
    \ supports \"http://\" and\n   \"https://\" scheme URLs indirectly through the\
    \ <managecontent>\n   (Section 8) request.\n   The media server buffers and returns\
    \ any digits collected in the\n   prompt phase, with the exception of those contained\
    \ in the\n   \"recstopmask\" attribute, in the response.\n   The media server\
    \ compares digits detected during the recording phase\n   to the digits specified\
    \ in the \"recstopmask\" to determine whether\n   they indicate a recording termination\
    \ request.\n   The media server ignores digits not present in the recstopmask\
    \ and\n   passes them into the recording.  If DTMF input terminates the\n   recording,\
    \ the media server returns the collected digit to the client\n   in the <response>.\n\
    \   Once recording has begun, the media server writes the received media\n   to\
    \ the specified recurl URL no matter what DTMF events the media\n   server detects.\
    \  It is the responsibility of the client to examine\n   the DTMF input returned\
    \ in the <response> message to determine\n   whether the audio file should be\
    \ saved or deleted and, potentially,\n   re-recorded.\n   If the endsilence timer\
    \ expires, the media server trims the end of\n   the recorded audio by an amount\
    \ equal to the value of the\n   \"endsilence\" attribute.\n   When the recording\
    \ is finished, the media server generates a\n   <response> message and sends it\
    \ to the client in a SIP INFO message.\n   Details of the <playrecord> response\
    \ are described in Section 10.6.\n"
- title: 6.5.3.  Playrecord Example
  contents:
  - "6.5.3.  Playrecord Example\n   The recording example (Figure 19) plays a prompt\
    \ and records it to\n   the destination specified in the \"recurl\" attribute\
    \ encoded as MS-GSM\n   in wave format.\n   <?xml version=\"1.0\"?>\n   <MediaServerControl\
    \ version=\"1.0\">\n     <request>\n       <playrecord id=\"5556123\"\n      \
    \   recurl=\"file:////nfs.example.com/rec/name.wav\"\n         recencoding=\"\
    msgsm\"\n         initsilence=\"5000\" endsilence=\"3000\" duration=\"30000\"\n\
    \         barge=\"yes\"\n         beep=\"yes\"\n         mode=\"overwrite\"\n\
    \         cleardigits=\"no\"\n         escapekey=\"*\"\n         recstopmask=\"\
    0123456789#*\">\n         <prompt>\n           <audio url=\"http://www.example.com/prompts/recordname.wav\"\
    />\n         </prompt>\n       </playrecord>\n     </request>\n   </MediaServerControl>\n\
    \   Figure 19: Recording Example\n"
- title: 6.6.  Stop Request <stop>
  contents:
  - "6.6.  Stop Request <stop>\n   The client issues a <stop> request when the objective\
    \ is to stop a\n   request in progress and not to initiate another operation.\
    \  This\n   request generates a <response> message from the media server.\n  \
    \ The only attribute is id, which is optional.\n   The client-defined request\
    \ id correlates the asynchronous response\n   with its original request and echoes\
    \ back to the client in the media\n   server's response.\n   The following MSCML\
    \ payload (Figure 20) depicts an example <stop>\n   request.\n   <?xml version=\"\
    1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n       <stop\
    \ id=\"4578903\"/>\n     </request>\n   </MediaServerControl>\n   Figure 20: Stop\
    \ Example\n   The format of a response to a <stop> request is detailed in Section\n\
    \   10.2.\n   As discussed previously, the media server treats a SIP re-INVITE\
    \ that\n   modifies the established SDP parameters as an implicit <stop>\n   request.\
    \  Examples of such SDP modifications include receiving hold\n   SDP or removing\
    \ an audio or video stream.  When this occurs, the\n   media server immediately\
    \ terminates the running <play>,\n   <playcollect>, or <playrecord> request and\
    \ sends a <response>\n   indicating \"reason=stopped\".\n"
- title: 7.  Call Leg Events
  contents:
  - "7.  Call Leg Events\n   MSCML defines event notifications that are scoped to\
    \ a specific SIP\n   dialog or call leg.  These events allow a client to be notified\
    \ of\n   individual, asynchronous DTMF keypresses, as well as of various call\n\
    \   progress signals.  The subscription, event detection, and\n   notifications\
    \ for call leg events occur in the same SIP dialog.  This\n   is different from\
    \ the conference level active talker events described\n   earlier.  The subscription\
    \ and notifications for active talker events\n   occur on the conference control\
    \ leg, but the actual event detection\n   occurs on one or more participant legs.\n\
    \   Subscriptions for call leg events are made by sending an MSCML\n   <configure_leg>\
    \ request on the desired SIP dialog.  Call leg events\n   may be used with the\
    \ MSCML conferencing or IVR services.  When used\n   with the IVR service, the\
    \ <configure_leg> request SHOULD NOT include\n   any conference-related attributes.\
    \  The media server MUST ignore\n   these if present.  Call leg event subscriptions\
    \ MUST NOT be made on\n   the conference control leg, since it has no actual RTP\
    \ media to\n   process for event detection.  The media server MUST reject a\n\
    \   <configure_leg> request sent on the conference control leg.\n   The <configure_leg>\
    \ request contains the child elements <subscribe>\n   and <events>.  The <events>\
    \ element may contain two child elements\n   that control subscriptions to call\
    \ leg events.  These are <keypress>\n   and <signal>.  A <configure_leg> request\
    \ MUST contain at most one\n   <keypress> element but MAY contain multiple <signal>\
    \ elements that\n   request notification of different call progress events.\n"
- title: 7.1.  Keypress Events
  contents:
  - "7.1.  Keypress Events\n   Keypress events are used when the client wishes to\
    \ receive\n   notifications of individual DTMF events that are not tied to a\n\
    \   specific <playcollect> request.  One use of this facility is to\n   monitor\
    \ conference legs for DTMF inputs that require application\n   intervention; for\
    \ example, to notify the moderator that the caller\n   wishes to speak.  Keypress\
    \ events are also used when the application\n   desires complete control of grammars\
    \ and timing constraints.\n   When used in a subscription context, the <keypress>\
    \ element has two\n   attributes, 'report' and 'maskdigits', which are detailed\
    \ in the list\n   below.\n   Keypress Subscription Attributes:\n   o  report -\
    \ required, no default value: Possible values are\n      'standard', 'long', 'both',\
    \ and 'none'.  'Standard' means that\n      detected digits should be reported.\
    \  'Long' means that long digits\n      should be reported.  'Long' digits are\
    \ defined as a single key\n      press held down for more than one second, or\
    \ two distinct key\n      presses (a \"double\") of the same digit that occur\
    \ within two\n      seconds of each other with no other intervening digits.  'Both'\n\
    \      means that both 'standard' and 'long' digit events should be\n      reported.\
    \  As a 'long' digit consists of one or more \"normal\"\n      digits, a single\
    \ long duration key press will generate one\n      standard event and one 'long'\
    \ event.  A \"double\" will produce two\n      standard events and one 'long'\
    \ event.  'None' means that no\n      keypress events should be reported; it disables\
    \ keypress event\n      reporting if enabled.\n   o  maskdigits - optional, default\
    \ value \"no\": Controls whether user\n      DTMF inputs are captured in media\
    \ server log files.  The possible\n      values for this attribute are \"yes\"\
    \ and \"no\".\n   The media server sends an MSCML response to the subscription\n\
    \   immediately upon receiving the request.  Notifications are sent to\n   the\
    \ client when the specified events are detected.\n   When used in a notification\
    \ context, the <keypress> element has\n   several attributes that are used to\
    \ convey details of the event that\n   was detected.  It also contains a child\
    \ element, <status>, that\n   provides information on any MSCML request that was\
    \ in progress when\n   the event occurred.  The details of these notification\
    \ attributes are\n   described in the list below.\n   Keypress Notification Attributes:\n\
    \   o  digit - required, no default value: Specifies the DTMF digit\n      detected.\
    \  Possible values are [0-9], [A-D], '#', or '*'.\n   o  length - required, no\
    \ default value: Specifies the duration class\n      of the DTMF input.  Possible\
    \ values are 'standard' or 'long'.\n   o  method - required, no default value:\
    \ Specifies the keypress\n      detection method that generated the notification.\
    \  Possible values\n      are 'standard', 'long', and 'double'.\n   o  interdigittime\
    \ - required, no default value: Specifies the elapsed\n      time, as a time value\
    \ (Section 4.2.1), between the current event\n      detection and the previous\
    \ one.\n"
- title: 7.1.1.  Keypress Subscription Examples
  contents:
  - "7.1.1.  Keypress Subscription Examples\n   The following examples of MSCML payloads\
    \ depict a subscription for\n   standard keypress events and disabling keypress\
    \ reporting.\n   Figure 21 shows a subscription for standard keypress events.\n\
    \   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n\
    \       <configure_leg>\n         <subscribe>\n           <events>\n         \
    \    <keypress report=\"standard\"/>\n           </events>\n         </subscribe>\n\
    \       </configure_leg>\n     </request>\n   </MediaServerControl>\n   Figure\
    \ 21: Standard Digit Events Subscription\n   Figure 22 shows a client disabling\
    \ keypress event notifications.\n   <?xml version=\"1.0\"?>\n   <MediaServerControl\
    \ version=\"1.0\">\n     <request>\n       <configure_leg>\n         <subscribe>\n\
    \           <events>\n             <keypress report=\"none\"/>\n           </events>\n\
    \         </subscribe>\n       </configure_leg>\n     </request>\n   </MediaServerControl>\n\
    \   Figure 22: Disabling Keypress Event Reporting\n"
- title: 7.1.2.  Keypress Notification Examples
  contents:
  - "7.1.2.  Keypress Notification Examples\n   The following MSCML payloads depict\
    \ keypress event notifications\n   caused by various types of DTMF input.\n  \
    \ Figure 23 shows a notification generated by the detection of a\n   standard\
    \ \"4\" DTMF digit.  In this example, this is the first digit\n   detected.  Thus,\
    \ the 'interdigittime' attribute has a value of '0'.\n   <?xml version=\"1.0\"\
    ?>\n   <MediaServerControl version=\"1.0\">\n     <notification>\n       <keypress\
    \ digit=\"4\" length=\"standard\" method=\"standard\"\n         interdigittime=\"\
    0\">\n         <status command=\"play\" duration=\"10\"/>\n       </keypress>\n\
    \     </notification>\n   </MediaServerControl>\n   Figure 23: Standard Keypress\
    \ Notification\n   Figure 24 shows a notification generated by detection of a\
    \ long pound\n   (#).\n   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"\
    1.0\">\n     <notification>\n       <keypress digit=\"#\" length=\"long\" method=\"\
    long\"\n         interdigittime=\"200\">\n         <status command=\"idle\" duration=\"\
    4\"/>\n       </keypress>\n     </notification>\n   </MediaServerControl>\n  \
    \ Figure 24: Long Keypress Notification\n"
- title: 7.2.  Signal Events
  contents:
  - "7.2.  Signal Events\n   MSCML supports notification of certain call progress\
    \ tones through\n   the <signal> element.  When used in a subscription context,\
    \ the\n   <signal> element has two attributes, 'type' and 'report', and no\n \
    \  child elements.  These attributes are detailed in the list below.\n   Signal\
    \ Subscription Attributes:\n   o  report - required, no default value: Controls\
    \ whether the\n      specified signal is reported.  Possible values are 'yes'\
    \ and 'no'.\n      When set to 'yes', the media server invokes the required signal\n\
    \      detection code and reports detected events.  When it is set to\n      'no',\
    \ the media server disables the associated signal detection\n      code and does\
    \ not report events.\n   o  type - required, no default value: Specifies the type\
    \ of call\n      progress signal to detect.  Possible values are 'busy', 'ring',\n\
    \      'CED', 'CNG', and '400', which correspond to busy tone, ring tone,\n  \
    \    fax CED, fax CNG, and 400 Hz tone, respectively.\n      NOTE: The details\
    \ of media server provisioning required to support\n      country-specific variants\
    \ of 'busy' and 'ring' is not covered by\n      this specification.\n   As stated\
    \ previously, a single <configure_leg> request MAY contain\n   multiple <signal>\
    \ elements that request notification of different\n   call progress tones.  A\
    \ single <configure_leg> request SHOULD NOT\n   contain multiple <signal> elements\
    \ that have the same 'type'\n   attribute value.  If the media server receives\
    \ such a request, it\n   SHOULD honor the last element specifying that type that\
    \ appears in\n   the request.\n   The media server generates an immediate response\
    \ to the\n   <configure_leg> subscription request and sends notifications when\
    \ the\n   specified signals are detected.  A single notification is sent as\n\
    \   soon as the specified signal has been reliably detected.  If the\n   signal\
    \ persists continuously, additional notifications will not be\n   sent.  If the\
    \ signal is interrupted and then resumes, additional\n   notifications will be\
    \ sent.\n   Signal notifications have a single attribute, \"type\", as described\
    \ in\n   the list below.\n   Signal Notification Attribute:\n   o  type - required,\
    \ no default value: Specifies the type of call\n      progress signal that was\
    \ detected.  Possible values are 'busy',\n      'ring', 'CED', 'CNG', and '400',\
    \ which correspond to busy tone,\n      ring tone, fax CED, fax CNG, and 400 Hz\
    \ tone, respectively.\n"
- title: 7.2.1.  Signal Event Examples
  contents:
  - "7.2.1.  Signal Event Examples\n   The following MSCML payloads show a signal\
    \ event subscription (Figure\n   25) and notification (Figure 26).\n   <?xml version=\"\
    1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n       <configure_leg>\n\
    \         <subscribe>\n           <events>\n             <signal type=\"busy\"\
    \ report=\"yes\"/>\n           </events>\n         </subscribe>\n       </configure_leg>\n\
    \     </request>\n   </MediaServerControl>\n   Figure 25: Signal Event Subscription\n\
    \   <?xml version=\"1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <notification>\n\
    \       <signal type=\"busy\"/>\n     </notification>\n   </MediaServerControl>\n\
    \   Figure 26: Signal Event Notification\n"
- title: 8.  Managing Content <managecontent>
  contents:
  - "8.  Managing Content <managecontent>\n   MSCML uses the <managecontent> request\
    \ to move recorded content from\n   the media server to remote locations using\
    \ the HTTP protocol.  This\n   is a store-and-forward model, which requires the\
    \ completion of local\n   temporary recording before the media server can send\
    \ it to the web\n   server.  This facility is useful in applications such as voice\n\
    \   messaging, where a message may be reviewed by the caller prior to\n   being\
    \ committed to persistent storage.\n   The <managecontent> request contains no\
    \ child elements and has the\n   attributes described in the list below.\n   Managecontent\
    \ Attributes:\n   o  src - required, no default value: Specifies the local source\
    \ URL\n      of the content.  The URL scheme MUST be \"file://\".\n   o  dest\
    \ - required (see note), no default value: Specifies the\n      destination URL.\
    \  The URL scheme MUST be \"http://\".  Note: If the\n      selected action is\
    \ 'delete', this attribute is optional; otherwise\n      it is required.\n   o\
    \  action - optional, default value \"move\": Specifies the operation\n      for\
    \ the media server to execute.  Values can be either 'move' or\n      'delete'.\
    \  The 'delete' action operates on the local source file.\n      After a successful\
    \ move or delete, the media server deletes the\n      source file from its local\
    \ storage.  If the request is\n      unsuccessful, the source file is not deleted,\
    \ which gives the\n      client complete control of the retry strategy.\n   o\
    \  httpmethod - optional, default value \"post\": HTTP protocol method\n     \
    \ for the media server to use in the HTTP request.  The only values\n      are\
    \ 'post' or 'put'.\n   o  name - required (see note), no default value: Specifies\
    \ the field\n      name for the content in the form when using the 'post' method.\n\
    \      This is not to be confused with the \"src\" or \"dest\" attributes.\n \
    \     Note: This attribute is required when the \"htttpmethod\" has the\n    \
    \  value \"post\" and is optional otherwise.\n   o  fetchtimeout - optional, default\
    \ value \"10000ms\": Specifies the\n      maximum time allowed for the transfer\
    \ to complete.  Expressed as a\n      time value (Section 4.2.1) from 1ms onwards.\n\
    \   o  mimetype - required (see note), no default value: Specifies the\n     \
    \ MIME type that the media server will use for the content transfer.\n      If\
    \ it is not provided, the media server MUST try to infer it from\n      the content\
    \ file extension based on a platform specific mapping\n      table.  A non-normative,\
    \ example mapping table is shown in Table\n      3.  To avoid ambiguity, we RECOMMEND\
    \ that clients explicitly set\n      this attribute.  Note: If the MIME type of\
    \ the content cannot be\n      inferred from the file extension, this attribute\
    \ is required.\n   Table 3 shows common audio and video MIME types and possible\
    \ file\n   extension mappings.\n                    +-----------+--------------------+\n\
    \                    | Extension | MIME Type          |\n                    +-----------+--------------------+\n\
    \                    | alaw      | audio/x-alaw-basic |\n                    |\
    \ ulaw      | audio/basic        |\n                    | msgsm     | audio/ms-gsm\
    \       |\n                    | wav       | audio/x-wav        |\n          \
    \          | tif       | image/tiff         |\n                    | tiff    \
    \  | image/tiff         |\n                    | mov       | video/quicktime \
    \   |\n                    | qt        | video/quicktime    |\n              \
    \      | 3gp       | video/3gpp         |\n                    | 3gpp      | video/3gpp\
    \         |\n                    +-----------+--------------------+\n        \
    \   Table 3: Example File Extension to MIME Type Mappings\n   <Managecontent>\
    \ is purely a transport operation; the underlying\n   content is not changed by\
    \ it.  Therefore clients MUST ensure that the\n   source and destination file\
    \ name extensions and MIME types are the\n   same.  Failure to do so could result\
    \ in content that is unreadable.\n   The ability to move or delete any local file\
    \ presents a potential\n   risk to the security of the media server system.  For\
    \ this reason, we\n   STRONGLY RECOMMEND that implementers limit local file system\
    \ access\n   when using <managecontent>.  For example, we encourage limiting\n\
    \   access as based on file ownership and/or specific directories.\n"
- title: 8.1.  Managecontent Example
  contents:
  - "8.1.  Managecontent Example\n   The following is an example (Figure 27) showing\
    \ a local file on the\n   media server being transferred to an HTTP URL using\
    \ the \"put\" method.\n   The client sends the following request.\n   <?xml version=\"\
    1.0\"?>\n   <MediaServerControl version=\"1.0\">\n     <request>\n       <managecontent\
    \ id=\"102\"\n       src=\"file:////var/mediaserver/rec/6A5GH49B.ulaw\"\n    \
    \   dest=\"http://www.example.com/recordings/myrecording.ulaw\"\n       mimetype=\"\
    audio/basic\" action=\"move\" httpmethod=\"put\"\n       fetchtimeout=\"5000\"\
    />\n     </request>\n   </MediaServerControl>\n   Figure 27: Managecontent Example\n\
    \   Note that the client can change the temporary file name assigned by\n   the\
    \ media server as part of this operation as shown.\n   If the request is ambiguous,\
    \ the media server MUST return a status\n   code of \"400\" and text \"Bad Request.\"\
    \  If the media server is unable\n   to execute a syntactically correct and unambiguous\
    \ request, it MUST\n   return a \"500\" status code with the text \"Server Error.\"\
    \  For\n   example, the local file system access restrictions may prevent\n  \
    \ deletion of the specified file.  In this case, the \"reason\" attribute\n  \
    \ in the response conveys additional details on the server error that\n   occurred.\
    \  If there is a network or remote server error, the media\n   server provides\
    \ detailed error information in the <error_info>\n   element contained in the\
    \ media server response.  Additional\n   information regarding <managecontent>\
    \ responses is provided in\n   Section 10.7.\n"
- title: 9.  Fax Processing
  contents:
  - '9.  Fax Processing

    '
- title: 9.1.  Recording a Fax <faxrecord>
  contents:
  - "9.1.  Recording a Fax <faxrecord>\n   The <faxrecord> request directs the media\
    \ server to process a fax in\n   answer mode.  The reason for a request separate\
    \ from <playrecord> is\n   that the media server needs to know to process the\
    \ T.30 [18] or T.38\n   [19] fax protocols.\n   The <faxrecord> request has multiple\
    \ attributes and one child\n   element, <prompt>.  Its attributes are described\
    \ in the list below.\n   Attributes of <faxrecord>:\n   o  lclid - optional, default\
    \ value \"\" (the empty string): A string\n      that identifies the called station.\n\
    \   o  prompturl - optional, no default value: The URL of the fax content\n  \
    \    to be retrieved and played.  The target may be a local or remote\n      (NFS)\
    \ \"file://\" scheme URL or an \"http://\" or \"https://\" scheme\n      URL.\
    \  NOTE: Use of this attribute is deprecated.\n   o  promptencoding - optional,\
    \ no default value: Specifies the content\n      encoding for files that do not\
    \ have a 'tif' or 'tiff' extension.\n      The only allowable value is 'tiff'.\
    \  This attribute only affects\n      \"file://\" scheme URLs.  NOTE: Use of this\
    \ attribute is deprecated.\n   o  recurl - optional, no default value: Specifies\
    \ the target URL for\n      the recorded content.\n   o  rmtid - optional, no\
    \ default value: Specifies the calling station\n      identifier of the remote\
    \ terminal.  If present, the media server\n      MUST reject transactions with\
    \ the remote terminal if the remote\n      terminal's identifier does not match\
    \ the value of 'rmtid'.\n   Clients SHOULD use the more flexible <prompt> mechanism\
    \ for\n   specifying fax content.  Use of the 'prompturl' attribute is\n   deprecated\
    \ and may not be supported in future MSCML versions.  The\n   <prompt> element\
    \ is described in Section 6.1.1.  A <prompt> element\n   sent in a <faxrecord>\
    \ request MUST NOT contain <variable> elements.\n   Media servers MUST support\
    \ local and remote (NFS) \"file://\" scheme\n   URLs in the \"recurl\" attribute.\
    \  MSCML supports \"http://\" and\n   \"https://\" scheme URLs indirectly through\
    \ the <managecontent>\n   (Section 8) request.\n   The <faxrecord> request operates\
    \ in one of three modes: receive,\n   poll, and turnaround poll.  The combination\
    \ of <prompt> or\n   'prompturl' attribute and 'recurl' attribute define the mode.\
    \  Table\n   4 describes these modes in detail.  The 'prompt' column in the table\n\
    \   has the value 'yes' if the request has either a <prompt> element or a\n  \
    \ 'prompturl' attribute.\n   +--------+--------+---------+---------------------------------------+\n\
    \   | prompt | recurl | Mode    | Operation                             |\n  \
    \ +--------+--------+---------+---------------------------------------+\n   |\
    \ no     | no     | Invalid | Request fails.                        |\n   | no\
    \     | yes    | Receive | Record the fax to the target URL      |\n   |     \
    \   |        |         | specified in 'recurl'.                |\n   | yes   \
    \ | no     | Poll    | Send fax from source specified in the |\n   |        |\
    \        |         | <prompt> element or 'prompturl'       |\n   |        |  \
    \      |         | attribute.  If there is a 'rmtid', it |\n   |        |    \
    \    |         | MUST match the remote terminal's      |\n   |        |      \
    \  |         | identifier, or the request will fail. |\n   | yes    | yes    |\
    \ TP      | Turnaround Poll (TP) mode. If the     |\n   |        |        |  \
    \       | remote terminal wishes to transmit,   |\n   |        |        |    \
    \     | the media server records the fax to   |\n   |        |        |      \
    \   | the target URL specified in 'recurl'. |\n   |        |        |        \
    \ | If the remote terminal wishes to      |\n   |        |        |         |\
    \ receive, the media server sends the   |\n   |        |        |         | fax\
    \ from the source URL contained in  |\n   |        |        |         | <prompt>\
    \ or 'prompturl'.  If there is |\n   |        |        |         | a 'rmtid',\
    \ it MUST match remote       |\n   |        |        |         | terminal's identifier,\
    \ or the send    |\n   |        |        |         | request will fail.  A receive\
    \         |\n   |        |        |         | operation will still succeed,  \
    \       |\n   |        |        |         | however.                         \
    \     |\n   +--------+--------+---------+---------------------------------------+\n\
    \                        Table 4: Fax Receive Modes\n   In receive mode, the media\
    \ server receives the fax and writes the fax\n   data to the target URL specified\
    \ by the 'recurl' attribute.\n   In poll mode, the media server sends a fax, but\
    \ as a polled (called)\n   device.\n   In turnaround poll mode, the media server\
    \ will record a fax that the\n   remote machine sends.  If the remote machine\
    \ requests a transmission,\n   then the media server will send the fax.\n   When\
    \ transmitting a fax, the media server will advertise that it can\n   receive\
    \ faxes in the DIS message.  Likewise, when receiving a fax,\n   the media server\
    \ will advertise that it can send faxes in the DIS\n   message.\n   The media\
    \ server MUST flush any quarantined digits when it receives a\n   <faxrecord>\
    \ request.\n"
- title: 9.2.  Sending a Fax <faxplay>
  contents:
  - "9.2.  Sending a Fax <faxplay>\n   The <faxplay> request directs the media server\
    \ to process a fax in\n   originate mode.  The reason for a request separate from\
    \ <play> is\n   that the media server needs to know to process the T.30 [18] or\
    \ T.38\n   [19] fax protocols.\n   The <faxplay> request has multiple attributes\
    \ and one child element,\n   <prompt>.  Its attributes are described in the list\
    \ below.\n   Attributes of <faxplay>:\n   o  lclid - optional, default value \"\
    \" (the empty string): A string\n      that identifies the called station.\n \
    \  o  prompturl - optional, no default value: The URL of the content to\n    \
    \  be retrieved and played.  The target may be a local or remote\n      (NFS)\
    \ \"file://\" scheme URL or an \"http://\" or \"https://\" scheme\n      URL.\
    \  NOTE: Use of this attribute is deprecated.\n   o  promptencoding - optional,\
    \ no default value: Specifies the content\n      encoding for files that do not\
    \ have a 'tif' or 'tiff' extension.\n      The only allowable value is 'tiff'.\
    \  This attribute only affects\n      \"file://\" scheme URLs.  NOTE: Use of this\
    \ attribute is deprecated.\n   o  recurl - optional, no default value: Specifies\
    \ the target URL for\n      the recorded content.\n   o  rmtid - optional, no\
    \ default value: Specifies the calling station\n      identifier of the remote\
    \ terminal.  If present, the media server\n      MUST reject transactions with\
    \ the remote terminal if the remote\n      terminal's identifier does not match\
    \ the value of 'rmtid'.\n   Clients SHOULD use the more flexible <prompt> mechanism\
    \ for\n   specifying fax content.  Use of the 'prompturl' attribute is\n   deprecated\
    \ and may not be supported in future MSCML versions.  The\n   <prompt> element\
    \ is described in Section 6.1.1.  A <prompt> element\n   sent in a <faxrecord>\
    \ request MUST NOT contain <variable> elements.\n   Media servers MUST support\
    \ local and remote (NFS) \"file://\" scheme\n   URLs in the \"recurl\" attribute.\
    \  MSCML supports \"http://\" and\n   \"https://\" scheme URLs indirectly through\
    \ the <managecontent>\n   (Section 8) request.\n   The <faxplay> request operates\
    \ in one of three modes: send, remote\n   poll, and turnaround poll.  The combination\
    \ of <prompt> or\n   'prompturl' attribute and 'recurl' attribute define the mode.\
    \  Table\n   5 describes these modes in detail.  The 'prompt' column in the table\n\
    \   has the value 'yes' if the request has either a <prompt> element or a\n  \
    \ 'prompturl' attribute.\n   +--------+--------+---------+---------------------------------------+\n\
    \   | prompt | recurl | Mode    | Operation                             |\n  \
    \ +--------+--------+---------+---------------------------------------+\n   |\
    \ no     | no     | Invalid | Request fails.                        |\n   | yes\
    \    | no     | Send    | Send fax from source specified in the |\n   |      \
    \  |        |         | <prompt> element or 'prompturl'       |\n   |        |\
    \        |         | attribute. If there is a 'rmtid', it  |\n   |        |  \
    \      |         | MUST match the remote terminal's      |\n   |        |    \
    \    |         | identifier, or the request will fail. |\n   | no     | yes  \
    \  | Poll    | Send fax from source specified in the |\n   |        |        |\
    \         | <prompt> element or 'prompturl'       |\n   |        |        |  \
    \       | attribute, assuming the remote        |\n   |        |        |    \
    \     | terminal specifies it can receive a   |\n   |        |        |      \
    \   | fax in its DIS message. If the remote |\n   |        |        |        \
    \ | terminal does not support reverse     |\n   |        |        |         |\
    \ polling, the request will fail. If    |\n   |        |        |         | 'rmtid'\
    \ is specified, it MUST match   |\n   |        |        |         | remote terminal's\
    \ identifier, or the  |\n   |        |        |         | request will fail. \
    \                   |\n   | yes    | yes    | TP      | Turnaround Poll (TP) mode.\
    \ If the     |\n   |        |        |         | remote terminal wishes to transmit,\
    \   |\n   |        |        |         | the media server records the fax to  \
    \ |\n   |        |        |         | the target URL specified in 'recurl'. |\n\
    \   |        |        |         | If the remote terminal wishes to      |\n  \
    \ |        |        |         | receive, the media server sends the   |\n   |\
    \        |        |         | fax from the source URL contained in  |\n   |  \
    \      |        |         | <prompt> or 'prompturl'. If there is  |\n   |    \
    \    |        |         | a 'rmtid', it MUST match remote       |\n   |      \
    \  |        |         | terminal's identifier, or the send    |\n   |        |\
    \        |         | request will fail. A receive          |\n   |        |  \
    \      |         | operation will still succeed,         |\n   |        |    \
    \    |         | however.                              |\n   +--------+--------+---------+---------------------------------------+\n\
    \                          Table 5: Fax Send Modes\n   In send mode, the media\
    \ server sends the fax.\n   In remote poll mode, the client places a call on behalf\
    \ of the media\n   server.  The media server requests a fax transmission from\
    \ the remote\n   fax terminal.\n   In turnaround poll mode, the media server will\
    \ record a fax that the\n   remote machine sends.  If the remote machine requests\
    \ a transmission,\n   then the media server will send the fax.\n   When transmitting\
    \ a fax, the media server will advertise that it can\n   receive faxes in the\
    \ DIS message.  Likewise, when receiving a fax,\n   the media server will advertise\
    \ that it can send faxes in the DIS\n   message.\n   The media server MUST flush\
    \ any quarantined digits when it receives a\n   <faxplay> request.\n"
- title: 10.  MSCML Response Attributes and Elements
  contents:
  - '10.  MSCML Response Attributes and Elements

    '
- title: 10.1.  Mechanism
  contents:
  - "10.1.  Mechanism\n   The media server acknowledges receipt of a client MSCML\
    \ request sent\n   in a SIP INVITE by sending a response of either 200 OK or 415\
    \ Bad\n   Media Type.  The media server responds with 415 when the SIP request\n\
    \   contains a content type other than \"application/sdp\" or \"application/\n\
    \   mediaservercontrol+xml\".\n   The media server acknowledges receipt of a client\
    \ MSCML request sent\n   in a SIP INFO with a 200 OK or 415 Bad Media Type.  The\
    \ media server\n   responds with 415 if the INFO request contains a content type\
    \ other\n   than \"application/mediaservercontrol+xml\".\n   The media server\
    \ transports the MSCML <response> message in a SIP\n   INFO request.\n   If there\
    \ is an error in the request or the media server cannot\n   complete the request,\
    \ the media server sends the <response> message\n   very shortly after receiving\
    \ the request.  If the request is able to\n   proceed, the <response> contains\
    \ final status information as\n   described below.\n"
- title: 10.2.  Base <response> Attributes
  contents:
  - "10.2.  Base <response> Attributes\n   All MSCML responses have the basic attributes\
    \ defined in the list\n   below.\n   Basic MSCML Response Attributes:\n   o  id\
    \ - optional, no default value: Echoes the client-defined ID\n      contained\
    \ in the request.\n   o  request - required, no default value: Specifies the MSCML\
    \ request\n      type that generated the response.  Allowable values are\n   \
    \   \"configure_conference\", \"configure_leg\", \"play\", \"playcollect\",\n\
    \      \"playrecord\", \"stop\", \"faxplay\", \"faxrecord\", and \"managecontent\"\
    .\n   o  code - required, no default value: The final status code for the\n  \
    \    request.  MSCML uses a subset of the status classes defined in RFC\n    \
    \  3261 [4].  In MSCML, 2XX responses indicate success, 4XX responses\n      indicate\
    \ client error, and 5XX responses indicate an error on the\n      media server.\
    \  There are no 1XX, 3XX, or 6XX status codes in\n      MSCML.\n   o  text - required,\
    \ no default value: The human readable reason\n      phrase associated with the\
    \ status code.\n   Responses to <configure_conference> and <stop> requests contain\
    \ only\n   the attributes above.  MSCML responses to other requests MAY contain\n\
    \   additional request-specific attributes and elements.  These are\n   described\
    \ in the following sections.\n"
- title: 10.3.  Response Attributes and Elements for <configure_leg>
  contents:
  - "10.3.  Response Attributes and Elements for <configure_leg>\n   Responses to\
    \ <configure_leg> requests have only the base response\n   attributes defined\
    \ in Section 10.2.  However, when the request\n   contains a <configure_team>\
    \ element, the response includes a <team>\n   element describing the teammate\
    \ configuration for that leg.  The\n   attributes of the <team> element are shown\
    \ in the list below.\n   Attributes of <team>:\n   o  id - required, no default\
    \ value: The client-defined unique\n      identifier for the conference leg.\n\
    \   o  numteam - required, no default value: The number of team members\n    \
    \  for the leg.\n   Additional information on each team member is conveyed by\
    \ child\n   <teammate> elements contained within <team>.  Each teammate is\n \
    \  represented by a single element in the list.  The <teammate> element\n   has\
    \ a single attribute, as described below.\n   Attributes of <teammate>:\n   o\
    \  id - required, no default value: The client-defined unique\n      identifier\
    \ for the teammate leg.\n"
- title: 10.4.  Response Attributes and Elements for <play>
  contents:
  - "10.4.  Response Attributes and Elements for <play>\n   In addition to the base\
    \ response attributes defined in Section 10.2,\n   responses to <play> requests\
    \ have the additional attributes described\n   in the list below.\n   MSCML Response\
    \ Attributes for <play>:\n   o  reason - optional, no default value: For requests\
    \ that are not\n      completed immediately, the \"reason\" attribute conveys\
    \ additional\n      information regarding why the command was completed.  Possible\n\
    \      values are \"stopped\", indicating that an explicit or implicit\n     \
    \ <stop> request was received, and \"EOF\", indicating that the end of\n     \
    \ the specified sequence of URLs was reached.\n   o  playduration - required,\
    \ no default value: A time value (Section\n      4.2.1) that returns the duration\
    \ of the associated content\n      playout.\n   o  playoffset - required, no default\
    \ value: A time value (Section\n      4.2.1) that returns the time offset into\
    \ the specified content\n      sequence where play was terminated.  If the initial\
    \ \"offset\" value\n      in the sequence was \"0\", then \"playduration\" and\
    \ \"playoffset\" are\n      equal.  However, if the initial offset had some other\
    \ value,\n      \"playoffset\" serves as a bookmark for the client to resume play\
    \ in\n      a subsequent request.\n"
- title: 10.4.1.  Reporting Content Retrieval Errors
  contents:
  - "10.4.1.  Reporting Content Retrieval Errors\n   If the associated request set\
    \ \"stoponerror=yes\" in <prompt> and an\n   error occurred while retrieving the\
    \ specified content the response\n   will include an <error_info> element detailing\
    \ the problem.  This\n   element contains the response information received from\
    \ the remote\n   content server.  The <error_info> element has the attributes\n\
    \   described in the list below.\n   Attributes of <error_info>:\n   o  code -\
    \ required, no default value: The status code returned by the\n      remote content\
    \ server.  For example, a web server might return 404\n      to indicate that\
    \ the requested content was not found.\n   o  text - required, no default value:\
    \ The human-readable reason\n      phrase returned by the remote content server.\
    \  For example, the\n      reason phrase \"Not Found\" would be returned if the\
    \ requested\n      content was not found.\n   o  context - required, no default\
    \ value: Contains the content URL\n      that was being fetched when the retrieval\
    \ error occurred.  This\n      enables the client to know precisely which URL\
    \ in a sequence\n      caused the problem.\n   An <error_info> element MAY be\
    \ present in the response to any request\n   that contains a child <prompt> element.\n"
- title: 10.5.  Response Attributes and Elements for <playcollect>
  contents:
  - "10.5.  Response Attributes and Elements for <playcollect>\n   In addition to\
    \ the base response attributes defined in Section 10.2,\n   responses to <playcollect>\
    \ requests have the additional attributes\n   described in the list below.\n \
    \  MSCML Response Attributes for <playcollect>:\n   o  reason - optional, no default\
    \ value: For requests that are not\n      completed immediately, the \"reason\"\
    \ attribute conveys additional\n      information regarding why the command was\
    \ completed.  Possible\n      values are \"stopped\", indicating that an explicit\
    \ or implicit\n      <stop> request was received; \"match\", meaning that a DTMF\
    \ grammar\n      was matched; \"timeout\", indicating that no DTMF input was received\n\
    \      before one of the collection timers expired; and \"returnkey\" or\n   \
    \   \"escapekey\", meaning the DTMF digit mapped to that key was\n      detected\
    \ and the return key or escape key terminated the\n      operation, respectively.\n\
    \   o  playduration - required, no default value: A time value (Section\n    \
    \  4.2.1) that returns the duration of the associated content\n      playout.\
    \  If the caller barged the prompt, this value will reflect\n      the play duration\
    \ up to that event.\n   o  playoffset - required, no default value: A time value\
    \ (Section\n      4.2.1) that returns the time offset into the specified content\n\
    \      sequence where play was terminated.  If the initial \"offset\" value\n\
    \      in the sequence was \"0\", then \"playduration\" and \"playoffset\" are\n\
    \      equal.  However, if the initial offset had some other value,\n      \"\
    playoffset\" serves as a bookmark for the client to resume play in\n      a subsequent\
    \ request.  If the caller barged the prompt this value\n      will reflect the\
    \ time offset at which barge-in occurred.\n   o  digits - required, no default\
    \ value: Contains the collected DTMF\n      input characters.  If no DTMF input\
    \ was collected, this attribute\n      is set to the empty string (\"\").\n  \
    \ o  name - required (see note), no default value: The client-defined\n      name\
    \ of the DTMF grammar that was matched.  Note: This attribute\n      is required\
    \ if the \"name\" attribute was set in the matching DTMF\n      grammar.\n   Responses\
    \ to <playcollect> requests MAY include an <error_info>\n   element, as described\
    \ in Section 10.4.1.\n"
- title: 10.6.  Response Attributes and Elements for <playrecord>
  contents:
  - "10.6.  Response Attributes and Elements for <playrecord>\n   In addition to the\
    \ base response attributes defined in Section 10.2,\n   responses to <playrecord>\
    \ requests have the additional attributes\n   described in the list below.\n \
    \  o  reason - optional, no default value: For requests that are not\n      completed\
    \ immediately, the \"reason\" attribute conveys additional\n      information\
    \ regarding why the command was completed.  Possible\n      values are \"stopped\"\
    , indicating that an explicit or implicit\n      <stop> request was received;\
    \ \"digit\", meaning that a DTMF digit\n      was detected and that the prompt\
    \ phase was barged; \"init_silence\",\n      meaning the recording terminated\
    \ because of no input;\n      \"end_silence\", meaning that the recording was\
    \ terminated because\n      the \"endsilence\" timer elapsed; \"max_duration\"\
    , indicating that\n      the maximum time for the recording was reached; \"escapekey\"\
    ,\n      indicating that the DTMF input mapped to \"escapekey\" was detected,\n\
    \      thus terminating the recording; and \"error\", indicating a general\n \
    \     operation failure.\n   o  playduration - required, no default value: A time\
    \ value (Section\n      4.2.1) that returns the duration of the associated content\n\
    \      playout.  If the caller barged the prompt, this value will reflect\n  \
    \    the play duration up to that event.\n   o  playoffset - required, no default\
    \ value: A time value (Section\n      4.2.1) that returns the time offset into\
    \ the specified content\n      sequence where play was terminated.  If the initial\
    \ \"offset\" value\n      in the sequence was \"0\", then \"playduration\" and\
    \ \"playoffset\" are\n      equal.  However, if the initial offset had some other\
    \ value,\n      \"playoffset\" serves as a bookmark for the client to resume play\
    \ in\n      a subsequent request.  If the caller barged the prompt this value\n\
    \      will reflect the time offset at which barge-in occurred.\n   o  digits\
    \ - required, no default value: Contains the DTMF digit that\n      terminated\
    \ the recording.  If no DTMF input was detected, this\n      attribute is set\
    \ to the empty string (\"\").\n   o  reclength - required, no default value: The\
    \ length of the recorded\n      content, in bytes.\n   o  recduration - required,\
    \ no default value: A time value (Section\n      4.2.1) indicating the elapsed\
    \ duration of the recording.\n   Responses to <playrecord> requests MAY include\
    \ an <error_info>\n   element, as described in Section 10.4.1.\n"
- title: 10.7.  Response Attributes and Elements for <managecontent>
  contents:
  - "10.7.  Response Attributes and Elements for <managecontent>\n   Responses to\
    \ <managecontent> requests have only the base response\n   attributes defined\
    \ in Section 10.2.  If a content transfer error\n   occurs while executing the\
    \ request the response will also contain an\n   <error_info> element as described\
    \ in Section 10.4.1.\n"
- title: 10.8.  Response Attributes and Elements for <faxplay> and <faxrecord>
  contents:
  - "10.8.  Response Attributes and Elements for <faxplay> and <faxrecord>\n   In\
    \ addition to the base response attributes defined in Section 10.2,\n   responses\
    \ to <faxplay> and <faxrecord> requests have the additional\n   attributes described\
    \ in the list below.\n   o  reason - required, no default value: For requests\
    \ that are not\n      completed immediately, the \"reason\" attribute conveys\
    \ additional\n      information regarding why the command was completed.  Possible\n\
    \      values are \"stopped\", indicating that an explicit or implicit\n     \
    \ <stop> request was received; \"complete\", indicating successful\n      completion,\
    \ even if there were bad lines or minor negotiation\n      problems (e.g., a DCN\
    \ was received); \"disconnect\", meaning that\n      the session was disconnected;\
    \ and \"notfax\", indicating that no DIS\n      or DCS was received on the connection.\n\
    \   o  pages_received - required (see note), no default value: Indicates\n   \
    \   the number of fax pages received.  Note: This attribute is\n      required\
    \ if any pages were received.\n   o  pages_sent - required (see note), no default\
    \ value: Indicates the\n      number of fax pages sent.  Note: This attribute\
    \ is required if any\n      pages were sent.\n   o  faxcode - required, no default\
    \ value: The value of the \"faxcode\"\n      attribute is the binary-or of the\
    \ bit patterns defined in Table 6.\n              +------+--------------------------------------+\n\
    \              | Mask | description                          |\n             \
    \ +------+--------------------------------------+\n              | 0    | Operation\
    \ Failed                     |\n              | 1    | Operation Succeeded   \
    \               |\n              | 2    | Partial Success                    \
    \  |\n              | 4    | Image received and placed in recurl  |\n        \
    \      | 8    | Image sent from specified source URL |\n              | 16   |\
    \ rmtid did not match                  |\n              | 32   | Error reading\
    \ source URL             |\n              | 64   | Error writing recurl      \
    \           |\n              | 128  | Negotiation failure on send phase    |\n\
    \              | 256  | Negotiation failure on receive phase |\n             \
    \ | 512  | Reserved                             |\n              | 1024 | Irrecoverable\
    \ IP packet loss         |\n              | 2048 | Line errors in received image\
    \        |\n              +------+--------------------------------------+\n  \
    \                         Table 6: Faxcode Mask\n   Responses to <faxplay> and\
    \ <faxrecord> requests MAY include an\n   <error_info> element, as described in\
    \ Section 10.4.1.\n"
- title: 11.  Formal Syntax
  contents:
  - "11.  Formal Syntax\n   The following syntax specification uses XML Schema as\
    \ described in\n   XML [7].\n"
- title: 11.1.  Schema
  contents:
  - "11.1.  Schema\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema xmlns:xs=\"\
    http://www.w3.org/2001/XMLSchema\"\n     elementFormDefault=\"qualified\">\n \
    \    <xs:element name=\"MediaServerControl\">\n       <xs:complexType>\n     \
    \    <xs:choice>\n           <xs:element name=\"request\">\n             <xs:complexType>\n\
    \               <xs:choice>\n                 <xs:element name=\"configure_conference\"\
    \n                   type=\"configure_conferenceRequestType\"/>\n            \
    \     <xs:element name=\"configure_leg\"\n                   type=\"configure_legRequestType\"\
    />\n                 <xs:element name=\"play\" type=\"playRequestType\"/>\n  \
    \               <xs:element name=\"playcollect\"\n                   type=\"playcollectRequestType\"\
    />\n                 <xs:element name=\"playrecord\"\n                   type=\"\
    playrecordRequestType\"/>\n                 <xs:element name=\"managecontent\"\
    \n                   type=\"managecontentRequestType\"/>\n                 <xs:element\
    \ name=\"faxplay\"\n                   type=\"faxRequestType\"/>\n           \
    \      <xs:element name=\"faxrecord\"\n                   type=\"faxRequestType\"\
    />\n                 <xs:element name=\"stop\" type=\"stopRequestType\"/>\n  \
    \             </xs:choice>\n             </xs:complexType>\n           </xs:element>\n\
    \           <xs:element name=\"response\" type=\"responseType\"/>\n          \
    \ <xs:element name=\"notification\">\n             <xs:complexType>\n        \
    \       <xs:choice>\n                 <xs:element name=\"conference\"\n      \
    \             type=\"conferenceNotificationType\"/>\n                 <xs:element\
    \ name=\"keypress\"\n                   type=\"keypressNotificationType\"/>\n\
    \                 <xs:element name=\"signal\"\n                   type=\"signalNotificationType\"\
    />\n               </xs:choice>\n             </xs:complexType>\n           </xs:element>\n\
    \         </xs:choice>\n         <xs:attribute name=\"version\" use=\"required\"\
    />\n       </xs:complexType>\n     </xs:element>\n     <!-- Definitions for base\
    \ and concrete MSCML requests -->\n     <!-- and embedded types. -->\n     <xs:complexType\
    \ name=\"base_requestType\" abstract=\"true\">\n       <xs:attribute name=\"id\"\
    \ type=\"xs:string\"/>\n     </xs:complexType>\n     <xs:complexType name=\"playRequestType\"\
    >\n       <xs:complexContent>\n         <xs:extension base=\"base_requestType\"\
    >\n           <xs:sequence>\n             <xs:element name=\"prompt\" type=\"\
    promptType\"\n               minOccurs=\"0\"/>\n           </xs:sequence>\n  \
    \         <xs:attribute name=\"prompturl\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"offset\" type=\"xs:string\"/>\n           <xs:attribute name=\"promptencoding\"\
    \ type=\"xs:string\"/>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"configure_conferenceRequestType\"\
    >\n       <xs:complexContent>\n         <xs:extension base=\"base_requestType\"\
    >\n           <xs:sequence>\n             <xs:element name=\"subscribe\"\n   \
    \            type=\"conference_eventsubscriptionType\" minOccurs=\"0\"/>\n   \
    \        </xs:sequence>\n           <xs:attribute name=\"reservedtalkers\"\n \
    \            type=\"xs:positiveInteger\"/>\n           <xs:attribute name=\"reserveconfmedia\"\
    \ type=\"yesnoType\"\n             default=\"yes\"/>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:complexType name=\"\
    configure_legRequestType\">\n       <xs:complexContent>\n         <xs:extension\
    \ base=\"base_requestType\">\n           <xs:sequence>\n             <xs:element\
    \ name=\"inputgain\" type=\"gainType\"\n               minOccurs=\"0\"/>\n   \
    \          <xs:element name=\"outputgain\" type=\"gainType\"\n               minOccurs=\"\
    0\"/>\n             <xs:element name=\"configure_team\"\n               type=\"\
    configure_teamType\" minOccurs=\"0\"/>\n             <xs:element name=\"subscribe\"\
    \n               type=\"leg_eventsubscriptionType\" minOccurs=\"0\"/>\n      \
    \     </xs:sequence>\n           <xs:attribute name=\"type\">\n             <xs:simpleType>\n\
    \               <xs:restriction base=\"xs:NMTOKEN\">\n                 <xs:enumeration\
    \ value=\"talker\"/>\n                 <xs:enumeration value=\"listener\"/>\n\
    \               </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"mixmode\">\n             <xs:simpleType>\n  \
    \             <xs:restriction base=\"xs:NMTOKEN\">\n                 <xs:enumeration\
    \ value=\"full\"/>\n                 <xs:enumeration value=\"mute\"/>\n      \
    \           <xs:enumeration value=\"preferred\"/>\n                 <xs:enumeration\
    \ value=\"parked\"/>\n                 <xs:enumeration value=\"private\"/>\n \
    \              </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"dtmfclamp\" type=\"yesnoType\"/>\n          \
    \ <xs:attribute name=\"toneclamp\" type=\"yesnoType\"/>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:complexType name=\"\
    configure_teamType\">\n       <xs:sequence>\n         <xs:element name=\"teammate\"\
    \ type=\"teammateType\" minOccurs=\"0\"\n           maxOccurs=\"unbounded\"/>\n\
    \       </xs:sequence>\n       <xs:attribute name=\"id\" type=\"xs:string\"/>\n\
    \       <xs:attribute name=\"action\" use=\"required\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n             <xs:enumeration\
    \ value=\"add\"/>\n             <xs:enumeration value=\"delete\"/>\n         \
    \    <xs:enumeration value=\"query\"/>\n             <xs:enumeration value=\"\
    set\"/>\n           </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"teammateType\">\n       <xs:attribute\
    \ name=\"id\" type=\"xs:string\" use=\"required\"/>\n     </xs:complexType>\n\
    \     <xs:complexType name=\"playcollectRequestType\">\n       <xs:complexContent>\n\
    \         <xs:extension base=\"base_requestType\">\n           <xs:sequence>\n\
    \             <xs:element name=\"prompt\" type=\"promptType\"\n              \
    \ minOccurs=\"0\"/>\n             <xs:element name=\"pattern\" type=\"dtmfGrammarType\"\
    \n               minOccurs=\"0\"/>\n           </xs:sequence>\n           <xs:attribute\
    \ name=\"prompturl\" type=\"xs:string\"/>\n           <xs:attribute name=\"offset\"\
    \ type=\"xs:string\"/>\n           <xs:attribute name=\"barge\" type=\"yesnoType\"\
    \ default=\"yes\"/>\n           <xs:attribute name=\"promptencoding\" type=\"\
    xs:string\"/>\n           <xs:attribute name=\"cleardigits\" type=\"yesnoType\"\
    \n             default=\"no\"/>\n           <xs:attribute name=\"maxdigits\" type=\"\
    xs:string\"/>\n           <xs:attribute name=\"firstdigittimer\" type=\"xs:string\"\
    \n             default=\"5000ms\"/>\n           <xs:attribute name=\"interdigittimer\"\
    \ type=\"xs:string\"\n             default=\"2000ms\"/>\n           <xs:attribute\
    \ name=\"extradigittimer\" type=\"xs:string\"\n             default=\"1000ms\"\
    />\n           <xs:attribute name=\"interdigitcriticaltimer\"\n             type=\"\
    xs:string\"/>\n           <xs:attribute name=\"skipinterval\" type=\"xs:string\"\
    \n             default=\"6s\"/>\n           <xs:attribute name=\"ffkey\" type=\"\
    DTMFkeyType\"/>\n           <xs:attribute name=\"rwkey\" type=\"DTMFkeyType\"\
    />\n           <xs:attribute name=\"returnkey\" type=\"DTMFkeyType\"\n       \
    \      default=\"#\"/>\n           <xs:attribute name=\"escapekey\" type=\"DTMFkeyType\"\
    \n             default=\"*\"/>\n           <xs:attribute name=\"maskdigits\" type=\"\
    yesnoType\"\n             default=\"no\"/>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"playrecordRequestType\">\n\
    \       <xs:complexContent>\n         <xs:extension base=\"base_requestType\"\
    >\n           <xs:sequence>\n             <xs:element name=\"prompt\" type=\"\
    promptType\"\n               minOccurs=\"0\"/>\n           </xs:sequence>\n  \
    \         <xs:attribute name=\"prompturl\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"promptencoding\" type=\"xs:string\"/>\n           <xs:attribute name=\"\
    offset\" type=\"xs:string\" default=\"0\"/>\n           <xs:attribute name=\"\
    barge\" type=\"yesnoType\" default=\"yes\"/>\n           <xs:attribute name=\"\
    cleardigits\" type=\"yesnoType\"\n             default=\"no\"/>\n           <xs:attribute\
    \ name=\"escapekey\" type=\"xs:string\" default=\"*\"/>\n           <xs:attribute\
    \ name=\"recurl\" type=\"xs:string\" use=\"required\"/>\n           <xs:attribute\
    \ name=\"mode\" default=\"overwrite\">\n             <xs:simpleType>\n       \
    \        <xs:restriction base=\"xs:NMTOKEN\">\n                 <xs:enumeration\
    \ value=\"append\"/>\n                 <xs:enumeration value=\"overwrite\"/>\n\
    \               </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"recencoding\" type=\"xs:string\"/>\n        \
    \   <xs:attribute name=\"initsilence\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"endsilence\" type=\"xs:string\"/>\n           <xs:attribute name=\"duration\"\
    \ type=\"xs:string\"/>\n           <xs:attribute name=\"beep\" type=\"yesnoType\"\
    \ default=\"yes\"/>\n           <xs:attribute name=\"recstopmask\" type=\"xs:string\"\
    \n             default=\"01234567890*#\"/>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"managecontentRequestType\"\
    >\n       <xs:complexContent>\n         <xs:extension base=\"base_requestType\"\
    >\n           <xs:attribute name=\"fetchtimeout\" type=\"xs:string\"\n       \
    \      default=\"10000\"/>\n           <xs:attribute name=\"mimetype\" type=\"\
    xs:string\"/>\n           <xs:attribute name=\"name\" type=\"xs:string\"/>\n \
    \          <xs:attribute name=\"httpmethod\">\n             <xs:simpleType>\n\
    \               <xs:restriction base=\"xs:NMTOKEN\">\n                 <xs:enumeration\
    \ value=\"put\"/>\n                 <xs:enumeration value=\"post\"/>\n       \
    \        </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"action\">\n             <xs:simpleType>\n   \
    \            <xs:restriction base=\"xs:NMTOKEN\">\n                 <xs:enumeration\
    \ value=\"move\"/>\n                 <xs:enumeration value=\"delete\"/>\n    \
    \           </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n\
    \           <xs:attribute name=\"dest\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"src\" type=\"xs:string\" use=\"required\"/>\n         </xs:extension>\n\
    \       </xs:complexContent>\n     </xs:complexType>\n     <xs:complexType name=\"\
    stopRequestType\">\n       <xs:complexContent>\n         <xs:extension base=\"\
    base_requestType\"/>\n       </xs:complexContent>\n     </xs:complexType>\n  \
    \   <xs:complexType name=\"faxRequestType\">\n       <xs:complexContent>\n   \
    \      <xs:extension base=\"base_requestType\">\n           <xs:sequence>\n  \
    \           <xs:element name=\"prompt\" type=\"promptType\" minOccurs=\"0\"/>\n\
    \           </xs:sequence>\n           <xs:attribute name=\"lclid\" type=\"xs:string\"\
    />\n           <xs:attribute name=\"prompturl\" type=\"xs:string\"/>\n       \
    \    <xs:attribute name=\"recurl\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"rmtid\" type=\"xs:string\"/>\n         </xs:extension>\n       </xs:complexContent>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"dtmfGrammarType\">\n    \
    \   <xs:choice>\n         <xs:element name=\"regex\" type=\"dtmfPatternType\"\n\
    \           maxOccurs=\"unbounded\"/>\n         <xs:element name=\"mgcpdigitmap\"\
    \ type=\"dtmfPatternType\"/>\n         <xs:element name=\"megacodigitmap\" type=\"\
    dtmfPatternType\"/>\n       </xs:choice>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"dtmfPatternType\">\n       <xs:attribute name=\"value\" type=\"xs:string\"\
    \ use=\"required\"/>\n       <xs:attribute name=\"name\" type=\"xs:string\"/>\n\
    \     </xs:complexType>\n     <!-- Definitions for base and concrete MSCML responses\
    \ -->\n     <!-- and embedded types. -->\n     <xs:complexType name=\"base_responseType\"\
    \ abstract=\"true\">\n       <xs:attribute name=\"request\" use=\"required\">\n\
    \         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n \
    \            <xs:enumeration value=\"configure_conference\"/>\n             <xs:enumeration\
    \ value=\"configure_leg\"/>\n             <xs:enumeration value=\"play\"/>\n \
    \            <xs:enumeration value=\"playcollect\"/>\n             <xs:enumeration\
    \ value=\"playrecord\"/>\n             <xs:enumeration value=\"managecontent\"\
    />\n             <xs:enumeration value=\"faxplay\"/>\n             <xs:enumeration\
    \ value=\"faxrecord\"/>\n             <xs:enumeration value=\"stop\"/>\n     \
    \      </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n\
    \       <xs:attribute name=\"id\" type=\"xs:string\"/>\n       <xs:attribute name=\"\
    code\" type=\"xs:string\" use=\"required\"/>\n       <xs:attribute name=\"text\"\
    \ type=\"xs:string\" use=\"required\"/>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"responseType\">\n       <xs:complexContent>\n         <xs:extension base=\"\
    base_responseType\">\n           <xs:sequence>\n             <xs:element name=\"\
    error_info\"\n               type=\"stoponerrorResponseType\" minOccurs=\"0\"\
    />\n             <xs:element name=\"team\" type=\"configure_teamResponseType\"\
    \n               minOccurs=\"0\"/>\n           </xs:sequence>\n           <xs:attribute\
    \ name=\"reason\" type=\"xs:string\"/>\n           <xs:attribute name=\"reclength\"\
    \ type=\"xs:string\"/>\n           <xs:attribute name=\"recduration\" type=\"\
    xs:string\"/>\n           <xs:attribute name=\"digits\" type=\"xs:string\"/>\n\
    \           <xs:attribute name=\"name\" type=\"xs:string\"/>\n           <xs:attribute\
    \ name=\"playduration\" type=\"xs:string\"/>\n           <xs:attribute name=\"\
    playoffset\" type=\"xs:string\"/>\n           <xs:attribute name=\"faxcode\" type=\"\
    xs:string\"/>\n           <xs:attribute name=\"pages_sent\" type=\"xs:string\"\
    />\n           <xs:attribute name=\"pages_recv\" type=\"xs:string\"/>\n      \
    \   </xs:extension>\n       </xs:complexContent>\n     </xs:complexType>\n   \
    \  <xs:complexType name=\"stoponerrorResponseType\">\n       <xs:attribute name=\"\
    code\" type=\"xs:string\" use=\"required\"/>\n       <xs:attribute name=\"text\"\
    \ type=\"xs:string\" use=\"required\"/>\n       <xs:attribute name=\"context\"\
    \ type=\"xs:string\" use=\"required\"/>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"configure_teamResponseType\">\n       <xs:sequence>\n         <xs:element\
    \ name=\"teammate\" type=\"teammateType\" minOccurs=\"0\"\n           maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n       <xs:attribute name=\"id\" type=\"\
    xs:string\" use=\"required\"/>\n       <xs:attribute name=\"numteam\" type=\"\
    xs:integer\" use=\"required\"/>\n     </xs:complexType>\n     <!-- Definitions\
    \ for MSCML event subscriptions and -->\n     <!-- embedded types -->\n     <xs:complexType\
    \ name=\"conference_eventsubscriptionType\">\n       <xs:sequence>\n         <xs:element\
    \ name=\"events\">\n           <xs:complexType>\n             <xs:sequence>\n\
    \               <xs:element name=\"activetalkers\"\n                 type=\"activetalkersSubscriptionType\"\
    />\n             </xs:sequence>\n           </xs:complexType>\n         </xs:element>\n\
    \       </xs:sequence>\n     </xs:complexType>\n     <xs:complexType name=\"activetalkersSubscriptionType\"\
    >\n       <xs:attribute name=\"report\" type=\"yesnoType\" use=\"required\"/>\n\
    \       <xs:attribute name=\"interval\" type=\"xs:string\" default=\"60s\"/>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"leg_eventsubscriptionType\"\
    >\n       <xs:sequence>\n         <xs:element name=\"events\">\n           <xs:complexType>\n\
    \             <xs:sequence>\n               <xs:element name=\"keypress\"\n  \
    \               type=\"keypressSubscriptionType\" minOccurs=\"0\"\n          \
    \         maxOccurs=\"1\"/>\n               <xs:element name=\"signal\" type=\"\
    signalSubscriptionType\"\n                 minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n             </xs:sequence>\n           </xs:complexType>\n         </xs:element>\n\
    \       </xs:sequence>\n     </xs:complexType>\n     <xs:complexType name=\"keypressSubscriptionType\"\
    >\n       <xs:attribute name=\"report\" use=\"required\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:NMTOKEN\">\n             <xs:enumeration\
    \ value=\"standard\"/>\n             <xs:enumeration value=\"long\"/>\n      \
    \       <xs:enumeration value=\"both\"/>\n             <xs:enumeration value=\"\
    none\"/>\n           </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n\
    \       <xs:attribute name=\"maskdigits\" type=\"yesnoType\" default=\"no\"/>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"signalSubscriptionType\"\
    >\n       <xs:attribute name=\"type\" type=\"xs:NMTOKEN\" use=\"required\"/>\n\
    \       <xs:attribute name=\"report\" type=\"yesnoType\" use=\"required\"/>\n\
    \     </xs:complexType>\n     <!-- Definitions for MSCML event notifications and\
    \ -->\n     <!-- embedded types. -->\n     <xs:complexType name=\"conferenceNotificationType\"\
    >\n       <xs:sequence>\n         <xs:element name=\"activetalkers\"\n       \
    \    type=\"activetalkersNotificationType\" minOccurs=\"0\"/>\n       </xs:sequence>\n\
    \       <xs:attribute name=\"uniqueid\" type=\"xs:string\" use=\"required\"/>\n\
    \       <xs:attribute name=\"numtalkers\" type=\"xs:string\"\n         use=\"\
    required\"/>\n     </xs:complexType>\n     <xs:complexType name=\"activetalkersNotificationType\"\
    >\n       <xs:sequence minOccurs=\"0\">\n         <xs:element name=\"talker\"\
    \ maxOccurs=\"unbounded\">\n           <xs:complexType>\n             <xs:attribute\
    \ name=\"callid\" type=\"xs:string\"\n              use=\"required\"/>\n     \
    \      </xs:complexType>\n         </xs:element>\n       </xs:sequence>\n    \
    \ </xs:complexType>\n     <xs:complexType name=\"keypressNotificationType\">\n\
    \       <xs:sequence>\n         <xs:element name=\"status\" type=\"statusType\"\
    />\n       </xs:sequence>\n       <xs:attribute name=\"digit\" type=\"DTMFkeyType\"\
    \ use=\"required\"/>\n       <xs:attribute name=\"length\" use=\"required\">\n\
    \         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n \
    \            <xs:enumeration value=\"standard\"/>\n             <xs:enumeration\
    \ value=\"long\"/>\n           </xs:restriction>\n         </xs:simpleType>\n\
    \       </xs:attribute>\n       <xs:attribute name=\"method\" use=\"required\"\
    >\n         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n\
    \             <xs:enumeration value=\"standard\"/>\n             <xs:enumeration\
    \ value=\"long\"/>\n             <xs:enumeration value=\"double\"/>\n        \
    \   </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n   \
    \    <xs:attribute name=\"interdigittime\" type=\"xs:string\"\n         use=\"\
    required\"/>\n     </xs:complexType>\n     <xs:complexType name=\"statusType\"\
    >\n       <xs:attribute name=\"command\" use=\"required\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n             <xs:enumeration\
    \ value=\"idle\"/>\n             <xs:enumeration value=\"play\"/>\n          \
    \   <xs:enumeration value=\"collect\"/>\n             <xs:enumeration value=\"\
    record\"/>\n           </xs:restriction>\n         </xs:simpleType>\n       </xs:attribute>\n\
    \       <xs:attribute name=\"duration\" type=\"xs:string\" use=\"required\"/>\n\
    \     </xs:complexType>\n     <xs:complexType name=\"signalNotificationType\"\
    >\n       <xs:attribute name=\"type\" use=\"required\" fixed=\"busy\"/>\n    \
    \ </xs:complexType>\n     <!-- Definitions for miscellaneous embedded, helper\
    \ data types -->\n     <xs:complexType name=\"promptType\">\n       <xs:choice\
    \ maxOccurs=\"unbounded\">\n         <xs:element name=\"audio\" type=\"promptcontentType\"\
    />\n         <xs:element name=\"variable\" type=\"spokenvariableType\"/>\n   \
    \    </xs:choice>\n       <xs:attribute name=\"locale\" type=\"xs:string\"/>\n\
    \       <xs:attribute name=\"baseurl\" type=\"xs:string\"/>\n       <xs:attribute\
    \ name=\"stoponerror\" type=\"yesnoType\" default=\"no\"/>\n       <xs:attribute\
    \ name=\"gain\" type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"\
    gaindelta\" type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"rate\"\
    \ type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"ratedelta\"\
    \ type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"repeat\" type=\"\
    xs:string\" default=\"1\"/>\n       <xs:attribute name=\"duration\" type=\"xs:string\"\
    \n         default=\"infinite\"/>\n       <xs:attribute name=\"offset\" type=\"\
    xs:string\" default=\"0\"/>\n       <xs:attribute name=\"delay\" type=\"xs:string\"\
    \ default=\"0\"/>\n     </xs:complexType>\n     <xs:complexType name=\"promptcontentType\"\
    >\n       <xs:attribute name=\"url\" type=\"xs:string\" use=\"required\"/>\n \
    \      <xs:attribute name=\"encoding\" type=\"xs:string\"/>\n       <xs:attribute\
    \ name=\"gain\" type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"\
    gaindelta\" type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"rate\"\
    \ type=\"xs:string\" default=\"0\"/>\n       <xs:attribute name=\"ratedelta\"\
    \ type=\"xs:string\" default=\"0\"/>\n     </xs:complexType>\n     <xs:complexType\
    \ name=\"spokenvariableType\">\n       <xs:attribute name=\"type\" use=\"required\"\
    >\n         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\">\n\
    \             <xs:enumeration value=\"dat\"/>\n             <xs:enumeration value=\"\
    dig\"/>\n             <xs:enumeration value=\"dur\"/>\n             <xs:enumeration\
    \ value=\"mth\"/>\n             <xs:enumeration value=\"mny\"/>\n            \
    \ <xs:enumeration value=\"num\"/>\n             <xs:enumeration value=\"sil\"\
    />\n             <xs:enumeration value=\"str\"/>\n             <xs:enumeration\
    \ value=\"tme\"/>\n             <xs:enumeration value=\"wkd\"/>\n           </xs:restriction>\n\
    \         </xs:simpleType>\n       </xs:attribute>\n       <xs:attribute name=\"\
    subtype\">\n         <xs:simpleType>\n           <xs:restriction base=\"xs:NMTOKEN\"\
    >\n             <xs:enumeration value=\"mdy\"/>\n             <xs:enumeration\
    \ value=\"dmy\"/>\n             <xs:enumeration value=\"ymd\"/>\n            \
    \ <xs:enumeration value=\"ndn\"/>\n             <xs:enumeration value=\"t12\"\
    />\n             <xs:enumeration value=\"t24\"/>\n             <xs:enumeration\
    \ value=\"USD\"/>\n             <xs:enumeration value=\"gen\"/>\n            \
    \ <xs:enumeration value=\"ndn\"/>\n             <xs:enumeration value=\"crd\"\
    />\n             <xs:enumeration value=\"ord\"/>\n           </xs:restriction>\n\
    \         </xs:simpleType>\n       </xs:attribute>\n       <xs:attribute name=\"\
    value\" type=\"xs:string\" use=\"required\"/>\n     </xs:complexType>\n     <xs:simpleType\
    \ name=\"yesnoType\">\n       <xs:restriction base=\"xs:NMTOKEN\">\n         <xs:enumeration\
    \ value=\"yes\"/>\n         <xs:enumeration value=\"no\"/>\n         <xs:enumeration\
    \ value=\"1\"/>\n         <xs:enumeration value=\"0\"/>\n         <xs:enumeration\
    \ value=\"true\"/>\n         <xs:enumeration value=\"false\"/>\n       </xs:restriction>\n\
    \     </xs:simpleType>\n     <xs:simpleType name=\"DTMFkeyType\">\n       <xs:restriction\
    \ base=\"xs:string\">\n         <xs:pattern value=\"[0-9]\"/>\n         <xs:pattern\
    \ value=\"[A-D]\"/>\n         <xs:pattern value=\"[a-d]\"/>\n         <xs:pattern\
    \ value=\"#\"/>\n         <xs:pattern value=\"\\*\"/>\n       </xs:restriction>\n\
    \     </xs:simpleType>\n     <xs:complexType name=\"gainType\">\n       <xs:choice>\n\
    \         <xs:element name=\"auto\" type=\"autogainType\"/>\n         <xs:element\
    \ name=\"fixed\" type=\"fixedgainType\"/>\n       </xs:choice>\n     </xs:complexType>\n\
    \     <xs:complexType name=\"autogainType\">\n       <xs:attribute name=\"startlevel\"\
    \ type=\"xs:string\"/>\n       <xs:attribute name=\"targetlevel\" type=\"xs:string\"\
    />\n       <xs:attribute name=\"silencethreshold\" type=\"xs:string\"/>\n    \
    \ </xs:complexType>\n     <xs:complexType name=\"fixedgainType\">\n       <xs:attribute\
    \ name=\"level\" type=\"xs:string\"/>\n     </xs:complexType>\n   </xs:schema>\n"
- title: 12.  IANA Considerations
  contents:
  - '12.  IANA Considerations

    '
- title: 12.1.  IANA Registration of MIME Media Type application/
  contents:
  - "12.1.  IANA Registration of MIME Media Type application/\n      mediaservercontrol+xml\n\
    \      MIME media type name: application\n      MIME subtype name: mediaservercontrol+xml\n\
    \      Required parameters: none\n      Optional parameters: charset\n      charset\
    \ This parameter has identical semantics to the charset\n         parameter of\
    \ the \"application/xml\" media type, as specified in\n         XML Media Types\
    \ [8].\n   Encoding considerations: See RFC 3023 [8].\n   Interoperability considerations:\
    \ See RFC 2023 [8] and RFC 4722.\n   Published specification: RFC 4722\n   Applications\
    \ that use this media type: Multimedia, enhanced\n      conferencing and interactive\
    \ applications.\n   Personal and email address for further\n      information:\
    \ eburger@cantata.com [31]\n   Intended usage: COMMON\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   Because media flows through a media server in\
    \ a conference, the media\n   server itself MUST protect the integrity, confidentiality,\
    \ and\n   security of the sessions.  It should not be possible for a conference\n\
    \   participant, on her own behalf, to be able to \"tap in\" to another\n   conference\
    \ without proper authorization.\n   Because conferencing is a high-value application,\
    \ the media server\n   SHOULD implement appropriate security measures.  This includes,\
    \ but\n   is not limited to, access lists for application servers.  That is,\n\
    \   the media server only allows a select list of application or proxy\n   servers\
    \ to create conferences, to invite participants to sessions,\n   etc.  Note that\
    \ the mechanisms for such security, like private\n   networks, shared certificates,\
    \ MAC white/black lists, are beyond the\n   scope of this document.\n   Security\
    \ concerns are one important reason MSCML limits requests with\n   conference\
    \ scope to a separate control leg per conference.  MSCML\n   uses the simple,\
    \ proven, Internet-scale security model of SIP to\n   determine if a client is\
    \ who they say they are (authentication) and\n   if they are allowed to create\
    \ and manipulate a conference.  However,\n   the security model to enable a control\
    \ leg to manipulate arbitrary\n   conferences on the media server is extremely\
    \ difficult.  Not only\n   would one need to authenticate and authorize the basic\
    \ conference\n   primitives, but privacy considerations require policies for one\n\
    \   client to access another client's conferences, even if the two\n   clients\
    \ are on the same host.  For example, if the media server\n   allowed any control\
    \ leg to control any conference, an authorized but\n   unrelated client could\
    \ maliciously attach itself to an existing\n   session and record or tap the conversation\
    \ without the participant's\n   knowledge or consent.\n   Participants give implicit\
    \ authorization to their applications by\n   virtue of the INVITE to the application.\
    \  However, there is no trust,\n   explicit or implicit, between the users of\
    \ one service and a distinct\n   client of another service.\n   All MSCML messages\
    \ are sent within an INVITE-created SIP dialog.  As\n   a result, it would be\
    \ difficult for an entity other than the original\n   requestor to interfere with\
    \ an established MSCML session, as this\n   would require detailed information\
    \ on the dialog state.  This allows\n   multiple applications to utilize the resources\
    \ of a single media\n   server simultaneously without interfering with one another.\n\
    \   Because of the sensitive nature of collected data, such as credit\n   card\
    \ numbers or other identifying information, the media server MUST\n   support\
    \ sips: and TLS.  Clients, who presumably know the value of the\n   information\
    \ they collect, as well as the privacy expectations of\n   their users, are free\
    \ to use clear text signaling or encrypted secure\n   signaling, depending on\
    \ the application's needs.  Likewise, the media\n   server SHOULD support Secure\
    \ Realtime Transport Protocol (SRTP) [9].\n   Again, the clients are free to negotiate\
    \ the appropriate level of\n   media security.\n   The media management facilities\
    \ of MSCML, such as the <managecontent>\n   (Section 8) request, assume a trust\
    \ relationship between the media\n   server and file server.  This scenario is\
    \ similar to the one\n   addressed by URLAUTH [20].  Namely, the media server\
    \ is acting on\n   behalf of a given user, yet the media server does not have\n\
    \   credentials for that user.  One might be tempted to use the user:pass\n  \
    \ facility of the HTTP URI to offer per-user security, but that also\n   requires\
    \ that the media server be secure, as the media server would\n   need to know\
    \ the user credentials in a form that is easily\n   compromised (clear text passwords).\n\
    \   The IETF is investigating methods for providing per-user or per-\n   instance\
    \ authorization of third-party http writing, as is needed for\n   other protocols\
    \ as well, such as WEBDAV [21].  However, until that\n   work is completed, media\
    \ server implementations MUST be prepared to\n   authenticate themselves to file\
    \ and web servers using appropriate\n   authentication means.  At a minimum, the\
    \ media server MUST support\n   HTTPS basic authentication.  Implementers should\
    \ note that the media\n   server will need to respond appropriately to whatever\
    \ authentication\n   mechanism the file server requires.\n   As this is an XML\
    \ markup, all the security considerations of RFC 3023\n   [8] apply.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Burger, E., Van Dyke, J., and A. Spitzer, \"Basic Network Media\n  \
    \       Services with SIP\", RFC 4240, December 2005.\n   [3]   Donovan, S., \"\
    The SIP INFO Method\", RFC 2976, October 2000.\n   [4]   Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley,\
    \ M., and E. Schooler, \"SIP:\n         Session Initiation Protocol\", RFC 3261,\
    \ June 2002.\n   [5]   \"Network call signalling protocol for the delivery of\
    \ time-\n         critical services over cable television networks using cable\n\
    \         modems\", ITU-T J.162, March 2001.\n   [6]   Groves, C., Pantaleo, M.,\
    \ Anderson, T., and T. Taylor, \"Gateway\n         Control Protocol Version 1\"\
    , RFC 3525, June 2003.\n   [7]   Thompson, H., Beech, D., Maloney, M., and N.\
    \ Mendelsohn, \"XML\n         Schema Part 1: Structures\", W3C REC REC-xmlschema-1-20010502,\n\
    \         May 2001.\n   [8]   Murata, M., St. Laurent, S., and D. Kohn, \"XML\
    \ Media Types\",\n         RFC 3023, January 2001.\n   [9]   Baugher, M., McGrew,\
    \ D., Naslund, M., Carrara, E., and K.\n         Norrman, \"The Secure Real-time\
    \ Transport Protocol (SRTP)\", RFC\n         3711, March 2004.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [10]  Rosenberg, J., \"A Framework for Conferencing\
    \ with the Session\n         Initiation Protocol (SIP)\", RFC 4353, February 2006.\n\
    \   [11]  Carter, J., Danielsen, P., Hunt, A., Ferrans, J., Lucas, B.,\n     \
    \    Porter, B., Rehor, K., Tryphonas, S., McGlashan, S., and D.\n         Burnett,\
    \ \"Voice Extensible Markup Language (VoiceXML) Version\n         2.0\", W3C REC\
    \ REC-voicexml20-20040316, March 2004.\n   [12]  International Packet Communications\
    \ Consortium, \"IPCC Reference\n         Architecture V2\", June 2002.\n   [13]\
    \  European Telecommunications Standards Institute, \"Digital\n         cellular\
    \ telecommunications system (Phase 2+); Universal Mobile\n         Telecommunications\
    \ System (UMTS); IP Multimedia Subsystem\n         (IMS); Stage 2 (3GPP TS 23.228\
    \ version 7.2.0 Release 7)\",\n         December 2005.\n   [14]  Hollenbeck, S.,\
    \ Rose, M., and L. Masinter, \"Guidelines for the\n         Use of Extensible\
    \ Markup Language (XML) within IETF Protocols\",\n         BCP 70, RFC 3470, January\
    \ 2003.\n   [15]  Jacobs, I., Lie, H., Bos, B., and C. Lilley, \"Cascading Style\n\
    \         Sheets, level 2 (CSS2) Specification\", W3C REC REC-CSS2-\n        \
    \ 19980512, May 1998.\n   [16]  Rosenberg, J., Schulzrinne, H., and O. Levin,\
    \ \"A Session\n         Initiation Protocol (SIP) Event Package for Conference\
    \ State\",\n         RFC 4575, August 2006.\n   [17]  Cable Television Laboratories,\
    \ Inc., \"Audio Server Protocol\",\n         January 2005.\n   [18]  \"Procedures\
    \ for document facsimile transmission in the general\n         switched telephone\
    \ network\", Recommendation T.30, April 1999.\n   [19]  \"Procedures for real-time\
    \ Group 3 facsimile communication over\n         IP networks\", Recommendation\
    \ T.38, March 2002.\n   [20]  Crispin, M., \"Internet Message Access Protocol\
    \ (IMAP) - URLAUTH\n         Extension\", RFC 4467, May 2006.\n   [21]  Goland,\
    \ Y., Whitehead, E., Faizi, A., Carter, S., and D.\n         Jensen, \"HTTP Extensions\
    \ for Distributed Authoring -- WEBDAV\",\n         RFC 2518, February 1999.\n\
    \   [22]  Institute of Electrical and Electronics Engineers, \"Information\n \
    \        Technology - Portable Operating System Interface (POSIX) - Part\n   \
    \      1: Base Definitions, Chapter 9\", IEEE Standard 1003.1, June\n        \
    \ 2001.\n   [23]  Burger, E. and M. Dolly, \"A Session Initiation Protocol (SIP)\n\
    \         Event Package for Key Press Stimulus (KPML)\", RFC 4730,\n         November\
    \ 2006.\n   [24]  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821, April\n\
    \         2001.\n   [25]  Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed.,\
    \ \"The\n         Message Session Relay Protocol\", Work in Progress, June 2006.\n"
- title: URIs
  contents:
  - "URIs\n   [26]  <http://www.ietf.org/html.charters/sip-charter.html>\n   [27]\
    \  <http://www.ietf.org/html.charters/sipping-charter.html>\n   [28]  <http://www.ietf.org/html.charters/mmusic.html>\n\
    \   [29]  <http://www.ietf.org/html.charters/xcon-charter.html>\n   [30]  <http://www.3gpp.org/ftp/Specs/html-info/23228.htm>\n\
    \   [31]  <mailto:eburger@cantata.com>\n"
- title: Appendix A.  Regex Grammar Syntax
  contents:
  - "Appendix A.  Regex Grammar Syntax\n   The regular expression syntax used in MSCML\
    \ is a telephony-oriented\n   subset of POSIX Extended Regular Expressions (ERE)\
    \ [22] termed Digit\n   REGular EXpression (DRegex).  This syntax was first described\
    \ in KPML\n   [23].\n   DRegex includes ordinary characters, special characters,\
    \ bracket\n   expressions, and interval expressions.  These entities are defined\
    \ in\n   the list below.\n   character matches digits 0-9, *, #, and A-D (case\
    \ insensitive)\n   *  matches the * character\n   #  matches the # character\n\
    \   [character selector] matches any character in selector\n   [range1-range2]\
    \ matches any character in range from range1 to range2,\n      inclusive\n   x\
    \  matches any digit 0-9\n   {m} matches m repetitions of the previous pattern\n\
    \   {m,} matches m or more repetitions of the previous pattern\n   {,n} matches\
    \ at most n (including zero) repetitions of the previous\n      pattern\n   {m,n}\
    \ at least m and at most n repetitions of the previous pattern\n   L  the presence\
    \ of 'L' in any regex expression causes the media\n      server to enable \"long\"\
    \ digit detection mode.  See Section 7.1 for\n      the definition of \"long\"\
    \ digits.\n   Table 7 illustrates DRegex usage through examples.\n       +--------------+--------------------------------------------+\n\
    \       | Example      | Description                                |\n      \
    \ +--------------+--------------------------------------------+\n       | 1  \
    \          | Matches the digit 1                        |\n       | [179]    \
    \    | Matches 1, 7, or 9                         |\n       | [2-9]        | Matches\
    \ 2, 3, 4, 5, 6, 7, 8, 9             |\n       | [02-46-9A-D] | Matches 0, 2,\
    \ 3, 4, 6, 7, 8, 9, A, B, C, D |\n       | x            | Matches 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9       |\n       | *6[179#]     | Matches *61, *67, *69, or\
    \ *6#              |\n       | x{10}        | Ten digits (0-9)               \
    \            |\n       | 011x{7,15}   | 011 followed by seven to fifteen digits\
    \    |\n       | L*           | Long star                                  |\n\
    \       +--------------+--------------------------------------------+\n      \
    \                   Table 7: DRegex Examples\n"
- title: Appendix B.  Contributors
  contents:
  - "Appendix B.  Contributors\n   Jeff Van Dyke and Andy Spitzer did the concept,\
    \ development,\n   documentation, and execution for MSCML at SnowShore Networks,\
    \ Inc.,\n   which is now part of Cantata Technology, Inc.  Andy Spitzer's\n  \
    \ original work at The Telephone Connection, Inc., influenced the IVR\n   implementation.\
    \  Mary Ann Leekley implemented the personalized mix\n   feature and several other\
    \ enhancements.\n   Cliff Schornak of Commetrex and Jeff Van Dyke developed the\
    \ facsimile\n   service.\n   Jai Cauvet, Rolando Herrero, Srinivas Motamarri,\
    \ and Ashish Patel\n   contributed greatly by testing MSCML.\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   The following individuals provided valuable\
    \ assistance in the\n   direction, development, or debugging of MSCML:\n   o \
    \ Brian Badger and Phil Crable from Verizon Business\n   o  Stephane Bastien from\
    \ BroadSoft\n   o  Peter Danielsen of Lucent Technologies\n   o  Kevin Flemming,\
    \ formerly of SnowShore Networks, Inc.\n   o  Wesley Hicks and Ravindra Kabre,\
    \ formerly from Sonus Networks\n   o  Jon Hinckley from SkyWave/Sestro\n   o \
    \ Terence Lobo, formerly of SnowShore Networks, Inc.\n   o  Kunal Nawale, formerly\
    \ of SnowShore Networks, Inc.\n   o  Edwina Nowicki, formerly of SnowShore Networks,\
    \ Inc.\n   o  Diana Rawlins and Sharadha Vijay, formerly of WorldCom\n   o  Gaurav\
    \ Srivastva and Subhash Verma from BayPackets\n   o  Kevin Summers from Sonus\
    \ Networks\n   o  Tim Wong from at&t\n   The authors would like to thank Cullen\
    \ Jennings and Dan Wing from\n   Cisco Systems for their helpful review comments.\n\
    \   The authors would also like to thank Scotty Farber for applying her\n   technical\
    \ writing expertise to the documentation of MSCML.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeff Van Dyke\n   Cantata Technology, Inc.\n   18 Keewaydin\
    \ Dr.\n   Salem, NH  03079\n   USA\n   EMail: jvandyke@cantata.com\n   Eric Burger\
    \ (editor)\n   Cantata Technology, Inc.\n   18 Keewaydin Dr.\n   Salem, NH  03079\n\
    \   USA\n   EMail: eburger@cantata.com\n   Andy Spitzer\n   Pingtel Corporation\n\
    \   400 West Cummings Park\n   Woburn, MA  01801\n   USA\n   EMail: woof@pingtel.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at www.rfc-editor.org/copyright.html, and\n   except as set forth therein,\
    \ the authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE\
    \ IETF TRUST,\n   AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n\
    \   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE\
    \ USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED\
    \ WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
