- contents:
  - '         System for Cross-domain Identity Management: Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The System for Cross-domain Identity Management (SCIM) specification\n
    \  is an HTTP-based protocol that makes managing identities in multi-\n   domain
    scenarios easier to support via a standardized service.\n   Examples include,
    but are not limited to, enterprise-to-cloud service\n   providers and inter-cloud
    scenarios.  The specification suite seeks\n   to build upon experience with existing
    schemas and deployments,\n   placing specific emphasis on simplicity of development
    and\n   integration, while applying existing authentication, authorization,\n
    \  and privacy models.  SCIM's intent is to reduce the cost and\n   complexity
    of user management operations by providing a common user\n   schema, an extension
    model, and a service protocol defined by this\n   document.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7644.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction and Overview .......................................3\n
    \     1.1. Intended Audience ..........................................3\n      1.2.
    Notational Conventions .....................................4\n      1.3. Definitions
    ................................................4\n   2. Authentication and Authorization
    ................................5\n      2.1. Use of Tokens as Authorizations
    ............................7\n      2.2. Anonymous Requests .........................................7\n
    \  3. SCIM Protocol ...................................................8\n      3.1.
    Background .................................................8\n      3.2. SCIM
    Endpoints and HTTP Methods ............................9\n      3.3. Creating
    Resources ........................................11\n           3.3.1. Resource
    Types .....................................13\n      3.4. Retrieving Resources
    ......................................13\n           3.4.1. Retrieving a Known
    Resource ........................14\n           3.4.2. Query Resources ....................................15\n
    \          3.4.3. Querying Resources Using HTTP POST .................27\n      3.5.
    Modifying Resources .......................................29\n           3.5.1.
    Replacing with PUT .................................30\n           3.5.2. Modifying
    with PATCH ...............................32\n      3.6. Deleting Resources ........................................48\n
    \     3.7. Bulk Operations ...........................................49\n           3.7.1.
    Circular Reference Processing ......................51\n           3.7.2. \"bulkId\"
    Temporary Identifiers .....................53\n           3.7.3. Response and
    Error Handling ........................58\n           3.7.4. Maximum Operations
    .................................63\n      3.8. Data Input/Output Formats .................................64\n
    \     3.9. Additional Operation Response Parameters ..................64\n      3.10.
    Attribute Notation .......................................66\n      3.11. \"/Me\"
    Authenticated Subject Alias ........................66\n      3.12. HTTP Status
    and Error Response Handling ..................67\n      3.13. SCIM Protocol Versioning
    .................................71\n      3.14. Versioning Resources .....................................71\n
    \  4. Service Provider Configuration Endpoints .......................73\n   5.
    Preparation and Comparison of Internationalized Strings ........76\n   6. Multi-Tenancy
    ..................................................76\n      6.1. Associating Clients
    to Tenants ............................77\n      6.2. SCIM Identifiers with Multiple
    Tenants ....................78\n   7. Security Considerations ........................................78\n
    \     7.1. HTTP Considerations .......................................78\n      7.2.
    TLS Support Considerations ................................78\n      7.3. Authorization
    Token Considerations ........................78\n      7.4. Bearer Token and Cookie
    Considerations ....................79\n      7.5. Privacy Considerations ....................................79\n
    \          7.5.1. Personal Information ...............................79\n           7.5.2.
    Disclosure of Sensitive Information in URIs ........80\n      7.6. Anonymous Requests
    ........................................80\n      7.7. Secure Storage and Handling
    of Sensitive Data .............81\n      7.8. Case-Insensitive Comparison and
    International Languages ...82\n   8. IANA Considerations ............................................82\n
    \     8.1. Media Type Registration ...................................82\n      8.2.
    Registering URIs for SCIM Messages ........................84\n   9. References
    .....................................................85\n      9.1. Normative
    References ......................................85\n      9.2. Informative References
    ....................................87\n   Acknowledgements ..................................................88\n
    \  Contributors ......................................................88\n   Authors'
    Addresses ................................................89\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Overview\n   The SCIM protocol is an application-level HTTP-based
    protocol for\n   provisioning and managing identity data on the web and in\n   cross-domain
    environments such as enterprise-to-cloud service\n   providers or inter-cloud
    scenarios.  The protocol supports creation,\n   modification, retrieval, and discovery
    of core identity resources\n   such as Users and Groups, as well as custom resources
    and resource\n   extensions.\n   The definition of resources, attributes, and
    overall schema are\n   defined in the SCIM Core Schema document [RFC7643].\n"
  - contents:
    - "1.1.  Intended Audience\n   This document is intended to serve as a guide to
      SCIM protocol usage\n   for both SCIM HTTP service providers and HTTP clients
      who may\n   provision information to service providers or retrieve information\n
      \  from them.\n"
    title: 1.1.  Intended Audience
  - contents:
    - "1.2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].  These key\n   words are capitalized when used to unambiguously specify
      requirements\n   of the protocol or application features and behavior that affect
      the\n   interoperability and security of implementations.  When these words\n
      \  are not capitalized, they are meant in their natural-language sense.\n   For
      purposes of readability, examples are not URL encoded.\n   Implementers MUST
      percent-encode URLs as described in Section 2.1 of\n   [RFC3986].\n   Throughout
      this document, figures may contain spaces and extra line\n   wrapping to improve
      readability and accommodate space limitations.\n   Similarly, some URIs contained
      within examples have been shortened\n   for space and readability reasons (as
      indicated by \"...\").\n"
    title: 1.2.  Notational Conventions
  - contents:
    - "1.3.  Definitions\n   This specification uses the definitions from [RFC7643]
      and defines\n   the following additional term:\n   Base URI\n      The SCIM
      HTTP protocol is described in terms of a path relative to\n      a Base URI.
      \ The Base URI MUST NOT contain a query string, as\n      clients MAY append
      additional path information and query\n      parameters as part of forming the
      request.  The base URI is a URL\n      that most often consists of the \"https\"
      protocol scheme, a domain\n      name, and some initial path [RFC3986].  For
      example:\n      \"https://example.com/scim/\"\n   For readability, all examples
      in this document assume that the SCIM\n   service root and the server root are
      the same (no path prefix).  It\n   is expected that SCIM servers may be deployed
      using any URI path\n   prefix.  For example, a SCIM server might have a prefix
      of\n   \"https://example.com/\" or \"https://example.com/scim/tenancypath/\".\n
      \  Additionally, a client MAY apply a version number to the server root\n   prefix
      (see Section 3.13).\n"
    title: 1.3.  Definitions
  title: 1.  Introduction and Overview
- contents:
  - "2.  Authentication and Authorization\n   The SCIM protocol is based upon HTTP
    and does not itself define a\n   SCIM-specific scheme for authentication and authorization.
    \ SCIM\n   depends on the use of Transport Layer Security (TLS) and/or standard\n
    \  HTTP authentication and authorization schemes as per [RFC7235].  For\n   example,
    the following methodologies could be used, among others:\n   TLS Client Authentication\n
    \     The SCIM service provider MAY request TLS client authentication\n      (also
    known as mutual authentication).  See Section 7.3 of\n      [RFC5246].\n   HOBA
    Authentication\n      HTTP Origin-Bound Authentication (HOBA) is a variation on
    TLS\n      client authentication and uses a digital-signature-based design\n      for
    an HTTP authentication method (see [RFC7486]).  The design can\n      also be
    used in JavaScript-based authentication embedded in HTML.\n      HOBA is an alternative
    to HTTP authentication schemes that require\n      passwords and therefore avoids
    all problems related to passwords,\n      such as leakage of server-side password
    databases.\n   Bearer Tokens\n      Bearer tokens [RFC6750] MAY be used when combined
    with TLS and a\n      token framework such as OAuth 2.0 [RFC6749].  Tokens that
    are\n      issued based on weak or no authentication of authorizing users\n      and/or
    OAuth clients SHOULD NOT be used, unless, for example, they\n      are being used
    as single-use tokens to permit one-time requests\n      such as anonymous registration
    (see Section 3.3).  For security\n      considerations regarding the use of bearer
    tokens in SCIM, see\n      Section 7.4.  While bearer tokens most often represent
    an\n      authorization, it is assumed that the authorization was based upon\n
    \     a successful authentication of the SCIM client.  Accordingly, the\n      SCIM
    service provider must have a method for validating, parsing,\n      and/or \"introspecting\"
    the bearer token for the relevant\n      authentication and authorization information.
    \ The method for this\n      is assumed to be defined by the token-issuing system
    and is beyond\n      the scope of this specification.\n   PoP Tokens\n      A
    proof-of-possession (PoP) token demonstrates that the presenter\n      of the
    token possesses a particular key and that the recipient can\n      cryptographically
    confirm proof of possession of the key by the\n      presenter.  This property
    is sometimes also described as the\n      presenter being a holder of the key.
    \ See [OAuth-PoP-Arch] for an\n      example of such a token and its use.\n   Cookies\n
    \     JavaScript clients MAY assert HTTP cookies over TLS that contain\n      an
    authentication state that is understood by the SCIM service\n      provider (see
    [RFC6265]).  An example of this is scenarios where\n      web-form authentication
    has taken place with the user and HTTP\n      cookies were set representing the
    authentication state.  For the\n      purposes of SCIM, the security considerations
    in Section 7.4\n      apply.\n   Basic Authentication\n      Usage of basic authentication
    should be avoided, due to its use of\n      a single factor that is based upon
    a relatively static, symmetric\n      secret.  Implementers SHOULD combine the
    use of basic\n      authentication with other factors.  The security considerations
    of\n      HTTP Basic are well documented in [HTTP-BASIC-AUTH]; therefore,\n      implementers
    are encouraged to use stronger authentication\n      methods.  Designating the
    specific methods of authentication and\n      authorization is out of scope for
    SCIM; however, this information\n      is provided as a resource to implementers.\n
    \  As per Section 4.1 of [RFC7235], a SCIM service provider SHALL\n   indicate
    supported HTTP authentication schemes via the\n   \"WWW-Authenticate\" header.\n
    \  Regardless of methodology, the SCIM service provider MUST be able to\n   map
    the authenticated client to an access control policy in order to\n   determine
    the client's authorization to retrieve and update SCIM\n   resources.  For example,
    while a browser session may have been\n   established via HTTP cookie or TLS client
    authentication, the unique\n   client MUST be mapped to a security subject (e.g.,
    User).  The\n   authorization model and the process by which this is done are
    beyond\n   the scope of this specification.\n   When processing requests, the
    service provider SHOULD consider the\n   subject performing the request and whether
    or not the action is\n   appropriate given the subject and the resource affected
    by the\n   request.  The subject performing the request is usually determined\n
    \  directly or indirectly from the \"Authorization\" header present in the\n   request.
    \ For example, a subject MAY be permitted to retrieve and\n   update their own
    \"User\" resource but will normally have restricted\n   ability to access resources
    associated with other Users.  In other\n   cases, the SCIM service provider might
    only grant access to a\n   subject's own associated \"User\" resource (e.g., for
    the purpose of\n   updating personal contact attributes).\n   For illustrative
    purposes only, SCIM protocol examples show an\n   OAuth 2.0 bearer token value
    [RFC6750] in the authorization\n   header, e.g.,\n   GET /Users/2819c223-7f76-453a-919d-413861904646
    HTTP/1.1\n   Host: example.com\n   Authorization: Bearer h480djs93hd8\n   This
    is not intended to imply that bearer tokens are preferred.\n   However, the use
    of bearer tokens in the specification does reflect\n   common implementation practice.\n"
  - contents:
    - "2.1.  Use of Tokens as Authorizations\n   When using bearer tokens or PoP tokens
      that represent an\n   authorization grant, such as a grant issued by OAuth (see
      [RFC6749]),\n   implementers SHOULD consider the type of authorization granted,
      any\n   authorized scopes (see Section 3.3 of [RFC6749]), and the security\n
      \  subject(s) that SHOULD be mapped from the authorization when\n   considering
      local access control rules.  Section 6 of [RFC7521]\n   documents common scenarios
      for authorization, including:\n   o  A client using an assertion to authenticate
      and/or act on behalf\n      of itself,\n   o  A client acting on behalf of a
      user, and\n   o  A client acting on behalf of an anonymous user (for example,
      see\n      Section 2.2).\n   When using OAuth authorization tokens, implementers
      MUST take into\n   account the threats and countermeasures related to the use
      of client\n   authorizations, as documented in Section 8 of [RFC7521].  When
      using\n   other token formats or frameworks, implementers MUST take into\n   account
      similar threats and countermeasures, especially those\n   documented by the
      relevant specifications.\n"
    title: 2.1.  Use of Tokens as Authorizations
  - contents:
    - "2.2.  Anonymous Requests\n   In some SCIM deployments, it MAY be acceptable
      to permit\n   unauthenticated (anonymous) requests -- for example, a user\n
      \  self-registration request where the service provider chooses to\n   accept
      a SCIM Create request (see Section 3.3) from an anonymous\n   client.  See Section
      7.6 for security considerations regarding\n   anonymous requests.\n"
    title: 2.2.  Anonymous Requests
  title: 2.  Authentication and Authorization
- contents:
  - '3.  SCIM Protocol

    '
  - contents:
    - "3.1.  Background\n   SCIM is a protocol that is based on HTTP [RFC7230].  Along
      with HTTP\n   headers and URIs, SCIM uses JSON [RFC7159] payloads to convey
      SCIM\n   resources, as well as protocol-specific payload messages that convey\n
      \  request parameters and response information such as errors.  Both\n   resources
      and messages are passed in the form of JSON-based\n   structures in the message
      body of an HTTP request or response.  To\n   identify this content, SCIM uses
      a media type of\n   \"application/scim+json\" (see Section 8.1).\n   A SCIM
      \"resource\" is a JSON object [RFC7159] that may be created,\n   maintained,
      and retrieved via HTTP request methods as described in\n   this document.  Each
      JSON resource representation contains a\n   \"schemas\" attribute that contains
      a list of one or more URIs that\n   indicate included SCIM schemas that are
      used to indicate the\n   attributes contained within a resource.  Specific information
      about\n   what attributes are defined within a schema MAY be obtained by\n   querying
      a SCIM service provider's \"/Schemas\" endpoint for a schema\n   definition
      (see Section 8.7 of [RFC7643]).  Responses from this\n   endpoint describe the
      schema supported by a service provider,\n   including attribute characteristics
      such as cardinality,\n   case-exactness, mutability, uniqueness, returnability,
      and whether or\n   not attributes are required.  While SCIM schemas and an associated\n
      \  extension model are defined in [RFC7643], SCIM clients should expect\n   that
      some attribute schema may change from service provider to\n   service provider,
      particularly across administrative domains.  In\n   cases where SCIM may be
      used as an open protocol in front of an\n   application service, it is quite
      reasonable to expect that some\n   service providers may only support a subset
      of the schema defined in\n   [RFC7643].\n   A SCIM message conveys protocol
      parameters related to a SCIM request\n   or response; this specification defines
      these parameters.  As with a\n   SCIM resource, a SCIM message is a JSON object
      [RFC7159] that\n   contains a \"schemas\" attribute with a URI whose namespace
      prefix MUST\n   begin with \"urn:ietf:params:scim:api:\".  As SCIM protocol
      messages\n   are fixed and defined by SCIM specifications and registered\n   extensions,
      SCIM message schemas using the above prefix URN SHALL NOT\n   be discoverable
      using the \"/Schemas\" endpoint.\n   As SCIM is intended for use in cross-domain
      scenarios where schema\n   and implementations may vary, techniques such as
      document validation\n   (e.g., [XML-Schema]) are not recommended.  A SCIM service
      provider\n   interprets a request in the context of its own schema (which may
      be\n   different from the client's schema) and following the defined\n   processing
      rules for each request.  The sections that follow define\n   the processing
      rules for SCIM and provide allowances for schema\n   differences where appropriate.
      \ For example, in a SCIM PUT request,\n   \"readOnly\" attributes are ignored,
      while \"readWrite\" attributes are\n   updated.  There is no need for a SCIM
      client to discover which\n   attributes are \"readOnly\", and the client does
      not need to remove\n   them from a PUT request in order to be accepted.  Similarly,
      a SCIM\n   client SHOULD NOT expect a service provider to return SCIM resources\n
      \  with exactly the same schema and values as submitted.  SCIM responses\n   SHALL
      reflect resource state as interpreted by the SCIM service\n   provider.\n"
    title: 3.1.  Background
  - contents:
    - "3.2.  SCIM Endpoints and HTTP Methods\n   The SCIM protocol specifies well-known
      endpoints and HTTP methods for\n   managing resources defined in the SCIM Core
      Schema document\n   ([RFC7643]); i.e., \"User\" and \"Group\" resources correspond
      to\n   \"/Users\" and \"/Groups\", respectively.  Service providers that support\n
      \  extended resources SHOULD define resource endpoints using the\n   convention
      of pluralizing the resource name defined in the extended\n   schema, by appending
      an 's'.  Given that there are cases where\n   resource pluralization is ambiguous,
      e.g., a resource named \"Person\"\n   is legitimately \"Persons\" and \"People\",
      clients SHOULD discover\n   resource endpoints via the \"/ResourceTypes\" endpoint.\n
      \  HTTP   SCIM Usage\n   Method\n   ------ --------------------------------------------------------------\n
      \  GET    Retrieves one or more complete or partial resources.\n   POST   Depending
      on the endpoint, creates new resources, creates a\n          search request,
      or MAY be used to bulk-modify resources.\n   PUT    Modifies a resource by replacing
      existing attributes with a\n          specified set of replacement attributes
      (replace).  PUT\n          MUST NOT be used to create new resources.\n   PATCH
      \ Modifies a resource with a set of client-specified changes\n          (partial
      update).\n   DELETE Deletes a resource.\n                        Table 1: SCIM
      HTTP Methods\n   Resource Endpoint         Operations             Description\n
      \  -------- ---------------- ---------------------- --------------------\n   User
      \    /Users           GET (Section 3.4.1),   Retrieve, add,\n                             POST
      (Section 3.3),    modify Users.\n                             PUT (Section 3.5.1),\n
      \                            PATCH (Section 3.5.2),\n                             DELETE
      (Section 3.6)\n   Group    /Groups          GET (Section 3.4.1),   Retrieve,
      add,\n                             POST (Section 3.3),    modify Groups.\n                             PUT
      (Section 3.5.1),\n                             PATCH (Section 3.5.2),\n                             DELETE
      (Section 3.6)\n   Self     /Me              GET, POST, PUT, PATCH, Alias for
      operations\n                             DELETE (Section 3.11)  against a resource\n
      \                                                   mapped to an\n                                                    authenticated\n
      \                                                   subject (e.g.,\n                                                    User).\n
      \  Service  /ServiceProvider GET (Section 4)        Retrieve service\n   provider
      Config                                  provider's\n   config.                                          configuration.\n
      \  Resource /ResourceTypes   GET (Section 4)        Retrieve supported\n   type
      \                                            resource types.\n   Schema   /Schemas
      \        GET (Section 4)        Retrieve one or more\n                                                    supported
      schemas.\n   Bulk     /Bulk            POST (Section 3.7)     Bulk updates to
      one\n                                                    or more resources.\n
      \  Search   [prefix]/.search POST (Section 3.4.3)   Search from system\n                                                    root
      or within a\n                                                    resource endpoint\n
      \                                                   for one or more\n                                                    resource
      types using\n                                                    POST.\n                        Table
      2: Defined Endpoints\n   All requests to the service provider are made via HTTP
      methods as per\n   Section 4.3 of [RFC7231] on a URL derived from the Base URL.\n
      \  Responses are returned in the body of the HTTP response, formatted as\n   JSON.
      \ Error status codes SHOULD be transmitted via the HTTP status\n   code of the
      response (if possible) and SHOULD also be specified in\n   the body of the response
      (see Section 3.12).\n"
    title: 3.2.  SCIM Endpoints and HTTP Methods
  - contents:
    - "3.3.  Creating Resources\n   To create new resources, clients send HTTP POST
      requests to the\n   resource endpoint, such as \"/Users\" or \"/Groups\", as
      defined by the\n   associated resource type endpoint discovery (see Section
      4).\n   The server SHALL process attributes according to the following\n   mutability
      rules:\n   o  In the request body, attributes whose mutability is \"readOnly\"\n
      \     (see Sections 2.2 and 7 of [RFC7643]) SHALL be ignored.\n   o  Attributes
      whose mutability is \"readWrite\" (see Section 2.2 of\n      [RFC7643]) and
      that are omitted from the request body MAY be\n      assumed to be not asserted
      by the client.  The service provider\n      MAY assign a default value to non-asserted
      attributes in the final\n      resource representation.\n   o  Service providers
      MAY take into account whether or not a client\n      has access to all of the
      resource's attributes when deciding\n      whether or not non-asserted attributes
      should be defaulted.\n   o  Clients that intend to override existing or server-defaulted\n
      \     values for attributes MAY specify \"null\" for a single-valued\n      attribute
      or an empty array \"[]\" for a multi-valued attribute to\n      clear all values.\n
      \  When the service provider successfully creates the new resource, an\n   HTTP
      response SHALL be returned with HTTP status code 201 (Created).\n   The response
      body SHOULD contain the service provider's\n   representation of the newly created
      resource.  The URI of the created\n   resource SHALL include, in the HTTP \"Location\"
      header and the HTTP\n   body, a JSON representation [RFC7159] with the attribute\n
      \  \"meta.location\".  Since the server is free to alter and/or ignore\n   POSTed
      content, returning the full representation can be useful to\n   the client,
      enabling it to correlate the client's and server's views\n   of the new resource.\n
      \  If the service provider determines that the creation of the requested\n   resource
      conflicts with existing resources (e.g., a \"User\" resource\n   with a duplicate
      \"userName\"), the service provider MUST return HTTP\n   status code 409 (Conflict)
      with a \"scimType\" error code of\n   \"uniqueness\", as per Section 3.12.\n
      \  In the following example, a client sends a POST request containing a\n   \"User\"
      to the \"/Users\" endpoint.\n   POST /Users  HTTP/1.1\n   Host: example.com\n
      \  Accept: application/scim+json\n   Content-Type: application/scim+json\n   Authorization:
      Bearer h480djs93hd8\n   Content-Length: ...\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
      \    \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n
      \      \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n
      \      \"givenName\":\"Barbara\"\n     }\n   }\n   In response to the example
      request above, the server signals a\n   successful creation with an HTTP status
      code 201 (Created) and\n   returns a representation of the resource created:\n
      \  HTTP/1.1 201 Created\n   Content-Type: application/scim+json\n   Location:\n
      \   https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\n   ETag:
      W/\"e180ee84f0671b1\"\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
      \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"externalId\":\"bjensen\",\n
      \    \"meta\":{\n       \"resourceType\":\"User\",\n       \"created\":\"2011-08-01T21:32:44.882Z\",\n
      \      \"lastModified\":\"2011-08-01T21:32:44.882Z\",\n       \"location\":\n
      \  \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\",\n
      \      \"version\":\"W\\/\\\"e180ee84f0671b1\\\"\"\n     },\n     \"name\":{\n
      \      \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n
      \      \"givenName\":\"Barbara\"\n     },\n     \"userName\":\"bjensen\"\n   }\n"
    - contents:
      - "3.3.1.  Resource Types\n   When adding a resource to a specific endpoint,
        the meta attribute\n   \"resourceType\" SHALL be set by the HTTP service provider
        to the\n   corresponding resource type for the endpoint.  For example, a POST
        to\n   the endpoint \"/Users\" will set \"resourceType\" to \"User\", and\n
        \  \"/Groups\" will set \"resourceType\" to \"Group\".\n"
      title: 3.3.1.  Resource Types
    title: 3.3.  Creating Resources
  - contents:
    - "3.4.  Retrieving Resources\n   Resources MAY be retrieved via opaque, unique
      URLs or via queries\n   (see Section 3.4.2).  The attributes returned are defined
      in the\n   server's attribute schema (see Section 8.7 of [RFC7643]) and may
      be\n   modified by request parameters (see Section 3.9).  By default,\n   resource
      attributes returned in a response are those attributes whose\n   characteristic
      \"returned\" setting is \"always\" or \"default\" (see\n   Section 2.2 of [RFC7643]).\n"
    - contents:
      - "3.4.1.  Retrieving a Known Resource\n   To retrieve a known resource, clients
        send GET requests to the\n   resource endpoint, e.g., \"/Users/{id}\", \"/Groups/{id}\",
        or\n   \"/Schemas/{id}\", where \"{id}\" is a resource identifier (for example,\n
        \  the value of the \"id\" attribute).\n   If the resource exists, the server
        responds with HTTP status code 200\n   (OK) and includes the result in the
        body of the response.\n   The example below retrieves a single User via the
        \"/Users\" endpoint.\n   GET /Users/2819c223-7f76-453a-919d-413861904646\n
        \  Host: example.com\n   Accept: application/scim+json\n   Authorization:
        Bearer h480djs93hd8\n   The server responds with:\n   HTTP/1.1 200 OK\n   Content-Type:
        application/scim+json\n   Location:\n     https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\n
        \  ETag: W/\"f250dd84f0671c3\"\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
        \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"externalId\":\"bjensen\",\n
        \    \"meta\":{\n       \"resourceType\":\"User\",\n       \"created\":\"2011-08-01T18:29:49.793Z\",\n
        \      \"lastModified\":\"2011-08-01T18:29:49.793Z\",\n       \"location\":\n
        \  \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\",\n
        \      \"version\":\"W\\/\\\"f250dd84f0671c3\\\"\"\n     },\n     \"name\":{\n
        \      \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n
        \      \"givenName\":\"Barbara\"\n     },\n     \"userName\":\"bjensen\",\n
        \    \"phoneNumbers\":[\n       {\n         \"value\":\"555-555-8377\",\n
        \        \"type\":\"work\"\n       }\n     ],\n     \"emails\":[\n       {\n
        \        \"value\":\"bjensen@example.com\",\n         \"type\":\"work\"\n
        \      }\n     ]\n   }\n"
      title: 3.4.1.  Retrieving a Known Resource
    - contents:
      - "3.4.2.  Query Resources\n   The SCIM protocol defines a standard set of query
        parameters that can\n   be used to filter, sort, and paginate to return zero
        or more\n   resources in a query response.  Queries MAY be made against a
        single\n   resource or a resource type endpoint (e.g., \"/Users\"), or the
        service\n   provider Base URI.  SCIM service providers MAY support additional\n
        \  query parameters not specified here and SHOULD ignore any query\n   parameters
        they do not recognize instead of rejecting the query for\n   versioning compatibility
        reasons.\n   Responses MUST be identified using the following URI:\n   \"urn:ietf:params:scim:api:messages:2.0:ListResponse\".
        \ The following\n   attributes are defined for responses:\n   totalResults
        \ The total number of results returned by the list or\n      query operation.
        \ The value may be larger than the number of\n      resources returned, such
        as when returning a single page (see\n      Section 3.4.2.4) of results where
        multiple pages are available.\n      REQUIRED.\n   Resources  A multi-valued
        list of complex objects containing the\n      requested resources.  This MAY
        be a subset of the full set of\n      resources if pagination (Section 3.4.2.4)
        is requested.  REQUIRED\n      if \"totalResults\" is non-zero.\n   startIndex
        \ The 1-based index of the first result in the current set\n      of list
        results.  REQUIRED when partial results are returned due\n      to pagination.\n
        \  itemsPerPage  The number of resources returned in a list response\n      page.
        \ REQUIRED when partial results are returned due to\n      pagination.\n   A
        query that does not return any matches SHALL return success (HTTP\n   status
        code 200) with \"totalResults\" set to a value of 0.\n   The example query
        below requests the userName for all Users:\n   GET /Users?attributes=userName\n
        \  Host: example.com\n   Accept: application/scim+json\n   Authorization:
        Bearer h480djs93hd8\n   The following is an example response to the query
        above:\n   HTTP/1.1 200 OK\n   Content-Type: application/scim+json\n   {\n
        \    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n
        \    \"totalResults\":2,\n     \"Resources\":[\n       {\n         \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n
        \        \"userName\":\"bjensen\"\n       },\n       {\n         \"id\":\"c75ad752-64ae-4823-840d-ffa80929976c\",\n
        \        \"userName\":\"jsmith\"\n       }\n     ]\n   }\n   Note that in
        the above example, \"id\" is returned because the \"id\"\n   attribute has
        the \"returned\" characteristic of \"always\".\n"
      - contents:
        - "3.4.2.1.  Query Endpoints\n   Queries MAY be performed against a SCIM resource
          object, a resource\n   type endpoint, or a SCIM server root.  For example:\n
          \     \"/Users/{id}\"\n      \"/Users\"\n      \"/Groups\"\n   A query against
          a server root indicates that all resources within the\n   server SHALL be
          included, subject to filtering.  A filter expression\n   using \"meta.resourceType\"
          MAY be used to restrict results to one or\n   more specific resource types
          (to exclude others).  For example:\n   filter=(meta.resourceType eq User)
          or (meta.resourceType eq Group)\n   If a SCIM service provider determines
          that too many results would be\n   returned (e.g., because a client queried
          a resource type endpoint or\n   the server base URI), the server SHALL reject
          the request by\n   returning an HTTP response with HTTP status code 400
          (Bad Request)\n   and JSON attribute \"scimType\" set to \"tooMany\" (see
          Table 9).\n   When processing query operations using endpoints that include
          more\n   than one SCIM resource type (e.g., a query from the server root\n
          \  endpoint), filters MUST be processed as outlined in Section 3.4.2.2.\n
          \  For filtered attributes that are not part of a particular resource\n
          \  type, the service provider SHALL treat the attribute as if there is\n
          \  no attribute value.  For example, a presence or equality filter for\n
          \  an undefined attribute evaluates to false.\n"
        title: 3.4.2.1.  Query Endpoints
      - contents:
        - "3.4.2.2.  Filtering\n   Filtering is an OPTIONAL parameter for SCIM service
          providers.\n   Clients MAY discover service provider filter capabilities
          by looking\n   at the \"filter\" attribute of the \"ServiceProviderConfig\"
          endpoint\n   (see Section 4).  Clients MAY request a subset of resources
          by\n   specifying the \"filter\" query parameter containing a filter\n   expression.
          \ When specified, only those resources matching the filter\n   expression
          SHALL be returned.  The expression language that is used\n   with the filter
          parameter supports references to attributes and\n   literals.\n   Attribute
          names and attribute operators used in filters are case\n   insensitive.
          \ For example, the following two expressions will\n   evaluate to the same
          logical value:\n   filter=userName Eq \"john\"\n   filter=Username eq \"john\"\n
          \  The filter parameter MUST contain at least one valid expression (see\n
          \  Table 3).  Each expression MUST contain an attribute name followed by\n
          \  an attribute operator and optional value.  Multiple expressions MAY\n
          \  be combined using logical operators (see Table 4).  Expressions MAY\n
          \  be grouped together using round brackets \"(\" and \")\" (see Table 5).\n
          \  The operators supported in the expression are listed in Table 3.\n   +----------+-------------+------------------------------------------+\n
          \  | Operator | Description | Behavior                                 |\n
          \  +----------+-------------+------------------------------------------+\n
          \  | eq       | equal       | The attribute and operator values must   |\n
          \  |          |             | be identical for a match.                |\n
          \  |          |             |                                          |\n
          \  | ne       | not equal   | The attribute and operator values are    |\n
          \  |          |             | not identical.                           |\n
          \  |          |             |                                          |\n
          \  | co       | contains    | The entire operator value must be a      |\n
          \  |          |             | substring of the attribute value for a   |\n
          \  |          |             | match.                                   |\n
          \  |          |             |                                          |\n
          \  | sw       | starts with | The entire operator value must be a      |\n
          \  |          |             | substring of the attribute value,        |\n
          \  |          |             | starting at the beginning of the         |\n
          \  |          |             | attribute value.  This criterion is      |\n
          \  |          |             | satisfied if the two strings are         |\n
          \  |          |             | identical.                               |\n
          \  |          |             |                                          |\n
          \  | ew       | ends with   | The entire operator value must be a      |\n
          \  |          |             | substring of the attribute value,        |\n
          \  |          |             | matching at the end of the attribute     |\n
          \  |          |             | value.  This criterion is satisfied if   |\n
          \  |          |             | the two strings are identical.           |\n
          \  |          |             |                                          |\n
          \  | pr       | present     | If the attribute has a non-empty or      |\n
          \  |          | (has value) | non-null value, or if it contains a      |\n
          \  |          |             | non-empty node for complex attributes,   |\n
          \  |          |             | there is a match.                        |\n
          \  |          |             |                                          |\n
          \  | gt       | greater     | If the attribute value is greater than   |\n
          \  |          | than        | the operator value, there is a match.    |\n
          \  |          |             | The actual comparison is dependent on    |\n
          \  |          |             | the attribute type.  For string          |\n
          \  |          |             | attribute types, this is a               |\n
          \  |          |             | lexicographical comparison, and for      |\n
          \  |          |             | DateTime types, it is a chronological    |\n
          \  |          |             | comparison.  For integer attributes, it  |\n
          \  |          |             | is a comparison by numeric value.        |\n
          \  |          |             | Boolean and Binary attributes SHALL      |\n
          \  |          |             | cause a failed response (HTTP status     |\n
          \  |          |             | code 400) with \"scimType\" of             |\n
          \  |          |             | \"invalidFilter\".                         |\n
          \  |          |             |                                          |\n
          \  | ge       | greater     | If the attribute value is greater than   |\n
          \  |          | than or     | or equal to the operator value, there is |\n
          \  |          | equal to    | a match.  The actual comparison is       |\n
          \  |          |             | dependent on the attribute type.  For    |\n
          \  |          |             | string attribute types, this is a        |\n
          \  |          |             | lexicographical comparison, and for      |\n
          \  |          |             | DateTime types, it is a chronological    |\n
          \  |          |             | comparison.  For integer attributes, it  |\n
          \  |          |             | is a comparison by numeric value.        |\n
          \  |          |             | Boolean and Binary attributes SHALL      |\n
          \  |          |             | cause a failed response (HTTP status     |\n
          \  |          |             | code 400) with \"scimType\" of             |\n
          \  |          |             | \"invalidFilter\".                         |\n
          \  |          |             |                                          |\n
          \  | lt       | less than   | If the attribute value is less than the  |\n
          \  |          |             | operator value, there is a match.  The   |\n
          \  |          |             | actual comparison is dependent on the    |\n
          \  |          |             | attribute type.  For string attribute    |\n
          \  |          |             | types, this is a lexicographical         |\n
          \  |          |             | comparison, and for DateTime types, it   |\n
          \  |          |             | is a chronological comparison.  For      |\n
          \  |          |             | integer attributes, it is a comparison   |\n
          \  |          |             | by numeric value.  Boolean and Binary    |\n
          \  |          |             | attributes SHALL cause a failed response |\n
          \  |          |             | (HTTP status code 400) with \"scimType\"   |\n
          \  |          |             | of \"invalidFilter\".                      |\n
          \  |          |             |                                          |\n
          \  | le       | less than   | If the attribute value is less than or   |\n
          \  |          | or equal to | equal to the operator value, there is a  |\n
          \  |          |             | match.  The actual comparison is         |\n
          \  |          |             | dependent on the attribute type.  For    |\n
          \  |          |             | string attribute types, this is a        |\n
          \  |          |             | lexicographical comparison, and for      |\n
          \  |          |             | DateTime types, it is a chronological    |\n
          \  |          |             | comparison.  For integer attributes, it  |\n
          \  |          |             | is a comparison by numeric value.        |\n
          \  |          |             | Boolean and Binary attributes SHALL      |\n
          \  |          |             | cause a failed response (HTTP status     |\n
          \  |          |             | code 400) with \"scimType\" of             |\n
          \  |          |             | \"invalidFilter\".                         |\n
          \  +----------+-------------+------------------------------------------+\n
          \                      Table 3: Attribute Operators\n   +----------+-------------+------------------------------------------+\n
          \  | Operator | Description | Behavior                                 |\n
          \  +----------+-------------+------------------------------------------+\n
          \  | and      | Logical     | The filter is only a match if both       |\n
          \  |          | \"and\"       | expressions evaluate to true.            |\n
          \  |          |             |                                          |\n
          \  | or       | Logical     | The filter is a match if either          |\n
          \  |          | \"or\"        | expression evaluates to true.            |\n
          \  |          |             |                                          |\n
          \  | not      | \"Not\"       | The filter is a match if the expression
          \ |\n   |          | function    | evaluates to false.                      |\n
          \  +----------+-------------+------------------------------------------+\n
          \                       Table 4: Logical Operators\n   +----------+-------------+------------------------------------------+\n
          \  | Operator | Description | Behavior                                 |\n
          \  +----------+-------------+------------------------------------------+\n
          \  | ( )      | Precedence  | Boolean expressions MAY be grouped using |\n
          \  |          | grouping    | parentheses to change the standard order |\n
          \  |          |             | of operations, i.e., to evaluate logical |\n
          \  |          |             | \"or\" operators before logical \"and\"      |\n
          \  |          |             | operators.                               |\n
          \  |          |             |                                          |\n
          \  | [ ]      | Complex     | Service providers MAY support complex    |\n
          \  |          | attribute   | filters where expressions MUST be        |\n
          \  |          | filter      | applied to the same value of a parent    |\n
          \  |          | grouping    | attribute specified immediately before   |\n
          \  |          |             | the left square bracket (\"[\").  The      |\n
          \  |          |             | expression within square brackets (\"[\"   |\n
          \  |          |             | and \"]\") MUST be a valid filter          |\n
          \  |          |             | expression based upon sub-attributes of  |\n
          \  |          |             | the parent attribute.  Nested            |\n
          \  |          |             | expressions MAY be used.  See examples   |\n
          \  |          |             | below.                                   |\n
          \  +----------+-------------+------------------------------------------+\n
          \                       Table 5: Grouping Operators\n   SCIM filters MUST
          conform to the following ABNF [RFC5234] rules as\n   specified below:\n
          \    FILTER    = attrExp / logExp / valuePath / *1\"not\" \"(\" FILTER \")\"\n
          \    valuePath = attrPath \"[\" valFilter \"]\"\n                 ; FILTER
          uses sub-attributes of a parent attrPath\n     valFilter = attrExp / logExp
          / *1\"not\" \"(\" valFilter \")\"\n     attrExp   = (attrPath SP \"pr\")
          /\n                 (attrPath SP compareOp SP compValue)\n     logExp    =
          FILTER SP (\"and\" / \"or\") SP FILTER\n     compValue = false / null /
          true / number / string\n                 ; rules from JSON (RFC 7159)\n
          \    compareOp = \"eq\" / \"ne\" / \"co\" /\n                        \"sw\"
          / \"ew\" /\n                        \"gt\" / \"lt\" /\n                        \"ge\"
          / \"le\"\n     attrPath  = [URI \":\"] ATTRNAME *1subAttr\n                 ;
          SCIM attribute name\n                 ; URI is SCIM \"schema\" URI\n     ATTRNAME
          \ = ALPHA *(nameChar)\n     nameChar  = \"-\" / \"_\" / DIGIT / ALPHA\n
          \    subAttr   = \".\" ATTRNAME\n                 ; a sub-attribute of a
          complex attribute\n               Figure 1: ABNF Specification of SCIM Filters\n
          \  In the above ABNF rules, the \"compValue\" (comparison value) rule is\n
          \  built on JSON Data Interchange format ABNF rules as specified in\n   [RFC7159],
          \"DIGIT\" and \"ALPHA\" are defined per Appendix B.1 of\n   [RFC5234], and
          \"URI\" is defined per Appendix A of [RFC3986].\n   Filters MUST be evaluated
          using the following order of operations, in\n   order of precedence:\n   1.
          \ Grouping operators\n   2.  Logical operators - where \"not\" takes precedence
          over \"and\",\n       which takes precedence over \"or\"\n   3.  Attribute
          operators\n   If the specified attribute in a filter expression is a multi-valued\n
          \  attribute, the filter matches if any of the values of the specified\n
          \  attribute match the specified criterion; e.g., if a User has multiple\n
          \  \"emails\" values, only one has to match for the entire User to match.\n
          \  For complex attributes, a fully qualified sub-attribute MUST be\n   specified
          using standard attribute notation (Section 3.10).  For\n   example, to filter
          by userName, the parameter value is \"userName\".\n   To filter by first
          name, the parameter value is \"name.givenName\".\n   When applying a comparison
          (e.g., \"eq\") or presence filter (e.g.,\n   \"pr\") to a defaulted attribute,
          the service provider SHALL use the\n   value that was returned to the client
          that last created or modified\n   the attribute.\n   Providers MAY support
          additional filter operations if they choose.\n   Providers MUST decline
          to filter results if the specified filter\n   operation is not recognized
          and return an HTTP 400 error with a\n   \"scimType\" error of \"invalidFilter\"
          and an appropriate human-readable\n   response as per Section 3.12.  For
          example, if a client specified an\n   unsupported operator named 'regex',
          the service provider should\n   specify an error response description identifying
          the client error,\n   e.g., 'The operator 'regex' is not supported.'\n   When
          comparing attributes of type String, the case sensitivity for\n   String
          type attributes SHALL be determined by the attribute's\n   \"caseExact\"
          characteristic (see Section 2.2 of [RFC7643]).\n   Clients MAY query by
          schema or schema extensions by using a filter\n   expression including the
          \"schemas\" attribute (as shown in Figure 2).\n   The following are examples
          of valid filters.  Some attributes (e.g.,\n   rooms and rooms.number) are
          hypothetical extensions and are not part\n   of the SCIM core schema:\n"
        - 'filter=userName eq "bjensen"

          '
        - 'filter=name.familyName co "O''Malley"

          '
        - 'filter=userName sw "J"

          '
        - 'filter=urn:ietf:params:scim:schemas:core:2.0:User:userName sw "J"

          '
        - 'filter=title pr

          '
        - 'filter=meta.lastModified gt "2011-05-13T04:42:34Z"

          '
        - 'filter=meta.lastModified ge "2011-05-13T04:42:34Z"

          '
        - 'filter=meta.lastModified lt "2011-05-13T04:42:34Z"

          '
        - 'filter=meta.lastModified le "2011-05-13T04:42:34Z"

          '
        - 'filter=title pr and userType eq "Employee"

          '
        - 'filter=title pr or userType eq "Intern"

          '
        - "filter=\n schemas eq \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n"
        - "filter=userType eq \"Employee\" and (emails co \"example.com\" or\n  emails.value
          co \"example.org\")\n"
        - "filter=userType ne \"Employee\" and not (emails co \"example.com\" or\n
          \ emails.value co \"example.org\")\n"
        - 'filter=userType eq "Employee" and (emails.type eq "work")

          '
        - "filter=userType eq \"Employee\" and emails[type eq \"work\" and\n  value
          co \"@example.com\"]\n"
        - "filter=emails[type eq \"work\" and value co \"@example.com\"] or\n  ims[type
          eq \"xmpp\" and value co \"@foo.com\"]\n                         Figure
          2: Example Filters\n"
        title: 3.4.2.2.  Filtering
      - contents:
        - "3.4.2.3.  Sorting\n   Sort is OPTIONAL.  Clients MAY discover sort capability
          by looking at\n   the \"sort\" attribute of the service provider configuration
          (see\n   Section 4).  Sorting allows clients to specify the order in which\n
          \  resources are returned by specifying a combination of \"sortBy\" and\n
          \  \"sortOrder\" URL parameters.\n   sortBy  The \"sortBy\" parameter specifies
          the attribute whose value\n      SHALL be used to order the returned responses.
          \ If the \"sortBy\"\n      attribute corresponds to a singular attribute,
          resources are\n      sorted according to that attribute's value; if it's
          a multi-valued\n      attribute, resources are sorted by the value of the
          primary\n      attribute (see Section 2.4 of [RFC7643]), if any, or else
          the\n      first value in the list, if any.  If the attribute is complex,
          the\n      attribute name must be a path to a sub-attribute in standard\n
          \     attribute notation (Section 3.10), e.g., \"sortBy=name.givenName\".\n
          \     For all attribute types, if there is no data for the specified\n      \"sortBy\"
          value, they are sorted via the \"sortOrder\" parameter,\n      i.e., they
          are ordered last if ascending and first if descending.\n   sortOrder  The
          order in which the \"sortBy\" parameter is applied.\n      Allowed values
          are \"ascending\" and \"descending\".  If a value for\n      \"sortBy\"
          is provided and no \"sortOrder\" is specified, \"sortOrder\"\n      SHALL
          default to ascending.  String type attributes are case\n      insensitive
          by default, unless the attribute type is defined as a\n      case-exact
          string.  \"sortOrder\" MUST sort according to the\n      attribute type;
          i.e., for case-insensitive attributes, sort the\n      result using case-insensitive
          Unicode alphabetic sort order with\n      no specific locale implied, and
          for case-exact attribute types,\n      sort the result using case-sensitive
          Unicode alphabetic sort\n      order.\n"
        title: 3.4.2.3.  Sorting
      - contents:
        - "3.4.2.4.  Pagination\n   Pagination parameters can be used together to
          \"page through\" large\n   numbers of resources so as not to overwhelm the
          client or service\n   provider.  Because pagination is not stateful, clients
          MUST be\n   prepared to handle inconsistent results.  For example, a request
          for\n   a list of 10 resources beginning with a startIndex of 1 MAY return\n
          \  different results when repeated, since resources on the service\n   provider
          may have changed between requests.  Pagination parameters\n   and general
          behavior are derived from the OpenSearch Protocol\n   [OpenSearch].\n   Table
          6 describes the URL pagination parameters.\n   +------------+----------------------------+-------------------------+\n
          \  | Parameter  | Description                | Default                 |\n
          \  +------------+----------------------------+-------------------------+\n
          \  | startIndex | The 1-based index of the   | 1                       |\n
          \  |            | first query result.  A     |                         |\n
          \  |            | value less than 1 SHALL be |                         |\n
          \  |            | interpreted as 1.          |                         |\n
          \  |            |                            |                         |\n
          \  | count      | Non-negative integer.      | None.  When specified,  |\n
          \  |            | Specifies the desired      | the service provider    |\n
          \  |            | maximum number of query    | MUST NOT return more    |\n
          \  |            | results per page, e.g.,    | results than specified, |\n
          \  |            | 10.  A negative value      | although it MAY return  |\n
          \  |            | SHALL be interpreted as    | fewer results.  If      |\n
          \  |            | \"0\".  A value of \"0\"       | unspecified, the        |\n
          \  |            | indicates that no resource | maximum number of       |\n
          \  |            | results are to be returned | results is set by the   |\n
          \  |            | except for \"totalResults\". | service provider.       |\n
          \  +------------+----------------------------+-------------------------+\n
          \                 Table 6: Pagination Request Parameters\n   Table 7 describes
          the query response pagination attributes specified\n   by the service provider.\n
          \  +--------------+----------------------------------------------------+\n
          \  | Element      | Description                                        |\n
          \  +--------------+----------------------------------------------------+\n
          \  | itemsPerPage | Non-negative integer.  Specifies the number of     |\n
          \  |              | query results returned in a query response page,   |\n
          \  |              | e.g., 10.                                          |\n
          \  |              |                                                    |\n
          \  | totalResults | Non-negative integer.  Specifies the total number  |\n
          \  |              | of results matching the client query, e.g., 1000.  |\n
          \  |              |                                                    |\n
          \  | startIndex   | The 1-based index of the first result in the       |\n
          \  |              | current set of query results, e.g., 1.             |\n
          \  +--------------+----------------------------------------------------+\n
          \                  Table 7: Pagination Response Elements\n   For example,
          to retrieve the first 10 Users, set the startIndex to 1\n   and the count
          to 10:\n   GET /Users?startIndex=1&count=10\n   Host: example.com\n   Accept:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   The response
          to the query above returns metadata regarding paging\n   similar to the
          following example (actual resources removed for\n   brevity):\n   {\n     \"totalResults\":100,\n
          \    \"itemsPerPage\":10,\n     \"startIndex\":1,\n     \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n
          \    \"Resources\":[{\n       ...\n     }]\n   }\n      Figure 3: ListResponse
          Format for Returning Multiple Resources\n   Given the example above, to
          continue paging, set the startIndex to 11\n   and re-fetch, i.e., /Users?startIndex=11&count=10.\n"
        title: 3.4.2.4.  Pagination
      - contents:
        - "3.4.2.5.  Attributes\n   The following attributes control which attributes
          SHALL be returned\n   with a returned resource.  SCIM clients MAY use one
          of these two\n   OPTIONAL parameters, which MUST be supported by SCIM service\n
          \  providers:\n   attributes  A multi-valued list of strings indicating
          the names of\n      resource attributes to return in the response, overriding
          the set\n      of attributes that would be returned by default.  Attribute
          names\n      MUST be in standard attribute notation (Section 3.10) form.
          \ See\n      Section 3.9 for additional retrieval query parameters.\n   excludedAttributes
          \ A multi-valued list of strings indicating the\n      names of resource
          attributes to be removed from the default set of\n      attributes to return.
          \ This parameter SHALL have no effect on\n      attributes whose schema
          \"returned\" setting is \"always\" (see\n      Sections 2.2 and 7 of [RFC7643]).
          \ Attribute names MUST be in\n      standard attribute notation (Section
          3.10) form.  See Section 3.9\n      for additional retrieval query parameters.\n"
        title: 3.4.2.5.  Attributes
      title: 3.4.2.  Query Resources
    - contents:
      - "3.4.3.  Querying Resources Using HTTP POST\n   Clients MAY execute queries
        without passing parameters on the URL by\n   using the HTTP POST verb combined
        with the \"/.search\" path extension.\n   The inclusion of \"/.search\" on
        the end of a valid SCIM endpoint SHALL\n   be used to indicate that the HTTP
        POST verb is intended to be a query\n   operation.\n   To create a new query
        result set, a SCIM client sends an HTTP POST\n   request to the desired SCIM
        resource endpoint (ending in \"/.search\").\n   The body of the POST request
        MAY include any of the parameters\n   defined in Section 3.4.2.\n   Query
        requests MUST be identified using the following URI:\n   \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\".
        \ The following\n   attributes are defined for query requests:\n   attributes
        \ A multi-valued list of strings indicating the names of\n      resource attributes
        to return in the response, overriding the set\n      of attributes that would
        be returned by default.  Attribute names\n      MUST be in standard attribute
        notation (Section 3.10) form.  See\n      Section 3.9 for additional retrieval
        query parameters.  OPTIONAL.\n   excludedAttributes  A multi-valued list of
        strings indicating the\n      names of resource attributes to be removed from
        the default set of\n      attributes to return.  This parameter SHALL have
        no effect on\n      attributes whose schema \"returned\" setting is \"always\"
        (see\n      Sections 2.2 and 7 of [RFC7643]).  Attribute names MUST be in\n
        \     standard attribute notation (Section 3.10) form.  See Section 3.9\n
        \     for additional retrieval query parameters.  OPTIONAL.\n   filter  The
        filter string used to request a subset of resources.  The\n      filter string
        MUST be a valid filter (Section 3.4.2.2) expression.\n      OPTIONAL.\n   sortBy
        \ A string indicating the attribute whose value SHALL be used\n      to order
        the returned responses.  The \"sortBy\" attribute MUST be\n      in standard
        attribute notation (Section 3.10) form.  See\n      Section 3.4.2.3.  OPTIONAL.\n
        \  sortOrder  A string indicating the order in which the \"sortBy\"\n      parameter
        is applied.  Allowed values are \"ascending\" and\n      \"descending\".  See
        Section 3.4.2.3.  OPTIONAL.\n   startIndex  An integer indicating the 1-based
        index of the first\n      query result.  See Section 3.4.2.4.  OPTIONAL.\n
        \  count  An integer indicating the desired maximum number of query\n      results
        per page.  See Section 3.4.2.4.  OPTIONAL.\n   After receiving an HTTP POST
        request, a response is returned as\n   specified in Section 3.4.2.\n   The
        following example shows an HTTP POST Query request with search\n   parameters
        \"attributes\", \"filter\", and \"count\" included:\n   POST /.search\n   Host:
        example.com\n   Accept: application/scim+json\n   Content-Type: application/scim+json\n
        \  Authorization: Bearer h480djs93hd8\n   Content-Length: ...\n   {\n     \"schemas\":
        [\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"],\n     \"attributes\":
        [\"displayName\", \"userName\"],\n     \"filter\":\n       \"displayName sw
        \\\"smith\\\"\",\n     \"startIndex\": 1,\n     \"count\": 10\n   }\n                   Figure
        4: Example POST Query Request\n   The example below shows a query response
        with the first page of\n   results.  For brevity, only two matches are shown:
        one User and\n   one Group.\n   HTTP/1.1 200 OK\n   Content-Type: application/scim+json\n
        \  Location: https://example.com/.search\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n
        \    \"totalResults\":100,\n     \"itemsPerPage\":10,\n     \"startIndex\":1,\n
        \    \"Resources\":[\n       {\n         \"id\":\"2819c223-7f76-413861904646\",\n
        \        \"userName\":\"jsmith\",\n         \"displayName\":\"Smith, James\"\n
        \      },\n       {\n         \"id\":\"c8596b90-7539-4f20968d1908\",\n         \"displayName\":\"Smith
        Family\"\n       },\n        ...\n     ]\n   }\n                   Figure
        5: Example POST Query Response\n"
      title: 3.4.3.  Querying Resources Using HTTP POST
    title: 3.4.  Retrieving Resources
  - contents:
    - "3.5.  Modifying Resources\n   Resources can be modified in whole or in part
      using HTTP PUT or HTTP\n   PATCH, respectively.  Implementers MUST support HTTP
      PUT as specified\n   in Section 4.3 of [RFC7231].  Resources such as Groups
      may be very\n   large; hence, implementers SHOULD support HTTP PATCH [RFC5789]
      to\n   enable partial resource modifications.  Service provider support for\n
      \  HTTP PATCH may be discovered by querying the service provider\n   configuration
      (see Section 4).\n"
    - contents:
      - "3.5.1.  Replacing with PUT\n   HTTP PUT is used to replace a resource's attributes.
        \ For example,\n   clients that have previously retrieved the entire resource
        in advance\n   and revised it MAY replace the resource using an HTTP PUT.
        \ Because\n   SCIM resource identifiers are assigned by the service provider,
        HTTP\n   PUT MUST NOT be used to create new resources.\n   As the operation's
        intent is to replace all attributes, SCIM clients\n   MAY send all attributes,
        regardless of each attribute's mutability.\n   The server will apply attribute-by-attribute
        replacements according\n   to the following attribute mutability rules:\n
        \  readWrite, writeOnly  Any values provided SHALL replace the existing\n
        \     attribute values.\n      Attributes whose mutability is \"readWrite\"
        that are omitted from\n      the request body MAY be assumed to be not asserted
        by the client.\n      The service provider MAY assume that any existing values
        are to be\n      cleared, or the service provider MAY assign a default value
        to the\n      final resource representation.  Service providers MAY take into\n
        \     account whether or not a client has access to, or understands, all\n
        \     of the resource's attributes when deciding whether non-asserted\n      attributes
        SHALL be removed or defaulted.  Clients that want to\n      override a server's
        defaults MAY specify \"null\" for a\n      single-valued attribute, or an
        empty array \"[]\" for a multi-valued\n      attribute, to clear all values.\n
        \  immutable  If one or more values are already set for the attribute,\n      the
        input value(s) MUST match, or HTTP status code 400 SHOULD be\n      returned
        with a \"scimType\" error code of \"mutability\".  If the\n      service provider
        has no existing values, the new value(s) SHALL be\n      applied.\n   readOnly
        \ Any values provided SHALL be ignored.\n   If an attribute is \"required\",
        clients MUST specify the attribute in\n   the PUT request.\n   Unless otherwise
        specified, a successful PUT operation returns a 200\n   OK response code and
        the entire resource within the response body,\n   enabling the client to correlate
        the client's and the service\n   provider's views of the updated resource.
        \ For example:\n   PUT /Users/2819c223-7f76-453a-919d-413861904646\n   Host:
        example.com\n   Accept: application/scim+json\n   Content-Type: application/scim+json\n
        \  Authorization: Bearer h480djs93hd8\n   If-Match: W/\"a330bc54f0671c9\"\n
        \  {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
        \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"userName\":\"bjensen\",\n
        \    \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms.
        Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\",\n
        \      \"middleName\":\"Jane\"\n     },\n     \"roles\":[],\n     \"emails\":[\n
        \      {\n           \"value\":\"bjensen@example.com\"\n       },\n       {\n
        \          \"value\":\"babs@jensen.org\"\n       }\n     ]\n   }\n   The service
        responds with the entire updated User:\n   HTTP/1.1 200 OK\n   Content-Type:
        application/scim+json\n   ETag: W/\"b431af54f0671a2\"\n   Location:\n     \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\"\n
        \  {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
        \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"userName\":\"bjensen\",\n
        \    \"externalId\":\"bjensen\",\n     \"name\":{\n       \"formatted\":\"Ms.
        Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n       \"givenName\":\"Barbara\",\n
        \      \"middleName\":\"Jane\"\n     },\n     \"emails\":[\n       {\n           \"value\":\"bjensen@example.com\"\n
        \      },\n       {\n           \"value\":\"babs@jensen.org\"\n       }\n
        \    ],\n     \"meta\": {\n       \"resourceType\":\"User\",\n       \"created\":\"2011-08-08T04:56:22Z\",\n
        \      \"lastModified\":\"2011-08-08T08:00:12Z\",\n       \"location\":\n
        \  \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\",\n
        \      \"version\":\"W\\/\\\"b431af54f0671a2\\\"\"\n     }\n   }\n"
      title: 3.5.1.  Replacing with PUT
    - contents:
      - "3.5.2.  Modifying with PATCH\n   HTTP PATCH is an OPTIONAL server function
        that enables clients to\n   update one or more attributes of a SCIM resource
        using a sequence of\n   operations to \"add\", \"remove\", or \"replace\"
        values.  Clients may\n   discover service provider support for PATCH by querying
        the service\n   provider configuration (see Section 4).\n   The general form
        of the SCIM PATCH request is based on JSON Patch\n   [RFC6902].  One difference
        between SCIM PATCH and JSON Patch is that\n   SCIM servers do not support
        array indexing and do not support\n   [RFC6902] operation types relating to
        array element manipulation,\n   such as \"move\".\n   The body of each request
        MUST contain the \"schemas\" attribute with\n   the URI value of \"urn:ietf:params:scim:api:messages:2.0:PatchOp\".\n
        \  The body of an HTTP PATCH request MUST contain the attribute\n   \"Operations\",
        whose value is an array of one or more PATCH\n   operations.  Each PATCH operation
        object MUST have exactly one \"op\"\n   member, whose value indicates the
        operation to perform and MAY be one\n   of \"add\", \"remove\", or \"replace\".
        \ The semantics of each operation\n   are defined in the following subsections.\n
        \  The following is an example representation of a PATCH request showing\n
        \  the basic JSON structure (non-normative):\n   { \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
        \    \"Operations\":[\n       {\n        \"op\":\"add\",\n        \"path\":\"members\",\n
        \       \"value\":[\n         {\n           \"display\": \"Babs Jensen\",\n
        \          \"$ref\":\n   \"https://example.com/v2/Users/2819c223...413861904646\",\n
        \          \"value\": \"2819c223-7f76-453a-919d-413861904646\"\n         }\n
        \       ]\n       },\n       ... + additional operations if needed ...\n     ]\n
        \  }\n            Figure 6: Example JSON Body for SCIM PATCH Request\n   The
        \"path\" attribute value is a String containing an attribute path\n   describing
        the target of the operation.  The \"path\" attribute is\n   OPTIONAL for \"add\"
        and \"replace\" and is REQUIRED for \"remove\"\n   operations.  See relevant
        operation sections below for details.\n   The \"path\" attribute is described
        by the following ABNF syntax rule:\n                   PATH = attrPath / valuePath
        [subAttr]\n                      Figure 7: SCIM PATCH PATH Rule\n   The ABNF
        rules \"attrPath\", \"valuePath\", and \"subAttr\" are defined in\n   Section
        3.4.2.2.  The \"valuePath\" rule allows specific values of a\n   complex multi-valued
        attribute to be selected.\n   Valid examples of \"path\" are as follows:\n
        \      \"path\":\"members\"\n       \"path\":\"name.familyName\"\n       \"path\":\"addresses[type
        eq \\\"work\\\"]\"\n       \"path\":\"members[value eq\n              \\\"2819c223-7f76-453a-919d-413861904646\\\"]\"\n
        \      \"path\":\"members[value eq\n              \\\"2819c223-7f76-453a-919d-413861904646\\\"].displayName\"\n
        \                      Figure 8: Example Path Values\n   Each operation against
        an attribute MUST be compatible with the\n   attribute's mutability and schema
        as defined in Sections 2.2 and 2.3\n   of [RFC7643].  For example, a client
        MUST NOT modify an attribute\n   that has mutability \"readOnly\" or \"immutable\".
        \ However, a client MAY\n   \"add\" a value to an \"immutable\" attribute
        if the attribute had no\n   previous value.  An operation that is not compatible
        with an\n   attribute's mutability or schema SHALL return the appropriate
        HTTP\n   response status code and a JSON detail error response as defined
        in\n   Section 3.12.\n   The attribute notation rules described in Section
        3.10 apply for\n   describing attribute paths.  For all operations, the value
        of the\n   \"schemas\" attribute on the SCIM service provider's representation
        of\n   the resource SHALL be assumed by default.  If one of the PATCH\n   operations
        modifies the \"schemas\" attribute, subsequent operations\n   SHALL assume
        the modified state of the \"schemas\" attribute.  Clients\n   MAY implicitly
        modify the \"schemas\" attribute by adding (or\n   replacing) an attribute
        with its fully qualified name, including\n   schema URN.  For example, adding
        the attribute \"urn:ietf:params:scim:\n   schemas:extension:enterprise:2.0:User:employeeNumber\"
        automatically\n   adds the value\n   \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"
        to the\n   resource's \"schemas\" attribute.\n   Each PATCH operation represents
        a single action to be applied to the\n   same SCIM resource specified by the
        request URI.  Operations are\n   applied sequentially in the order they appear
        in the array.  Each\n   operation in the sequence is applied to the target
        resource; the\n   resulting resource becomes the target of the next operation.\n
        \  Evaluation continues until all operations are successfully applied or\n
        \  until an error condition is encountered.\n   For multi-valued attributes,
        a PATCH operation that sets a value's\n   \"primary\" sub-attribute to \"true\"
        SHALL cause the server to\n   automatically set \"primary\" to \"false\" for
        any other values in the\n   array.\n   A PATCH request, regardless of the
        number of operations, SHALL be\n   treated as atomic.  If a single operation
        encounters an error\n   condition, the original SCIM resource MUST be restored,
        and a failure\n   status SHALL be returned.\n   If a request fails, the server
        SHALL return an HTTP response status\n   code and a JSON detail error response
        as defined in Section 3.12.\n   On successful completion, the server either
        MUST return a 200 OK\n   response code and the entire resource within the
        response body,\n   subject to the \"attributes\" query parameter (see Section
        3.9), or MAY\n   return HTTP status code 204 (No Content) and the appropriate
        response\n   headers for a successful PATCH request.  The server MUST return
        a 200\n   OK if the \"attributes\" parameter is specified in the request.\n"
      - contents:
        - "3.5.2.1.  Add Operation\n   The \"add\" operation is used to add a new
          attribute value to an\n   existing resource.\n   The operation MUST contain
          a \"value\" member whose content specifies\n   the value to be added.  The
          value MAY be a quoted value, or it may be\n   a JSON object containing the
          sub-attributes of the complex attribute\n   specified in the operation's
          \"path\".\n   The result of the add operation depends upon what the target
          location\n   indicated by \"path\" references:\n   o  If omitted, the target
          location is assumed to be the resource\n      itself.  The \"value\" parameter
          contains a set of attributes to be\n      added to the resource.\n   o  If
          the target location does not exist, the attribute and value are\n      added.\n
          \  o  If the target location specifies a complex attribute, a set of\n      sub-attributes
          SHALL be specified in the \"value\" parameter.\n   o  If the target location
          specifies a multi-valued attribute, a new\n      value is added to the attribute.\n
          \  o  If the target location specifies a single-valued attribute, the\n
          \     existing value is replaced.\n   o  If the target location specifies
          an attribute that does not exist\n      (has no value), the attribute is
          added with the new value.\n   o  If the target location exists, the value
          is replaced.\n   o  If the target location already contains the value specified,
          no\n      changes SHOULD be made to the resource, and a success response\n
          \     SHOULD be returned.  Unless other operations change the resource,\n
          \     this operation SHALL NOT change the modify timestamp of the\n      resource.\n
          \  The following example shows how to add a member to a group.  Some\n   text
          was removed for readability (indicated by \"...\"):\n   PATCH /Groups/acbf3ae7-8463-...-9b4da3f908ce\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   { \"schemas\":\n      [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\":[\n       {\n        \"op\":\"add\",\n        \"path\":\"members\",\n
          \       \"value\":[\n         {\n           \"display\": \"Babs Jensen\",\n
          \          \"$ref\":\n   \"https://example.com/v2/Users/2819c223...413861904646\",\n
          \          \"value\": \"2819c223-7f76-453a-919d-413861904646\"\n         }\n
          \       ]\n       }\n     ]\n   }\n   If the user was already a member of
          this group, no changes should be\n   made to the resource, and a success
          response should be returned.\n   The server responds with either the entire
          updated Group or no\n   response body:\n   HTTP/1.1 204 No Content\n   Authorization:
          Bearer h480djs93hd8\n   ETag: W/\"b431af54f0671a2\"\n   Location:\n   \"https://example.com/Groups/acbf3ae7-8463-...-9b4da3f908ce\"\n
          \  The following example shows how to add one or more attributes to a\n
          \  User resource without using a \"path\" attribute.\n   PATCH /Users/2819c223-7f76-453a-919d-413861904646\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\":[{\n       \"op\":\"add\",\n       \"value\":{\n         \"emails\":[\n
          \          {\n             \"value\":\"babs@jensen.org\",\n             \"type\":\"home\"\n
          \          }\n         ],\n         \"nickname\":\"Babs\"\n     }]\n   }\n
          \  In the above example, an additional value is added to the\n   multi-valued
          attribute \"emails\".  The second attribute, \"nickname\",\n   is added
          to the User resource.  If the resource already had an\n   existing \"nickname\",
          the value is replaced per the processing rules\n   above for single-valued
          attributes.\n"
        title: 3.5.2.1.  Add Operation
      - contents:
        - "3.5.2.2.  Remove Operation\n   The \"remove\" operation removes the value
          at the target location\n   specified by the required attribute \"path\".
          \ The operation performs\n   the following functions, depending on the target
          location specified\n   by \"path\":\n   o  If \"path\" is unspecified, the
          operation fails with HTTP status\n      code 400 and a \"scimType\" error
          code of \"noTarget\".\n   o  If the target location is a single-value attribute,
          the attribute\n      and its associated value is removed, and the attribute
          SHALL be\n      considered unassigned.\n   o  If the target location is
          a multi-valued attribute and no filter\n      is specified, the attribute
          and all values are removed, and the\n      attribute SHALL be considered
          unassigned.\n   o  If the target location is a multi-valued attribute and
          a complex\n      filter is specified comparing a \"value\", the values matched
          by the\n      filter are removed.  If no other values remain after removal
          of\n      the selected values, the multi-valued attribute SHALL be\n      considered
          unassigned.\n   o  If the target location is a complex multi-valued attribute
          and a\n      complex filter is specified based on the attribute's\n      sub-attributes,
          the matching records are removed.  Sub-attributes\n      whose values have
          been removed SHALL be considered unassigned.  If\n      the complex multi-valued
          attribute has no remaining records, the\n      attribute SHALL be considered
          unassigned.\n   If an attribute is removed or becomes unassigned and is
          defined as a\n   required attribute or a read-only attribute, the server
          SHALL return\n   an HTTP response status code and a JSON detail error response
          as\n   defined in Section 3.12, with a \"scimType\" error code of\n   \"mutability\".\n
          \  The following example shows how to remove a member from a group.  As\n
          \  with the previous example, the \"display\" sub-attribute is optional.\n
          \  If the user was not a member of this group, no changes should be made\n
          \  to the resource, and a success response should be returned.\n   Note
          that server responses have been omitted for the rest of the\n   PATCH examples.\n
          \  Remove a single member from a group.  Some text was removed for\n   readability
          (indicated by \"...\"):\n   PATCH /Groups/acbf3ae7-8463-...-9b4da3f908ce\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n      [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\":[{\n       \"op\":\"remove\",\n       \"path\":\"members[value
          eq \\\"2819c223-7f76-...413861904646\\\"]\"\n     }]\n   }\n   Remove all
          members of a group:\n   PATCH /Groups/acbf3ae7-8463-...-9b4da3f908ce\n   Host:
          example.com\n   Accept: application/scim+json\n   Content-Type: application/scim+json\n
          \  Authorization: Bearer h480djs93hd8\n   If-Match: W/\"a330bc54f0671c9\"\n
          \  { \"schemas\":\n      [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\":[{\n       \"op\":\"remove\",\"path\":\"members\"\n
          \    }]\n   }\n   Removal of a value from a complex multi-valued attribute
          (request\n   headers removed for brevity):\n   {\n     \"schemas\":\n      [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [{\n     \"op\":\"remove\",\n     \"path\":\"emails[type
          eq \\\"work\\\" and value ew \\\"example.com\\\"]\"\n     }]\n   }\n   Example
          request to remove and add a member.  Some text was removed\n   for readability
          (indicated by \"...\"):\n   PATCH /Groups/acbf3ae7-8463-...-9b4da3f908ce\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   { \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [\n       {\n         \"op\":\"remove\",\n         \"path\":\n
          \          \"members[value eq\\\"2819c223...919d-413861904646\\\"]\"\n       },\n
          \      {\n         \"op\":\"add\",\n         \"path\":\"members\",\n         \"value\":
          [\n           {\n             \"display\": \"James Smith\",\n             \"$ref\":\n
          \  \"https://example.com/v2/Users/08e1d05d...473d93df9210\",\n             \"value\":
          \"08e1d05d...473d93df9210\"\n           }\n         ]\n       }\n     ]\n
          \  }\n   The following example shows how to replace all of the members of
          a\n   group with a different members list.  Some text was removed for\n
          \  readability (indicated by \"...\"):\n   PATCH /Groups/acbf3ae7-8463-4692-b4fd-9b4da3f908ce\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [\n       {\n         \"op\":\"remove\",\"path\":\"members\"\n
          \      },\n       {\n         \"op\":\"add\",\n         \"path\":\"members\",\n
          \        \"value\":[\n         {\n           \"display\": \"Babs Jensen\",\n
          \          \"$ref\":\n   \"https://example.com/v2/Users/2819c223...413861904646\",\n
          \          \"value\": \"2819c223-7f76-453a-919d-413861904646\"\n         },\n
          \        {\n           \"display\": \"James Smith\",\n           \"$ref\":\n
          \  \"https://example.com/v2/Users/08e1d05d...473d93df9210\",\n           \"value\":
          \"08e1d05d-121c-4561-8b96-473d93df9210\"\n         }]\n       }\n     ]\n
          \  }\n"
        title: 3.5.2.2.  Remove Operation
      - contents:
        - "3.5.2.3.  Replace Operation\n   The \"replace\" operation replaces the
          value at the target location\n   specified by the \"path\".  The operation
          performs the following\n   functions, depending on the target location specified
          by \"path\":\n   o  If the \"path\" parameter is omitted, the target is
          assumed to be\n      the resource itself.  In this case, the \"value\" attribute
          SHALL\n      contain a list of one or more attributes that are to be replaced.\n
          \  o  If the target location is a single-value attribute, the attributes\n
          \     value is replaced.\n   o  If the target location is a multi-valued
          attribute and no filter\n      is specified, the attribute and all values
          are replaced.\n   o  If the target location path specifies an attribute
          that does not\n      exist, the service provider SHALL treat the operation
          as an \"add\".\n   o  If the target location specifies a complex attribute,
          a set of\n      sub-attributes SHALL be specified in the \"value\" parameter,
          which\n      replaces any existing values or adds where an attribute did
          not\n      previously exist.  Sub-attributes that are not specified in the\n
          \     \"value\" parameter are left unchanged.\n   o  If the target location
          is a multi-valued attribute and a value\n      selection (\"valuePath\")
          filter is specified that matches one or\n      more values of the multi-valued
          attribute, then all matching\n      record values SHALL be replaced.\n   o
          \ If the target location is a complex multi-valued attribute with a\n      value
          selection filter (\"valuePath\") and a specific sub-attribute\n      (e.g.,
          \"addresses[type eq \"work\"].streetAddress\"), the matching\n      sub-attribute
          of all matching records is replaced.\n   o  If the target location is a
          multi-valued attribute for which a\n      value selection filter (\"valuePath\")
          has been supplied and no\n      record match was made, the service provider
          SHALL indicate failure\n      by returning HTTP status code 400 and a \"scimType\"
          error code of\n      \"noTarget\".\n   The following example shows how to
          replace all of the members of a\n   group with a different members list
          in a single replace operation.\n   Some text was removed for readability
          (indicated by \"...\"):\n   PATCH /Groups/acbf3ae7-8463-4692-b4fd-9b4da3f908ce\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [{\n       \"op\":\"replace\",\n       \"path\":\"members\",\n
          \      \"value\":[\n         {\n           \"display\": \"Babs Jensen\",\n
          \          \"$ref\":\n   \"https://example.com/v2/Users/2819c223...413861904646\",\n
          \          \"value\": \"2819c223...413861904646\"\n         },\n         {\n
          \          \"display\": \"James Smith\",\n           \"$ref\":\n   \"https://example.com/v2/Users/08e1d05d...473d93df9210\",\n
          \          \"value\": \"08e1d05d...473d93df9210\"\n         }\n       ]\n
          \    }]\n   }\n   The following example shows how to change a User's entire
          \"work\"\n   address, using a \"valuePath\" filter.  Note that by setting
          \"primary\"\n   to \"true\", the service provider will reset \"primary\"
          to \"false\" for\n   any other existing values of \"addresses\".\n   PATCH
          /Users/2819c223-7f76-453a-919d-413861904646\n   Host: example.com\n   Accept:
          application/scim+json\n   Content-Type: application/scim+json\n   Authorization:
          Bearer h480djs93hd8\n   If-Match: W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n
          \      [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n     \"Operations\":
          [{\n       \"op\":\"replace\",\n       \"path\":\"addresses[type eq \\\"work\\\"]\",\n
          \      \"value\":\n       {\n         \"type\": \"work\",\n         \"streetAddress\":
          \"911 Universal City Plaza\",\n         \"locality\": \"Hollywood\",\n         \"region\":
          \"CA\",\n         \"postalCode\": \"91608\",\n         \"country\": \"US\",\n
          \        \"formatted\":\n   \"911 Universal City Plaza\\nHollywood, CA 91608
          US\",\n         \"primary\": true\n       }\n     }]\n   }\n   The following
          example shows how to change a specific sub-attribute\n   \"streetAddress\"
          of complex attribute \"emails\" selected by a\n   \"valuePath\" filter:\n
          \  PATCH /Users/2819c223-7f76-453a-919d-413861904646\n   Host: example.com\n
          \  Accept: application/scim+json\n   Content-Type: application/scim+json\n
          \  Authorization: Bearer h480djs93hd8\n   If-Match: W/\"a330bc54f0671c9\"\n
          \  {\n     \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [{\n       \"op\":\"replace\",\n       \"path\":\"addresses[type
          eq \\\"work\\\"].streetAddress\",\n       \"value\":\"1010 Broadway Ave\"\n
          \    }]\n   }\n   The following example shows how to replace all values
          of one or more\n   specific attributes of a User resource.  Note that other
          attributes\n   are unaffected.\n   PATCH /Users/2819c223-7f76-453a-919d-413861904646\n
          \  Host: example.com\n   Accept: application/scim+json\n   Content-Type:
          application/scim+json\n   Authorization: Bearer h480djs93hd8\n   If-Match:
          W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":\n       [\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n
          \    \"Operations\": [{\n       \"op\":\"replace\",\n       \"value\":{\n
          \        \"emails\":[\n           {\n             \"value\":\"bjensen@example.com\",\n
          \            \"type\":\"work\",\n             \"primary\":true\n           },\n
          \          {\n             \"value\":\"babs@jensen.org\",\n             \"type\":\"home\"\n
          \          }\n         ],\n         \"nickname\":\"Babs\"\n     }]\n   }\n"
        title: 3.5.2.3.  Replace Operation
      title: 3.5.2.  Modifying with PATCH
    title: 3.5.  Modifying Resources
  - contents:
    - "3.6.  Deleting Resources\n   Clients request resource removal via DELETE.  Service
      providers MAY\n   choose not to permanently delete the resource but MUST return
      a 404\n   (Not Found) error code for all operations associated with the\n   previously
      deleted resource.  Service providers MUST omit the\n   resource from future
      query results.  In addition, the service\n   provider SHOULD NOT consider the
      deleted resource in conflict\n   calculation.  For example, if a User resource
      is deleted, a CREATE\n   request for a User resource with the same userName
      as the previously\n   deleted resource SHOULD NOT fail with a 409 error due
      to userName\n   conflict.\n            DELETE /Users/2819c223-7f76-453a-919d-413861904646\n
      \           Host: example.com\n            Authorization: Bearer h480djs93hd8\n
      \           If-Match: W/\"c310cd84f0281b7\"\n   In response to a successful
      DELETE, the server SHALL return a\n   successful HTTP status code 204 (No Content).
      \ A non-normative\n   example response:\n                          HTTP/1.1
      204 No Content\n   Example: Client's attempt to retrieve the previously deleted
      User\n              GET /Users/2819c223-7f76-453a-919d-413861904646\n              Host:
      example.com\n              Authorization: Bearer h480djs93hd8\n   Server response:\n
      \  HTTP/1.1 404 Not Found\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
      \    \"detail\":\"Resource 2819c223-7f76-453a-919d-413861904646 not found\",\n
      \    \"status\": \"404\"\n   }\n"
    title: 3.6.  Deleting Resources
  - contents:
    - "3.7.  Bulk Operations\n   The SCIM bulk operation is an optional server feature
      that enables\n   clients to send a potentially large collection of resource
      operations\n   in a single request.  Support for bulk requests can be discovered
      by\n   querying the service provider configuration (see Section 4).  The\n   body
      of a bulk operation contains a set of HTTP resource operations\n   using one
      of the HTTP methods supported by the API, i.e., POST, PUT,\n   PATCH, or DELETE.\n
      \  Bulk requests are identified using the following schema URI:\n   \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\".
      \ Bulk responses\n   are identified using the following URI:\n   \"urn:ietf:params:scim:api:messages:2.0:BulkResponse\".
      \ Bulk requests\n   and bulk responses share many attributes.  Unless otherwise\n
      \  specified, each attribute below is present in both bulk requests and\n   bulk
      responses.\n   The following singular attribute is defined, in addition to the\n
      \  common attributes defined in [RFC7643].\n   failOnErrors\n      An integer
      specifying the number of errors that the service\n      provider will accept
      before the operation is terminated and an\n      error response is returned.
      \ OPTIONAL in a request.  Not valid in\n      a response.\n   The following
      complex multi-valued attribute is defined, in addition\n   to the common attributes
      defined in [RFC7643].\n   Operations\n      Defines operations within a bulk
      job.  Each operation corresponds\n      to a single HTTP request against a resource
      endpoint.  REQUIRED.\n      The Operations attribute has the following sub-attributes:\n
      \     method  The HTTP method of the current operation.  Possible values\n         are
      \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".  REQUIRED.\n      bulkId  The transient
      identifier of a newly created resource,\n         unique within a bulk request
      and created by the client.  The\n         bulkId serves as a surrogate resource
      id enabling clients to\n         uniquely identify newly created resources in
      the response and\n         cross-reference new resources in and across operations
      within a\n         bulk request.  REQUIRED when \"method\" is \"POST\".\n      version
      \ The current resource version.  Version MAY be used if the\n         service
      provider supports entity-tags (ETags) (Section 2.3 of\n         [RFC7232]) and
      \"method\" is \"PUT\", \"PATCH\", or \"DELETE\".\n      path  The resource's
      relative path to the SCIM service provider's\n         root.  If \"method\"
      is \"POST\", the value must specify a resource\n         type endpoint, e.g.,
      /Users or /Groups, whereas all other\n         \"method\" values must specify
      the path to a specific resource,\n         e.g., /Users/2819c223-7f76-453a-919d-413861904646.
      \ REQUIRED in\n         a request.\n      data  The resource data as it would
      appear for a single SCIM POST,\n         PUT, or PATCH operation.  REQUIRED
      in a request when \"method\"\n         is \"POST\", \"PUT\", or \"PATCH\".\n
      \     location  The resource endpoint URL.  REQUIRED in a response,\n         except
      in the event of a POST failure.\n      response  The HTTP response body for
      the specified request\n         operation.  When indicating a response with
      an HTTP status\n         other than a 200-series response, the response body
      MUST be\n         included.  For normal completion, the server MAY elect to
      omit\n         the response body.\n      status  The HTTP response status code
      for the requested operation.\n         When indicating an error, the \"response\"
      attribute MUST contain\n         the detail error response as per Section 3.12.\n
      \  If a bulk job is processed successfully, HTTP response code 200 OK\n   MUST
      be returned; otherwise, an appropriate HTTP error code MUST be\n   returned.\n
      \  The service provider MUST continue performing as many changes as\n   possible
      and disregard partial failures.  The client MAY override\n   this behavior by
      specifying a value for the \"failOnErrors\" attribute.\n   The \"failOnErrors\"
      attribute defines the number of errors that the\n   service provider should
      accept before failing the remaining\n   operations returning the response.\n
      \  To be able to reference a newly created resource, the bulkId\n   attribute
      MAY be specified when creating new resources.  The \"bulkId\"\n   is defined
      by the client as a surrogate identifier in a POST\n   operation (see Section
      3.7.2).  The service provider MUST return the\n   same \"bulkId\" together with
      the newly created resource.  The \"bulkId\"\n   can then be used by the client
      to map the service provider id with\n   the \"bulkId\" of the created resource.\n
      \  A SCIM service provider MAY elect to optimize the sequence of\n   operations
      received (e.g., to improve processing performance).  When\n   doing so, the
      service provider MUST ensure that the client's intent\n   is preserved and the
      same stateful result is achieved as for\n   non-optimized processing.  For example,
      before a \"User\" can be added\n   to a \"Group\", they must first be created.
      \ Processing these requests\n   out of order might result in a failure to add
      the new \"User\" to the\n   \"Group\".\n"
    - contents:
      - "3.7.1.  Circular Reference Processing\n   The service provider MUST try to
        resolve circular cross-references\n   between resources in a single bulk job
        but MAY stop after a failed\n   attempt and instead return HTTP status code
        409 (Conflict).  The\n   following example exhibits the potential conflict.\n
        \  POST /v2/Bulk\n   Host: example.com\n   Accept: application/scim+json\n
        \  Content-Type: application/scim+json\n   Authorization: Bearer h480djs93hd8\n
        \  Content-Length: ...\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n
        \    \"Operations\": [\n       {\n         \"method\": \"POST\",\n         \"path\":
        \"/Groups\",\n         \"bulkId\": \"qwerty\",\n         \"data\": {\n           \"schemas\":
        [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n           \"displayName\":
        \"Group A\",\n           \"members\": [\n             {\n               \"type\":
        \"Group\",\n               \"value\": \"bulkId:ytrewq\"\n             }\n
        \          ]\n         }\n       },\n       {\n         \"method\": \"POST\",\n
        \        \"path\": \"/Groups\",\n         \"bulkId\": \"ytrewq\",\n         \"data\":
        {\n           \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n
        \          \"displayName\": \"Group B\",\n           \"members\": [\n             {\n
        \              \"type\": \"Group\",\n               \"value\": \"bulkId:qwerty\"\n
        \            }\n           ]\n         }\n       }\n     ]\n   }\n   If the
        service provider resolved the above circular references, the\n   following
        is returned from a subsequent GET request.\n   GET /v2/Groups?filter=displayName
        sw 'Group'\n   Host: example.com\n   Accept: application/scim+json\n   Authorization:
        Bearer h480djs93hd8\n   HTTP/1.1 200 OK\n   Content-Type: application/scim+json\n
        \  {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n
        \    \"totalResults\": 2,\n     \"Resources\": [\n       {\n         \"id\":
        \"c3a26dd3-27a0-4dec-a2ac-ce211e105f97\",\n         \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n
        \        \"displayName\": \"Group A\",\n         \"meta\": {\n           \"resourceType\":
        \"Group\",\n           \"created\": \"2011-08-01T18:29:49.793Z\",\n           \"lastModified\":
        \"2011-08-01T18:29:51.135Z\",\n           \"location\":\n   \"https://example.com/v2/Groups/c3a26dd3-27a0-4dec-a2ac-ce211e105f97\",\n
        \          \"version\": \"W\\/\\\"mvwNGaxB5SDq074p\\\"\"\n         },\n         \"members\":
        [\n           {\n             \"value\": \"6c5bb468-14b2-4183-baf2-06d523e03bd3\",\n
        \            \"$ref\":\n   \"https://example.com/v2/Groups/6c5bb468-14b2-4183-baf2-06d523e03bd3\",\n
        \            \"type\": \"Group\"\n           }\n         ]\n       },\n       {\n
        \        \"id\": \"6c5bb468-14b2-4183-baf2-06d523e03bd3\",\n         \"schemas\":
        [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n         \"displayName\":
        \"Group B\",\n         \"meta\": {\n           \"resourceType\": \"Group\",\n
        \          \"created\": \"2011-08-01T18:29:50.873Z\",\n           \"lastModified\":
        \"2011-08-01T18:29:50.873Z\",\n           \"location\":\n   \"https://example.com/v2/Groups/6c5bb468-14b2-4183-baf2-06d523e03bd3\",\n
        \          \"version\": \"W\\/\\\"wGB85s2QJMjiNnuI\\\"\"\n         },\n         \"members\":
        [\n           {\n             \"value\": \"c3a26dd3-27a0-4dec-a2ac-ce211e105f97\",\n
        \            \"$ref\":\n   \"https://example.com/v2/Groups/c3a26dd3-27a0-4dec-a2ac-ce211e105f97\",\n
        \            \"type\": \"Group\"\n           }\n         ]\n       }\n     ]\n
        \  }\n"
      title: 3.7.1.  Circular Reference Processing
    - contents:
      - "3.7.2.  \"bulkId\" Temporary Identifiers\n   A SCIM client can, within one
        bulk operation, create a new \"User\",\n   create a new \"Group\", and add
        the newly created \"User\" to the newly\n   created \"Group\".  In order to
        add the new \"User\" to the \"Group\", the\n   client must use the surrogate
        id attribute, \"bulkId\", to reference\n   the User.  The \"bulkId\" attribute
        value must be prepended with the\n   literal \"bulkId:\"; e.g., if the bulkId
        is 'qwerty', the value is\n   \"bulkId:qwerty\".  The service provider MUST
        replace the string\n   \"bulkId:qwerty\" with the permanent resource id once
        created.\n   To create multiple distinct requests, each with their own \"bulkId\",\n
        \  the SCIM client specifies different \"bulkId\" values for each separate\n
        \  request.\n   The following example creates a User with the \"userName\"
        'Alice' and\n   a \"Group\" with \"displayName\", with a value of \"Tour Guides\"
        with\n   Alice as a member.  Notice that each operation has its own \"bulkId\"\n
        \  value.  However, the second operation (whose \"bulkId\" is \"ytrewq\")\n
        \  refers to the \"bulkId\" of \"qwerty\" in order to add Alice to the new\n
        \  'Tour Guides' group.\n   POST /v2/Bulk\n   Host: example.com\n   Accept:
        application/scim+json\n   Content-Type: application/scim+json\n   Authorization:
        Bearer h480djs93hd8\n   Content-Length: ...\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n
        \    \"Operations\": [\n       {\n         \"method\": \"POST\",\n         \"path\":
        \"/Users\",\n         \"bulkId\": \"qwerty\",\n         \"data\": {\n           \"schemas\":
        [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n           \"userName\":
        \"Alice\"\n         }\n       },\n       {\n         \"method\": \"POST\",\n
        \        \"path\": \"/Groups\",\n         \"bulkId\": \"ytrewq\",\n         \"data\":
        {\n           \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n
        \          \"displayName\": \"Tour Guides\",\n           \"members\": [\n
        \            {\n               \"type\": \"User\",\n               \"value\":
        \"bulkId:qwerty\"\n             }\n           ]\n         }\n       }\n     ]\n
        \  }\n   The service provider returns the following response:\n   HTTP/1.1
        200 OK\n   Content-Type: application/scim+json\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkResponse\"],\n
        \    \"Operations\": [\n       {\n         \"location\":\n   \"https://example.com/v2/Users/92b725cd-9465-4e7d-8c16-01f8e146b87a\",\n
        \        \"method\": \"POST\",\n         \"bulkId\": \"qwerty\",\n         \"version\":
        \"W\\/\\\"4weymrEsh5O6cAEK\\\"\",\n         \"status\": {\n           \"code\":
        \"201\"\n         }\n       },\n       {\n         \"location\":\n   \"https://example.com/v2/Groups/e9e30dba-f08f-4109-8486-d5c6a331660a\",\n
        \        \"method\": \"POST\",\n         \"bulkId\": \"ytrewq\",\n         \"version\":
        \"W\\/\\\"lha5bbazU3fNvfe5\\\"\",\n         \"status\": {\n           \"code\":
        \"201\"\n         }\n       }\n     ]\n   }\n   In the above example, the
        \"Alice\" User resource has an \"id\" of\n   \"92b725cd-9465-4e7d-8c16-01f8e146b87a\"
        and the 'Tour Guides' Group\n   has an \"id\" of \"e9e30dba-f08f-4109-8486-d5c6a331660a\".\n
        \  A subsequent GET request for the 'Tour Guides' Group (with an \"id\" of\n
        \  \"e9e30dba-f08f-4109-8486-d5c6a331660a\") returns the following, with\n
        \  Alice's \"id\" as the value for the member in the Group 'Tour Guides':\n
        \  HTTP/1.1 200 OK\n   Content-Type: application/scim+json\n   Location:\n
        \   https://example.com/v2/Groups/e9e30dba-f08f-4109-8486-d5c6a331660a\n   ETag:
        W/\"lha5bbazU3fNvfe5\"\n   {\n     \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:Group\"],\n
        \    \"id\": \"e9e30dba-f08f-4109-8486-d5c6a331660a\",\n     \"displayName\":
        \"Tour Guides\",\n     \"meta\": {\n       \"resourceType\": \"Group\",\n
        \      \"created\": \"2011-08-01T18:29:49.793Z\",\n       \"lastModified\":
        \"2011-08-01T20:31:02.315Z\",\n       \"location\":\n   \"https://example.com/v2/Groups/e9e30dba-f08f-4109-8486-d5c6a331660a\",\n
        \      \"version\": \"W\\/\\\"lha5bbazU3fNvfe5\\\"\"\n     },\n     \"members\":
        [\n       {\n         \"value\": \"92b725cd-9465-4e7d-8c16-01f8e146b87a\",\n
        \        \"$ref\":\n   \"https://example.com/v2/Users/92b725cd-9465-4e7d-8c16-01f8e146b87a\",\n
        \        \"type\": \"User\"\n       }\n     ]\n   }\n   Extensions that include
        references to other resources MUST be handled\n   in the same way by the service
        provider.  The following example uses\n   the bulkId attribute within the
        enterprise extension managerId\n   attribute.\n POST /v2/Bulk\n Host: example.com\n
        Accept: application/scim+json\n Content-Type: application/scim+json\n Authorization:
        Bearer h480djs93hd8\n Content-Length: ...\n {\n   \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n
        \  \"Operations\": [\n     {\n       \"method\": \"POST\",\n       \"path\":
        \"/Users\",\n       \"bulkId\": \"qwerty\",\n       \"data\": {\n         \"schemas\":
        [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n         \"userName\":
        \"Alice\"\n       }\n     },\n     {\n       \"method\": \"POST\",\n       \"path\":
        \"/Users\",\n       \"bulkId\": \"ytrewq\",\n       \"data\": {\n         \"schemas\":
        [\n           \"urn:ietf:params:scim:schemas:core:2.0:User\",\n           \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n
        \        ],\n         \"userName\": \"Bob\",\n         \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\":
        {\n           \"employeeNumber\": \"11250\",\n           \"manager\": {\n
        \            \"value\": \"bulkId:qwerty\"\n           }\n         }\n       }\n
        \    }\n   ]\n }\n"
      title: 3.7.2.  "bulkId" Temporary Identifiers
    - contents:
      - "3.7.3.  Response and Error Handling\n   The service provider response MUST
        include the result of all\n   processed operations.  A \"location\" attribute
        that includes the\n   resource's endpoint MUST be returned for all operations
        except for\n   failed POST operations (which have no location).  The status\n
        \  attribute includes information about the success or failure of one\n   operation
        within the bulk job.  The status attribute MUST include the\n   code attribute
        that holds the HTTP response code that would have been\n   returned if a single
        HTTP request would have been used.  If an error\n   occurred, the status MUST
        also include the description attribute\n   containing a human-readable explanation
        of the error.\n   \"status\": \"201\"\n   The following is an example of a
        status in a failed operation.\n  \"status\": \"400\",\n  \"response\":{\n
        \      \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n       \"scimType\":\"invalidSyntax\"\n
        \      \"detail\":\n  \"Request is unparsable, syntactically incorrect, or
        violates schema.\",\n       \"status\":\"400\"\n   }\n   The following example
        shows how to add, update, and remove a user.\n   The \"failOnErrors\" attribute
        is set to '1', indicating that the\n   service provider will stop processing
        and return results after one\n   error.  The POST operation's bulkId value
        is set to 'qwerty',\n   enabling the client to match the new User with the
        returned\n   resource \"id\" of\n   \"92b725cd-9465-4e7d-8c16-01f8e146b87a\".\n
        \  POST /v2/Bulk\n   Host: example.com\n   Accept: application/scim+json\n
        \  Content-Type: application/scim+json\n   Authorization: Bearer h480djs93hd8\n
        \  Content-Length: ...\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\n
        \    \"failOnErrors\":1,\n     \"Operations\":[\n       {\n         \"method\":\"POST\",\n
        \        \"path\":\"/Users\",\n         \"bulkId\":\"qwerty\",\n         \"data\":{\n
        \          \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:User\"],\n
        \          \"userName\":\"Alice\"\n         }\n       },\n       {\n         \"method\":\"PUT\",\n
        \        \"path\":\"/Users/b7c14771-226c-4d05-8860-134711653041\",\n         \"version\":\"W\\/\\\"3694e05e9dff591\\\"\",\n
        \        \"data\":{\n           \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
        \          \"id\":\"b7c14771-226c-4d05-8860-134711653041\",\n           \"userName\":\"Bob\"\n
        \        }\n       },\n       {\n         \"method\": \"PATCH\",\n         \"path\":
        \"/Users/5d8d29d3-342c-4b5f-8683-a3cb6763ffcc\",\n         \"version\": \"W/\\\"edac3253e2c0ef2\\\"\",\n
        \        \"data\": {[\n           {\n               \"op\": \"remove\",\n
        \              \"path\": \"nickName\"\n           },\n           {\n               \"op\":
        \"add\",\n               \"path\": \"userName\",\n               \"value\":
        \"Dave\"\n           }\n         ]}\n       },\n       {\n         \"method\":\"DELETE\",\n
        \        \"path\":\"/Users/e9025315-6bea-44e1-899c-1e07454e468b\",\n         \"version\":\"W\\/\\\"0ee8add0a938e1a\\\"\"\n
        \      }\n     ]\n   }\n   The service provider returns the following response:\n
        \ HTTP/1.1 200 OK\n  Content-Type: application/scim+json\n  {\n      \"schemas\":
        [\"urn:ietf:params:scim:api:messages:2.0:BulkResponse\"],\n      \"Operations\":
        [\n          {\n              \"location\":\n  \"https://example.com/v2/Users/92b725cd-9465-4e7d-8c16-01f8e146b87a\",\n
        \             \"method\": \"POST\",\n              \"bulkId\": \"qwerty\",\n
        \             \"version\": \"W\\/\\\"oY4m4wn58tkVjJxK\\\"\",\n              \"status\":
        \"201\"\n          },\n          {\n              \"location\":\n  \"https://example.com/v2/Users/b7c14771-226c-4d05-8860-134711653041\",\n
        \             \"method\": \"PUT\",\n              \"version\": \"W\\/\\\"huJj29dMNgu3WXPD\\\"\",\n
        \             \"status\": \"200\"\n          },\n          {\n              \"location\":\n
        \ \"https://example.com/v2/Users/5d8d29d3-342c-4b5f-8683-a3cb6763ffcc\",\n
        \             \"method\": \"PATCH\",\n              \"version\": \"W\\/\\\"huJj29dMNgu3WXPD\\\"\",\n
        \             \"status\": \"200\"\n          },\n          {\n              \"location\":\n
        \ \"https://example.com/v2/Users/e9025315-6bea-44e1-899c-1e07454e468b\",\n
        \             \"method\": \"DELETE\",\n              \"status\": \"204\"\n
        \         }\n      ]\n  }\n   The following response is returned if an error
        occurred when\n   attempting to create the User 'Alice'.  The service provider
        stops\n   processing the bulk operation and immediately returns a response
        to\n   the client.  The response contains the error and any successful\n   results
        prior to the error.\n  HTTP/1.1 200 OK\n  Content-Type: application/scim+json\n
        \ {\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkResponse\"],\n
        \   \"Operations\": [\n      {\n        \"method\": \"POST\",\n        \"bulkId\":
        \"qwerty\",\n        \"status\": \"400\",\n        \"response\":{\n           \"schemas\":
        [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n           \"scimType\":\"invalidSyntax\"\n
        \          \"detail\":\n  \"Request is unparsable, syntactically incorrect,
        or violates schema.\",\n           \"status\":\"400\"\n        }\n      }\n
        \   ]\n  }\n   If the \"failOnErrors\" attribute is not specified or the service\n
        \  provider has not reached the error limit defined by the client, the\n   service
        provider will continue to process all operations.  The\n   following is an
        example in which all operations failed.\n  HTTP/1.1 200 OK\n  Content-Type:
        application/scim+json\n  {\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:BulkResponse\"],\n
        \   \"Operations\": [\n      {\n        \"method\": \"POST\",\n        \"bulkId\":
        \"qwerty\",\n        \"status\": \"400\",\n        \"response\":{\n           \"schemas\":
        [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n           \"scimType\":\"invalidSyntax\"\n
        \          \"detail\":\n  \"Request is unparsable, syntactically incorrect,
        or violates schema.\",\n           \"status\":\"400\"\n        }\n      },\n
        \     {\n        \"location\":\n  \"https://example.com/v2/Users/b7c14771-226c-4d05-8860-134711653041\",\n
        \       \"method\": \"PUT\",\n        \"status\": \"412\",\n        \"response\":{\n
        \           \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
        \           \"detail\":\n                  \"Failed to update.  Resource changed
        on the server.\",\n            \"status\":\"412\"\n        }\n      },\n      {\n
        \       \"location\":\n  \"https://example.com/v2/Users/5d8d29d3-342c-4b5f-8683-a3cb6763ffcc\",\n
        \       \"method\": \"PATCH\",\n        \"status\": \"412\",\n        \"response\":{\n
        \           \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
        \           \"detail\":\n                  \"Failed to update.  Resource changed
        on the server.\",\n            \"status\":\"412\"\n        }\n      },\n      {\n
        \       \"location\":\n  \"https://example.com/v2/Users/e9025315-6bea-44e1-899c-1e07454e468b\",\n
        \       \"method\": \"DELETE\",\n        \"status\": \"404\",\n        \"response\":{\n
        \           \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
        \           \"detail\":\"Resource does not exist.\",\n            \"status\":\"404\"\n
        \       }\n      }\n    ]\n  }\n"
      title: 3.7.3.  Response and Error Handling
    - contents:
      - "3.7.4.  Maximum Operations\n   The service provider MUST define the maximum
        number of operations and\n   maximum payload size a client may send in a single
        request.  These\n   limits MAY be retrieved from the service provider configuration
        (see\n   'bulk' in Sections 5 and 8.5 of [RFC7643]).  If either limit is\n
        \  exceeded, the service provider MUST return HTTP response code 413\n   (Payload
        Too Large).  The returned response MUST specify the limit\n   exceeded in
        the body of the error response.\n   In the following example, the client sent
        a request exceeding the\n   service provider's maximum payload size of 1 megabyte:\n
        \  POST /v2/Bulk\n   Host: example.com\n   Accept: application/scim+json\n
        \  Content-Type: application/scim+json\n   Authorization: Bearer h480djs93hd8\n
        \  Content-Length: 4294967296\n   ...\n   The server sends the following error
        in response to the oversized\n   request:\n  HTTP/1.1 413 Payload Too Large\n
        \ Content-Type: application/scim+json\n  {\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
        \   \"status\": \"413\",\n    \"detail\":\n  \"The size of the bulk operation
        exceeds the maxPayloadSize (1048576).\"\n  }\n"
      title: 3.7.4.  Maximum Operations
    title: 3.7.  Bulk Operations
  - contents:
    - "3.8.  Data Input/Output Formats\n   Servers MUST accept requests and be able
      to return JSON-structured\n   responses using UTF-8 encoding [RFC3629].  UTF-8
      SHALL be the default\n   encoding format.  Other media types MAY be supported
      by service\n   providers but are beyond the scope of this specification.\n   Clients
      using other encodings MUST specify the format in which the\n   data is submitted
      via an HTTP \"Content-Type\" header as specified in\n   Section 3.1.1.5 of [RFC7231]
      and MAY specify the desired response\n   data format via an HTTP \"Accept\"
      header (Section 5.3.2 of [RFC7231]),\n   e.g., \"Accept: application/scim+json\",
      or via URI suffix:\n   GET /Users/2819c223-7f76-453a-919d-413861904646.scim\n
      \  Host: example.com\n   Service providers MUST support the \"Accept\" header\n
      \  \"Accept: application/scim+json\" and SHOULD support the header\n   \"Accept:
      application/json\", both of which specify JSON documents\n   conforming to [RFC7159].
      \ The format defaults to\n   \"application/scim+json\" if no format is specified.\n
      \  Singular attributes are encoded as string name-value pairs in\n   JSON, e.g.,\n
      \  \"attribute\": \"value\"\n   Multi-valued attributes in JSON are encoded
      as arrays, e.g.,\n   \"attributes\": [ \"value1\", \"value2\" ]\n   Elements
      with nested elements are represented as objects in\n   JSON, e.g.,\n   \"attribute\":
      { \"subattribute1\": \"value1\", \"subattribute2\": \"value2\" }\n"
    title: 3.8.  Data Input/Output Formats
  - contents:
    - "3.9.  Additional Operation Response Parameters\n   For any SCIM operation where
      a resource representation is returned\n   (e.g., HTTP GET), the attributes returned
      are defined as the minimum\n   attribute set plus default attribute set.  The
      minimum set is\n   composed of those attributes that have their \"returned\"\n
      \  characteristic set to \"always\" (see Section 2.2 of [RFC7643]).  The\n   default
      attribute set is composed of those attributes that have the\n   \"returned\"
      characteristic set to \"default\".\n   Clients MAY request a partial resource
      representation on any\n   operation that returns a resource within the response
      by specifying\n   either of the mutually exclusive URL query parameters \"attributes\"
      or\n   \"excludedAttributes\", as follows:\n   attributes  When specified, the
      default list of attributes SHALL be\n           overridden, and each resource
      returned MUST contain the\n           minimum set of resource attributes and
      any attributes or\n           sub-attributes explicitly requested by the \"attributes\"\n
      \          parameter.  The query parameter attributes value is a\n           comma-separated
      list of resource attribute names in standard\n           attribute notation
      (Section 3.10) form (e.g., userName, name,\n           emails).\n   excludedAttributes
      \ When specified, each resource returned MUST\n           contain the minimum
      set of resource attributes.\n           Additionally, the default set of attributes
      minus those\n           attributes listed in \"excludedAttributes\" is returned.
      \ The\n           query parameter attributes value is a comma-separated list
      of\n           resource attribute names in standard attribute notation\n           (Section
      3.10) form (e.g., userName, name, emails).\n   GET /Users/2819c223-7f76-453a-919d-413861904646?attributes=userName\n
      \  Host: example.com\n   Accept: application/scim+json\n   Authorization: Bearer
      h480djs93hd8\n   The following response is returned:\n   HTTP/1.1 200 OK\n   Content-Type:
      application/scim+json\n   Location:\n    https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\n
      \  ETag: W/\"a330bc54f0671c9\"\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
      \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"userName\":\"bjensen\"\n
      \  }\n"
    title: 3.9.  Additional Operation Response Parameters
  - contents:
    - "3.10.  Attribute Notation\n   All operations share a common scheme for referencing
      simple and\n   complex attributes.  In general, attributes are uniquely identified\n
      \  by prefixing the attribute name with its schema URN separated by a\n   colon
      (\":\") character; e.g., the core User resource attribute\n   'userName' is
      identified as\n   \"urn:ietf:params:scim:schemas:core:2.0:User:userName\".  Clients
      MAY\n   omit core schema attribute URN prefixes but SHOULD fully qualify\n   extended
      attributes with the associated schema extension URN to avoid\n   naming conflicts.
      \ For example, the attribute 'age' defined in\n   \"urn:ietf:params:scim:schemas:exampleCo:2.0:hr\"
      is uniquely\n   identified as \"urn:ietf:params:scim:schemas:exampleCo:2.0:hr:age\".\n
      \  Complex attributes' sub-attributes are referenced via nested dot\n   ('.')
      notation, i.e., {urn}:{Attribute name}.{Sub-Attribute name}.\n   For example,
      the fully qualified path for a User's givenName is\n   \"urn:ietf:params:scim:schemas:core:2.0:User:name.givenName\".
      \ All\n   facets (URN, attribute, and sub-attribute name) of the fully encoded\n
      \  attribute name are case insensitive.\n"
    title: 3.10.  Attribute Notation
  - contents:
    - "3.11.  \"/Me\" Authenticated Subject Alias\n   A client MAY use a URL of the
      form \"<base-URI>/Me\" as a URI alias for\n   the User or other resource associated
      with the currently\n   authenticated subject for any SCIM operation.  A service
      provider MAY\n   respond in one of three ways:\n   o  A service provider that
      does NOT support this feature SHOULD\n      respond with HTTP status code 501
      (Not Implemented).\n   o  A service provider MAY choose to redirect the client
      using HTTP\n      status code 308 (Permanent Redirect) to the resource associated\n
      \     with the authenticated subject.  The client MAY then repeat the\n      request
      at the indicated location.\n   o  A service provider MAY process the SCIM request
      directly.  In any\n      response, the HTTP \"Location\" header MUST be the
      permanent\n      location of the aliased resource associated with the authenticated\n
      \     subject.\n   When using the SCIM Create Resource command (HTTP POST) with
      the\n   \"/Me\" alias, the desired resourceType being created is at the\n   discretion
      of the service provider, based on the authenticated\n   subject (if not anonymous)
      making the request and any request body\n   attributes (e.g., \"schemas\").
      \ See Section 7.6 for information on\n   security considerations related to
      this operation.\n"
    title: 3.11.  "/Me" Authenticated Subject Alias
  - contents:
    - "3.12.  HTTP Status and Error Response Handling\n   The SCIM protocol uses the
      HTTP response status codes defined in\n   Section 6 of [RFC7231] to indicate
      operation success or failure.  In\n   addition to returning an HTTP response
      code, implementers MUST return\n   the errors in the body of the response in
      a JSON format, using the\n   attributes described below.  Error responses are
      identified using the\n   following \"schema\" URI:\n   \"urn:ietf:params:scim:api:messages:2.0:Error\".
      \ The following\n   attributes are defined for a SCIM error response using a
      JSON body:\n   status\n      The HTTP status code (see Section 6 of [RFC7231])
      expressed as a\n      JSON string.  REQUIRED.\n   scimType\n      A SCIM detail
      error keyword.  See Table 9.  OPTIONAL.\n   detail\n      A detailed human-readable
      message.  OPTIONAL.\n   Implementers SHOULD handle the identified HTTP status
      codes as\n   described below.\n   +----------------+---------------+----------------------------------+\n
      \  | Status         | Applicability | Suggested Explanation            |\n   +----------------+---------------+----------------------------------+\n
      \  | 307 (Temporary | GET, POST,    | The client is directed to repeat |\n   |
      Redirect)      | PUT, PATCH,   | the same HTTP request at the     |\n   |                |
      DELETE        | location identified.  The client |\n   |                |               |
      SHOULD NOT use the location      |\n   |                |               | provided
      in the response as a    |\n   |                |               | permanent reference
      to the       |\n   |                |               | resource and SHOULD continue
      to  |\n   |                |               | use the original request URI     |\n
      \  |                |               | [RFC7231].                       |\n   |
      \               |               |                                  |\n   | 308
      (Permanent | GET, POST,    | The client is directed to repeat |\n   | Redirect)
      \     | PUT, PATCH,   | the same HTTP request at the     |\n   |                |
      DELETE        | location identified.  The client |\n   |                |               |
      SHOULD use the location provided |\n   |                |               | in
      the response as the permanent |\n   |                |               | reference
      to the resource        |\n   |                |               | [RFC7538].                       |\n
      \  |                |               |                                  |\n   |
      400 (Bad       | GET, POST,    | Request is unparsable,           |\n   | Request)
      \      | PUT, PATCH,   | syntactically incorrect, or      |\n   |                |
      DELETE        | violates schema.                 |\n   |                |               |
      \                                 |\n   | 401            | GET, POST,    | Authorization
      failure.  The      |\n   | (Unauthorized) | PUT, PATCH,   | authorization header
      is invalid  |\n   |                | DELETE        | or missing.                      |\n
      \  |                |               |                                  |\n   |
      403            | GET, POST,    | Operation is not permitted based |\n   | (Forbidden)
      \   | PUT, PATCH,   | on the supplied authorization.   |\n   |                |
      DELETE        |                                  |\n   |                |               |
      \                                 |\n   | 404 (Not       | GET, POST,    | Specified
      resource (e.g., User)  |\n   | Found)         | PUT, PATCH,   | or endpoint
      does not exist.      |\n   |                | DELETE        |                                  |\n
      \  |                |               |                                  |\n   |
      409 (Conflict) | POST, PUT,    | The specified version number     |\n   |                |
      PATCH, DELETE | does not match the resource's    |\n   |                |               |
      latest version number, or a      |\n   |                |               | service
      provider refused to      |\n   |                |               | create a new,
      duplicate          |\n   |                |               | resource.                        |\n
      \  |                |               |                                  |\n   |
      412            | PUT, PATCH,   | Failed to update.  Resource has  |\n   | (Precondition
      \ | DELETE        | changed on the server.           |\n   | Failed)        |
      \              |                                  |\n   |                |               |
      \                                 |\n   | 413 (Payload   | POST          | {\"maxOperations\":
      \               |\n   | Too Large)     |               | 1000,\"maxPayloadSize\":
      1048576}  |\n   |                |               |                                  |\n
      \  | 500 (Internal  | GET, POST,    | An internal error.  Implementers |\n   |
      Server Error)  | PUT, PATCH,   | SHOULD provide descriptive       |\n   |                |
      DELETE        | debugging advice.                |\n   |                |               |
      \                                 |\n   | 501 (Not       | GET, POST,    | Service
      provider does not        |\n   | Implemented)   | PUT, PATCH,   | support the
      request operation,   |\n   |                | DELETE        | e.g., PATCH.                     |\n
      \  +----------------+---------------+----------------------------------+\n                   Table
      8: SCIM HTTP Status Code Usage\n   For HTTP status code 400 (Bad Request) responses,
      the following\n   detail error types are defined:\n   +---------------+--------------------------------+------------------+\n
      \  | scimType      | Description                    | Applicability    |\n   +---------------+--------------------------------+------------------+\n
      \  | invalidFilter | The specified filter syntax    | GET (Section     |\n   |
      \              | was invalid (does not comply   | 3.4.2), POST     |\n   |               |
      with Figure 1), or the         | (Search -        |\n   |               | specified
      attribute and filter | Section 3.4.3),  |\n   |               | comparison combination
      is not  | PATCH (Path      |\n   |               | supported.                     |
      Filter - Section |\n   |               |                                | 3.5.2)
      \          |\n   |               |                                |                  |\n
      \  | tooMany       | The specified filter yields    | GET (Section     |\n   |
      \              | many more results than the     | 3.4.2), POST     |\n   |               |
      server is willing to calculate | (Search -        |\n   |               | or
      process.  For example, a    | Section 3.4.3)   |\n   |               | filter
      such as \"(userName pr)\" |                  |\n   |               | by itself
      would return all     |                  |\n   |               | entries with
      a \"userName\" and  |                  |\n   |               | MAY not be acceptable
      to the   |                  |\n   |               | service provider.              |
      \                 |\n   |               |                                |                  |\n
      \  | uniqueness    | One or more of the attribute   | POST (Create -   |\n   |
      \              | values are already in use or   | Section 3.3),    |\n   |               |
      are reserved.                  | PUT (Section     |\n   |               |                                |
      3.5.1), PATCH    |\n   |               |                                | (Section
      3.5.2)  |\n   |               |                                |                  |\n
      \  | mutability    | The attempted modification is  | PUT (Section     |\n   |
      \              | not compatible with the target | 3.5.1), PATCH    |\n   |               |
      attribute's mutability or      | (Section 3.5.2)  |\n   |               | current
      state (e.g.,           |                  |\n   |               | modification
      of an \"immutable\" |                  |\n   |               | attribute with
      an existing     |                  |\n   |               | value).                        |
      \                 |\n   |               |                                |                  |\n
      \  | invalidSyntax | The request body message       | POST (Search -   |\n   |
      \              | structure was invalid or did   | Section 3.4.3,   |\n   |               |
      not conform to the request     | Create - Section |\n   |               | schema.
      \                       | 3.3, Bulk -      |\n   |               |                                |
      Section 3.7),    |\n   |               |                                | PUT
      (Section     |\n   |               |                                | 3.5.1)
      \          |\n   |               |                                |                  |\n
      \  | invalidPath   | The \"path\" attribute was       | PATCH (Section   |\n
      \  |               | invalid or malformed (see      | 3.5.2)           |\n   |
      \              | Figure 7).                     |                  |\n   |               |
      \                               |                  |\n   | noTarget      | The
      specified \"path\" did not   | PATCH (Section   |\n   |               | yield
      an attribute or          | 3.5.2)           |\n   |               | attribute
      value that could be  |                  |\n   |               | operated on.
      \ This occurs when |                  |\n   |               | the specified
      \"path\" value     |                  |\n   |               | contains a filter
      that yields  |                  |\n   |               | no match.                      |
      \                 |\n   |               |                                |                  |\n
      \  | invalidValue  | A required value was missing,  | GET (Section     |\n   |
      \              | or the value specified was not | 3.4.2), POST     |\n   |               |
      compatible with the operation  | (Create -        |\n   |               | or
      attribute type (see Section | Section 3.3,     |\n   |               | 2.2 of
      [RFC7643]), or resource | Query - Section  |\n   |               | schema (see
      Section 4 of       | 3.4.3), PUT      |\n   |               | [RFC7643]).                    |
      (Section 3.5.1), |\n   |               |                                | PATCH
      (Section   |\n   |               |                                | 3.5.2)           |\n
      \  |               |                                |                  |\n   |
      invalidVers   | The specified SCIM protocol    | GET (Section     |\n   |               |
      version is not supported (see  | 3.4.2), POST     |\n   |               | Section
      3.13).                 | (ALL), PUT       |\n   |               |                                |
      (Section 3.5.1), |\n   |               |                                | PATCH
      (Section   |\n   |               |                                | 3.5.2),
      DELETE   |\n   |               |                                | (Section 3.6)
      \   |\n   |               |                                |                  |\n
      \  | sensitive     | The specified request cannot   | GET (Section     |\n   |
      \              | be completed, due to the       | 3.4.2)           |\n   |               |
      passing of sensitive (e.g.,    |                  |\n   |               | personal)
      information in a     |                  |\n   |               | request URI.
      \ For example,     |                  |\n   |               | personal information
      SHALL NOT |                  |\n   |               | be transmitted over request
      \   |                  |\n   |               | URIs.  See Section 7.5.2.      |
      \                 |\n   +---------------+--------------------------------+------------------+\n
      \                Table 9: SCIM Detail Error Keyword Values\n   Note that in
      Table 9 above, the information in the Applicability\n   column applies to the
      normal HTTP method but MAY apply within a SCIM\n   bulk operation (via HTTP
      POST).\n   Example of an error in response to a non-existent GET request:\n
      \  HTTP/1.1 404 Not Found\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
      \    \"detail\":\"Resource 2819c223-7f76-453a-919d-413861904646 not found\",\n
      \    \"status\": \"404\"\n   }\n   Example of an error in response to a PUT
      request:\n   HTTP/1.1 400 Bad Request\n   {\n     \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
      \    \"scimType\":\"mutability\"\n     \"detail\":\"Attribute 'id' is readOnly\",\n
      \    \"status\": \"400\"\n   }\n"
    title: 3.12.  HTTP Status and Error Response Handling
  - contents:
    - "3.13.  SCIM Protocol Versioning\n   The Base URL MAY be appended with a version
      identifier as a separate\n   segment in the URL path.  At the time of this writing,
      the identifier\n   is 'v2'.  If specified, the version identifier MUST appear
      in the URL\n   path immediately preceding the resource endpoint and conform
      to the\n   following scheme: the character 'v' followed by the desired SCIM\n
      \  version number, e.g., a version 'v2' User request is specified as\n   /v2/Users.
      \ When specified, service providers MUST perform the\n   operation using the
      desired version or reject the request.  When\n   omitted, service providers
      SHOULD perform the operation using the\n   most recent SCIM protocol version
      supported by the service provider.\n"
    title: 3.13.  SCIM Protocol Versioning
  - contents:
    - "3.14.  Versioning Resources\n   The SCIM protocol supports resource versioning
      via standard HTTP\n   ETags (Section 2.3 of [RFC7232]).  Service providers MAY
      support weak\n   ETags as the preferred mechanism for performing conditional\n
      \  retrievals and ensuring that clients do not inadvertently overwrite\n   each
      other's changes, respectively.  When supported, SCIM ETags MUST\n   be specified
      as an HTTP header and SHOULD be specified within the\n   'version' attribute
      contained in the resource's 'meta' attribute.\n   Example create request:\n
      \  POST /Users  HTTP/1.1\n   Host: example.com\n   Content-Type:  application/scim+json\n
      \  Authorization: Bearer h480djs93hd8\n   Content-Length: ...\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
      \    \"userName\":\"bjensen\",\n     \"externalId\":\"bjensen\",\n     \"name\":{\n
      \      \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n
      \      \"givenName\":\"Barbara\"\n     }\n   }\n   The server responds with
      an ETag in the response header and meta\n   structure:\n   HTTP/1.1 201 Created\n
      \  Content-Type: application/scim+json\n   Location:\n    https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\n
      \  ETag: W/\"e180ee84f0671b1\"\n   {\n     \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n
      \    \"id\":\"2819c223-7f76-453a-919d-413861904646\",\n     \"meta\":{\n       \"resourceType\":\"User\",\n
      \      \"created\":\"2011-08-01T21:32:44.882Z\",\n       \"lastModified\":\"2011-08-01T21:32:44.882Z\",\n
      \      \"location\":\n   \"https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646\",\n
      \      \"version\":\"W\\/\\\"e180ee84f0671b1\\\"\"\n     },\n     \"name\":{\n
      \      \"formatted\":\"Ms. Barbara J Jensen III\",\n       \"familyName\":\"Jensen\",\n
      \      \"givenName\":\"Barbara\"\n     },\n     \"userName\":\"bjensen\"\n   }\n
      \  With the returned ETag, clients MAY choose to retrieve the resource\n   only
      if the resource has been modified.\n   An example of conditional retrieval,
      using the If-None-Match header\n   (Section 3.2 of [RFC7232]):\n  GET /Users/2819c223-7f76-453a-919d-413861904646?attributes=displayName\n
      \ Host: example.com\n  Accept: application/scim+json\n  Authorization: Bearer
      h480djs93hd8\n  If-None-Match: W/\"e180ee84f0671b1\"\n   If the resource has
      not changed, the service provider simply returns\n   an empty body with a 304
      (Not Modified) response code.\n   If the service provider supports versioning
      of resources, the client\n   MAY supply an If-Match header (Section 3.1 of [RFC7232])
      for PUT and\n   PATCH operations to ensure that the requested operation succeeds
      only\n   if the supplied ETag matches the latest service provider resource,\n
      \  e.g., If-Match: W/\"e180ee84f0671b1\".\n"
    title: 3.14.  Versioning Resources
  title: 3.  SCIM Protocol
- contents:
  - "4.  Service Provider Configuration Endpoints\n   SCIM defines three endpoints
    to facilitate discovery of SCIM service\n   provider features and schema that
    MAY be retrieved using HTTP GET:\n   /ServiceProviderConfig\n      An HTTP GET
    to this endpoint will return a JSON structure that\n      describes the SCIM specification
    features available on a service\n      provider.  This endpoint SHALL return responses
    with a JSON object\n      using a \"schemas\" attribute of\n      \"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\".\n
    \     The attributes returned in the JSON object are defined in\n      Section
    5 of [RFC7643].  An example representation of SCIM service\n      provider configuration
    may be found in Section 8.5 of [RFC7643].\n   /Schemas\n      An HTTP GET to this
    endpoint is used to retrieve information about\n      resource schemas supported
    by a SCIM service provider.  An HTTP\n      GET to the endpoint \"/Schemas\" SHALL
    return all supported schemas\n      in ListResponse format (see Figure 3).  Individual
    schema\n      definitions can be returned by appending the schema URI to the\n
    \     /Schemas endpoint.  For example:\n            /Schemas/urn:ietf:params:scim:schemas:core:2.0:User\n
    \     The contents of each schema returned are described in Section 7 of\n      [RFC7643].
    \ An example representation of SCIM schemas may be found\n      in Section 8.7
    of [RFC7643].\n   /ResourceTypes\n      An HTTP GET to this endpoint is used to
    discover the types of\n      resources available on a SCIM service provider (e.g.,
    Users and\n      Groups).  Each resource type defines the endpoints, the core\n
    \     schema URI that defines the resource, and any supported schema\n      extensions.
    \ The attributes defining a resource type can be found\n      in Section 6 of
    [RFC7643], and an example representation can be\n      found in Section 8.6 of
    [RFC7643].\n   In cases where a request is for a specific \"ResourceType\" or\n
    \  \"Schema\", the single JSON object is returned in the same way that a\n   single
    User or Group is retrieved, as per Section 3.4.1.  When\n   returning multiple
    ResourceTypes or Schemas, the message form\n   described by the \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\n
    \  (ListResponse) form SHALL be used as shown in Figure 3 and in\n   Figure 9
    below.  Query parameters described in Section 3.4.2, such as\n   filtering, sorting,
    and pagination, SHALL be ignored.  If a \"filter\"\n   is provided, the service
    provider SHOULD respond with HTTP status\n   code 403 (Forbidden) to ensure that
    clients cannot incorrectly assume\n   that any matching conditions specified in
    a filter are true.\n   The following is a non-normative example of an HTTP GET
    to the\n   /ResourceTypes endpoint:\n  {\n    \"totalResults\":2,\n    \"itemsPerPage\":10,\n
    \   \"startIndex\":1,\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n
    \   \"Resources\":[{\n      \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"],\n
    \     \"id\":\"User\",\n      \"name\":\"User\",\n      \"endpoint\": \"/Users\",\n
    \     \"description\": \"User Account\",\n      \"schema\": \"urn:ietf:params:scim:schemas:core:2.0:User\",\n
    \     \"schemaExtensions\": [{\n        \"schema\":\n          \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\",\n
    \       \"required\": true\n      }],\n      \"meta\": {\n        \"location\":\"https://example.com/v2/ResourceTypes/User\",\n
    \       \"resourceType\": \"ResourceType\"\n      }\n    },\n   {\n     \"schemas\":
    [\"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"],\n     \"id\":\"Group\",\n
    \    \"name\":\"Group\",\n     \"endpoint\": \"/Groups\",\n     \"description\":
    \"Group\",\n     \"schema\": \"urn:ietf:params:scim:schemas:core:2.0:Group\",\n
    \    \"meta\": {\n       \"location\":\"https://example.com/v2/ResourceTypes/Group\",\n
    \      \"resourceType\": \"ResourceType\"\n     }\n   }]\n  }\n            Figure
    9: Example Resource Type JSON Representation\n"
  title: 4.  Service Provider Configuration Endpoints
- contents:
  - "5.  Preparation and Comparison of Internationalized Strings\n   To increase the
    likelihood that the input and comparison of usernames\n   and passwords will work
    in ways that make sense for typical users\n   throughout the world, there are
    rules for preparing, enforcing, and\n   comparing internationalized strings that
    represent usernames and\n   passwords.  Before comparing or evaluating the uniqueness
    of a\n   \"userName\" or \"password\" attribute, service providers MUST use the\n
    \  preparation, enforcement, and comparison of internationalized strings\n   (PRECIS)
    preparation and comparison rules described in Sections 3 and\n   4, respectively,
    of [RFC7613], which is based on the PRECIS framework\n   specification [RFC7564].
    \ See Section 3.4 of [RFC7613] for discussion\n   on \"Case Mapping vs. Case Preparation\"
    regarding \"userName\"\n   attributes.\n"
  title: 5.  Preparation and Comparison of Internationalized Strings
- contents:
  - "6.  Multi-Tenancy\n   A single service provider may expose the SCIM protocol
    to multiple\n   clients.  Depending on the nature of the service, the clients
    may\n   have authority to access and alter resources initially created by\n   other
    clients.  Alternatively, clients may expect to access disjoint\n   sets of resources
    and may expect that their resources are\n   inaccessible to other clients.  These
    scenarios are called\n   \"multi-tenancy\", where each client is understood to
    be or represent\n   a \"tenant\" of the service provider.  Clients may also be\n
    \  multi-tenanted.\n   The following common cases may occur:\n   1.  All clients
    share all resources (no tenancy).\n   2.  Each single client creates and accesses
    a private subset of\n       resources (1 client:1 Tenant).\n   3.  Sets of clients
    share sets of resources (M clients:1 Tenant).\n   4.  One client can create and
    access several private subsets of\n       resources (1 client:M Tenants).\n   Service
    providers may implement any subset of the above cases.\n   Multi-tenancy is OPTIONAL.
    \ The SCIM protocol does not define a\n   scheme for multi-tenancy.\n   The SCIM
    protocol does not prescribe the mechanisms whereby clients\n   and service providers
    interact for the following:\n   o  Registering or provisioning Tenants\n   o  Associating
    a subset of clients with a subset of the Tenants\n   o  Indicating which tenant
    is associated with the data in a request\n      or response, or indicating which
    Tenant is the subject of a query\n"
  - contents:
    - "6.1.  Associating Clients to Tenants\n   The service provider MAY use one of
      the authentication mechanisms\n   discussed in Section 2 to determine the identity
      of the client and\n   thus infer the associated Tenant.\n   For implementations
      where a client is associated with more than one\n   Tenant, the service provider
      MAY use one of the three methods below\n   for explicit specification of the
      Tenant.\n   If any of these methods of allowing the client to explicitly specify\n
      \  the Tenant are employed, the service provider should ensure that\n   access
      controls are in place to prevent or allow cross-tenant use\n   cases.\n   The
      service provider should consider precedence in cases where a\n   client may
      explicitly specify a Tenant while being implicitly\n   associated with a different
      Tenant.\n   In all of these methods, the {tenant_id} is a unique identifier
      for\n   the Tenant as defined by the service provider.\n   o  A URL prefix:
      \"https://www.example.com/Tenants/{tenant_id}/v2/\n      Users\".\n   o  A sub-domain:
      \"https://{tenant_id}.example.com/v2/Groups\".\n   o  An HTTP header: The service
      provider may recognize a {tenant_id}\n      provided by the client in an HTTP
      header as the indicator of the\n      desired target Tenant.\n"
    title: 6.1.  Associating Clients to Tenants
  - contents:
    - "6.2.  SCIM Identifiers with Multiple Tenants\n   Considerations for a multi-tenant
      implementation:\n   o  The service provider may choose to implement SCIM ids
      that are\n      unique across all resources for all Tenants, but this is not\n
      \     required.\n   o  The externalId, defined by the client, is required to
      be unique\n      ONLY within the resources associated with the associated Tenant.\n"
    title: 6.2.  SCIM Identifiers with Multiple Tenants
  title: 6.  Multi-Tenancy
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  HTTP Considerations\n   The SCIM protocol layers on top of HTTP and is
      thus subject to the\n   security considerations of HTTP (Section 9 of [RFC7230])
      and its\n   related specifications.\n   As stated in Section 2.7.1 of [RFC7230],
      a SCIM client MUST NOT\n   generate the \"userinfo\" (i.e., username and password)
      component\n   (and its \"@\" delimiter) when an \"http\" URI reference is generated\n
      \  with a message, as userinfo and its \"@\" delimiter are now disallowed\n
      \  in HTTP.\n"
    title: 7.1.  HTTP Considerations
  - contents:
    - "7.2.  TLS Support Considerations\n   SCIM resources (e.g., Users and Groups)
      contain sensitive\n   information, including passwords.  Therefore, SCIM clients
      and\n   service providers MUST require the use of a transport-layer security\n
      \  mechanism when communicating with SCIM service providers.  The SCIM\n   service
      provider MUST support TLS 1.2 [RFC5246] and MAY support\n   additional transport-layer
      mechanisms meeting its security\n   requirements.  When using TLS, the client
      MUST perform a TLS/SSL\n   server identity check, per [RFC6125].  Implementation
      security\n   considerations for TLS can be found in [RFC7525].\n"
    title: 7.2.  TLS Support Considerations
  - contents:
    - "7.3.  Authorization Token Considerations\n   When using authorization tokens
      such as those issued by OAuth 2.0\n   [RFC6749], implementers MUST take into
      account threats and\n   countermeasures as documented in Section 8 of [RFC7521].\n"
    title: 7.3.  Authorization Token Considerations
  - contents:
    - "7.4.  Bearer Token and Cookie Considerations\n   Since the possession of a
      bearer token or cookie MAY authorize the\n   holder to potentially read, modify,
      or delete resources, bearer\n   tokens and cookies MUST contain sufficient entropy
      to prevent a\n   random guessing attack; for example, see Section 5.2 of [RFC6750]
      and\n   Section 5.1.4.2.2 of [RFC6819].\n   As with all SCIM communications,
      bearer tokens and HTTP cookies MUST\n   be exchanged using TLS.\n   Bearer tokens
      MUST have a limited lifetime that can be determined\n   directly or indirectly
      (e.g., by checking with a validation service)\n   by the service provider.  By
      expiring tokens, clients are forced to\n   obtain a new token (which usually
      involves re-authentication) for\n   continued authorized access.  For example,
      in OAuth 2.0, a client MAY\n   use OAuth token refresh to obtain a new bearer
      token after\n   authenticating to an authorization server.  See Section 6 of\n
      \  [RFC6749].\n   As with bearer tokens, an HTTP cookie SHOULD last no longer
      than the\n   lifetime of a browser session.  An expiry time should be set that\n
      \  limits session cookie lifetime as per Section 5.2.1 of [RFC6265].\n   Implementations
      supporting OAuth bearer tokens need to factor in\n   security considerations
      of this authorization method [RFC7521].\n   Since security is only as good as
      the weakest link, implementers also\n   need to consider authentication choices
      coupled with OAuth bearer\n   tokens.  The security considerations of the default
      authentication\n   method for OAuth bearer tokens, HTTP Basic, are well documented
      in\n   [HTTP-BASIC-AUTH]; therefore, implementers are encouraged to use\n   stronger
      authentication methods.  Designating the specific methods of\n   authentication
      and authorization is out of scope for SCIM; however,\n   this information is
      provided as a resource to implementers.\n"
    title: 7.4.  Bearer Token and Cookie Considerations
  - contents:
    - '7.5.  Privacy Considerations

      '
    - contents:
      - "7.5.1.  Personal Information\n   The SCIM Core Schema specification [RFC7643]
        defines attributes that\n   may contain personally identifying information
        as well as other\n   sensitive personal data.  The privacy considerations
        in the Security\n   Considerations section of [RFC7643] MUST be considered.\n"
      title: 7.5.1.  Personal Information
    - contents:
      - "7.5.2.  Disclosure of Sensitive Information in URIs\n   As mentioned in Section
        9.4 of [RFC7231], SCIM clients requesting\n   information using query filters
        that use HTTP GET SHOULD give\n   consideration to the information content
        of the filters and whether\n   or not their exposure in a URI would represent
        a breach of security\n   or confidentiality through leakage in web browsers
        or server logs.\n   This is particularly true for information that is legally
        considered\n   \"personally identifiable information\" or is otherwise restricted
        by\n   privacy laws.  In these situations, to ensure maximum security and\n
        \  confidentiality, clients SHOULD query using HTTP POST (see\n   Section
        3.4.3).\n   Servers that receive HTTP GET requests using filters that contain\n
        \  sensitive or confidential personal information SHOULD respond with\n   HTTP
        status code 403 to indicate that the operation is forbidden.  A\n   \"scimType\"
        error code of \"sensitive\" may be returned to indicate that\n   the request
        must be submitted using POST.  The following is a\n   non-normative example:\n
        \ HTTP/1.1 403 Forbidden\n  {\n    \"schemas\": [\"urn:ietf:params:scim:api:messages:2.0:Error\"],\n
        \   \"detail\":\n          \"Query filter involving 'name' is restricted or
        confidential\",\n    \"scimType\": \"sensitive\",\n    \"status\": \"404\"\n
        \ }\n"
      title: 7.5.2.  Disclosure of Sensitive Information in URIs
    title: 7.5.  Privacy Considerations
  - contents:
    - "7.6.  Anonymous Requests\n   If a SCIM service provider accepts anonymous requests
      such as SCIM\n   resource creation requests (via HTTP POST), appropriate security\n
      \  measures should be put in place to prevent or limit exposure to\n   attacks.
      \ The following countermeasures MAY be used:\n   o  Try to authenticate web
      user interface components that formulate\n      the SCIM creation request.  While
      the end-user may be anonymous,\n      the web user interface component often
      has its own way to\n      authenticate to the SCIM service provider (e.g., has
      an OAuth\n      client credential [RFC6749]), and the web user interface component\n
      \     may implement its own measures (e.g., the Completely Automated\n      Public
      Turing test to tell Computers and Humans Apart (CAPTCHA))\n      to ensure that
      a legitimate request is being made.\n   o  Limit the number of requests that
      any particular client MAY make\n      in a period of time.\n   o  For User resources,
      default newly created resources with an\n      \"active\" setting of \"false\",
      and use a secondary confirmation\n      process (e.g., email confirmation) to
      ensure that the resource\n      created is real.\n"
    title: 7.6.  Anonymous Requests
  - contents:
    - "7.7.  Secure Storage and Handling of Sensitive Data\n   An attacker may obtain
      valid username/password combinations from the\n   SCIM service provider's underlying
      database by gaining access to the\n   database and/or launching injection attacks.
      \ This could lead to\n   unintended disclosure of username/password combinations.
      \ The impact\n   may extend beyond the domain of the SCIM service provider if
      the data\n   was provisioned from other domains.\n   Administrators should undertake
      industry best practices to protect\n   the storage of credentials and, in particular,
      SHOULD follow\n   recommendations outlined in Section 5.1.4.1 of [RFC6819].
      \ These\n   recommendations include, but are not limited to, the following:\n
      \  o  Provide injection attack countermeasures (e.g., by validating all\n      inputs
      and parameters);\n   o  Credentials should not be stored in cleartext form;\n
      \  o  Store credentials using an encrypted protection mechanism (e.g.,\n      hashing);
      and\n   o  Where possible, avoid passwords as the sole form of\n      authentication,
      and consider using credentials that are based on\n      asymmetric cryptography.\n
      \  As outlined in Section 5.1.4.2 of [RFC6819], administrators SHOULD\n   take
      countermeasures such as the following, to prevent online attacks\n   on secrets:\n
      \  o  Utilize a secure password policy in order to increase user\n      password
      entropy, which will in turn hinder online attacks and\n      password guessing;\n
      \  o  Mitigate attacks on passwords by locking respective accounts that\n      have
      a number of failed attempts;\n   o  Use \"tar pit\" techniques by temporarily
      locking a respective\n      account and delaying responses for a certain duration.
      \ The\n      duration may increase with the number of failed attempts; and\n
      \  o  Use authentication systems that use CAPTCHAs and other factors for\n      authenticating
      users, to further reduce the possibility of\n      automated attacks.\n   Service
      providers SHOULD define an access control model that\n   differentiates between
      individual client applications and their\n   specific need to access information,
      and any User self-service rights\n   to review and update personal profile information.
      \ This may include\n   OAuth 2.0 delegation profiles that allow client systems
      to act on\n   behalf of users with their permission.\n"
    title: 7.7.  Secure Storage and Handling of Sensitive Data
  - contents:
    - "7.8.  Case-Insensitive Comparison and International Languages\n   When comparing
      Unicode strings such as those in query filters or\n   testing for uniqueness
      of usernames and passwords, strings MUST be\n   appropriately prepared before
      comparison.  See Section 5.\n"
    title: 7.8.  Case-Insensitive Comparison and International Languages
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  Media Type Registration\n   To:  ietf-types@iana.org\n   Subject:  Registration
      of media type application/scim+json\n   Type name:  application\n   Subtype
      name:  scim+json\n   Required parameters:  none\n   Optional parameters:  none\n
      \  Encoding considerations:  8bit\n   Security considerations:  See Section
      7 of this document (RFC 7644)\n   Interoperability considerations:  The \"application/scim+json\"
      media\n      type is intended to identify JSON structure data that conforms
      to\n      the SCIM protocol and schema specifications.  Older versions of\n
      \     SCIM are known to informally use \"application/json\".\n   Published specification:
      \ this document (RFC 7644)\n   Applications that use this media type:  It is
      expected that\n      applications that use this type may be special-purpose\n
      \     applications intended for inter-domain provisioning.  Clients may\n      also
      be applications (e.g., mobile applications) that need to use\n      SCIM for
      self-registration of user accounts.  SCIM services may be\n      offered by
      web applications that offer support for standards-based\n      provisioning
      or may be a dedicated SCIM service provider such as a\n      \"cloud directory\".
      \ Content may be treated as equivalent to the\n      \"application/json\" type
      for the purpose of displaying in web\n      browsers.\n   Additional information:\n
      \        Magic number(s):\n         File extension(s): .scim .scm\n         Macintosh
      file type code(s):\n   Person & email address to contact for further information:
      \ SCIM\n      mailing list \"<scim@ietf.org>\"\n   Intended usage:  COMMON*
      (see restrictions)\n   Restrictions on usage:  For most client types, it is
      sufficient to\n      recognize the content as equivalent to \"application/json\".\n
      \     Applications intending to use the SCIM protocol SHOULD use the\n      \"application/scim+json\"
      media type.\n   Author:  Phil Hunt\n   Change controller:  IETF\n"
    title: 8.1.  Media Type Registration
  - contents:
    - "8.2.  Registering URIs for SCIM Messages\n   As per the \"SCIM Schema URIs
      for Data Resources\" registry established\n   by [RFC7643], the following defines
      and registers the SCIM protocol\n   request/response JSON schema URN identifier
      prefix of\n   \"urn:ietf:params:scim:api:messages:2.0\", which is part of the\n
      \  URN sub-namespace for SCIM.  There is no specific associated\n   resource
      type.\n   +---------------------------------+-----------------+---------------+\n
      \  | Schema URI                      | Name            | Reference     |\n   +---------------------------------+-----------------+---------------+\n
      \  | urn:ietf:params:scim:api:       | List/Query      | See Section   |\n   |
      messages:2.0:ListResponse       | Response        | 3.4.2         |\n   |                                 |
      \                |               |\n   | urn:ietf:params:scim:api:       | POST
      Query      | See Section   |\n   | messages:2.0:SearchRequest      | Request
      \        | 3.4.3         |\n   |                                 |                 |
      \              |\n   | urn:ietf:params:scim:api:       | PATCH Operation | See
      Section   |\n   | messages:2.0:PatchOp            |                 | 3.5.2
      \        |\n   |                                 |                 |               |\n
      \  | urn:ietf:params:scim:api:       | Bulk Operations | See Section   |\n   |
      messages:2.0:BulkRequest        | Request         | 3.7           |\n   |                                 |
      \                |               |\n   | urn:ietf:params:scim:api:       | Bulk
      Operations | See Section   |\n   | messages:2.0:BulkResponse       | Response
      \       | 3.7           |\n   |                                 |                 |
      \              |\n   | urn:ietf:params:scim:api:       | Error Response  | See
      Section   |\n   | messages:2.0:Error              |                 | 3.12          |\n
      \  +---------------------------------+-----------------+---------------+\n               Table
      10: SCIM Schema URIs for Data Resources\n"
    title: 8.2.  Registering URIs for SCIM Messages
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\n              ISO
      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629,\n              November 2003,
      <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC3986]  Berners-Lee, T., Fielding,
      R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic
      Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986, January 2005,\n
      \             <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5234]  Crocker,
      D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]  Dierks,
      T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol
      Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5789]  Dusseault,
      L. and J. Snell, \"PATCH Method for HTTP\",\n              RFC 5789, DOI 10.17487/RFC5789,
      March 2010,\n              <http://www.rfc-editor.org/info/rfc5789>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125,\n              March 2011, <http://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC
      6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n              Framework:
      Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750, October
      2012,\n              <http://www.rfc-editor.org/info/rfc6750>.\n   [RFC7159]
      \ Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159,\n              March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [RFC7230]  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,
      DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n
      \  [RFC7231]  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Semantics and Content\",\n              RFC 7231, DOI 10.17487/RFC7231,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]
      \ Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Conditional Requests\",\n              RFC 7232, DOI 10.17487/RFC7232,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n   [RFC7235]
      \ Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI 10.17487/RFC7235,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n   [RFC7538]
      \ Reschke, J., \"The Hypertext Transfer Protocol Status\n              Code
      308 (Permanent Redirect)\", RFC 7538,\n              DOI 10.17487/RFC7538, April
      2015,\n              <http://www.rfc-editor.org/info/rfc7538>.\n   [RFC7613]
      \ Saint-Andre, P. and A. Melnikov, \"Preparation,\n              Enforcement,
      and Comparison of Internationalized Strings\n              Representing Usernames
      and Passwords\", RFC 7613,\n              DOI 10.17487/RFC7613, August 2015,\n
      \             <http://www.rfc-editor.org/info/rfc7613>.\n   [RFC7643]  Hunt,
      P., Ed., Grizzle, K., Wahlstroem, E., and\n              C. Mortimore, \"System
      for Cross-domain Identity\n              Management: Core Schema\", RFC 7643,
      DOI 10.17487/RFC7643,\n              September 2015, <http://www.rfc-editor.org/info/rfc7643>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [HTTP-BASIC-AUTH]\n              Reschke,
      J., \"The 'Basic' HTTP Authentication Scheme\",\n              Work in Progress,
      draft-ietf-httpauth-basicauth-update-07,\n              February 2015.\n   [OAuth-PoP-Arch]\n
      \             Hunt, P., Ed., Richer, J., Mills, W., Mishra, P., and H.\n              Tschofenig,
      \"OAuth 2.0 Proof-of-Possession (PoP) Security\n              Architecture\",
      Work in Progress,\n              draft-ietf-oauth-pop-architecture-02, July
      2015.\n   [OpenSearch]\n              Clinton, D., \"OpenSearch Protocol 1.1,
      Draft 5\",\n              December 2005, <http://www.opensearch.org/Specifications/\n
      \             OpenSearch/1.1>.\n   [RFC6265]  Barth, A., \"HTTP State Management
      Mechanism\", RFC 6265,\n              DOI 10.17487/RFC6265, April 2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n
      \  [RFC6819]  Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0\n
      \             Threat Model and Security Considerations\", RFC 6819,\n              DOI
      10.17487/RFC6819, January 2013,\n              <http://www.rfc-editor.org/info/rfc6819>.\n
      \  [RFC6902]  Bryan, P., Ed., and M. Nottingham, Ed., \"JavaScript Object\n
      \             Notation (JSON) Patch\", RFC 6902, DOI 10.17487/RFC6902,\n              April
      2013, <http://www.rfc-editor.org/info/rfc6902>.\n   [RFC7486]  Farrell, S.,
      Hoffman, P., and M. Thomas, \"HTTP Origin-\n              Bound Authentication
      (HOBA)\", RFC 7486,\n              DOI 10.17487/RFC7486, March 2015,\n              <http://www.rfc-editor.org/info/rfc7486>.\n
      \  [RFC7521]  Campbell, B., Mortimore, C., Jones, M., and Y. Goland,\n              \"Assertion
      Framework for OAuth 2.0 Client Authentication\n              and Authorization
      Grants\", RFC 7521, DOI 10.17487/RFC7521,\n              May 2015, <http://www.rfc-editor.org/info/rfc7521>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n
      \             May 2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7564]
      \ Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n              Preparation,
      Enforcement, and Comparison of\n              Internationalized Strings in Application
      Protocols\",\n              RFC 7564, DOI 10.17487/RFC7564, May 2015,\n              <http://www.rfc-editor.org/info/rfc7564>.\n
      \  [XML-Schema]\n              Biron, P. and A. Malhotra, \"XML Schema Part
      2: Datatypes\n              Second Edition\", W3C Recommendation, October 2004,\n
      \             <http://www.w3.org/TR/xmlschema-2/>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   The editor would like to acknowledge the contribution and
    work of the\n   editors of draft versions of this document:\n      Trey Drake,
    UnboundID\n      Chuck Mortimore, Salesforce\n   The editor would like to thank
    the participants in the SCIM working\n   group for their support of this specification.\n"
  title: Acknowledgements
- contents:
  - "Contributors\n   Samuel Erdtman (samuel@erdtman.se)\n   Patrick Harding (pharding@pingidentity.com)\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Phil Hunt (editor)\n   Oracle Corporation\n   Email: phil.hunt@yahoo.com\n
    \  Kelly Grizzle\n   SailPoint\n   Email: kelly.grizzle@sailpoint.com\n   Morteza
    Ansari\n   Cisco\n   Email: morteza.ansari@cisco.com\n   Erik Wahlstroem\n   Nexus
    Technology\n   Email: erik.wahlstrom@nexusgroup.com\n   Chuck Mortimore\n   Salesforce.com\n
    \  Email: cmortimore@salesforce.com\n"
  title: Authors' Addresses
