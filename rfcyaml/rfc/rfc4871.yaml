- title: __initial_text__
  contents:
  - '              DomainKeys Identified Mail (DKIM) Signatures

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   DomainKeys Identified Mail (DKIM) defines a domain-level\n   authentication\
    \ framework for email using public-key cryptography and\n   key server technology\
    \ to permit verification of the source and\n   contents of messages by either\
    \ Mail Transfer Agents (MTAs) or Mail\n   User Agents (MUAs).  The ultimate goal\
    \ of this framework is to permit\n   a signing domain to assert responsibility\
    \ for a message, thus\n   protecting message signer identity and the integrity\
    \ of the messages\n   they convey while retaining the functionality of Internet\
    \ email as it\n   is known today.  Protection of email identity may assist in\
    \ the\n   global control of \"spam\" and \"phishing\".\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Signing Identity . . . . . . . . . . . . . . . .\
    \ . . . . .  5\n     1.2.  Scalability  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     1.3.  Simple Key Management  . . . . . . . . . . . . . . .\
    \ . . .  5\n   2.  Terminology and Definitions  . . . . . . . . . . . . . . .\
    \ . .  5\n     2.1.  Signers  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     2.2.  Verifiers  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     2.3.  Whitespace . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     2.4.  Common ABNF Tokens . . . . . . . . . . . . . . . . . . . .  6\n  \
    \   2.5.  Imported ABNF Tokens . . . . . . . . . . . . . . . . . . .  7\n    \
    \ 2.6.  DKIM-Quoted-Printable  . . . . . . . . . . . . . . . . . .  7\n   3. \
    \ Protocol Elements  . . . . . . . . . . . . . . . . . . . . . .  8\n     3.1.\
    \  Selectors  . . . . . . . . . . . . . . . . . . . . . . . .  8\n     3.2.  Tag=Value\
    \ Lists  . . . . . . . . . . . . . . . . . . . . . 10\n     3.3.  Signing and\
    \ Verification Algorithms  . . . . . . . . . . . 11\n     3.4.  Canonicalization\
    \ . . . . . . . . . . . . . . . . . . . . . 13\n     3.5.  The DKIM-Signature\
    \ Header Field  . . . . . . . . . . . . . 17\n     3.6.  Key Management and Representation\
    \  . . . . . . . . . . . . 25\n     3.7.  Computing the Message Hashes . . . .\
    \ . . . . . . . . . . . 29\n     3.8.  Signing by Parent Domains  . . . . . .\
    \ . . . . . . . . . . 31\n   4.  Semantics of Multiple Signatures . . . . . .\
    \ . . . . . . . . . 32\n     4.1.  Example Scenarios  . . . . . . . . . . . .\
    \ . . . . . . . . 32\n     4.2.  Interpretation . . . . . . . . . . . . . . .\
    \ . . . . . . . 33\n   5.  Signer Actions . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 34\n     5.1.  Determine Whether the Email Should Be Signed and\
    \ by\n           Whom . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\
    \     5.2.  Select a Private Key and Corresponding Selector\n           Information\
    \  . . . . . . . . . . . . . . . . . . . . . . . 35\n     5.3.  Normalize the\
    \ Message to Prevent Transport Conversions . . 35\n     5.4.  Determine the Header\
    \ Fields to Sign  . . . . . . . . . . . 36\n     5.5.  Recommended Signature Content\
    \  . . . . . . . . . . . . . . 38\n     5.6.  Compute the Message Hash and Signature\
    \ . . . . . . . . . . 39\n     5.7.  Insert the DKIM-Signature Header Field .\
    \ . . . . . . . . . 40\n   6.  Verifier Actions . . . . . . . . . . . . . . .\
    \ . . . . . . . . 40\n     6.1.  Extract Signatures from the Message  . . . .\
    \ . . . . . . . 41\n     6.2.  Communicate Verification Results . . . . . . .\
    \ . . . . . . 46\n     6.3.  Interpret Results/Apply Local Policy . . . . . .\
    \ . . . . . 47\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . .\
    \ . . . . 48\n     7.1.  DKIM-Signature Tag Specifications  . . . . . . . . .\
    \ . . . 48\n     7.2.  DKIM-Signature Query Method Registry . . . . . . . . .\
    \ . . 49\n     7.3.  DKIM-Signature Canonicalization Registry . . . . . . . .\
    \ . 49\n     7.4.  _domainkey DNS TXT Record Tag Specifications . . . . . . .\
    \ 50\n     7.5.  DKIM Key Type Registry . . . . . . . . . . . . . . . . . . 50\n\
    \     7.6.  DKIM Hash Algorithms Registry  . . . . . . . . . . . . . . 51\n  \
    \   7.7.  DKIM Service Types Registry  . . . . . . . . . . . . . . . 51\n    \
    \ 7.8.  DKIM Selector Flags Registry . . . . . . . . . . . . . . . 52\n     7.9.\
    \  DKIM-Signature Header Field  . . . . . . . . . . . . . . . 52\n   8.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 52\n     8.1.  Misuse\
    \ of Body Length Limits (\"l=\" Tag)  . . . . . . . . . 52\n     8.2.  Misappropriated\
    \ Private Key  . . . . . . . . . . . . . . . 53\n     8.3.  Key Server Denial-of-Service\
    \ Attacks . . . . . . . . . . . 54\n     8.4.  Attacks Against the DNS  . . .\
    \ . . . . . . . . . . . . . . 54\n     8.5.  Replay Attacks . . . . . . . . .\
    \ . . . . . . . . . . . . . 55\n     8.6.  Limits on Revoking Keys  . . . . .\
    \ . . . . . . . . . . . . 55\n     8.7.  Intentionally Malformed Key Records \
    \ . . . . . . . . . . . 56\n     8.8.  Intentionally Malformed DKIM-Signature\
    \ Header Fields . . . 56\n     8.9.  Information Leakage  . . . . . . . . . .\
    \ . . . . . . . . . 56\n     8.10. Remote Timing Attacks  . . . . . . . . . .\
    \ . . . . . . . . 56\n     8.11. Reordered Header Fields  . . . . . . . . . .\
    \ . . . . . . . 56\n     8.12. RSA Attacks  . . . . . . . . . . . . . . . . .\
    \ . . . . . . 56\n     8.13. Inappropriate Signing by Parent Domains  . . . .\
    \ . . . . . 57\n   9.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 57\n     9.1.  Normative References . . . . . . . . . . . . . . . .\
    \ . . . 57\n     9.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . . 58\n   Appendix A.  Example of Use (INFORMATIVE)  . . . . . . . . . . .\
    \ . 60\n     A.1.  The user composes an email . . . . . . . . . . . . . . . .\
    \ 60\n     A.2.  The email is signed  . . . . . . . . . . . . . . . . . . . 61\n\
    \     A.3.  The email signature is verified  . . . . . . . . . . . . . 61\n  \
    \ Appendix B.  Usage Examples (INFORMATIVE)  . . . . . . . . . . . . 62\n    \
    \ B.1.  Alternate Submission Scenarios . . . . . . . . . . . . . . 63\n     B.2.\
    \  Alternate Delivery Scenarios . . . . . . . . . . . . . . . 65\n   Appendix\
    \ C.  Creating a Public Key (INFORMATIVE) . . . . . . . . . 67\n   Appendix D.\
    \  MUA Considerations  . . . . . . . . . . . . . . . . . 68\n   Appendix E.  Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . 69\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DomainKeys Identified Mail (DKIM) defines a mechanism by\
    \ which email\n   messages can be cryptographically signed, permitting a signing\
    \ domain\n   to claim responsibility for the introduction of a message into the\n\
    \   mail stream.  Message recipients can verify the signature by querying\n  \
    \ the signer's domain directly to retrieve the appropriate public key,\n   and\
    \ thereby confirm that the message was attested to by a party in\n   possession\
    \ of the private key for the signing domain.\n   The approach taken by DKIM differs\
    \ from previous approaches to\n   message signing (e.g., Secure/Multipurpose Internet\
    \ Mail Extensions\n   (S/MIME) [RFC1847], OpenPGP [RFC2440]) in that:\n   o  the\
    \ message signature is written as a message header field so that\n      neither\
    \ human recipients nor existing MUA (Mail User Agent)\n      software is confused\
    \ by signature-related content appearing in the\n      message body;\n   o  there\
    \ is no dependency on public and private key pairs being\n      issued by well-known,\
    \ trusted certificate authorities;\n   o  there is no dependency on the deployment\
    \ of any new Internet\n      protocols or services for public key distribution\
    \ or revocation;\n   o  signature verification failure does not force rejection\
    \ of the\n      message;\n   o  no attempt is made to include encryption as part\
    \ of the mechanism;\n   o  message archiving is not a design goal.\n   DKIM:\n\
    \   o  is compatible with the existing email infrastructure and\n      transparent\
    \ to the fullest extent possible;\n   o  requires minimal new infrastructure;\n\
    \   o  can be implemented independently of clients in order to reduce\n      deployment\
    \ time;\n   o  can be deployed incrementally;\n   o  allows delegation of signing\
    \ to third parties.\n"
- title: 1.1.  Signing Identity
  contents:
  - "1.1.  Signing Identity\n   DKIM separates the question of the identity of the\
    \ signer of the\n   message from the purported author of the message.  In particular,\
    \ a\n   signature includes the identity of the signer.  Verifiers can use the\n\
    \   signing information to decide how they want to process the message.\n   The\
    \ signing identity is included as part of the signature header\n   field.\n  \
    \    INFORMATIVE RATIONALE: The signing identity specified by a DKIM\n      signature\
    \ is not required to match an address in any particular\n      header field because\
    \ of the broad methods of interpretation by\n      recipient mail systems, including\
    \ MUAs.\n"
- title: 1.2.  Scalability
  contents:
  - "1.2.  Scalability\n   DKIM is designed to support the extreme scalability requirements\
    \ that\n   characterize the email identification problem.  There are currently\n\
    \   over 70 million domains and a much larger number of individual\n   addresses.\
    \  DKIM seeks to preserve the positive aspects of the\n   current email infrastructure,\
    \ such as the ability for anyone to\n   communicate with anyone else without introduction.\n"
- title: 1.3.  Simple Key Management
  contents:
  - "1.3.  Simple Key Management\n   DKIM differs from traditional hierarchical public-key\
    \ systems in that\n   no Certificate Authority infrastructure is required; the\
    \ verifier\n   requests the public key from a repository in the domain of the\n\
    \   claimed signer directly rather than from a third party.\n   The DNS is proposed\
    \ as the initial mechanism for the public keys.\n   Thus, DKIM currently depends\
    \ on DNS administration and the security\n   of the DNS system.  DKIM is designed\
    \ to be extensible to other key\n   fetching services as they become available.\n"
- title: 2.  Terminology and Definitions
  contents:
  - "2.  Terminology and Definitions\n   This section defines terms used in the rest\
    \ of the document.  Syntax\n   descriptions use the form described in Augmented\
    \ BNF for Syntax\n   Specifications [RFC4234].\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n"
- title: 2.1.  Signers
  contents:
  - "2.1.  Signers\n   Elements in the mail system that sign messages on behalf of\
    \ a domain\n   are referred to as signers.  These may be MUAs (Mail User Agents),\n\
    \   MSAs (Mail Submission Agents), MTAs (Mail Transfer Agents), or other\n   agents\
    \ such as mailing list exploders.  In general, any signer will\n   be involved\
    \ in the injection of a message into the message system in\n   some way.  The\
    \ key issue is that a message must be signed before it\n   leaves the administrative\
    \ domain of the signer.\n"
- title: 2.2.  Verifiers
  contents:
  - "2.2.  Verifiers\n   Elements in the mail system that verify signatures are referred\
    \ to as\n   verifiers.  These may be MTAs, Mail Delivery Agents (MDAs), or MUAs.\n\
    \   In most cases it is expected that verifiers will be close to an end\n   user\
    \ (reader) of the message or some consuming agent such as a\n   mailing list exploder.\n"
- title: 2.3.  Whitespace
  contents:
  - "2.3.  Whitespace\n   There are three forms of whitespace:\n   o  WSP represents\
    \ simple whitespace, i.e., a space or a tab character\n      (formal definition\
    \ in [RFC4234]).\n   o  LWSP is linear whitespace, defined as WSP plus CRLF (formal\n\
    \      definition in [RFC4234]).\n   o  FWS is folding whitespace.  It allows\
    \ multiple lines separated by\n      CRLF followed by at least one whitespace,\
    \ to be joined.\n   The formal ABNF for these are (WSP and LWSP are given for\
    \ information\n   only):\n       WSP =   SP / HTAB\n       LWSP =  *(WSP / CRLF\
    \ WSP)\n       FWS =   [*WSP CRLF] 1*WSP\n   The definition of FWS is identical\
    \ to that in [RFC2822] except for\n   the exclusion of obs-FWS.\n"
- title: 2.4.  Common ABNF Tokens
  contents:
  - "2.4.  Common ABNF Tokens\n   The following ABNF tokens are used elsewhere in\
    \ this document:\n     hyphenated-word =  ALPHA [ *(ALPHA / DIGIT / \"-\") (ALPHA\
    \ / DIGIT) ]\n     base64string =     1*(ALPHA / DIGIT / \"+\" / \"/\" / [FWS])\n\
    \                        [ \"=\" [FWS] [ \"=\" [FWS] ] ]\n"
- title: 2.5.  Imported ABNF Tokens
  contents:
  - "2.5.  Imported ABNF Tokens\n   The following tokens are imported from other RFCs\
    \ as noted.  Those\n   RFCs should be considered definitive.\n   The following\
    \ tokens are imported from [RFC2821]:\n   o  \"Local-part\" (implementation warning:\
    \ this permits quoted strings)\n   o  \"sub-domain\"\n   The following tokens\
    \ are imported from [RFC2822]:\n   o  \"field-name\" (name of a header field)\n\
    \   o  \"dot-atom-text\" (in the Local-part of an email address)\n   The following\
    \ tokens are imported from [RFC2045]:\n   o  \"qp-section\" (a single line of\
    \ quoted-printable-encoded text)\n   o  \"hex-octet\" (a quoted-printable encoded\
    \ octet)\n      INFORMATIVE NOTE: Be aware that the ABNF in RFC 2045 does not\
    \ obey\n      the rules of RFC 4234 and must be interpreted accordingly,\n   \
    \   particularly as regards case folding.\n   Other tokens not defined herein\
    \ are imported from [RFC4234].  These\n   are intuitive primitives such as SP,\
    \ HTAB, WSP, ALPHA, DIGIT, CRLF,\n   etc.\n"
- title: 2.6.  DKIM-Quoted-Printable
  contents:
  - "2.6.  DKIM-Quoted-Printable\n   The DKIM-Quoted-Printable encoding syntax resembles\
    \ that described in\n   Quoted-Printable [RFC2045], Section 6.7: any character\
    \ MAY be encoded\n   as an \"=\" followed by two hexadecimal digits from the alphabet\n\
    \   \"0123456789ABCDEF\" (no lowercase characters permitted) representing\n  \
    \ the hexadecimal-encoded integer value of that character.  All control\n   characters\
    \ (those with values < %x20), 8-bit characters (values >\n   %x7F), and the characters\
    \ DEL (%x7F), SPACE (%x20), and semicolon\n   (\";\", %x3B) MUST be encoded. \
    \ Note that all whitespace, including\n   SPACE, CR, and LF characters, MUST be\
    \ encoded.  After encoding, FWS\n   MAY be added at arbitrary locations in order\
    \ to avoid excessively\n   long lines; such whitespace is NOT part of the value,\
    \ and MUST be\n   removed before decoding.\n   ABNF:\n       dkim-quoted-printable\
    \ =\n                          *(FWS / hex-octet / dkim-safe-char)\n         \
    \            ; hex-octet is from RFC 2045\n       dkim-safe-char =   %x21-3A /\
    \ %x3C / %x3E-7E\n                     ; '!' - ':', '<', '>' - '~'\n         \
    \            ; Characters not listed as \"mail-safe\" in\n                   \
    \  ; RFC 2049 are also not recommended.\n      INFORMATIVE NOTE: DKIM-Quoted-Printable\
    \ differs from Quoted-\n      Printable as defined in RFC 2045 in several important\
    \ ways:\n      1.  Whitespace in the input text, including CR and LF, must be\n\
    \          encoded.  RFC 2045 does not require such encoding, and does\n     \
    \     not permit encoding of CR or LF characters that are part of a\n        \
    \  CRLF line break.\n      2.  Whitespace in the encoded text is ignored.  This\
    \ is to allow\n          tags encoded using DKIM-Quoted-Printable to be wrapped\
    \ as\n          needed.  In particular, RFC 2045 requires that line breaks in\n\
    \          the input be represented as physical line breaks; that is not\n   \
    \       the case here.\n      3.  The \"soft line break\" syntax (\"=\" as the\
    \ last non-whitespace\n          character on the line) does not apply.\n    \
    \  4.  DKIM-Quoted-Printable does not require that encoded lines be\n        \
    \  no more than 76 characters long (although there may be other\n          requirements\
    \ depending on the context in which the encoded\n          text is being used).\n"
- title: 3.  Protocol Elements
  contents:
  - "3.  Protocol Elements\n   Protocol Elements are conceptual parts of the protocol\
    \ that are not\n   specific to either signers or verifiers.  The protocol descriptions\n\
    \   for signers and verifiers are described in later sections (Signer\n   Actions\
    \ (Section 5) and Verifier Actions (Section 6)).  NOTE: This\n   section must\
    \ be read in the context of those sections.\n"
- title: 3.1.  Selectors
  contents:
  - "3.1.  Selectors\n   To support multiple concurrent public keys per signing domain,\
    \ the\n   key namespace is subdivided using \"selectors\".  For example,\n   selectors\
    \ might indicate the names of office locations (e.g.,\n   \"sanfrancisco\", \"\
    coolumbeach\", and \"reykjavik\"), the signing date\n   (e.g., \"january2005\"\
    , \"february2005\", etc.), or even the individual\n   user.\n   Selectors are\
    \ needed to support some important use cases.  For\n   example:\n   o  Domains\
    \ that want to delegate signing capability for a specific\n      address for a\
    \ given duration to a partner, such as an advertising\n      provider or other\
    \ outsourced function.\n   o  Domains that want to allow frequent travelers to\
    \ send messages\n      locally without the need to connect with a particular MSA.\n\
    \   o  \"Affinity\" domains (e.g., college alumni associations) that\n      provide\
    \ forwarding of incoming mail, but that do not operate a\n      mail submission\
    \ agent for outgoing mail.\n   Periods are allowed in selectors and are component\
    \ separators.  When\n   keys are retrieved from the DNS, periods in selectors\
    \ define DNS\n   label boundaries in a manner similar to the conventional use\
    \ in\n   domain names.  Selector components might be used to combine dates\n \
    \  with locations, for example, \"march2005.reykjavik\".  In a DNS\n   implementation,\
    \ this can be used to allow delegation of a portion of\n   the selector namespace.\n\
    \   ABNF:\n      selector =   sub-domain *( \".\" sub-domain )\n   The number\
    \ of public keys and corresponding selectors for each domain\n   is determined\
    \ by the domain owner.  Many domain owners will be\n   satisfied with just one\
    \ selector, whereas administratively\n   distributed organizations may choose\
    \ to manage disparate selectors\n   and key pairs in different regions or on different\
    \ email servers.\n   Beyond administrative convenience, selectors make it possible\
    \ to\n   seamlessly replace public keys on a routine basis.  If a domain\n   wishes\
    \ to change from using a public key associated with selector\n   \"january2005\"\
    \ to a public key associated with selector\n   \"february2005\", it merely makes\
    \ sure that both public keys are\n   advertised in the public-key repository concurrently\
    \ for the\n   transition period during which email may be in transit prior to\n\
    \   verification.  At the start of the transition period, the outbound\n   email\
    \ servers are configured to sign with the \"february2005\" private\n   key.  At\
    \ the end of the transition period, the \"january2005\" public\n   key is removed\
    \ from the public-key repository.\n      INFORMATIVE NOTE: A key may also be revoked\
    \ as described below.\n      The distinction between revoking and removing a key\
    \ selector\n      record is subtle.  When phasing out keys as described above,\
    \ a\n      signing domain would probably simply remove the key record after\n\
    \      the transition period.  However, a signing domain could elect to\n    \
    \  revoke the key (but maintain the key record) for a further period.\n      There\
    \ is no defined semantic difference between a revoked key and\n      a removed\
    \ key.\n   While some domains may wish to make selector values well known,\n \
    \  others will want to take care not to allocate selector names in a way\n   that\
    \ allows harvesting of data by outside parties.  For example, if\n   per-user\
    \ keys are issued, the domain owner will need to make the\n   decision as to whether\
    \ to associate this selector directly with the\n   user name, or make it some\
    \ unassociated random value, such as a\n   fingerprint of the public key.\n  \
    \    INFORMATIVE OPERATIONS NOTE: Reusing a selector with a new key\n      (for\
    \ example, changing the key associated with a user's name)\n      makes it impossible\
    \ to tell the difference between a message that\n      didn't verify because the\
    \ key is no longer valid versus a message\n      that is actually forged.  For\
    \ this reason, signers are ill-advised\n      to reuse selectors for new keys.\
    \  A better strategy is to assign\n      new keys to new selectors.\n"
- title: 3.2.  Tag=Value Lists
  contents:
  - "3.2.  Tag=Value Lists\n   DKIM uses a simple \"tag=value\" syntax in several\
    \ contexts, including\n   in messages and domain signature records.\n   Values\
    \ are a series of strings containing either plain text, \"base64\"\n   text (as\
    \ defined in [RFC2045], Section 6.8), \"qp-section\" (ibid,\n   Section 6.7),\
    \ or \"dkim-quoted-printable\" (as defined in Section 2.6).\n   The name of the\
    \ tag will determine the encoding of each value.\n   Unencoded semicolon (\";\"\
    ) characters MUST NOT occur in the tag value,\n   since that separates tag-specs.\n\
    \      INFORMATIVE IMPLEMENTATION NOTE: Although the \"plain text\" defined\n\
    \      below (as \"tag-value\") only includes 7-bit characters, an\n      implementation\
    \ that wished to anticipate future standards would be\n      advised not to preclude\
    \ the use of UTF8-encoded text in tag=value\n      lists.\n   Formally, the syntax\
    \ rules are as follows:\n        tag-list  =  tag-spec 0*( \";\" tag-spec ) [\
    \ \";\" ]\n        tag-spec  =  [FWS] tag-name [FWS] \"=\" [FWS] tag-value [FWS]\n\
    \        tag-name  =  ALPHA 0*ALNUMPUNC\n        tag-value =  [ tval 0*( 1*(WSP\
    \ / FWS) tval ) ]\n                          ; WSP and FWS prohibited at beginning\
    \ and end\n        tval      =  1*VALCHAR\n        VALCHAR   =  %x21-3A / %x3C-7E\n\
    \                          ; EXCLAMATION to TILDE except SEMICOLON\n        ALNUMPUNC\
    \ =  ALPHA / DIGIT / \"_\"\n   Note that WSP is allowed anywhere around tags.\
    \  In particular, any\n   WSP after the \"=\" and any WSP before the terminating\
    \ \";\" is not part\n   of the value; however, WSP inside the value is significant.\n\
    \   Tags MUST be interpreted in a case-sensitive manner.  Values MUST be\n   processed\
    \ as case sensitive unless the specific tag description of\n   semantics specifies\
    \ case insensitivity.\n   Tags with duplicate names MUST NOT occur within a single\
    \ tag-list; if\n   a tag name does occur more than once, the entire tag-list is\
    \ invalid.\n   Whitespace within a value MUST be retained unless explicitly excluded\n\
    \   by the specific tag description.\n   Tag=value pairs that represent the default\
    \ value MAY be included to\n   aid legibility.\n   Unrecognized tags MUST be ignored.\n\
    \   Tags that have an empty value are not the same as omitted tags.  An\n   omitted\
    \ tag is treated as having the default value; a tag with an\n   empty value explicitly\
    \ designates the empty string as the value.  For\n   example, \"g=\" does not\
    \ mean \"g=*\", even though \"g=*\" is the default\n   for that tag.\n"
- title: 3.3.  Signing and Verification Algorithms
  contents:
  - "3.3.  Signing and Verification Algorithms\n   DKIM supports multiple digital\
    \ signature algorithms.  Two algorithms\n   are defined by this specification\
    \ at this time: rsa-sha1 and rsa-\n   sha256.  The rsa-sha256 algorithm is the\
    \ default if no algorithm is\n   specified.  Verifiers MUST implement both rsa-sha1\
    \ and rsa-sha256.\n   Signers MUST implement and SHOULD sign using rsa-sha256.\n\
    \      INFORMATIVE NOTE: Although sha256 is strongly encouraged, some\n      senders\
    \ of low-security messages (such as routine newsletters) may\n      prefer to\
    \ use sha1 because of reduced CPU requirements to compute\n      a sha1 hash.\
    \  In general, sha256 should always be used whenever\n      possible.\n"
- title: 3.3.1.  The rsa-sha1 Signing Algorithm
  contents:
  - "3.3.1.  The rsa-sha1 Signing Algorithm\n   The rsa-sha1 Signing Algorithm computes\
    \ a message hash as described\n   in Section 3.7 below using SHA-1 [FIPS.180-2.2002]\
    \ as the hash-alg.\n   That hash is then signed by the signer using the RSA algorithm\n\
    \   (defined in PKCS#1 version 1.5 [RFC3447]) as the crypt-alg and the\n   signer's\
    \ private key.  The hash MUST NOT be truncated or converted\n   into any form\
    \ other than the native binary form before being signed.\n   The signing algorithm\
    \ SHOULD use a public exponent of 65537.\n"
- title: 3.3.2.  The rsa-sha256 Signing Algorithm
  contents:
  - "3.3.2.  The rsa-sha256 Signing Algorithm\n   The rsa-sha256 Signing Algorithm\
    \ computes a message hash as described\n   in Section 3.7 below using SHA-256\
    \ [FIPS.180-2.2002] as the hash-alg.\n   That hash is then signed by the signer\
    \ using the RSA algorithm\n   (defined in PKCS#1 version 1.5 [RFC3447]) as the\
    \ crypt-alg and the\n   signer's private key.  The hash MUST NOT be truncated\
    \ or converted\n   into any form other than the native binary form before being\
    \ signed.\n"
- title: 3.3.3.  Key Sizes
  contents:
  - "3.3.3.  Key Sizes\n   Selecting appropriate key sizes is a trade-off between\
    \ cost,\n   performance, and risk.  Since short RSA keys more easily succumb to\n\
    \   off-line attacks, signers MUST use RSA keys of at least 1024 bits for\n  \
    \ long-lived keys.  Verifiers MUST be able to validate signatures with\n   keys\
    \ ranging from 512 bits to 2048 bits, and they MAY be able to\n   validate signatures\
    \ with larger keys.  Verifier policies may use the\n   length of the signing key\
    \ as one metric for determining whether a\n   signature is acceptable.\n   Factors\
    \ that should influence the key size choice include the\n   following:\n   o \
    \ The practical constraint that large (e.g., 4096 bit) keys may not\n      fit\
    \ within a 512-byte DNS UDP response packet\n   o  The security constraint that\
    \ keys smaller than 1024 bits are\n      subject to off-line attacks\n   o  Larger\
    \ keys impose higher CPU costs to verify and sign email\n   o  Keys can be replaced\
    \ on a regular basis, thus their lifetime can\n      be relatively short\n   o\
    \  The security goals of this specification are modest compared to\n      typical\
    \ goals of other systems that employ digital signatures\n   See [RFC3766] for\
    \ further discussion on selecting key sizes.\n"
- title: 3.3.4.  Other Algorithms
  contents:
  - "3.3.4.  Other Algorithms\n   Other algorithms MAY be defined in the future. \
    \ Verifiers MUST ignore\n   any signatures using algorithms that they do not implement.\n"
- title: 3.4.  Canonicalization
  contents:
  - "3.4.  Canonicalization\n   Empirical evidence demonstrates that some mail servers\
    \ and relay\n   systems modify email in transit, potentially invalidating a\n\
    \   signature.  There are two competing perspectives on such\n   modifications.\
    \  For most signers, mild modification of email is\n   immaterial to the authentication\
    \ status of the email.  For such\n   signers, a canonicalization algorithm that\
    \ survives modest in-transit\n   modification is preferred.\n   Other signers\
    \ demand that any modification of the email, however\n   minor, result in a signature\
    \ verification failure.  These signers\n   prefer a canonicalization algorithm\
    \ that does not tolerate in-transit\n   modification of the signed email.\n  \
    \ Some signers may be willing to accept modifications to header fields\n   that\
    \ are within the bounds of email standards such as [RFC2822], but\n   are unwilling\
    \ to accept any modification to the body of messages.\n   To satisfy all requirements,\
    \ two canonicalization algorithms are\n   defined for each of the header and the\
    \ body: a \"simple\" algorithm\n   that tolerates almost no modification and a\
    \ \"relaxed\" algorithm that\n   tolerates common modifications such as whitespace\
    \ replacement and\n   header field line rewrapping.  A signer MAY specify either\
    \ algorithm\n   for header or body when signing an email.  If no canonicalization\n\
    \   algorithm is specified by the signer, the \"simple\" algorithm defaults\n\
    \   for both header and body.  Verifiers MUST implement both\n   canonicalization\
    \ algorithms.  Note that the header and body may use\n   different canonicalization\
    \ algorithms.  Further canonicalization\n   algorithms MAY be defined in the future;\
    \ verifiers MUST ignore any\n   signatures that use unrecognized canonicalization\
    \ algorithms.\n   Canonicalization simply prepares the email for presentation\
    \ to the\n   signing or verification algorithm.  It MUST NOT change the\n   transmitted\
    \ data in any way.  Canonicalization of header fields and\n   body are described\
    \ below.\n   NOTE: This section assumes that the message is already in \"network\n\
    \   normal\" format (text is ASCII encoded, lines are separated with CRLF\n  \
    \ characters, etc.).  See also Section 5.3 for information about\n   normalizing\
    \ the message.\n"
- title: 3.4.1.  The "simple" Header Canonicalization Algorithm
  contents:
  - "3.4.1.  The \"simple\" Header Canonicalization Algorithm\n   The \"simple\" header\
    \ canonicalization algorithm does not change header\n   fields in any way.  Header\
    \ fields MUST be presented to the signing or\n   verification algorithm exactly\
    \ as they are in the message being\n   signed or verified.  In particular, header\
    \ field names MUST NOT be\n   case folded and whitespace MUST NOT be changed.\n"
- title: 3.4.2.  The "relaxed" Header Canonicalization Algorithm
  contents:
  - "3.4.2.  The \"relaxed\" Header Canonicalization Algorithm\n   The \"relaxed\"\
    \ header canonicalization algorithm MUST apply the\n   following steps in order:\n\
    \   o  Convert all header field names (not the header field values) to\n     \
    \ lowercase.  For example, convert \"SUBJect: AbC\" to \"subject: AbC\".\n   o\
    \  Unfold all header field continuation lines as described in\n      [RFC2822];\
    \ in particular, lines with terminators embedded in\n      continued header field\
    \ values (that is, CRLF sequences followed by\n      WSP) MUST be interpreted\
    \ without the CRLF.  Implementations MUST\n      NOT remove the CRLF at the end\
    \ of the header field value.\n   o  Convert all sequences of one or more WSP characters\
    \ to a single SP\n      character.  WSP characters here include those before and\
    \ after a\n      line folding boundary.\n   o  Delete all WSP characters at the\
    \ end of each unfolded header field\n      value.\n   o  Delete any WSP characters\
    \ remaining before and after the colon\n      separating the header field name\
    \ from the header field value.  The\n      colon separator MUST be retained.\n"
- title: 3.4.3.  The "simple" Body Canonicalization Algorithm
  contents:
  - "3.4.3.  The \"simple\" Body Canonicalization Algorithm\n   The \"simple\" body\
    \ canonicalization algorithm ignores all empty lines\n   at the end of the message\
    \ body.  An empty line is a line of zero\n   length after removal of the line\
    \ terminator.  If there is no body or\n   no trailing CRLF on the message body,\
    \ a CRLF is added.  It makes no\n   other changes to the message body.  In more\
    \ formal terms, the\n   \"simple\" body canonicalization algorithm converts \"\
    0*CRLF\" at the end\n   of the body to a single \"CRLF\".\n   Note that a completely\
    \ empty or missing body is canonicalized as a\n   single \"CRLF\"; that is, the\
    \ canonicalized length will be 2 octets.\n"
- title: 3.4.4.  The "relaxed" Body Canonicalization Algorithm
  contents:
  - "3.4.4.  The \"relaxed\" Body Canonicalization Algorithm\n   The \"relaxed\" body\
    \ canonicalization algorithm:\n   o  Ignores all whitespace at the end of lines.\
    \  Implementations MUST\n      NOT remove the CRLF at the end of the line.\n \
    \  o  Reduces all sequences of WSP within a line to a single SP\n      character.\n\
    \   o  Ignores all empty lines at the end of the message body.  \"Empty\n    \
    \  line\" is defined in Section 3.4.3.\n      INFORMATIVE NOTE: It should be noted\
    \ that the relaxed body\n      canonicalization algorithm may enable certain types\
    \ of extremely\n      crude \"ASCII Art\" attacks where a message may be conveyed\
    \ by\n      adjusting the spacing between words.  If this is a concern, the\n\
    \      \"simple\" body canonicalization algorithm should be used instead.\n"
- title: 3.4.5.  Body Length Limits
  contents:
  - "3.4.5.  Body Length Limits\n   A body length count MAY be specified to limit\
    \ the signature\n   calculation to an initial prefix of the body text, measured\
    \ in\n   octets.  If the body length count is not specified, the entire\n   message\
    \ body is signed.\n      INFORMATIVE RATIONALE: This capability is provided because\
    \ it is\n      very common for mailing lists to add trailers to messages (e.g.,\n\
    \      instructions how to get off the list).  Until those messages are\n    \
    \  also signed, the body length count is a useful tool for the\n      verifier\
    \ since it may as a matter of policy accept messages having\n      valid signatures\
    \ with extraneous data.\n      INFORMATIVE IMPLEMENTATION NOTE: Using body length\
    \ limits enables\n      an attack in which an attacker modifies a message to include\n\
    \      content that solely benefits the attacker.  It is possible for the\n  \
    \    appended content to completely replace the original content in the\n    \
    \  end recipient's eyes and to defeat duplicate message detection\n      algorithms.\
    \  To avoid this attack, signers should be wary of using\n      this tag, and\
    \ verifiers might wish to ignore the tag or remove\n      text that appears after\
    \ the specified content length, perhaps\n      based on other criteria.\n   The\
    \ body length count allows the signer of a message to permit data\n   to be appended\
    \ to the end of the body of a signed message.  The body\n   length count MUST\
    \ be calculated following the canonicalization\n   algorithm; for example, any\
    \ whitespace ignored by a canonicalization\n   algorithm is not included as part\
    \ of the body length count.  Signers\n   of MIME messages that include a body\
    \ length count SHOULD be sure that\n   the length extends to the closing MIME\
    \ boundary string.\n      INFORMATIVE IMPLEMENTATION NOTE: A signer wishing to\
    \ ensure that\n      the only acceptable modifications are to add to the MIME\
    \ postlude\n      would use a body length count encompassing the entire final\
    \ MIME\n      boundary string, including the final \"--CRLF\".  A signer wishing\n\
    \      to allow additional MIME parts but not modification of existing\n     \
    \ parts would use a body length count extending through the final\n      MIME\
    \ boundary string, omitting the final \"--CRLF\".  Note that this\n      only\
    \ works for some MIME types, e.g., multipart/mixed but not\n      multipart/signed.\n\
    \   A body length count of zero means that the body is completely\n   unsigned.\n\
    \   Signers wishing to ensure that no modification of any sort can occur\n   should\
    \ specify the \"simple\" canonicalization algorithm for both\n   header and body\
    \ and omit the body length count.\n"
- title: 3.4.6.  Canonicalization Examples (INFORMATIVE)
  contents:
  - "3.4.6.  Canonicalization Examples (INFORMATIVE)\n   In the following examples,\
    \ actual whitespace is used only for\n   clarity.  The actual input and output\
    \ text is designated using\n   bracketed descriptors: \"<SP>\" for a space character,\
    \ \"<HTAB>\" for a\n   tab character, and \"<CRLF>\" for a carriage-return/line-feed\
    \ sequence.\n   For example, \"X <SP> Y\" and \"X<SP>Y\" represent the same three\n\
    \   characters.\n   Example 1: A message reading:\n       A: <SP> X <CRLF>\n \
    \      B <SP> : <SP> Y <HTAB><CRLF>\n       <HTAB> Z <SP><SP><CRLF>\n       <CRLF>\n\
    \       <SP> C <SP><CRLF>\n       D <SP><HTAB><SP> E <CRLF>\n       <CRLF>\n \
    \      <CRLF>\n   when canonicalized using relaxed canonicalization for both header\
    \ and\n   body results in a header reading:\n       a:X <CRLF>\n       b:Y <SP>\
    \ Z <CRLF>\n   and a body reading:\n       <SP> C <CRLF>\n       D <SP> E <CRLF>\n\
    \   Example 2: The same message canonicalized using simple\n   canonicalization\
    \ for both header and body results in a header\n   reading:\n       A: <SP> X\
    \ <CRLF>\n       B <SP> : <SP> Y <HTAB><CRLF>\n       <HTAB> Z <SP><SP><CRLF>\n\
    \   and a body reading:\n       <SP> C <SP><CRLF>\n       D <SP><HTAB><SP> E <CRLF>\n\
    \   Example 3: When processed using relaxed header canonicalization and\n   simple\
    \ body canonicalization, the canonicalized version has a header\n   of:\n    \
    \   a:X <CRLF>\n       b:Y <SP> Z <CRLF>\n   and a body reading:\n       <SP>\
    \ C <SP><CRLF>\n       D <SP><HTAB><SP> E <CRLF>\n"
- title: 3.5.  The DKIM-Signature Header Field
  contents:
  - "3.5.  The DKIM-Signature Header Field\n   The signature of the email is stored\
    \ in the DKIM-Signature header\n   field.  This header field contains all of the\
    \ signature and key-\n   fetching data.  The DKIM-Signature value is a tag-list\
    \ as described\n   in Section 3.2.\n   The DKIM-Signature header field SHOULD\
    \ be treated as though it were a\n   trace header field as defined in Section\
    \ 3.6 of [RFC2822], and hence\n   SHOULD NOT be reordered and SHOULD be prepended\
    \ to the message.\n   The DKIM-Signature header field being created or verified\
    \ is always\n   included in the signature calculation, after the rest of the header\n\
    \   fields being signed; however, when calculating or verifying the\n   signature,\
    \ the value of the \"b=\" tag (signature value) of that DKIM-\n   Signature header\
    \ field MUST be treated as though it were an empty\n   string.  Unknown tags in\
    \ the DKIM-Signature header field MUST be\n   included in the signature calculation\
    \ but MUST be otherwise ignored\n   by verifiers.  Other DKIM-Signature header\
    \ fields that are included\n   in the signature should be treated as normal header\
    \ fields; in\n   particular, the \"b=\" tag is not treated specially.\n   The\
    \ encodings for each field type are listed below.  Tags described\n   as qp-section\
    \ are encoded as described in Section 6.7 of MIME Part\n   One [RFC2045], with\
    \ the additional conversion of semicolon characters\n   to \"=3B\"; intuitively,\
    \ this is one line of quoted-printable encoded\n   text.  The dkim-quoted-printable\
    \ syntax is defined in Section 2.6.\n   Tags on the DKIM-Signature header field\
    \ along with their type and\n   requirement status are shown below.  Unrecognized\
    \ tags MUST be\n   ignored.\n   v=  Version (MUST be included).  This tag defines\
    \ the version of this\n       specification that applies to the signature record.\
    \  It MUST have\n       the value \"1\".  Note that verifiers must do a string\
    \ comparison\n       on this value; for example, \"1\" is not the same as \"1.0\"\
    .\n   ABNF:\n       sig-v-tag   = %x76 [FWS] \"=\" [FWS] \"1\"\n           INFORMATIVE\
    \ NOTE: DKIM-Signature version numbers are expected\n           to increase arithmetically\
    \ as new versions of this\n           specification are released.\n   a=  The\
    \ algorithm used to generate the signature (plain-text;\n       REQUIRED).  Verifiers\
    \ MUST support \"rsa-sha1\" and \"rsa-sha256\";\n       signers SHOULD sign using\
    \ \"rsa-sha256\".  See Section 3.3 for a\n       description of algorithms.\n\
    \   ABNF:\n       sig-a-tag       = %x61 [FWS] \"=\" [FWS] sig-a-tag-alg\n   \
    \    sig-a-tag-alg   = sig-a-tag-k \"-\" sig-a-tag-h\n       sig-a-tag-k     =\
    \ \"rsa\" / x-sig-a-tag-k\n       sig-a-tag-h     = \"sha1\" / \"sha256\" / x-sig-a-tag-h\n\
    \       x-sig-a-tag-k   = ALPHA *(ALPHA / DIGIT)   ; for later extension\n   \
    \    x-sig-a-tag-h   = ALPHA *(ALPHA / DIGIT)   ; for later extension\n   b= \
    \ The signature data (base64; REQUIRED).  Whitespace is ignored in\n       this\
    \ value and MUST be ignored when reassembling the original\n       signature.\
    \  In particular, the signing process can safely insert\n       FWS in this value\
    \ in arbitrary places to conform to line-length\n       limits.  See Signer Actions\
    \ (Section 5) for how the signature is\n       computed.\n   ABNF:\n       sig-b-tag\
    \       = %x62 [FWS] \"=\" [FWS] sig-b-tag-data\n       sig-b-tag-data  = base64string\n\
    \   bh= The hash of the canonicalized body part of the message as limited\n  \
    \     by the \"l=\" tag (base64; REQUIRED).  Whitespace is ignored in\n      \
    \ this value and MUST be ignored when reassembling the original\n       signature.\
    \  In particular, the signing process can safely insert\n       FWS in this value\
    \ in arbitrary places to conform to line-length\n       limits.  See Section 3.7\
    \ for how the body hash is computed.\n   ABNF:\n       sig-bh-tag      = %x62\
    \ %x68 [FWS] \"=\" [FWS] sig-bh-tag-data\n       sig-bh-tag-data = base64string\n\
    \   c=  Message canonicalization (plain-text; OPTIONAL, default is\n       \"\
    simple/simple\").  This tag informs the verifier of the type of\n       canonicalization\
    \ used to prepare the message for signing.  It\n       consists of two names separated\
    \ by a \"slash\" (%d47) character,\n       corresponding to the header and body\
    \ canonicalization algorithms\n       respectively.  These algorithms are described\
    \ in Section 3.4.  If\n       only one algorithm is named, that algorithm is used\
    \ for the\n       header and \"simple\" is used for the body.  For example,\n\
    \       \"c=relaxed\" is treated the same as \"c=relaxed/simple\".\n   ABNF:\n\
    \       sig-c-tag       = %x63 [FWS] \"=\" [FWS] sig-c-tag-alg\n             \
    \        [\"/\" sig-c-tag-alg]\n       sig-c-tag-alg   = \"simple\" / \"relaxed\"\
    \ / x-sig-c-tag-alg\n       x-sig-c-tag-alg = hyphenated-word    ; for later extension\n\
    \   d=  The domain of the signing entity (plain-text; REQUIRED).  This is\n  \
    \     the domain that will be queried for the public key.  This domain\n     \
    \  MUST be the same as or a parent domain of the \"i=\" tag (the\n       signing\
    \ identity, as described below), or it MUST meet the\n       requirements for\
    \ parent domain signing described in Section 3.8.\n       When presented with\
    \ a signature that does not meet these\n       requirement, verifiers MUST consider\
    \ the signature invalid.\n   Internationalized domain names MUST be encoded as\
    \ described in\n       [RFC3490].\n   ABNF:\n       sig-d-tag       = %x64 [FWS]\
    \ \"=\" [FWS] domain-name\n       domain-name     = sub-domain 1*(\".\" sub-domain)\n\
    \                ; from RFC 2821 Domain, but excluding address-literal\n   h=\
    \  Signed header fields (plain-text, but see description; REQUIRED).\n       A\
    \ colon-separated list of header field names that identify the\n       header\
    \ fields presented to the signing algorithm.  The field MUST\n       contain the\
    \ complete list of header fields in the order presented\n       to the signing\
    \ algorithm.  The field MAY contain names of header\n       fields that do not\
    \ exist when signed; nonexistent header fields\n       do not contribute to the\
    \ signature computation (that is, they are\n       treated as the null input,\
    \ including the header field name, the\n       separating colon, the header field\
    \ value, and any CRLF\n       terminator).  The field MUST NOT include the DKIM-Signature\n\
    \       header field that is being created or verified, but may include\n    \
    \   others.  Folding whitespace (FWS) MAY be included on either side\n       of\
    \ the colon separator.  Header field names MUST be compared\n       against actual\
    \ header field names in a case-insensitive manner.\n       This list MUST NOT\
    \ be empty.  See Section 5.4 for a discussion of\n       choosing header fields\
    \ to sign.\n   ABNF:\n       sig-h-tag       = %x68 [FWS] \"=\" [FWS] hdr-name\n\
    \                     0*( *FWS \":\" *FWS hdr-name )\n       hdr-name        =\
    \ field-name\n       INFORMATIVE EXPLANATION: By \"signing\" header fields that\
    \ do not\n           actually exist, a signer can prevent insertion of those\n\
    \           header fields before verification.  However, since a signer\n    \
    \       cannot possibly know what header fields might be created in\n        \
    \   the future, and that some MUAs might present header fields\n           that\
    \ are embedded inside a message (e.g., as a message/rfc822\n           content\
    \ type), the security of this solution is not total.\n       INFORMATIVE EXPLANATION:\
    \ The exclusion of the header field name\n           and colon as well as the\
    \ header field value for non-existent\n           header fields prevents an attacker\
    \ from inserting an actual\n           header field with a null value.\n   i=\
    \  Identity of the user or agent (e.g., a mailing list manager) on\n       behalf\
    \ of which this message is signed (dkim-quoted-printable;\n       OPTIONAL, default\
    \ is an empty Local-part followed by an \"@\"\n       followed by the domain from\
    \ the \"d=\" tag).  The syntax is a\n       standard email address where the Local-part\
    \ MAY be omitted.  The\n       domain part of the address MUST be the same as\
    \ or a subdomain of\n       the value of the \"d=\" tag.\n   Internationalized\
    \ domain names MUST be converted using the steps\n       listed in Section 4 of\
    \ [RFC3490] using the \"ToASCII\" function.\n   ABNF:\n       sig-i-tag =   %x69\
    \ [FWS] \"=\" [FWS] [ Local-part ] \"@\" domain-name\n       INFORMATIVE NOTE:\
    \ The Local-part of the \"i=\" tag is optional\n           because in some cases\
    \ a signer may not be able to establish a\n           verified individual identity.\
    \  In such cases, the signer may\n           wish to assert that although it is\
    \ willing to go as far as\n           signing for the domain, it is unable or\
    \ unwilling to commit\n           to an individual user name within their domain.\
    \  It can do so\n           by including the domain part but not the Local-part\
    \ of the\n           identity.\n       INFORMATIVE DISCUSSION: This document does\
    \ not require the value\n           of the \"i=\" tag to match the identity in\
    \ any message header\n           fields.  This is considered to be a verifier\
    \ policy issue.\n           Constraints between the value of the \"i=\" tag and\
    \ other\n           identities in other header fields seek to apply basic\n  \
    \         authentication into the semantics of trust associated with a\n     \
    \      role such as content author.  Trust is a broad and complex\n          \
    \ topic and trust mechanisms are subject to highly creative\n           attacks.\
    \  The real-world efficacy of any but the most basic\n           bindings between\
    \ the \"i=\" value and other identities is not\n           well established, nor\
    \ is its vulnerability to subversion by\n           an attacker.  Hence reliance\
    \ on the use of these options\n           should be strictly limited.  In particular,\
    \ it is not at all\n           clear to what extent a typical end-user recipient\
    \ can rely on\n           any assurances that might be made by successful use\
    \ of the\n           \"i=\" options.\n   l=  Body length count (plain-text unsigned\
    \ decimal integer; OPTIONAL,\n       default is entire body).  This tag informs\
    \ the verifier of the\n       number of octets in the body of the email after\
    \ canonicalization\n       included in the cryptographic hash, starting from 0\
    \ immediately\n       following the CRLF preceding the body.  This value MUST\
    \ NOT be\n       larger than the actual number of octets in the canonicalized\n\
    \       message body.\n       INFORMATIVE IMPLEMENTATION WARNING: Use of the \"\
    l=\" tag might\n           allow display of fraudulent content without appropriate\n\
    \           warning to end users.  The \"l=\" tag is intended for\n          \
    \ increasing signature robustness when sending to mailing lists\n           that\
    \ both modify their content and do not sign their\n           messages.  However,\
    \ using the \"l=\" tag enables attacks in\n           which an intermediary with\
    \ malicious intent modifies a\n           message to include content that solely\
    \ benefits the attacker.\n           It is possible for the appended content to\
    \ completely replace\n           the original content in the end recipient's eyes\
    \ and to\n           defeat duplicate message detection algorithms.  Examples\
    \ are\n           described in Security Considerations (Section 8).  To avoid\n\
    \           this attack, signers should be extremely wary of using this\n    \
    \       tag, and verifiers might wish to ignore the tag or remove\n          \
    \ text that appears after the specified content length.\n       INFORMATIVE NOTE:\
    \ The value of the \"l=\" tag is constrained to 76\n           decimal digits.\
    \  This constraint is not intended to predict\n           the size of future messages\
    \ or to require implementations to\n           use an integer representation large\
    \ enough to represent the\n           maximum possible value, but is intended\
    \ to remind the\n           implementer to check the length of this and all other\
    \ tags\n           during verification and to test for integer overflow when\n\
    \           decoding the value.  Implementers may need to limit the\n        \
    \   actual value expressed to a value smaller than 10^76, e.g.,\n           to\
    \ allow a message to fit within the available storage space.\n   ABNF:\n   sig-l-tag\
    \    = %x6c [FWS] \"=\" [FWS] 1*76DIGIT\n   q=  A colon-separated list of query\
    \ methods used to retrieve the\n       public key (plain-text; OPTIONAL, default\
    \ is \"dns/txt\").  Each\n       query method is of the form \"type[/options]\"\
    , where the syntax\n       and semantics of the options depend on the type and\
    \ specified\n       options.  If there are multiple query mechanisms listed, the\n\
    \       choice of query mechanism MUST NOT change the interpretation of\n    \
    \   the signature.  Implementations MUST use the recognized query\n       mechanisms\
    \ in the order presented.\n   Currently, the only valid value is \"dns/txt\",\
    \ which defines the DNS\n       TXT record lookup algorithm described elsewhere\
    \ in this document.\n       The only option defined for the \"dns\" query type\
    \ is \"txt\", which\n       MUST be included.  Verifiers and signers MUST support\
    \ \"dns/txt\".\n   ABNF:\n       sig-q-tag        = %x71 [FWS] \"=\" [FWS] sig-q-tag-method\n\
    \                      *([FWS] \":\" [FWS] sig-q-tag-method)\n       sig-q-tag-method\
    \ = \"dns/txt\" / x-sig-q-tag-type\n                      [\"/\" x-sig-q-tag-args]\n\
    \       x-sig-q-tag-type = hyphenated-word  ; for future extension\n       x-sig-q-tag-args\
    \ = qp-hdr-value\n   s=  The selector subdividing the namespace for the \"d=\"\
    \ (domain) tag\n       (plain-text; REQUIRED).\n   ABNF:\n       sig-s-tag   \
    \ = %x73 [FWS] \"=\" [FWS] selector\n   t=  Signature Timestamp (plain-text unsigned\
    \ decimal integer;\n       RECOMMENDED, default is an unknown creation time).\
    \  The time that\n       this signature was created.  The format is the number\
    \ of seconds\n       since 00:00:00 on January 1, 1970 in the UTC time zone. \
    \ The\n       value is expressed as an unsigned integer in decimal ASCII.  This\n\
    \       value is not constrained to fit into a 31- or 32-bit integer.\n      \
    \ Implementations SHOULD be prepared to handle values up to at\n       least 10^12\
    \ (until approximately AD 200,000; this fits into 40\n       bits).  To avoid\
    \ denial-of-service attacks, implementations MAY\n       consider any value longer\
    \ than 12 digits to be infinite.  Leap\n       seconds are not counted.  Implementations\
    \ MAY ignore signatures\n       that have a timestamp in the future.\n   ABNF:\n\
    \       sig-t-tag    = %x74 [FWS] \"=\" [FWS] 1*12DIGIT\n   x=  Signature Expiration\
    \ (plain-text unsigned decimal integer;\n       RECOMMENDED, default is no expiration).\
    \  The format is the same\n       as in the \"t=\" tag, represented as an absolute\
    \ date, not as a\n       time delta from the signing timestamp.  The value is\
    \ expressed as\n       an unsigned integer in decimal ASCII, with the same constraints\n\
    \       on the value in the \"t=\" tag.  Signatures MAY be considered\n      \
    \ invalid if the verification time at the verifier is past the\n       expiration\
    \ date.  The verification time should be the time that\n       the message was\
    \ first received at the administrative domain of\n       the verifier if that\
    \ time is reliably available; otherwise the\n       current time should be used.\
    \  The value of the \"x=\" tag MUST be\n       greater than the value of the \"\
    t=\" tag if both are present.\n       INFORMATIVE NOTE: The \"x=\" tag is not\
    \ intended as an anti-replay\n           defense.\n   ABNF:\n       sig-x-tag\
    \    = %x78 [FWS] \"=\" [FWS] 1*12DIGIT\n   z=  Copied header fields (dkim-quoted-printable,\
    \ but see description;\n       OPTIONAL, default is null).  A vertical-bar-separated\
    \ list of\n       selected header fields present when the message was signed,\n\
    \       including both the field name and value.  It is not required to\n    \
    \   include all header fields present at the time of signing.  This\n       field\
    \ need not contain the same header fields listed in the \"h=\"\n       tag.  The\
    \ header field text itself must encode the vertical bar\n       (\"|\", %x7C)\
    \ character (i.e., vertical bars in the \"z=\" text are\n       metacharacters,\
    \ and any actual vertical bar characters in a\n       copied header field must\
    \ be encoded).  Note that all whitespace\n       must be encoded, including whitespace\
    \ between the colon and the\n       header field value.  After encoding, FWS MAY\
    \ be added at\n       arbitrary locations in order to avoid excessively long lines;\n\
    \       such whitespace is NOT part of the value of the header field, and\n  \
    \     MUST be removed before decoding.\n   The header fields referenced by the\
    \ \"h=\" tag refer to the fields in\n       the RFC 2822 header of the message,\
    \ not to any copied fields in\n       the \"z=\" tag.  Copied header field values\
    \ are for diagnostic use.\n   Header fields with characters requiring conversion\
    \ (perhaps from\n       legacy MTAs that are not [RFC2822] compliant) SHOULD be\
    \ converted\n       as described in MIME Part Three [RFC2047].\n   ABNF:\n   \
    \    sig-z-tag      = %x7A [FWS] \"=\" [FWS] sig-z-tag-copy\n                \
    \    *( [FWS] \"|\" sig-z-tag-copy )\n   sig-z-tag-copy = hdr-name \":\" qp-hdr-value\n\
    \   qp-hdr-value   = dkim-quoted-printable    ; with \"|\" encoded\n      INFORMATIVE\
    \ EXAMPLE of a signature header field spread across\n      multiple continuation\
    \ lines:\n   DKIM-Signature: a=rsa-sha256; d=example.net; s=brisbane;\n      c=simple;\
    \ q=dns/txt; i=@eng.example.net;\n      t=1117574938; x=1118006938;\n      h=from:to:subject:date;\n\
    \      z=From:foo@eng.example.net|To:joe@example.com|\n        Subject:demo=20run|Date:July=205,=202005=203:44:08=20PM=20-0700;\n\
    \      bh=MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=;\n      b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ\n\
    \               VoG4ZHRNiYzR\n"
- title: 3.6.  Key Management and Representation
  contents:
  - "3.6.  Key Management and Representation\n   Signature applications require some\
    \ level of assurance that the\n   verification public key is associated with the\
    \ claimed signer.  Many\n   applications achieve this by using public key certificates\
    \ issued by\n   a trusted third party.  However, DKIM can achieve a sufficient\
    \ level\n   of security, with significantly enhanced scalability, by simply\n\
    \   having the verifier query the purported signer's DNS entry (or some\n   security-equivalent)\
    \ in order to retrieve the public key.\n   DKIM keys can potentially be stored\
    \ in multiple types of key servers\n   and in multiple formats.  The storage and\
    \ format of keys are\n   irrelevant to the remainder of the DKIM algorithm.\n\
    \   Parameters to the key lookup algorithm are the type of the lookup\n   (the\
    \ \"q=\" tag), the domain of the signer (the \"d=\" tag of the DKIM-\n   Signature\
    \ header field), and the selector (the \"s=\" tag).\n       public_key = dkim_find_key(q_val,\
    \ d_val, s_val)\n   This document defines a single binding, using DNS TXT records\
    \ to\n   distribute the keys.  Other bindings may be defined in the future.\n"
- title: 3.6.1.  Textual Representation
  contents:
  - "3.6.1.  Textual Representation\n   It is expected that many key servers will\
    \ choose to present the keys\n   in an otherwise unstructured text format (for\
    \ example, an XML form\n   would not be considered to be unstructured text for\
    \ this purpose).\n   The following definition MUST be used for any DKIM key represented\
    \ in\n   an otherwise unstructured textual form.\n   The overall syntax is a tag-list\
    \ as described in Section 3.2.  The\n   current valid tags are described below.\
    \  Other tags MAY be present\n   and MUST be ignored by any implementation that\
    \ does not understand\n   them.\n   v=  Version of the DKIM key record (plain-text;\
    \ RECOMMENDED, default\n       is \"DKIM1\").  If specified, this tag MUST be\
    \ set to \"DKIM1\"\n       (without the quotes).  This tag MUST be the first tag\
    \ in the\n       record.  Records beginning with a \"v=\" tag with any other value\n\
    \       MUST be discarded.  Note that verifiers must do a string\n       comparison\
    \ on this value; for example, \"DKIM1\" is not the same as\n       \"DKIM1.0\"\
    .\n       ABNF:\n       key-v-tag    = %x76 [FWS] \"=\" [FWS] \"DKIM1\"\n   g=\
    \  Granularity of the key (plain-text; OPTIONAL, default is \"*\").\n       This\
    \ value MUST match the Local-part of the \"i=\" tag of the DKIM-\n       Signature\
    \ header field (or its default value of the empty string\n       if \"i=\" is\
    \ not specified), with a single, optional \"*\" character\n       matching a sequence\
    \ of zero or more arbitrary characters\n       (\"wildcarding\").  An email with\
    \ a signing address that does not\n       match the value of this tag constitutes\
    \ a failed verification.\n       The intent of this tag is to constrain which\
    \ signing address can\n       legitimately use this selector, for example, when\
    \ delegating a\n       key to a third party that should only be used for special\n\
    \       purposes.  Wildcarding allows matching for addresses such as\n       \"\
    user+*\" or \"*-offer\".  An empty \"g=\" value never matches any\n       addresses.\n\
    \   ABNF:\n       key-g-tag       = %x67 [FWS] \"=\" [FWS] key-g-tag-lpart\n \
    \      key-g-tag-lpart = [dot-atom-text] [\"*\" [dot-atom-text] ]\n   h=  Acceptable\
    \ hash algorithms (plain-text; OPTIONAL, defaults to\n       allowing all algorithms).\
    \  A colon-separated list of hash\n       algorithms that might be used.  Signers\
    \ and Verifiers MUST\n       support the \"sha256\" hash algorithm.  Verifiers\
    \ MUST also support\n       the \"sha1\" hash algorithm.\n       ABNF:\n     \
    \  key-h-tag       = %x68 [FWS] \"=\" [FWS] key-h-tag-alg\n                  \
    \   0*( [FWS] \":\" [FWS] key-h-tag-alg )\n       key-h-tag-alg   = \"sha1\" /\
    \ \"sha256\" / x-key-h-tag-alg\n       x-key-h-tag-alg = hyphenated-word   ; for\
    \ future extension\n   k=  Key type (plain-text; OPTIONAL, default is \"rsa\"\
    ).  Signers and\n       verifiers MUST support the \"rsa\" key type.  The \"rsa\"\
    \ key type\n       indicates that an ASN.1 DER-encoded [ITU.X660.1997] RSAPublicKey\n\
    \       [RFC3447] (see Sections 3.1 and A.1.1) is being used in the \"p=\"\n \
    \      tag.  (Note: the \"p=\" tag further encodes the value using the\n     \
    \  base64 algorithm.)\n       ABNF:\n       key-k-tag        = %x76 [FWS] \"=\"\
    \ [FWS] key-k-tag-type\n       key-k-tag-type   = \"rsa\" / x-key-k-tag-type\n\
    \       x-key-k-tag-type = hyphenated-word   ; for future extension\n   n=  Notes\
    \ that might be of interest to a human (qp-section; OPTIONAL,\n       default\
    \ is empty).  No interpretation is made by any program.\n       This tag should\
    \ be used sparingly in any key server mechanism\n       that has space limitations\
    \ (notably DNS).  This is intended for\n       use by administrators, not end\
    \ users.\n   ABNF:\n       key-n-tag    = %x6e [FWS] \"=\" [FWS] qp-section\n\
    \   p=  Public-key data (base64; REQUIRED).  An empty value means that\n     \
    \  this public key has been revoked.  The syntax and semantics of\n       this\
    \ tag value before being encoded in base64 are defined by the\n       \"k=\" tag.\n\
    \           INFORMATIVE RATIONALE: If a private key has been compromised\n   \
    \        or otherwise disabled (e.g., an outsourcing contract has been\n     \
    \      terminated), a signer might want to explicitly state that it\n        \
    \   knows about the selector, but all messages using that\n           selector\
    \ should fail verification.  Verifiers should ignore\n           any DKIM-Signature\
    \ header fields with a selector referencing\n           a revoked key.\n   ABNF:\n\
    \       key-p-tag    = %x70 [FWS] \"=\" [ [FWS] base64string ]\n       INFORMATIVE\
    \ NOTE: A base64string is permitted to include white\n           space (FWS) at\
    \ arbitrary places; however, any CRLFs must be\n           followed by at least\
    \ one WSP character.  Implementors and\n           administrators are cautioned\
    \ to ensure that selector TXT\n           records conform to this specification.\n\
    \   s=  Service Type (plain-text; OPTIONAL; default is \"*\").  A colon-\n   \
    \    separated list of service types to which this record applies.\n       Verifiers\
    \ for a given service type MUST ignore this record if the\n       appropriate\
    \ type is not listed.  Currently defined service types\n       are as follows:\n\
    \       *   matches all service types\n       email   electronic mail (not necessarily\
    \ limited to SMTP)\n       This tag is intended to constrain the use of keys for\
    \ other\n       purposes, should use of DKIM be defined by other services in the\n\
    \       future.\n   ABNF:\n       key-s-tag        = %x73 [FWS] \"=\" [FWS] key-s-tag-type\n\
    \                       0*( [FWS] \":\" [FWS] key-s-tag-type )\n       key-s-tag-type\
    \   = \"email\" / \"*\" / x-key-s-tag-type\n       x-key-s-tag-type = hyphenated-word\
    \   ; for future extension\n   t=  Flags, represented as a colon-separated list\
    \ of names (plain-\n       text; OPTIONAL, default is no flags set).  The defined\
    \ flags are\n       as follows:\n       y   This domain is testing DKIM.  Verifiers\
    \ MUST NOT treat\n           messages from signers in testing mode differently\
    \ from\n           unsigned email, even should the signature fail to verify.\n\
    \           Verifiers MAY wish to track testing mode results to assist\n     \
    \      the signer.\n       s   Any DKIM-Signature header fields using the \"i=\"\
    \ tag MUST have\n           the same domain value on the right-hand side of the\
    \ \"@\" in\n           the \"i=\" tag and the value of the \"d=\" tag.  That is,\
    \ the\n           \"i=\" domain MUST NOT be a subdomain of \"d=\".  Use of this\n\
    \           flag is RECOMMENDED unless subdomaining is required.\n   ABNF:\n \
    \      key-t-tag        = %x74 [FWS] \"=\" [FWS] key-t-tag-flag\n            \
    \          0*( [FWS] \":\" [FWS] key-t-tag-flag )\n       key-t-tag-flag   = \"\
    y\" / \"s\" / x-key-t-tag-flag\n       x-key-t-tag-flag = hyphenated-word   ;\
    \ for future extension\n   Unrecognized flags MUST be ignored.\n"
- title: 3.6.2.  DNS Binding
  contents:
  - "3.6.2.  DNS Binding\n   A binding using DNS TXT records as a key service is hereby\
    \ defined.\n   All implementations MUST support this binding.\n"
- title: 3.6.2.1.  Namespace
  contents:
  - "3.6.2.1.  Namespace\n   All DKIM keys are stored in a subdomain named \"_domainkey\"\
    .  Given a\n   DKIM-Signature field with a \"d=\" tag of \"example.com\" and an\
    \ \"s=\" tag\n   of \"foo.bar\", the DNS query will be for\n   \"foo.bar._domainkey.example.com\"\
    .\n      INFORMATIVE OPERATIONAL NOTE: Wildcard DNS records (e.g.,\n      *.bar._domainkey.example.com)\
    \ do not make sense in this context\n      and should not be used.  Note also\
    \ that wildcards within domains\n      (e.g., s._domainkey.*.example.com) are\
    \ not supported by the DNS.\n"
- title: 3.6.2.2.  Resource Record Types for Key Storage
  contents:
  - "3.6.2.2.  Resource Record Types for Key Storage\n   The DNS Resource Record type\
    \ used is specified by an option to the\n   query-type (\"q=\") tag.  The only\
    \ option defined in this base\n   specification is \"txt\", indicating the use\
    \ of a TXT Resource Record\n   (RR).  A later extension of this standard may define\
    \ another RR type.\n   Strings in a TXT RR MUST be concatenated together before\
    \ use with no\n   intervening whitespace.  TXT RRs MUST be unique for a particular\n\
    \   selector name; that is, if there are multiple records in an RRset,\n   the\
    \ results are undefined.\n   TXT RRs are encoded as described in Section 3.6.1.\n"
- title: 3.7.  Computing the Message Hashes
  contents:
  - "3.7.  Computing the Message Hashes\n   Both signing and verifying message signatures\
    \ start with a step of\n   computing two cryptographic hashes over the message.\
    \  Signers will\n   choose the parameters of the signature as described in Signer\
    \ Actions\n   (Section 5); verifiers will use the parameters specified in the\
    \ DKIM-\n   Signature header field being verified.  In the following discussion,\n\
    \   the names of the tags in the DKIM-Signature header field that either\n   exists\
    \ (when verifying) or will be created (when signing) are used.\n   Note that canonicalization\
    \ (Section 3.4) is only used to prepare the\n   email for signing or verifying;\
    \ it does not affect the transmitted\n   email in any way.\n   The signer/verifier\
    \ MUST compute two hashes, one over the body of the\n   message and one over the\
    \ selected header fields of the message.\n   Signers MUST compute them in the\
    \ order shown.  Verifiers MAY compute\n   them in any order convenient to the\
    \ verifier, provided that the\n   result is semantically identical to the semantics\
    \ that would be the\n   case had they been computed in this order.\n   In hash\
    \ step 1, the signer/verifier MUST hash the message body,\n   canonicalized using\
    \ the body canonicalization algorithm specified in\n   the \"c=\" tag and then\
    \ truncated to the length specified in the \"l=\"\n   tag.  That hash value is\
    \ then converted to base64 form and inserted\n   into (signers) or compared to\
    \ (verifiers) the \"bh=\" tag of the DKIM-\n   Signature header field.\n   In\
    \ hash step 2, the signer/verifier MUST pass the following to the\n   hash algorithm\
    \ in the indicated order.\n   1.  The header fields specified by the \"h=\" tag,\
    \ in the order\n       specified in that tag, and canonicalized using the header\n\
    \       canonicalization algorithm specified in the \"c=\" tag.  Each\n      \
    \ header field MUST be terminated with a single CRLF.\n   2.  The DKIM-Signature\
    \ header field that exists (verifying) or will\n       be inserted (signing) in\
    \ the message, with the value of the \"b=\"\n       tag deleted (i.e., treated\
    \ as the empty string), canonicalized\n       using the header canonicalization\
    \ algorithm specified in the \"c=\"\n       tag, and without a trailing CRLF.\n\
    \   All tags and their values in the DKIM-Signature header field are\n   included\
    \ in the cryptographic hash with the sole exception of the\n   value portion of\
    \ the \"b=\" (signature) tag, which MUST be treated as\n   the null string.  All\
    \ tags MUST be included even if they might not be\n   understood by the verifier.\
    \  The header field MUST be presented to\n   the hash algorithm after the body\
    \ of the message rather than with the\n   rest of the header fields and MUST be\
    \ canonicalized as specified in\n   the \"c=\" (canonicalization) tag.  The DKIM-Signature\
    \ header field\n   MUST NOT be included in its own h= tag, although other DKIM-Signature\n\
    \   header fields MAY be signed (see Section 4).\n   When calculating the hash\
    \ on messages that will be transmitted using\n   base64 or quoted-printable encoding,\
    \ signers MUST compute the hash\n   after the encoding.  Likewise, the verifier\
    \ MUST incorporate the\n   values into the hash before decoding the base64 or\
    \ quoted-printable\n   text.  However, the hash MUST be computed before transport\
    \ level\n   encodings such as SMTP \"dot-stuffing\" (the modification of lines\n\
    \   beginning with a \".\" to avoid confusion with the SMTP end-of-message\n \
    \  marker, as specified in [RFC2821]).\n   With the exception of the canonicalization\
    \ procedure described in\n   Section 3.4, the DKIM signing process treats the\
    \ body of messages as\n   simply a string of octets.  DKIM messages MAY be either\
    \ in plain-text\n   or in MIME format; no special treatment is afforded to MIME\
    \ content.\n   Message attachments in MIME format MUST be included in the content\n\
    \   that is signed.\n   More formally, the algorithm for the signature is as follows:\n\
    \       body-hash = hash-alg(canon_body)\n       header-hash = hash-alg(canon_header\
    \ || DKIM-SIG)\n       signature = sig-alg(header-hash, key)\n   where \"sig-alg\"\
    \ is the signature algorithm specified by the \"a=\" tag,\n   \"hash-alg\" is\
    \ the hash algorithm specified by the \"a=\" tag,\n   \"canon_header\" and \"\
    canon_body\" are the canonicalized message header\n   and body (respectively)\
    \ as defined in Section 3.4 (excluding the\n   DKIM-Signature header field), and\
    \ \"DKIM-SIG\" is the canonicalized\n   DKIM-Signature header field sans the signature\
    \ value itself, but with\n   \"body-hash\" included as the \"bh=\" tag.\n    \
    \  INFORMATIVE IMPLEMENTERS' NOTE: Many digital signature APIs\n      provide\
    \ both hashing and application of the RSA private key using\n      a single \"\
    sign()\" primitive.  When using such an API, the last two\n      steps in the\
    \ algorithm would probably be combined into a single\n      call that would perform\
    \ both the \"hash-alg\" and the \"sig-alg\".\n"
- title: 3.8.  Signing by Parent Domains
  contents:
  - "3.8.  Signing by Parent Domains\n   In some circumstances, it is desirable for\
    \ a domain to apply a\n   signature on behalf of any of its subdomains without\
    \ the need to\n   maintain separate selectors (key records) in each subdomain.\
    \  By\n   default, private keys corresponding to key records can be used to\n\
    \   sign messages for any subdomain of the domain in which they reside;\n   e.g.,\
    \ a key record for the domain example.com can be used to verify\n   messages where\
    \ the signing identity (\"i=\" tag of the signature) is\n   sub.example.com, or\
    \ even sub1.sub2.example.com.  In order to limit\n   the capability of such keys\
    \ when this is not intended, the \"s\" flag\n   may be set in the \"t=\" tag of\
    \ the key record to constrain the\n   validity of the record to exactly the domain\
    \ of the signing identity.\n   If the referenced key record contains the \"s\"\
    \ flag as part of the\n   \"t=\" tag, the domain of the signing identity (\"i=\"\
    \ flag) MUST be the\n   same as that of the d= domain.  If this flag is absent,\
    \ the domain of\n   the signing identity MUST be the same as, or a subdomain of,\
    \ the d=\n   domain.  Key records that are not intended for use with subdomains\n\
    \   SHOULD specify the \"s\" flag in the \"t=\" tag.\n"
- title: 4.  Semantics of Multiple Signatures
  contents:
  - '4.  Semantics of Multiple Signatures

    '
- title: 4.1.  Example Scenarios
  contents:
  - "4.1.  Example Scenarios\n   There are many reasons why a message might have multiple\
    \ signatures.\n   For example, a given signer might sign multiple times, perhaps\
    \ with\n   different hashing or signing algorithms during a transition phase.\n\
    \      INFORMATIVE EXAMPLE: Suppose SHA-256 is in the future found to be\n   \
    \   insufficiently strong, and DKIM usage transitions to SHA-1024.  A\n      signer\
    \ might immediately sign using the newer algorithm, but\n      continue to sign\
    \ using the older algorithm for interoperability\n      with verifiers that had\
    \ not yet upgraded.  The signer would do\n      this by adding two DKIM-Signature\
    \ header fields, one using each\n      algorithm.  Older verifiers that did not\
    \ recognize SHA-1024 as an\n      acceptable algorithm would skip that signature\
    \ and use the older\n      algorithm; newer verifiers could use either signature\
    \ at their\n      option, and all other things being equal might not even attempt\
    \ to\n      verify the other signature.\n   Similarly, a signer might sign a message\
    \ including all headers and no\n   \"l=\" tag (to satisfy strict verifiers) and\
    \ a second time with a\n   limited set of headers and an \"l=\" tag (in anticipation\
    \ of possible\n   message modifications in route to other verifiers).  Verifiers\
    \ could\n   then choose which signature they preferred.\n      INFORMATIVE EXAMPLE:\
    \ A verifier might receive a message with two\n      signatures, one covering\
    \ more of the message than the other.  If\n      the signature covering more of\
    \ the message verified, then the\n      verifier could make one set of policy\
    \ decisions; if that signature\n      failed but the signature covering less of\
    \ the message verified,\n      the verifier might make a different set of policy\
    \ decisions.\n   Of course, a message might also have multiple signatures because\
    \ it\n   passed through multiple signers.  A common case is expected to be\n \
    \  that of a signed message that passes through a mailing list that also\n   signs\
    \ all messages.  Assuming both of those signatures verify, a\n   recipient might\
    \ choose to accept the message if either of those\n   signatures were known to\
    \ come from trusted sources.\n      INFORMATIVE EXAMPLE: Recipients might choose\
    \ to whitelist mailing\n      lists to which they have subscribed and that have\
    \ acceptable anti-\n      abuse policies so as to accept messages sent to that\
    \ list even\n      from unknown authors.  They might also subscribe to less trusted\n\
    \      mailing lists (e.g., those without anti-abuse protection) and be\n    \
    \  willing to accept all messages from specific authors, but insist\n      on\
    \ doing additional abuse scanning for other messages.\n   Another related example\
    \ of multiple signers might be forwarding\n   services, such as those commonly\
    \ associated with academic alumni\n   sites.\n      INFORMATIVE EXAMPLE: A recipient\
    \ might have an address at\n      members.example.org, a site that has anti-abuse\
    \ protection that is\n      somewhat less effective than the recipient would prefer.\
    \  Such a\n      recipient might have specific authors whose messages would be\n\
    \      trusted absolutely, but messages from unknown authors that had\n      passed\
    \ the forwarder's scrutiny would have only medium trust.\n"
- title: 4.2.  Interpretation
  contents:
  - "4.2.  Interpretation\n   A signer that is adding a signature to a message merely\
    \ creates a new\n   DKIM-Signature header, using the usual semantics of the h=\
    \ option.  A\n   signer MAY sign previously existing DKIM-Signature header fields\n\
    \   using the method described in Section 5.4 to sign trace header\n   fields.\n\
    \      INFORMATIVE NOTE: Signers should be cognizant that signing DKIM-\n    \
    \  Signature header fields may result in signature failures with\n      intermediaries\
    \ that do not recognize that DKIM-Signature header\n      fields are trace header\
    \ fields and unwittingly reorder them, thus\n      breaking such signatures. \
    \ For this reason, signing existing DKIM-\n      Signature header fields is unadvised,\
    \ albeit legal.\n      INFORMATIVE NOTE: If a header field with multiple instances\
    \ is\n      signed, those header fields are always signed from the bottom up.\n\
    \      Thus, it is not possible to sign only specific DKIM-Signature\n      header\
    \ fields.  For example, if the message being signed already\n      contains three\
    \ DKIM-Signature header fields A, B, and C, it is\n      possible to sign all\
    \ of them, B and C only, or C only, but not A\n      only, B only, A and B only,\
    \ or A and C only.\n   A signer MAY add more than one DKIM-Signature header field\
    \ using\n   different parameters.  For example, during a transition period a\n\
    \   signer might want to produce signatures using two different hash\n   algorithms.\n\
    \   Signers SHOULD NOT remove any DKIM-Signature header fields from\n   messages\
    \ they are signing, even if they know that the signatures\n   cannot be verified.\n\
    \   When evaluating a message with multiple signatures, a verifier SHOULD\n  \
    \ evaluate signatures independently and on their own merits.  For\n   example,\
    \ a verifier that by policy chooses not to accept signatures\n   with deprecated\
    \ cryptographic algorithms would consider such\n   signatures invalid.  Verifiers\
    \ MAY process signatures in any order of\n   their choice; for example, some verifiers\
    \ might choose to process\n   signatures corresponding to the From field in the\
    \ message header\n   before other signatures.  See Section 6.1 for more information\
    \ about\n   signature choices.\n      INFORMATIVE IMPLEMENTATION NOTE: Verifier\
    \ attempts to correlate\n      valid signatures with invalid signatures in an\
    \ attempt to guess\n      why a signature failed are ill-advised.  In particular,\
    \ there is\n      no general way that a verifier can determine that an invalid\n\
    \      signature was ever valid.\n   Verifiers SHOULD ignore failed signatures\
    \ as though they were not\n   present in the message.  Verifiers SHOULD continue\
    \ to check\n   signatures until a signature successfully verifies to the\n   satisfaction\
    \ of the verifier.  To limit potential denial-of-service\n   attacks, verifiers\
    \ MAY limit the total number of signatures they will\n   attempt to verify.\n"
- title: 5.  Signer Actions
  contents:
  - "5.  Signer Actions\n   The following steps are performed in order by signers.\n"
- title: 5.1.  Determine Whether the Email Should Be Signed and by Whom
  contents:
  - "5.1.  Determine Whether the Email Should Be Signed and by Whom\n   A signer can\
    \ obviously only sign email for domains for which it has a\n   private key and\
    \ the necessary knowledge of the corresponding public\n   key and selector information.\
    \  However, there are a number of other\n   reasons beyond the lack of a private\
    \ key why a signer could choose\n   not to sign an email.\n      INFORMATIVE NOTE:\
    \ Signing modules may be incorporated into any\n      portion of the mail system\
    \ as deemed appropriate, including an\n      MUA, a SUBMISSION server, or an MTA.\
    \  Wherever implemented,\n      signers should beware of signing (and thereby\
    \ asserting\n      responsibility for) messages that may be problematic.  In\n\
    \      particular, within a trusted enclave the signing address might be\n   \
    \   derived from the header according to local policy; SUBMISSION\n      servers\
    \ might only sign messages from users that are properly\n      authenticated and\
    \ authorized.\n      INFORMATIVE IMPLEMENTER ADVICE: SUBMISSION servers should\
    \ not sign\n      Received header fields if the outgoing gateway MTA obfuscates\n\
    \      Received header fields, for example, to hide the details of\n      internal\
    \ topology.\n   If an email cannot be signed for some reason, it is a local policy\n\
    \   decision as to what to do with that email.\n"
- title: 5.2.  Select a Private Key and Corresponding Selector Information
  contents:
  - "5.2.  Select a Private Key and Corresponding Selector Information\n   This specification\
    \ does not define the basis by which a signer should\n   choose which private\
    \ key and selector information to use.  Currently,\n   all selectors are equal\
    \ as far as this specification is concerned, so\n   the decision should largely\
    \ be a matter of administrative\n   convenience.  Distribution and management\
    \ of private keys is also\n   outside the scope of this document.\n      INFORMATIVE\
    \ OPERATIONS ADVICE: A signer should not sign with a\n      private key when the\
    \ selector containing the corresponding public\n      key is expected to be revoked\
    \ or removed before the verifier has\n      an opportunity to validate the signature.\
    \  The signer should\n      anticipate that verifiers may choose to defer validation,\
    \ perhaps\n      until the message is actually read by the final recipient.  In\n\
    \      particular, when rotating to a new key pair, signing should\n      immediately\
    \ commence with the new private key and the old public\n      key should be retained\
    \ for a reasonable validation interval before\n      being removed from the key\
    \ server.\n"
- title: 5.3.  Normalize the Message to Prevent Transport Conversions
  contents:
  - "5.3.  Normalize the Message to Prevent Transport Conversions\n   Some messages,\
    \ particularly those using 8-bit characters, are subject\n   to modification during\
    \ transit, notably conversion to 7-bit form.\n   Such conversions will break DKIM\
    \ signatures.  In order to minimize\n   the chances of such breakage, signers\
    \ SHOULD convert the message to a\n   suitable MIME content transfer encoding\
    \ such as quoted-printable or\n   base64 as described in MIME Part One [RFC2045]\
    \ before signing.  Such\n   conversion is outside the scope of DKIM; the actual\
    \ message SHOULD be\n   converted to 7-bit MIME by an MUA or MSA prior to presentation\
    \ to the\n   DKIM algorithm.\n   If the message is submitted to the signer with\
    \ any local encoding\n   that will be modified before transmission, that modification\
    \ to\n   canonical [RFC2822] form MUST be done before signing.  In particular,\n\
    \   bare CR or LF characters (used by some systems as a local line\n   separator\
    \ convention) MUST be converted to the SMTP-standard CRLF\n   sequence before\
    \ the message is signed.  Any conversion of this sort\n   SHOULD be applied to\
    \ the message actually sent to the recipient(s),\n   not just to the version presented\
    \ to the signing algorithm.\n   More generally, the signer MUST sign the message\
    \ as it is expected to\n   be received by the verifier rather than in some local\
    \ or internal\n   form.\n"
- title: 5.4.  Determine the Header Fields to Sign
  contents:
  - "5.4.  Determine the Header Fields to Sign\n   The From header field MUST be signed\
    \ (that is, included in the \"h=\"\n   tag of the resulting DKIM-Signature header\
    \ field).  Signers SHOULD\n   NOT sign an existing header field likely to be legitimately\
    \ modified\n   or removed in transit.  In particular, [RFC2821] explicitly permits\n\
    \   modification or removal of the Return-Path header field in transit.\n   Signers\
    \ MAY include any other header fields present at the time of\n   signing at the\
    \ discretion of the signer.\n      INFORMATIVE OPERATIONS NOTE: The choice of\
    \ which header fields to\n      sign is non-obvious.  One strategy is to sign\
    \ all existing, non-\n      repeatable header fields.  An alternative strategy\
    \ is to sign only\n      header fields that are likely to be displayed to or otherwise\
    \ be\n      likely to affect the processing of the message at the receiver.  A\n\
    \      third strategy is to sign only \"well known\" headers.  Note that\n   \
    \   verifiers may treat unsigned header fields with extreme\n      skepticism,\
    \ including refusing to display them to the end user or\n      even ignoring the\
    \ signature if it does not cover certain header\n      fields.  For this reason,\
    \ signing fields present in the message\n      such as Date, Subject, Reply-To,\
    \ Sender, and all MIME header\n      fields are highly advised.\n   The DKIM-Signature\
    \ header field is always implicitly signed and MUST\n   NOT be included in the\
    \ \"h=\" tag except to indicate that other\n   preexisting signatures are also\
    \ signed.\n   Signers MAY claim to have signed header fields that do not exist\n\
    \   (that is, signers MAY include the header field name in the \"h=\" tag\n  \
    \ even if that header field does not exist in the message).  When\n   computing\
    \ the signature, the non-existing header field MUST be\n   treated as the null\
    \ string (including the header field name, header\n   field value, all punctuation,\
    \ and the trailing CRLF).\n      INFORMATIVE RATIONALE: This allows signers to\
    \ explicitly assert\n      the absence of a header field; if that header field\
    \ is added later\n      the signature will fail.\n      INFORMATIVE NOTE: A header\
    \ field name need only be listed once\n      more than the actual number of that\
    \ header field in a message at\n      the time of signing in order to prevent\
    \ any further additions.\n      For example, if there is a single Comments header\
    \ field at the\n      time of signing, listing Comments twice in the \"h=\" tag\
    \ is\n      sufficient to prevent any number of Comments header fields from\n\
    \      being appended; it is not necessary (but is legal) to list\n      Comments\
    \ three or more times in the \"h=\" tag.\n   Signers choosing to sign an existing\
    \ header field that occurs more\n   than once in the message (such as Received)\
    \ MUST sign the physically\n   last instance of that header field in the header\
    \ block.  Signers\n   wishing to sign multiple instances of such a header field\
    \ MUST\n   include the header field name multiple times in the h= tag of the\n\
    \   DKIM-Signature header field, and MUST sign such header fields in\n   order\
    \ from the bottom of the header field block to the top.  The\n   signer MAY include\
    \ more instances of a header field name in h= than\n   there are actual corresponding\
    \ header fields to indicate that\n   additional header fields of that name SHOULD\
    \ NOT be added.\n      INFORMATIVE EXAMPLE:\n      If the signer wishes to sign\
    \ two existing Received header fields,\n      and the existing header contains:\n\
    \       Received: <A>\n       Received: <B>\n       Received: <C>\n      then\
    \ the resulting DKIM-Signature header field should read:\n       DKIM-Signature:\
    \ ... h=Received : Received : ...\n      and Received header fields <C> and <B>\
    \ will be signed in that\n      order.\n   Signers should be careful of signing\
    \ header fields that might have\n   additional instances added later in the delivery\
    \ process, since such\n   header fields might be inserted after the signed instance\
    \ or\n   otherwise reordered.  Trace header fields (such as Received) and\n  \
    \ Resent-* blocks are the only fields prohibited by [RFC2822] from\n   being reordered.\
    \  In particular, since DKIM-Signature header fields\n   may be reordered by some\
    \ intermediate MTAs, signing existing DKIM-\n   Signature header fields is error-prone.\n\
    \      INFORMATIVE ADMONITION: Despite the fact that [RFC2822] permits\n     \
    \ header fields to be reordered (with the exception of Received\n      header\
    \ fields), reordering of signed header fields with multiple\n      instances by\
    \ intermediate MTAs will cause DKIM signatures to be\n      broken; such anti-social\
    \ behavior should be avoided.\n      INFORMATIVE IMPLEMENTER'S NOTE: Although\
    \ not required by this\n      specification, all end-user visible header fields\
    \ should be signed\n      to avoid possible \"indirect spamming\".  For example,\
    \ if the\n      Subject header field is not signed, a spammer can resend a\n \
    \     previously signed mail, replacing the legitimate subject with a\n      one-line\
    \ spam.\n"
- title: 5.5.  Recommended Signature Content
  contents:
  - "5.5.  Recommended Signature Content\n   In order to maximize compatibility with\
    \ a variety of verifiers, it is\n   recommended that signers follow the practices\
    \ outlined in this\n   section when signing a message.  However, these are generic\n\
    \   recommendations applying to the general case; specific senders may\n   wish\
    \ to modify these guidelines as required by their unique\n   situations.  Verifiers\
    \ MUST be capable of verifying signatures even\n   if one or more of the recommended\
    \ header fields is not signed (with\n   the exception of From, which must always\
    \ be signed) or if one or more\n   of the disrecommended header fields is signed.\
    \  Note that verifiers\n   do have the option of ignoring signatures that do not\
    \ cover a\n   sufficient portion of the header or body, just as they may ignore\n\
    \   signatures from an identity they do not trust.\n   The following header fields\
    \ SHOULD be included in the signature, if\n   they are present in the message\
    \ being signed:\n   o  From (REQUIRED in all signatures)\n   o  Sender, Reply-To\n\
    \   o  Subject\n   o  Date, Message-ID\n   o  To, Cc\n   o  MIME-Version\n   o\
    \  Content-Type, Content-Transfer-Encoding, Content-ID, Content-\n      Description\n\
    \   o  Resent-Date, Resent-From, Resent-Sender, Resent-To, Resent-Cc,\n      Resent-Message-ID\n\
    \   o  In-Reply-To, References\n   o  List-Id, List-Help, List-Unsubscribe, List-Subscribe,\
    \ List-Post,\n      List-Owner, List-Archive\n   The following header fields SHOULD\
    \ NOT be included in the signature:\n   o  Return-Path\n   o  Received\n   o \
    \ Comments, Keywords\n   o  Bcc, Resent-Bcc\n   o  DKIM-Signature\n   Optional\
    \ header fields (those not mentioned above) normally SHOULD\n   NOT be included\
    \ in the signature, because of the potential for\n   additional header fields\
    \ of the same name to be legitimately added or\n   reordered prior to verification.\
    \  There are likely to be legitimate\n   exceptions to this rule, because of the\
    \ wide variety of application-\n   specific header fields that may be applied\
    \ to a message, some of\n   which are unlikely to be duplicated, modified, or\
    \ reordered.\n   Signers SHOULD choose canonicalization algorithms based on the\
    \ types\n   of messages they process and their aversion to risk.  For example,\n\
    \   e-commerce sites sending primarily purchase receipts, which are not\n   expected\
    \ to be processed by mailing lists or other software likely to\n   modify messages,\
    \ will generally prefer \"simple\" canonicalization.\n   Sites sending primarily\
    \ person-to-person email will likely prefer to\n   be more resilient to modification\
    \ during transport by using \"relaxed\"\n   canonicalization.\n   Signers SHOULD\
    \ NOT use \"l=\" unless they intend to accommodate\n   intermediate mail processors\
    \ that append text to a message.  For\n   example, many mailing list processors\
    \ append \"unsubscribe\"\n   information to message bodies.  If signers use \"\
    l=\", they SHOULD\n   include the entire message body existing at the time of\
    \ signing in\n   computing the count.  In particular, signers SHOULD NOT specify\
    \ a\n   body length of 0 since this may be interpreted as a meaningless\n   signature\
    \ by some verifiers.\n"
- title: 5.6.  Compute the Message Hash and Signature
  contents:
  - "5.6.  Compute the Message Hash and Signature\n   The signer MUST compute the\
    \ message hash as described in Section 3.7\n   and then sign it using the selected\
    \ public-key algorithm.  This will\n   result in a DKIM-Signature header field\
    \ that will include the body\n   hash and a signature of the header hash, where\
    \ that header includes\n   the DKIM-Signature header field itself.\n   Entities\
    \ such as mailing list managers that implement DKIM and that\n   modify the message\
    \ or a header field (for example, inserting\n   unsubscribe information) before\
    \ retransmitting the message SHOULD\n   check any existing signature on input\
    \ and MUST make such\n   modifications before re-signing the message.\n   The\
    \ signer MAY elect to limit the number of bytes of the body that\n   will be included\
    \ in the hash and hence signed.  The length actually\n   hashed should be inserted\
    \ in the \"l=\" tag of the DKIM-Signature\n   header field.\n"
- title: 5.7.  Insert the DKIM-Signature Header Field
  contents:
  - "5.7.  Insert the DKIM-Signature Header Field\n   Finally, the signer MUST insert\
    \ the DKIM-Signature header field\n   created in the previous step prior to transmitting\
    \ the email.  The\n   DKIM-Signature header field MUST be the same as used to\
    \ compute the\n   hash as described above, except that the value of the \"b=\"\
    \ tag MUST\n   be the appropriately signed hash computed in the previous step,\n\
    \   signed using the algorithm specified in the \"a=\" tag of the DKIM-\n   Signature\
    \ header field and using the private key corresponding to the\n   selector given\
    \ in the \"s=\" tag of the DKIM-Signature header field, as\n   chosen above in\
    \ Section 5.2\n   The DKIM-Signature header field MUST be inserted before any\
    \ other\n   DKIM-Signature fields in the header block.\n      INFORMATIVE IMPLEMENTATION\
    \ NOTE: The easiest way to achieve this\n      is to insert the DKIM-Signature\
    \ header field at the beginning of\n      the header block.  In particular, it\
    \ may be placed before any\n      existing Received header fields.  This is consistent\
    \ with treating\n      DKIM-Signature as a trace header field.\n"
- title: 6.  Verifier Actions
  contents:
  - "6.  Verifier Actions\n   Since a signer MAY remove or revoke a public key at\
    \ any time, it is\n   recommended that verification occur in a timely manner.\
    \  In many\n   configurations, the most timely place is during acceptance by the\n\
    \   border MTA or shortly thereafter.  In particular, deferring\n   verification\
    \ until the message is accessed by the end user is\n   discouraged.\n   A border\
    \ or intermediate MTA MAY verify the message signature(s).  An\n   MTA who has\
    \ performed verification MAY communicate the result of that\n   verification by\
    \ adding a verification header field to incoming\n   messages.  This considerably\
    \ simplifies things for the user, who can\n   now use an existing mail user agent.\
    \  Most MUAs have the ability to\n   filter messages based on message header fields\
    \ or content; these\n   filters would be used to implement whatever policy the\
    \ user wishes\n   with respect to unsigned mail.\n   A verifying MTA MAY implement\
    \ a policy with respect to unverifiable\n   mail, regardless of whether or not\
    \ it applies the verification header\n   field to signed messages.\n   Verifiers\
    \ MUST produce a result that is semantically equivalent to\n   applying the following\
    \ steps in the order listed.  In practice,\n   several of these steps can be performed\
    \ in parallel in order to\n   improve performance.\n"
- title: 6.1.  Extract Signatures from the Message
  contents:
  - "6.1.  Extract Signatures from the Message\n   The order in which verifiers try\
    \ DKIM-Signature header fields is not\n   defined; verifiers MAY try signatures\
    \ in any order they like.  For\n   example, one implementation might try the signatures\
    \ in textual\n   order, whereas another might try signatures by identities that\
    \ match\n   the contents of the From header field before trying other signatures.\n\
    \   Verifiers MUST NOT attribute ultimate meaning to the order of\n   multiple\
    \ DKIM-Signature header fields.  In particular, there is\n   reason to believe\
    \ that some relays will reorder the header fields in\n   potentially arbitrary\
    \ ways.\n      INFORMATIVE IMPLEMENTATION NOTE: Verifiers might use the order\
    \ as\n      a clue to signing order in the absence of any other information.\n\
    \      However, other clues as to the semantics of multiple signatures\n     \
    \ (such as correlating the signing host with Received header fields)\n      may\
    \ also be considered.\n   A verifier SHOULD NOT treat a message that has one or\
    \ more bad\n   signatures and no good signatures differently from a message with\
    \ no\n   signature at all; such treatment is a matter of local policy and is\n\
    \   beyond the scope of this document.\n   When a signature successfully verifies,\
    \ a verifier will either stop\n   processing or attempt to verify any other signatures,\
    \ at the\n   discretion of the implementation.  A verifier MAY limit the number\
    \ of\n   signatures it tries to avoid denial-of-service attacks.\n      INFORMATIVE\
    \ NOTE: An attacker could send messages with large\n      numbers of faulty signatures,\
    \ each of which would require a DNS\n      lookup and corresponding CPU time to\
    \ verify the message.  This\n      could be an attack on the domain that receives\
    \ the message, by\n      slowing down the verifier by requiring it to do a large\
    \ number of\n      DNS lookups and/or signature verifications.  It could also\
    \ be an\n      attack against the domains listed in the signatures, essentially\n\
    \      by enlisting innocent verifiers in launching an attack against the\n  \
    \    DNS servers of the actual victim.\n   In the following description, text\
    \ reading \"return status\n   (explanation)\" (where \"status\" is one of \"PERMFAIL\"\
    \ or \"TEMPFAIL\")\n   means that the verifier MUST immediately cease processing\
    \ that\n   signature.  The verifier SHOULD proceed to the next signature, if any\n\
    \   is present, and completely ignore the bad signature.  If the status\n   is\
    \ \"PERMFAIL\", the signature failed and should not be reconsidered.\n   If the\
    \ status is \"TEMPFAIL\", the signature could not be verified at\n   this time\
    \ but may be tried again later.  A verifier MAY either defer\n   the message for\
    \ later processing, perhaps by queueing it locally or\n   issuing a 451/4.7.5\
    \ SMTP reply, or try another signature; if no good\n   signature is found and\
    \ any of the signatures resulted in a TEMPFAIL\n   status, the verifier MAY save\
    \ the message for later processing.  The\n   \"(explanation)\" is not normative\
    \ text; it is provided solely for\n   clarification.\n   Verifiers SHOULD ignore\
    \ any DKIM-Signature header fields where the\n   signature does not validate.\
    \  Verifiers that are prepared to validate\n   multiple signature header fields\
    \ SHOULD proceed to the next signature\n   header field, should it exist.  However,\
    \ verifiers MAY make note of\n   the fact that an invalid signature was present\
    \ for consideration at a\n   later step.\n      INFORMATIVE NOTE: The rationale\
    \ of this requirement is to permit\n      messages that have invalid signatures\
    \ but also a valid signature\n      to work.  For example, a mailing list exploder\
    \ might opt to leave\n      the original submitter signature in place even though\
    \ the exploder\n      knows that it is modifying the message in some way that\
    \ will break\n      that signature, and the exploder inserts its own signature.\
    \  In\n      this case, the message should succeed even in the presence of the\n\
    \      known-broken signature.\n   For each signature to be validated, the following\
    \ steps should be\n   performed in such a manner as to produce a result that is\n\
    \   semantically equivalent to performing them in the indicated order.\n"
- title: 6.1.1.  Validate the Signature Header Field
  contents:
  - "6.1.1.  Validate the Signature Header Field\n   Implementers MUST meticulously\
    \ validate the format and values in the\n   DKIM-Signature header field; any inconsistency\
    \ or unexpected values\n   MUST cause the header field to be completely ignored\
    \ and the verifier\n   to return PERMFAIL (signature syntax error).  Being \"\
    liberal in what\n   you accept\" is definitely a bad strategy in this security\
    \ context.\n   Note however that this does not include the existence of unknown\
    \ tags\n   in a DKIM-Signature header field, which are explicitly permitted.\n\
    \   Verifiers MUST ignore DKIM-Signature header fields with a \"v=\" tag\n   that\
    \ is inconsistent with this specification and return PERMFAIL\n   (incompatible\
    \ version).\n      INFORMATIVE IMPLEMENTATION NOTE: An implementation may, of\
    \ course,\n      choose to also verify signatures generated by older versions\
    \ of\n      this specification.\n   If any tag listed as \"required\" in Section\
    \ 3.5 is omitted from the\n   DKIM-Signature header field, the verifier MUST ignore\
    \ the DKIM-\n   Signature header field and return PERMFAIL (signature missing\n\
    \   required tag).\n      INFORMATIONAL NOTE: The tags listed as required in Section\
    \ 3.5 are\n      \"v=\", \"a=\", \"b=\", \"bh=\", \"d=\", \"h=\", and \"s=\".\
    \  Should there be a\n      conflict between this note and Section 3.5, Section\
    \ 3.5 is\n      normative.\n   If the DKIM-Signature header field does not contain\
    \ the \"i=\" tag, the\n   verifier MUST behave as though the value of that tag\
    \ were \"@d\", where\n   \"d\" is the value from the \"d=\" tag.\n   Verifiers\
    \ MUST confirm that the domain specified in the \"d=\" tag is\n   the same as\
    \ or a parent domain of the domain part of the \"i=\" tag.\n   If not, the DKIM-Signature\
    \ header field MUST be ignored and the\n   verifier should return PERMFAIL (domain\
    \ mismatch).\n   If the \"h=\" tag does not include the From header field, the\
    \ verifier\n   MUST ignore the DKIM-Signature header field and return PERMFAIL\
    \ (From\n   field not signed).\n   Verifiers MAY ignore the DKIM-Signature header\
    \ field and return\n   PERMFAIL (signature expired) if it contains an \"x=\" tag\
    \ and the\n   signature has expired.\n   Verifiers MAY ignore the DKIM-Signature\
    \ header field if the domain\n   used by the signer in the \"d=\" tag is not associated\
    \ with a valid\n   signing entity.  For example, signatures with \"d=\" values\
    \ such as\n   \"com\" and \"co.uk\" may be ignored.  The list of unacceptable\
    \ domains\n   SHOULD be configurable.\n   Verifiers MAY ignore the DKIM-Signature\
    \ header field and return\n   PERMFAIL (unacceptable signature header) for any\
    \ other reason, for\n   example, if the signature does not sign header fields\
    \ that the\n   verifier views to be essential.  As a case in point, if MIME header\n\
    \   fields are not signed, certain attacks may be possible that the\n   verifier\
    \ would prefer to avoid.\n"
- title: 6.1.2.  Get the Public Key
  contents:
  - "6.1.2.  Get the Public Key\n   The public key for a signature is needed to complete\
    \ the verification\n   process.  The process of retrieving the public key depends\
    \ on the\n   query type as defined by the \"q=\" tag in the DKIM-Signature header\n\
    \   field.  Obviously, a public key need only be retrieved if the process\n  \
    \ of extracting the signature information is completely successful.\n   Details\
    \ of key management and representation are described in\n   Section 3.6.  The\
    \ verifier MUST validate the key record and MUST\n   ignore any public key records\
    \ that are malformed.\n   When validating a message, a verifier MUST perform the\
    \ following\n   steps in a manner that is semantically the same as performing\
    \ them in\n   the order indicated (in some cases, the implementation may\n   parallelize\
    \ or reorder these steps, as long as the semantics remain\n   unchanged):\n  \
    \ 1.  Retrieve the public key as described in Section 3.6 using the\n       algorithm\
    \ in the \"q=\" tag, the domain from the \"d=\" tag, and the\n       selector\
    \ from the \"s=\" tag.\n   2.  If the query for the public key fails to respond,\
    \ the verifier\n       MAY defer acceptance of this email and return TEMPFAIL\
    \ (key\n       unavailable).  If verification is occurring during the incoming\n\
    \       SMTP session, this MAY be achieved with a 451/4.7.5 SMTP reply\n     \
    \  code.  Alternatively, the verifier MAY store the message in the\n       local\
    \ queue for later trial or ignore the signature.  Note that\n       storing a\
    \ message in the local queue is subject to denial-of-\n       service attacks.\n\
    \   3.  If the query for the public key fails because the corresponding\n    \
    \   key record does not exist, the verifier MUST immediately return\n       PERMFAIL\
    \ (no key for signature).\n   4.  If the query for the public key returns multiple\
    \ key records, the\n       verifier may choose one of the key records or may cycle\
    \ through\n       the key records performing the remainder of these steps on each\n\
    \       record at the discretion of the implementer.  The order of the\n     \
    \  key records is unspecified.  If the verifier chooses to cycle\n       through\
    \ the key records, then the \"return ...\" wording in the\n       remainder of\
    \ this section means \"try the next key record, if any;\n       if none, return\
    \ to try another signature in the usual way\".\n   5.  If the result returned\
    \ from the query does not adhere to the\n       format defined in this specification,\
    \ the verifier MUST ignore\n       the key record and return PERMFAIL (key syntax\
    \ error).  Verifiers\n       are urged to validate the syntax of key records carefully\
    \ to\n       avoid attempted attacks.  In particular, the verifier MUST ignore\n\
    \       keys with a version code (\"v=\" tag) that they do not implement.\n  \
    \ 6.  If the \"g=\" tag in the public key does not match the Local-part\n    \
    \   of the \"i=\" tag in the message signature header field, the\n       verifier\
    \ MUST ignore the key record and return PERMFAIL\n       (inapplicable key). \
    \ If the Local-part of the \"i=\" tag on the\n       message signature is not\
    \ present, the \"g=\" tag must be \"*\" (valid\n       for all addresses in the\
    \ domain) or the entire g= tag must be\n       omitted (which defaults to \"g=*\"\
    ), otherwise the verifier MUST\n       ignore the key record and return PERMFAIL\
    \ (inapplicable key).\n       Other than this test, verifiers SHOULD NOT treat\
    \ a message signed\n       with a key record having a \"g=\" tag any differently\
    \ than one\n       without; in particular, verifiers SHOULD NOT prefer messages\
    \ that\n       seem to have an individual signature by virtue of a \"g=\" tag\n\
    \       versus a domain signature.\n   7.  If the \"h=\" tag exists in the public\
    \ key record and the hash\n       algorithm implied by the a= tag in the DKIM-Signature\
    \ header\n       field is not included in the contents of the \"h=\" tag, the\n\
    \       verifier MUST ignore the key record and return PERMFAIL\n       (inappropriate\
    \ hash algorithm).\n   8.  If the public key data (the \"p=\" tag) is empty, then\
    \ this key has\n       been revoked and the verifier MUST treat this as a failed\n\
    \       signature check and return PERMFAIL (key revoked).  There is no\n    \
    \   defined semantic difference between a key that has been revoked\n       and\
    \ a key record that has been removed.\n   9.  If the public key data is not suitable\
    \ for use with the algorithm\n       and key types defined by the \"a=\" and \"\
    k=\" tags in the DKIM-\n       Signature header field, the verifier MUST immediately\
    \ return\n       PERMFAIL (inappropriate key algorithm).\n"
- title: 6.1.3.  Compute the Verification
  contents:
  - "6.1.3.  Compute the Verification\n   Given a signer and a public key, verifying\
    \ a signature consists of\n   actions semantically equivalent to the following\
    \ steps.\n   1.  Based on the algorithm defined in the \"c=\" tag, the body length\n\
    \       specified in the \"l=\" tag, and the header field names in the \"h=\"\n\
    \       tag, prepare a canonicalized version of the message as is\n       described\
    \ in Section 3.7 (note that this version does not\n       actually need to be\
    \ instantiated).  When matching header field\n       names in the \"h=\" tag against\
    \ the actual message header field,\n       comparisons MUST be case-insensitive.\n\
    \   2.  Based on the algorithm indicated in the \"a=\" tag, compute the\n    \
    \   message hashes from the canonical copy as described in\n       Section 3.7.\n\
    \   3.  Verify that the hash of the canonicalized message body computed\n    \
    \   in the previous step matches the hash value conveyed in the \"bh=\"\n    \
    \   tag.  If the hash does not match, the verifier SHOULD ignore the\n       signature\
    \ and return PERMFAIL (body hash did not verify).\n   4.  Using the signature\
    \ conveyed in the \"b=\" tag, verify the\n       signature against the header\
    \ hash using the mechanism appropriate\n       for the public key algorithm described\
    \ in the \"a=\" tag.  If the\n       signature does not validate, the verifier\
    \ SHOULD ignore the\n       signature and return PERMFAIL (signature did not verify).\n\
    \   5.  Otherwise, the signature has correctly verified.\n      INFORMATIVE IMPLEMENTER'S\
    \ NOTE: Implementations might wish to\n      initiate the public-key query in\
    \ parallel with calculating the\n      hash as the public key is not needed until\
    \ the final decryption is\n      calculated.  Implementations may also verify\
    \ the signature on the\n      message header before validating that the message\
    \ hash listed in\n      the \"bh=\" tag in the DKIM-Signature header field matches\
    \ that of\n      the actual message body; however, if the body hash does not match,\n\
    \      the entire signature must be considered to have failed.\n   A body length\
    \ specified in the \"l=\" tag of the signature limits the\n   number of bytes\
    \ of the body passed to the verification algorithm.\n   All data beyond that limit\
    \ is not validated by DKIM.  Hence,\n   verifiers might treat a message that contains\
    \ bytes beyond the\n   indicated body length with suspicion, such as by truncating\
    \ the\n   message at the indicated body length, declaring the signature invalid\n\
    \   (e.g., by returning PERMFAIL (unsigned content)), or conveying the\n   partial\
    \ verification to the policy module.\n      INFORMATIVE IMPLEMENTATION NOTE: Verifiers\
    \ that truncate the body\n      at the indicated body length might pass on a malformed\
    \ MIME\n      message if the signer used the \"N-4\" trick (omitting the final\n\
    \      \"--CRLF\") described in the informative note in Section 3.4.5.\n     \
    \ Such verifiers may wish to check for this case and include a\n      trailing\
    \ \"--CRLF\" to avoid breaking the MIME structure.  A simple\n      way to achieve\
    \ this might be to append \"--CRLF\" to any \"multipart\"\n      message with\
    \ a body length; if the MIME structure is already\n      correctly formed, this\
    \ will appear in the postlude and will not be\n      displayed to the end user.\n"
- title: 6.2.  Communicate Verification Results
  contents:
  - "6.2.  Communicate Verification Results\n   Verifiers wishing to communicate the\
    \ results of verification to other\n   parts of the mail system may do so in whatever\
    \ manner they see fit.\n   For example, implementations might choose to add an\
    \ email header\n   field to the message before passing it on.  Any such header\
    \ field\n   SHOULD be inserted before any existing DKIM-Signature or preexisting\n\
    \   authentication status header fields in the header field block.\n      INFORMATIVE\
    \ ADVICE to MUA filter writers: Patterns intended to\n      search for results\
    \ header fields to visibly mark authenticated\n      mail for end users should\
    \ verify that such header field was added\n      by the appropriate verifying\
    \ domain and that the verified identity\n      matches the author identity that\
    \ will be displayed by the MUA.  In\n      particular, MUA filters should not\
    \ be influenced by bogus results\n      header fields added by attackers.  To\
    \ circumvent this attack,\n      verifiers may wish to delete existing results\
    \ header fields after\n      verification and before adding a new header field.\n"
- title: 6.3.  Interpret Results/Apply Local Policy
  contents:
  - "6.3.  Interpret Results/Apply Local Policy\n   It is beyond the scope of this\
    \ specification to describe what actions\n   a verifier system should make, but\
    \ an authenticated email presents an\n   opportunity to a receiving system that\
    \ unauthenticated email cannot.\n   Specifically, an authenticated email creates\
    \ a predictable identifier\n   by which other decisions can reliably be managed,\
    \ such as trust and\n   reputation.  Conversely, unauthenticated email lacks a\
    \ reliable\n   identifier that can be used to assign trust and reputation.  It\
    \ is\n   reasonable to treat unauthenticated email as lacking any trust and\n\
    \   having no positive reputation.\n   In general, verifiers SHOULD NOT reject\
    \ messages solely on the basis\n   of a lack of signature or an unverifiable signature;\
    \ such rejection\n   would cause severe interoperability problems.  However, if\
    \ the\n   verifier does opt to reject such messages (for example, when\n   communicating\
    \ with a peer who, by prior agreement, agrees to only\n   send signed messages),\
    \ and the verifier runs synchronously with the\n   SMTP session and a signature\
    \ is missing or does not verify, the MTA\n   SHOULD use a 550/5.7.x reply code.\n\
    \   If it is not possible to fetch the public key, perhaps because the\n   key\
    \ server is not available, a temporary failure message MAY be\n   generated using\
    \ a 451/4.7.5 reply code, such as:\n      451 4.7.5 Unable to verify signature\
    \ - key server unavailable\n   Temporary failures such as inability to access\
    \ the key server or\n   other external service are the only conditions that SHOULD\
    \ use a 4xx\n   SMTP reply code.  In particular, cryptographic signature verification\n\
    \   failures MUST NOT return 4xx SMTP replies.\n   Once the signature has been\
    \ verified, that information MUST be\n   conveyed to higher-level systems (such\
    \ as explicit allow/whitelists\n   and reputation systems) and/or to the end user.\
    \  If the message is\n   signed on behalf of any address other than that in the\
    \ From: header\n   field, the mail system SHOULD take pains to ensure that the\
    \ actual\n   signing identity is clear to the reader.\n   The verifier MAY treat\
    \ unsigned header fields with extreme\n   skepticism, including marking them as\
    \ untrusted or even deleting them\n   before display to the end user.\n   While\
    \ the symptoms of a failed verification are obvious -- the\n   signature doesn't\
    \ verify -- establishing the exact cause can be more\n   difficult.  If a selector\
    \ cannot be found, is that because the\n   selector has been removed, or was the\
    \ value changed somehow in\n   transit?  If the signature line is missing, is\
    \ that because it was\n   never there, or was it removed by an overzealous filter?\
    \  For\n   diagnostic purposes, the exact reason why the verification fails\n\
    \   SHOULD be made available to the policy module and possibly recorded\n   in\
    \ the system logs.  If the email cannot be verified, then it SHOULD\n   be rendered\
    \ the same as all unverified email regardless of whether or\n   not it looks like\
    \ it was signed.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   DKIM introduces some new namespaces that have been\
    \ registered with\n   IANA.  In all cases, new values are assigned only for values\
    \ that\n   have been documented in a published RFC that has IETF Consensus\n \
    \  [RFC2434].\n"
- title: 7.1.  DKIM-Signature Tag Specifications
  contents:
  - "7.1.  DKIM-Signature Tag Specifications\n   A DKIM-Signature provides for a list\
    \ of tag specifications.  IANA has\n   established the DKIM-Signature Tag Specification\
    \ Registry for tag\n   specifications that can be used in DKIM-Signature fields.\n\
    \               The initial entries in the registry comprise:\n              \
    \          +------+-----------------+\n                        | TYPE | REFERENCE\
    \       |\n                        +------+-----------------+\n              \
    \          | v    | (this document) |\n                        | a    | (this\
    \ document) |\n                        | b    | (this document) |\n          \
    \              | bh   | (this document) |\n                        | c    | (this\
    \ document) |\n                        | d    | (this document) |\n          \
    \              | h    | (this document) |\n                        | i    | (this\
    \ document) |\n                        | l    | (this document) |\n          \
    \              | q    | (this document) |\n                        | s    | (this\
    \ document) |\n                        | t    | (this document) |\n          \
    \              | x    | (this document) |\n                        | z    | (this\
    \ document) |\n                        +------+-----------------+\n         DKIM-Signature\
    \ Tag Specification Registry Initial Values\n"
- title: 7.2.  DKIM-Signature Query Method Registry
  contents:
  - "7.2.  DKIM-Signature Query Method Registry\n   The \"q=\" tag-spec (specified\
    \ in Section 3.5) provides for a list of\n   query methods.\n   IANA has established\
    \ the DKIM-Signature Query Method Registry for\n   mechanisms that can be used\
    \ to retrieve the key that will permit\n   validation processing of a message\
    \ signed using DKIM.\n               The initial entry in the registry comprises:\n\
    \                    +------+--------+-----------------+\n                   \
    \ | TYPE | OPTION | REFERENCE       |\n                    +------+--------+-----------------+\n\
    \                    | dns  | txt    | (this document) |\n                   \
    \ +------+--------+-----------------+\n            DKIM-Signature Query Method\
    \ Registry Initial Values\n"
- title: 7.3.  DKIM-Signature Canonicalization Registry
  contents:
  - "7.3.  DKIM-Signature Canonicalization Registry\n   The \"c=\" tag-spec (specified\
    \ in Section 3.5) provides for a specifier\n   for canonicalization algorithms\
    \ for the header and body of the\n   message.\n   IANA has established the DKIM-Signature\
    \ Canonicalization Algorithm\n   Registry for algorithms for converting a message\
    \ into a canonical\n   form before signing or verifying using DKIM.\n        \
    \   The initial entries in the header registry comprise:\n                   \
    \    +---------+-----------------+\n                       | TYPE    | REFERENCE\
    \       |\n                       +---------+-----------------+\n            \
    \           | simple  | (this document) |\n                       | relaxed |\
    \ (this document) |\n                       +---------+-----------------+\n  \
    \      DKIM-Signature Header Canonicalization Algorithm Registry\n           \
    \                   Initial Values\n            The initial entries in the body\
    \ registry comprise:\n                       +---------+-----------------+\n \
    \                      | TYPE    | REFERENCE       |\n                       +---------+-----------------+\n\
    \                       | simple  | (this document) |\n                      \
    \ | relaxed | (this document) |\n                       +---------+-----------------+\n\
    \         DKIM-Signature Body Canonicalization Algorithm Registry\n          \
    \                    Initial Values\n"
- title: 7.4.  _domainkey DNS TXT Record Tag Specifications
  contents:
  - "7.4.  _domainkey DNS TXT Record Tag Specifications\n   A _domainkey DNS TXT record\
    \ provides for a list of tag\n   specifications.  IANA has established the DKIM\
    \ _domainkey DNS TXT Tag\n   Specification Registry for tag specifications that\
    \ can be used in DNS\n   TXT Records.\n               The initial entries in the\
    \ registry comprise:\n                        +------+-----------------+\n   \
    \                     | TYPE | REFERENCE       |\n                        +------+-----------------+\n\
    \                        | v    | (this document) |\n                        |\
    \ g    | (this document) |\n                        | h    | (this document) |\n\
    \                        | k    | (this document) |\n                        |\
    \ n    | (this document) |\n                        | p    | (this document) |\n\
    \                        | s    | (this document) |\n                        |\
    \ t    | (this document) |\n                        +------+-----------------+\n\
    \         DKIM _domainkey DNS TXT Record Tag Specification Registry\n        \
    \                      Initial Values\n"
- title: 7.5.  DKIM Key Type Registry
  contents:
  - "7.5.  DKIM Key Type Registry\n   The \"k=\" <key-k-tag> (specified in Section\
    \ 3.6.1) and the \"a=\" <sig-\n   a-tag-k> (specified in Section 3.5) tags provide\
    \ for a list of\n   mechanisms that can be used to decode a DKIM signature.\n\
    \   IANA has established the DKIM Key Type Registry for such mechanisms.\n   \
    \            The initial entry in the registry comprises:\n                  \
    \         +------+-----------+\n                           | TYPE | REFERENCE\
    \ |\n                           +------+-----------+\n                       \
    \    | rsa  | [RFC3447] |\n                           +------+-----------+\n \
    \                      DKIM Key Type Initial Values\n"
- title: 7.6.  DKIM Hash Algorithms Registry
  contents:
  - "7.6.  DKIM Hash Algorithms Registry\n   The \"h=\" <key-h-tag> (specified in\
    \ Section 3.6.1) and the \"a=\" <sig-\n   a-tag-h> (specified in Section 3.5)\
    \ tags provide for a list of\n   mechanisms that can be used to produce a digest\
    \ of message data.\n   IANA has established the DKIM Hash Algorithms Registry\
    \ for such\n   mechanisms.\n               The initial entries in the registry\
    \ comprise:\n                      +--------+-------------------+\n          \
    \            | TYPE   | REFERENCE         |\n                      +--------+-------------------+\n\
    \                      | sha1   | [FIPS.180-2.2002] |\n                      |\
    \ sha256 | [FIPS.180-2.2002] |\n                      +--------+-------------------+\n\
    \                    DKIM Hash Algorithms Initial Values\n"
- title: 7.7.  DKIM Service Types Registry
  contents:
  - "7.7.  DKIM Service Types Registry\n   The \"s=\" <key-s-tag> tag (specified in\
    \ Section 3.6.1) provides for a\n   list of service types to which this selector\
    \ may apply.\n   IANA has established the DKIM Service Types Registry for service\n\
    \   types.\n               The initial entries in the registry comprise:\n   \
    \                     +-------+-----------------+\n                        | TYPE\
    \  | REFERENCE       |\n                        +-------+-----------------+\n\
    \                        | email | (this document) |\n                       \
    \ | *     | (this document) |\n                        +-------+-----------------+\n\
    \                DKIM Service Types Registry Initial Values\n"
- title: 7.8.  DKIM Selector Flags Registry
  contents:
  - "7.8.  DKIM Selector Flags Registry\n   The \"t=\" <key-t-tag> tag (specified\
    \ in Section 3.6.1) provides for a\n   list of flags to modify interpretation\
    \ of the selector.\n   IANA has established the DKIM Selector Flags Registry for\
    \ additional\n   flags.\n               The initial entries in the registry comprise:\n\
    \                        +------+-----------------+\n                        |\
    \ TYPE | REFERENCE       |\n                        +------+-----------------+\n\
    \                        | y    | (this document) |\n                        |\
    \ s    | (this document) |\n                        +------+-----------------+\n\
    \                DKIM Selector Flags Registry Initial Values\n"
- title: 7.9.  DKIM-Signature Header Field
  contents:
  - "7.9.  DKIM-Signature Header Field\n   IANA has added DKIM-Signature to the \"\
    Permanent Message Header\n   Fields\" registry (see [RFC3864]) for the \"mail\"\
    \ protocol, using this\n   document as the reference.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   It has been observed that any mechanism that\
    \ is introduced that\n   attempts to stem the flow of spam is subject to intensive\
    \ attack.\n   DKIM needs to be carefully scrutinized to identify potential attack\n\
    \   vectors and the vulnerability to each.  See also [RFC4686].\n"
- title: 8.1.  Misuse of Body Length Limits ("l=" Tag)
  contents:
  - "8.1.  Misuse of Body Length Limits (\"l=\" Tag)\n   Body length limits (in the\
    \ form of the \"l=\" tag) are subject to\n   several potential attacks.\n"
- title: 8.1.1.  Addition of New MIME Parts to Multipart/*
  contents:
  - "8.1.1.  Addition of New MIME Parts to Multipart/*\n   If the body length limit\
    \ does not cover a closing MIME multipart\n   section (including the trailing\
    \ \"--CRLF\" portion), then it is\n   possible for an attacker to intercept a\
    \ properly signed multipart\n   message and add a new body part.  Depending on\
    \ the details of the\n   MIME type and the implementation of the verifying MTA\
    \ and the\n   receiving MUA, this could allow an attacker to change the information\n\
    \   displayed to an end user from an apparently trusted source.\n   For example,\
    \ if attackers can append information to a \"text/html\"\n   body part, they may\
    \ be able to exploit a bug in some MUAs that\n   continue to read after a \"</html>\"\
    \ marker, and thus display HTML text\n   on top of already displayed text.  If\
    \ a message has a\n   \"multipart/alternative\" body part, they might be able\
    \ to add a new\n   body part that is preferred by the displaying MUA.\n"
- title: 8.1.2.  Addition of new HTML content to existing content
  contents:
  - "8.1.2.  Addition of new HTML content to existing content\n   Several receiving\
    \ MUA implementations do not cease display after a\n   \"\"</html>\"\" tag.  In\
    \ particular, this allows attacks involving\n   overlaying images on top of existing\
    \ text.\n      INFORMATIVE EXAMPLE: Appending the following text to an existing,\n\
    \      properly closed message will in many MUAs result in inappropriate\n   \
    \   data being rendered on top of existing, correct data:\n   <div style=\"position:\
    \ relative; bottom: 350px; z-index: 2;\">\n   <img src=\"http://www.ietf.org/images/ietflogo2e.gif\"\
    \n     width=578 height=370>\n   </div>\n"
- title: 8.2.  Misappropriated Private Key
  contents:
  - "8.2.  Misappropriated Private Key\n   If the private key for a user is resident\
    \ on their computer and is\n   not protected by an appropriately secure mechanism,\
    \ it is possible\n   for malware to send mail as that user and any other user\
    \ sharing the\n   same private key.  The malware would not, however, be able to\n\
    \   generate signed spoofs of other signers' addresses, which would aid\n   in\
    \ identification of the infected user and would limit the\n   possibilities for\
    \ certain types of attacks involving socially\n   engineered messages.  This threat\
    \ applies mainly to MUA-based\n   implementations; protection of private keys\
    \ on servers can be easily\n   achieved through the use of specialized cryptographic\
    \ hardware.\n   A larger problem occurs if malware on many users' computers obtains\n\
    \   the private keys for those users and transmits them via a covert\n   channel\
    \ to a site where they can be shared.  The compromised users\n   would likely\
    \ not know of the misappropriation until they receive\n   \"bounce\" messages\
    \ from messages they are purported to have sent.\n   Many users might not understand\
    \ the significance of these bounce\n   messages and would not take action.\n \
    \  One countermeasure is to use a user-entered passphrase to encrypt the\n   private\
    \ key, although users tend to choose weak passphrases and often\n   reuse them\
    \ for different purposes, possibly allowing an attack\n   against DKIM to be extended\
    \ into other domains.  Nevertheless, the\n   decoded private key might be briefly\
    \ available to compromise by\n   malware when it is entered, or might be discovered\
    \ via keystroke\n   logging.  The added complexity of entering a passphrase each\
    \ time one\n   sends a message would also tend to discourage the use of a secure\n\
    \   passphrase.\n   A somewhat more effective countermeasure is to send messages\
    \ through\n   an outgoing MTA that can authenticate the submitter using existing\n\
    \   techniques (e.g., SMTP Authentication), possibly validate the message\n  \
    \ itself (e.g., verify that the header is legitimate and that the\n   content\
    \ passes a spam content check), and sign the message using a\n   key appropriate\
    \ for the submitter address.  Such an MTA can also\n   apply controls on the volume\
    \ of outgoing mail each user is permitted\n   to originate in order to further\
    \ limit the ability of malware to\n   generate bulk email.\n"
- title: 8.3.  Key Server Denial-of-Service Attacks
  contents:
  - "8.3.  Key Server Denial-of-Service Attacks\n   Since the key servers are distributed\
    \ (potentially separate for each\n   domain), the number of servers that would\
    \ need to be attacked to\n   defeat this mechanism on an Internet-wide basis is\
    \ very large.\n   Nevertheless, key servers for individual domains could be attacked,\n\
    \   impeding the verification of messages from that domain.  This is not\n   significantly\
    \ different from the ability of an attacker to deny\n   service to the mail exchangers\
    \ for a given domain, although it\n   affects outgoing, not incoming, mail.\n\
    \   A variation on this attack is that if a very large amount of mail\n   were\
    \ to be sent using spoofed addresses from a given domain, the key\n   servers\
    \ for that domain could be overwhelmed with requests.  However,\n   given the\
    \ low overhead of verification compared with handling of the\n   email message\
    \ itself, such an attack would be difficult to mount.\n"
- title: 8.4.  Attacks Against the DNS
  contents:
  - "8.4.  Attacks Against the DNS\n   Since the DNS is a required binding for key\
    \ services, specific\n   attacks against the DNS must be considered.\n   While\
    \ the DNS is currently insecure [RFC3833], these security\n   problems are the\
    \ motivation behind DNS Security (DNSSEC) [RFC4033],\n   and all users of the\
    \ DNS will reap the benefit of that work.\n   DKIM is only intended as a \"sufficient\"\
    \ method of proving\n   authenticity.  It is not intended to provide strong cryptographic\n\
    \   proof about authorship or contents.  Other technologies such as\n   OpenPGP\
    \ [RFC2440] and S/MIME [RFC3851] address those requirements.\n   A second security\
    \ issue related to the DNS revolves around the\n   increased DNS traffic as a\
    \ consequence of fetching selector-based\n   data as well as fetching signing\
    \ domain policy.  Widespread\n   deployment of DKIM will result in a significant\
    \ increase in DNS\n   queries to the claimed signing domain.  In the case of forgeries\
    \ on a\n   large scale, DNS servers could see a substantial increase in queries.\n\
    \   A specific DNS security issue that should be considered by DKIM\n   verifiers\
    \ is the name chaining attack described in Section 2.3 of the\n   DNS Threat Analysis\
    \ [RFC3833].  A DKIM verifier, while verifying a\n   DKIM-Signature header field,\
    \ could be prompted to retrieve a key\n   record of an attacker's choosing.  This\
    \ threat can be minimized by\n   ensuring that name servers, including recursive\
    \ name servers, used by\n   the verifier enforce strict checking of \"glue\" and\
    \ other additional\n   information in DNS responses and are therefore not vulnerable\
    \ to this\n   attack.\n"
- title: 8.5.  Replay Attacks
  contents:
  - "8.5.  Replay Attacks\n   In this attack, a spammer sends a message to be spammed\
    \ to an\n   accomplice, which results in the message being signed by the\n   originating\
    \ MTA.  The accomplice resends the message, including the\n   original signature,\
    \ to a large number of recipients, possibly by\n   sending the message to many\
    \ compromised machines that act as MTAs.\n   The messages, not having been modified\
    \ by the accomplice, have valid\n   signatures.\n   Partial solutions to this\
    \ problem involve the use of reputation\n   services to convey the fact that the\
    \ specific email address is being\n   used for spam and that messages from that\
    \ signer are likely to be\n   spam.  This requires a real-time detection mechanism\
    \ in order to\n   react quickly enough.  However, such measures might be prone\
    \ to\n   abuse, if for example an attacker resent a large number of messages\n\
    \   received from a victim in order to make them appear to be a spammer.\n   Large\
    \ verifiers might be able to detect unusually large volumes of\n   mails with\
    \ the same signature in a short time period.  Smaller\n   verifiers can get substantially\
    \ the same volume of information via\n   existing collaborative systems.\n"
- title: 8.6.  Limits on Revoking Keys
  contents:
  - "8.6.  Limits on Revoking Keys\n   When a large domain detects undesirable behavior\
    \ on the part of one\n   of its users, it might wish to revoke the key used to\
    \ sign that\n   user's messages in order to disavow responsibility for messages\
    \ that\n   have not yet been verified or that are the subject of a replay\n  \
    \ attack.  However, the ability of the domain to do so can be limited\n   if the\
    \ same key, for scalability reasons, is used to sign messages\n   for many other\
    \ users.  Mechanisms for explicitly revoking keys on a\n   per-address basis have\
    \ been proposed but require further study as to\n   their utility and the DNS\
    \ load they represent.\n"
- title: 8.7.  Intentionally Malformed Key Records
  contents:
  - "8.7.  Intentionally Malformed Key Records\n   It is possible for an attacker\
    \ to publish key records in DNS that are\n   intentionally malformed, with the\
    \ intent of causing a denial-of-\n   service attack on a non-robust verifier implementation.\
    \  The attacker\n   could then cause a verifier to read the malformed key record\
    \ by\n   sending a message to one of its users referencing the malformed\n   record\
    \ in a (not necessarily valid) signature.  Verifiers MUST\n   thoroughly verify\
    \ all key records retrieved from the DNS and be\n   robust against intentionally\
    \ as well as unintentionally malformed key\n   records.\n"
- title: 8.8.  Intentionally Malformed DKIM-Signature Header Fields
  contents:
  - "8.8.  Intentionally Malformed DKIM-Signature Header Fields\n   Verifiers MUST\
    \ be prepared to receive messages with malformed DKIM-\n   Signature header fields,\
    \ and thoroughly verify the header field\n   before depending on any of its contents.\n"
- title: 8.9.  Information Leakage
  contents:
  - "8.9.  Information Leakage\n   An attacker could determine when a particular signature\
    \ was verified\n   by using a per-message selector and then monitoring their DNS\
    \ traffic\n   for the key lookup.  This would act as the equivalent of a \"web\
    \ bug\"\n   for verification time rather than when the message was read.\n"
- title: 8.10.  Remote Timing Attacks
  contents:
  - "8.10.  Remote Timing Attacks\n   In some cases, it may be possible to extract\
    \ private keys using a\n   remote timing attack [BONEH03].  Implementations should\
    \ consider\n   obfuscating the timing to prevent such attacks.\n"
- title: 8.11.  Reordered Header Fields
  contents:
  - "8.11.  Reordered Header Fields\n   Existing standards allow intermediate MTAs\
    \ to reorder header fields.\n   If a signer signs two or more header fields of\
    \ the same name, this\n   can cause spurious verification errors on otherwise\
    \ legitimate\n   messages.  In particular, signers that sign any existing DKIM-\n\
    \   Signature fields run the risk of having messages incorrectly fail to\n   verify.\n"
- title: 8.12.  RSA Attacks
  contents:
  - "8.12.  RSA Attacks\n   An attacker could create a large RSA signing key with\
    \ a small\n   exponent, thus requiring that the verification key have a large\n\
    \   exponent.  This will force verifiers to use considerable computing\n   resources\
    \ to verify the signature.  Verifiers might avoid this attack\n   by refusing\
    \ to verify signatures that reference selectors with public\n   keys having unreasonable\
    \ exponents.\n   In general, an attacker might try to overwhelm a verifier by\
    \ flooding\n   it with messages requiring verification.  This is similar to other\n\
    \   MTA denial-of-service attacks and should be dealt with in a similar\n   fashion.\n"
- title: 8.13.  Inappropriate Signing by Parent Domains
  contents:
  - "8.13.  Inappropriate Signing by Parent Domains\n   The trust relationship described\
    \ in Section 3.8 could conceivably be\n   used by a parent domain to sign messages\
    \ with identities in a\n   subdomain not administratively related to the parent.\
    \  For example,\n   the \".com\" registry could create messages with signatures\
    \ using an\n   \"i=\" value in the example.com domain.  There is no general solution\n\
    \   to this problem, since the administrative cut could occur anywhere in\n  \
    \ the domain name.  For example, in the domain \"example.podunk.ca.us\"\n   there\
    \ are three administrative cuts (podunk.ca.us, ca.us, and us),\n   any of which\
    \ could create messages with an identity in the full\n   domain.\n      INFORMATIVE\
    \ NOTE: This is considered an acceptable risk for the\n      same reason that\
    \ it is acceptable for domain delegation.  For\n      example, in the example\
    \ above any of the domains could potentially\n      simply delegate \"example.podunk.ca.us\"\
    \ to a server of their choice\n      and completely replace all DNS-served information.\
    \  Note that a\n      verifier MAY ignore signatures that come from an unlikely\
    \ domain\n      such as \".com\", as discussed in Section 6.1.1.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [FIPS.180-2.2002]  U.S. Department of Commerce,\
    \ \"Secure Hash\n                      Standard\", FIPS PUB 180-2, August 2002.\n\
    \   [ITU.X660.1997]    \"Information Technology - ASN.1 encoding rules:\n    \
    \                  Specification of Basic Encoding Rules (BER),\n            \
    \          Canonical Encoding Rules (CER) and Distinguished\n                \
    \      Encoding Rules (DER)\", ITU-T Recommendation X.660,\n                 \
    \     1997.\n   [RFC2045]          Freed, N. and N. Borenstein, \"Multipurpose\n\
    \                      Internet Mail Extensions (MIME) Part One: Format\n    \
    \                  of Internet Message Bodies\", RFC 2045,\n                 \
    \     November 1996.\n   [RFC2047]          Moore, K., \"MIME (Multipurpose Internet\
    \ Mail\n                      Extensions) Part Three: Message header field\n \
    \                     Extensions for Non-ASCII Text\", RFC 2047,\n           \
    \           November 1996.\n   [RFC2119]          Bradner, S., \"Key words for\
    \ use in RFCs to\n                      Indicate Requirement Levels\", BCP 14,\
    \ RFC 2119,\n                      March 1997.\n   [RFC2821]          Klensin,\
    \ J., \"Simple Mail Transfer Protocol\",\n                      RFC 2821, April\
    \ 2001.\n   [RFC2822]          Resnick, P., \"Internet Message Format\", RFC 2822,\n\
    \                      April 2001.\n   [RFC3447]          Jonsson, J. and B. Kaliski,\
    \ \"Public-Key\n                      Cryptography Standards (PKCS) #1: RSA Cryptography\n\
    \                      Specifications Version 2.1\", RFC 3447,\n             \
    \         February 2003.\n   [RFC3490]          Faltstrom, P., Hoffman, P., and\
    \ A. Costello,\n                      \"Internationalizing Domain Names in Applications\n\
    \                      (IDNA)\", RFC 3490, March 2003.\n   [RFC4234]         \
    \ Crocker, D., Ed. and P. Overell, \"Augmented BNF\n                      for\
    \ Syntax Specifications: ABNF\", RFC 4234,\n                      October 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BONEH03]          Proc. 12th USENIX Security\
    \ Symposium, \"Remote\n                      Timing Attacks are Practical\", 2003.\n\
    \   [RFC1847]          Galvin, J., Murphy, S., Crocker, S., and N. Freed,\n  \
    \                    \"Security Multiparts for MIME: Multipart/Signed\n      \
    \                and Multipart/Encrypted\", RFC 1847, October 1995.\n   [RFC2434]\
    \          Narten, T. and H. Alvestrand, \"Guidelines for\n                  \
    \    Writing an IANA Considerations Section in RFCs\",\n                     \
    \ BCP 26, RFC 2434, October 1998.\n   [RFC2440]          Callas, J., Donnerhacke,\
    \ L., Finney, H., and R.\n                      Thayer, \"OpenPGP Message Format\"\
    , RFC 2440,\n                      November 1998.\n   [RFC3766]          Orman,\
    \ H. and P. Hoffman, \"Determining Strengths\n                      for Public\
    \ Keys Used For Exchanging Symmetric\n                      Keys\", RFC 3766,\
    \ April 2004.\n   [RFC3833]          Atkins, D. and R. Austein, \"Threat Analysis\
    \ of the\n                      Domain Name System (DNS)\", RFC 3833, August 2004.\n\
    \   [RFC3851]          Ramsdell, B., \"S/MIME Version 3 Message\n            \
    \          Specification\", RFC 3851, June 1999.\n   [RFC3864]          Klyne,\
    \ G., Nottingham, M., and J. Mogul,\n                      \"Registration Procedures\
    \ for Message Header\n                      Fields\", BCP 90, September 2004.\n\
    \   [RFC4033]          Arends, R., Austein, R., Larson, M., Massey, D.,\n    \
    \                  and S. Rose, \"DNS Security Introduction and\n            \
    \          Requirements\", RFC 4033, March 2005.\n   [RFC4686]          Fenton,\
    \ J., \"Analysis of Threats Motivating\n                      DomainKeys Identified\
    \ Mail (DKIM)\", RFC 4686,\n                      September 2006.\n   [RFC4870]\
    \          Delany, M., \"Domain-Based Email Authentication\n                 \
    \     Using Public Keys Advertised in the DNS\n                      (DomainKeys)\"\
    , RFC 4870, May 2007.\n"
- title: Appendix A.  Example of Use (INFORMATIVE)
  contents:
  - "Appendix A.  Example of Use (INFORMATIVE)\n   This section shows the complete\
    \ flow of an email from submission to\n   final delivery, demonstrating how the\
    \ various components fit\n   together.  The key used in this example is shown\
    \ in Appendix C.\n"
- title: A.1.  The User Composes an Email
  contents:
  - "A.1.  The User Composes an Email\n   From: Joe SixPack <joe@football.example.com>\n\
    \   To: Suzie Q <suzie@shopping.example.net>\n   Subject: Is dinner ready?\n \
    \  Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n\
    \   Hi.\n   We lost the game. Are you hungry yet?\n   Joe.\n"
- title: A.2.  The Email Is Signed
  contents:
  - "A.2.  The Email Is Signed\n   This email is signed by the example.com outbound\
    \ email server and now\n   looks like this:\n   DKIM-Signature: v=1; a=rsa-sha256;\
    \ s=brisbane; d=example.com;\n         c=simple/simple; q=dns/txt; i=joe@football.example.com;\n\
    \         h=Received : From : To : Subject : Date : Message-ID;\n         bh=2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=;\n\
    \         b=AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOB\n           4nujc7YopdG5dWLSdNg6xNAZpOPr+kHxt1IrE+NahM6L/LbvaHut\n\
    \           KVdkLLkpVaVVQPzeRDI009SO2Il5Lu7rDNH6mZckBdrIx0orEtZV\n           4bmp/YzhwvcubU4=;\n\
    \   Received: from client1.football.example.com  [192.0.2.1]\n         by submitserver.example.com\
    \ with SUBMISSION;\n         Fri, 11 Jul 2003 21:01:54 -0700 (PDT)\n   From: Joe\
    \ SixPack <joe@football.example.com>\n   To: Suzie Q <suzie@shopping.example.net>\n\
    \   Subject: Is dinner ready?\n   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n\
    \   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n   Hi.\n   We\
    \ lost the game. Are you hungry yet?\n   Joe.\n   The signing email server requires\
    \ access to the private key\n   associated with the \"brisbane\" selector to generate\
    \ this signature.\n"
- title: A.3.  The Email Signature Is Verified
  contents:
  - "A.3.  The Email Signature Is Verified\n   The signature is normally verified\
    \ by an inbound SMTP server or\n   possibly the final delivery agent.  However,\
    \ intervening MTAs can\n   also perform this verification if they choose to do\
    \ so.  The\n   verification process uses the domain \"example.com\" extracted\
    \ from the\n   \"d=\" tag and the selector \"brisbane\" from the \"s=\" tag in\
    \ the DKIM-\n   Signature header field to form the DNS DKIM query for:\n   brisbane._domainkey.example.com\n\
    \   Signature verification starts with the physically last Received\n   header\
    \ field, the From header field, and so forth, in the order\n   listed in the \"\
    h=\" tag.  Verification follows with a single CRLF\n   followed by the body (starting\
    \ with \"Hi.\").  The email is canonically\n   prepared for verifying with the\
    \ \"simple\" method.  The result of the\n   query and subsequent verification\
    \ of the signature is stored (in this\n   example) in the X-Authentication-Results\
    \ header field line.  After\n   successful verification, the email looks like\
    \ this:\n   X-Authentication-Results: shopping.example.net\n         header.from=joe@football.example.com;\
    \ dkim=pass\n   Received: from mout23.football.example.com (192.168.1.1)\n   \
    \      by shopping.example.net with SMTP;\n         Fri, 11 Jul 2003 21:01:59\
    \ -0700 (PDT)\n   DKIM-Signature: v=1; a=rsa-sha256; s=brisbane; d=example.com;\n\
    \         c=simple/simple; q=dns/txt; i=joe@football.example.com;\n         h=Received\
    \ : From : To : Subject : Date : Message-ID;\n         bh=2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=;\n\
    \         b=AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOB\n           4nujc7YopdG5dWLSdNg6xNAZpOPr+kHxt1IrE+NahM6L/LbvaHut\n\
    \           KVdkLLkpVaVVQPzeRDI009SO2Il5Lu7rDNH6mZckBdrIx0orEtZV\n           4bmp/YzhwvcubU4=;\n\
    \   Received: from client1.football.example.com  [192.0.2.1]\n         by submitserver.example.com\
    \ with SUBMISSION;\n         Fri, 11 Jul 2003 21:01:54 -0700 (PDT)\n   From: Joe\
    \ SixPack <joe@football.example.com>\n   To: Suzie Q <suzie@shopping.example.net>\n\
    \   Subject: Is dinner ready?\n   Date: Fri, 11 Jul 2003 21:00:37 -0700 (PDT)\n\
    \   Message-ID: <20030712040037.46341.5F8J@football.example.com>\n   Hi.\n   We\
    \ lost the game. Are you hungry yet?\n   Joe.\n"
- title: Appendix B.  Usage Examples (INFORMATIVE)
  contents:
  - "Appendix B.  Usage Examples (INFORMATIVE)\n   DKIM signing and validating can\
    \ be used in different ways, for\n   different operational scenarios.  This Appendix\
    \ discusses some common\n   examples.\n      NOTE: Descriptions in this Appendix\
    \ are for informational purposes\n      only.  They describe various ways that\
    \ DKIM can be used, given\n      particular constraints and needs.  In no case\
    \ are these examples\n      intended to be taken as providing explanation or guidance\n\
    \      concerning DKIM specification details, when creating an\n      implementation.\n"
- title: B.1.  Alternate Submission Scenarios
  contents:
  - "B.1.  Alternate Submission Scenarios\n   In the most simple scenario, a user's\
    \ MUA, MSA, and Internet\n   (boundary) MTA are all within the same administrative\
    \ environment,\n   using the same domain name.  Therefore, all of the components\n\
    \   involved in submission and initial transfer are related.  However, it\n  \
    \ is common for two or more of the components to be under independent\n   administrative\
    \ control.  This creates challenges for choosing and\n   administering the domain\
    \ name to use for signing, and for its\n   relationship to common email identity\
    \ header fields.\n"
- title: B.1.1.  Delegated Business Functions
  contents:
  - "B.1.1.  Delegated Business Functions\n   Some organizations assign specific business\
    \ functions to discrete\n   groups, inside or outside the organization.  The goal,\
    \ then, is to\n   authorize that group to sign some mail, but to constrain what\n\
    \   signatures they can generate.  DKIM selectors (the \"s=\" signature\n   tag)\
    \ and granularity (the \"g=\" key tag) facilitate this kind of\n   restricted\
    \ authorization.  Examples of these outsourced business\n   functions are legitimate\
    \ email marketing providers and corporate\n   benefits providers.\n   Here, the\
    \ delegated group needs to be able to send messages that are\n   signed, using\
    \ the email domain of the client company.  At the same\n   time, the client often\
    \ is reluctant to register a key for the\n   provider that grants the ability\
    \ to send messages for arbitrary\n   addresses in the domain.\n   There are multiple\
    \ ways to administer these usage scenarios.  In one\n   case, the client organization\
    \ provides all of the public query\n   service (for example, DNS) administration,\
    \ and in another it uses DNS\n   delegation to enable all ongoing administration\
    \ of the DKIM key\n   record by the delegated group.\n   If the client organization\
    \ retains responsibility for all of the DNS\n   administration, the outsourcing\
    \ company can generate a key pair,\n   supplying the public key to the client\
    \ company, which then registers\n   it in the query service, using a unique selector\
    \ that authorizes a\n   specific From header field Local-part.  For example, a\
    \ client with\n   the domain \"example.com\" could have the selector record specify\n\
    \   \"g=winter-promotions\" so that this signature is only valid for mail\n  \
    \ with a From address of \"winter-promotions@example.com\".  This would\n   enable\
    \ the provider to send messages using that specific address and\n   have them\
    \ verify properly.  The client company retains control over\n   the email address\
    \ because it retains the ability to revoke the key at\n   any time.\n   If the\
    \ client wants the delegated group to do the DNS administration,\n   it can have\
    \ the domain name that is specified with the selector point\n   to the provider's\
    \ DNS server.  The provider then creates and\n   maintains all of the DKIM signature\
    \ information for that selector.\n   Hence, the client cannot provide constraints\
    \ on the Local-part of\n   addresses that get signed, but it can revoke the provider's\
    \ signing\n   rights by removing the DNS delegation record.\n"
- title: B.1.2.  PDAs and Similar Devices
  contents:
  - "B.1.2.  PDAs and Similar Devices\n   PDAs demonstrate the need for using multiple\
    \ keys per domain.\n   Suppose that John Doe wanted to be able to send messages\
    \ using his\n   corporate email address, jdoe@example.com, and his email device\
    \ did\n   not have the ability to make a Virtual Private Network (VPN)\n   connection\
    \ to the corporate network, either because the device is\n   limited or because\
    \ there are restrictions enforced by his Internet\n   access provider.  If the\
    \ device was equipped with a private key\n   registered for jdoe@example.com by\
    \ the administrator of the\n   example.com domain, and appropriate software to\
    \ sign messages, John\n   could sign the message on the device itself before transmission\n\
    \   through the outgoing network of the access service provider.\n"
- title: B.1.3.  Roaming Users
  contents:
  - "B.1.3.  Roaming Users\n   Roaming users often find themselves in circumstances\
    \ where it is\n   convenient or necessary to use an SMTP server other than their\
    \ home\n   server; examples are conferences and many hotels.  In such\n   circumstances,\
    \ a signature that is added by the submission service\n   will use an identity\
    \ that is different from the user's home system.\n   Ideally, roaming users would\
    \ connect back to their home server using\n   either a VPN or a SUBMISSION server\
    \ running with SMTP AUTHentication\n   on port 587.  If the signing can be performed\
    \ on the roaming user's\n   laptop, then they can sign before submission, although\
    \ the risk of\n   further modification is high.  If neither of these are possible,\n\
    \   these roaming users will not be able to send mail signed using their\n   own\
    \ domain key.\n"
- title: B.1.4.  Independent (Kiosk) Message Submission
  contents:
  - "B.1.4.  Independent (Kiosk) Message Submission\n   Stand-alone services, such\
    \ as walk-up kiosks and web-based\n   information services, have no enduring email\
    \ service relationship\n   with the user, but users occasionally request that\
    \ mail be sent on\n   their behalf.  For example, a website providing news often\
    \ allows the\n   reader to forward a copy of the article to a friend.  This is\n\
    \   typically done using the reader's own email address, to indicate who\n   the\
    \ author is.  This is sometimes referred to as the \"Evite problem\",\n   named\
    \ after the website of the same name that allows a user to send\n   invitations\
    \ to friends.\n   A common way this is handled is to continue to put the reader's\
    \ email\n   address in the From header field of the message, but put an address\n\
    \   owned by the email posting site into the Sender header field.  The\n   posting\
    \ site can then sign the message, using the domain that is in\n   the Sender field.\
    \  This provides useful information to the receiving\n   email site, which is\
    \ able to correlate the signing domain with the\n   initial submission email role.\n\
    \   Receiving sites often wish to provide their end users with\n   information\
    \ about mail that is mediated in this fashion.  Although\n   the real efficacy\
    \ of different approaches is a subject for human\n   factors usability research,\
    \ one technique that is used is for the\n   verifying system to rewrite the From\
    \ header field, to indicate the\n   address that was verified.  For example: From:\
    \ John Doe via\n   news@news-site.com <jdoe@example.com>.  (Note that such rewriting\n\
    \   will break a signature, unless it is done after the verification pass\n  \
    \ is complete.)\n"
- title: B.2.  Alternate Delivery Scenarios
  contents:
  - "B.2.  Alternate Delivery Scenarios\n   Email is often received at a mailbox that\
    \ has an address different\n   from the one used during initial submission.  In\
    \ these cases, an\n   intermediary mechanism operates at the address originally\
    \ used and it\n   then passes the message on to the final destination.  This mediation\n\
    \   process presents some challenges for DKIM signatures.\n"
- title: B.2.1.  Affinity Addresses
  contents:
  - "B.2.1.  Affinity Addresses\n   \"Affinity addresses\" allow a user to have an\
    \ email address that\n   remains stable, even as the user moves among different\
    \ email\n   providers.  They are typically associated with college alumni\n  \
    \ associations, professional organizations, and recreational\n   organizations\
    \ with which they expect to have a long-term\n   relationship.  These domains\
    \ usually provide forwarding of incoming\n   email, and they often have an associated\
    \ Web application that\n   authenticates the user and allows the forwarding address\
    \ to be\n   changed.  However, these services usually depend on users sending\n\
    \   outgoing messages through their own service providers' MTAs.  Hence,\n   mail\
    \ that is signed with the domain of the affinity address is not\n   signed by\
    \ an entity that is administered by the organization owning\n   that domain.\n\
    \   With DKIM, affinity domains could use the Web application to allow\n   users\
    \ to register per-user keys to be used to sign messages on behalf\n   of their\
    \ affinity address.  The user would take away the secret half\n   of the key pair\
    \ for signing, and the affinity domain would publish\n   the public half in DNS\
    \ for access by verifiers.\n   This is another application that takes advantage\
    \ of user-level\n   keying, and domains used for affinity addresses would typically\
    \ have\n   a very large number of user-level keys.  Alternatively, the affinity\n\
    \   domain could handle outgoing mail, operating a mail submission agent\n   that\
    \ authenticates users before accepting and signing messages for\n   them.  This\
    \ is of course dependent on the user's service provider not\n   blocking the relevant\
    \ TCP ports used for mail submission.\n"
- title: B.2.2.  Simple Address Aliasing (.forward)
  contents:
  - "B.2.2.  Simple Address Aliasing (.forward)\n   In some cases, a recipient is\
    \ allowed to configure an email address\n   to cause automatic redirection of\
    \ email messages from the original\n   address to another, such as through the\
    \ use of a Unix .forward file.\n   In this case, messages are typically redirected\
    \ by the mail handling\n   service of the recipient's domain, without modification,\
    \ except for\n   the addition of a Received header field to the message and a\
    \ change\n   in the envelope recipient address.  In this case, the recipient at\n\
    \   the final address' mailbox is likely to be able to verify the\n   original\
    \ signature since the signed content has not changed, and DKIM\n   is able to\
    \ validate the message signature.\n"
- title: B.2.3.  Mailing Lists and Re-Posters
  contents:
  - "B.2.3.  Mailing Lists and Re-Posters\n   There is a wide range of behaviors in\
    \ services that take delivery of\n   a message and then resubmit it.  A primary\
    \ example is with mailing\n   lists (collectively called \"forwarders\" below),\
    \ ranging from those\n   that make no modification to the message itself, other\
    \ than to add a\n   Received header field and change the envelope information,\
    \ to those\n   that add header fields, change the Subject header field, add content\n\
    \   to the body (typically at the end), or reformat the body in some\n   manner.\
    \  The simple ones produce messages that are quite similar to\n   the automated\
    \ alias services.  More elaborate systems essentially\n   create a new message.\n\
    \   A Forwarder that does not modify the body or signed header fields of\n   a\
    \ message is likely to maintain the validity of the existing\n   signature.  It\
    \ also could choose to add its own signature to the\n   message.\n   Forwarders\
    \ which modify a message in a way that could make an\n   existing signature invalid\
    \ are particularly good candidates for\n   adding their own signatures (e.g.,\
    \ mailing-list-name@example.net).\n   Since (re-)signing is taking responsibility\
    \ for the content of the\n   message, these signing forwarders are likely to be\
    \ selective, and\n   forward or re-sign a message only if it is received with\
    \ a valid\n   signature or if they have some other basis for knowing that the\n\
    \   message is not spoofed.\n   A common practice among systems that are primarily\
    \ redistributors of\n   mail is to add a Sender header field to the message, to\
    \ identify the\n   address being used to sign the message.  This practice will\
    \ remove\n   any preexisting Sender header field as required by [RFC2822].  The\n\
    \   forwarder applies a new DKIM-Signature header field with the\n   signature,\
    \ public key, and related information of the forwarder.\n"
- title: Appendix C.  Creating a Public Key (INFORMATIVE)
  contents:
  - "Appendix C.  Creating a Public Key (INFORMATIVE)\n   The default signature is\
    \ an RSA signed SHA256 digest of the complete\n   email.  For ease of explanation,\
    \ the openssl command is used to\n   describe the mechanism by which keys and\
    \ signatures are managed.  One\n   way to generate a 1024-bit, unencrypted private\
    \ key suitable for DKIM\n   is to use openssl like this:\n   $ openssl genrsa\
    \ -out rsa.private 1024\n   For increased security, the \"-passin\" parameter\
    \ can also be added to\n   encrypt the private key.  Use of this parameter will\
    \ require entering\n   a password for several of the following steps.  Servers\
    \ may prefer to\n   use hardware cryptographic support.\n   The \"genrsa\" step\
    \ results in the file rsa.private containing the key\n   information similar to\
    \ this:\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXwIBAAKBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkMoGeLnQg1fWn7/zYtIxN2SnFC\n\
    \    jxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v/RtdC2UzJ1lWT947qR+Rcac2gb\n    to/NMqJ0fzfVjH4OuKhitdY9tf6mcwGjaNBcWToIMmPSPDdQPNUYckcQ2QIDAQAB\n\
    \    AoGBALmn+XwWk7akvkUlqb+dOxyLB9i5VBVfje89Teolwc9YJT36BGN/l4e0l6QX\n    /1//6DWUTB3KI6wFcm7TWJcxbS0tcKZX7FsJvUz1SbQnkS54DJck1EZO/BLa5ckJ\n\
    \    gAYIaqlA9C0ZwM6i58lLlPadX/rtHb7pWzeNcZHjKrjM461ZAkEA+itss2nRlmyO\n    n1/5yDyCluST4dQfO8kAB3toSEVc7DeFeDhnC1mZdjASZNvdHS4gbLIA1hUGEF9m\n\
    \    3hKsGUMMPwJBAPW5v/U+AWTADFCS22t72NUurgzeAbzb1HWMqO4y4+9Hpjk5wvL/\n    eVYizyuce3/fGke7aRYw/ADKygMJdW8H/OcCQQDz5OQb4j2QDpPZc0Nc4QlbvMsj\n\
    \    7p7otWRO5xRa6SzXqqV3+F0VpqvDmshEBkoCydaYwc2o6WQ5EBmExeV8124XAkEA\n    qZzGsIxVP+sEVRWZmW6KNFSdVUpk3qzK0Tz/WjQMe5z0UunY9Ax9/4PVhp/j61bf\n\
    \    eAYXunajbBSOLlx4D+TunwJBANkPI5S9iylsbLs6NkaMHV6k5ioHBBmgCak95JGX\n    GMot/L2x0IYyMLAz6oLWh2hm7zwtb0CgOrPo1ke44hFYnfc=\n\
    \    -----END RSA PRIVATE KEY-----\n   To extract the public-key component from\
    \ the private key, use openssl\n   like this:\n   $ openssl rsa -in rsa.private\
    \ -out rsa.public -pubout -outform PEM\n   This results in the file rsa.public\
    \ containing the key information\n   similar to this:\n   -----BEGIN PUBLIC KEY-----\n\
    \   MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkM\n   oGeLnQg1fWn7/zYtIxN2SnFCjxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v/R\n\
    \   tdC2UzJ1lWT947qR+Rcac2gbto/NMqJ0fzfVjH4OuKhitdY9tf6mcwGjaNBcWToI\n   MmPSPDdQPNUYckcQ2QIDAQAB\n\
    \   -----END PUBLIC KEY-----\n   This public-key data (without the BEGIN and END\
    \ tags) is placed in\n   the DNS:\n   brisbane IN  TXT  (\"v=DKIM1; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQ\"\
    \n                      \"KBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkMoGeLnQg1fWn7/zYt\"\n \
    \                     \"IxN2SnFCjxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v\"\n   \
    \                   \"/RtdC2UzJ1lWT947qR+Rcac2gbto/NMqJ0fzfVjH4OuKhi\"\n     \
    \                 \"tdY9tf6mcwGjaNBcWToIMmPSPDdQPNUYckcQ2QIDAQAB\")\n"
- title: Appendix D.  MUA Considerations
  contents:
  - "Appendix D.  MUA Considerations\n   When a DKIM signature is verified, the processing\
    \ system sometimes\n   makes the result available to the recipient user's MUA.\
    \  How to\n   present this information to the user in a way that helps them is\
    \ a\n   matter of continuing human factors usability research.  The tendency\n\
    \   is to have the MUA highlight the address associated with this signing\n  \
    \ identity in some way, in an attempt to show the user the address from\n   which\
    \ the mail was sent.  An MUA might do this with visual cues such\n   as graphics,\
    \ or it might include the address in an alternate view, or\n   it might even rewrite\
    \ the original From address using the verified\n   information.  Some MUAs might\
    \ indicate which header fields were\n   protected by the validated DKIM signature.\
    \  This could be done with a\n   positive indication on the signed header fields,\
    \ with a negative\n   indication on the unsigned header fields, by visually hiding\
    \ the\n   unsigned header fields, or some combination of these.  If an MUA uses\n\
    \   visual indications for signed header fields, the MUA probably needs\n   to\
    \ be careful not to display unsigned header fields in a way that\n   might be\
    \ construed by the end user as having been signed.  If the\n   message has an\
    \ l= tag whose value does not extend to the end of the\n   message, the MUA might\
    \ also hide or mark the portion of the message\n   body that was not signed.\n\
    \   The aforementioned information is not intended to be exhaustive.  The\n  \
    \ MUA may choose to highlight, accentuate, hide, or otherwise display\n   any\
    \ other information that may, in the opinion of the MUA author, be\n   deemed\
    \ important to the end user.\n"
- title: Appendix E.  Acknowledgements
  contents:
  - "Appendix E.  Acknowledgements\n   The authors wish to thank Russ Allbery, Edwin\
    \ Aoki, Claus Assmann,\n   Steve Atkins, Rob Austein, Fred Baker, Mark Baugher,\
    \ Steve Bellovin,\n   Nathaniel Borenstein, Dave Crocker, Michael Cudahy, Dennis\
    \ Dayman,\n   Jutta Degener, Frank Ellermann, Patrik Faeltstroem, Mark Fanto,\n\
    \   Stephen Farrell, Duncan Findlay, Elliot Gillum, Olafur\n   Gu[eth]mundsson,\
    \ Phillip Hallam-Baker, Tony Hansen, Sam Hartman,\n   Arvel Hathcock, Amir Herzberg,\
    \ Paul Hoffman, Russ Housley, Craig\n   Hughes, Cullen Jennings, Don Johnsen,\
    \ Harry Katz, Murray S.\n   Kucherawy, Barry Leiba, John Levine, Charles Lindsey,\
    \ Simon\n   Longsdale, David Margrave, Justin Mason, David Mayne, Thierry Moreau,\n\
    \   Steve Murphy, Russell Nelson, Dave Oran, Doug Otis, Shamim Pirzada,\n   Juan\
    \ Altmayer Pizzorno, Sanjay Pol, Blake Ramsdell, Christian Renaud,\n   Scott Renfro,\
    \ Neil Rerup, Eric Rescorla, Dave Rossetti, Hector\n   Santos, Jim Schaad, the\
    \ Spamhaus.org team, Malte S. Stretz, Robert\n   Sanders, Rand Wacker, Sam Weiler,\
    \ and Dan Wing for their valuable\n   suggestions and constructive criticism.\n\
    \   The DomainKeys specification was a primary source from which this\n   specification\
    \ has been derived.  Further information about DomainKeys\n   is at [RFC4870].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Allman\n   Sendmail, Inc.\n   6425 Christie Ave,\
    \ Suite 400\n   Emeryville, CA  94608\n   USA\n   Phone: +1 510 594 5501\n   EMail:\
    \ eric+dkim@sendmail.org\n   URI:\n   Jon Callas\n   PGP Corporation\n   3460\
    \ West Bayshore\n   Palo Alto, CA  94303\n   USA\n   Phone: +1 650 319 9016\n\
    \   EMail: jon@pgp.com\n   Mark Delany\n   Yahoo! Inc\n   701 First Avenue\n \
    \  Sunnyvale, CA  95087\n   USA\n   Phone: +1 408 349 6831\n   EMail: markd+dkim@yahoo-inc.com\n\
    \   URI:\n   Miles Libbey\n   Yahoo! Inc\n   701 First Avenue\n   Sunnyvale, CA\
    \  95087\n   USA\n   EMail: mlibbeymail-mailsig@yahoo.com\n   URI:\n   Jim Fenton\n\
    \   Cisco Systems, Inc.\n   MS SJ-9/2\n   170 W. Tasman Drive\n   San Jose, CA\
    \  95134-1706\n   USA\n   Phone: +1 408 526 5914\n   EMail: fenton@cisco.com\n\
    \   URI:\n   Michael Thomas\n   Cisco Systems, Inc.\n   MS SJ-9/2\n   170 W. Tasman\
    \ Drive\n   San Jose, CA  95134-1706\n   Phone: +1 408 525 5386\n   EMail: mat@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
