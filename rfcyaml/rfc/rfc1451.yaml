- title: __initial_text__
  contents:
  - "          Network Working Group                                  J. Case\n  \
    \        Request for Comments: 1451                 SNMP Research, Inc.\n    \
    \                       Management Information Base\n          Status of this\
    \ Memo\n          This RFC specifes an IAB standards track protocol for the\n\
    \          Internet community, and requests discussion and suggestions\n     \
    \     for improvements.  Please refer to the current edition of the\n        \
    \  \"IAB Official Protocol Standards\" for the standardization\n          state\
    \ and status of this protocol.  Distribution of this memo\n          is unlimited.\n\
    \          Table of Contents\n          1 Introduction ..........................................\
    \    2\n          1.1 A Note on Terminology ...............................  \
    \  2\n          2 Overview ..............................................    3\n\
    \          2.1 A SNMPv2 Entity Acting in a Dual Role ...............    3\n  \
    \        2.2 Alarms, Events, and Notifications ...................    3\n    \
    \      2.3 Access Control ......................................    4\n      \
    \    3 Definitions ...........................................    6\n        \
    \  3.1 The Alarm Group .....................................    7\n          3.1.1\
    \ Alarm-Related Notifications .......................   20\n          3.2 The\
    \ Event Group .....................................   21\n          3.3 Conformance\
    \ Information .............................   29\n          3.3.1 Compliance Statements\
    \ .............................   29\n          3.3.2 Units of Conformance ..............................\
    \   29\n          4 Acknowledgements ......................................  \
    \ 31\n          5 References ............................................   35\n\
    \          6 Security Considerations ...............................   36\n  \
    \        7 Authors' Addresses ....................................   36\n    \
    \      RFC 1451            Manager-to-Manager MIB          April 1993\n      \
    \    1.  Introduction\n          A network management system contains: several\
    \ (potentially\n          many) nodes, each with a processing entity, termed an\
    \ agent,\n          which has access to management instrumentation; at least one\n\
    \          management station; and, a management protocol, used to convey\n  \
    \        management information between the agents and management\n          stations.\
    \  Operations of the protocol are carried out under an\n          administrative\
    \ framework which defines both authentication and\n          authorization policies.\n\
    \          Network management stations execute management applications\n     \
    \     which monitor and control network elements.  Network elements\n        \
    \  are devices such as hosts, routers, terminal servers, etc.,\n          which\
    \ are monitored and controlled through access to their\n          management information.\n\
    \          Management information is viewed as a collection of managed\n     \
    \     objects, residing in a virtual information store, termed the\n         \
    \ Management Information Base (MIB).  Collections of related\n          objects\
    \ are defined in MIB modules.  These modules are written\n          using a subset\
    \ of OSI's Abstract Syntax Notation One (ASN.1)\n          [1], termed the Structure\
    \ of Management Information (SMI) [2].\n          The management protocol, version\
    \ 2 of the Simple Network\n          Management Protocol [3], provides for the\
    \ exchange of messages\n          which convey management information between\
    \ the agents and the\n          management stations, including between management\
    \ stations.\n          It is the purpose of this document to define managed objects\n\
    \          which describe the behavior of a SNMPv2 entity acting in both\n   \
    \       a manager role and an agent role.\n          1.1.  A Note on Terminology\n\
    \          For the purpose of exposition, the original Internet-standard\n   \
    \       Network Management Framework, as described in RFCs 1155, 1157,\n     \
    \     and 1212, is termed the SNMP version 1 framework (SNMPv1).\n          The\
    \ current framework is termed the SNMP version 2 framework\n          (SNMPv2).\n\
    \          RFC 1451            Manager-to-Manager MIB          April 1993\n  \
    \        2.  Overview\n          The purpose of this MIB is to provide the means\
    \ for\n          coordination between multiple management stations.  That is,\n\
    \          the means by which the controlling and monitoring functions of\n  \
    \        network management can be distributed amongst multiple\n          management\
    \ stations.  Such distribution facilitates the\n          scaling of network management\
    \ solutions based on the SNMPv2 to\n          meet the needs of very large networks,\
    \ or of networks composed\n          of multiple interconnected administrations.\
    \ Specifically, this\n          MIB provides the means for one management station\
    \ to request\n          management services from another management station.\n\
    \          2.1.  A SNMPv2 Entity Acting in a Dual Role\n          A management\
    \ station providing services to other management\n          station(s), is a SNMPv2\
    \ entity which acts in the dual role of\n          both manager and agent; the\
    \ requests for service are received\n          through acting in an agent role\
    \ (with respect to the managed\n          objects defined in this MIB), and the\
    \ requested services are\n          performed through acting in a manager role.\n\
    \          2.2.  Alarms, Events, and Notifications\n          In this initial\
    \ version, this MIB defines the concepts of\n          \"alarms\", \"events\"\
    , and \"notifications\".  Each alarm is a\n          specific condition detected\
    \ through the periodic (at a\n          configured sampling interval) monitoring\
    \ of the value of a\n          specific management information variable.  An example\
    \ of an\n          alarm condition is when the monitored variable falls outside\
    \ a\n          configured range.  Each alarm condition triggers an event, and\n\
    \          each event can cause (one or more) notifications to be\n          reported\
    \ to other management stations using the Inform-Request\n          PDU.\n    \
    \      Specifically, this MIB defines three MIB tables and a number\n        \
    \  of scalar objects.  The three tables are: the Alarm Table, the\n          Event\
    \ Table, and the Notification Table.\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          2.3.  Access Control\n          The Administrative\
    \ Model for SNMPv2 document [4] includes an\n          access control model, which\
    \ must not be subverted by allowing\n          access to management information\
    \ variables via the Alarm\n          table.  That is, access to a monitored variable\
    \ via the Alarm\n          table must be controlled according to the identity\
    \ of the\n          management station accessing the particular entry in the Alarm\n\
    \          table.\n          An entry in the Alarm table provides the means to\
    \ configure\n          the sampling of the value of a MIB variable in the MIB\
    \ view\n          associated with the specified context (which can refer to\n\
    \          object resources that are either local or remote).  The\n         \
    \ sampling is done by (conceptually or actually) issuing a\n          SNMPv2 request\
    \ to retrieve the variable's value.  This request\n          is authenticated\
    \ and/or protected from disclosure according to\n          a source party and\
    \ a destination party pair which has access\n          to the indicated context.\n\
    \          Thus, to provide the required access control, the initial MIB\n   \
    \       view assigned, by convention, to parties on SNMPv2 entities\n        \
    \  that implement the snmpAlarmTable, must include the component:\n          \
    \  viewSubtree  = { snmpAlarm }\n            viewStatus   = { excluded }\n   \
    \         viewMask     = { ''H }\n          Then, the MIB view associated with\
    \ the context,\n          requestContext, accessible by a requesting management\
    \ station,\n          can be configured to include specific Alarm table entries\
    \ --\n          the ones associated with those contexts to which the\n       \
    \   requesting management station has access.\n          In particular, to provide\
    \ a requestContext with access to the\n          sampling context sampleContext,\
    \ the following family of view\n          subtrees would be included for the requestContext\
    \ on the\n          SNMPv2 entity acting in a dual role:\n               { snmpAlarmEntry\
    \ WILDCARD sampleContext }\n          Which would be configured in the party MIB\
    \ [5] as:\n            contextIdentity   = { requestContext }\n            contextViewIndex\
    \  = { ViewIndex }\n          RFC 1451            Manager-to-Manager MIB     \
    \     April 1993\n        viewIndex         = { ViewIndex }\n        viewSubtree\
    \       = { snmpAlarmEntry 0 sampleContext }\n        viewStatus        = { included\
    \ }\n        viewMask          = { 'FFEF'H } -- specifies wildcard for column\n\
    \          RFC 1451            Manager-to-Manager MIB          April 1993\n  \
    \        3.  Definitions\n          SNMPv2-M2M-MIB DEFINITIONS ::= BEGIN\n   \
    \       IMPORTS\n              MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,\n\
    \              Integer32, Counter32, snmpModules\n                  FROM SNMPv2-SMI\n\
    \              DisplayString, InstancePointer, RowStatus, TimeStamp\n        \
    \          FROM SNMPv2-TC\n              MODULE-COMPLIANCE, OBJECT-GROUP\n   \
    \               FROM SNMPv2-CONF\n              contextIdentity\n            \
    \      FROM SNMPv2-PARTY-MIB;\n          snmpM2M MODULE-IDENTITY\n           \
    \   LAST-UPDATED \"9304010000Z\"\n              ORGANIZATION \"IETF SNMPv2 Working\
    \ Group\"\n              CONTACT-INFO\n                      \"        Steven\
    \ Waldbusser\n                       Postal: Carnegie Mellon University\n    \
    \                           4910 Forbes Ave\n                               Pittsburgh,\
    \ PA  15213\n                          Tel: +1 412 268 6628\n                \
    \          Fax: +1 412 268 4987\n                       E-mail: waldbusser@cmu.edu\"\
    \n              DESCRIPTION\n                      \"The Manager-to-Manager MIB\
    \ module.\"\n              ::= { snmpModules 2 }\n          snmpM2MObjects OBJECT\
    \ IDENTIFIER ::= { snmpM2M 1 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          -- the alarm group\n          --\n      \
    \    -- a collection of objects allowing the description and\n          -- configuration\
    \ of threshold alarms from a SNMPv2 entity\n          -- acting in a dual role.\n\
    \          snmpAlarm      OBJECT IDENTIFIER ::= { snmpM2MObjects 1 }\n       \
    \   -- This Alarm mechanism periodically takes statistical samples\n         \
    \ -- from variables available via SNMPv2 and compares them to\n          -- thresholds\
    \ that have been configured.  The alarm table\n          -- stores configuration\
    \ entries that each define a variable,\n          -- polling period, and threshold\
    \ parameters.  If a sample is\n          -- found to cross the threshold values,\
    \ an event is generated.\n          -- Only variables that resolve to an ASN.1\
    \ primitive type of\n          -- INTEGER (Integer32, Counter32, Gauge32, TimeTicks,\n\
    \          -- Counter64, or UInteger32) may be monitored in this way.\n      \
    \    --\n          -- This function has a hysteresis mechanism to limit the\n\
    \          -- generation of events.  This mechanism generates one event\n    \
    \      -- as a threshold is crossed in the appropriate direction.  No\n      \
    \    -- more events are generated for that threshold until the\n          -- opposite\
    \ threshold is crossed.\n          --\n          -- In the case of sampling a\
    \ deltaValue, an entity may\n          -- implement this mechanism with more precision\
    \ if it takes a\n          -- delta sample twice per period, each time comparing\
    \ the sum\n          -- of the latest two samples to the threshold.  This allows\n\
    \          -- the detection of threshold crossings that span the sampling\n  \
    \        -- boundary.  Note that this does not require any special\n         \
    \ -- configuration of the threshold value.  It is suggested that\n          --\
    \ entities implement this more precise algorithm.\n          --\n          RFC\
    \ 1451            Manager-to-Manager MIB          April 1993\n          snmpAlarmNextIndex\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER (0..65535)\n              MAX-ACCESS\
    \ read-only\n              STATUS     current\n              DESCRIPTION\n   \
    \                   \"The index number of the next appropriate\n             \
    \         unassigned entry in the snmpAlarmTable.  The value\n               \
    \       0 indicates that no unassigned entries are\n                      available.\n\
    \                      A management station should create new entries in\n   \
    \                   the snmpAlarmTable using this algorithm: first,\n        \
    \              issue a management protocol retrieval operation to\n          \
    \            determine the value of snmpAlarmNextIndex; and,\n               \
    \       second, issue a management protocol set operation\n                  \
    \    to create an instance of the snmpAlarmStatus\n                      object\
    \ setting its value to `createAndGo' or\n                      `createAndWait'\
    \ (as specified in the description\n                      of the RowStatus textual\
    \ convention).\"\n              ::= { snmpAlarm 1 }\n          snmpAlarmTable\
    \ OBJECT-TYPE\n              SYNTAX     SEQUENCE OF SnmpAlarmEntry\n         \
    \     MAX-ACCESS not-accessible\n              STATUS     current\n          \
    \    DESCRIPTION\n                      \"A list of snmpAlarm entries.\"\n   \
    \           ::= { snmpAlarm 2 }\n          snmpAlarmEntry OBJECT-TYPE\n      \
    \        SYNTAX     SnmpAlarmEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"A list of parameters that set up a periodic\n                      sampling\
    \ query to check for alarm conditions.  The\n                      contextIdentity\
    \ included in the INDEX clause is\n                      the context to which\
    \ the sampling queries are\n                      directed.\"\n              INDEX\
    \      { contextIdentity, snmpAlarmIndex }\n              ::= { snmpAlarmTable\
    \ 1 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          SnmpAlarmEntry ::= SEQUENCE {\n              snmpAlarmIndex       \
    \             INTEGER,\n              snmpAlarmVariable                 InstancePointer,\n\
    \              snmpAlarmInterval                 Integer32,\n              snmpAlarmSampleType\
    \               INTEGER,\n              snmpAlarmValue                    Integer32,\n\
    \              snmpAlarmStartupAlarm             INTEGER,\n              snmpAlarmRisingThreshold\
    \          Integer32,\n              snmpAlarmFallingThreshold         Integer32,\n\
    \              snmpAlarmRisingEventIndex         INTEGER,\n              snmpAlarmFallingEventIndex\
    \        INTEGER,\n              snmpAlarmUnavailableEventIndex    INTEGER,\n\
    \              snmpAlarmStatus                   RowStatus\n          }\n    \
    \      snmpAlarmIndex OBJECT-TYPE\n              SYNTAX     INTEGER (1..65535)\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"An index that uniquely identifies\
    \ an entry in the\n                      snmpAlarm table for a particular sampling\
    \ context.\n                      Each such entry defines a diagnostic sample\
    \ at a\n                      particular interval for a variable in the\n    \
    \                  particular context's object resources.\"\n              ::=\
    \ { snmpAlarmEntry 1 }\n          RFC 1451            Manager-to-Manager MIB \
    \         April 1993\n          snmpAlarmVariable OBJECT-TYPE\n              SYNTAX\
    \     InstancePointer\n              MAX-ACCESS read-create\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"The object identifier\
    \ of the particular variable\n                      to be sampled.  Only variables\
    \ that resolve to an\n                      ASN.1 primitive type of INTEGER (Integer32,\n\
    \                      Counter32, Gauge32, TimeTicks, Counter64, or\n        \
    \              UInteger32) may be sampled.\n                      If it is detected\
    \ by an error response of\n                      authorizationError, noSuchObject,\
    \ or\n                      noSuchInstance that the variable name of an\n    \
    \                  established snmpAlarmEntry is no longer available\n       \
    \               in the sampling context, a single\n                      snmpObjectUnavailableAlarm\
    \ event is generated and\n                      the status of this snmpAlarmEntry\
    \ is set to\n                      `destroy'.  Likewise, if the syntax of the\n\
    \                      variable retrieved by the query is not Integer32,\n   \
    \                   Counter32, Gauge32, TimeTicks, Counter64, or\n           \
    \           UInteger32, the same actions will be taken.\n                    \
    \  If the SNMPv2 entity acting in a dual role detects\n                      that\
    \ the sampled value can not be obtained due to\n                      lack of\
    \ response to management queries, it should\n                      either:\n \
    \                          1) Set the status of this snmpAlarmEntry to\n     \
    \                      `destroy', if it is determined that further\n         \
    \                  communication is not possible;\n                          \
    \ or,\n                           2) Delete the associated snmpAlarmValue\n  \
    \                         instance (but not the entire conceptual row),\n    \
    \                       and continue to attempt to sample the\n              \
    \             variable and recreate the associated\n                         \
    \  snmpAlarmValue instance should communication\n                           be\
    \ reestablished.\n                      An attempt to modify this object will\
    \ fail with an\n                      `inconsistentValue' error if the associated\n\
    \                      snmpAlarmStatus object would be equal to `active'\n   \
    \                   both before and after the modification attempt.\"\n      \
    \    RFC 1451            Manager-to-Manager MIB          April 1993\n        \
    \      ::= { snmpAlarmEntry 2 }\n          snmpAlarmInterval OBJECT-TYPE\n   \
    \           SYNTAX     Integer32\n              UNITS      \"seconds\"\n     \
    \         MAX-ACCESS read-create\n              STATUS     current\n         \
    \     DESCRIPTION\n                      \"The interval in seconds over which\
    \ the data is\n                      sampled and compared with the rising and\
    \ falling\n                      thresholds.  When setting this object and the\n\
    \                      sampling type is `deltaValue',  care should be\n      \
    \                taken to ensure that the change during this\n               \
    \       interval of the variable being sampled will not\n                    \
    \  exceed the (-2^31...2^31-1) range of the\n                      snmpAlarmValue.\n\
    \                      An attempt to modify this object will fail with an\n  \
    \                    `inconsistentValue' error if the associated\n           \
    \           snmpAlarmStatus object would be equal to `active'\n              \
    \        both before and after the modification attempt.\"\n              ::=\
    \ { snmpAlarmEntry 3 }\n          RFC 1451            Manager-to-Manager MIB \
    \         April 1993\n          snmpAlarmSampleType OBJECT-TYPE\n            \
    \  SYNTAX     INTEGER {\n                             absoluteValue(1),\n    \
    \                         deltaValue(2)\n                         }\n        \
    \      MAX-ACCESS read-create\n              STATUS     current\n            \
    \  DESCRIPTION\n                      \"The method of sampling the selected variable\
    \ and\n                      calculating the value to be compared against the\n\
    \                      thresholds.  If the value of this object is\n         \
    \             `absoluteValue', the value of the selected\n                   \
    \   variable at the end of the sampling interval will\n                      be\
    \ compared directly with both the\n                      snmpAlarmRisingThreshold\
    \ and the\n                      snmpAlarmFallingThreshold values.  If the value\
    \ of\n                      this object is `deltaValue', the value of the\n  \
    \                    selected variable at the end of the sampling\n          \
    \            interval will be subtracted from its value at the\n             \
    \         end of the previous sampling interval, and the\n                   \
    \   difference compared with both the\n                      snmpAlarmRisingThreshold\
    \ and the\n                      snmpAlarmFallingThreshold values.\n         \
    \             An attempt to modify this object will fail with an\n           \
    \           `inconsistentValue' error if the associated\n                    \
    \  snmpAlarmStatus object would be equal to `active'\n                      both\
    \ before and after the modification attempt.\"\n              DEFVAL { deltaValue\
    \ }\n              ::= { snmpAlarmEntry 4 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          snmpAlarmValue OBJECT-TYPE\n            \
    \  SYNTAX     Integer32\n              MAX-ACCESS read-only\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"The value of\
    \ the statistic during the last\n                      sampling period.  The value\
    \ during the current\n                      sampling period is not made available\
    \ until the\n                      period is completed.  If the value of the\n\
    \                      statistic does not fit in the signed 32 bit\n         \
    \             representation of this object, it should be\n                  \
    \    truncated in an implementation specific manner.\n                      Note\
    \ that if the associated snmpAlarmSampleType is\n                      set to\
    \ `deltaValue', the value of this object is\n                      the difference\
    \ in the sampled variable since the\n                      last sample.\n    \
    \                  This object will be created by the SNMPv2 entity\n        \
    \              acting in a dual role when this entry is set to\n             \
    \         `active', and the first sampling period has\n                      completed.\
    \  It may be created and deleted at other\n                      times by the\
    \ SNMPv2 entity acting in a dual role\n                      when the sampled\
    \ value can not be obtained, as\n                      specified in the snmpAlarmVariable\
    \ object.\"\n              ::= { snmpAlarmEntry 5 }\n          RFC 1451      \
    \      Manager-to-Manager MIB          April 1993\n          snmpAlarmStartupAlarm\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   risingAlarm(1),\n                             fallingAlarm(2),\n         \
    \                    risingOrFallingAlarm(3)\n                         }\n   \
    \           MAX-ACCESS read-create\n              STATUS     current\n       \
    \       DESCRIPTION\n                      \"The alarm that may be sent when this\
    \ entry is\n                      first set to `active'.  If the first sample\
    \ after\n                      this entry becomes active is greater than or equal\n\
    \                      to the risingThreshold and snmpAlarmStartupAlarm\n    \
    \                  is equal to `risingAlarm' or\n                      `risingOrFallingAlarm',\
    \ then a single rising alarm\n                      will be generated.  If the\
    \ first sample after this\n                      entry becomes active is less\
    \ than or equal to the\n                      fallingThreshold and snmpAlarmStartupAlarm\
    \ is\n                      equal to `fallingAlarm' or `risingOrFallingAlarm',\n\
    \                      then a single falling alarm will be generated.\n      \
    \                Note that a snmpObjectUnavailableAlarm is sent\n            \
    \          upon startup whenever it is applicable,\n                      independent\
    \ of the setting of\n                      snmpAlarmStartupAlarm.\n          \
    \            An attempt to modify this object will fail with an\n            \
    \          `inconsistentValue' error if the associated\n                     \
    \ snmpAlarmStatus object would be equal to `active'\n                      both\
    \ before and after the modification attempt.\"\n              DEFVAL { risingOrFallingAlarm\
    \ }\n              ::= { snmpAlarmEntry 6 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          snmpAlarmRisingThreshold OBJECT-TYPE\n  \
    \            SYNTAX     Integer32\n              MAX-ACCESS read-create\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"A threshold for the sampled statistic.  When the\n                     \
    \ current sampled value is greater than or equal to\n                      this\
    \ threshold, and the value at the last sampling\n                      interval\
    \ was less than this threshold, a single\n                      event will be\
    \ generated.  A single event will also\n                      be generated if\
    \ the first sample after this entry\n                      becomes active is greater\
    \ than or equal to this\n                      threshold and the associated snmpAlarmStartupAlarm\n\
    \                      is equal to `risingAlarm' or\n                      `risingOrFallingAlarm'.\n\
    \                      After a rising event is generated, another such\n     \
    \                 event will not be generated until the sampled\n            \
    \          value falls below this threshold and reaches the\n                \
    \      snmpAlarmFallingThreshold.\n                      An attempt to modify\
    \ this object will fail with an\n                      `inconsistentValue' error\
    \ if the associated\n                      snmpAlarmStatus object would be equal\
    \ to `active'\n                      both before and after the modification attempt.\"\
    \n              ::= { snmpAlarmEntry 7 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          snmpAlarmFallingThreshold OBJECT-TYPE\n \
    \             SYNTAX     Integer32\n              MAX-ACCESS read-create\n   \
    \           STATUS     current\n              DESCRIPTION\n                  \
    \    \"A threshold for the sampled statistic.  When the\n                    \
    \  current sampled value is less than or equal to\n                      this\
    \ threshold, and the value at the last sampling\n                      interval\
    \ was greater than this threshold, a single\n                      event will\
    \ be generated.  A single event will also\n                      be generated\
    \ if the first sample after this entry\n                      becomes active is\
    \ less than or equal to this\n                      threshold and the associated\
    \ snmpAlarmStartupAlarm\n                      is equal to `fallingAlarm' or\n\
    \                      `risingOrFallingAlarm'.\n                      After a\
    \ falling event is generated, another such\n                      event will not\
    \ be generated until the sampled\n                      value rises above this\
    \ threshold and reaches the\n                      snmpAlarmRisingThreshold.\n\
    \                      An attempt to modify this object will fail with an\n  \
    \                    `inconsistentValue' error if the associated\n           \
    \           snmpAlarmStatus object would be equal to `active'\n              \
    \        both before and after the modification attempt.\"\n              ::=\
    \ { snmpAlarmEntry 8 }\n          RFC 1451            Manager-to-Manager MIB \
    \         April 1993\n          snmpAlarmRisingEventIndex OBJECT-TYPE\n      \
    \        SYNTAX     INTEGER (0..65535)\n              MAX-ACCESS read-create\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The index of the snmpEventEntry that is used when\n                \
    \      a rising threshold is crossed.  The snmpEventEntry\n                  \
    \    identified by a particular value of this index is\n                     \
    \ the same as identified by the same value of the\n                      snmpEventIndex\
    \ object.  If there is no\n                      corresponding entry in the snmpEventTable,\
    \ then no\n                      association exists.  In particular, if this value\n\
    \                      is zero, no associated event will be generated, as\n  \
    \                    zero is not a valid snmpEventIndex.\n                   \
    \   An attempt to modify this object will fail with an\n                     \
    \ `inconsistentValue' error if the associated\n                      snmpAlarmStatus\
    \ object would be equal to `active'\n                      both before and after\
    \ the modification attempt.\"\n              ::= { snmpAlarmEntry 9 }\n      \
    \    RFC 1451            Manager-to-Manager MIB          April 1993\n        \
    \  snmpAlarmFallingEventIndex OBJECT-TYPE\n              SYNTAX     INTEGER (0..65535)\n\
    \              MAX-ACCESS read-create\n              STATUS     current\n    \
    \          DESCRIPTION\n                      \"The index of the snmpEventEntry\
    \ that is used when\n                      a falling threshold is crossed.  The\n\
    \                      snmpEventEntry identified by a particular value of\n  \
    \                    this index is the same as identified by the same\n      \
    \                value of the snmpEventIndex object.  If there is\n          \
    \            no corresponding entry in the snmpEventTable, then\n            \
    \          no association exists.  In particular, if this\n                  \
    \    value is zero, no associated event will be\n                      generated,\
    \ as zero is not a valid snmpEventIndex.\n                      An attempt to\
    \ modify this object will fail with an\n                      `inconsistentValue'\
    \ error if the associated\n                      snmpAlarmStatus object would\
    \ be equal to `active'\n                      both before and after the modification\
    \ attempt.\"\n              ::= { snmpAlarmEntry 10 }\n          snmpAlarmUnavailableEventIndex\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER (0..65535)\n              MAX-ACCESS\
    \ read-create\n              STATUS     current\n              DESCRIPTION\n \
    \                     \"The index of the snmpEventEntry that is used when\n  \
    \                    a variable becomes unavailable.  The\n                  \
    \    snmpEventEntry identified by a particular value of\n                    \
    \  this index is the same as identified by the same\n                      value\
    \ of the snmpEventIndex object.  If there is\n                      no corresponding\
    \ entry in the snmpEventTable, then\n                      no association exists.\
    \  In particular, if this\n                      value is zero, no associated\
    \ event will be\n                      generated, as zero is not a valid snmpEventIndex.\n\
    \                      An attempt to modify this object will fail with an\n  \
    \                    `inconsistentValue' error if the associated\n           \
    \           snmpAlarmStatus object would be equal to `active'\n              \
    \        both before and after the modification attempt.\"\n              ::=\
    \ { snmpAlarmEntry 11 }\n          RFC 1451            Manager-to-Manager MIB\
    \          April 1993\n          snmpAlarmStatus OBJECT-TYPE\n              SYNTAX\
    \     RowStatus\n              MAX-ACCESS read-create\n              STATUS  \
    \   current\n              DESCRIPTION\n                      \"The status of\
    \ this snmpAlarm entry.  This object\n                      may not be set to\
    \ `active' unless the following\n                      columnar objects exist\
    \ in this row:\n                      snmpAlarmVariable, snmpAlarmInterval,\n\
    \                      snmpAlarmSampleType, snmpAlarmStartupAlarm,\n         \
    \             snmpAlarmRisingThreshold,\n                      snmpAlarmFallingThreshold,\n\
    \                      snmpAlarmRisingEventIndex,\n                      snmpAlarmFallingEventIndex,\
    \ and\n                      snmpAlarmUnavailableEventIndex.\"\n             \
    \ ::= { snmpAlarmEntry 12 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          -- alarm-related notifications\n        \
    \  snmpAlarmNotifications\n                         OBJECT IDENTIFIER ::= { snmpAlarm\
    \ 3 }\n          snmpRisingAlarm NOTIFICATION-TYPE\n              OBJECTS { snmpAlarmVariable,\
    \ snmpAlarmSampleType,\n                        snmpAlarmValue, snmpAlarmRisingThreshold\
    \ }\n              STATUS  current\n              DESCRIPTION\n              \
    \        \"An event that is generated when an alarm entry\n                  \
    \    crosses its rising threshold.  The instances of\n                      those\
    \ objects contained within the varbind list\n                      are those of\
    \ the alarm entry which generated this\n                      event.\"\n     \
    \         ::= { snmpAlarmNotifications 1 }\n          snmpFallingAlarm NOTIFICATION-TYPE\n\
    \              OBJECTS { snmpAlarmVariable, snmpAlarmSampleType,\n           \
    \             snmpAlarmValue, snmpAlarmFallingThreshold }\n              STATUS\
    \  current\n              DESCRIPTION\n                      \"An event that is\
    \ generated when an alarm entry\n                      crosses its falling threshold.\
    \  The instances of\n                      those objects contained within the\
    \ varbind list\n                      are those of the alarm entry which generated\
    \ this\n                      event.\"\n              ::= { snmpAlarmNotifications\
    \ 2 }\n          snmpObjectUnavailableAlarm NOTIFICATION-TYPE\n              OBJECTS\
    \ { snmpAlarmVariable }\n              STATUS  current\n              DESCRIPTION\n\
    \                      \"An event that is generated when a variable\n        \
    \              monitored by an alarm entry becomes unavailable.\n            \
    \          The instance of snmpAlarmVariable contained within\n              \
    \        the varbind list is the one associated with the\n                   \
    \   alarm entry which generated this event.\"\n              ::= { snmpAlarmNotifications\
    \ 3 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          -- the event group\n          --\n          -- a collection of objects\
    \ allowing the description and\n          -- configuration of events from a SNMPv2\
    \ entity acting\n          -- in a dual role.\n          snmpEvent      OBJECT\
    \ IDENTIFIER ::= { snmpM2MObjects 2 }\n          -- The snmpEvent table defines\
    \ the set of events generated on\n          -- a SNMPv2 entity acting in a dual\
    \ role.  Each entry in the\n          -- snmpEventTable associates an event type\
    \ with the\n          -- notification method and associated parameters.  Some\n\
    \          -- snmpEvent entries are fired by an associated condition in\n    \
    \      -- the snmpAlarmTable.  Others are fired on behalf of\n          -- conditions\
    \ defined in the NOTIFICATION-TYPE macro.  The\n          -- snmpNotificationTable\
    \ defines notifications that should\n          -- occur when an associated event\
    \ is fired.\n          snmpEventNextIndex OBJECT-TYPE\n              SYNTAX  \
    \   INTEGER (0..65535)\n              MAX-ACCESS read-only\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"The index number\
    \ of the next appropriate\n                      unassigned entry in the snmpEventTable.\
    \  The value\n                      0 indicates that no unassigned entries are\n\
    \                      available.\n                      A management station\
    \ should create new entries in\n                      the snmpEventTable using\
    \ this algorithm: first,\n                      issue a management protocol retrieval\
    \ operation to\n                      determine the value of snmpEventNextIndex;\
    \ and,\n                      second, issue a management protocol set operation\n\
    \                      to create an instance of the snmpEventStatus\n        \
    \              object setting its value to `createAndWait' or\n              \
    \        'createAndGo'.\"\n              ::= { snmpEvent 1 }\n          RFC 1451\
    \            Manager-to-Manager MIB          April 1993\n          snmpEventTable\
    \ OBJECT-TYPE\n              SYNTAX     SEQUENCE OF SnmpEventEntry\n         \
    \     MAX-ACCESS not-accessible\n              STATUS     current\n          \
    \    DESCRIPTION\n                      \"A list of events.\"\n              ::=\
    \ { snmpEvent 2 }\n          snmpEventEntry OBJECT-TYPE\n              SYNTAX\
    \     SnmpEventEntry\n              MAX-ACCESS not-accessible\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"A set of parameters\
    \ that describe an event that\n                      is generated when certain\
    \ conditions are met.\"\n              INDEX      { snmpEventIndex }\n       \
    \       ::= { snmpEventTable 1 }\n          SnmpEventEntry ::= SEQUENCE {\n  \
    \            snmpEventIndex          INTEGER,\n              snmpEventID     \
    \        OBJECT IDENTIFIER,\n              snmpEventDescription    DisplayString,\n\
    \              snmpEventEvents         Counter32,\n              snmpEventLastTimeSent\
    \   TimeStamp,\n              snmpEventStatus         RowStatus\n          }\n\
    \          snmpEventIndex OBJECT-TYPE\n              SYNTAX     INTEGER (1..65535)\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"An index that uniquely identifies\
    \ an entry in the\n                      snmpEvent table.  Each such entry defines\
    \ an event\n                      generated when the appropriate conditions occur.\"\
    \n              ::= { snmpEventEntry 1 }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          snmpEventID OBJECT-TYPE\n              SYNTAX\
    \     OBJECT IDENTIFIER\n              MAX-ACCESS read-create\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"The authoritative\
    \ identification of the event\n                      type generated by this entry.\
    \  This variable\n                      occurs as the second varbind of an InformRequest-\n\
    \                      PDU.  If this OBJECT IDENTIFIER maps to a\n           \
    \           NOTIFICATION-TYPE the sender will place the\n                    \
    \  objects listed in the NOTIFICATION-TYPE in the\n                      varbind\
    \ list.\"\n              ::= { snmpEventEntry 2 }\n          snmpEventDescription\
    \ OBJECT-TYPE\n              SYNTAX     DisplayString (SIZE (0..127))\n      \
    \        MAX-ACCESS read-create\n              STATUS     current\n          \
    \    DESCRIPTION\n                      \"A comment describing this snmpEvent\
    \ entry.\"\n              ::= { snmpEventEntry 3 }\n          snmpEventEvents\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The number of events caused by event generators\n                  \
    \    associated with this snmpEvent entry.\"\n              ::= { snmpEventEntry\
    \ 4 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          snmpEventLastTimeSent OBJECT-TYPE\n              SYNTAX     TimeStamp\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"The value of sysUpTime at the time\
    \ this snmpEvent\n                      entry last generated an event.  If this\
    \ entry has\n                      not generated any events, this value will be\n\
    \                      zero.\"\n              DEFVAL { 0 }\n              ::=\
    \ { snmpEventEntry 5 }\n          snmpEventStatus OBJECT-TYPE\n              SYNTAX\
    \     RowStatus\n              MAX-ACCESS read-create\n              STATUS  \
    \   current\n              DESCRIPTION\n                      \"The status of\
    \ this snmpEvent entry.  This object\n                      may not be set to\
    \ `active' unless the following\n                      columnar objects exist\
    \ in this row: snmpEventID,\n                      snmpEventDescription, snmpEventEvents,\
    \ and\n                      snmpEventLastTimeSent.\n                      Setting\
    \ an instance of this object to the value\n                      'destroy' has\
    \ the effect of invalidating any/all\n                      entries in the snmpEventTable,\
    \ and the\n                      snmpEventNotifyTable which reference the\n  \
    \                    corresponding snmpEventEntry.\"\n              ::= { snmpEventEntry\
    \ 6 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          snmpEventNotifyMinInterval OBJECT-TYPE\n              SYNTAX     Integer32\n\
    \              UNITS      \"seconds\"\n              MAX-ACCESS read-only\n  \
    \            STATUS     current\n              DESCRIPTION\n                 \
    \     \"The minimum interval that the SNMPv2 entity\n                      acting\
    \ in a dual role will wait before\n                      retransmitting an InformRequest-PDU.\
    \  This object\n                      specifies the minimal value supported by\
    \ the\n                      SNMPv2 entity acting in a dual role, based on\n \
    \                     resource or implementation constraints.\n              \
    \        For a particular entry in the\n                      snmpEventNotifyTable,\
    \ if the associated\n                      snmpEventNotifyIntervalRequested variable\
    \ is\n                      greater than this object, the\n                  \
    \    snmpEventNotifyIntervalRequested value shall be\n                      used\
    \ as the minimum interval for retransmissions\n                      of InformRequest-PDUs\
    \ sent on behalf of that\n                      entry.\"\n              ::= {\
    \ snmpEvent 3 }\n          snmpEventNotifyMaxRetransmissions OBJECT-TYPE\n   \
    \           SYNTAX     Integer32\n              MAX-ACCESS read-only\n       \
    \       STATUS     current\n              DESCRIPTION\n                      \"\
    The maximum number of time that the SNMPv2 entity\n                      acting\
    \ in a dual role will retransmit an\n                      InformRequest-PDU.\
    \  This object specifies the\n                      maximal value supported by\
    \ the SNMPv2 entity\n                      acting in a dual role, based on resource\
    \ or\n                      implementation constraints.\n                    \
    \  For a particular entry in the\n                      snmpEventNotifyTable,\
    \ if the associated\n                      snmpEventNotifyRetransmissionsRequested\
    \ variable\n                      is less than this object, the\n            \
    \          snmpEventNotifyRetransmissionsRequested value\n                   \
    \   shall be used as the retransmission count for\n                      InformRequest-PDUs\
    \ sent on behalf of that entry.\"\n              ::= { snmpEvent 4 }\n       \
    \   -- The snmpEventNotifyTable is used to configure the\n          RFC 1451 \
    \           Manager-to-Manager MIB          April 1993\n          -- destination\
    \ and type of notifications sent by a SNMPv2\n          -- entity acting in a\
    \ manager role when a particular event\n          -- is triggered.\n         \
    \ snmpEventNotifyTable OBJECT-TYPE\n              SYNTAX     SEQUENCE OF SnmpEventNotifyEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"A list of protocol configuration\
    \ entries for\n                      event notifications from this entity.\"\n\
    \              ::= { snmpEvent 5 }\n          snmpEventNotifyEntry OBJECT-TYPE\n\
    \              SYNTAX     SnmpEventNotifyEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"A set of parameters that describe the type and\n                   \
    \   destination of InformRequest-PDUs sent for a\n                      particular\
    \ event.  The snmpEventIndex in this\n                      entry's INDEX clause\
    \ identifies the snmpEventEntry\n                      which, when triggered,\
    \ will generate a\n                      notification as configured in this entry.\
    \  The\n                      contextIdentity in this entry's INDEX clause\n \
    \                     identifies the context to which a notification\n       \
    \               will be sent.\"\n              INDEX      { snmpEventIndex, contextIdentity\
    \ }\n              ::= { snmpEventNotifyTable 1 }\n          SnmpEventNotifyEntry\
    \ ::= SEQUENCE {\n              snmpEventNotifyIntervalRequested        Integer32,\n\
    \              snmpEventNotifyRetransmissionsRequested Integer32,\n          \
    \    snmpEventNotifyLifetime                 Integer32,\n              snmpEventNotifyStatus\
    \                   RowStatus\n          }\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          snmpEventNotifyIntervalRequested OBJECT-TYPE\n\
    \              SYNTAX     Integer32\n              UNITS      \"seconds\"\n  \
    \            MAX-ACCESS read-create\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"The requested interval for retransmission\
    \ of\n                      Inform PDUs generated on the behalf of this entry.\n\
    \                      This variable will be the actual interval used\n      \
    \                unless the snmpEventNotifyMinInterval is greater\n          \
    \            than this object, in which case the interval shall\n            \
    \          be equal to snmpEventNotifyMinInterval.\"\n              DEFVAL { 30\
    \ }\n              ::= { snmpEventNotifyEntry 1 }\n          snmpEventNotifyRetransmissionsRequested\
    \ OBJECT-TYPE\n              SYNTAX     Integer32\n              MAX-ACCESS read-create\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The requested number of retransmissions of an\n                    \
    \  InformRequest-PDU generated on behalf of this\n                      entry.\n\
    \                      This variable will be the actual number of\n          \
    \            retransmissions used unless the\n                      snmpEventNotifyMaxRetransmissions\
    \ is less than\n                      this object, in which case the retransmission\n\
    \                      count shall be equal to\n                      snmpEventNotifyMaxRetransmissions.\"\
    \n              DEFVAL { 5 }\n              ::= { snmpEventNotifyEntry 2 }\n \
    \         RFC 1451            Manager-to-Manager MIB          April 1993\n   \
    \       snmpEventNotifyLifetime OBJECT-TYPE\n              SYNTAX     Integer32\n\
    \              UNITS      \"seconds\"\n              MAX-ACCESS read-create\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The number of seconds this entry shall live until\n                \
    \      the corresponding instance of\n                      snmpEventNotifyStatus\
    \ is set to 'destroy'.  This\n                      value shall count down to\
    \ zero, at which time the\n                      corresponding instance of snmpEventNotifyStatus\n\
    \                      will be set to 'destroy'.  Any management station\n   \
    \                   that is using this entry must periodically refresh\n     \
    \                 this value to ensure the continued delivery of\n           \
    \           events.\"\n              DEFVAL { 86400 }\n              ::= { snmpEventNotifyEntry\
    \ 3 }\n          snmpEventNotifyStatus OBJECT-TYPE\n              SYNTAX     RowStatus\n\
    \              MAX-ACCESS read-create\n              STATUS     current\n    \
    \          DESCRIPTION\n                      \"The state of this snmpEventNotifyEntry.\
    \  This\n                      object may not be set to `active' unless the\n\
    \                      following columnar objects exist in this row:\n       \
    \               snmpEventNotifyIntervalRequested,\n                      snmpEventNotifyRetransmissionsRequested,\
    \ and\n                      snmpEventNotifyLifetime.\"\n              ::= { snmpEventNotifyEntry\
    \ 4 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          -- conformance information\n          snmpM2MConformance\n        \
    \                 OBJECT IDENTIFIER ::= { snmpM2M 2 }\n          snmpM2MCompliances\n\
    \                         OBJECT IDENTIFIER ::= { snmpM2MConformance 1 }\n   \
    \       snmpM2MGroups  OBJECT IDENTIFIER ::= { snmpM2MConformance 2 }\n      \
    \    -- compliance statements\n          snmpM2MCompliance MODULE-COMPLIANCE\n\
    \              STATUS  current\n              DESCRIPTION\n                  \
    \    \"The compliance statement for SNMPv2 entities\n                      which\
    \ implement the Manager-to-Manager MIB.\"\n              MODULE  -- this module\n\
    \                  MANDATORY-GROUPS { snmpAlarmGroup, snmpEventGroup }\n     \
    \         ::= { snmpM2MCompliances 1 }\n          -- units of conformance\n  \
    \        snmpAlarmGroup OBJECT-GROUP\n              OBJECTS { snmpAlarmNextIndex,\n\
    \                        snmpAlarmVariable, snmpAlarmInterval,\n             \
    \           snmpAlarmSampleType, snmpAlarmValue,\n                        snmpAlarmStartupAlarm,\
    \ snmpAlarmRisingThreshold,\n                        snmpAlarmFallingThreshold,\n\
    \                        snmpAlarmRisingEventIndex,\n                        snmpAlarmFallingEventIndex,\n\
    \                        snmpAlarmUnavailableEventIndex,\n                   \
    \     snmpAlarmStatus }\n              STATUS  current\n              DESCRIPTION\n\
    \                      \"A collection of objects allowing the description\n  \
    \                    and configuration of threshold alarms from a\n          \
    \            SNMPv2 entity acting in a dual role.\"\n              ::= { snmpM2MGroups\
    \ 1 }\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \          snmpEventGroup OBJECT-GROUP\n              OBJECTS { snmpEventNextIndex,\n\
    \                        snmpEventID, snmpEventDescription,\n                \
    \        snmpEventEvents, snmpEventLastTimeSent,\n                        snmpEventStatus,\
    \ snmpEventNotifyMinInterval,\n                        snmpEventNotifyMaxRetransmissions,\n\
    \                        snmpEventNotifyIntervalRequested,\n                 \
    \       snmpEventNotifyRetransmissionsRequested,\n                        snmpEventNotifyLifetime,\
    \ snmpEventNotifyStatus }\n              STATUS  current\n              DESCRIPTION\n\
    \                      \"A collection of objects allowing the description\n  \
    \                    and configuration of events from a SNMPv2 entity\n      \
    \                acting in a dual role.\"\n              ::= { snmpM2MGroups 2\
    \ }\n          END\n          RFC 1451            Manager-to-Manager MIB     \
    \     April 1993\n          4.  Acknowledgements\n          The comments of the\
    \ SNMP version 2 working group are\n          gratefully acknowledged:\n     \
    \          Beth Adams, Network Management Forum\n               Steve Alexander,\
    \ INTERACTIVE Systems Corporation\n               David Arneson, Cabletron Systems\n\
    \               Toshiya Asaba\n               Fred Baker, ACC\n              \
    \ Jim Barnes, Xylogics, Inc.\n               Brian Bataille\n               Andy\
    \ Bierman, SynOptics Communications, Inc.\n               Uri Blumenthal, IBM\
    \ Corporation\n               Fred Bohle, Interlink\n               Jack Brown\n\
    \               Theodore Brunner, Bellcore\n               Stephen F. Bush, GE\
    \ Information Services\n               Jeffrey D. Case, University of Tennessee,\
    \ Knoxville\n               John Chang, IBM Corporation\n               Szusin\
    \ Chen, Sun Microsystems\n               Robert Ching\n               Chris Chiotasso,\
    \ Ungermann-Bass\n               Bobby A. Clay, NASA/Boeing\n               John\
    \ Cooke, Chipcom\n               Tracy Cox, Bellcore\n               Juan Cruz,\
    \ Datability, Inc.\n               David Cullerot, Cabletron Systems\n       \
    \        Cathy Cunningham, Microcom\n               James R. (Chuck) Davin, Bellcore\n\
    \               Michael Davis, Clearpoint\n               Mike Davison, FiberCom\n\
    \               Cynthia DellaTorre, MITRE\n               Taso N. Devetzis, Bellcore\n\
    \               Manual Diaz, DAVID Systems, Inc.\n               Jon Dreyer, Sun\
    \ Microsystems\n               David Engel, Optical Data Systems\n           \
    \    Mike Erlinger, Lexcel\n               Roger Fajman, NIH\n               Daniel\
    \ Fauvarque, Sun Microsystems\n               Karen Frisa, CMU\n             \
    \  Shari Galitzer, MITRE\n               Shawn Gallagher, Digital Equipment Corporation\n\
    \               Richard Graveman, Bellcore\n               Maria Greene, Xyplex,\
    \ Inc.\n          RFC 1451            Manager-to-Manager MIB          April 1993\n\
    \               Michel Guittet, Apple\n               Robert Gutierrez, NASA\n\
    \               Bill Hagerty, Cabletron Systems\n               Gary W. Haney,\
    \ Martin Marietta Energy Systems\n               Patrick Hanil, Nokia Telecommunications\n\
    \               Matt Hecht, SNMP Research, Inc.\n               Edward A. Heiner,\
    \ Jr., Synernetics Inc.\n               Susan E. Hicks, Martin Marietta Energy\
    \ Systems\n               Geral Holzhauer, Apple\n               John Hopprich,\
    \ DAVID Systems, Inc.\n               Jeff Hughes, Hewlett-Packard\n         \
    \      Robin Iddon, Axon Networks, Inc.\n               David Itusak\n       \
    \        Kevin M. Jackson, Concord Communications, Inc.\n               Ole J.\
    \ Jacobsen, Interop Company\n               Ronald Jacoby, Silicon Graphics, Inc.\n\
    \               Satish Joshi, SynOptics Communications, Inc.\n               Frank\
    \ Kastenholz, FTP Software\n               Mark Kepke, Hewlett-Packard\n     \
    \          Ken Key, SNMP Research, Inc.\n               Zbiginew Kielczewski,\
    \ Eicon\n               Jongyeoi Kim\n               Andrew Knutsen, The Santa\
    \ Cruz Operation\n               Michael L. Kornegay, VisiSoft\n             \
    \  Deirdre C. Kostik, Bellcore\n               Cheryl Krupczak, Georgia Tech\n\
    \               Mark S. Lewis, Telebit\n               David Lin\n           \
    \    David Lindemulder, AT&T/NCR\n               Ben Lisowski, Sprint\n      \
    \         David Liu, Bell-Northern Research\n               John Lunny, The Wollongong\
    \ Group\n               Robert C. Lushbaugh Martin, Marietta Energy Systems\n\
    \               Michael Luufer, BBN\n               Carl Madison, Star-Tek, Inc.\n\
    \               Keith McCloghrie, Hughes LAN Systems\n               Evan McGinnis,\
    \ 3Com Corporation\n               Bill McKenzie, IBM Corporation\n          \
    \     Donna McMaster, SynOptics Communications, Inc.\n               John Medicke,\
    \ IBM Corporation\n               Doug Miller, Telebit\n               Dave Minnich,\
    \ FiberCom\n               Mohammad Mirhakkak, MITRE\n               Rohit Mital,\
    \ Protools\n               George Mouradian, AT&T Bell Labs\n          RFC 1451\
    \            Manager-to-Manager MIB          April 1993\n               Patrick\
    \ Mullaney, Cabletron Systems\n               Dan Myers, 3Com Corporation\n  \
    \             Rina Nathaniel, Rad Network Devices Ltd.\n               Hien V.\
    \ Nguyen, Sprint\n               Mo Nikain\n               Tom Nisbet\n      \
    \         William B. Norton, MERIT\n               Steve Onishi, Wellfleet Communications,\
    \ Inc.\n               David T. Perkins, SynOptics Communications, Inc.\n    \
    \           Carl Powell, BBN\n               Ilan Raab, SynOptics Communications,\
    \ Inc.\n               Richard Ramons, AT&T\n               Venkat D. Rangan,\
    \ Metric Network Systems, Inc.\n               Louise Reingold, Sprint\n     \
    \          Sam Roberts, Farallon Computing, Inc.\n               Kary Robertson,\
    \ Concord Communications, Inc.\n               Dan Romascanu, Lannet Data Communications\
    \ Ltd.\n               Marshall T. Rose, Dover Beach Consulting, Inc.\n      \
    \         Shawn A. Routhier, Epilogue Technology Corporation\n               Chris\
    \ Rozman\n               Asaf Rubissa, Fibronics\n               Jon Saperia,\
    \ Digital Equipment Corporation\n               Michael Sapich\n             \
    \  Mike Scanlon, Interlan\n               Sam Schaen, MITRE\n               John\
    \ Seligson, Ultra Network Technologies\n               Paul A. Serice, Corporation\
    \ for Open Systems\n               Chris Shaw, Banyan Systems\n              \
    \ Timon Sloane\n               Robert Snyder, Cisco Systems\n               Joo\
    \ Young Song\n               Roy Spitier, Sprint\n               Einar Stefferud,\
    \ Network Management Associates\n               John Stephens, Cayman Systems,\
    \ Inc.\n               Robert L. Stewart, Xyplex, Inc. (chair)\n             \
    \  Kaj Tesink, Bellcore\n               Dean Throop, Data General\n          \
    \     Ahmet Tuncay, France Telecom-CNET\n               Maurice Turcotte, Racal\
    \ Datacom\n               Warren Vik, INTERACTIVE Systems Corporation\n      \
    \         Yannis Viniotis\n               Steven L. Waldbusser, Carnegie Mellon\
    \ Universitty\n               Timothy M. Walden, ACC\n               Alice Wang,\
    \ Sun Microsystems\n               James Watt, Newbridge\n          RFC 1451 \
    \           Manager-to-Manager MIB          April 1993\n               Luanne\
    \ Waul, Timeplex\n               Donald E. Westlake III, Digital Equipment Corporation\n\
    \               Gerry White\n               Bert Wijnen, IBM Corporation\n   \
    \            Peter Wilson, 3Com Corporation\n               Steven Wong, Digital\
    \ Equipment Corporation\n               Randy Worzella, IBM Corporation\n    \
    \           Daniel Woycke, MITRE\n               Honda Wu\n               Jeff\
    \ Yarnell, Protools\n               Chris Young, Cabletron\n               Kiho\
    \ Yum, 3Com Corporation\n          RFC 1451            Manager-to-Manager MIB\
    \          April 1993\n          5.  References\n          [1]  Information processing\
    \ systems - Open Systems\n               Interconnection - Specification of Abstract\
    \ Syntax\n               Notation One (ASN.1), International Organization for\n\
    \               Standardization.  International Standard 8824, (December,\n  \
    \             1987).\n          [2]  Case, J., McCloghrie, K., Rose, M., and Waldbusser,\
    \ S.,\n               \"Structure of Management Information for version 2 of the\n\
    \               Simple Network Management Protocol (SNMPv2)\", RFC 1442,\n   \
    \            SNMP Research, Inc., Hughes LAN Systems, Dover Beach\n          \
    \     Consulting, Inc., Carnegie Mellon University, April 1993.\n          [3]\
    \  Case, J., McCloghrie, K., Rose, M., and Waldbusser, S.,\n               \"\
    Protocol Operations for version 2 of the Simple Network\n               Management\
    \ Protocol (SNMPv2)\", RFC 1448, SNMP Research,\n               Inc., Hughes LAN\
    \ Systems, Dover Beach Consulting, Inc.,\n               Carnegie Mellon University,\
    \ April 1993.\n          [4]  Galvin, J., and McCloghrie, K., \"Administrative\
    \ Model for\n               version 2 of the Simple Network Management Protocol\n\
    \               (SNMPv2)\", RFC 1445, Trusted Information Systems, Hughes\n  \
    \             LAN Systems, April 1993.\n          [5]  McCloghrie, K., and Galvin,\
    \ J., \"Party MIB for version 2\n               of the Simple Network Management\
    \ Protocol (SNMPv2)\", RFC\n               1447, Hughes LAN Systems, Trusted Information\
    \ Systems,\n               April 1993.\n          RFC 1451            Manager-to-Manager\
    \ MIB          April 1993\n          6.  Security Considerations\n          Security\
    \ issues are not discussed in this memo.\n          7.  Authors' Addresses\n \
    \              Jeffrey D. Case\n               SNMP Research, Inc.\n         \
    \      3001 Kimberlin Heights Rd.\n               Knoxville, TN  37920-9716\n\
    \               US\n               Phone: +1 615 573 1434\n               Email:\
    \ case@snmp.com\n               Keith McCloghrie\n               Hughes LAN Systems\n\
    \               1225 Charleston Road\n               Mountain View, CA  94043\n\
    \               US\n               Phone: +1 415 966 7934\n               Email:\
    \ kzm@hls.com\n               Marshall T. Rose\n               Dover Beach Consulting,\
    \ Inc.\n               420 Whisman Court\n               Mountain View, CA  94043-2186\n\
    \               US\n               Phone: +1 415 968 1052\n               Email:\
    \ mrose@dbc.mtview.ca.us\n               Steven Waldbusser\n               Carnegie\
    \ Mellon University\n               4910 Forbes Ave\n               Pittsburgh,\
    \ PA  15213\n               US\n               Phone: +1 412 268 6628\n      \
    \         Email: waldbusser@cmu.edu\n"
