- title: __initial_text__
  contents:
  - '                The Coherent File Distribution Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo describes the Coherent File Distribution Protocol\
    \ (CFDP).\n   This is an Experimental Protocol for the Internet community.\n \
    \  Discussion and suggestions for improvement are requested.  Please\n   refer\
    \ to the current edition of the \"IAB Official Protocol Standards\"\n   for the\
    \ standardization state and status of this protocol.\n   Distribution of this\
    \ memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   The Coherent File Distribution Protocol (CFDP) has been designed\
    \ to\n   speed up one-to-many file transfer operations that exhibit traffic\n\
    \   coherence on media with broadcast capability.  Examples of such\n   coherent\
    \ file transfers are identical diskless workstations booting\n   simultaneously,\
    \ software upgrades being distributed to more than one\n   machines at a site,\
    \ a certain \"object\" (bitmap, graph, plain text,\n   etc.) that is being discussed\
    \ in a real-time electronic conference or\n   class being sent to all participants,\
    \ and so on.\n   In all these cases, we have a limited number of servers, usually\
    \ only\n   one, and <n> clients (where <n> can be large) that are being sent the\n\
    \   same file.  If these files are sent via multiple one-to-one\n   transfers,\
    \ the load on both the server and the network is greatly\n   increased, as the\
    \ same data are sent <n> times.\n   We propose a file distribution protocol that\
    \ takes advantage of the\n   broadcast nature of the communications medium (e.g.,\
    \ fiber, ethernet,\n   packet radio) to drastically reduce the time needed for\
    \ file transfer\n   and the impact on the file server and the network.  While\
    \ this\n   protocol was developed to allow the simultaneous booting of diskless\n\
    \   workstations over our experimental packet-radio network, it can be\n   used\
    \ in any situation where coherent transfers take place.\n   CFDP was originally\
    \ designed as a back-end protocol; a front-end\n   interface (to convert file\
    \ names and requests for them to file\n   handles) is still needed, but a number\
    \ of existing protocols can be\n   adapted to use with CFDP.  Two such reference\
    \ applications have been\n   developed; one is for diskless booting of workstations,\
    \ a simplified\n   BOOTP [3] daemon (which we call sbootpd) and a simple, TFTP-like\n\
    \   front end (which we call vtftp).  In addition, our CFDP server has\n   been\
    \ extended to provide this front-end interface.  We do not\n   consider this front-end\
    \ part of the CFDP protocol, however, we\n   present it in this document to provide\
    \ a complete example.\n   The two clients and the CFDP server are available as\
    \ reference\n   implementations for anonymous ftp from the site CS.COLUMBIA.EDU\n\
    \   (128.59.16.20) in directory pub/cfdp/.  Also, a companion document\n   (\"\
    BOOTP extensions to support CFDP\") lists the \"vendor extensions\"\n   for BOOTP\
    \ (a-la RFC-1084 [4]) that apply here.\n"
- title: Overview
  contents:
  - "Overview\n   CFDP is implemented as a protocol on top of UDP [5], but it can\
    \ be\n   implemented on top of any protocol that supports broadcast datagrams.\n\
    \   Moreover, when IP multicast [6] implementations become more\n   widespread,\
    \ it would make more sense to use a multicast address to\n   distribute CFDP packets,\
    \ in order to reduce the overhead of non-\n   participating machines.\n   A CFDP\
    \ client that wants to receive a file first contacts a server to\n   acquire a\
    \ \"ticket\" for the file in question.  This server could be a\n   suitably modified\
    \ BOOTP server, the equivalent of the tftpd daemon,\n   etc. The server responds\
    \ with a 32-bit ticket that will be used in\n   the actual file transfers, the\
    \ block size sent with each packet\n   (which we shall call \"BLKSZ\" from now\
    \ on), and the size (in bytes) of\n   the file being transferred (\"FILSZ\").\
    \  BLKSZ should be a power of\n   two.  A good value for BLKSZ is 512. This way\
    \ the total packet size\n   (IPheader+UDPheader+CFDPheader+data=20+8+12+512=552),\
    \ is kept well\n   under the magic number 576, the minimum MTU for IP networks\
    \ [7].\n   Note that this choice of BLKSZ supports transfers of files that are\n\
    \   up to 32 Mbytes in size.  At this point, the client should allocate\n   enough\
    \ buffer space (in memory, or on disk) so that received packets\n   can be placed\
    \ directly where they belong, in a way similar to the\n   NetBLT protocol [8].\n\
    \   It is assumed that the CFDP server will also be informed about the\n   ticket\
    \ so that it can respond to requests.  This can be done, for\n   example, by having\
    \ the CFDP server and the ticket server keep the\n   table of ticket-to-filename\
    \ mappings in shared memory, or having the\n   CFDP server listening on a socket\
    \ for this information.  To reduce\n   overhead, it is recommended that the CFDP\
    \ server be the same process\n   as the front-end (ticket) server.\n   After the\
    \ client has received the ticket for the file, it starts\n   listening for (broadcast)\
    \ packets with the same ticket, that may\n   exist due to an in-progress transfer\
    \ of the same file.  If it cannot\n   detect any traffic, it sends to the CFDP\
    \ server a request to start\n   transmitting the whole file.  The server then\
    \ sends the entire file\n   in small, equal-sized packets consisting of the ticket,\
    \ the packet\n   sequence number, the actual length of data in this packet (equal\
    \ to\n   BLKSZ, except for the last packet in the transfer), a 32-bit\n   checksum,\
    \ and the BLKSZ bytes of data.  Upon receipt of each packet,\n   the client checksums\
    \ it, marks the corresponding block as received\n   and places its contents in\
    \ the appropriate place in the local file.\n   If the client does not receive\
    \ any packets within a timeout period,\n   it sends to the CFDP server a request\
    \ indicating which packets it has\n   not yet received, and then goes back to\
    \ the receiving mode.  This\n   process is repeated until the client has received\
    \ all blocks of the\n   file.\n   The CFDP server accepts requests for an entire\
    \ file (\"full\" file\n   requests, \"FULREQ\"s), or requests for a set of BLKSZ\
    \ blocks\n   (\"partial\" file requests, \"PARREQ\"s).  In the first case, the\
    \ server\n   subsequently broadcasts the entire file, whereas in the second it\n\
    \   only broadcasts the blocks requested.  If a FULREQ or a PARREQ\n   arrives\
    \ while a transfer (of the same file) is in progress, the\n   requests are ignored.\
    \  When the server has sent all the requested\n   packets, it returns to its idle\
    \ state.\n   The CFDP server listens for requests on UDP/IP port \"cfdpsrv\".\
    \ The\n   clients accept packets on UDP/IP port \"cfdpcln\" (both to be defined\n\
    \   by the site administrator), and this is the destination of the\n   server's\
    \ broadcasts.  Those two port numbers are sent to the client\n   with the initial\
    \ handshake packet, along with the ticket.  If the\n   minimal ticket server is\
    \ implemented as described later in this\n   document, it is recommended (for\
    \ interoperability reasons) that it\n   listens for requests on UDP/IP port 120\
    \ (\"cfdptkt\").\n   Let us now examine the protocol in more detail.\n"
- title: Protocol Specification
  contents:
  - "Protocol Specification\n Initial Handshake (not strictly part of the protocol):\n\
    \   The client must acquire a ticket for the file it wishes to transfer,\n   and\
    \ the CFDP server should be informed of the ticket/filename\n   mapping.  Again,\
    \ this can be done inside a BOOTP server, a modified\n   TFTP server, etc., or\
    \ it can be part of the CFDP server itself.  We\n   present here a suggested protocol\
    \ for this phase.\n   The client sends a \"Request Ticket\" (REQTKT) request to\
    \ the CFDP\n   Ticket server, using UDP port \"cfdptkt\".  If the address of the\n\
    \   server is unknown, the packet can be sent to the local broadcast\n   address.\
    \  Figure 1 shows the format of this packet.\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      'R'      |      'Q'      |      'T'      |      'K'      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      /   \
    \                                                            /\n      \\     Filename,\
    \ null-terminated, up to 512 octets               \\\n      /                \
    \                                               /\n      |                   \
    \                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Fig. 1: \"ReQuest TicKet\" packet.\n   The filename is\
    \ limited to 512 octets.  This should not cause a\n   problem in most, if not\
    \ all, cases.\n   The ticket server replies with a \"This is Your Ticket\" (TIYT)\
    \ packet\n   containing the ticket.  Figure 2 shows the format of this packet.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      'T'      |      'I'      |      'Y'      |      'T'      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           \"ticket\"                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       BLKSZ (by default 512)                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             FILSZ                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            IP address of CFDP server (network order)          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   client UDP port# (cfdpcln)  |   server UDP port# (cfdpsrv)  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Fig. 2: \"This Is Your Ticket\" packet.\n   The reply is\
    \ sent to the UDP port that the RQTK request came from.\n   The IP address of\
    \ the CFDP server is provided because the original\n   handshake server is not\
    \ necessarily on the same machine as the ticket\n   server, let alone the same\
    \ process.  Similarly, the cfdpcln and\n   cfdpsrv port numbers (in network order)\
    \ are communicated to the\n   client.  If the client does not use this ticket\
    \ server, but rather\n   uses BOOTP or something else, that other server should\
    \ be responsible\n   for providing the values of cfdpcln and cfdpsrv.  The ticket\
    \ server\n   also communicates this ticket/filename/filesize to the real CFDP\n\
    \   server.  It is recommended that the ticket requests be handled by the\n  \
    \ regular CFDP server, in which case informing the CFDP server of the\n   ticket/filename\
    \ binding is trivial (as it is internal to the\n   process).\n   Once the client\
    \ has received the ticket for the filename it has\n   requested, the file distribution\
    \ can proceed.\n Client Protocol:\n   Once the ticket has been established, the\
    \ client starts listening for\n   broadcast packets on the cfdpcln/udp port that\
    \ have the same \"ticket\"\n   as the one it is interested in.  In the state diagram\
    \ below, the\n   client is in the CLSTART state.  If the client can detect no\
    \ packets\n   with that ticket within a specified timeout period, \"TOUT-1\",\
    \ it\n   assumes that no transfer is in progress.  It then sends a FULREQ\n  \
    \ packet (see discussion above) to the CFDP server, asking it to start\n   transmitting\
    \ the file, and goes back to the CLSTART state (so that it\n   can time out again\
    \ if the FULREQ packet is lost).  Figure 3 shows the\n   format of the FULREQ\
    \ packet.\n       0                   1                   2                  \
    \ 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                           \"ticket\"                            |\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           checksum                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      'F'      |       0       |         length == 0           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \            Fig. 3: FULREQ (FULl file REQuest) packet.\n   When the first packet\
    \ arrives, the client moves to the RXING state\n   and starts processing packets.\
    \  Figure 4 shows the format of a data\n   packet.\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           \"ticket\"                            |\n \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \  |                           checksum                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          block number         |          data length          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      /   \
    \                                                            /\n      \\     \
    \ up to BLKSZ octets of data                               \\\n      /       \
    \                                                        /\n      |          \
    \                                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                             Fig. 4: Data Packet\n   The format is self-explanatory.\
    \  \"Block number\" the offset (in\n   multiples of BLKSZ) from the beginning\
    \ of the file, data length is\n   always BLKSZ except for the very last packet,\
    \ where it can be less\n   than that, and the rest is data.\n   As each packet\
    \ arrives, the client verifies the checksum and places\n   the data in the appropriate\
    \ position in the file.  While the file is\n   incomplete and packets keep arriving,\
    \ the client stays in the RXING\n   state, processing them.  If the client does\
    \ not receive any packets\n   within a specified period of time, \"TOUT-2\", it\
    \ times out and moves\n   to the INCMPLT state.  There, it determines which packets\
    \ have not\n   yet been received and transmits a PARREQ request to the server.\
    \  This\n   request consists of as many block numbers as will fit in the data\n\
    \   area of a data packet.  If one such request is not enough to request\n   all\
    \ missing packets, more will be requested when the server has\n   finished sending\
    \ this batch and the client times out.  Also, if the\n   client has sent a PARREQ\
    \ and has not received any data packets within\n   a timeout period, \"TOUT-3\"\
    , it retransmits the same PARREQ.  Figure 5\n   shows the format of the PARtial\
    \ REQuest packet.\n       0                   1                   2          \
    \         3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           \"ticket\"                            |\n \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \  |                           checksum                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      'P'      |       0       |      data length (2*N)        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Block #0            |           Block #1            |\n      |   \
    \        Block #2            |           Block #3            |\n      /      \
    \                                                         /\n      \\      data\
    \  (block numbers requested)                          \\\n      /            \
    \                                                   /\n      |           Block\
    \ #N-2          |           Block #N-1          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Fig. 5: PARREQ (PARtial file REQuest) packet.\n   When all packets\
    \ have been received the client enters the CLEND state\n   and stops listening.\n\
    \   Figure 6 summarizes the client's operations in a state diagram.\n        \
    \                   +-----------+\n                           |  CLSTART  |\n\
    \                           |           | <---.\n                           |\
    \   send    |     | timeout TOUT-1\n                           |  FULREQ   | ----'\n\
    \                           |           |\n                           +-----------+\n\
    \                                 |\n             received packet     | received\
    \ packet\n      .-----------------------.  |\n      |                       V\
    \  V\n     +---------+             +---------+\n     | INCMPLT |             |\
    \  RXING  |\n     |         |   timeout   |         | <---.\n     |  send   |<------------|\
    \ process |     | received packet\n     | PARREQ  |    TOUT-2   | packet  | ----'\n\
    \     |         |             |         |\n     +---------+             +---------+\n\
    \        ^   |                     |\n        |   |                     |finished\n\
    \        `---'                     |\n       timeout                    V\n  \
    \      TOUT-3               +---------+\n                             |  CLEND\
    \  |\n                             +---------+\n                Fig. 6: Client\
    \ State Transition Diagram\n Server Protocol:\n   As described above, the CFDP\
    \ server accepts two kinds of requests: a\n   request for a full file transfer,\
    \ \"FULREQ\", and a request for a\n   partial (some blocks only) file transfer,\
    \ \"PARREQ\".  For the first,\n   it is instructed to start sending out the contents\
    \ of a file.  For\n   the second, it will only send out the requested blocks.\
    \  The server\n   should know at all times which files correspond to which \"\
    tickets\",\n   and handle them appropriately.  Note that this may run into\n \
    \  implementation limits on some Unix systems (e.g., on older systems, a\n   process\
    \ could only have 20 files open at any one time), but that\n   should not normally\
    \ pose a problem.\n   The server is initially in the SIDLE state, idling (see\
    \ diagram\n   below).  When it receives a FULREQ packet, it goes to the FULSND\n\
    \   state, whence it broadcasts the entire contents of the file whose\n   ticket\
    \ was specified in the FULREQ packet.  When it is done, it goes\n   back to the\
    \ SIDLE state. When it receives a PARREQ packet, it goes to\n   the PARSND state\
    \ and broadcasts the blocks specified in the PARREQ\n   packet. When it has finished\
    \ processing the block request, it goes\n   once again back to the SIDLE state.\n\
    \                     receive    +-------+    receive\n                .---------------|\
    \ SIDLE |---------------.\n                |    FULREQ     +-------+     PARREQ\
    \    |\n                |                 ^   ^                 |\n          \
    \      |                 |   |                 |\n                V          \
    \       |   |                 V\n            +--------+            |   |     \
    \       +--------+\n            | FULSND |            |   |            | PARSND\
    \ |\n            |        |    done    |   |    done    |        |\n         \
    \   |  send  |------------'   `------------|  send  |\n            | entire |\
    \                             | req'ed |\n            |  file  |             \
    \                | blocks |\n            +--------+                          \
    \   +--------+\n                Fig. 7: Server State Transition Diagram\n"
- title: Packet Formats
  contents:
  - "Packet Formats\n   The structure of the packets has been already described. \
    \ In all\n   packet formats, numbers are assumed to be in network order (\"big-\n\
    \   endian\"), including the ticket and the checksum.\n   The checksum is the\
    \ two's complement of the unsigned 32-bit sum with\n   no end-around-carry (to\
    \ facilitate implementation) of the rest of the\n   packet.  Thus, to compute\
    \ the checksum, the sender sets that field to\n   zero and adds the contents of\
    \ the packet including the header.  The\n   it takes the two's complement of that\
    \ sum and uses it as the\n   checksum.  Similarly, the receiver just adds the\
    \ entire contents of\n   the packet, ignoring overflows, and the result should\
    \ be zero.\n"
- title: 'Tuneable Parameters: Packet Size, Delays and Timeouts'
  contents:
  - "Tuneable Parameters: Packet Size, Delays and Timeouts\n   It is recommended that\
    \ the packet size be less than the minimum MTU\n   on the connected network where\
    \ the file transfers are taking place.\n   We want this so that there be no fragmentation;\
    \ one UDP packet should\n   correspond to one hardware packet.  It is further\
    \ recommended that\n   the packet size be a power of two, so that offsets into\
    \ the file can\n   be computed from the block number by a simple logical shift\n\
    \   operation.  Also, it is usually the case that page-aligned transfers\n   are\
    \ faster on machines with a paged address space.  Small packet\n   sizes are inefficient,\
    \ since the header will be a larger fraction of\n   the packet, and packets larger\
    \ than the MTU will be fragmented.  A\n   good selection for BLKSZ is 512 or 1024.\
    \ Using that BLKSZ, one can\n   transfer files up to 32MB or 64MB respectively\
    \ (since the limit is\n   the 16-bit packet sequence number).  This is adequate\
    \ for all but\n   copying complete disks, and it allows twice as many packets\
    \ to be\n   requested in a PARREQ request than if the sequence number were 32\n\
    \   bits.  If larger files must be transferred, they could be treated as\n   multiple\
    \ logical files, each with a size of 32MB (or 64MB).\n   Since most UDP/IP implementations\
    \ do not buffer enough UDP datagrams,\n   the server should not transmit packets\
    \ faster than its clients can\n   consume them.  Since this is a one-to-many transfer,\
    \ it is not\n   desirable to use flow-control to ensure that the server does not\n\
    \   overrun the clients.  Rather, we insert a small delay between packets\n  \
    \ transmitted.  A good estimate of the proper delay between two\n   successive\
    \ packets is twice the amount of time it takes for the\n   interface to transmit\
    \ a packet.  On Unix implementations, the ping\n   program can be used to provide\
    \ an estimate of this, by specifying the\n   same packet length on the command\
    \ line as the expected CFDP packet\n   length (usually 524 bytes).\n   The timeouts\
    \ for the client are harder to compute. While there is a\n   provision for the\
    \ three timeouts (TOUT-1, TOUT-2 and TOUT-3) to be\n   different, there is no\
    \ compelling reason not to make them the same.\n   Experimentally, we have determined\
    \ that a timeout of 6-8 times the\n   transfer time for a packet works best. \
    \ A timeout of less than that\n   runs the risk of mistaking a transient network\
    \ problem for a timeout,\n   and more than that delays the transfer too much.\n"
- title: Summary
  contents:
  - "Summary\n   To summarize, here is the timeline of a sample file distribution\n\
    \   using CFDP to three clients.  Here we request a file with eight\n   blocks.\
    \  States are capitalized, requests are preceded with a '<'\n   sign, replies\
    \ are followed by a '>' sign, block numbers are preceded\n   with a '#' sign,\
    \ and actions are in parentheses:\n"
- title: SERVER       CLIENT1     CLIENT-2      CLIENT-3      comments
  contents:
  - 'SERVER       CLIENT1     CLIENT-2      CLIENT-3      comments

    '
- title: IDLE                                                everybody idle
  contents:
  - "IDLE                                                everybody idle\n        \
    \     CLSTART                                CL1 wants a file\n             <TKRQ\
    \                                  requests ticket\n"
- title: TIYT>                                               server replies
  contents:
  - "TIYT>                                               server replies\n        \
    \     (timeout)                              listens for traffic\n           \
    \  <FULREQ                                full request\n"
- title: '#0           RXING                                  CL1 starts receiving'
  contents:
  - "#0           RXING                                  CL1 starts receiving\n  \
    \           (rx 0)\n"
- title: '#1           (rx 1)      CLSTART                    CL2 decides to join'
  contents:
  - "#1           (rx 1)      CLSTART                    CL2 decides to join\n   \
    \                      <TKRQ\n"
- title: '#2           (rx 2)                                 SRV still sending'
  contents:
  - '#2           (rx 2)                                 SRV still sending

    '
- title: TIYT>                                               responds to TKRQ
  contents:
  - 'TIYT>                                               responds to TKRQ

    '
- title: '#3           (rx 3)      (listens)                  CL2 listens'
  contents:
  - "#3           (rx 3)      (listens)                  CL2 listens\n           \
    \              RXING                      found traffic\n"
- title: '#4           (rx 4)      (rx 4)        CLSTART      CL3 joins in'
  contents:
  - "#4           (rx 4)      (rx 4)        CLSTART      CL3 joins in\n          \
    \                             <TKRQ\n"
- title: '#5           (missed)    (rx 5)                     CL1 missed a packet'
  contents:
  - '#5           (missed)    (rx 5)                     CL1 missed a packet

    '
- title: TIYT>                                  (listens)
  contents:
  - 'TIYT>                                  (listens)

    '
- title: '#6           (rx 6)      (rx 6)        RXING        CL3 found traffic'
  contents:
  - '#6           (rx 6)      (rx 6)        RXING        CL3 found traffic

    '
- title: '#7           (rx 7)      (rx 7)        (rx 7)       Server finished'
  contents:
  - '#7           (rx 7)      (rx 7)        (rx 7)       Server finished

    '
- title: IDLE
  contents:
  - "IDLE\n             (wait)      (wait)        (wait)       CL1 managed to\n  \
    \           (timeout)   (wait)        (wait)       timeout\n             <PARREQ[5]\
    \  (timeout)     (timeout)    CL1 blockrequests...\n"
- title: '#5           (rx 5)      <PARREQ[0123] <PARREQ[0123456] ignored by SRV'
  contents:
  - "#5           (rx 5)      <PARREQ[0123] <PARREQ[0123456] ignored by SRV\n    \
    \         CLEND                                  CL1 has all packets\n"
- title: 'IDLE                     (wait)        (wait)       CL2+3 missed #5'
  contents:
  - "IDLE                     (wait)        (wait)       CL2+3 missed #5\n       \
    \                  (timeout)     (timeout)\n                         <PARREQ[0123]\
    \ <PARREQ[0123456] CL2's req gets\n"
- title: '#0                       (rx 0)        (rx 0)       through, CL3 ignored'
  contents:
  - '#0                       (rx 0)        (rx 0)       through, CL3 ignored

    '
- title: '#1                       (rx 1)        (rx 1)       moving along'
  contents:
  - '#1                       (rx 1)        (rx 1)       moving along

    '
- title: '#2                       (rx 2)        (rx 2)'
  contents:
  - '#2                       (rx 2)        (rx 2)

    '
- title: '#3                       (rx 3)        (rx 3)'
  contents:
  - '#3                       (rx 3)        (rx 3)

    '
- title: IDLE                     CLEND         (wait)       CL2 finished
  contents:
  - "IDLE                     CLEND         (wait)       CL2 finished\n          \
    \                             (timeout)\n                                    \
    \   <PARREQ[456]\n"
- title: '#4                                     (rx 4)'
  contents:
  - '#4                                     (rx 4)

    '
- title: '#5                                     (rx 5)'
  contents:
  - '#5                                     (rx 5)

    '
- title: '#5                                     (rx 6)'
  contents:
  - '#5                                     (rx 6)

    '
- title: IDLE                                   CLEND        CL3 finished
  contents:
  - 'IDLE                                   CLEND        CL3 finished

    '
- title: References
  contents:
  - "References\n   [1] Sollins, K., \"The TFTP Protocol (Revision 2)\", RFC 783,\
    \ MIT, June\n       1981.\n   [2] Finlayson, R., \"Bootstrap Loading Using TFTP\"\
    , RFC 906, Stanford,\n       June 1984.\n   [3] Croft, W., and J. Gilmore, \"\
    Bootstrap Protocol\", RFC 951,\n       Stanford and SUN Microsystems, September\
    \ 1985.\n   [4] Reynolds, J., \"BOOTP Vendor Information Extensions\", RFC 1084,\n\
    \       USC/Information Sciences Institute, December 1988.\n   [5] Postel, J.,\
    \ \"User Datagram Protocol\", RFC 768, USC/Information\n       Sciences Institute,\
    \ August 1980.\n   [6] Deering, S., \"Host Extensions for IP Multicasting\", RFC\
    \ 1112,\n       Stanford University, August 1989.\n   [7] Postel, J., \"Internet\
    \ Protocol - DARPA Internet Program Protocol\n       Specification\", RFC 791,\
    \ DARPA, September 1981.\n   [8] Clark, D., Lambert, M., and L. Zhang, \"NETBLT:\
    \ A Bulk Data\n       Transfer Protocol\", RFC 998, MIT, March 1987.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John Ioannidis\n   Columbia University\n   Department\
    \ of Computer Science\n   450 Computer Science\n   New York, NY 10027\n   EMail:\
    \  ji@cs.columbia.edu\n   Gerald Q. Maguire, Jr.\n   Columbia University\n   Department\
    \ of Computer Science\n   450 Computer Science\n   New York, NY 10027\n   Phone:\
    \  (212) 854-2736\n   EMail:  maguire@cs.columbia.edu\n"
