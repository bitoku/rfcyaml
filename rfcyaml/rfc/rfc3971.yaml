- contents:
  - '                    SEcure Neighbor Discovery (SEND)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   IPv6 nodes use the Neighbor Discovery Protocol (NDP) to discover\n
    \  other nodes on the link, to determine their link-layer addresses to\n   find
    routers, and to maintain reachability information about the\n   paths to active
    neighbors.  If not secured, NDP is vulnerable to\n   various attacks.  This document
    specifies security mechanisms for\n   NDP.  Unlike those in the original NDP specifications,
    these\n   mechanisms do not use IPsec.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n       1.1.  Specification of Requirements . . . . . . . . . .
    . . .   4\n   2.  Terms . . . . . . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   3.  Neighbor and Router Discovery Overview. . . . . . . . . . . .   6\n
    \  4.  Secure Neighbor Discovery Overview. . . . . . . . . . . . . .   8\n   5.
    \ Neighbor Discovery Protocol Options . . . . . . . . . . . . .   9\n       5.1.
    \ CGA Option. . . . . . . . . . . . . . . . . . . . . . .  10\n             5.1.1.
    \ Processing Rules for Senders. . . . . . . . . .  11\n             5.1.2.  Processing
    Rules for Receivers. . . . . . . . .  12\n             5.1.3.  Configuration .
    . . . . . . . . . . . . . . . .  13\n       5.2.  RSA Signature Option. . . .
    . . . . . . . . . . . . . .  14\n             5.2.1.  Processing Rules for Senders.
    . . . . . . . . .  16\n             5.2.2.  Processing Rules for Receivers. .
    . . . . . . .  16\n             5.2.3.  Configuration . . . . . . . . . . . .
    . . . . .  17\n             5.2.4.  Performance Considerations. . . . . . . .
    . . .  18\n       5.3.  Timestamp and Nonce Options . . . . . . . . . . . . .
    .  19\n             5.3.1.  Timestamp Option. . . . . . . . . . . . . . . .  19\n
    \            5.3.2.  Nonce Option. . . . . . . . . . . . . . . . . .  20\n             5.3.3.
    \ Processing Rules for Senders. . . . . . . . . .  21\n             5.3.4.  Processing
    Rules for Receivers. . . . . . . . .  21\n   6.  Authorization Delegation Discovery.
    . . . . . . . . . . . . .  24\n       6.1.  Authorization Model . . . . . . .
    . . . . . . . . . . .  24\n       6.2.  Deployment Model. . . . . . . . . . .
    . . . . . . . . .  25\n       6.3.  Certificate Format. . . . . . . . . . . .
    . . . . . . .  26\n             6.3.1.  Router Authorization Certificate Profile.
    . . .  26\n             6.3.2.  Suitability of Standard Identity Certificates
    .  29\n       6.4.  Certificate Transport . . . . . . . . . . . . . . . . .  29\n
    \            6.4.1.  Certification Path Solicitation Message Format.  30\n             6.4.2.
    \ Certification Path Advertisement Message Format  32\n             6.4.3.  Trust
    Anchor Option . . . . . . . . . . . . . .  34\n             6.4.4.  Certificate
    Option. . . . . . . . . . . . . . .  36\n             6.4.5.  Processing Rules
    for Routers. . . . . . . . . .  37\n             6.4.6.  Processing Rules for
    Hosts. . . . . . . . . . .  38\n       6.5.  Configuration . . . . . . . . . .
    . . . . . . . . . . .  39\n   7.  Addressing. . . . . . . . . . . . . . . . .
    . . . . . . . . .  40\n       7.1.  CGAs. . . . . . . . . . . . . . . . . . .
    . . . . . . .  40\n       7.2.  Redirect Addresses. . . . . . . . . . . . . .
    . . . . .  40\n       7.3.  Advertised Subnet Prefixes. . . . . . . . . . . .
    . . .  40\n       7.4.  Limitations . . . . . . . . . . . . . . . . . . . . .
    .  41\n   8.  Transition Issues . . . . . . . . . . . . . . . . . . . . . .  42\n
    \  9.  Security Considerations . . . . . . . . . . . . . . . . . . .  44\n       9.1.
    \ Threats to the Local Link Not Covered by SEND . . . . .  44\n       9.2.  How
    SEND Counters Threats to NDP. . . . . . . . . . . .  45\n             9.2.1.  Neighbor
    Solicitation/Advertisement Spoofing. .  45\n             9.2.2.  Neighbor Unreachability
    Detection Failure . . .  46\n             9.2.3.  Duplicate Address Detection
    DoS Attack. . . . .  46\n             9.2.4.  Router Solicitation and Advertisement
    Attacks .  46\n             9.2.5.  Replay Attacks. . . . . . . . . . . . . .
    . . .  47\n             9.2.6.  Neighbor Discovery DoS Attack . . . . . . . .
    .  48\n       9.3.  Attacks against SEND Itself . . . . . . . . . . . . . .  48\n
    \  10. Protocol Values . . . . . . . . . . . . . . . . . . . . . . .  49\n       10.1.
    Constants . . . . . . . . . . . . . . . . . . . . . . .  49\n       10.2. Variables
    . . . . . . . . . . . . . . . . . . . . . . .  49\n   11. IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  49\n   12. References. . . . . . .
    . . . . . . . . . . . . . . . . . . .  50\n       12.1. Normative References.
    . . . . . . . . . . . . . . . . .  50\n       12.2. Informative References. .
    . . . . . . . . . . . . . . .  51\n   Appendices. . . . . . . . . . . . . . .
    . . . . . . . . . . . . .  53\n       A.    Contributors and Acknowledgments.
    . . . . . . . . . . .  53\n       B.    Cache Management. . . . . . . . . . .
    . . . . . . . . .  53\n       C.    Message Size When Carrying Certificates .
    . . . . . . .  54\n   Authors' Addresses. . . . . . . . . . . . . . . . . . .
    . . . . .  55\n   Full Copyright Statements . . . . . . . . . . . . . . . . .
    . . .  56\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   IPv6 defines the Neighbor Discovery Protocol (NDP) in RFCs
    2461 [4]\n   and 2462 [5].  Nodes on the same link use NDP to discover each\n
    \  other's presence and link-layer addresses, to find routers, and to\n   maintain
    reachability information about the paths to active\n   neighbors.  NDP is used
    by both hosts and routers.  Its functions\n   include Neighbor Discovery (ND),
    Router Discovery (RD), Address\n   Autoconfiguration, Address Resolution, Neighbor
    Unreachability\n   Detection (NUD), Duplicate Address Detection (DAD), and Redirection.\n
    \  The original NDP specifications called for the use of IPsec to\n   protect
    NDP messages.  However, the RFCs do not give detailed\n   instructions for using
    IPsec to do this.  In this particular\n   application, IPsec can only be used
    with a manual configuration of\n   security associations, due to bootstrapping
    problems in using IKE\n   [19, 15].  Furthermore, the number of manually configured
    security\n   associations needed for protecting NDP can be very large [20], making\n
    \  that approach impractical for most purposes.\n   The SEND protocol is designed
    to counter the threats to NDP.  These\n   threats are described in detail in [22].
    \ SEND is applicable in\n   environments where physical security on the link is
    not assured (such\n   as over wireless) and attacks on NDP are a concern.\n   This
    document is organized as follows.  Sections 2 and 3 define some\n   terminology
    and present a brief review of NDP, respectively.  Section\n   4 describes the
    overall approach to securing NDP.  This approach\n   involves the use of new NDP
    options to carry public key - based\n   signatures.  A zero-configuration mechanism
    is used for showing\n   address ownership on individual nodes; routers are certified
    by a\n   trust anchor [7].  The formats, procedures, and cryptographic\n   mechanisms
    for the zero-configuration mechanism are described in a\n   related specification
    [11].\n   The required new NDP options are discussed in Section 5.  Section 6\n
    \  describes the mechanism for distributing certification paths to\n   establish
    an authorization delegation chain to a trust anchor.\n   Finally, Section 8 discusses
    the co-existence of secured and\n   unsecured NDP on the same link, and Section
    9 discusses security\n   considerations for SEcure Neighbor Discovery (SEND).\n
    \  The use of identity certificates provisioned on end hosts for\n   authorizing
    address use is out of the scope for this document, as is\n   the security of NDP
    when the entity defending an address is not the\n   same as the entity claiming
    that address (also known as \"proxy ND\").\n   These are extensions of SEND that
    may be treated in separate\n   documents, should the need arise.\n"
  - contents:
    - "1.1.  Specification of Requirements\n   In this document, several words are
      used to signify the requirements\n   of the specification.  These words are
      often capitalized.  The key\n   words \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", and\n   \"MAY\" are to be interpreted as described in
      [2].\n"
    title: 1.1.  Specification of Requirements
  title: 1.  Introduction
- contents:
  - "2.  Terms\n   Authorization Delegation Discovery (ADD)\n      A process through
    which SEND nodes can acquire a certification\n      path from a peer node to a
    trust anchor.\n   Certificate Revocation List (CRL)\n      In one method of certificate
    revocation, an authority periodically\n      issues a signed data structure called
    the Certificate Revocation\n      List.  This is a time-stamped list identifying
    revoked\n      certificates, signed by the issuer, and made freely available in
    a\n      public repository.\n   Certification Path Advertisement (CPA)\n      The
    advertisement message used in the ADD process.\n   Certification Path Solicitation
    (CPS)\n      The solicitation message used in the ADD process.\n   Cryptographically
    Generated Address (CGA)\n      A technique [11] whereby an IPv6 address of a node
    is\n      cryptographically generated by using a one-way hash function from\n
    \     the node's public key and some other parameters.\n   Distinguished Encoding
    Rules (DER)\n      An encoding scheme for data values, defined in [12].\n   Duplicate
    Address Detection (DAD)\n      A mechanism assuring that two IPv6 nodes on the
    same link are not\n      using the same address.\n   Fully Qualified Domain Name
    (FQDN)\n      A fully qualified domain name consists of a host and domain name,\n
    \     including the top-level domain.\n   Internationalized Domain Name (IDN)\n
    \     Internationalized Domain Names can be used to represent domain\n      names
    that contain characters outside the ASCII set.  See RFC 3490\n      [9].\n   Neighbor
    Discovery (ND)\n      The Neighbor Discovery function of the Neighbor Discovery
    Protocol\n      (NDP).  NDP contains functions besides ND.\n   Neighbor Discovery
    Protocol (NDP)\n      The IPv6 Neighbor Discovery Protocol [7, 8].\n      The
    Neighbor Discovery Protocol is a part of ICMPv6 [6].\n   Neighbor Unreachability
    Detection (NUD)\n      A mechanism used for tracking the reachability of neighbors.\n
    \  Non-SEND node\n      An IPv6 node that does not implement this specification
    but uses\n      only the Neighbor Discovery protocol defined in RFCs 2461 and\n
    \     2462, as updated, without security.\n   Nonce\n      An unpredictable random
    or pseudo-random number generated by a\n      node and used exactly once.  In
    SEND, nonces are used to assure\n      that a particular advertisement is linked
    to the solicitation that\n      triggered it.\n   Router Authorization Certificate\n
    \     An X.509v3 [7] public key certificate using the profile specified\n      in
    Section 6.3.1.\n   SEND node\n      An IPv6 node that implements this specification.\n
    \  Router Discovery (RD)\n      Router Discovery allows the hosts to discover
    what routers exist\n      on the link, and what subnet prefixes are available.
    \ Router\n      Discovery is a part of the Neighbor Discovery Protocol.\n   Trust
    Anchor\n      Hosts are configured with a set of trust anchors to protect Router\n
    \     Discovery.  A trust anchor is an entity that the host trusts to\n      authorize
    routers to act as routers.  A trust anchor configuration\n      consists of a
    public key and some associated parameters (see\n      Section 6.5 for a detailed
    explanation of these parameters).\n"
  title: 2.  Terms
- contents:
  - "3.  Neighbor and Router Discovery Overview\n   The Neighbor Discovery Protocol
    has several functions.  Many of these\n   are overloaded on a few central message
    types, such as the ICMPv6\n   Neighbor Advertisement message.  In this section,
    we review some of\n   these tasks and their effects in order to better understand
    how the\n   messages should be treated.  This section is not normative, and if\n
    \  this section and the original Neighbor Discovery RFCs are in\n   conflict,
    the original RFCs, as updated, take precedence.\n   The main functions of NDP
    are as follows:\n   o  The Router Discovery function allows IPv6 hosts to discover
    the\n      local routers on an attached link.  Router Discovery is described\n
    \     in Section 6 of RFC 2461 [4].  The main purpose of Router\n      Discovery
    is to find neighboring routers willing to forward\n      packets on behalf of
    hosts.  Subnet prefix discovery involves\n      determining which destinations
    are directly on a link; this\n      information is necessary in order to know
    whether a packet should\n      be sent to a router or directly to the destination
    node.\n   o  The Redirect function is used for automatically redirecting a host\n
    \     to a better first-hop router, or to inform hosts that a\n      destination
    is in fact a neighbor (i.e., on-link).  Redirect is\n      specified in Section
    8 of RFC 2461 [4].\n   o  Address Autoconfiguration is used for automatically
    assigning\n      addresses to a host [5].  This allows hosts to operate without\n
    \     explicit configuration related to IP connectivity.  The default\n      autoconfiguration
    mechanism is stateless.  To create IP addresses,\n      hosts use any prefix information
    delivered to them during Router\n      Discovery and then test the newly formed
    addresses for uniqueness.\n      A stateful mechanism, DHCPv6 [18], provides additional\n
    \     autoconfiguration features.\n   o  Duplicate Address Detection (DAD) is
    used for preventing address\n      collisions [5]: for instance, during Address
    Autoconfiguration.  A\n      node that intends to assign a new address to one
    of its interfaces\n      first runs the DAD procedure to verify that no other
    node is using\n      the same address.  As the rules forbid the use of an address
    until\n      it has been found unique, no higher layer traffic is possible\n      until
    this procedure has been completed.  Thus, preventing attacks\n      against DAD
    can help ensure the availability of communications for\n      the node in question.\n
    \  o  The Address Resolution function allows a node on the link to\n      resolve
    another node's IPv6 address to the corresponding link-\n      layer address.  Address
    Resolution is defined in Section 7.2 of\n      RFC 2461 [4], and it is used for
    hosts and routers alike.  Again,\n      no higher level traffic can proceed until
    the sender knows the\n      link layer address of the destination node or the
    next hop router.\n      Note that the source link layer address on link layer
    frames is\n      not checked against the information learned through Address\n
    \     Resolution.  This allows for an easier addition of network\n      elements
    such as bridges and proxies and eases the stack\n      implementation requirements,
    as less information has to be passed\n      from layer to layer.\n   o  Neighbor
    Unreachability Detection (NUD) is used for tracking the\n      reachability of
    neighboring nodes, both hosts and routers.  NUD is\n      defined in Section 7.3
    of RFC 2461 [4].  NUD is security\n      sensitive, because an attacker could
    claim that reachability\n      exists when in fact it does not.\n   The NDP messages
    follow the ICMPv6 message format.  All NDP functions\n   are realized by using
    the Router Solicitation (RS), Router\n   Advertisement (RA), Neighbor Solicitation
    (NS), Neighbor\n   Advertisement (NA), and Redirect messages.  An actual NDP message\n
    \  includes an NDP message header, consisting of an ICMPv6 header and ND\n   message-specific
    data, and zero or more NDP options.  The NDP message\n   options are formatted
    in the Type-Length-Value format.\n                       <------------NDP Message---------------->\n
    \  *-------------------------------------------------------------*\n   | IPv6
    Header      | ICMPv6   | ND Message- | ND Message      |\n   | Next Header = 58
    | Header   | specific    | Options         |\n   | (ICMPv6)         |          |
    data        |                 |\n   *-------------------------------------------------------------*\n
    \                      <--NDP Message header-->\n"
  title: 3.  Neighbor and Router Discovery Overview
- contents:
  - "4.  Secure Neighbor Discovery Overview\n   To secure the various functions in
    NDP, a set of new Neighbor\n   Discovery options is introduced.  They are used
    to protect NDP\n   messages.  This specification introduces these options, an\n
    \  authorization delegation discovery process, an address ownership\n   proof
    mechanism, and requirements for the use of these components in\n   NDP.\n   The
    components of the solution specified in this document are as\n   follows:\n   o
    \ Certification paths, anchored on trusted parties, are expected to\n      certify
    the authority of routers.  A host must be configured with\n      a trust anchor
    to which the router has a certification path before\n      the host can adopt
    the router as its default router.\n      Certification Path Solicitation and Advertisement
    messages are\n      used to discover a certification path to the trust anchor
    without\n      requiring the actual Router Discovery messages to carry lengthy\n
    \     certification paths.  The receipt of a protected Router\n      Advertisement
    message for which no certification path is available\n      triggers the authorization
    delegation discovery process.\n   o  Cryptographically Generated Addresses are
    used to make sure that\n      the sender of a Neighbor Discovery message is the
    \"owner\" of the\n      claimed address.  A public-private key pair is generated
    by all\n      nodes before they can claim an address.  A new NDP option, the CGA\n
    \     option, is used to carry the public key and associated parameters.\n      This
    specification also allows a node to use non-CGAs with\n      certificates that
    authorize their use.  However, the details of\n      such use are beyond the scope
    of this specification and are left\n      for future work.\n   o  A new NDP option,
    the RSA Signature option, is used to protect all\n      messages relating to Neighbor
    and Router discovery.\n      Public key signatures protect the integrity of the
    messages and\n      authenticate the identity of their sender.  The authority
    of a\n      public key is established either with the authorization delegation\n
    \     process, by using certificates, or through the address ownership\n      proof
    mechanism, by using CGAs, or with both, depending on\n      configuration and
    the type of the message protected.\n      Note: RSA is mandated because having
    multiple signature algorithms\n      would break compatibility between implementations
    or increase\n      implementation complexity by forcing the implementation of\n
    \     multiple algorithms and the mechanism to select among them.  A\n      second
    signature algorithm is only necessary as a recovery\n      mechanism, in case
    a flaw is found in RSA.  If this happens, a\n      stronger signature algorithm
    can be selected, and SEND can be\n      revised.  The relationship between the
    new algorithm and the RSA-\n      based SEND described in this document would
    be similar to that\n      between the RSA-based SEND and Neighbor Discovery without
    SEND.\n      Information signed with the stronger algorithm has precedence over\n
    \     that signed with RSA, in the same way that RSA-signed information\n      now
    takes precedence over unsigned information.  Implementations\n      of the current
    and revised specs would still be compatible.\n   o  In order to prevent replay
    attacks, two new Neighbor Discovery\n      options, Timestamp and Nonce, are introduced.
    \ Given that Neighbor\n      and Router Discovery messages are in some cases sent
    to multicast\n      addresses, the Timestamp option offers replay protection without\n
    \     any previously established state or sequence numbers.  When the\n      messages
    are used in solicitation-advertisement pairs, they are\n      protected with the
    Nonce option.\n"
  title: 4.  Secure Neighbor Discovery Overview
- contents:
  - "5.  Neighbor Discovery Protocol Options\n   The options described in this section
    MUST be supported.\n"
  - contents:
    - "5.1.  CGA Option\n   The CGA option allows the verification of the sender's
      CGA.  The\n   format of the CGA option is described as follows:\n     0                   1
      \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |     Type      |    Length     |   Pad Length  |   Reserved    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    .
      \                                                              .\n    .                        CGA
      Parameters                         .\n    .                                                               .\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    .
      \                                                              .\n    .                           Padding
      \                            .\n    .                                                               .\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      11\n   Length\n      The length of the option (including the
      Type, Length, Pad Length,\n      Reserved, CGA Parameters, and Padding fields)
      in units of 8\n      octets.\n   Pad Length\n      The number of padding octets
      beyond the end of the CGA Parameters\n      field but within the length specified
      by the Length field.\n      Padding octets MUST be set to zero by senders and
      ignored by\n      receivers.\n   Reserved\n      An 8-bit field reserved for
      future use.  The value MUST be\n      initialized to zero by the sender and
      MUST be ignored by the\n      receiver.\n   CGA Parameters\n      A variable-length
      field containing the CGA Parameters data\n      structure described in Section
      4 of [11].\n      This specification requires that if both the CGA option and
      the\n      RSA Signature option are present, then the public key found from\n
      \     the CGA Parameters field in the CGA option MUST be that referred\n      by
      the Key Hash field in the RSA Signature option.  Packets\n      received with
      two different keys MUST be silently discarded.  Note\n      that a future extension
      may provide a mechanism allowing the owner\n      of an address and the signer
      to be different parties.\n   Padding\n      A variable-length field making the
      option length a multiple of 8,\n      containing as many octets as specified
      in the Pad Length field.\n"
    - contents:
      - "5.1.1.  Processing Rules for Senders\n   If the node has been configured
        to use SEND, the CGA option MUST be\n   present in all Neighbor Solicitation
        and Advertisement messages and\n   MUST be present in Router Solicitation
        messages unless they are sent\n   with the unspecified source address.  The
        CGA option MAY be present\n   in other messages.\n   A node sending a message
        using the CGA option MUST construct the\n   message as follows:\n      The
        CGA Parameter field in the CGA option is filled according to\n      the rules
        presented above and in [11].  The public key in the\n      field is taken
        from the configuration used to generate the CGA,\n      typically from a data
        structure associated with the source\n      address.  The address MUST be
        constructed as specified in Section\n      4 of [11].  Depending on the type
        of the message, this address\n      appears in different places, as follows:\n
        \  Redirect\n      The address MUST be the source address of the message.\n
        \  Neighbor Solicitation\n      The address MUST be the Target Address for
        solicitations sent for\n      Duplicate Address Detection; otherwise it MUST
        be the source\n      address of the message.\n   Neighbor Advertisement\n
        \     The address MUST be the source address of the message.\n   Router Solicitation\n
        \     The address MUST be the source address of the message.  Note that\n
        \     the CGA option is not used when the source address is the\n      unspecified
        address.\n   Router Advertisement\n      The address MUST be the source address
        of the message.\n"
      title: 5.1.1.  Processing Rules for Senders
    - contents:
      - "5.1.2.  Processing Rules for Receivers\n   Neighbor Solicitation and Advertisement
        messages without the CGA\n   option MUST be treated as unsecured (i.e., processed
        in the same way\n   as NDP messages sent by a non-SEND node).  The processing
        of\n   unsecured messages is specified in Section 8.  Note that SEND nodes\n
        \  that do not attempt to interoperate with non-SEND nodes MAY simply\n   discard
        the unsecured messages.\n   Router Solicitation messages without the CGA option
        MUST also be\n   treated as unsecured, unless the source address of the message
        is the\n   unspecified address.\n   Redirect, Neighbor Solicitation, Neighbor
        Advertisement, Router\n   Solicitation, and Router Advertisement messages
        containing a CGA\n   option MUST be checked as follows:\n      If the interface
        has been configured to use CGA, the receiving\n      node MUST verify the
        source address of the packet by using the\n      algorithm described in Section
        5 of [11].  The inputs to the\n      algorithm are the claimed address, as
        defined in the previous\n      section, and the CGA Parameters field.\n      If
        the CGA verification is successful, the recipient proceeds with\n      a more
        time-consuming cryptographic check of the signature.  Note\n      that even
        if the CGA verification succeeds, no claims about the\n      validity of the
        use can be made until the signature has been\n      checked.\n   A receiver
        that does not support CGA or has not specified its use for\n   a given interface
        can still verify packets by using trust anchors,\n   even if a CGA is used
        on a packet.  In such a case, the CGA property\n   of the address is simply
        left unverified.\n"
      title: 5.1.2.  Processing Rules for Receivers
    - contents:
      - "5.1.3.  Configuration\n   All nodes that support the verification of the
        CGA option MUST record\n   the following configuration information:\n   minbits\n
        \     The minimum acceptable key length for public keys used in the\n      generation
        of CGAs.  The default SHOULD be 1024 bits.\n      Implementations MAY also
        set an upper limit for the amount of\n      computation needed when verifying
        packets that use these security\n      associations.  The upper limit SHOULD
        be at least 2048 bits.  Any\n      implementation should follow prudent cryptographic
        practice in\n      determining the appropriate key lengths.\n   All nodes
        that support the sending of the CGA option MUST record the\n   following configuration
        information:\n   CGA parameters\n      Any information required to construct
        CGAs, as described in [11].\n"
      title: 5.1.3.  Configuration
    title: 5.1.  CGA Option
  - contents:
    - "5.2.  RSA Signature Option\n   The RSA Signature option allows public key-based
      signatures to be\n   attached to NDP messages.  The format of the RSA Signature
      option is\n   described in the following diagram:\n     0                   1
      \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |     Type      |    Length     |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    |
      \                         Key Hash                             |\n    |                                                               |\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    .
      \                                                              .\n    .                       Digital
      Signature                       .\n    .                                                               .\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    .
      \                                                              .\n    .                           Padding
      \                            .\n    .                                                               .\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type\n      12\n   Length\n      The length of the option (including the
      Type, Length, Reserved,\n      Key Hash, Digital Signature, and Padding fields)
      in units of 8\n      octets.\n   Reserved\n      A 16-bit field reserved for
      future use.  The value MUST be\n      initialized to zero by the sender, and
      MUST be ignored by the\n      receiver.\n   Key Hash\n      A 128-bit field
      containing the most significant (leftmost) 128\n      bits of a SHA-1 [14] hash
      of the public key used for constructing\n      the signature.  The SHA-1 hash
      is taken over the presentation used\n      in the Public Key field of the CGA
      Parameters data structure\n      carried in the CGA option.  Its purpose is
      to associate the\n      signature to a particular key known by the receiver.
      \ Such a key\n      can either be stored in the certificate cache of the receiver
      or\n      be received in the CGA option in the same message.\n   Digital Signature\n
      \     A variable-length field containing a PKCS#1 v1.5 signature,\n      constructed
      by using the sender's private key over the following\n      sequence of octets:\n
      \     1. The 128-bit CGA Message Type tag [11] value for SEND, 0x086F\n         CA5E
      10B2 00C9 9C8C E001 6427 7C08.  (The tag value has been\n         generated
      randomly by the editor of this specification.).\n      2. The 128-bit Source
      Address field from the IP header.\n      3. The 128-bit Destination Address
      field from the IP header.\n      4. The 8-bit Type, 8-bit Code, and 16-bit Checksum
      fields from the\n         ICMP header.\n      5. The NDP message header, starting
      from the octet after the ICMP\n         Checksum field and continuing up to
      but not including NDP\n         options.\n      6. All NDP options preceding
      the RSA Signature option.\n      The signature value is computed with the RSASSA-PKCS1-v1_5\n
      \     algorithm and SHA-1 hash, as defined in [13].\n      This field starts
      after the Key Hash field.  The length of the\n      Digital Signature field
      is determined by the length of the RSA\n      Signature option minus the length
      of the other fields (including\n      the variable length Pad field).\n   Padding\n
      \     This variable-length field contains padding, as many bytes long as\n      remain
      after the end of the signature.\n"
    - contents:
      - "5.2.1.  Processing Rules for Senders\n   If the node has been configured
        to use SEND, Neighbor Solicitation,\n   Neighbor Advertisement, Router Advertisement,
        and Redirect messages\n   MUST contain the RSA Signature option.  Router Solicitation
        messages\n   not sent with the unspecified source address MUST contain the
        RSA\n   Signature option.\n   A node sending a message with the RSA Signature
        option MUST construct\n   the message as follows:\n   o  The message is constructed
        in its entirety, without the RSA\n      Signature option.\n   o  The RSA Signature
        option is added as the last option in the\n      message.\n   o  The data
        to be signed is constructed as explained in Section 5.2,\n      under the
        description of the Digital Signature field.\n   o  The message, in the form
        defined above, is signed by using the\n      configured private key, and the
        resulting PKCS#1 v1.5 signature is\n      put in the Digital Signature field.\n"
      title: 5.2.1.  Processing Rules for Senders
    - contents:
      - "5.2.2.  Processing Rules for Receivers\n   Neighbor Solicitation, Neighbor
        Advertisement, Router Advertisement,\n   and Redirect messages without the
        RSA Signature option MUST be\n   treated as unsecured (i.e., processed in
        the same way as NDP messages\n   sent by a non-SEND node).  See Section 8.\n
        \  Router Solicitation messages without the RSA Signature option MUST\n   also
        be treated as unsecured, unless the source address of the\n   message is the
        unspecified address.\n   Redirect, Neighbor Solicitation, Neighbor Advertisement,
        Router\n   Solicitation, and Router Advertisement messages containing an RSA\n
        \  Signature option MUST be checked as follows:\n   o  The receiver MUST ignore
        any options that come after the first RSA\n      Signature option.  (The options
        are ignored for both signature\n      verification and NDP processing purposes.)\n
        \  o  The Key Hash field MUST indicate the use of a known public key,\n      either
        one learned from a preceding CGA option in the same\n      message, or one
        known by other means.\n   o  The Digital Signature field MUST have correct
        encoding and MUST\n      not exceed the length of the RSA Signature option
        minus the\n      Padding.\n   o  The Digital Signature verification MUST show
        that the signature\n      has been calculated as specified in the previous
        section.\n   o  If the use of a trust anchor has been configured, a valid\n
        \     certification path (see Section 6.3) between the receiver's trust\n
        \     anchor and the sender's public key MUST be known.\n      Note that the
        receiver may verify just the CGA property of a\n      packet, even if, in
        addition to CGA, the sender has used a trust\n      anchor.\n   Messages that
        do not pass all the above tests MUST be silently\n   discarded if the host
        has been configured to accept only secured ND\n   messages.  The messages
        MAY be accepted if the host has been\n   configured to accept both secured
        and unsecured messages but MUST be\n   treated as an unsecured message.  The
        receiver MAY also otherwise\n   silently discard packets (e.g., as a response
        to an apparent CPU\n   exhausting DoS attack).\n"
      title: 5.2.2.  Processing Rules for Receivers
    - contents:
      - "5.2.3.  Configuration\n   All nodes that support the reception of the RSA
        Signature options\n   MUST allow the following information to be configured
        for each\n   separate NDP message type:\n   authorization method\n      This
        parameter determines the method through which the authority\n      of the
        sender is determined.  It can have four values:\n         trust anchor\n            The
        authority of the sender is verified as described in\n            Section 6.3.
        \ The sender may claim additional authorization\n            through the use
        of CGAs, but this is neither required nor\n            verified.\n         CGA\n
        \           The CGA property of the sender's address is verified as\n            described
        in [11].  The sender may claim additional\n            authority through a
        trust anchor, but this is neither\n            required nor verified.\n         trust
        anchor and CGA\n            Both the trust anchor and the CGA verification
        is required.\n         trust anchor or CGA\n            Either the trust anchor
        or the CGA verification is required.\n   anchor\n      The allowed trust anchor(s),
        if the authorization method is not\n      set to CGA.\n   All nodes that support
        sending RSA Signature options MUST record the\n   following configuration
        information:\n      keypair\n         A public-private key pair.  If authorization
        delegation is in\n         use, a certification path from a trust anchor to
        this key pair\n         must exist.\n      CGA flag\n         A flag that
        indicates whether CGA is used or not.  This flag\n         may be per interface
        or per node.  (Note that in future\n         extensions of the SEND protocol,
        this flag may also be per\n         subnet prefix.)\n"
      title: 5.2.3.  Configuration
    - contents:
      - "5.2.4.  Performance Considerations\n   The construction and verification
        of the RSA Signature option is\n   computationally expensive.  In the NDP
        context, however, hosts\n   typically only have to perform a few signature
        operations as they\n   enter a link, a few operations as they find a new on-link
        peer with\n   which to communicate, or Neighbor Unreachability Detection with\n
        \  existing neighbors.\n   Routers are required to perform a larger number
        of operations,\n   particularly when the frequency of router advertisements
        is high due\n   to mobility requirements.  Still, the number of required signature\n
        \  operations is on the order of a few dozen per second, some of which\n   can
        be precomputed as explained below.  A large number of router\n   solicitations
        may cause a higher demand for performing asymmetric\n   operations, although
        the base NDP protocol limits the rate at which\n   multicast responses to
        solicitations can be sent.\n   Signatures can be precomputed for unsolicited
        (multicast) Neighbor\n   and Router Advertisements if the timing of the future
        advertisements\n   is known.  Typically, solicited neighbor advertisements
        are sent to\n   the unicast address from which the solicitation was sent.
        \ Given that\n   the IPv6 header is covered by the signature, it is not possible
        to\n   precompute solicited advertisements.\n"
      title: 5.2.4.  Performance Considerations
    title: 5.2.  RSA Signature Option
  - contents:
    - '5.3.  Timestamp and Nonce Options

      '
    - contents:
      - "5.3.1.  Timestamp Option\n   The purpose of the Timestamp option is to make
        sure that unsolicited\n   advertisements and redirects have not been replayed.
        \ The format of\n   this option is described in the following:\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |    Length     |          Reserved             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \                              |\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
        \                                                              |\n   +                          Timestamp
        \                           +\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n
        \     13\n   Length\n      The length of the option (including the Type, Length,
        Reserved,\n      and Timestamp fields) in units of 8 octets; i.e., 2.\n   Reserved\n
        \     A 48-bit field reserved for future use.  The value MUST be\n      initialized
        to zero by the sender and MUST be ignored by the\n      receiver.\n   Timestamp\n
        \     A 64-bit unsigned integer field containing a timestamp.  The value\n
        \     indicates the number of seconds since January 1, 1970, 00:00 UTC,\n
        \     by using a fixed point format.  In this format, the integer number\n
        \     of seconds is contained in the first 48 bits of the field, and the\n
        \     remaining 16 bits indicate the number of 1/64K fractions of a\n      second.\n
        \     Implementation note: This format is compatible with the usual\n      representation
        of time under UNIX, although the number of bits\n      available for the integer
        and fraction parts may vary.\n"
      title: 5.3.1.  Timestamp Option
    - contents:
      - "5.3.2.  Nonce Option\n   The purpose of the Nonce option is to make sure
        that an advertisement\n   is a fresh response to a solicitation sent earlier
        by the node.  The\n   format of this option is described in the following:\n
        \    0                   1                   2                   3\n     0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |     Type      |    Length     |  Nonce ...                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \                              |\n    |                                                               |\n
        \   .                                                               .\n    .
        \                                                              .\n    |                                                               |\n
        \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n
        \     14\n   Length\n      The length of the option (including the Type, Length,
        and Nonce\n      fields) in units of 8 octets.\n   Nonce\n      A field containing
        a random number selected by the sender of the\n      solicitation message.
        \ The length of the random number MUST be at\n      least 6 bytes.  The length
        of the random number MUST be selected\n      so that the length of the nonce
        option is a multiple of 8 octets.\n"
      title: 5.3.2.  Nonce Option
    - contents:
      - "5.3.3.  Processing Rules for Senders\n   If the node has been configured
        to use SEND, all solicitation\n   messages MUST include a Nonce.  When sending
        a solicitation, the\n   sender MUST store the nonce internally so that it
        can recognize any\n   replies containing that particular nonce.\n   If the
        node has been configured to use SEND, all advertisements sent\n   in reply
        to a solicitation MUST include a Nonce, copied from the\n   received solicitation.
        \ Note that routers may decide to send a\n   multicast advertisement to all
        nodes instead of a response to a\n   specific host.  In such a case, the router
        MAY still include the\n   nonce value for the host that triggered the multicast
        advertisement.\n   (Omitting the nonce value may cause the host to ignore
        the router's\n   advertisement, unless the clocks in these nodes are sufficiently\n
        \  synchronized so that timestamps function properly.)\n   If the node has
        been configured to use SEND, all solicitation,\n   advertisement, and redirect
        messages MUST include a Timestamp.\n   Senders SHOULD set the Timestamp field
        to the current time, according\n   to their real time clocks.\n"
      title: 5.3.3.  Processing Rules for Senders
    - contents:
      - "5.3.4.  Processing Rules for Receivers\n   The processing of the Nonce and
        Timestamp options depends on whether\n   a packet is a solicited advertisement.
        \ A system may implement the\n   distinction in various ways.  Section 5.3.4.1
        defines the processing\n   rules for solicited advertisements.  Section 5.3.4.2
        defines the\n   processing rules for all other messages.\n   In addition,
        the following rules apply in all cases:\n   o  Messages received without at
        least one of the Timestamp and Nonce\n      options MUST be treated as unsecured
        (i.e., processed in the same\n      way as NDP messages sent by a non-SEND
        node).\n   o  Messages received with the RSA Signature option but without
        the\n      Timestamp option MUST be silently discarded.\n   o  Solicitation
        messages received with the RSA Signature option but\n      without the Nonce
        option MUST be silently discarded.\n   o  Advertisements sent to a unicast
        destination address with the RSA\n      Signature option but without a Nonce
        option SHOULD be processed as\n      unsolicited advertisements.\n   o  An
        implementation MAY use some mechanism such as a timestamp cache\n      to
        strengthen resistance to replay attacks.  When there is a very\n      large
        number of nodes on the same link, or when a cache filling\n      attack is
        in progress, it is possible that the cache holding the\n      most recent
        timestamp per sender will become full.  In this case,\n      the node MUST
        remove some entries from the cache or refuse some\n      new requested entries.
        \ The specific policy as to which entries\n      are preferred over others
        is left as an implementation decision.\n      However, typical policies may
        prefer existing entries to new ones,\n      CGAs with a large Sec value to
        smaller Sec values, and so on.  The\n      issue is briefly discussed in Appendix
        B.\n   o  The receiver MUST be prepared to receive the Timestamp and Nonce\n
        \     options in any order, as per RFC 2461 [4], Section 9.\n"
      - contents:
        - "5.3.4.1.  Processing Solicited Advertisements\n   The receiver MUST verify
          that it has recently sent a matching\n   solicitation, and that the received
          advertisement contains a copy of\n   the Nonce sent in the solicitation.\n
          \  If the message contains a Nonce option but the Nonce value is not\n   recognized,
          the message MUST be silently discarded.\n   Otherwise, if the message does
          not contain a Nonce option, it MAY be\n   considered an unsolicited advertisement
          and processed according to\n   Section 5.3.4.2.\n   If the message is accepted,
          the receiver SHOULD store the receive\n   time of the message and the timestamp
          time in the message, as\n   specified in Section 5.3.4.2.\n"
        title: 5.3.4.1.  Processing Solicited Advertisements
      - contents:
        - "5.3.4.2.  Processing All Other Messages\n   Receivers SHOULD be configured
          with an allowed timestamp Delta value,\n   a \"fuzz factor\" for comparisons,
          and an allowed clock drift\n   parameter.  The recommended default value
          for the allowed Delta is\n   TIMESTAMP_DELTA; for fuzz factor TIMESTAMP_FUZZ;
          and for clock drift,\n   TIMESTAMP_DRIFT (see Section 10.2).\n   To facilitate
          timestamp checking, each node SHOULD store the\n   following information
          for each peer:\n   o  The receive time of the last received and accepted
          SEND message.\n      This is called RDlast.\n   o  The time stamp in the
          last received and accepted SEND message.\n      This is called TSlast.\n
          \  An accepted SEND message is any successfully verified Neighbor\n   Solicitation,
          Neighbor Advertisement, Router Solicitation, Router\n   Advertisement, or
          Redirect message from the given peer.  The RSA\n   Signature option MUST
          be used in such a message before it can update\n   the above variables.\n
          \  Receivers SHOULD then check the Timestamp field as follows:\n   o  When
          a message is received from a new peer (i.e., one that is not\n      stored
          in the cache), the received timestamp, TSnew, is checked,\n      and the
          packet is accepted if the timestamp is recent enough to\n      the reception
          time of the packet, RDnew:\n         -Delta < (RDnew - TSnew) < +Delta\n
          \     The RDnew and TSnew values SHOULD be stored in the cache as RDlast\n
          \     and TSlast.\n   o  If the timestamp is NOT within the boundaries but
          the message is a\n      Neighbor Solicitation message that the receiver
          should answer, the\n      receiver SHOULD respond to the message.  However,
          even if it does\n      respond to the message, it MUST NOT create a Neighbor
          Cache entry.\n      This allows nodes that have large differences in their
          clocks to\n      continue communicating with each other by exchanging NS/NA
          pairs.\n   o  When a message is received from a known peer (i.e., one that\n
          \     already has an entry in the cache), the timestamp is checked\n      against
          the previously received SEND message:\n         TSnew + fuzz > TSlast +
          (RDnew - RDlast) x (1 - drift) - fuzz\n      If this inequality does not
          hold, the receiver SHOULD silently\n      discard the message.  If, on the
          other hand, the inequality holds,\n      the receiver SHOULD process the
          message.\n      Moreover, if the above inequality holds and TSnew > TSlast,
          the\n      receiver SHOULD update RDlast and TSlast.  Otherwise, the receiver\n
          \     MUST NOT update RDlast or TSlast.\n   As unsolicited messages may
          be used in a Denial-of-Service attack to\n   make the receiver verify computationally
          expensive signatures, all\n   nodes SHOULD apply a mechanism to prevent
          excessive use of resources\n   for processing such messages.\n"
        title: 5.3.4.2.  Processing All Other Messages
      title: 5.3.4.  Processing Rules for Receivers
    title: 5.3.  Timestamp and Nonce Options
  title: 5.  Neighbor Discovery Protocol Options
- contents:
  - "6.  Authorization Delegation Discovery\n   NDP allows a node to configure itself
    automatically based on\n   information learned shortly after connecting to a new
    link.  It is\n   particularly easy to configure \"rogue\" routers on an unsecured
    link,\n   and it is particularly difficult for a node to distinguish between\n
    \  valid and invalid sources of router information, because the node\n   needs
    this information before communicating with nodes outside of the\n   link.\n   As
    the newly-connected node cannot communicate off-link, it cannot be\n   responsible
    for searching information to help validate the router(s).\n   However, given a
    certification path, the node can check someone\n   else's search results and conclude
    that a particular message comes\n   from an authorized source.  In the typical
    case, a router already\n   connected beyond the link can communicate if necessary
    with off-link\n   nodes and construct a certification path.\n   The Secure Neighbor
    Discovery Protocol mandates a certificate format\n   and introduces two new ICMPv6
    messages used between hosts and routers\n   to allow the host to learn a certification
    path with the assistance\n   of the router.\n"
  - contents:
    - "6.1.  Authorization Model\n   To protect Router Discovery, SEND requires that
      routers be authorized\n   to act as routers.  This authorization is provisioned
      in both routers\n   and hosts.  Routers are given certificates from a trust
      anchor, and\n   the hosts are configured with the trust anchor(s) to authorize\n
      \  routers.  This provisioning is specific to SEND and does not assume\n   that
      certificates already deployed for some other purpose can be\n   used.\n   The
      authorization for routers in SEND is twofold:\n   o  Routers are authorized
      to act as routers.  The router belongs to\n      the set of routers trusted
      by the trust anchor.  All routers in\n      this set have the same authorization.\n
      \  o  Optionally, routers may also be authorized to advertise a certain\n      set
      of subnet prefixes.  A specific router is given a specific set\n      of subnet
      prefixes to advertise; other routers have an\n      authorization to advertise
      other subnet prefixes.  Trust anchors\n      may also delegate a certain set
      of subnet prefixes to someone\n      (such as an ISP) who, in turn, delegates
      parts of this set to\n      individual routers.\n   Note that while communicating
      with hosts, routers typically also\n   present a number of other parameters
      beyond the above.  For instance,\n   routers have their own IP addresses, subnet
      prefixes have lifetimes,\n   and routers control the use of stateless and stateful
      address\n   autoconfiguration.  However, the ability to be a router and the\n
      \  subnet prefixes are the most fundamental parameters to authorize.\n   This
      is because the host needs to choose a router that it uses as its\n   default
      router, and because the advertised subnet prefixes have an\n   impact on the
      addresses the host uses.  The subnet prefixes also\n   represent a claim about
      the topological location of the router in the\n   network.\n   Care should be
      taken if the certificates used in SEND are also used\n   to provide authorization
      in other circumstances; for example, with\n   routing protocols.  It is necessary
      to ensure that the authorization\n   information is appropriate for all applications.
      \ SEND certificates\n   may authorize a larger set of subnet prefixes than the
      router is\n   authorized to advertise on a given interface.  For instance, SEND\n
      \  allows the use of the null prefix, which might cause verification or\n   routing
      problems in other applications.  It is RECOMMENDED that SEND\n   certificates
      containing the null prefix are only used for SEND.\n   Note that end hosts need
      not be provisioned with their own certified\n   public keys, just as Web clients
      today do not require end host\n   provisioning with certified keys.  Public
      keys for CGA generation do\n   not need to be certified, as these keys derive
      their ability to\n   authorize operations on the CGA by the tie to the address.\n"
    title: 6.1.  Authorization Model
  - contents:
    - "6.2.  Deployment Model\n   The deployment model for trust anchors can be either
      a globally\n   rooted public key infrastructure or a more local, decentralized\n
      \  deployment model similar to that currently used for TLS in Web\n   servers.
      \ The centralized model assumes a global root capable of\n   authorizing routers
      and, optionally, the address space they\n   advertise.  The end hosts are configured
      with the public keys of the\n   global root.  The global root could operate,
      for instance, under the\n   Internet Assigned Numbers Authority (IANA) or as
      a co-operative among\n   Regional Internet Registries (RIRs).  However, no such
      global root\n   currently exists.\n   In the decentralized model, end hosts
      are configured with a\n   collection of trusted public keys.  The public keys
      could be issued\n   from various places; for example, a) a public key for the
      end host's\n   own organization, b) a public key for the end host's home ISP
      and for\n   ISPs with which the home ISP has a roaming agreement, or c) public\n
      \  keys for roaming brokers acting as intermediaries for ISPs that don't\n   want
      to run their own certification authority.\n   This decentralized model works
      even when a SEND node is used both in\n   networks that have certified routers
      and in networks that do not.  As\n   discussed in Section 8, a SEND node can
      fall back to the use of a\n   non-SEND router.  This makes it possible to start
      with a local trust\n   anchor even if there is no trust anchor for all possible
      networks.\n"
    title: 6.2.  Deployment Model
  - contents:
    - "6.3.  Certificate Format\n   The certification path of a router terminates
      in a Router\n   Authorization Certificate that authorizes a specific IPv6 node
      to act\n   as a router.  Because authorization paths are not a common practice\n
      \  in the Internet at the time of this writing, the path MUST consist of\n   standard
      Public Key Certificates (PKC, in the sense of [8]).  The\n   certification path
      MUST start from the identity of a trust anchor\n   shared by the host and the
      router.  This allows the host to anchor\n   trust for the router's public key
      in the trust anchor.  Note that\n   there MAY be multiple certificates issued
      by a single trust anchor.\n"
    - contents:
      - "6.3.1.  Router Authorization Certificate Profile\n   Router Authorization
        Certificates are X.509v3 certificates, as\n   defined in RFC 3280 [7], and
        SHOULD contain at least one instance of\n   the X.509 extension for IP addresses,
        as defined in [10].  The parent\n   certificates in the certification path
        SHOULD contain one or more\n   X.509 IP address extensions, back up to a trusted
        party (such as the\n   user's ISP) that configured the original IP address
        block for the\n   router in question, or that delegated the right to do so.
        \ The\n   certificates for the intermediate delegating authorities SHOULD\n
        \  contain X.509 IP address extension(s) for subdelegations.  The\n   router's
        certificate is signed by the delegating authority for the\n   subnet prefixes
        the router is authorized to advertise.\n   The X.509 IP address extension
        MUST contain at least one\n   addressesOrRanges element.  This element MUST
        contain an\n   addressPrefix element containing an IPv6 address prefix for
        a prefix\n   that the router or the intermediate entity is authorized to route.\n
        \  If the entity is allowed to route any prefix, the IPv6 address prefix\n
        \  used is the null prefix, ::/0.  The addressFamily element of the\n   IPAddrBlocks
        sequence element MUST contain the IPv6 Address Family\n   Identifier (0002),
        as specified in [10], for IPv6 subnet prefixes.\n   Instead of an addressPrefix
        element, the addressesOrRange element MAY\n   contain an addressRange element
        for a range of subnet prefixes, if\n   more than one prefix is authorized.
        \ The X.509 IP address extension\n   MAY contain additional IPv6 subnet prefixes,
        expressed as either an\n   addressPrefix or an addressRange.\n   A node receiving
        a Router Authorization Certificate MUST first check\n   whether the certificate's
        signature was generated by the delegating\n   authority.  Then the client
        SHOULD check whether all the\n   addressPrefix or addressRange entries in
        the router's certificate are\n   contained within the address ranges in the
        delegating authority's\n   certificate, and whether the addressPrefix entries
        match any\n   addressPrefix entries in the delegating authority's certificate.
        \ If\n   an addressPrefix or addressRange is not contained within the\n   delegating
        authority's subnet prefixes or ranges, the client MAY\n   attempt to take
        an intersection of the ranges/subnet prefixes and to\n   use that intersection.
        \ If the resulting intersection is empty, the\n   client MUST NOT accept the
        certificate.  If the addressPrefix in the\n   certificate is missing or is
        the null prefix, ::/0, the parent prefix\n   or range SHOULD be used.  If
        there is no parent prefix or range, the\n   subnet prefixes that the router
        advertises are said to be\n   unconstrained (see Section 7.3).  That is, the
        router is allowed to\n   advertise any prefix.\n   The above checks SHOULD
        be done for all certificates in the path.  If\n   any of the checks fail,
        the client MUST NOT accept the certificate.\n   The client also has to perform
        validation of advertised subnet\n   prefixes as discussed in Section 7.3.\n
        \  Hosts MUST check the subjectPublicKeyInfo field within the last\n   certificate
        in the certificate path to ensure that only RSA public\n   keys are used to
        attempt validation of router signatures.  Hosts MUST\n   disregard the certificate
        for SEND if it does not contain an RSA key.\n   As it is possible that some
        public key certificates used with SEND do\n   not immediately contain the
        X.509 IP address extension element, an\n   implementation MAY contain facilities
        that allow the prefix and range\n   checks to be relaxed.  However, any such
        configuration options SHOULD\n   be switched off by default.  The system SHOULD
        have a default\n   configuration that requires rigorous prefix and range checks.\n
        \  The following is an example of a certification path.  Suppose that\n   isp_group_example.net
        is the trust anchor.  The host has this\n   certificate:\n      Certificate
        1:\n        Issuer: isp_group_example.net\n        Validity: Jan 1, 2004 through
        Dec 31, 2004\n        Subject: isp_group_example.net\n        Extensions:\n
        \         IP address delegation extension:\n             Prefixes: P1, ...,
        Pk\n          ... possibly other extensions ...\n        ... other certificate
        parameters ...\n   When the host attaches to a link served by\n   router_x.isp_foo_example.net,
        it receives the following certification\n   path:\n      Certificate 2:\n
        \       Issuer: isp_group_example.net\n        Validity: Jan 1, 2004 through
        Dec 31, 2004\n        Subject: isp_foo_example.net\n        Extensions:\n
        \         IP address delegation extension:\n            Prefixes: Q1, ...,
        Qk\n          ... possibly other extensions ...\n        ... other certificate
        parameters ...\n      Certificate 3:\n        Issuer: isp_foo_example.net\n
        \       Validity: Jan 1, 2004 through Dec 31, 2004\n        Subject: router_x.isp_foo_example.net\n
        \       Extensions:\n          IP address delegation extension:\n            Prefixes
        R1, ..., Rk\n          ... possibly other extensions ...\n        ... other
        certificate parameters ...\n   When the three certificates are processed,
        the usual RFC 3280 [7]\n   certificate path validation is performed.  Note,
        however, that when a\n   node checks certificates received from a router,
        it typically does\n   not have a connection to the Internet yet, and so it
        is not possible\n   to perform an on-line Certificate Revocation List (CRL)
        check, if\n   necessary.  Until this check is performed, acceptance of the\n
        \  certificate MUST be considered provisional, and the node MUST perform\n
        \  a check as soon as it has established a connection with the Internet\n
        \  through the router.  If the router has been compromised, it could\n   interfere
        with the CRL check.  Should performance of the CRL check be\n   disrupted
        or should the check fail, the node SHOULD immediately stop\n   using the router
        as a default and use another router on the link\n   instead.\n   In addition,
        the IP addresses in the delegation extension MUST be a\n   subset of the IP
        addresses in the delegation extension of the\n   issuer's certificate.  So
        in this example, R1, ..., Rs must be a\n   subset of Q1,...,Qr, and Q1,...,Qr
        must be a subset of P1,...,Pk.  If\n   the certification path is valid, then
        router_foo.isp_foo_example.com\n   is authorized to route the prefixes R1,...,Rs.\n"
      title: 6.3.1.  Router Authorization Certificate Profile
    - contents:
      - "6.3.2.  Suitability of Standard Identity Certificates\n   As deployment of
        the IP address extension is, itself, not common, a\n   network service provider
        MAY choose to deploy standard identity\n   certificates on the router to supply
        the router's public key for\n   signed Router Advertisements.\n   If there
        is no prefix information further up in the certification\n   path, a host
        interprets a standard identity certificate as allowing\n   unconstrained prefix
        advertisements.\n   If the other certificates contain prefix information,
        a standard\n   identity certificate is interpreted as allowing those subnet\n
        \  prefixes.\n"
      title: 6.3.2.  Suitability of Standard Identity Certificates
    title: 6.3.  Certificate Format
  - contents:
    - "6.4.  Certificate Transport\n   The Certification Path Solicitation (CPS) message
      is sent by a host\n   when it wishes to request a certification path between
      a router and\n   one of the host's trust anchors.  The Certification Path\n
      \  Advertisement (CPA) message is sent in reply to the CPS message.\n   These
      messages are kept separate from the rest of Neighbor and Router\n   Discovery
      to reduce the effect of the potentially voluminous\n   certification path information
      on other messages.\n   The Authorization Delegation Discovery (ADD) process
      does not exclude\n   other forms of discovering certification paths.  For instance,
      during\n   fast movements, mobile nodes may learn information (including the\n
      \  certification paths) about the next router from a previous router, or\n   nodes
      may be preconfigured with certification paths from roaming\n   partners.\n   Where
      hosts themselves are certified by a trust anchor, these\n   messages MAY also
      optionally be used between hosts to acquire the\n   peer's certification path.
      \ However, the details of such usage are\n   beyond the scope of this specification.\n"
    - contents:
      - "6.4.1.  Certification Path Solicitation Message Format\n   Hosts send Certification
        Path Solicitations in order to prompt\n   routers to generate Certification
        Path Advertisements.\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |     Code      |          Checksum             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |          Identifier           |          Component            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n   IP Fields:\n      Source
        Address\n         A link-local unicast address assigned to the sending interface,\n
        \        or to the unspecified address if no address is assigned to the\n
        \        sending interface.\n      Destination Address\n         Typically
        the All-Routers multicast address, the Solicited-Node\n         multicast
        address, or the address of the host's default router.\n      Hop Limit\n         255\n
        \  ICMP Fields:\n      Type\n         148\n      Code\n         0\n      Checksum\n
        \        The ICMP checksum [6].\n      Identifier\n         A 16-bit unsigned
        integer field, acting as an identifier to\n         help match advertisements
        to solicitations.  The Identifier\n         field MUST NOT be zero, and its
        value SHOULD be randomly\n         generated.  This randomness does not have
        to be\n         cryptographically hard, as its purpose is only to avoid\n
        \        collisions.\n      Component\n         This 16-bit unsigned integer
        field is set to 65,535 if the\n         sender seeks to retrieve all certificates.
        \ Otherwise, it is\n         set to the component identifier corresponding
        to the\n         certificate that the receiver wants to retrieve (see Sections\n
        \        6.4.2 and 6.4.6).\n   Valid Options:\n      Trust Anchor\n         One
        or more trust anchors that the client is willing to accept.\n         The
        first (or only) Trust Anchor option MUST contain a DER\n         Encoded X.501
        Name; see Section 6.4.3.  If there is more than\n         one Trust Anchor
        option, the options beyond the first may\n         contain any type of trust
        anchor.\n      Future versions of this protocol may define new option types.\n
        \     Receivers MUST silently ignore any options they do not recognize\n      and
        continue processing the message.  All included options MUST\n      have a
        length greater than zero.\n      ICMP length (derived from the IP length)
        MUST be 8 or more octets.\n"
      title: 6.4.1.  Certification Path Solicitation Message Format
    - contents:
      - "6.4.2.  Certification Path Advertisement Message Format\n   Routers send
        out Certification Path Advertisement messages in\n   response to a Certification
        Path Solicitation.\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |     Code      |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |          Identifier           |        All Components         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |          Component            |          Reserved             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n   IP Fields:\n      Source
        Address\n         A link-local unicast address assigned to the interface from\n
        \        which this message is sent.  Note that routers may use multiple\n
        \        addresses, and therefore this address is not sufficient for the\n
        \        unique identification of routers.\n      Destination Address\n         Either
        the Solicited-Node multicast address of the receiver or\n         the link-scoped
        All-Nodes multicast address.\n      Hop Limit\n         255\n   ICMP Fields:\n
        \     Type\n         149\n      Code\n         0\n      Checksum\n         The
        ICMP checksum [6].\n      Identifier\n         A 16-bit unsigned integer field,
        acting as an identifier to\n         help match advertisements to solicitations.
        \ The Identifier\n         field MUST be zero for advertisements sent to the
        All-Nodes\n         multicast address and MUST NOT be zero for others.\n      All
        Components\n         A 16-bit unsigned integer field, used to inform the receiver
        of\n         the number of certificates in the entire path.\n         A single
        advertisement SHOULD be broken into separately sent\n         components if
        there is more than one certificate in the path,\n         in order to avoid
        excessive fragmentation at the IP layer.\n         Individual certificates
        in a path MAY be stored and used as\n         received before all the certificates
        have arrived; this makes\n         the protocol slightly more reliable and
        less prone to Denial-\n         of-Service attacks.\n         Examples of
        packet lengths of Certification Path Advertisement\n         messages for
        typical certification paths are listed in Appendix\n         C.\n      Component\n
        \        A 16-bit unsigned integer field, used to inform the receiver\n         which
        certificate is being sent.\n         The first message in an N-component advertisement
        has the\n         Component field set to N-1, the second set to N-2, and so
        on.\n         A zero indicates that there are no more components coming in\n
        \        this advertisement.\n         The sending of path components SHOULD
        be ordered so that the\n         certificate after the trust anchor is sent
        first.  Each\n         certificate sent after the first can be verified with
        the\n         previously sent certificates.  The certificate of the sender\n
        \        comes last.  The trust anchor certificate SHOULD NOT be sent.\n      Reserved\n
        \        An unused field.  It MUST be initialized to zero by the sender\n
        \        and MUST be ignored by the receiver.\n   Valid Options:\n      Certificate\n
        \        One certificate is provided in each Certificate option to\n         establish
        part of a certification path to a trust anchor.\n         The certificate
        of the trust anchor itself SHOULD NOT be sent.\n      Trust Anchor\n         Zero
        or more Trust Anchor options may be included to help\n         receivers decide
        which advertisements are useful for them.  If\n         present, these options
        MUST appear in the first component of a\n         multi-component advertisement.\n
        \     Future versions of this protocol may define new option types.\n      Receivers
        MUST silently ignore any options they do not recognize\n      and continue
        processing the message.  All included options MUST\n      have a length that
        is greater than zero.\n      The ICMP length (derived from the IP length)
        MUST be 8 or more\n      octets.\n"
      title: 6.4.2.  Certification Path Advertisement Message Format
    - contents:
      - "6.4.3.  Trust Anchor Option\n   The format of the Trust Anchor option is
        described in the following:\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |    Length     |  Name Type    |  Pad  Length  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Name ...                                                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |          ... Padding                                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Type\n      15\n   Length\n      The length of the option (including the
        Type, Length, Name Type,\n      Pad Length, and Name fields), in units of
        8 octets.\n   Name Type\n      The type of the name included in the Name field.
        \ This\n      specification defines two legal values for this field:\n            1
        \       DER Encoded X.501 Name\n            2        FQDN\n   Pad Length\n
        \     The number of padding octets beyond the end of the Name field but\n
        \     within the length specified by the Length field.  Padding octets\n      MUST
        be set to zero by senders and ignored by receivers.\n   Name\n      When the
        Name Type field is set to 1, the Name field contains a\n      DER encoded
        X.501 Name identifying the trust anchor.  The value is\n      encoded as defined
        in [12] and [7].\n      When the Name Type field is set to 2, the Name field
        contains a\n      Fully Qualified Domain Name of the trust anchor; for example,\n
        \     \"trustanchor.example.com\".  The name is stored as a string, in the\n
        \     DNS wire format, as specified in RFC 1034 [1].  Additionally, the\n
        \     restrictions discussed in RFC 3280 [7], Section 4.2.1.7 apply.\n      In
        the FQDN case, the Name field is an \"IDN-unaware domain name\n      slot\",
        as defined in [9].  That is, it can contain only ASCII\n      characters.
        \ An implementation MAY support internationalized\n      domain names (IDNs)
        using the ToASCII operation; see [9] for more\n      information.\n      All
        systems MUST support the DER Encoded X.501 Name.\n      Implementations MAY
        support the FQDN name type.\n   Padding\n      A variable-length field making
        the option length a multiple of 8,\n      beginning after the previous field
        ends and continuing to the end\n      of the option, as specified by the Length
        field.\n"
      title: 6.4.3.  Trust Anchor Option
    - contents:
      - "6.4.4.  Certificate Option\n   The format of the certificate option is described
        in the following:\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |    Length     |  Cert Type    |    Reserved   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Certificate ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                 ...       Padding                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Type\n      16\n   Length\n      The length of the option (including the
        Type, Length, Cert Type,\n      Pad Length, and Certificate fields), in units
        of 8 octets.\n   Cert Type\n      The type of the certificate included in
        the Certificate field.\n      This specification defines only one legal value
        for this field:\n            1        X.509v3 Certificate, as specified below\n
        \  Reserved\n      An 8-bit field reserved for future use.  The value MUST
        be\n      initialized to zero by the sender and MUST be ignored by the\n      receiver.\n
        \  Certificate\n      When the Cert Type field is set to 1, the Certificate
        field\n      contains an X.509v3 certificate [7], as described in Section\n
        \     6.3.1.\n   Padding\n      A variable length field making the option
        length a multiple of 8,\n      beginning after the ASN.1 encoding of the previous
        field [7, 15]\n      ends and continuing to the end of the option, as specified
        by the\n      Length field.\n"
      title: 6.4.4.  Certificate Option
    - contents:
      - "6.4.5.  Processing Rules for Routers\n   A router MUST silently discard any
        received Certification Path\n   Solicitation messages that do not conform
        to the message format\n   defined in Section 6.4.1.  The contents of the Reserved
        field and of\n   any unrecognized options MUST be ignored.  Future, backward-\n
        \  compatible changes to the protocol may specify the contents of the\n   Reserved
        field or add new options; backward-incompatible changes may\n   use different
        Code values.  The contents of any defined options that\n   are not specified
        to be used with Router Solicitation messages MUST\n   be ignored, and the
        packet processed in the normal manner.  The only\n   defined option that may
        appear is the Trust Anchor option.  A\n   solicitation that passes the validity
        checks is called a \"valid\n   solicitation\".\n   Routers SHOULD send advertisements
        in response to valid solicitations\n   received on an advertising interface.
        \ If the source address in the\n   solicitation was the unspecified address,
        the router MUST send the\n   response to the link-scoped All-Nodes multicast
        address.  If the\n   source address was a unicast address, the router MUST
        send the\n   response to the Solicited-Node multicast address corresponding
        to the\n   source address, except when under load, as specified below.  Routers\n
        \  SHOULD NOT send Certification Path Advertisements more than\n   MAX_CPA_RATE
        times within a second.  When there are more\n   solicitations, the router
        SHOULD send the response to the All-Nodes\n   multicast address regardless
        of the source address that appeared in\n   the solicitation.\n   In an advertisement,
        the router SHOULD include suitable Certificate\n   options so that a certification
        path can be established to the\n   solicited trust anchor (or a part of it,
        if the Component field in\n   the solicitation is not equal to 65,535).  Note
        also that a single\n   advertisement is broken into separately sent components
        and ordered\n   in a particular way (see Section 6.4.2) when there is more
        than one\n   certificate in the path.\n   The anchor is identified by the
        Trust Anchor option.  If the Trust\n   Anchor option is represented as a DER
        Encoded X.501 Name, then the\n   Name must be equal to the Subject field in
        the anchor's certificate.\n   If the Trust Anchor option is represented as
        an FQDN, the FQDN must\n   be equal to an FQDN in the subjectAltName field
        of the anchor's\n   certificate.  The router SHOULD include the Trust Anchor
        option(s) in\n   the advertisement for which the certification path was found.\n
        \  If the router is unable to find a path to the requested anchor, it\n   SHOULD
        send an advertisement without any certificates.  In this case,\n   the router
        SHOULD include the Trust Anchor options that were\n   solicited.\n"
      title: 6.4.5.  Processing Rules for Routers
    - contents:
      - "6.4.6.  Processing Rules for Hosts\n   A host MUST silently discard any received
        Certification Path\n   Advertisement messages that do not conform to the message
        format\n   defined in Section 6.4.2.  The contents of the Reserved field,
        and of\n   any unrecognized options, MUST be ignored.  Future, backward-\n
        \  compatible changes to the protocol MAY specify the contents of the\n   Reserved
        field or add new options; backward-incompatible changes MUST\n   use different
        Code values.  The contents of any defined options not\n   specified to be
        used with Certification Path Advertisement messages\n   MUST be ignored, and
        the packet processed in the normal manner.  The\n   only defined options that
        may appear are the Certificate and Trust\n   Anchor options.  An advertisement
        that passes the validity checks is\n   called a \"valid advertisement\".\n
        \  Hosts SHOULD store certification paths retrieved in Certification\n   Path
        Discovery messages if they start from an anchor trusted by the\n   host.  The
        certification paths MUST be verified, as defined in\n   Section 6.3, before
        storing them.  Routers send the certificates one\n   by one, starting from
        the trust anchor end of the path.\n   Note: Except to allow for message loss
        and reordering for temporary\n   purposes, hosts might not store certificates
        received in a\n   Certification Path Advertisement unless they contain a certificate\n
        \  that can be immediately verified either to the trust anchor or to a\n   certificate
        that has been verified earlier.  This measure is intended\n   to prevent Denial-of-Service
        attacks, whereby an attacker floods a\n   host with certificates that the
        host cannot validate and overwhelms\n   memory for certificate storage.\n
        \  Note that caching this information, and the implied verification\n   results
        between network attachments for use over multiple attachments\n   to the network,
        can help improve performance.  But periodic\n   certificate revocation checks
        are still needed, even with cached\n   results, to make sure that the certificates
        are still valid.\n   The host SHOULD retrieve a certification path when a
        Router\n   Advertisement has been received with a public key that is not\n
        \  available from a certificate in the hosts' cache, or when there is no\n
        \  certification path to one of the host's trust anchors.  In these\n   situations,
        the host MAY send a Certification Path Solicitation\n   message to retrieve
        the path.  If there is no response within\n   CPS_RETRY seconds, the message
        should be retried.  The wait interval\n   for each subsequent retransmission
        MUST exponentially increase,\n   doubling each time.  If there is no response
        after CPS_RETRY_MAX\n   seconds, the host abandons the certification path
        retrieval process.\n   If the host receives only a part of a certification
        path within\n   CPS_RETRY_FRAGMENTS seconds of receiving the first part, it
        MAY in\n   addition transmit a Certification Path Solicitation message with
        the\n   Component field set to a value not equal to 65,535.  This message
        can\n   be retransmitted by using the same process as for the initial\n   message.
        \ If there are multiple missing certificates, additional CPS\n   messages
        can be sent after getting a response to first one.  However,\n   the complete
        retrieval process may last at most CPS_RETRY_MAX\n   seconds.\n   Certification
        Path Solicitations SHOULD NOT be sent if the host has a\n   currently valid
        certification path from a reachable router to a trust\n   anchor.\n   When
        soliciting certificates for a router, a host MUST send\n   Certification Path
        Solicitations either to the All-Routers multicast\n   address, if it has not
        selected a default router yet, or to the\n   default router's IP address,
        if a default router has already been\n   selected.\n   If two hosts want to
        establish trust with the CPS and CPA messages,\n   the CPS message SHOULD
        be sent to the Solicited-Node multicast\n   address of the receiver.  The
        advertisements SHOULD be sent as\n   specified above for routers.  However,
        the exact details are outside\n   the scope of this specification.\n   When
        processing possible advertisements sent as responses to a\n   solicitation,
        the host MAY prefer to process those advertisements\n   with the same Identifier
        field value as that of the solicitation\n   first.  This makes Denial-of-Service
        attacks against the mechanism\n   harder (see Section 9.3).\n"
      title: 6.4.6.  Processing Rules for Hosts
    title: 6.4.  Certificate Transport
  - contents:
    - "6.5.  Configuration\n   End hosts are configured with a set of trust anchors
      in order to\n   protect Router Discovery.  A trust anchor configuration consists
      of\n   the following items:\n   o  A public key signature algorithm and associated
      public key, which\n      may optionally include parameters.\n   o  A name as
      described in Section 6.4.3.\n   o  An optional public key identifier.\n   o
      \ An optional list of address ranges for which the trust anchor is\n      authorized.\n
      \  If the host has been configured to use SEND, it SHOULD possess the\n   above
      information for at least one trust anchor.\n   Routers are configured with a
      collection of certification paths and a\n   collection of certificates containing
      certified keys, down to the key\n   and certificate for the router itself.  Certified
      keys are required\n   for routers so that a certification path can be established
      between\n   the router's certificate and the public key of a trust anchor.\n
      \  If the router has been configured to use SEND, it should be\n   configured
      with its own key pair and certificate, and with at least\n   one certification
      path.\n"
    title: 6.5.  Configuration
  title: 6.  Authorization Delegation Discovery
- contents:
  - '7.  Addressing

    '
  - contents:
    - "7.1.  CGAs\n   By default, a SEND-enabled node SHOULD use only CGAs for its
      own\n   addresses.  Other types of addresses MAY be used in testing, in\n   diagnostics,
      or for other purposes.  However, this document does not\n   describe how to
      choose between different types of addresses for\n   different communications.
      \ A dynamic selection can be provided by an\n   API, such as the one defined
      in [21].\n"
    title: 7.1.  CGAs
  - contents:
    - "7.2.  Redirect Addresses\n   If the Target Address and Destination Address
      fields in the ICMP\n   Redirect message are equal, then this message is used
      to inform hosts\n   that a destination is, in fact, a neighbor.  In this case,
      the\n   receiver MUST verify that the given address falls within the range\n
      \  defined by the router's certificate.  Redirect messages failing this\n   check
      MUST be treated as unsecured, as described in Section 7.3.\n   Note that base
      NDP rules prevent a host from accepting a Redirect\n   message from a router
      that the host is not using to reach the\n   destination mentioned in the redirect.
      \ This prevents an attacker\n   from tricking a node into redirecting traffic
      when the attacker is\n   not the default router.\n"
    title: 7.2.  Redirect Addresses
  - contents:
    - "7.3.  Advertised Subnet Prefixes\n   The router's certificate defines the address
      range(s) that it is\n   allowed to advertise securely.  A router MAY, however,
      advertise a\n   combination of certified and uncertified subnet prefixes.\n
      \  Uncertified subnet prefixes are treated as unsecured (i.e., processed\n   in
      the same way as unsecured router advertisements sent by non-SEND\n   routers).
      \ The processing of unsecured messages is specified in\n   Section 8.  Note
      that SEND nodes that do not attempt to interoperate\n   with non-SEND nodes
      MAY simply discard the unsecured information.\n   Certified subnet prefixes
      fall into the following two categories:\n   Constrained\n      If the network
      operator wants to constrain which routers are\n      allowed to route particular
      subnet prefixes, routers should be\n      configured with certificates having
      subnet prefixes listed in the\n      prefix extension.  These routers SHOULD
      advertise the subnet\n      prefixes that they are certified to route, or a
      subset thereof.\n   Unconstrained\n      Network operators that do not want
      to constrain routers this way\n      should configure routers with certificates
      containing either the\n      null prefix or no prefix extension at all.\n   Upon
      processing a Prefix Information option within a Router\n   Advertisement, nodes
      SHOULD verify that the prefix specified in this\n   option falls within the
      range defined by the certificate, if the\n   certificate contains a prefix extension.
      \ Options failing this check\n   are treated as containing uncertified subnet
      prefixes.\n   Nodes SHOULD use one of the certified subnet prefixes for stateless\n
      \  autoconfiguration.  If none of the advertised subnet prefixes match,\n   the
      host SHOULD use a different advertising router as its default\n   router, if
      one is available.  If the node is performing stateful\n   autoconfiguration,
      it SHOULD check the address provided by the DHCP\n   server against the certified
      subnet prefixes and SHOULD NOT use the\n   address if the prefix is not certified.\n"
    title: 7.3.  Advertised Subnet Prefixes
  - contents:
    - "7.4.  Limitations\n   This specification does not address the protection of
      NDP packets for\n   nodes configured with a static address (e.g., PREFIX::1).
      \ Future\n   certification path-based authorization specifications are needed
      for\n   these nodes.  This specification also does not apply to addresses\n
      \  generated by the IPv6 stateless address autoconfiguration from a\n   fixed
      interface identifiers (such as EUI-64).\n   It is outside the scope of this
      specification to describe the use of\n   trust anchor authorization between
      nodes with dynamically changing\n   addresses.  These addresses may be the result
      of stateful or\n   stateless address autoconfiguration, or may have resulted
      from the\n   use of RFC 3041 [17] addresses.  If the CGA method is not used,
      nodes\n   are required to exchange certification paths that terminate in a\n
      \  certificate authorizing a node to use an IP address having a\n   particular
      interface identifier.  This specification does not specify\n   the format of
      these certificates, as there are currently only a few\n   cases where they are
      provided by the link layer, and it is up to the\n   link layer to provide certification
      for the interface identifier.\n   This may be the subject of a future specification.
      \ It is also\n   outside the scope of this specification to describe how stateful\n
      \  address autoconfiguration works with the CGA method.\n   The Target Address
      in Neighbor Advertisement is required to be equal\n   to the source address
      of the packet, except in proxy Neighbor\n   Discovery, which is not supported
      by this specification.\n"
    title: 7.4.  Limitations
  title: 7.  Addressing
- contents:
  - "8.  Transition Issues\n   During the transition to secured links, or as a policy
    consideration,\n   network operators may want to run a particular link with a
    mixture of\n   nodes accepting secured and unsecured messages.  Nodes that support\n
    \  SEND SHOULD support the use of secured and unsecured NDP messages at\n   the
    same time.\n   In a mixed environment, SEND nodes receive both secured and unsecured\n
    \  messages but give priority to secured ones.  Here, the \"secured\"\n   messages
    are those that contain a valid signature option, as\n   specified above, and \"unsecured\"
    messages are those that contain no\n   signature option.\n   A SEND node SHOULD
    have a configuration option that causes it to\n   ignore all unsecured Neighbor
    Solicitation and Advertisement, Router\n   Solicitation and Advertisement, and
    Redirect messages.  This can be\n   used to enforce SEND-only networks.  The default
    for this\n   configuration option SHOULD be that both secured and unsecured\n
    \  messages are allowed.\n   A SEND node MAY also have a configuration option
    whereby it disables\n   the use of SEND completely, even for the messages it sends
    itself.\n   This configuration option SHOULD be switched off by default; that
    is,\n   SEND is used.  Plain (non-SEND) NDP nodes will obviously send only\n   unsecured
    messages.  Per RFC 2461 [4], such nodes will ignore the\n   unknown options and
    will treat secured messages in the same way that\n   they treat unsecured ones.
    \ Secured and unsecured nodes share the\n   same network resources, such as subnet
    prefixes and address spaces.\n   SEND nodes configured to use SEND at least in
    their own messages\n   behave in a mixed environment as explained below.\n   SEND
    adheres to the rules defined for the base NDP protocol, with the\n   following
    exceptions:\n   o  All solicitations sent by a SEND node MUST be secured.\n   o
    \ Unsolicited advertisements sent by a SEND node MUST be secured.\n   o  A SEND
    node MUST send a secured advertisement in response to a\n      secured solicitation.
    \ Advertisements sent in response to an\n      unsecured solicitation MUST be
    secured as well, but MUST NOT\n      contain the Nonce option.\n   o  A SEND node
    that uses the CGA authorization method to protect\n      Neighbor Solicitations
    SHOULD perform Duplicate Address Detection\n      as follows.  If Duplicate Address
    Detection indicates that the\n      tentative address is already in use, the node
    generates a new\n      tentative CGA.  If after three consecutive attempts no
    non-unique\n      address is generated, it logs a system error and gives up\n
    \     attempting to generate an address for that interface.\n      When performing
    Duplicate Address Detection for the first\n      tentative address, the node accepts
    both secured and unsecured\n      Neighbor Advertisements and Solicitations received
    in response to\n      the Neighbor Solicitations.  When performing Duplicate Address\n
    \     Detection for the second or third tentative address, it ignores\n      unsecured
    Neighbor Advertisements and Solicitations.  (The\n      security implications
    of this are discussed in Section 9.2.3 and\n      in [11].)\n   o  The node MAY
    have a configuration option whereby it ignores\n      unsecured advertisements,
    even when performing Duplicate Address\n      Detection for the first tentative
    address.  This configuration\n      option SHOULD be disabled by default.  This
    is a recovery\n      mechanism for cases in which attacks against the first address\n
    \     become common.\n   o  The Neighbor Cache, Prefix List, and Default Router
    list entries\n      MUST have a secured/unsecured flag that indicates whether
    the\n      message that caused the creation or last update of the entry was\n
    \     secured or unsecured.  Received unsecured messages MUST NOT cause\n      changes
    to existing secured entries in the Neighbor Cache, Prefix\n      List, or Default
    Router List.  Received secured messages MUST\n      cause an update of the matching
    entries, which MUST be flagged as\n      secured.\n   o  Neighbor Solicitations
    for the purpose of Neighbor Unreachability\n      Detection (NUD) MUST be sent
    to that neighbor's solicited-nodes\n      multicast address if the entry is not
    secured with SEND.\n      Upper layer confirmations on unsecured neighbor cache
    entries\n      SHOULD NOT update neighbor cache state from STALE to REACHABLE
    on\n      a SEND node if the neighbor cache entry has never previously been\n
    \     REACHABLE.  This ensures that if an entry spoofing a valid SEND\n      host
    is created by a non-SEND attacker without being solicited,\n      NUD will be
    done with the entry for data transmission within five\n      seconds of use.\n
    \     As a result, in mixed mode, attackers can take over a Neighbor\n      Cache
    entry of a SEND node for a longer time only if (a) the SEND\n      node was not
    communicating with the victim node, so that there is\n      no secure entry for
    it, and (b) the SEND node is not currently on\n      the link (or is unable to
    respond).\n   o  The conceptual sending algorithm is modified so that an unsecured\n
    \     router is selected only if there is no reachable SEND router for\n      the
    prefix.  That is, the algorithm for selecting a default router\n      favors reachable
    SEND routers over reachable non-SEND ones.\n   o  A node MAY adopt a router sending
    unsecured messages, or a router\n      for which secured messages have been received
    but for which full\n      security checks have not yet been completed, while security\n
    \     checking is underway.  Security checks in this case include\n      certification
    path solicitation, certificate verification, CRL\n      checks, and RA signature
    checks.  A node MAY also adopt a router\n      sending unsecured messages if a
    router known to be secured becomes\n      unreachable, but because the unreachability
    may be the result of\n      an attack it SHOULD attempt to find a router known
    to be secured\n      as soon as possible.  Note that although this can speed up\n
    \     attachment to a new network, accepting a router that is sending\n      unsecured
    messages or for which security checks are not complete\n      opens the node to
    possible attacks.  Nodes that choose to accept\n      such routers do so at their
    own risk.  The node SHOULD, in any\n      case, prefer a router known to be secure
    as soon as one is made\n      available with completed security checks.\n"
  title: 8.  Transition Issues
- contents:
  - '9.  Security Considerations

    '
  - contents:
    - "9.1.  Threats to the Local Link Not Covered by SEND\n   SEND does not provide
      confidentiality for NDP communications.\n   SEND does not compensate for an
      unsecured link layer.  For instance,\n   there is no assurance that payload
      packets actually come from the\n   same peer against which the NDP was run.\n
      \  There may not be cryptographic binding in SEND between the link layer\n   frame
      address and the IPv6 address.  An unsecured link layer could\n   allow nodes
      to spoof the link layer address of other nodes.  An\n   attacker could disrupt
      IP service by sending out a Neighbor\n   Advertisement on an unsecured link
      layer, with the link layer source\n   address on the frame set as the source
      address of a victim, a valid\n   CGA address and a valid signature corresponding
      to itself, and a\n   Target Link-layer Address extension corresponding to the
      victim.  The\n   attacker could then make a traffic stream bombard the victim
      in a DoS\n   attack.  This cannot be prevented just by securing the link layer.\n
      \  Even on a secured link layer, SEND does not require that the\n   addresses
      on the link layer and Neighbor Advertisements correspond.\n   However, performing
      these checks is RECOMMENDED if the link layer\n   technology permits.\n   Prior
      to participating in Neighbor Discovery and Duplicate Address\n   Detection,
      nodes must subscribe to the link-scoped All-Nodes\n   Multicast Group and the
      Solicited-Node Multicast Group for the\n   address that they are claiming as
      their addresses; RFC 2461 [4].\n   Subscribing to a multicast group requires
      that the nodes use MLD\n   [16].  MLD contains no provision for security.  An
      attacker could\n   send an MLD Done message to unsubscribe a victim from the
      Solicited-\n   Node Multicast address.  However, the victim should be able to
      detect\n   this attack because the router sends a Multicast-Address-Specific\n
      \  Query to determine whether any listeners are still on the address, at\n   which
      point the victim can respond to avoid being dropped from the\n   group.  This
      technique will work if the router on the link has not\n   been compromised.
      \ Other attacks using MLD are possible, but they\n   primarily lead to extraneous
      (but not necessarily overwhelming)\n   traffic.\n"
    title: 9.1.  Threats to the Local Link Not Covered by SEND
  - contents:
    - "9.2.  How SEND Counters Threats to NDP\n   The SEND protocol is designed to
      counter the threats to NDP, as\n   outlined in [22].  The following subsections
      contain a regression of\n   the SEND protocol against the threats, to illustrate
      which aspects of\n   the protocol counter each threat.\n"
    - contents:
      - "9.2.1.  Neighbor Solicitation/Advertisement Spoofing\n   This threat is defined
        in Section 4.1.1 of [22].  The threat is that\n   a spoofed message may cause
        a false entry in a node's Neighbor Cache.\n   There are two cases:\n   1.
        Entries made as a side effect of a Neighbor Solicitation or Router\n      Solicitation.
        \ A router receiving a Router Solicitation with a\n      Target Link-Layer
        Address extension and the IPv6 source address\n      unequal to the unspecified
        address inserts an entry for the IPv6\n      address into its Neighbor Cache.
        \ Also, a node performing\n      Duplicate Address Detection (DAD) that receives
        a Neighbor\n      Solicitation for the same address regards the situation
        as a\n      collision and ceases to solicit for the address.\n      In either
        case, SEND counters these threats by requiring that the\n      RSA Signature
        and CGA options be present in these solicitations.\n      SEND nodes can send
        Router Solicitation messages with a CGA source\n      address and a CGA option,
        which the router can verify, so that the\n      Neighbor Cache binding is
        correct.  If a SEND node must send a\n      Router Solicitation with the unspecified
        address, the router will\n      not update its Neighbor Cache, as per base
        NDP.\n   2. Entries made as a result of a Neighbor Advertisement message.\n
        \     SEND counters this threat by requiring that the RSA Signature and\n
        \     CGA options be present in these advertisements.\n   Also see Section
        9.2.5, below, for discussion about replay protection\n   and timestamps.\n"
      title: 9.2.1.  Neighbor Solicitation/Advertisement Spoofing
    - contents:
      - "9.2.2.  Neighbor Unreachability Detection Failure\n   This attack is described
        in Section 4.1.2 of [22].  SEND counters it\n   by requiring that a node responding
        to Neighbor Solicitations sent as\n   NUD probes include an RSA Signature
        option and proof of authorization\n   to use the interface identifier in the
        address being probed.  If\n   these prerequisites are not met, the node performing
        NUD discards the\n   responses.\n"
      title: 9.2.2.  Neighbor Unreachability Detection Failure
    - contents:
      - "9.2.3.  Duplicate Address Detection DoS Attack\n   This attack is described
        in Section 4.1.3 of [22].  SEND counters\n   this attack by requiring that
        the Neighbor Advertisements sent as\n   responses to DAD include an RSA Signature
        option and proof of\n   authorization to use the interface identifier in the
        address being\n   tested.  If these prerequisites are not met, the node performing
        DAD\n   discards the responses.\n   When a SEND node performs DAD, it may
        listen for address collisions\n   from non-SEND nodes for the first address
        it generates, but not for\n   new attempts.  This protects the SEND node from
        DAD DoS attacks by\n   non-SEND nodes or attackers simulating non-SEND nodes,
        at the cost of\n   a potential address collision between a SEND node and a
        non-SEND\n   node.  The probability and effects of such an address collision
        are\n   discussed in [11].\n"
      title: 9.2.3.  Duplicate Address Detection DoS Attack
    - contents:
      - "9.2.4.  Router Solicitation and Advertisement Attacks\n   These attacks are
        described in Sections 4.2.1, 4.2.4, 4.2.5, 4.2.6,\n   and 4.2.7 of [22].  SEND
        counters them by requiring that Router\n   Advertisements contain an RSA Signature
        option, and that the\n   signature is calculated by using the public key of
        a node that can\n   prove its authorization to route the subnet prefixes contained
        in any\n   Prefix Information Options.  The router proves its authorization
        by\n   showing a certificate containing the specific prefix or an indication\n
        \  that the router is allowed to route any prefix.  A Router\n   Advertisement
        without these protections is discarded.\n   SEND does not protect against
        brute force attacks on the router, such\n   as DoS attacks, or against compromise
        of the router, as described in\n   Sections 4.4.2 and 4.4.3 of [22].\n"
      title: 9.2.4.  Router Solicitation and Advertisement Attacks
    - contents:
      - "9.2.5.  Replay Attacks\n   This attack is described in Section 4.3.1 of [22].
        \ SEND protects\n   against attacks in Router Solicitation/Router Advertisement
        and\n   Neighbor Solicitation/Neighbor Advertisement transactions by\n   including
        a Nonce option in the solicitation and requiring that the\n   advertisement
        include a matching option.  Together with the\n   signatures, this forms a
        challenge-response protocol.\n   SEND protects against attacks from unsolicited
        messages such as\n   Neighbor Advertisements, Router Advertisements, and Redirects
        by\n   including a Timestamp option.  The following security issues are\n
        \  relevant only for unsolicited messages:\n   o  A window of vulnerability
        for replay attacks exists until the\n      timestamp expires.\n      However,
        such vulnerabilities are only useful for attackers if the\n      advertised
        parameters change during the window.  Although some\n      parameters (such
        as the remaining lifetime of a prefix) change\n      often, radical changes
        typically happen only in the context of\n      some special case, such as
        switching to a new link layer address\n      due to a broken interface adapter.\n
        \     SEND nodes are also protected against replay attacks as long as\n      they
        cache the state created by the message containing the\n      timestamp.  The
        cached state allows the node to protect itself\n      against replayed messages.
        \ However, once the node flushes the\n      state for whatever reason, an
        attacker can re-create the state by\n      replaying an old message while
        the timestamp is still valid.\n      Because most SEND nodes are likely to
        use fairly coarse-grained\n      timestamps, as explained in Section 5.3.1,
        this may affect some\n      nodes.\n   o  Attacks against time synchronization
        protocols such as NTP [23]\n      may cause SEND nodes to have an incorrect
        timestamp value.  This\n      can be used to launch replay attacks, even outside
        the normal\n      window of vulnerability.  To protect against these attacks,
        it is\n      recommended that SEND nodes keep independently maintained clocks\n
        \     or apply suitable security measures for the time synchronization\n      protocols.\n"
      title: 9.2.5.  Replay Attacks
    - contents:
      - "9.2.6.  Neighbor Discovery DoS Attack\n   This attack is described in Section
        4.3.2 of [22].  In it, the\n   attacker bombards the router with packets for
        fictitious addresses on\n   the link, causing the router to busy itself by
        performing Neighbor\n   Solicitations for addresses that do not exist.  SEND
        does not address\n   this threat because it can be addressed by techniques
        such as rate\n   limiting Neighbor Solicitations, restricting the amount of
        state\n   reserved for unresolved solicitations, and clever cache management.\n
        \  These are all techniques involved in implementing Neighbor Discovery\n
        \  on the router.\n"
      title: 9.2.6.  Neighbor Discovery DoS Attack
    title: 9.2.  How SEND Counters Threats to NDP
  - contents:
    - "9.3.  Attacks against SEND Itself\n   The CGAs have a 59-bit hash value.  The
      security of the CGA mechanism\n   has been discussed in [11].\n   Some Denial-of-Service
      attacks remain against NDP and SEND itself.\n   For instance, an attacker may
      try to produce a very high number of\n   packets that a victim host or router
      has to verify by using\n   asymmetric methods.  Although safeguards are required
      to prevent an\n   excessive use of resources, this can still render SEND non-\n
      \  operational.\n   When CGA protection is used, SEND deals with the DoS attacks
      by using\n   the verification process described in Section 5.2.2.  In this\n
      \  process, a simple hash verification of the CGA property of the\n   address
      is performed before the more expensive signature\n   verification.  However,
      even if the CGA verification succeeds, no\n   claims about the validity of the
      message can be made until the\n   signature has been checked.\n   When trust
      anchors and certificates are used for address validation\n   in SEND, the defenses
      are not quite as effective.  Implementations\n   SHOULD track the resources
      devoted to the processing of packets\n   received with the RSA Signature option
      and start selectively\n   discarding packets if too many resources are spent.
      \ Implementations\n   MAY also first discard packets that are not protected
      with CGA.\n   The Authorization Delegation Discovery process may also be vulnerable\n
      \  to Denial-of-Service attacks.  An attack may target a router by\n   requesting
      that a large number of certification paths be discovered\n   for different trust
      anchors.  Routers SHOULD defend against such\n   attacks by caching discovered
      information (including negative\n   responses) and by limiting the number of
      different discovery\n   processes in which they engage.\n   Attackers may also
      target hosts by sending a large number of\n   unnecessary certification paths,
      forcing hosts to spend useless\n   memory and verification resources on them.
      \ Hosts can defend against\n   such attacks by limiting the amount of resources
      devoted to the\n   certification paths and their verification.  Hosts SHOULD
      also\n   prioritize advertisements sent as a response to solicitations the\n
      \  hosts have sent about unsolicited advertisements.\n"
    title: 9.3.  Attacks against SEND Itself
  title: 9.  Security Considerations
- contents:
  - '10.  Protocol Values

    '
  - contents:
    - "10.1.  Constants\n   Host constants:\n         CPS_RETRY                      1
      second\n         CPS_RETRY_FRAGMENTS            2 seconds\n         CPS_RETRY_MAX
      \                15 seconds\n   Router constants:\n         MAX_CPA_RATE                  10
      times per second\n"
    title: 10.1.  Constants
  - contents:
    - "10.2.  Variables\n         TIMESTAMP_DELTA               300 seconds (5 minutes)\n
      \        TIMESTAMP_FUZZ                  1 second\n         TIMESTAMP_DRIFT
      \                1 % (0.01)\n"
    title: 10.2.  Variables
  title: 10.  Protocol Values
- contents:
  - "11.  IANA Considerations\n   This document defines two new ICMP message types,
    used in\n   Authorization Delegation Discovery.  These messages must be assigned\n
    \  ICMPv6 type numbers from the informational message range:\n   o  The Certification
    Path Solicitation message (148), described in\n      Section 6.4.1.\n   o  The
    Certification Path Advertisement message (149), described in\n      Section 6.4.2.\n
    \  This document defines six new Neighbor Discovery Protocol [4]\n   options,
    which must be assigned Option Type values within the option\n   numbering space
    for Neighbor Discovery Protocol messages:\n      o  The CGA option (11), described
    in Section 5.1.\n      o  The RSA Signature option (12), described in Section
    5.2.\n      o  The Timestamp option (13), described in Section 5.3.1.\n      o
    \ The Nonce option (14), described in Section 5.3.2.\n      o  The Trust Anchor
    option (15), described in Section 6.4.3.\n      o  The Certificate option (16),
    described in Section 6.4.4.\n   This document defines a new 128-bit value under
    the CGA Message Type\n   [11] namespace, 0x086F CA5E 10B2 00C9 9C8C E001 6427
    7C08.\n   This document defines a new name space for the Name Type field in the\n
    \  Trust Anchor option.  Future values of this field can be allocated by\n   using
    Standards Action [3].  The current values for this field are\n      1  DER Encoded
    X.501 Name\n      2  FQDN\n   Another new name space is allocated for the Cert
    Type field in the\n   Certificate option.  Future values of this field can be
    allocated by\n   using Standards Action [3].  The current values for this field
    are\n      1  X.509v3 Certificate\n"
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]   Mockapetris, P., \"Domain names - concepts
      and facilities\", STD\n         13, RFC 1034, November 1987.\n   [2]   Bradner,
      S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",
      BCP 14, RFC 2119, March 1997.\n   [3]   Narten, T. and H. Alvestrand, \"Guidelines
      for Writing an IANA\n         Considerations Section in RFCs\", BCP 26, RFC
      2434, October\n         1998.\n   [4]   Narten, T., Nordmark, E. and W. Simpson,
      \"Neighbor Discovery\n         for IP Version 6 (IPv6)\", RFC 2461, December
      1998.\n   [5]   Thomson, S. and T. Narten, \"IPv6 Stateless Address\n         Autoconfiguration\",
      RFC 2462, December 1998.\n   [6]   Conta, A. and S. Deering, \"Internet Control
      Message Protocol\n         (ICMPv6) for the Internet Protocol Version 6 (IPv6)\n
      \        Specification\", RFC 2463, December 1998.\n   [7]  Housley, R., Polk,
      W., Ford, W. and D. Solo, \"Internet X.509\n         Public Key Infrastructure
      Certificate and Certificate\n         Revocation List (CRL) Profile\", RFC 3280,
      April 2002.\n   [8]  Farrell, S. and R. Housley, \"An Internet Attribute Certificate\n
      \        Profile for Authorization\", RFC 3281, April 2002.\n   [9]  Faltstrom,
      P., Hoffman, P. and A. Costello, \"Internationalizing\n         Domain Names
      in Applications (IDNA)\", RFC 3490, March 2003.\n   [10]  Lynn, C., Kent, S.
      and K. Seo, \"X.509 Extensions for IP\n         Addresses and AS Identifiers\",
      RFC 3779, June 2004.\n   [11]  Aura, T., \"Cryptographically Generated Addresses
      (CGA)\", RFC\n         3972, March 2005.\n   [12]  International Telecommunications
      Union, \"Information Technology\n         - ASN.1 encoding rules: Specification
      of Basic Encoding Rules\n         (BER), Canonical Encoding Rules (CER) and
      Distinguished\n         Encoding Rules (DER)\", ITU-T Recommendation X.690,
      July 2002.\n   [13]  RSA Laboratories, \"RSA Encryption Standard, Version 2.1\",
      PKCS\n         1, November 2002.\n   [14]  National Institute of Standards and
      Technology, \"Secure Hash\n         Standard\", FIPS PUB 180-1, April 1995,\n
      \        <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [15]  Harkins, D. and D. Carrel, \"The Internet
      Key Exchange (IKE)\",\n         RFC 2409, November 1998.\n   [16]  Deering,
      S., Fenner, W. and B. Haberman, \"Multicast Listener\n         Discovery (MLD)
      for IPv6\", RFC 2710, October 1999.\n   [17]  Narten, T. and R. Draves, \"Privacy
      Extensions for Stateless\n         Address Autoconfiguration in IPv6\", RFC
      3041, January 2001.\n   [18]  Droms, R., Bound, J., Volz, B., Lemon, T., Perkins,
      C. and M.\n         Carney, \"Dynamic Host Configuration Protocol for IPv6\n
      \        (DHCPv6)\", RFC 3315, July 2003.\n   [19]  Arkko, J., \"Effects of
      ICMPv6 on IKE and IPsec Policies\", Work\n         in Progress, March 2003.\n
      \  [20]  Arkko, J., \"Manual SA Configuration for IPv6 Link Local\n         Messages\",
      Work in Progress, June 2002.\n   [21]  Nordmark, E., Chakrabarti, S. and J.
      Laganier, \"IPv6 Socket API\n         for Address Selection\", Work in Progress,
      October 2003.\n   [22]  Nikander, P., Kempf, J., and E. Nordmark, \"IPv6 Neighbor\n
      \        Discovery (ND) Trust Models and Threats\", RFC 3756, May 2004.\n   [23]
      \ Bishop, M., \"A Security Analysis of the NTP Protocol\", Sixth\n         Annual
      Computer Security Conference Proceedings, December 1990.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Contributors and Acknowledgments\n   Tuomas Aura contributed the
    transition mechanism specification in\n   Section 8.  Jonathan Trostle contributed
    the certification path\n   example in Section 6.3.1.  Bill Sommerfeld was involved
    with much of\n   the early design work.\n   The authors would also like to thank
    Tuomas Aura, Bill Sommerfeld,\n   Erik Nordmark, Gabriel Montenegro, Pasi Eronen,
    Greg Daley, Jon Wood,\n   Julien Laganier, Francis Dupont, Pekka Savola, Wenxiao
    He, Valtteri\n   Niemi, Mike Roe, Russ Housley, Thomas Narten, and Steven Bellovin
    for\n   interesting discussions in this problem space and for feedback\n   regarding
    the SEND protocol.\n"
  title: Appendix A.  Contributors and Acknowledgments
- contents:
  - "Appendix B.  Cache Management\n   In this section, we outline a cache management
    algorithm that allows\n   a node to remain partially functional even under a cache-filling
    DoS\n   attack.  This appendix is informational, and real implementations\n   SHOULD
    use different algorithms in order to avoid the dangers of a\n   mono-cultural
    code.\n   There are at least two distinct cache-related attack scenarios:\n   1.
    There are a number of nodes on a link, and someone launches a\n      cache filling
    attack.  The goal here is to make sure that the\n      nodes can continue to communicate
    even if the attack is going on.\n   2. There is already a cache-filling attack
    going on, and a new node\n      arrives to the link.  The goal here is to make
    it possible for the\n      new node to become attached to the network, in spite
    of the\n      attack.\n   As the intent is to limit the damage to existing, valid
    cache\n   entries, it is clearly better to be very selective in throwing out\n
    \  entries.  Reducing the timestamp Delta value is very discriminatory\n   against
    nodes with a large clock difference, as an attacker can\n   reduce its clock difference
    arbitrarily.  Throwing out old entries\n   just because their clock difference
    is large therefore seems like a\n   bad approach.\n   It is reasonable to have
    separate cache spaces for new and old\n   entries, where when under attack, the
    newly cached entries would be\n   more readily dropped.  One could track traffic
    and only allow\n   reasonable new entries that receive genuine traffic to be converted\n
    \  into old cache entries.  Although such a scheme can make attacks\n   harder,
    it will not fully prevent them.  For example, an attacker\n   could send a little
    traffic (i.e., a ping or TCP syn) after each NS\n   to trick the victim into promoting
    its cache entry to the old cache.\n   To counter this, the node can be more intelligent
    in keeping its\n   cache entries than it would be just by having a black/white
    old/new\n   boundary.\n   Distinction of the Sec parameter from the CGA Parameters
    when forcing\n   cache entries out -- by keeping entries with larger Sec parameters\n
    \  preferentially -- also appears to be a possible approach, as CGAs\n   with
    higher Sec parameters are harder to spoof.\n"
  title: Appendix B.  Cache Management
- contents:
  - "Appendix C.  Message Size When Carrying Certificates\n   In one example scenario
    using SEND, an Authorization Delegation\n   Discovery test run was made with a
    certification path length of 4.\n   Three certificates are sent by using Certification
    Path Advertisement\n   messages, as the trust anchor's certificate is already
    known by both\n   parties.  With a key length of 1024 bits, the certificate lengths
    in\n   the test run ranged from 864 to 888 bytes; the variation is due to\n   the
    differences in the certificate issuer names and address prefix\n   extensions.
    \ The different certificates had between 1 and 4 address\n   prefix extensions.\n
    \  The three Certification Path Advertisement messages ranged from 1050\n   to
    1,066 bytes on an Ethernet link layer.  The certificate itself\n   accounts for
    the bulk of the packet.  The rest is the trust anchor\n   option, ICMP header,
    IPv6 header, and link layer header.\n"
  title: Appendix C.  Message Size When Carrying Certificates
- contents:
  - "Authors' Addresses\n   Jari Arkko\n   Ericsson\n   Jorvas  02420\n   Finland\n
    \  EMail: jari.arkko@ericsson.com\n   James Kempf\n   DoCoMo Communications Labs
    USA\n   181 Metro Drive\n   San Jose, CA  94043\n   USA\n   EMail: kempf@docomolabs-usa.com\n
    \  Brian Zill\n   Microsoft Research\n   One Microsoft Way\n   Redmond, WA 98052\n
    \  USA\n   EMail: bzill@microsoft.com\n   Pekka Nikander\n   Ericsson\n   Jorvas
    \ 02420\n   Finland\n   EMail: Pekka.Nikander@nomadiclab.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
