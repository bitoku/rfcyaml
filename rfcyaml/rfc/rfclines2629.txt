Abstract This memo presents a technique for using XML (Extensible Markup Language) as a source format for documents in the Internet Drafts (I Ds) and Request for Comments (RFC) series.
This memo describes how to write a document for the I D and RFC series using the Extensible Markup Language [1] (XML).
This memo has three goals: 1.
To describe a simple XML Document Type Definition (DTD) that is powerful enough to handle the simple formatting requirements of RFC like documents whilst allowing for meaningful markup of descriptive qualities.
To describe software that processes XML source files, including a tool that produces documents conforming to RFC 2223 [2], HTML format, and so on.
To provide the proof of concept for the first two goals (this memo was written using this DTD and produced using that software).
It is beyond the scope of this memo to discuss the political ramifications of using XML as a source format for RFC like documents.
Rather, it is simply noted that adding minimal markup to plain text:  allows the traditional production of textual RFC like documents using familiar editors;  requires some, albeit minimal, additions to existing software environments; and,  permits information to be organized, searched, and retrieved using both unstructured and structured mechanisms.
Using the DTD to Write I Ds and RFCs
We do not provide a formal or comprehensive description of XML.
Rather, this section discusses just enough XML to use a Document Type Declaration (DTD) to write RFC like documents.
If you're already familiar with XML, skip to Appendix B to look at the DTD.
2.1 XML basics There are very few rules when writing in XML, as the syntax is simple.
There are five terms you'll need to know:
You don't find these in HTML.
An "attribute" is part of an element.
A "token" is a string of characters.
First, start your source file with an XML declaration, a reference to the DTD, and the "rfc" element: <?
DOCTYPE rfc SYSTEM "rfc2629.dtd"> <
Ignore the first two lines
the declaration and the reference   and simply treat them as opaque strings.
Nothing else should be present after the "</rfc>" tag.
Second, make sure that all elements are properly matched and nested.
A properly matched element that starts with "<example>" is eventually followed with "</example>".
(Empty elements are always matched.)
Elements are properly nested when they don't overlap.
> overlaps, so the elements aren't properly nested.
Instead, use either "&lt;" or "&amp;", respectively.
Fourth, there are two quoting characters in XML, 'apostrophe' and "quotation".
If you want to put a comment in your source file, here's the syntax: <!
comments can be multiline, if you wish   Finally, XML is case sensitive.
Immediately following the "<rfc>" tag is the "front" element: <?
(Note that in all examples, indentation is used only for expository purposes.)
The "front" element consists of a "title" element, one or more "author" elements, a "date" element, one or more optional "area" elements, one or more optional "workgroup" elements, one or more optional "keyword" elements, an optional "abstract" element.
and, one or more optional "note" elements.
The title Element The "title" element identifies the title of the document.
Because the title will be used in the headers of the document when formatted according to [2], if the title is more than 42 characters, then an abbreviation should also be provided, e.g., <
title abbrev "Much Ado about Nothing"
The IETF's Discussion on "Source Format of RFC Documents" </title
The author Element Each "author" element identifies a document author.
Since a document may have more than one author, more than one "author" element may be present.
If the author is a person, then three attributes must be present in the "<author>" tag, "initials", "surname", and "fullname", e.g., <author initials "M.T." surname "Rose" fullname "Marshall T. Rose"
The "author" element itself consists of an "organization" element, and, an optional "address" element.
The "organization" element is similar to the "title" element, in that an abbreviation may be paired with a long organization name using the "abbrev" attribute, e.g., <organization abbrev "ISI"> USC/Information Sciences Institute </organization>
The "address" element consists of an optional "postal" element, an optional "phone" element, an optional "facsimile" element, an optional "email" element, and, an optional "uri" element.
The "postal" element contains one or more "street" elements, followed by any combination of "city", "region" (state or province), "code" (zipcode or postal code), and "country" elements, e.g., <postal> <
This flexibility is provided to allow for different national formats for postal addresses.
Note however, that although the order of the "city", "region", "code", and "country" elements isn't specified, at most one of each may be present.
Regardless, these elements must not be re ordered during processing by an XML application (e.g., display applications must preserve the ordering of the information contained in these elements).
Finally, the value of the "country" element should be a two letter code from ISO 3166.
The "phone", "facsimile", "email", and "uri" elements are simple, e.g., <phone> 1 415 695
The date Element The "date" element identifies the publication date of the document.
It consists of a month and a year, e.g., <date month "February" year "1999" />
The "date" element also has an optional day attribute.
2.2.4 Meta Data Elements The "front" element may contain meta data   the content of these elements does not appear in printed versions of the document.
A document has one or more optional "area", "workgroup" and "keyword" elements, e.g., <area
The "area" elements identify a general category for the document (e.g., one of "Applications", "General", "Internet", "Management", "Operations", "Routing", "Security", "Transport", or "User"), while the "workgroup" elements identify the IETF working groups that produced the document, and the "keyword" elements identify useful search terms.
The abstract Element A document may have an "abstract" element, which contains one or more "t" elements (Section 2.3.1.1).
In general, only a single "t" element is present, e.g., <abstract> <t
This memo presents a technique for using XML (Extensible Markup Language) as a source format for documents in the Internet Drafts (I Ds) and
Request for Comments (RFC) series.</t> </abstract
Element A document may have one or more "note" elements, each of which contains one or more "t" elements (Section 2.3.1.1).
There is a mandatory "title" attribute.
In general, the "note" element contains text from the IESG, e.g., <note title "IESG Note"> <t
The IESG has something to say.</t> </note
> 2.2.7.1 Conformance with RFC 2026
If an Internet Draft is being produced, then the "ipr" attribute should be present in the "<rfc>" tag at the beginning of the file.
The value of the attribute should be one of: full2026: indicating that the document is in full conformance with all the provisions of Section 10 of RFC 2026; noDerivativeWorks2026: indicating that the document is in full conformance with all the provisions of Section 10 of RFC 2026 except that the right to produce derivative works is not granted; or, none: indicating that the document is NOT offered in accordance with Section 10 of RFC 2026, and the author does not provide the IETF with any rights other than to publish as an Internet Draft.
In the latter case, a copyright notice will not be automatically inserted during processing by an XML application.
Consult [3] for further details.
Finally, if the Internet Draft is being submitted to an automated process, then the "docName" attribute should be present in the "<rfc>" tag at the beginning of the file.
So, putting it all together, we have, e.g., <front
Writing I Ds and RFCs
<author initials "M.T." surname "Rose" fullname "Marshall T. Rose"> <organization>Invisible Worlds,
> <phone> 1 415 695 3975</phone
> </address> </author> <date month "February" year "1999" /
This memo presents a technique for using XML (Extensible Markup Language) as a source format for documents in the Internet Drafts (I Ds) and
Request for Comments (RFC) series.</t> </abstract
The "middle" element consists of one or more "section" elements.
The section Element Each "section" element contains a section of the document.
There is a mandatory attribute, "title", that identifies the title of the section.
There is also an optional attribute, "anchor", that is used for cross referencing with the "xref" element (Section 2.3.1.4), e.g., <section anchor "intro" title "Introduction"
> The "section" element is recursive
</section> <section title "The list
The t Element The "t" element contains any number and combination of paragraphs, lists, and figures.
If a cross reference is needed to a section, figure, or reference, the "xref" element (Section 2.3.1.4) is used; similarly, if an external reference is needed, the "eref" element (Section 2.3.1.5) is used.
Indexing of text is provided by the the "iref" element (Section 2.3.1.6).
The list Element The "list" element contains one or more items.
Each item is a "t" element, allowing for recursion, e.g., <list style "numbers"> <t>
>The second item, which contains two bulleted sub items: <list style "symbols">
The "list" element has an optional attribute, "style", having the value "numbers" (for numeric lists), "symbols" (for bulleted lists), "hanging" (for hanging lists), or, "empty" (for indented text).
If a "list" element is nested, the default value is taken from its closest parent; otherwise, the default value is "empty".
When nested within a "hanging list" element, the "t" element has an optional attribute, "hangText"
that specifies the text to be inserted, e.g., <list style "hanging"
> <t hangText "full2026:">indicating that the document is in full conformance with all the provisions of Section 10 of RFC 2026;</t> <t hangText "noDerivativeWorks2026:">indicating that the document is in full conformance with all the provisions of Section 10 of RFC 2026 except that the right to produce derivative works is not granted;
none:">indicating that the document is NOT offered in accordance with Section 10 of RFC 2026, and the author does not provide the IETF with any rights other than to publish as an Internet Draft.</t> </list
The figure Element The "figure" element groups an optional "preamble" element, an "artwork" element, and an optional "postamble" element together.
The "figure" element also has an optional "anchor" attribute that is used for cross referencing with the "xref" element (Section 2.3.1.4).
There is also an optional "title" attribute that identifies the title of the figure.
The "preamble" and "postamble" elements, if present, are simply text.
If a cross reference is needed to a section, figure, or reference, the "xref" element (Section 2.3.1.4) is used; similarly, if an external reference is needed, the "eref" element (Section 2.3.1.5) is used.
Indexing of text is provided by the the "iref" element (Section 2.3.1.6).
The "artwork" element, which must be present, contains "ASCII artwork".
Unlike text contained in the "t", "preamble", or "postamble" elements, both horizontal and vertical whitespace is significant in the "artwork" element.
So, putting it all together, we have, e.g., <figure anchor "figure example"
So, putting it all together, we have,
>which is a very simple example.</postamble> </figure
which is a very simple example.
>If you have artwork with a lot of "&lt;" characters, then there's an XML trick you can use:</preamble> <artwork><![CDATA
[ ascii artwork goes here...
" in your artwork! ]]
>" construct is called a CDATA block   everything between the innermost brackets is left alone by the XML application.</postamble> </figure
>" construct is called a CDATA block   everything between the innermost brackets is left alone by the XML application.
Because the "figure" element represents a logical grouping of text and artwork, an XML application producing a text version of the document should attempt to keep these elements on the same page.
Because RFC 2223 [2] allows no more than 69 characters by 49 lines of content on each page, XML applications should be prepared to prematurely introduce page breaks to allow for better visual grouping.
Finally, the "artwork" element has two optional attributes: "name" and "type".
The former is used to suggest a filename to use when storing the content of the "artwork" element, whilst the latter contains a suggestive data typing for the content.
The "xref" element is used to cross reference sections, figures, and references.
The mandatory "target" attribute is used to link back to the "anchor" attribute of the "section", "figure", and "reference" elements.
The value of the "anchor" and "target" attributes should be formatted according to the token syntax in Section 2.1.
then the XML application inserts an appropriate phrase during processing, such as "Section 2.1" or "<a href "#xml basics">XML Basics</a>".
If used with content, e.g., conforming to <xref target "refs.
then the XML application inserts an appropriate designation during processing, such as "RFC 2223 [2]" or "<a href "#refs.
Although the XML application decides what "an appropriate designation" might be, its choice is consistent throughout the processing of the document.
The eref Element The "eref" element is used to reference external documents.
The mandatory "target" attribute is a URI [4], e.g., <eref target "
> Note that while the "target" attribute is always present, the "eref" element may be empty, e.g., <eref target "http://invisible.net/" /
> and the XML application inserts an appropriate designation during processing such as "[9]" or "<a href "http://invisible.net/">http://invisible.net/</a>".
The "iref" element is used to add information to an index.
The mandatory "item" attribute is the primary key the information is stored under, whilst the optional "subitem" attribute is the secondary key, e.g., <iref item "indexing" subitem "how to" /
Finally, note that the "iref" element is always empty   it never contains any text.
The vspace Element The "vspace" element, which may occur only inside the "t" element, is used by the author to provide formatting guidance to the XML application.
There is an attribute, "blankLines", that indicates the number of blank lines that should be inserted.
A physical linebreak is specified by using the default value, "0".
In addition, the "vspace" element can be used to force a new physical paragraph within a list item, e.g., <list style "numbers"> <t
This is part of the same list item, although when displayed, it appears as a separate physical paragraph.</t> </list
An XML application producing a text version of the document should exercise care when encountering a value for "blankLines" that causes a pagebreak   in particular, if a "vspace" element causes a pagebreak, then no further blank lines should be inserted.
This allows authors to "force" a pagebreak by using an arbitrarily large value, e.g., "blankLines '100'".
Finally, note that the "vspace" element is always empty   it never contains any text.
The "back" element consists of an optional "references" element, and, one or more optional "section" elements.
The "back" element itself is optional, if your document doesn't have any references or appendices, you don't have to include it.
The references Element The "references" element contains the document's bibliography.
It contains one or more "reference" elements.
Each "reference" element contains a "front" element and one or more optional "seriesInfo" elements.
We've already discussed the "front" element back in Section 2.2.
The "seriesInfo" element has two attributes, "name" and "value" that identify the document series and series entry, respectively.
The "reference" element has an optional "anchor" attribute that is used for cross referencing with the "xref" element (Section 2.3.1.4), e.g., <reference anchor "refs.
<author initials "J." surname "Postel" fullname "Jon Postel"> <organization abbrev "ISI">
USC/Information Sciences Institute </organization> </author
> <date month "June" year "1997" /
The "reference" element also has an optional "target" attribute that is used for external references (c.f., Section 2.3.1.5).
The XML application, if producing an HTML version of the document will use the "target" attribute accordingly; however, if the "name" attribute of the "seriesInfo" element has the value "RFC", then the XML application should automatically provide an appropriate default for the "target" attribute (e.g., "http://example.com/rfcs/rfc2200.txt").
2.4.2 Appendices To include appendices after the bibliography, simply add more "section" elements.
(For an example, look at the example at the beginning of Section 2.4.)
The copyright status for the document is not included in the document's markup
this is automatically inserted by an XML application that produces either a text or HTML version of the document.
Processing the XML Source File
This section concerns itself with applications that operate on an XML source file.
A lot of XML tools are available, as are many lists of XML resources, e.g., Cafe con Leche [5].
There are two kinds of XML tools: validating and non validating.
Both check that the source file conforms to the rules given in Section 2.1.
However, in addition to making sure that the source file is well formed, a validating tool also reads the DTD referenced by the source file to make sure that they match.
There are a number of both validating and non validating tools available.
There are several XML editors available.
Ideally, you want an editor that validates.
This has two advantages:  the editor provides guidance in fleshing out the document structure; and,
the editor validates that the source file matches the rules in the DTD.
There are two major modes in Emacs that support XML: tdtd [6] and psgml [7].
The latter mode allows you to validate the source file (by calling an external program).
If this doesn't work, try one of the sources above.
The author uses both sgml mode in Emacs, and a commercial validating editor, Clip!
version 1.5 [8], when editing source files.
If your editor doesn't validate, then you should run a program to validate the source file.
The author uses the AlphaWorks XML parser [9] for this purpose.
It requires that your system have a Java virtual machine.
In addition to Java, there are validating parsers written in C, Perl, Python, and Tcl.
3.2 Converting to Text Format
The author has written the xml2rfc tool [10], which reads the source file and produces both a text and HTML version of the document.
(This memo was produced using the xml2rfc tool.)
Note that xml2rfc isn't a validating tool, so it's a good idea to use either a validating editor or run a stand alone validating parser prior to using the tool.
3.3 Converting to HTML Format
The XML Style Language (XSL) is used to describe transformations from the source file into some other structured file.
So, ideally you should use an XSL capable formatter to convert an XML source file to HTML.
However, as of this writing XSL is still in considerable flux.
(Hence, no reference was included in this memo, as by the time you read this section, the reference would be outdated.)
So, in the interim, the author uses the xml2rfc tool for this purpose, even though this tool doesn't provide much flexibility in its HTML layout.
3.4 Viewing Browsers that support either XSL or Cascading Style Sheets (CSS) are able to view the source file directly.
At present, the author doesn't use any of these browsers, instead converting source files to either text or HTML.
As with text editors, any text oriented search tool (e.g., grep) can be used on the source file.
However, there are search tools available that understand structured source.
This memo raises no security issues; however, according to <xref target "refs.
, your document should contain a section near the end that discusses the security considerations of the protocol or procedures that are the main topic of your document.</t> </section
The "<rfc>" tag at the beginning of the file, with only an "ipr" attribute (Section 2.2.7.1), produces an Internet Draft.
At a minimum, the "number" attribute should be present.
The other attributes are:  "obsoletes", having a comma separated list of RFC numbers, that the document obsoletes;  "updates", having a comma separated list of RFC numbers, that the document updates;  "category", having one of these values: 1.
"std", for a Standards Track document; 2.
"bcp", "for a Best Current Practices document; 3.
"exp", for an Experimental Protocol document; 4.
"historic", for a historic document; or, 5.
"info", the default, for an Informational document.
"seriesNo", having the corresponding number in the STD (std), BCP (bcp), or FYI (info) series.
Finally, a special entity, "&rfc.number;", is available.
Authors preparing an RFC should use this entity whenever they want to reference the number of the RFC within the document itself.
In printed versions of the document, the appropriate substitution (or "XXXX") will occur.
DTD for the RFC document series, draft of 99 01 30
The top level Front matter
attributes for the "rfc" element are supplied by the RFC editor.
when preparing drafts, authors should leave them blank.
the "seriesNo" attribute is used if the category is, e.g., BCP.
the "abbrev" attribute is used for headers, etc.
(street ,(city region code country) )
I indexing how to  16
