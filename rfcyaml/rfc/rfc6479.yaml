- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          X. Zhang
  contents:
  - "Independent Submission                                          X. Zhang\n  \
    \          IPsec Anti-Replay Algorithm without Bit Shifting\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents an alternate method to do the anti-replay\n\
    \   checks and updates for IP Authentication Header (AH) and\n   Encapsulating\
    \ Security Protocol (ESP).  The method defined in this\n   document obviates the\
    \ need for bit shifting and it reduces the number\n   of times an anti-replay\
    \ window is adjusted.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6479.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Description of New Anti-Replay Algorithm ........................3\n  \
    \ 3. Example of New Anti-Replay Algorithm ............................5\n   4.\
    \ Security Considerations .........................................9\n   5. Normative\
    \ References ............................................9\n   6. Acknowledgements\
    \ ................................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"IP Authentication Header\" [RFC4302] and \"IP Encapsulating\
    \ Security\n   Payload (ESP)\" [RFC4303] define an anti-replay service that employs\
    \ a\n   sliding window mechanism.  The mechanism, when enabled by a receiver,\n\
    \   uses an anti-replay window of size W.  This window limits how far out\n  \
    \ of order a packet can be, relative to the packet with the highest\n   sequence\
    \ number that has been authenticated so far.  The window can\n   be represented\
    \ by a range [WB, WT], where WB=WT-W+1.  The whole\n   anti-replay window can\
    \ be thought of as a string of bits.  The value\n   of each bit indicates whether\
    \ or not a packet with that sequence\n   number has been received and authenticated,\
    \ so that the replay packet\n   can be detected and rejected.  If the packet is\
    \ received, the\n   receiver gets the sequence number S in the packet.  If S is\
    \ inside\n   window (S<=WT and S>=WB), then the receiver checks the corresponding\n\
    \   bit (location is S-WB) in the window to see if this S has already\n   been\
    \ seen.  If S<WB, the packet is dropped.  If S>WT and is\n   validated, the window\
    \ is advanced by (S-WT) bits.  The new window\n   becomes [WB+S-WT, S].  The new\
    \ bits in this new window are set to\n   indicate that no packets with those sequence\
    \ numbers have been\n   received.  The typical implementation (for example, the\
    \ integrity\n   algorithm [RFC4302]) is done by shifting (S-WT) bits.  In normal\n\
    \   cases, the packets arrive in order, which results in continuous\n   updates\
    \ and bit-shifting operations.\n   [RFC4302] and [RFC4303] define minimum window\
    \ sizes of 32 and 64.\n   But no requirement is established for minimum or recommended\
    \ window\n   sizes beyond 64 packets.  The window size needs to be based on\n\
    \   reasonable expectations for packet re-ordering.  For a high-end,\n   multi-core\
    \ network processor with multiple crypto cores, a window\n   size bigger than\
    \ 64 or 128 is needed due to the varied IPsec\n   processing latency caused by\
    \ different cores.  In such a case, the\n   window sliding is tremendously costly\
    \ even with hardware acceleration\n   to do the bit shifting.  This document describes\
    \ an alternate method\n   to avoid bit shifting.  It only discusses the anti-replay\
    \ processing\n   at the receiving side.  The processing is always safe and has\
    \ no\n   interoperability effects.  Even with a window size bigger than the\n\
    \   usual 32- or 64-bit window, no interoperability issues are caused.\n   Any\
    \ node employing practices that potentially cause reordering beyond\n   the usual\
    \ 32- or 64-bit window may lead to interoperability or\n   performance problems,\
    \ however.  For instance, if either the sending\n   node or routers along the\
    \ path cause significant re-ordering, this\n   can lead to inability of the receiving\
    \ IPsec endpoint to process the\n   packets, as many current implementations do\
    \ not support the\n   extensions defined in this memo.  Similarly, such reordering\
    \ can\n   cause significant problems for transport and upper-layer protocols,\n\
    \   and is generally best avoided.\n"
- title: 2.  Description of the New Anti-Replay Algorithm
  contents:
  - "2.  Description of the New Anti-Replay Algorithm\n   Here we present an easy\
    \ way to update the window index only, while\n   also reducing the number window\
    \ updates.  The basic idea is\n   illustrated in the following figures.  Suppose\
    \ that we configure the\n   window size W, which consists of M-1 blocks, where\
    \ M is a power of\n   two (2).  Each block contains N bits, where N is also a\
    \ power of two\n   (2).  It can be a byte (8 bit) or word (32 bit), or multiple\
    \ words.\n   The supported sliding window size is (M-1)*N.  However, it covers\
    \ up\n   M blocks (four blocks as shown in Figure 1).  All these M blocks are\n\
    \   circulated and become a ring of blocks, each with N bits.  In this\n   way,\
    \ the supported sliding window (M-1 blocks) is always a subset\n   window of the\
    \ actual window when the window slides.\n   Initially, the actual window is defined\
    \ by a low- and high-end index\n   [WB, WT], as illustrated in Figure 1.\n   \
    \   +--------+--------+--------+--------+\n      |xxxxxxcc|cccccccc|cccccccc|ccccc100|\n\
    \      +--------+--------+--------+--------+\n             ^                 \
    \        ^\n             |                         |\n             WB        \
    \                WT\n      Figure 1: The sliding window [WB, WT] in which WT is\
    \ the last\n      validated sequence number, and the supported window size W is\n\
    \      WT-WB+1.  (x=don't care bit, c=check bit)\n   If we receive a packet with\
    \ the sequence number (S) greater than WT,\n   we slide the window.  But we only\
    \ change the window index by adding\n   the difference (S-WT) to both WT and WB\
    \ (WB is automatically changed\n   as the window size is fixed).  So, S becomes\
    \ the largest sequence\n   number of the received packets.  Figure 2 shows the\
    \ case that the\n   packet with sequence number S=WT+1 is received.\n   +--------+--------+--------+--------+\n\
    \   |xxxxxxcc|cccccccc|cccccccc|ccccc110|\n   +--------+--------+--------+--------+\n\
    \           ^                         ^\n           |                        \
    \ |\n           WB                        WT\n      Figure 2: The sliding window\
    \ [WB, WT] after S=WT+1\n   If S is in a different block from where WT is, we\
    \ have to initialize\n   all bit values in the blocks to 0 without bit shifting.\
    \  If S passes\n   several blocks, we have to initialize several blocks instead\
    \ of only\n   one block.  Figure 3 shows that the sequence number already passed\n\
    \   the block boundary.  Immediately after the update, all the check bits\n  \
    \ should be 0 in the block where WT resides.\n   +--------+--------+--------+--------+\n\
    \   |ccc10000|xxxxcccc|cccccccc|cccccccc|\n   +--------+--------+--------+--------+\n\
    \       ^         ^\n       |         |\n       WT        WB\n      Figure 3:\
    \ The sliding window [WB, WT] after S passes the boundary\n   After the update,\
    \ the new window still covers the configured window.\n   This means the configured\
    \ sub-window also slides, conforming to the\n   sliding window protocol.  The\
    \ actual effect is somewhat like\n   shifting the block.  In this way, the bit\
    \ shifting is deemed\n   unnecessary.\n   It is also easier and much faster to\
    \ check the window with the\n   sequence number because the sequence number check\
    \ does not\n   depend on the lowest index WB.  Instead, it only depends on the\n\
    \   sequence number of the received packet.  If we receive a sequence\n   number\
    \ S, the bit location is the lowest several bits of the\n   sequence number, which\
    \ only depends on the block size (N).  The\n   block index is several bits before\
    \ the location bits, which only\n   depends on the window size (M).\n   We do\
    \ not specify how many redundancy bits are needed, except that\n   it should be\
    \ a power of two (2) for computation efficiency.  If the\n   microprocessor is\
    \ 32 bits, 32 might be a better choice while 64\n   might be better for 64-bit\
    \ microprocessor.  For a microprocessor\n   with cache support, one cache line\
    \ is also a good choice.  It also\n   depends on the size of the sliding window.\
    \  If we have N\n   redundancy bits (for example, 32 bits in the above description),\n\
    \   we only need 1/N times update of blocks, comparing to the\n   bit-shifting\
    \ algorithm in [RFC4302].\n   The cost of this method is extra byte(s) being used\
    \ as a redundant\n   window.  The cost will be minimal if the window size is big\
    \ enough.\n   Actually, the extra redundant bits are not completely wasted.  We\n\
    \   could reuse the unused bits in the block where index WB resides,\n   i.e.,\
    \ the supported window size could be (M-1)*N, plus the unused\n   bits in the\
    \ last block.\n"
- title: 3.  Example of the New Anti-Replay Algorithm
  contents:
  - "3.  Example of the New Anti-Replay Algorithm\n   Here is the example code to\
    \ implement the algorithm of anti-replay\n   checks and updates, which is described\
    \ in the previous sections.\n"
- title: <CODE BEGINS>
  contents:
  - '<CODE BEGINS>

    '
- title: /**
  contents:
  - "/**\n * Copyright (c) 2012 IETF Trust and the persons identified as\n * authors\
    \ of the code. All rights reserved.\n *\n * Redistribution and use in source and\
    \ binary forms, with or without\n * modification, is permitted pursuant to, and\
    \ subject to the license\n * terms contained in, the Simplified BSD License set\
    \ forth in Section\n * 4.c of the IETF Trust's Legal Provisions Relating to IETF\
    \ Documents\n * (http://trustee.ietf.org/license-info).\n *\n */\n"
- title: /**
  contents:
  - "/**\n * In this algorithm, the hidden window size must be a power of two,\n *\
    \ for example, 1024 bits.  The redundant bits must also be a power of\n * two,\
    \ for example 32 bits.  Thus, the supported anti-replay window\n * size is the\
    \ hidden window size minus the redundant bits.  It is 992\n * in this example.\
    \  The size of the integer depends on microprocessor\n * architecture.  In this\
    \ example, we assume that the software runs on\n * a 32-bit microprocessor.  So\
    \ the size of the integer is 32.  In order\n * to convert the bitmap into an array\
    \ of integers, the total number of\n * integers is the hidden window size divided\
    \ by the size of the\n * integer.\n *\n * struct ipsec_sa contains the window\
    \ and window related parameters,\n * such as the window size and the last acknowledged\
    \ sequence number.\n *\n * all the value of macro can be changed, but must follow\
    \ the rule\n * defined in the algorithm.\n */\n"
- title: '#define SIZE_OF_INTEGER       32 /** 32-bit microprocessor */'
  contents:
  - '#define SIZE_OF_INTEGER       32 /** 32-bit microprocessor */

    '
- title: '#define BITMAP_LEN            (1024/ SIZE_OF_INTEGER)'
  contents:
  - "#define BITMAP_LEN            (1024/ SIZE_OF_INTEGER)\n                     \
    \           /** in terms of the 32-bit integer */\n"
- title: '#define BITMAP_INDEX_MASK     (IPSEC_BITMAP_LEN-1)'
  contents:
  - '#define BITMAP_INDEX_MASK     (IPSEC_BITMAP_LEN-1)

    '
- title: '#define REDUNDANT_BIT_SHIFTS  5'
  contents:
  - '#define REDUNDANT_BIT_SHIFTS  5

    '
- title: '#define REDUNDANT_BITS        (1<<REDUNDANT_BIT_SHIFTS)'
  contents:
  - '#define REDUNDANT_BITS        (1<<REDUNDANT_BIT_SHIFTS)

    '
- title: '#define BITMAP_LOC_MASK       (IPSEC_REDUNDANT_BITS-1)'
  contents:
  - '#define BITMAP_LOC_MASK       (IPSEC_REDUNDANT_BITS-1)

    '
- title: int
  contents:
  - 'int

    '
- title: ipsec_check_replay_window (struct ipsec_sa *ipsa,
  contents:
  - "ipsec_check_replay_window (struct ipsec_sa *ipsa,\n                         \
    \  uint32_t sequence_number)\n"
- title: '{'
  contents:
  - "{\n    int bit_location;\n    int index;\n    /**\n     * replay shut off\n \
    \    */\n    if (ipsa->replaywin_size == 0) {\n        return 1;\n    }\n    /**\n\
    \     * first == 0 or wrapped\n     */\n    if (sequence_number == 0) {\n    \
    \    return 0;\n    }\n    /**\n     * first check if the sequence number is in\
    \ the range\n     */\n    if (sequence_number>ipsa->replaywin_lastseq) {\n   \
    \     return 1;  /** larger is always good */\n    }\n    /**\n     * The packet\
    \ is too old and out of the window\n     */\n    if ((sequence_number + ipsa->replaywin_size)\
    \ <\n        ipsa->replaywin_lastseq) {\n          return 0;\n    }\n    /**\n\
    \     * The sequence is inside the sliding window\n     * now check the bit in\
    \ the bitmap\n     * bit location only depends on the sequence number\n     */\n\
    \    bit_location = sequence_number&BITMAP_LOC_MASK;\n    index = (sequence_number>>REDUNDANT_BIT_SHIFTS)&BITMAP_INDEX_MASK;\n\
    \    /*\n     * this packet has already been received\n     */\n    if (ipsa->replaywin_bitmap[index]&(1<<bit_location))\
    \ {\n        return 0;\n    }\n    return 1;\n"
- title: '}'
  contents:
  - '}

    '
- title: int
  contents:
  - 'int

    '
- title: ipsec_update_replay_window (struct ipsec_sa *ipsa,
  contents:
  - "ipsec_update_replay_window (struct ipsec_sa *ipsa,\n                        \
    \    uint32_t sequence_number)\n"
- title: '{'
  contents:
  - "{\n    int bit_location;\n    int index, index_cur, id;\n    int diff;\n    if\
    \ (ipsa->replaywin_size == 0) {  /** replay shut off */\n        return 1;\n \
    \   }\n    if (sequence_number == 0) {\n        return 0;     /** first == 0 or\
    \ wrapped */\n    }\n    /**\n     * the packet is too old, no need to update\n\
    \     */\n    if ((ipsa->replaywin_size + sequence_number) <\n        ipsa->replaywin_lastseq)\
    \ {\n           return 0;\n    }\n    /**\n     * now update the bit\n     */\n\
    \    index = (sequence_number>>REDUNDANT_BIT_SHIFTS);\n"
- title: /**
  contents:
  - "/**\n * first check if the sequence number is in the range\n */\n"
- title: if (sequence_number>ipsa->replaywin_lastseq) {
  contents:
  - "if (sequence_number>ipsa->replaywin_lastseq) {\n    index_cur = ipsa->replaywin_lastseq>>REDUNDANT_BIT_SHIFTS;\n\
    \    diff = index - index_cur;\n    if (diff > BITMAP_LEN) {  /* something unusual\
    \ in this case */\n        diff = BITMAP_LEN;\n    }\n    for (id = 0; id < diff;\
    \ ++id) {\n        ipsa->replaywin_bitmap[(id+index_cur+1)&BITMAP_INDEX_MASK]\n\
    \            = 0;\n    }\n    ipsa->replaywin_lastseq = sequence_number;\n"
- title: '}'
  contents:
  - "}\n    index &= BITMAP_INDEX_MASK;\n    bit_location = sequence_number&BITMAP_LOC_MASK;\n\
    \    /* this packet has already been received */\n    if (ipsa->replaywin_bitmap[index]&(1<<bit_location))\
    \ {\n    return 0;\n"
- title: '}'
  contents:
  - "}\n    ipsa->replaywin_bitmap[index] |= (1<<bit_location);\n    return 1;\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n    This document does not change [RFC4302] or [RFC4303].\
    \  It provides\n    an alternate method for anti-replay.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n    The idea in this document came from the software design\
    \ on one\n    high-performance multi-core network processor.  The new network\n\
    \    processor core integrates a dozen of crypto core in a distributed\n    way,\
    \ which makes hardware anti-replay service impossible.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [RFC4302]  Kent, S., \"IP Authentication Header\"\
    , RFC 4302, December\n              2005.\n   [RFC4303]  Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\", RFC\n              4303, December 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Xiangyang Zhang\n   Futurewei Technologies\n   2330 Central\
    \ Expressway\n   Santa Clara, California  95051\n   USA\n   Phone: +1-408-330-4545\n\
    \   EMail: xiangyang.zhang@huawei.com\n   Tina Tsou (Ting Zou)\n   Futurewei Technologies\n\
    \   2330 Central Expressway\n   Santa Clara, California  95051\n   USA\n   Phone:\
    \ +1-408-859-4996\n   EMail: tena@huawei.com\n"
