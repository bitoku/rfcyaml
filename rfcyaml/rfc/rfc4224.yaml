- title: __initial_text__
  contents:
  - "                   RObust Header Compression (ROHC):\n              ROHC over\
    \ Channels That Can Reorder Packets\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   RObust Header Compression (ROHC), RFC 3095, defines a framework\
    \ for\n   header compression, along with a number of compression protocols\n \
    \  (profiles).  One operating assumption for the profiles defined in RFC\n   3095\
    \ is that the channel between compressor and decompressor is\n   required to maintain\
    \ packet ordering.  This document discusses\n   aspects of using ROHC over channels\
    \ that can reorder packets.  It\n   provides guidelines on how to implement existing\
    \ profiles over such\n   channels, as well as suggestions for the design of new\
    \ profiles.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Applicability of This Document to ROHC Profiles .................5\n    \
    \  3.1. Profiles within Scope ......................................5\n      3.2.\
    \ Profiles with Special Considerations .......................5\n      3.3. Profiles\
    \ Incompatible with Reordering ......................6\n   4. Background ......................................................6\n\
    \      4.1. Reordering Channels ........................................6\n  \
    \    4.2. Robustness Principles of ROHC ..............................6\n    \
    \       4.2.1. Optimistic Approach (U/O-mode) ......................7\n      \
    \     4.2.2. Secure Reference Principle (R-mode) .................7\n   5. Problem\
    \ Description .............................................7\n      5.1. ROHC\
    \ and Reordering Channels ...............................7\n           5.1.1.\
    \ LSB Interpretation Interval and Reordering ..........7\n           5.1.2. Reordering\
    \ of Packets in R-mode .....................9\n                  5.1.2.1. Updating\
    \ Packets ...........................9\n                  5.1.2.2. Non-Updating\
    \ Packets ......................10\n           5.1.3. Reordering of Packets in\
    \ U/O-mode ..................10\n           5.1.4. Reordering on the Feedback\
    \ Channel .................11\n           5.1.5. List Compression ...................................11\n\
    \           5.1.6. Reordering and Mode Transitions ....................12\n  \
    \    5.2. Consequences of Reordering ................................13\n    \
    \       5.2.1. Functionality Incompatible with Reordering .........13\n      \
    \     5.2.2. Context Damage (Loss of Synchronization) ...........13\n        \
    \   5.2.3. Detected Decompression Failures (U/O/R-mode) .......13\n          \
    \ 5.2.4. Undetected Decompression Failures (R-mode only) ....14\n   6. Making\
    \ ROHC Tolerant against Reordering ........................14\n      6.1. Properties\
    \ of ROHC Implementations ........................14\n           6.1.1. Compressing\
    \ Headers with Robustness against\n                  Reordering .........................................14\n\
    \                  6.1.1.1. Reordering and the Optimistic Approach ....15\n  \
    \                6.1.1.2. Reordering and the Secure\n                        \
    \   Reference Principle .......................15\n                  6.1.1.3.\
    \ Robust Selection of Compressed Header .....15\n           6.1.2. Implementing\
    \ a Reordering-Tolerant Decompressor ....16\n                  6.1.2.1. Decompressor\
    \ Feedback Considerations ......16\n                  6.1.2.2. Considerations\
    \ for Local Repair\n                           Mechanisms ................................17\n\
    \      6.2. Specifying ROHC Profiles with Robustness against\n           Reordering\
    \ ................................................17\n           6.2.1. Profiles\
    \ with Interpretation Interval\n                  Offset p = -1 ......................................17\n\
    \           6.2.2. Modifying the Interpretation Interval Offset .......18\n  \
    \                6.2.2.1. Example Profile for Handling Reordering ...18\n    \
    \              6.2.2.2. Defining the Values of p for New\n                   \
    \        Profiles ..................................18\n   7. Security Considerations\
    \ ........................................19\n   8. Acknowledgements ...............................................19\n\
    \   9. Informative References .........................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RObust Header Compression (ROHC), RFC 3095 [1], defines\
    \ a framework\n   for header compression, along with a number of compression protocols\n\
    \   (profiles).  One operating assumption for the profiles defined in RFC\n  \
    \ 3095 is that the channel between compressor and decompressor is\n   required\
    \ to maintain packet ordering for each compressed flow.  The\n   motivation behind\
    \ this assumption was that the primary candidate\n   channels considered did guarantee\
    \ in-order delivery of header-\n   compressed packets.  This assumption made it\
    \ possible to meet the\n   design objectives that were on top of the requirements\
    \ list at the\n   time when ROHC was being designed, namely to improve the compression\n\
    \   efficiency and the tolerance to packet losses.\n   Since the publication of\
    \ RFC 3095 in 2001, the question about ROHC\n   operation over channels that do\
    \ not guarantee in-order delivery has\n   surfaced several times; arguments that\
    \ ROHC cannot perform adequately\n   over such channels have been heard.  Specifically,\
    \ this has been\n   raised as a weakness when compared to other header compression\n\
    \   alternatives, as RFC 3095 explicitly states its inability to operate\n   if\
    \ in-order delivery is not guaranteed.  For those familiar with the\n   details\
    \ of ROHC and of other header compression schemes, it is clear\n   that this is\
    \ a misconception, but it can also be easily understood\n   that the wording used\
    \ in RFC 3095 can lead to such interpretation.\n   This document discusses the\
    \ various aspects of implementing ROHC over\n   channels that can reorder header-compressed\
    \ packets.  It explains\n   different ways of implementing the profiles found\
    \ in RFC 3095, as\n   well as other profiles based on those profiles, over reordering\n\
    \   channels.  This can be achieved either by ensuring that compressor\n   implementations\
    \ use compressed headers that are sufficiently robust\n   to the expected possible\
    \ reordering and/or by modifying decompressor\n   implementations to tolerate\
    \ reordered packets.  Ideas regarding how\n   existing profiles could be updated\
    \ and how new profiles can be\n   defined to cope efficiently with reordering\
    \ are also discussed.\n   In some scenarios, there might be external means (such\
    \ as a sequence\n   number) to detect and potentially correct reordering.  That\
    \ is, for\n   example, the case when running compression over an IPsec\n   Encapsulating\
    \ Security Payload (ESP) tunnel.  With such external\n   means to detect reordering,\
    \ the decompressor can be modified to make\n   use of the external information\
    \ provided, and reordering can then be\n   handled.  How to make use of external\
    \ means to address reordering is,\n   however, out of scope for this document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses terminology consistent with RFC 3759 [2],\
    \ and is\n   in itself only informative.  Although it does discuss technical\n\
    \   aspects of implementing the ROHC specifications in particular\n   environments,\
    \ it does not specify any new technology.\n   ROHC\n      The term \"ROHC\" herein\
    \ refers to the following profiles:\n         - 0x0001, 0x0002, and 0x0003 defined\
    \ in RFC 3095 [1];\n         - 0x0004 for compression of IP-only headers [3];\n\
    \         - 0x0007 and 0x0008 for compression of UDP-Lite headers [4].\n     \
    \ The term \"ROHC\" excludes the following profiles, which are either\n      not\
    \ affected by reordering or have the assumption of in-order\n      delivery as\
    \ a fundamental requirement for their proper operation:\n         - 0x0000 (uncompressed)\
    \ [1];\n         - 0x0005 (Link-Layer Assisted (LLA)) [5] and 0x0105\n       \
    \    (R-mode extension to LLA) [6];\n   Reordering\n      A type of transmission\
    \ taking place between compressor and\n      decompressor where in-order delivery\
    \ of header-compressed packets\n      is not guaranteed.\n   Reordering channel\n\
    \      A connection over which reordering, as defined above, can occur.\n   Sequentially\
    \ early packet\n      A packet that reaches the decompressor before one or several\n\
    \      packets of the same context identifier (CID) that were delayed on\n   \
    \   the link.  At the time of the arrival of a sequentially early\n      packet,\
    \ the packet(s) delayed on the link cannot be differentiated\n      from lost\
    \ packet(s).\n   Sequentially late packet\n      A packet is late within its sequence\
    \ if it reaches the\n      decompressor after one or several other packets belonging\
    \ to the\n      same CID have been received, although the sequentially late packet\n\
    \      was sent from the compressor before the other packet(s).\n   Updating packet\n\
    \      A packet that updates the context of the decompressor, e.g., all\n    \
    \  packets except R-0 and R-1* in RFC 3095 [1].\n   Non-updating packet\n    \
    \  A packet that does not update the context of the decompressor,\n      e.g.,\
    \ only R-0 and R-1* in RFC 3095 [1].\n   Change packet\n      A packet that updates\
    \ one or more fields of the context other than\n      the fields pertaining to\
    \ the functions established with respect to\n      the sequence number (SN). \
    \ Specifically, it is a packet that\n      updates fields other than the SN, the\
    \ IPv4 identifier (IP-ID), the\n      sequence number of an extension header or\
    \ the RTP timestamp (TS).\n"
- title: 3.  Applicability of This Document to ROHC Profiles
  contents:
  - "3.  Applicability of This Document to ROHC Profiles\n   This document addresses\
    \ general reordering issues for ROHC profiles.\n   The foremost objectives are\
    \ to ensure that ROHC implementations do\n   not forward packets with incorrectly\
    \ decompressed headers to upper\n   layers, as well as to limit the possible increase\
    \ in the rate of\n   decompression failures or in events leading to context damage,\
    \ when\n   compression is applied over reordering channels.\n"
- title: 3.1.  Profiles within Scope
  contents:
  - "3.1.  Profiles within Scope\n   The following sections outline solutions that\
    \ are generally\n   applicable to profiles 0x0001 (RTP), 0x0002 (UDP), and 0x0003\
    \ (ESP)\n   defined in RFC 3095 [1].  Profile 0x0000 (uncompressed) is not\n \
    \  affected by reordering, as the headers are sent uncompressed.  The\n   solutions\
    \ also apply to profiles for IP-only (0x0004) [3] and for\n   UDP-Lite (0x0007\
    \ and 0x0008) [4].  These profiles are based on the\n   profiles of RFC 3095 [1]\
    \ and inherently make the same in-order\n   delivery assumption.\n"
- title: 3.2.  Profiles with Special Considerations
  contents:
  - "3.2.  Profiles with Special Considerations\n   Special considerations are needed\
    \ to make some of the implementation\n   solutions of sections 6.1 and 6.2 applicable\
    \ to profiles 0x0002 (UDP)\n   [1], 0x0004 (IP-only) [3], and 0x0008 (UDP-Lite)\
    \ [4].  For these\n   profiles, the SN is generated at the compressor, as it is\
    \ not present\n   in headers being compressed.  For the least significant bit\
    \ (LSB)\n   encoding method, the interpretation interval offset (p) is always\n\
    \   p = -1 (see section 5.1.1) when interpreting the SN.  The SN is thus\n   required\
    \ to increase for each packet received at the decompressor,\n   which means that\
    \ reordered packets cannot be decompressed.\n"
- title: 3.3.  Profiles Incompatible with Reordering
  contents:
  - "3.3.  Profiles Incompatible with Reordering\n   The ROHC LLA profiles defined\
    \ in RFC 3242 [5] and RFC 3408 [6] have\n   been explicitly designed with in-order\
    \ delivery as a fundamental\n   requirement to their proper operation.  Profiles\
    \ 0x0005 and 0x0105\n   can therefore not be implemented over channels where reordering\
    \ can\n   occur; this document therefore does not apply to these profiles.\n"
- title: 4.  Background
  contents:
  - "4.  Background\n   ROHC was designed with the assumption that packets are delivered\
    \ in\n   order from compressor to decompressor.  This was considered as a\n  \
    \ reasonable working assumption for links where it was expected that\n   ROHC\
    \ would be used.  However, many have expressed that it would be\n   desirable\
    \ to use ROHC also over connections where in-order delivery\n   is not guaranteed\
    \ [7].\n"
- title: 4.1.  Reordering Channels
  contents:
  - "4.1.  Reordering Channels\n   The reordering channels that are potential candidates\
    \ to use ROHC are\n   single-hop channels and multi-hop virtual channels.\n  \
    \ A single-hop channel is a point-to-point link that constitutes a\n   single\
    \ IP hop.  Note that one IP hop could be one or multiple\n   physical links. \
    \ For example, a single-hop reordering channel could\n   be a wireless link that\
    \ applies error detection and performs\n   retransmissions to guarantee error-free\
    \ delivery of all data.\n   Another example could be a wireless connection that\
    \ performs\n   bicasting of data during a handoff procedure.\n   A multi-hop virtual\
    \ channel is a virtual point-to-point link that\n   traverses multiple IP hops.\
    \  A multi-hop virtual channel would\n   typically be an IP tunnel, where compression\
    \ is applied over the\n   tunnel by the endpoints of the tunnel (not to be confused\
    \ with single\n   link compression of tunneled packets).\n"
- title: 4.2.  Robustness Principles of ROHC
  contents:
  - "4.2.  Robustness Principles of ROHC\n   Robustness is based on the optimistic\
    \ approach in the unidirectional\n   and optimistic modes of operation (U/O-mode),\
    \ and on the secure\n   reference principle in the bidirectional reliable mode\
    \ (R-mode).\n   Both approaches have different characteristics in the presence\
    \ of\n   reordering between compressor and decompressor.  However, in any\n  \
    \ mode, decompression of sequentially early packets will generally be\n   handled\
    \ quite well since they will be perceived and treated by the\n   decompressor\
    \ as if there had been one or more packet losses.\n"
- title: 4.2.1.  Optimistic Approach (U/O-mode)
  contents:
  - "4.2.1.  Optimistic Approach (U/O-mode)\n   A ROHC compressor uses the optimistic\
    \ approach to reduce header\n   overhead when performing context updates in U/O-mode.\
    \  The compressor\n   normally repeats the same update until it is fairly confident\
    \ that\n   the decompressor has successfully received the information.  The\n\
    \   number of consecutive packets needed to obtain this confidence is\n   open\
    \ to implementations, and this number is normally related to the\n   packet loss\
    \ characteristics of the link where header compression is\n   used (see also [1],\
    \ section 5.3.1.1.1).\n   All packet types used in U/O-mode are context updating.\n"
- title: 4.2.2.  Secure Reference Principle (R-mode)
  contents:
  - "4.2.2.  Secure Reference Principle (R-mode)\n   A ROHC compressor uses the secure\
    \ reference principle in R-mode to\n   ensure that context synchronization between\
    \ ROHC peers cannot be lost\n   due to packet losses.  The compressor obtains\
    \ its confidence that the\n   decompressor has successfully updated the context\
    \ from a packet\n   carrying a 7- or 8-bit Cyclic Redundancy Check (CRC) based\
    \ on\n   acknowledgements received from the decompressor (see also [1],\n   section\
    \ 5.5.1.2).\n   The secure reference principle makes it possible for a compressor\
    \ to\n   use packets that do not update the context (i.e., R-0 and R-1* [1]).\n"
- title: 5.  Problem Description
  contents:
  - '5.  Problem Description

    '
- title: 5.1.  ROHC and Reordering Channels
  contents:
  - "5.1.  ROHC and Reordering Channels\n   This section reviews different aspects\
    \ of ROHC susceptible of being\n   impacted by reordering of compressed packets\
    \ between ROHC peers.\n"
- title: 5.1.1.  LSB Interpretation Interval and Reordering
  contents:
  - "5.1.1.  LSB Interpretation Interval and Reordering\n   The least significant\
    \ bit (LSB) encoding method defined in RFC 3095\n   ([1], section 5.7) specifies\
    \ the interpretation interval offset,\n   called p, as follows:\n   For profiles\
    \ 0x0001, 0x0003, and 0x0007:\n      p = 1, when bits(SN) <= 4;\n      p = 2^(bits(SN)-5)\
    \ - 1 otherwise.\n      The resulting table describing the interpretation interval\
    \ is as\n      follows:\n         +-----------+--------------+--------------+\n\
    \         | bits (SN) |   Offset p   | (2^k-1) - p  |\n         |     k     |\
    \ (reordering) |   (losses)   |\n         +-----------+--------------+--------------+\n\
    \         |     4     |      1       |      14      |\n         |     5     |\
    \      0       |      31      |\n         |     6     |      1       |      62\
    \      |\n         |     7     |      3       |      124     |\n         |   \
    \  8     |      7       |      248     |\n         |     9     |      15     \
    \ |      496     |\n         +-----------+--------------+--------------+\n   \
    \   As shown in the table above, the ability for ROHC to handle\n      sequentially\
    \ late packets depends on the number of bits sent in\n      each packet.  For\
    \ example, a sequentially late packet of type 0\n      (with either 4 or 6 bits\
    \ of SN) sets the limit to one packet out\n      of sequence for successful decompression\
    \ to be possible.\n   For profiles 0x0002, 0x0004, and 0x0008:\n      p = - 1,\
    \ independently of bits(SN).\n      A value of p = -1 means that the interpretation\
    \ interval offset\n      can only take positive values and that no sequentially\
    \ late packet\n      can be decompressed if reordering occurs over the link.\n\
    \   The trade-off between reordering and robustness\n      The ability of ROHC\
    \ to handle sequentially late packets is limited\n      by the interpretation\
    \ interval offset of the sliding window used\n      for LSB encoding.  This offset\
    \ has a very small value for packets\n      with a small number of sequence number\
    \ (SN) bits, but grows with\n      the number of SN bits transmitted.\n      For\
    \ channels where both packet losses and reordering can occur,\n      modifications\
    \ to the interpretation interval face a trade-off\n      between the amount of\
    \ reordering and the number of consecutive\n      packet losses that can be handled\
    \ by the decompressor.  If the\n      negative offset (i.e., p) is increased to\
    \ handle a larger amount\n      of reordering, the value of the positive offset\
    \ of the\n      interpretation interval must be decreased.  This may impact the\n\
    \      compression efficiency when the channel has a high loss rate.\n      This\
    \ is shown in the figure:\n        <--- interpretation interval (size is 2^k)\
    \ ---->\n        |------------------+---------------------------|\n      Lower\
    \              v_ref                       Upper\n      Bound                \
    \                          Bound\n        <--- reordering --> <--------- losses\
    \ --------->\n         max delta(SN) = p   max delta(SN) = (2^k-1) - p\n     \
    \   where v_ref is the reference value as per [1], section 4.5.1.\n      In practice,\
    \ the maximum variation in SN value (max delta(SN)) due\n      to reordering that\
    \ can be handled will normally correspond to the\n      maximum number of packets\
    \ that can be reordered.  The same applies\n      to the maximum number of consecutive\
    \ packet losses covered by the\n      robustness interval.\n   Timer-based compression\
    \ of RTP TS (see [1], section 4.5.4) provides\n   means to reduce the number of\
    \ timestamp bits needed in compressed\n   headers after longer gaps in the packet\
    \ stream (e.g., for an audio\n   stream, this is typically due to silence suppression).\
    \  To use\n   timer-based compression, an upper limit on the inter-arrival jitter\n\
    \   must be reliably estimated by the compressor.  It should be noted\n   that\
    \ although the risk of reordering of course means there is a more\n   significant\
    \ jitter on the path between the compressor and the\n   decompressor, there are\
    \ no special reordering considerations for\n   timer-based compression.  It all\
    \ still boils down to the task of\n   estimating the jitter, requiring channel\
    \ characteristics knowledge at\n   the compressor, and/or jitter estimation figures\
    \ received from the\n   decompressor.\n"
- title: 5.1.2.  Reordering of Packets in R-mode
  contents:
  - '5.1.2.  Reordering of Packets in R-mode

    '
- title: 5.1.2.1.  Updating Packets
  contents:
  - "5.1.2.1.  Updating Packets\n   The compressor always adds references in the sliding\
    \ window for all\n   updating packets sent.  The compressor removes values older\
    \ than\n   values for which it has received an acknowledgement to shrink the\n\
    \   window and thereby increase the compression efficiency.\n   The decompressor\
    \ always updates the context when receiving an\n   updating packet and uses the\
    \ new reference for decompression.\n   Acknowledgements are sent to allow the\
    \ compressor to shrink its\n   sliding window.\n   Reordering between updating\
    \ packets\n      The decompressor can update its context from the reception of\
    \ a\n      sequentially late updating packet.  The decompressor reference is\n\
    \      then updated with a value that is no longer in the sliding window\n   \
    \   of the compressor.  This \"missing reference\" can be caused by\n      reordering\
    \ when operating in R-mode.\n      The result is that the compressor and the decompressor\
    \ lose\n      synchronization with each other.  When the decompressor\n      acknowledges\
    \ the sequentially late packet, the compressor might\n      already have discarded\
    \ the reference to this sequence number, and\n      continue to compress packets\
    \ based on more recent references (in\n      packet arrival time).  Decompression\
    \ will then be attempted using\n      the wrong reference.\n"
- title: 5.1.2.2.  Non-Updating Packets
  contents:
  - "5.1.2.2.  Non-Updating Packets\n   Reordering between non-updating packets only\n\
    \      A non-updating packet that reaches the decompressor out of\n      sequence\
    \ only with respect to other non-updating packets can\n      always be decompressed\
    \ properly.\n   Reordering between non-updating packets and updating packets\n\
    \      When a non-updating packet is reordered and becomes sequentially\n    \
    \  late with respect to an updating packet, the decompressor may have\n      already\
    \ updated the context with a new reference when the late\n      packet is received.\
    \  It is thus possible for a non-updating packet\n      to be decompressed based\
    \ on the wrong reference because of\n      reordering when operating in R-mode.\n\
    \      Since decompression of non-updating packets cannot be verified,\n     \
    \ this can lead to a packet erroneously decompressed to be forwarded\n      to\
    \ upper layers.\n"
- title: 5.1.3.  Reordering of Packets in U/O-mode
  contents:
  - "5.1.3.  Reordering of Packets in U/O-mode\n   Reordering between non-change packets\
    \ only\n      When only non-change packets are reordered with respect to each\n\
    \      other, decompression of sequentially late packets is limited by\n     \
    \ the offset p of the interpretation interval (see section 5.1.1).\n      Decompression\
    \ of a sequentially late packet with SN = x is\n      possible if the value of\
    \ the SN of the packet that last updated\n      the context was less than or equal\
    \ to x + p.\n      Problems occur if context(SN) has increased by more than p\
    \ with\n      respect to field(SN) carried within the packet to decompress.\n\
    \      This means that for a well-behaved stream with a constant unit\n      increase\
    \ in the RTP SN, a packet can arrive up to p packets out of\n      sequence and\
    \ still be correctly decompressed.  Otherwise, it\n      cannot be properly decompressed.\
    \  It also means that if the\n      compressor sends two consecutive packets with\
    \ SN(packet1)=100 and\n      SN(packet2)=108 when p=7, packet1 cannot be decompressed\
    \ if it\n      arrives even one packet late due to reordering.\n   Reordering\
    \ involving change packets\n      When a packet is reordered and becomes sequentially\
    \ late with\n      respect to a change packet, decompression of the late packet\
    \ may\n      eventually fail, as the context information required for\n      successful\
    \ decompression may not be available anymore.\n   Decompression can always be\
    \ verified since all U/O-mode packet types\n   are context updating.  Consequently,\
    \ a failure to decompress a packet\n   that is caused by reordering can be detected,\
    \ and context\n   invalidation due to reordering can thus be avoided.  The risk\
    \ of\n   forwarding incorrectly decompressed packets to upper layers is\n   therefore\
    \ small when operating in U/O-mode.  For channels known to\n   reorder packets,\
    \ U/O-mode should therefore be the preferred mode of\n   operation.  The additional\
    \ risk of losing context synchronization, or\n   for erroneous packet to be delivered\
    \ to upper layers, is limited.\n"
- title: 5.1.4.  Reordering on the Feedback Channel
  contents:
  - "5.1.4.  Reordering on the Feedback Channel\n   For R-mode, upon reception of\
    \ an acknowledgement, the compressor\n   searches the sliding window to locate\
    \ an updating packet with the\n   corresponding SN; if it is not found, the acknowledgement\
    \ is invalid\n   and is discarded ([1], section 5.5.1.2).  In other words, feedback\n\
    \   received out of order either is still useful or is discarded.\n   In U/O-mode,\
    \ if the compressor updates its context based on feedback,\n   the same logic\
    \ as for R-mode applies in practice.\n   Reordering on the feedback channel has\
    \ thus no impact in either mode.\n"
- title: 5.1.5.  List Compression
  contents:
  - "5.1.5.  List Compression\n   ROHC list compression is an additional compression\
    \ scheme for RTP\n   contributing source (CSRC) lists and IP extension header\
    \ chains.  The\n   base is called table-based item compression, and it is almost\n\
    \   completely independent from the rest of the ROHC compression logic.\n   Therefore,\
    \ this part of the scheme does not exhibit any special\n   vulnerabilities when\
    \ it comes to reordering, assuming a reasonable\n   optimistic approach is used\
    \ in U/O-mode.  Specifically, it does not\n   suffer significantly from the \"\
    missing reference\" problem when\n   operating in R-mode.\n   On top of the table-based\
    \ item compression mechanism, an additional\n   compression technique may be used,\
    \ called reference based list\n   compression.  Reference based list compression\
    \ however has a logic\n   that is similar to the rest of the ROHC compression\
    \ logic, and\n   therefore it suffers from similar reordering vulnerabilities,\n\
    \   especially the \"missing reference\" problem of R-mode.  Note, however,\n\
    \   that the generation identifier used in U/O-mode makes that scheme\n   more\
    \ robust to reordering.\n   When using list encoding type 1, 2, or 3, which makes\
    \ use of\n   reference lists, decompression will succeed only if all individual\n\
    \   items are known by the decompressor, along with the correct reference\n  \
    \ list required to properly decompress the packet.  List compression\n   using\
    \ the \"Generic scheme\", also known as \"Encoding type 0\", is not\n   using\
    \ reference based list compression, and type 0 decompression will\n   thus succeed\
    \ as long as all individual items are known by the\n   decompressor.  Because\
    \ of this, type 0 list compression should be the\n   preferred method used when\
    \ operating over reordering channels.\n"
- title: 5.1.6.  Reordering and Mode Transitions
  contents:
  - "5.1.6.  Reordering and Mode Transitions\n   Transition from U/O-mode to R-mode\n\
    \      This transition can be affected by reordering if a packet type 0\n    \
    \  (UO-0) is reordered and delayed by at least one round-trip time\n      (RTT).\
    \  If the decompressor initiates a mode change request to\n      R-mode in the\
    \ meantime, the reordered UO-0 packet may be handled\n      as an R-0 packet;\
    \ it can be erroneously decompressed and forwarded\n      to upper layers.  This\
    \ is because the decompressor can switch to\n      R-mode as soon as it sends\
    \ the acknowledgement Ack(SN, R) to the\n      compressor (see also [1], section\
    \ 5.6).\n   Transition from R-mode to U/O-mode\n      A similar situation as above\
    \ can occur during this transition.\n      However, because the outcome of the\
    \ decompression is always\n      verified using a CRC verification in U/O-mode,\
    \ the reordered\n      packet will most likely fail decompression and will be\
    \ discarded.\n   The above situation, although it is not deemed to occur frequently,\n\
    \   is still possible; thus, mode transitions from U/O-mode to R-mode\n   should\
    \ be avoided when reordering can occur.\n"
- title: 5.2.  Consequences of Reordering
  contents:
  - "5.2.  Consequences of Reordering\n   The context updating properties of the packets\
    \ exchanged between ROHC\n   peers are the most important factors to consider\
    \ when deriving the\n   impacts of reordering.  For this reason, the robustness\
    \ properties of\n   the U/O-mode and of the R-mode are affected differently.\n\
    \   The effects of reordering on ROHC can be summarized as follows:\n   - Functionality\
    \ incompatible with reordering;\n   - Increased probability of context damage\
    \ (loss of synchronization);\n   - Increased number of decompression failures\
    \ - Detected (U/O/R-mode);\n   - Increased number of decompression failures -\
    \ Undetected (R-mode).\n"
- title: 5.2.1.  Functionality Incompatible with Reordering
  contents:
  - "5.2.1.  Functionality Incompatible with Reordering\n   There is one optional\
    \ ROHC function that cannot work in the presence\n   of reordering between ROHC\
    \ peers.\n   The ROHC segmentation scheme (see [1], section 5.2.5) relies entirely\n\
    \   on the in-order delivery of each segment, as there is no sequencing\n   information\
    \ in the segments.  A segmented packet for which one (or\n   more) segment is\
    \ received out of order cannot be decompressed, and it\n   is discarded by the\
    \ decompressor.  Therefore, segmentation should not\n   be used if there can be\
    \ reordering between the ROHC peers.\n   The use of this optional feature is open\
    \ to implementations and is\n   local to the compressor only; it does not impact\
    \ the decompressor.\n"
- title: 5.2.2.  Context Damage (Loss of Synchronization)
  contents:
  - "5.2.2.  Context Damage (Loss of Synchronization)\n   Reordering of packets between\
    \ ROHC peers can impact the robustness\n   properties of the optimistic approach\
    \ (U/O-mode) as well as the\n   reliability of the secure reference principle\
    \ (R-mode).\n   The successful decompression of a sequentially late change packet\n\
    \   (U/O-mode) and/or updating packet (R-mode) can update the context of\n   the\
    \ decompressor in a manner unexpected by the compressor.  This can\n   lead to\
    \ a loss of context synchronization between the ROHC peers.\n"
- title: 5.2.3.  Detected Decompression Failures (U/O/R-mode)
  contents:
  - "5.2.3.  Detected Decompression Failures (U/O/R-mode)\n   Reordering of packets\
    \ between ROHC peers can lead to an increase in\n   the number of decompression\
    \ failures for context updating packets\n   (see sections 5.1.2.1 and 5.1.3).\
    \  Fortunately, as the outcome of the\n   decompression of updating packets can\
    \ be verified, the decompressor\n   can reliably detect decompression failures,\
    \ including those caused by\n   reordering, and discard the packet.  Note that\
    \ local repairs, subject\n   to the limitations stated in [1] section 5.3.2.2.3,\
    \ can still be\n   performed.\n"
- title: 5.2.4.  Undetected Decompression Failures (R-mode only)
  contents:
  - "5.2.4.  Undetected Decompression Failures (R-mode only)\n   Reordering of packets\
    \ between ROHC peers can lead to an increase in\n   the number of decompression\
    \ errors for non-updating packets.  For\n   R-mode, decompression of R-0 and R-1*\
    \ packets cannot be verified.  If\n   reordering occurs and decompression is performed\
    \ using the wrong\n   secure reference (see section 5.1.2.1 and 5.1.2.2), the\
    \ decompressor\n   cannot reliably detect such errors.  As a result, erroneous\
    \ packets\n   may be forwarded to upper layers.\n"
- title: 6.  Making ROHC Tolerant against Reordering
  contents:
  - "6.  Making ROHC Tolerant against Reordering\n   This section describes different\
    \ approaches that can improve the\n   performance of ROHC when used over reordering\
    \ channels and minimize\n   the effects of reordering.  Examples are provided\
    \ to guide\n   implementers and designers of new profiles.  The solutions target\n\
    \   either the properties of ROHC implementations or the specification of\n  \
    \ profiles.  This is covered by sections 6.1 and 6.2, respectively.\n"
- title: 6.1.  Properties of ROHC Implementations
  contents:
  - "6.1.  Properties of ROHC Implementations\n   Existing ROHC profiles can be implemented\
    \ with the capability to\n   properly handle packet reordering.  The methods described\
    \ in this\n   section conform with, and thus do not require any modifications\
    \ to,\n   the ROHC specifications within scope of this document (see section\n\
    \   3).  Specifically, the methods presented in this section can be\n   implemented\
    \ without any impairment to interoperability with other\n   ROHC implementations\
    \ that do not use these methods.\n   The methods suggested here may, however,\
    \ lower the compression\n   efficiency, and these modifications should not be\
    \ used when\n   reordering is known not to occur.  Some of these methods aim to\n\
    \   increase the decompression success rate at the decompressor, while\n   others\
    \ aim to avoid context damage that would cause a loss of context\n   synchronization\
    \ between compressor and decompressor.\n   The methods proposed are each addressing\
    \ specific issues listed in\n   section 5 and can be combined to achieve better\
    \ robustness against\n   reordering.\n"
- title: 6.1.1.  Compressing Headers with Robustness against Reordering
  contents:
  - "6.1.1.  Compressing Headers with Robustness against Reordering\n   The methods\
    \ described in this section are methods local only to the\n   compressor implementation.\
    \  They can be used without modifications or\n   impact to the decompressor.\n"
- title: 6.1.1.1.  Reordering and the Optimistic Approach
  contents:
  - "6.1.1.1.  Reordering and the Optimistic Approach\n   The optimistic approach\
    \ is affected by the reordering characteristics\n   of the channel when operating\
    \ over a reordering channel.  Compressor\n   implementations should therefore\
    \ adjust their optimistic approach\n   strategy to match both packet loss and\
    \ reordering characteristics.\n   For example, the number of repetitions for each\
    \ context update can be\n   increased.  The compressor should ensure that each\
    \ update is repeated\n   until it is reasonably confident that at least one change\
    \ packet in\n   the sequence of repetitions has reached the decompressor before\
    \ the\n   first packet sent after this sequence.\n"
- title: 6.1.1.2.  Reordering and the Secure Reference Principle
  contents:
  - "6.1.1.2.  Reordering and the Secure Reference Principle\n   Fundamental to the\
    \ secure reference principle is that only values\n   acknowledged by the decompressor\
    \ can be used as reference for\n   compression.  In addition, some of the packet\
    \ types used in R-mode do\n   not include a CRC over the original uncompressed\
    \ header, and the\n   decompressor has no means to verify the outcome of the decompression.\n\
    \   Decompression of non-updating packet types thus entirely relies on\n   the\
    \ cumulative effect of previous updates to the secure reference,\n   and the compressed\
    \ data is based on the current value of the\n   reference.  This reference must\
    \ be synchronized between ROHC peers.\n   For R-0 and R-1* packets, the reception\
    \ of the encoded bits applied\n   to the secure reference is sufficient for correct\
    \ decompression, but\n   only when in-order delivery between ROHC peers is guaranteed.\n\
    \   Avoiding the \"missing reference\" problem (section 5.1.2.1)\n      A compressor\
    \ implementation can delay the advance in the sliding\n      window to a reference\
    \ acknowledged by the decompressor, until it\n      has confidence that no acknowledgement\
    \ for any of the values that\n      could be discarded can be received.  This\
    \ confidence can be based\n      on the maximum delay that reordering can introduce\
    \ over the\n      channel.\n"
- title: 6.1.1.3.  Robust Selection of Compressed Header
  contents:
  - "6.1.1.3.  Robust Selection of Compressed Header\n   Packet formats can be chosen\
    \ with an interpretation interval for the\n   LSB encoded sequence number that\
    \ allows for larger negative offsets\n   (see section 5.1.1).  This provides the\
    \ capability to decompress\n   sequentially late packets with a greater amount\
    \ of reordering.\n   To achieve this, the compressor should be implemented conservatively\n\
    \   in terms of the choice of packet types to send, by transmitting\n   packets\
    \ with more sequence number bits.  As shown in the table in\n   section 5.1.1,\
    \ using 8 bits of SN allows a packet to be decompressed\n   when the reordering\
    \ leads to up to 7 units in sequence number\n   variation (i.e., delta(SN)). \
    \ Increasing the number of SN bits (i.e.,\n   using a larger SN_k [1]) transmitted\
    \ will make ROHC even more\n   tolerant to reordering.\n   For example, a conservative\
    \ compressor implementation could use the\n   packet types as shown in the table\
    \ below:\n      +----------------------+-------------------------+\n      | Optimal\
    \ Packet Type  | Alternative Packet Type |\n      | (without reordering) |  (reordering\
    \ possible)  |\n      +----------------------+-------------------------+\n   \
    \   | UO-0                 | UOR-2*-ext0             |\n      | R-0          \
    \        | R-1*-ext0               |\n      | R-0-CRC              | UOR-2*-ext0\
    \             |\n      | R-1*                 | R-1*-ext0               |\n  \
    \    | UO-1                 | UOR-2-ext0              |\n      | UO-1-TS     \
    \         | UOR-2-TS-ext0           |\n      | UO-1-ID              | UO-1-ID-ext3\
    \ (with S=1) |\n      |                      | UOR-2-ID-ext0           |\n   \
    \   | UOR-2*               | UOR-2*-ext0             |\n      +----------------------+-------------------------+\n\
    \   Such a compressor implementation would thus always be sending at\n   least\
    \ 3 octets (R-mode) or 4 octets (U/O-mode).  This is a trade-off\n   when compared\
    \ to the 1 octet that can be sent by a more aggressive\n   implementation operating\
    \ on a channel with no reordering.\n   Note that since the interpretation interval\
    \ for profiles 0x0002,\n   0x0004, and 0x0008 is always p = -1 independently of\
    \ bits(SN), the\n   methods suggested in this section will not work for these\
    \ profiles\n   unless this value is modified (section 6.2.1).\n"
- title: 6.1.2.  Implementing a Reordering-Tolerant Decompressor
  contents:
  - "6.1.2.  Implementing a Reordering-Tolerant Decompressor\n   The methods described\
    \ in this section are methods local only to the\n   decompressor implementation.\
    \  They can be used without modifications\n   or impact to the compressor.\n"
- title: 6.1.2.1.  Decompressor Feedback Considerations
  contents:
  - "6.1.2.1.  Decompressor Feedback Considerations\n   Reducing the feedback rate\
    \ when the flow behaves linearly\n      The decompressor should reduce its feedback\
    \ rate when a large\n      number of UOR-2 packets with extensions are received,\
    \ when the\n      flow behaves linearly (i.e., when only fields pertaining to\
    \ the\n      functions established with respect to the sequence number are\n \
    \     changing).\n      In particular, if the compressor implementation makes\
    \ a more\n      conservative selection of packet types (section 6.1.1.3) in order\n\
    \      to handle reordering, the decompressor should try to avoid sending\n  \
    \    more feedback than it would for the case where the more optimal\n      packet\
    \ types are used.  This can be useful to minimize the usage\n      of the feedback\
    \ channel, thereby improving efficiency of the link.\n      Note that even if\
    \ the decompressor does not make this adjustment\n      to its feedback rate,\
    \ packet losses or context damages will not\n      increase.\n   Acknowledgements\
    \ and sequentially late packets\n      Reordered feedback (or feedback for packets\
    \ received out of order)\n      will not cause problems (see section 5.1.4). \
    \ However, the\n      decompressor should not send acknowledging feedback for\
    \ a packet\n      that can be identified as being sequentially late (e.g., based\
    \ on\n      the sequence number of the packet), as the current state of the\n\
    \      context will better reflect the compressor context than the\n      content\
    \ of the reordered packet.\n"
- title: 6.1.2.2.  Considerations for Local Repair Mechanisms
  contents:
  - "6.1.2.2.  Considerations for Local Repair Mechanisms\n   When decompression fails,\
    \ and if reordering can be assumed to be the\n   cause of this failure, subsequent\
    \ decompressions may be attempted for\n   sequentially late packets by going backward\
    \ in the interpretation\n   interval (as opposed to moving forward for local repair).\
    \  If one of\n   the decompression attempts is successful, the late packet may\
    \ be\n   passed on to upper layers with or without updating the decompressor\n\
    \   context.  If the subsequent decompression attempt fails, the packet\n   should\
    \ be handled according to [1] section 5.3.2.2.3.\n"
- title: 6.2.  Specifying ROHC Profiles with Robustness against Reordering
  contents:
  - '6.2.  Specifying ROHC Profiles with Robustness against Reordering

    '
- title: 6.2.1.  Profiles with Interpretation Interval Offset p = -1
  contents:
  - "6.2.1.  Profiles with Interpretation Interval Offset p = -1\n   New revisions\
    \ of profiles 0x0002 (UDP) [1], 0x0004 (IP-only) [3], and\n   0x0008 (UDP-Lite)\
    \ [4] should redefine how the value of the offset p\n   is determined, and use\
    \ the same algorithm as in profile 0x0001 [1]\n   instead of p = -1 independently\
    \ of bits(SN) (section 5.1.1).\n   While such a change would make these updated\
    \ profiles slightly less\n   robust to packet losses, they would still be no less\
    \ robust than\n   profile 0x0001.\n"
- title: 6.2.2.  Modifying the Interpretation Interval Offset
  contents:
  - "6.2.2.  Modifying the Interpretation Interval Offset\n   The interpretation interval\
    \ offset p could be modified for existing\n   profiles to handle reordering while\
    \ improving the compression\n   efficiency when compared to the solution in section\
    \ 6.1.1.3.\n"
- title: 6.2.2.1.  Example Profile for Handling Reordering
  contents:
  - "6.2.2.1.  Example Profile for Handling Reordering\n   The value of the interpretation\
    \ interval offset p can be adjusted to\n   achieve a robustness against reordering\
    \ similar to the effect of\n   selecting packet types as suggested in section\
    \ 6.1.1.3.\n   Consider a scenario where robustness against packet losses is kept\
    \ a\n   priority, and for which of a value p=7 is deemed enough.  In this\n  \
    \ case, a ratio where the positive offset is about twice as large as\n   the negative\
    \ offset can be used.  This leaves a value of p = 2^k/ 3.\n   The resulting values\
    \ are shown in the following table:\n         +-----------+--------------+----------------+\n\
    \         | bits (SN) |   Offset p   | Positive range |\n         |     k    \
    \ | (reordering) |    (losses)    |\n         +-----------+--------------+----------------+\n\
    \         |     4     |        5     |        10      |\n         |     5    \
    \ |       10     |        21      |\n         |     6     |       21     |   \
    \     42      |\n         |     7     |       42     |        85      |\n    \
    \     |     8     |       85     |       170      |\n         |     9     |  \
    \    170     |       341      |\n         +-----------+--------------+----------------+\n\
    \   Using this value for p, a fair amount of reordering can be handled\n   without\
    \ having to send UOR-2 packets most of the time.  The trade-off\n   is that this\
    \ is at the expense of robustness against packet losses.\n"
- title: 6.2.2.2.  Defining the Values of p for New Profiles
  contents:
  - "6.2.2.2.  Defining the Values of p for New Profiles\n   As described in RFC 3095\
    \ [1], the interpretation interval when\n   sending k bits of SN is defined as\
    \ follows:\n      f(v_ref, k) = [v_ref - p, v_ref + (2^k - 1) - p]\n   The negative\
    \ bound (v_ref - p) limits the ability to handle\n   reordering, and the positive\
    \ bound (v_ref + (2^k - 1) - p) limits the\n   ability to handle packet losses.\n\
    \   Adjusting p will increase one of these ranges, while the other range\n   will\
    \ decrease.  This trade-off between the capability to handle\n   reordering and\
    \ packet losses, including how these correlate with each\n   other, should be\
    \ considered in a ROHC profile that is meant to handle\n   reordering.\n   For\
    \ example, if it is desirable for a profile to be as robust against\n   reordering\
    \ (negative range) and against packet losses (positive\n   range), this range\
    \ can be made equal by setting p near (2^k / 2).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document does not include additional security\
    \ risks to [1].  In\n   addition, it may lower risks related to context damage\
    \ in R-mode with\n   injected packets when sequentially late packets do not update\
    \ the\n   context (section 6.1.2.1).\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Thanks to the committed WG document reviewers, Carl\
    \ Knutsson and Mark\n   West, for their review efforts.  Thanks also to Aniruddha\
    \ Kulkarni,\n   Ramin Rezaiifar, and Gorry Fairhurst for their constructive comments.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [1]  Bormann, C., Burmeister, C., Degermark, M.,\
    \ Fukushima, H.,\n        Hannu, H., Jonsson, L-E., Hakenberg, R., Koren, T.,\
    \ Le, K., Liu,\n        Z., Martensson, A., Miyazaki, A., Svanbro, K., Wiebke,\
    \ T.,\n        Yoshimura, T., and H. Zheng, \"RObust Header Compression (ROHC):\n\
    \        Framework and four profiles: RTP, UDP, ESP, and uncompressed\",\n   \
    \     RFC 3095, July 2001.\n   [2]  Jonsson, L-E., \"RObust Header Compression\
    \ (ROHC): Terminology\n        and Channel Mapping Examples\", RFC 3759, April\
    \ 2004.\n   [3]  Jonsson, L-E. and G. Pelletier, \"RObust Header Compression\n\
    \        (ROHC): A Compression Profile for IP\", RFC 3843, June 2004.\n   [4]\
    \  Pelletier, G., \"RObust Header Compression (ROHC): Profiles for\n        User\
    \ Datagram Protocol (UDP) Lite\", RFC 4019, April 2005.\n   [5]  Jonsson, L-E.\
    \ and G. Pelletier, \"RObust Header Compression\n        (ROHC): A Link-Layer\
    \ Assisted Profile for IP/UDP/RTP\", RFC 3242,\n        April 2002.\n   [6]  Liu,\
    \ Z. and K. Le, \"Zero-byte Support for Bidirectional Reliable\n        Mode (R-mode)\
    \ in Extended Link-Layer Assisted RObust Header\n        Compression (ROHC) Profile\"\
    , RFC 3408, December 2002.\n   [7]  Ash, J., Goode, B., Hand, J., and R. Zhang,\
    \ \"Requirements for\n        Header Compression over MPLS\", RFC 4247, November\
    \ 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ghyslain Pelletier\n   Ericsson AB\n   Box 920\n   SE-971\
    \ 28 Lulea, Sweden\n   Phone: +46 8 404 29 43\n   Fax:   +46 920 996 21\n   EMail:\
    \ ghyslain.pelletier@ericsson.com\n   Lars-Erik Jonsson\n   Ericsson AB\n   Box\
    \ 920\n   SE-971 28 Lulea, Sweden\n   Phone: +46 8 404 29 61\n   Fax:   +46 920\
    \ 996 21\n   EMail: lars-erik.jonsson@ericsson.com\n   Kristofer Sandlund\n  \
    \ Ericsson AB\n   Box 920\n   SE-971 28 Lulea, Sweden\n   Phone: +46 8 404 41\
    \ 58\n   Fax:   +46 920 996 21\n   EMail: kristofer.sandlund@ericsson.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
