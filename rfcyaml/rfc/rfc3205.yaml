- title: __initial_text__
  contents:
  - '                   On the use of HTTP as a Substrate

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Recently there has been widespread interest in using Hypertext\n\
    \   Transfer Protocol (HTTP) as a substrate for other applications-level\n   protocols.\
    \  This document recommends technical particulars of such\n   use, including use\
    \ of default ports, URL schemes, and HTTP security\n   mechanisms.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Recently there has been widespread interest in using Hypertext\n\
    \   Transfer Protocol (HTTP) [1] as a substrate for other applications-\n   level\
    \ protocols.  Various reasons cited for this interest have\n   included:\n   o\
    \  familiarity and mindshare,\n   o  compatibility with widely deployed browsers,\n\
    \   o  ability to reuse existing servers and client libraries,\n   o  ease of\
    \ prototyping servers using CGI scripts and similar\n      extension mechanisms,\n\
    \   o  ability to use existing security mechanisms such as HTTP digest\n     \
    \ authentication [2] and SSL or TLS [3],\n   o  the ability of HTTP to traverse\
    \ firewalls, and\n   o  cases where a server often needs to support HTTP anyway.\n\
    \   The Internet community has a long tradition of protocol reuse, dating\n  \
    \ back to the use of Telnet [4] as a substrate for FTP [5] and SMTP\n   [6]. \
    \ However, the recent interest in layering new protocols over\n   HTTP has raised\
    \ a number of questions when such use is appropriate,\n   and the proper way to\
    \ use HTTP in contexts where it is appropriate.\n   Specifically, for a given\
    \ application that is layered on top of HTTP:\n   o  Should the application use\
    \ a different port than the HTTP default\n      of 80?\n   o  Should the application\
    \ use traditional HTTP methods (GET, POST,\n      etc.) or should it define new\
    \ methods?\n   o  Should the application use http: URLs or define its own prefix?\n\
    \   o  Should the application define its own MIME-types, or use something\n  \
    \    that already exists (like registering a new type of MIME-directory\n    \
    \  structure)?\n   This memo recommends certain design decisions in answer to\
    \ these\n   questions.\n   This memo is intended as advice and recommendation\
    \ for protocol\n   designers, working groups, implementors, and IESG, rather than\
    \ as a\n   strict set of rules which must be adhered to in all cases.\n   Accordingly,\
    \ the capitalized key words defined in RFC 2119, which are\n   intended to indicate\
    \ conformance to a specification, are not used in\n   this memo.\n"
- title: 2. Issues Regarding the Design Choice to use HTTP
  contents:
  - "2. Issues Regarding the Design Choice to use HTTP\n   Despite the advantages\
    \ listed above, it's worth asking the question\n   as to whether HTTP should be\
    \ used at all, or whether the entire HTTP\n   protocol should be used.\n"
- title: 2.1 Complexity
  contents:
  - "2.1 Complexity\n   HTTP started out as a simple protocol, but quickly became\
    \ much more\n   complex due to the addition of several features unanticipated\
    \ by its\n   original design.  These features include persistent connections,\
    \ byte\n   ranges, content negotiation, and cache support.  All of these are\n\
    \   useful for traditional web applications but may not be useful for the\n  \
    \ layered application.  The need to support (or circumvent) these\n   features\
    \ can add additional complexity to the design and\n   implementation of a protocol\
    \ layered on top of HTTP.  Even when HTTP\n   can be \"profiled\" to minimize\
    \ implementation overhead, the effort of\n   specifying such a profile might be\
    \ more than the effort of specifying\n   a purpose-built protocol which is better\
    \ suited to the task at hand.\n   Even if existing HTTP client and server code\
    \ can often be re-used,\n   the additional complexity of layering something over\
    \ HTTP vs. using a\n   purpose-built protocol can increase the number of interoperability\n\
    \   problems.\n"
- title: 2.2 Overhead
  contents:
  - "2.2 Overhead\n   Further, although HTTP can be used as the transport for a \"\
    remote\n   procedure call\" paradigm, HTTP's protocol overhead, along with the\n\
    \   connection setup overhead of TCP, can make HTTP a poor choice.  A\n   protocol\
    \ based on UDP, or with both UDP and TCP variants, should be\n   considered if\
    \ the payloads are very likely to be small (less than a\n   few hundred bytes)\
    \ for the foreseeable future.  This is especially\n   true if the protocol might\
    \ be heavily used, or if it might be used\n   over slow or expensive links.\n\
    \   On the other hand, the connection setup overhead can become\n   negligible\
    \ if the layered protocol can utilize HTTP/1.1's persistent\n   connections, and\
    \ if the same client and server are likely to perform\n   several transactions\
    \ during the time the HTTP connection is open.\n"
- title: 2.3 Security
  contents:
  - "2.3 Security\n   Although HTTP appears at first glance to be one of the few \"\
    mature\"\n   Internet protocols that can provide good security, there are many\n\
    \   applications for which neither HTTP's digest authentication nor TLS\n   are\
    \ sufficient by themselves.\n   Digest authentication requires a secret (e.g.,\
    \ a password) to be\n   shared between client and server.  This further requires\
    \ that each\n   client know the secret to be used with each server, but it does\
    \ not\n   provide any means of securely transmitting such secrets between the\n\
    \   parties.  Shared secrets can work fine for small groups where\n   everyone\
    \ is physically co-located; they don't work as well for large\n   or dispersed\
    \ communities of users.  Further, if the server is\n   compromised a large number\
    \ of secrets may be exposed, which is\n   especially dangerous if the same secret\
    \ (or password) is used for\n   several applications.  (Similar concerns exist\
    \ with TLS based clients\n   or servers - if a private key is compromised then\
    \ the attacker can\n   impersonate the party whose key it has.)\n   TLS and its\
    \ predecessor SSL were originally designed to authenticate\n   web servers to\
    \ clients, so that a user could be assured (for example)\n   that his credit card\
    \ number was not being sent to an imposter.\n   However, many applications need\
    \ to authenticate clients to servers,\n   or to provide mutual authentication\
    \ of client and server.  TLS does\n   have a capability to provide authentication\
    \ in each direction, but\n   such authentication may or may not be suitable for\
    \ a particular\n   application.\n   Web browsers which support TLS or SSL are\
    \ typically shipped with the\n   public keys of several certificate authorities\
    \ (CAs) \"wired in\" so\n   that they can verify the identity of any server whose\
    \ public key was\n   signed by one of those CAs.  For this to work well, every\
    \ secure web\n   server's public key has to be signed by one of the CAs whose\
    \ keys are\n   wired into popular browsers.  This deployment model works when\
    \ there\n   are a (relatively) small number of servers whose identities can be\n\
    \   verified, and their public keys signed, by the small number of CAs\n   whose\
    \ keys are included in a small number of different browsers.\n   This scheme does\
    \ not work as well to authenticate millions of\n   potential clients to servers.\
    \  It would take a much larger number of\n   CAs to do the job, each of which\
    \ would need to be widely trusted by\n   servers.  Those CAs would also have a\
    \ more difficult time verifying\n   the identities of (large numbers of) ordinary\
    \ users than they do in\n   verifying the identities of (a smaller number of)\
    \ commercial and\n   other enterprises that need to run secure web servers.\n\
    \   Also, in a situation where there were a large number of clients\n   authenticating\
    \ with TLS, it seems unlikely that there would be a set\n   of CAs whose keys\
    \ were trusted by every server.  A client that\n   potentially needed to authenticate\
    \ to multiple servers would\n   therefore need to be configured as to which key\
    \ to use with which\n   server when attempting to establish a secure connection\
    \ to the\n   server.\n   For the reasons stated above, client authentication is\
    \ rarely used\n   with TLS.  A common technique is to use TLS to authenticate\
    \ the\n   server to the client and to establish a private channel, and for the\n\
    \   client to authenticate to the server using some other means - for\n   example,\
    \ a username and password using HTTP basic or digest\n   authentication.\n   For\
    \ any application that requires privacy, the 40-bit ciphersuites\n   provided\
    \ by some SSL implementations (to conform to outdated US\n   export regulations\
    \ or to regulations on the use or export of\n   cryptography in other countries)\
    \ are unsuitable.  Even 56-bit DES\n   encryption, which is required of conforming\
    \ TLS implementations, has\n   been broken in a matter of days with a modest investment\
    \ in\n   resources.  So if TLS is chosen it may be necessary to discourage use\n\
    \   of small key lengths, or of weak ciphersuites, in order to provide\n   adequate\
    \ privacy assurance.  If TLS is used to provide privacy for\n   passwords sent\
    \ by clients then it is especially important to support\n   longer keys.\n   None\
    \ of the above should be taken to mean that either digest\n   authentication or\
    \ TLS are generally inferior to other authentication\n   systems, or that they\
    \ are unsuitable for use in other applications\n   besides HTTP.  Many of the\
    \ limitations of TLS and digest\n   authentication also apply to other authentication\
    \ and privacy\n   systems.  The point here is that neither TLS nor digest\n  \
    \ authentication is a \"magic pixie dust\" solution to authentication or\n   privacy.\
    \  In every case, an application's designers must carefully\n   determine the\
    \ application's users' requirements for authentication\n   and privacy before\
    \ choosing an authentication or privacy mechanism.\n   Note also that TLS can\
    \ be used with other TCP-based protocols, and\n   there are SASL [7] mechanisms\
    \ similar to HTTP's digest\n   authentication.  So it is not necessary to use\
    \ HTTP in order to\n   benefit from either TLS or digest-like authentication.\
    \  However, HTTP\n   APIs may already support TLS and/or digest.\n"
- title: 2.4 Compatibility with Proxies, Firewalls, and NATs
  contents:
  - "2.4 Compatibility with Proxies, Firewalls, and NATs\n   One oft-cited reason\
    \ for the use of HTTP is its ability to pass\n   through proxies, firewalls, or\
    \ network address translators (NATs).\n   One unfortunate consequence of firewalls\
    \ and NATs is that they make\n   it harder to deploy new Internet applications,\
    \ by requiring explicit\n   permission (or even a software upgrade of the firewall\
    \ or NAT) to\n   accommodate each new protocol.  The existence of firewalls and\
    \ NATs\n   creates a strong incentive for protocol designers to layer new\n  \
    \ applications on top of existing protocols, including HTTP.\n   However, if a\
    \ site's firewall prevents the use of unknown protocols,\n   this is presumably\
    \ a conscious policy decision on the part of the\n   firewall administrator. \
    \ While it is arguable that such policies are\n   of limited value in enhancing\
    \ security, this is beside the point -\n   well-known port numbers are quite useful\
    \ for a variety of purposes,\n   and the overloading of port numbers erodes this\
    \ utility.  Attempting\n   to circumvent a site's security policy is not an acceptable\n\
    \   justification for doing so.\n   It would be useful to establish guidelines\
    \ for \"firewall-friendly\"\n   protocols, to make it easier for existing firewalls\
    \ to be compatible\n   with new protocols.\n"
- title: 2.5 Questions to be asked when considering use of HTTP
  contents:
  - "2.5 Questions to be asked when considering use of HTTP\n   o  When considering\
    \ payload size and traffic patterns, is HTTP an\n      appropriate transport for\
    \ the anticipated use of this protocol?\n      (In other words: will the payload\
    \ size be worth the overhead\n      associated with TCP and HTTP?  Or will the\
    \ application be able to\n      make use of HTTP persistent connections to amortize\
    \ the cost of\n      that overhead over several requests?)\n   o  Is this new\
    \ protocol usable by existing web browsers without\n      modification?\n    \
    \  (For example: Is the request transmitted as if it were a filled-in\n      HTML\
    \ form?  Is the response which is returned viewable from a web\n      browser,\
    \ say as HTML?)\n   o  Are the existing HTTP security mechanisms appropriate for\
    \ the new\n      application?\n   o  Are HTTP status codes and the HTTP status\
    \ code paradigm suitable\n      for this application?  (see section 8)\n   o \
    \ Does the server for this application need to support HTTP anyway?\n"
- title: 3. Issues Regarding Reuse of Port 80
  contents:
  - "3. Issues Regarding Reuse of Port 80\n   IANA has reserved TCP port number 80\
    \ for use by HTTP.  It would not\n   be appropriate for a substantially new service,\
    \ even one which uses\n   HTTP as a substrate, to usurp port 80 from its traditional\
    \ use.  A\n   new use of HTTP might be considered a \"substantially new service\"\
    ,\n   thus requiring a new port, if any of the following are true:\n   o  The\
    \ \"new service\" and traditional HTTP service are likely to\n      reference\
    \ different sets of data, even when they both operate on\n      the same host.\n\
    \   o  There is a good reason for the \"new service\" to be implemented by\n \
    \     a separate server process, or separate code, than traditional HTTP\n   \
    \   service on the same host, at least on some platforms.\n   o  There is a good\
    \ reason to want to easily distinguish the traffic\n      of the \"new service\"\
    \ from traditional HTTP, e.g., for the purposes\n      of firewall access control\
    \ or traffic analysis.\n   o  If none of the above are true, it is arguable that\
    \ the new use of\n      HTTP is an \"extension\" to traditional HTTP, rather than\
    \ a \"new\n      service\".  Extensions to HTTP which share data with traditional\n\
    \      HTTP services should probably define new HTTP methods to describe\n   \
    \   those extensions, rather than using separate ports.  If separate\n      ports\
    \ are used, there is no way for a client to know whether they\n      are separate\
    \ services or different ways of accessing the same\n      underlying service.\n"
- title: '4. Issues Regarding Reuse of the http: Scheme in URLs'
  contents:
  - "4. Issues Regarding Reuse of the http: Scheme in URLs\n   A number of different\
    \ URL schemes are in widespread use and many more\n   are in the process of being\
    \ standardized.  In practice, the URL\n   scheme not only serves as a \"tag\"\
    \ to govern the interpretation of the\n   remaining portion of the URL, it also\
    \ provides coarse identification\n   of the kind of resource or service which\
    \ is being accessed.  For\n   example, web browsers typically provide a different\
    \ response when a\n   user mouse-clicks on an \"http\" URL, than when the user\
    \ clicks on a\n   \"mailto\" URL.\n   Some criteria that might be used in making\
    \ this determination are:\n   o  Whether this URL scheme is likely to become widely\
    \ used, versus\n      used only in limited communities or by private agreement.\n\
    \   o  Whether a new \"default port\" is needed.  If reuse of port 80 is\n   \
    \   not appropriate (see above), a new \"default port\" is needed.  A\n      new\
    \ default port in turn requires that a new URL scheme be\n      registered if\
    \ that URL scheme is expected to be widely used.\n      Explicit port numbers\
    \ in URLs are regarded as an \"escape hatch\",\n      not something for use in\
    \ ordinary circumstances.\n   o  Whether use of the new service is likely to require\
    \ a\n      substantially different setup or protocol interaction with the\n  \
    \    server, than ordinary HTTP service.  This could include the need\n      to\
    \ request a different type of service from the network, or to\n      reserve bandwidth,\
    \ or to present different TLS authentication\n      credentials to the server,\
    \ or different kind of server\n      provisioning, or any number of other needs.\n\
    \   o  Whether user interfaces (such as web browsers) are likely to be\n     \
    \ able to exploit the difference in the URL prefix to produce a\n      significant\
    \ improvement in usability.\n   According to the rules in [8] the \"http:\" URI\
    \ is part of the \"IETF\n   Tree\" for URL scheme names, and IETF is the maintainer\
    \ of the \"IETF\n   Tree\".  Since IESG is the decision-making body for IETF,\
    \ IESG has the\n   authority to determine whether a resource accessed by a protocol\
    \ that\n   is layered on top of HTTP, should use http: or some other URL prefix.\n\
    \   Note that the convention of appending an \"s\" to the URL scheme to\n   mean\
    \ \"use TLS or SSL\" (as in \"http:\" vs \"https:\") is nonstandard and\n   of\
    \ limited value.  For most applications, a single \"use TLS or SSL\"\n   bit is\
    \ not sufficient to adequately convey the information that a\n   client needs\
    \ to authenticate itself to a server, even if it has the\n   proper credentials.\
    \  For instance, in order to ensure that adequate\n   security is provided with\
    \ TLS an application may need to be\n   configured with a list of acceptable ciphersuites,\
    \ or with the client\n   certificate to be used to authenticate to a particular\
    \ server.  When\n   it is necessary to specify authentication or other connection\
    \ setup\n   information in a URL these should be communicated in URL parameters,\n\
    \   rather than in the URL prefix.\n"
- title: 5. Issues regarding use of MIME media types
  contents:
  - "5. Issues regarding use of MIME media types\n   Since HTTP uses the MIME media\
    \ type system [9] to label its payload,\n   many applications which layer on HTTP\
    \ will need to define, or select,\n   MIME media types for use by that application.\
    \  Especially when using\n   a multipart structure, the choice of media types\
    \ requires careful\n   consideration.  In particular:\n   o  Should some existing\
    \ framework be used, such as text/directory\n      [10], or XML [11,12], or should\
    \ the new content-types be built\n      from scratch?  Just as with HTTP, it's\
    \ useful if code can be\n      reused, but protocol designers should not be over-eager\
    \ to\n      incorporate a general but complex framework into a new protocol.\n\
    \      Experience with ASN.1, for example, suggests that the advantage of\n  \
    \    using a general framework may not be worth the cost.\n   o  Should MIME multipart\
    \ or message types be allowed?  This can be an\n      advantage if it is desirable\
    \ to incorporate (for example) the\n      multipart/alternative construct or the\
    \ MIME security framework.\n      On the other hand, these constructs were designed\
    \ specifically for\n      use in store-and-forward electronic mail systems, and\
    \ other\n      mechanisms may be more appropriate for the application being\n\
    \      considered.\n      The point here is that a decision to use MIME content-type\
    \ names\n      to describe protocol payloads (which is generally desirable if\
    \ the\n      same payloads may appear in other applications) does not imply\n\
    \      that the application must accept arbitrary MIME content-types,\n      including\
    \ MIME multipart or security mechanisms.  Nor does it\n      imply that the application\
    \ must use MIME syntax or that it must\n      recognize or even tolerate existing\
    \ MIME header fields.\n   o  If the same payload is likely to be sent over electronic\
    \ mail, the\n      differences between HTTP encoding of the payload and email\n\
    \      encoding of the payload should be minimized.  Ideally, there\n      should\
    \ be no differences in the \"canonical form\" used in the two\n      environments.\
    \  Text/* media types can be problematic in this\n      regard because MIME email\
    \ requires CRLF for line endings of text/*\n      body parts, where HTTP traditionally\
    \ uses LF only.\n   o  A MIME content-type label describes the nature of the object\
    \ being\n      labeled.  It does not describe, and should not be used to\n   \
    \   describe, the semantics which should be applied when the object is\n     \
    \ received.  For instance, the transmission of an object with a\n      particular\
    \ content-type using HTTP POST, should not be taken as a\n      request for some\
    \ operation based solely on the type.  The request\n      should be separate from\
    \ the content-type label and it should be\n      explicit.\n      When it is necessary\
    \ for a protocol layered on HTTP to allow\n      different operations on the same\
    \ type of object, this can be\n      communicated in a number of different ways:\
    \ HTTP methods, HTTP\n      request-URI, HTTP request headers, the MIME Content-Disposition\n\
    \      header field, or as part of the payload.\n"
- title: 6. Issues Regarding Existing vs.  New HTTP Methods
  contents:
  - "6. Issues Regarding Existing vs.  New HTTP Methods\n   It has been suggested\
    \ that a new service layered on top of HTTP\n   should define one or more new\
    \ HTTP methods, rather than allocating a\n   new port.  The use of new methods\
    \ may be appropriate, but is not\n   sufficient in all cases.  The definition\
    \ of one or more new methods\n   for use in a new protocol, does not by itself\
    \ alleviate the need for\n   use of a new port, or a new URL type.\n"
- title: 7. Issues regarding reuse of HTTP client, server, and proxy code
  contents:
  - "7. Issues regarding reuse of HTTP client, server, and proxy code\n   As mentioned\
    \ earlier, one of the primary reasons for the use of HTTP\n   as a substrate for\
    \ new protocols, is to allow reuse of existing HTTP\n   client, server, or proxy\
    \ code.  However, HTTP was not designed for\n   such layering.  Existing HTTP\
    \ client and code may have \"http\"\n   assumptions wired into them.  For instance,\
    \ client libraries and\n   proxies may expect \"http:\" URLs, and clients and\
    \ servers may send\n   (and expect) \"HTTP/1.1\", in requests and responses, as\
    \ opposed to the\n   name of the layered protocol and its version number.\n  \
    \ Existing client libraries may not understand new URL types.  In order\n   to\
    \ get a new HTTP-layered application client to work with an existing\n   client\
    \ library, it may be necessary for the application to convert\n   its URLs to\
    \ an \"http equivalent\" form.  For instance, if service\n   \"xyz\" is layered\
    \ on top of HTTP using port ###, the xyz client may\n   need, when invoking an\
    \ HTTP client library, to translate its URLs\n   from \"xyz://host/something\"\
    \ format to \"http://host:###/something\" for\n   the purpose of calling that\
    \ library.  This should be done ONLY when\n   calling the HTTP client library\
    \ - such URLs should not be used in\n   other parts of the protocol, nor should\
    \ they be exposed to users.\n   Note that when a client is sending requests directly\
    \ to an origin\n   server, the URL prefix (\"http:\") is not normally sent.  So\n\
    \   translating xyz: URLs to http: URLs when calling the client library\n   should\
    \ not actually cause http: URLs to be sent over the wire.  But\n   when the same\
    \ client is sending requests to a proxy server, the\n   client will normally send\
    \ the entire URL (including the http: prefix)\n   in those requests.  The proxy\
    \ will remove the http: prefix when the\n   request is communicated to the origin\
    \ server.\n   Existing HTTP client libraries and servers will transmit \"HTTP/1.1\"\
    \n   (or a different version) in requests and responses.  To facilitate\n   reuse\
    \ of such libraries and servers by a new protocol, such a\n   protocol may therefore\
    \ need to transmit and accept \"HTTP/1.1\" rather\n   than its own protocol name\
    \ and version number.  Designers of\n   protocols which are layered on top of\
    \ HTTP should explicitly choose\n   whether or not to accept \"HTTP/1.1\" in protocol\
    \ exchanges.\n   For certain applications it may be necessary to require or limit\
    \ use\n   of certain HTTP features, for example, to defeat caching of responses\n\
    \   by proxies.  Each protocol layered on HTTP must therefore specify the\n  \
    \ specific way that HTTP will be used, and in particular, how the\n   client and\
    \ server should interact with HTTP proxies.\n"
- title: 8.  Issues regarding use of HTTP status codes
  contents:
  - "8.  Issues regarding use of HTTP status codes\n   HTTP's three-digit status codes\
    \ were designed for use with\n   traditional HTTP applications (e.g., document\
    \ retrieval, forms-based\n   queries), and are unlikely to be suitable to communicate\
    \ the\n   specifics of errors encountered in dissimilar applications.  Even\n\
    \   when it seems like there is a close match between HTTP status codes\n   and\
    \ the codes needed by the application, experience with reuse of\n   other protocols\
    \ indicates that subtle variations in usage are likely;\n   and that this is likely\
    \ to degrade interoperability of both the\n   original protocol (in this case\
    \ HTTP) and any layered applications.\n   HTTP status codes therefore should not\
    \ be used to indicate subtle\n   errors of layered applications.  At most, the\
    \ \"generic\" HTTP codes\n   200 (for complete success) and 500 (for complete\
    \ failure) should be\n   used to indicate errors resulting from the content of\
    \ the request\n   message-body.  Under certain circumstances, additional detail\
    \ about\n   the nature of the error can then be included in the response\n   message-body.\
    \  Other status codes than 200 or 500 should only appear\n   if the error was\
    \ detected by the HTTP server or by an intermediary.\n   A layered application\
    \ should not define new HTTP status codes.  The\n   set of available status codes\
    \ is small, conflicts in code assignment\n   between different layered applications\
    \ are likely, and they may be\n   needed by future versions of, or extensions\
    \ to, mainstream HTTP.\n   Use of HTTP's error codes is problematic when the layered\
    \ application\n   does not share same notion of success or failure as HTTP.  The\n\
    \   problem exists when the client does not connect directly to the\n   origin\
    \ server, but via one or more HTTP caches or proxies.  (Since\n   the ability\
    \ of HTTP to communicate through intermediaries is often\n   the primary motivation\
    \ for reusing HTTP, the ability of the\n   application to operate in the presence\
    \ of such intermediaries is\n   considered very important.)  Such caches and proxies\
    \ will interpret\n   HTTP's error codes and may take additional action based on\
    \ those\n   codes.  For instance, on receipt of a 200 error code from an origin\n\
    \   server (and under other appropriate conditions) a proxy may cache the\n  \
    \ response and re-issue it in response to a similar request.  Or a\n   proxy may\
    \ modify the result of a request which returns a 500 error\n   code in order to\
    \ add a \"helpful\" error message.  Other response codes\n   may produce other\
    \ behaviors.\n   A few guidelines are therefore in order:\n   o  A layered application\
    \ should use appropriate HTTP error codes to\n      report errors resulting from\
    \ information in the HTTP request-line\n      and header fields associated with\
    \ the request.  This request\n      information is part of the HTTP protocol and\
    \ errors which are\n      associated with that information should therefore be\
    \ reported\n      using HTTP protocol mechanisms.\n   o  A layered application\
    \ for which all errors resulting from the\n      message-body can be classified\
    \ as either \"complete success\" or\n      \"complete failure\" may use 200 and\
    \ 500 for those conditions,\n      respectively.  However, the specification for\
    \ such an application\n      must define the mechanism which ensures that its\
    \ successful (200)\n      responses are not cached by intermediaries, or demonstrate\
    \ that\n      such caching will do no harm; and it must be able to operate even\n\
    \      if the message-body of an error (500) response is not transmitted\n   \
    \   back to the client intact.\n   o  A layered application may return a 200 response\
    \ code for both\n      successfully processed requests and errors (or other exceptional\n\
    \      conditions) resulting from the request message-body (but not from\n   \
    \   the request headers).  Such an application must return its error\n      code\
    \ as part of the response message body, and the specification\n      for that\
    \ application protocol must define the mechanism by which\n      the application\
    \ ensures that its responses are not cached by\n      intermediaries.  In this\
    \ case a response other than 200 should be\n      used only to indicate errors\
    \ with, or the status of, the HTTP\n      protocol layer (including the request\
    \ headers), or to indicate the\n      inability of the HTTP server to communicate\
    \ with the application\n      server.\n   o  A layered application which cannot\
    \ operate in the presence of\n      intermediaries or proxies that cache and/or\
    \ alter error responses,\n      should not use HTTP as a substrate.\n"
- title: 9. Summary of recommendations regarding reuse of HTTP
  contents:
  - "9. Summary of recommendations regarding reuse of HTTP\n   1. All protocols should\
    \ provide adequate security.  The security\n      needs of a particular application\
    \ will vary widely depending on\n      the application and its anticipated use\
    \ environment.  Merely using\n      HTTP and/or TLS as a substrate for a protocol\
    \ does not\n      automatically provide adequate security for all environments,\
    \ nor\n      does it relieve the protocol developers of the need to analyze\n\
    \      security considerations for their particular application.\n   2. New protocols\
    \ - including but not limited to those using HTTP -\n      should not attempt\
    \ to circumvent users' firewall policies,\n      particularly by masquerading\
    \ as existing protocols.\n      \"Substantially new services\" should not reuse\
    \ existing ports.\n   3. In general, new protocols or services should not reuse\
    \ http: or\n      other URL schemes.\n   4. Each new protocol specification that\
    \ uses HTTP as a substrate\n      should describe the specific way that HTTP is\
    \ to be used by that\n      protocol, including how the client and server interact\
    \ with\n      proxies.\n   5. New services should follow the guidelines in section\
    \ 8 regarding\n      use of HTTP status codes.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Much of this document is about security.  Section\
    \ 2.3 discusses\n   whether HTTP security is adequate for the needs of a particular\n\
    \   application, section 2.4 discusses interactions between new HTTP-\n   based\
    \ protocols and firewalls, section 3 discusses use of separate\n   ports so that\
    \ firewalls are not circumvented, and section 4 discusses\n   the inadequacy of\
    \ the \"s\" suffix of a URL prefix for specifying\n   security levels.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\
    \ L.,\n         Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n\
    \         HTTP/1.1\", RFC 2616, June 1999.\n   [2]   Franks, J., Hallam-Baker,\
    \ P., Hostetler, J., Lawrence, S.,\n         Leach, P., Luotonen, A. and L. Stewart,\
    \ \"HTTP Authentication:\n         Basic and Digest Access Authentication\", RFC\
    \ 2617, June 1999.\n   [3]   Dierks, T. and C. Allen, \"The TLS Protocol Version\
    \ 1.0\", RFC\n         2246, January 1999.\n   [4]   Postel, J. and J. Reynolds,\
    \ \"Telnet Protocol Specification\",\n         STD 8, RFC 854, May 1983.\n   [5]\
    \   Postel, J. and J. Reynolds, \"File Transfer Protocol\", STD 9,\n         RFC\
    \ 959, October 1985.\n   [6]   Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821, April\n         2001.\n   [7]   Myers, J., \"Simple Authentication\
    \ and Security Layer (SASL)\",\n         RFC 2222, October 1997.\n   [8]   Petke,\
    \ R. and I. King, \"Registration Procedures for URL Scheme\n         Names\",\
    \ BCP 35, RFC 2717, November 1999.\n   [9]   Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n         Extensions (MIME) Part Two: Media Types\", RFC 2046,\
    \ November\n         1996.\n   [10]  Howes, T., Smith, M. and F. Dawson, \"A MIME\
    \ Content-Type for\n         Directory Information\", RFC 2425, September 1998.\n\
    \   [11]  Bray, T., Paoli, J. and C. Sperberg-McQueen, \"Extensible Markup\n \
    \        Language (XML)\" World Wide Web Consortium Recommendation REC-\n    \
    \     xml-19980210, February 1998.  http://www.w3.org/TR/1998/REC-\n         xml-19980210.\n\
    \   [12]  Murata, M., St. Laurent, S. and D. Kohn, \"XML Media Types\", RFC\n\
    \         3023, January 2001.\n"
- title: 12.  Author's Address
  contents:
  - "12.  Author's Address\n   Keith Moore\n   University of Tennessee\n   Computer\
    \ Science Department\n   1122 Volunteer Blvd, Suite 203\n   Knoxville TN, 37996-3450\n\
    \   USA\n   EMail: moore@cs.utk.edu\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
