- contents:
  - '         Mapping between X.400 and RFC-822/MIME Message Bodies

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1 Introduction ...........................................
    \   2\n   1.1 Glossary .............................................    3\n   2
    Basic rules for body part conversion ...................    4\n   2.1 Generating
    the IPM Body from MIME ....................    5\n   2.2 Generating the MIME Body
    from the IPMS.Body ..........    6\n   2.3 Mapping the EMA FTBP parameters ......................
    \   7\n   2.3.1 Mapping GraphicStrings .............................    7\n   2.3.2
    Mapping specific parameters ........................    7\n   2.3.3 Summary of
    FTBP elements generated .................   10\n   2.4 Information that is lost
    when mapping ................   11\n   3 Encapsulation of body parts ............................
    \  11\n   3.1 Encapsulation of MIME in X.400 .......................   12\n   3.1.1
    FTBP encapsulating body part .......................   12\n   3.1.2 BP15 encapsulating
    body part .......................   13\n   3.1.3 Encapsulation using IA5 (HARPOON)
    ..................   15\n   3.1.4 Content passing using BP14 .........................
    \  16\n   3.2 Encapsulating X.400 Body Parts in MIME ...............   16\n   3.3
    Encapsulating FTBP body parts in MIME ................   17\n   4 User control
    over the gateway choice ...................   18\n   4.1 Conversion from MIME
    to X.400 ........................   18\n   4.2 Conversion from X.400 to MIME ........................
    \  20\n   5 The equivalence registry ...............................   21\n   5.1
    What information one must give about a mapping\n   5.2 Equivalence summary for
    known X.400  and  MIME\n       Types ................................................
    \  22\n   5.3 MIME to X.400 Table ..................................   23\n   5.4
    X.400 to MIME Table ..................................   23\n   5.5 Use of OBJECT
    IDENTIFIERs and ASN.1 MACROS ...........   24\n   6 Defined Equivalences ...................................
    \  26\n   6.1 IA5Text - text/plain .................................   26\n   6.2
    GeneralText - text/plain (ISO-8859) ..................   27\n   6.3 BilaterallyDefined
    - application/octet-stream\n       ......................................................
    \  29\n   6.4 FTBP  EMA  Unknown  Attachment   -\n       application/octet-stream
    .............................   29\n   6.5 MessageBodyPart - message/RFC822 .....................
    \  30\n   6.6 MessageBodyPart - multipart/* ........................   31\n   6.7
    Teletex - Text/Plain (Teletex) .......................   32\n   7 Body parts where
    encapsulation is recommended ..........   33\n   7.1 message/external-body ................................
    \  34\n   7.2 message/partial ......................................   35\n   7.3
    multipart/signed .....................................   35\n   7.4 multipart/encrypted
    ..................................   36\n   8 Conformance requirements ...............................
    \  37\n   9 Security Considerations ................................   38\n   10
    Author's Address ......................................   38\n   11 Acknowledgements
    ......................................   38\n    References ..............................................
    \  38\n    APPENDIXES ..............................................   41\n    Appendix
    A: Escape code normalization ...................   41\n    Appendix B: OID Assignments
    .............................   44\n    Appendix  C:  Registration information
    for the\n        Teletex character set ...............................   46\n
    \   Appendix  D:  IANA Registration form for new\n    mappings ................................................
    \  48\n    Full Copyright Statement .................................  49\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document is a companion to [MIXER], which defines the
    principles\n   and translation of headers for interworking between MIME-based
    RFC-\n   822 mail and X.400 mail.\n   This document defines how to map body parts
    of X.400 messages into\n   MIME entities and vice versa, including the handling
    of multipart\n   messages and forwarded messages.\n"
  - contents:
    - "1.1.  Glossary\n   The following terms are defined in this document:\n   Body
      part\n      Part of a message that has a unique type. This term comes from\n
      \     X.400; the corresponding term in MIME (RFC 2046) is limited to use\n      in
      parts of a multipart message; the term \"body\" may correspond\n      better.\n
      \  Content-type\n      Type information indicating what the content of a body
      part\n      actually is. This term comes from MIME; the corresponding X.400\n
      \     term is \"body part type\".\n   Mapping\n      (noun): A description of
      how to transform an X.400 body part into\n      a MIME body part, or how to
      transform a MIME body part into an\n      X.400 body part.\n   Equivalence\n
      \     A set of two mappings that taken together provide a lossless\n      conversion
      between an X.400 body part and a MIME body part\n   Encapsulation\n      The
      process of wrapping something from one of the mail systems in\n      such a
      way that it can be carried inside the other mail system.\n      When encapsulating,
      it is not expected that the other mail system\n      can make reasonable sense
      of the body part, but a gateway back\n      into the first system will always
      be able to convert the body part\n      without loss back to its original format.\n
      \  HARPOON encapsulation\n      The encapsulating of a MIME body part by putting
      it inside an IA5\n      body with all headers and encoding intact. First described
      in RFC\n      1496 [HARPOON].\n   Tunneling\n      What happens when one gateway
      encapsulates a message and sends it\n      to another gateway that decapsulates
      it.  The hope is that this\n      will cause minimal damage to the message in
      transit.\n   DISCUSSION\n      At many points in this document, the author has
      found it useful to\n      include material that explains part of the reasoning
      behind the\n      specification. These sections all start with DISCUSSION: and\n
      \     continue to the next numbered section heading; they do not dictate\n      any
      additional requirements on a gateway.\n   The words MUST, SHOULD and MAY, when
      capitalized, are used as defined\n   in RFC 2119 [MUST].\n"
    title: 1.1.  Glossary
  title: 1.  Introduction
- contents:
  - "2.  Basic rules for body part conversion\n   The basic approach for translating
    body parts is described in section\n   2.1 and 2.2.\n   Chapter 3 gives details
    on \"encapsulation\", which allows you to be\n   certain that no information is
    lost even when unknown types are\n   encountered.\n   Chapter 6 gives the core
    mappings for various body parts.\n   The conformance requirements in chapter 8
    describe what the minimum\n   conformance for a MIXER gateway is with respect
    to body part\n   conversion.\n   DISCUSSION:\n   At the moment both the MIME and
    the X.400 worlds seem to be in a\n   stable state of flux with regards to carrying
    around stuff that is\n   not text.  In such a situation, there is little chance
    of defining a\n   mapping between them that is the best for all people, all of
    the\n   time.  For this reason, this specification allows a gateway\n   considerable
    latitude in deciding exactly what conversion to apply.\n   The decision taken
    by the gateway may be based on various information\n   sources:\n   (1)   If the
    gateway knows what body parts or content\n         types the recipient is able
    to handle, or has\n         registered a particular set of preferences for a\n
    \        user, and knows how to convert the message\n         reasonably to those
    body parts, the gateway may\n         choose to convert body parts in the message
    to\n         those types only.\n   (2)   If the gateway gets indications (via
    special\n         headers or heading-extensions defined for the\n         purpose)
    that the sender wanted a particular\n         representation on the \"other side\",
    and the gateway\n         is able to satisfy the request, it may do so. Such\n
    \        a mechanism is defined in chapter 4 of this\n         document.\n   (3)
    \  If the gateway gets a message that might be\n         appropriate to send as
    one out of several types,\n         but where the typing information does not
    tell you\n         which one to use (like an X.400 BP14, FTAM \"just a\n         file\",
    or MIME application/octet-stream), it may\n         apply heuristics like looking
    at content or looking\n         at filenames to figure out how to deal with the\n
    \        message.\n   (4)   If the gateway knows that the next hop for the\n         message
    has limited capabilities (like X.400/84),\n         it may choose to perform conversions
    appropriate\n         for that medium.\n   (5)   Where no mapping is known by
    \ the  gateway,  it\n         may  choose  to  drop the body part, reject the\n
    \        message, or encapsulate the body  part  as\n         described  in  chapter
    3.  The choice may be\n         configurable, but a conformant MIXER gateway  MUST\n
    \        be able to be configured for encapsulation.\n   In many cases, a message
    that goes SMTP->X.400->SMTP will arrive\n   without loss of information.\n   In
    some cases, the reverse translation may not be possible, or two\n   gateways may
    choose to apply different translations, based on the\n   criteria above, leading
    to an apparently inconsistent service.\n   In addition, service will vary because
    some gateways will have\n   implemented conversions not implemented by other gateways.\n
    \  This is believed to be unavoidable.\n"
  - contents:
    - "2.1.  Generating the IPM Body from MIME\n   When converting the body of a message
      from MIME to X.400, the\n   following steps are taken:\n   If the header does
      not contain a 822.MIME-Version field, then\n   generate an IPMS.Body with a
      single IPMS.BodyPart of type\n   IPMS.IA5TextBodyPart containing the body of
      the RFC 822 message with\n   IPMS.IA5TextBodyPart.parameters.repertoire set
      to the default (IA5).\n   If 822.MIME-Version is present, the body is analyzed
      as a MIME\n   message and the body is converted according to the mappings\n
      \  configured and implemented in the gateway.\n"
    title: 2.1.  Generating the IPM Body from MIME
  - contents:
    - "2.2.  Generating the MIME Body from the IPMS.Body\n   When converting the body
      of a message from X.400 to MIME, the\n   following steps are taken:\n   If there
      is more than one body part, and the first body part is IA5\n   and starts with
      the string \"RFC-822-Headers:\"  as the first line,\n   then the remainder of
      this body part shall be appended to the RFC 822\n   header.  This relies upon
      the theory that this body part has been\n   generated according to Appendix
      B of MIXER.  A gateway shall check\n   the consistency and syntax of this body
      part, to ensure that the\n   resulting message is conformant with RFC 822.\n
      \  If the remaining IPMS.Body consists of a single IPMS.Bodypart, there\n   are
      three possibilities.\n   (1)   If it is of type IPMS.IA5Text, and the first
      line\n         is \"MIME-Version: 1.0\", it is assumed to be a\n         HARPOON-encapsulated
      body part. The complete body\n         content is then appended to the headers;
      the\n         separating blank line is inside the message. If an\n         RFC
      822 syntax error is discovered inside the\n         message, it may be mapped
      directly as described\n         below instead.\n   (2)   If it is of type IPMS.IA5Text,
      then this is mapped\n         directly and the default MIME encoding (7bit)
      is\n         used, unless very long lines or non-ASCII or\n         control
      characters are found in the body part, in\n         which case Quoted-Printable
      SHOULD be used.\n   (3)   All other types are mapped according to the\n         mappings
      configured and implemented in the gateway.\n   If the IPMS.Body contains multiple
      IPMS.Bodypart fields, then a MIME\n   message of content type multipart is generated.
      \ If all of the body\n   parts are messages, then this is multipart/digest.
      \ Otherwise it is\n   multipart/mixed.  The components of the multipart are
      generated in\n   the same order as in the IPMS.Body.\n   Each component is mapped
      according to the mappings configured and\n   implemented in the gateway; any
      IA5 body parts are checked to see if\n   they are HARPOON mappings, as described
      above.\n"
    title: 2.2.  Generating the MIME Body from the IPMS.Body
  - contents:
    - "2.3.  Mapping the EMA FTBP parameters\n   DISCUSSION:\n   EMA has defined a
      profile for use of the File Transfer Body Part\n   (FTBP). [MAWG]\n   New mappings
      are expected to use this as the mechanism for carrying\n   body parts, and since
      it is important to have a consistent mapping\n   for the special FTBP parameters,
      these are defined here.\n   The mapping of the body will depend on the content-type
      in MIME and\n   on the application-reference in FTBP, and is not specified here.\n
      \  However, in many cases, we expect that the translation will involve\n   simply
      copying the octets from one format to the other; that is, \"no\n   conversion\".\n"
    - contents:
      - "2.3.1.  Mapping GraphicStrings\n   Some parameters of the EMA Profile are
        encoded as ASN.1\n   GraphicStrings, which are troublesome because they can
        contain any\n   ISO registered graphic character set.  To map these to ASCII
        for use\n   in mail headers, the gateway may either:\n     (1)   Use the RFC
        2047 [MIME-HDR] encoding mechanism to\n           create appropriate encoded-words
        for the headers\n           involved. Note that in some cases, such as within\n
        \          Content-Disposition filenames, the encoded-words\n           must
        be in quotes, which is not the normal usage of\n           encoded-words.\n
        \    (2)   Apply the normalization procedure given in Appendix\n           A
        to identify the ASCII characters of the string,\n           and replace all
        non-ASCII characters with the\n           question mark (?).\n   Both procedures
        are valid for MIXER gateways; the simplified\n   procedure of ignoring escape
        sequences and bit-stripping the result\n   is NOT valid.\n"
      title: 2.3.1.  Mapping GraphicStrings
    - contents:
      - "2.3.2.  Mapping specific parameters\n   The following parameters are mapped
        in both directions:\n   Content-ID\n      The mapping of this element is complex.\n
        \     The Content-ID is encoded as an IPM.MessageIdentifier and entered\n
        \     into the FTBP.FileTransferParameters.related-stored-file.  file-\n      identifier.cross-reference.message-reference.\n
        \     FTBP.FileTransferParameters.related-stored-file.\n      relationship.descriptive-relationship
        is set to the string\n      \"Internet MIME Body Part\".\n      FTBP.FileTransferParameters.related-stored-file.
        \ file-\n      identifier.cross-reference.application-crossreference is set
        to a\n      null OCTET STRING.\n      The reverse mapping is only performed
        if the\n      FTBP.FileTransferParameters.related-stored-file.\n      relationship.descriptive-relationship
        has the string value\n      \"Internet MIME Body Part\".\n   Content-Description\n
        \     The value of this field is mapped to and from the first string in\n
        \     FTBP.FileTransferParameters.environment.user-visible-string.\n   Content-Disposition\n
        \     This field is defined in [CDISP]. It has multiple components; the\n
        \     handling of each component is given below.\n      The \"disposition\"
        component is ignored on MIME -> X.400 mapping,\n      and is always \"attachment\"
        on X.400 -> MIME mapping.\n   C-D: filename\n      The filename component
        of the C-D header is mapped to and from\n      FileTransferParameters.file-attributes.pathname.\n
        \     The EBNF.disposition-type is ignored when creating the FTBP\n      pathname,
        and always set to \"attachment\" when creating the\n      Content-Disposition
        header.  For example:\n         Content-Disposition: attachment; filename=dodo.doc\n
        \     or\n         Content-Disposition: attachment; filename=/etc/passwd\n
        \     The filename will be carried as a single incomplete-pathname\n      string.
        \ No special significance is assumed for the characters \"/\"\n      and \"\\\".
        \ Note that normal security precautions MUST be taken in\n      using a filename
        on a local file system; this should be obvious\n      from the second example.\n
        \     This is done to be conformant with the EMA Profile.\n   C-D: Creation-date\n
        \     Mapped to and from FileTransferParameters.file-attributes.date-\n      and-time-of-creation\n
        \     For this and all other date fields, the RFC-822 date format is\n      used
        (822.date-time). Note that the parameter syntax of [CDISP]\n      requires
        that all dates be quoted!\n   C-D: Modification-date\n      Mapped to and
        from FileTransferParameters.file-attributes.date-\n      and-time-of-last-modification\n
        \  C-D: Read-date\n      Mapped to and from FileTransferParameters.file-attributes.date-\n
        \     and-time-of-last-read-access\n   C-D: Size\n      Mapped to and from
        FileTransferParameters.file-attributes.object-\n      size.  If the value
        is \"no-value-available\", the component is NOT\n      generated.\n   Other
        RFC-822 headers\n      Mapped to extension in FTBP.FileTransferParameters.extensions\n
        \     using the rfc-822-field HEADING-EXTENSION from [MIXER].\n   NOTE:\n
        \     The set of headers that are mapped will depend on the placement of\n
        \     the body part (single body part or multipart).\n      When it is the
        only body of a message, headers starting with\n      \"content-\" SHOULD be
        put into the FTAM extension, and all other\n      headers should be put into
        the IPMS extension for the message.\n      When it is a single bodypart of
        a multipart, ALL headers on the\n      body part are included, since there
        is nowhere else to put them.\n      Note that only headers that start with
        \"content-\" have defined\n      semantics in this case.\n   EMA NOTE\n      The
        EMA profile, version 1.5, specifies that handling of\n      extensions is
        Optional for reception. This means that some non-\n      MIXER gateways may
        not implement handling of this field, and some\n      UAs may not have the
        possibility of showing the content of this\n      field to the user.\n      An
        alternative approach using\n      FTBP.FileTransferParameters.environment.user-visible-string
        was\n      suggested to EMA, and the EMA MAWG recommended in its April 1996\n
        \     conference that the IETF MIXER group should rather choose this\n      approach.\n"
      title: 2.3.2.  Mapping specific parameters
    - contents:
      - "2.3.3.  Summary of FTBP elements generated\n   This is a summary of the preceding
        section, and does not add new\n   information.\n   The following elements
        of the FTBP parameters are mapped or used (the\n   rightmost column gives
        their status in the EMA profile; M=Mandatory,\n   O=Optional, R=Recommended
        for Origination/Receipt):\n"
      - "FileTransferParameters                                             M/M\n
        \ Related-Stored-File                                              O/O\n    file-identifier\n
        \     cross-reference\n        application-crossreference         NULL\n        message-reference
        \                 Content-ID\n    descriptive-relationship               Used
        as marker\n  contents-type                    Must be unstructured-binary
        \    M/M\n  environment                                                      M/M\n
        \   application-reference                  Selects mapping         M/M\n    user-visible-string
        \                   Content-description     R/M\n  file-attributes\n    pathname
        \                              C-D: Filename           R/M\n    date-and-time-of-creation
        \             C-D: Creation-Date      O/O\n    date-and-time-of-last-modification
        \    C-D: Modification-Date  R/M\n    date-and-time-of-last-read-access      C-D:
        Read-Date          O/O\n    object-size                            C-D: Size
        \              R/M\n  extensions                     Other headers       O/O\n
        \  All other elements of the FTBP parameters are discarded.\n   NOTE: There
        is ongoing work on defining a more complete\n   mapping between FTBP headers
        and a set of RFC-822 headers.\n   A gateway MAY choose to support the larger
        set once it is\n   available, but MUST support this limited set.\n"
      title: 2.3.3.  Summary of FTBP elements generated
    title: 2.3.  Mapping the EMA FTBP parameters
  - contents:
    - "2.4.  Information that is lost when mapping\n   MIME defines fields which add
      information to MIME contents.  Two of\n   these are \"Content-ID\", and \"Content-Description\",
      which have special\n   rules here, but MIME allows new fields to be defined
      at any time.\n   The possibilities are limited about what one can do with this\n
      \  information:\n   (1)   When using encapsulation, the information can be\n
      \        preserved\n   (2)   When using mapping to FTBP, the information can
      be\n         preserved in the FileTransferParameters.extensions\n         defined
      for that purpose.\n   (3)   When mapping to a single-body message, the\n         information
      can be preserved as P22 header\n         extensions\n   (4)   When mapping to
      other body part types, the\n         information must be discarded.\n"
    title: 2.4.  Information that is lost when mapping
  title: 2.  Basic rules for body part conversion
- contents:
  - "3.  Encapsulation of body parts\n   Where no mapping is possible, the gateway
    may choose any of the\n   following alternatives:\n   -    Discard the body part,
    leaving a \"marker\" saying what\n        happened\n   -    Reject the message\n
    \  -    \"Encapsulate\" the body part, by wrapping it in a body\n        part
    defined for that purpose in the other mail\n        system\n   The choice to be
    made should be configurable in the gateway, and may\n   depend on both policy
    and knowledge of the recipient's capabilities.\n"
  - contents:
    - "3.1.  Encapsulation of MIME in X.400\n   Four body parts are defined here to
      encapsulate MIME body parts in\n   X.400.\n   This externally-defined body part
      is backwards compatible with RFC\n   1494. The FTBP body part is compatible
      with the EMA MAWG document\n   [MAWG], version 1.5, but has some extensions,
      in particular the one\n   for extra headers.\n   The imagined scenarios for
      each body part are:\n   FTBP For use when sending to recipients that can handle\n
      \       generic FTBP, and for tunnelling MIME to a MIME UA\n   BP15 For use
      when tunnelling MIME to a MIME UA through an\n        X.400(88) network, or
      to UAs that have been written\n        to RFC 1494\n   IA5  For use when tunneling
      MIME to a MIME UA through an\n        X.400 network, where some of the links
      may involve\n        X.400(84).\n   BP14 For use when the recipient may be an
      X.400(84) UA\n        with BP14 handling capability, and the loss of\n        information
      in headers is not regarded as important.\n   but the gateway is free to use
      any method it finds appropriate in any\n   situation.\n   FTBP is expected to
      be the most useful body part in sending to\n   X.400(92) systems, while the
      BP14 content passing is primarily useful\n   for sending to X.400(84) systems.\n"
    - contents:
      - "3.1.1.  FTBP encapsulating body part\n   This body part utilizes the fundamental
        assumption in MIME that all\n   message content can be legally and completely
        represented by a single\n   octet stream, the \"canonical format\".\n   The
        FTBP encapsulating body part is defined by the application-\n   reference
        id-mime-ftbp-data; all headers are mapped to the FTBP\n   headers, including
        putting the \"Content-type:\" header inside the FTBP\n   ExtensionsField.\n
        \  Translation from the MIME body part is done by:\n   -    Undoing the content-transfer-encoding\n
        \  -    Setting the \"FileTransferData.FTdata.value.octet-\n        aligned\"
        to the resulting string of octets\n   -    Putting the appropriate parameters
        into the headers.\n   Reversing the translation is done by:\n   -    Extracting
        the headers\n   -    Applying an appropriate content-transfer-encoding to\n
        \       the body. If this is for some reason different from\n        the content-transfer-encoding:
        header retrieved from\n        the headers, the old one must be deleted.\n
        \  This mapping is lossless, and therefore counts as \"no conversion\".\n
        \  Note that this mapping does not work with multipart types; the\n   multipart
        must first be mapped to a ForwardedIPMessage.\n"
      title: 3.1.1.  FTBP encapsulating body part
    - contents:
      - "3.1.2.  BP15 encapsulating body part\n   This section defines an extended
        body part, based on body part 15,\n   which may be used to hold any MIME content.\n
        \   mime-body-part EXTENDED-BODY-PART-TYPE\n          PARAMETERS MimeParameters\n
        \                  IDENTIFIED BY id-mime-bp-parameters\n          DATA            OCTET
        STRING\n          ::= id-mime-bp-data\n    MimeParameters ::=\n          SEQUENCE
        {\n                     content-type       IA5String,\n                     content-parameters
        SEQUENCE OF\n                                        SEQUENCE {\n                                            parameter
        \         IA5String\n                                            parameter-value
        \   IA5String\n                                        }\n                     other-header-fields
        RFC822FieldList\n                 }\n   The OBJECT IDENTIFIERS id-mime-bp-parameter
        and id-mime-bp-data are\n   defined in Appendix B.  A MIME content is mapped
        onto this body part.\n   The MIME headers of the body part are mapped as follows:\n
        \  RFC822FieldList is defined in Appendix L of [MIXER].\n   Content-Type:\n
        \       The \"type/subtype\" string is mapped to\n        MimeParameters.content-type.\n
        \       For each \"parameter=value\" string create a\n        MimeParameters.content-parameters
        element. The\n        MimeParameters.content-Parameters.parameter field is\n
        \       set to the parameter and the MimeParameters.content-\n        parameters.parameter-value
        field is set to the value.\n        Quoting is preserved in the parameter-value.\n
        \   Other\n        Take all other headers and create\n        MimeParameters.other-header-fields.\n
        \       The MIME-version, content-type and content-transfer-\n        encoding
        fields are NOT copied.\n   NOTE:\n        The set of headers that are mapped
        will depend on the\n        placement of the body part (single body part or\n
        \       multipart).\n        When it is the only body of a message, headers\n
        \       starting with \"content-\" SHOULD be put into the\n        other-header-fields,
        and all other headers should be\n        put into the IPMS extension for the
        message.\n        When it is a single bodypart of a multipart, ALL\n        headers
        on the body part are included, since there is\n        nowhere else to put
        them. Note that only headers that\n        start with \"content-\" have defined
        semantics in this\n        case.\n   The body is mapped as follows:\n   Convert
        the MIME body part into its canonical form, as specified in\n   Appendix H
        of MIME [MIME].  This canonical form is used to generate\n   the mime-body-part.data
        octet string.\n   The Parameter mapping may be used independently of the body
        part\n   mapping (e.g., in order to use a different encoding for a mapped
        MIME\n   body part).\n   This body part contains all of the MIME information,
        and so can be\n   mapped back to MIME without loss of information.\n   The
        OID id-mime-bp-data is added to the Encoded Information Types of\n   the envelope.\n
        \  This body part is completely compatible with RFC 1494.\n   When converting
        back to a MIME body part, the gateway is responsible\n   for:\n   (1)   Selecting
        an appropriate content-transfer-encoding,\n         and deleting any content-transfer-encoding
        header\n         from the other-header-fields\n   (2)   Adding quotes to any
        parameters that need them (but\n         not adding quotes to parameters that
        are already\n         quoted)\n   (3)   Removing any content-type field that
        is left in the\n         RFC822FieldList of the message that is redundant
        or\n         conflicting with the one from the mime-body-part\n   (4)   Make
        sure that on multipart messages, the boundary\n         string actually used
        is reflected in the boundary-\n         parameter of the content-type header,
        and does not\n         occur within the body of the message.\n"
      title: 3.1.2.  BP15 encapsulating body part
    - contents:
      - "3.1.3.  Encapsulation using IA5 (HARPOON)\n   This approach is the one taken
        in RFC 1496 - HARPOON - for tunneling\n   any MIME body part through X.400/84
        networks. It has proven rather\n   unhelpful for bringing information to X.400
        users, but preserves all\n   the information of a MIME body part.\n   The
        following IA5Text body part is made:\n   -    Content = IA5String\n   -    First
        bytes of content: (the description is in US\n        ASCII, with C escape
        sequences used to represent\n        control characters):\n        MIME-version:
        <version>\\r\\n\n        Content-type: <the proper MIME content type>\\r\\n\n
        \       Content-transfer-encoding: <7bit, quoted-printable or base64>\\r\\n\n
        \       <Possibly other Content headings here, terminated by\\r\\n>\n         \\r\\n\n
        \       <Here follows the bytes of the content, encoded\n         in the proper
        encoding>\n   All implementations MUST place the MIME-version: header first
        in the\n   body part. Headers that are placed by [MIXER] into other parts
        of the\n   message MUST NOT be placed in the MIME body part.\n   This encapsulation
        may also be applied to subtypes of multipart,\n   creating a single IA5 body
        part that contains a single multipart/*,\n   which in turn may contain multiple
        MIME body parts.\n"
      title: 3.1.3.  Encapsulation using IA5 (HARPOON)
    - contents:
      - "3.1.4.  Content passing using BP14\n   This is described in this section
        because it is at the same\n   conceptual level as encapsulation. It is a lossy
        transformation; it\n   is impossible to reconstruct the MIME type information
        from it.\n   Nevertheless, there is a demand for such functionality.\n   This
        \"encapsulation\" simply strips off all headers, undoes the\n   content-transfer-encoding,
        and creates a BilaterallyDefined body part\n   (BP14) from the resulting octet
        stream.\n   No reverse translation is defined; when a BP14 arrives at a MIXER\n
        \  gateway, it will be turned into an application/octet-stream according\n
        \  to chap. 6.3\n"
      title: 3.1.4.  Content passing using BP14
    title: 3.1.  Encapsulation of MIME in X.400
  - contents:
    - "3.2.  Encapsulating X.400 Body Parts in MIME\n   This section specifies a generic
      mechanism to map X.400 body parts to\n   a MIME content.  This allows for the
      body part to be tunneled through\n   MIME.   It may also be used directly by
      an appropriately configured\n   MIME UA.\n   This content-type is defined to
      carry any X.400 extended body part.\n   The mapping of all standard X.400 body
      parts is defined in this\n   document.  The content-type field is \"application/x400-bp\".
      \ The\n   parameter is defined by the EBNF:\n       mime-parameter =  \"bp-type=\"
      ( object-identifier / 1*DIGIT=\n   If the body is a basic body part, the bp-type
      parameter is set to the\n   number of the body part's context-specific tag,
      that is, the tag of\n   the IPMS.Body.BodyPart component.\n   If the body is
      an Extended Body Part, the EBNF.object-dentifier is\n   set to the OBJECT IDENTIFIER
      from IPMS.body.externally-\n   defined.data.direct-reference.\n   For example,
      a basic VideotexBodyPart will have\n      Content-type=application/x400-bp;
      bp-type=6\n   whilst a Extended Videotex body part will have\n      Content-type=application/x400-bp;
      bp-type=2.6.1.4.5\n   The body contains the raw ASN.1 IPM body octet stream,
      that is, the\n   BER encoding of the IPM.Body.BodyPart, including the initial
      tag\n   octet.  The content may use a content-transfer-encoding of either\n
      \  base64 or quoted-printable when carried in 7-bit MIME.  It is\n   recommended
      to use the one which gives the more compact encoding of\n   the data.  If this
      cannot be determined, Base64 is recommended.  No\n   attempt is made to turn
      the parameters of Extended Body Parts into\n   MIME parameters, as this cannot
      be done in a general manner.\n   For extended body parts, the\n"
    title: 3.2.  Encapsulating X.400 Body Parts in MIME
  - contents:
    - "3.3.  Encapsulating FTBP body parts in MIME\n   The File Transfer Body Part
      is believed to be important in the future\n   as \"the\" means of carrying well-identified
      data in X.400 networks.\n   They also share the property (at lest when limited
      to the EMA MAWG\n   functional profile) of having a well-defined data part that
      is always\n   representable as a sequence of bytes.\n   This conversion will
      have to fail, and the x400-bp encapsulation used\n   instead, if:\n   -    FileTransferData
      has more than one element\n   -    Contents-type is not unstructured-binary\n
      \  -    Parameters that are not mappable, but important, are\n        present
      (like Compression, which EMA doesn't\n        recommend).\n   Otherwise, it
      can be encapsulated in MIME by:\n   -    Creating the \"content-type\" value
      by forming the\n        string \"application/x-ftbp.\" and appending the\n        numbers
      of the OID found in\n        FileTransferParameters.environment.application-\n
      \       reference.registered-identifier\n   -    Mapping all other parameters
      according to the\n        standard FTBP parameter mapping\n   -    Applying
      an appropriate content-transfer-encoding to\n        the data contained in FileTransferData.value.encoding\n
      \  DISCUSSION:\n   The choice of the somewhat strange, and by necessity unregistered,\n
      \  MIME type \"application/x-ftbp.n.n.n.n\" is because for any concrete\n   example
      of this usage, it will be easy to configure any MIME reader\n   to take advantage
      of the identification. If the MIME type\n   registration rules are ever changed
      to allow the registration of a\n   namespace, rather than just of names, the
      \"x-\" can be deleted, and\n   the types can be \"application/ftbp.n.n.n.n\".\n"
    title: 3.3.  Encapsulating FTBP body parts in MIME
  title: 3.  Encapsulation of body parts
- contents:
  - "4.  User control over the gateway choice\n   In some cases, the gateway may make
    an inappropriate choice when\n   deciding what to do about a particular body part.\n
    \  To allow an escape clause, this chapter defines a way in which the\n   user
    can signal the gateway what action it finds most appropriate.\n   The headers
    given here override any \"conversion prohibited\" and\n   \"conversion with loss
    prohibited\" on the message.\n   It is still the gateway's responsibility that
    the generated messages\n   conform to the destination domain's syntax rules.\n
    \  DISCUSSION:\n   The intent of this mechanism is to allow the sender to efficiently\n
    \  get a message through to a single recipient when the sender has\n   information
    about the recipient that the gateway does not have.\n   It is not a part of the
    minimum functionality listed in chapter 8; a\n   gateway does not have to implement
    this spec to be MIXER conformant,\n   but if implemented, it should be done like
    this.\n   The additional complexity, both in user interface and in protocol, of\n
    \  making this field selectable per recipient was not thought\n   worthwhile;\n"
  - contents:
    - "4.1.  Conversion from MIME to X.400\n   The header field described below specifies
      explicit MIXER conversion.\n   Comments are allowed within the field according
      to the usual RFC 822\n   convention.\n   If \"x400-object-id\" is omitted, \"tunnel\"
      is assumed.\n      mime-to-x400 = \"Wanted-X400-Conversion\" \":\"\n                      [
      mime-from ]  [ x400-object-id ]\n                      \"in\" x400-encoding\n
      \     x400-object-id =  \"to\" ( object-identifier-2 / \"tunnel\" )\n      x400-encoding
      = \"bp14\" / \"bp15\" / \"ftbp\" / \"ia5\"\n      mime-from = \"from\" mime-type\n
      \     mime-type = word\n   There is no way to ask for a different conversion
      based on MIME\n   parameters or bodypart content.\n   Examples:\n   Wanted-X400-Conversion:
      from application/msword\n                   to 1.2.840.113556.4.2 (Microsoft
      defined ms-word)\n                   in ftbp\n   This uses the MAWG definitions,
      and leads to an FTBP encoding.\n   Wanted-X400-Conversion: from application/msword\n
      \                 to tunnel in bp14\n   This leads to a Body Part 14 encoding
      for all body parts of type\n   application/msword.\n   Wanted-X400-Conversion:
      in bp14\n   This requests that this specific body part be encoded in Body Part\n
      \  14.\n   This field may be used in two places:\n      (1)   In the heading
      of an unstructured MIME body part.\n            In this case the EBNF.mime-from
      is omitted, and the\n            requested conversion applies to the body part.\n
      \     (2)   In a multipart. In this case, the body part type to\n            which
      the conversion applies is defined by\n            EBNF.mime-from, and the conversion
      applies to all\n            body parts of this MIME type contained in the\n
      \           multipart, including those contained in nested\n            messages
      and multiparts. If a contained body part\n            has its own heading, this
      takes precedence. Note\n            that the \"from\" parameter is mandatory
      when used in\n            a multipart.\n   The EBNF.x400-object-id shall be
      present when \"bp15\" or\n   \"ftbp\" encoding is selected.\n   The value \"tunnel\"
      implies encapsulation as defined in\n   Chapter 3.\n   The \"object identifier\"
      used below is:\n   -    For BP 15, it is the value of the EXTENDED-BODY-PART-\n
      \       TYPE macro that defines the body part, which is found\n        in ExternallyDefinedBodyPart.data.direct-reference.\n
      \  -    For FTBP, it is the value of the\n        Environment.application-reference.\n"
    title: 4.1.  Conversion from MIME to X.400
  - contents:
    - "4.2.  Conversion from X.400 to MIME\n   The IPM heading defined here shall
      be present in the heading of a\n   message. It defines the mapping for all body
      parts of the specified\n   types, including those in nested messages.\n   wanted-MIME-conversion
      HEADING-EXTENSION\n           VALUE WantedMIMEConversions\n           ::= id-wanted-MIME-conversions\n
      \  WantedMIMEConversions ::= SEQUENCE OF X400toMIMEConversion\n   X400toMIMEConversion
      ::= SEQUENCE {\n           x400-type X400Type,\n           mime-type MIMEType
      }\n   X400Type ::= CHOICE {\n           standard [0] INTEGER,           -- standard
      body part\n           extended [1] OBJECT IDENTIFIER,  -- BP 15\n           ftbp
      \    [2] OBJECT IDENTIFIER}     -- FTBP\n                                               --
      application-reference\n   MIMEType ::= SEQUENCE {\n           type IA5String,
      \        -- type (e.g., application/ms-word)\n           encoding [1] IA5String
      OPTIONAl -- e.g. quoted-printable\n           parameters [2] IA5String OPTIONAL
      }     -- MIME Parameters\n   The heading extension includes all requested conversions,
      with\n   explicit information as to how each body part type is encoded in\n
      \  MIME.\n   FTBP is identified as a separate body part type, as there will
      be a\n   need for different encodings, dependent on what is being carried.\n
      \  Encapsulation is requested by asking for \"application/x400-bp\" or\n   \"application/ftbp\"
      as the destination type.\n   For FTAM body parts, the parameters will survive
      the gatewaying\n   process. For other body parts, there are three alternatives:\n
      \     (1)   The gateway knows a defined mapping for this\n           particular
      body part and destination type. It will be used,\n           and parameters
      mapped accordingly.\n      (2)   The gateway knows how to extract an OCTET STRING\n
      \          from the body part, and the destination is a simple MIME body\n           part.
      All information outside the OCTET STRING is lost. (This\n           may be the
      case for a BP14 that should end up in an\n           application/xyzzy, for
      instance).\n      (3)   The gateway knows of no relevant mapping, and does\n
      \          not know how to simplify the X.400 body part. The gateway\n           will
      then proceed as if the mapping control field had not\n           been present.\n"
    title: 4.2.  Conversion from X.400 to MIME
  title: 4.  User control over the gateway choice
- contents:
  - '5.  The equivalence registry

    '
  - contents:
    - "5.1.  What information one must give about a mapping\n   The following information
      MUST be supplied when describing an\n   equivalence or a mapping:\n   MIME type
      name (which must be preregistered)\n   X.400 body part (often BP15 or FTAM Body
      Part)\n   If BP15 is used, the following information must be given:\n      (1)
      \  Object Identifier for X.400 BP15 Data\n      (2)   Object Identifier for
      X.400 BP15 Parameters\n      (3)   X.400 ASN.1 Syntax (must be an EXTENDED-BODY-PART-\n
      \          TYPE macro)\n   If FTBP is used, the following information must be
      given:\n      <1)   Object Identifier for the FTAM Environment.application-\n
      \     reference\n      <2)   Object Identifier for the FTAM Contents-type, if\n
      \          unstructured-binary is not used\n      (3)   Any other special considerations\n
      \  In all cases, the following must be given:\n   Conversion algorithms. The
      expected effect of \"Conversion prohibited\"\n   and \"Conversion with loss
      prohibited\" should be noted.\n   The conversion must be specified with enough
      detail to permit\n   independent implementation; literature references are acceptable.\n
      \  An equivalence can be registered with IANA using the form at the end\n   of
      this document. The purpose of the registration is to achieve a\n   greater uniformity
      among gateways implementing the same translation;\n   there is no requirement
      that a gateway must support all of the\n   translations that are registered
      with IANA, and there is no\n   requirement that all conversions supported by
      a gateway are\n   registered with IANA. Specific conformance requirements for
      MIXER are\n   given at the end of this document.\n   Anyone can register an
      equivalence with IANA, and may update the\n   registered equivalence at any
      time, or reassign the right to update\n   the registry entry at any time.  However,
      the IESG has the power to\n   \"lock\" a registration, so that changing it requires
      IESG approval,\n   and to update such a \"locked\" registration. All registered\n
      \  equivalences defined in standards-track documents (including this\n   one)
      are locked.\n"
    title: 5.1.  What information one must give about a mapping
  - contents:
    - "5.2.  Equivalence summary for known X.400 and MIME Types\n   This section itemizes
      the equivalences for all currently known MIME\n   content-types and X.400 body
      parts.\n   For each MIME content-type/X.400 body part pair, the equivalence\n
      \  table contains an entry with the following sections:\n      X.400 Body Part\n
      \        This section identifies the X.400 Body Part governed by this\n         Table
      entry. It includes any OBJECT IDENTIFIERs or other\n         parameters necessary
      to uniquely identify the Body Part.\n      MIME Content-Type\n         This
      section identifies the MIME content-type governed by this\n         Table entry.
      \ The MIME content-type named here must be\n         registered with the IANA.\n
      \     Section/document reference\n         Reference to section of this document,
      or to the other document\n         that describes this mapping.\n   The initial
      Equivalence Table entries in this document are described\n   using this convention.\n
      \  Further registrations of equivalences should be submitted to the IANA\n   after
      a public review, using the example form given at the end of\n   this document.\n"
    title: 5.2.  Equivalence summary for known X.400 and MIME Types
  - contents:
    - "5.3.  MIME to X.400 Table\n   MIME content-type          X.400 Body Part             Section\n
      \  -----------------          ------------------          -------\n   text/plain\n
      \    charset=us-ascii         ia5-text                     6.1\n     charset=ISO-8859-x
      \      EBP - GeneralText            6.2\n   text/richtext              no mapping
      defined           Encap\n   application/oda            EBP - ODA                    [ODA]\n
      \  application/octet-stream   bilaterally-defined or       6.3\n                              FTBP
      unknown attachment      6.4\n   application/postscript     EBP - mime-postscript-body
      \  [POSTSCRIPT]\n   image/g3fax                g3-facsimile                 [IMAGES]\n
      \  image/jpeg                 EBP - mime-jpeg-body         [IMAGES]\n   image/gif
      \                 EBP - mime-gif-body          [IMAGES]\n   audio/basic                no
      mapping defined           Encap\n   video/mpeg                 no mapping defined
      \          Encap\n   message/RFC822             ForwardedIPMessage           6.5\n
      \  multipart/*                ForwardedIPMessage           6.6\n   multipart/signed
      \          HARPOON encap                7.3\n   multipart/encrypted        HARPOON
      encap                7.4\n   Abbreviation: EBP - Extended Body Part\n"
    title: 5.3.  MIME to X.400 Table
  - contents:
    - "5.4.  X.400 to MIME Table\n                             Basic Body Parts\n
      \  X.400 Basic Body Part      MIME content-type           Section\n   ---------------------
      \     --------------------        -------\n   ia5-text                   text/plain;charset=us-ascii
      6.1\n   voice                      No Mapping Defined          Encap\n   g3-facsimile
      \              image/g3fax                 [IMAGES]\n   g4-class1                  no
      mapping defined          Encap\n   teletex                    text/plain;charset=teletex
      \ 6.7\n   videotex                   no mapping defined          Encap\n   encrypted
      \                 no mapping defined          Encap\n   bilaterally-defined
      \       application/octet-stream    6.3\n   nationally-defined         no mapping
      defined          Encap\n   externally-defined         See Extended Body Parts
      below\n   ForwardedIPMessage         message/RFC822 or multipart 6.5,6.6\n   X.400
      Extended Body Part   MIME content-type             Section\n   -------------------------
      \ --------------------          -------\n   GeneralText                text/plain;charset=ISO-8859-x
      \ 6.2\n   ODA                        application/oda               [ODA]\n   mime-postscript-body
      \      application/postscript        [POSTSCRIPT]\n   mime-jpeg-body             image/jpeg
      \                   [IMAGES]\n   mime-gif-body              image/gif                     [IMAGES]\n
      \  FTAM                       various                       2.3,6.4\n   FTAM
      application ID        MIME content type              Section\n   -------------------
      \       -----------------              -------\n   ema-unknown-attachment     application/octet-stream
      \      6.4\n"
    title: 5.4.  X.400 to MIME Table
  - contents:
    - "5.5.  Use of OBJECT IDENTIFIERs and ASN.1 MACROS\n   When one wants to define
      new BP15 body parts for use with\n   equivalences, it is important to know that
      X.420 dictates that\n   Extended Body Parts shall:\n   (1)   use OBJECT IDENTIFIERs
      (OIDs) to uniquely identify\n         the contents, and\n   (2)   be defined
      by using the ASN.1 Macro:\n              EXTENDED-BODY-PART-TYPE MACRO::=\n
      \             BEGIN\n                 TYPE NOTATION  ::= Parameters Data\n                 VALUE
      NOTATION ::= value (VALUE OBJECT IDENTIFIER)\n                 Parameters     ::=
      \ \"PARAMETERS\" type \"IDENTIFIED\"\n                                     \"BY\"
      value(OBJECT IDENTIFIER)\n                                   | empty;\n                 Data
      \          ::= \"DATA\" type\n              END\n   To meet these requirements,
      this document uses the OID\n      mixer\n   defined in [MIXER], as the root
      OID for X.400 Extended Body Parts\n   defined for MIME interworking.\n   Each
      Extended Body Part contains Data and optional Parameters, each\n   being named
      by an OID.  To this end, two OID subtrees are defined\n   under mixer-bodies,
      one for Data, and the other for Parameters:\n      mixer-bp-data  OBJECT IDENTIFIER
      ::=\n                     { mixer 1 }\n      mixer-bp-parameter OBJECT IDENTIFIER
      ::=\n                     { mixer 2 }\n   All definitions of extended X.400
      body parts submitted to the IANA\n   for registration with a mapping must use
      the Extended Body Part Type\n   macro for the definition.  See [IMAGES] for
      an example.\n   Lastly, the IANA will use the mixer-bp-data and mixer-bp-parameter\n
      \  OIDs as root OIDs for any new MIME content-type/subtypes that aren't\n   otherwise
      registered in the Equivalence Table.\n   NOTE: The ASN.1 for an ExternallyDefinedBodyPart
      is\n      ExternallyDefinedBodyPart ::= SEQUENCE {\n        parameters [0] ExternallyDefinedParameters
      OPTIONAL,\n        data           ExternallyDefinedData }\n      ExternallyDefinedParameters
      ::= EXTERNAL\n      ExternallyDefinedData ::= EXTERNAL\n   The ASN.1 for EXTERNAL
      is (from X.208):\n      EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE\n      {direct-reference
      \    OBJECT IDENTIFIER OPTIONAL,\n      indirect-reference    INTEGER OPTIONAL,\n
      \     data-value-descriptor ObjectDescriptor OPTIONAL,\n      encoding CHOICE\n
      \       {single-ASN1-type  [0] ANY,\n         octet-aligned     [1] IMPLICIT
      OCTET STRING,\n         arbitrary         [2] IMPLICIT BIT STRING}}\n      ObjectDescriptor
      ::= [UNIVERSAL 7] IMPLICIT GraphicString\n   There are a bit too many choices
      here; the common X.400 usage for\n   BP15 encoding is to:\n   (1)   Always use
      direct-reference\n   (2)   Omit indirect-reference and data-value-descriptor\n
      \  (3)   Use the single-ASN1-type encoding only\n   Unfortunately, some implementations
      have chosen to use the octet-\n   aligned choice when constructing values where
      the ASN.1 type is OCTET\n   STRING, which of course caused interoperability
      problems.\n   An attempt to specify that X.420 only allowed the single-ASN1-type\n
      \  choice in the 1996 versions is still (Sept 1995) being debated in\n   ISO;
      the end result seems to be that all agree in principle that\n   single-ASN1-type
      should be used, but that one has to allow the\n   generation of the octet-aligned
      choice as being conformant.\n"
    title: 5.5.  Use of OBJECT IDENTIFIERs and ASN.1 MACROS
  title: 5.  The equivalence registry
- contents:
  - '6.  Defined Equivalences

    '
  - contents:
    - "6.1.  IA5Text - text/plain\n   X.400 Body Part: IA5Text MIME Content-type:
      text/plain; charset=US-\n   ASCII Conversion Type: No conversion Comments:\n
      \  When mapping from X.400 to MIME, the \"repertoire\" parameter is\n   ignored.\n
      \  When mapping from MIME to X.400, the \"repertoire\" parameter is set to\n
      \  IA5 (5).\n   NOTE: The MIME Content-type headers are omitted, when mapping
      from\n   X.400 to MIME, if and only if the IA5Text body part is the only body\n
      \  part in the IPMS.Body sequence.\n   NOTE: IA5Text specifies the \"currency\"
      symbol in position 2/4. This\n   is converted without comment to the \"dollar\"
      symbol, since the author\n   of this document has seen many documents in which
      the position was\n   intended to indicate \"dollar\" while he has not yet seen
      one in which\n   the \"currency\" symbol is intended.\n   (For reference: The
      T.50 (1988) recommendation, which defines IA5,\n   talks about ISO registered
      set number 2, while ASCII, using the\n   \"dollar\" symbol, is ISO registered
      set number 6. There are no other\n   differences.)\n   NOTE: It is not uncommon,
      though it is a violation of the standard,\n   to use 8-bit character sets inside
      an IA5 body part. Gateways that\n   can expect to encounter this situation should
      consider implementing\n   something like the guidance given in RFC 1428 [MIMETRANS],\n
      \  \"Transition of Internet Mail from just-send-8 to 8-bit SMTP/MIME\",\n   and
      generate appropriate charset parameters for the MIME messages\n   they generate.
      This behavior is not required for MIXER conformance,\n   since it is only needed
      when the base standards are violated.\n"
    title: 6.1.  IA5Text - text/plain
  - contents:
    - "6.2.  GeneralText - text/plain (ISO-8859)\n   X.400 Body Part: GeneralText;
      CharacterSets in\n                   6, 14, 42, 87, 100,101,109,110,126,127,138,144,148\n
      \  MIME Content-Type: text/plain; charset=ISO-8859-(1-9)\n                               or
      iso-2022-jp\n   Conversion Type: Text conversion without character change When\n
      \  mapping from X.400 to MIME, the character-set is chosen from the\n   table
      below according to the value of Parameters.CharacterSets. If no\n   match is
      found, and the gateway does not support a conversion, the\n   character set
      shall be encoded as x-iso-nnn-nnn-nnn, where \"nnn\" is\n   the numbers of the
      Parameters.CharacterSets, sorted in numeric order.\n   When mapping from MIME
      to X.400, GeneralText is an Extended Body\n   Part, hence it requires an OID.
      \ The OID for the GeneralText body is\n   defined in [MOTIS], part 8, annex
      D, as {2 6 1 4 11}. The OID for the\n   parameters is {2 6 1 11 11}.\n   The
      Parameters.CharacterSets is set from table below according to the\n   value
      of \"charset\"\n   The following table lists the MIME character sets and the\n
      \  corresponding ISO registry numbers. If no correspondence is found,\n   this
      conversion fails, and the generic body part approach is used.\n   MIME charset
      \   ISO IR numbers          Comment\n   -----------------------------------------------\n
      \  ISO-8859-1      6, 100                  West European \"8-bit ASCII\"\n   ISO-8859-2
      \     6, 101                  East European\n   ISO-8859-3      6, 109                  <regarded
      as obsolete>\n   ISO-8859-4      6, 110                  <regarded as obsolete>\n
      \  ISO-8859-5      6, 144                  Cyrillic\n   ISO-8859-6      6, 127
      \                 Arabic\n   ISO-8859-7      6, 126                  Greek\n
      \  ISO-8859-8      6, 138                  Hebrew\n   ISO-8859-9      6, 148
      \                 Other Latin-using languages\n   ISO-2022-JP     6, 14, 42,
      87           Japanese\n   When converting from MIME to X.400, generate the correct
      OIDs for use\n   in the message envelope's Encoded Information Types by looking
      up the\n   ISO IR numbers in the above table, and then appending each to the\n
      \  id-cs-eit-authority {1 0 10021 7 1 0} OID, generating 2-4 OIDs.\n   Similar
      procedures can be used with other MIME charsets that map to a\n   set of ISO
      character sets.\n   The escape sequences to designate and invoke the relevant
      character\n   sets in their proper positions must be added to the front of the\n
      \  GeneralText character string.\n   For ISO 8859-1, the relevant escape sequence
      will be:\n   ESC 28 42\n         ASCII in G0\n   ESC 2D 41\n         ISO-IR-100
      in G1\n   ESC 21 41\n         High control character set in C1\n   ESC 7E\n
      \        Locking shift 1 Right\n   These escape sequences are removed when converting
      from GeneralText\n   to text/plain.\n   Note that new character sets may be
      defined on both the Internet side\n   and the X.400 side; a gateway MAY choose
      to implement more\n   conversions in the same fashion.\n   DISCUSSION:\n   The
      conversion of text is a problematic one, and one in which it is\n   likely that
      gateways should be given wide latitude to make decisions\n   based upon their
      knowledge of the user's preferences. The text given\n   below is thought to
      give the best approximation to a gateway\n   conforming to current and anticipated
      usage in the MIME and X.400\n   worlds, and is the way recommended when no knowledge
      of the\n   recipient's capabilities exists.\n   The lossless changes, such as
      normalizing escape sequences, can be\n   done even when \"conversion-prohibited\"
      is set. If \"conversion-with-\n   loss-prohibited\" is set, translation to a
      character set that is not\n   able to encode all characters cannot be done,
      and the message should\n   be non-delivered with an appropriate non-delivery
      reason.\n   The common use of character sets in MIME is somewhat different from\n
      \  the rules given by X.400; in particular, it is common in MIME to\n   assume
      that the character sets follow strict rules. For the ISO-\n   8859-x character
      sets, it is assumed that they are designated and\n   invoked at the beginning
      of the text, and that no designation or\n   invocation sequences occur within
      the body of the text.\n   The rules for ISO-2022-JP are given in RFC 1468 [2022-JP],
      and are\n   even more particular, using a pure 7-bit encoding in which each
      line\n   of text starts in ASCII.\n   Therefore, the text must be \"normalized\"
      by going through the whole\n   message, using a state machine or similar device
      to remove or rewrite\n   all escape and shift sequences.\n   Appendix A gives
      pseudocode for such a conversion.\n   NOTE: In 1988, the GeneralText body part
      was defined in ISO 10021-8\n   [MOTIS], and NOT in the corresponding CCITT recommendation;
      this was\n   added later.  Also, the parameters have been heavily modified;
      they\n   should be a SET OF INTEGER in the currently valid text.  Use the\n
      \  latest version of the standard that you can get hold of.\n"
    title: 6.2.  GeneralText - text/plain (ISO-8859)
  - contents:
    - "6.3.  BilaterallyDefined - application/octet-stream\n   X.400 Body Part: BilaterallyDefined\n
      \  MIME Content-Type: Application/Octet-Stream (no parameters)\n   Conversion
      Type: No conversion\n   When mapping from MIME to X.400, if there are parameters
      present in\n   the Content-Type: header field, they are removed.\n   DISCUSSION:\n
      \  The parameters \"name\" \"type\" and \"conversions\" are advisory; name and\n
      \  conversions are depreciated in RFC 2046.\n   The parameter \"padding\" changes
      the interpretation of the last byte\n   of the data, but it is deemed better
      by the WG to delete this\n   information than to non-deliver the body part.
      The \"padding\"\n   parameter is rarely used with MIME.\n   Use of BilaterallyDefined
      Body Parts is specifically deprecated in\n   both 1988 and 1992 X.400.  It is
      retained solely for backward\n   compatibility with 1984 systems, and because
      it is in common use.\n"
    title: 6.3.  BilaterallyDefined - application/octet-stream
  - contents:
    - "6.4.  FTBP EMA Unknown Attachment - application/octet-stream\n   X.400 Body
      Part: FTBP EMA Unknown Attachment\n   MIME Content-Type: Application/Octet-Stream\n
      \  Conversion Type: No conversion\n   The OID for the Unknown Attachment is
      { joint-iso-ccitt(2)\n   country(16) us(840) organization(1) ema(113694) objects(2)\n
      \  messaging(2) attachments(1) unknown(1) }, or\n   2.16.840.1.113694.2.2.1.1
      for short.\n   NOTE: Previous EMA drafts gave it as { iso(1) countries(2) usa(840)\n
      \  organization (1) ema (113694) objects(2) messaging(2) attachments(1)\n   unknown
      (1)}, or 1.2.840.1.113694.2.2.1.1 for short.\n   The parameters for this type
      must be mapped according to chapter 2.3,\n   with the following extensions for
      the parameters of the\n   application/octet-stream:\n      If there is no Content-Disposition
      parameter with a filename, and\n      there is a name parameter, the FTBP.FileTransferParameters.File-\n
      \     attributes.pathname is generated from this parameter. Note that\n      RFC
      2046 recommends not using the \"name\" parameter.\n   The \"type\", \"conversions\"
      and \"padding\" attributes are ignored;\n   \"type\" is for human consumption;
      \"conversions\" are discouraged in RFC\n   2046.\n   The body mapping is just
      copying the bytes in both directions.\n"
    title: 6.4.  FTBP EMA Unknown Attachment - application/octet-stream
  - contents:
    - "6.5.  MessageBodyPart - message/RFC822\n   X.400 body part: MessageBodyPart\n
      \  MIME Content-Type: message/RFC822\n   Conversion Type: Special\n   NOTE:
      If the headers of the X.400 MessageBodyPart contains the\n   \"multipart-message\"
      heading extension with the isAMessage bit set\n   (either explicitly or implicitly),
      the mapping should be to\n   multipart/* according to section 6.6, below.\n
      \  To map an IPMS.MessageBodyPart, the full X.400 -> RFC 822 mapping  is\n   recursively
      applied, to generate an RFC 822 Message.  If present, the\n   IPMS.MessageBodyPart.parameters.delivery-envelope
      is used for the MTS\n   Abstract Service Mappings.  If present, the\n   IPMS.MessageBodyPart.parameters.delivery-time
      is mapped to the\n   extended RFC 822 field \"Delivery-Date:\".\n   When a message/RFC822
      is contained within a MIME message, it is\n   mapped to an IPMS.MessageBodyPart
      according to MIXER.  specification.\n   Any mappings that would have been made
      to the MTS Abstract Service\n   are placed in IPMS.MessageBodyPart.parameters.delivery-envelope.\n"
    title: 6.5.  MessageBodyPart - message/RFC822
  - contents:
    - "6.6.  MessageBodyPart - multipart/*\n   X.400 body part: MessageBodyPart\n
      \  MIME Content-Type: multipart/*\n   Conversion Type: Special\n   NOTE: If
      the headers of the X.400 MessageBodyPart do not contain the\n   \"multipart-message\"
      heading extension with the \"isAMessage\" flag\n   FALSE=, the mapping should
      be to message/RFC822.\n   A MIME multipart is a set of content-types and not
      a message with a\n   set of content types. When the multipart is at the outermost
      MIME\n   header, elements of the multipart are mapped directly onto\n   IPMS.Bodypart.\n
      \  When the MIME multipart is not at the outermost level, it is mapped\n   to
      an IPMS.MessageBodyPart containing an IPMS.Bodypart for each\n   element of
      the multipart.\n   When a nested IPMS.Message is generated from a multipart,
      an\n   IPMS.heading shall always be generated.  The only mandatory field is\n
      \  the IPMS.Heading.this-IPM message id, which shall be generated by the\n   gateway.
      \ An IPMS.Heading.subject field shall also be generated, in\n   order to provide
      useful information to non-MIME capable X.400(88) UAs\n   and to all X.400(84)
      UAs.  The subject field is set as follows\n   according to the multipart subtype:\n
      \  mixed:\n      \"Multipart Message\"\n   alternative:\n      \"Alternative
      Body Parts containing the same information\"\n   digest:\n      \"Message Digest\"\n
      \  parallel:\n      \"Body Parts interpreted in parallel\"\n   other:\n      \"Multipart
      Message (<subtype>)\"\n   For other types of multipart, the multipart subtype
      shall be included\n   in the subject line.\n   For each multipart, the following
      IPMS.HeadingExtension shall be\n   generated, with the value set according to
      the subtype.\n   If the multipart is the outermost multipart, and the subtype
      is\n   \"mixed\", it may be omitted.\n           multipart-message HEADING-EXTENSION\n
      \                  VALUE MultipartType\n                    ::= id-hex-multipart-message-v2\n
      \          MultipartType ::= SEQUENCE {\n                         subtype IA5String,\n
      \                        isAMessage BOOLEAN DEFAULT TRUE }\n   The MultipartType
      contains the subtype, for example \"digest\".  If\n   this heading is present
      when mapping from X.400 to MIME, the\n   appropriate multipart may be generated.\n
      \  The isAMessage flag is needed because of the case where a message\n   contains
      a ForwardedIPMessage, which itself was generated from a MIME\n   message that
      was a Multipart; it is set whenever the multipart is the\n   outermost level
      of nesting inside a Message/RFC822.\n   NOTE:\n      When downgrading to X.400/84,
      the content-type SHOULD be\n      regenerated from this heading-extension and
      put into the RFC-822-\n      HEADERS extra body part.\n   NOTE:\n      This
      definition is different from the one in RFC 1494, because the\n      RFC 1494
      definition turned out to be insufficient when new\n      subtypes of Multipart
      (like Signed or Related) were defined. That\n      is the reason for the \"-v2\"
      part of the name of the OID.\n      If both the old and the new heading extensions
      occur on a message,\n      a MIXER gateway should give preference to the new
      one.\n"
    title: 6.6.  MessageBodyPart - multipart/*
  - contents:
    - "6.7.  Teletex - Text/Plain (Teletex)\n   X.400 Body Part: Teletex\n   MIME
      Content-Type: text/plain; charset=Teletex\n   Conversion Type: Text conversion\n
      \  From X.400 to RFC-822, the conversion shall take the bytes\n   of all the
      pages in the \"data\" part of the\n   TeletexBodyPart, add a FF character (0x0C,
      control-L) to\n   each part that does not already end in one, and\n   concatenate
      them together to form the body of the\n   Text/Plain.\n   The character set
      shall be \"Teletex\", which is especially\n   registered for this purpose. Its
      definition is shown in an\n   appendix.\n   The parameters are discarded.\n
      \  From RFC-822 to X.400, the conversion shall split the\n   content at each
      occurrence of the FF character (0x0C),\n   delete the character and construct
      the Teletex body part\n   as a SEQUENCE OF TeletexString, as described in X.420(88),\n
      \  section 7.3.5\n   The TeletexParameters may, but need not, contain the\n
      \  number-of-pages component.\n   NOTE: It is recommended, but not mandated,
      that the data\n   be converted into a more widespread character set like\n   ISO-8859-1
      or ISO-2022-JP (if applicable) if possible.\n   This will result in the reverse
      translation giving a\n   GeneralText body part, which will have to be dealt
      with\n   appropriately at the X.400/88 to X.400/84 downgrading\n   boundary,
      if possible, but will give a much greater chance\n   that the MIME recipient
      can actually read the message.\n   DISCUSSION:\n   The Teletex body part is
      frequently used in X.400(84) to\n   send around text with slightly extended
      character sets\n   beyond ASCII.\n   Its body consists of a series of \"pages\",
      separated by\n   ASN.1 representation.  It is important to many people to\n
      \  have this mapped into something that is readable to most\n   end-users; therefore,
      it is recommended to map this onto\n   Text/Plain; however, since this is not
      plain text, the\n   conversion must be specified.\n   Note that the definition
      of Text/Plain permits only CRLF as a line\n   separator; the sequences \"CR
      FF\" and \"CR LF LF LF..\" permitted in\n   Teletex must be encoded as Quoted-Printable.\n"
    title: 6.7.  Teletex - Text/Plain (Teletex)
  title: 6.  Defined Equivalences
- contents:
  - "7.  Body parts where encapsulation is recommended\n   Some body parts are MIME
    constructs, and their functionality will be\n   severely damaged if they are coerced
    into an X.400 framework.\n   Special care needs to be taken with these; they are
    described below.\n"
  - contents:
    - "7.1.  message/external-body\n   The gateway MUST support the encapsulation
      of this body part using\n   the HARPOON encapsulation (IA5).\n   It MAY support
      some kind of retrieval of the referred object.\n   DISCUSSION:\n   The message/external-body
      part points to an object that can be\n   retrieved using Internet protocols.\n
      \  There are three cases to consider for the recipient's capabilities:\n   (1)
      \  The user has no Internet access. In this case, the\n         user might be
      grateful if the gateway fetches the body part and\n         inserts it into
      the message. If the body part is large or\n         dynamic, it might not be
      appropriate.\n   (2)   The user has Internet access, but no UA support for\n
      \        fetching external-body objects.\n   (3)   The user has Internet access
      and UA support for\n         fetching external-body objects, based on an understanding
      of\n         this document.\n   Some access-types, like anonymous FTP, are easy
      to resolve. Others,\n   like the Mailserver access-type, are almost impossible
      to resolve at\n   a gateway.\n   To support the second case above, the tunneling
      method chosen is the\n   HARPOON encapsulation described in section 3.1.3, using
      an IA5 body\n   part, inserting the string \"MIME-Version: 1.0 (generated by
      gateway)\"\n   at the beginning of the body part. (The part in parentheses can
      be\n   changed at will).\n   This will:\n   (1)   Maximize the chance that the
      user will see the\n         message\n   (2)   Give the user hints that will
      enable him to fetch\n         the message using other Internet tools\n   (3)
      \  Identify the message as a MIME object in a reliable\n         fashion, allowing
      UAs to support the fetching of the object if\n         the UA implementor desires.\n"
    title: 7.1.  message/external-body
  - contents:
    - "7.2.  message/partial\n   This represents part of a larger message, where it
      is only possible\n   to parse the complete message after getting all the pieces.\n
      \  The gateway MUST support the encapsulation of this body part.\n   It MAY
      implement transparent reassembly of the message, but in this\n   case, it MUST
      support a configurable timeout\n    for the reassembly, defaulting back to encapsulation.\n
      \  DISCUSSION:\n   The gateway's choices are:\n   (1)   Wait until all the pieces
      arrive at the gateway,\n         reassemble the message, and use normal processing\n
      \  (2)   Encapsulate the message, using any encapsulation\n         method (BP15,
      FTAM or HARPOON).\n   In some cases, not all pieces will arrive at the gateway;
      some may\n   have been transferred through other gateways due to route changes
      or\n   machine outages; some may have been lost in transit.\n"
    title: 7.2.  message/partial
  - contents:
    - "7.3.  multipart/signed\n   A gateway MUST implement encapsulation of multipart/signed
      using\n   HARPOON.\n   The gateway MAY be configured to do other processing,
      as outlined in\n   the discussion below. This is outside the scope of the standard.\n
      \  DISCUSSION:\n   Gatewaying security is a problem.  The gateway can basically
      take\n   three approaches:\n   -    Strip the multipart/signed, leaving the
      bare body\n        part unsecured, possibly with a comment that the signature
      was\n        stripped\n   -    Attempt to check the signature and re-signing
      the\n        message using X.400 security functions, then stripping as above\n
      \  -    Encapsulate the message. This is the only approach\n        that allows
      end to end security, but requires MIME functionality\n        at the recipient.\n
      \  -    Replace the message content with multiple body parts,\n        containing
      first an unsecured body part and then the\n        encapsulated multipart/signed.\n
      \  All these are valid options for a MIXER gateway.\n   Note that the encapsulation
      must use HARPOON, as the signature is\n   computed on the ENCODED body part,
      not on the canonical\n   representation, and HARPOON is the only encapsulation
      that preserves\n   the content transfer encoding of the message.\n   Note also
      that all methods except for encapsulation break end-to-end\n   security; the
      recipient can place no more trust in the integrity of\n   the message than he
      can place in the security of the gateway.\n"
    title: 7.3.  multipart/signed
  - contents:
    - "7.4.  multipart/encrypted\n   A gateway MUST implement encapsulation of multipart/encrypted
      using\n   HARPOON.\n   If the implementor chooses to allow other processing
      at the gateway,\n   as outlined below, he/she is advised that there are grave
      security\n   concerns with such a solution, since it violates the general rule
      of\n   keeping decryption keys as close to the user as possible.\n   DISCUSSION:\n
      \  There are two basic cases for a gateway:\n   -    The gateway is trusted
      with the user's keys. In this\n        case, the gateway can decrypt the message,
      possibly add a note\n        that it has done so, and gateway the unencrypted
      form, possibly\n        applying X.400 security functions, and possibly attaching
      a copy\n        of the original, encrypted material for reference.  This does\n
      \       nothing to protect the transfer from gateway to recipient,\n        unless
      suitable X.400-native security is applied. It also means\n        that the gateway
      must be part of the user's trusted environment.\n   -    The gateway is not
      trusted with the recipient's keys.\n        In this case, encapsulation is the
      only approach that preserves\n        any information at all.\n   The valid
      options for a MIXER gateway are therefore:\n   -    Decrypt the body part\n
      \  -    Encapsulate the body part\n   -    Drop the body part\n   The MIXER
      WG has shown strong preference for the encapsulation\n   alternative, and urges
      anyone who thinks of buying or implementing\n   gateway decryption to carefully
      evaluate this choice in light of the\n   company's general security policy.\n"
    title: 7.4.  multipart/encrypted
  title: 7.  Body parts where encapsulation is recommended
- contents:
  - "8.  Conformance requirements\n   In order to be called MIXER conformant, a gateway
    must implement:\n   -    Encapsulation of MIME content in the FTBP body part\n
    \  -    Encapsulation of X.400 body parts in the x400-bp body\n        part\n
    \  -    Encapsulation of FTBP body parts in the\n        application/x-ftbp.oid
    body part\n   -    Encapsulation of security multiparts using HARPOON\n   -    Text/plain
    <-> IA5Text\n   -    Text/plain; charset=iso-8859-* <-> GeneralText\n   -    Multipart/*
    <-> ForwardedIPMessage\n   -    message/RFC822 <-> ForwardedIPMessage\n   -    application/octet-stream
    <-> FTBP unknown\n   -    application/octet-stream <-> BilaterallyDefined\n   -
    \   A configuration choice of which application/octet-\n        stream translation
    to use\n   All other parts of this specification MAY be implemented by the\n   gateway.
    If they are implemented at all, they MUST be implemented\n   conformant to this
    specification.\n   In this context, a feature is \"implemented\" in a product
    if it is\n   possible to configure the product in such a way that this feature
    is\n   used. This specification does not restrict the product to only be\n   configured
    in such a fashion.\n"
  title: 8.  Conformance requirements
- contents:
  - "9.  Security Considerations\n   The security issues identified in this memo are:\n
    \  (1)   Security implications of using filenames that\n        arrive in body
    part headers (section 2.3.2)\n   (2)   Security implications of letting a gateway
    handle\n        encrypted and/or signed content (section 7.3 and 7.4)\n   If a
    gateway fetches message/external-body on behalf of the\n   recipient, as described
    in section 7.1, it may be tricked into\n   performing inappropriate actions by
    malicious senders.\n   In addition, all the normal caveats that apply to sending
    data that\n   may contain executable code apply to UAs on both sides of the\n
    \  gateway.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Author's Address\n   Harald Tveit Alvestrand\n   UNINETT\n   P.O.box 6883
    Elgeseter\n   N-7002 Trondheim\n   NORWAY\n   EMail: Harald.T.Alvestrand@uninett.no\n"
  title: 10.  Author's Address
- contents:
  - "11.  Acknowledgements\n   The author wishes to thank all the members of the MIXER
    WG for their\n   valuable input, and in particular (in no particular order):\n
    \  Steve Kille, Peter Sylvester, Ned Freed, Julian Onions, Ruth Moulton,\n   Keith
    Moore, Alain Zahm, Urs Eppenberger, Kevin Jordan, Jeroen\n   Houttuin, Claudio
    Allocchio, Colin Robbins, Steven Thomson, Jim\n   Craigie, Efifiom Edem, David
    Wilson, and many others who have been\n   active over the long lifetime of this
    document.\n"
  - "References\n   [RFC-822]\n      Crocker, D., \"Standard for the Format of ARPA
    Internet Text\n      Messages\", STD 11, RFC 822, August, 1982.\n   [MIME]\n      Freed,
    N. and  N. Borenstein, \"Multipurpose Internet Mail\n      Extensions (MIME) Part
    Two:  Media Types\", RFC 2046, November\n      1996.\n   [MIME-HDR]\n        Moore,
    K., \"MIME (Multipurpose Internet Mail Extensions) Part\n        Three: Message
    Header Extensions for Non-ASCII Text\", RFC 2047,\n        November 1996.\n   [HARPOON]\n
    \       Alvestrand, H., Romaguera, J., and K. Jordan, \"Rules for\n        downgrading
    messages from X.400/88 to X.400/84 when MIME\n        content-types are present
    in the messages\", RFC 1496, August\n        1993.\n   [MIMETRANS]\n      Vaudreuil,
    G., \"Transition of Internet Mail from Just-Send-8 to\n      8Bit-SMTP/MIME\",
    RFC 1428, February 1993.\n   [MIXER]\n      Kille, S., \"Mapping between X.400(1988)
    / ISO 10021 and RFC-822\",\n      RFC 1327, May 1992.\n   [T.4]\n      CCITT Recommendation
    T.4, Standardization of Group 3 Facsimile\n      Apparatus for Document Transmission
    (1988)\n   [T.30]\n      CCITT Recommendation T.30, Procedures For Document Facsimile\n
    \     Transmission in the General Switched Telephone Network (1988)\n   [T.411]\n
    \     CCITT Recommendation T.411 (1988), Open Document Architecture\n      (ODA)
    and Interchange Format, Introduction and General Principles\n   [MOTIS]\n      ISO/IEC
    International Standard 10021, Information technology -\n      Text Communication
    - Message-Oriented Text Interchange Systems\n      (MOTIS) (Parts 1 to 8)\n   [X.400]\n
    \     CCITT, Data Communication Networks - Message Handling Systems -\n      Recommendations
    X.400 - X.420 (1988 version)\n   [X.420]\n      CCITT Recommendation X.420 (1988),
    Interpersonal Messaging System\n   [RFC-X400USE]\n      Alvestrand, H., \"X.400
    use of extended Character Sets\", RFC 1502,\n      August 1993.\n   [MAWG]\n      Electronic
    Messaging Association Message Attachment Working Group\n      (MAWG): File Transfer
    Body Part Feasibility Project Guide -\n      version 1.5 - September 1995\n   [CDISP]\n
    \     Troost, R., and S. Dorner, \"Communicating Presentation Information\n      in
    Internet Messages: The Content-Disposition Header\", RFC 1806,\n      June 1995.\n
    \  [POSTSCRIPT]\n      Alvestrand, H., \"Carrying PostScript in X.400 and MIME\",
    RFC 2160,\n      June 1997.\n   [IMAGES]\n      Alvestrand, H., \"X.400 Image
    Body Parts\", RFC 2158, June 1997.\n   [ODA]\n      Alvestrand, H., \"A MIME Body
    Part for ODA\", RFC 2161, June 1997.\n   [ISO 2022]\n      ISO/IEC 2022:1994(E):
    Information technology - Character code\n      structure and extension techniques\n
    \  [ISO 8859]\n      ISO 8859: Information processing -- 8-bit single-byte coded\n
    \     graphic character sets (various parts)\n   [2022-JP]\n      Murai, J., Crispin,
    M., and E. van der Poel, \"Japanese Character\n      Encoding for Internet Messages\",
    RFC 1468, June 1993.\n   [MUST]\n      Bradner, S., \"Key words for use in RFCs
    to Indicate Requirement\n      Levels\", RFC 2119, March 1997.\n"
  - 'APPENDIXES

    '
  title: 11.  Acknowledgements
- contents:
  - "Appendix A: Escape code normalization\n   The algorithm given here in pseudocode
    will reduce a GeneralString\n   ISO-2022 unlimited use of shifts sequence to a
    pure 8-bit sequence\n   that does not use shift sequences, if possible.\n   Some
    error conditions, like EOF, are not tested for. It crashes if\n   asked to do
    something it cannot.  Control character set switching is\n   missing.\n   A similar
    routine, albeit more complex, can be written for\n   normalizing to the ISO-2022-JP
    character set.\n   BEGIN: (from X.209)\n     g0 = 6 (should be 2, but ignore the
    difference)\n     g1 = NULL\n     g2 = NULL\n     g3 = NULL\n     c0 = 1 (ASCII
    control)\n     c1 = NULL\n     leftset = &g0 (current input set, low)\n     rightset
    = &g1 (current input set, high)\n     lowset = 6 (output set, low)\n     highset
    = NULL (output set, high)\n     charset = US-ASCII\n     (Init for the set tables)\n
    \    chartoid[{2D,2E,2F}, 41] = 100\n     .....\n     idtoname[100] = \"ISO-8859-1\"\n
    \    .....\n   WHILE (more data)\n     CASE head of input\n       {These are the
    locking shift sequences}\n       INCASE \"00/14\": (LS0, SO)\n           leftset
    = &g0;\n       INCASE \"00/15\": (LS1, SI)\n           leftset = &g\n       INCASE
    \"ESC 07/14\": (LS1R)\n           rightset = &g1;\n       INCASE \"ESC 07/13\":
    (LS2R)\n           rightset = &g2;\n       INCASE \"ESC 07/12\": (LS3R)\n           rightset
    = &g3;\n       {There is missing code for handling the single shift function}\n
    \      {These are the changes of graphic character sets}\n       {Note that G0
    can contain only 94-character charsets}\n       INCASE \"ESC 28\"\n           g0
    = chartoid[lastchar, next character]\n           sethiset(g0)\n       INCASE \"ESC
    2D\", \"ESC 29\"\n           g1 = chartoid[lastchar, next character]\n           sethiset(g1)\n
    \      INCASE \"ESC 2E\", \"ESC 2A\"\n           g2 = chartoid[lastchar, next
    character]\n           sethiset(g2)\n       INCASE \"ESC 2F\", \"ESC 2B\"\n           g3
    = chartoid[lastchar, next character]\n           sethiset(g3)\n       {control
    characters. There is missing code for changing these}\n       INCASE 00/00-01/15
    {normal control}\n           write(char)\n       INCASE 08/00-09/15 {upper control}\n
    \          write(char)\n       {Normal characters}\n       INCASE 02/00-07/15
    (Left)\n           IF (*leftset == lowset)\n               write(char)\n           ELSIF
    (*leftset == highset)\n               write(char+80)\n           ELSE\n               ERROR
    \"Shift error\"\n           ENDIF\n       INCASE 10/00-15/15\n           IF (*rightset
    == highset)\n               write(char)\n           ELSIF (*rightset == lowset)\n
    \              write(char-80)\n           ELSE\n               ERROR \"Shift error\"\n
    \          ENDIF\n     ENDCASE\n   ENDWHILE\n    SUBROUTINE sethighset(g1)\n           IF
    (highset == NULL)\n               charset = idtoname[g1]\n               highset
    = g1\n           ELSIF (highset == g1)\n               (it's OK)\n           ELSE\n
    \              ERROR \"Too many charsets encountered\"\n           ENDIF\n   ENDROUTINE\n"
  title: 'Appendix A: Escape code normalization'
- contents:
  - "Appendix B: OID Assignments\n   MIXER-MAPPINGS DEFINITIONS ::= BEGIN\n   EXPORTS
    -- everything --;\n   IMPORTS\n      mixer -- { iso(1) org(3) dod(6) internet(1)
    mail(7) mixer(1) }\n           FROM MIXER --Companion RFC--;\n   mixer-headings
    OBJECT IDENTIFIER ::=\n           { mixer 1 } -- called mime-mhs-headings in RFC
    1495 --\n   mixer-bodies OBJECT IDENTIFIER ::=\n           { mixer 2 } -- called
    mime-mhs-bodies in RFC 1495 --\n   -- mixer-core is defined as { mixer core(3)
    } in [MIXER]\n   mixer-bp-data OBJECT IDENTIFIER ::=\n           { mixer-bodies
    1 }; -- called mime-mhs-bp-data in RFC 1494 --\n   mixer-bp-parameter OBJECT IDENTIFIER
    ::=\n           { mixer-bodies 2 };\n   id-mime-bp-data OBJECT IDENTIFIER ::=\n
    \          { mixer-bp-data 1 };\n   -- for debugging: mixer-bp-data is 1.3.6.1.7.1.2.1.1\n
    \  id-mime-bp-parameters OBJECT IDENTIFIER ::=\n           { mixer-bp-parameter
    1 };\n   -- the following assignments were done in RFC 1494, using\n   -- slightly
    different names, but the same numbers.\n   -- their defining text is now is now
    in other documents\n      id-mime-postscript-body OBJECT IDENTIFIER ::=\n                     {
    mixer-bp-data 2 }\n      id-mime-jpeg-body OBJECT IDENTIFIER ::=\n                     {
    mixer-bp-data 3 }\n      id-mime-gif-body OBJECT IDENTIFIER ::=\n                     {
    mixer-bp-data 4 }\n   -- This is a new definition, and defines an FTAM application\n
    \  reference,\n   -- not a BP15 data OID.\n   id-mime-ftbp-data OBJECT IDENTIFIER
    ::=\n                      { mixer-bp-data 5 }\n   -- The following heading extensions
    are defined\n   id-hex-partial-message OBJECT IDENTIFIER ::=\n              {
    mixer-headings 1 }\n   id-hex-multipart-message OBJECT IDENTIFIER ::=\n              {
    mixer-headings 2 } -- from RFC 1495; obsolete\n   id-hex-multipart-message-v2
    OBJECT IDENTIFIER ::=\n           { mixer-headings 3 }\n   END\n"
  title: 'Appendix B: OID Assignments'
- contents:
  - "Appendix C: Registration information for the Teletex\n            character set\n
    \  The Teletex character set is a character set in which the ISO 2022\n   character
    set switching mechanism may be used to switch between the\n   following registered
    ISO character sets:\n   ISO-IR-87 - JIS_C6226-1983; a 16-bit Japanese character
    set\n   ISO-IR-102 - a fairly standard US-ASCII variant\n   ISO-IR-103 - Latin
    characters using non-spacing accents\n   ISO-IR-106 - Control characters for C0
    use; CR, LF, FF and a few more.\n   ISO-IR-107 - Control characters for C1 use\n
    \  Its intended use of this character set is to represent data that\n   comes
    from ISO protocols that use the ASN.1 construct \"TeletexString\"\n   or \"T61string\"
    without conversion.\n   The set of allowed character sets can be found in CCITT\n
    \  recommendation X.208(1988), chapter 31.2 and Table 6/X.208.\n   The rules for
    encoding the data type can be found in CCITT\n   recommendation X.209(1988), chapter
    23. It states that at the\n   beginning of the string, G0 is always ISO-IR-102,
    C0 is ISO-IR-106,\n   and C1 is ISO-IR-107.\n   The specification seems somehow
    to have missed the implicit\n   assumption that ISO-IR-103 is designated and invoked
    as G1 and\n   shifted into the upper half of the character set which seems to
    be\n   assumed at least by the X.400 and X.500 software that uses\n   TeletexStrings;
    implementors should act as if the sequence ESC 2/9\n   7/6 LS1R is always present
    at the beginning of the data; however,\n   when generating Teletex strings, implementors
    should include the\n   sequence ESC 2/9 7/6 within the string before the first
    occurence of\n   a character from ISO-IR-103.\n   The rules for interpreting T.61
    data are found (I believe) in CCITT\n   recommendations T.51, T.52 and T.53 (data
    from the ITU WWW server):\n      T.51 (09/92) [Rev.1] [26 pp.] [Publ.: May.93]\n
    \       Latin based coded character sets for telematic services\n      T.52 (1993)
    [New] [88 pp.] [Publ.: Apr.94]\n        Non-Latin coded character sets for telematic
    services\n      T.53 (04/94) [New] [68 pp.] [Publ.: Jan.95]\n        Character
    coded control functions for telematic services\n   The Teletex character set is
    closely related to (but not identical\n   with) that specified in ISO 6937.\n
    \  No further restrictions are imposed by this registration; in\n   particular,
    character set switching can occur anywhere, and there is\n   no guarantee that
    the character sets will be switched \"back\" at the\n   end.\n   Appendix D: IANA
    Registration form for new mappings\n   To: IANA@isi.edu\n   Subject: Registration
    of new X.400/MIME content type mapping\n   MIME type name:\n   (this must have
    been registered previously with IANA)\n   X.400 body part:\n   IF BP15:\n   -
    X.400 Object Identifier for Data:\n   (If left empty, an OID will be assigned
    by IANA  under mixer-bp-data)\n   - X.400 Object Identifier for Parameters:\n
    \  (If left empty, an OID will be assigned by IANA under mixer-bp-\n   parameter.
    \ If it is not used, fill in the words NOT USED.)\n   X.400 ASN.1 Syntax:\n   (must
    be an EXTENDED-BODY-PART-TYPE macro, or reference to a Basic\n   body part type)\n
    \  IF FTBP:\n   - FTAM Object Identifier for application-reference:\n   - FTAM
    Object Identifier for contents-type:\n   (if left empty, unstructured-binary is
    assumed)\n   Conversion algorithm:\n   (must be defined completely enough for
    independent implementation. It\n   may be defined by reference to RFCs).\n   Person
    & email address to contact for further information:\n   INFORMATION TO THE SUBMITTER:\n
    \  The accepted registrations will be listed in the \"Assigned Numbers\"\n   series
    of RFCs.  The information in the registration form is freely\n   distributable.\n"
  title: 'Appendix C: Registration information for the Teletex'
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
