- title: __initial_text__
  contents:
  - "                     An Architecture for Describing\n                       SNMP\
    \ Management Frameworks\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: IANA Note
  contents:
  - "IANA Note\n   Due to a clerical error in the assignment of the snmpModules in\
    \ this\n   memo, this RFC provides the corrected number assignment for this\n\
    \   protocol.  This memo obsoletes RFC 2261.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an architecture for describing SNMP\n  \
    \ Management Frameworks.  The architecture is designed to be modular to\n   allow\
    \ the evolution of the SNMP protocol standards over time.  The\n   major portions\
    \ of the architecture are an SNMP engine containing a\n   Message Processing Subsystem,\
    \ a Security Subsystem and an Access\n   Control Subsystem, and possibly multiple\
    \ SNMP applications which\n   provide specific functional processing of management\
    \ data.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ................................................\
    \    3\n   1.1. Overview ..................................................  \
    \  3\n   1.2. SNMP ......................................................    4\n\
    \   1.3. Goals of this Architecture ................................    5\n  \
    \ 1.4. Security Requirements of this Architecture ................    6\n   1.5.\
    \ Design Decisions ..........................................    7\n   2. Documentation\
    \ Overview ......................................    8\n   2.1. Document Roadmap\
    \ ..........................................   10\n   2.2. Applicability Statement\
    \ ...................................   10\n   2.3. Coexistence and Transition\
    \ ................................   10\n   2.4. Transport Mappings ........................................\
    \   11\n   2.5. Message Processing ........................................  \
    \ 11\n   2.6. Security ..................................................   11\n\
    \   2.7. Access Control ............................................   11\n  \
    \ 2.8. Protocol Operations .......................................   12\n   2.9.\
    \ Applications ..............................................   12\n   2.10. Structure\
    \ of Management Information ......................   12\n   2.11. Textual Conventions\
    \ ......................................   13\n   2.12. Conformance Statements\
    \ ...................................   13\n   2.13. Management Information Base\
    \ Modules ......................   13\n   2.13.1. SNMP Instrumentation MIBs ..............................\
    \   13\n   2.14. SNMP Framework Documents .................................  \
    \ 13\n   3. Elements of the Architecture ................................   14\n\
    \   3.1. The Naming of Entities ....................................   14\n  \
    \ 3.1.1. SNMP engine .............................................   15\n   3.1.1.1.\
    \ snmpEngineID ..........................................   16\n   3.1.1.2. Dispatcher\
    \ ............................................   16\n   3.1.1.3. Message Processing\
    \ Subsystem ..........................   16\n   3.1.1.3.1. Message Processing\
    \ Model ............................   17\n   3.1.1.4. Security Subsystem ....................................\
    \   17\n   3.1.1.4.1. Security Model ......................................  \
    \ 17\n   3.1.1.4.2. Security Protocol ...................................   18\n\
    \   3.1.2. Access Control Subsystem ................................   18\n  \
    \ 3.1.2.1. Access Control Model ..................................   18\n   3.1.3.\
    \ Applications ............................................   18\n   3.1.3.1.\
    \ SNMP Manager ..........................................   19\n   3.1.3.2. SNMP\
    \ Agent ............................................   20\n   3.2. The Naming\
    \ of Identities ..................................   21\n   3.2.1. Principal ...............................................\
    \   21\n   3.2.2. securityName ............................................  \
    \ 21\n   3.2.3. Model-dependent security ID .............................   22\n\
    \   3.3. The Naming of Management Information ......................   22\n  \
    \ 3.3.1. An SNMP Context .........................................   23\n   3.3.2.\
    \ contextEngineID .........................................   24\n   3.3.3. contextName\
    \ .............................................   24\n   3.3.4. scopedPDU ...............................................\
    \   25\n   3.4. Other Constructs ..........................................  \
    \ 25\n   3.4.1. maxSizeResponseScopedPDU ................................   25\n\
    \   3.4.2. Local Configuration Datastore ...........................   25\n  \
    \ 3.4.3. securityLevel ...........................................   25\n   4.\
    \ Abstract Service Interfaces .................................   26\n   4.1.\
    \ Dispatcher Primitives .....................................   26\n   4.1.1.\
    \ Generate Outgoing Request or Notification ...............   26\n   4.1.2. Process\
    \ Incoming Request or Notification PDU ............   26\n   4.1.3. Generate Outgoing\
    \ Response ..............................   27\n   4.1.4. Process Incoming Response\
    \ PDU ...........................   27\n   4.1.5. Registering Responsibility for\
    \ Handling SNMP PDUs .......   28\n   4.2. Message Processing Subsystem Primitives\
    \ ...................   28\n   4.2.1. Prepare Outgoing SNMP Request or Notification\
    \ Message ...   28\n   4.2.2. Prepare an Outgoing SNMP Response Message ...............\
    \   29\n   4.2.3. Prepare Data Elements from an Incoming SNMP Message .....  \
    \ 29\n   4.3. Access Control Subsystem Primitives .......................   30\n\
    \   4.4. Security Subsystem Primitives .............................   30\n  \
    \ 4.4.1. Generate a Request or Notification Message ..............   30\n   4.4.2.\
    \ Process Incoming Message ................................   31\n   4.4.3. Generate\
    \ a Response Message .............................   31\n   4.5. Common Primitives\
    \ .........................................   32\n   4.5.1. Release State Reference\
    \ Information .....................   32\n   4.6. Scenario Diagrams .........................................\
    \   32\n   4.6.1. Command Generator or Notification Originator ............  \
    \ 32\n   4.6.2. Scenario Diagram for a Command Responder Application ....   33\n\
    \   5. Managed Object Definitions for SNMP Management Frameworks ...   35\n  \
    \ 6. Intellectual Property .......................................   44\n   7.\
    \ Acknowledgements ............................................   45\n   8. Security\
    \ Considerations .....................................   46\n   9. References\
    \ ..................................................   46\n   10. Editors' Addresses\
    \ .........................................   48\n   A. Guidelines for Model Designers\
    \ ..............................   49\n   A.1. Security Model Design Requirements\
    \ ........................   49\n   A.1.1. Threats .................................................\
    \   49\n   A.1.2. Security Processing .....................................  \
    \ 50\n   A.1.3. Validate the security-stamp in a received message .......   51\n\
    \   A.1.4. Security MIBs ...........................................   51\n  \
    \ A.1.5. Cached Security Data ....................................   51\n   A.2.\
    \ Message Processing Model Design Requirements ..............   52\n   A.2.1.\
    \ Receiving an SNMP Message from the Network ..............   52\n   A.2.2. Sending\
    \ an SNMP Message to the Network ..................   52\n   A.3. Application\
    \ Design Requirements ...........................   53\n   A.3.1. Applications\
    \ that Initiate Messages .....................   53\n   A.3.2. Applications that\
    \ Receive Responses .....................   54\n   A.3.3. Applications that Receive\
    \ Asynchronous Messages .........   54\n   A.3.4. Applications that Send Responses\
    \ ........................   54\n   A.4. Access Control Model Design Requirements\
    \ ..................   55\n   B. Full Copyright Statement ....................................\
    \   56\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   1.1.  Overview\n   This document defines a vocabulary for\
    \ describing SNMP Management\n   Frameworks, and an architecture for describing\
    \ the major portions of\n   SNMP Management Frameworks.\n   This document does\
    \ not provide a general introduction to SNMP. Other\n   documents and books can\
    \ provide a much better introduction to SNMP.\n   Nor does this document provide\
    \ a history of SNMP. That also can be\n   found in books and other documents.\n\
    \   Section 1 describes the purpose, goals, and design decisions of this\n   architecture.\n\
    \   Section 2 describes various types of documents which define SNMP\n   Frameworks,\
    \ and how they fit into this architecture. It also provides\n   a minimal road\
    \ map to the documents which have previously defined\n   SNMP frameworks.\n  \
    \ Section 3 details the vocabulary of this architecture and its pieces.\n   This\
    \ section is important for understanding the remaining sections,\n   and for understanding\
    \ documents which are written to fit within this\n   architecture.\n   Section\
    \ 4 describes the primitives used for the abstract service\n   interfaces between\
    \ the various subsystems, models and applications\n   within this architecture.\n\
    \   Section 5 defines a collection of managed objects used to instrument\n   SNMP\
    \ entities within this architecture.\n   Sections 6, 7, 8, and 9 are administrative\
    \ in nature.\n   Appendix A contains guidelines for designers of Models which\
    \ are\n   expected to fit within this architecture.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are\
    \ to be interpreted as described in [RFC2119].\n"
- title: 1.2.  SNMP
  contents:
  - "1.2.  SNMP\n   An SNMP management system contains:\n      -  several (potentially\
    \ many) nodes, each with an SNMP entity\n         containing command responder\
    \ and notification originator\n         applications, which have access to management\
    \ instrumentation\n         (traditionally called agents);\n      -  at least\
    \ one SNMP entity containing command generator and/or\n         notification receiver\
    \ applications (traditionally called a\n         manager) and,\n      -  a management\
    \ protocol, used to convey management information\n         between the SNMP entities.\n\
    \   SNMP entities executing command generator and notification receiver\n   applications\
    \ monitor and control managed elements.  Managed elements\n   are devices such\
    \ as hosts, routers, terminal servers, etc., which are\n   monitored and controlled\
    \ via access to their management information.\n   It is the purpose of this document\
    \ to define an architecture which\n   can evolve to realize effective management\
    \ in a variety of\n   configurations and environments. The architecture has been\
    \ designed\n   to meet the needs of implementations of:\n      -  minimal SNMP\
    \ entities with command responder and/or\n         notification originator applications\
    \ (traditionally called SNMP\n         agents),\n      -  SNMP entities with proxy\
    \ forwarder applications (traditionally\n         called SNMP proxy agents),\n\
    \      -  command line driven SNMP entities with command generator and/or\n  \
    \       notification receiver applications (traditionally called SNMP\n      \
    \   command line managers),\n      -  SNMP entities with  command generator and/or\
    \ notification\n         receiver, plus command responder and/or notification\
    \ originator\n         applications (traditionally called SNMP mid-level managers\
    \ or\n         dual-role entities),\n      -  SNMP entities with command generator\
    \ and/or notification\n         receiver and possibly other types of applications\
    \ for managing\n         a potentially very large number of managed nodes (traditionally\n\
    \         called (network) management stations).\n"
- title: 1.3.  Goals of this Architecture
  contents:
  - "1.3.  Goals of this Architecture\n   This architecture was driven by the following\
    \ goals:\n      -  Use existing materials as much as possible. It is heavily based\n\
    \         on previous work, informally known as SNMPv2u and SNMPv2*.\n      -\
    \  Address the need for secure SET support, which is considered\n         the\
    \ most important deficiency in SNMPv1 and SNMPv2c.\n      -  Make it possible\
    \ to move portions of the architecture forward\n         in the standards track,\
    \ even if consensus has not been reached\n         on all pieces.\n      -  Define\
    \ an architecture that allows for longevity of the SNMP\n         Frameworks that\
    \ have been and will be defined.\n      -  Keep SNMP as simple as possible.\n\
    \      -  Make it relatively inexpensive to deploy a minimal conforming\n    \
    \     implementation.\n      -  Make it possible to upgrade portions of SNMP as\
    \ new approaches\n         become available, without disrupting an entire SNMP\
    \ framework.\n      -  Make it possible to support features required in large\n\
    \         networks, but make the expense of supporting a feature directly\n  \
    \       related to the support of the feature.\n"
- title: 1.4.  Security Requirements of this Architecture
  contents:
  - "1.4.  Security Requirements of this Architecture\n   Several of the classical\
    \ threats to network protocols are applicable\n   to the management problem and\
    \ therefore would be applicable to any\n   Security Model used in an SNMP Management\
    \ Framework. Other threats\n   are not applicable to the management problem. \
    \ This section discusses\n   principal threats, secondary threats, and threats\
    \ which are of lesser\n   importance.\n   The principal threats against which\
    \ any Security Model used within\n   this architecture SHOULD provide protection\
    \ are:\n   Modification of Information\n      The modification threat is the danger\
    \ that some unauthorized SNMP\n      entity may alter in-transit SNMP messages\
    \ generated on behalf of\n      an authorized principal in such a way as to effect\
    \ unauthorized\n      management operations, including falsifying the value of\
    \ an\n      object.\n   Masquerade\n      The masquerade threat is the danger\
    \ that management operations not\n      authorized for some principal may be attempted\
    \ by assuming the\n      identity of another principal that has the appropriate\n\
    \      authorizations.\n   Message Stream Modification\n      The SNMP protocol\
    \ is typically based upon a connectionless\n      transport service which may\
    \ operate over any subnetwork service.\n      The re-ordering, delay or replay\
    \ of messages can and does occur\n      through the natural operation of many\
    \ such subnetwork services.\n      The message stream modification threat is the\
    \ danger that messages\n      may be maliciously re-ordered, delayed or replayed\
    \ to an extent\n      which is greater than can occur through the natural operation\
    \ of a\n      subnetwork service, in order to effect unauthorized management\n\
    \      operations.\n   Disclosure\n      The disclosure threat is the danger of\
    \ eavesdropping on the\n      exchanges between SNMP engines.  Protecting against\
    \ this threat\n      may be required as a matter of local policy.\n   There are\
    \ at least two threats against which a Security Model within\n   this architecture\
    \ need not protect.\n   Denial of Service\n      A Security Model need not attempt\
    \ to address the broad range of\n      attacks by which service on behalf of authorized\
    \ users is denied.\n      Indeed, such denial-of-service attacks are in many cases\n\
    \      indistinguishable from the type of network failures with which any\n  \
    \    viable management protocol must cope as a matter of course.\n   Traffic Analysis\n\
    \      A Security Model need not attempt to address traffic analysis\n      attacks.\
    \  Many traffic patterns are predictable - entities may be\n      managed on a\
    \ regular basis by a relatively small number of\n      management stations - and\
    \ therefore there is no significant\n      advantage afforded by protecting against\
    \ traffic analysis.\n"
- title: 1.5.  Design Decisions
  contents:
  - "1.5.  Design Decisions\n   Various design decisions were made in support of the\
    \ goals of the\n   architecture and the security requirements:\n      - Architecture\n\
    \         An architecture should be defined which identifies the\n         conceptual\
    \ boundaries between the documents. Subsystems should\n         be defined which\
    \ describe the abstract services provided by\n         specific portions of an\
    \ SNMP framework. Abstract service\n         interfaces, as described by service\
    \ primitives, define the\n         abstract boundaries between documents, and\
    \ the abstract\n         services that are provided by the conceptual subsystems\
    \ of an\n         SNMP framework.\n      - Self-contained Documents\n        \
    \ Elements of procedure plus the MIB objects which are needed for\n         processing\
    \ for a specific portion of an SNMP framework should\n         be defined in the\
    \ same document, and as much as possible,\n         should not be referenced in\
    \ other documents. This allows pieces\n         to be designed and documented\
    \ as independent and self-contained\n         parts, which is consistent with\
    \ the general SNMP MIB module\n         approach.  As portions of SNMP change\
    \ over time, the documents\n         describing other portions of SNMP are not\
    \ directly impacted.\n         This modularity allows, for example, Security Models,\n\
    \         authentication and privacy mechanisms, and message formats to\n    \
    \     be upgraded and supplemented as the need arises. The self-\n         contained\
    \ documents can move along the standards track on\n         different time-lines.\n\
    \      - Threats\n         The Security Models in the Security Subsystem SHOULD\
    \ protect\n         against the principal threats: modification of information,\n\
    \         masquerade, message stream modification and disclosure.  They\n    \
    \     do not need to protect against denial of service and traffic\n         analysis.\n\
    \      - Remote Configuration\n         The Security and Access Control Subsystems\
    \ add a whole new set\n         of SNMP configuration parameters.  The Security\
    \ Subsystem also\n         requires frequent changes of secrets at the various\
    \ SNMP\n         entities. To make this deployable in a large operational\n  \
    \       environment, these SNMP parameters must be able to be remotely\n     \
    \    configured.\n      - Controlled Complexity\n         It is recognized that\
    \ producers of simple managed devices want\n         to keep the resources used\
    \ by SNMP to a minimum.  At the same\n         time, there is a need for more\
    \ complex configurations which can\n         spend more resources for SNMP and\
    \ thus provide more\n         functionality.  The design tries to keep the competing\n\
    \         requirements of these two environments in balance and allows\n     \
    \    the more complex environments to logically extend the simple\n         environment.\n"
- title: 2.  Documentation Overview
  contents:
  - "2.  Documentation Overview\n   The following figure shows the set of documents\
    \ that fit within the\n   SNMP Architecture.\n   +------------------------- Document\
    \ Set ----------------------------+\n   |                                    \
    \                               |\n   | +------------+            +-----------------+\
    \  +----------------+ |\n   | | Document * |            | Applicability * |  |\
    \ Coexistence  * | |\n   | | Roadmap    |            | Statement       |  | &\
    \ Transition   | |\n   | +------------+            +-----------------+  +----------------+\
    \ |\n   |                                                                   |\n\
    \   | +---------------------------------------------------------------+ |\n  \
    \ | | Message Handling                                              | |\n   |\
    \ | +----------------+  +-----------------+  +-----------------+  | |\n   | |\
    \ | Transport      |  | Message         |  | Security        |  | |\n   | | |\
    \ Mappings       |  | Processing and  |  |                 |  | |\n   | | |  \
    \              |  | Dispatcher      |  |                 |  | |\n   | | +----------------+\
    \  +-----------------+  +-----------------+  | |\n   | +---------------------------------------------------------------+\
    \ |\n   |                                                                   |\n\
    \   | +---------------------------------------------------------------+ |\n  \
    \ | | PDU Handling                                                  | |\n   |\
    \ | +----------------+  +-----------------+  +-----------------+  | |\n   | |\
    \ | Protocol       |  | Applications    |  | Access          |  | |\n   | | |\
    \ Operations     |  |                 |  | Control         |  | |\n   | | +----------------+\
    \  +-----------------+  +-----------------+  | |\n   | +---------------------------------------------------------------+\
    \ |\n   |                                                                   |\n\
    \   | +---------------------------------------------------------------+ |\n  \
    \ | | Information Model                                             | |\n   |\
    \ | +--------------+   +--------------+    +---------------+      | |\n   | |\
    \ | Structure of |   | Textual      |    | Conformance   |      | |\n   | | |\
    \ Management   |   | Conventions  |    | Statements    |      | |\n   | | | Information\
    \  |   |              |    |               |      | |\n   | | +--------------+\
    \   +--------------+    +---------------+      | |\n   | +---------------------------------------------------------------+\
    \ |\n   |                                                                   |\n\
    \   | +---------------------------------------------------------------+ |\n  \
    \ | | MIBs                                                          | |\n   |\
    \ | +-------------+ +-------------+ +----------+ +----------+     | |\n   | |\
    \ | Standard v1 | | Standard v1 | | Historic | | Draft v2 |     | |\n   | | |\
    \ RFC1157     | | RFC1212     | | RFC14XX  | | RFC19XX  |     | |\n   | | | format\
    \      | | format      | | format   | | format   |     | |\n   | | +-------------+\
    \ +-------------+ +----------+ +----------+     | |\n   | +---------------------------------------------------------------+\
    \ |\n   |                                                                   |\n\
    \   +-------------------------------------------------------------------+\n  \
    \ Note: RFC14XX means RFCs 1442, 1443, and 1444.  RFC19XX means RFCs\n   1902,\
    \ 1903, and 1904.\n   Those marked with an asterisk (*) are expected to be written\
    \ in the\n   future. Each of these documents may be replaced or supplemented.\n\
    \   This Architecture document specifically describes how new documents\n   fit\
    \ into the set of documents in the area of Message and PDU\n   handling.\n"
- title: 2.1.  Document Roadmap
  contents:
  - "2.1.  Document Roadmap\n   One or more documents may be written to describe how\
    \ sets of\n   documents taken together form specific Frameworks. The configuration\n\
    \   of document sets might change over time, so the \"road map\" should be\n \
    \  maintained in a document separate from the standards documents\n   themselves.\n"
- title: 2.2.  Applicability Statement
  contents:
  - "2.2.  Applicability Statement\n   SNMP is used in networks that vary widely in\
    \ size and complexity, by\n   organizations that vary widely in their requirements\
    \ of management.\n   Some models will be designed to address specific problems\
    \ of\n   management, such as message security.\n   One or more documents may be\
    \ written to describe the environments to\n   which certain versions of SNMP or\
    \ models within SNMP would be\n   appropriately applied, and those to which a\
    \ given model might be\n   inappropriately applied.\n"
- title: 2.3.  Coexistence and Transition
  contents:
  - "2.3.  Coexistence and Transition\n   The purpose of an evolutionary architecture\
    \ is to permit new models\n   to replace or supplement existing models. The interactions\
    \ between\n   models could result in incompatibilities, security \"holes\", and\
    \ other\n   undesirable effects.\n   The purpose of Coexistence documents is to\
    \ detail recognized\n   anomalies and to describe required and recommended behaviors\
    \ for\n   resolving the interactions between models within the architecture.\n\
    \   Coexistence documents may be prepared separately from model\n   definition\
    \ documents, to describe and resolve interaction anomalies\n   between a model\
    \ definition and one or more other model definitions.\n   Additionally, recommendations\
    \ for transitions between models may also\n   be described, either in a coexistence\
    \ document or in a separate\n   document.\n"
- title: 2.4.  Transport Mappings
  contents:
  - "2.4.  Transport Mappings\n   SNMP messages are sent over various transports.\
    \ It is the purpose of\n   Transport Mapping documents to define how the mapping\
    \ between SNMP\n   and the transport is done.\n"
- title: 2.5.  Message Processing
  contents:
  - "2.5.  Message Processing\n   A Message Processing Model document defines a message\
    \ format, which\n   is typically identified by a version field in an SNMP message\
    \ header.\n   The document may also define a MIB module for use in message\n \
    \  processing and for instrumentation of version-specific interactions.\n   An\
    \ SNMP engine includes one or more Message Processing Models, and\n   thus may\
    \ support sending and receiving multiple versions of SNMP\n   messages.\n"
- title: 2.6.  Security
  contents:
  - "2.6.  Security\n   Some environments require secure protocol interactions. Security\
    \ is\n   normally applied at two different stages:\n      -  in the transmission/receipt\
    \ of messages, and\n      -  in the processing of the contents of messages.\n\
    \   For purposes of this document, \"security\" refers to message-level\n   security;\
    \ \"access control\" refers to the security applied to protocol\n   operations.\n\
    \   Authentication, encryption, and timeliness checking are common\n   functions\
    \ of message level security.\n   A security document describes a Security Model,\
    \ the threats against\n   which the model protects, the goals of the Security\
    \ Model, the\n   protocols which it uses to meet those goals, and it may define\
    \ a MIB\n   module to describe the data used during processing, and to allow the\n\
    \   remote configuration of message-level security parameters, such as\n   passwords.\n\
    \   An SNMP engine may support multiple Security Models concurrently.\n"
- title: 2.7.  Access Control
  contents:
  - "2.7.  Access Control\n   During processing, it may be required to control access\
    \ to managed\n   objects for operations.\n   An Access Control Model defines mechanisms\
    \ to determine whether\n   access to a managed object should be allowed.  An Access\
    \ Control\n   Model may define a MIB module used during processing and to allow\
    \ the\n   remote configuration of access control policies.\n"
- title: 2.8.  Protocol Operations
  contents:
  - "2.8.  Protocol Operations\n   SNMP messages encapsulate an SNMP Protocol Data\
    \ Unit (PDU). It is the\n   purpose of a Protocol Operations document to define\
    \ the operations of\n   the protocol with respect to the processing of the PDUs.\n\
    \   An application document defines which Protocol Operations documents\n   are\
    \ supported by the application.\n"
- title: 2.9.  Applications
  contents:
  - "2.9.  Applications\n   An SNMP entity normally includes a number of applications.\n\
    \   Applications use the services of an SNMP engine to accomplish\n   specific\
    \ tasks. They coordinate the processing of management\n   information operations,\
    \ and may use SNMP messages to communicate with\n   other SNMP entities.\n   Applications\
    \ documents describe the purpose of an application, the\n   services required\
    \ of the associated SNMP engine, and the protocol\n   operations and informational\
    \ model that the application uses to\n   perform management operations.\n   An\
    \ application document defines which set of documents are used to\n   specifically\
    \ define the structure of management information, textual\n   conventions, conformance\
    \ requirements, and operations supported by\n   the application.\n"
- title: 2.10.  Structure of Management Information
  contents:
  - "2.10.  Structure of Management Information\n   Management information is viewed\
    \ as a collection of managed objects,\n   residing in a virtual information store,\
    \ termed the Management\n   Information Base (MIB). Collections of related objects\
    \ are defined in\n   MIB modules.\n   It is the purpose of a Structure of Management\
    \ Information document\n   to establish the syntax for defining objects, modules,\
    \ and other\n   elements of managed information.\n"
- title: 2.11.  Textual Conventions
  contents:
  - "2.11.  Textual Conventions\n   When designing a MIB module, it is often useful\
    \ to define new types\n   similar to those defined in the SMI, but with more precise\
    \ semantics,\n   or which have special semantics associated with them. These newly\n\
    \   defined types are termed textual conventions, and may defined in\n   separate\
    \ documents, or within a MIB module.\n"
- title: 2.12.  Conformance Statements
  contents:
  - "2.12.  Conformance Statements\n   It may be useful to define the acceptable lower-bounds\
    \ of\n   implementation, along with the actual level of implementation\n   achieved.\
    \ It is the purpose of Conformance Statements to define the\n   notation used\
    \ for these purposes.\n"
- title: 2.13.  Management Information Base Modules
  contents:
  - "2.13.  Management Information Base Modules\n   MIB documents describe collections\
    \ of managed objects which\n   instrument some aspect of a managed node.\n"
- title: 2.13.1.  SNMP Instrumentation MIBs
  contents:
  - "2.13.1.  SNMP Instrumentation MIBs\n   An SNMP MIB document may define a collection\
    \ of managed objects which\n   instrument the SNMP protocol itself. In addition,\
    \ MIB modules may be\n   defined within the documents which describe portions\
    \ of the SNMP\n   architecture, such as the documents for Message processing Models,\n\
    \   Security Models, etc. for the purpose of instrumenting those Models,\n   and\
    \ for the purpose of allowing remote configuration of the Model.\n"
- title: 2.14.  SNMP Framework Documents
  contents:
  - "2.14.  SNMP Framework Documents\n   This architecture is designed to allow an\
    \ orderly evolution of\n   portions of SNMP Frameworks.\n   Throughout the rest\
    \ of this document, the term \"subsystem\" refers to\n   an abstract and incomplete\
    \ specification of a portion of a Framework,\n   that is further refined by a\
    \ model specification.\n   A \"model\" describes a specific design of a subsystem,\
    \ defining\n   additional constraints and rules for conformance to the model.\
    \  A\n   model is sufficiently detailed to make it possible to implement the\n\
    \   specification.\n   An \"implementation\" is an instantiation of a subsystem,\
    \ conforming to\n   one or more specific models.\n   SNMP version 1 (SNMPv1),\
    \ is the original Internet-standard Network\n   Management Framework, as described\
    \ in RFCs 1155, 1157, and 1212.\n   SNMP version 2 (SNMPv2), is the SNMPv2 Framework\
    \ as derived from the\n   SNMPv1 Framework. It is described in RFCs 1902-1907.\
    \ SNMPv2 has no\n   message definition.\n   The Community-based SNMP version 2\
    \ (SNMPv2c), is an experimental SNMP\n   Framework which supplements the SNMPv2\
    \ Framework, as described in\n   RFC1901. It adds the SNMPv2c message format,\
    \ which is similar to the\n   SNMPv1 message format.\n   SNMP version 3 (SNMPv3),\
    \ is an extensible SNMP Framework which\n   supplements the SNMPv2 Framework,\
    \ by supporting the following:\n      -  a new SNMP message format,\n      - \
    \ Security for Messages, and\n      -  Access Control.\n   Other SNMP Frameworks,\
    \ i.e., other configurations of implemented\n   subsystems, are expected to also\
    \ be consistent with this\n   architecture.\n"
- title: 3.  Elements of the Architecture
  contents:
  - "3.  Elements of the Architecture\n   This section describes the various elements\
    \ of the architecture and\n   how they are named. There are three kinds of naming:\n\
    \      1) the naming of entities,\n      2) the naming of identities, and\n  \
    \    3) the naming of management information.\n   This architecture also defines\
    \ some names for other constructs that\n   are used in the documentation.\n"
- title: 3.1.  The Naming of Entities
  contents:
  - "3.1.  The Naming of Entities\n   An SNMP entity is an implementation of this\
    \ architecture. Each such\n   SNMP entity consists of an SNMP engine and one or\
    \ more associated\n   applications.\n   The following figure shows details about\
    \ an SNMP entity and the\n   components within it.\n   +-------------------------------------------------------------------+\n\
    \   |  SNMP entity                                                      |\n  \
    \ |                                                                   |\n   |\
    \  +-------------------------------------------------------------+  |\n   |  |\
    \  SNMP engine (identified by snmpEngineID)                   |  |\n   |  |  \
    \                                                           |  |\n   |  |  +------------+\
    \ +------------+ +-----------+ +-----------+  |  |\n   |  |  |            | |\
    \            | |           | |           |  |  |\n   |  |  | Dispatcher | | Message\
    \    | | Security  | | Access    |  |  |\n   |  |  |            | | Processing\
    \ | | Subsystem | | Control   |  |  |\n   |  |  |            | | Subsystem  |\
    \ |           | | Subsystem |  |  |\n   |  |  |            | |            | |\
    \           | |           |  |  |\n   |  |  +------------+ +------------+ +-----------+\
    \ +-----------+  |  |\n   |  |                                               \
    \              |  |\n   |  +-------------------------------------------------------------+\
    \  |\n   |                                                                   |\n\
    \   |  +-------------------------------------------------------------+  |\n  \
    \ |  |  Application(s)                                             |  |\n   |\
    \  |                                                             |  |\n   |  |\
    \  +-------------+  +--------------+  +--------------+        |  |\n   |  |  |\
    \ Command     |  | Notification |  | Proxy        |        |  |\n   |  |  | Generator\
    \   |  | Receiver     |  | Forwarder    |        |  |\n   |  |  +-------------+\
    \  +--------------+  +--------------+        |  |\n   |  |                   \
    \                                          |  |\n   |  |  +-------------+  +--------------+\
    \  +--------------+        |  |\n   |  |  | Command     |  | Notification |  |\
    \ Other        |        |  |\n   |  |  | Responder   |  | Originator   |  |  \
    \            |        |  |\n   |  |  +-------------+  +--------------+  +--------------+\
    \        |  |\n   |  |                                                       \
    \      |  |\n   |  +-------------------------------------------------------------+\
    \  |\n   |                                                                   |\n\
    \   +-------------------------------------------------------------------+\n"
- title: 3.1.1.  SNMP engine
  contents:
  - "3.1.1.  SNMP engine\n   An SNMP engine provides services for sending and receiving\
    \ messages,\n   authenticating and encrypting messages, and controlling access\
    \ to\n   managed objects. There is a one-to-one association between an SNMP\n\
    \   engine and the SNMP entity which contains it.\n   The engine contains:\n \
    \     1) a Dispatcher,\n      2) a Message Processing Subsystem,\n      3) a Security\
    \ Subsystem, and\n      4) an Access Control Subsystem.\n"
- title: 3.1.1.1.  snmpEngineID
  contents:
  - "3.1.1.1.  snmpEngineID\n   Within an administrative domain, an snmpEngineID is\
    \ the unique and\n   unambiguous identifier of an SNMP engine. Since there is\
    \ a one-to-one\n   association between SNMP engines and SNMP entities, it also\
    \ uniquely\n   and unambiguously identifies the SNMP entity.\n"
- title: 3.1.1.2.  Dispatcher
  contents:
  - "3.1.1.2.  Dispatcher\n   There is only one Dispatcher in an SNMP engine. It allows\
    \ for\n   concurrent support of multiple versions of SNMP messages in the SNMP\n\
    \   engine. It does so by:\n      -  sending and receiving SNMP messages to/from\
    \ the network,\n      -  determining the version of an SNMP message and interacting\
    \ with\n         the corresponding Message Processing Model,\n      -  providing\
    \ an abstract interface to SNMP applications for\n         delivery of a PDU to\
    \ an application.\n      -  providing an abstract interface for SNMP applications\
    \ that\n         allows them to send a PDU to a remote SNMP entity.\n"
- title: 3.1.1.3.  Message Processing Subsystem
  contents:
  - "3.1.1.3.  Message Processing Subsystem\n   The Message Processing Subsystem is\
    \ responsible for preparing\n   messages for sending, and extracting data from\
    \ received messages.\n   The Message Processing Subsystem potentially contains\
    \ multiple\n   Message Processing Models as shown in the next figure.\n   * One\
    \ or more Message Processing Models may be present.\n   +------------------------------------------------------------------+\n\
    \   |                                                                  |\n   |\
    \  Message Processing Subsystem                                    |\n   |   \
    \                                                               |\n   |  +------------+\
    \  +------------+  +------------+  +------------+  |\n   |  |          * |  |\
    \          * |  |          * |  |          * |  |\n   |  | SNMPv3     |  | SNMPv1\
    \     |  | SNMPv2c    |  | Other      |  |\n   |  | Message    |  | Message  \
    \  |  | Message    |  | Message    |  |\n   |  | Processing |  | Processing |\
    \  | Processing |  | Processing |  |\n   |  | Model      |  | Model      |  |\
    \ Model      |  | Model      |  |\n   |  |            |  |            |  |   \
    \         |  |            |  |\n   |  +------------+  +------------+  +------------+\
    \  +------------+  |\n   |                                                   \
    \               |\n   +------------------------------------------------------------------+\n"
- title: 3.1.1.3.1.  Message Processing Model
  contents:
  - "3.1.1.3.1.  Message Processing Model\n   Each Message Processing Model defines\
    \ the format of a particular\n   version of an SNMP message and coordinates the\
    \ preparation and\n   extraction of each such version-specific message format.\n"
- title: 3.1.1.4.  Security Subsystem
  contents:
  - "3.1.1.4.  Security Subsystem\n   The Security Subsystem provides security services\
    \ such as the\n   authentication and privacy of messages and potentially contains\n\
    \   multiple Security Models as shown in the following figure\n   * One or more\
    \ Security Models may be present.\n   +------------------------------------------------------------------+\n\
    \   |                                                                  |\n   |\
    \  Security Subsystem                                              |\n   |   \
    \                                                               |\n   |  +----------------+\
    \  +-----------------+  +-------------------+  |\n   |  |              * |  |\
    \               * |  |                 * |  |\n   |  | User-Based     |  | Other\
    \           |  | Other             |  |\n   |  | Security       |  | Security\
    \        |  | Security          |  |\n   |  | Model          |  | Model      \
    \     |  | Model             |  |\n   |  |                |  |               \
    \  |  |                   |  |\n   |  +----------------+  +-----------------+\
    \  +-------------------+  |\n   |                                            \
    \                      |\n   +------------------------------------------------------------------+\n"
- title: 3.1.1.4.1.  Security Model
  contents:
  - "3.1.1.4.1.  Security Model\n   A Security Model defines the threats against which\
    \ it protects, the\n   goals of its services, and the security protocols used\
    \ to provide\n   security services such as authentication and privacy.\n"
- title: 3.1.1.4.2.  Security Protocol
  contents:
  - "3.1.1.4.2.  Security Protocol\n   A Security Protocol defines the mechanisms,\
    \ procedures, and MIB data\n   used to provide a security service such as authentication\
    \ or privacy.\n"
- title: 3.1.2.  Access Control Subsystem
  contents:
  - "3.1.2.  Access Control Subsystem\n   The Access Control Subsystem provides authorization\
    \ services by means\n   of one or more Access Control Models.\n   +------------------------------------------------------------------+\n\
    \      |                                                                  |\n\
    \      |  Access Control Subsystem                                        |\n\
    \      |                                                                  |\n\
    \      |  +---------------+   +-----------------+   +------------------+  |\n\
    \      |  |             * |   |               * |   |                * |  |\n\
    \      |  | View-Based    |   | Other           |   | Other            |  |\n\
    \      |  | Access        |   | Access          |   | Access           |  |\n\
    \      |  | Control       |   | Control         |   | Control          |  |\n\
    \      |  | Model         |   | Model           |   | Model            |  |\n\
    \      |  |               |   |                 |   |                  |  |\n\
    \      |  +---------------+   +-----------------+   +------------------+  |\n\
    \      |                                                                  |\n\
    \      +------------------------------------------------------------------+\n"
- title: 3.1.2.1.  Access Control Model
  contents:
  - "3.1.2.1.  Access Control Model\n   An Access Control Model defines a particular\
    \ access decision function\n   in order to support decisions regarding access\
    \ rights.\n"
- title: 3.1.3.  Applications
  contents:
  - "3.1.3.  Applications\n   There are several types of applications, including:\n\
    \      -  command generators, which monitor and manipulate management\n      \
    \   data,\n      -  command responders, which provide access to management data,\n\
    \      -  notification originators, which initiate asynchronous messages,\n  \
    \    -  notification receivers, which process asynchronous messages,\n       \
    \  and\n      -  proxy forwarders, which forward messages between entities.\n\
    \   These applications make use of the services provided by the SNMP\n   engine.\n"
- title: 3.1.3.1.  SNMP Manager
  contents:
  - "3.1.3.1.  SNMP Manager\n   An SNMP entity containing one or more command generator\
    \ and/or\n   notification receiver applications (along with their associated SNMP\n\
    \   engine) has traditionally been called an SNMP manager.  * One or more\n  \
    \ models may be present.\n                       (traditional SNMP manager)\n\
    \   +-------------------------------------------------------------------+\n  \
    \ | +--------------+  +--------------+  +--------------+  SNMP entity |\n   |\
    \ | NOTIFICATION |  | NOTIFICATION |  |   COMMAND    |              |\n   | |\
    \  ORIGINATOR  |  |   RECEIVER   |  |  GENERATOR   |              |\n   | | applications\
    \ |  | applications |  | applications |              |\n   | +--------------+\
    \  +--------------+  +--------------+              |\n   |         ^         \
    \       ^                 ^                      |\n   |         |           \
    \     |                 |                      |\n   |         v             \
    \   v                 v                      |\n   |         +-------+--------+-----------------+\
    \                      |\n   |                 ^                             \
    \                    |\n   |                 |     +---------------------+  +----------------+\
    \ |\n   |                 |     | Message Processing  |  | Security       | |\n\
    \   | Dispatcher      v     | Subsystem           |  | Subsystem      | |\n  \
    \ | +-------------------+ |     +------------+  |  |                | |\n   |\
    \ | PDU Dispatcher    | |  +->| v1MP     * |<--->| +------------+ | |\n   | |\
    \                   | |  |  +------------+  |  | | Other      | | |\n   | |  \
    \                 | |  |  +------------+  |  | | Security   | | |\n   | |    \
    \               | |  +->| v2cMP    * |<--->| | Model      | | |\n   | | Message\
    \           | |  |  +------------+  |  | +------------+ | |\n   | | Dispatcher\
    \  <--------->+                  |  |                | |\n   | |             \
    \      | |  |  +------------+  |  | +------------+ | |\n   | |               \
    \    | |  +->| v3MP     * |<--->| | User-based | | |\n   | | Transport       \
    \  | |  |  +------------+  |  | | Security   | | |\n   | | Mapping           |\
    \ |  |  +------------+  |  | | Model      | | |\n   | | (e.g RFC1906)     | |\
    \  +->| otherMP  * |<--->| +------------+ | |\n   | +-------------------+ |  \
    \   +------------+  |  |                | |\n   |          ^            +---------------------+\
    \  +----------------+ |\n   |          |                                     \
    \                   |\n   |          v                                       \
    \                 |\n   +-------------------------------------------------------------------+\n\
    \   +-----+ +-----+       +-------+\n   | UDP | | IPX | . . . | other |\n   +-----+\
    \ +-----+       +-------+\n      ^       ^              ^\n      |       |   \
    \           |\n      v       v              v\n   +------------------------------+\n\
    \   |           Network            |\n   +------------------------------+\n"
- title: 3.1.3.2.  SNMP Agent
  contents:
  - "3.1.3.2.  SNMP Agent\n   An SNMP entity containing one or more command responder\
    \ and/or\n   notification originator applications (along with their associated\n\
    \   SNMP engine) has traditionally been called an SNMP agent.\n   +------------------------------+\n\
    \   |           Network            |\n   +------------------------------+\n  \
    \    ^       ^              ^\n      |       |              |\n      v       v\
    \              v\n   +-----+ +-----+       +-------+\n   | UDP | | IPX | . . .\
    \ | other |\n   +-----+ +-----+       +-------+              (traditional SNMP\
    \ agent)\n   +-------------------------------------------------------------------+\n\
    \   |              ^                                                    |\n  \
    \ |              |        +---------------------+  +----------------+ |\n   |\
    \              |        | Message Processing  |  | Security       | |\n   | Dispatcher\
    \   v        | Subsystem           |  | Subsystem      | |\n   | +-------------------+\
    \ |     +------------+  |  |                | |\n   | | Transport         | |\
    \  +->| v1MP     * |<--->| +------------+ | |\n   | | Mapping           | |  |\
    \  +------------+  |  | | Other      | | |\n   | | (e.g. RFC1906)    | |  |  +------------+\
    \  |  | | Security   | | |\n   | |                   | |  +->| v2cMP    * |<--->|\
    \ | Model      | | |\n   | | Message           | |  |  +------------+  |  | +------------+\
    \ | |\n   | | Dispatcher  <--------->|  +------------+  |  | +------------+ |\
    \ |\n   | |                   | |  +->| v3MP     * |<--->| | User-based | | |\n\
    \   | |                   | |  |  +------------+  |  | | Security   | | |\n  \
    \ | | PDU Dispatcher    | |  |  +------------+  |  | | Model      | | |\n   |\
    \ +-------------------+ |  +->| otherMP  * |<--->| +------------+ | |\n   |  \
    \            ^        |     +------------+  |  |                | |\n   |    \
    \          |        +---------------------+  +----------------+ |\n   |      \
    \        v                                                    |\n   |      +-------+-------------------------+---------------+\
    \          |\n   |      ^                                 ^               ^  \
    \        |\n   |      |                                 |               |    \
    \      |\n   |      v                                 v               v      \
    \    |\n   | +-------------+   +---------+   +--------------+  +-------------+\
    \ |\n   | |   COMMAND   |   | ACCESS  |   | NOTIFICATION |  |    PROXY  * | |\n\
    \   | |  RESPONDER  |<->| CONTROL |<->|  ORIGINATOR  |  |  FORWARDER  | |\n  \
    \ | | application |   |         |   | applications |  | application | |\n   |\
    \ +-------------+   +---------+   +--------------+  +-------------+ |\n   |  \
    \    ^                                 ^                          |\n   |    \
    \  |                                 |                          |\n   |      v\
    \                                 v                          |\n   | +----------------------------------------------+\
    \                  |\n   | |             MIB instrumentation              |  \
    \    SNMP entity |\n   +-------------------------------------------------------------------+\n"
- title: 3.2.  The Naming of Identities
  contents:
  - "3.2.  The Naming of Identities\n                            principal\n     \
    \                           ^\n                                |\n           \
    \                     |\n   +----------------------------|-------------+\n   |\
    \ SNMP engine                v             |\n   |                    +--------------+\
    \      |\n   |                    |              |      |\n   |  +-----------------|\
    \ securityName |---+  |\n   |  | Security Model  |              |   |  |\n   |\
    \  |                 +--------------+   |  |\n   |  |                        \
    \ ^          |  |\n   |  |                         |          |  |\n   |  |  \
    \                       v          |  |\n   |  |  +------------------------------+\
    \  |  |\n   |  |  |                              |  |  |\n   |  |  | Model   \
    \                     |  |  |\n   |  |  | Dependent                    |  |  |\n\
    \   |  |  | Security ID                  |  |  |\n   |  |  |                 \
    \             |  |  |\n   |  |  +------------------------------+  |  |\n   | \
    \ |                         ^          |  |\n   |  |                         |\
    \          |  |\n   |  +-------------------------|----------+  |\n   |       \
    \                     |             |\n   |                            |     \
    \        |\n   +----------------------------|-------------+\n                \
    \                |\n                                v\n                      \
    \       network\n"
- title: 3.2.1.  Principal
  contents:
  - "3.2.1.  Principal\n   A principal is the \"who\" on whose behalf services are\
    \ provided or\n   processing takes place.\n   A principal can be, among other\
    \ things, an individual acting in a\n   particular role; a set of individuals,\
    \ with each acting in a\n   particular role; an application or a set of applications;\
    \ and\n   combinations thereof.\n"
- title: 3.2.2.  securityName
  contents:
  - "3.2.2.  securityName\n   A securityName is a human readable string representing\
    \ a principal.\n   It has a model-independent format, and can be used outside\
    \ a\n   particular Security Model.\n"
- title: 3.2.3.  Model-dependent security ID
  contents:
  - "3.2.3.  Model-dependent security ID\n   A model-dependent security ID is the\
    \ model-specific representation of\n   a securityName within a particular Security\
    \ Model.\n   Model-dependent security IDs may or may not be human readable, and\n\
    \   have a model-dependent syntax. Examples include community names, user\n  \
    \ names, and parties.\n   The transformation of model-dependent security IDs into\
    \ securityNames\n   and vice versa is the responsibility of the relevant Security\
    \ Model.\n"
- title: 3.3.  The Naming of Management Information
  contents:
  - "3.3.  The Naming of Management Information\n   Management information resides\
    \ at an SNMP entity where a Command\n   Responder Application has local access\
    \ to potentially multiple\n   contexts.  This application uses a contextEngineID\
    \ equal to the\n   snmpEngineID of its associated SNMP engine.\n   +-----------------------------------------------------------------+\n\
    \   |  SNMP entity (identified by snmpEngineID, example: abcd)        |\n   |\
    \                                                                 |\n   |  +------------------------------------------------------------+\
    \ |\n   |  | SNMP engine (identified by snmpEngineID)                   | |\n\
    \   |  |                                                            | |\n   |\
    \  | +-------------+ +------------+ +-----------+ +-----------+ | |\n   |  | |\
    \             | |            | |           | |           | | |\n   |  | | Dispatcher\
    \  | | Message    | | Security  | | Access    | | |\n   |  | |             | |\
    \ Processing | | Subsystem | | Control   | | |\n   |  | |             | | Subsystem\
    \  | |           | | Subsystem | | |\n   |  | |             | |            | |\
    \           | |           | | |\n   |  | +-------------+ +------------+ +-----------+\
    \ +-----------+ | |\n   |  |                                                 \
    \           | |\n   |  +------------------------------------------------------------+\
    \ |\n   |                                                                 |\n\
    \   |  +------------------------------------------------------------+ |\n   |\
    \  |  Command Responder Application                             | |\n   |  | \
    \ (contextEngineID, example: abcd)                          | |\n   |  |     \
    \                                                       | |\n   |  |  example\
    \ contextNames:                                     | |\n   |  |             \
    \                                               | |\n   |  |  \"bridge1\"    \
    \      \"bridge2\"            \"\" (default)      | |\n   |  |  ---------    \
    \      ---------            ------------      | |\n   |  |      |            \
    \      |                   |              | |\n   |  +------|------------------|-------------------|--------------+\
    \ |\n   |         |                  |                   |                |\n\
    \   |  +------|------------------|-------------------|--------------+ |\n   |\
    \  |  MIB | instrumentation  |                   |              | |\n   |  | \
    \ +---v------------+ +---v------------+ +----v-----------+  | |\n   |  |  | context\
    \        | | context        | | context        |  | |\n   |  |  |            \
    \    | |                | |                |  | |\n   |  |  | +------------+ |\
    \ | +------------+ | | +------------+ |  | |\n   |  |  | | bridge MIB | | | |\
    \ bridge MIB | | | | other MIB  | |  | |\n   |  |  | +------------+ | | +------------+\
    \ | | +------------+ |  | |\n   |  |  |                | |                | |\
    \                |  | |\n   |  |  |                | |                | | +------------+\
    \ |  | |\n   |  |  |                | |                | | | some  MIB  | |  |\
    \ |\n   |  |  |                | |                | | +------------+ |  | |\n\
    \   |  |  |                | |                | |                |  | |\n   +-----------------------------------------------------------------+\n"
- title: 3.3.1.  An SNMP Context
  contents:
  - "3.3.1.  An SNMP Context\n   An SNMP context, or just \"context\" for short, \
    \ is a collection of\n   management information accessible by an SNMP entity.\
    \ An item of\n   management information may exist in more than one context. An\
    \ SNMP\n   entity potentially has access to many contexts.\n   Typically, there\
    \ are many instances of each managed object type\n   within a management domain.\
    \ For simplicity, the method for\n   identifying instances specified by the MIB\
    \ module does not allow each\n   instance to be distinguished amongst the set\
    \ of all instances within\n   a management domain; rather, it allows each instance\
    \ to be identified\n   only within some scope or \"context\", where there are\
    \ multiple such\n   contexts within the management domain.  Often, a context is\
    \ a\n   physical device, or perhaps, a logical device, although a context can\n\
    \   also encompass multiple devices, or a subset of a single device, or\n   even\
    \ a subset of multiple devices, but a context is always defined as\n   a subset\
    \ of a single SNMP entity.  Thus, in order to identify an\n   individual item\
    \ of management information within the management\n   domain, its contextName\
    \ and contextEngineID must be identified in\n   addition to its object type and\
    \ its instance.\n   For example, the managed object type ifDescr [RFC1573], is\
    \ defined as\n   the description of a network interface.  To identify the description\n\
    \   of device-X's first network interface, four pieces of information are\n  \
    \ needed: the snmpEngineID of the SNMP entity which provides access to\n   the\
    \ management information at device-X, the contextName (device-X),\n   the managed\
    \ object type (ifDescr), and the instance (\"1\").\n   Each context has (at least)\
    \ one unique identification within the\n   management domain. The same item of\
    \ management information can exist\n   in multiple contexts.  An item of management\
    \ information may have\n   multiple unique identifications.  This occurs when\
    \ an item of\n   management information exists in multiple contexts, and this\
    \ also\n   occurs when a context has multiple unique identifications.\n   The\
    \ combination of a contextEngineID and a contextName unambiguously\n   identifies\
    \ a context within an administrative domain; note that there\n   may be multiple\
    \ unique combinations of contextEngineID and\n   contextName that unambiguously\
    \ identify the same context.\n"
- title: 3.3.2.  contextEngineID
  contents:
  - "3.3.2.  contextEngineID\n   Within an administrative domain, a contextEngineID\
    \ uniquely\n   identifies an SNMP entity that may realize an instance of a context\n\
    \   with a particular contextName.\n"
- title: 3.3.3.  contextName
  contents:
  - "3.3.3.  contextName\n   A contextName is used to name a context. Each contextName\
    \ MUST be\n   unique within an SNMP entity.\n"
- title: 3.3.4.  scopedPDU
  contents:
  - "3.3.4.  scopedPDU\n   A scopedPDU is a block of data containing a contextEngineID,\
    \ a\n   contextName, and a PDU.\n   The PDU is an SNMP Protocol Data Unit containing\
    \ information named in\n   the context which is unambiguously identified within\
    \ an\n   administrative domain by the combination of the contextEngineID and\n\
    \   the contextName. See, for example, RFC1905 for more information about\n  \
    \ SNMP PDUs.\n"
- title: 3.4.  Other Constructs
  contents:
  - '3.4.  Other Constructs

    '
- title: 3.4.1.  maxSizeResponseScopedPDU
  contents:
  - "3.4.1.  maxSizeResponseScopedPDU\n   The maxSizeResponseScopedPDU is the maximum\
    \ size of a scopedPDU to be\n   included in a response message.  Note that the\
    \ size of a scopedPDU\n   does not include the size of the SNMP message header.\n"
- title: 3.4.2.  Local Configuration Datastore
  contents:
  - "3.4.2.  Local Configuration Datastore\n   The subsystems, models, and applications\
    \ within an SNMP entity may\n   need to retain their own sets of configuration\
    \ information.\n   Portions of the configuration information may be accessible\
    \ as\n   managed objects.\n   The collection of these sets of information is referred\
    \ to as an\n   entity's Local Configuration Datastore (LCD).\n"
- title: 3.4.3.  securityLevel
  contents:
  - "3.4.3.  securityLevel\n   This architecture recognizes three levels of security:\n\
    \      -  without authentication and without privacy (noAuthNoPriv)\n      - \
    \ with authentication but without privacy (authNoPriv)\n      -  with authentication\
    \ and with privacy (authPriv)\n   These three values are ordered such that noAuthNoPriv\
    \ is less than\n   authNoPriv and authNoPriv is less than authPriv.\n   Every\
    \ message has an associated securityLevel. All Subsystems\n   (Message Processing,\
    \ Security, Access Control) and applications are\n   required to either supply\
    \ a value of securityLevel or to abide by the\n   supplied value of securityLevel\
    \ while processing the message and its\n   contents.\n"
- title: 4.  Abstract Service Interfaces
  contents:
  - "4.  Abstract Service Interfaces\n   Abstract service interfaces have been defined\
    \ to describe the\n   conceptual interfaces between the various subsystems within\
    \ an SNMP\n   entity.\n   These abstract service interfaces are defined by a set\
    \ of primitives\n   that define the services provided and the abstract data elements\
    \ that\n   are to be passed when the services are invoked.  This section lists\n\
    \   the primitives that have been defined for the various subsystems.\n"
- title: 4.1.  Dispatcher Primitives
  contents:
  - "4.1.  Dispatcher Primitives\n   The Dispatcher typically provides services to\
    \ the SNMP applications\n   via its PDU Dispatcher.  This section describes the\
    \ primitives\n   provided by the PDU Dispatcher.\n"
- title: 4.1.1.  Generate Outgoing Request or Notification
  contents:
  - "4.1.1.  Generate Outgoing Request or Notification\n   The PDU Dispatcher provides\
    \ the following primitive for an\n   application to send an SNMP Request or Notification\
    \ to another SNMP\n   entity:\n   statusInformation =              -- sendPduHandle\
    \ if success\n                                    -- errorIndication if failure\n\
    \     sendPdu(\n     IN   transportDomain           -- transport domain to be\
    \ used\n     IN   transportAddress          -- transport address to be used\n\
    \     IN   messageProcessingModel    -- typically, SNMP version\n     IN   securityModel\
    \             -- Security Model to use\n     IN   securityName              --\
    \ on behalf of this principal\n     IN   securityLevel             -- Level of\
    \ Security requested\n     IN   contextEngineID           -- data from/at this\
    \ entity\n     IN   contextName               -- data from/in this context\n \
    \    IN   pduVersion                -- the version of the PDU\n     IN   PDU \
    \                      -- SNMP Protocol Data Unit\n     IN   expectResponse  \
    \          -- TRUE or FALSE\n          )\n"
- title: 4.1.2.  Process Incoming Request or Notification PDU
  contents:
  - "4.1.2.  Process Incoming Request or Notification PDU\n   The PDU Dispatcher provides\
    \ the following primitive to pass an\n   incoming SNMP PDU to an application:\n\
    \   processPdu(                      -- process Request/Notification PDU\n   \
    \  IN   messageProcessingModel    -- typically, SNMP version\n     IN   securityModel\
    \             -- Security Model in use\n     IN   securityName              --\
    \ on behalf of this principal\n     IN   securityLevel             -- Level of\
    \ Security\n     IN   contextEngineID           -- data from/at this SNMP entity\n\
    \     IN   contextName               -- data from/in this context\n     IN   pduVersion\
    \                -- the version of the PDU\n     IN   PDU                    \
    \   -- SNMP Protocol Data Unit\n     IN   maxSizeResponseScopedPDU  -- maximum\
    \ size of the Response PDU\n     IN   stateReference            -- reference to\
    \ state information\n          )                         -- needed when sending\
    \ a response\n"
- title: 4.1.3.  Generate Outgoing Response
  contents:
  - "4.1.3.  Generate Outgoing Response\n   The PDU Dispatcher provides the following\
    \ primitive for an\n   application to return an SNMP Response PDU to the PDU Dispatcher:\n\
    \   returnResponsePdu(\n     IN   messageProcessingModel    -- typically, SNMP\
    \ version\n     IN   securityModel             -- Security Model in use\n    \
    \ IN   securityName              -- on behalf of this principal\n     IN   securityLevel\
    \             -- same as on incoming request\n     IN   contextEngineID      \
    \     -- data from/at this SNMP entity\n     IN   contextName               --\
    \ data from/in this context\n     IN   pduVersion                -- the version\
    \ of the PDU\n     IN   PDU                       -- SNMP Protocol Data Unit\n\
    \     IN   maxSizeResponseScopedPDU  -- maximum size of the Response PDU\n   \
    \  IN   stateReference            -- reference to state information\n        \
    \                            -- as presented with the request\n     IN   statusInformation\
    \         -- success or errorIndication\n          )                         --\
    \ error counter OID/value if error\n"
- title: 4.1.4.  Process Incoming Response PDU
  contents:
  - "4.1.4.  Process Incoming Response PDU\n   The PDU Dispatcher provides the following\
    \ primitive to pass an\n   incoming SNMP Response PDU to an application:\n   processResponsePdu(\
    \              -- process Response PDU\n     IN   messageProcessingModel    --\
    \ typically, SNMP version\n     IN   securityModel             -- Security Model\
    \ in use\n     IN   securityName              -- on behalf of this principal\n\
    \     IN   securityLevel             -- Level of Security\n     IN   contextEngineID\
    \           -- data from/at this SNMP entity\n     IN   contextName          \
    \     -- data from/in this context\n     IN   pduVersion                -- the\
    \ version of the PDU\n     IN   PDU                       -- SNMP Protocol Data\
    \ Unit\n     IN   statusInformation         -- success or errorIndication\n  \
    \   IN   sendPduHandle             -- handle from sendPdu\n          )\n"
- title: 4.1.5.  Registering Responsibility for Handling SNMP PDUs
  contents:
  - "4.1.5.  Registering Responsibility for Handling SNMP PDUs\n   Applications can\
    \ register/unregister responsibility for a specific\n   contextEngineID, for specific\
    \ pduTypes, with the PDU Dispatcher\n   according to the following primitives.\
    \  The list of particular\n   pduTypes that an application can register for is\
    \ determined by the\n   Message Processing Model(s) supported by the SNMP entity\
    \ that\n   contains the PDU Dispatcher.\n   statusInformation =            --\
    \ success or errorIndication\n     registerContextEngineID(\n     IN   contextEngineID\
    \         -- take responsibility for this one\n     IN   pduType             \
    \    -- the pduType(s) to be registered\n          )\n   unregisterContextEngineID(\n\
    \     IN   contextEngineID         -- give up responsibility for this one\n  \
    \   IN   pduType                 -- the pduType(s) to be unregistered\n      \
    \    )\n   Note that realizations of the registerContextEngineID and\n   unregisterContextEngineID\
    \ abstract service interfaces may provide\n   implementation-specific ways for\
    \ applications to register/deregister\n   responsiblity for all possible values\
    \ of the contextEngineID or\n   pduType parameters.\n"
- title: 4.2.  Message Processing Subsystem Primitives
  contents:
  - "4.2.  Message Processing Subsystem Primitives\n   The Dispatcher interacts with\
    \ a Message Processing Model to process a\n   specific version of an SNMP Message.\
    \ This section describes the\n   primitives provided by the Message Processing\
    \ Subsystem.\n"
- title: 4.2.1.  Prepare Outgoing SNMP Request or Notification Message
  contents:
  - "4.2.1.  Prepare Outgoing SNMP Request or Notification Message\n   The Message\
    \ Processing Subsystem provides this service primitive for\n   preparing an outgoing\
    \ SNMP Request or Notification Message:\n   statusInformation =              --\
    \ success or errorIndication\n     prepareOutgoingMessage(\n     IN   transportDomain\
    \           -- transport domain to be used\n     IN   transportAddress       \
    \   -- transport address to be used\n     IN   messageProcessingModel    -- typically,\
    \ SNMP version\n     IN   securityModel             -- Security Model to use\n\
    \     IN   securityName              -- on behalf of this principal\n     IN \
    \  securityLevel             -- Level of Security requested\n     IN   contextEngineID\
    \           -- data from/at this entity\n     IN   contextName               --\
    \ data from/in this context\n     IN   pduVersion                -- the version\
    \ of the PDU\n     IN   PDU                       -- SNMP Protocol Data Unit\n\
    \     IN   expectResponse            -- TRUE or FALSE\n     IN   sendPduHandle\
    \             -- the handle for matching\n                                   \
    \ -- incoming responses\n     OUT  destTransportDomain       -- destination transport\
    \ domain\n     OUT  destTransportAddress      -- destination transport address\n\
    \     OUT  outgoingMessage           -- the message to send\n     OUT  outgoingMessageLength\
    \     -- its length\n          )\n"
- title: 4.2.2.  Prepare an Outgoing SNMP Response Message
  contents:
  - "4.2.2.  Prepare an Outgoing SNMP Response Message\n   The Message Processing\
    \ Subsystem provides this service primitive for\n   preparing an outgoing SNMP\
    \ Response Message:\n   result =                         -- SUCCESS or FAILURE\n\
    \     prepareResponseMessage(\n     IN   messageProcessingModel    -- typically,\
    \ SNMP version\n     IN   securityModel             -- same as on incoming request\n\
    \     IN   securityName              -- same as on incoming request\n     IN \
    \  securityLevel             -- same as on incoming request\n     IN   contextEngineID\
    \           -- data from/at this SNMP entity\n     IN   contextName          \
    \     -- data from/in this context\n     IN   pduVersion                -- the\
    \ version of the PDU\n     IN   PDU                       -- SNMP Protocol Data\
    \ Unit\n     IN   maxSizeResponseScopedPDU  -- maximum size of the Response PDU\n\
    \     IN   stateReference            -- reference to state information\n     \
    \                               -- as presented with the request\n     IN   statusInformation\
    \         -- success or errorIndication\n                                    --\
    \ error counter OID/value if error\n     OUT  destTransportDomain       -- destination\
    \ transport domain\n     OUT  destTransportAddress      -- destination transport\
    \ address\n     OUT  outgoingMessage           -- the message to send\n     OUT\
    \  outgoingMessageLength     -- its length\n          )\n"
- title: 4.2.3.  Prepare Data Elements from an Incoming SNMP Message
  contents:
  - "4.2.3.  Prepare Data Elements from an Incoming SNMP Message\n   The Message Processing\
    \ Subsystem provides this service primitive for\n   preparing the abstract data\
    \ elements from an incoming SNMP message:\n   result =                       \
    \  -- SUCCESS or errorIndication\n     prepareDataElements(\n     IN   transportDomain\
    \           -- origin transport domain\n     IN   transportAddress          --\
    \ origin transport address\n     IN   wholeMsg                  -- as received\
    \ from the network\n     IN   wholeMsgLength            -- as received from the\
    \ network\n     OUT  messageProcessingModel    -- typically, SNMP version\n  \
    \   OUT  securityModel             -- Security Model to use\n     OUT  securityName\
    \              -- on behalf of this principal\n     OUT  securityLevel       \
    \      -- Level of Security requested\n     OUT  contextEngineID           --\
    \ data from/at this entity\n     OUT  contextName               -- data from/in\
    \ this context\n     OUT  pduVersion                -- the version of the PDU\n\
    \     OUT  PDU                       -- SNMP Protocol Data Unit\n     OUT  pduType\
    \                   -- SNMP PDU type\n     OUT  sendPduHandle             -- handle\
    \ for matched request\n     OUT  maxSizeResponseScopedPDU  -- maximum size of\
    \ the Response PDU\n     OUT  statusInformation         -- success or errorIndication\n\
    \                                    -- error counter OID/value if error\n   \
    \  OUT  stateReference            -- reference to state information\n        \
    \                            -- to be used for possible Response\n          )\n"
- title: 4.3.  Access Control Subsystem Primitives
  contents:
  - "4.3.  Access Control Subsystem Primitives\n   Applications are the typical clients\
    \ of the service(s) of the Access\n   Control Subsystem.\n   The following primitive\
    \ is provided by the Access Control Subsystem\n   to check if access is allowed:\n\
    \   statusInformation =              -- success or errorIndication\n     isAccessAllowed(\n\
    \     IN   securityModel             -- Security Model in use\n     IN   securityName\
    \              -- principal who wants to access\n     IN   securityLevel     \
    \        -- Level of Security\n     IN   viewType                  -- read, write,\
    \ or notify view\n     IN   contextName               -- context containing variableName\n\
    \     IN   variableName              -- OID for the managed object\n         \
    \ )\n"
- title: 4.4.  Security Subsystem Primitives
  contents:
  - "4.4.  Security Subsystem Primitives\n   The Message Processing Subsystem is the\
    \ typical client of the\n   services of the Security Subsystem.\n"
- title: 4.4.1.  Generate a Request or Notification Message
  contents:
  - "4.4.1.  Generate a Request or Notification Message\n   The Security Subsystem\
    \ provides the following primitive to generate a\n   Request or Notification message:\n\
    \   statusInformation =\n     generateRequestMsg(\n     IN   messageProcessingModel\
    \    -- typically, SNMP version\n     IN   globalData                -- message\
    \ header, admin data\n     IN   maxMessageSize            -- of the sending SNMP\
    \ entity\n     IN   securityModel             -- for the outgoing message\n  \
    \   IN   securityEngineID          -- authoritative SNMP entity\n     IN   securityName\
    \              -- on behalf of this principal\n     IN   securityLevel       \
    \      -- Level of Security requested\n     IN   scopedPDU                 --\
    \ message (plaintext) payload\n     OUT  securityParameters        -- filled in\
    \ by Security Module\n     OUT  wholeMsg                  -- complete generated\
    \ message\n     OUT  wholeMsgLength            -- length of the generated message\n\
    \          )\n"
- title: 4.4.2.  Process Incoming Message
  contents:
  - "4.4.2.  Process Incoming Message\n   The Security Subsystem provides the following\
    \ primitive to process an\n   incoming message:\n   statusInformation =      \
    \        -- errorIndication or success\n                                    --\
    \ error counter OID/value if error\n     processIncomingMsg(\n     IN   messageProcessingModel\
    \    -- typically, SNMP version\n     IN   maxMessageSize            -- of the\
    \ sending SNMP entity\n     IN   securityParameters        -- for the received\
    \ message\n     IN   securityModel             -- for the received message\n \
    \    IN   securityLevel             -- Level of Security\n     IN   wholeMsg \
    \                 -- as received on the wire\n     IN   wholeMsgLength       \
    \     -- length as received on the wire\n     OUT  securityEngineID          --\
    \ identification of the principal\n     OUT  securityName              -- identification\
    \ of the principal\n     OUT  scopedPDU,                -- message (plaintext)\
    \ payload\n     OUT  maxSizeResponseScopedPDU  -- maximum size of the Response\
    \ PDU\n     OUT  securityStateReference    -- reference to security state\n  \
    \        )                         -- information, needed for response\n"
- title: 4.4.3.  Generate a Response Message
  contents:
  - "4.4.3.  Generate a Response Message\n   The Security Subsystem provides the following\
    \ primitive to generate a\n   Response message:\n   statusInformation =\n    \
    \ generateResponseMsg(\n     IN   messageProcessingModel    -- typically, SNMP\
    \ version\n     IN   globalData                -- message header, admin data\n\
    \     IN   maxMessageSize            -- of the sending SNMP entity\n     IN  \
    \ securityModel             -- for the outgoing message\n     IN   securityEngineID\
    \          -- authoritative SNMP entity\n     IN   securityName              --\
    \ on behalf of this principal\n     IN   securityLevel             -- for the\
    \ outgoing message\n     IN   scopedPDU                 -- message (plaintext)\
    \ payload\n     IN   securityStateReference    -- reference to security state\n\
    \                                    -- information from original request\n  \
    \   OUT  securityParameters        -- filled in by Security Module\n     OUT \
    \ wholeMsg                  -- complete generated message\n     OUT  wholeMsgLength\
    \            -- length of the generated message\n          )\n"
- title: 4.5.  Common Primitives
  contents:
  - "4.5.  Common Primitives\n   These primitive(s) are provided by multiple Subsystems.\n"
- title: 4.5.1.  Release State Reference Information
  contents:
  - "4.5.1.  Release State Reference Information\n   All Subsystems which pass stateReference\
    \ information also provide a\n   primitive to release the memory that holds the\
    \ referenced state\n   information:\n   stateRelease(\n     IN   stateReference\
    \       -- handle of reference to be released\n          )\n"
- title: 4.6.  Scenario Diagrams
  contents:
  - '4.6.  Scenario Diagrams

    '
- title: 4.6.1.  Command Generator or Notification Originator
  contents:
  - "4.6.1.  Command Generator or Notification Originator\n   This diagram shows how\
    \ a Command Generator or Notification Originator\n   application requests that\
    \ a PDU be sent, and how the response is\n   returned (asynchronously) to that\
    \ application.\n   Command           Dispatcher               Message        \
    \   Security\n   Generator            |                     Processing       \
    \    Model\n   |                    |                     Model              \
    \      |\n   |      sendPdu       |                        |                 \
    \    |\n   |------------------->|                        |                   \
    \  |\n   |                    | prepareOutgoingMessage |                     |\n\
    \   :                    |----------------------->|                     |\n  \
    \ :                    |                        | generateRequestMsg  |\n   :\
    \                    |                        |-------------------->|\n   :  \
    \                  |                        |                     |\n   :    \
    \                |                        |<--------------------|\n   :      \
    \              |                        |                     |\n   :        \
    \            |<-----------------------|                     |\n   :          \
    \          |                        |                     |\n   :            \
    \        |------------------+     |                     |\n   :              \
    \      | Send SNMP        |     |                     |\n   :                \
    \    | Request Message  |     |                     |\n   :                  \
    \  | to Network       |     |                     |\n   :                    |\
    \                  v     |                     |\n   :                    :  \
    \                :     :                     :\n   :                    :    \
    \              :     :                     :\n   :                    :      \
    \            :     :                     :\n   :                    |        \
    \          |     |                     |\n   :                    | Receive SNMP\
    \     |     |                     |\n   :                    | Response Message\
    \ |     |                     |\n   :                    | from Network     |\
    \     |                     |\n   :                    |<-----------------+  \
    \   |                     |\n   :                    |                       \
    \ |                     |\n   :                    |   prepareDataElements  |\
    \                     |\n   :                    |----------------------->|  \
    \                   |\n   :                    |                        | processIncomingMsg\
    \  |\n   :                    |                        |-------------------->|\n\
    \   :                    |                        |                     |\n  \
    \ :                    |                        |<--------------------|\n   :\
    \                    |                        |                     |\n   :  \
    \                  |<-----------------------|                     |\n   | processResponsePdu\
    \ |                        |                     |\n   |<-------------------|\
    \                        |                     |\n   |                    |  \
    \                      |                     |\n"
- title: 4.6.2.  Scenario Diagram for a Command Responder Application
  contents:
  - "4.6.2.  Scenario Diagram for a Command Responder Application\n   This diagram\
    \ shows how a Command Responder or Notification Receiver\n   application registers\
    \ for handling a pduType, how a PDU is dispatched\n   to the application after\
    \ a SNMP message is received, and how the\n   Response is (asynchronously) send\
    \ back to the network.\n   Command               Dispatcher            Message\
    \          Security\n   Responder                 |                 Processing\
    \          Model\n   |                         |                 Model       \
    \            |\n   |                         |                    |          \
    \          |\n   | registerContextEngineID |                    |            \
    \        |\n   |------------------------>|                    |              \
    \      |\n   |<------------------------|              |     |                \
    \    |\n   |                         | Receive SNMP |     |                  \
    \  |\n   :                         | Message      |     |                    |\n\
    \   :                         | from Network |     |                    |\n  \
    \ :                         |<-------------+     |                    |\n   :\
    \                         |                    |                    |\n   :  \
    \                       |prepareDataElements |                    |\n   :    \
    \                     |------------------->|                    |\n   :      \
    \                   |                    | processIncomingMsg |\n   :        \
    \                 |                    |------------------->|\n   :          \
    \               |                    |                    |\n   :            \
    \             |                    |<-------------------|\n   :              \
    \           |                    |                    |\n   :                \
    \         |<-------------------|                    |\n   |     processPdu   \
    \       |                    |                    |\n   |<------------------------|\
    \                    |                    |\n   |                         |  \
    \                  |                    |\n   :                         :    \
    \                :                    :\n   :                         :      \
    \              :                    :\n   |    returnResponsePdu    |        \
    \            |                    |\n   |------------------------>|          \
    \          |                    |\n   :                         | prepareResponseMsg\
    \ |                    |\n   :                         |------------------->|\
    \                    |\n   :                         |                    |generateResponseMsg\
    \ |\n   :                         |                    |------------------->|\n\
    \   :                         |                    |                    |\n  \
    \ :                         |                    |<-------------------|\n   :\
    \                         |                    |                    |\n   :  \
    \                       |<-------------------|                    |\n   :    \
    \                     |                    |                    |\n   :      \
    \                   |--------------+     |                    |\n   :        \
    \                 | Send SNMP    |     |                    |\n   :          \
    \               | Message      |     |                    |\n   :            \
    \             | to Network   |     |                    |\n   :              \
    \           |              v     |                    |\n"
- title: 5.  Managed Object Definitions for SNMP Management Frameworks
  contents:
  - "5.  Managed Object Definitions for SNMP Management Frameworks\n   SNMP-FRAMEWORK-MIB\
    \ DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-IDENTITY, OBJECT-TYPE,\n  \
    \     OBJECT-IDENTITY,\n       snmpModules                           FROM SNMPv2-SMI\n\
    \       TEXTUAL-CONVENTION                    FROM SNMPv2-TC\n       MODULE-COMPLIANCE,\
    \ OBJECT-GROUP       FROM SNMPv2-CONF;\n   snmpFrameworkMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9711200000Z\"            -- 20 November 1997\n       ORGANIZATION\
    \ \"SNMPv3 Working Group\"\n       CONTACT-INFO \"WG-email:   snmpv3@tis.com\n\
    \                     Subscribe:  majordomo@tis.com\n                        \
    \         In message body:  subscribe snmpv3\n                     Chair:    \
    \  Russ Mundy\n                                 Trusted Information Systems\n\
    \                     postal:     3060 Washington Rd\n                       \
    \          Glenwood MD 21738\n                                 USA\n         \
    \            email:      mundy@tis.com\n                     phone:      +1 301-854-6889\n\
    \                     Co-editor   Dave Harrington\n                          \
    \       Cabletron Systems, Inc.\n                     postal:     Post Office\
    \ Box 5005\n                                 Mail Stop: Durham\n             \
    \                    35 Industrial Way\n                                 Rochester,\
    \ NH 03867-5005\n                                 USA\n                     email:\
    \      dbh@ctron.com\n                     phone:      +1 603-337-7357\n     \
    \                Co-editor   Randy Presuhn\n                                 BMC\
    \ Software, Inc.\n                     postal:     1190 Saratoga Avenue\n    \
    \                             Suite 130\n                                 San\
    \ Jose, CA 95129\n                                 USA\n                     email:\
    \      rpresuhn@bmc.com\n                     phone:      +1 408-556-0720\n  \
    \                   Co-editor:  Bert Wijnen\n                                \
    \ IBM T.J. Watson Research\n                     postal:     Schagen 33\n    \
    \                             3461 GL Linschoten\n                           \
    \      Netherlands\n                     email:      wijnen@vnet.ibm.com\n   \
    \                  phone:      +31 348-432-794\n                    \"\n     \
    \  DESCRIPTION  \"The SNMP Management Architecture MIB\"\n       ::= { snmpModules\
    \ 10 }\n   -- Textual Conventions used in the SNMP Management Architecture ***\n\
    \   SnmpEngineID ::= TEXTUAL-CONVENTION\n       STATUS       current\n       DESCRIPTION\
    \ \"An SNMP engine's administratively-unique identifier.\n                   \
    \ The value for this object may not be all zeros or\n                    all 'ff'H\
    \ or the empty (zero length) string.\n                    The initial value for\
    \ this object may be configured\n                    via an operator console entry\
    \ or via an algorithmic\n                    function.  In the latter case, the\
    \ following\n                    example algorithm is recommended.\n         \
    \           In cases where there are multiple engines on the\n               \
    \     same system, the use of this algorithm is NOT\n                    appropriate,\
    \ as it would result in all of those\n                    engines ending up with\
    \ the same ID value.\n                    1) The very first bit is used to indicate\
    \ how the\n                       rest of the data is composed.\n            \
    \           0 - as defined by enterprise using former methods\n              \
    \             that existed before SNMPv3. See item 2 below.\n                \
    \       1 - as defined by this architecture, see item 3\n                    \
    \       below.\n                       Note that this allows existing uses of\
    \ the\n                       engineID (also known as AgentID [RFC1910]) to\n\
    \                       co-exist with any new uses.\n                    2) The\
    \ snmpEngineID has a length of 12 octets.\n                       The first four\
    \ octets are set to the binary\n                       equivalent of the agent's\
    \ SNMP management\n                       private enterprise number as assigned\
    \ by the\n                       Internet Assigned Numbers Authority (IANA).\n\
    \                       For example, if Acme Networks has been assigned\n    \
    \                   { enterprises 696 }, the first four octets would\n       \
    \                be assigned '000002b8'H.\n                       The remaining\
    \ eight octets are determined via\n                       one or more enterprise-specific\
    \ methods. Such\n                       methods must be designed so as to maximize\
    \ the\n                       possibility that the value of this object will\n\
    \                       be unique in the agent's administrative domain.\n    \
    \                   For example, it may be the IP address of the SNMP\n      \
    \                 entity, or the MAC address of one of the\n                 \
    \      interfaces, with each address suitably padded\n                       with\
    \ random octets.  If multiple methods are\n                       defined, then\
    \ it is recommended that the first\n                       octet indicate the\
    \ method being used and the\n                       remaining octets be a function\
    \ of the method.\n                    3) The length of the octet strings varies.\n\
    \                       The first four octets are set to the binary\n        \
    \               equivalent of the agent's SNMP management\n                  \
    \     private enterprise number as assigned by the\n                       Internet\
    \ Assigned Numbers Authority (IANA).\n                       For example, if Acme\
    \ Networks has been assigned\n                       { enterprises 696 }, the\
    \ first four octets would\n                       be assigned '000002b8'H.\n \
    \                      The very first bit is set to 1. For example, the\n    \
    \                   above value for Acme Networks now changes to be\n        \
    \               '800002b8'H.\n                       The fifth octet indicates\
    \ how the rest (6th and\n                       following octets) are formatted.\
    \ The values for\n                       the fifth octet are:\n              \
    \           0     - reserved, unused.\n                         1     - IPv4 address\
    \ (4 octets)\n                                 lowest non-special IP address\n\
    \                         2     - IPv6 address (16 octets)\n                 \
    \                lowest non-special IP address\n                         3   \
    \  - MAC address (6 octets)\n                                 lowest IEEE MAC\
    \ address, canonical\n                                 order\n               \
    \          4     - Text, administratively assigned\n                         \
    \        Maximum remaining length 27\n                         5     - Octets,\
    \ administratively assigned\n                                 Maximum remaining\
    \ length 27\n                         6-127 - reserved, unused\n             \
    \          127-255 - as defined by the enterprise\n                          \
    \       Maximum remaining length 27\n                   \"\n       SYNTAX    \
    \   OCTET STRING (SIZE(1..32))\n   SnmpSecurityModel ::= TEXTUAL-CONVENTION\n\
    \       STATUS       current\n       DESCRIPTION \"An identifier that uniquely\
    \ identifies a\n                    securityModel of the Security Subsystem within\
    \ the\n                    SNMP Management Architecture.\n                   \
    \ The values for securityModel are allocated as\n                    follows:\n\
    \                    - The zero value is reserved.\n                    - Values\
    \ between 1 and 255, inclusive, are reserved\n                      for standards-track\
    \ Security Models and are\n                      managed by the Internet Assigned\
    \ Numbers Authority\n                      (IANA).\n                    - Values\
    \ greater than 255 are allocated to\n                      enterprise-specific\
    \ Security Models.  An\n                      enterprise-specific securityModel\
    \ value is defined\n                      to be:\n                      enterpriseID\
    \ * 256 + security model within\n                      enterprise\n          \
    \            For example, the fourth Security Model defined by\n             \
    \         the enterprise whose enterpriseID is 1 would be\n                  \
    \    260.\n                    This scheme for allocation of securityModel\n \
    \                   values allows for a maximum of 255 standards-\n          \
    \          based Security Models, and for a maximum of\n                    255\
    \ Security Models per enterprise.\n                    It is believed that the\
    \ assignment of new\n                    securityModel values will be rare in\
    \ practice\n                    because the larger the number of simultaneously\n\
    \                    utilized Security Models, the larger the\n              \
    \      chance that interoperability will suffer.\n                    Consequently,\
    \ it is believed that such a range\n                    will be sufficient.  In\
    \ the unlikely event that\n                    the standards committee finds this\
    \ number to be\n                    insufficient over time, an enterprise number\n\
    \                    can be allocated to obtain an additional 255\n          \
    \          possible values.\n                    Note that the most significant\
    \ bit must be zero;\n                    hence, there are 23 bits allocated for\
    \ various\n                    organizations to design and define non-standard\n\
    \                    securityModels.  This limits the ability to\n           \
    \         define new proprietary implementations of Security\n               \
    \     Models to the first 8,388,608 enterprises.\n                    It is worthwhile\
    \ to note that, in its encoded\n                    form, the securityModel value\
    \ will normally\n                    require only a single byte since, in practice,\n\
    \                    the leftmost bits will be zero for most messages\n      \
    \              and sign extension is suppressed by the encoding\n            \
    \        rules.\n                    As of this writing, there are several values\n\
    \                    of securityModel defined for use with SNMP or\n         \
    \           reserved for use with supporting MIB objects.\n                  \
    \  They are as follows:\n                        0  reserved for 'any'\n     \
    \                   1  reserved for SNMPv1\n                        2  reserved\
    \ for SNMPv2c\n                        3  User-Based Security Model (USM)\n  \
    \                 \"\n       SYNTAX       INTEGER(0..2147483647)\n   SnmpMessageProcessingModel\
    \ ::= TEXTUAL-CONVENTION\n       STATUS       current\n       DESCRIPTION \"An\
    \ identifier that uniquely identifies a Message\n                    Processing\
    \ Model of the Message Processing\n                    Subsystem within a SNMP\
    \ Management Architecture.\n                    The values for messageProcessingModel\
    \ are\n                    allocated as follows:\n                    - Values\
    \ between 0 and 255, inclusive, are\n                      reserved for standards-track\
    \ Message Processing\n                      Models and are managed by the Internet\
    \ Assigned\n                      Numbers Authority (IANA).\n                \
    \    - Values greater than 255 are allocated to\n                      enterprise-specific\
    \ Message Processing Models.\n                      An enterprise messageProcessingModel\
    \ value is\n                      defined to be:\n                      enterpriseID\
    \ * 256 +\n                           messageProcessingModel within enterprise\n\
    \                      For example, the fourth Message Processing Model\n    \
    \                  defined by the enterprise whose enterpriseID\n            \
    \          is 1 would be 260.\n                    This scheme for allocation\
    \ of securityModel\n                    values allows for a maximum of 255 standards-\n\
    \                    based Message Processing Models, and for a\n            \
    \        maximum of 255 Message Processing Models per\n                    enterprise.\n\
    \                    It is believed that the assignment of new\n             \
    \       messageProcessingModel values will be rare\n                    in practice\
    \ because the larger the number of\n                    simultaneously utilized\
    \ Message Processing Models,\n                    the larger the chance that interoperability\n\
    \                    will suffer. It is believed that such a range\n         \
    \           will be sufficient.  In the unlikely event that\n                \
    \    the standards committee finds this number to be\n                    insufficient\
    \ over time, an enterprise number\n                    can be allocated to obtain\
    \ an additional 256\n                    possible values.\n                  \
    \  Note that the most significant bit must be zero;\n                    hence,\
    \ there are 23 bits allocated for various\n                    organizations to\
    \ design and define non-standard\n                    messageProcessingModels.\
    \  This limits the ability\n                    to define new proprietary implementations\
    \ of\n                    Message Processing Models to the first 8,388,608\n \
    \                   enterprises.\n                    It is worthwhile to note\
    \ that, in its encoded\n                    form, the securityModel value will\
    \ normally\n                    require only a single byte since, in practice,\n\
    \                    the leftmost bits will be zero for most messages\n      \
    \              and sign extension is suppressed by the encoding\n            \
    \        rules.\n                    As of this writing, there are several values\
    \ of\n                    messageProcessingModel defined for use with SNMP.\n\
    \                    They are as follows:\n                        0  reserved\
    \ for SNMPv1\n                        1  reserved for SNMPv2c\n              \
    \          2  reserved for SNMPv2u and SNMPv2*\n                        3  reserved\
    \ for SNMPv3\n                   \"\n       SYNTAX       INTEGER(0..2147483647)\n\
    \   SnmpSecurityLevel ::= TEXTUAL-CONVENTION\n       STATUS       current\n  \
    \     DESCRIPTION \"A Level of Security at which SNMP messages can be\n      \
    \              sent or with which operations are being processed;\n          \
    \          in particular, one of:\n                      noAuthNoPriv - without\
    \ authentication and\n                                     without privacy,\n\
    \                      authNoPriv   - with authentication but\n              \
    \                       without privacy,\n                      authPriv     -\
    \ with authentication and\n                                     with privacy.\n\
    \                    These three values are ordered such that\n              \
    \      noAuthNoPriv is less than authNoPriv and\n                    authNoPriv\
    \ is less than authPriv.\n                   \"\n       SYNTAX       INTEGER {\
    \ noAuthNoPriv(1),\n                              authNoPriv(2),\n           \
    \                   authPriv(3)\n                            }\n   SnmpAdminString\
    \ ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT \"255a\"\n       STATUS       current\n\
    \       DESCRIPTION \"An octet string containing administrative\n            \
    \        information, preferably in human-readable form.\n                   \
    \ To facilitate internationalization, this\n                    information is\
    \ represented using the ISO/IEC\n                    IS 10646-1 character set,\
    \ encoded as an octet\n                    string using the UTF-8 transformation\
    \ format\n                    described in [RFC2044].\n                    Since\
    \ additional code points are added by\n                    amendments to the 10646\
    \ standard from time\n                    to time, implementations must be prepared\
    \ to\n                    encounter any code point from 0x00000000 to\n      \
    \              0x7fffffff.\n                    The use of control codes should\
    \ be avoided.\n                    When it is necessary to represent a newline,\n\
    \                    the control code sequence CR LF should be used.\n       \
    \             The use of leading or trailing white space should\n            \
    \        be avoided.\n                    For code points not directly supported\
    \ by user\n                    interface hardware or software, an alternative\n\
    \                    means of entry and display, such as hexadecimal,\n      \
    \              may be provided.\n                    For information encoded in\
    \ 7-bit US-ASCII,\n                    the UTF-8 encoding is identical to the\n\
    \                    US-ASCII encoding.\n                    Note that when this\
    \ TC is used for an object that\n                    is used or envisioned to\
    \ be used as an index, then\n                    a SIZE restriction must be specified\
    \ so that the\n                    number of sub-identifiers for any object instance\n\
    \                    does not exceed the limit of 128, as defined by\n       \
    \             [RFC1905].\n                   \"\n       SYNTAX       OCTET STRING\
    \ (SIZE (0..255))\n   -- Administrative assignments ***************************************\n\
    \   snmpFrameworkAdmin\n       OBJECT IDENTIFIER ::= { snmpFrameworkMIB 1 }\n\
    \   snmpFrameworkMIBObjects\n       OBJECT IDENTIFIER ::= { snmpFrameworkMIB 2\
    \ }\n   snmpFrameworkMIBConformance\n       OBJECT IDENTIFIER ::= { snmpFrameworkMIB\
    \ 3 }\n   -- the snmpEngine Group ********************************************\n\
    \   snmpEngine OBJECT IDENTIFIER ::= { snmpFrameworkMIBObjects 1 }\n   snmpEngineID\
    \     OBJECT-TYPE\n       SYNTAX       SnmpEngineID\n       MAX-ACCESS   read-only\n\
    \       STATUS       current\n       DESCRIPTION \"An SNMP engine's administratively-unique\
    \ identifier.\n                   \"\n       ::= { snmpEngine 1 }\n   snmpEngineBoots\
    \  OBJECT-TYPE\n       SYNTAX       INTEGER (1..2147483647)\n       MAX-ACCESS\
    \   read-only\n       STATUS       current\n       DESCRIPTION \"The number of\
    \ times that the SNMP engine has\n                    (re-)initialized itself\
    \ since its initial\n                    configuration.\n                   \"\
    \n       ::= { snmpEngine 2 }\n   snmpEngineTime   OBJECT-TYPE\n       SYNTAX\
    \       INTEGER (0..2147483647)\n       MAX-ACCESS   read-only\n       STATUS\
    \       current\n       DESCRIPTION \"The number of seconds since the SNMP engine\
    \ last\n                    incremented the snmpEngineBoots object.\n        \
    \           \"\n       ::= { snmpEngine 3 }\n   snmpEngineMaxMessageSize OBJECT-TYPE\n\
    \       SYNTAX       INTEGER (484..2147483647)\n       MAX-ACCESS   read-only\n\
    \       STATUS       current\n       DESCRIPTION \"The maximum length in octets\
    \ of an SNMP message\n                    which this SNMP engine can send or receive\
    \ and\n                    process, determined as the minimum of the maximum\n\
    \                    message size values supported among all of the\n        \
    \            transports available to and supported by the engine.\n          \
    \         \"\n       ::= { snmpEngine 4 }\n   -- Registration Points for Authentication\
    \ and Privacy Protocols **\n   snmpAuthProtocols OBJECT-IDENTITY\n       STATUS\
    \        current\n       DESCRIPTION  \"Registration point for standards-track\n\
    \                     authentication protocols used in SNMP Management\n     \
    \                Frameworks.\n                    \"\n       ::= { snmpFrameworkAdmin\
    \ 1 }\n   snmpPrivProtocols OBJECT-IDENTITY\n       STATUS        current\n  \
    \     DESCRIPTION  \"Registration point for standards-track privacy\n        \
    \             protocols used in SNMP Management Frameworks.\n                \
    \    \"\n       ::= { snmpFrameworkAdmin 2 }\n   -- Conformance information ******************************************\n\
    \   snmpFrameworkMIBCompliances\n                  OBJECT IDENTIFIER ::= {snmpFrameworkMIBConformance\
    \ 1}\n   snmpFrameworkMIBGroups\n                  OBJECT IDENTIFIER ::= {snmpFrameworkMIBConformance\
    \ 2}\n   -- compliance statements\n   snmpFrameworkMIBCompliance MODULE-COMPLIANCE\n\
    \       STATUS       current\n       DESCRIPTION \"The compliance statement for\
    \ SNMP engines which\n                    implement the SNMP Management Framework\
    \ MIB.\n                   \"\n       MODULE    -- this module\n           MANDATORY-GROUPS\
    \ { snmpEngineGroup }\n       ::= { snmpFrameworkMIBCompliances 1 }\n   -- units\
    \ of conformance\n   snmpEngineGroup OBJECT-GROUP\n       OBJECTS {\n        \
    \         snmpEngineID,\n                 snmpEngineBoots,\n                 snmpEngineTime,\n\
    \                 snmpEngineMaxMessageSize\n               }\n       STATUS  \
    \     current\n       DESCRIPTION \"A collection of objects for identifying and\n\
    \                    determining the configuration and current timeliness\n  \
    \                  values of an SNMP engine.\n                   \"\n       ::=\
    \ { snmpFrameworkMIBGroups 1 }\n   END\n"
- title: 6.  Intellectual Property
  contents:
  - "6.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document is the result of the efforts of the SNMPv3\
    \ Working\n   Group.  Some special thanks are in order to the following SNMPv3\
    \ WG\n   members:\n      Dave Battle (SNMP Research, Inc.)\n      Uri Blumenthal\
    \ (IBM T.J. Watson Research Center)\n      Jeff Case (SNMP Research, Inc.)\n \
    \     John Curran (BBN)\n      T. Max Devlin (Hi-TECH Connections)\n      John\
    \ Flick (Hewlett Packard)\n      David Harrington (Cabletron Systems Inc.)\n \
    \     N.C. Hien (IBM T.J. Watson Research Center)\n      Dave Levi (SNMP Research,\
    \ Inc.)\n      Louis A Mamakos (UUNET Technologies Inc.)\n      Paul Meyer (Secure\
    \ Computing Corporation)\n      Keith McCloghrie (Cisco Systems)\n      Russ Mundy\
    \ (Trusted Information Systems, Inc.)\n      Bob Natale (ACE*COMM Corporation)\n\
    \      Mike O'Dell (UUNET Technologies Inc.)\n      Dave Perkins (DeskTalk)\n\
    \      Peter Polkinghorne (Brunel University)\n      Randy Presuhn (BMC Software,\
    \ Inc.)\n      David Reid (SNMP Research, Inc.)\n      Shawn Routhier (Epilogue)\n\
    \      Juergen Schoenwaelder (TU Braunschweig)\n      Bob Stewart (Cisco Systems)\n\
    \      Bert Wijnen (IBM T.J. Watson Research Center)\n   The document is based\
    \ on recommendations of the IETF Security and\n   Administrative Framework Evolution\
    \ for SNMP Advisory Team.  Members\n   of that Advisory Team were:\n      David\
    \ Harrington (Cabletron Systems Inc.)\n      Jeff Johnson (Cisco Systems)\n  \
    \    David Levi (SNMP Research Inc.)\n      John Linn (Openvision)\n      Russ\
    \ Mundy (Trusted Information Systems) chair\n      Shawn Routhier (Epilogue)\n\
    \      Glenn Waters (Nortel)\n      Bert Wijnen (IBM T. J. Watson Research Center)\n\
    \   As recommended by the Advisory Team and the SNMPv3 Working Group\n   Charter,\
    \ the design incorporates as much as practical from previous\n   RFCs and drafts.\
    \ As a result, special thanks are due to the authors\n   of previous designs known\
    \ as SNMPv2u and SNMPv2*:\n      Jeff Case (SNMP Research, Inc.)\n      David\
    \ Harrington (Cabletron Systems Inc.)\n      David Levi (SNMP Research, Inc.)\n\
    \      Keith McCloghrie (Cisco Systems)\n      Brian O'Keefe (Hewlett Packard)\n\
    \      Marshall T. Rose (Dover Beach Consulting)\n      Jon Saperia (BGS Systems\
    \ Inc.)\n      Steve Waldbusser (International Network Services)\n      Glenn\
    \ W. Waters (Bell-Northern Research Ltd.)\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document describes how an implementation\
    \ can include a Security\n   Model to protect management messages and an Access\
    \ Control Model to\n   control access to management information.\n   The level\
    \ of security provided is determined by the specific Security\n   Model implementation(s)\
    \ and the specific Access Control Model\n   implementation(s) used.\n   Applications\
    \ have access to data which is not secured.  Applications\n   should take reasonable\
    \ steps to protect the data from disclosure.\n   It is the responsibility of the\
    \ purchaser of an implementation to\n   ensure that:\n      1) an implementation\
    \ complies with the rules defined by this\n         architecture,\n      2) the\
    \ Security and Access Control Models utilized satisfy the\n         security and\
    \ access control needs of the organization,\n      3) the implementations of the\
    \ Models and Applications comply with\n         the model and application specifications,\n\
    \      4) and the implementation protects configuration secrets from\n       \
    \  inadvertent disclosure.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [RFC1155] Rose, M. and K. McCloghrie, \"Structure and Identification\n\
    \      of Management Information for TCP/IP-based internets\", STD 16, RFC\n \
    \     1155, May 1990.\n   [RFC1157] Case, J., Fedor, M., Schoffstall, M. and J.\
    \ Davin, \"The\n      Simple Network Management Protocol\", STD 15, RFC 1157,\
    \ May 1990.\n   [RFC1212] Rose, M. and K. McCloghrie, \"Concise MIB Definitions\"\
    , STD\n      16, RFC 1212, March 1991.\n   [RFC1901] Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser,\n      \"Introduction to Community-based SNMPv2\"\
    , RFC 1901, January 1996.\n   [RFC1902] Case, J., McCloghrie, K., Rose, M. and\
    \ S. Waldbusser,\n      \"Structure of Management Information for Version  2 of\
    \ the Simple\n      Network Management Protocol (SNMPv2)\", RFC 1902, January\
    \ 1996.\n   [RFC1905] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n\
    \      \"Protocol Operations for Version 2 of the Simple Network\n      Management\
    \ Protocol (SNMPv2)\", RFC 1905, January 1996.\n   [RFC1906] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser,\n      \"Transport Mappings for Version 2 of\
    \ the Simple Network Management\n      Protocol (SNMPv2)\", RFC 1906, January\
    \ 1996.\n   [RFC1907] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n\
    \      \"Management Information Base for Version 2 of the Simple Network\n   \
    \   Management Protocol (SNMPv2)\", RFC 1907 January 1996.\n   [RFC1908] Case,\
    \ J., McCloghrie, K., Rose, M. and S. Waldbusser,\n      \"Coexistence between\
    \ Version 1 and Version 2 of the Internet-\n      standard Network Management\
    \ Framework\", RFC 1908, January 1996.\n   [RFC1909] McCloghrie, K., Editor, \"\
    An Administrative Infrastructure\n      for SNMPv2\", RFC 1909, February 1996.\n\
    \   [RFC1910] Waters, G., Editor, \"User-based Security Model for SNMPv2\",\n\
    \      RFC 1910, February 1996.\n   [RFC2028] Hovey, R. and S. Bradner, \"The\
    \ Organizations Involved in\n      the IETF Standards Process\", BCP 11, RFC 2028,\
    \ October 1996.\n   [RFC2044] Yergeau, F., \"UTF-8, a transformation format of\
    \ Unicode and\n      ISO 10646\", RFC 2044, October 1996.\n   [RFC2119] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n      Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2272] Case, J., Harrington, D., Presuhn, R.,\
    \ and B. Wijnen,\n      \"Message Processing and Dispatching for the Simple Network\n\
    \      Management Protocol (SNMP)\", RFC 2272, January 1998.\n   [RFC2274] Blumenthal,\
    \ U., and B. Wijnen, \"The User-Based\n      Security Model for Version 3 of the\
    \ Simple Network Management\n      Protocol (SNMPv3)\", RFC 2274, January 1998.\n\
    \   [RFC2275] Wijnen, B., Presuhn, R., and K. McCloghrie,\n      \"View-based\
    \ Access Control Model for the Simple Network Management\n      Protocol (SNMP)\"\
    , RFC 2275, January 1998.\n   [RFC2273] Levi, D., Meyer, P., and B. Stewart, \"\
    SNMPv3\n      Applications\", RFC 2273, January 1998.\n"
- title: 10.  Editors' Addresses
  contents:
  - "10.  Editors' Addresses\n   Bert Wijnen\n   IBM T.J. Watson Research\n   Schagen\
    \ 33\n   3461 GL Linschoten\n   Netherlands\n   Phone:      +31 348-432-794\n\
    \   EMail:      wijnen@vnet.ibm.com\n   Dave Harrington\n   Cabletron Systems,\
    \ Inc\n   Post Office Box 5005\n   Mail Stop: Durham\n   35 Industrial Way\n \
    \  Rochester, NH 03867-5005\n   USA\n   Phone:      +1 603-337-7357\n   EMail:\
    \      dbh@ctron.com\n   Randy Presuhn\n   BMC Software, Inc.\n   1190 Saratoga\
    \ Avenue\n   Suite 130\n   San Jose, CA 95129\n   USA\n   Phone:      +1 408-556-0720\n\
    \   EMail:      rpresuhn@bmc.com\n"
- title: APPENDIX A
  contents:
  - 'APPENDIX A

    '
- title: A.  Guidelines for Model Designers
  contents:
  - "A.  Guidelines for Model Designers\n   This appendix describes guidelines for\
    \ designers of models which are\n   expected to fit into the architecture defined\
    \ in this document.\n   SNMPv1 and SNMPv2c are two SNMP frameworks which use communities\
    \ to\n   provide trivial authentication and access control. SNMPv1 and SNMPv2c\n\
    \   Frameworks can coexist with Frameworks designed according to this\n   architecture,\
    \ and modified versions of SNMPv1 and SNMPv2c Frameworks\n   could be designed\
    \ to meet the requirements of this architecture, but\n   this document does not\
    \ provide guidelines for that coexistence.\n   Within any subsystem model, there\
    \ should be no reference to any\n   specific model of another subsystem, or to\
    \ data defined by a specific\n   model of another subsystem.\n   Transfer of data\
    \ between the subsystems is deliberately described as\n   a fixed set of abstract\
    \ data elements and primitive functions which\n   can be overloaded to satisfy\
    \ the needs of multiple model definitions.\n   Documents which define models to\
    \ be used within this architecture\n   SHOULD use the standard primitives between\
    \ subsystems, possibly\n   defining specific mechanisms for converting the abstract\
    \ data\n   elements into model-usable formats. This constraint exists to allow\n\
    \   subsystem and model documents to be written recognizing common\n   borders\
    \ of the subsystem and model. Vendors are not constrained to\n   recognize these\
    \ borders in their implementations.\n   The architecture defines certain standard\
    \ services to be provided\n   between subsystems, and the architecture defines\
    \ abstract service\n   interfaces to request these services.\n   Each model definition\
    \ for a subsystem SHOULD support the standard\n   service interfaces, but whether,\
    \ or how, or how well, it performs the\n   service is dependent on the model definition.\n"
- title: A.1.  Security Model Design Requirements
  contents:
  - 'A.1.  Security Model Design Requirements

    '
- title: A.1.1.  Threats
  contents:
  - "A.1.1.  Threats\n   A document describing a Security Model MUST describe how\
    \ the model\n   protects against the threats described under \"Security Requirements\n\
    \   of this Architecture\", section 1.4.\n"
- title: A.1.2.  Security Processing
  contents:
  - "A.1.2.  Security Processing\n   Received messages MUST be validated by a Model\
    \ of the Security\n   Subsystem.  Validation includes authentication and privacy\
    \ processing\n   if needed, but it is explicitly allowed to send messages which\
    \ do not\n   require authentication or privacy.\n   A received message contains\
    \ a specified securityLevel to be used\n   during processing.  All messages requiring\
    \ privacy MUST also require\n   authentication.\n   A Security Model specifies\
    \ rules by which authentication and privacy\n   are to be done.  A model may define\
    \ mechanisms to provide additional\n   security features, but the model definition\
    \ is constrained to using\n   (possibly a subset of) the abstract data elements\
    \ defined in this\n   document for transferring data between subsystems.\n   Each\
    \ Security Model may allow multiple security protocols to be used\n   concurrently\
    \ within an implementation of the model. Each Security\n   Model defines how to\
    \ determine which protocol to use, given the\n   securityLevel and the security\
    \ parameters relevant to the message.\n   Each Security Model, with its associated\
    \ protocol(s) defines how the\n   sending/receiving entities are identified, and\
    \ how secrets are\n   configured.\n   Authentication and Privacy protocols supported\
    \ by Security Models are\n   uniquely identified using Object Identifiers. IETF\
    \ standard protocols\n   for authentication or privacy should have an identifier\
    \ defined\n   within the snmpAuthProtocols or the snmpPrivProtocols subtrees.\n\
    \   Enterprise specific protocol identifiers should be defined within the\n  \
    \ enterprise subtree.\n   For privacy, the Security Model defines what portion\
    \ of the message\n   is encrypted.\n   The persistent data used for security should\
    \ be SNMP-manageable, but\n   the Security Model defines whether an instantiation\
    \ of the MIB is a\n   conformance requirement.\n   Security Models are replaceable\
    \ within the Security Subsystem.\n   Multiple Security Model implementations may\
    \ exist concurrently within\n   an SNMP engine.  The number of Security Models\
    \ defined by the SNMP\n   community should remain small to promote interoperability.\n"
- title: A.1.3.  Validate the security-stamp in a received message
  contents:
  - "A.1.3.  Validate the security-stamp in a received message\n   A Message Processing\
    \ Model requests that a Security Model:\n     - verifies that the message has\
    \ not been altered,\n     - authenticates the identification of the principal\
    \ for whom the\n       message was generated.\n     - decrypts the message if\
    \ it was encrypted.\n   Additional requirements may be defined by the model, and\
    \ additional\n   services may be provided by the model, but the model is constrained\n\
    \   to use the following primitives for transferring data between\n   subsystems.\
    \ Implementations are not so constrained.\n   A Message Processing Model uses\
    \ the processMsg primitive as described\n   in section 4.5.\n"
- title: A.1.4.  Security MIBs
  contents:
  - "A.1.4.  Security MIBs\n   Each Security Model defines the MIB module(s) required\
    \ for security\n   processing, including any MIB module(s) required for the security\n\
    \   protocol(s) supported.  The MIB module(s) SHOULD be defined\n   concurrently\
    \ with the procedures which use the MIB module(s).  The\n   MIB module(s) are\
    \ subject to normal access control rules.\n   The mapping between the model-dependent\
    \ security ID and the\n   securityName MUST be able to be determined using SNMP,\
    \ if the model-\n   dependent MIB is instantiated and if access control policy\
    \ allows\n   access.\n"
- title: A.1.5.  Cached Security Data
  contents:
  - "A.1.5.  Cached Security Data\n   For each message received, the Security Model\
    \ caches the state\n   information such that a Response message can be generated\
    \ using the\n   same security information, even if the Local Configuration Datastore\n\
    \   is altered between the time of the incoming request and the outgoing\n   response.\n\
    \   A Message Processing Model has the responsibility for explicitly\n   releasing\
    \ the cached data if such data is no longer needed. To enable\n   this, an abstract\
    \ securityStateReference data element is passed from\n   the Security Model to\
    \ the Message Processing Model.\n   The cached security data may be implicitly\
    \ released via the\n   generation of a response, or explicitly released by using\
    \ the\n   stateRelease primitive, as described in section 4.1.\n"
- title: A.2.  Message Processing Model Design Requirements
  contents:
  - "A.2.  Message Processing Model Design Requirements\n   An SNMP engine contains\
    \ a Message Processing Subsystem which may\n   contain multiple Message Processing\
    \ Models.\n   The Message Processing Model MUST always (conceptually) pass the\n\
    \   complete PDU, i.e., it never forwards less than the complete list of\n   varBinds.\n"
- title: A.2.1.  Receiving an SNMP Message from the Network
  contents:
  - "A.2.1.  Receiving an SNMP Message from the Network\n    Upon receipt of a message\
    \ from the network, the Dispatcher in the\n    SNMP engine determines the version\
    \ of the SNMP message and interacts\n    with the corresponding Message Processing\
    \ Model to determine the\n    abstract data elements.\n    A Message Processing\
    \ Model specifies the SNMP Message format it\n    supports and describes how to\
    \ determine the values of the abstract\n    data elements (like msgID, msgMaxSize,\
    \ msgFlags,\n    msgSecurityParameters, securityModel, securityLevel etc). A Message\n\
    \    Processing Model interacts with a Security Model to provide security\n  \
    \  processing for the message using the processMsg primitive, as\n    described\
    \ in section 4.5.\n"
- title: A.2.2.  Sending an SNMP Message to the Network
  contents:
  - "A.2.2.  Sending an SNMP Message to the Network\n   The Dispatcher in the SNMP\
    \ engine interacts with a Message Processing\n   Model to prepare an outgoing\
    \ message. For that it uses the following\n   primitives:\n      -  for requests\
    \ and notifications: prepareOutgoingMessage, as\n         described in section\
    \ 4.4\n      -  for response messages: prepareResponseMessage, as described in\n\
    \         section 4.4\n   A Message Processing Model, when preparing an Outgoing\
    \ SNMP Message,\n   interacts with a Security Model to secure the message. For\
    \ that it\n   uses the following primitives:\n      -  for requests and notifications:\
    \ generateRequestMsg, as\n         described in section 4.5.\n      -  for response\
    \ messages: generateResponseMsg as described in\n         section 4.5.\n     \
    \ Once the SNMP message is prepared by a Message Processing Model,\n      the\
    \ Dispatcher sends the message to the desired address using the\n      appropriate\
    \ transport.\n"
- title: A.3.  Application Design Requirements
  contents:
  - "A.3.  Application Design Requirements\n   Within an application, there may be\
    \ an explicit binding to a specific\n   SNMP message version, i.e., a specific\
    \ Message Processing Model, and\n   to a specific Access Control Model, but there\
    \ should be no reference\n   to any data defined by a specific Message Processing\
    \ Model or Access\n   Control Model.\n   Within an application, there should be\
    \ no reference to any specific\n   Security Model, or any data defined by a specific\
    \ Security Model.\n   An application determines whether explicit or implicit access\
    \ control\n   should be applied to the operation, and, if access control is needed,\n\
    \   which Access Control Model should be used.\n   An application has the responsibility\
    \ to define any MIB module(s)\n   used to provide application-specific services.\n\
    \   Applications interact with the SNMP engine to initiate messages,\n   receive\
    \ responses, receive asynchronous messages, and send responses.\n"
- title: A.3.1.  Applications that Initiate Messages
  contents:
  - "A.3.1.  Applications that Initiate Messages\n   Applications may request that\
    \ the SNMP engine send messages\n   containing SNMP commands or notifications\
    \ using the sendPdu primitive\n   as described in section 4.2.\n   If it is desired\
    \ that a message be sent to multiple targets, it is\n   the responsibility of\
    \ the application to provide the iteration.\n   The SNMP engine assumes necessary\
    \ access control has been applied to\n   the PDU, and provides no access control\
    \ services.\n   The SNMP engine looks at the \"expectResponse\" parameter, and\
    \ if a\n   response is expected, then the appropriate information is cached such\n\
    \   that a later response can be associated to this message, and can then\n  \
    \ be returned to the application. A sendPduHandle is returned to the\n   application\
    \ so it can later correspond the response with this message\n   as well.\n"
- title: A.3.2.  Applications that Receive Responses
  contents:
  - "A.3.2.  Applications that Receive Responses\n   The SNMP engine matches the incoming\
    \ response messages to outstanding\n   messages sent by this SNMP engine, and\
    \ forwards the response to the\n   associated application using the processResponsePdu\
    \ primitive, as\n   described in section 4.2.\n"
- title: A.3.3.  Applications that Receive Asynchronous Messages
  contents:
  - "A.3.3.  Applications that Receive Asynchronous Messages\n   When an SNMP engine\
    \ receives a message that is not the response to a\n   request from this SNMP\
    \ engine, it must determine to which application\n   the message should be given.\n\
    \   An Application that wishes to receive asynchronous messages registers\n  \
    \ itself with the engine using the primitive registerContextEngineID as\n   described\
    \ in section 4.2.\n   An Application that wishes to stop receiving asynchronous\
    \ messages\n   should unregister itself with the SNMP engine using the primitive\n\
    \   unregisterContextEngineID as described in section 4.2.\n   Only one registration\
    \ per combination of PDU type and contextEngineID\n   is permitted at the same\
    \ time. Duplicate registrations are ignored.\n   An errorIndication will be returned\
    \ to the application that attempts\n   to duplicate a registration.\n   All asynchronously\
    \ received messages containing a registered\n   combination of PDU type and contextEngineID\
    \ are sent to the\n   application which registered to support that combination.\n\
    \   The engine forwards the PDU to the registered application, using the\n   processPdu\
    \ primitive, as described in section 4.2.\n"
- title: A.3.4.  Applications that Send Responses
  contents:
  - "A.3.4.  Applications that Send Responses\n   Request operations require responses.\
    \  An application sends a\n   response via the returnResponsePdu primitive, as\
    \ described in section\n   4.2.\n   The contextEngineID, contextName, securityModel,\
    \ securityName,\n   securityLevel, and stateReference parameters are from the\
    \ initial\n   processPdu primitive. The PDU and statusInformation are the results\n\
    \   of processing.\n"
- title: A.4.  Access Control Model Design Requirements
  contents:
  - "A.4.  Access Control Model Design Requirements\n   An Access Control Model determines\
    \ whether the specified securityName\n   is allowed to perform the requested operation\
    \ on a specified managed\n   object. The Access Control Model specifies the rules\
    \ by which access\n   control is determined.\n   The persistent data used for\
    \ access control should be manageable\n   using SNMP, but the Access Control Model\
    \ defines whether an\n   instantiation of the MIB is a conformance requirement.\n\
    \   The Access Control Model must provide the primitive isAccessAllowed.\n"
- title: B.  Full Copyright Statement
  contents:
  - "B.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
