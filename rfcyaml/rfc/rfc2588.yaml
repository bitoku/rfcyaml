- title: __initial_text__
  contents:
  - '                       IP Multicast and Firewalls

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   Many organizations use a firewall computer that acts as a security\n\
    \   gateway between the public Internet and their private, internal\n   'intranet'.\
    \  In this document, we discuss the issues surrounding the\n   traversal of IP\
    \ multicast traffic across a firewall, and describe\n   possible ways in which\
    \ a firewall can implement and control this\n   traversal.  We also explain why\
    \ some firewall mechanisms - such as\n   SOCKS - that were designed specifically\
    \ for unicast traffic, are less\n   appropriate for multicast.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   A firewall is a security gateway that controls access between\
    \ a\n   private adminstrative domain (an 'intranet') and the public Internet.\n\
    \   This document discusses how a firewall handles IP multicast [1]\n   traffic.\n\
    \   We assume that the external side of the firewall (on the Internet)\n   has\
    \ access to IP multicast - i.e., is on the public \"Multicast\n   Internet\" (aka.\
    \ \"MBone\"), or perhaps some other multicast network.\n   We also assume that\
    \ the *internal* network (i.e., intranet) supports\n   IP multicast routing. \
    \ This is practical, because intranets tend to\n   be centrally administered.\
    \  (Also, many corporate intranets already\n   use multicast internally - for\
    \ training, meetings, or corporate\n   announcements.)  In contrast, some previously\
    \ proposed firewall\n   mechanisms for multicast (e.g., [2]) have worked by sending\
    \ *unicast*\n   packets within the intranet.  Such mechanisms are usually\n  \
    \ inappropriate, because they scale poorly and can cause excessive\n   network\
    \ traffic within the intranet.  Instead, it is better to rely\n   upon the existing\
    \ IP multicast routing/delivery mechanism, rather\n   than trying to replace it\
    \ with unicast.\n   This document addresses scenarios where a multicast session\
    \ is\n   carried - via multicast - on both sides of the firewall.  For\n   instance,\
    \ (i) a particular public MBone session may be relayed onto\n   the intranet (e.g.,\
    \ for the benefit of employees), or (ii) a special\n   internal communication\
    \ (e.g., announcing a new product) may be\n   relayed onto the public MBone. \
    \ In contrast, we do not address the\n   case of a roaming user - outside the\
    \ firewall - who wishes to access\n   a private internal multicast session, using\
    \ a virtual private\n   network.  (Such \"road warrior\" scenarios are outside\
    \ the scope of\n   this document.)\n   As noted by Freed and Carosso [3], a firewall\
    \ can act in two\n   different ways:\n      1/ As a \"protocol end point\".  In\
    \ this case, no internal node\n         (other than the firewall) is directly\
    \ accessible from the\n         external Internet, and no external node (other\
    \ than the\n         firewall) is directly accessible from within the intranet.\n\
    \         Such firewalls are also known as \"application-level gateways\".\n \
    \     2/ As a \"packet filter\".  In this case, internal and external\n      \
    \   nodes are visible to each other at the IP level, but the\n         firewall\
    \ filters out (i.e., blocks passage of) certain packets,\n         based on their\
    \ header or contents.\n   In the remainder of this document, we assume the first\
    \ type of\n   firewall, as it is the most restrictive, and generally provides\
    \ the\n   most security.  For multicast, this means that:\n      (i)  A multicast\
    \ packet that's sent over the Internet will never\n           be seen on the intranet\
    \ (and vice versa), unless such packets\n           are explicitly relayed by\
    \ the firewall, and\n      (ii) The IP source address of a relayed multicast packet\
    \ will be\n           that of the firewall, not that of the packet's original\n\
    \           sender.  To work correctly, the applications and protocols\n     \
    \      being used must take this into account.  (Fortunately, most\n         \
    \  modern multicast-based protocols - for instance, RTP [4] -\n           are\
    \ designed with such relaying in mind.)\n"
- title: 3. Why Multicast is Different
  contents:
  - "3. Why Multicast is Different\n   When considering the security implications\
    \ of IP multicast, it is\n   important to note the fundamental way in which multicast\n\
    \   communication differs from unicast.\n   Unicast communication consists of\
    \ a 'conversation' between an\n   explicit pair of participants.  It therefore\
    \ makes sense for the\n   security of unicast communication to be based upon these\
    \ participants\n   (e.g., by authenticating each participant).  Furthermore, 'trust'\n\
    \   within unicast communication can be based upon trust in each\n   participant,\
    \ as well as upon trust in the data.\n   Multicast communication, on the other\
    \ hand, involves a arbitrary\n   sized, potentially varying set of participants,\
    \ whose membership\n   might never be fully known.  (This is a feature, not a\
    \ bug!)  Because\n   of this, the security of multicast communication is based\
    \ not upon\n   its participants, but instead, upon its *data*.  In particular,\n\
    \   multicast communication is authenticated by authenticating packet\n   data\
    \ - e.g., using digital signatures - and privacy is obtained by\n   encrypting\
    \ this data.  And 'trust' within multicast communication is\n   based solely upon\
    \ trust in the data.\n"
- title: 4. Multicast-Related Threats and Countermeasures
  contents:
  - "4. Multicast-Related Threats and Countermeasures\n   The primary threat arising\
    \ from relaying multicast across a firewall\n   is therefore \"bad data\" - in\
    \ particular:\n      (i)  damaging data flowing from the Internet onto the intranet,\
    \ or\n      (ii) sensitive data inadvertently flowing from the intranet onto\n\
    \           the external Internet.\n   To avert this threat, the intranet's security\
    \ administrator must\n   establish, in advance, a security policy that decides:\n\
    \      (i)  Which multicast groups (and corresponding UDP ports) contain\n   \
    \        data that can safely be relayed from the Internet onto the\n        \
    \   intranet.  For example, the security administrator might\n           choose\
    \ to permit the relaying of an MBone lecture, knowing\n           that the data\
    \ consists only of audio/video (& to safe ports).\n      (ii) Which multicast\
    \ groups (and corresponding UDP ports) will not\n           contain sensitive\
    \ internal information (that should therefore\n           not be relayed from\
    \ the intranet onto the Internet).  This,\n           of course, requires placing\
    \ trust in the applications that\n           internal users will use to participate\
    \ in these groups.  For\n           example, if users use an audio/video 'viewer'\
    \ program to\n           participate in an MBone session, then this program must\
    \ be\n           trusted not to be a \"Trojan Horse\".  (This requirement for\n\
    \           \"trusted applications\" is by no means specific to multicast,\n \
    \          of course.)\n   Once such a security policy has been established, it\
    \ is then the job\n   of the firewall to implement this policy.\n"
- title: 5. What Firewalls Need to Do
  contents:
  - "5. What Firewalls Need to Do\n   In short, a firewall must do three things in\
    \ order to handle\n   multicast:\n      1/ Support the chosen multicast security\
    \ policy (which establishes\n         particular multicast groups as being candidates\
    \ to be relayed),\n      2/ Determine (dynamically) when each candidate group\
    \ should be\n         relayed, and\n      3/ Relay each candidate group's data\
    \ across the firewall (and then\n         re-multicast it at the far end).\n \
    \  These three tasks are described in more detail in the next three\n   sections.\n\
    \   Note that because a firewall is often a convenient place to\n   centralize\
    \ the administration of the intranet, some firewalls might\n   also perform additional\
    \ administrative functions - for example,\n   auditing, accounting, and resource\
    \ monitoring.  These additional\n   functions, however, are outside the scope\
    \ of this document, because\n   they are not specifically *firewall*-related.\
    \  They are equally\n   applicable to an administrative domain that is not firewalled.\n"
- title: 6. Supporting a Multicast Security Policy
  contents:
  - "6. Supporting a Multicast Security Policy\n   As noted above, a multicast security\
    \ policy consists of specifying\n   the set of allowed multicast groups (& corresponding\
    \ UDP ports) that\n   are candidates to be relayed across the firewall.  There\
    \ are three\n   basic ways in which a firewall can support such a policy:\n  \
    \    1/ Static configuration.  The firewall could be configured, in\n        \
    \ advance, with the set of candidate groups/ports - for example,\n         in\
    \ a configuration file.\n      2/ Explicit dynamic configuration.  The set of\
    \ candidate\n         groups/ports could be set (and updated) dynamically, based\
    \ upon\n         an explicit request from one or more trusted clients\n      \
    \   (presumably internal).  For example, the firewall could contain\n        \
    \ a 'remote control' mechanism that allows these trusted clients\n         - upon\
    \ authentication - to update the set of candidate\n         groups/ports.\n  \
    \    3/ Implicit dynamic configuration.  The set of candidate\n         groups/ports\
    \ could be determined implicitly, based upon the\n         contents of some pre-authorized\
    \ multicast group/port, such as a\n         \"session directory\".  Suppose, for\
    \ example, that the security\n         policy decides that the default MBone SAP/SDP\
    \ session directory\n         [5] may be relayed, as well as any sessions that\
    \ are announced\n         in this directory.  A 'watcher' process, associated\
    \ with the\n         firewall, would watch this directory, and use its contents\
    \ to\n         dynamically update the set of candidates.\n   Notes:\n      (i)\
    \   Certain ranges of multicast addresses are defined to be\n            \"administratively\
    \ scoped\" [6].  Even though the firewall\n            does not act as a true\
    \ multicast router, the multicast\n            security policy should set up and\
    \ respect administrative\n            scope boundaries.\n      (ii)  As noted\
    \ in [2], certain privileged UDP ports may be\n            considered dangerous,\
    \ even with multicast.  The multicast\n            security policy should check\
    \ that such ports do not become\n            candidates for relaying.\n      (iii)\
    \ Even if sessions announced in a session directory are\n            considered\
    \ automatic candidates for relaying (i.e., case 3/\n            above), the firewall's\
    \ 'watcher' process should still\n            perform some checks on incoming\
    \ announcements.  In\n            particular, it should ensure that each session's\
    \ 'group'\n            address really is a multicast address, and (as noted above)\n\
    \            it should also check that the port number is within a safe\n    \
    \        range.  Depending on the security policy, it may also wish\n        \
    \    to prevent any *locally* created session announcements from\n           \
    \ becoming candidates (or being relayed).\n"
- title: 7. Determining When to Relay Candidate Groups
  contents:
  - "7. Determining When to Relay Candidate Groups\n   If a multicast group becomes\
    \ a candidate to be relayed across the\n   firewall, the actual relaying should\
    \ *not* be done continually, but\n   instead should be done only when there is\
    \ actual interest in having\n   this group relayed.  The reason for this is two-fold.\
    \  First,\n   relaying a multicast group requires that one or both sides of the\n\
    \   firewall join the group; this establishes multicast routing state\n   within\
    \ the network.  This is inefficient if there is no current\n   interest in having\
    \ the group relayed (especially for\n   Internet->intranet relaying).  Second,\
    \ the act of relaying an\n   unwanted multicast group consumes unnecessary resources\
    \ in the\n   firewall itself.\n   The best way for the firewall to determine when\
    \ a candidate group\n   should be relayed is for it to use actual multicast routing\n\
    \   information, thereby acting much as if it were a real 'inter-domain'\n   multicast\
    \ router.  If the intranet consists of a single subnet only,\n   then the firewall\
    \ could listen to IGMP requests to learn when a\n   candidate group has been joined\
    \ by a node on this subnet.  If,\n   however, the intranet consists of more than\
    \ one subnet, then the\n   firewall can learn about candidate group memberships\
    \ by listening to\n   \"Domain Wide Multicast Group Membership Reports\" [7].\
    \  Unfortunately,\n   this mechanism has only recently been defined, and is not\
    \ yet used by\n   most routers.\n   Another, albeit less desirable, way for the\
    \ firewall to learn when\n   candidate multicast groups have been joined is for\
    \ the firewall to\n   periodically 'probe' each of these groups.  Such a probe\
    \ can be\n   performed by sending an ICMP ECHO request packet to the group, and\n\
    \   listening for a response (with some timeout interval).  This probing\n   scheme\
    \ is practical provided that the set of candidate groups is\n   reasonably small,\
    \ but it should be used only on the intranet, not on\n   the external Internet.\
    \  One significant drawback of this approach is\n   that some operating systems\
    \ - most notably Windows 95 - do not\n   respond to multicast ICMP ECHOs.  However,\
    \ this approach has been\n   shown to work on a large, all-Unix network.\n   Another\
    \ possibility - less desirable still - is for each node to\n   explicitly notify\
    \ the firewall whenever it joins, or leaves, a\n   multicast group.  This requires\
    \ changes to the node's operating\n   system or libraries, or cooperation from\
    \ the application.  Therefore\n   this technique, like the previous one, is applicable\
    \ only within the\n   intranet, not the external Internet.  Note that if multicast\n\
    \   applications are always launched from a special \"session directory\"\n  \
    \ or \"channel guide\" application, then this application may be the only\n  \
    \ one that need be aware of having to contact the firewall.\n   What makes the\
    \ latter two approaches (\"probing\" and \"explicit\n   notification\") undesirable\
    \ is that they duplicate some of the\n   existing functionality of multicast routing,\
    \ and in a way that scales\n   poorly for large networks.  Therefore, if possible,\
    \ firewalls should\n   attempt to make use of existing multicast routing information:\
    \ either\n   IGMP (for a single-subnet intranet), or \"Domain Wide Multicast Group\n\
    \   Membership Reports\".\n   In some circumstances, however, the client cannot\
    \ avoid contacting\n   the firewall prior to joining a multicast session.  In\
    \ this case, it\n   may make sense for this contact to also act as a 'notification'\n\
    \   operation.  Consider, for example, an RTSP [8] proxy associated with\n   the\
    \ firewall.  When the proxy receives a request - from an internal\n   user - to\
    \ open a remote RTSP session, the proxy might examine the\n   response from the\
    \ remote site, to check whether a multicast session\n   is being launched, and\
    \ if so, check whether the multicast group(s)\n   are candidates to be relayed.\n"
- title: 8. Relaying Candidate Groups
  contents:
  - "8. Relaying Candidate Groups\n   The actual mechanism that's used to relay multicast\
    \ packets will\n   depend upon the nature of the firewall.  One common firewall\n\
    \   configuration is to use two nodes: one part of the intranet; the\n   other\
    \ part of the external Internet.  In this case, multicast packets\n   would be\
    \ relayed between these two nodes (and then re-multicast on\n   the other side)\
    \ using a tunneling protocol.\n   A tunneling protocol for multicast should *not*\
    \ run on top of TCP,\n   because the reliability and ordering guarantees that\
    \ TCP provides are\n   unnecessary for multicast communication (where any reliability\
    \ is\n   provided at a higher level), yet would add latency.  Instead, a UDP-\n\
    \   based tunneling protocol is a better fit for relaying multicast\n   packets.\
    \  (If congestion avoidance is a concern, then the tunnel\n   traffic could be\
    \ rate-limited, perhaps on a per-group basis.)\n   One possible tunneling protocol\
    \ is the \"UDP Multicast Tunneling\n   Protocol\" (UMTP) [9].  Although this protocol\
    \ was originally designed\n   as a mechanism for connecting individual client\
    \ machines to the\n   MBone, it is also a natural fit for for use across firewalls.\
    \  UMTP\n   uses only a single UDP port, in each direction, for its tunneleling,\n\
    \   so an existing firewall can easily be configured to support multicast\n  \
    \ relaying, by adding a UMTP implementation at each end, and enabling\n   the\
    \ UDP port for tunneling.\n   Notes:\n      (i)  When multicast packets are relayed\
    \ from the intranet onto the\n           external Internet, they should be given\
    \ the same TTL that\n           they had when they arrived on the firewall's internal\n\
    \           interface (except decremented by 1).  Therefore, the internal\n  \
    \         end of the multicast relay mechanism needs to be able to read\n    \
    \       the TTL of incoming packets.  (This may require special\n           privileges.)\
    \  In contrast, the TTL of packets being relayed\n           in the other direction\
    \ - from the external Internet onto the\n           intranet - is usually less\
    \ important; some default value\n           (sufficient to reach the whole intranet)\
    \ will usually\n           suffice.  Thus, the Internet end of the multicast relay\n\
    \           mechanism - which might be less trusted than the intranet end\n  \
    \         - need not run with special privileges.\n      (ii) One end of the multicast\
    \ tunnel - usually the intranet end -\n           will typically act as the controller\
    \ (i.e., \"master\") of the\n           tunnel, with the other end - usually the\
    \ Internet end -\n           acting as a \"slave\".  For security, the \"master\"\
    \ end of the\n           tunnel should be configured not to accept any commands\
    \ from\n           the \"slave\" (which will often be less trusted).\n"
- title: 9. Networks With More Than One Firewall
  contents:
  - "9. Networks With More Than One Firewall\n   So far we have assumed that there\
    \ is only one firewall between the\n   intranet and the external Internet.  If,\
    \ however, the intranet has\n   more than one firewall, then it's important that\
    \ no single multicast\n   group be relayed by more than one firewall.  Otherwise\
    \ (because\n   firewalls are assumed to be application-level gateways - not proper\n\
    \   multicast routers), packets sent to any such group would become\n   replicated\
    \ on the other side of the firewalls.  The set of candidate\n   groups must therefore\
    \ be partitioned among the firewalls (so that\n   exactly one firewall has responsibility\
    \ for relaying each candidate\n   group).  Clearly, this will require coordination\
    \ between the\n   administrators of the respective firewalls.\n   As a general\
    \ rule, candidate groups should be assigned - if possible\n   - to the firewall\
    \ that is topologically closest to most of the group\n   members (on both the\
    \ intranet and the external Internet).  For\n   example, if a company's intranet\
    \ spans the Atlantic, with firewalls\n   in New York and London, then groups with\
    \ mostly North American\n   members should be assigned to the New York firewall,\
    \ and groups with\n   mostly European members should be assigned to the London\
    \ firewall.\n   (Unfortunately, even if a group has many internal and external\n\
    \   members on both sides of the Atlantic, only one firewall will be\n   allowed\
    \ to relay it.  Some inefficiencies in the data delivery tree\n   are unavoidable\
    \ in this case.)\n"
- title: 10. Why SOCKS is Less Appropriate for Multicast
  contents:
  - "10. Why SOCKS is Less Appropriate for Multicast\n   SOCKS [10] is a mechanism\
    \ for transparently performing unicast\n   communication across a firewall.  A\
    \ special client library -\n   simulating the regular 'sockets' library - sits\
    \ between applications\n   and the transport level.  A conversation between a\
    \ pair of nodes is\n   implemented (transparently) as a pair of conversations:\
    \ one between\n   the first node and a firewall; the other between the firewall\
    \ and the\n   second node.\n   In contrast, because multicast communication does\
    \ not involve a\n   conversation between a pair of nodes, the SOCKS model is less\n\
    \   appropriate.  Although multicast communication across a firewall is\n   implemented\
    \ as two separate multicast communications (one inside the\n   firewall; the other\
    \ outside), the *same* multicast address(es) and\n   port(s) are used on both\
    \ sides of the firewall.  Thus, multicast\n   applications running inside the\
    \ firewall see the same environment as\n   those running outside, so there is\
    \ no need for them to use a special\n   library.\n   Nonetheless, there has been\
    \ a proposal [11] to extend SOCKS V5 to\n   support multicast.  This proposal\
    \ includes two possible modes of\n   communication:\n      (i)  \"MU-mode\", uses\
    \ only *unicast* communication within the\n           intranet (between the firewall\
    \ and each internal group\n           member), and\n      (ii) \"MM-mode\", which\
    \ uses unicast for client-to-firewall relay\n           control, but uses *multicast*\
    \ for other communication within\n           the intranet.\n   As noted in section\
    \ 2 above, \"MU-mode\" would be a poor choice\n   (unless, for some reason, the\
    \ intranet does not support multicast\n   routing at all).  If multicast routing\
    \ is available, there should\n   rarely be a compelling reason to replace multicast\
    \ with 'multiple-\n   unicast'.  Not only does this scale badly, but it also requires\n\
    \   (otherwise unnecessary) changes to each application node, because the\n  \
    \ multicast service model is different from that of unicast.\n   On the other\
    \ hand, \"MM-mode\" (or some variant thereof) *might* be\n   useful in environments\
    \ where a firewall can learn about group\n   membership only via \"explicit notification\"\
    .  In this case each node\n   might use SOCKS to notify the firewall whenever\
    \ it joins and leaves a\n   group.  However, as we explained above, this should\
    \ only be\n   considered as a last resort - a far better solution is to leverage\n\
    \   off the existing multicast routing mechanism.\n   It has been suggested [11]\
    \ that a benefit of using multicast SOCKS\n   (or an \"explicit notification\"\
    \ scheme in general) is that it allows\n   the firewall to authenticate a client's\
    \ multicast \"join\" and \"leave\"\n   operations.  This, however, does not provide\
    \ any security, because it\n   does not prevent other clients within the intranet\
    \ from joining the\n   multicast session (and receiving packets), nor from sending\
    \ packets\n   to the multicast session.  As we noted in section 3 above,\n   authentication\
    \ and privacy in multicast sessions is usually obtained\n   by signing and encrypting\
    \ the multicast data, not by attempting to\n   impose low-level restrictions on\
    \ group membership.  We note also that\n   even if group membership inside the\
    \ intranet could be restricted, it\n   would not be possible, in general, to impose\
    \ any such membership\n   restrictions on the external Internet.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   Once a security policy has been established,\
    \ the techniques described\n   in this document can be used to implement this\
    \ policy.  No security\n   mechanism, however, can overcome a badly designed security\
    \ policy.\n   Specifically, network administrators must be confident that the\n\
    \   multicast groups/ports that they designate as being 'safe' really are\n  \
    \ free from harmful data.  In particular, administrators must be\n   familiar\
    \ with the applications that will receive and process\n   multicast data, and\
    \ (as with unicast applications) be confident that\n   they cannot cause harm\
    \ (e.g., by executing unsafe code received over\n   the network).\n   Because\
    \ it is possible for an adversary to initiate a \"denial of\n   service\" attack\
    \ by flooding an otherwise-legitimate multicast group\n   with garbage, administrators\
    \ may also wish to guard against this by\n   placing bandwidth limits on cross-firewall\
    \ relaying.\n"
- title: 12. Summary
  contents:
  - "12. Summary\n   Bringing IP multicast across a firewall requires that the intranet\n\
    \   first establish a multicast security policy that defines which\n   multicast\
    \ groups (& corresponding UDP ports) are candidates to be\n   relayed across the\
    \ firewall.  The firewall implements this policy by\n   dynamically determining\
    \ when each candidate group/port needs to be\n   relayed, and then by doing the\
    \ actual relaying.  This document has\n   outlined how a firewall can perform\
    \ these tasks.\n"
- title: 13. References
  contents:
  - "13. References\n   [1] Deering, S., \"Host Extensions for IP Multicasting\",\
    \ STD 5, RFC\n       1112, August 1989.\n   [2] Djahandari, K., Sterne, D. F.,\
    \ \"An MBone Proxy for an Application\n       Gateway Firewall\" IEEE Symposium\
    \ on Security and Privacy, 1997.\n   [3] Freed, N. and K. Carosso, \"An Internet\
    \ Firewall Transparency\n       Requirement\", Work in Progress.\n   [4] Schulzrinne,\
    \ H., Casner, S., Frederick, R. and V. Jacobson, \"RTP:\n       A Transport Protocol\
    \ for Real-Time Applications\", RFC 1889,\n       January 1996.\n   [5] Handley,\
    \ M. and V. Jacobson, \"SDP: Session Description Protocol\",\n       RFC 2327,\
    \ April 1998.\n   [6] Meyer, D., \"Administratively Scoped IP Multicast\", BCP\
    \ 23, RFC\n       2365 July 1998.\n   [7] Fenner, B., \"Domain Wide Multicast\
    \ Group Membership Reports\",\n       Work in Progress.\n   [8] Schulzrinne, H.,\
    \ Rao, A. and R. Lanphier, \"Real Time Streaming\n       Protocol (RTSP)\", RFC\
    \ 2326, April 1998.\n   [9] Finlayson, R., \"The UDP Multicast Tunneling Protocol\"\
    , Work in\n       Progress.\n   [10] Leech, M., Ganis, M., Lee, Y., Kuris, R.,\
    \ Koblas, D. and L.\n        Joned, SOCKS Protocol Version 5\", RFC 1928, April\
    \ 1996.\n   [11] Chouinard, D., \"SOCKS V5 UDP and Multicast Extensions\", Work\
    \ in\n        Progress.\n"
- title: 14. Author's Address
  contents:
  - "14. Author's Address\n   Ross Finlayson,\n   Live Networks, Inc. (LIVE.COM)\n\
    \   EMail: finlayson@live.com\n   WWW: http://www.live.com/\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
