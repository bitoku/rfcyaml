- contents:
  - "            A Constrained Application Protocol (CoAP) Usage\n              for
    REsource LOcation And Discovery (RELOAD)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a Constrained Application Protocol (CoAP)
    Usage\n   for REsource LOcation And Discovery (RELOAD).  The CoAP Usage\n   provides
    the functionality to federate Wireless Sensor Networks\n   (WSNs) in a peer-to-peer
    fashion.  The CoAP Usage for RELOAD allows\n   CoAP nodes to store resources in
    a RELOAD peer-to-peer overlay,\n   provides a lookup service, and enables the
    use of RELOAD overlay as a\n   cache for sensor data.  This functionality is implemented
    in the\n   RELOAD overlay itself, without the use of centralized servers.  The\n
    \  RELOAD AppAttach method is used to establish a direct connection\n   between
    nodes through which CoAP messages are exchanged.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7650.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   5\n   3.  Architecture  . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   4.  Registering CoAP URIs . . . . . . . . . . . . . . . . . . . .   7\n
    \  5.  Lookup  . . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n   6.
    \ Forming a Direct Connection and Reading Data  . . . . . . . .   9\n   7.  Caching
    Mechanisms  . . . . . . . . . . . . . . . . . . . . .  11\n     7.1.  ProxyCache
    \ . . . . . . . . . . . . . . . . . . . . . . .  11\n     7.2.  SensorCache .
    . . . . . . . . . . . . . . . . . . . . . .  13\n   8.  CoAP Usage Kinds Definition
    . . . . . . . . . . . . . . . . .  14\n     8.1.  CoAP-REGISTRATION Kind  . .
    . . . . . . . . . . . . . . .  14\n     8.2.  CoAP-CACHING Kind . . . . . . .
    . . . . . . . . . . . . .  15\n   9.  Access Control Rules  . . . . . . . . .
    . . . . . . . . . . .  15\n   10. Security Considerations . . . . . . . . . .
    . . . . . . . . .  16\n   11. IANA Considerations . . . . . . . . . . . . . .
    . . . . . . .  17\n     11.1.  CoAP-REGISTRATION Kind-ID  . . . . . . . . . .
    . . . . .  17\n     11.2.  CoAP-CACHING Kind-ID . . . . . . . . . . . . . . .
    . . .  17\n     11.3.  Access Control Policies  . . . . . . . . . . . . . . .
    .  17\n   12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  18\n
    \    12.1.  Normative References . . . . . . . . . . . . . . . . . .  18\n     12.2.
    \ Informative References . . . . . . . . . . . . . . . . .  18\n   Authors' Addresses
    \ . . . . . . . . . . . . . . . . . . . . . . .  19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Constrained Application Protocol (CoAP) Usage for REsource\n
    \  LOcation And Discovery (RELOAD) allows CoAP nodes to store resources\n   in
    a RELOAD peer-to-peer overlay, provides a lookup service, and\n   enables the
    use of RELOAD overlay as a cache for sensor data.  This\n   functionality is implemented
    in the RELOAD overlay itself, without\n   the use of centralized servers.\n   This
    usage is intended for interconnected devices over a wide-area\n   geographical
    coverage, such as in cases where multiple Wireless\n   Sensor Networks (WSNs)
    need to be federated over some wider-area\n   network.  These WSNs would interconnect
    by means of nodes that are\n   equipped with long range modules (e.g., 2G, 3G,
    4G) as well as short\n   range ones (e.g., XBee, ZigBee, Bluetooth LE).\n   Constrained
    devices are likely to be heterogeneous when it comes to\n   their radio layer;
    however, we expect them to use a common\n   application-layer protocol -- CoAP,
    which is a specialized web\n   transfer protocol [RFC7252].  It realizes the Representational
    State\n   Transfer (REST) architecture for the most constrained nodes, such as\n
    \  sensors and actuators.  CoAP can be used not only between nodes on\n   the
    same constrained network but also between constrained nodes and\n   nodes on the
    Internet.  The latter is possible since CoAP can be\n   translated to Hypertext
    Transfer Protocol (HTTP) for integration with\n   the web.  Application areas
    of CoAP include different forms of\n   machine-to-machine (M2M) communication,
    such as home automation,\n   construction, health care or transportation.  Areas
    with heavy use of\n   sensor and actuator devices that monitor and interact with
    the\n   surrounding environment.\n   As specified in [RFC6940], RELOAD is fundamentally
    an overlay\n   network.  It provides a layered architecture with pluggable\n   application
    layers that can use the underlaying forwarding, storage,\n   and lookup functionalities.
    \ Figure 1 illustrates where the CoAP\n   Usage is placed within the RELOAD architecture.\n
    \      Application\n           +-------+\n           | CoAP  |   ...\n           |
    Usage |\n           +-------+\n       ------------------------------------ Messaging
    Service\n       +------------------+     +---------+\n       |     Message      |<--->|
    Storage |\n       |    Transport     |     +---------+\n       +------------------+
    \          ^\n              ^       ^               |\n              |       v
    \              v\n              |     +-------------------+\n              |     |
    \   Topology       |\n              |     |    Plug-in        |\n              |
    \    +-------------------+\n              |         ^\n              v         v\n
    \          +------------------+\n           |  Forwarding &    |\n           |
    Link Management  |\n           +------------------+\n       ------------------------------------
    Overlay Link Service\n            +-------+  +-------+\n            |TLS    |
    \ |DTLS   |  ...\n            |Overlay|  |Overlay|\n            |Link   |  |Link
    \  |\n            +-------+  +-------+\n                          Figure 1: Architecture\n
    \  The CoAP Usage involves three basic functions:\n   Registration: CoAP nodes
    that can use the RELOAD data storage\n   functionality, can store a mapping from
    their CoAP URI to their Node-\n   ID in the overlay.  They can also retrieve the
    Node-IDs of other\n   nodes.  Nodes that are not RELOAD aware can use other mechanisms,
    for\n   example [CORERESDIR] in their local network.\n   Lookup: Once a CoAP node
    has identified the Node-ID for an URI it\n   wishes to retrieve, it can use the
    RELOAD message routing system to\n   set up a connection that can be used to exchange
    CoAP messages.\n   Similarly as with the registration, nodes that are not RELOAD
    aware\n   can use CoAP messages with a RELOAD Node (RN) that will in turn\n   perform
    the lookup in the overlay.\n   Caching: Nodes can use the RELOAD overlay as a
    caching mechanism for\n   information about what CoAP resources are available
    on the node.\n   This is especially useful for power-constrained nodes that can
    make\n   their data available in the cache provided by the overlay while in\n
    \  sleep mode.\n   For instance, a CoAP proxy (See Section 3) could register its
    Node-ID\n   (e.g. \"9996172\") and a list of sensors (e.g. \"/sensors/temp-1;\n
    \  /sensors/temp-2; /sensors/light, /sensors/humidity\") under its URI\n   (e.g.
    \"coap://overlay-1.com/proxy-1/\").\n   When a node wants to discover the values
    associated with that URI, it\n   queries the overlay for \"coap://overlay-1.com/proxy-1/\"
    and gets back\n   the Node-ID of the proxy and the list of its associated sensors.
    \ The\n   requesting node can then use the RELOAD overlay to establish a direct\n
    \  connection with the proxy and to read sensor values.\n   Moreover, the CoAP
    proxy can store the sensor information in the\n   overlay.  In this way, information
    can be retrieved directly from the\n   overlay without performing a direct connection
    to the storing proxy.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  We use the terminology and definitions from the RELOAD Base Protocol\n   [RFC6940]
    extensively in this document.  Some of those concepts are\n   further described
    in the \"Concepts and Terminology for Peer to Peer\n   SIP\" [P2PSIP] document.\n"
  title: 2.  Terminology
- contents:
  - "3.  Architecture\n   In our architecture we extend the different nodes present
    in RELOAD\n   (Peer, Client) and add support for sensor devices or other\n   constrained
    devices.  Figure 2 illustrates the overlay topology.  The\n   different nodes,
    according to their functionality, are:\n   Client\n      As specified in [RFC6940],
    clients are nodes that do not have\n      routing or storage responsibilities
    in the Overlay.\n   Peer\n      As specified in [RFC6940], peers are nodes in
    the overlay that can\n      route messages for nodes other than those to which
    it is directly\n      connected.\n   Sensor\n      Devices capable of measuring
    a physical quantity.  Sensors usually\n      acquire quantifiable information
    about their surrounding\n      environment such as: temperature, humidity, electric
    current,\n      moisture, radiation, and so on.\n   Actuator\n      Devices capable
    of interacting and affecting their environment\n      such as: electrical motors,
    pneumatic actuators, electric\n      switches, and so on.\n   Proxy Node\n      Devices
    having sufficient resources to run RELOAD either as client\n      or peer.  These
    devices are located at the edge of the sensor\n      network and, in case of Wireless
    Sensor Networks (WSN), act as\n      coordinators of the network.\n   Physical
    devices can have one or several of the previous functional\n   roles.  According
    to the functionalities that are present in each of\n   the nodes, they can be:\n
    \  Constrained Node\n      A Constrained Node (CN) is a node with limited computational\n
    \     capabilities.  CN devices belong to classes of at least C1 and C2\n      devices
    as defined in [RFC7228], their main constraint being the\n      implementation
    of the CoAP protocol.  If the CN is wireless, then\n      it will be part of a
    Low-Rate Wireless Personal Area Network\n      (LR-WPAN), also termed Low-Power
    and Lossy Network (LLN).  Lastly,\n      devices will usually be in sleep mode
    in order to prevent battery\n      drain, and will not communicate during those
    periods.  A CN is NOT\n      part of the RELOAD overlay, therefore it cannot act
    as a client,\n      peer, nor proxy.  A CN is always either a Sensor or an Actuator.\n
    \     In the latter case, the node is often connected to a continuous\n      energy
    power supply.\n   RELOAD Node\n      A RELOAD Node (RN) MUST implement the client
    functionality in the\n      Overlay.  Additionally, the node will often be a full
    RELOAD peer.\n      An RN may also be sensor or actuator since it can have those\n
    \     devices connected to it.\n   Proxy Node\n      A Proxy Node (PN) MUST implement
    the RN functionality and act as a\n      sink for the LR-WPAN network.  The PN
    connects the short range\n      Wireless Network to the Wide Area Network or the
    Internet.  A\n      Proxy Node fulfills the \"Proxy Node\" role as described previously\n
    \     in the Architecture.\n                  +------+\n                  |      |\n
    \        +--------+  RN  +---------+\n         |        |      |         |\n     +---+--+
    \    +------+      +--+---+\n     |      |                   |      |\n     |
    \ RN  |                   |  RN  |\n     |      |                   |      |   +------------+\n
    \    +---+--+                   +--+---+   |        WSN |\n         |         RELOAD
    \         |       |     +----+ |\n         |         OVERLAY         |       |
    +---+ CN | |\n     +---+--+                   +--+---+   | |   +----+ |\n     |
    \     |                   |      +-----+          |\n     |  RN  |                   |
    \ PN  |   |            |\n     |      |                   |      +-----+          |\n
    \    +---+--+     +------+      +--+---+   | |   +----+ |\n         |        |
    \     |         |       | +---+ CN | |\n         +--------+  PN  +---------+       |
    \    +----+ |\n                  |      |                 +------------+\n                  +-+--+-+\n
    \                   |  |\n           +--------|--|--------+\n           |     +--+
    \ +--+     |\n           |     |        |     |\n           |  +--+-+    +-+--+
    \ |\n           |  | CN |    | CN |  |\n           |  +----+    +----+  |\n           |
    \               WSN |\n           +--------------------+\n                        Figure
    2: Overlay Topology\n"
  title: 3.  Architecture
- contents:
  - "4.  Registering CoAP URIs\n   CoAP URIs are typically resolved using a DNS.  When
    CoAP is needed in\n   a RELOAD environment, URI resolution is provided by the
    overlay as a\n   whole.  Instead of registering a URI, a peer stores a\n   CoAPRegistration
    structure under a hash of its own URI.  This uses\n   the CoAP REGISTRATION Kind-ID,
    which is formally defined in\n   Section 8.1 and uses a DICTIONARY data model.\n
    \  In this example, a CoAP proxy that is located in an overlay\n   overlay-1.com
    using a Node-ID \"9996172\" wants to register four\n   different sensors to the
    URI \"coap://overlay-1.com/proxy-1/.well-\n   known/\".  We will be using the
    link format specified in [RFC6690] to\n   store the following mapping in the overlay:\n
    \   Resource-ID = h(coap://overlay-1.com/proxy-1/.well-known/)\n    KEY =  9996172,\n
    \   VALUE = [\n     </sensors/temp-1>;rt=\"temperature-c\";if=\"sensor\",\n     </sensors/temp-2>;rt=\"temperature-c\";if=\"sensor\",\n
    \    </sensors/light>;rt=\"light-lux\";if=\"sensor\",\n     </sensors/humidity>;rt=\"humidity-p\";if=\"sensor\"\n
    \       ]\n   Note that the Resource-ID stored in the overlay is calculated as
    hash\n   over the URI, that is -- h(URI), which in RELOAD is usually SHA-1.\n
    \  This would inform any other node performing a lookup for the previous\n   URI
    \"coap://overlay-1.com/proxy-1/.well-known\" that the Node-ID value\n   for proxy-1
    is \"9996172\".  In addition, this mapping provides\n   relevant information as
    to the number of sensors (CNs) and the URI\n   path to connect to them using CoAP.\n"
  title: 4.  Registering CoAP URIs
- contents:
  - "5.  Lookup\n   The RELOAD overlay supports a rendezvous system that can be used
    for\n   the lookup of other CoAP nodes.  This is done by fetching mapping\n   information
    between CoAP URIs and Node-IDs.\n   As an example, if a node RN located in the
    overlay overlay-1.com\n   wishes to read which resources are served at an RN with
    URI\n   coap://overlay-1.com/proxy-1/, it performs a fetch in the overlay.\n   The
    Resource-ID used in this fetch is a SHA-1 hash over the URI\n   \"coap://overlay-1.com/proxy-1/.well-known/\".\n
    \  After this fetch request, the overlay will return the following\n   result:\n
    \   Resource-ID = h(coap://overlay-1.com/proxy-1/.well-known/)\n    KEY =  9996172,\n
    \   VALUE = [\n     </sensors/temp-1>;rt=\"temperature-c\";if=\"sensor\",\n     </sensors/temp-2>;rt=\"temperature-c\";if=\"sensor\",\n
    \    </sensors/light>;rt=\"light-lux\";if=\"sensor\",\n     </sensors/humidity>;rt=\"humidity-p\";if=\"sensor\"\n
    \    ]\n   The obtained KEY is the Node-ID of the RN responsible of this KEY/\n
    \  VALUE pair.  The VALUE is the set of URIs necessary to read data from\n   the
    CNs associated with the RN.\n   Using the RELOAD DICTIONARY model allows for multiple
    nodes to\n   perform a store to the same Resource-ID.  This can be used, for\n
    \  example, to perform a store of resources of the same type or with\n   similar
    characteristics.  After performing a lookup, this feature\n   allows the fetching
    of those multiple RNs that host CNs of the same\n   class.\n   As an example,
    provided that the previous peer (9996172) and another\n   peer (9996173) have
    stored the links to their respective temperature\n   resources in this same Resource-ID
    (temperature), an RN (e.g.,\n   node-A) can do a fetch to the URI \"coap://overlay-1.com/\n
    \  temperature/.well-known/\", obtaining the following results:\n    Resource-ID
    = h(coap://overlay-1.com/temperature/.well-known/)\n    KEY =  9996172,\n    VALUE
    = [\n     </sensors/temp-1>;rt=\"temperature-c\";if=\"sensor\",\n     </sensors/temp-2>;rt=\"temperature-c\";if=\"sensor\",\n
    \     ]\n    KEY = 9996173,\n    VALUE = [\n     </sensors/temp-a>;rt=\"temperature-c\";if=\"sensor\",\n
    \          </sensors/temp-b>;rt=\"temperature-c\";if=\"sensor\"\n      ]\n"
  title: 5.  Lookup
- contents:
  - "6.  Forming a Direct Connection and Reading Data\n   Once an RN (e.g., node-A)
    has obtained the lookup information for a\n   node in the overlay (e.g., proxy-1),
    it can directly connect to that\n   node.  This is performed by sending an AppAttach
    request to the\n   Node-ID obtained during the lookup process.\n   After the AppAttach
    negotiation, node-A can access the values of the\n   CNs at proxy-1 using the
    information obtained during the lookup.\n   Following the example in Section 5,
    and according to [RFC6690], the\n   requests for accessing the CNs at proxy-1
    would be:\n    REQ: GET /sensors/temp-1\n    REQ: GET /sensors/temp-2\n   Figure
    3 shows a sample of a node reading temperature data.\n   +-----+     +---------+
    \   +-----+          +---+\n   | PNA |     | OVERLAY |    | PNB |          |CNB|\n
    \  +-----+     +---------+    +-----+          +---+\n      |             |            |
    \               |\n      |             |            |                |\n      |
    1.RELOAD    |            |                |\n      | FetchReq    |            |
    \               |\n      |+----------->|            |                |\n      |
    \            |            |                |\n      | 2.RELOAD    |            |
    \               |\n      | FetchAns    |            |                |\n      |<-----------+|
    \           |                |\n      |             |            |                |\n
    \     | 3.RELOAD    |            |                |\n      |  AppAttach  |            |
    \               |\n      |+----------->|            |                |\n      |
    \            | 4.RELOAD   |                |\n      |             | AppAttach
    \ |                |\n      |             |+---------->|                |\n      |
    \            |            |                |\n      |             | 5.RELOAD   |
    \               |\n      | 6.RELOAD    |AppAttachAns|                |\n      |AppAttachAns
    |<----------+|                |\n      |<-----------+|            |                |\n
    \     |             |            |                |\n      |                          |
    \               |\n      |   ---------------------  |                |\n      |
    /        7.ICE          \\|                |\n      | \\   connectivity checks
    /|                |\n      |   ---------------------  |                |\n      |
    \                         |                |\n      |      8.CoAP CON          |
    \               |\n      |    GET /sensors/temp-1   |                |\n      |+------------------------>|
    \               |\n      |                          |  9.CoAP  GET   |\n      |
    \                         |/sensors/temp-1 |\n      |                          |+-------------->|\n
    \     |                          | 10.CoAP        |\n      |     11.CoAP              |
    \   ACK 200     |\n      |        ACK 200           |<--------------+|\n      |<------------------------+|
    \               |\n      |                          |                |\n                Figure
    3: An Example of a Message Sequence\n"
  title: 6.  Forming a Direct Connection and Reading Data
- contents:
  - "7.  Caching Mechanisms\n   The CoAP protocol itself supports the caching of sensor
    information\n   in order to reduce the response time and network bandwidth\n   consumption
    of future, equivalent requests.  CoAP caching is\n   specified in Section 5 of
    [RFC7252].  It consists of reusing stored\n   responses when new requests arrive.
    \ This type of storage is done in\n   CoAP proxies.\n   This CoAP usage for RELOAD
    proposes an additional caching mechanism\n   for storing sensor information directly
    in the overlay.  In order to\n   do so, it is necessary to define how the data
    should be stored.  Such\n   caching mechanism is primarily intended for CNs with
    sensor\n   capabilities, not for RN sensors.  This is due to the battery\n   constraints
    of CNs, forcing them to stay in sleep mode for long\n   periods of time.\n   Whenever
    a CN wakes up, it sends the most recent data from its\n   sensors to its proxy
    (PN), which stores the data in the overlay using\n   a RELOAD StoredData structure
    defined in Section 6 of [RFC6940].  We\n   use the StoredDataValue structure defined
    in Section 6.2 of\n   [RFC6940], in particular we use the SingleValue format type
    to store\n   the cached values in the overlay.  From that structure length,\n
    \  storage_time, lifetime and Signature are used in the same way.  The\n   only
    difference is DataValue, which in our case can be either a\n   ProxyCache or a
    SensorCache:\n   enum { reserved (0), proxy_cache(1), sensor_cache(2), (255) }\n
    \               CoAPCachingType;\n   struct {\n    CoAPCachingType coap_caching_type;\n
    \   select(coap_caching_type) {\n     case proxy_cache: ProxyCache proxy_cache_entry;\n
    \    case sensor_cache: SensorCache sensor_cache_entry;\n     /* extensions */\n
    \   }\n   } CoAPCaching;\n"
  - contents:
    - "7.1.  ProxyCache\n   ProxyCache is meant to store values and sensor information
      (e.g.,\n   inactivity time) for all the sensors associated with a certain proxy,\n
      \  as well as their CoAP URIs.  SensorCache, on the other hand, is used\n   for
      storing the information and cached value of only one sensor (CoAP\n   URI is
      not necessary, as it is the same as the one used for\n   generating the Resource-ID
      associated to that SensorCache entry).\n   ProxyCache contains the Node-ID,
      length, and a series of SensorEntry\n   types.\n   struct {\n    Node-ID  Node_ID;\n
      \   uint32   length;\n    SensorEntry sensors[count];\n   } ProxyCache;\n   Node-ID\n
      \     The Node-ID of the Proxy Node (PN) responsible for different\n      sensor
      devices;\n   length\n      The length of the rest of the structure;\n   Sensor-Entry\n
      \     List of sensors in the form of SensorEntry types;\n   SensorEntry contains
      the coap_uri, sensor_info, and a series of\n   SensorValue types.\n   struct
      {\n    opaque  coap_uri;\n    SensorInfo  sensor_info;\n    uint32  length;\n
      \   SensorValue sensor_value[count];\n   } SensorEntry;\n   coap_uri\n      CoAP
      name of the sensor device in question;\n   sensor_info\n      contains relevant
      sensor information;\n   length\n      The length of the rest of the structure;\n
      \  sensor_value\n      contains a list of values stored by the sensor;\n"
    title: 7.1.  ProxyCache
  - contents:
    - "7.2.  SensorCache\n   SensorCache: contains the information related to one
      sensor.\n   struct {\n    Node-ID  Node_ID;\n    SensorInfo sensor_info;\n    uint32
      \ length;\n    SensorValue sensor_value[count];\n   } SensorCache;\n   Node_ID\n
      \     identifies the Node-ID of the Proxy Node responsible for the\n      sensor;\n
      \  sensor_info\n      contains relevant sensor information;\n   length\n      The
      length of the rest of the structure;\n   sensor_value\n      contains a list
      of values stored by the sensor;\n   SensorInfo contains relevant sensor information
      that is dependent on\n   the use case.  As an example, we use the sensor manufacturer
      as\n   relevant information.\n   struct {\n    opaque  dev_info;\n    /* extensions
      */\n   } SensorInfo;\n   dev_info\n      Contains specific device information
      as defined in [RFC6690] --\n      for example, temperature, luminosity, etc.
      \ It can also represent\n      other semantic information about the device.\n
      \  SensorValue contains the measurement_time, lifetime, and value of the\n   measurement.\n
      \  struct {\n    uint32  measurement_time;\n    uint32  lifetime;\n    opaque
      \ value;\n    /* extensions */\n   } SensorValue;\n   measurement_time\n      indicates
      the moment when the measure was taken, represented as\n      the number of milliseconds
      elapsed since midnight Jan 1, 1970 UTC\n      not counting leap seconds.\n   lifetime\n
      \     indicates the validity time of that measured value in milliseconds\n      since
      measurement_time.\n   value\n      indicates the actual value measured.  It
      can be of different types\n      (integer, long, string); therefore, opaque
      has been used.\n"
    title: 7.2.  SensorCache
  title: 7.  Caching Mechanisms
- contents:
  - "8.  CoAP Usage Kinds Definition\n   This section defines the CoAP-REGISTRATION
    and CoAP-CACHING Kinds.\n"
  - contents:
    - "8.1.  CoAP-REGISTRATION Kind\n   Kind-IDs\n      The Resource Name for the
      CoAP-REGISTRATION Kind-ID is the CoAP\n      URI.  The data stored is a CoAPRegistration,
      which contains a set\n      of CoAP URIs.\n   Data Model\n      The data model
      for the CoAP-REGISTRATION Kind-ID is dictionary.\n      The dictionary key is
      the Node-ID of the storing RN.  This allows\n      each RN to store a single
      mapping.\n   Access Control\n      URI-NODE-MATCH.  The \"coap:\" prefix needs
      to be removed from the\n      COAP URI before matching.\n   Data stored under
      the COAP-REGISTRATION Kind is of type\n   CoAPRegistration, defined below.\n
      \  struct {\n    Node-ID Node_ID;\n    uint16 coap_uris_length;\n    opaque
      coap_uris (0..2^16-1);\n   } CoAPRegistration;\n"
    title: 8.1.  CoAP-REGISTRATION Kind
  - contents:
    - "8.2.  CoAP-CACHING Kind\n   Kind-IDs\n      The Resource Name for the CoAP-CACHING
      Kind-ID is the CoAP URI.\n      The data stored is a CoAPCaching, which contains
      a cached value.\n   Data Model\n      The data model for the CoAP-CACHING Kind-ID
      is single value.\n   Access Control\n      URI-MATCH.  The \"coap:\" prefix
      needs to be removed from the COAP\n      URI before matching.\n   Data stored
      under the CoAP-CACHING Kind is of type CoAPCaching,\n   defined in Section 7.\n"
    title: 8.2.  CoAP-CACHING Kind
  title: 8.  CoAP Usage Kinds Definition
- contents:
  - "9.  Access Control Rules\n   As specified in RELOAD Base [RFC6940], every Kind
    that is storable in\n   an overlay must be associated with an access control policy.
    \ This\n   policy defines whether a request from a given node to operate on a\n
    \  given value should succeed or fail.  Usages can define any access\n   control
    rules they choose, including publicly writable values.\n   CoAP Usage for RELOAD
    requires an access control policy that allows\n   multiple nodes in the overlay
    read and write access.  This access is\n   for registering and caching information
    using CoAP URIs as\n   identifiers.  Therefore, none of the access control policies\n
    \  specified in RELOAD Base [RFC6940] are sufficient.\n   This document defines
    two access control policies, called URI-MATCH\n   and URI-NODE-MATCH.  In the
    URI-MATCH policy, a given value MUST be\n   written and overwritten if and only
    if the signer's certificate\n   contains an uniformResourceIdentifier entry in
    the subjectAltName\n   Extension [RFC5280] that in canonicalized form hashes to
    the\n   Resource-ID for the resource.  As explained in Section 6.3 of\n   [RFC7252]
    the \"coap\" and \"coaps\" schemes conform to the generic URI,\n   thus they are
    normalized in the generic form as explained in\n   Section 6 of [RFC3986].  The
    hash function used is specified in\n   Section 10.2 of [RFC6940].  The certificate
    can be generated as\n   specified in Section 9 of [RFC7252], using Certificate
    mode.\n   In the URI-NODE-MATCH policy, a given value MUST be written and\n   overwritten
    if and only if the condition for URI-MATCH is met and, in\n   addition, the dictionary
    key is equal to the Node-ID in the\n   certificate and that Node-ID is the one
    indicated in the\n   SignerIdentity value cert_hash.\n   These Access Control
    Policies are specified for IANA in Section 11.3.\n"
  title: 9.  Access Control Rules
- contents:
  - "10.  Security Considerations\n   The security considerations of RELOAD [RFC6940]
    and CoAP [RFC7252]\n   apply to this specification.  RELOAD's security model is
    based on\n   public key certificates, which are used for signing messages and\n
    \  stored objects.  At the connection level, RELOAD can use either TLS\n   or
    DTLS.  In the case of CoAP, several security modes have been\n   defined.  Implementations
    of this specification MUST follow all the\n   security-related rules specified
    in the RELOAD [RFC6940] and CoAP\n   [RFC7252] specifications.\n   Additionally,
    in RELOAD every Kind that is storable in an overlay\n   must be associated with
    an access control policy.  This document\n   specifies two new access control
    policies, which are specified in\n   Section 9.  These policies cover the most
    typical deployment\n   scenarios.\n   During the phase of registration and lookup,
    security considerations\n   relevant to RELOAD apply.  A CoAP node that advertises
    its existence\n   via this mechanism, is more likely to be attacked, compared
    to a node\n   (especially a sleepy node) that does not advertise its existence.\n
    \  Section 11 of [RFC7252] and Section 13 of [RFC6940] have more\n   information
    about the kinds of attack and mitigation possible.\n   The caching mechanism specified
    in this document is additional to the\n   caching already done in CoAP.  Access
    control is handled by the\n   RELOAD overlay, where the peer storing the data
    is responsible for\n   validating the signature on the data being stored.\n"
  title: 10.  Security Considerations
- contents:
  - '11.  IANA Considerations

    '
  - contents:
    - "11.1.  CoAP-REGISTRATION Kind-ID\n   This document introduces a data Kind-ID
      to the \"RELOAD Data Kind-ID\"\n   registry:\n       +-------------------+------------+----------+\n
      \      | Kind              |    Kind-ID |      RFC |\n       +-------------------+------------+----------+\n
      \      | CoAP-REGISTRATION |      0x105 | RFC 7650 |\n       +-------------------+------------+----------+\n
      \  This Kind-ID was defined in Section 8.1.\n"
    title: 11.1.  CoAP-REGISTRATION Kind-ID
  - contents:
    - "11.2.  CoAP-CACHING Kind-ID\n   This document introduces another data Kind-ID
      to the \"RELOAD Data\n   Kind-ID\" registry:\n       +--------------+------------+----------+\n
      \      | Kind         |    Kind-ID |      RFC |\n       +--------------+------------+----------+\n
      \      | CoAP-CACHING |      0x106 | RFC 7650 |\n       +--------------+------------+----------+\n
      \  This Kind-ID was defined in Section 8.2.\n"
    title: 11.2.  CoAP-CACHING Kind-ID
  - contents:
    - "11.3.  Access Control Policies\n   IANA has created a \"CoAP Usage for RELOAD
      Access Control Policy\"\n   registry.  This registry has been added to the existing
      RELOAD\n   registry.  Entries in this registry are strings denoting access\n
      \  control policies, as described in Section 9.  New entries in this\n   registry
      are to be registered per the Specification Required policy\n   in [RFC5226].
      \ The initial contents of this registry are:\n       +-----------------+----------+\n
      \      | Access Policy   |      RFC |\n       +-----------------+----------+\n
      \      | URI-NODE-MATCH  | RFC 7650 |\n       | URI-MATCH       | RFC 7650 |\n
      \      +-----------------+----------+\n   This access control policy was described
      in Section 9.\n"
    title: 11.3.  Access Control Policies
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC6690]  Shelby, Z., \"Constrained RESTful Environments (CoRE) Link\n              Format\",
      RFC 6690, DOI 10.17487/RFC6690, August 2012,\n              <http://www.rfc-editor.org/info/rfc6690>.\n
      \  [RFC6940]  Jennings, C., Lowekamp, B., Ed., Rescorla, E., Baset, S.,\n              and
      H. Schulzrinne, \"REsource LOcation And Discovery\n              (RELOAD) Base
      Protocol\", RFC 6940, DOI 10.17487/RFC6940,\n              January 2014, <http://www.rfc-editor.org/info/rfc6940>.\n
      \  [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application
      Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7252>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [CORERESDIR]\n              Shelby, Z., Koster,
      M., Bormann, C., and P. Stok, \"CoRE\n              Resource Directory\", Work
      in Progress, draft-ietf-core-\n              resource-directory-04, July 2015.\n
      \  [P2PSIP]   Bryan, D., Matthews, P., Shim, E., Willis, D., and S.\n              Dawkins,
      \"Concepts and Terminology for Peer to Peer SIP\",\n              Work in Progress,
      draft-ietf-p2psip-concepts-07, May 2015.\n   [RFC5226]  Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\",
      BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n
      \  [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, \"Terminology for\n              Constrained-Node
      Networks\", RFC 7228,\n              DOI 10.17487/RFC7228, May 2014,\n              <http://www.rfc-editor.org/info/rfc7228>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Jaime Jimenez\n   Ericsson\n   Hirsalantie 11\n   Jorvas
    \ 02420\n   Finland\n   Email: jaime.jimenez@ericsson.com\n   Jose M. Lopez-Vega\n
    \  University of Granada\n   CITIC UGR Periodista Rafael Gomez Montero 2\n   Granada
    \ 18071\n   Spain\n   Email: jmlvega@ugr.es\n   Jouni Maenpaa\n   Ericsson\n   Hirsalantie
    11\n   Jorvas  02420\n   Finland\n   Email: jouni.maenpaa@ericsson.com\n   Gonzalo
    Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   Email:
    gonzalo.camarillo@ericsson.com\n"
  title: Authors' Addresses
