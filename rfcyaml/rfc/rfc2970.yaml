- title: __initial_text__
  contents:
  - '  Architecture for Integrated Directory Services - Result from TISDAG

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   A single, unified, global whitepages directory service remains\n\
    \   elusive.  Nonetheless, there is increasing call for participation of\n   widely-dispersed\
    \ directory servers (i.e., across multiple\n   organizations) in large-scale directory\
    \ services.  These services\n   range from national whitepages services, to multi-national\
    \ indexes of\n   WWW resources, and beyond.  Drawing from experiences with the\
    \ TISDAG\n   (Technical Infrastructure for Swedish Directory Access Gateways)\n\
    \   ([TISDAG]) project, this document outlines an approach to providing\n   the\
    \ necessary infrastructure for integrating such widely-scattered\n   servers into\
    \ a single service, rather than attempting to mandate a\n   single protocol and\
    \ schema set for all participating servers to use.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The TISDAG project addressed the issue of providing centralized\n\
    \   access to distributed information for whitepages information on a\n   national\
    \ scale.  The specification of the eventual system is\n   presented in [TISDAG],\
    \ and [DAGEXP] outlines some of the practical\n   experience already gained in\
    \ implementing a system of this scale and\n   nature.  [DAG-Mesh] considers the\
    \ issues and possibilities of\n   networking multiple DAG services.  Following\
    \ on from those, this\n   document attempts to describe some of the architectural\
    \ underpinnings\n   of the system, and propose directions in which the approach\
    \ can be\n   generalized, within the bounds of applicability.\n   The proposed\
    \ architecture inserts a coordinated set of modules\n   between the client access\
    \ software and participating servers.  While\n   the client software interacts\
    \ with the service at a single entry\n   point, the remaining modules are called\
    \ upon (behind the scenes) to\n   provide the necessary application support. \
    \ This may come in the form\n   of modules that provide query proxying, schema\
    \ translation, lookups,\n   referrals, security infrastructure, etc.\n   Part\
    \ of this architecture is an \"internal protocol\" -- called the\n   \"DAG/IP\"\
    \ in the TISDAG project.  This document also outlines the\n   perceived requirements\
    \ for this protocol in the extended DAG.\n"
- title: 2.0 Some terminology
  contents:
  - "2.0 Some terminology\n   Terms used in this document are compliant with those\
    \ set out in\n   [ALVE]. For the purposes of this document, important distinctions\
    \ and\n   relationships are defined between applications, services, servers and\n\
    \   systems.  These are defined as follows:\n   Application:  this is meant in\
    \ the general sense, as a solution to a\n     particular (set of) user need(s).\
    \  That is, the definition is not\n     tied to a particular piece of software\
    \ (as in \"application\n     program\").\n     The definition of an application\
    \ includes the type(s) of\n     information to be exchanged, expected behavior,\
    \ etc.  Thus, a\n     whitepages (search) application may expect to receive a\
    \ name as\n     input to a query engine, and will return all information associated\n\
    \     with the name.  By contrast, a specific security application might\n   \
    \  use the same input name to verify access controls.\n   Service:  an operational\
    \ system providing (controlled) access to\n     fulfill a particular application's\
    \ needs.\n     One service may be changed by configuring location, access\n  \
    \   controls, etc.  Changing application means changing the service.\n   Server:\
    \  a single component offering access through a dedicated\n     protocol, without\
    \ regard to a specific service (or services) it may\n     be supporting in a given\
    \ configuration. Typically programmed for a\n     particular application.\n  \
    \ System:  a set of components with established interconnections.\n     Thus,\
    \ a service can be split between several servers.  A collection\n     of services\
    \ (independently, or interrelated through specified\n     agreements) act as an\
    \ implementation of an application.  A system\n     is composed of one or more\
    \ servers and services.\n     A \"system architecture\" identifies specific software\
    \ components,\n     their behavior, communication channels and messages needed\
    \ to\n     fulfill a particular service's needs.  The TISDAG specification\n \
    \    [TISDAG] includes just such a description, defining a software\n     system\
    \ that will meet the needs of a national whitepages directory\n     service. \
    \ Here, we outline some of the general principles which\n     lead to that specific\
    \ system architecture and discuss ways in which\n     the principles can be applied\
    \ in other contexts.\n     Looking at this bigger picture, we present a \"service\n\
    \     architecture\", or a framework for assembling components into\n     systems\
    \ that meet the needs of a wider variety of services.  This\n     is not a question\
    \ of developing one or more new protocols for\n     services, but rather to examine\
    \ a useful framework of\n     interoperating components.  The goal is to reduce\
    \ the overall\n     number of (specialized) protocols that are developed requiring\n\
    \     incorporation of some very general concepts that are common to all\n   \
    \  protocols.\n"
- title: 3.0  TISDAG -- a first implementation, and some generalizations
  contents:
  - "3.0  TISDAG -- a first implementation, and some generalizations\n   The Swedish\
    \ TISDAG project (described in detail in [TISDAG], with\n   some experiences reported\
    \ in [DAGEXP]) was designed to fulfill the\n   requirements of a particular national\
    \ directory service.   The\n   experience of developing component-based system\
    \ for providing a\n   directory service through a uniform interface (client access\
    \ point)\n   provided valuable insight into the possibilities of extending the\n\
    \   system architecture so that services with different base requirements\n  \
    \ can benefit from many of the same advantages.\n"
- title: 3.1 Deconstructing the TISDAG architecture
  contents:
  - "3.1 Deconstructing the TISDAG architecture\n   In retrospect, we can describe\
    \ the TISDAG system architecture in\n   terms of 3 key requirements and 4 basic\
    \ design principles:\n      R1. The service had to function with (several) existing\
    \ client and\n          server software for the white pages application.\n   \
    \   R2. It had to be possible to extend the service to accommodate new\n     \
    \     client and server protocols if and when they became relevant.\n      R3.\
    \ The service had to be easily reconfigurable -- to accommodate\n          more\
    \ machines (load-sharing), etc.\n      D1. As a design principle, it was important\
    \ to consider the\n          possibility that queries and information templates\
    \ (schema)\n          other than the originally-defined set might eventually be\n\
    \          supported.\n      D2. As the architecture was already modular and geared\
    \ towards\n          extensibility, it seemed important to keep in mind that the\n\
    \          same (or a similar) system could be applied to other (non-\n      \
    \    white pages) applications.\n      D3. There is an \"inside\" and an \"outside\"\
    \ to the service --\n          distinguishing between components that are accessible\
    \ to the\n          world at large and those that are open only to other\n   \
    \       components of the system.\n      D4. Internally, there is a single protocol\
    \ framework for all\n          communications -- this facilitates service support\
    \ functions\n          (e.g., security of transmission), ensures distributability,\n\
    \          and provides the base mechanism for allowing/ascertaining\n       \
    \   interoperability of components.\n   The resulting system architecture featured\
    \ modular component (types)\n   to fulfill a small number of functional roles,\
    \ interconnected by a\n   generic query-response language.  The functional roles\
    \ were defined\n   as:\n      CAPs -- \"client access points\" -- responsible\
    \ for accepting and\n      responding to incoming requests through programmed\
    \ and configured\n      behavior -- to translate the incoming query into some\
    \ set of DAG-\n      internal actions (queries) and dealing with the responses,\n\
    \      filtering and recombining them in such a way as to fulfill the\n      client\
    \ request within the scope of the service.  In the TISDAG\n      system, all CAPs\
    \ are responsible for handling whitepages queries,\n      but the CAPs are distinguished\
    \ by the application protocol in\n      which they will receive queries (e.g.,\
    \ LDAPv2, LDAPv3, HTTP, etc).\n      To the client software, the TISDAG system\
    \ appears as a server of\n      that particular protocol.  In the more general\
    \ case, CAPs may be\n      configured to handle different aspects of a service\
    \ (e.g.,\n      authenticated vs.  non-authenticated access).  While the TISDAG\n\
    \      CAPs all had a simple control structure, the more general case\n      would\
    \ also see CAPs drawing on different subsets of DAG (internal)\n      servers\
    \ in order to handle different query types.  (See the\n      \"Operator Service\"\
    \ example, in section 5.2 below).\n      SAPs -- \"service access points\" --\
    \ responsible for proxying DAG-\n      internal queries to specified services.\
    \  These are resources drawn\n      upon by other components within the system.\
    \  Through programmed\n      and configured behavior, they translate queries in\
    \ the internal\n      protocol into actions against (typically external) servers,\
    \ taking\n      care of any necessary overhead or differences in interaction\n\
    \      style, and converting the responses back into the internal\n      protocol.\
    \  In the TISDAG system, all SAPs are responsible for\n      handling whitepages\
    \ queries, but they are distinguished by the\n      application protocol in which\
    \ they will access remote services.\n      Further distinctions could be made\
    \ based on the (remote service's)\n      schema mappings they handle, and other\
    \ service differentiators.\n      Internal Servers respond to queries in the internal\
    \ protocol and\n      provide specific types of information.  In the TISDAG system,\n\
    \      there is one internal server which provides referral information\n    \
    \  in response to queries.\n   Note that all these components are defined by the\
    \ functional roles\n   they play in the system, not the particular protocols they\
    \ handle, or\n   even the aspect of the service they are meant to support.  That\
    \ is, a\n   client access point is responsible for handling client traffic,\n\
    \   whether its for searching, establishing security credentials, or some\n  \
    \ other task.\n"
- title: 3.2 Some generalizations
  contents:
  - "3.2 Some generalizations\n   The Requirements and Design principles outlined\
    \ above are not\n   particular to a national whitepages service.  They are equally\n\
    \   applicable in any application based on a query-response model, in\n   services\
    \ where multiple protocols need to be supported, and/or when\n   the service requires\
    \ specialized behavior \"behind the scenes\".  In\n   the TISDAG project, this\
    \ last was inherent in the way the service\n   first looks for referrals, then\
    \ makes queries as appropriate.  For\n   protocols that don't handle the referral\
    \ concept natively, the TISDAG\n   system proxies the queries.\n   Because of\
    \ its particular application to query-response situations,\n   the term \"Directory\
    \ Access Gateway\", or \"DAG\" still fits as a label\n   for this type of system\
    \ architecture.\n   Internet applications are evolving, and require more sophisticated\n\
    \   features (e.g., security mechanisms, accounting mechanisms,\n   integration\
    \ of historical session data).  Continuing to develop a\n   dedicated protocol\
    \ per application type results in encumbered and\n   unwieldy protocols, as each\
    \ must implement coverage of all of these\n   common aspects.  But creating a\
    \ single multi-application protocol\n   seems unlikely at best.  The implicit\
    \ proposal here is that, rather\n   than overloading protocols to support multiple\
    \ aspects of a service,\n   those aspects can be managed by breaking the service\
    \ into multiple\n   supporting components to carry out the specialized tasks of\n\
    \   authentication, etc.\n"
- title: 3.3 A Word on DAG/IP
  contents:
  - "3.3 A Word on DAG/IP\n   In the TISDAG project, the choice was made to use a\
    \ single \"internal\n   protocol\" (DAG/IP).  The particular protocol used is\
    \ not relevant to\n   the architecture, but the principle is important.  By selecting\
    \ a\n   single query-response transaction protocol, the needs of the\n   particular\
    \ application could be mapped onto it in terms of queries\n   and data particular\
    \ to the application.  This makes the internal\n   communications more flexible\
    \ for configuration to other environments\n   (services, applications).\n   It\
    \ is common today to select an existing, widely deployed protocol\n   for transferring\
    \ commands and data between client and server -- e.g.,\n   HTTP.  However, apart\
    \ from any issues of the appropriateness (or\n   inappropriateness) of extending\
    \ HTTP to this use, the work would have\n   remained to define all the transaction\
    \ types and data types over that\n   protocol -- the specification of the interaction\
    \ semantics and\n   syntax.\n"
- title: 3.4 Perceived benefits
  contents:
  - "3.4 Perceived benefits\n   Apart from the potential to divide and conquer service\
    \ aspects, as\n   described above, this approach has many perceived benefits:\n\
    \      - For multi-protocol environments, it requires on the order of\n      \
    \  N+M inter-protocol mappings, not NxM.\n      - distribution of development\n\
    \      - distribution of operation\n      - eventual possibilities of hooking\
    \ together different\n        systems (of different backgrounds)\n      - separation\
    \ of\n              - architectural principles\n              - implementation\
    \ to a specific application\n              - configuration for a given service\n\
    \   It is not the goal to say that a standardized system architecture can\n  \
    \ be made so that single components can be built for all possible\n   applications.\
    \  However, this approach in general permits the\n   decoupling of access protocols\
    \ from specific applications, and\n   facilitates the integration of necessary\
    \ infrastructure independently\n   of access protocol (e.g., referrals, security,\
    \ lookup services,\n   distribution etc).\n"
- title: 4.0 Proposed service architecture
  contents:
  - "4.0 Proposed service architecture\n   Pictorially, the DAG architecture is as\
    \ follows:\n         +-------------------------------------------+\n     \"a\"\
    \ |         |                +--------+       |\n   <----->  CAP a  |        \
    \        | SAP A  |       |\n         |         |                |        |  \
    \     |\n         |---------+                +-+------+---+   |\n         |  \
    \                          |(Internal)|   |\n         |           \"DAG/IP\" \
    \        | Server i |   |\n         |                            +----------+\
    \   |\n         |                                           |\n         |    \
    \                                       |\n         |                        \
    \  +--------+       | \"B\"\n         |                          | SAP B  <-------------->\n\
    \         |                          |        |       |\n         |          \
    \                +--------+       |\n         |                              \
    \             |\n         +-------------------------------------------+\n   Note\
    \ that the bounding box is conceptual -- all components may or may\n   not reside\
    \ on one server, or a set of servers governed by the\n   provider of the service.\n\
    \   As we saw in the TISDAG project, the provider of this DAG-based\n   service\
    \ may be only loosely affiliated with the remote services that\n   are used (Whitepages\
    \ Directory Service Providers (WDSPs) in this\n   case).\n"
- title: 4.1 Using the architecture
  contents:
  - "4.1 Using the architecture\n   Building a service on this architecture requires:\n\
    \   Service implementation:\n      1. definition of the overall application to\
    \ be supported by the\n         system -- whitepages, web resource indexing, medical\n\
    \         information\n      2. requirements\n      3. expected behavior\n   System\
    \ architecture:\n      1. nature of deployment -- distributed, security requirements,\n\
    \         etc.\n      2. identification of necessary CAPs -- in terms of access\n\
    \         protocols to be supported, different service levels to be\n        \
    \ provided (e.g., secure and unsecure connections)\n      3. identification of\
    \ necessary services -- e.g., proxying to\n         remote information search\
    \ services, lookup services, \"AAA[A]\"\n         (Authentication, Authorization,\
    \ Accounting, [and Access])\n         servers, etc\n      4. definition of the\
    \ transaction process for the service:  insofar\n         as the CAPs represent\
    \ the service to client software, CAP\n         modules manage the necessary transactions\
    \ with other service\n         modules\n   Data architecture:\n      1. selection\
    \ of schemas to be used (in each protocol)\n      2. definition of schema and\
    \ protocol mappings -- into and out of\n         some DAG/IP representation\n"
- title: 5.0  Illustrations
  contents:
  - '5.0  Illustrations

    '
- title: 5.1 Existing TISDAG Project
  contents:
  - "5.1 Existing TISDAG Project\n   Consider the TISDAG project in the light of the\
    \ above definitions.\n   Service implementation:\n      1. A national-scale subset\
    \ of Whitepages lookups, with specific\n         query types supported: only certain\
    \ schema attributes were\n         permitted in queries, and the expected behavior\
    \ was limited in\n         scope.\n      2. Requirements: the service had to support\
    \ multiple query\n         protocols (from clients and for servers), and be capable\
    \ of\n         searching the entire space of data without centralizing the\n \
    \        storage of records.\n      3. Given a query of accepted type, provide\
    \ referrals to whitepages\n         servers that might have information to fulfill\
    \ the query; if\n         necessary, proxy the referrals (chain) to retrieve the\n\
    \         information for the client.\n   System architecture:\n      1. distributable\
    \ components\n      2. publicly accessible CAPs in HTTP, SMTP, Whois++, LDAPv2,\
    \ and\n         LDAPv3\n      3. referral proxies to Whois++, LDAPv2 and LDAPv3\
    \ WDSPs, as well\n         as a referral query service\n      4. the basic transaction\
    \ process, uniform across all CAPs, is:\n              - query the RI for relevant\
    \ referrals\n              - where necessary, chain referrals through SAPs of\n\
    \                appropriate protocol return, in the native protocol, all\n  \
    \              remaining referrals and data\n   Data architecture:  see the spec.\n\
    \   In the TISDAG project, the above diagram could be mapped as follows:\n   \
    \   CAP a           LDAPv2 CAP\n      SAP A           the Referral Index (RI)\
    \ interface\n      Server i        the Referral Index (RI)\n      SAP B      \
    \     LDAPv3 SAP\n   Note that, in the TISDAG project specification, the designation\
    \ SAP\n   referred exclusively to proxy components designed to deal with\n   external\
    \ servers.  The Referral Index was considered an entity in its\n   own right.\
    \  However, generalizing the concepts of the TISDAG\n   experience lead to the\
    \ proposal of regarding all DAG/IP-supporting\n   service components as SAPs,\
    \ each designed to carry out a particular\n   type of service functionality, and\
    \ whether the server is managed\n   internally to the DAG system or not is immaterial.\n"
- title: 5.2 Operator service
  contents:
  - "5.2 Operator service\n   Consider the case of \"number portability\" -- wherein\
    \ it is necessary\n   to determine the current service provider of a specific\
    \ phone number.\n   The basic assumption is that phone numbers are assigned to\
    \ be\n   globally unique, but are not in any way tied to a specific service\n\
    \   provider.  Therefore, it is necessary to determine the current\n   service\
    \ provider for the given number before being able to retrieve\n   current information.\
    \  For the sake of our illustration, let us assume\n   that the management of\
    \ numbers is two-tiered -- suppose the system\n   stores (internally) the mapping\
    \ between these random digit strings\n   and the country in which each was originally\
    \ activated, but relies on\n   external (country-specific) services to manage\
    \ the updated\n   information about which service provider currently manages a\
    \ given\n   number.  Then, the service data need only be updated when new numbers\n\
    \   are assigned, or national services change their access points.\n   We can\
    \ look at a grossly-simplified version of the problem as an\n   illustration of\
    \ some of the concepts proposed in this service\n   architecture.  We couple it\
    \ with the \"name search\" facet of the\n   TISDAG example, to underscore that\
    \ a single service (\"operator\") may\n   in fact be supported by several disjunct\
    \ underlying activities.\n   Service implementation:\n      1. Retrieving service\
    \ information for a particular (unstructured)\n         phone number digit sequence,\
    \ or searching for numbers\n         associated with a particular name (or fragment\
    \ thereof).\n      2. Requirements:  support IP-telephony through HTTP-based\n\
    \         requests, wireless device requests through WAP [WAP].\n      3. Expected\
    \ behavior:  given a name (fragment), return a list of\n         names and numbers\
    \ to match the fragment; given a phone number,\n         return appropriately-structured\
    \ information re. the current\n         service mapping for that number.\n   System\
    \ architecture:\n      1. Publicly accessible through CAPs; components widely\n\
    \         distributed.\n      2. Need one CAP for HTTP, one for WAP.\n      3.\
    \ Support services include:  an internal service for lookup of\n         number\
    \ strings (to identify nation of origin of the number), a\n         proxy to access\
    \ national services for registration of numbers\n         and service providers,\
    \ and a proxy for remote service provider\n         for retrieval of detailed\
    \ information regarding numbers.  For\n         the name searching, we also need\
    \ a referral index over the\n         names, and a proxy to whatever remote servers\
    \ are managing the\n         whitepages directories.\n      4. Now, 2 different\
    \ types of transaction are possible:  search for\n         name, or look-up a\
    \ number.  In the name search case, the CAP\n         receives a name or name\
    \ fragment, looks it up in the internal\n         referral index, and finds associated\
    \ numbers through external\n         whitepages services (WDSPs).  To look-up\
    \ a number, the CAP\n         first uses the internal look-up service to determine\
    \ the\n         country of origin of the number, and then uses a SAP to access\n\
    \         that nation's number-service provider directory, and finally\n     \
    \    uses a different SAP to access the current service provider to\n        \
    \ determine the information required to make the call.\n   Data architecture:\n\
    \        [Out of scope for the purposes of this illustration]\n        Note that\
    \ some elements of the system architecture are\n        deliberately vague.  Per\
    \ the requirements, no structure is\n        expected in the number string, and\
    \ therefore the lookup server\n        must maintain an index of number-to-country\
    \ mappings and relies\n        on an external number-to-service mapping service\
    \ (in each\n        country).  However, were there any structure to the numbers,\
    \ the\n        lookup server could make use of that structure in the indexing,\n\
    \        or in distribution of the index itself.  This would have no\n       \
    \ effect on the CAPs, which have no inherent reliance on how the\n        lookup\
    \ server performs its task.\n        Pictorially, the example can be rendered\
    \ as follows:\n         +-------------------------------------------+\n     \"\
    a\" |         |                +--------+       |\n   <----->  CAP a  |      \
    \          | SAP A  |       |\n         |         |                |        |\
    \       |\n         |---------+                +-+------+---+   |\n         |\
    \                            |(Internal)|   |\n         |           \"DAG/IP\"\
    \         | Server i |   |\n         |                            +----------+\
    \   |\n         |                                           |\n         |    \
    \                      +--------+       | \"B\"\n         |                  \
    \        | SAP B  <-------------->\n         |                          |    \
    \    |       |\n         |                          +--------+       |\n     \
    \    |                                           |\n         |               \
    \           +--------+       | \"C\"\n         |---------+                | SAP\
    \ C  <-------------->\n     \"b\" |         |                |        |      \
    \ |\n   <----->  CAP b  |                +--------+       |\n         |      \
    \   |                                 |\n         |---------+                +--------+\
    \       |\n         |                          | SAP D  |       |\n         |\
    \                          |        |       |\n         |                    \
    \      +-+------+---+   |\n         |                            |(Internal)|\
    \   |\n         |                            | Server j |   |\n         |    \
    \                        +----------+   |\n         |                        \
    \                   |\n         |                          +--------+       |\
    \ \"E\"\n         |                          | SAP E  <-------------->\n     \
    \    |                          |        |       |\n         |               \
    \           +--------+       |\n         +-------------------------------------------+\n\
    \   where\n      CAP a           HTTP CAP\n      CAP b           WAP CAP\n   \
    \   SAP A           the number-nation lookup interface\n      Server i       \
    \ number-nation lookup server (what country)\n      SAP B           nation-service\
    \ lookup SAP (what service provider)\n      SAP C           service-number information\
    \ lookup SAP (current\n                      service details)\n      SAP D   \
    \        referral index interface\n      Server j        referral index service\n\
    \      SAP E           proxy for chaining queries to remote WDSPs\n"
- title: 5.3 Medical application
  contents:
  - "5.3 Medical application\n   The service architecture is useful for applications\
    \ outside the scope\n   of \"telecoms\".  In another hypothetical illustration,\
    \ consider the\n   case of medical information -- records about patients that\
    \ may be\n   created and stored at a variety of institutions which they visit.\
    \  It\n   is not unusual to need to access all information concerning a\n   patient,\
    \ whether or not the person can recollect (or communicate)\n   conditions that\
    \ were treated, procedures that were performed, or\n   medical institutions visited.\
    \  The data may include everything from\n   prescriptions, to X-rays and other\
    \ images, to incident reports and\n   other elements of medical history, etc.\
    \  Typically, the information\n   is stored where it is collected (or by an agency\
    \ authorized by that\n   institution) -- not in a central repository.  Any service\
    \ that looks\n   to provide complete answers to queries must deal with these\n\
    \   realities, and clearly must function with a strong security model.\n   Service\
    \ implementation:\n      1. Retrieving all medical information for a particular\
    \ person.\n      2. Requirements:  must retrieve, or at least locate, all\n  \
    \       available information, regardless of its storage location;\n         cannot\
    \ require central repository of information; must\n         implement authorization\
    \ and access controls.  Must\n         support a proprietary protocol for secure\
    \ connections\n         within hospitals, wireless access for personnel in\n \
    \        emergency vehicles (not considered secure access).\n      3. Expected\
    \ behavior:  given a patient's national ID, and\n         authorized access by\
    \ medical personnel in secure locations,\n         determine what kinds of records\
    \ are available, and where;\n         given a request for a specific type of record,\
    \ retrieve\n         the record.  Given a patient's national ID, and authorized\n\
    \         access from a wireless device, provide information re.\n         any\
    \ known medical flags (e.g., medicine allergies,\n         conditions, etc).\n\
    \   System architecture:\n      1. Only 2 CAP types are needed, but instances\
    \ of these will\n         be established at major medical institutions.\n    \
    \  2. Need one CAP to support the proprietary protocol, one\n         to support\
    \ wireless access.\n      3. Support services include:  an internal server to\
    \ support\n         security authentication and access control determination;\n\
    \         an internal server to act as referral index for finding\n         information\
    \ pertinent to a particular patient, and one\n         or more proxies for accessing\
    \ remote data storage servers.\n      4. The basic transaction requires that the\
    \ first step be\n         to authenticate the end-user and determine access privileges.\n\
    \         In the case of wireless access, this last will not involve\n       \
    \  a specific lookup, but rather will be set to allow the\n         user to see\
    \ the list of publicized medical conditions.\n         Depending on the query\
    \ type, the next step will be to\n         contact the referral index to determine\
    \ what records\n         exist, and then track down information at the remote\
    \ sources.\n   Data architecture:\n           [Out of scope for the purposes of\
    \ this illustration]\n   Pictorially, the example can be rendered as follows:\n\
    \         +-------------------------------------------+\n     \"a\" |        \
    \ |                +--------+       |\n   <----->  CAP a  |                | SAP\
    \ A  |       |\n         |         |                |        |       |\n     \
    \    |---------+                +-+------+---+   |\n         |               \
    \             |(Internal)|   |\n         |           \"DAG/IP\"         | Server\
    \ i |   |\n         |                            +----------+   |\n         |\
    \                                           |\n         |                    \
    \                       |\n         |                          +--------+    \
    \   | \"B\"\n         |---------+                | SAP B  <-------------->\n \
    \    \"b\" |         |                |        |       |\n   <----->  CAP b  |\
    \                +--------+       |\n         |         |                    \
    \             |\n         |---------+                +--------+       |\n    \
    \     |                          | SAP C  |       |\n         |              \
    \            |        |       |\n         |                          +-+------+---+\
    \   |\n         |                            |(Internal)|   |\n         |    \
    \                        | Server j |   |\n         |                        \
    \    +----------+   |\n         +-------------------------------------------+\n\
    \   where\n      CAP a           CAP for proprietary protocol, secure clients\n\
    \      CAP b           WAP CAP, for roaming access\n      SAP A           authentication\
    \ and ACL lookup interface\n      Server i        authentication and ACL lookup\
    \ server\n      SAP B           remote service SAP -- probably LDAPv3\n      SAP\
    \ C           Referral Index interface\n      Server j        Referral Index\n"
- title: 6. Requirements for the future DAG/IP
  contents:
  - "6. Requirements for the future DAG/IP\n   The role of the DAG/IP is less as a\
    \ query protocol, and more as a\n   framework or structure for carrying basic\
    \ query-response transactions\n   of different (configurable) types.\n   Whatever\
    \ the syntax or grammar, the basic requirements for the DAG/IP\n   include that\
    \ it be:\n      - lightweight; CAPs, SAPs should be able to be quite small\n \
    \     - flexible enough to carry queries of different paradigms, results\n   \
    \     of different types\n      - able to support authentication, authorization,\
    \ accounting and\n        audit mechanisms -- not necessarily native to the protocol\n\
    \      - able to support encryption and end-to-end security within the\n     \
    \   DAG system\n      - sophisticated enough to allow negotiation of  capabilities\
    \ --\n        querying & identifying application type supported (e.g.,\n     \
    \   whitepages vs. service location vs. URN resolution), query types\n       \
    \ supported, results types supported\n      This also means:\n   Better support\
    \ for query-passing/other query semantics (need to\n   balance that against the\
    \ fact that you don't want DAG-CAPs/SAPs to\n   have to know a multiplicity of\
    \ semantic possibilities.\n   Security infrastructure -- ability to establish\
    \ security credentials,\n   maintain a secure transaction, and propagate the security\
    \ information\n   forward in the transaction (don't want to reinvent the wheel,\
    \ just\n   want to be able to use it!).\n   Ability to do lookups, instead of\
    \ searches -- might mean connecting\n   to different services than the RI and/or\
    \ presenting things in a\n   slightly different light -- e.g., lookup <blat> in\
    \ the <foo> space,\n   as opposed to search for all things concerning <blat>.\n\
    \   Ability to access other services -- e.g., Norwegian Directory of\n   Directories\
    \ [NDD] -- beyond just for specific characteristics of the\n   service (e.g.,\
    \ security).\n   In short, the model that seems to stand out from these requirements\n\
    \   one of a protocol framework that looks after establishing secure and\n   authenticated\
    \ (authorized, accountable, auditable...) connections,\n   with transaction negotiation\
    \ facilities.  Within that framework, it\n   must be possible to identify transaction\
    \ types, provide suitable\n   input information (negotiation?) for those transactions,\
    \ and accept\n   transaction result objects back.\n"
- title: 7. Revisiting TISDAG -- for the future
  contents:
  - "7. Revisiting TISDAG -- for the future\n   In the light of the above proposals,\
    \ we can revisit the way the\n   TISDAG CAPs would be defined.\n   The whitepages-application\
    \ service known as TISDAG could have SAPs\n   that supported 2 types of query,\
    \ and 2 types of result sets:\n           query types:\n                   . token-based\n\
    \                   . phrase-based\n           result types:\n               \
    \    . result data\n                   . referrals\n   The Whois++ CAP would be\
    \ configured to contact LDAPv2 and LDAPv3 SAPs\n   because they are identified\
    \ as providing that kind of service (i.e.,\n   if referral protocol == LDAPv2\
    \ connect to a particular service).  The\n   query paradigm will be phrase-oriented\
    \ -- NOT because the Whois++ CAP\n   understands LDAP, but because that is one\
    \ of the defined query types.\n"
- title: 8. Applicability Limitations
  contents:
  - "8. Applicability Limitations\n   As it stands, this type of service architecture\
    \ is limited to query-\n   response type transactions.  This does account for\
    \ a broad range of\n   applications and services, although it would be interesting\
    \ to\n   consider broadening the concept to make it applicable to tunneling\n\
    \   other protocols (e.g., to connect a call through a SAP, in the number\n  \
    \ portability example above).\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   This document takes a high-level perspective on\
    \ service architecture,\n   and as such it neither introduces nor addresses security\
    \ concerns at\n   an implementation level.\n   A distributed service built following\
    \ this approach must address\n   issues of authentication of users, authorization\
    \ for access to\n   material/components of the system, and encryption of links\
    \ between\n   them, as befits the nature of the information and service provided.\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   In discussing this perspective on the evolution of DAG/IP,\
    \ it seemed\n   to us that the requirements for DAG/IP are falling into line with\
    \ the\n   proposed text-based directory access protocol that has variously been\n\
    \   discussed.  Whether it survives in a recognizable form or not :-)\n   some\
    \ of the above has been drawn from discussions of that protocol\n   with Michael\
    \ Mealling and Patrik Faltstrom.\n   The work described in this document was carried\
    \ out as part of an on-\n   going project of Ericsson.  For further information\
    \ regarding that\n   project, contact:\n      Bjorn Larsson\n      bjorn.x.larsson@era.ericsson.se\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Leslie L. Daigle\n   Thinking Cat Enterprises\n  \
    \ EMail:  leslie@thinkingcat.com\n   Thommy Eklof\n   Hotsip AB\n   EMail: thommy.eklof@hotsip.com\n"
- title: 12. References
  contents:
  - "12. References\n   Request For Comments (RFC) and Internet Draft documents are\
    \ available\n   from numerous mirror sites.\n   [ALVE]     Alvestrand, H., \"\
    Definitions for Talking about\n              Directories\", Work in Progress.\n\
    \   [TISDAG]   Daigle, L. and R. Hedberg \"Technical Infrastructure for\n    \
    \          Swedish Directory Access Gateways (TISDAG)\", RFC 2967,\n         \
    \     October 2000.\n   [DAGEXP]   Eklof, T. and L. Daigle, \"Wide Area Directory\
    \ Deployment\n              Experiences\", RFC 2969, September 2000.\n   [DAG-Mesh]\
    \ Daigle, L. and T. Eklof, \"Networking Multiple DAG servers:\n              Meshes\"\
    , RFC 2968, September 2000.\n   [NDD]      Hedberg, R. and H. Alvestrand, \"Technical\
    \ Specification,\n              The Norwegian Directory of Directories (NDD)\"\
    , Work in\n              Progress.\n   [WAP]      The Wireless Application Protocol,\
    \ http://www.wapforum.org\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
