- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        M. Jenkins
  contents:
  - "Independent Submission                                        M. Jenkins\n  \
    \  Using Commercial National Security Algorithm Suite Algorithms in\n        \
    \      Secure/Multipurpose Internet Mail Extensions\n"
- title: Abstract
  contents:
  - "Abstract\n   The United States Government has published the National Security\n\
    \   Agency (NSA) Commercial National Security Algorithm (CNSA) Suite,\n   which\
    \ defines cryptographic algorithm policy for national security\n   applications.\
    \  This document specifies the conventions for using the\n   United States National\
    \ Security Agency's CNSA Suite algorithms in\n   Secure/Multipurpose Internet\
    \ Mail Extensions (S/MIME) as specified in\n   RFC 8551.  It applies to the capabilities,\
    \ configuration, and\n   operation of all components of US National Security Systems\
    \ that\n   employ S/MIME messaging.  US National Security Systems are described\n\
    \   in NIST Special Publication 800-59.  It is also appropriate for all\n   other\
    \ US Government systems that process high-value information.  It\n   is made publicly\
    \ available for use by developers and operators of\n   these and any other system\
    \ deployments.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8755.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n   2.  The Commercial\
    \ National Security Algorithm Suite\n   3.  Requirements and Assumptions\n   4.\
    \  SHA-384 Message Digest Algorithm\n   5.  Digital Signature\n     5.1.  ECDSA\
    \ Signature\n     5.2.  RSA Signature\n   6.  Key Establishment\n     6.1.  Elliptic\
    \ Curve Key Agreement\n     6.2.  RSA Key Transport\n   7.  Content Encryption\n\
    \     7.1.  AES-GCM Content Encryption\n     7.2.  AES-CBC Content Encryption\n\
    \   8.  Security Considerations\n   9.  IANA Considerations\n   10. References\n\
    \     10.1.  Normative References\n     10.2.  Informative References\n   Author's\
    \ Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the conventions for using the United\
    \ States\n   National Security Agency's Commercial National Security Algorithm\n\
    \   (CNSA) Suite algorithms [CNSA] in Secure/Multipurpose Internet Mail\n   Extensions\
    \ (S/MIME) [RFC8551].  It applies to the capabilities,\n   configuration, and\
    \ operation of all components of US National\n   Security Systems that employ\
    \ S/MIME messaging.  US National Security\n   Systems are described in NIST Special\
    \ Publication 800-59 [SP80059].\n   It is also appropriate for all other US Government\
    \ systems that\n   process high-value information.  It is made publicly available\
    \ for\n   use by developers and operators of these and any other system\n   deployments.\n\
    \   S/MIME makes use of the Cryptographic Message Syntax (CMS) [RFC5652]\n   [RFC5083].\
    \  In particular, the signed-data, enveloped-data, and\n   authenticated-enveloped-data\
    \ content types are used.  This document\n   only addresses CNSA Suite compliance\
    \ for S/MIME.  Other applications\n   of CMS are outside the scope of this document.\n\
    \   This document does not define any new cryptographic algorithm suites;\n  \
    \ instead, it defines a CNSA-compliant profile of S/MIME.  Since many\n   of the\
    \ CNSA Suite algorithms enjoy uses in other environments as\n   well, the majority\
    \ of the conventions needed for these algorithms are\n   already specified in\
    \ other documents.  This document references the\n   source of these conventions,\
    \ with some relevant details repeated to\n   aid developers that choose to support\
    \ the CNSA Suite.  Where details\n   have been repeated, the cited documents are\
    \ authoritative.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  The Commercial National Security Algorithm Suite
  contents:
  - "2.  The Commercial National Security Algorithm Suite\n   The National Security\
    \ Agency (NSA) profiles commercial cryptographic\n   algorithms and protocols\
    \ as part of its mission to support secure,\n   interoperable communications for\
    \ US Government National Security\n   Systems.  To this end, it publishes guidance\
    \ both to assist with the\n   US Government transition to new algorithms and to\
    \ provide vendors --\n   and the Internet community in general -- with information\
    \ concerning\n   their proper use and configuration.\n   Recently, cryptographic\
    \ transition plans have become overshadowed by\n   the prospect of the development\
    \ of a cryptographically relevant\n   quantum computer.  The NSA has established\
    \ the Commercial National\n   Security Algorithm (CNSA) Suite to provide vendors\
    \ and IT users near-\n   term flexibility in meeting their cybersecurity interoperability\n\
    \   requirements.  The purpose behind this flexibility is to avoid having\n  \
    \ vendors and customers make two major transitions in a relatively\n   short timeframe,\
    \ as we anticipate a need to shift to quantum-\n   resistant cryptography in the\
    \ near future.\n   The NSA is authoring a set of RFCs, including this one, to\
    \ provide\n   updated guidance concerning the use of certain commonly available\n\
    \   commercial algorithms in IETF protocols.  These RFCs can be used in\n   conjunction\
    \ with other RFCs and cryptographic guidance (e.g., NIST\n   Special Publications)\
    \ to properly protect Internet traffic and data-\n   at-rest for US Government\
    \ National Security Systems.\n"
- title: 3.  Requirements and Assumptions
  contents:
  - "3.  Requirements and Assumptions\n   CMS values are generated using ASN.1 [X208],\
    \ the Basic Encoding Rules\n   (BER) [X209], and the Distinguished Encoding Rules\
    \ (DER) [X509].\n   The elliptic curve used in the CNSA Suite is specified in\
    \ [FIPS186]\n   and appears in the literature under two different names.  For\
    \ the\n   sake of clarity, we list both names below:\n   | Curve    | NIST Name\
    \ | SECG Name | OID [FIPS186] |\n   | nistp384 | P-384     | secp384r1 | 1.3.132.0.34\
    \  |\n                         Table 1\n   For CNSA Suite applications, public\
    \ key certificates used to verify\n   S/MIME signatures MUST be compliant with\
    \ the CNSA Suite Certificate\n   and Certificate Revocation List (CRL) profile\
    \ specified in [RFC8603].\n   Within the CMS signed-data content type, signature\
    \ algorithm\n   identifiers are located in the signatureAlgorithm field of SignerInfo\n\
    \   structures contained within the SignedData.  In addition, signature\n   algorithm\
    \ identifiers are located in the SignerInfo\n   signatureAlgorithm field of countersignature\
    \ attributes.  Specific\n   requirements for digital signatures are given in Section\
    \ 5; compliant\n   implementations MUST consider signatures not meeting these\n\
    \   requirements as invalid.\n   Implementations based on Elliptic Curve Cryptography\
    \ (ECC) also\n   require specification of schemes for key derivation and key wrap.\n\
    \   Requirements for these schemes are in Sections 6.1.1 and 6.1.2,\n   respectively.\n\
    \   RSA key pairs (public, private) are identified by the modulus size\n   expressed\
    \ in bits; RSA-3072 and RSA-4096 are computed using moduli of\n   3072 bits and\
    \ 4096 bits, respectively.\n   RSA signature key pairs used in CNSA Suite-compliant\
    \ implementations\n   are either RSA-3072 or RSA-4096.  The RSA exponent e MUST\
    \ satisfy\n   2^(16) < e < 2^(256) and be odd per [FIPS186].\n   It is recognized\
    \ that, while the vast majority of RSA signatures are\n   currently made using\
    \ the RSASSA-PKCS1-v1_5 algorithm, the preferred\n   RSA signature scheme for\
    \ new applications is RSASSA-PSS.  CNSA Suite-\n   compliant X.509 certificates\
    \ will be issued in accordance with\n   [RFC8603], and while those certificates\
    \ must be signed and validated\n   using RSASSA-PKCS1-v1_5, the subject's RSA\
    \ key pair can be used to\n   generate and validate signatures appropriate for\
    \ either signing\n   scheme.  Where use of RSASSA-PSS is indicated in this document,\
    \ the\n   parameters in Section 5.2.2 apply.\n   This document assumes that the\
    \ required trust anchors have been\n   securely provisioned to the client.\n \
    \  All implementations use SHA-384 for hashing and either AES-CBC or\n   AES-GCM\
    \ for encryption, the requirements for which are given in\n   Section 4 and Section\
    \ 7, respectively.\n"
- title: 4.  SHA-384 Message Digest Algorithm
  contents:
  - "4.  SHA-384 Message Digest Algorithm\n   SHA-384 is the sole CNSA Suite message\
    \ digest algorithm.  [RFC5754]\n   specifies the conventions for using SHA-384\
    \ with the Cryptographic\n   Message Syntax (CMS).  CNSA Suite-compliant S/MIME\
    \ implementations\n   MUST follow the conventions in [RFC5754].\n   Within the\
    \ CMS signed-data content type, message digest algorithm\n   identifiers are located\
    \ in the SignedData digestAlgorithms field and\n   the SignerInfo digestAlgorithm\
    \ field.\n   The SHA-384 message digest algorithm is defined in FIPS Pub 180\n\
    \   [FIPS180].  The algorithm identifier for SHA-384 is defined in\n   [RFC5754]\
    \ as follows:\n         id-sha384  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n\
    \             country(16) us(840) organization(1) gov(101) csor(3)\n         \
    \    nistalgorithm(4) hashalgs(2) 2 }\n   For SHA-384, the AlgorithmIdentifier\
    \ parameters field is OPTIONAL,\n   and if present, the parameters field MUST\
    \ contain a NULL.  As\n   specified in [RFC5754], implementations MUST generate\
    \ SHA-384\n   AlgorithmIdentifiers with absent parameters.  Implementations MUST\n\
    \   accept SHA-384 AlgorithmIdentifiers with absent parameters or with\n   NULL\
    \ parameters.\n"
- title: 5.  Digital Signature
  contents:
  - '5.  Digital Signature

    '
- title: 5.1.  ECDSA Signature
  contents:
  - "5.1.  ECDSA Signature\n   The Elliptic Curve Digital Signature Algorithm (ECDSA)\
    \ is the CNSA\n   Suite digital signature algorithm based on ECC.  [RFC5753] specifies\n\
    \   the conventions for using ECDSA with the Cryptographic Message Syntax\n  \
    \ (CMS).  CNSA Suite-compliant S/MIME implementations MUST follow the\n   conventions\
    \ in [RFC5753].\n   [RFC5480] defines the signature algorithm identifier used\
    \ in CMS for\n   ECDSA with SHA-384 as follows:\n         ecdsa-with-SHA384  OBJECT\
    \ IDENTIFIER  ::=  { iso(1)\n            member-body(2) us(840) ansi-X9-62(10045)\
    \ signatures(4)\n            ecdsa-with-sha2(3) 3 }\n   When the ecdsa-with-SHA384\
    \ algorithm identifier is used, the\n   AlgorithmIdentifier parameters field MUST\
    \ be absent.\n   When signing, the ECDSA algorithm generates two values, commonly\n\
    \   called r and s.  These two values MUST be encoded using the ECDSA-\n   Sig-Value\
    \ type specified in [RFC5480]:\n         ECDSA-Sig-Value  ::=  SEQUENCE {\n  \
    \          r  INTEGER,\n            s  INTEGER }\n"
- title: 5.2.  RSA Signature
  contents:
  - "5.2.  RSA Signature\n   The RSA signature generation process and the encoding\
    \ of the result\n   is either RSASSA-PKCS1-v1_5 or RSA-PSS, as described in detail\
    \ in\n   PKCS #1 version 2.2 [RFC8017].\n"
- title: 5.2.1.  RSA-PKCS1-v1_5
  contents:
  - "5.2.1.  RSA-PKCS1-v1_5\n   [RFC5754] defines the signature algorithm identifier\
    \ used in CMS for\n   an RSA signature with SHA-384 as follows:\n         sha384WithRSAEncryption\
    \  OBJECT IDENTIFIER  ::= { iso(1)\n           member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-1(1) 12 }\n   When the sha384WithRSAEncryption algorithm identifier\
    \ is used, the\n   parameters MUST be NULL.  Implementations MUST accept the parameters\n\
    \   being absent as well as present.\n"
- title: 5.2.2.  RSA-PSS
  contents:
  - "5.2.2.  RSA-PSS\n   [RFC4056] defines the signature algorithm identifier used\
    \ in CMS for\n   an RSA-PSS signature as follows (presented here in expanded form):\n\
    \         RSASSA-PSS  OBJECT IDENTIFIER  ::= { iso(1)\n           member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 10 }\n   The parameters field of an\
    \ AlgorithmIdentifier that identifies\n   RSASSA-PSS is defined in [RFC4055] as\
    \ follows:\n          RSASSA-PSS-params  ::=  SEQUENCE  {\n             hashAlgorithm\
    \      [0] HashAlgorithm DEFAULT\n             maskGenAlgorithm   [1] MaskGenAlgorithm\
    \ DEFAULT\n             saltLength         [2] INTEGER DEFAULT 20,\n         \
    \    trailerField       [3] INTEGER DEFAULT 1  }\n   The AlgorithmIdentifier parameters\
    \ field MUST contain RSASSA-PSS-\n   params with the following values:\n   * \
    \ The hash algorithm MUST be id-sha384 as defined in [RFC8017];\n   *  The mask\
    \ generation function MUST use the algorithm identifier\n      mfg1SHA384Identifier\
    \ as defined in [RFC4055];\n   *  The salt length MUST be 48 octets (the same\
    \ length as the SHA-384\n      output); and\n   *  The trailerField MUST have\
    \ value 1.\n"
- title: 6.  Key Establishment
  contents:
  - '6.  Key Establishment

    '
- title: 6.1.  Elliptic Curve Key Agreement
  contents:
  - "6.1.  Elliptic Curve Key Agreement\n   Elliptic Curve Diffie-Hellman (ECDH) is\
    \ the CNSA Suite key agreement\n   algorithm.  Since S/MIME is used in store-and-forward\
    \ communications,\n   ephemeral-static ECDH is always employed.  This means that\
    \ the\n   message originator possesses an ephemeral ECDH key pair and that the\n\
    \   message recipient possesses a static ECDH key pair whose public key\n   is\
    \ provided in an X.509 certificate.  The certificate used to obtain\n   the recipient's\
    \ public key MUST be compliant with [RFC8603].\n   When a key agreement algorithm\
    \ is used, the following steps are\n   performed:\n   1.  A content-encryption\
    \ key (CEK) for a particular content-\n       encryption algorithm is generated\
    \ at random.\n   2.  The recipient's public key and sender's private key are used\
    \ with\n       a key agreement scheme to generate a shared secret (Z).\n   3.\
    \  The shared secret is used with a key derivation function (KDF) to\n       produce\
    \ a key-encryption key (KEK).\n   4.  The KEK is used with a key wrap algorithm\
    \ to encrypt the CEK.\n   Key derivation is discussed in Section 6.1.1.  Key wrapping\
    \ is\n   discussed in Section 6.1.2.\n   Section 3.1 of [RFC5753] specifies the\
    \ conventions for using ECDH\n   with the CMS.  CNSA Suite-compliant S/MIME implementations\
    \ MUST\n   follow these conventions.\n   Within the CMS enveloped-data and authenticated-enveloped-data\n\
    \   content types, key agreement algorithm identifiers are located in the\n  \
    \ EnvelopedData RecipientInfos KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm\
    \ field.\n   The keyEncryptionAlgorithm field comprises two fields, an algorithm\n\
    \   field and a parameter field.  The algorithm field MUST identify\n   dhSinglePass-stdDH-sha384kdf-scheme.\
    \  The algorithm identifier for\n   the dhSinglePass-stdDH-sha384kdf-scheme, repeated\
    \ from Section 7.1.4\n   of [RFC5753], is (presented here in expanded form):\n\
    \         dhSinglePass-stdDH-sha384kdf-scheme  OBJECT IDENTIFIER  ::=\n      \
    \       { iso(1) identified-organization(3) certicom(132)\n               schemes(1)\
    \ 11 2 }\n   The keyEncryptionAlgorithm parameter field MUST be constructed as\n\
    \   described in Section 6.1.2.\n"
- title: 6.1.1.  Key Derivation Functions
  contents:
  - "6.1.1.  Key Derivation Functions\n   KDFs based on SHA-384 are used to derive\
    \ a pairwise key-encryption\n   key from the shared secret produced by ephemeral-static\
    \ ECDH.\n   Sections 7.1.8 and 7.2 in [RFC5753] specify the CMS conventions for\n\
    \   using a KDF with the shared secret generated during ephemeral-static\n   ECDH.\
    \  CNSA Suite-compliant S/MIME implementations MUST follow these\n   conventions.\n\
    \   As specified in Section 7.1.8 of [RFC5753], the ANSI-X9.63-KDF\n   described\
    \ in Section 3.6.1 of [SEC1] and based on SHA-384 MUST be\n   used.\n   As specified\
    \ in Section 7.2 of [RFC5753], when using ECDH with the\n   CMS enveloped-data\
    \ or authenticated-enveloped-data content type, the\n   derivation of key-encryption\
    \ keys makes use of the ECC-CMS-SharedInfo\n   type:\n         ECC-CMS-SharedInfo\
    \  ::=  SEQUENCE {\n            keyInfo      AlgorithmIdentifier,\n          \
    \  entityUInfo  [0] EXPLICIT OCTET STRING OPTIONAL,\n            suppPubInfo \
    \ [2] EXPLICIT OCTET STRING }\n   In the CNSA Suite for S/MIME, the fields of\
    \ ECC-CMS-SharedInfo are\n   used as follows:\n   *  keyInfo contains the object\
    \ identifier of the key-encryption\n      algorithm used to wrap the content-encryption\
    \ key.  If AES-256 Key\n      Wrap is used, then the keyInfo will contain id-aes256-wrap-pad,\n\
    \      and the parameters will be absent.\n   *  entityUInfo optionally contains\
    \ a random value provided by the\n      message originator.  If user keying material\
    \ (ukm) is included in\n      the KeyAgreeRecipientInfo, then the entityUInfo\
    \ MUST be present,\n      and it MUST contain the ukm value.  If the ukm is not\
    \ present,\n      then the entityUInfo MUST be absent.\n   *  suppPubInfo contains\
    \ the length of the generated key-encryption\n      key in bits, represented as\
    \ a 32-bit unsigned number, as described\n      in [RFC2631].  When a 256-bit\
    \ AES key is used, the length MUST be\n      0x00000100.\n   ECC-CMS-SharedInfo\
    \ is DER encoded and is used as input to the key\n   derivation function, as specified\
    \ in Section 3.6.1 of [SEC1].  Note\n   that ECC-CMS-SharedInfo differs from the\
    \ OtherInfo specified in\n   [RFC2631].  Here, a counter value is not included\
    \ in the keyInfo\n   field because the KDF specified in [SEC1] ensures that sufficient\n\
    \   keying data is provided.\n   The KDF specified in Section 3.6.1 of [SEC1]\
    \ describes how to\n   generate an essentially arbitrary amount of keying material\
    \ from a\n   shared secret, Z, produced by ephemeral-static ECDH.  To generate\
    \ an\n   L-bit key-encryption key (KEK), blocks of key material (KM) are\n   computed\
    \ by incrementing Counter appropriately until enough material\n   has been generated:\n\
    \         KM(Counter) = Hash ( Z || Counter || ECC-CMS-SharedInfo )\n   The KM\
    \ blocks are concatenated left to right as they are generated,\n   and the first\
    \ (leftmost) L bits are used as the KEK:\n         KEK = the leftmost L bits of\n\
    \                  [KM ( counter=1 ) || KM ( counter=2 ) ...]\n   In the CNSA\
    \ Suite for S/MIME, the elements of the KDF are defined as\n   follows:\n   *\
    \  Hash is a one-way hash function.  The SHA-384 hash MUST be used.\n   *  Z is\
    \ the shared secret value generated during ephemeral-static\n      ECDH.  Z MUST\
    \ be exactly 384 bits, i.e., leading zero bits MUST be\n      preserved.\n   *\
    \  Counter is a 32-bit unsigned number represented in network byte\n      order.\
    \  Its initial value MUST be 0x00000001 for any key\n      derivation operation.\n\
    \   *  ECC-CMS-SharedInfo is composed as described above.  It MUST be DER\n  \
    \    encoded.\n   In the CNSA Suite for S/MIME, exactly one iteration is needed;\
    \ the\n   Counter is not incremented.  The key-encryption key (KEK) MUST be the\n\
    \   first (leftmost) 256 bits of the SHA-384 output value:\n         KEK = the\
    \ leftmost 256 bits of\n                  SHA-384 ( Z || 0x00000001 || ECC-CMS-SharedInfo\
    \ )\n   Note that the only source of secret entropy in this computation is Z.\n"
- title: 6.1.2.  AES Key Wrap
  contents:
  - "6.1.2.  AES Key Wrap\n   The AES Key Wrap with Padding key-encryption algorithm,\
    \ as specified\n   in [RFC5649] and [SP80038F], is used to encrypt the content-\n\
    \   encryption key with a pairwise key-encryption key that is generated\n   using\
    \ ephemeral-static ECDH.  Section 8 of [RFC5753] specifies the\n   CMS conventions\
    \ for using AES Key Wrap with a pairwise key generated\n   through ephemeral-static\
    \ ECDH.  CNSA Suite-compliant S/MIME\n   implementations MUST follow these conventions.\n\
    \   Within the CMS enveloped-data content type, key wrap algorithm\n   identifiers\
    \ are located in the KeyWrapAlgorithm parameters within the\n   EnvelopedData\
    \ RecipientInfos KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm field.\n   The\
    \ KeyWrapAlgorithm MUST be id-aes256-wrap-pad.  The required\n   algorithm identifier,\
    \ specified in [RFC5649], is:\n         id-aes256-wrap-pad  OBJECT IDENTIFIER\
    \ ::=  { joint-iso-itu-t(2)\n            country(16) us(840) organization(1) gov(101)\
    \ csor(3)\n            nistAlgorithm(4) aes(1) 48 }\n"
- title: 6.2.  RSA Key Transport
  contents:
  - "6.2.  RSA Key Transport\n   RSA encryption (RSA) is the CNSA Suite key transport\
    \ algorithm.  The\n   RSA key transport algorithm is the RSA encryption scheme\
    \ defined in\n   [RFC8017], where the message to be encrypted is the content-\n\
    \   encryption key.\n   The recipient of an S/MIME message possesses an RSA key\
    \ pair whose\n   public key is represented by an X.509 certificate.  The certificate\n\
    \   used to obtain the recipient's public key MUST be compliant with\n   [RFC8603].\
    \  These certificates are suitable for use with either\n   RSAES-OAEP or RSAES-PKCS1-v1_5.\n"
- title: 6.2.1.  RSAES-PKCS1-v1_5
  contents:
  - "6.2.1.  RSAES-PKCS1-v1_5\n   Section 4.2 of [RFC3370] specifies the conventions\
    \ for using RSAES-\n   PKCS1-v1_5 with the CMS.  S/MIME implementations employing\
    \ this form\n   of key transport MUST follow these conventions.\n   Within the\
    \ CMS enveloped-data and authenticated-enveloped-data\n   content types, key transport\
    \ algorithm identifiers are located in the\n   EnvelopedData RecipientInfos KeyTransRecipientInfo\n\
    \   keyEncryptionAlgorithm field.\n   The algorithm identifier for RSA (PKCS #1\
    \ v1.5) is:\n         rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \             us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }\n   The AlgorithmIdentifier\
    \ parameters field MUST be present, and the\n   parameters field MUST contain\
    \ NULL.\n"
- title: 6.2.2.  RSAES-OAEP
  contents:
  - "6.2.2.  RSAES-OAEP\n   [RFC3560] specifies the conventions for using RSAES-OAEP\
    \ with the\n   CMS.  CNSA Suite-compliant S/MIME implementations employing this\
    \ form\n   of key transport MUST follow these conventions.\n   Within the CMS\
    \ enveloped-data and authenticated-enveloped-data\n   content types, key transport\
    \ algorithm identifiers are located in the\n   EnvelopedData RecipientInfos KeyTransRecipientInfo\n\
    \   keyEncryptionAlgorithm field.\n   The algorithm identifier for RSA (OAEP)\
    \ is:\n         id-RSAES-OAEP  OBJECT IDENTIFIER  ::=  { iso(1) member-body(2)\n\
    \             us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 7 }\n   The parameters\
    \ field of an AlgorithmIdentifier that identifies RSAES-\n   OAEP is defined in\
    \ [RFC4055] as follows:\n          RSAES-OAEP-params  ::=  SEQUENCE  {\n     \
    \        hashFunc          [0] AlgorithmIdentifier DEFAULT\n             maskGenFunc\
    \       [1] AlgorithmIdentifier DEFAULT\n             pSourceFunc       [2] AlgorithmIdentifier\
    \ DEFAULT\n          pSpecifiedEmptyIdentifier  AlgorithmIdentifier  ::=\n   \
    \       nullOctetString  OCTET STRING (SIZE (0))  ::=  { ''H }\n   The AlgorithmIdentifier\
    \ parameters field MUST be present, and the\n   parameters field MUST contain\
    \ RSAES-OAEP-params with values as\n   follows:\n   *  The hashFunc algorithm\
    \ must be id-sha384 as defined in [RFC8017];\n   *  The mask generation function\
    \ must use the algorithm identifier\n      mfg1SHA384Identifier as defined in\
    \ [RFC4055];\n   *  The pSourceFunc field must be absent.\n   The SMIMECapabilities\
    \ signed attribute is used to specify a partial\n   list of algorithms that the\
    \ software announcing the SMIMECapabilities\n   can support.  If the SMIMECapabilities\
    \ signed attribute is included\n   to announce support for the RSAES-OAEP algorithm,\
    \ it MUST be\n   constructed as defined in Section 5 of [RFC3560], with the sequence\n\
    \   representing the rSAES-OAEP-SHA384-Identifier.\n"
- title: 7.  Content Encryption
  contents:
  - "7.  Content Encryption\n   AES-GCM is the preferred mode for CNSA Suite applications,\
    \ as\n   described in the Security Considerations (Section 8).  AES-CBC is\n \
    \  acceptable where AES-GCM is not yet available.\n"
- title: 7.1.  AES-GCM Content Encryption
  contents:
  - "7.1.  AES-GCM Content Encryption\n   CNSA Suite-compliant S/MIME implementations\
    \ using the authenticated-\n   enveloped-data content type [RFC5083] MUST use\
    \ AES [FIPS197] in\n   Galois Counter Mode (GCM) [SP80038D] as the content-authenticated\n\
    \   encryption algorithm and MUST follow the conventions for using AES-\n   GCM\
    \ with the CMS defined in [RFC5084].\n   Within the CMS authenticated-enveloped-data\
    \ content type, content-\n   authenticated encryption algorithm identifiers are\
    \ located in the\n   AuthEnvelopedData EncryptedContentInfo contentEncryptionAlgorithm\n\
    \   field.  The content-authenticated encryption algorithm is used to\n   encipher\
    \ the content located in the AuthEnvelopedData\n   EncryptedContentInfo encryptedContent\
    \ field.\n   The AES-GCM content-authenticated encryption algorithm is described\n\
    \   in [FIPS197] and [SP80038D].  The algorithm identifier for AES-256 in\n  \
    \ GCM mode is:\n            id-aes256-GCM  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n\
    \               country(16) us(840) organization(1) gov(101) csor(3)\n       \
    \        nistAlgorithm(4) aes(1) 46 }\n   The AlgorithmIdentifier parameters field\
    \ MUST be present, and the\n   parameters field must contain GCMParameters:\n\
    \         GCMParameters ::= SEQUENCE {\n           aes-nonce        OCTET STRING,\n\
    \           aes-ICVlen       AES-GCM-ICVlen DEFAULT 12 }\n   The authentication\
    \ tag length (aes-ICVlen) SHALL be 16 (indicating a\n   tag length of 128 bits).\n\
    \   The initialization vector (aes-nonce) MUST be generated in accordance\n  \
    \ with Section 8.2 of [SP80038D].  AES-GCM loses security\n   catastrophically\
    \ if a nonce is reused with a given key on more than\n   one distinct set of input\
    \ data.  Therefore, a fresh content-\n   authenticated encryption key MUST be\
    \ generated for each message.\n"
- title: 7.2.  AES-CBC Content Encryption
  contents:
  - "7.2.  AES-CBC Content Encryption\n   CNSA Suite-compliant S/MIME implementations\
    \ using the enveloped-data\n   content type MUST use AES-256 [FIPS197] in Cipher\
    \ Block Chaining\n   (CBC) mode [SP80038A] as the content-encryption algorithm\
    \ and MUST\n   follow the conventions for using AES with the CMS defined in\n\
    \   [RFC3565].\n   Within the CMS enveloped-data content type, content-encryption\n\
    \   algorithm identifiers are located in the EnvelopedData\n   EncryptedContentInfo\
    \ contentEncryptionAlgorithm field.  The content-\n   encryption algorithm is\
    \ used to encipher the content located in the\n   EnvelopedData EncryptedContentInfo\
    \ encryptedContent field.\n   The AES-CBC content-encryption algorithm is described\
    \ in [FIPS197]\n   and [SP80038A].  The algorithm identifier for AES-256 in CBC\
    \ mode is:\n         id-aes256-CBC  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n\
    \            country(16) us(840) organization(1) gov(101) csor(3)\n          \
    \  nistAlgorithm(4) aes(1) 42 }\n   The AlgorithmIdentifier parameters field MUST\
    \ be present, and the\n   parameters field must contain AES-IV:\n         AES-IV\
    \  ::=  OCTET STRING (SIZE(16))\n   The 16-octet initialization vector is generated\
    \ at random by the\n   originator.  See [RFC4086] for guidance on generation of\
    \ random\n   values.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document specifies the conventions for using\
    \ the NSA's CNSA\n   Suite algorithms in S/MIME.  All of the algorithms and algorithm\n\
    \   identifiers have been specified in previous documents.\n   See [RFC4086] for\
    \ guidance on generation of random values.\n   The security considerations in\
    \ [RFC5652] discuss the CMS as a method\n   for digitally signing data and encrypting\
    \ data.\n   The security considerations in [RFC3370] discuss cryptographic\n \
    \  algorithm implementation concerns in the context of the CMS.\n   The security\
    \ considerations in [RFC5753] discuss the use of elliptic\n   curve cryptography\
    \ (ECC) in the CMS.\n   The security considerations in [RFC3565] discuss the use\
    \ of AES in\n   the CMS.\n   The security considerations in [RFC8551] apply to\
    \ this profile,\n   particularly the recommendation to use authenticated encryption\
    \ modes\n   (i.e., use authenticated-enveloped-data with AES-GCM rather than\n\
    \   enveloped-data with AES-CBC).\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [CNSA]     Committee for National Security Systems,\
    \ \"Use of Public\n              Standards for Secure Information Sharing\", CNSS\
    \ Policy 15,\n              October 2016,\n              <https://www.cnss.gov/CNSS/Issuances/Policies.cfm>.\n\
    \   [FIPS180]  National Institute of Standards and Technology, \"Secure\n    \
    \          Hash Standard (SHS)\", Federal Information Processing\n           \
    \   Standard 180-4, August 2015,\n              <https://csrc.nist.gov/publications/detail/fips/180/4/\n\
    \              final>.\n   [FIPS186]  National Institute of Standards and Technology,\
    \ \"Digital\n              Signature Standard (DSS)\", DOI 10.6028/NIST.FIPS.186-4,\n\
    \              FIPS PUB 186-4, July 2013,\n              <https://csrc.nist.gov/publications/detail/fips/186/4/\n\
    \              final>.\n   [FIPS197]  National Institute of Standards and Technology,\
    \ \"Advanced\n              Encryption Standard (AES)\", DOI 10.6028/NIST.FIPS.197,\n\
    \              FIPS PUB 197, November 2001,\n              <https://csrc.nist.gov/publications/detail/fips/197/\n\
    \              final>.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2631]  Rescorla, E., \"Diffie-Hellman Key Agreement Method\",\n      \
    \        RFC 2631, DOI 10.17487/RFC2631, June 1999,\n              <https://www.rfc-editor.org/info/rfc2631>.\n\
    \   [RFC3370]  Housley, R., \"Cryptographic Message Syntax (CMS)\n           \
    \   Algorithms\", RFC 3370, DOI 10.17487/RFC3370, August 2002,\n             \
    \ <https://www.rfc-editor.org/info/rfc3370>.\n   [RFC3560]  Housley, R., \"Use\
    \ of the RSAES-OAEP Key Transport\n              Algorithm in Cryptographic Message\
    \ Syntax (CMS)\",\n              RFC 3560, DOI 10.17487/RFC3560, July 2003,\n\
    \              <https://www.rfc-editor.org/info/rfc3560>.\n   [RFC3565]  Schaad,\
    \ J., \"Use of the Advanced Encryption Standard (AES)\n              Encryption\
    \ Algorithm in Cryptographic Message Syntax\n              (CMS)\", RFC 3565,\
    \ DOI 10.17487/RFC3565, July 2003,\n              <https://www.rfc-editor.org/info/rfc3565>.\n\
    \   [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, \"Additional\n       \
    \       Algorithms and Identifiers for RSA Cryptography for use in\n         \
    \     the Internet X.509 Public Key Infrastructure Certificate\n             \
    \ and Certificate Revocation List (CRL) Profile\", RFC 4055,\n              DOI\
    \ 10.17487/RFC4055, June 2005,\n              <https://www.rfc-editor.org/info/rfc4055>.\n\
    \   [RFC4056]  Schaad, J., \"Use of the RSASSA-PSS Signature Algorithm in\n  \
    \            Cryptographic Message Syntax (CMS)\", RFC 4056,\n              DOI\
    \ 10.17487/RFC4056, June 2005,\n              <https://www.rfc-editor.org/info/rfc4056>.\n\
    \   [RFC5083]  Housley, R., \"Cryptographic Message Syntax (CMS)\n           \
    \   Authenticated-Enveloped-Data Content Type\", RFC 5083,\n              DOI\
    \ 10.17487/RFC5083, November 2007,\n              <https://www.rfc-editor.org/info/rfc5083>.\n\
    \   [RFC5084]  Housley, R., \"Using AES-CCM and AES-GCM Authenticated\n      \
    \        Encryption in the Cryptographic Message Syntax (CMS)\",\n           \
    \   RFC 5084, DOI 10.17487/RFC5084, November 2007,\n              <https://www.rfc-editor.org/info/rfc5084>.\n\
    \   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n   \
    \           \"Elliptic Curve Cryptography Subject Public Key\n              Information\"\
    , RFC 5480, DOI 10.17487/RFC5480, March 2009,\n              <https://www.rfc-editor.org/info/rfc5480>.\n\
    \   [RFC5649]  Housley, R. and M. Dworkin, \"Advanced Encryption Standard\n  \
    \            (AES) Key Wrap with Padding Algorithm\", RFC 5649,\n            \
    \  DOI 10.17487/RFC5649, September 2009,\n              <https://www.rfc-editor.org/info/rfc5649>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [RFC5753]  Turner, S. and D.\
    \ Brown, \"Use of Elliptic Curve\n              Cryptography (ECC) Algorithms\
    \ in Cryptographic Message\n              Syntax (CMS)\", RFC 5753, DOI 10.17487/RFC5753,\
    \ January\n              2010, <https://www.rfc-editor.org/info/rfc5753>.\n  \
    \ [RFC5754]  Turner, S., \"Using SHA2 Algorithms with Cryptographic\n        \
    \      Message Syntax\", RFC 5754, DOI 10.17487/RFC5754, January\n           \
    \   2010, <https://www.rfc-editor.org/info/rfc5754>.\n   [RFC8017]  Moriarty,\
    \ K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,\n              \"PKCS #1: RSA\
    \ Cryptography Specifications Version 2.2\",\n              RFC 8017, DOI 10.17487/RFC8017,\
    \ November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n \
    \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n      \
    \        2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n         \
    \     May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8551]  Schaad,\
    \ J., Ramsdell, B., and S. Turner, \"Secure/\n              Multipurpose Internet\
    \ Mail Extensions (S/MIME) Version 4.0\n              Message Specification\"\
    , RFC 8551, DOI 10.17487/RFC8551,\n              April 2019, <https://www.rfc-editor.org/info/rfc8551>.\n\
    \   [RFC8603]  Jenkins, M. and L. Zieglar, \"Commercial National Security\n  \
    \            Algorithm (CNSA) Suite Certificate and Certificate\n            \
    \  Revocation List (CRL) Profile\", RFC 8603,\n              DOI 10.17487/RFC8603,\
    \ May 2019,\n              <https://www.rfc-editor.org/info/rfc8603>.\n   [SEC1]\
    \     Standards for Efficient Cryptography Group, \"SEC1:\n              Elliptic\
    \ Curve Cryptography\", May 2009,\n              <https://www.secg.org/sec1-v2.pdf>.\n\
    \   [SP80038A] Dworkin, M., \"Recommendation for Block Cipher Modes of\n     \
    \         Operation: Methods and Techniques\",\n              DOI 10.6028/NIST.SP.800-38A,\
    \ Special Publication 800-38A,\n              December 2001, <https://csrc.nist.gov/publications/detail/\n\
    \              sp/800-38a/final>.\n   [SP80038D] Dworkin, M., \"Recommendation\
    \ for Block Cipher Modes of\n              Operation: Galois/Counter Mode (GCM)\
    \ and GMAC\",\n              DOI 10.6028/NIST.SP.800-38D, Special Publication\
    \ 800-38D,\n              November 2007, <https://csrc.nist.gov/publications/detail/\n\
    \              sp/800-38d/final>.\n   [SP80038F] Dworkin, M., \"Recommendation\
    \ for Block Cipher Modes of\n              Operation: Methods for Key Wrapping\"\
    ,\n              DOI 10.6028/NIST.SP.800-38F, Special Publication 800-38F,\n \
    \             December 2012, <https://csrc.nist.gov/publications/detail/\n   \
    \           sp/800-38f/final>.\n   [X208]     CCITT, \"Specification of Abstract\
    \ Syntax Notation One\n              (ASN.1)\", CCITT Recommendation X.208, 1988,\n\
    \              <https://www.itu.int/rec/T-REC-X.208-198811-W/en>.\n   [X209] \
    \    CCITT, \"Specification of Basic Encoding Rules for Abstract\n           \
    \   Syntax Notation One (ASN.1)\", CCITT Recommendation X.209,\n             \
    \ 1988, <https://www.itu.int/rec/T-REC-X.209-198811-W/en>.\n   [X509]     CCITT,\
    \ \"The Directory - Authentication Framework\", CCITT\n              Recommendation\
    \ X.509, 1988,\n              <https://www.itu.int/rec/T-REC-X.509-198811-S>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC4086]  Eastlake 3rd, D., Schiller, J.,\
    \ and S. Crocker,\n              \"Randomness Requirements for Security\", BCP\
    \ 106, RFC 4086,\n              DOI 10.17487/RFC4086, June 2005,\n           \
    \   <https://www.rfc-editor.org/info/rfc4086>.\n   [SP80059]  Barker, W., \"Guideline\
    \ for Identifying an Information\n              System as a National Security\
    \ System\",\n              DOI 10.6028/NIST.SP.800-59, Special Publication 800-59,\n\
    \              August 2003, <https://csrc.nist.gov/publications/detail/\n    \
    \          sp/800-59/final>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael Jenkins\n"
