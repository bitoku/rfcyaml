- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                          E. Wilde
  contents:
  - "Independent Submission                                          E. Wilde\n  \
    \               A Media Type for XML Patch Operations\n"
- title: Abstract
  contents:
  - "Abstract\n   The XML patch document format defines an XML document structure\
    \ for\n   expressing a sequence of patch operations to be applied to an XML\n\
    \   document.  The XML patch document format builds on the foundations\n   defined\
    \ in RFC 5261.  This specification also provides the media type\n   registration\
    \ \"application/xml-patch+xml\", to allow the use of XML\n   patch documents in,\
    \ for example, HTTP conversations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7351.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Patch Documents . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n     2.1.  Patch Document Format . . . . . . . . . . . . . . .\
    \ . . .   3\n     2.2.  Patch Examples  . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   3.  IANA Considerations . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   4.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \   7\n   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   7\n\
    \     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   7\n  \
    \   6.2.  Informative References  . . . . . . . . . . . . . . . . .   7\n   Appendix\
    \ A.  Implementation Hints . . . . . . . . . . . . . . . .   9\n     A.1.  Matching\
    \ Namespaces . . . . . . . . . . . . . . . . . . .   9\n     A.2.  Patching Namespaces\
    \ . . . . . . . . . . . . . . . . . . .  10\n   Appendix B.  ABNF for RFC 5261\
    \  . . . . . . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Extensible Markup Language (XML) [RFC7303] is a common\
    \ format for\n   the exchange and storage of structured data.  HTTP PATCH [RFC5789]\n\
    \   extends HTTP [RFC7231] with a method to perform partial modifications\n  \
    \ to resources.  HTTP PATCH requires that patch documents be sent along\n   with\
    \ the request, and it is therefore useful for there to be\n   standardized patch\
    \ document formats (identified by media types) for\n   popular media types.\n\
    \   The XML patch media type \"application/xml-patch+xml\" is an XML\n   document\
    \ structure for expressing a sequence of operations to apply\n   to a target XML\
    \ document, suitable for use with the HTTP PATCH\n   method.  Servers can freely\
    \ choose which patch formats they want to\n   accept, and \"application/xml-patch+xml\"\
    \ could be a simple default\n   format that can be used unless a server decides\
    \ to use a different\n   (maybe more sophisticated) patch format for XML.\n  \
    \ The format for patch documents is based on the XML patch framework\n   defined\
    \ in RFC 5261 [RFC5261].  While RFC 5261 does define a concrete\n   syntax as\
    \ well as the media type \"application/patch-ops-error+xml\"\n   for error documents,\
    \ it only defines XML Schema (XSD)\n   [W3C.REC-xmlschema-1-20041028] types for\
    \ patch operations.  The\n   concrete document format and the media type for patch\
    \ operations are\n   defined in an XSD defined in this specification.\n   This\
    \ specification relies on RFC 5261 but also requires that errata\n   reported\
    \ to date are taken into account.  The main reason for the\n   errata is the problematic\
    \ ways in which RFC 5261 relies on XML Path\n   Language (XPath) as the expression\
    \ language for selecting the\n   location of a patch, while at the same time XPath's\
    \ data model does\n   not contain sufficient information to determine whether\
    \ such a\n   selector indeed can be used for a patch operation or should result\
    \ in\n   an error.  Specifically, the problem occurs with namespaces, where\n\
    \   XPath does not expose namespace declaration attributes, while the\n   patch\
    \ model needs them to determine whether or not a namespace patch\n   is allowed.\
    \  Appendix A contains more information about the general\n   problem and errata\
    \ reports.\n"
- title: 2.  Patch Documents
  contents:
  - "2.  Patch Documents\n   The following sections describe and illustrate the XML\
    \ patch document\n   format.\n"
- title: 2.1.  Patch Document Format
  contents:
  - "2.1.  Patch Document Format\n   The XML patch document format is based on a simple\
    \ schema that uses a\n   \"patch\" element as the document element and allows\
    \ an arbitrary\n   sequence of \"add\", \"remove\", and \"replace\" elements as\
    \ the children\n   of the document element.  These children follow the semantics\
    \ defined\n   in RFC 5261, which means that each element is treated as an\n  \
    \ individual patch operation, and the result of each patch operation is\n   a\
    \ patched XML document that is the target XML document for the next\n   patch\
    \ operation.\n   The following simple example patch document contains a single\
    \ patch\n   operation.  This operation adds a new attribute called\n   \"new-attribute\"\
    \ to the document element of the target XML document.\n   An XML patch document\
    \ always uses a \"patch\" element in the\n   \"urn:ietf:rfc:7351\" namespace as\
    \ the document element that contains\n   zero or more patch operation elements,\
    \ which are also in the\n   \"urn:ietf:rfc:7351\" namespace.\n   <p:patch xmlns:p=\"\
    urn:ietf:rfc:7351\">\n       <p:add sel=\"*\" type=\"@new-attribute\">value</p:add>\n\
    \   </p:patch>\n   The following more complex example patch document uses the\
    \ example\n   from RFC 5261, Section A.18 (but changing the example namespaces\
    \ to\n   example.com URIs); it uses the same \"patch\" element and XML namespace\n\
    \   as shown in the simpler example.  It shows the general structure of\n   an\
    \ XML patch document with multiple operations, as well as an example\n   of each\
    \ operation.\n   <p:patch xmlns=\"http://example.com/ns1\"\n            xmlns:y=\"\
    http://example.com/ns2\"\n            xmlns:p=\"urn:ietf:rfc:7351\">\n       <p:add\
    \ sel=\"doc/elem[@a='foo']\">\n           <!-- This is a new child -->\n     \
    \      <child id=\"ert4773\">\n               <y:node/>\n           </child>\n\
    \       </p:add>\n       <p:replace sel=\"doc/note/text()\">Patched doc</p:replace>\n\
    \       <p:remove sel=\"*/elem[@a='bar']/y:child\" ws=\"both\"/>\n       <p:add\
    \ sel=\"*/elem[@a='bar']\" type=\"@b\">new attr</p:add>\n   </p:patch>\n   As\
    \ this example demonstrates, both the document element \"patch\" and\n   the patch\
    \ operation elements are in the same XML namespace.  This is\n   the result of\
    \ RFC 5261 only defining types for the patch operation\n   elements, which then\
    \ can be reused in schemas to define concrete\n   patch elements.\n   RFC 5261\
    \ defines XSD [W3C.REC-xmlschema-1-20041028] for the patch\n   operation types.\
    \  The following schema for the XML patch media type\n   is based on the types\
    \ defined in RFC 5261, which are imported as\n   \"rfc5261.xsd\" in the following\
    \ schema.  The schema defines a \"patch\"\n   document element, and then allows\
    \ an unlimited (and possibly empty)\n   sequence of the \"add\", \"remove\", and\
    \ \"replace\" operation elements,\n   which are directly based on the respective\
    \ types from the schema\n   defined in RFC 5261.\n   <xs:schema targetNamespace=\"\
    urn:ietf:rfc:7351\"\n              xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    >\n       <xs:import schemaLocation=\"rfc5261.xsd\"/>\n       <xs:element name=\"\
    patch\">\n           <xs:complexType>\n               <xs:choice minOccurs=\"\
    0\" maxOccurs=\"unbounded\">\n                   <xs:element name=\"add\" type=\"\
    add\"/>\n                   <xs:element name=\"remove\" type=\"remove\"/>\n  \
    \                 <xs:element name=\"replace\" type=\"replace\"/>\n          \
    \     </xs:choice>\n           </xs:complexType>\n       </xs:element>\n   </xs:schema>\n"
- title: 2.2.  Patch Examples
  contents:
  - "2.2.  Patch Examples\n   Since the semantics of the XML patch operations are\
    \ defined by RFC\n   5261, please refer to the numerous examples in that specification\
    \ for\n   more XML patch document examples.  All the examples in RFC 5261 can\n\
    \   be taken as examples for the XML patch media type, when looking at\n   them\
    \ with two minor changes in mind.\n   The two differences are that XML patch documents\
    \ always use the\n   \"patch\" element as the document element and that both the\
    \ \"patch\"\n   element and the individual operation elements in XML patch documents\n\
    \   have to be in the XML namespace with the URI \"urn:ietf:rfc:7351\".\n   For\
    \ example, consider the patch example in RFC 5261, Appendix A.1,\n   \"Adding\
    \ an Element\".  In this example, the patch is applied to the\n   following XML\
    \ document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n       <note>This\
    \ is a sample document</note>\n   </doc>\n   The patch example is based on the\
    \ following patch document (with the\n   element and namespace changes described\
    \ above):\n"
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <p:patch xmlns:p="urn:ietf:rfc:7351">
  contents:
  - "<p:patch xmlns:p=\"urn:ietf:rfc:7351\">\n    <p:add sel=\"doc\"><foo id=\"ert4773\"\
    >This is a new child</foo></p:add>\n"
- title: </p:patch>
  contents:
  - "</p:patch>\n   Applying the patch results in the following XML document:\n  \
    \ <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n       <note>This is a\
    \ sample document</note>\n   <foo id=\"ert4773\">This is a new child</foo></doc>\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   The Internet media type [RFC6838] for an XML patch\
    \ document is\n   application/xml-patch+xml.\n      Type name: application\n \
    \     Subtype name: xml-patch+xml\n      Required parameters: none\n      Optional\
    \ parameters:\n         charset: Same as charset parameter for the media type\n\
    \         \"application/xml\" as specified in RFC 7303 [RFC7303].\n      Encoding\
    \ considerations: Same as encoding considerations of media\n      type \"application/xml\"\
    \ as specified in RFC 7303 [RFC7303].\n      Security considerations: This media\
    \ type has all of the security\n      considerations described in RFC 7303 [RFC7303],\
    \ RFC 5261\n      [RFC5261], and RFC 3470 [RFC3470], plus those listed in Section\
    \ 4.\n      Interoperability considerations: N/A\n      Published specification:\
    \ RFC 7351\n      Applications that use this media type: Applications that\n \
    \     manipulate XML documents.\n      Additional information:\n         Magic\
    \ number(s): N/A\n         File extension(s): XML documents often use \".xml\"\
    \ as the file\n         extension, and this media type does not propose a specific\n\
    \         extension other than this generic one.\n         Macintosh file type\
    \ code(s): TEXT\n      Person & email address to contact for further information:\
    \ Erik\n      Wilde <dret@berkeley.edu>\n      Intended usage: COMMON\n      Restrictions\
    \ on usage: none\n      Author: Erik Wilde <dret@berkeley.edu>\n      Change controller:\
    \ IETF\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The security considerations from RFC 5261 [RFC5261]\
    \ apply to the\n   application/xml-patch+xml media type.\n   In addition, parsing\
    \ XML may entail including information from\n   external sources through XML's\
    \ mechanism of external entities.\n   Implementations, therefore, should be aware\
    \ of the fact that standard\n   parsers may resolve external entities and thus\
    \ include external\n   information as a result of applying patch operations to\
    \ an XML\n   document.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   Thanks for comments and suggestions provided by Bas\
    \ de Bakker, Tony\n   Hansen, Bjoern Hoehrmann, and Julian Reschke.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC3470]  Hollenbeck, S., Rose, M., and L. Masinter,\
    \ \"Guidelines for\n              the Use of Extensible Markup Language (XML)\n\
    \              within IETF Protocols\", BCP 70, RFC 3470, January 2003.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5261]  Urpalainen, J., \"An\
    \ Extensible Markup Language (XML) Patch\n              Operations Framework Utilizing\
    \ XML Path Language (XPath)\n              Selectors\", RFC 5261, September 2008.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13, RFC\n            \
    \  6838, January 2013.\n   [RFC7303]  Thompson, H. and C. Lilley, \"XML Media\
    \ Types\", RFC 7303,\n              July 2014.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [Err3477]  RFC Errata, \"Errata ID 3477\", RFC\
    \ 5261.\n   [Err3478]  RFC Errata, \"Errata ID 3478\", RFC 5261.\n   [RFC5789]\
    \  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\", RFC\n              5789,\
    \ March 2010.\n   [RFC7231]  Fielding, R. and J. Reschke, \"Hypertext Transfer\
    \ Protocol\n              (HTTP/1.1): Semantics and Content\", RFC 7231, June\
    \ 2014.\n   [W3C.REC-DOM-Level-3-Core-20040407]\n              Robie, J., Wood,\
    \ L., Champion, M., Hegaret, P., Nicol, G.,\n              Le Hors, A., and S.\
    \ Byrne, \"Document Object Model (DOM)\n              Level 3 Core Specification\"\
    , World Wide Web Consortium\n              Recommendation REC-DOM-Level-3-Core-20040407,\
    \ April 2004,\n              <http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407>.\n\
    \   [W3C.REC-xml-20081126]\n              Sperberg-McQueen, C., Yergeau, F., Paoli,\
    \ J., Maler, E.,\n              and T. Bray, \"Extensible Markup Language (XML)\
    \ 1.0 (Fifth\n              Edition)\", World Wide Web Consortium Recommendation\
    \ REC-\n              xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n\
    \   [W3C.REC-xml-names-20091208]\n              Hollander, D., Layman, A., Bray,\
    \ T., Tobin, R., and H.\n              Thompson, \"Namespaces in XML 1.0 (Third\
    \ Edition)\", World\n              Wide Web Consortium Recommendation REC-xml-names-20091208,\n\
    \              December 2009,\n              <http://www.w3.org/TR/2009/REC-xml-names-20091208>.\n\
    \   [W3C.REC-xmlschema-1-20041028]\n              Thompson, H., Beech, D., Maloney,\
    \ M., and N. Mendelsohn,\n              \"XML Schema Part 1: Structures Second\
    \ Edition\", World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n\
    \              October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n\
    \   [W3C.REC-xpath-19991116]\n              DeRose, S. and J. Clark, \"XML Path\
    \ Language (XPath)\n              Version 1.0\", World Wide Web Consortium Recommendation\n\
    \              REC-xpath-19991116, November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n\
    \   [W3C.REC-xpath20-20101214]\n              Boag, S., Berglund, A., Kay, M.,\
    \ Simeon, J., Robie, J.,\n              Chamberlin, D., and M. Fernandez, \"XML\
    \ Path Language\n              (XPath) 2.0 (Second Edition)\", World Wide Web\
    \ Consortium\n              Recommendation REC-xpath20-20101214, December 2010,\n\
    \              <http://www.w3.org/TR/2010/REC-xpath20-20101214>.\n"
- title: Appendix A.  Implementation Hints
  contents:
  - "Appendix A.  Implementation Hints\n   This section is informative.  It describes\
    \ some issues that might be\n   interesting for implementers, but it might also\
    \ be interesting for\n   users of XML patch that want to understand some of the\
    \ differences\n   between standard XPath 1.0 processing and the processing model\
    \ of\n   selectors in RFC 5261.\n   Specifically, the issues described in the\
    \ following two sections have\n   been identified as technical issues with RFC\
    \ 5261 and have been filed\n   as errata.  Implementers interested in using XML\
    \ patch are encouraged\n   to take those errata into account when implementing\
    \ XML patch\n   documents.  The issue about \"Matching Namespaces\" described\
    \ in\n   Appendix A.1 has been filed as RFC Errata ID 3477 [Err3477].  The\n \
    \  issue about \"Patching Namespaces\" described in Appendix A.2 has been\n  \
    \ filed as RFC Errata ID 3478 [Err3478].\n"
- title: A.1.  Matching Namespaces
  contents:
  - "A.1.  Matching Namespaces\n   RFC 5261 defines standard rules for matching prefixed\
    \ names in\n   expressions: any prefixes are interpreted according to the namespace\n\
    \   bindings of the diff document (the document that the expression is\n   applied\
    \ against).  This means that each prefixed name can be\n   interpreted in the\
    \ context of the diff document.\n   For unprefixed names in expressions, the rules\
    \ depart from XPath 1.0\n   [W3C.REC-xpath-19991116].  XPath 1.0 defines that\
    \ unprefixed names in\n   expressions match namespace-less names (i.e., there\
    \ is no \"default\n   namespace\" for names used in XPath 1.0 expressions).  RFC\
    \ 5261\n   requires, however, that unprefixed names in expressions must use the\n\
    \   default namespace of the diff document (if there is one).  This means\n  \
    \ that it is not possible to simply take a selector from a patch\n   document\
    \ and evaluate it in the context of the diff document\n   according to the rules\
    \ of XPath 1.0 because this would interpret\n   unprefixed names incorrectly.\
    \  As a consequence, it is not possible\n   to simply take an XPath 1.0 processor\
    \ and evaluate XML patch\n   selectors in the context of the diff document.\n\
    \   As an extension of XPath 1.0's simple model, XPath 2.0\n   [W3C.REC-xpath20-20101214]\
    \ specifies different processing rules for\n   unprefixed names: they are matched\
    \ against the URI of the \"default\n   element/type namespace\", which is defined\
    \ as part of an expression's\n   static context.  In some XPath 2.0 applications,\
    \ this can be set; XSL\n   Transformations (XSLT) 2.0, for example, has the ability\
    \ to define an\n   \"xpath-default-namespace\", which then will be used to match\n\
    \   unprefixed names in expressions.  Thus, by using an XPath 2.0\n   implementation\
    \ that allows one to set this URI, and setting it to the\n   default namespace\
    \ of the diff document (or leaving it undefined if\n   there is no such default\
    \ namespace), it is possible to use an out-of-\n   the-box XPath 2.0 implementation\
    \ for evaluating XML patch selectors.\n   Please keep in mind, however, that evaluating\
    \ selectors is only one\n   part of applying patches.  When it comes to applying\
    \ the actual patch\n   operation, neither XPath 1.0 nor XPath 2.0 are sufficient\
    \ because\n   they do not preserve some of the information from the XML syntax\n\
    \   (specifically namespace declarations) that is required to correctly\n   apply\
    \ patch operations.  The following section describes this issue\n   in more detail.\n\
    \   Please note that [RFC5261], Section 4.2.2 on namespace matching\n   explains\
    \ XPath 2.0's rules incorrectly.  For this reason, RFC Errata\n   ID 3477 is available\
    \ for Section 4.2.2 of RFC 5261.\n"
- title: A.2.  Patching Namespaces
  contents:
  - "A.2.  Patching Namespaces\n   One of the issues when patching namespaces based\
    \ on XPath is that\n   XPath exposes namespaces differently than the XML 1.0\n\
    \   [W3C.REC-xml-20081126] syntax for XML namespaces\n   [W3C.REC-xml-names-20091208].\
    \  In the XML syntax, a namespace is\n   declared with an attribute using the\
    \ reserved name or prefix \"xmlns\",\n   and this results in this namespace being\
    \ available recursively\n   through the document tree.  In XPath, the namespace\
    \ declaration is\n   not exposed as an attribute (i.e., the attribute, although\n\
    \   syntactically an XML attribute, is not accessible in XPath), but the\n   resulting\
    \ namespace nodes are exposed recursively through the tree.\n   RFC 5261 uses\
    \ the terms \"namespace declaration\" and \"namespace\"\n   almost interchangeably,\
    \ but it is important to keep in mind that the\n   namespace declaration is an\
    \ XML syntax construct that is unavailable\n   in XPath, while the namespace itself\
    \ is a logical construct that is\n   not visible in the XML syntax, but a result\
    \ of a namespace\n   declaration.  The intent of RFC 5261 is to patch namespaces\
    \ as if\n   namespace declarations were patched; thus, it only allows patching\n\
    \   namespace nodes on the element nodes where the namespace has been\n   declared.\n\
    \   Patching namespaces in XML patch is supposed to \"emulate\" the effect\n \
    \  of actually changing the namespace declaration (which is why a\n   namespace\
    \ can only be patched at the element where it has been\n   declared).  Therefore,\
    \ when patching a namespace, even though XPath's\n   \"namespace\" axis is used,\
    \ implementations have to make sure that not\n   only the single selected namespace\
    \ node is being patched but that all\n   namespaces nodes resulting from the namespace\
    \ declaration of this\n   namespace are also patched accordingly.\n   This means\
    \ that an implementation might have to descend into the\n   tree, matching all\
    \ namespace nodes with the selected prefix/URI pair\n   recursively, until it\
    \ encounters leaf elements or namespace\n   declarations with the same prefix\
    \ it is patching.  Determining this\n   requires access to the diff document beyond\
    \ XPath, because, in XPath\n   itself, namespace declarations are not represented;\
    \ thus, such a\n   recursive algorithm wouldn't know when to stop.  Consider the\n\
    \   following document:\n   <x xmlns:a=\"tag:42\">\n       <y xmlns:a=\"tag:42\"\
    />\n   </x>\n   If this document is patched with a selector of /x/namespace::a,\
    \ then\n   only the namespace node on element x should be patched, even though\n\
    \   the namespace node on element y has the same prefix/URI combination\n   as\
    \ the one on element x.  However, determining that the repeated\n   namespace\
    \ declaration was present at all on element y is impossible\n   when using XPath\
    \ alone, which means that implementations must have an\n   alternative way to\
    \ determine the difference between the document\n   above, and this one:\n   <x\
    \ xmlns:a=\"tag:42\">\n       <y/>\n   </x>\n   In this second example, patching\
    \ with a selector of /x/namespace::a\n   should indeed change the namespace nodes\
    \ on elements x and y, because\n   they both have been derived from the same namespace\
    \ declaration.\n   The conclusion of these considerations is that for implementing\
    \ XML\n   patch, access closer to the XML syntax (specifically access to\n   namespace\
    \ declarations) is necessary.  As a result, implementations\n   attempting to\
    \ exclusively use the XPath model for implementing XML\n   patch will fail to\
    \ correctly address certain edge cases (such as the\n   one shown above).\n  \
    \ Note that XPath's specific limitations do not mean that it is\n   impossible\
    \ to use XML technologies other than XPath.  The Document\n   Object Model (DOM)\
    \ [W3C.REC-DOM-Level-3-Core-20040407], for example,\n   does expose namespace\
    \ declaration attributes as regular attributes in\n   the document tree; thus,\
    \ they could be used to differentiate between\n   the two variants shown above.\n\
    \   Please note that RFC 5261, Section 4.4.3 (on replacing namespaces)\n   mixes\
    \ the terms \"namespace declaration\" and \"namespace\".  For this\n   reason,\
    \ RFC Errata ID 3478 is available for Section 4.4.3 of RFC\n   5261.\n"
- title: Appendix B.  ABNF for RFC 5261
  contents:
  - "Appendix B.  ABNF for RFC 5261\n   RFC 5261 [RFC5261] does not contain an ABNF\
    \ grammar for the allowed\n   subset of XPath expressions but includes an XSD-based\
    \ grammar in its\n   type definition for operation types.  In order to make implementation\n\
    \   easier, this appendix contains an ABNF grammar that has been derived\n   from\
    \ the XSD expressions in RFC 5261.  In the following grammar,\n   \"xpath\" is\
    \ the definition for the allowed XPath expressions for\n   remove and replace\
    \ operations, and \"xpath-add\" is the definition for\n   the allowed XPath expressions\
    \ for add operations.  The names of all\n   grammar productions are the ones used\
    \ in the XSD-based grammar of RFC\n   5261.\n"
- title: anychar    =  %x00-ffffffff
  contents:
  - 'anychar    =  %x00-ffffffff

    '
- title: ncname     =  1*%x00-ffffffff
  contents:
  - 'ncname     =  1*%x00-ffffffff

    '
- title: qname      =  [ ncname ":" ] ncname
  contents:
  - 'qname      =  [ ncname ":" ] ncname

    '
- title: aname      =  "@" qname
  contents:
  - 'aname      =  "@" qname

    '
- title: pos        =  "[" 1*DIGIT "]"
  contents:
  - 'pos        =  "[" 1*DIGIT "]"

    '
- title: attr       =  ( "[" aname "='" 0*anychar "']" ) /
  contents:
  - "attr       =  ( \"[\" aname \"='\" 0*anychar \"']\" ) /\n              ( \"[\"\
    \ aname \"=\" DQUOTE 0*anychar DQUOTE \"]\" )\n"
- title: valueq     =  "[" ( qname / "." ) "=" DQUOTE 0*anychar DQUOTE "]"
  contents:
  - 'valueq     =  "[" ( qname / "." ) "=" DQUOTE 0*anychar DQUOTE "]"

    '
- title: value      =  ( "[" ( qname / "." ) "='" 0*anychar "']" ) / valueq
  contents:
  - 'value      =  ( "[" ( qname / "." ) "=''" 0*anychar "'']" ) / valueq

    '
- title: cond       =  attr / value / pos
  contents:
  - 'cond       =  attr / value / pos

    '
- title: step       =  ( qname / "*" ) 0*cond
  contents:
  - 'step       =  ( qname / "*" ) 0*cond

    '
- title: piq        =  %x70.72.6f.63.65.73.73.69.6e.67.2d
  contents:
  - "piq        =  %x70.72.6f.63.65.73.73.69.6e.67.2d\n              %x69.6e.73.74.72.75.63.74.69.6f.6e\n\
    \              ; \"processing-instruction\", case-sensitive\n              \"\
    (\" [ DQUOTE ncname DQUOTE ] \")\"\n"
- title: pi         =  ( %x70.72.6f.63.65.73.73.69.6e.67.2d
  contents:
  - "pi         =  ( %x70.72.6f.63.65.73.73.69.6e.67.2d\n              %x69.6e.73.74.72.75.63.74.69.6f.6e\n\
    \              ; \"processing-instruction\", case-sensitive\n              \"\
    (\" [ \"'\" ncname \"'\" ] \")\" ) / piq\n"
- title: id         =  ( %x69.64 ; "id", case-sensitive
  contents:
  - "id         =  ( %x69.64 ; \"id\", case-sensitive\n              \"(\" [ \"'\"\
    \ ncname \"'\" ] \")\" ) /\n              ( %x69.64 ; \"id\", case-sensitive\n\
    \              \"(\" [ DQUOTE ncname DQUOTE ] \")\" )\n"
- title: com        =  %x63.6f.6d.6d.65.6e.74 ; "comment", case-sensitive
  contents:
  - "com        =  %x63.6f.6d.6d.65.6e.74 ; \"comment\", case-sensitive\n        \
    \      \"()\"\n"
- title: text       =  %x74.65.78.74 ; "text", case-sensitive
  contents:
  - "text       =  %x74.65.78.74 ; \"text\", case-sensitive\n              \"()\"\n"
- title: nspa       =  %x6e.61.6d.65.73.70.61.63.65 ; "namespace", case-sensitive
  contents:
  - "nspa       =  %x6e.61.6d.65.73.70.61.63.65 ; \"namespace\", case-sensitive\n\
    \              \"::\" ncname\n"
- title: cnodes     =  ( text / com / pi ) [ pos ]
  contents:
  - 'cnodes     =  ( text / com / pi ) [ pos ]

    '
- title: child      =  cnodes / step
  contents:
  - 'child      =  cnodes / step

    '
- title: last       =  child / aname / nspa
  contents:
  - 'last       =  child / aname / nspa

    '
- title: xpath      =  [ "/" ] ( ( id [ 0*( "/" step ) "/" last ] ) /
  contents:
  - "xpath      =  [ \"/\" ] ( ( id [ 0*( \"/\" step ) \"/\" last ] ) /\n        \
    \      ( 0*( step \"/\" ) last ) )\n"
- title: xpath-add  =  [ "/" ] ( ( id [ 0*( "/" step ) "/" child ] ) /
  contents:
  - "xpath-add  =  [ \"/\" ] ( ( id [ 0*( \"/\" step ) \"/\" child ] ) /\n       \
    \       ( 0*( step \"/\" ) child ) )\n   Please note that the \"ncname\" production\
    \ listed above does not fully\n   capture the constraints of the original XSD-based\
    \ definition, where\n   it is defined as \"\\i\\c*\".  DIGIT and DQUOTE are defined\
    \ by the ABNF\n   specification [RFC5234].\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Erik Wilde\n   UC Berkeley\n   EMail: dret@berkeley.edu\n\
    \   URI:   http://dret.net/netdret/\n"
