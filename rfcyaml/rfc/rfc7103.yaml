- title: __initial_text__
  contents:
  - '             Advice for Safe Handling of Malformed Messages

    '
- title: Abstract
  contents:
  - "Abstract\n   Although Internet message formats have been precisely defined since\n\
    \   the 1970s, authoring and handling software often shows only mild\n   conformance\
    \ to the specifications.  The malformed messages that\n   result are non-standard.\
    \  Nonetheless, decades of experience have\n   shown that using some tolerance\
    \ in the handling of the malformations\n   that result is often an acceptable\
    \ approach and is better than\n   rejecting the messages outright as nonconformant.\
    \  This document\n   includes a collection of the best advice available regarding\
    \ a\n   variety of common malformed mail situations; it is to be used as\n   implementation\
    \ guidance.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7103.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  The Purpose of This Work  . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Not the Purpose of This Work  . . . . . . . . . . .\
    \ . . .   4\n     1.3.  General Considerations  . . . . . . . . . . . . . . .\
    \ . .   4\n   2.  Document Conventions  . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     2.1.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .\
    \   5\n   3.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n   4.  Invariant Content . . . . . . . . . . . . . . . . . . . . . .   5\n\
    \   5.  Mail Submission Agents  . . . . . . . . . . . . . . . . . . .   6\n  \
    \ 6.  Line Termination  . . . . . . . . . . . . . . . . . . . . . .   7\n   7.\
    \  Header Anomalies  . . . . . . . . . . . . . . . . . . . . . .   8\n     7.1.\
    \  Converting Obsolete and Invalid Syntaxes  . . . . . . . .   8\n       7.1.1.\
    \  Host-Address Syntax . . . . . . . . . . . . . . . . .   8\n       7.1.2.  Excessive\
    \ Angle Brackets  . . . . . . . . . . . . . .   8\n       7.1.3.  Unbalanced Angle\
    \ Brackets . . . . . . . . . . . . . .   8\n       7.1.4.  Unbalanced Parentheses\
    \  . . . . . . . . . . . . . . .   9\n       7.1.5.  Commas in Address Lists .\
    \ . . . . . . . . . . . . . .   9\n       7.1.6.  Unbalanced Quotes . . . . .\
    \ . . . . . . . . . . . . .  10\n       7.1.7.  Naked Local-Parts . . . . . .\
    \ . . . . . . . . . . . .  10\n     7.2.  Non-Header Lines  . . . . . . . . .\
    \ . . . . . . . . . . .  10\n     7.3.  Unusual Spacing . . . . . . . . . . .\
    \ . . . . . . . . . .  12\n     7.4.  Header Malformations  . . . . . . . . .\
    \ . . . . . . . . .  13\n     7.5.  Header Field Counts . . . . . . . . . . .\
    \ . . . . . . . .  13\n       7.5.1.  Repeated Header Fields  . . . . . . . .\
    \ . . . . . . .  14\n       7.5.2.  Missing Header Fields . . . . . . . . . .\
    \ . . . . . .  15\n       7.5.3.  Return-Path . . . . . . . . . . . . . . . .\
    \ . . . . .  16\n     7.6.  Missing or Incorrect Charset Information  . . . .\
    \ . . . .  16\n     7.7.  Eight-Bit Data  . . . . . . . . . . . . . . . . . .\
    \ . . .  18\n   8.  MIME Anomalies  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  18\n     8.1.  Missing MIME-Version Field  . . . . . . . . . . . . . .\
    \ .  19\n     8.2.  Faulty Encodings  . . . . . . . . . . . . . . . . . . . .\
    \  19\n   9.  Body Anomalies  . . . . . . . . . . . . . . . . . . . . . . .  19\n\
    \     9.1.  Oversized Lines . . . . . . . . . . . . . . . . . . . . .  19\n  \
    \ 10. Security Considerations . . . . . . . . . . . . . . . . . . .  20\n   11.\
    \ References  . . . . . . . . . . . . . . . . . . . . . . . . .  20\n     11.1.\
    \  Normative References . . . . . . . . . . . . . . . . . .  20\n     11.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  20\n   Appendix A.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . .  23\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  The Purpose of This Work
  contents:
  - "1.1.  The Purpose of This Work\n   The history of email standards, going back\
    \ to [RFC733] and beyond,\n   contains a fairly rigid evolution of specifications.\
    \  However,\n   implementations within that culture have also long had an\n  \
    \ undercurrent known formally as \"the robustness principle\", also known\n  \
    \ informally as \"Postel's Law\": \"Be liberal in what you accept, and\n   conservative\
    \ in what you send\" [RFC1122].\n   Jon Postel's directive is often interpreted\
    \ to mean that any deviance\n   from a specification is acceptable.  However,\
    \ we believe it was\n   intended only to account for legitimate variations in\
    \ interpretation\n   within specifications, as well as basic transit errors, like\
    \ bit\n   errors.  Taken to its unintended extreme, excessive tolerance would\n\
    \   imply that there are no limits to the liberties that a sender might\n   take,\
    \ while presuming a burden on a receiver to guess \"correctly\" at\n   the meaning\
    \ of any such variation.  These matters are further\n   compounded by receiver\
    \ software -- the end users' mail readers --\n   which are also sometimes flawed,\
    \ leaving senders to craft messages\n   (sometimes bending the rules) to overcome\
    \ those flaws.\n   In general, this served the email ecosystem well by allowing\
    \ a few\n   errors in implementations without obstructing participation in the\n\
    \   game.  The proverbial bar was set low.  However, as we have evolved\n   into\
    \ the current era, some of these lenient stances have begun to\n   expose opportunities\
    \ that can be exploited by malefactors.  Various\n   email-based applications\
    \ rely on the strong application of these\n   standards for simple security checks,\
    \ while the very basic building\n   blocks of that infrastructure, intending to\
    \ be robust, fail utterly\n   to assert those standards.\n   The distributed and\
    \ non-interactive nature of email has often\n   prompted adjustments to receiving\
    \ software, to handle these\n   variations, rather than trying to gain better\
    \ conformance by senders,\n   since the receiving operator is primarily driven\
    \ by complaints from\n   recipient users and has no authority over the sending\
    \ side of the\n   system.  Processing with such flexibility comes at some cost,\
    \ since\n   mail software is faced with decisions about whether to permit non-\n\
    \   conforming messages to continue toward their destinations unaltered,\n   adjust\
    \ them to conform (possibly at the cost of losing some of the\n   original message),\
    \ or reject them outright.\n   This document includes a collection of the best\
    \ advice available\n   regarding a variety of common malformed mail situations;\
    \ it is to be\n   used as implementation guidance.  These malformations are typically\n\
    \   based around loose interpretations or implementations of\n   specifications\
    \ such as the Internet Message Format [MAIL] and\n   Multipurpose Internet Mail\
    \ Extensions [MIME].\n"
- title: 1.2.  Not the Purpose of This Work
  contents:
  - "1.2.  Not the Purpose of This Work\n   It is important to understand that this\
    \ work is not an effort to\n   endorse or standardize certain common malformations.\
    \  The code and\n   culture that introduces such messages into the mail stream\
    \ needs to\n   be repaired, as the security penalty now being paid for this lax\n\
    \   processing arguably outweighs the reduction in support costs to end\n   users\
    \ who are not expected to understand the standards.  However, the\n   reality\
    \ is that this will not be fixed quickly.\n   Given this, it is beneficial to\
    \ provide implementers with guidance\n   about the safest or most effective way\
    \ to handle malformed messages\n   when they arrive, taking into consideration\
    \ the trade-offs of the\n   choices available especially with respect to how various\
    \ actors in\n   the email ecosystem respond to such messages in terms of handling,\n\
    \   parsing, or rendering to end users.\n"
- title: 1.3.  General Considerations
  contents:
  - "1.3.  General Considerations\n   Many deviations from message format standards\
    \ are considered by some\n   receivers to be strong indications that the message\
    \ is undesirable,\n   such as spam or something containing malware.  These receivers\n\
    \   quickly decide that the best handling choice is simply to reject or\n   discard\
    \ the message.  This means malformations caused by innocent\n   misunderstandings\
    \ or ignorance of proper syntax can cause messages\n   with no ill intent also\
    \ to fail to be delivered.\n   Senders that want to ensure message delivery are\
    \ best advised to\n   adhere strictly to the relevant standards (including, but\
    \ not limited\n   to, [MAIL], [MIME], and [DKIM]), as well as observe other industry\n\
    \   best practices such as may be published from time to time by either\n   the\
    \ IETF or independently.\n   Receivers that haven't the luxury of strict enforcement\
    \ of the\n   standards on inbound messages are usually best served by observing\n\
    \   the following guidelines for handling of malformed messages:\n   1.  Whenever\
    \ possible, mitigation of syntactic malformations should\n       be guided by\
    \ an assessment of the most likely semantic intent.\n       For example, it is\
    \ reasonable to conclude that multiple sets of\n       angle brackets around an\
    \ address are simply superfluous and can\n       be dropped.\n   2.  When the\
    \ intent is unclear, or when it is clear but also\n       impractical to change\
    \ the content to reflect that intent,\n       mitigation should be limited to\
    \ cases where not taking any\n       corrective action would clearly lead to a\
    \ worse outcome.\n   3.  Security issues, when present, need to be addressed and\
    \ may force\n       mitigation strategies that are otherwise suboptimal.\n"
- title: 2.  Document Conventions
  contents:
  - '2.  Document Conventions

    '
- title: 2.1.  Examples
  contents:
  - "2.1.  Examples\n   Examples of message content include a number within braces\
    \ at the end\n   of each line.  These are line numbers for use in subsequent\n\
    \   discussion, and they are not actually part of the message content\n   presented\
    \ in the example.\n   Blank lines are not numbered in the examples.\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   The reader would benefit from reading [EMAIL-ARCH] for some\
    \ general\n   background about the overall email architecture.  Of particular\n\
    \   interest is the Internet Message Format, detailed in [MAIL].\n   Throughout\
    \ this document, the use of the term \"message\" should be\n   assumed to mean\
    \ a block of text conforming to the Internet Message\n   Format.\n"
- title: 4.  Invariant Content
  contents:
  - "4.  Invariant Content\n   An agent handling a message could use several distinct\n\
    \   representations of the message.  One is an internal representation,\n   such\
    \ as separate blocks of storage for the header and body, some\n   header or body\
    \ alterations, or tables indexed by header name, set up\n   to make particular\
    \ kinds of processing easier.  The other is the\n   representation passed along\
    \ to the next agent in the handling chain.\n   This might be identical to the\
    \ message input to the module, or it\n   might have some changes such as added\
    \ or reordered header fields or\n   body elisions to remove malicious content.\n\
    \   Message handling is usually most effective when each in a sequence of\n  \
    \ handling modules receives the same content for analysis.  A module\n   that\
    \ \"fixes\" or otherwise alters the content passed to later modules\n   can prevent\
    \ the later modules from identifying malicious or other\n   content that exposes\
    \ the end user to harm.  It is important that all\n   processing modules can make\
    \ consistent assertions about the content.\n   Modules that operate sequentially\
    \ sometimes add private header fields\n   to relay information downstream for\
    \ later filters to use (and\n   possibly remove), or they may have out-of-band\
    \ ways of doing so.\n   However, even the presence of private header fields can\
    \ impact a\n   downstream handling agent unaware of its local semantics, so an\
    \ out-\n   of-band method is always preferable.\n   The above is less of a concern\
    \ when multiple analysis modules are\n   operated in parallel, independent of\
    \ one another.\n   Often, abuse reporting systems can act effectively only when\
    \ a\n   complaint or report contains the original message exactly as it was\n\
    \   generated.  Messages that have been altered by handling modules might\n  \
    \ render a complaint not actionable as the system receiving the report\n   may\
    \ be unable to identify the original message as one of its own.\n   Some message\
    \ changes alter syntax without changing semantics.  For\n   example, Section 7.4\
    \ describes a situation where an agent removes\n   additional header whitespace.\
    \  This is a syntax change without a\n   change in semantics, though some systems\
    \ (such as DKIM) are sensitive\n   to such changes.  Message system developers\
    \ need to be aware of the\n   downstream impact of making either kind of change.\n\
    \   Where a change to content between modules is unavoidable, it is a\n   good\
    \ idea to add standard trace data to indicate a \"visible\" handoff\n   between\
    \ modules has occurred.  The only advisable way to do this is\n   to prepend Received\
    \ fields with the appropriate information, as\n   described in Section 3.6.7 of\
    \ [MAIL].\n   There will always be local handling exceptions, but these guidelines\n\
    \   should be useful for developing integrated message processing\n   environments.\n\
    \   In most cases, this document only discusses techniques used on\n   internal\
    \ representations.  It is occasionally necessary to make\n   changes between the\
    \ input and output versions; such cases will be\n   called out explicitly.\n"
- title: 5.  Mail Submission Agents
  contents:
  - "5.  Mail Submission Agents\n   Within the email context, the single most influential\
    \ component that\n   can reduce the presence of malformed items in the email system\
    \ is the\n   Mail Handling Service (MHS; see [EMAIL-ARCH]), which includes the\n\
    \   Mail Submission Agent (MSA).  This is the component that is\n   essentially\
    \ the interface between end users that create content and\n   the mail stream.\n\
    \   MHSs need to become more strict about enforcement of all relevant\n   email\
    \ standards, especially [MAIL] and the [MIME] family of\n   documents.\n   More\
    \ strict conformance by relaying Mail Transfer Agents (MTAs) will\n   also be\
    \ helpful.  Although preventing the dissemination of malformed\n   messages is\
    \ desirable, the rejection of such mail already in transit\n   also has a support\
    \ cost -- namely, the creation of a [DSN] that many\n   end users might not understand.\n"
- title: 6.  Line Termination
  contents:
  - "6.  Line Termination\n   For interoperable Internet Mail messages, the only valid\
    \ line\n   separation sequence during a typical SMTP session is ASCII 0x0D\n \
    \  (\"carriage return\", or CR) followed by ASCII 0x0A (\"line feed\", or\n  \
    \ LF), commonly referred to as \"CRLF\".  This is not the case for binary\n  \
    \ mode SMTP (see [BINARYSMTP]).\n   Common UNIX user tools, however, typically\
    \ only use LF for internal\n   line termination.  This means that a protocol engine\
    \ that converts\n   between UNIX and Internet message formats has to convert between\n\
    \   these two end-of-line representations before transmitting a message\n   or\
    \ after receiving it.\n   Non-compliant implementations can create messages with\
    \ a mix of line\n   terminations, such as LF everywhere except CRLF only at the\
    \ end of\n   the message.  According to [SMTP] and [MAIL], this means the entire\n\
    \   message actually exists on a single line.\n   Within modern Internet Mail,\
    \ it is highly unlikely that an isolated\n   CR or LF is valid in common ASCII\
    \ text.  Furthermore, when content\n   actually does need to contain such an unusual\
    \ character sequence,\n   [MIME] provides mechanisms for encoding that content\
    \ in an SMTP-safe\n   manner.\n   Thus, it will typically be safe and helpful\
    \ to treat an isolated CR\n   or LF as equivalent to a CRLF when parsing a message.\n\
    \   Note that this advice pertains only to the raw SMTP data and not to\n   decoded\
    \ MIME entities.  As noted above, when MIME encoding mechanisms\n   are used,\
    \ the unusual character sequences are not visible in the raw\n   SMTP stream.\n"
- title: 7.  Header Anomalies
  contents:
  - "7.  Header Anomalies\n   This section covers common syntactic and semantic anomalies\
    \ found in\n   a message header and presents suggested methods of mitigation.\n"
- title: 7.1.  Converting Obsolete and Invalid Syntaxes
  contents:
  - "7.1.  Converting Obsolete and Invalid Syntaxes\n   A message using an obsolete\
    \ header syntax (see Section 4 of [MAIL])\n   might confound an agent that is\
    \ attempting to be robust in its\n   handling of syntax variations.  A bad actor\
    \ could exploit such a\n   weakness in order to get abusive or malicious content\
    \ through a\n   filter.  This section presents some examples of such variations.\n\
    \   Messages including these variations ought to be rejected; where this\n   is\
    \ not possible, recommended internal interpretations are provided.\n"
- title: 7.1.1.  Host-Address Syntax
  contents:
  - "7.1.1.  Host-Address Syntax\n   The following obsolete syntax attempts to specify\
    \ source routing:\n       To: <@example.net:fran@example.com>\n   This means \"\
    send to fran@example.com via the mail service at\n   example.net\".  It can safely\
    \ be interpreted as:\n       To: <fran@example.com>\n"
- title: 7.1.2.  Excessive Angle Brackets
  contents:
  - "7.1.2.  Excessive Angle Brackets\n   The following overuse of angle brackets:\n\
    \       To: <<<user2@example.org>>>\n   can safely be interpreted as:\n      \
    \ To: <user2@example.org>\n"
- title: 7.1.3.  Unbalanced Angle Brackets
  contents:
  - "7.1.3.  Unbalanced Angle Brackets\n   The following use of unbalanced angle brackets:\n\
    \       To: <another@example.net\n   can usually be treated as:\n       To: <another@example.net>\n\
    \   The following:\n       To: second@example.org>\n   can usually be treated\
    \ as:\n       To: second@example.org\n"
- title: 7.1.4.  Unbalanced Parentheses
  contents:
  - "7.1.4.  Unbalanced Parentheses\n   The following use of unbalanced parentheses:\n\
    \       To: (Testing <fran@example.com>\n   can safely be interpreted as:\n  \
    \     To: (Testing) <fran@example.com>\n   Likewise, this case:\n       To: Testing)\
    \ <sam@example.com>\n   can safely be interpreted as:\n       To: \"Testing)\"\
    \ <sam@example.com>\n   In both cases, it is obvious where the active email address\
    \ in the\n   string can be found.  The former case retains the active email\n\
    \   address in the string by completing what appears to be intended as a\n   comment;\
    \ the intent in the latter case is less obvious, so the\n   leading string is\
    \ interpreted as a display name.\n"
- title: 7.1.5.  Commas in Address Lists
  contents:
  - "7.1.5.  Commas in Address Lists\n   This use of an errant comma:\n       To:\
    \ <third@example.net, fourth@example.net>\n   can usually be interpreted as ending\
    \ an address, so the above is\n   usually best interpreted as:\n       To: third@example.net,\
    \ fourth@example.net\n"
- title: 7.1.6.  Unbalanced Quotes
  contents:
  - "7.1.6.  Unbalanced Quotes\n   The following use of unbalanced quotation marks:\n\
    \       To: \"Joe <joe@example.com>\n   leaves software with no unambiguous interpretation.\
    \  One possible\n   interpretation is:\n       To: \"Joe <joe@example.com>\"@example.net\n\
    \   where \"example.net\" is the domain name or host name of the handling\n  \
    \ agent making the interpretation.  However, the more obvious and\n   likely best\
    \ interpretation is simply:\n       To: \"Joe\" <joe@example.com>\n"
- title: 7.1.7.  Naked Local-Parts
  contents:
  - "7.1.7.  Naked Local-Parts\n   [MAIL] defines a local-part as the user portion\
    \ of an email address,\n   and the display-name as the \"user-friendly\" label\
    \ that accompanies\n   the address specification.\n   Some broken submission agents\
    \ might introduce messages with only a\n   local-part or only a display-name and\
    \ no properly formed address.\n   For example:\n       To: Joe\n   A submission\
    \ agent ought to reject this or, at a minimum, append \"@\"\n   followed by its\
    \ own host name or some other valid name likely to\n   enable a reply to be delivered\
    \ to the correct mailbox.  Where this is\n   not done, an agent receiving such\
    \ a message will probably be\n   successful by synthesizing a valid header field\
    \ for evaluation using\n   the techniques described in Section 7.5.2.\n"
- title: 7.2.  Non-Header Lines
  contents:
  - "7.2.  Non-Header Lines\n   Some messages contain a line of text in the header\
    \ that is not a\n   valid message header field of any kind.  For example:\n  \
    \     From: user@example.com {1}\n       To: userpal@example.net {2}\n       Subject:\
    \ This is your reminder {3}\n       about the football game tonight {4}\n    \
    \   Date: Wed, 20 Oct 2010 20:53:35 -0400 {5}\n       Don't forget to meet us\
    \ for the tailgate party! {7}\n   The cause of this is typically a bug in a message\
    \ generator of some\n   kind.  Line {4} was intended to be a continuation of line\
    \ {3}; it\n   should have been indented by whitespace as set out in Section 2.2.3\n\
    \   of [MAIL].\n   This anomaly has varying impacts on processing software, depending\
    \ on\n   the implementation:\n   1.  Some agents choose to separate the header\
    \ of the message from the\n       body only at the first empty line (that is,\
    \ a CRLF immediately\n       followed by another CRLF).\n   2.  Some agents assume\
    \ this anomaly should be interpreted to mean the\n       body starts at line {4},\
    \ as the end of the header is assumed by\n       encountering something that is\
    \ not a valid header field or folded\n       portion thereof.\n   3.  Some agents\
    \ assume this should be interpreted as an intended\n       header folding as described\
    \ above and thus simply append a single\n       space character (ASCII 0x20) and\
    \ the content of line {4} to that\n       of line {3}.\n   4.  Some agents reject\
    \ this outright as line {4} is neither a valid\n       header field nor a folded\
    \ continuation of a header field prior to\n       an empty line.\n   This can\
    \ be exploited if it is known that one message handling agent\n   will take one\
    \ action, while the next agent in the handling chain will\n   take another.  Consider,\
    \ for example, a message filter that searches\n   message headers for properties\
    \ indicative of abusive or malicious\n   content that is attached to a Mail Transfer\
    \ Agent (MTA) implementing\n   option 2 above.  An attacker could craft a message\
    \ that includes this\n   malformation at a position above the property of interest,\
    \ knowing\n   the MTA will not consider that content part of the header.\n   Consequently,\
    \ the MTA will not feed it to the filter; thus, it avoids\n   detection.  Meanwhile,\
    \ the Mail User Agent (MUA), which presents the\n   content to an end user, implements\
    \ option 1 or 3, which has some\n   undesirable effect.\n   It should be noted\
    \ that a few implementations choose option 4 above\n   since any reputable message\
    \ generation program will get header\n   folding right, and thus anything so blatant\
    \ as this malformation is\n   likely an error caused by a malefactor.\n   The\
    \ preferred implementation if option 4 above is not employed is to\n   apply the\
    \ following heuristic when this malformation is detected:\n   1.  Search forward\
    \ for an empty line.  If one is found, then apply\n       option 3 above to the\
    \ anomalous line, and continue.\n   2.  Search forward for another line that appears\
    \ to be a new header\n       field (a name followed by a colon).  If one is found,\
    \ then apply\n       option 3 above to the anomalous line, and continue.\n"
- title: 7.3.  Unusual Spacing
  contents:
  - "7.3.  Unusual Spacing\n   The following message is valid per [MAIL]:\n      \
    \ From: user@example.com {1}\n       To: userpal@example.net {2}\n       Subject:\
    \ This is your reminder {3}\n        {4}\n        about the football game tonight\
    \ {5}\n       Date: Wed, 20 Oct 2010 20:53:35 -0400 {6}\n       Don't forget to\
    \ meet us for the tailgate party! {8}\n   Line {4} contains a single whitespace.\
    \  The intended result is that\n   lines {3}, {4}, and {5} comprise a single continued\
    \ header field.\n   However, some agents are aggressive at stripping trailing\
    \ whitespace,\n   which will cause line {4} to be treated as an empty line, and\
    \ thus\n   the separator line between header and body.  This can affect header-\n\
    \   specific processing algorithms as described in the previous section.\n   This\
    \ example was legal in earlier versions of the Internet message\n   format standard\
    \ but was rendered obsolete as of [RFC2822] as line {4}\n   could be interpreted\
    \ as the separator between the header and body.\n   The best handling of this\
    \ example is for a message parsing engine to\n   behave as if line {4} were not\
    \ present in the message and for a\n   message creation engine to emit the message\
    \ with line {4} removed.\n"
- title: 7.4.  Header Malformations
  contents:
  - "7.4.  Header Malformations\n   Among the many possible malformations, a common\
    \ one is insertion of\n   whitespace at unusual locations, such as:\n       From:\
    \ user@example.com {1}\n       To: userpal@example.net {2}\n       Subject: This\
    \ is your reminder {3}\n       MIME-Version : 1.0 {4}\n       Content-Type: text/plain\
    \ {5}\n       Date: Wed, 20 Oct 2010 20:53:35 -0400 {6}\n       Don't forget to\
    \ meet us for the tailgate party! {8}\n   Note the addition of whitespace in line\
    \ {4} after the header field\n   name but before the colon that separates the\
    \ name from the value.\n   The obsolete grammar of Section 4 of [MAIL] permits\
    \ that extra\n   whitespace, so it cannot be considered invalid.  However, a consensus\n\
    \   of implementations prefers to remove that whitespace.  There is no\n   perceived\
    \ change to the semantics of the header field being altered\n   as the whitespace\
    \ is itself semantically meaningless.  Therefore, it\n   is best to remove all\
    \ whitespace after the field name but before the\n   colon and to emit the field\
    \ in this modified form.\n"
- title: 7.5.  Header Field Counts
  contents:
  - "7.5.  Header Field Counts\n   Section 3.6 of [MAIL] prescribes specific header\
    \ field counts for a\n   valid message.  Few agents actually enforce these in\
    \ the sense that a\n   message whose header contents exceed one or more limits\
    \ set there are\n   generally allowed to pass; they typically add any required\
    \ fields\n   that are missing, however.\n   Also, few agents that use messages\
    \ as input, including MUAs that\n   actually display messages to users, verify\
    \ that the input is valid\n   before proceeding.  Some popular open-source filtering\
    \ programs and\n   some popular Mailing List Management (MLM) packages select\
    \ either the\n   first or last instance of a particular field name, such as From,\
    \ to\n   decide who sent a message.  Absent strict enforcement of [MAIL], an\n\
    \   attacker can craft a message with multiple instances of the same\n   fields\
    \ if that attacker knows the filter will make a decision based\n   on one, but\
    \ the user will be shown the others.\n   This situation is exacerbated when message\
    \ validity is assessed, such\n   as through enhanced authentication methods like\
    \ DomainKeys Identified\n   Mail [DKIM].  Such methods might cover one instance\
    \ of a constrained\n   field but not another, taking the wrong one as \"good\"\
    \ or \"safe\".  An\n   MUA, for example, could show the first of two From fields\
    \ to an end\n   user as \"good\" or \"safe\", while an authentication method actually\n\
    \   only verified the second.\n   In attempting to counter this exposure, one\
    \ of the following\n   strategies can be used:\n   1.  reject outright or refuse\
    \ to process further any input message\n       that does not conform to Section\
    \ 3.6 of [MAIL];\n   2.  remove or, in the case of an MUA, refuse to render any\
    \ instances\n       of a header field whose presence exceeds a limit prescribed\
    \ in\n       Section 3.6 of [MAIL] when generating its output;\n   3.  where a\
    \ field can contain multiple distinct values (such as From)\n       or is free-form\
    \ text (such as Subject), combine them into a\n       semantically identical,\
    \ single header field of the same name (see\n       Section 7.5.1);\n   4.  alter\
    \ the name of any header field whose presence exceeds a limit\n       prescribed\
    \ in Section 3.6 of [MAIL] when generating its output so\n       that later agents\
    \ can produce a consistent result.  Any\n       alteration likely to cause the\
    \ field to be ignored by downstream\n       agents is acceptable.  A common approach\
    \ is to prefix the field\n       names with a string such as \"BAD-\".\n   When\
    \ selecting a mitigation action (or some other action) from the\n   above list,\
    \ an operator must consider its needs and the nature of its\n   user base.\n"
- title: 7.5.1.  Repeated Header Fields
  contents:
  - "7.5.1.  Repeated Header Fields\n   There are some occasions where repeated fields\
    \ are encountered where\n   only one is expected.  Two examples are presented.\
    \  First:\n       From: reminders@example.com {1}\n       To: jqpublic@example.com\
    \ {2}\n       Subject: Automatic Meeting Reminder {3}\n       Subject: 4pm Today\
    \ -- Staff Meeting {4}\n       Date: Wed, 20 Oct 2010 08:00:00 -0700 {5}\n   \
    \    Reminder of the staff meeting today in the small {6}\n       auditorium.\
    \  Come early! {7}\n   The message above has two Subject fields, which is in violation\
    \ of\n   Section 3.6 of [MAIL].  A safe interpretation of this would be to\n \
    \  treat it as though the two Subject field values were concatenated, so\n   long\
    \ as they are not identical, such as:\n       From: reminders@example.com {1}\n\
    \       To: jqpublic@example.com {2}\n       Subject: Automatic Meeting Reminder\
    \ {3}\n         4pm Today -- Staff Meeting {4}\n       Date: Wed, 20 Oct 2010\
    \ 08:00:00 -0700 {5}\n       Reminder of the staff meeting today in the small\
    \ {6}\n       auditorium.  Come early! {7}\n   Second:\n       From: president@example.com\
    \ {1}\n       From: vice-president@example.com {2}\n       To: jqpublic@example.com\
    \ {3}\n       Subject: A note from the E-Team {4}\n       Date: Wed, 20 Oct 2010\
    \ 08:00:00 -0700 {5}\n       This memo is to remind you of the corporate dress\
    \ {6}\n       code.  Attached you will find an updated copy of {7}\n       the\
    \ policy. {8}\n       ...\n   As with the first example, there is a violation\
    \ in terms of the\n   number of instances of the From field.  A likely safe interpretation\n\
    \   would be to combine these into a comma-separated address list in a\n   single\
    \ From field:\n       From: president@example.com, {1}\n             vice-president@example.com\
    \ {2}\n       To: jqpublic@example.com {3}\n       Subject: A note from the E-Team\
    \ {4}\n       Date: Wed, 20 Oct 2010 08:00:00 -0700 {5}\n       This memo is to\
    \ remind you of the corporate dress {6}\n       code.  Attached you will find\
    \ an updated copy of {7}\n       the policy. {8}\n       ...\n"
- title: 7.5.2.  Missing Header Fields
  contents:
  - "7.5.2.  Missing Header Fields\n   Similar to the previous section, there are\
    \ messages seen in the wild\n   that lack certain required header fields.  In\
    \ particular, [MAIL]\n   requires that a From and Date field be present in all\
    \ messages.\n   When presented with a message lacking these fields, the MTA might\n\
    \   perform one of the following:\n   1.  Make no changes.\n   2.  Add an instance\
    \ of the missing field(s) using synthesized content\n       based on data provided\
    \ in other parts of the protocol.\n   Option 2 is recommended for handling this\
    \ case.  Handling agents\n   should add these for internal handling if they are\
    \ missing, but\n   should not add them to the external representation.  The reason\
    \ for\n   this advice is that there are some filter modules that would consider\n\
    \   the absence of such fields to be a condition warranting special\n   treatment\
    \ (for example, rejection), and thus the effectiveness of\n   such modules would\
    \ be stymied by an upstream filter adding them in a\n   way visible to other components.\n\
    \   The synthesized fields should contain a best guess as to what should\n   have\
    \ been there; for From, the SMTP MAIL command's address can be\n   used (if not\
    \ null) or a placeholder address followed by an address\n   literal (for example,\
    \ unknown@[192.0.2.1]); for Date, a date\n   extracted from a Received field is\
    \ a reasonable choice.\n   One other important case to consider is a missing Message-ID\
    \ field.\n   An MTA that encounters a message missing this field should synthesize\n\
    \   a valid one and add it to the external representation, since many\n   deployed\
    \ tools commonly use the content of that field as a unique\n   message reference,\
    \ so its absence inhibits correlation of message\n   processing.  Section 3.6.4\
    \ of [MAIL] describes advisable practice for\n   synthesizing the content of this\
    \ field when it is absent, and\n   establishes a requirement that it be globally\
    \ unique.\n"
- title: 7.5.3.  Return-Path
  contents:
  - "7.5.3.  Return-Path\n   While legitimate messages can contain more than one Return-Path\n\
    \   header field, such usage is often an error rather that a valid\n   message\
    \ containing multiple header field blocks as described in\n   Sections 3.6 of\
    \ [MAIL].  Accordingly, when a message containing\n   multiple Return-Path header\
    \ fields is encountered, all but the\n   topmost one is to be disregarded, as\
    \ it is most likely to have been\n   added nearest to the mailbox that received\
    \ that message.\n"
- title: 7.6.  Missing or Incorrect Charset Information
  contents:
  - "7.6.  Missing or Incorrect Charset Information\n   MIME provides the means to\
    \ include textual material employing\n   character sets (\"charsets\") other than\
    \ US-ASCII.  Such material is\n   required to have an identified charset.  Charset\
    \ identification is\n   done using a \"charset\" parameter in the Content-Type\
    \ header field, a\n   charset label within the MIME entity itself, or the charset\
    \ can be\n   implicitly specified by the Content-Type (see [CHARSET]).\n   Unfortunately,\
    \ it is fairly common for required character set\n   information to be missing\
    \ or incorrect in textual MIME entities.  As\n   such, processing agents should\
    \ perform basic sanity checks, such as:\n   o  US-ASCII contains bytes between\
    \ 1 and 127 inclusive only\n      (colloquially, \"7-bit\" data), so material\
    \ including bytes outside\n      of that range (\"8-bit\" data) is necessarily\
    \ not US-ASCII.  (See\n      Section 2.1 of [MAIL].)\n   o  [UTF-8] has a very\
    \ specific syntactic structure that other 8-bit\n      charsets are unlikely to\
    \ follow.\n   o  Null bytes (ASCII 0x00) are not allowed in either 7-bit or 8-bit\n\
    \      data.\n   o  Not all 7-bit material is US-ASCII.  The presence of the various\n\
    \      escape sequences used for character switching can be used as an\n     \
    \ indication of the various charsets based on ISO/IEC 2022\n      [ISO-2022],\
    \ such as those defined in [ISO-2022-CN], [ISO-2022-JP],\n      and [ISO-2022-KR].\n\
    \   When a character set error is detected, processing agents should:\n   1. \
    \ apply heuristics to determine the most likely character set and,\n       if\
    \ successful, proceed using that information; or\n   2.  refuse to process the\
    \ malformed MIME entity.\n   A null byte inside a textual MIME entity can cause\
    \ typical string\n   processing functions to misidentify the end of a string,\
    \ which can be\n   exploited to hide malicious content from analysis processes.\n\
    \   Accordingly, null bytes require additional special handling.\n   A few null\
    \ bytes in isolation is likely to be the result of poor\n   message construction\
    \ practices.  Such nulls should be silently\n   dropped.\n   Large numbers of\
    \ null bytes are usually the result of binary material\n   that is improperly\
    \ encoded, improperly labeled, or both.  Such\n   material is likely to be damaged\
    \ beyond the hope of recovery, so the\n   best course of action is to refuse to\
    \ process it.\n   Finally, the presence of null bytes may be used as indication\
    \ of\n   possible malicious intent.\n"
- title: 7.7.  Eight-Bit Data
  contents:
  - "7.7.  Eight-Bit Data\n   Standards-compliant email messages do not contain any\
    \ non-ASCII data\n   without indicating that such content is present by means\
    \ of published\n   SMTP extensions.  Absent that, MIME encodings are typically\
    \ used to\n   convert non-ASCII data to ASCII in a way that can be reversed by\n\
    \   other handling agents or end users.\n   The best way to handle non-compliant\
    \ 8-bit material depends on its\n   location.\n   Non-compliant 8-bit material\
    \ in MIME entity content should simply be\n   processed as if the necessary SMTP\
    \ extensions had been used to\n   transfer the message.  Note that improperly\
    \ labeled 8-bit material in\n   textual MIME entities may require treatment as\
    \ described in\n   Section 7.6.\n   Non-compliant 8-bit material in message or\
    \ MIME entity header fields\n   can be handled as follows:\n   1.  Occurrences\
    \ in unstructured text fields, comments, and phrases\n       can be converted\
    \ into encoded-words (see [MIME3] if a likely\n       character set can be determined).\
    \  Alternatively, 8-bit\n       characters can be removed or replaced with some\
    \ other character.\n   2.  Occurrences in header fields whose syntax is unknown\
    \ may be\n       handled by dropping the field entirely or by removing/replacing\n\
    \       the 8-bit character as described above.\n   3.  Occurrences in addresses\
    \ are especially problematic.  Agents\n       supporting [EAI] may, if the 8-bit\
    \ material conforms to 8-bit\n       syntax, elect to treat the message as an\
    \ EAI message and process\n       it accordingly.  Otherwise, in most cases, it\
    \ is best to exclude\n       the address from any sort of processing -- which\
    \ may mean\n       dropping it entirely -- since any attempt to fix it definitively\n\
    \       is unlikely to be successful.\n"
- title: 8.  MIME Anomalies
  contents:
  - "8.  MIME Anomalies\n   The five-part set of MIME specifications includes a mechanism\
    \ of\n   message extensions for providing text in character sets other than\n\
    \   ASCII, non-text attachments to messages, multipart message bodies,\n   and\
    \ similar facilities.\n   Some anomalies with MIME-compliant generation are also\
    \ common.  This\n   section discusses some of those and presents preferred methods\
    \ of\n   mitigation.\n"
- title: 8.1.  Missing MIME-Version Field
  contents:
  - "8.1.  Missing MIME-Version Field\n   Any message that uses [MIME] constructs\
    \ is required to have a MIME-\n   Version header field.  Without it, the Content-Type\
    \ and associated\n   fields have no semantic meaning.\n   It is often observed\
    \ that a message has complete MIME structure, yet\n   lacks this header field.\
    \  It is prudent to disregard this absence and\n   conduct analysis of the message\
    \ as if it were present, especially by\n   agents attempting to identify malicious\
    \ material.\n   Further, the absence of MIME-Version might be an indication of\n\
    \   malicious intent, and extra scrutiny of the message may be warranted.\n  \
    \ Such omissions are not expected from compliant message generators.\n"
- title: 8.2.  Faulty Encodings
  contents:
  - "8.2.  Faulty Encodings\n   There have been a few different specifications of\
    \ base64 in the past.\n   The implementation defined in [MIME] instructs decoders\
    \ to discard\n   characters that are not part of the base64 alphabet.  Other\n\
    \   implementations consider an encoded body containing such characters\n   to\
    \ be completely invalid.  Very early specifications of base64 (see\n   [PEM89],\
    \ for example, which was later obsoleted by [PEM93]) allowed\n   email-style comments\
    \ within base64-encoded data.\n   The attack vector here involves constructing\
    \ a base64 body whose\n   meaning varies given different possible decodings. \
    \ If a security\n   analysis module wishes to be thorough, it should consider\
    \ scanning\n   the possible outputs of the known decoding dialects in an attempt\
    \ to\n   anticipate how the MUA will interpret the data.\n"
- title: 9.  Body Anomalies
  contents:
  - '9.  Body Anomalies

    '
- title: 9.1.  Oversized Lines
  contents:
  - "9.1.  Oversized Lines\n   A message containing a line of content that exceeds\
    \ 998 characters\n   plus the line terminator (1000 total) violates Section 2.1.1\
    \ of\n   [MAIL].  Some handling agents may not look at content in a single\n \
    \  line past the first 998 bytes, providing bad actors an opportunity to\n   hide\
    \ malicious content.\n   There is no specified way to handle such messages, other\
    \ than to\n   observe that they are non-compliant and reject them or rewrite the\n\
    \   oversized line such that the message is compliant.\n   To ensure long lines\
    \ do not prevent analysis of potentially malicious\n   data, handling agents are\
    \ strongly encouraged to take one of the\n   following actions:\n   1.  Break\
    \ such lines into multiple lines at a position that does not\n       change the\
    \ semantics of the text being thus altered.  For\n       example, break an oversized\
    \ line at a position such that a [URI]\n       does not span two lines (which\
    \ could inhibit the proper\n       identification of the URI).\n   2.  Rewrite\
    \ the MIME part (or the entire message if not MIME) that\n       contains the\
    \ excessively long line using a content encoding that\n       breaks the line\
    \ in the transmission but would still result in the\n       line being intact\
    \ on decoding for presentation to the user.  Both\n       of the encodings declared\
    \ in [MIME] can accomplish this.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The discussions of the anomalies above and their\
    \ prescribed solutions\n   are themselves security considerations.  The practices\
    \ enumerated in\n   this document are generally perceived as attempts to resolve\
    \ security\n   considerations that already exist rather than introducing new ones.\n\
    \   However, some of the attacks described here may not have appeared in\n   previous\
    \ email specifications.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [EMAIL-ARCH]  Crocker, D., \"Internet Mail Architecture\"\
    , RFC 5598,\n                 July 2009.\n   [MAIL]        Resnick, P., \"Internet\
    \ Message Format\", RFC 5322,\n                 October 2008.\n   [MIME]     \
    \   Freed, N. and N. Borenstein, \"Multipurpose Internet\n                 Mail\
    \ Extensions (MIME) Part One: Format of Internet\n                 Message Bodies\"\
    , RFC 2045, November 1996.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BINARYSMTP]  Vaudreuil, G., \"SMTP Service\
    \ Extensions for\n                 Transmission of Large and Binary MIME Messages\"\
    , RFC\n                 3030, December 2000.\n   [CHARSET]     Melnikov, A. and\
    \ J. Reschke, \"Update to MIME regarding\n                 \"charset\" Parameter\
    \ Handling in Textual Media Types\",\n                 RFC 6657, July 2012.\n\
    \   [DKIM]        Crocker, D., Ed., Hansen, T., Ed., and M. Kucherawy,\n     \
    \            Ed., \"DomainKeys Identified Mail (DKIM) Signatures\",\n        \
    \         RFC 6376, September 2011.\n   [DSN]         Moore, K. and G. Vaudreuil,\
    \ \"An Extensible Message\n                 Format for Delivery Status Notifications\"\
    , RFC 3464,\n                 January 2003.\n   [EAI]         Yang, A., Steele,\
    \ S., and N. Freed, \"Internationalized\n                 Email Headers\", RFC\
    \ 6532, February 2012.\n   [ISO-2022-CN] Zhu, HF., Hu, DY., Wang, ZG., Kao, TC.,\
    \ Chang, WCH.,\n                 and M. Crispin, \"Chinese Character Encoding\
    \ for\n                 Internet Messages\", RFC 1922, March 1996.\n   [ISO-2022-JP]\
    \ Murai, J., Crispin, M., and E. van der Poel, \"Japanese\n                 Character\
    \ Encoding for Internet Messages\", RFC 1468,\n                 June 1993.\n \
    \  [ISO-2022-KR] Choi, U., Chon, K., and H. Park, \"Korean Character\n       \
    \          Encoding for Internet Messages\", RFC 1557, December\n            \
    \     1993.\n   [ISO-2022]    ISO/IEC, \"Information technology -- Character code\n\
    \                 structure and extension techniques\", ISO/IEC 2022,\n      \
    \           1994, <http://www.iso.org/iso/\n                 catalogue_detail.htm?csnumber=22747>.\n\
    \   [MIME3]       Moore, K., \"MIME (Multipurpose Internet Mail\n            \
    \     Extensions) Part Three: Message Header Extensions for\n                \
    \ Non-ASCII Text\", RFC 2047, November 1996.\n   [PEM89]       Linn, J., \"Privacy\
    \ Enhancement for Internet Electronic\n                 Mail: Part I -- Message\
    \ Encipherment and Authentication\n                 Procedures\", RFC 1113, August\
    \ 1989.\n   [PEM93]       Linn, J., \"Privacy Enhancement for Internet Electronic\n\
    \                 Mail: Part I: Message Encryption and Authentication\n      \
    \           Procedures\", RFC 1421, February 1993.\n   [RFC1122]     Braden, R.,\
    \ Ed., \"Requirements for Internet Hosts --\n                 Communication Layers\"\
    , RFC 1122, October 1989.\n   [RFC2822]     Resnick, P., Ed., \"Internet Message\
    \ Format\", RFC 2822,\n                 April 2001.\n   [RFC733]      Crocker,\
    \ D., Vittal, J., Pogran, K., and D. Henderson,\n                 Jr., \"Standard\
    \ for the Format of Internet Text\n                 Messages\", RFC 733, November\
    \ 1977.\n   [SMTP]        Klensin, J., \"Simple Mail Transfer Protocol\", RFC\
    \ 5321,\n                 October 2008.\n   [URI]         Berners-Lee, T., Fielding,\
    \ R., and L. Masinter,\n                 \"Uniform Resource Identifier (URI):\
    \ Generic Syntax\",\n                 RFC 3986, January 2005.\n   [UTF-8]    \
    \   Yergeau, F., \"UTF-8, a transformation format of ISO\n                 10646\"\
    , RFC 3629, 2003.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The authors wish to acknowledge the following\
    \ for their review and\n   constructive criticism of this proposal: Dave Cridland,\
    \ Dave Crocker,\n   Jim Galvin, Tony Hansen, John Levine, Franck Martin, Alexey\
    \ Melnikov,\n   and Timo Sirainen.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Murray S. Kucherawy\n   EMail: superuser@gmail.com\n \
    \  Gregory N. Shapiro\n   EMail: gshapiro@proofpoint.com\n   Ned Freed\n   EMail:\
    \ ned.freed@mrochek.com\n"
