- contents:
  - "                     Transport Layer Security (TLS)\n            Application-Layer
    Protocol Negotiation Extension\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a Transport Layer Security (TLS) extension\n
    \  for application-layer protocol negotiation within the TLS handshake.\n   For
    instances in which multiple application protocols are supported\n   on the same
    TCP or UDP port, this extension allows the application\n   layer to negotiate
    which protocol will be used within the TLS\n   connection.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7301.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Requirements Language . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Application-Layer Protocol Negotiation  . . . . . . . . . .
    .   3\n     3.1.  The Application-Layer Protocol Negotiation Extension  . .   3\n
    \    3.2.  Protocol Selection  . . . . . . . . . . . . . . . . . . .   5\n   4.
    \ Design Considerations . . . . . . . . . . . . . . . . . . . .   6\n   5.  Security
    Considerations . . . . . . . . . . . . . . . . . . .   6\n   6.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .   7\n   7.  Acknowledgements  . . .
    . . . . . . . . . . . . . . . . . . .   8\n   8.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .   8\n     8.1.  Normative References  . . .
    . . . . . . . . . . . . . . .   8\n     8.2.  Informative References  . . . .
    . . . . . . . . . . . . .   8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Increasingly, application-layer protocols are encapsulated
    in the TLS\n   protocol [RFC5246].  This encapsulation enables applications to
    use\n   the existing, secure communications links already present on port 443\n
    \  across virtually the entire global IP infrastructure.\n   When multiple application
    protocols are supported on a single server-\n   side port number, such as port
    443, the client and the server need to\n   negotiate an application protocol for
    use with each connection.  It\n   is desirable to accomplish this negotiation
    without adding network\n   round-trips between the client and the server, as each
    round-trip\n   will degrade an end-user's experience.  Further, it would be\n
    \  advantageous to allow certificate selection based on the negotiated\n   application
    protocol.\n   This document specifies a TLS extension that permits the application\n
    \  layer to negotiate protocol selection within the TLS handshake.  This\n   work
    was requested by the HTTPbis WG to address the negotiation of\n   HTTP/2 ([HTTP2])
    over TLS; however, ALPN facilitates negotiation of\n   arbitrary application-layer
    protocols.\n   With ALPN, the client sends the list of supported application\n
    \  protocols as part of the TLS ClientHello message.  The server chooses\n   a
    protocol and sends the selected protocol as part of the TLS\n   ServerHello message.
    \ The application protocol negotiation can thus\n   be accomplished within the
    TLS handshake, without adding network\n   round-trips, and allows the server to
    associate a different\n   certificate with each application protocol, if desired.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements Language
- contents:
  - '3.  Application-Layer Protocol Negotiation

    '
  - contents:
    - "3.1.  The Application-Layer Protocol Negotiation Extension\n   A new extension
      type (\"application_layer_protocol_negotiation(16)\")\n   is defined and MAY
      be included by the client in its \"ClientHello\"\n   message.\n   enum {\n       application_layer_protocol_negotiation(16),
      (65535)\n   } ExtensionType;\n   The \"extension_data\" field of the\n   (\"application_layer_protocol_negotiation(16)\")
      extension SHALL\n   contain a \"ProtocolNameList\" value.\n   opaque ProtocolName<1..2^8-1>;\n
      \  struct {\n       ProtocolName protocol_name_list<2..2^16-1>\n   } ProtocolNameList;\n
      \  \"ProtocolNameList\" contains the list of protocols advertised by the\n   client,
      in descending order of preference.  Protocols are named by\n   IANA-registered,
      opaque, non-empty byte strings, as described further\n   in Section 6 (\"IANA
      Considerations\") of this document.  Empty strings\n   MUST NOT be included
      and byte strings MUST NOT be truncated.\n   Servers that receive a ClientHello
      containing the\n   \"application_layer_protocol_negotiation\" extension MAY
      return a\n   suitable protocol selection response to the client.  The server
      will\n   ignore any protocol name that it does not recognize.  A new\n   ServerHello
      extension type\n   (\"application_layer_protocol_negotiation(16)\") MAY be returned
      to the\n   client within the extended ServerHello message.  The \"extension_data\"\n
      \  field of the (\"application_layer_protocol_negotiation(16)\") extension\n
      \  is structured the same as described above for the client\n   \"extension_data\",
      except that the \"ProtocolNameList\" MUST contain\n   exactly one \"ProtocolName\".\n
      \  Therefore, a full handshake with the\n   \"application_layer_protocol_negotiation\"
      extension in the ClientHello\n   and ServerHello messages has the following
      flow (contrast with\n   Section 7.3 of [RFC5246]):\n   Client                                              Server\n
      \  ClientHello                     -------->       ServerHello\n     (ALPN extension
      &                               (ALPN extension &\n      list of protocols)
      \                             selected protocol)\n                                                   Certificate*\n
      \                                                  ServerKeyExchange*\n                                                   CertificateRequest*\n
      \                                  <--------       ServerHelloDone\n   Certificate*\n
      \  ClientKeyExchange\n   CertificateVerify*\n   [ChangeCipherSpec]\n   Finished
      \                       -------->\n                                                   [ChangeCipherSpec]\n
      \                                  <--------       Finished\n   Application
      Data                <------->       Application Data\n                                 Figure
      1\n   * Indicates optional or situation-dependent messages that are not\n   always
      sent.\n   An abbreviated handshake with the\n   \"application_layer_protocol_negotiation\"
      extension has the following\n   flow:\n   Client                                              Server\n
      \  ClientHello                     -------->       ServerHello\n     (ALPN extension
      &                               (ALPN extension &\n      list of protocols)
      \                             selected protocol)\n                                                   [ChangeCipherSpec]\n
      \                                  <--------       Finished\n   [ChangeCipherSpec]\n
      \  Finished                        -------->\n   Application Data                <------->
      \      Application Data\n                                 Figure 2\n   Unlike
      many other TLS extensions, this extension does not establish\n   properties
      of the session, only of the connection.  When session\n   resumption or session
      tickets [RFC5077] are used, the previous\n   contents of this extension are
      irrelevant, and only the values in the\n   new handshake messages are considered.\n"
    title: 3.1.  The Application-Layer Protocol Negotiation Extension
  - contents:
    - "3.2.  Protocol Selection\n   It is expected that a server will have a list
      of protocols that it\n   supports, in preference order, and will only select
      a protocol if the\n   client supports it.  In that case, the server SHOULD select
      the most\n   highly preferred protocol that it supports and that is also\n   advertised
      by the client.  In the event that the server supports no\n   protocols that
      the client advertises, then the server SHALL respond\n   with a fatal \"no_application_protocol\"
      alert.\n   enum {\n       no_application_protocol(120),\n       (255)\n   }
      AlertDescription;\n   The protocol identified in the\n   \"application_layer_protocol_negotiation\"
      extension type in the\n   ServerHello SHALL be definitive for the connection,
      until\n   renegotiated.  The server SHALL NOT respond with a selected protocol\n
      \  and subsequently use a different protocol for application data\n   exchange.\n"
    title: 3.2.  Protocol Selection
  title: 3.  Application-Layer Protocol Negotiation
- contents:
  - "4.  Design Considerations\n   The ALPN extension is intended to follow the typical
    design of TLS\n   protocol extensions.  Specifically, the negotiation is performed\n
    \  entirely within the client/server hello exchange in accordance with\n   the
    established TLS architecture.  The\n   \"application_layer_protocol_negotiation\"
    ServerHello extension is\n   intended to be definitive for the connection (until
    the connection is\n   renegotiated) and is sent in plaintext to permit network
    elements to\n   provide differentiated service for the connection when the TCP
    or UDP\n   port number is not definitive for the application-layer protocol to\n
    \  be used in the connection.  By placing ownership of protocol\n   selection
    on the server, ALPN facilitates scenarios in which\n   certificate selection or
    connection rerouting may be based on the\n   negotiated protocol.\n   Finally,
    by managing protocol selection in the clear as part of the\n   handshake, ALPN
    avoids introducing false confidence with respect to\n   the ability to hide the
    negotiated protocol in advance of\n   establishing the connection.  If hiding
    the protocol is required,\n   then renegotiation after connection establishment,
    which would\n   provide true TLS security guarantees, would be a preferred\n   methodology.\n"
  title: 4.  Design Considerations
- contents:
  - "5.  Security Considerations\n   The ALPN extension does not impact the security
    of TLS session\n   establishment or application data exchange.  ALPN serves to
    provide\n   an externally visible marker for the application-layer protocol\n
    \  associated with the TLS connection.  Historically, the application-\n   layer
    protocol associated with a connection could be ascertained from\n   the TCP or
    UDP port number in use.\n   Implementers and document editors who intend to extend
    the protocol\n   identifier registry by adding new protocol identifiers should\n
    \  consider that in TLS versions 1.2 and below the client sends these\n   identifiers
    in the clear.  They should also consider that, for at\n   least the next decade,
    it is expected that browsers would normally\n   use these earlier versions of
    TLS in the initial ClientHello.\n   Care must be taken when such identifiers may
    leak personally\n   identifiable information, or when such leakage may lead to
    profiling\n   or to leaking of sensitive information.  If any of these apply to\n
    \  this new protocol identifier, the identifier SHOULD NOT be used in\n   TLS
    configurations where it would be visible in the clear, and\n   documents specifying
    such protocol identifiers SHOULD recommend\n   against such unsafe use.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   The IANA has updated its \"ExtensionType Values\"
    registry to include\n   the following entry:\n      16 application_layer_protocol_negotiation\n
    \  This document establishes a registry for protocol identifiers\n   entitled
    \"Application-Layer Protocol Negotiation (ALPN) Protocol IDs\"\n   under the existing
    \"Transport Layer Security (TLS) Extensions\"\n   heading.\n   Entries in this
    registry require the following fields:\n   o  Protocol: The name of the protocol.\n
    \  o  Identification Sequence: The precise set of octet values that\n      identifies
    the protocol.  This could be the UTF-8 encoding\n      [RFC3629] of the protocol
    name.\n   o  Reference: A reference to a specification that defines the\n      protocol.\n
    \  This registry operates under the \"Expert Review\" policy as defined in\n   [RFC5226].
    \ The designated expert is advised to encourage the\n   inclusion of a reference
    to a permanent and readily available\n   specification that enables the creation
    of interoperable\n   implementations of the identified protocol.\n   The initial
    set of registrations for this registry is as follows:\n   Protocol:  HTTP/1.1\n
    \  Identification Sequence:\n      0x68 0x74 0x74 0x70 0x2f 0x31 0x2e 0x31 (\"http/1.1\")\n
    \  Reference:  [RFC7230]\n   Protocol:  SPDY/1\n   Identification Sequence:\n
    \     0x73 0x70 0x64 0x79 0x2f 0x31 (\"spdy/1\")\n   Reference:\n      http://dev.chromium.org/spdy/spdy-protocol/spdy-protocol-draft1\n
    \  Protocol:  SPDY/2\n   Identification Sequence:\n      0x73 0x70 0x64 0x79 0x2f
    0x32 (\"spdy/2\")\n   Reference:\n      http://dev.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2\n
    \  Protocol:  SPDY/3\n   Identification Sequence:\n      0x73 0x70 0x64 0x79 0x2f
    0x33 (\"spdy/3\")\n   Reference:\n      http://dev.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   This document benefitted specifically from the Next
    Protocol\n   Negotiation (NPN) extension document authored by Adam Langley and\n
    \  from discussions with Tom Wesselman and Cullen Jennings, both of\n   Cisco.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n
      \             10646\", STD 63, RFC 3629, November 2003.\n   [RFC5226]  Narten,
      T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations
      Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC7230]  Fielding, R. and
      J. Reschke, \"Hypertext Transfer Protocol\n              (HTTP/1.1): Message
      Syntax and Routing\", RFC 7230, June\n              2014.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [HTTP2]    Belshe, M., Peon, R., and M. Thomson,
      \"Hypertext Transfer\n              Protocol version 2\", Work in Progress,
      June 2014.\n   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n
      \             \"Transport Layer Security (TLS) Session Resumption without\n
      \             Server-Side State\", RFC 5077, January 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Stephan Friedl\n   Cisco Systems, Inc.\n   170 West Tasman
    Drive\n   San Jose, CA  95134\n   USA\n   Phone: (720)562-6785\n   EMail: sfriedl@cisco.com\n
    \  Andrei Popov\n   Microsoft Corp.\n   One Microsoft Way\n   Redmond, WA  98052\n
    \  USA\n   EMail: andreipo@microsoft.com\n   Adam Langley\n   Google Inc.\n   USA\n
    \  EMail: agl@google.com\n   Emile Stephan\n   Orange\n   2 avenue Pierre Marzin\n
    \  Lannion  F-22307\n   France\n   EMail: emile.stephan@orange.com\n"
  title: Authors' Addresses
