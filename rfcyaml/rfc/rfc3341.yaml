- title: __initial_text__
  contents:
  - '             The Application Exchange (APEX) Access Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the Application Exchange (APEX) access service,\n\
    \   addressed as the well-known endpoint \"apex=access\".  The access\n   service\
    \ is used to control use of both the APEX \"relaying mesh\" and\n   other APEX\
    \ services.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Use and Management of Access Information . . . . . .\
    \ . . . . .  3\n   2.1 Querying Access Information  . . . . . . . . . . . . .\
    \ . . . .  3\n   2.2 Retrieval of Access Information  . . . . . . . . . . . .\
    \ . . .  4\n   2.3 Update of Access Information . . . . . . . . . . . . . . .\
    \ . .  5\n   3.  Format of Access Entries . . . . . . . . . . . . . . . . . .\
    \ .  9\n   3.1 Finding the Appropriate Entry: Matching Owners and Actors  . .\
    \ 11\n   3.2 Creating and Updating Access Entries . . . . . . . . . . . . . 14\n\
    \   4.  The Access Service . . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \ 4.1 Use of XML and MIME  . . . . . . . . . . . . . . . . . . . . . 15\n   4.2\
    \ The Query Operation  . . . . . . . . . . . . . . . . . . . . . 16\n   4.3 The\
    \ Get Operation  . . . . . . . . . . . . . . . . . . . . . . 17\n   4.4 The Set\
    \ Operation  . . . . . . . . . . . . . . . . . . . . . . 18\n   4.5 The Reply\
    \ Operation  . . . . . . . . . . . . . . . . . . . . . 20\n   5.  Registration:\
    \ The Access Service . . . . . . . . . . . . . . . 20\n   6.  The Access Service\
    \ DTD . . . . . . . . . . . . . . . . . . . . 21\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 23\n       References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 23\n       Authors' Addresses . . . . .\
    \ . . . . . . . . . . . . . . . . . 24\n   A.  Acknowledgements . . . . . . .\
    \ . . . . . . . . . . . . . . . . 25\n       Full Copyright Statement . . . .\
    \ . . . . . . . . . . . . . . . 26\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo describes an access service that is built upon\
    \ the APEX [1]\n   \"relaying mesh\".  The APEX access service is used to control\
    \ use of\n   both the relaying mesh and other APEX services.\n   APEX, at its\
    \ core, provides a best-effort datagram service.  Within\n   an administrative\
    \ domain, all relays must be able to handle messages\n   for any endpoint within\
    \ that domain.  APEX services are logically\n   defined as endpoints but given\
    \ their ubiquitous semantics they do not\n   necessarily need to be associated\
    \ with a single physical endpoint.\n   As such, they may be provisioned co-resident\
    \ with each relay within\n   an administrative domain, even though they are logically\
    \ provided on\n   top of the relaying mesh, i.e.,\n      +----------+     +----------+\
    \    +----------+    +---------+\n      |   APEX   |     |   APEX   |    |   APEX\
    \   |    |         |\n      |  access  |     | presence |    |  report  |    |\
    \   ...   |\n      | service  |     |  service |    | service  |    |        \
    \ |\n      +----------+     +----------+    +----------+    +---------+\n    \
    \       |                |               |               |\n           |     \
    \           |               |               |\n   +----------------------------------------------------------------+\n\
    \   |                                                                |\n   | \
    \                           APEX core                           |\n   |      \
    \                                                          |\n   +----------------------------------------------------------------+\n\
    \   That is, applications communicate with an APEX service by exchanging\n   data\
    \ with a \"well-known endpoint\" (WKE).\n   APEX applications communicate with\
    \ the access service by exchanging\n   data with the well-known endpoint \"apex=access\"\
    \ in the corresponding\n   administrative domain, e.g., \"apex=access@example.com\"\
    \ is the\n   endpoint associated with the access service in the \"example.com\"\
    \n   administrative domain.\n   Note that within a single administrative domain,\
    \ the relaying mesh\n   makes use of the APEX access service in order to determine\
    \ if an\n   originator is allowed to transmit data to a recipient (c.f., Step\
    \ 5.3\n   of Section 4.4.4.1 of [1]).\n"
- title: 2. Use and Management of Access Information
  contents:
  - "2. Use and Management of Access Information\n   Access information is organized\
    \ around access entries, each of which\n   contains:\n   o  an owner: an APEX\
    \ address with which the entry is associated;\n   o  an actor: an APEX address\
    \ that is granted permission to perform\n         some action in the context of\
    \ the owner;\n   o  a list of actions; and,\n   o  a timestamp indicating when\
    \ the service last created or modified\n         the access entry.\n   The access\
    \ entry for a given owner controls access to a potentially\n   large range of\
    \ different APEX services, such as data delivery, access\n   control, and presence\
    \ information.  In addition, Section 4.5 of [1]\n   discusses APEX access policies\
    \ that govern such activities as peer\n   authentication, message relaying, and\
    \ so on.\n   Management of access information falls into three categories:\n \
    \  o  applications may query the access service to see if one or more\n      actions\
    \ are allowed;\n   o  applications may retrieve access information associated\
    \ with an\n      owner/actor combination; and,\n   o  applications may modify\
    \ (i.e., create, replace, or delete) access\n      information associated with\
    \ an owner/actor combination.\n   Each is now described in turn.\n"
- title: 2.1 Querying Access Information
  contents:
  - "2.1 Querying Access Information\n   When an application wants to determine whether\
    \ one or more actions\n   are allowed for an owner/actor combination, it sends\
    \ a \"query\"\n   element to the service, e.g.,\n       +-------+            \
    \      +-------+\n       |       | -- data -------> |       |\n       | appl.\
    \ |                  | relay |\n       |       | <--------- ok -- |       |\n\
    \       +-------+                  +-------+\n     C: <data content='#Content'>\n\
    \            <originator identity='fred@example.com' />\n            <recipient\
    \ identity='apex=access@example.com' />\n            <data-content Name='Content'>\n\
    \                <query owner='fred@example.com' transID='1'\n               \
    \        actor='barney@example.com'\n                       actions='core:data\
    \ presence:subscribe' />\n            </data-content>\n        </data>\n     S:\
    \ <ok />\n   The service immediately responds with either an allow or deny\n \
    \  operation containing the same transaction-identifier, where \"allow\"\n   means\
    \ that all of the actions listed in the query are permitted,\n   e.g.,\n     \
    \                               +-------+                  +-------+\n       \
    \                             |       | <------- data -- |       |\n         \
    \                           | relay |                  |access |\n           \
    \                         |       | -- ok ---------> |  svc. |\n             \
    \                       +-------+                  +-------+\n       C: <data\
    \ content='#Content'>\n              <originator identity='apex=access@example.com'\
    \ />\n              <recipient identity='fred@example.com' />\n              <data-content\
    \ Name='Content'>\n                  <allow transID='1' />\n              </data-content>\n\
    \          </data>\n       S: <ok />\n   or\n       C: <data content='#Content'>\n\
    \              <originator identity='apex=access@example.com' />\n           \
    \   <recipient  identity='fred@example.com' />\n              <data-content Name='Content'>\n\
    \                  <deny transID='1' />\n              </data-content>\n     \
    \     </data>\n       S: <ok />\n"
- title: 2.2 Retrieval of Access Information
  contents:
  - "2.2 Retrieval of Access Information\n   When an application wants to retrieve\
    \ the access entry associated\n   with an owner/actor combination (typically in\
    \ preparation for\n   updating that access information), it sends a \"get\" element\
    \ to the\n   service, e.g.,\n       +-------+                  +-------+\n   \
    \    |       | -- data -------> |       |\n       | appl. |                  |\
    \ relay |\n       |       | <--------- ok -- |       |\n       +-------+     \
    \             +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='fred@example.com' />\n            <recipient identity='apex=access@example.com'\
    \ />\n            <data-content Name='Content'>\n                <get transID='2'\n\
    \                     owner='fred@example.com'\n                     actor='*@example.com'\
    \ />\n            </data-content>\n        </data>\n     S: <ok />\n   The service\
    \ immediately responds with a set operation containing the\n   access entry and\
    \ the same transaction-identifier, e.g.,\n                                  +-------+\
    \                  +-------+\n                                  |       | <-------\
    \ data -- |       |\n                                  | relay |             \
    \     |access |\n                                  |       | -- ok --------->\
    \ |  svc. |\n                                  +-------+                  +-------+\n\
    \     C: <data content='#Content'>\n            <originator identity='apex=access@example.com'\
    \ />\n            <recipient identity='fred@example.com' />\n            <data-content\
    \ Name='Content'>\n                <set transID='2'>\n                    <access\
    \ owner='fred@example.com'\n                            actor='*@example.com'\n\
    \                            actions='core:data presence:subscribe'\n        \
    \                    lastUpdate='2000-05-14T13:02:00-08:00' />\n             \
    \   </set>\n            </data-content>\n        </data>\n     S: <ok />\n"
- title: 2.3 Update of Access Information
  contents:
  - "2.3 Update of Access Information\n   When an application wants to create or modify\
    \ an access entry\n   associated with an owner/actor combination, it sends a \"\
    set\" element\n   to the service containing the new access entry, e.g.,\n    \
    \   +-------+                  +-------+\n       |       | -- data -------> |\
    \       |\n       | appl. |                  | relay |\n       |       | <---------\
    \ ok -- |       |\n       +-------+                  +-------+\n     C: <data\
    \ content='#Content'>\n            <originator identity='wilma@example.com' />\n\
    \            <recipient identity='apex=access@example.com' />\n            <data-content\
    \ Name='Content'>\n                <set transID='1'>\n                    <access\
    \ owner='fred@example.com'\n                            actor='*@example.com'\n\
    \                            actions='core:data presence:subscribe'\n        \
    \                    lastUpdate='2000-05-14T13:02:00-08:00' />\n             \
    \   </set>\n            </data-content>\n        </data>\n     S: <ok />\n   Note\
    \ that Step 4 of Section 4.4 requires that the \"lastUpdate\"\n   attribute of\
    \ an access entry be supplied in order to update that\n   entry; accordingly,\
    \ applications must successfully retrieve an access\n   entry prior to trying\
    \ to modify that entry.  (Naturally,\n   administrators should ensure that applications\
    \ authorized to modify\n   an access entry are also authorized to retrieve that\
    \ entry.)\n   The service immediately responds with a reply operation containing\n\
    \   the same transaction-identifier, e.g.,\n                                 \
    \ +-------+                  +-------+\n                                  |  \
    \     | <------- data -- |       |\n                                  | relay\
    \ |                  |access |\n                                  |       | --\
    \ ok ---------> |  svc. |\n                                  +-------+       \
    \           +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=access@example.com' />\n            <recipient identity='wilma@example.com'\
    \ />\n            <data-content Name='Content'>\n                <reply code='250'\
    \ transID='1' />\n            </data-content>\n        </data>\n     S: <ok />\n\
    \   Note that Steps 6.2 and 9.2 of Section 4.4 require that the access\n   service\
    \ update the \"lastUpdate\" attribute of an access entry when it\n   is created\
    \ or modified.\n   The service also immediately sends a set operation to the owner\n\
    \   attribute associated with the access entry, e.g.,\n                      \
    \            +-------+                  +-------+\n                          \
    \        |       | <------- data -- |       |\n                              \
    \    | relay |                  |access |\n                                  |\
    \       | -- ok ---------> |  svc. |\n                                  +-------+\
    \                  +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=access@example.com' />\n            <recipient identity='fred@example.com'\
    \ />\n            <data-content Name='Content'>\n                <set transID='1'>\n\
    \                    <access owner='fred@example.com'\n                      \
    \      actor='*@example.com'\n                            actions='core:data presence:subscribe'\n\
    \                            lastUpdate='2000-05-14T23:02:00-08:00' />\n     \
    \           </set>\n            </data-content>\n        </data>\n     S: <ok\
    \ />\n   When an application wants to delete the access entry associated with\n\
    \   an owner/actor combination, it sends a \"set\" element to the service\n  \
    \ omitting the permitted actions, e.g.,\n       +-------+                  +-------+\n\
    \       |       | -- data -------> |       |\n       | appl. |               \
    \   | relay |\n       |       | <--------- ok -- |       |\n       +-------+ \
    \                 +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='wilma@example.com' />\n            <recipient identity='apex=access@example.com'\
    \ />\n            <data-content Name='Content'>\n                <set transID='2'>\n\
    \                    <access owner='fred@example.com'\n                      \
    \      actor='*@example.com'\n                            lastUpdate='2000-05-14T13:02:00-08:00'\
    \ />\n                </set>\n            </data-content>\n        </data>\n \
    \    S: <ok />\n   The service immediately responds with a reply operation containing\n\
    \   the same transaction-identifier, e.g.,\n                                 \
    \ +-------+                  +-------+\n                                  |  \
    \     | <------- data -- |       |\n                                  | relay\
    \ |                  |access |\n                                  |       | --\
    \ ok ---------> |  svc. |\n                                  +-------+       \
    \           +-------+\n     C: <data content='#Content'>\n            <originator\
    \ identity='apex=access@example.com' />\n            <recipient identity='wilma@example.com'\
    \ />\n            <data-content Name='Content'>\n                <reply code='250'\
    \ transID='2' />\n            </data-content>\n        </data>\n     S: <ok />\n\
    \   The service also immediately sends a set operation to the owner\n   attribute\
    \ associated with the access entry, e.g.,\n                                  +-------+\
    \                  +-------+\n                                  |       | <-------\
    \ data -- |       |\n                                  | relay |             \
    \     |access |\n                                  |       | -- ok --------->\
    \ |  svc. |\n                                  +-------+                  +-------+\n\
    \     C: <data content='#Content'>\n            <originator identity='apex=access@example.com'\
    \ />\n            <recipient identity='fred@example.com' />\n            <data-content\
    \ Name='Content'>\n                <set transID='2'>\n                    <access\
    \ owner='fred@example.com'\n                            actor='*@example.com'\n\
    \                            lastUpdate='2000-05-14T13:02:00-08:00' />\n     \
    \           </set>\n            </data-content>\n        </data>\n     S: <ok\
    \ />\n   Because there are no actions associated with this access entry, the\n\
    \   owner knows that the entry has been deleted.\n   Note that because access\
    \ control supported limited wildcarding of\n   actors, deleting an access entry\
    \ for a particular owner/actor\n   combination, may modify, rather than remove,\
    \ permission.  Because of\n   this, a special action, \"all:none\", is used.\n\
    \   For example, consider these two access entries:\n       <access owner='fred@example.com'\n\
    \               actor='barney@example.com'\n               actions='core:data\
    \ presence:subscribe presence:watch'\n               lastUpdate='2000-05-14T13:20:00-08:00'\
    \ />\n       <access owner='fred@example.com'\n               actor='*@example.com'\n\
    \               actions='core:data'\n               lastUpdate='2000-05-14T13:20:00-08:00'\
    \ />\n   Deleting the first access entry will not remove all permissions for\n\
    \   for the actor \"barney@example.com\".\n   Instead, the first access entry\
    \ should be modified thusly:\n       <access owner='fred@example.com'\n      \
    \         actor='barney@example.com'\n               actions='all:none'\n    \
    \           lastUpdate='2000-05-14T13:20:00-08:00' />\n"
- title: 3. Format of Access Entries
  contents:
  - "3. Format of Access Entries\n   Each administrative domain is responsible for\
    \ maintaining one or more\n   \"access entries\" for each of its endpoints and\
    \ associated\n   subaddresses (regardless of whether those addresses are currently\n\
    \   attached to the relaying mesh).\n   A separate access entry is required for\
    \ each actor or group of actors\n   for whom access permission is specified. \
    \ Section 6 defines the\n   syntax for access entries.  Each access entry has\
    \ an \"owner\"\n   attribute, an \"actor\" attribute, an \"actions\" attribute,\
    \ a\n   \"lastUpdate\" attribute, and no content:\n   o  the \"owner\" attribute\
    \ specifies the address (endpoint or\n      subaddress) associated with the access\
    \ entry;\n   o  the \"actor\" attribute specifies an entity or group of entities\
    \ for\n      whom access permissions are specified, as described below;\n   o\
    \  the \"actions\" attribute specifies the permissions granted to the\n      actor\
    \ in the context of the owner; and,\n   o  the \"lastUpdate\" attribute specifies\
    \ the date and time that the\n      service last created or modified the access\
    \ entry.\n   An action is specified as a service/operation pair, e.g., the action\n\
    \   \"presence:publish\" refers to the \"publish\" operation of the\n   \"presence\"\
    \ service.  Two service values are reserved:\n   o  \"all\" is used to refer to\
    \ all services, e.g., \"all:data\"; and,\n   o  \"core\" is used to refer to the\
    \ service implemented by the relaying\n      mesh, e.g., the \"core:data\" permission\
    \ is consulted by the\n      relaying mesh (c.f., Step 5.3 of Section 4.4.4.1\
    \ of [1]).\n   Further, two operation values are reserved:\n   o  \"all\" is used\
    \ to refer to all operations, e.g., \"presence:all\";\n      and,\n   o  \"none\"\
    \ is used to refer to no operations whatsoever, e.g.,\n      \"all:none\".\n \
    \     An actor is an APEX address and is specified using the \"entity\"\n    \
    \  syntax specified in Section 2.2 of [1].  However, both the \"local\"\n    \
    \  and \"domain\" parts may contain limited wildcarding:\n      o  The \"local\"\
    \ part is either:\n      *  a literal string (e.g., \"fred\");\n      *  a subaddress\
    \ wildcard (e.g., \"fred/*\" or \"apex=pubsub/*\"); or,\n      *  the value \"\
    apex=*\", specifying all APEX services;\n      *  the value \"*\", specifying\
    \ any address other than an APEX\n         service.\n   o  The \"domain\" part\
    \ is either:\n      *  a FQDN (e.g., \"example.com\");\n      *  a domain wildcard\
    \ (e.g., \"*.example.com\"); or,\n      *  the value \"*\", specifying all administrative\
    \ domains.\n      Note that in the case of a domain wildcard, the wildcard itself\n\
    \      matches zero or more subdomains, e.g., \"*.example.com\" matches\n    \
    \  \"example.com\", \"foo.example.com\", \"bar.foo.example.com\", and so\n   \
    \   on.)\n   The following default entries are provided for each owner, but are\n\
    \   overridden by an explicitly supplied entry with the same actor value:\n  \
    \    actor='local@domain'  actions='all:all'\n      actor='apex=*@domain' actions='all:all'\n\
    \      actor='apex=*@*'      actions='core:data'\n      actor='*@*'          \
    \ actions='all:none'\n   where \"local@domain\" specifies the owner associated\
    \ with the access\n   entry.\n   For example, the explicit entry\n      actor='*@*'\
    \           actions='core:data'\n   allows endpoints from any domain to use the\
    \ relaying mesh to send\n   data to the owner, but does not override the default\
    \ entry for\n   \"apex=*@domain\", which allows all APEX services in the owner's\
    \ domain\n   access to all actions.\n   APEX endpoint names can legitimately contain\
    \ the character '*', but\n   access entries use '*' to indicate wildcarding. \
    \ Accordingly, the\n   two-character sequence '\\*' is used to avoid ambiguity\
    \ in the \"actor\"\n   attribute.  Similarly, to explicitly specify an endpoint\
    \ name\n   containing '\\' in the \"actor\" attribute, the two-character sequence\n\
    \   '\\\\' is used.\n   Note that this convention is used only for the \"actor\"\
    \ attribute of\n   the \"get\" operation and of the \"access\" entry that appears\
    \ in the\n   \"set\" operation; however, this convention is not used in the \"\
    query\"\n   operation, as this operation does not allow wildcarding.\n   For example,\
    \ to specify the endpoint named as \"a\\b*c@example.com\" in\n   the \"get\" operation\
    \ or in an \"access\" entry, the string\n   \"a\\\\b\\*c@example.com\" is used;\
    \ but in the \"query\" operation, the\n   string \"a\\b*c@example.com\" is used.\
    \  (Of course, as name allocation\n   is a local matter, these complications can\
    \ be avoided by the simple\n   expedient of not using endpoint names containing\
    \ '*' or '\\'.)\n"
- title: '3.1 Finding the Appropriate Entry: Matching Owners and Actors'
  contents:
  - "3.1 Finding the Appropriate Entry: Matching Owners and Actors\n   The use of\
    \ actor wildcarding makes it possible for several access\n   entries to apply\
    \ for a given owner/actor combination.  When\n   determining which access entry\
    \ to use when responding to the query\n   operation, the algorithm is:\n   o \
    \ Consider only those access entries that are associated with the\n      given\
    \ owner.\n   o  Consider only those access entries in which the actor value\n\
    \      matches the actor address in the query.  If the wildcard character\n  \
    \    ('*') is present, then it a match is possible only if each\n      wildcard\
    \ character can be replaced with a non-empty character\n      sequence (one or\
    \ more characters) to obtain a value identical to\n      the address in the query.\n\
    \   o  Order those remaining access entries:\n      *  Use the exactness of the\
    \ match with the domain part of the\n         actor value as the primary key;\
    \ and,\n      *  Use the exactness of the match with the local part of the actor\n\
    \         value as the secondary key.\n   o  When matching with the domain part,\
    \ an exact match is the best\n      match; otherwise, the shorter the wildcard\
    \ match, the higher the\n      priority.\n      For example, if the actor's domain\
    \ is \"bar.foo.example.com\", a\n      match against an entry of \"*.foo.example.com\"\
    \ is better than a\n      match against an entry of \"*.example.com\".\n   o \
    \ When matching with the local part, an exact match is the best\n      match;\
    \ otherwise, the shorter the wildcard match, the higher the\n      priority. \
    \ This is true regardless of whether the wildcarding is\n      for subaddress\
    \ or service.  (Note that a local part with a\n      wildcard subaddress does\
    \ not have a non-empty match with the same\n      local part without a subaddress.)\n\
    \   For example, consider these access entries:\n      <access owner='fred@example.com'\n\
    \              actor='wilma@example.com'\n              actions='all:all'\n  \
    \            lastUpdate='2000-05-14T13:20:00-08:00' />\n      <access owner='fred@example.com'\n\
    \              actor='mr.slate@example.com'\n              actions='core:data'\n\
    \              lastUpdate='2000-05-14T13:20:00-08:00' />\n      <access owner='fred/appl=wb@example.com'\n\
    \              actor='barney/appl=wb@example.com'\n              actions='core:data'\n\
    \              lastUpdate='2000-05-14T13:20:00-08:00' />\n      <access owner='fred@example.com'\n\
    \              actor='*@example.com'\n              actions='core:data presence:subscribe\
    \ presence:watch'\n              lastUpdate='2000-05-14T13:20:00-08:00' />\n \
    \     <access owner='fred@example.com'\n              actor='*@*'\n          \
    \    actions='core:data'\n              lastUpdate='2000-05-14T13:20:00-08:00'\
    \ />\n   Briefly:\n   o  For addresses within the \"example.com\" administrative\
    \ domain:\n   *  \"fred\", \"wilma\", and all APEX services within the \"example.com\"\
    \n      administrative domain are allowed access to all operations for\n     \
    \ \"fred@example.com\";\n   *  \"mr.slate\" is allowed access only to send data\
    \ through the\n      relaying mesh to \"fred@example.com\";\n   *  \"barney/appl=wb\"\
    \ is allowed access only to send data to \"fred/\n      appl=wb\", a subaddress\
    \ of \"fred@example.com\"; and,\n   *  any other address within the \"example.com\"\
    \ administrative\n      domain is allowed access to send data and invoke the\n\
    \      \"subscribe\" and \"watch\" operations of the APEX presence service\n \
    \     with respect to \"fred@example.com\".\n   o  For any address outside the\
    \ \"example.com\" administrative domain,\n      the address is allowed access\
    \ to send data, regardless of whether\n      it is an APEX service.\n   Note that\
    \ although the four default entries are always available, the\n   explicit entry\
    \ for actor \"*@*\" overrides the corresponding default\n   entry.\n"
- title: 3.2 Creating and Updating Access Entries
  contents:
  - "3.2 Creating and Updating Access Entries\n   The get and set operations are provided\
    \ as a basic mechanism for\n   creating and updating access rules, for which no\
    \ special wildcard\n   processing is performed.\n   The actor value for an access\
    \ entry may contain limited wildcard\n   characters which have special significance\
    \ only when performing a\n   query operation (cf., Section 3.1).  For the purposes\
    \ of retrieving\n   and updating entries, actor values are treated simply as literal\n\
    \   names.\n"
- title: 4. The Access Service
  contents:
  - "4. The Access Service\n   Section 5 contains the APEX service registration for\
    \ the access\n   service:\n   o  Within an administrative domain, the service\
    \ is addressed using\n      the well-known endpoint of \"apex=access\".\n   o\
    \  Section 6 defines the syntax of the operations exchanged with the\n      service.\n\
    \   o  A consumer of the service initiates communications by sending data\n  \
    \    containing a query, get, or set operation.\n   o  The service replies to\
    \ these operations.\n   o  When an access entry is changed, the service sends\
    \ a notification\n      to the owner associated with the changed entry.\n   An\
    \ implementation of the service must maintain information about\n   access entries\
    \ in persistent storage.\n   Consult Section 6.1.1 of [1] for a discussion on\
    \ the properties of\n   long-lived transaction-identifiers.\n"
- title: 4.1 Use of XML and MIME
  contents:
  - "4.1 Use of XML and MIME\n   Section 4.1 of [1] describes how arbitrary MIME content\
    \ is exchanged\n   as a BEEP [2] payload.  For example, to transmit:\n       <data\
    \ content='...'>\n           <originator identity='fred@example.com' />\n    \
    \       <recipient identity='apex=access@example.com' />\n       </data>\n   \
    \ where \"...\" refers to:\n       <query owner='fred@example.com' transID='1'\n\
    \              actor='barney@example.com'\n              actions='core:data presence:subscribe'\
    \ />\n    then the corresponding BEEP message might look like this:\n       C:\
    \ MSG 1 2 . 42 1234\n       C: Content-Type: multipart/related; boundary=\"boundary\"\
    ;\n       C:               start=\"<1@example.com>\";\n       C:             \
    \  type=\"application/beep+xml\"\n       C:\n       C: --boundary\n       C: Content-Type:\
    \ application/beep+xml\n       C: Content-ID: <1@example.com>\n       C:\n   \
    \    C: <data content='cid:2@example.com'>\n       C:     <originator identity='fred@example.com'\
    \ />\n       C:     <recipient identity='apex=access@example.com' />\n       C:\
    \ </data>\n       C: --boundary\n       C: Content-Type: application/beep+xml\n\
    \       C: Content-ID: <2@example.com>\n       C:\n       C: <query owner='fred@example.com'\
    \ transID='1'\n       C:        actor='barney@example.com'\n       C:        actions='core:data\
    \ presence:subscribe' />\n       C: --boundary--\n       C: END\n    or this:\n\
    \       C: MSG 1 1 . 42 267\n       C: Content-Type: application/beep+xml\n  \
    \     C:\n       C: <data content='#Content'>\n       C:     <originator identity='fred@example.com'\
    \ />\n       C:     <recipient identity='apex=access@example.com' />\n       C:\
    \     <data-content Name='Content'>\n       C:         <query owner='fred@example.com'\
    \ transID='1'\n       C:                actor='barney@example.com'\n       C:\
    \                actions='core:data presence:subscribe' />\n       C:     </data-content>\n\
    \       C: </data>\n       C: END\n"
- title: 4.2 The Query Operation
  contents:
  - "4.2 The Query Operation\n   When an application wants to see if a particular\
    \ operation is\n   allowed, it sends a \"query\" element to the service.\n   The\
    \ \"query\" element has an \"owner\" attribute, an \"actor\" attribute,\n   an\
    \ \"actions\" attribute, a \"transID\" attribute, and no content:\n   o  the \"\
    owner\" attribute specifies the address associated with the\n      access entry;\n\
    \   o  the \"actor\" attribute specifies the address (without wildcarding)\n \
    \     for which access permissions are queried;\n   o  the \"actions\" attribute\
    \ specifies one or more actions for which\n      permission is queried; and,\n\
    \   o  the \"transID\" attribute specifies the transaction-identifier\n      associated\
    \ with this operation.\n   When the service receives a \"query\" element, we refer\
    \ to the \"owner\"\n   attribute as the \"subject\".  The service performs these\
    \ steps:\n   1. If the subject is outside this administrative domain, a \"reply\"\
    \n      element having code 553 is sent to the originator.\n   2. If the subject\
    \ does not refer to a valid address, a \"reply\"\n      element having code 550\
    \ is sent to the originator.\n   3. If the subject's access entry matching the\
    \ originator does not\n      contain an \"access:query\" token, a \"reply\" element\
    \ having code 537\n      is sent to the originator.\n   4. The subject's access\
    \ entry matching the actor attribute of the\n      query element is selected (cf.,\
    \ Section 3.1).\n   5. If all of the permissions in the \"actions\" attribute\
    \ of the query\n      element are contained in the selected access entry, then\
    \ an\n      \"allow\" element is sent to the originator.\n   6. Otherwise, a \"\
    deny\" element is sent to the originator.\n   Regardless of whether an \"allow\"\
    , \"deny\", or \"reply\" element is sent\n   to the originator, the \"transID\"\
    \ attribute is identical to the value\n   found in the \"query\" element sent\
    \ by the originator.\n"
- title: 4.3 The Get Operation
  contents:
  - "4.3 The Get Operation\n   Prior to creating or updating an access entry for some\
    \ owner/actor\n   combination, an application will usually need to retrieve any\n\
    \   existing access entry.  It does so by sending a \"get\" element to the\n \
    \  service.  In particular, a successful response returns a \"lastUpdate\"\n \
    \  value that is necessary when sending a subsequent \"set\" element.\n   The\
    \ \"get\" element has an \"owner\" attribute, an \"actor\" attribute, a\n   \"\
    transID\" attribute, and no content:\n   o  the \"owner\" attribute specifies\
    \ the address associated with the\n      access entry;\n   o  the \"actor\" attribute\
    \ specifies the address (with possible\n      wildcarding) for which access permissions\
    \ are retrieved; and,\n   o  the \"transID\" attribute specifies the transaction-identifier\n\
    \      associated with this operation.\n   When the service receives a \"get\"\
    \ element, we refer to the \"owner\"\n   attribute as the \"subject\".  The service\
    \ performs these steps:\n   1. If the subject is outside this administrative domain,\
    \ a \"reply\"\n      element having code 553 is sent to the originator.\n   2.\
    \ If the subject does not refer to a valid address, a \"reply\"\n      element\
    \ having code 550 is sent to the originator.\n   3. If the subject's access entry\
    \ matching the originator does not\n      contain an \"access:get\" token, a \"\
    reply\" element having code 537\n      is sent to the originator.\n   4. The subject's\
    \ access entry whose \"actor\" attribute identically\n      matches the \"actor\"\
    \ attribute of the \"get\" element is selected.\n   5. If no such entry exists,\
    \ a \"reply\" element having code 551 is sent\n      to the originator.\n   6.\
    \ Otherwise, a \"set\" element corresponding to the selected access\n      entry\
    \ is sent to the originator.\n   Regardless of whether a \"set\" or \"reply\"\
    \ element is sent to the\n   originator, the \"transID\" attribute is identical\
    \ to the value found\n   in the \"get\" element sent by the originator.\n"
- title: 4.4 The Set Operation
  contents:
  - "4.4 The Set Operation\n   When an application wants to modify (i.e., create,\
    \ replace, or\n   delete) the access entry associated with an owner/actor combination,\n\
    \   it sends a \"set\" element to the service.\n   The \"set\" element has a \"\
    transID\" attribute, and contains an \"access\"\n   element:\n   o  the \"transID\"\
    \ attribute specifies the transaction-identifier\n      associated with this operation;\
    \ and,\n   o  the \"access\" element contains the access entry to be created,\n\
    \      replaced, or deleted.\n   The \"access\" element has an \"owner\" attribute,\
    \ an \"actor\" attribute,\n   an optional \"actions\" attribute, an optional \"\
    lastUpdate\" attribute,\n   and no content:\n   o  the \"owner\" attribute specifies\
    \ the address associated with the\n      access entry;\n   o  the \"actor\" attribute\
    \ specifies the address (with possible\n      wildcarding) for which access permissions\
    \ are specified;\n   o  the \"actions\" attribute (present only to add or replace\
    \ an entry)\n      specifies one or more actions for which permission is to be\n\
    \      determined; and,\n   o  the \"lastUpdate\" attribute (present only to replace\
    \ or delete an\n      entry) specifies the current timestamp of the access entry\
    \ that is\n      to be replaced.\n   When the service receives a \"set\" element,\
    \ we refer to the \"owner\"\n   attribute of the access element as the \"subject\"\
    .  The service\n   performs these steps:\n   1. If the subject is outside this\
    \ administrative domain, a \"reply\"\n      element having code 553 is sent to\
    \ the originator.\n   2. If the subject does not refer to a valid address, a \"\
    reply\"\n      element having code 550 is sent to the originator.\n   3. If the\
    \ subject's access entry matching the originator does not\n      contain an \"\
    access:set\" token, a \"reply\" element having code 537\n      is sent to the\
    \ originator.\n   4. The subject's access entry whose \"actor\" attribute identically\n\
    \      matches the \"actor\" attribute of the \"set\" element is selected.\n \
    \  5. If no such entry exists and the \"lastUpdate\" attribute is present\n  \
    \    in the supplied \"set\" element, a \"reply\" element having code 555\n  \
    \    is sent to the originator.\n   6. If no such entry exists and the \"lastUpdate\"\
    \ attribute is absent\n      in the supplied \"set\" element, then:\n      1.\
    \ The access entry for the owner/actor combination is created\n         from the\
    \ supplied \"access\" element.\n      2. The \"lastUpdate\" attribute of that\
    \ access entry set to the\n         service's notion of the current date and time.\n\
    \      3. A \"reply\" element having code 250 is sent to the originator.\n   \
    \   4. A \"set\" element corresponding to the newly-created access entry\n   \
    \      is sent to the subject's address.\n   7. If the selected entry exists,\
    \ but its \"lastUpdate\" attribute is\n      not semantically identical to the\
    \ \"lastUpdate\" attribute of the\n      supplied \"access\" element, a \"reply\"\
    \ element having code 555 is\n      sent to the originator.\n   8. If \"actions\"\
    \ attribute of the supplied \"access\" element is not\n      present, then:\n\
    \      1. The selected entry is deleted.\n      2. A \"reply\" element having\
    \ code 250 is sent to the originator.\n      3. A \"set\" element corresponding\
    \ to the owner/actor combination,\n         but lacking an \"actions\" attribute\
    \ is sent to the subject's\n         address.\n   9. Otherwise:\n      1. The\
    \ access entry for the owner/actor combination is updated\n         from the supplied\
    \ \"access\" element.\n      2. The \"lastUpdate\" attribute of the updated access\
    \ entry is set\n         to the service's notion of the current date and time\
    \ (which\n         should be different from the \"lastUpdate\" value associated\
    \ with\n         any replaced entry).\n      3. A \"reply\" element having code\
    \ 250 is sent to the originator.\n      4. A \"set\" element corresponding to\
    \ the newly-updated access entry\n         is sent to the subject's address.\n\
    \   When sending the \"reply\" element, the \"transID\" attribute is\n   identical\
    \ to the value found in the \"set\" element sent by the\n   originator.\n"
- title: 4.5 The Reply Operation
  contents:
  - "4.5 The Reply Operation\n   While processing operations, the service may respond\
    \ with a \"reply\"\n   element.  Consult Sections 10.2 and 6.1.2 of [1], respectively,\
    \ for\n   the definition and an exposition of the syntax of the reply element.\n"
- title: '5. Registration: The Access Service'
  contents:
  - "5. Registration: The Access Service\n   Well-Known Endpoint: apex=access\n  \
    \ Syntax of Messages Exchanged: c.f., Section 6\n   Sequence of Messages Exchanged:\
    \ c.f., Section 4\n   Access Control Tokens: access:query, access:get, access:set\n\
    \   Contact Information: c.f., the \"Authors' Addresses\" section of this\n  \
    \    memo\n"
- title: 6. The Access Service DTD
  contents:
  - "6. The Access Service DTD\n   <!--\n     DTD for the APEX access service, as\
    \ of 2001-06-19\n     Refer to this DTD as:\n       <!ENTITY % APEXACCESS PUBLIC\
    \ \"-//IETF//DTD APEX ACCESS//EN\" \"\">\n       %APEXACCESS;\n     -->\n   <!ENTITY\
    \ % APEXCORE PUBLIC \"-//IETF//DTD APEX CORE//EN\" \"\">\n   %APEXCORE;\n   <!--\n\
    \     DTD data types:\n          entity        syntax/reference     example\n\
    \          ======        ================     =======\n       access actor\n \
    \         ACTOR         an ENDPOINT or a     *@example.com\n                 \
    \       wildcard\n       permitted actions\n          ACTIONS       a list of\
    \ access     \"core:any access:query\"\n                        tokens\n     -->\n\
    \   <!ENTITY  % ACTOR   \"CDATA\">\n   <!ENTITY  % ACTIONS \"NMTOKENS\">\n   <!--\n\
    \     Synopsis of the APEX access service\n       service WKE: apex=access\n \
    \      message exchanges:\n           consumer initiates    service replies\n\
    \           ==================    ================\n           query         \
    \        allow, deny, or reply\n           get                   set or reply\n\
    \           set                   reply\n           service initiates     consumer\
    \ replies\n           =================     ================\n           set \
    \                  (nothing)\n       access control:\n           token       \
    \          target\n           ==========            ======\n           access:query\
    \          for \"owner\" of \"access\" element\n           access:get        \
    \    for \"owner\" of \"access\" element\n           access:set            for\
    \ \"owner\" of \"access\" element\n     -->\n   <!ELEMENT query       EMPTY>\n\
    \   <!ATTLIST query\n             owner       %ENDPOINT;        #REQUIRED\n  \
    \           actor       %ACTOR;           #REQUIRED\n             actions    \
    \ %ACTIONS;         #REQUIRED\n             transID     %UNIQID;          #REQUIRED>\n\
    \   <!ELEMENT get         EMPTY>\n   <!ATTLIST get\n             owner       %ENDPOINT;\
    \        #REQUIRED\n             actor       %ACTOR;           #REQUIRED\n   \
    \          transID     %UNIQID;          #REQUIRED>\n   <!ELEMENT set        \
    \ (access)>\n   <!ATTLIST set\n             transID     %UNIQID;          #REQUIRED>\n\
    \   <!ELEMENT allow       EMPTY>\n   <!ATTLIST allow\n             transID   \
    \  %UNIQID;          #REQUIRED>\n   <!ELEMENT deny        EMPTY>\n   <!ATTLIST\
    \ deny\n             transID     %UNIQID;          #REQUIRED>\n   <!--\n     access\
    \ entries\n     -->\n   <!ELEMENT access      EMPTY>\n   <!ATTLIST access\n  \
    \           owner       %ENDPOINT;        #REQUIRED\n             actor      \
    \ %ACTOR;           #REQUIRED\n             actions     %ACTIONS;         #IMPLIED\n\
    \             lastUpdate  %TIMESTAMP;       #IMPLIED>\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Consult [1]'s Section 11 for a discussion of security\
    \ issues.\n   In addition, timestamps issued by the the access service may disclose\n\
    \   location information.  If this information is considered sensitive,\n   the\
    \ special timezone value \"-00:00\" may be used (after converting the\n   local\
    \ time accordingly).\n"
- title: References
  contents:
  - "References\n   [1]   Rose, M., Klyne, G. and D. Crocker, \"The Application Exchange\n\
    \         Core\", RFC 3340, July 2002.\n   [2]   Rose, M., \"The Blocks Extensible\
    \ Exchange Protocol Core\", RFC\n         3080, March 2001.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall T. Rose\n   Dover Beach Consulting, Inc.\n  \
    \ POB 255268\n   Sacramento, CA  95865-5268\n   US\n   Phone: +1 916 483 8878\n\
    \   EMail: mrose@dbc.mtview.ca.us\n   Graham Klyne\n   Clearswift Corporation\n\
    \   1310 Waterside\n   Arlington Business Park\n   Theale, Reading  RG7 4SA\n\
    \   UK\n   Phone: +44 11 8903 8903\n   EMail: Graham.Klyne@MIMEsweeper.com\n \
    \  David H. Crocker\n   Brandenburg Consulting\n   675 Spruce Drive\n   Sunnyvale,\
    \ CA  94086\n   US\n   Phone: +1 408 246 8253\n   EMail: dcrocker@brandenburg.com\n\
    \   URI:   http://www.brandenburg.com/\n"
- title: Appendix A. Acknowledgements
  contents:
  - "Appendix A. Acknowledgements\n   The authors gratefully acknowledge the contributions\
    \ of: Neil Cook,\n   Darren New, Chris Newman, Scott Pead, and Bob Wyman.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
