- title: __initial_text__
  contents:
  - ' DNS-Based Service Discovery (DNS-SD) Privacy and Security Requirements

    '
- title: Abstract
  contents:
  - "Abstract\n   DNS-SD (DNS-based Service Discovery) normally discloses information\n\
    \   about devices offering and requesting services.  This information\n   includes\
    \ hostnames, network parameters, and possibly a further\n   description of the\
    \ corresponding service instance.  Especially when\n   mobile devices engage in\
    \ DNS-based Service Discovery at a public\n   hotspot, serious privacy problems\
    \ arise.  We analyze the requirements\n   of a privacy-respecting discovery service.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8882.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Threat Model\n   3.  Threat Analysis\n\
    \     3.1.  Service Discovery Scenarios\n       3.1.1.  Private Client and Public\
    \ Server\n       3.1.2.  Private Client and Private Server\n       3.1.3.  Wearable\
    \ Client and Server\n     3.2.  DNS-SD Privacy Considerations\n       3.2.1. \
    \ Information Made Available Via DNS-SD Resource Records\n       3.2.2.  Privacy\
    \ Implication of Publishing Service Instance\n               Names\n       3.2.3.\
    \  Privacy Implication of Publishing Node Names\n       3.2.4.  Privacy Implication\
    \ of Publishing Service Attributes\n       3.2.5.  Device Fingerprinting\n   \
    \    3.2.6.  Privacy Implication of Discovering Services\n     3.3.  Security\
    \ Considerations\n       3.3.1.  Authenticity, Integrity, and Freshness\n    \
    \   3.3.2.  Confidentiality\n       3.3.3.  Resistance to Dictionary Attacks\n\
    \       3.3.4.  Resistance to Denial-of-Service Attacks\n       3.3.5.  Resistance\
    \ to Sender Impersonation\n       3.3.6.  Sender Deniability\n     3.4.  Operational\
    \ Considerations\n       3.4.1.  Power Management\n       3.4.2.  Protocol Efficiency\n\
    \       3.4.3.  Secure Initialization and Trust Models\n       3.4.4.  External\
    \ Dependencies\n   4.  Requirements for a DNS-SD Privacy Extension\n     4.1.\
    \  Private Client Requirements\n     4.2.  Private Server Requirements\n     4.3.\
    \  Security and Operation\n   5.  IANA Considerations\n   6.  References\n   \
    \  6.1.  Normative References\n     6.2.  Informative References\n   Acknowledgments\n\
    \   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DNS-Based Service Discovery (DNS-SD) [RFC6763] over Multicast\
    \ DNS\n   (mDNS) [RFC6762] enables zero-configuration service discovery in\n \
    \  local networks.  It is very convenient for users, but it requires the\n   public\
    \ exposure of the offering and requesting identities along with\n   information\
    \ about the offered and requested services.  Parts of the\n   published information\
    \ can seriously breach the user's privacy.  These\n   privacy issues and potential\
    \ solutions are discussed in [KW14a],\n   [KW14b], and [K17].  While the multicast\
    \ nature of mDNS makes these\n   risks obvious, most risks derive from the observability\
    \ of\n   transactions.  These risks also need to be mitigated when using\n   server-based\
    \ variants of DNS-SD.\n   There are cases when nodes connected to a network want\
    \ to provide or\n   consume services without exposing their identities to the\
    \ other\n   parties connected to the same network.  Consider, for example, a\n\
    \   traveler wanting to upload pictures from a phone to a laptop when\n   both\
    \ are connected to the Wi-Fi network of an Internet cafe, or two\n   travelers\
    \ who want to share files between their laptops when waiting\n   for their plane\
    \ in an airport lounge.\n   We expect that these exchanges will start with a discovery\
    \ procedure\n   using DNS-SD over mDNS.  One of the devices will publish the\n\
    \   availability of a service, such as a picture library or a file store\n   in\
    \ our examples.  The user of the other device will discover this\n   service and\
    \ then connect to it.\n   When analyzing these scenarios in Section 3.1, we find\
    \ that the DNS-\n   SD messages leak identifying information, such as the Service\n\
    \   Instance Name, the hostname, or service properties.  We use the\n   following\
    \ definitions:\n   Identity\n      In this document, the term \"identity\" refers\
    \ to the identity of\n      the entity (legal person) operating a device.\n  \
    \ Disclosing an Identity\n      In this document, \"disclosing an identity\" means\
    \ showing the\n      identity of operating entities to devices external to the\n\
    \      discovery process, e.g., devices on the same network link that are\n  \
    \    listening to the network traffic but are not actually involved in\n     \
    \ the discovery process.  This document focuses on identity\n      disclosure\
    \ by data conveyed via messages on the service discovery\n      protocol layer.\
    \  Still, identity leaks on deeper layers, e.g., the\n      IP layer, are mentioned.\n\
    \   Disclosing Information\n      In this document, \"disclosing information\"\
    \ is also focused on\n      disclosure of data conveyed via messages on the service\
    \ discovery\n      protocol layer, including both identity-revealing information\
    \ and\n      other still potentially sensitive data.\n"
- title: 2.  Threat Model
  contents:
  - "2.  Threat Model\n   This document considers the following attacker types sorted\
    \ by\n   increasing power.  All these attackers can either be passive (they\n\
    \   just listen to network traffic they have access to) or active (they\n   additionally\
    \ can craft and send malicious packets).\n   external\n      An external attacker\
    \ is not on the same network link as victim\n      devices engaging in service\
    \ discovery; thus, the external attacker\n      is in a different multicast domain.\n\
    \   on-link\n      An on-link attacker is on the same network link as victim devices\n\
    \      engaging in service discovery; thus, the on-link attacker is in\n     \
    \ the same multicast domain.  This attacker can also mount all\n      attacks\
    \ an external attacker can mount.\n   MITM\n      A Man-in-the-Middle (MITM) attacker\
    \ either controls (parts of) a\n      network link or can trick two parties to\
    \ send traffic via the\n      attacker; thus, the MITM attacker has access to\
    \ unicast traffic\n      between devices engaging in service discovery.  This\
    \ attacker can\n      also mount all attacks an on-link attacker can mount.\n"
- title: 3.  Threat Analysis
  contents:
  - "3.  Threat Analysis\n   In this section, we analyze how the attackers described\
    \ in the\n   previous section might threaten the privacy of entities operating\n\
    \   devices engaging in service discovery.  We focus on attacks\n   leveraging\
    \ data transmitted in service discovery protocol messages.\n"
- title: 3.1.  Service Discovery Scenarios
  contents:
  - "3.1.  Service Discovery Scenarios\n   In this section, we review common service\
    \ discovery scenarios and\n   discuss privacy threats and their privacy requirements.\
    \  In all three\n   of these common scenarios, the attacker is of the type passive\
    \ on-\n   link.\n"
- title: 3.1.1.  Private Client and Public Server
  contents:
  - "3.1.1.  Private Client and Public Server\n   Perhaps the simplest private discovery\
    \ scenario involves a single\n   client connecting to a public server through\
    \ a public network.  A\n   common example would be a traveler using a publicly\
    \ available printer\n   in a business center, in a hotel, or at an airport.\n\
    \            ___                                        o   ___\n           |\
    \   |   client                server           |* *|\n            \\_/      __\
    \                                    \\_/\n             |      / /   Discovery\
    \   +----------+          |\n            /|\\    /_/  <-----------> |  +----+\
    \  |         /|\\\n           / | \\__/                   +--|    |--+       \
    \ / | \\\n           David                                        Adversary\n\
    \   In that scenario, the server is public and wants to be discovered,\n   but\
    \ the client is private.  The adversary will be listening to the\n   network traffic,\
    \ trying to identify the visitors' devices and their\n   activity.  Identifying\
    \ devices leads to identifying people, either\n   for surveillance of these individuals\
    \ in the physical world or as a\n   preliminary step for a targeted cyber attack.\n\
    \   The requirement in that scenario is that the discovery activity\n   should\
    \ not disclose the identity of the client.\n"
- title: 3.1.2.  Private Client and Private Server
  contents:
  - "3.1.2.  Private Client and Private Server\n   The second private discovery scenario\
    \ involves a private client\n   connecting to a private server.  A common example\
    \ would be two people\n   engaging in a collaborative application in a public\
    \ place, such as an\n   airport's lounge.\n            ___                   \
    \            ___         o   ___\n           |   |   server          client  \
    \  |   |           |* *|\n            \\_/      __               __      \\_/\
    \             \\_/\n             |      / /   Discovery   \\ \\      |       \
    \        |\n            /|\\    /_/  <----------->  \\_\\    /|\\            \
    \ /|\\\n           / | \\__/                       \\__/ | \\           / | \\\
    \n          David                              Stuart        Adversary\n   In\
    \ that scenario, the collaborative application on one of the devices\n   will\
    \ act as a server, and the application on the other device will\n   act as a client.\
    \  The server wants to be discovered by the client but\n   has no desire to be\
    \ discovered by anyone else.  The adversary will be\n   listening to network traffic,\
    \ attempting to discover the identity of\n   devices as in the first scenario\
    \ and also attempting to discover the\n   patterns of traffic, as these patterns\
    \ reveal the business and social\n   interactions between the owners of the devices.\n\
    \   The requirement in that scenario is that the discovery activity\n   should\
    \ not disclose the identity of either the client or the server\n   nor reveal\
    \ the business and social interactions between the owners of\n   the devices.\n"
- title: 3.1.3.  Wearable Client and Server
  contents:
  - "3.1.3.  Wearable Client and Server\n   The third private discovery scenario involves\
    \ wearable devices.  A\n   typical example would be the watch on someone's wrist\
    \ connecting to\n   the phone in their pocket.\n            ___              \
    \                           o  ___\n           |   |   client                \
    \                 |* *|\n            \\_/                                    \
    \        \\_/\n             |     _/                                       |\n\
    \           / | \\__/  ^                                    / | \\\n         \
    \ /  |__     | Discovery                         /  |  \\\n         /   |\\ \\\
    \    v                                  /   |   \\\n            / \\\\_\\    \
    \                                     / \\\n           /   \\   server       \
    \                          /   \\\n           David                          \
    \              Adversary\n   This third scenario is in many ways similar to the\
    \ second scenario.\n   It involves two devices, one acting as server and the other\
    \ acting as\n   client, and it leads to the same requirement of the discovery\
    \ traffic\n   not disclosing the identity of either the client or the server.\
    \  The\n   main difference is that the devices are managed by a single owner,\n\
    \   which can lead to different methods for establishing secure relations\n  \
    \ between the devices.  There is also an added emphasis on hiding the\n   type\
    \ of devices that the person wears.\n   In addition to tracking the identity of\
    \ the owner of the devices, the\n   adversary is interested in the characteristics\
    \ of the devices, such\n   as type, brand, and model.  Identifying the type of\
    \ device can lead\n   to further attacks, from theft to device-specific hacking.\
    \  The\n   combination of devices worn by the same person will also provide a\n\
    \   \"fingerprint\" of the person, risking identification.\n   This scenario also\
    \ represents the general case of bringing private\n   Internet-of-Things (IoT)\
    \ devices into public places.  A wearable IoT\n   device might act as a DNS-SD/mDNS\
    \ client, which allows attackers to\n   infer information about devices' owners.\
    \  While the attacker might be\n   a person, as in the example figure, this could\
    \ also be abused for\n   large-scale data collection installing stationary IoT-device-tracking\n\
    \   servers in frequented public places.\n   The issues described in Section 3.1.1,\
    \ such as identifying people or\n   using the information for targeted attacks,\
    \ apply here too.\n"
- title: 3.2.  DNS-SD Privacy Considerations
  contents:
  - "3.2.  DNS-SD Privacy Considerations\n   While the discovery process illustrated\
    \ in the scenarios in\n   Section 3.1 most likely would be based on [RFC6762]\
    \ as a means for\n   making service information available, this document considers\
    \ all\n   kinds of means for making DNS-SD resource records available.  These\n\
    \   means comprise of but are not limited to mDNS [RFC6762], DNS servers\n   ([RFC1033],\
    \ [RFC1034], and [RFC1035]), the use of Service\n   Registration Protocol (SRP)\
    \ [SRP], and multi-link [RFC7558] networks.\n   The discovery scenarios in Section\
    \ 3.1 illustrate three separate\n   abstract privacy requirements that vary based\
    \ on the use case.  These\n   are not limited to mDNS.\n   1.  Client identity\
    \ privacy: Client identities are not leaked during\n       service discovery or\
    \ use.\n   2.  Multi-entity, mutual client and server identity privacy: Neither\n\
    \       client nor server identities are leaked during service discovery\n   \
    \    or use.\n   3.  Single-entity, mutual client and server identity privacy:\n\
    \       Identities of clients and servers owned and managed by the same\n    \
    \   legal person are not leaked during service discovery or use.\n   In this section,\
    \ we describe aspects of DNS-SD that make these\n   requirements difficult to\
    \ achieve in practice.  While it is intended\n   to be thorough, it is not possible\
    \ to be exhaustive.\n   Client identity privacy, if not addressed properly, can\
    \ be thwarted\n   by a passive attacker (see Section 2).  The type of passive\
    \ attacker\n   necessary depends on the means of making service information\n\
    \   available.  Information conveyed via multicast messages can be\n   obtained\
    \ by an on-link attacker.  Unicast messages are harder to\n   access, but if the\
    \ transmission is not encrypted they could still be\n   accessed by an attacker\
    \ with access to network routers or bridges.\n   Using multi-link service discovery\
    \ solutions [RFC7558], external\n   attackers have to be taken into consideration\
    \ as well, e.g., when\n   relaying multicast messages to other links.\n   Server\
    \ identity privacy can be thwarted by a passive attacker in the\n   same way as\
    \ client identity privacy.  Additionally, active attackers\n   querying for information\
    \ have to be taken into consideration as well.\n   This is mainly relevant for\
    \ unicast-based discovery, where listening\n   to discovery traffic requires a\
    \ MITM attacker; however, an external\n   active attacker might be able to learn\
    \ the server identity by just\n   querying for service information, e.g., via\
    \ DNS.\n"
- title: 3.2.1.  Information Made Available Via DNS-SD Resource Records
  contents:
  - "3.2.1.  Information Made Available Via DNS-SD Resource Records\n   DNS-Based\
    \ Service Discovery (DNS-SD) is defined in [RFC6763].  It\n   allows nodes to\
    \ publish the availability of an instance of a service\n   by inserting specific\
    \ records in the DNS ([RFC1033], [RFC1034], and\n   [RFC1035]) or by publishing\
    \ these records locally using multicast DNS\n   (mDNS) [RFC6762].  Available services\
    \ are described using three types\n   of records:\n   PTR Record\n      Associates\
    \ a service type in the domain with an \"instance\" name of\n      this service\
    \ type.\n   SRV Record\n      Provides the node name, port number, priority and\
    \ weight\n      associated with the service instance, in conformance with\n  \
    \    [RFC2782].\n   TXT Record\n      Provides a set of attribute-value pairs\
    \ describing specific\n      properties of the service instance.\n"
- title: 3.2.2.  Privacy Implication of Publishing Service Instance Names
  contents:
  - "3.2.2.  Privacy Implication of Publishing Service Instance Names\n   In the first\
    \ phase of discovery, clients obtain all PTR records\n   associated with a service\
    \ type in a given naming domain.  Each PTR\n   record contains a Service Instance\
    \ Name defined in Section 4 of\n   [RFC6763]:\n     Service Instance Name = <Instance>\
    \ . <Service> . <Domain>\n   The <Instance> portion of the Service Instance Name\
    \ is meant to\n   convey enough information for users of discovery clients to\
    \ easily\n   select the desired service instance.  Nodes that use DNS-SD over\
    \ mDNS\n   [RFC6762] in a mobile environment will rely on the specificity of the\n\
    \   instance name to identify the desired service instance.  In our\n   example\
    \ of users wanting to upload pictures to a laptop in an\n   Internet cafe, the\
    \ list of available service instances may look like:\n   Alice's Images      \
    \   . _imageStore._tcp . local\n   Alice's Mobile Phone   . _presence._tcp   .\
    \ local\n   Alice's Notebook       . _presence._tcp   . local\n   Bob's Notebook\
    \         . _presence._tcp   . local\n   Carol's Notebook       . _presence._tcp\
    \   . local\n   Alice will see the list on her phone and understand intuitively\
    \ that\n   she should pick the first item.  The discovery will \"just work\".\n\
    \   (Note that our examples of service names conform to the specification\n  \
    \ in Section 4.1 of [RFC6763] but may require some character escaping\n   when\
    \ entered in conventional DNS software.)\n   However, DNS-SD/mDNS will reveal\
    \ to anybody that Alice is currently\n   visiting the Internet cafe.  It further\
    \ discloses the fact that she\n   uses two devices, shares an image store, and\
    \ uses a chat application\n   supporting the _presence protocol on both of her\
    \ devices.  She might\n   currently chat with Bob or Carol, as they are also using\
    \ a _presence\n   supporting chat application.  This information is not just available\n\
    \   to devices actively browsing for and offering services but to anybody\n  \
    \ passively listening to the network traffic, i.e., a passive on-link\n   attacker.\n\
    \   There is, of course, also no authentication requirement to claim a\n   particular\
    \ instance name, so an active attacker can provide resources\n   that claim to\
    \ be Alice's but are not.\n"
- title: 3.2.3.  Privacy Implication of Publishing Node Names
  contents:
  - "3.2.3.  Privacy Implication of Publishing Node Names\n   The SRV records contain\
    \ the DNS name of the node publishing the\n   service.  Typical implementations\
    \ construct this DNS name by\n   concatenating the \"hostname\" of the node with\
    \ the name of the local\n   domain.  The privacy implications of this practice\
    \ are reviewed in\n   [RFC8117].  Depending on naming practices, the hostname\
    \ is either a\n   strong identifier of the device or, at a minimum, a partial\n\
    \   identifier.  It enables tracking of both the device and, by\n   extension,\
    \ the device's owner.\n"
- title: 3.2.4.  Privacy Implication of Publishing Service Attributes
  contents:
  - "3.2.4.  Privacy Implication of Publishing Service Attributes\n   The TXT record's\
    \ attribute-value pairs contain information on the\n   characteristics of the\
    \ corresponding service instance.  This in turn\n   reveals information about\
    \ the devices that publish services.  The\n   amount of information varies widely\
    \ with the particular service and\n   its implementation:\n   *  Some attributes,\
    \ such as the paper size available in a printer,\n      are the same on many devices\
    \ and thus only provide limited\n      information to a tracker.\n   *  Attributes\
    \ that have free-form values, such as the name of a\n      directory, may reveal\
    \ much more information.\n   Combinations of individual attributes have more information\
    \ power\n   than specific attributes and can potentially be used for\n   \"fingerprinting\"\
    \ a specific device.\n   Information contained in TXT records not only breaches\
    \ privacy by\n   making devices trackable but might directly contain private\n\
    \   information about the user.  For instance, the _presence service\n   reveals\
    \ the \"chat status\" to everyone in the same network.  Users\n   might not be\
    \ aware of that.\n   Further, TXT records often contain version information about\n\
    \   services, allowing potential attackers to identify devices running\n   exploit-prone\
    \ versions of a certain service.\n"
- title: 3.2.5.  Device Fingerprinting
  contents:
  - "3.2.5.  Device Fingerprinting\n   The combination of information published in\
    \ DNS-SD has the potential\n   to provide a \"fingerprint\" of a specific device.\
    \  Such information\n   includes:\n   *  A list of services published by the device,\
    \ which can be retrieved\n      because the SRV records will point to the same\
    \ hostname.\n   *  Specific attributes describing these services.\n   *  Port\
    \ numbers used by the services.\n   *  Priority and weight attributes in the SRV\
    \ records.\n   This combination of services and attributes will often be sufficient\n\
    \   to identify the version of the software running on a device.  If a\n   device\
    \ publishes many services with rich sets of attributes, the\n   combination may\
    \ be sufficient to identify the specific device and\n   track its owner.\n   An\
    \ argument is sometimes made that devices providing services can be\n   identified\
    \ by observing the local traffic and that trying to hide the\n   presence of the\
    \ service is futile.  However, there are good reasons\n   for the discovery service\
    \ layer to avoid unnecessary exposure:\n   1.  Providing privacy at the discovery\
    \ layer is of the essence for\n       enabling automatically configured privacy-preserving\
    \ network\n       applications.  Application layer protocols are not forced to\n\
    \       leverage the offered privacy, but if device tracking is not\n       prevented\
    \ at the deeper layers, including the service discovery\n       layer, obfuscating\
    \ a certain service's protocol at the\n       application layer is futile.\n \
    \  2.  Further, in the case of mDNS-based discovery, even if the\n       application\
    \ layer does not protect privacy, services are\n       typically provided via\
    \ unicast, which requires a MITM attacker,\n       whereas identifying services\
    \ based on multicast discovery\n       messages just requires an on-link attacker.\n\
    \   The same argument can be extended to say that the pattern of services\n  \
    \ offered by a device allows for fingerprinting the device.  This may\n   or may\
    \ not be true, since we can expect that services will be\n   designed or updated\
    \ to avoid leaking fingerprints.  In any case, the\n   design of the discovery\
    \ service should avoid making a bad situation\n   worse and should, as much as\
    \ possible, avoid providing new\n   fingerprinting information.\n"
- title: 3.2.6.  Privacy Implication of Discovering Services
  contents:
  - "3.2.6.  Privacy Implication of Discovering Services\n   The consumers of services\
    \ engage in discovery and in doing so reveal\n   some information, such as the\
    \ list of services they are interested in\n   and the domains in which they are\
    \ looking for the services.  When the\n   clients select specific instances of\
    \ services, they reveal their\n   preference for these instances.  This can be\
    \ benign if the service\n   type is very common, but it could be more problematic\
    \ for sensitive\n   services, such as some private messaging services.\n   One\
    \ way to protect clients would be to somehow encrypt the requested\n   service\
    \ types.  Of course, just as we noted in Section 3.2.5, traffic\n   analysis can\
    \ often reveal the service.\n"
- title: 3.3.  Security Considerations
  contents:
  - "3.3.  Security Considerations\n   For each of the operations described above,\
    \ we must also consider\n   security threats we are concerned about.\n"
- title: 3.3.1.  Authenticity, Integrity, and Freshness
  contents:
  - "3.3.1.  Authenticity, Integrity, and Freshness\n   Can devices (both servers\
    \ and clients) trust the information they\n   receive?  Has it been modified in\
    \ flight by an adversary?  Can\n   devices trust the source of the information?\
    \  Is the source of\n   information fresh, i.e., not replayed?  Freshness may\
    \ or may not be\n   required depending on whether the discovery process is meant\
    \ to be\n   online.  In some cases, publishing discovery information to a shared\n\
    \   directory or registry, rather than to each online recipient through a\n  \
    \ broadcast channel, may suffice.\n"
- title: 3.3.2.  Confidentiality
  contents:
  - "3.3.2.  Confidentiality\n   Confidentiality is about restricting information\
    \ access to only\n   authorized individuals.  Ideally, this should only be the\
    \ appropriate\n   trusted parties, though it can be challenging to define who\
    \ are \"the\n   appropriate trusted parties.\"  In some use cases, this may mean\
    \ that\n   only mutually authenticated and trusting clients and servers can read\n\
    \   messages sent for one another.  The process of service discovery in\n   particular\
    \ is often used to discover new entities that the device did\n   not previously\
    \ know about.  It may be tricky to work out how a device\n   can have an established\
    \ trust relationship with a new entity it has\n   never previously communicated\
    \ with.\n"
- title: 3.3.3.  Resistance to Dictionary Attacks
  contents:
  - "3.3.3.  Resistance to Dictionary Attacks\n   It can be tempting to use (publicly\
    \ computable) hash functions to\n   obscure sensitive identifiers.  This transforms\
    \ a sensitive unique\n   identifier, such as an email address, into a \"scrambled\"\
    \ but still\n   unique identifier.  Unfortunately, simple solutions may be vulnerable\n\
    \   to offline dictionary attacks.\n"
- title: 3.3.4.  Resistance to Denial-of-Service Attacks
  contents:
  - "3.3.4.  Resistance to Denial-of-Service Attacks\n   In any protocol where the\
    \ receiver of messages has to perform\n   cryptographic operations on those messages,\
    \ there is a risk of a\n   brute-force flooding attack causing the receiver to\
    \ expend excessive\n   amounts of CPU time and, where applicable, battery power\
    \ just\n   processing and discarding those messages.\n   Also, amplification attacks\
    \ have to be taken into consideration.\n   Messages with larger payloads should\
    \ only be sent as an answer to a\n   query sent by a verified client.\n"
- title: 3.3.5.  Resistance to Sender Impersonation
  contents:
  - "3.3.5.  Resistance to Sender Impersonation\n   Sender impersonation is an attack\
    \ wherein messages, such as service\n   offers, are forged by entities who do\
    \ not possess the corresponding\n   secret key material.  These attacks may be\
    \ used to learn the identity\n   of a communicating party, actively or passively.\n"
- title: 3.3.6.  Sender Deniability
  contents:
  - "3.3.6.  Sender Deniability\n   Deniability of sender activity, e.g., of broadcasting\
    \ a discovery\n   request, may be desirable or necessary in some use cases.  This\n\
    \   property ensures that eavesdroppers cannot prove senders issued a\n   specific\
    \ message destined for one or more peers.\n"
- title: 3.4.  Operational Considerations
  contents:
  - '3.4.  Operational Considerations

    '
- title: 3.4.1.  Power Management
  contents:
  - "3.4.1.  Power Management\n   Many modern devices, especially battery-powered\
    \ devices, use power\n   management techniques to conserve energy.  One such technique\
    \ is for\n   a device to transfer information about itself to a proxy, which will\n\
    \   act on behalf of the device for some functions while the device\n   itself\
    \ goes to sleep to reduce power consumption.  When the proxy\n   determines that\
    \ some action is required, which only the device itself\n   can perform, the proxy\
    \ may have some way to wake the device, as\n   described for example in [SLEEP-PROXY].\n\
    \   In many cases, the device may not trust the network proxy\n   sufficiently\
    \ to share all its confidential key material with the\n   proxy.  This poses challenges\
    \ for combining private discovery that\n   relies on per-query cryptographic operations\
    \ with energy-saving\n   techniques that rely on having (somewhat untrusted) network\
    \ proxies\n   answer queries on behalf of sleeping devices.\n"
- title: 3.4.2.  Protocol Efficiency
  contents:
  - "3.4.2.  Protocol Efficiency\n   Creating a discovery protocol that has the desired\
    \ security\n   properties may result in a design that is not efficient.  To perform\n\
    \   the necessary operations, the protocol may need to send and receive a\n  \
    \ large number of network packets or require an inordinate amount of\n   multicast\
    \ transmissions.  This may consume an unreasonable amount of\n   network capacity,\
    \ particularly problematic when it is a shared\n   wireless spectrum.  Further,\
    \ it may cause an unnecessary level of\n   power consumption, which is particularly\
    \ problematic on battery\n   devices and may result in the discovery process being\
    \ slow.\n   It is a difficult challenge to design a discovery protocol that has\n\
    \   the property of obscuring the details of what it is doing from\n   unauthorized\
    \ observers while also managing to perform efficiently.\n"
- title: 3.4.3.  Secure Initialization and Trust Models
  contents:
  - "3.4.3.  Secure Initialization and Trust Models\n   One of the challenges implicit\
    \ in the preceding discussions is that\n   whenever we discuss \"trusted entities\"\
    \ versus \"untrusted entities\",\n   there needs to be some way that trust is\
    \ initially established to\n   convert an \"untrusted entity\" into a \"trusted\
    \ entity\".\n   The purpose of this document is not to define the specific way\
    \ in\n   which trust can be established.  Protocol designers may rely on a\n \
    \  number of existing technologies, including PKI, Trust On First Use\n   (TOFU),\
    \ or the use of a short passphrase or PIN with cryptographic\n   algorithms, such\
    \ as Secure Remote Password (SRP) [RFC5054] or a\n   Password-Authenticated Key\
    \ Exchange like J-PAKE [RFC8236] using a\n   Schnorr Non-interactive Zero-Knowledge\
    \ Proof [RFC8235].\n   Protocol designers should consider a specific usability\
    \ pitfall when\n   trust is established immediately prior to performing discovery.\n\
    \   Users will have a tendency to \"click OK\" in order to achieve their\n   task.\
    \  This implicit vulnerability is avoided if the trust\n   establishment requires\
    \ more significant participation of the user,\n   such as entering a password\
    \ or PIN.\n"
- title: 3.4.4.  External Dependencies
  contents:
  - "3.4.4.  External Dependencies\n   Trust establishment may depend on external\
    \ parties.  Optionally, this\n   might involve synchronous communication.  Systems\
    \ that have such a\n   dependency may be attacked by interfering with communication\
    \ to\n   external dependencies.  Where possible, such dependencies should be\n\
    \   minimized.  Local trust models are best for secure initialization in\n   the\
    \ presence of active attackers.\n"
- title: 4.  Requirements for a DNS-SD Privacy Extension
  contents:
  - "4.  Requirements for a DNS-SD Privacy Extension\n   Given the considerations\
    \ discussed in the previous sections, we state\n   requirements for privacy preserving\
    \ DNS-SD in the following\n   subsections.\n   Defining a solution according to\
    \ these requirements is intended to\n   lead to a solution that does not transmit\
    \ privacy-violating DNS-SD\n   messages and further does not open pathways to\
    \ new attacks against\n   the operation of DNS-SD.\n   However, while this document\
    \ gives advice on which privacy protecting\n   mechanisms should be used on deeper-layer\
    \ network protocols and on\n   how to actually connect to services in a privacy-preserving\
    \ way,\n   stating corresponding requirements is out of the scope of this\n  \
    \ document.  To mitigate attacks against privacy on lower layers, both\n   servers\
    \ and clients must use privacy options available at lower\n   layers and, for\
    \ example, avoid publishing static IPv4 or IPv6\n   addresses or static IEEE 802\
    \ Media Access Control (MAC) addresses.\n   For services advertised on a single\
    \ network link, link-local IP\n   addresses should be used; see [RFC3927] and\
    \ [RFC4291] for IPv4 and\n   IPv6, respectively.  Static servers advertising services\
    \ globally via\n   DNS can hide their IP addresses from unauthorized clients using\
    \ the\n   split mode topology shown in Encrypted Server Name Indication [ESNI].\n\
    \   Hiding static MAC addresses can be achieved via MAC address\n   randomization\
    \ (see [RFC7844]).\n"
- title: 4.1.  Private Client Requirements
  contents:
  - "4.1.  Private Client Requirements\n   For all three scenarios described in Section\
    \ 3.1, client privacy\n   requires DNS-SD messages to:\n   1.  Avoid disclosure\
    \ of the client's identity, either directly or via\n       inference, to nodes\
    \ other than select servers.\n   2.  Avoid exposure of linkable identifiers that\
    \ allow tracing client\n       devices.\n   3.  Avoid disclosure of the client's\
    \ interest in specific service\n       instances or service types to nodes other\
    \ than select servers.\n   When listing and resolving services via current DNS-SD\
    \ deployments,\n   clients typically disclose their interest in specific services\
    \ types\n   and specific instances of these types, respectively.\n   In addition\
    \ to the exposure and disclosure risks noted above,\n   protocols and implementations\
    \ will have to consider fingerprinting\n   attacks (see Section 3.2.5) that could\
    \ retrieve similar information.\n"
- title: 4.2.  Private Server Requirements
  contents:
  - "4.2.  Private Server Requirements\n   Servers like the \"printer\" discussed\
    \ in Section 3.1.1 are public, but\n   the servers discussed in Sections 3.1.2\
    \ and 3.1.3 are, by essence,\n   private.  Server privacy requires DNS-SD messages\
    \ to:\n   1.  Avoid disclosure of the server's identity, either directly or via\n\
    \       inference, to nodes other than authorized clients.  In\n       particular,\
    \ servers must avoid publishing static identifiers,\n       such as hostnames\
    \ or service names.  When those fields are\n       required by the protocol, servers\
    \ should publish randomized\n       values.  (See [RFC8117] for a discussion of\
    \ hostnames.)\n   2.  Avoid exposure of linkable identifiers that allow tracing\n\
    \       servers.\n   3.  Avoid disclosure to unauthorized clients of Service Instance\n\
    \       Names or service types of offered services.\n   4.  Avoid disclosure to\
    \ unauthorized clients of information about the\n       services they offer.\n\
    \   5.  Avoid disclosure of static IPv4 or IPv6 addresses.\n   When offering services\
    \ via current DNS-SD deployments, servers\n   typically disclose their hostnames\
    \ (SRV, A/AAAA), instance names of\n   offered services (PTR, SRV), and information\
    \ about services (TXT).\n   Heeding these requirements protects a server's privacy\
    \ on the DNS-SD\n   level.\n   The current DNS-SD user interfaces present the\
    \ list of discovered\n   service names to the users and let them pick a service\
    \ from the list.\n   Using random identifiers for service names renders that UI\
    \ flow\n   unusable.  Privacy-respecting discovery protocols will have to solve\n\
    \   this issue, for example, by presenting authenticated or decrypted\n   service\
    \ names instead of the randomized values.\n"
- title: 4.3.  Security and Operation
  contents:
  - "4.3.  Security and Operation\n   In order to be secure and feasible, a DNS-SD\
    \ privacy extension needs\n   to consider security and operational requirements\
    \ including:\n   1.  Avoiding significant CPU overhead on nodes or significantly\n\
    \       higher network load.  Such overhead or load would make nodes\n       vulnerable\
    \ to denial-of-service attacks.  Further, it would\n       increase power consumption,\
    \ which is damaging for IoT devices.\n   2.  Avoiding designs in which a small\
    \ message can trigger a large\n       amount of traffic towards an unverified\
    \ address, as this could be\n       exploited in amplification attacks.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast\
    \ DNS\", RFC 6762,\n              DOI 10.17487/RFC6762, February 2013,\n     \
    \         <https://www.rfc-editor.org/info/rfc6762>.\n   [RFC6763]  Cheshire,\
    \ S. and M. Krochmal, \"DNS-Based Service\n              Discovery\", RFC 6763,\
    \ DOI 10.17487/RFC6763, February 2013,\n              <https://www.rfc-editor.org/info/rfc6763>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [ESNI]     Rescorla, E., Oku, K., Sullivan,\
    \ N., and C. A. Wood, \"TLS\n              Encrypted Client Hello\", Work in Progress,\
    \ Internet-Draft,\n              draft-ietf-tls-esni-07, June 1, 2020,\n     \
    \         <https://tools.ietf.org/html/draft-ietf-tls-esni-07>.\n   [K17]    \
    \  Kaiser, D., \"Efficient Privacy-Preserving\n              Configurationless\
    \ Service Discovery Supporting Multi-Link\n              Networks\", August 2017,\n\
    \              <https://nbn-resolving.de/urn:nbn:de:bsz:352-0-422757>.\n   [KW14a]\
    \    Kaiser, D. and M. Waldvogel, \"Adding Privacy to Multicast\n            \
    \  DNS Service Discovery\", DOI 10.1109/TrustCom.2014.107,\n              September\
    \ 2014, <https://ieeexplore.ieee.org/xpl/\n              articleDetails.jsp?arnumber=7011331>.\n\
    \   [KW14b]    Kaiser, D. and M. Waldvogel, \"Efficient Privacy Preserving\n \
    \             Multicast DNS Service Discovery\",\n              DOI 10.1109/HPCC.2014.141,\
    \ August 2014,\n              <https://ieeexplore.ieee.org/xpl/\n            \
    \  articleDetails.jsp?arnumber=7056899>.\n   [RFC1033]  Lottor, M., \"Domain Administrators\
    \ Operations Guide\",\n              RFC 1033, DOI 10.17487/RFC1033, November\
    \ 1987,\n              <https://www.rfc-editor.org/info/rfc1033>.\n   [RFC1034]\
    \  Mockapetris, P., \"Domain names - concepts and facilities\",\n            \
    \  STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n\
    \   [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n        \
    \      specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n            \
    \  November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2782]  Gulbrandsen,\
    \ A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n              DOI 10.17487/RFC2782, February\
    \ 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n   [RFC3927]\
    \  Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic\n              Configuration\
    \ of IPv4 Link-Local Addresses\", RFC 3927,\n              DOI 10.17487/RFC3927,\
    \ May 2005,\n              <https://www.rfc-editor.org/info/rfc3927>.\n   [RFC4291]\
    \  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\"\
    , RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <https://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC5054]  Taylor, D., Wu, T., Mavrogiannopoulos, N., and T. Perrin,\n   \
    \           \"Using the Secure Remote Password (SRP) Protocol for TLS\n      \
    \        Authentication\", RFC 5054, DOI 10.17487/RFC5054, November\n        \
    \      2007, <https://www.rfc-editor.org/info/rfc5054>.\n   [RFC7558]  Lynn, K.,\
    \ Cheshire, S., Blanchet, M., and D. Migault,\n              \"Requirements for\
    \ Scalable DNS-Based Service Discovery\n              (DNS-SD) / Multicast DNS\
    \ (mDNS) Extensions\", RFC 7558,\n              DOI 10.17487/RFC7558, July 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7558>.\n   [RFC7844]  Huitema,\
    \ C., Mrugalski, T., and S. Krishnan, \"Anonymity\n              Profiles for\
    \ DHCP Clients\", RFC 7844,\n              DOI 10.17487/RFC7844, May 2016,\n \
    \             <https://www.rfc-editor.org/info/rfc7844>.\n   [RFC8117]  Huitema,\
    \ C., Thaler, D., and R. Winter, \"Current Hostname\n              Practice Considered\
    \ Harmful\", RFC 8117,\n              DOI 10.17487/RFC8117, March 2017,\n    \
    \          <https://www.rfc-editor.org/info/rfc8117>.\n   [RFC8235]  Hao, F.,\
    \ Ed., \"Schnorr Non-interactive Zero-Knowledge\n              Proof\", RFC 8235,\
    \ DOI 10.17487/RFC8235, September 2017,\n              <https://www.rfc-editor.org/info/rfc8235>.\n\
    \   [RFC8236]  Hao, F., Ed., \"J-PAKE: Password-Authenticated Key Exchange\n \
    \             by Juggling\", RFC 8236, DOI 10.17487/RFC8236, September\n     \
    \         2017, <https://www.rfc-editor.org/info/rfc8236>.\n   [SLEEP-PROXY]\n\
    \              Cheshire, S., \"Understanding Sleep Proxy Service\",\n        \
    \      December 2009,\n              <http://stuartcheshire.org/SleepProxy/index.html>.\n\
    \   [SRP]      Lemon, T. and S. Cheshire, \"Service Registration Protocol\n  \
    \            for DNS-Based Service Discovery\", Work in Progress,\n          \
    \    Internet-Draft, draft-ietf-dnssd-srp-04, July 13, 2020,\n              <https://tools.ietf.org/html/draft-ietf-dnssd-srp-04>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document incorporates many contributions from Stuart\
    \ Cheshire\n   and Chris Wood.  Thanks to Florian Adamsky for extensive review\
    \ and\n   suggestions on the organization of the threat model.  Thanks to Barry\n\
    \   Leiba for an extensive review.  Thanks to Roman Danyliw, Ben Kaduk,\n   Adam\
    \ Roach, and Alissa Cooper for their comments during IESG review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Christian Huitema\n   Private Octopus Inc.\n   Friday\
    \ Harbor, WA 98250\n   United States of America\n   Email: huitema@huitema.net\n\
    \   URI:   http://privateoctopus.com/\n   Daniel Kaiser\n   University of Luxembourg\n\
    \   6, avenue de la Fonte\n   L-4364 Esch-sur-Alzette\n   Luxembourg\n"
