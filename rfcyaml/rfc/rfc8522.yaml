- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        M. Stubbig
  contents:
  - "Independent Submission                                        M. Stubbig\n  \
    \                     Looking Glass Command Set\n"
- title: Abstract
  contents:
  - "Abstract\n   This document introduces a command set standard to the web-based\n\
    \   \"Network Looking Glass\" software.  Its purpose is to provide\n   application\
    \ programmers uniform access to the Looking Glass service\n   and to analyze a\
    \ standardized response.\n   The interface is supposed to provide the same level\
    \ of information as\n   web-based interfaces, but in a computer-readable format.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8522.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Background  . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Syntax Notation . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     1.3.  Examples  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n   2.  Operation . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n     2.1.  Method Parameters . . . . . . . . . . . . . . . . . . . .\
    \   4\n     2.2.  Query Parameters  . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n     2.3.  Response  . . . . . . . . . . . . . . . . . . . . . . . .   6\n\
    \   3.  Functions . . . . . . . . . . . . . . . . . . . . . . . . . .   9\n  \
    \   3.1.  Diagnostic Commands . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 3.2.  Informational Commands  . . . . . . . . . . . . . . . . .  10\n     3.3.\
    \  Organizational Commands . . . . . . . . . . . . . . . . .  14\n     3.4.  Extensible\
    \ Commands . . . . . . . . . . . . . . . . . . .  16\n   4.  Miscellaneous . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  16\n   5.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  17\n     5.1.  Well-Known URIs Registry\
    \  . . . . . . . . . . . . . . . .  17\n   6.  Security Considerations . . . .\
    \ . . . . . . . . . . . . . . .  17\n     6.1.  Abuse Potential . . . . . . .\
    \ . . . . . . . . . . . . . .  17\n     6.2.  Authentication  . . . . . . . .\
    \ . . . . . . . . . . . . .  17\n     6.3.  Minimal Information . . . . . . .\
    \ . . . . . . . . . . . .  17\n   7.  References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  18\n     7.1.  Normative References  . . . . . . . .\
    \ . . . . . . . . . .  18\n     7.2.  Informative References  . . . . . . . .\
    \ . . . . . . . . .  19\n   Appendix A.  JSend  . . . . . . . . . . . . . . .\
    \ . . . . . . . .  20\n   Author's Address  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Many Internet service providers (ISPs) and Internet exchange\
    \ points\n   (IXPs) offer a complimentary web-based service to their customers\
    \ and\n   the general public that gives insights to the backbone routing table,\n\
    \   BGP neighbor information, or offered routes.  This service is known\n   as\
    \ a \"Network Looking Glass\".  Because they utilize a web-based\n   interface,\
    \ it is hard to automate access to the services and make\n   that automation transferable\
    \ between different service\n   implementations.\n   This document describes a\
    \ common command set to provide application\n   programmers uniform access to\
    \ Looking Glass services.\n   The commands are intended to provide the same level\
    \ of information as\n   available via web-based interfaces, but to do so in a\
    \ computer-\n   readable format.  The intention is that multiple implementers\
    \ of\n   Looking Glass services can provide access through these commands so\n\
    \   that an application can make use of the different implementations.\n   The\
    \ command set is split into the following categories: mandatory to\n   support,\
    \ optional, and additional.  The commands are extensible for\n   new features\
    \ and for value-add by implementations.\n   The Looking Glass command set is described\
    \ as a language-independent\n   concept.  Consequently, any programming language\
    \ that satisfies the\n   commands listed in the following sections is acceptable.\n\
    \   This work is not the output of the IETF and is presented in the hope\n   that\
    \ Looking Glass implementers will offer a common programmable\n   interface.\n"
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   The requirement of a uniform access to a Looking Glass service\n\
    \   becomes important when multiple Looking Glasses are part of a\n   monitoring\
    \ system.  Implementing a web client and HTTP parser for\n   every kind of web-based\
    \ Looking Glass is a time-consuming workaround.\n   However, the Looking Glass\
    \ command set is a much more viable,\n   compatible, and scalable solution.\n"
- title: 1.2.  Syntax Notation
  contents:
  - "1.2.  Syntax Notation\n   This specification uses the JavaScript Object Notation\
    \ (JSON) of\n   [RFC8259] arranged as JSend-compliant (Appendix A) responses.\n"
- title: 1.3.  Examples
  contents:
  - "1.3.  Examples\n   All URLs in this documentation use the reserved sample domain\
    \ of\n   \"example.net\" as defined in Section 6.5 of [RFC6761].\n   The URLs\
    \ further use the fixed [RFC5785] prefix of \".well-known/\n   looking-glass\"\
    \ to prevent a collision in the domain's namespace.\n   IPv4 addresses use the\
    \ documentation block of 192.0.2.0/24 [RFC5737]\n   and IPv6 addresses reside\
    \ in the reserved prefix of 2001:DB8::/32\n   [RFC3849].  BGP Autonomous System\
    \ (AS) numbers are chosen from the\n   private AS range defined in [RFC6996].\n\
    \   The examples skip some required parameters for reasons of simplicity.\n"
- title: 2.  Operation
  contents:
  - "2.  Operation\n   A client issues a query using the HTTP GET method to request\
    \ specific\n   resources from the server.  The resource is a URI and can be\n\
    \   informational or a command execution.  The client must present all\n   necessary\
    \ parameters for the server to execute the command on the\n   selected router.\
    \  Every call is stateless and independent of the\n   previous one.\n   The path\
    \ component of the resource URI must use the prefix of \".well-\n   known/looking-glass\"\
    \ (see Section 5.1) to stay namespace neutral.\n   The \"call\" is a request from\
    \ the client that specifies a predefined\n   operation (\"function\") that the\
    \ server will execute on a selected\n   router.  The \"command\" is a task executed\
    \ on the router and initiated\n   by the server on behalf of the client.  The\
    \ type and scope of all\n   commands are defined and limited by the server.  The\
    \ client must not\n   be able to execute random commands on the targeting router.\
    \  There\n   must not be any direct communication between the client and the\n\
    \   router.\n   After the execution of the command on the selected router has\n\
    \   finished, the server replies to the client if the operation has\n   either\
    \ succeeded, failed, or timed out.  The response is sent to the\n   client in\
    \ JSON format.  The communication protocol used between the\n   server and router\
    \ is not specified by this document; any method\n   (e.g., Telnet, SSH, NETCONF,\
    \ serial console) is acceptable.\n   All parameters and their values are case\
    \ insensitive.\n"
- title: 2.1.  Method Parameters
  contents:
  - "2.1.  Method Parameters\n   Method parameters are mandatory components of the\
    \ URI and are placed\n   in the \"path\" section in terms of [RFC7320].  Basically,\
    \ the method\n   parameters specify the call and determine which command the client\n\
    \   wants to be executed on the selected router.\n"
- title: 2.2.  Query Parameters
  contents:
  - "2.2.  Query Parameters\n   Query parameters are optional components of the URI\
    \ and are placed in\n   the \"query\" section in terms of [RFC7320].  Generally,\
    \ the query\n   parameters are additional instructions for the requested command.\n\
    \   protocol\n      Restrict the command and method parameters to use the specified\n\
    \      protocol and version.  Protocol is selected as \"Address Family\n     \
    \ Identifier\" [IANA-AFN] [RFC4760] and optionally as \"Subsequent\n      Address\
    \ Family Identifier\" [IANA-SAFI] separated by a comma.\n      Default value is\
    \ 1,1 (IP version 4, unicast).\n      JSON datatype is String.\n      Examples:\n\
    \      *  protocol=2,1 (IP version 6, unicast)\n      *  protocol=26 (MPLS, no\
    \ SAFI used)\n   router\n      Run the command on the router identified by its\
    \ name.  This is not\n      necessarily the router's hostname as long as the Looking\
    \ Glass\n      software recognizes it.\n      Default value is the first router\
    \ in the list of available\n      routers.\n      JSON datatype is String.\n \
    \     Example: router=rbgn06.example.net\n   routerindex\n      Run the command\
    \ on this router identified by its position in the\n      list of available routers.\n\
    \      Default value is \"0\".\n      JSON datatype is Number.\n      Example:\
    \ routerindex=8\n   random\n      Append a random string to prevent the client\
    \ (or an intermediate\n      proxy) from caching the response.  The server must\
    \ ignore its\n      value.\n      No default value.\n      JSON datatype is String.\n\
    \      Example: random=517A93B50\n   vrf\n      Run the command from the selected\
    \ routing table.  This parameter\n      is valid only on routers that support\
    \ \"Virtual Routing and\n      Forwarding\" (VRF).\n      No default value.\n\
    \      JSON datatype is String.\n      Example: vrf=mgmt\n   runtime\n      Stop\
    \ executing the command after the runtime limit (in seconds) is\n      exceeded.\
    \  A value of 0 disables the limit.\n      Default value is \"30\".\n      JSON\
    \ datatype is Number.\n      Example: runtime=60\n   format\n      Request the\
    \ server to provide the output (if any) in the selected\n      format.  Specify\
    \ multiple formats separated by a comma in\n      descending order of preference.\
    \  See Section 3.3.2 for more\n      details.\n      Default value is \"text/plain\"\
    \ (raw/unformatted output).\n      JSON datatype is String.\n      Example: format=application/yang,text/plain\n"
- title: 2.3.  Response
  contents:
  - "2.3.  Response\n   The HTTP response header contains an appropriate HTTP status\
    \ code as\n   defined in [RFC7231] with the Content-Type set to \"application/json\"\
    .\n   The HTTP body contains details and error descriptions.  The response\n \
    \  text must comply with the JSON syntax specification JSend, which is\n   briefly\
    \ explained in Appendix A.  Consequently, every response must\n   contain a \"\
    status\" field of either \"success\", \"fail\", or \"error\" as\n   explained\
    \ in the following sections.\n"
- title: 2.3.1.  Success
  contents:
  - "2.3.1.  Success\n   A successful response must set the \"status\" field to \"\
    success\".  It\n   must also contain a \"data\" object including the following\n\
    \   information:\n   performed_at\n      Combined date and time in UTC ISO 8601\
    \ [iso8601] indicating when\n      the operation finished.  This information must\
    \ be present.\n   runtime\n      Amount of seconds (wallclock) used to run the\
    \ command.  This\n      information must be present.\n   router\n      Name of\
    \ the router that executed the command.  This information\n      may be present.\n\
    \   output\n      Output of the command in a format that was requested by the\n\
    \      client; it otherwise defaults to raw output as it appeared on the\n   \
    \   router's command-line interface (CLI).  It might even be blank if\n      the\
    \ command did not produce any output.  This information should\n      be present.\n\
    \   format\n      Selected output format by the server.  The client might request\n\
    \      multiple formats so that the \"Looking Glass\" server has to choose\n \
    \     the best option and tell the client which format was selected.\n      This\
    \ information should be present (defaults to \"text/plain\" if\n      missing).\n\
    \   Adding more information to the response is permitted and must be\n   placed\
    \ inside the \"data\" object.\n   The HTTP status code should be 200.\n   Example:\n\
    \   HTTP/1.1 200 OK\n   Content-Type: application/json\n   {\n     \"status\"\
    \ : \"success\",\n     \"data\" : {\n       \"router\" : \"route-server.lookingglass.example.net\"\
    \n       \"performed_at\" : \"2014-10-15T17:15:34Z\",\n       \"runtime\" : 2.63,\n\
    \       \"output\" : [\n         \"full raw output from the observing router...\"\
    \n       ],\n       \"format\" : \"text/plain\"\n     }\n   }\n"
- title: 2.3.2.  Fail
  contents:
  - "2.3.2.  Fail\n   A status of \"fail\" indicates that the selected command was\
    \ executed\n   on the router but failed to succeed.  The response message must\
    \ set\n   the \"status\" field to \"fail\" and must contain the \"data\" object\
    \ with\n   command-specific content listed in Section 2.3.1.\n   The HTTP status\
    \ code should be 200.\n   Example:\n   HTTP/2.0 200 OK\n   {\n     \"status\"\
    \ : \"fail\",\n     \"data\" : {\n       \"performed_at\" : \"2014-10-18T20:04:37Z\"\
    ,\n       \"runtime\" : 10.37,\n       \"output\" : [\n         \"Sending 5, 100-byte\
    \ ICMP Echos to 192.0.2.5\",\n         \".....\",\n         \"Success rate is\
    \ 0 percent (0/5)\"\n       ],\n       \"format\" : \"text/plain\",\n       \"\
    router\" : \"route-server.lookingglass.example.net\"\n     }\n   }\n"
- title: 2.3.3.  Error
  contents:
  - "2.3.3.  Error\n   The status \"error\" represents either that the command timed\
    \ out or\n   that an error occurred in processing the request.  The response\n\
    \   message must set the \"status\" field to \"error\" and must contain the\n\
    \   \"message\" key, which keeps a meaningful message, explaining what went\n\
    \   wrong.\n   The response may contain the \"data\" key with required values\
    \ listed\n   in Section 2.3.1.  It may also include a \"code\" field that carries\
    \ a\n   numeric code corresponding to the error.\n   The HTTP status code should\
    \ be 400 in case of a client-side error,\n   500 in case of a server-side error,\
    \ or 502 for errors occurring on\n   the target router.  Code 504 should be used\
    \ when a command timed out.\n   Example:\n   HTTP/1.1 400 Bad Request\n   {\n\
    \     \"status\" : \"error\",\n     \"message\" : \"Unrecognized host or address.\"\
    \n   }\n"
- title: 3.  Functions
  contents:
  - "3.  Functions\n   The Looking Glass command set provides functions that are either\n\
    \   mandatory to support or optional to implement.  The same principle\n   applies\
    \ to the web-based Looking Glass.\n   It is not possible for any function to modify\
    \ the server's state.\n   Therefore, all HTTP methods are GET operations.\n  \
    \ Variables are templated and expanded in accordance with [RFC6570].\n"
- title: 3.1.  Diagnostic Commands
  contents:
  - '3.1.  Diagnostic Commands

    '
- title: 3.1.1.  Ping
  contents:
  - "3.1.1.  Ping\n   Send echo messages to validate the reachability of a remote\
    \ host and\n   measure round-trip time.  The host can be a name or address.\n\
    \   Implementation of the ping command is mandatory.\n   Syntax: https://example.net/.well-known/looking-glass/v1/ping/{host}\n\
    \   Example query:\n   GET /.well-known/looking-glass/v1/ping/2001:DB8::35?protocol=2,1\n\
    \   Host: example.net\n   Example response:\n   HTTP/1.1 200 OK\n   {\n     \"\
    status\" : \"success\",\n     \"data\" : {\n       \"min\" : 40,\n       \"avg\"\
    \ : 41,\n       \"max\" : 44,\n       \"rate\" : 100,\n       \"output\" : [\n\
    \         \"Sending 5, 100-byte ICMP Echos to 2001:DB8::35\",\n         \"!!!!!\"\
    ,\n         \"Success rate is 100 percent (5/5)\"\n       ],\n       \"format\"\
    \ : \"text/plain\",\n       \"performed_at\" : \"2014-10-04T14:40:58Z\",\n   \
    \    \"runtime\" : 0.77,\n       \"router\" : \"c2951.lab.lg.example.net\"\n \
    \    }\n   }\n"
- title: 3.1.2.  Traceroute
  contents:
  - "3.1.2.  Traceroute\n   Trace the path from the executing router to the destination\
    \ host and\n   list all intermediate hops.  The host can be a name or address.\n\
    \   Implementation of the traceroute command is optional.\n   Syntax: https://example.net/.well-known/looking-glass/v1/\n\
    \   traceroute/{host}\n   Example query:\n   GET /.well-known/looking-glass/v1/traceroute/192.0.2.8?routerindex=5\n\
    \   Host: example.net\n   Example response:\n   HTTP/1.1 200 OK\n   {\n     \"\
    status\": \"success\",\n     \"data\": {\n       \"output\": [\n         \"Tracing\
    \ the route to 192.0.2.8\",\n         \"\",\n         \"  1 198.51.100.77 28 msec\
    \ 28 msec 20 msec\",\n         \"  2 203.0.113.130 52 msec 40 msec 40 msec\",\n\
    \         \"  3 192.0.2.8 72 msec 76 msec 68 msec\"\n       ],\n       \"format\"\
    : \"text/plain\",\n       \"performed_at\": \"2018-06-10T12:09:31Z\",\n      \
    \ \"runtime\": 4.21,\n       \"router\": \"c7206.lab.lg.example.net\"\n     }\n\
    \   }\n"
- title: 3.2.  Informational Commands
  contents:
  - '3.2.  Informational Commands

    '
- title: 3.2.1.  show route
  contents:
  - "3.2.1.  show route\n   Retrieve information about a specific subnet from the\
    \ routing table.\n   Implementation of the \"show route\" command is mandatory.\n\
    \   Syntax: https://example.net/.well-known/looking-glass/v1/show/\n   route/{addr}\n\
    \   Example query:\n   GET /.well-known/looking-glass/v1/show/      [multiline]\n\
    \           route/2001:DB8::/48?protocol=2,1\n   Host: example.net\n   Example\
    \ response:\n   HTTP/1.1 200 OK\n   {\n     \"status\": \"success\",\n     \"\
    data\": {\n       \"output\": [\n         \"S   2001:DB8::/48 [1/0]\",\n     \
    \    \"     via FE80::C007:CFF:FED9:17, FastEthernet0/0\"\n       ],\n       \"\
    format\": \"text/plain\",\n       \"performed_at\": \"2018-06-11T17:13:39Z\",\n\
    \       \"runtime\": 1.39,\n       \"router\": \"c2951.lab.lg.example.net\"\n\
    \     }\n   }\n"
- title: 3.2.2.  show bgp
  contents:
  - "3.2.2.  show bgp\n   Display a matching record from the BGP routing table.  This\
    \ should\n   include networks, next hop, and may include metric, local preference,\n\
    \   path list, weight, etc.\n   Implementation of the \"show bgp\" command is\
    \ optional.\n   Syntax: https://example.net/.well-known/looking-glass/v1/show/\n\
    \   bgp/{addr}\n   Example query:\n   GET /.well-known/looking-glass/v1/show/bgp/192.0.2.0/24\n\
    \   Host: example.net\n   Example response:\n   HTTP/1.1 200 OK\n   {\n     \"\
    status\": \"success\",\n     \"data\": {\n       \"output\": [\n         \"BGP\
    \ routing table entry for 192.0.2.0/24, version 2\",\n         \"Paths: (2 available,\
    \ best #2, table default)\",\n         \"  Advertised to update-groups:\",\n \
    \        \"     1\",\n         \"  Refresh Epoch 1\",\n         \"  Local\",\n\
    \         \"    192.0.2.226 from 192.0.2.226 (192.0.2.226)\",\n         \"   \
    \   Origin IGP, metric 0, localpref 100, valid, internal\",\n         \"[...]\"\
    \n       ],\n       \"format\": \"text/plain\",\n       \"performed_at\": \"2018-06-11T21:47:17Z\"\
    ,\n       \"runtime\": 2.03,\n       \"router\": \"c2951.lab.lg.example.net\"\n\
    \     }\n   }\n"
- title: 3.2.3.  show bgp summary
  contents:
  - "3.2.3.  show bgp summary\n   Print a summary of BGP neighbor status.  This may\
    \ include the\n   neighbor BGP ID, autonomous system number, duration of peering,\n\
    \   number of received prefixes, etc.\n   Implementation of the \"show bgp summary\"\
    \ command is optional.\n   Syntax: https://example.net/.well-known/looking-glass/v1/show/bgp/\n\
    \   summary\n   Example:\n   GET /.well-known/looking-glass/v1/show/bgp/summary?\
    \     [multiline]\n          protocol=2&routerindex=3\n   Host: example.net\n\
    \   Example response:\n   HTTP/1.1 200 OK\n   {\n     \"status\": \"success\"\
    ,\n     \"data\": {\n       \"output\": [\n         \"BGP router identifier 192.0.2.18,\
    \ local AS number 64501\",\n         \"BGP table version is 85298, main routing\
    \ table version 85298\",\n         \"50440 network entries using 867568 bytes\
    \ of memory\",\n         \"[...]\",\n         \"Neighbor        V       AS MsgRcvd\
    \ MsgSent   TblVer  Up/Down\",\n         \"2001:DB8:91::24 4    64500  481098\
    \  919095   85298   41w5d\"\n       ],\n       \"format\": \"text/plain\",\n \
    \      \"performed_at\": \"2018-06-11T21:59:21Z\",\n       \"runtime\": 1.91,\n\
    \       \"router\": \"c2951.lab.lg.example.net\"\n     }\n   }\n"
- title: 3.2.4.  show bgp neighbors
  contents:
  - "3.2.4.  show bgp neighbors\n   Provide detailed information on BGP neighbor connections.\
    \  Available\n   details may include neighbor BGP ID, advertised networks, learned\n\
    \   networks, autonomous system number, capabilities, protocol,\n   statistics,\
    \ etc.\n   Implementation of the \"show bgp neighbors\" command is optional.\n\
    \   Syntax: https://example.net/.well-known/looking-glass/v1/show/bgp/\n   neighbors/{addr}\n\
    \   Example query:\n   GET /.well-known/looking-glass/v1/show/bgp/neighbors/192.0.2.226\n\
    \   Host: example.net\n   Example response:\n   HTTP/1.1 200 OK\n   {\n     \"\
    status\": \"success\",\n     \"data\": {\n       \"output\": [\n         \"BGP\
    \ neighbor is 192.0.2.226, remote AS 64500, internal link\",\n         \"  BGP\
    \ version 4, remote router ID 198.51.100.31\",\n         \"  BGP state = Established,\
    \ up for 01:24:06\",\n         \"[...]\"\n       ],\n       \"format\": \"text/plain\"\
    ,\n       \"performed_at\": \"2018-06-11T21:41:17Z\",\n       \"runtime\": 1.87,\n\
    \       \"router\": \"c2951.lab.lg.example.net\"\n     }\n   }\n"
- title: 3.3.  Organizational Commands
  contents:
  - "3.3.  Organizational Commands\n   The following organizational commands must\
    \ be included in the\n   implementation.\n"
- title: 3.3.1.  router list
  contents:
  - "3.3.1.  router list\n   Provides a full list of routers that are available for\
    \ command\n   execution.  This list includes the router ID and its name.  It is\n\
    \   equivalent to the common \"router\" HTML drop-down form element and\n   contains\
    \ the same information.\n   Syntax: https://example.net/.well-known/looking-glass/v1/routers\n\
    \   Example response:\n   {\n     \"status\" : \"success\",\n     \"data\" : {\n\
    \       \"routers\" : [\n         \"route-server.lookingglass.example.net\",\n\
    \         \"customer-edge.lookingglass.example.net\",\n         \"provider-edge.lookingglass.example.net\"\
    \n       ],\n       \"performed_at\" : \"2014-10-19T20:07:01Z\",\n       \"runtime\"\
    \ : 0.73\n     }\n   }\n"
- title: 3.3.2.  router details
  contents:
  - "3.3.2.  router details\n   Lists additional information about the selected router\
    \ specified by\n   its router index.  The response must contain the router's hostname\n\
    \   and router index.  The response may contain more details like output\n   format,\
    \ country code, city, administrative contact, vendor, and\n   model.\n   Available\
    \ output formats are specified by Internet media type as of\n   [RFC6838] and\
    \ listed in [IANA-MT].  If the routers support multiple\n   formats, they are\
    \ separated by a comma.\n   The router might provide output formats that are not\
    \ yet registered\n   or listed in [IANA-MT].  For example, output in NETCONF format\
    \ could\n   use \"text/x.netconf\".  [RFC6838] provides a tree for unregistered\n\
    \   subtypes.\n   A missing output format defaults to \"text/plain\", which is\
    \ a copy of\n   the raw command-line output.\n   Syntax: https://example.net/.well-known/looking-glass/v1/\n\
    \   routers/{number}\n   Example query:\n   GET /.well-known/looking-glass/v1/routers/1\n\
    \   Host: example.net\n   Example response:\n   {\n     \"status\" : \"success\"\
    ,\n     \"data\" : {\n       \"id\" : 1,\n       \"name\" : \"customer-edge.lookingglass.example.net\"\
    ,\n       \"format\" : \"text/plain,text/x.netconf\",\n       \"country\" : \"\
    de\",\n       \"autonomous_system\" : 64512\n     }\n   }\n"
- title: 3.3.3.  commands
  contents:
  - "3.3.3.  commands\n   Provides a full list of commands that are available for\
    \ execution.\n   The list includes mandatory to support, optional, and additional\n\
    \   (Section 3.4) commands.  It is equivalent to the \"command\" HTML drop-\n\
    \   down or radio-button form element and contains the same information.\n   The\
    \ list is formatted as a \"commands\" array containing one object per\n   command.\
    \  This object contains informative strings about the current\n   command: href,\
    \ arguments, description, and command.\n   Syntax: https://example.net/.well-known/looking-glass/v1/cmd\n\
    \   Example response:\n   {\n     \"status\" : \"success\",\n     \"data\" : {\n\
    \       \"commands\" : [\n         {\n           \"href\" : \"https://example.net/.well-known/\
    \     [multiline]\n                             looking-glass/v1/show/route\"\
    ,\n           \"arguments\" : \"{addr}\",\n           \"description\" : \"Print\
    \ records from IP routing table\",\n           \"command\" : \"show route\"\n\
    \         },\n         {\n           \"href\" : \"https://example.net/.well-known/\
    \     [multiline]\n                             looking-glass/v1/traceroute\"\
    ,\n           \"arguments\" : \"{addr}\",\n           \"description\" : \"Trace\
    \ route to destination host\",\n           \"command\" : \"traceroute\"\n    \
    \     }\n       ]\n     }\n   }\n"
- title: 3.4.  Extensible Commands
  contents:
  - "3.4.  Extensible Commands\n   The list of commands discussed in Section 3.3.3\
    \ may be expanded as\n   long as the principles of this document are observed.\n\
    \   For example, a Looking Glass provider may not be offering BGP-related\n  \
    \ commands because of an OSPF-based network.\n   The sample command might be:\n\
    \   GET /.well-known/looking-glass/v1/show/ospf/database\n   Host: example.net\n"
- title: 4.  Miscellaneous
  contents:
  - "4.  Miscellaneous\n   The network traffic sent by a \"Looking Glass\" is not\
    \ appropriate when\n   measuring Service Level Agreements or validating Quality\
    \ of Service\n   settings.\n   If a monitoring system uses the Looking Glass command\
    \ set for\n   reachability checks, it should not rely on the HTTP status codes\
    \ but\n   on the \"status\" message field inside the HTTP body.\n"
- title: 5.  IANA Considerations
  contents:
  - '5.  IANA Considerations

    '
- title: 5.1.  Well-Known URIs Registry
  contents:
  - "5.1.  Well-Known URIs Registry\n   This specification registers a Well-Known\
    \ URI [RFC5785]:\n   URI Suffix: looking-glass\n   Change Controller: M. Stubbig\n\
    \   Reference : This document, Section 2\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The use of HTTPS is required to ensure a high\
    \ level of security,\n   privacy, and confidentiality during transit.\n"
- title: 6.1.  Abuse Potential
  contents:
  - "6.1.  Abuse Potential\n   The main goal of the Looking Glass command set is the\
    \ automated usage\n   of the Looking Glass service.  This allows the scripting\
    \ of API\n   calls, which could be used as a Distributed Denial of Service (DDoS)\n\
    \   attack.  It is recommended that implementers of the Looking Glass API\n  \
    \ take steps to mitigate the above described abuse.  The strategy can\n   include\
    \ blocking or rate-limiting by client IP address or target IP\n   network.\n"
- title: 6.2.  Authentication
  contents:
  - "6.2.  Authentication\n   Authentication is not a requirement because the current\
    \ Looking Glass\n   web services are usable without authentication.  Requests\
    \ to the\n   proposed API service may be authenticated by any method.  The\n \
    \  decision is up to the implementer's security requirements.\n"
- title: 6.3.  Minimal Information
  contents:
  - "6.3.  Minimal Information\n   Some of the described commands provide a detailed\
    \ insight into the\n   provider's network.  It is therefore up to the implementer's\
    \ security\n   policy to dismiss commands that are marked as \"optional\" or to\n\
    \   restrict commands that are marked as \"mandatory\".\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [IANA-AFN] IANA, \"Address Family Numbers\", <https://www.iana.org/\n\
    \              assignments/address-family-numbers/>.\n   [IANA-MT]  IANA, \"Media\
    \ Types\",\n              <https://www.iana.org/assignments/media-types/>.\n \
    \  [IANA-SAFI]\n              IANA, \"Subsequent Address Family Identifiers (SAFI)\n\
    \              Parameters\",\n              <https://www.iana.org/assignments/safi-namespace/>.\n\
    \   [JSend]    OmniTI Labs, \"JSend\", 2014,\n              <https://labs.omniti.com/labs/jsend>.\n\
    \   [RFC4760]  Bates, T., Chandra, R., Katz, D., and Y. Rekhter,\n           \
    \   \"Multiprotocol Extensions for BGP-4\", RFC 4760,\n              DOI 10.17487/RFC4760,\
    \ January 2007,\n              <https://www.rfc-editor.org/info/rfc4760>.\n  \
    \ [RFC5785]  Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n     \
    \         Uniform Resource Identifiers (URIs)\", RFC 5785,\n              DOI\
    \ 10.17487/RFC5785, April 2010,\n              <https://www.rfc-editor.org/info/rfc5785>.\n\
    \   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,\n     \
    \         and D. Orchard, \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570,\
    \ March 2012,\n              <https://www.rfc-editor.org/info/rfc6570>.\n   [RFC7231]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC8259]\
    \  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n             \
    \ Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [iso8601]  International Organization for Standardization,\
    \ \"Data\n              elements and interchange formats - Information interchange\n\
    \              - Representation of dates and times\", December 2004.\n   [RFC3849]\
    \  Huston, G., Lord, A., and P. Smith, \"IPv6 Address Prefix\n              Reserved\
    \ for Documentation\", RFC 3849,\n              DOI 10.17487/RFC3849, July 2004,\n\
    \              <https://www.rfc-editor.org/info/rfc3849>.\n   [RFC5737]  Arkko,\
    \ J., Cotton, M., and L. Vegoda, \"IPv4 Address Blocks\n              Reserved\
    \ for Documentation\", RFC 5737,\n              DOI 10.17487/RFC5737, January\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5737>.\n   [RFC6761]\
    \  Cheshire, S. and M. Krochmal, \"Special-Use Domain Names\",\n             \
    \ RFC 6761, DOI 10.17487/RFC6761, February 2013,\n              <https://www.rfc-editor.org/info/rfc6761>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC6996]  Mitchell, J., \"Autonomous System (AS) Reservation for\n      \
    \        Private Use\", BCP 6, RFC 6996, DOI 10.17487/RFC6996, July\n        \
    \      2013, <https://www.rfc-editor.org/info/rfc6996>.\n   [RFC7320]  Nottingham,\
    \ M., \"URI Design and Ownership\", BCP 190,\n              RFC 7320, DOI 10.17487/RFC7320,\
    \ July 2014,\n              <https://www.rfc-editor.org/info/rfc7320>.\n"
- title: Appendix A.  JSend
  contents:
  - "Appendix A.  JSend\n   According to [JSend]:\n      JSend is a specification\
    \ that lays down some rules for how JSON\n      responses from web servers should\
    \ be formatted.  JSend focuses on\n      application-level (as opposed to protocol-\
    \ or transport-level)\n      messaging which makes it ideal for use in REST-style\
    \ applications\n      and APIs.\n   A basic JSend-compliant response must contain\
    \ a \"status\" key and\n   should contain \"data\", \"message\", and \"code\"\
    \ keys dependent on the\n   status value.  The following table lists the required\
    \ and optional\n   keys.\n               +---------+-----------------+---------------+\n\
    \               | Type    | Required keys   | Optional keys |\n              \
    \ +---------+-----------------+---------------+\n               | success | status,\
    \ data    |               |\n               | fail    | status, data    |    \
    \           |\n               | error   | status, message | code, data    |\n\
    \               +---------+-----------------+---------------+\n              \
    \   Table 1: Type and Keys in JSend Response\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Markus Stubbig\n   Independent\n   Germany\n   Email: stubbig.ietf@gmail.com\n"
