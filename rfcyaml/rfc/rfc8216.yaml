- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                    R. Pantos, Ed.
  contents:
  - "Independent Submission                                    R. Pantos, Ed.\n  \
    \                        HTTP Live Streaming\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for transferring unbounded streams\n\
    \   of multimedia data.  It specifies the data format of the files and\n   the\
    \ actions to be taken by the server (sender) and the clients\n   (receivers) of\
    \ the streams.  It describes version 7 of this protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8216.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n   This document\
    \ may not be modified, and derivative works of it may not\n   be created, except\
    \ to format it for publication as an RFC or to\n   translate it into languages\
    \ other than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction to HTTP Live Streaming .............................4\n\
    \   2. Overview ........................................................4\n  \
    \ 3. Media Segments ..................................................6\n    \
    \  3.1. Supported Media Segment Formats ............................6\n      3.2.\
    \ MPEG-2 Transport Streams ...................................7\n      3.3. Fragmented\
    \ MPEG-4 ..........................................7\n      3.4. Packed Audio\
    \ ...............................................8\n      3.5. WebVTT .....................................................8\n\
    \   4. Playlists .......................................................9\n  \
    \    4.1. Definition of a Playlist ..................................10\n    \
    \  4.2. Attribute Lists ...........................................11\n      4.3.\
    \ Playlist Tags .............................................12\n           4.3.1.\
    \ Basic Tags .........................................12\n                  4.3.1.1.\
    \ EXTM3U ....................................12\n                  4.3.1.2. EXT-X-VERSION\
    \ .............................12\n           4.3.2. Media Segment Tags .................................13\n\
    \                  4.3.2.1. EXTINF ....................................13\n  \
    \                4.3.2.2. EXT-X-BYTERANGE ...........................14\n    \
    \              4.3.2.3. EXT-X-DISCONTINUITY .......................14\n      \
    \            4.3.2.4. EXT-X-KEY .................................15\n        \
    \          4.3.2.5. EXT-X-MAP .................................17\n          \
    \        4.3.2.6. EXT-X-PROGRAM-DATE-TIME ...................18\n            \
    \      4.3.2.7. EXT-X-DATERANGE ...........................18\n              \
    \             4.3.2.7.1. Mapping SCTE-35 into\n                              \
    \        EXT-X-DATERANGE ................20\n           4.3.3. Media Playlist\
    \ Tags ................................22\n                  4.3.3.1. EXT-X-TARGETDURATION\
    \ ......................22\n                  4.3.3.2. EXT-X-MEDIA-SEQUENCE ......................22\n\
    \                  4.3.3.3. EXT-X-DISCONTINUITY-SEQUENCE ..............23\n  \
    \                4.3.3.4. EXT-X-ENDLIST .............................23\n    \
    \              4.3.3.5. EXT-X-PLAYLIST-TYPE .......................24\n      \
    \            4.3.3.6. EXT-X-I-FRAMES-ONLY .......................24\n        \
    \   4.3.4. Master Playlist Tags ...............................25\n          \
    \        4.3.4.1. EXT-X-MEDIA ...............................25\n            \
    \               4.3.4.1.1. Rendition Groups ...............28\n              \
    \    4.3.4.2. EXT-X-STREAM-INF ..........................29\n                \
    \           4.3.4.2.1. Alternative Renditions .........32\n                  4.3.4.3.\
    \ EXT-X-I-FRAME-STREAM-INF ..................33\n                  4.3.4.4. EXT-X-SESSION-DATA\
    \ ........................34\n                  4.3.4.5. EXT-X-SESSION-KEY .........................35\n\
    \           4.3.5. Media or Master Playlist Tags ......................35\n  \
    \                4.3.5.1. EXT-X-INDEPENDENT-SEGMENTS ................35\n    \
    \              4.3.5.2. EXT-X-START ...............................36\n   5. Key\
    \ Files ......................................................37\n      5.1. Structure\
    \ of Key Files ....................................37\n      5.2. IV for AES-128\
    \ ............................................37\n   6. Client/Server Responsibilities\
    \ .................................37\n      6.1. Introduction ..............................................37\n\
    \      6.2. Server Responsibilities ...................................37\n  \
    \         6.2.1. General Server Responsibilities ....................37\n    \
    \       6.2.2. Live Playlists .....................................40\n      \
    \     6.2.3. Encrypting Media Segments ..........................41\n        \
    \   6.2.4. Providing Variant Streams ..........................42\n      6.3.\
    \ Client Responsibilities ...................................44\n           6.3.1.\
    \ General Client Responsibilities ....................44\n           6.3.2. Loading\
    \ the Media Playlist File ....................44\n           6.3.3. Playing the\
    \ Media Playlist File ....................45\n           6.3.4. Reloading the\
    \ Media Playlist File ..................46\n           6.3.5. Determining the\
    \ Next Segment to Load ...............47\n           6.3.6. Decrypting Encrypted\
    \ Media Segments ................47\n   7. Protocol Version Compatibility .................................48\n\
    \   8. Playlist Examples ..............................................50\n  \
    \    8.1. Simple Media Playlist .....................................50\n    \
    \  8.2. Live Media Playlist Using HTTPS ...........................50\n      8.3.\
    \ Playlist with Encrypted Media Segments ....................51\n      8.4. Master\
    \ Playlist ...........................................51\n      8.5. Master Playlist\
    \ with I-Frames .............................51\n      8.6. Master Playlist with\
    \ Alternative Audio ....................52\n      8.7. Master Playlist with Alternative\
    \ Video ....................52\n      8.8. Session Data in a Master Playlist .........................53\n\
    \      8.9. CHARACTERISTICS Attribute Containing Multiple\n           Characteristics\
    \ ...........................................54\n      8.10. EXT-X-DATERANGE Carrying\
    \ SCTE-35 Tags ....................54\n   9. IANA Considerations ............................................54\n\
    \   10. Security Considerations .......................................55\n  \
    \ 11. References ....................................................56\n    \
    \  11.1. Normative References .....................................56\n      11.2.\
    \ Informative References ...................................59\n   Contributors\
    \ ......................................................60\n   Authors' Addresses\
    \ ................................................60\n"
- title: 1.  Introduction to HTTP Live Streaming
  contents:
  - "1.  Introduction to HTTP Live Streaming\n   HTTP Live Streaming provides a reliable,\
    \ cost-effective means of\n   delivering continuous and long-form video over the\
    \ Internet.  It\n   allows a receiver to adapt the bit rate of the media to the\
    \ current\n   network conditions in order to maintain uninterrupted playback at\
    \ the\n   best possible quality.  It supports interstitial content boundaries.\n\
    \   It provides a flexible framework for media encryption.  It can\n   efficiently\
    \ offer multiple renditions of the same content, such as\n   audio translations.\
    \  It offers compatibility with large-scale HTTP\n   caching infrastructure to\
    \ support delivery to large audiences.\n   Since the Internet-Draft was first\
    \ posted in 2009, HTTP Live\n   Streaming has been implemented and deployed by\
    \ a wide array of\n   content producers, tools vendors, distributors, and device\n\
    \   manufacturers.  In the subsequent eight years, the protocol has been\n   refined\
    \ by extensive review and discussion with a variety of media\n   streaming implementors.\n\
    \   The purpose of this document is to facilitate interoperability\n   between\
    \ HTTP Live Streaming implementations by describing the media\n   transmission\
    \ protocol.  Using this protocol, a client can receive a\n   continuous stream\
    \ of media from a server for concurrent presentation.\n   This document describes\
    \ version 7 of the protocol.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   A multimedia presentation is specified by a Uniform Resource\n\
    \   Identifier (URI) [RFC3986] to a Playlist.\n   A Playlist is either a Media\
    \ Playlist or a Master Playlist.  Both are\n   UTF-8 text files containing URIs\
    \ and descriptive tags.\n   A Media Playlist contains a list of Media Segments,\
    \ which, when\n   played sequentially, will play the multimedia presentation.\n\
    \   Here is an example of a Media Playlist:\n   #EXTM3U\n   #EXT-X-TARGETDURATION:10\n\
    \   #EXTINF:9.009,\n   http://media.example.com/first.ts\n   #EXTINF:9.009,\n\
    \   http://media.example.com/second.ts\n   #EXTINF:3.003,\n   http://media.example.com/third.ts\n\
    \   The first line is the format identifier tag #EXTM3U.  The line\n   containing\
    \ #EXT-X-TARGETDURATION says that all Media Segments will be\n   10 seconds long\
    \ or less.  Then, three Media Segments are declared.\n   The first and second\
    \ are 9.009 seconds long; the third is 3.003\n   seconds.\n   To play this Playlist,\
    \ the client first downloads it and then\n   downloads and plays each Media Segment\
    \ declared within it.  The\n   client reloads the Playlist as described in this\
    \ document to discover\n   any added segments.  Data SHOULD be carried over HTTP\
    \ [RFC7230], but,\n   in general, a URI can specify any protocol that can reliably\
    \ transfer\n   the specified resource on demand.\n   A more complex presentation\
    \ can be described by a Master Playlist.  A\n   Master Playlist provides a set\
    \ of Variant Streams, each of which\n   describes a different version of the same\
    \ content.\n   A Variant Stream includes a Media Playlist that specifies media\n\
    \   encoded at a particular bit rate, in a particular format, and at a\n   particular\
    \ resolution for media containing video.\n   A Variant Stream can also specify\
    \ a set of Renditions.  Renditions\n   are alternate versions of the content,\
    \ such as audio produced in\n   different languages or video recorded from different\
    \ camera angles.\n   Clients should switch between different Variant Streams to\
    \ adapt to\n   network conditions.  Clients should choose Renditions based on\
    \ user\n   preferences.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Media Segments
  contents:
  - "3.  Media Segments\n   A Media Playlist contains a series of Media Segments that\
    \ make up the\n   overall presentation.  A Media Segment is specified by a URI\
    \ and\n   optionally a byte range.\n   The duration of each Media Segment is indicated\
    \ in the Media Playlist\n   by its EXTINF tag (Section 4.3.2.1).\n   Each segment\
    \ in a Media Playlist has a unique integer Media Sequence\n   Number.  The Media\
    \ Sequence Number of the first segment in the Media\n   Playlist is either 0 or\
    \ declared in the Playlist (Section 4.3.3.2).\n   The Media Sequence Number of\
    \ every other segment is equal to the\n   Media Sequence Number of the segment\
    \ that precedes it plus one.\n   Each Media Segment MUST carry the continuation\
    \ of the encoded\n   bitstream from the end of the segment with the previous Media\n\
    \   Sequence Number, where values in a series such as timestamps and\n   Continuity\
    \ Counters MUST continue uninterrupted.  The only exceptions\n   are the first\
    \ Media Segment ever to appear in a Media Playlist and\n   Media Segments that\
    \ are explicitly signaled as discontinuities\n   (Section 4.3.2.3).  Unmarked\
    \ media discontinuities can trigger\n   playback errors.\n   Any Media Segment\
    \ that contains video SHOULD include enough\n   information to initialize a video\
    \ decoder and decode a continuous set\n   of frames that includes the final frame\
    \ in the Segment; network\n   efficiency is optimized if there is enough information\
    \ in the Segment\n   to decode all frames in the Segment.  For example, any Media\
    \ Segment\n   containing H.264 video SHOULD contain an Instantaneous Decoding\n\
    \   Refresh (IDR); frames prior to the first IDR will be downloaded but\n   possibly\
    \ discarded.\n"
- title: 3.1.  Supported Media Segment Formats
  contents:
  - "3.1.  Supported Media Segment Formats\n   All Media Segments MUST be in a format\
    \ described in this section.\n   Transport of other media file formats is not\
    \ defined.\n   Some media formats require a common sequence of bytes to initialize\
    \ a\n   parser before a Media Segment can be parsed.  This format-specific\n \
    \  sequence is called the Media Initialization Section.  The Media\n   Initialization\
    \ Section can be specified by an EXT-X-MAP tag\n   (Section 4.3.2.5).  The Media\
    \ Initialization Section MUST NOT contain\n   sample data.\n"
- title: 3.2.  MPEG-2 Transport Streams
  contents:
  - "3.2.  MPEG-2 Transport Streams\n   MPEG-2 Transport Streams are specified by\
    \ [ISO_13818].\n   The Media Initialization Section of an MPEG-2 Transport Stream\n\
    \   Segment is a Program Association Table (PAT) followed by a Program\n   Map\
    \ Table (PMT).\n   Transport Stream Segments MUST contain a single MPEG-2 Program;\n\
    \   playback of Multi-Program Transport Streams is not defined.  Each\n   Transport\
    \ Stream Segment MUST contain a PAT and a PMT, or have an\n   EXT-X-MAP tag (Section\
    \ 4.3.2.5) applied to it.  The first two\n   Transport Stream packets in a Segment\
    \ without an EXT-X-MAP tag SHOULD\n   be a PAT and a PMT.\n"
- title: 3.3.  Fragmented MPEG-4
  contents:
  - "3.3.  Fragmented MPEG-4\n   MPEG-4 Fragments are specified by the ISO Base Media\
    \ File Format\n   [ISOBMFF].  Unlike regular MPEG-4 files that have a Movie Box\n\
    \   ('moov') that contains sample tables and a Media Data Box ('mdat')\n   containing\
    \ the corresponding samples, an MPEG-4 Fragment consists of\n   a Movie Fragment\
    \ Box ('moof') containing a subset of the sample table\n   and a Media Data Box\
    \ containing those samples.  Use of MPEG-4\n   Fragments does require a Movie\
    \ Box for initialization, but that Movie\n   Box contains only non-sample-specific\
    \ information such as track and\n   sample descriptions.\n   A Fragmented MPEG-4\
    \ (fMP4) Segment is a \"segment\" as defined by\n   Section 3 of [ISOBMFF], including\
    \ the constraints on Media Data Boxes\n   in Section 8.16 of [ISOBMFF].\n   The\
    \ Media Initialization Section for an fMP4 Segment is an ISO Base\n   Media File\
    \ that can initialize a parser for that Segment.\n   Broadly speaking, fMP4 Segments\
    \ and Media Initialization Sections are\n   [ISOBMFF] files that also satisfy\
    \ the constraints described in this\n   section.\n   The Media Initialization\
    \ Section for an fMP4 Segment MUST contain a\n   File Type Box ('ftyp') containing\
    \ a brand that is compatible with\n   'iso6' or higher.  The File Type Box MUST\
    \ be followed by a Movie Box.\n   The Movie Box MUST contain a Track Box ('trak')\
    \ for every Track\n   Fragment Box ('traf') in the fMP4 Segment, with matching\
    \ track_ID.\n   Each Track Box SHOULD contain a sample table, but its sample count\n\
    \   MUST be zero.  Movie Header Boxes ('mvhd') and Track Header Boxes\n   ('tkhd')\
    \ MUST have durations of zero.  A Movie Extends Box ('mvex')\n   MUST follow the\
    \ last Track Box.  Note that a Common Media Application\n   Format (CMAF) Header\
    \ [CMAF] meets all these requirements.\n   In an fMP4 Segment, every Track Fragment\
    \ Box MUST contain a Track\n   Fragment Decode Time Box ('tfdt'). fMP4 Segments\
    \ MUST use movie-\n   fragment-relative addressing. fMP4 Segments MUST NOT use\
    \ external\n   data references.  Note that a CMAF Segment meets these requirements.\n\
    \   An fMP4 Segment in a Playlist containing the EXT-X-I-FRAMES-ONLY tag\n   (Section\
    \ 4.3.3.6) MAY omit the portion of the Media Data Box\n   following the intra-coded\
    \ frame (I-frame) sample data.\n   Each fMP4 Segment in a Media Playlist MUST\
    \ have an EXT-X-MAP tag\n   applied to it.\n"
- title: 3.4.  Packed Audio
  contents:
  - "3.4.  Packed Audio\n   A Packed Audio Segment contains encoded audio samples\
    \ and ID3 tags\n   that are simply packed together with minimal framing and no\
    \ per-\n   sample timestamps.  Supported Packed Audio formats are Advanced Audio\n\
    \   Coding (AAC) with Audio Data Transport Stream (ADTS) framing\n   [ISO_13818_7],\
    \ MP3 [ISO_13818_3], AC-3 [AC_3], and Enhanced AC-3\n   [AC_3].\n   A Packed Audio\
    \ Segment has no Media Initialization Section.\n   Each Packed Audio Segment MUST\
    \ signal the timestamp of its first\n   sample with an ID3 Private frame (PRIV)\
    \ tag [ID3] at the beginning of\n   the segment.  The ID3 PRIV owner identifier\
    \ MUST be\n   \"com.apple.streaming.transportStreamTimestamp\".  The ID3 payload\
    \ MUST\n   be a 33-bit MPEG-2 Program Elementary Stream timestamp expressed as\
    \ a\n   big-endian eight-octet number, with the upper 31 bits set to zero.\n \
    \  Clients SHOULD NOT play Packed Audio Segments without this ID3 tag.\n"
- title: 3.5.  WebVTT
  contents:
  - "3.5.  WebVTT\n   A WebVTT Segment is a section of a WebVTT [WebVTT] file.  WebVTT\n\
    \   Segments carry subtitles.\n   The Media Initialization Section of a WebVTT\
    \ Segment is the WebVTT\n   header.\n   Each WebVTT Segment MUST contain all subtitle\
    \ cues that are intended\n   to be displayed during the period indicated by the\
    \ segment EXTINF\n   duration.  The start time offset and end time offset of each\
    \ cue MUST\n   indicate the total display time for that cue, even if part of the\
    \ cue\n   time range is outside the Segment period.  A WebVTT Segment MAY\n  \
    \ contain no cues; this indicates that no subtitles are to be displayed\n   during\
    \ that period.\n   Each WebVTT Segment MUST either start with a WebVTT header\
    \ or have an\n   EXT-X-MAP tag applied to it.\n   In order to synchronize timestamps\
    \ between audio/video and subtitles,\n   an X-TIMESTAMP-MAP metadata header SHOULD\
    \ be added to each WebVTT\n   header.  This header maps WebVTT cue timestamps\
    \ to MPEG-2 (PES)\n   timestamps in other Renditions of the Variant Stream.  Its\
    \ format is:\n   X-TIMESTAMP-MAP=LOCAL:<cue time>,MPEGTS:<MPEG-2 time>\n   e.g.,\
    \ X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:900000\n   The cue timestamp in the\
    \ LOCAL attribute MAY fall outside the range\n   of time covered by the segment.\n\
    \   If a WebVTT segment does not have the X-TIMESTAMP-MAP, the client\n   MUST\
    \ assume that the WebVTT cue time of 0 maps to an MPEG-2 timestamp\n   of 0.\n\
    \   When synchronizing WebVTT with PES timestamps, clients SHOULD account\n  \
    \ for cases where the 33-bit PES timestamps have wrapped and the WebVTT\n   cue\
    \ times have not.\n"
- title: 4.  Playlists
  contents:
  - "4.  Playlists\n   This section describes the Playlist files used by HTTP Live\n\
    \   Streaming.  In this section, \"MUST\" and \"MUST NOT\" specify the rules\n\
    \   for the syntax and structure of legal Playlist files.  Playlists that\n  \
    \ violate these rules are invalid; clients MUST fail to parse them.\n   See Section\
    \ 6.3.2.\n   The format of the Playlist files is derived from the M3U [M3U]\n\
    \   playlist file format and inherits two tags from that earlier file\n   format:\
    \ EXTM3U (Section 4.3.1.1) and EXTINF (Section 4.3.2.1).\n   In the specification\
    \ of tag syntax, a string enclosed by <>\n   identifies a tag parameter; its specific\
    \ format is described in its\n   tag definition.  If a parameter is further surrounded\
    \ by [], it is\n   optional; otherwise, it is required.\n   Each Playlist file\
    \ MUST be identifiable either by the path component\n   of its URI or by HTTP\
    \ Content-Type.  In the first case, the path MUST\n   end with either .m3u8 or\
    \ .m3u.  In the second, the HTTP Content-Type\n   MUST be \"application/vnd.apple.mpegurl\"\
    \ or \"audio/mpegurl\".  Clients\n   SHOULD refuse to parse Playlists that are\
    \ not so identified.\n"
- title: 4.1.  Definition of a Playlist
  contents:
  - "4.1.  Definition of a Playlist\n   Playlist files MUST be encoded in UTF-8 [RFC3629].\
    \  They MUST NOT\n   contain any Byte Order Mark (BOM); clients SHOULD fail to\
    \ parse\n   Playlists that contain a BOM or do not parse as UTF-8.  Playlist\n\
    \   files MUST NOT contain UTF-8 control characters (U+0000 to U+001F and\n  \
    \ U+007F to U+009F), with the exceptions of CR (U+000D) and LF\n   (U+000A). \
    \ All character sequences MUST be normalized according to\n   Unicode normalization\
    \ form \"NFC\" [UNICODE].  Note that US-ASCII\n   [US_ASCII] conforms to these\
    \ rules.\n   Lines in a Playlist file are terminated by either a single line feed\n\
    \   character or a carriage return character followed by a line feed\n   character.\
    \  Each line is a URI, is blank, or starts with the\n   character '#'.  Blank\
    \ lines are ignored.  Whitespace MUST NOT be\n   present, except for elements\
    \ in which it is explicitly specified.\n   Lines that start with the character\
    \ '#' are either comments or tags.\n   Tags begin with #EXT.  They are case sensitive.\
    \  All other lines that\n   begin with '#' are comments and SHOULD be ignored.\n\
    \   A URI line identifies a Media Segment or a Playlist file (see\n   Section\
    \ 4.3.4.2).  Each Media Segment is specified by a URI and the\n   tags that apply\
    \ to it.\n   A Playlist is a Media Playlist if all URI lines in the Playlist\n\
    \   identify Media Segments.  A Playlist is a Master Playlist if all URI\n   lines\
    \ in the Playlist identify Media Playlists.  A Playlist MUST be\n   either a Media\
    \ Playlist or a Master Playlist; all other Playlists are\n   invalid.\n   A URI\
    \ in a Playlist, whether it is a URI line or part of a tag, MAY\n   be relative.\
    \  Any relative URI is considered to be relative to the\n   URI of the Playlist\
    \ that contains it.\n   The duration of a Media Playlist is the sum of the durations\
    \ of the\n   Media Segments within it.\n   The segment bit rate of a Media Segment\
    \ is the size of the Media\n   Segment divided by its EXTINF duration (Section\
    \ 4.3.2.1).  Note that\n   this includes container overhead but does not include\
    \ overhead\n   imposed by the delivery system, such as HTTP, TCP, or IP headers.\n\
    \   The peak segment bit rate of a Media Playlist is the largest bit rate\n  \
    \ of any contiguous set of segments whose total duration is between 0.5\n   and\
    \ 1.5 times the target duration.  The bit rate of a set is\n   calculated by dividing\
    \ the sum of the segment sizes by the sum of the\n   segment durations.\n   The\
    \ average segment bit rate of a Media Playlist is the sum of the\n   sizes (in\
    \ bits) of every Media Segment in the Media Playlist, divided\n   by the Media\
    \ Playlist duration.  Note that this includes container\n   overhead, but not\
    \ HTTP or other overhead imposed by the delivery\n   system.\n"
- title: 4.2.  Attribute Lists
  contents:
  - "4.2.  Attribute Lists\n   Certain tags have values that are attribute-lists.\
    \  An attribute-list\n   is a comma-separated list of attribute/value pairs with\
    \ no\n   whitespace.\n   An attribute/value pair has the following syntax:\n \
    \  AttributeName=AttributeValue\n   An AttributeName is an unquoted string containing\
    \ characters from the\n   set [A..Z], [0..9] and '-'.  Therefore, AttributeNames\
    \ contain only\n   uppercase letters, not lowercase.  There MUST NOT be any whitespace\n\
    \   between the AttributeName and the '=' character, nor between the '='\n   character\
    \ and the AttributeValue.\n   An AttributeValue is one of the following:\n   o\
    \  decimal-integer: an unquoted string of characters from the set\n      [0..9]\
    \ expressing an integer in base-10 arithmetic in the range\n      from 0 to 2^64-1\
    \ (18446744073709551615).  A decimal-integer may be\n      from 1 to 20 characters\
    \ long.\n   o  hexadecimal-sequence: an unquoted string of characters from the\n\
    \      set [0..9] and [A..F] that is prefixed with 0x or 0X.  The maximum\n  \
    \    length of a hexadecimal-sequence depends on its AttributeNames.\n   o  decimal-floating-point:\
    \ an unquoted string of characters from the\n      set [0..9] and '.' that expresses\
    \ a non-negative floating-point\n      number in decimal positional notation.\n\
    \   o  signed-decimal-floating-point: an unquoted string of characters\n     \
    \ from the set [0..9], '-', and '.' that expresses a signed\n      floating-point\
    \ number in decimal positional notation.\n   o  quoted-string: a string of characters\
    \ within a pair of double\n      quotes (0x22).  The following characters MUST\
    \ NOT appear in a\n      quoted-string: line feed (0xA), carriage return (0xD),\
    \ or double\n      quote (0x22).  Quoted-string AttributeValues SHOULD be constructed\n\
    \      so that byte-wise comparison is sufficient to test two quoted-\n      string\
    \ AttributeValues for equality.  Note that this implies case-\n      sensitive\
    \ comparison.\n   o  enumerated-string: an unquoted character string from a set\
    \ that is\n      explicitly defined by the AttributeName.  An enumerated-string\n\
    \      will never contain double quotes (\"), commas (,), or whitespace.\n   o\
    \  decimal-resolution: two decimal-integers separated by the \"x\"\n      character.\
    \  The first integer is a horizontal pixel dimension\n      (width); the second\
    \ is a vertical pixel dimension (height).\n   The type of the AttributeValue for\
    \ a given AttributeName is specified\n   by the attribute definition.\n   A given\
    \ AttributeName MUST NOT appear more than once in a given\n   attribute-list.\
    \  Clients SHOULD refuse to parse such Playlists.\n"
- title: 4.3.  Playlist Tags
  contents:
  - "4.3.  Playlist Tags\n   Playlist tags specify either global parameters of the\
    \ Playlist or\n   information about the Media Segments or Media Playlists that\
    \ appear\n   after them.\n"
- title: 4.3.1.  Basic Tags
  contents:
  - "4.3.1.  Basic Tags\n   These tags are allowed in both Media Playlists and Master\
    \ Playlists.\n"
- title: 4.3.1.1.  EXTM3U
  contents:
  - "4.3.1.1.  EXTM3U\n   The EXTM3U tag indicates that the file is an Extended M3U\
    \ [M3U]\n   Playlist file.  It MUST be the first line of every Media Playlist\
    \ and\n   every Master Playlist.  Its format is:\n   #EXTM3U\n"
- title: 4.3.1.2.  EXT-X-VERSION
  contents:
  - "4.3.1.2.  EXT-X-VERSION\n   The EXT-X-VERSION tag indicates the compatibility\
    \ version of the\n   Playlist file, its associated media, and its server.\n  \
    \ The EXT-X-VERSION tag applies to the entire Playlist file.  Its\n   format is:\n\
    \   #EXT-X-VERSION:<n>\n   where n is an integer indicating the protocol compatibility\
    \ version\n   number.\n   It MUST appear in all Playlists containing tags or attributes\
    \ that\n   are not compatible with protocol version 1 to support\n   interoperability\
    \ with older clients.  Section 7 specifies the minimum\n   value of the compatibility\
    \ version number for any given Playlist\n   file.\n   A Playlist file MUST NOT\
    \ contain more than one EXT-X-VERSION tag.  If\n   a client encounters a Playlist\
    \ with multiple EXT-X-VERSION tags, it\n   MUST fail to parse it.\n"
- title: 4.3.2.  Media Segment Tags
  contents:
  - "4.3.2.  Media Segment Tags\n   Each Media Segment is specified by a series of\
    \ Media Segment tags\n   followed by a URI.  Some Media Segment tags apply to\
    \ just the next\n   segment; others apply to all subsequent segments until another\n\
    \   instance of the same tag.\n   A Media Segment tag MUST NOT appear in a Master\
    \ Playlist.  Clients\n   MUST fail to parse Playlists that contain both Media\
    \ Segment tags and\n   Master Playlist tags (Section 4.3.4).\n"
- title: 4.3.2.1.  EXTINF
  contents:
  - "4.3.2.1.  EXTINF\n   The EXTINF tag specifies the duration of a Media Segment.\
    \  It applies\n   only to the next Media Segment.  This tag is REQUIRED for each\
    \ Media\n   Segment.  Its format is:\n   #EXTINF:<duration>,[<title>]\n   where\
    \ duration is a decimal-floating-point or decimal-integer number\n   (as described\
    \ in Section 4.2) that specifies the duration of the\n   Media Segment in seconds.\
    \  Durations SHOULD be decimal-floating-\n   point, with enough accuracy to avoid\
    \ perceptible error when segment\n   durations are accumulated.  However, if the\
    \ compatibility version\n   number is less than 3, durations MUST be integers.\
    \  Durations that\n   are reported as integers SHOULD be rounded to the nearest\
    \ integer.\n   The remainder of the line following the comma is an optional human-\n\
    \   readable informative title of the Media Segment expressed as UTF-8\n   text.\n"
- title: 4.3.2.2.  EXT-X-BYTERANGE
  contents:
  - "4.3.2.2.  EXT-X-BYTERANGE\n   The EXT-X-BYTERANGE tag indicates that a Media\
    \ Segment is a sub-range\n   of the resource identified by its URI.  It applies\
    \ only to the next\n   URI line that follows it in the Playlist.  Its format is:\n\
    \   #EXT-X-BYTERANGE:<n>[@<o>]\n   where n is a decimal-integer indicating the\
    \ length of the sub-range\n   in bytes.  If present, o is a decimal-integer indicating\
    \ the start of\n   the sub-range, as a byte offset from the beginning of the resource.\n\
    \   If o is not present, the sub-range begins at the next byte following\n   the\
    \ sub-range of the previous Media Segment.\n   If o is not present, a previous\
    \ Media Segment MUST appear in the\n   Playlist file and MUST be a sub-range of\
    \ the same media resource, or\n   the Media Segment is undefined and the client\
    \ MUST fail to parse the\n   Playlist.\n   A Media Segment without an EXT-X-BYTERANGE\
    \ tag consists of the entire\n   resource identified by its URI.\n   Use of the\
    \ EXT-X-BYTERANGE tag REQUIRES a compatibility version\n   number of 4 or greater.\n"
- title: 4.3.2.3.  EXT-X-DISCONTINUITY
  contents:
  - "4.3.2.3.  EXT-X-DISCONTINUITY\n   The EXT-X-DISCONTINUITY tag indicates a discontinuity\
    \ between the\n   Media Segment that follows it and the one that preceded it.\n\
    \   Its format is:\n   #EXT-X-DISCONTINUITY\n   The EXT-X-DISCONTINUITY tag MUST\
    \ be present if there is a change in\n   any of the following characteristics:\n\
    \   o  file format\n   o  number, type, and identifiers of tracks\n   o  timestamp\
    \ sequence\n   The EXT-X-DISCONTINUITY tag SHOULD be present if there is a change\
    \ in\n   any of the following characteristics:\n   o  encoding parameters\n  \
    \ o  encoding sequence\n   See Sections 3, 6.2.1, and 6.3.3 for more information\
    \ about the EXT-\n   X-DISCONTINUITY tag.\n"
- title: 4.3.2.4.  EXT-X-KEY
  contents:
  - "4.3.2.4.  EXT-X-KEY\n   Media Segments MAY be encrypted.  The EXT-X-KEY tag specifies\
    \ how to\n   decrypt them.  It applies to every Media Segment and to every Media\n\
    \   Initialization Section declared by an EXT-X-MAP tag that appears\n   between\
    \ it and the next EXT-X-KEY tag in the Playlist file with the\n   same KEYFORMAT\
    \ attribute (or the end of the Playlist file).  Two or\n   more EXT-X-KEY tags\
    \ with different KEYFORMAT attributes MAY apply to\n   the same Media Segment\
    \ if they ultimately produce the same decryption\n   key.  The format is:\n  \
    \ #EXT-X-KEY:<attribute-list>\n   The following attributes are defined:\n    \
    \  METHOD\n      The value is an enumerated-string that specifies the encryption\n\
    \      method.  This attribute is REQUIRED.\n      The methods defined are: NONE,\
    \ AES-128, and SAMPLE-AES.\n      An encryption method of NONE means that Media\
    \ Segments are not\n      encrypted.  If the encryption method is NONE, other\
    \ attributes\n      MUST NOT be present.\n      An encryption method of AES-128\
    \ signals that Media Segments are\n      completely encrypted using the Advanced\
    \ Encryption Standard (AES)\n      [AES_128] with a 128-bit key, Cipher Block\
    \ Chaining (CBC), and\n      Public-Key Cryptography Standards #7 (PKCS7) padding\
    \ [RFC5652].\n      CBC is restarted on each segment boundary, using either the\n\
    \      Initialization Vector (IV) attribute value or the Media Sequence\n    \
    \  Number as the IV; see Section 5.2.\n      An encryption method of SAMPLE-AES\
    \ means that the Media Segments\n      contain media samples, such as audio or\
    \ video, that are encrypted\n      using the Advanced Encryption Standard [AES_128].\
    \  How these media\n      streams are encrypted and encapsulated in a segment\
    \ depends on the\n      media encoding and the media format of the segment.  fMP4\
    \ Media\n      Segments are encrypted using the 'cbcs' scheme of Common\n    \
    \  Encryption [COMMON_ENC].  Encryption of other Media Segment\n      formats\
    \ containing H.264 [H_264], AAC [ISO_14496], AC-3 [AC_3],\n      and Enhanced\
    \ AC-3 [AC_3] media streams is described in the HTTP\n      Live Streaming (HLS)\
    \ Sample Encryption specification [SampleEnc].\n      The IV attribute MAY be\
    \ present; see Section 5.2.\n      URI\n      The value is a quoted-string containing\
    \ a URI that specifies how\n      to obtain the key.  This attribute is REQUIRED\
    \ unless the METHOD\n      is NONE.\n      IV\n      The value is a hexadecimal-sequence\
    \ that specifies a 128-bit\n      unsigned integer Initialization Vector to be\
    \ used with the key.\n      Use of the IV attribute REQUIRES a compatibility version\
    \ number of\n      2 or greater.  See Section 5.2 for when the IV attribute is\
    \ used.\n      KEYFORMAT\n      The value is a quoted-string that specifies how\
    \ the key is\n      represented in the resource identified by the URI; see Section\
    \ 5\n      for more detail.  This attribute is OPTIONAL; its absence\n      indicates\
    \ an implicit value of \"identity\".  Use of the KEYFORMAT\n      attribute REQUIRES\
    \ a compatibility version number of 5 or greater.\n      KEYFORMATVERSIONS\n \
    \     The value is a quoted-string containing one or more positive\n      integers\
    \ separated by the \"/\" character (for example, \"1\", \"1/2\",\n      or \"\
    1/2/5\").  If more than one version of a particular KEYFORMAT\n      is defined,\
    \ this attribute can be used to indicate which\n      version(s) this instance\
    \ complies with.  This attribute is\n      OPTIONAL; if it is not present, its\
    \ value is considered to be \"1\".\n      Use of the KEYFORMATVERSIONS attribute\
    \ REQUIRES a compatibility\n      version number of 5 or greater.\n   If the Media\
    \ Playlist file does not contain an EXT-X-KEY tag, then\n   Media Segments are\
    \ not encrypted.\n   See Section 5 for the format of the Key file and Sections\
    \ 5.2, 6.2.3,\n   and 6.3.6 for additional information on Media Segment encryption.\n"
- title: 4.3.2.5.  EXT-X-MAP
  contents:
  - "4.3.2.5.  EXT-X-MAP\n   The EXT-X-MAP tag specifies how to obtain the Media Initialization\n\
    \   Section (Section 3) required to parse the applicable Media Segments.\n   It\
    \ applies to every Media Segment that appears after it in the\n   Playlist until\
    \ the next EXT-X-MAP tag or until the end of the\n   Playlist.\n   Its format\
    \ is:\n   #EXT-X-MAP:<attribute-list>\n   The following attributes are defined:\n\
    \      URI\n      The value is a quoted-string containing a URI that identifies\
    \ a\n      resource that contains the Media Initialization Section.  This\n  \
    \    attribute is REQUIRED.\n      BYTERANGE\n      The value is a quoted-string\
    \ specifying a byte range into the\n      resource identified by the URI attribute.\
    \  This range SHOULD\n      contain only the Media Initialization Section.  The\
    \ format of the\n      byte range is described in Section 4.3.2.2.  This attribute\
    \ is\n      OPTIONAL; if it is not present, the byte range is the entire\n   \
    \   resource indicated by the URI.\n   An EXT-X-MAP tag SHOULD be supplied for\
    \ Media Segments in Playlists\n   with the EXT-X-I-FRAMES-ONLY tag when the first\
    \ Media Segment (i.e.,\n   I-frame) in the Playlist (or the first segment following\
    \ an EXT-\n   X-DISCONTINUITY tag) does not immediately follow the Media\n   Initialization\
    \ Section at the beginning of its resource.\n   Use of the EXT-X-MAP tag in a\
    \ Media Playlist that contains the EXT-\n   X-I-FRAMES-ONLY tag REQUIRES a compatibility\
    \ version number of 5 or\n   greater.  Use of the EXT-X-MAP tag in a Media Playlist\
    \ that DOES NOT\n   contain the EXT-X-I-FRAMES-ONLY tag REQUIRES a compatibility\
    \ version\n   number of 6 or greater.\n   If the Media Initialization Section\
    \ declared by an EXT-X-MAP tag is\n   encrypted with a METHOD of AES-128, the\
    \ IV attribute of the EXT-X-KEY\n   tag that applies to the EXT-X-MAP is REQUIRED.\n"
- title: 4.3.2.6.  EXT-X-PROGRAM-DATE-TIME
  contents:
  - "4.3.2.6.  EXT-X-PROGRAM-DATE-TIME\n   The EXT-X-PROGRAM-DATE-TIME tag associates\
    \ the first sample of a\n   Media Segment with an absolute date and/or time. \
    \ It applies only to\n   the next Media Segment.  Its format is:\n   #EXT-X-PROGRAM-DATE-TIME:<date-time-msec>\n\
    \   where date-time-msec is an ISO/IEC 8601:2004 [ISO_8601] date/time\n   representation,\
    \ such as YYYY-MM-DDThh:mm:ss.SSSZ.  It SHOULD indicate\n   a time zone and fractional\
    \ parts of seconds, to millisecond accuracy.\n   For example:\n   #EXT-X-PROGRAM-DATE-TIME:2010-02-19T14:54:23.031+08:00\n\
    \   See Sections 6.2.1 and 6.3.3 for more information on the EXT-X-\n   PROGRAM-DATE-TIME\
    \ tag.\n"
- title: 4.3.2.7.  EXT-X-DATERANGE
  contents:
  - "4.3.2.7.  EXT-X-DATERANGE\n   The EXT-X-DATERANGE tag associates a Date Range\
    \ (i.e., a range of\n   time defined by a starting and ending date) with a set\
    \ of attribute/\n   value pairs.  Its format is:\n   #EXT-X-DATERANGE:<attribute-list>\n\
    \   where the defined attributes are:\n      ID\n      A quoted-string that uniquely\
    \ identifies a Date Range in the\n      Playlist.  This attribute is REQUIRED.\n\
    \      CLASS\n      A client-defined quoted-string that specifies some set of\n\
    \      attributes and their associated value semantics.  All Date Ranges\n   \
    \   with the same CLASS attribute value MUST adhere to these\n      semantics.\
    \  This attribute is OPTIONAL.\n      START-DATE\n      A quoted-string containing\
    \ the ISO-8601 date at which the Date\n      Range begins.  This attribute is\
    \ REQUIRED.\n      END-DATE\n      A quoted-string containing the ISO-8601 date\
    \ at which the Date\n      Range ends.  It MUST be equal to or later than the\
    \ value of the\n      START-DATE attribute.  This attribute is OPTIONAL.\n   \
    \   DURATION\n      The duration of the Date Range expressed as a decimal-floating-\n\
    \      point number of seconds.  It MUST NOT be negative.  A single\n      instant\
    \ in time (e.g., crossing a finish line) SHOULD be\n      represented with a duration\
    \ of 0.  This attribute is OPTIONAL.\n      PLANNED-DURATION\n      The expected\
    \ duration of the Date Range expressed as a decimal-\n      floating-point number\
    \ of seconds.  It MUST NOT be negative.  This\n      attribute SHOULD be used\
    \ to indicate the expected duration of a\n      Date Range whose actual duration\
    \ is not yet known.  It is\n      OPTIONAL.\n      X-<client-attribute>\n    \
    \  The \"X-\" prefix defines a namespace reserved for client-defined\n      attributes.\
    \  The client-attribute MUST be a legal AttributeName.\n      Clients SHOULD use\
    \ a reverse-DNS syntax when defining their own\n      attribute names to avoid\
    \ collisions.  The attribute value MUST be\n      a quoted-string, a hexadecimal-sequence,\
    \ or a decimal-floating-\n      point.  An example of a client-defined attribute\
    \ is X-COM-EXAMPLE-\n      AD-ID=\"XYZ123\".  These attributes are OPTIONAL.\n\
    \      SCTE35-CMD, SCTE35-OUT, SCTE35-IN\n      Used to carry SCTE-35 data; see\
    \ Section 4.3.2.7.1 for more\n      information.  These attributes are OPTIONAL.\n\
    \      END-ON-NEXT\n      An enumerated-string whose value MUST be YES.  This\
    \ attribute\n      indicates that the end of the range containing it is equal\
    \ to the\n      START-DATE of its Following Range.  The Following Range is the\n\
    \      Date Range of the same CLASS that has the earliest START-DATE\n      after\
    \ the START-DATE of the range in question.  This attribute is\n      OPTIONAL.\n\
    \   An EXT-X-DATERANGE tag with an END-ON-NEXT=YES attribute MUST have a\n   CLASS\
    \ attribute.  Other EXT-X-DATERANGE tags with the same CLASS\n   attribute MUST\
    \ NOT specify Date Ranges that overlap.\n   An EXT-X-DATERANGE tag with an END-ON-NEXT=YES\
    \ attribute MUST NOT\n   contain DURATION or END-DATE attributes.\n   A Date Range\
    \ with neither a DURATION, an END-DATE, nor an END-ON-\n   NEXT=YES attribute\
    \ has an unknown duration, even if it has a PLANNED-\n   DURATION.\n   If a Playlist\
    \ contains an EXT-X-DATERANGE tag, it MUST also contain\n   at least one EXT-X-PROGRAM-DATE-TIME\
    \ tag.\n   If a Playlist contains two EXT-X-DATERANGE tags with the same ID\n\
    \   attribute value, then any AttributeName that appears in both tags\n   MUST\
    \ have the same AttributeValue.\n   If a Date Range contains both a DURATION attribute\
    \ and an END-DATE\n   attribute, the value of the END-DATE attribute MUST be equal\
    \ to the\n   value of the START-DATE attribute plus the value of the DURATION\n\
    \   attribute.\n   Clients SHOULD ignore EXT-X-DATERANGE tags with illegal syntax.\n"
- title: 4.3.2.7.1.  Mapping SCTE-35 into EXT-X-DATERANGE
  contents:
  - "4.3.2.7.1.  Mapping SCTE-35 into EXT-X-DATERANGE\n   Splice information carried\
    \ in source media according to the SCTE-35\n   specification [SCTE35] MAY be represented\
    \ in a Media Playlist using\n   EXT-X-DATERANGE tags.\n   Each SCTE-35 splice_info_section()\
    \ containing a splice_null(),\n   splice_schedule(), bandwidth_reservation(),\
    \ or private_cmd() SHOULD\n   be represented by an EXT-X-DATERANGE tag with an\
    \ SCTE35-CMD attribute\n   whose value is the big-endian binary representation\
    \ of the\n   splice_info_section(), expressed as a hexadecimal-sequence.\n   An\
    \ SCTE-35 splice out/in pair signaled by a pair of splice_insert()\n   commands\
    \ SHOULD be represented by one or more EXT-X-DATERANGE tags\n   carrying the same\
    \ ID attribute, which MUST be unique to that splice\n   out/in pair.  The \"out\"\
    \ splice_info_section() (with\n   out_of_network_indicator set to 1) MUST be placed\
    \ in an SCTE35-OUT\n   attribute, with the same formatting as SCTE35-CMD.  The\
    \ \"in\"\n   splice_info_section() (with out_of_network_indicator set to 0) MUST\n\
    \   be placed in an SCTE35-IN attribute, with the same formatting as\n   SCTE35-CMD.\n\
    \   An SCTE-35 splice out/in pair signaled by a pair of time_signal()\n   commands,\
    \ each carrying a single segmentation_descriptor(), SHOULD be\n   represented\
    \ by one or more EXT-X-DATERANGE tags carrying the same ID\n   attribute, which\
    \ MUST be unique to that splice out/in pair.  The\n   \"out\" splice_info_section()\
    \ MUST be placed in an SCTE35-OUT\n   attribute; the \"in\" splice_info_section()\
    \ MUST be placed in an\n   SCTE35-IN attribute.\n   Different types of segmentation,\
    \ as indicated by the\n   segmentation_type_id in the segmentation_descriptor(),\
    \ SHOULD be\n   represented by separate EXT-X-DATERANGE tags, even if two or more\n\
    \   segmentation_descriptor()s arrive in the same splice_info_section().\n   In\
    \ that case, each EXT-X-DATERANGE tag will have an SCTE35-OUT,\n   SCTE35-IN,\
    \ or SCTE35-CMD attribute whose value is the entire\n   splice_info_section().\n\
    \   An SCTE-35 time_signal() command that does not signal a splice out or\n  \
    \ in point SHOULD be represented by an EXT-X-DATERANGE tag with an\n   SCTE35-CMD\
    \ attribute.\n   The START-DATE of an EXT-X-DATERANGE tag containing an SCTE35-OUT\n\
    \   attribute MUST be the date and time that corresponds to the program\n   time\
    \ of that splice.\n   The START-DATE of an EXT-X-DATERANGE tag containing an SCTE35-CMD\n\
    \   MUST be the date and time specified by the splice_time() in the\n   command\
    \ or the program time at which the command appeared in the\n   source stream if\
    \ the command does not specify a splice_time().\n   An EXT-X-DATERANGE tag containing\
    \ an SCTE35-OUT attribute MAY contain\n   a PLANNED-DURATION attribute.  Its value\
    \ MUST be the planned duration\n   of the splice.\n   The DURATION of an EXT-X-DATERANGE\
    \ tag containing an SCTE35-IN\n   attribute MUST be the actual (not planned) program\
    \ duration between\n   the corresponding out-point and that in-point.\n   The\
    \ END-DATE of an EXT-X-DATERANGE tag containing an SCTE35-IN\n   attribute MUST\
    \ be the actual (not planned) program date and time of\n   that in-point.\n  \
    \ If the actual end date and time is not known when an SCTE35-OUT\n   attribute\
    \ is added to the Playlist, the DURATION attribute and the\n   END-TIME attribute\
    \ MUST NOT be present; the actual end date of the\n   splice SHOULD be signaled\
    \ by another EXT-X-DATERANGE tag once it has\n   been established.\n   A canceled\
    \ splice SHOULD NOT appear in the Playlist as an EXT-\n   X-DATERANGE tag.\n \
    \  An EXT-X-DATERANGE tag announcing a splice SHOULD be added to a\n   Playlist\
    \ at the same time as the last pre-splice Media Segment, or\n   earlier if possible.\n\
    \   The ID attribute of an EXT-X-DATERANGE tag MAY contain a\n   splice_event_id\
    \ and/or a segmentation_event_id, but it MUST be unique\n   in the Playlist. \
    \ If there is a possibility that an SCTE-35 id will\n   be reused, the ID attribute\
    \ value MUST include disambiguation, such\n   as a date or sequence number.\n"
- title: 4.3.3.  Media Playlist Tags
  contents:
  - "4.3.3.  Media Playlist Tags\n   Media Playlist tags describe global parameters\
    \ of the Media Playlist.\n   There MUST NOT be more than one Media Playlist tag\
    \ of each type in\n   any Media Playlist.\n   A Media Playlist tag MUST NOT appear\
    \ in a Master Playlist.\n"
- title: 4.3.3.1.  EXT-X-TARGETDURATION
  contents:
  - "4.3.3.1.  EXT-X-TARGETDURATION\n   The EXT-X-TARGETDURATION tag specifies the\
    \ maximum Media Segment\n   duration.  The EXTINF duration of each Media Segment\
    \ in the Playlist\n   file, when rounded to the nearest integer, MUST be less\
    \ than or equal\n   to the target duration; longer segments can trigger playback\
    \ stalls\n   or other errors.  It applies to the entire Playlist file.  Its format\n\
    \   is:\n   #EXT-X-TARGETDURATION:<s>\n   where s is a decimal-integer indicating\
    \ the target duration in\n   seconds.  The EXT-X-TARGETDURATION tag is REQUIRED.\n"
- title: 4.3.3.2.  EXT-X-MEDIA-SEQUENCE
  contents:
  - "4.3.3.2.  EXT-X-MEDIA-SEQUENCE\n   The EXT-X-MEDIA-SEQUENCE tag indicates the\
    \ Media Sequence Number of\n   the first Media Segment that appears in a Playlist\
    \ file.  Its format\n   is:\n   #EXT-X-MEDIA-SEQUENCE:<number>\n   where number\
    \ is a decimal-integer.\n   If the Media Playlist file does not contain an EXT-X-MEDIA-SEQUENCE\n\
    \   tag, then the Media Sequence Number of the first Media Segment in the\n  \
    \ Media Playlist SHALL be considered to be 0.  A client MUST NOT assume\n   that\
    \ segments with the same Media Sequence Number in different Media\n   Playlists\
    \ contain matching content (see Section 6.3.2).\n   A URI for a Media Segment\
    \ is not required to contain its Media\n   Sequence Number.\n   See Sections 6.2.1\
    \ and 6.3.5 for more information on setting the EXT-\n   X-MEDIA-SEQUENCE tag.\n\
    \   The EXT-X-MEDIA-SEQUENCE tag MUST appear before the first Media\n   Segment\
    \ in the Playlist.\n"
- title: 4.3.3.3.  EXT-X-DISCONTINUITY-SEQUENCE
  contents:
  - "4.3.3.3.  EXT-X-DISCONTINUITY-SEQUENCE\n   The EXT-X-DISCONTINUITY-SEQUENCE tag\
    \ allows synchronization between\n   different Renditions of the same Variant\
    \ Stream or different Variant\n   Streams that have EXT-X-DISCONTINUITY tags in\
    \ their Media Playlists.\n   Its format is:\n   #EXT-X-DISCONTINUITY-SEQUENCE:<number>\n\
    \   where number is a decimal-integer.\n   If the Media Playlist does not contain\
    \ an EXT-X-DISCONTINUITY-\n   SEQUENCE tag, then the Discontinuity Sequence Number\
    \ of the first\n   Media Segment in the Playlist SHALL be considered to be 0.\n\
    \   The EXT-X-DISCONTINUITY-SEQUENCE tag MUST appear before the first\n   Media\
    \ Segment in the Playlist.\n   The EXT-X-DISCONTINUITY-SEQUENCE tag MUST appear\
    \ before any EXT-\n   X-DISCONTINUITY tag.\n   See Sections 6.2.1 and 6.2.2 for\
    \ more information about setting the\n   value of the EXT-X-DISCONTINUITY-SEQUENCE\
    \ tag.\n"
- title: 4.3.3.4.  EXT-X-ENDLIST
  contents:
  - "4.3.3.4.  EXT-X-ENDLIST\n   The EXT-X-ENDLIST tag indicates that no more Media\
    \ Segments will be\n   added to the Media Playlist file.  It MAY occur anywhere\
    \ in the Media\n   Playlist file.  Its format is:\n   #EXT-X-ENDLIST\n"
- title: 4.3.3.5.  EXT-X-PLAYLIST-TYPE
  contents:
  - "4.3.3.5.  EXT-X-PLAYLIST-TYPE\n   The EXT-X-PLAYLIST-TYPE tag provides mutability\
    \ information about the\n   Media Playlist file.  It applies to the entire Media\
    \ Playlist file.\n   It is OPTIONAL.  Its format is:\n   #EXT-X-PLAYLIST-TYPE:<type-enum>\n\
    \   where type-enum is either EVENT or VOD.\n   Section 6.2.1 defines the implications\
    \ of the EXT-X-PLAYLIST-TYPE\n   tag.\n   If the EXT-X-PLAYLIST-TYPE value is\
    \ EVENT, Media Segments can only be\n   added to the end of the Media Playlist.\
    \  If the EXT-X-PLAYLIST-TYPE\n   value is Video On Demand (VOD), the Media Playlist\
    \ cannot change.\n   If the EXT-X-PLAYLIST-TYPE tag is omitted from a Media Playlist,\
    \ the\n   Playlist can be updated according to the rules in Section 6.2.1 with\n\
    \   no additional restrictions.  For example, a live Playlist\n   (Section 6.2.2)\
    \ MAY be updated to remove Media Segments in the order\n   that they appeared.\n"
- title: 4.3.3.6.  EXT-X-I-FRAMES-ONLY
  contents:
  - "4.3.3.6.  EXT-X-I-FRAMES-ONLY\n   The EXT-X-I-FRAMES-ONLY tag indicates that\
    \ each Media Segment in the\n   Playlist describes a single I-frame.  I-frames\
    \ are encoded video\n   frames whose encoding does not depend on any other frame.\
    \  I-frame\n   Playlists can be used for trick play, such as fast forward, rapid\n\
    \   reverse, and scrubbing.\n   The EXT-X-I-FRAMES-ONLY tag applies to the entire\
    \ Playlist.  Its\n   format is:\n   #EXT-X-I-FRAMES-ONLY\n   In a Playlist with\
    \ the EXT-X-I-FRAMES-ONLY tag, the Media Segment\n   duration (EXTINF tag value)\
    \ is the time between the presentation time\n   of the I-frame in the Media Segment\
    \ and the presentation time of the\n   next I-frame in the Playlist, or the end\
    \ of the presentation if it is\n   the last I-frame in the Playlist.\n   Media\
    \ resources containing I-frame segments MUST begin with either a\n   Media Initialization\
    \ Section (Section 3) or be accompanied by an EXT-\n   X-MAP tag indicating the\
    \ Media Initialization Section so that clients\n   can load and decode I-frame\
    \ segments in any order.  The byte range of\n   an I-frame segment with an EXT-X-BYTERANGE\
    \ tag applied to it\n   (Section 4.3.2.2) MUST NOT include its Media Initialization\
    \ Section;\n   clients can assume that the Media Initialization Section is defined\n\
    \   by the EXT-X-MAP tag or is located from the start of the resource to\n   the\
    \ offset of the first I-frame segment in that resource.\n   Use of the EXT-X-I-FRAMES-ONLY\
    \ REQUIRES a compatibility version\n   number of 4 or greater.\n"
- title: 4.3.4.  Master Playlist Tags
  contents:
  - "4.3.4.  Master Playlist Tags\n   Master Playlist tags define the Variant Streams,\
    \ Renditions, and\n   other global parameters of the presentation.\n   Master\
    \ Playlist tags MUST NOT appear in a Media Playlist; clients\n   MUST fail to\
    \ parse any Playlist that contains both a Master Playlist\n   tag and either a\
    \ Media Playlist tag or a Media Segment tag.\n"
- title: 4.3.4.1.  EXT-X-MEDIA
  contents:
  - "4.3.4.1.  EXT-X-MEDIA\n   The EXT-X-MEDIA tag is used to relate Media Playlists\
    \ that contain\n   alternative Renditions (Section 4.3.4.2.1) of the same content.\
    \  For\n   example, three EXT-X-MEDIA tags can be used to identify audio-only\n\
    \   Media Playlists that contain English, French, and Spanish Renditions\n   of\
    \ the same presentation.  Or, two EXT-X-MEDIA tags can be used to\n   identify\
    \ video-only Media Playlists that show two different camera\n   angles.\n   Its\
    \ format is:\n   #EXT-X-MEDIA:<attribute-list>\n   The following attributes are\
    \ defined:\n      TYPE\n      The value is an enumerated-string; valid strings\
    \ are AUDIO, VIDEO,\n      SUBTITLES, and CLOSED-CAPTIONS.  This attribute is\
    \ REQUIRED.\n      Typically, closed-caption [CEA608] media is carried in the\
    \ video\n      stream.  Therefore, an EXT-X-MEDIA tag with TYPE of CLOSED-\n \
    \     CAPTIONS does not specify a Rendition; the closed-caption media is\n   \
    \   present in the Media Segments of every video Rendition.\n      URI\n     \
    \ The value is a quoted-string containing a URI that identifies the\n      Media\
    \ Playlist file.  This attribute is OPTIONAL; see\n      Section 4.3.4.2.1.  If\
    \ the TYPE is CLOSED-CAPTIONS, the URI\n      attribute MUST NOT be present.\n\
    \      GROUP-ID\n      The value is a quoted-string that specifies the group to\
    \ which the\n      Rendition belongs.  See Section 4.3.4.1.1.  This attribute\
    \ is\n      REQUIRED.\n      LANGUAGE\n      The value is a quoted-string containing\
    \ one of the standard Tags\n      for Identifying Languages [RFC5646], which identifies\
    \ the primary\n      language used in the Rendition.  This attribute is OPTIONAL.\n\
    \      ASSOC-LANGUAGE\n      The value is a quoted-string containing a language\
    \ tag [RFC5646]\n      that identifies a language that is associated with the\
    \ Rendition.\n      An associated language is often used in a different role than\
    \ the\n      language specified by the LANGUAGE attribute (e.g., written versus\n\
    \      spoken or a fallback dialect).  This attribute is OPTIONAL.\n      The\
    \ LANGUAGE and ASSOC-LANGUAGE attributes can be used, for\n      example, to link\
    \ Norwegian Renditions that use different spoken\n      and written languages.\n\
    \      NAME\n      The value is a quoted-string containing a human-readable\n\
    \      description of the Rendition.  If the LANGUAGE attribute is\n      present,\
    \ then this description SHOULD be in that language.  This\n      attribute is\
    \ REQUIRED.\n      DEFAULT\n      The value is an enumerated-string; valid strings\
    \ are YES and NO.\n      If the value is YES, then the client SHOULD play this\
    \ Rendition of\n      the content in the absence of information from the user\
    \ indicating\n      a different choice.  This attribute is OPTIONAL.  Its absence\n\
    \      indicates an implicit value of NO.\n      AUTOSELECT\n      The value is\
    \ an enumerated-string; valid strings are YES and NO.\n      This attribute is\
    \ OPTIONAL.  Its absence indicates an implicit\n      value of NO.  If the value\
    \ is YES, then the client MAY choose to\n      play this Rendition in the absence\
    \ of explicit user preference\n      because it matches the current playback environment,\
    \ such as\n      chosen system language.\n      If the AUTOSELECT attribute is\
    \ present, its value MUST be YES if\n      the value of the DEFAULT attribute\
    \ is YES.\n      FORCED\n      The value is an enumerated-string; valid strings\
    \ are YES and NO.\n      This attribute is OPTIONAL.  Its absence indicates an\
    \ implicit\n      value of NO.  The FORCED attribute MUST NOT be present unless\
    \ the\n      TYPE is SUBTITLES.\n      A value of YES indicates that the Rendition\
    \ contains content that\n      is considered essential to play.  When selecting\
    \ a FORCED\n      Rendition, a client SHOULD choose the one that best matches\
    \ the\n      current playback environment (e.g., language).\n      A value of\
    \ NO indicates that the Rendition contains content that\n      is intended to\
    \ be played in response to explicit user request.\n      INSTREAM-ID\n      The\
    \ value is a quoted-string that specifies a Rendition within the\n      segments\
    \ in the Media Playlist.  This attribute is REQUIRED if the\n      TYPE attribute\
    \ is CLOSED-CAPTIONS, in which case it MUST have one\n      of the values: \"\
    CC1\", \"CC2\", \"CC3\", \"CC4\", or \"SERVICEn\" where n\n      MUST be an integer\
    \ between 1 and 63 (e.g., \"SERVICE3\" or\n      \"SERVICE42\").\n      The values\
    \ \"CC1\", \"CC2\", \"CC3\", and \"CC4\" identify a Line 21 Data\n      Services\
    \ channel [CEA608].  The \"SERVICE\" values identify a\n      Digital Television\
    \ Closed Captioning [CEA708] service block\n      number.\n      For all other\
    \ TYPE values, the INSTREAM-ID MUST NOT be specified.\n      CHARACTERISTICS\n\
    \      The value is a quoted-string containing one or more Uniform Type\n    \
    \  Identifiers [UTI] separated by comma (,) characters.  This\n      attribute\
    \ is OPTIONAL.  Each UTI indicates an individual\n      characteristic of the\
    \ Rendition.\n      A SUBTITLES Rendition MAY include the following characteristics:\n\
    \      \"public.accessibility.transcribes-spoken-dialog\",\n      \"public.accessibility.describes-music-and-sound\"\
    , and\n      \"public.easy-to-read\" (which indicates that the subtitles have\n\
    \      been edited for ease of reading).\n      An AUDIO Rendition MAY include\
    \ the following characteristic:\n      \"public.accessibility.describes-video\"\
    .\n      The CHARACTERISTICS attribute MAY include private UTIs.\n      CHANNELS\n\
    \      The value is a quoted-string that specifies an ordered, backslash-\n  \
    \    separated (\"/\") list of parameters.  If the TYPE attribute is\n      AUDIO,\
    \ then the first parameter is a count of audio channels\n      expressed as a\
    \ decimal-integer, indicating the maximum number of\n      independent, simultaneous\
    \ audio channels present in any Media\n      Segment in the Rendition.  For example,\
    \ an AC-3 5.1 Rendition\n      would have a CHANNELS=\"6\" attribute.  No other\
    \ CHANNELS parameters\n      are currently defined.\n      All audio EXT-X-MEDIA\
    \ tags SHOULD have a CHANNELS attribute.  If a\n      Master Playlist contains\
    \ two Renditions encoded with the same\n      codec but a different number of\
    \ channels, then the CHANNELS\n      attribute is REQUIRED; otherwise, it is OPTIONAL.\n"
- title: 4.3.4.1.1.  Rendition Groups
  contents:
  - "4.3.4.1.1.  Rendition Groups\n   A set of one or more EXT-X-MEDIA tags with the\
    \ same GROUP-ID value\n   and the same TYPE value defines a Group of Renditions.\
    \  Each member\n   of the Group MUST be an alternative Rendition of the same content;\n\
    \   otherwise, playback errors can occur.\n   All EXT-X-MEDIA tags in a Playlist\
    \ MUST meet the following\n   constraints:\n   o  All EXT-X-MEDIA tags in the\
    \ same Group MUST have different NAME\n      attributes.\n   o  A Group MUST NOT\
    \ have more than one member with a DEFAULT\n      attribute of YES.\n   o  Each\
    \ EXT-X-MEDIA tag with an AUTOSELECT=YES attribute SHOULD have\n      a combination\
    \ of LANGUAGE [RFC5646], ASSOC-LANGUAGE, FORCED, and\n      CHARACTERISTICS attributes\
    \ that is distinct from those of other\n      AUTOSELECT=YES members of its Group.\n\
    \   A Playlist MAY contain multiple Groups of the same TYPE in order to\n   provide\
    \ multiple encodings of that media type.  If it does so, each\n   Group of the\
    \ same TYPE MUST have the same set of members, and each\n   corresponding member\
    \ MUST have identical attributes with the\n   exception of the URI and CHANNELS\
    \ attributes.\n   Each member in a Group of Renditions MAY have a different sample\n\
    \   format.  For example, an English Rendition can be encoded with AC-3\n   5.1\
    \ while a Spanish Rendition is encoded with AAC stereo.  However,\n   any EXT-X-STREAM-INF\
    \ tag (Section 4.3.4.2) or EXT-X-I-FRAME-STREAM-\n   INF tag (Section 4.3.4.3)\
    \ that references such a Group MUST have a\n   CODECS attribute that lists every\
    \ sample format present in any\n   Rendition in the Group, or client playback\
    \ failures can occur.  In\n   the example above, the CODECS attribute would include\n\
    \   \"ac-3,mp4a.40.2\".\n"
- title: 4.3.4.2.  EXT-X-STREAM-INF
  contents:
  - "4.3.4.2.  EXT-X-STREAM-INF\n   The EXT-X-STREAM-INF tag specifies a Variant Stream,\
    \ which is a set\n   of Renditions that can be combined to play the presentation.\
    \  The\n   attributes of the tag provide information about the Variant Stream.\n\
    \   The URI line that follows the EXT-X-STREAM-INF tag specifies a Media\n   Playlist\
    \ that carries a Rendition of the Variant Stream.  The URI\n   line is REQUIRED.\
    \  Clients that do not support multiple video\n   Renditions SHOULD play this\
    \ Rendition.\n   Its format is:\n   #EXT-X-STREAM-INF:<attribute-list>\n   <URI>\n\
    \   The following attributes are defined:\n      BANDWIDTH\n      The value is\
    \ a decimal-integer of bits per second.  It represents\n      the peak segment\
    \ bit rate of the Variant Stream.\n      If all the Media Segments in a Variant\
    \ Stream have already been\n      created, the BANDWIDTH value MUST be the largest\
    \ sum of peak\n      segment bit rates that is produced by any playable combination\
    \ of\n      Renditions.  (For a Variant Stream with a single Media Playlist,\n\
    \      this is just the peak segment bit rate of that Media Playlist.)\n     \
    \ An inaccurate value can cause playback stalls or prevent clients\n      from\
    \ playing the variant.\n      If the Master Playlist is to be made available before\
    \ all Media\n      Segments in the presentation have been encoded, the BANDWIDTH\n\
    \      value SHOULD be the BANDWIDTH value of a representative period of\n   \
    \   similar content, encoded using the same settings.\n      Every EXT-X-STREAM-INF\
    \ tag MUST include the BANDWIDTH attribute.\n      AVERAGE-BANDWIDTH\n      The\
    \ value is a decimal-integer of bits per second.  It represents\n      the average\
    \ segment bit rate of the Variant Stream.\n      If all the Media Segments in\
    \ a Variant Stream have already been\n      created, the AVERAGE-BANDWIDTH value\
    \ MUST be the largest sum of\n      average segment bit rates that is produced\
    \ by any playable\n      combination of Renditions.  (For a Variant Stream with\
    \ a single\n      Media Playlist, this is just the average segment bit rate of\
    \ that\n      Media Playlist.)  An inaccurate value can cause playback stalls\
    \ or\n      prevent clients from playing the variant.\n      If the Master Playlist\
    \ is to be made available before all Media\n      Segments in the presentation\
    \ have been encoded, the AVERAGE-\n      BANDWIDTH value SHOULD be the AVERAGE-BANDWIDTH\
    \ value of a\n      representative period of similar content, encoded using the\
    \ same\n      settings.\n      The AVERAGE-BANDWIDTH attribute is OPTIONAL.\n\
    \      CODECS\n      The value is a quoted-string containing a comma-separated\
    \ list of\n      formats, where each format specifies a media sample type that\
    \ is\n      present in one or more Renditions specified by the Variant Stream.\n\
    \      Valid format identifiers are those in the ISO Base Media File\n      Format\
    \ Name Space defined by \"The 'Codecs' and 'Profiles'\n      Parameters for \"\
    Bucket\" Media Types\" [RFC6381].\n      For example, a stream containing AAC\
    \ low complexity (AAC-LC) audio\n      and H.264 Main Profile Level 3.0 video\
    \ would have a CODECS value\n      of \"mp4a.40.2,avc1.4d401e\".\n      Every\
    \ EXT-X-STREAM-INF tag SHOULD include a CODECS attribute.\n      RESOLUTION\n\
    \      The value is a decimal-resolution describing the optimal pixel\n      resolution\
    \ at which to display all the video in the Variant\n      Stream.\n      The RESOLUTION\
    \ attribute is OPTIONAL but is recommended if the\n      Variant Stream includes\
    \ video.\n      FRAME-RATE\n      The value is a decimal-floating-point describing\
    \ the maximum frame\n      rate for all the video in the Variant Stream, rounded\
    \ to three\n      decimal places.\n      The FRAME-RATE attribute is OPTIONAL\
    \ but is recommended if the\n      Variant Stream includes video.  The FRAME-RATE\
    \ attribute SHOULD be\n      included if any video in a Variant Stream exceeds\
    \ 30 frames per\n      second.\n      HDCP-LEVEL\n      The value is an enumerated-string;\
    \ valid strings are TYPE-0 and\n      NONE.  This attribute is advisory; a value\
    \ of TYPE-0 indicates\n      that the Variant Stream could fail to play unless\
    \ the output is\n      protected by High-bandwidth Digital Content Protection\
    \ (HDCP) Type\n      0 [HDCP] or equivalent.  A value of NONE indicates that the\n\
    \      content does not require output copy protection.\n      Encrypted Variant\
    \ Streams with different HDCP levels SHOULD use\n      different media encryption\
    \ keys.\n      The HDCP-LEVEL attribute is OPTIONAL.  It SHOULD be present if\
    \ any\n      content in the Variant Stream will fail to play without HDCP.\n \
    \     Clients without output copy protection SHOULD NOT load a Variant\n     \
    \ Stream with an HDCP-LEVEL attribute unless its value is NONE.\n      AUDIO\n\
    \      The value is a quoted-string.  It MUST match the value of the\n      GROUP-ID\
    \ attribute of an EXT-X-MEDIA tag elsewhere in the Master\n      Playlist whose\
    \ TYPE attribute is AUDIO.  It indicates the set of\n      audio Renditions that\
    \ SHOULD be used when playing the\n      presentation.  See Section 4.3.4.2.1.\n\
    \      The AUDIO attribute is OPTIONAL.\n      VIDEO\n      The value is a quoted-string.\
    \  It MUST match the value of the\n      GROUP-ID attribute of an EXT-X-MEDIA\
    \ tag elsewhere in the Master\n      Playlist whose TYPE attribute is VIDEO. \
    \ It indicates the set of\n      video Renditions that SHOULD be used when playing\
    \ the\n      presentation.  See Section 4.3.4.2.1.\n      The VIDEO attribute\
    \ is OPTIONAL.\n      SUBTITLES\n      The value is a quoted-string.  It MUST\
    \ match the value of the\n      GROUP-ID attribute of an EXT-X-MEDIA tag elsewhere\
    \ in the Master\n      Playlist whose TYPE attribute is SUBTITLES.  It indicates\
    \ the set\n      of subtitle Renditions that can be used when playing the\n  \
    \    presentation.  See Section 4.3.4.2.1.\n      The SUBTITLES attribute is OPTIONAL.\n\
    \      CLOSED-CAPTIONS\n      The value can be either a quoted-string or an enumerated-string\n\
    \      with the value NONE.  If the value is a quoted-string, it MUST\n      match\
    \ the value of the GROUP-ID attribute of an EXT-X-MEDIA tag\n      elsewhere in\
    \ the Playlist whose TYPE attribute is CLOSED-CAPTIONS,\n      and it indicates\
    \ the set of closed-caption Renditions that can be\n      used when playing the\
    \ presentation.  See Section 4.3.4.2.1.\n      If the value is the enumerated-string\
    \ value NONE, all EXT-X-\n      STREAM-INF tags MUST have this attribute with\
    \ a value of NONE,\n      indicating that there are no closed captions in any\
    \ Variant Stream\n      in the Master Playlist.  Having closed captions in one\
    \ Variant\n      Stream but not another can trigger playback inconsistencies.\n\
    \      The CLOSED-CAPTIONS attribute is OPTIONAL.\n"
- title: 4.3.4.2.1.  Alternative Renditions
  contents:
  - "4.3.4.2.1.  Alternative Renditions\n   When an EXT-X-STREAM-INF tag contains\
    \ an AUDIO, VIDEO, SUBTITLES, or\n   CLOSED-CAPTIONS attribute, it indicates that\
    \ alternative Renditions\n   of the content are available for playback of that\
    \ Variant Stream.\n   When defining alternative Renditions, the following constraints\
    \ MUST\n   be met to prevent client playback errors:\n   o  All playable combinations\
    \ of Renditions associated with an EXT-X-\n      STREAM-INF tag MUST have an aggregate\
    \ bandwidth less than or equal\n      to the BANDWIDTH attribute of the EXT-X-STREAM-INF\
    \ tag.\n   o  If an EXT-X-STREAM-INF tag contains a RESOLUTION attribute and a\n\
    \      VIDEO attribute, then every alternative video Rendition MUST have\n   \
    \   an optimal display resolution matching the value of the RESOLUTION\n     \
    \ attribute.\n   o  Every alternative Rendition associated with an EXT-X-STREAM-INF\n\
    \      tag MUST meet the constraints for a Variant Stream described in\n     \
    \ Section 6.2.4.\n   The URI attribute of the EXT-X-MEDIA tag is REQUIRED if the\
    \ media\n   type is SUBTITLES, but OPTIONAL if the media type is VIDEO or AUDIO.\n\
    \   If the media type is VIDEO or AUDIO, a missing URI attribute\n   indicates\
    \ that the media data for this Rendition is included in the\n   Media Playlist\
    \ of any EXT-X-STREAM-INF tag referencing this EXT-\n   X-MEDIA tag.  If the media\
    \ TYPE is AUDIO and the URI attribute is\n   missing, clients MUST assume that\
    \ the audio data for this Rendition\n   is present in every video Rendition specified\
    \ by the EXT-X-STREAM-INF\n   tag.\n   The URI attribute of the EXT-X-MEDIA tag\
    \ MUST NOT be included if the\n   media type is CLOSED-CAPTIONS.\n"
- title: 4.3.4.3.  EXT-X-I-FRAME-STREAM-INF
  contents:
  - "4.3.4.3.  EXT-X-I-FRAME-STREAM-INF\n   The EXT-X-I-FRAME-STREAM-INF tag identifies\
    \ a Media Playlist file\n   containing the I-frames of a multimedia presentation.\
    \  It stands\n   alone, in that it does not apply to a particular URI in the Master\n\
    \   Playlist.  Its format is:\n   #EXT-X-I-FRAME-STREAM-INF:<attribute-list>\n\
    \   All attributes defined for the EXT-X-STREAM-INF tag (Section 4.3.4.2)\n  \
    \ are also defined for the EXT-X-I-FRAME-STREAM-INF tag, except for the\n   FRAME-RATE,\
    \ AUDIO, SUBTITLES, and CLOSED-CAPTIONS attributes.  In\n   addition, the following\
    \ attribute is defined:\n      URI\n      The value is a quoted-string containing\
    \ a URI that identifies the\n      I-frame Media Playlist file.  That Playlist\
    \ file MUST contain an\n      EXT-X-I-FRAMES-ONLY tag.\n   Every EXT-X-I-FRAME-STREAM-INF\
    \ tag MUST include a BANDWIDTH attribute\n   and a URI attribute.\n   The provisions\
    \ in Section 4.3.4.2.1 also apply to EXT-X-I-FRAME-\n   STREAM-INF tags with a\
    \ VIDEO attribute.\n   A Master Playlist that specifies alternative VIDEO Renditions\
    \ and\n   I-frame Playlists SHOULD include an alternative I-frame VIDEO\n   Rendition\
    \ for each regular VIDEO Rendition, with the same NAME and\n   LANGUAGE attributes.\n"
- title: 4.3.4.4.  EXT-X-SESSION-DATA
  contents:
  - "4.3.4.4.  EXT-X-SESSION-DATA\n   The EXT-X-SESSION-DATA tag allows arbitrary\
    \ session data to be\n   carried in a Master Playlist.\n   Its format is:\n  \
    \ #EXT-X-SESSION-DATA:<attribute-list>\n   The following attributes are defined:\n\
    \      DATA-ID\n      The value of DATA-ID is a quoted-string that identifies\
    \ a\n      particular data value.  The DATA-ID SHOULD conform to a reverse\n \
    \     DNS naming convention, such as \"com.example.movie.title\"; however,\n \
    \     there is no central registration authority, so Playlist authors\n      SHOULD\
    \ take care to choose a value that is unlikely to collide\n      with others.\
    \  This attribute is REQUIRED.\n      VALUE\n      VALUE is a quoted-string. \
    \ It contains the data identified by\n      DATA-ID.  If the LANGUAGE is specified,\
    \ VALUE SHOULD contain a\n      human-readable string written in the specified\
    \ language.\n      URI\n      The value is a quoted-string containing a URI. \
    \ The resource\n      identified by the URI MUST be formatted as JSON [RFC7159];\n\
    \      otherwise, clients may fail to interpret the resource.\n      LANGUAGE\n\
    \      The value is a quoted-string containing a language tag [RFC5646]\n    \
    \  that identifies the language of the VALUE.  This attribute is\n      OPTIONAL.\n\
    \   Each EXT-X-SESSION-DATA tag MUST contain either a VALUE or URI\n   attribute,\
    \ but not both.\n   A Playlist MAY contain multiple EXT-X-SESSION-DATA tags with\
    \ the same\n   DATA-ID attribute.  A Playlist MUST NOT contain more than one EXT-X-\n\
    \   SESSION-DATA tag with the same DATA-ID attribute and the same\n   LANGUAGE\
    \ attribute.\n"
- title: 4.3.4.5.  EXT-X-SESSION-KEY
  contents:
  - "4.3.4.5.  EXT-X-SESSION-KEY\n   The EXT-X-SESSION-KEY tag allows encryption keys\
    \ from Media Playlists\n   to be specified in a Master Playlist.  This allows\
    \ the client to\n   preload these keys without having to read the Media Playlist(s)\n\
    \   first.\n   Its format is:\n   #EXT-X-SESSION-KEY:<attribute-list>\n   All\
    \ attributes defined for the EXT-X-KEY tag (Section 4.3.2.4) are\n   also defined\
    \ for the EXT-X-SESSION-KEY, except that the value of the\n   METHOD attribute\
    \ MUST NOT be NONE.  If an EXT-X-SESSION-KEY is used,\n   the values of the METHOD,\
    \ KEYFORMAT, and KEYFORMATVERSIONS attributes\n   MUST match any EXT-X-KEY with\
    \ the same URI value.\n   EXT-X-SESSION-KEY tags SHOULD be added if multiple Variant\
    \ Streams or\n   Renditions use the same encryption keys and formats.  An EXT-X-\n\
    \   SESSION-KEY tag is not associated with any particular Media Playlist.\n  \
    \ A Master Playlist MUST NOT contain more than one EXT-X-SESSION-KEY\n   tag with\
    \ the same METHOD, URI, IV, KEYFORMAT, and KEYFORMATVERSIONS\n   attribute values.\n\
    \   The EXT-X-SESSION-KEY tag is optional.\n"
- title: 4.3.5.  Media or Master Playlist Tags
  contents:
  - "4.3.5.  Media or Master Playlist Tags\n   The tags in this section can appear\
    \ in either Master Playlists or\n   Media Playlists.  If one of these tags appears\
    \ in a Master Playlist,\n   it SHOULD NOT appear in any Media Playlist referenced\
    \ by that Master\n   Playlist.  A tag that appears in both MUST have the same\
    \ value;\n   otherwise, clients SHOULD ignore the value in the Media Playlist(s).\n\
    \   These tags MUST NOT appear more than once in a Playlist.  If a tag\n   appears\
    \ more than once, clients MUST fail to parse the Playlist.\n"
- title: 4.3.5.1.  EXT-X-INDEPENDENT-SEGMENTS
  contents:
  - "4.3.5.1.  EXT-X-INDEPENDENT-SEGMENTS\n   The EXT-X-INDEPENDENT-SEGMENTS tag indicates\
    \ that all media samples\n   in a Media Segment can be decoded without information\
    \ from other\n   segments.  It applies to every Media Segment in the Playlist.\n\
    \   Its format is:\n   #EXT-X-INDEPENDENT-SEGMENTS\n   If the EXT-X-INDEPENDENT-SEGMENTS\
    \ tag appears in a Master Playlist,\n   it applies to every Media Segment in every\
    \ Media Playlist in the\n   Master Playlist.\n"
- title: 4.3.5.2.  EXT-X-START
  contents:
  - "4.3.5.2.  EXT-X-START\n   The EXT-X-START tag indicates a preferred point at\
    \ which to start\n   playing a Playlist.  By default, clients SHOULD start playback\
    \ at\n   this point when beginning a playback session.  This tag is OPTIONAL.\n\
    \   Its format is:\n   #EXT-X-START:<attribute-list>\n   The following attributes\
    \ are defined:\n      TIME-OFFSET\n      The value of TIME-OFFSET is a signed-decimal-floating-point\
    \ number\n      of seconds.  A positive number indicates a time offset from the\n\
    \      beginning of the Playlist.  A negative number indicates a negative\n  \
    \    time offset from the end of the last Media Segment in the\n      Playlist.\
    \  This attribute is REQUIRED.\n      The absolute value of TIME-OFFSET SHOULD\
    \ NOT be larger than the\n      Playlist duration.  If the absolute value of TIME-OFFSET\
    \ exceeds\n      the duration of the Playlist, it indicates either the end of\
    \ the\n      Playlist (if positive) or the beginning of the Playlist (if\n   \
    \   negative).\n      If the Playlist does not contain the EXT-X-ENDLIST tag,\
    \ the TIME-\n      OFFSET SHOULD NOT be within three target durations of the end\
    \ of\n      the Playlist file.\n      PRECISE\n      The value is an enumerated-string;\
    \ valid strings are YES and NO.\n      If the value is YES, clients SHOULD start\
    \ playback at the Media\n      Segment containing the TIME-OFFSET, but SHOULD\
    \ NOT render media\n      samples in that segment whose presentation times are\
    \ prior to the\n      TIME-OFFSET.  If the value is NO, clients SHOULD attempt\
    \ to render\n      every media sample in that segment.  This attribute is OPTIONAL.\n\
    \      If it is missing, its value should be treated as NO.\n"
- title: 5.  Key Files
  contents:
  - '5.  Key Files

    '
- title: 5.1.  Structure of Key Files
  contents:
  - "5.1.  Structure of Key Files\n   An EXT-X-KEY tag with a URI attribute identifies\
    \ a Key file.  A Key\n   file contains a cipher key that can decrypt Media Segments\
    \ in the\n   Playlist.\n   [AES_128] encryption uses 16-octet keys.  If the KEYFORMAT\
    \ of an EXT-\n   X-KEY tag is \"identity\", the Key file is a single packed array\
    \ of 16\n   octets in binary format.\n"
- title: 5.2.  IV for AES-128
  contents:
  - "5.2.  IV for AES-128\n   [AES_128] REQUIRES the same 16-octet IV to be supplied\
    \ when\n   encrypting and decrypting.  Varying this IV increases the strength\
    \ of\n   the cipher.\n   An IV attribute on an EXT-X-KEY tag with a KEYFORMAT\
    \ of \"identity\"\n   specifies an IV that can be used when decrypting Media Segments\n\
    \   encrypted with that Key file.  IV values for AES-128 are 128-bit\n   numbers.\n\
    \   An EXT-X-KEY tag with a KEYFORMAT of \"identity\" that does not have an\n\
    \   IV attribute indicates that the Media Sequence Number is to be used\n   as\
    \ the IV when decrypting a Media Segment, by putting its big-endian\n   binary\
    \ representation into a 16-octet (128-bit) buffer and padding\n   (on the left)\
    \ with zeros.\n"
- title: 6.  Client/Server Responsibilities
  contents:
  - '6.  Client/Server Responsibilities

    '
- title: 6.1.  Introduction
  contents:
  - "6.1.  Introduction\n   This section describes how the server generates the Playlist\
    \ and\n   Media Segments and how the client should download them for playback.\n"
- title: 6.2.  Server Responsibilities
  contents:
  - '6.2.  Server Responsibilities

    '
- title: 6.2.1.  General Server Responsibilities
  contents:
  - "6.2.1.  General Server Responsibilities\n   The production of the source media\
    \ is outside the scope of this\n   document, which simply presumes a source of\
    \ continuous encoded media\n   containing the presentation.\n   The server MUST\
    \ divide the source media into individual Media\n   Segments whose duration is\
    \ less than or equal to a constant target\n   duration.  Segments that are longer\
    \ than the planned target duration\n   can trigger playback stalls and other errors.\n\
    \   The server SHOULD attempt to divide the source media at points that\n   support\
    \ effective decode of individual Media Segments, e.g., on\n   packet and key frame\
    \ boundaries.\n   The server MUST create a URI for every Media Segment that enables\
    \ its\n   clients to obtain the segment data.  If a server supports partial\n\
    \   loading of resources (e.g., via HTTP Range requests), it MAY specify\n   segments\
    \ as sub-ranges of larger resources using the EXT-X-BYTERANGE\n   tag.\n   Any\
    \ Media Segment that is specified in a Playlist loaded by a client\n   MUST be\
    \ available for immediate download, or playback errors can\n   occur.  Once download\
    \ starts, its transfer rate SHOULD NOT be\n   constrained by the segment production\
    \ process.\n   HTTP servers SHOULD transfer text files -- such as Playlists and\n\
    \   WebVTT segments -- using the \"gzip\" Content-Encoding if the client\n   indicates\
    \ that it is prepared to accept it.\n   The server must create a Media Playlist\
    \ file (Section 4) that\n   contains a URI for each Media Segment that the server\
    \ wishes to make\n   available, in the order in which they are to be played.\n\
    \   The value of the EXT-X-VERSION tag (Section 4.3.1.2) SHOULD NOT be\n   greater\
    \ than what is required for the tags and attributes in the\n   Playlist (see Section\
    \ 7).\n   Changes to the Playlist file MUST be made atomically from the point\n\
    \   of view of the clients, or playback errors MAY occur.\n   The server MUST\
    \ NOT change the Media Playlist file, except to:\n   o  Append lines to it (Section\
    \ 6.2.1).\n   o  Remove Media Segment URIs from the Playlist in the order that\
    \ they\n      appear, along with any tags that apply only to those segments\n\
    \      (Section 6.2.2).\n   o  Increment the value of the EXT-X-MEDIA-SEQUENCE\
    \ or EXT-X-\n      DISCONTINUITY-SEQUENCE tags (Section 6.2.2).\n   o  Add an\
    \ EXT-X-ENDLIST tag to the Playlist (Section 6.2.1).\n   A Media Playlist has\
    \ further constraints on its updates if it\n   contains an EXT-X-PLAYLIST-TYPE\
    \ tag.  An EXT-X-PLAYLIST-TYPE tag with\n   a value of VOD indicates that the\
    \ Playlist file MUST NOT change.  An\n   EXT-X-PLAYLIST-TYPE tag with a value\
    \ of EVENT indicates that the\n   server MUST NOT change or delete any part of\
    \ the Playlist file; it\n   MAY append lines to it.\n   The value of the EXT-X-TARGETDURATION\
    \ tag in the Media Playlist MUST\n   NOT change.  A typical target duration is\
    \ 10 seconds.\n   Playlist changes other than those allowed here can trigger playback\n\
    \   errors and inconsistent client behavior.\n   Each Media Segment in a Media\
    \ Playlist has an integer Discontinuity\n   Sequence Number.  The Discontinuity\
    \ Sequence Number can be used in\n   addition to the timestamps within the media\
    \ to synchronize Media\n   Segments across different Renditions.\n   A segment's\
    \ Discontinuity Sequence Number is the value of the EXT-X-\n   DISCONTINUITY-SEQUENCE\
    \ tag (or zero if none) plus the number of EXT-\n   X-DISCONTINUITY tags in the\
    \ Playlist preceding the URI line of the\n   segment.\n   The server MAY associate\
    \ an absolute date and time with a Media\n   Segment by applying an EXT-X-PROGRAM-DATE-TIME\
    \ tag to it.  This\n   defines an informative mapping of the (wall-clock) date\
    \ and time\n   specified by the tag to the first media timestamp in the segment,\n\
    \   which may be used as a basis for seeking, for display, or for other\n   purposes.\
    \  If a server provides this mapping, it SHOULD apply an EXT-\n   X-PROGRAM-DATE-TIME\
    \ tag to every segment that has an EXT-\n   X-DISCONTINUITY tag applied to it.\n\
    \   The Server MUST NOT add any EXT-X-PROGRAM-DATE-TIME tag to a Playlist\n  \
    \ that would cause the mapping between program date and Media Segment\n   to become\
    \ ambiguous.\n   The server MUST NOT remove an EXT-X-DATERANGE tag from a Playlist\
    \ if\n   any date in the range maps to a Media Segment in the Playlist.\n   The\
    \ server MUST NOT reuse the ID attribute value of an EXT-\n   X-DATERANGE tag\
    \ for any new Date Range in the same Playlist.\n   Once the Following Range of\
    \ a Date Range with an END-ON-NEXT=YES\n   attribute is added to a Playlist, the\
    \ Server MUST NOT subsequently\n   add a Date Range with the same CLASS attribute\
    \ whose START-DATE is\n   between that of the END-ON-NEXT=YES range and its Following\
    \ Range.\n   For Date Ranges with a PLANNED-DURATION attribute, the Server SHOULD\n\
    \   signal the actual end of the range once it has been established.  It\n   can\
    \ do so by adding another EXT-X-DATERANGE tag with the same ID\n   attribute value\
    \ and either a DURATION or an END-DATE attribute or, if\n   the Date Range has\
    \ an END-ON-NEXT=YES attribute, by adding a\n   Following Range.\n   If the Media\
    \ Playlist contains the final Media Segment of the\n   presentation, then the\
    \ Playlist file MUST contain the EXT-X-ENDLIST\n   tag; this allows clients to\
    \ minimize unproductive Playlist reloads.\n   If a Media Playlist does not contain\
    \ the EXT-X-ENDLIST tag, the\n   server MUST make a new version of the Playlist\
    \ file available that\n   contains at least one new Media Segment.  It MUST be\
    \ made available\n   relative to the time that the previous version of the Playlist\
    \ file\n   was made available: no earlier than one-half the target duration\n\
    \   after that time, and no later than 1.5 times the target duration\n   after\
    \ that time.  This allows clients to utilize the network\n   efficiently.\n  \
    \ If the server wishes to remove an entire presentation, it SHOULD\n   provide\
    \ a clear indication to clients that the Playlist file is no\n   longer available\
    \ (e.g., with an HTTP 404 or 410 response).  It MUST\n   ensure that all Media\
    \ Segments in the Playlist file remain available\n   to clients for at least the\
    \ duration of the Playlist file at the time\n   of removal to prevent interruption\
    \ of in-progress playback.\n"
- title: 6.2.2.  Live Playlists
  contents:
  - "6.2.2.  Live Playlists\n   The server MAY limit the availability of Media Segments\
    \ by removing\n   Media Segments from the Playlist file (Section 6.2.1).  If Media\n\
    \   Segments are to be removed, the Playlist file MUST contain an EXT-X-\n   MEDIA-SEQUENCE\
    \ tag.  Its value MUST be incremented by 1 for every\n   Media Segment that is\
    \ removed from the Playlist file; it MUST NOT\n   decrease or wrap.  Clients can\
    \ malfunction if each Media Segment does\n   not have a consistent, unique Media\
    \ Sequence Number.\n   Media Segments MUST be removed from the Playlist file in\
    \ the order\n   that they appear in the Playlist; otherwise, client playback can\n\
    \   malfunction.\n   The server MUST NOT remove a Media Segment from a Playlist\
    \ file\n   without an EXT-X-ENDLIST tag if that would produce a Playlist whose\n\
    \   duration is less than three times the target duration.  Doing so can\n   trigger\
    \ playback stalls.\n   When the server removes a Media Segment URI from the Playlist,\
    \ the\n   corresponding Media Segment MUST remain available to clients for a\n\
    \   period of time equal to the duration of the segment plus the duration\n  \
    \ of the longest Playlist file distributed by the server containing\n   that segment.\
    \  Removing a Media Segment earlier than that can\n   interrupt in-progress playback.\n\
    \   If the server wishes to remove segments from a Media Playlist\n   containing\
    \ an EXT-X-DISCONTINUITY tag, the Media Playlist MUST\n   contain an EXT-X-DISCONTINUITY-SEQUENCE\
    \ tag.  Without the EXT-X-\n   DISCONTINUITY-SEQUENCE tag, it can be impossible\
    \ for a client to\n   locate corresponding segments between Renditions.\n   If\
    \ the server removes an EXT-X-DISCONTINUITY tag from the Media\n   Playlist, it\
    \ MUST increment the value of the EXT-X-DISCONTINUITY-\n   SEQUENCE tag so that\
    \ the Discontinuity Sequence Numbers of the\n   segments still in the Media Playlist\
    \ remain unchanged.  The value of\n   the EXT-X-DISCONTINUITY-SEQUENCE tag MUST\
    \ NOT decrease or wrap.\n   Clients can malfunction if each Media Segment does\
    \ not have a\n   consistent Discontinuity Sequence Number.\n   If a server plans\
    \ to remove a Media Segment after it is delivered to\n   clients over HTTP, it\
    \ SHOULD ensure that the HTTP response contains\n   an Expires header that reflects\
    \ the planned time-to-live.\n   A Live Playlist MUST NOT contain the EXT-X-PLAYLIST-TYPE\
    \ tag, as no\n   value of that tag allows Media Segments to be removed.\n"
- title: 6.2.3.  Encrypting Media Segments
  contents:
  - "6.2.3.  Encrypting Media Segments\n   Media Segments MAY be encrypted.  Every\
    \ encrypted Media Segment MUST\n   have an EXT-X-KEY tag (Section 4.3.2.4) applied\
    \ to it with a URI that\n   the client can use to obtain a Key file (Section 5)\
    \ containing the\n   decryption key.\n   A Media Segment can only be encrypted\
    \ with one encryption METHOD,\n   using one encryption key and IV.  However, a\
    \ server MAY offer\n   multiple ways to retrieve that key by providing multiple\
    \ EXT-X-KEY\n   tags, each with a different KEYFORMAT attribute value.\n   The\
    \ server MAY set the HTTP Expires header in the key response to\n   indicate the\
    \ duration for which the key can be cached.\n   Any unencrypted Media Segment\
    \ in a Playlist that is preceded by an\n   encrypted Media Segment MUST have an\
    \ EXT-X-KEY tag applied to it with\n   a METHOD attribute of NONE.  Otherwise,\
    \ the client will misinterpret\n   those segments as encrypted.\n   If the encryption\
    \ METHOD is AES-128 and the Playlist does not contain\n   the EXT-X-I-FRAMES-ONLY\
    \ tag, AES encryption as described in\n   Section 4.3.2.4 SHALL be applied to\
    \ individual Media Segments.\n   If the encryption METHOD is AES-128 and the Playlist\
    \ contains an EXT-\n   X-I-FRAMES-ONLY tag, the entire resource MUST be encrypted\
    \ using\n   AES-128 CBC with PKCS7 padding [RFC5652].  Encryption MAY be\n   restarted\
    \ on 16-byte block boundaries, unless the first block\n   contains an I-frame.\
    \  The IV used for encryption MUST be either the\n   Media Sequence Number of\
    \ the Media Segment or the value of the IV\n   attribute of the EXT-X-KEY tag,\
    \ as described in Section 5.2.  These\n   constraints allow a client to load and\
    \ decrypt individual I-frames\n   specified as sub-ranges of regular encrypted\
    \ Media Segments, and\n   their Media Initialization Sections.\n   If the encryption\
    \ METHOD is SAMPLE-AES, media samples MAY be\n   encrypted prior to encapsulation\
    \ in a Media Segment.\n   The server MUST NOT remove an EXT-X-KEY tag from the\
    \ Playlist file if\n   it applies to any Media Segment in the Playlist file, or\
    \ clients who\n   subsequently load that Playlist will be unable to decrypt those\
    \ Media\n   Segments.\n"
- title: 6.2.4.  Providing Variant Streams
  contents:
  - "6.2.4.  Providing Variant Streams\n   A server MAY offer multiple Media Playlist\
    \ files to provide different\n   encodings of the same presentation.  If it does\
    \ so, it SHOULD provide\n   a Master Playlist file that lists each Variant Stream\
    \ to allow\n   clients to switch between encodings dynamically.\n   Master Playlists\
    \ describe regular Variant Streams with EXT-X-STREAM-\n   INF tags and I-frame\
    \ Variant Streams with EXT-X-I-FRAME-STREAM-INF\n   tags.\n   If an EXT-X-STREAM-INF\
    \ tag or EXT-X-I-FRAME-STREAM-INF tag contains\n   the CODECS attribute, the attribute\
    \ value MUST include every media\n   format [RFC6381] present in any Media Segment\
    \ in any of the\n   Renditions specified by the Variant Stream.\n   The server\
    \ MUST meet the following constraints when producing Variant\n   Streams in order\
    \ to allow clients to switch between them seamlessly:\n   o  Each Variant Stream\
    \ MUST present the same content.\n   o  Matching content in Variant Streams MUST\
    \ have matching timestamps.\n      This allows clients to synchronize the media.\n\
    \   o  Matching content in Variant Streams MUST have matching\n      Discontinuity\
    \ Sequence Numbers (see Section 4.3.3.3).\n   o  Each Media Playlist in each Variant\
    \ Stream MUST have the same\n      target duration.  The only exceptions are SUBTITLES\
    \ Renditions and\n      Media Playlists containing an EXT-X-I-FRAMES-ONLY tag,\
    \ which MAY\n      have different target durations if they have an EXT-X-PLAYLIST-\n\
    \      TYPE of VOD.\n   o  Content that appears in a Media Playlist of one Variant\
    \ Stream but\n      not in another MUST appear either at the beginning or at the\
    \ end\n      of the Media Playlist file and MUST NOT be longer than the target\n\
    \      duration.\n   o  If any Media Playlists have an EXT-X-PLAYLIST-TYPE tag,\
    \ all Media\n      Playlists MUST have an EXT-X-PLAYLIST-TYPE tag with the same\n\
    \      value.\n   o  If the Playlist contains an EXT-X-PLAYLIST-TYPE tag with\
    \ the value\n      of VOD, the first segment of every Media Playlist in every\
    \ Variant\n      Stream MUST start at the same media timestamp.\n   o  If any\
    \ Media Playlist in a Master Playlist contains an EXT-X-\n      PROGRAM-DATE-TIME\
    \ tag, then all Media Playlists in that Master\n      Playlist MUST contain EXT-X-PROGRAM-DATE-TIME\
    \ tags with consistent\n      mappings of date and time to media timestamps.\n\
    \   o  Each Variant Stream MUST contain the same set of Date Ranges, each\n  \
    \    one identified by an EXT-X-DATERANGE tag(s) with the same ID\n      attribute\
    \ value and containing the same set of attribute/value\n      pairs.\n   In addition,\
    \ for broadest compatibility, Variant Streams SHOULD\n   contain the same encoded\
    \ audio bitstream.  This allows clients to\n   switch between Variant Streams\
    \ without audible glitching.\n   The rules for Variant Streams also apply to alternative\
    \ Renditions\n   (see Section 4.3.4.2.1).\n"
- title: 6.3.  Client Responsibilities
  contents:
  - '6.3.  Client Responsibilities

    '
- title: 6.3.1.  General Client Responsibilities
  contents:
  - "6.3.1.  General Client Responsibilities\n   How the client obtains the URI to\
    \ the Playlist file is outside the\n   scope of this document; it is presumed\
    \ to have done so.\n   The client obtains the Playlist file from the URI.  If\
    \ the Playlist\n   file so obtained is a Master Playlist, the client can select\
    \ a\n   Variant Stream to load from the Master Playlist.\n   Clients MUST ensure\
    \ that loaded Playlists comply with Section 4 and\n   that the EXT-X-VERSION tag,\
    \ if present, specifies a protocol version\n   supported by the client; if either\
    \ check fails, the client MUST NOT\n   attempt to use the Playlist, or unintended\
    \ behavior could occur.\n   If any URI element in a Playlist contains an URI scheme\
    \ that the\n   client cannot handle, the client MUST stop playback.  All clients\n\
    \   MUST support HTTP schemes.\n   To support forward compatibility, when parsing\
    \ Playlists, clients\n   MUST:\n   o  ignore any unrecognized tags.\n   o  ignore\
    \ any attribute/value pair with an unrecognized\n      AttributeName.\n   o  ignore\
    \ any tag containing an attribute/value pair of type\n      enumerated-string\
    \ whose AttributeName is recognized but whose\n      AttributeValue is not recognized,\
    \ unless the definition of the\n      attribute says otherwise.\n   Algorithms\
    \ used by the client to switch between Variant Streams are\n   beyond the scope\
    \ of this document.\n"
- title: 6.3.2.  Loading the Media Playlist File
  contents:
  - "6.3.2.  Loading the Media Playlist File\n   Every time a Media Playlist is loaded\
    \ or reloaded from a Playlist\n   URI, the client MUST determine the next Media\
    \ Segment to load, as\n   described in Section 6.3.5, if it intends to play the\
    \ presentation\n   normally (i.e., in Playlist order at the nominal playback rate).\n\
    \   If the Media Playlist contains the EXT-X-MEDIA-SEQUENCE tag, the\n   client\
    \ SHOULD assume that each Media Segment in it will become\n   unavailable at the\
    \ time that the Playlist file was loaded plus the\n   duration of the Playlist\
    \ file.\n   A client MAY use the segment Media Sequence Number to track the\n\
    \   location of a Media Segment within a Playlist when the Playlist is\n   reloaded.\n\
    \   A client MUST NOT assume that segments with the same Media Sequence\n   Number\
    \ in different Variant Streams or Renditions have the same\n   position in the\
    \ presentation; Playlists MAY have independent Media\n   Sequence Numbers.  Instead,\
    \ a client MUST use the relative position\n   of each segment on the Playlist\
    \ timeline and its Discontinuity\n   Sequence Number to locate corresponding segments.\n\
    \   A client MUST load the Media Playlist file of every Rendition\n   selected\
    \ for playback in order to locate the media specific to that\n   Rendition.  But,\
    \ to prevent unnecessary load on the server, it SHOULD\n   NOT load the Playlist\
    \ file of any other Rendition.\n   For some Variant Streams, it is possible to\
    \ select Renditions that do\n   not include the Rendition specified by the EXT-X-STREAM-INF\
    \ tag.  As\n   noted above, the client SHOULD NOT load that Rendition in those\n\
    \   cases.\n"
- title: 6.3.3.  Playing the Media Playlist File
  contents:
  - "6.3.3.  Playing the Media Playlist File\n   The client SHALL choose which Media\
    \ Segment to play first from the\n   Media Playlist when playback starts.  If\
    \ the EXT-X-ENDLIST tag is not\n   present and the client intends to play the\
    \ media normally, the client\n   SHOULD NOT choose a segment that starts less\
    \ than three target\n   durations from the end of the Playlist file.  Doing so\
    \ can trigger\n   playback stalls.\n   Normal playback can be achieved by playing\
    \ the Media Segments in the\n   order that they appear in the Playlist.  The client\
    \ MAY present the\n   available media in any way it wishes, including normal playback,\n\
    \   random access, and trick modes.\n   The encoding parameters for samples in\
    \ a Media Segment and across\n   multiple Media Segments in a Media Playlist SHOULD\
    \ remain consistent.\n   However, clients SHOULD deal with encoding changes as\
    \ they are\n   encountered, for example, by scaling video content to accommodate\
    \ a\n   resolution change.  If the Variant Stream includes a RESOLUTION\n   attribute,\
    \ clients SHOULD display all video within a rectangle with\n   the same proportions\
    \ as that resolution.\n   Clients SHOULD be prepared to handle multiple tracks\
    \ of a particular\n   type (e.g., audio or video).  A client with no other preference\n\
    \   SHOULD choose the track with the lowest numerical track identifier\n   that\
    \ it can play.\n   Clients SHOULD ignore private streams inside Transport Streams\
    \ that\n   they do not recognize.  Private streams can be used to support\n  \
    \ different devices with the same stream, although stream authors\n   SHOULD be\
    \ sensitive to the additional network load that this imposes.\n   The client MUST\
    \ be prepared to reset its parser(s) and decoder(s)\n   before playing a Media\
    \ Segment that has an EXT-X-DISCONTINUITY tag\n   applied to it; otherwise, playback\
    \ errors can occur.\n   The client SHOULD attempt to load Media Segments in advance\
    \ of when\n   they will be required for uninterrupted playback to compensate for\n\
    \   temporary variations in latency and throughput.\n   The client MAY use the\
    \ value of the EXT-X-PROGRAM-DATE-TIME tag to\n   display the program origination\
    \ time to the user.  If the value\n   includes time zone information, the client\
    \ SHALL take it into\n   account; if it does not, the client MAY assume the time\
    \ to be local.\n   Note that dates in Playlists can refer to when the content\
    \ was\n   produced (or to other times), which have no relation to the time of\n\
    \   playback.\n   If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears\
    \ after\n   one or more Media Segment URIs, the client SHOULD extrapolate\n  \
    \ backward from that tag (using EXTINF durations and/or media\n   timestamps)\
    \ to associate dates with those segments.  To associate a\n   date with any other\
    \ Media Segment that does not have an EXT-X-\n   PROGRAM-DATE-TIME tag applied\
    \ to it directly, the client SHOULD\n   extrapolate forward from the last EXT-X-PROGRAM-DATE-TIME\
    \ tag\n   appearing before that segment in the Playlist.\n"
- title: 6.3.4.  Reloading the Media Playlist File
  contents:
  - "6.3.4.  Reloading the Media Playlist File\n   The client MUST periodically reload\
    \ a Media Playlist file to learn\n   what media is currently available, unless\
    \ it contains an EXT-X-\n   PLAYLIST-TYPE tag with a value of VOD, or a value\
    \ of EVENT and the\n   EXT-X-ENDLIST tag is also present.\n   However, the client\
    \ MUST NOT attempt to reload the Playlist file more\n   frequently than specified\
    \ by this section, in order to limit the\n   collective load on the server.\n\
    \   When a client loads a Playlist file for the first time or reloads a\n   Playlist\
    \ file and finds that it has changed since the last time it\n   was loaded, the\
    \ client MUST wait for at least the target duration\n   before attempting to reload\
    \ the Playlist file again, measured from\n   the last time the client began loading\
    \ the Playlist file.\n   If the client reloads a Playlist file and finds that\
    \ it has not\n   changed, then it MUST wait for a period of one-half the target\n\
    \   duration before retrying.\n   After reloading a Media Playlist, the client\
    \ SHOULD verify that each\n   Media Segment in it has the same URI (and byte range,\
    \ if specified)\n   as the Media Segment with the same Media Sequence Number in\
    \ the\n   previous Media Playlist.  It SHOULD halt playback if it does not, as\n\
    \   this normally indicates a server error.\n   In order to reduce server load,\
    \ the client SHOULD NOT reload the\n   Playlist files of Variant Streams or alternate\
    \ Renditions that are\n   not currently being played.  If it decides to switch\
    \ playback to a\n   different Variant Stream, it SHOULD stop reloading the Playlist\
    \ of\n   the old Variant Stream and begin loading the Playlist of the new\n  \
    \ Variant Stream.  It can use the EXTINF durations and the constraints\n   in\
    \ Section 6.2.4 to determine the approximate location of\n   corresponding media.\
    \  Once media from the new Variant Stream has been\n   loaded, the timestamps\
    \ in the Media Segments can be used to\n   synchronize the old and new timelines\
    \ precisely.\n   A client MUST NOT attempt to use the Media Sequence Number to\n\
    \   synchronize between streams (see Section 6.3.2).\n"
- title: 6.3.5.  Determining the Next Segment to Load
  contents:
  - "6.3.5.  Determining the Next Segment to Load\n   The client MUST examine the\
    \ Media Playlist file every time it is\n   loaded or reloaded to determine the\
    \ next Media Segment to load, as\n   the set of available media MAY have changed.\n\
    \   The first segment to load is generally the segment that the client\n   has\
    \ chosen to play first (see Section 6.3.3).\n   In order to play the presentation\
    \ normally, the next Media Segment to\n   load is the one with the lowest Media\
    \ Sequence Number that is greater\n   than the Media Sequence Number of the last\
    \ Media Segment loaded.\n"
- title: 6.3.6.  Decrypting Encrypted Media Segments
  contents:
  - "6.3.6.  Decrypting Encrypted Media Segments\n   If a Media Playlist file contains\
    \ an EXT-X-KEY tag that specifies a\n   Key file URI, the client can obtain that\
    \ Key file and use the key\n   inside it to decrypt all Media Segments to which\
    \ that EXT-X-KEY tag\n   applies.\n   A client MUST ignore any EXT-X-KEY tag with\
    \ an unsupported or\n   unrecognized KEYFORMAT attribute, to allow for cross-device\n\
    \   addressability.  If the Playlist contains a Media Segment to which\n   only\
    \ EXT-X-KEY tags with unrecognized or unsupported KEYFORMAT\n   attributes are\
    \ applied, playback SHOULD fail.\n   A client MUST NOT attempt to decrypt any\
    \ segments whose EXT-X-KEY tag\n   has a METHOD attribute that it does not recognize.\n\
    \   If the encryption METHOD is AES-128, AES-128 CBC decryption SHALL be\n   applied\
    \ to individual Media Segments, whose encryption format is\n   described in Section\
    \ 4.3.2.4.\n   If the encryption METHOD is AES-128 and the Media Segment is part\
    \ of\n   an I-frame Playlist (Section 4.3.3.6) and it has an EXT-X-BYTERANGE\n\
    \   tag applied to it, special care needs to be taken in loading and\n   decrypting\
    \ the segment, because the resource identified by the URI is\n   encrypted in\
    \ 16-byte blocks from the start of the resource.\n   The decrypted I-frame can\
    \ be recovered by first widening its byte\n   range, as specified by the EXT-X-BYTERANGE\
    \ tag, so that it starts and\n   ends on 16-byte boundaries from the start of\
    \ the resource.\n   Next, the byte range is widened further to include a 16-byte\
    \ block at\n   the beginning of the range.  This 16-byte block allows the correct\
    \ IV\n   for the following block to be calculated.\n   The widened byte range\
    \ can then be loaded and decrypted with AES-128\n   CBC using an arbitrary IV.\
    \  The number of bytes added to the\n   beginning and the end of the original\
    \ byte range are discarded from\n   the decrypted bytes; what remains is the decrypted\
    \ I-frame.\n   If the encryption METHOD is SAMPLE-AES, AES-128 decryption SHALL\
    \ be\n   applied to encrypted media samples within the Media Segment.\n   An EXT-X-KEY\
    \ tag with a METHOD of NONE indicates that the Media\n   Segments it applies to\
    \ are not encrypted.\n"
- title: 7.  Protocol Version Compatibility
  contents:
  - "7.  Protocol Version Compatibility\n   Protocol compatibility is specified by\
    \ the EXT-X-VERSION tag.  A\n   Playlist that contains tags or attributes that\
    \ are not compatible\n   with protocol version 1 MUST include an EXT-X-VERSION\
    \ tag.\n   A client MUST NOT attempt playback if it does not support the\n   protocol\
    \ version specified by the EXT-X-VERSION tag, or unintended\n   behavior could\
    \ occur.\n   A Media Playlist MUST indicate an EXT-X-VERSION of 2 or higher if\
    \ it\n   contains:\n   o  The IV attribute of the EXT-X-KEY tag.\n   A Media Playlist\
    \ MUST indicate an EXT-X-VERSION of 3 or higher if it\n   contains:\n   o  Floating-point\
    \ EXTINF duration values.\n   A Media Playlist MUST indicate an EXT-X-VERSION\
    \ of 4 or higher if it\n   contains:\n   o  The EXT-X-BYTERANGE tag.\n   o  The\
    \ EXT-X-I-FRAMES-ONLY tag.\n   A Media Playlist MUST indicate an EXT-X-VERSION\
    \ of 5 or higher if it\n   contains:\n   o  The KEYFORMAT and KEYFORMATVERSIONS\
    \ attributes of the EXT-X-KEY\n      tag.\n   o  The EXT-X-MAP tag.\n   A Media\
    \ Playlist MUST indicate an EXT-X-VERSION of 6 or higher if it\n   contains:\n\
    \   o  The EXT-X-MAP tag in a Media Playlist that does not contain EXT-\n    \
    \  X-I-FRAMES-ONLY.\n   A Master Playlist MUST indicate an EXT-X-VERSION of 7\
    \ or higher if it\n   contains:\n   o  \"SERVICE\" values for the INSTREAM-ID\
    \ attribute of the EXT-X-MEDIA\n      tag.\n   The EXT-X-MEDIA tag and the AUDIO,\
    \ VIDEO, and SUBTITLES attributes of\n   the EXT-X-STREAM-INF tag are backward\
    \ compatible to protocol version\n   1, but playback on older clients may not\
    \ be desirable.  A server MAY\n   consider indicating an EXT-X-VERSION of 4 or\
    \ higher in the Master\n   Playlist but is not required to do so.\n   The PROGRAM-ID\
    \ attribute of the EXT-X-STREAM-INF and the EXT-X-I-\n   FRAME-STREAM-INF tags\
    \ was removed in protocol version 6.\n   The EXT-X-ALLOW-CACHE tag was removed\
    \ in protocol version 7.\n"
- title: 8.  Playlist Examples
  contents:
  - '8.  Playlist Examples

    '
- title: 8.1.  Simple Media Playlist
  contents:
  - "8.1.  Simple Media Playlist\n   #EXTM3U\n   #EXT-X-TARGETDURATION:10\n   #EXT-X-VERSION:3\n\
    \   #EXTINF:9.009,\n   http://media.example.com/first.ts\n   #EXTINF:9.009,\n\
    \   http://media.example.com/second.ts\n   #EXTINF:3.003,\n   http://media.example.com/third.ts\n\
    \   #EXT-X-ENDLIST\n"
- title: 8.2.  Live Media Playlist Using HTTPS
  contents:
  - "8.2.  Live Media Playlist Using HTTPS\n   #EXTM3U\n   #EXT-X-VERSION:3\n   #EXT-X-TARGETDURATION:8\n\
    \   #EXT-X-MEDIA-SEQUENCE:2680\n   #EXTINF:7.975,\n   https://priv.example.com/fileSequence2680.ts\n\
    \   #EXTINF:7.941,\n   https://priv.example.com/fileSequence2681.ts\n   #EXTINF:7.975,\n\
    \   https://priv.example.com/fileSequence2682.ts\n"
- title: 8.3.  Playlist with Encrypted Media Segments
  contents:
  - "8.3.  Playlist with Encrypted Media Segments\n   #EXTM3U\n   #EXT-X-VERSION:3\n\
    \   #EXT-X-MEDIA-SEQUENCE:7794\n   #EXT-X-TARGETDURATION:15\n   #EXT-X-KEY:METHOD=AES-128,URI=\"\
    https://priv.example.com/key.php?r=52\"\n   #EXTINF:2.833,\n   http://media.example.com/fileSequence52-A.ts\n\
    \   #EXTINF:15.0,\n   http://media.example.com/fileSequence52-B.ts\n   #EXTINF:13.333,\n\
    \   http://media.example.com/fileSequence52-C.ts\n   #EXT-X-KEY:METHOD=AES-128,URI=\"\
    https://priv.example.com/key.php?r=53\"\n   #EXTINF:15.0,\n   http://media.example.com/fileSequence53-A.ts\n"
- title: 8.4.  Master Playlist
  contents:
  - "8.4.  Master Playlist\n   #EXTM3U\n   #EXT-X-STREAM-INF:BANDWIDTH=1280000,AVERAGE-BANDWIDTH=1000000\n\
    \   http://example.com/low.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=2560000,AVERAGE-BANDWIDTH=2000000\n\
    \   http://example.com/mid.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=7680000,AVERAGE-BANDWIDTH=6000000\n\
    \   http://example.com/hi.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"\
    mp4a.40.5\"\n   http://example.com/audio-only.m3u8\n"
- title: 8.5.  Master Playlist with I-Frames
  contents:
  - "8.5.  Master Playlist with I-Frames\n   #EXTM3U\n   #EXT-X-STREAM-INF:BANDWIDTH=1280000\n\
    \   low/audio-video.m3u8\n   #EXT-X-I-FRAME-STREAM-INF:BANDWIDTH=86000,URI=\"\
    low/iframe.m3u8\"\n   #EXT-X-STREAM-INF:BANDWIDTH=2560000\n   mid/audio-video.m3u8\n\
    \   #EXT-X-I-FRAME-STREAM-INF:BANDWIDTH=150000,URI=\"mid/iframe.m3u8\"\n   #EXT-X-STREAM-INF:BANDWIDTH=7680000\n\
    \   hi/audio-video.m3u8\n   #EXT-X-I-FRAME-STREAM-INF:BANDWIDTH=550000,URI=\"\
    hi/iframe.m3u8\"\n   #EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"mp4a.40.5\"\n\
    \   audio-only.m3u8\n"
- title: 8.6.  Master Playlist with Alternative Audio
  contents:
  - "8.6.  Master Playlist with Alternative Audio\n   In this example, the CODECS\
    \ attributes have been condensed for space.\n   A '\\' is used to indicate that\
    \ the tag continues on the following\n   line with whitespace removed:\n   #EXTM3U\n\
    \   #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"aac\",NAME=\"English\", \\\n      DEFAULT=YES,AUTOSELECT=YES,LANGUAGE=\"\
    en\", \\\n      URI=\"main/english-audio.m3u8\"\n   #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"\
    aac\",NAME=\"Deutsch\", \\\n      DEFAULT=NO,AUTOSELECT=YES,LANGUAGE=\"de\", \\\
    \n      URI=\"main/german-audio.m3u8\"\n   #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"\
    aac\",NAME=\"Commentary\", \\\n      DEFAULT=NO,AUTOSELECT=NO,LANGUAGE=\"en\"\
    , \\\n      URI=\"commentary/audio-only.m3u8\"\n   #EXT-X-STREAM-INF:BANDWIDTH=1280000,CODECS=\"\
    ...\",AUDIO=\"aac\"\n   low/video-only.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=2560000,CODECS=\"\
    ...\",AUDIO=\"aac\"\n   mid/video-only.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=7680000,CODECS=\"\
    ...\",AUDIO=\"aac\"\n   hi/video-only.m3u8\n   #EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"\
    mp4a.40.5\",AUDIO=\"aac\"\n   main/english-audio.m3u8\n"
- title: 8.7.  Master Playlist with Alternative Video
  contents:
  - "8.7.  Master Playlist with Alternative Video\n   This example shows three different\
    \ video Renditions (Main,\n   Centerfield, and Dugout) and three different Variant\
    \ Streams (low,\n   mid, and high).  In this example, clients that did not support\
    \ the\n   EXT-X-MEDIA tag and the VIDEO attribute of the EXT-X-STREAM-INF tag\n\
    \   would only be able to play the video Rendition \"Main\".\n   Since the EXT-X-STREAM-INF\
    \ tag has no AUDIO attribute, all video\n   Renditions would be required to contain\
    \ the audio.\n   In this example, the CODECS attributes have been condensed for\
    \ space.\n   A '\\' is used to indicate that the tag continues on the following\n\
    \   line with whitespace removed:\n   #EXTM3U\n   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"\
    low\",NAME=\"Main\", \\\n      DEFAULT=YES,URI=\"low/main/audio-video.m3u8\"\n\
    \   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"low\",NAME=\"Centerfield\", \\\n      DEFAULT=NO,URI=\"\
    low/centerfield/audio-video.m3u8\"\n   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"low\"\
    ,NAME=\"Dugout\", \\\n      DEFAULT=NO,URI=\"low/dugout/audio-video.m3u8\"\n \
    \  #EXT-X-STREAM-INF:BANDWIDTH=1280000,CODECS=\"...\",VIDEO=\"low\"\n   low/main/audio-video.m3u8\n\
    \   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"mid\",NAME=\"Main\", \\\n      DEFAULT=YES,URI=\"\
    mid/main/audio-video.m3u8\"\n   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"mid\",NAME=\"\
    Centerfield\", \\\n      DEFAULT=NO,URI=\"mid/centerfield/audio-video.m3u8\"\n\
    \   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"mid\",NAME=\"Dugout\", \\\n      DEFAULT=NO,URI=\"\
    mid/dugout/audio-video.m3u8\"\n   #EXT-X-STREAM-INF:BANDWIDTH=2560000,CODECS=\"\
    ...\",VIDEO=\"mid\"\n   mid/main/audio-video.m3u8\n   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"\
    hi\",NAME=\"Main\", \\\n      DEFAULT=YES,URI=\"hi/main/audio-video.m3u8\"\n \
    \  #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"hi\",NAME=\"Centerfield\", \\\n      DEFAULT=NO,URI=\"\
    hi/centerfield/audio-video.m3u8\"\n   #EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=\"hi\"\
    ,NAME=\"Dugout\", \\\n      DEFAULT=NO,URI=\"hi/dugout/audio-video.m3u8\"\n  \
    \ #EXT-X-STREAM-INF:BANDWIDTH=7680000,CODECS=\"...\",VIDEO=\"hi\"\n   hi/main/audio-video.m3u8\n"
- title: 8.8.  Session Data in a Master Playlist
  contents:
  - "8.8.  Session Data in a Master Playlist\n   In this example, only the EXT-X-SESSION-DATA\
    \ is shown:\n   #EXT-X-SESSION-DATA:DATA-ID=\"com.example.lyrics\",URI=\"lyrics.json\"\
    \n   #EXT-X-SESSION-DATA:DATA-ID=\"com.example.title\",LANGUAGE=\"en\", \\\n \
    \          VALUE=\"This is an example\"\n   #EXT-X-SESSION-DATA:DATA-ID=\"com.example.title\"\
    ,LANGUAGE=\"es\", \\\n           VALUE=\"Este es un ejemplo\"\n"
- title: 8.9.  CHARACTERISTICS Attribute Containing Multiple Characteristics
  contents:
  - "8.9.  CHARACTERISTICS Attribute Containing Multiple Characteristics\n   Certain\
    \ characteristics are valid in combination, as in:\n   CHARACTERISTICS=\n   \"\
    public.accessibility.transcribes-spoken-dialog,public.easy-to-read\"\n"
- title: 8.10.  EXT-X-DATERANGE Carrying SCTE-35 Tags
  contents:
  - "8.10.  EXT-X-DATERANGE Carrying SCTE-35 Tags\n   This example shows two EXT-X-DATERANGE\
    \ tags that describe a single\n   Date Range, with an SCTE-35 \"out\" splice_insert()\
    \ command that is\n   subsequently updated with an SCTE-35 \"in\" splice_insert()\
    \ command.\n   #EXTM3U\n   ...\n   #EXT-X-DATERANGE:ID=\"splice-6FFFFFF0\",START-DATE=\"\
    2014-03-05T11:\n   15:00Z\",PLANNED-DURATION=59.993,SCTE35-OUT=0xFC002F0000000000FF0\n\
    \   00014056FFFFFF000E011622DCAFF000052636200000000000A0008029896F50\n   000008700000000\n\
    \   ... Media Segment declarations for 60s worth of media\n   #EXT-X-DATERANGE:ID=\"\
    splice-6FFFFFF0\",DURATION=59.993,SCTE35-IN=\n   0xFC002A0000000000FF00000F056FFFFFF000401162802E6100000000000A00\n\
    \   08029896F50000008700000000\n   ...\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA has registered the following media type [RFC2046]:\n\
    \   Type name: application\n   Subtype name: vnd.apple.mpegurl\n   Required parameters:\
    \ none\n   Optional parameters: none\n   Encoding considerations: encoded as UTF-8,\
    \ which is 8-bit text.  This\n   media type may require encoding on transports\
    \ not capable of handling\n   8-bit text.  See Section 4 for more information.\n\
    \   Security considerations: See Section 10.\n   Compression: this media type\
    \ does not employ compression.\n   Interoperability considerations: There are\
    \ no byte-ordering issues,\n   since files are 8-bit text.  Applications could\
    \ encounter\n   unrecognized tags, which SHOULD be ignored.\n   Published specification:\
    \ see Section 4.\n   Applications that use this media type: Multimedia applications\
    \ such\n   as the iPhone media player in iOS 3.0 and later and QuickTime Player\n\
    \   in Mac OS X version 10.6 and later.\n   Fragment identifier considerations:\
    \ no Fragment Identifiers are\n   defined for this media type.\n   Additional\
    \ information:\n      Deprecated alias names for this type: none\n      Magic\
    \ number(s): #EXTM3U\n      File extension(s): .m3u8, .m3u (see Section 4)\n \
    \     Macintosh file type code(s): none\n   Person & email address to contact\
    \ for further information: David\n   Singer, singer@apple.com.\n   Intended usage:\
    \ LIMITED USE\n   Restrictions on usage: none\n   Author: Roger Pantos\n   Change\
    \ Controller: David Singer\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Since the protocol generally uses HTTP to transfer\
    \ data, most of the\n   same security considerations apply.  See Section 15 of\
    \ HTTP\n   [RFC7230].\n   Media file parsers are typically subject to \"fuzzing\"\
    \ attacks.\n   Implementors SHOULD pay particular attention to code that will\
    \ parse\n   data received from a server and ensure that all possible inputs are\n\
    \   handled correctly.\n   Playlist files contain URIs, which clients will use\
    \ to make network\n   requests of arbitrary entities.  Clients SHOULD range-check\
    \ responses\n   to prevent buffer overflows.  See also the Security Considerations\n\
    \   section of \"Uniform Resource Identifier (URI): Generic Syntax\"\n   [RFC3986].\n\
    \   Apart from URL resolution, this format does not employ any form of\n   active\
    \ content.\n   Clients SHOULD limit each playback session to a reasonable number\
    \ of\n   concurrent downloads (e.g., four) to avoid contributing to denial-of-\n\
    \   service attacks.\n   HTTP requests often include session state (\"cookies\"\
    ), which may\n   contain private user data.  Implementations MUST follow cookie\n\
    \   restriction and expiry rules specified by \"HTTP State Management\n   Mechanism\"\
    \ [RFC6265] to protect themselves from attack.  See also the\n   Security Considerations\
    \ section of that document, and \"Use of HTTP\n   State Management\" [RFC2964].\n\
    \   Encryption keys are specified by URI.  The delivery of these keys\n   SHOULD\
    \ be secured by a mechanism such as HTTP Over TLS [RFC2818]\n   (formerly SSL)\
    \ in conjunction with a secure realm or a session token.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [AC_3]     Advanced Television Systems Committee,\
    \ \"Digital Audio\n              Compression (AC-3) (E-AC-3) Standard\", ATSC\n\
    \              Standard A/52:2010, November 2010, <http://atsc.org/\n        \
    \      wp-content/uploads/2015/03/A52-201212-17.pdf>.\n   [AES_128]  National\
    \ Institute of Standards and Technology, \"Advanced\n              Encryption\
    \ Standard (AES)\", FIPS PUB 197,\n              DOI 10.6028/NIST.FIPS.197, November\
    \ 2001,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf>.\n\
    \   [CEA608]   Consumer Electronics Association, \"ANSI/CEA 608-E: Line 21\n \
    \             Data Services\", April 2008.\n   [CEA708]   Consumer Technology\
    \ Association, \"Digital Television (DTV)\n              Closed Captioning\",\
    \ ANSI/CTA Standard CEA-708-E, August\n              2013, <https://standards.cta.tech/kwspub/published_docs/\n\
    \              ANSI-CTA-708-E-Preview.pdf>.\n   [COMMON_ENC]\n              International\
    \ Organization for Standardization,\n              \"Information technology --\
    \ MPEG systems technologies --\n              Part 7: Common encryption in ISO\
    \ base media file format\n              files\", ISO/IEC 23001-7:2016, February\
    \ 2016,\n              <http://www.iso.org/iso/\n              catalogue_detail.htm?csnumber=68042>.\n\
    \   [H_264]    International Telecommunications Union, \"Advanced video\n    \
    \          coding for generic audiovisual services\", January 2012,\n        \
    \      <http://www.itu.int/rec/T-REC-H.264>.\n   [HDCP]     Digital Content Protection\
    \ LLC, \"High-bandwidth Digital\n              Content Protection System - Mapping\
    \ HDCP to HDMI\",\n              February 2013, <http://www.digital-cp.com/\n\
    \              sites/default/files/specifications/\n              HDCP%20on%20HDMI%20Specification%20Rev2_2_Final1.pdf>.\n\
    \   [ISO_13818]\n              International Organization for Standardization,\
    \ \"Generic\n              coding of moving pictures and associated audio\n  \
    \            information\", ISO/IEC International Standard 13818,\n          \
    \    October 2007,\n              <http://www.iso.org/iso/catalogue_detail?csnumber=44169>.\n\
    \   [ISO_13818_3]\n              International Organization for Standardization,\
    \ \"ISO/IEC\n              International Standard 13818-3:1998; Generic coding\
    \ of\n              moving pictures and associated audio information - Part 3:\n\
    \              Audio\", April 1998,\n              <http://www.iso.org/iso/home/store/catalogue_tc/\n\
    \              catalogue_detail.htm?csnumber=26797>.\n   [ISO_13818_7]\n     \
    \         International Organization for Standardization, \"Generic\n        \
    \      coding of moving pictures and associated audio information\n          \
    \    - Part 7: Advanced Audio Coding (AAC)\", ISO/IEC\n              International\
    \ Standard 13818-3:2006, January 2006,\n              <http://www.iso.org/iso/home/store/catalogue_tc/\n\
    \              catalogue_detail.htm?csnumber=43345>.\n   [ISO_14496]\n       \
    \       International Organization for Standardization,\n              \"Information\
    \ technology -- Coding of audio-visual objects\n              -- Part 3: Audio\"\
    , ISO/IEC 14496-3:2009, 2009,\n              <http://www.iso.org/iso/catalogue_detail?csnumber=53943>.\n\
    \   [ISO_8601] International Organization for Standardization, \"Data\n      \
    \        elements and interchange formats -- Information\n              interchange\
    \ -- Representation of dates and times\", ISO/IEC\n              International\
    \ Standard 8601:2004, December 2004,\n              <http://www.iso.org/iso/catalogue_detail?csnumber=40874>.\n\
    \   [ISOBMFF]  International Organization for Standardization,\n             \
    \ \"Information technology -- Coding of audio-visual objects\n              --\
    \ Part 12: ISO base media file format\",\n              ISO/IEC 14496-12:2015,\
    \ December 2015,\n              <http://www.iso.org/iso/\n              catalogue_detail.htm?csnumber=68960>.\n\
    \   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n   \
    \           Extensions (MIME) Part Two: Media Types\", RFC 2046,\n           \
    \   DOI 10.17487/RFC2046, November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2818]\
    \  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC2964]\
    \  Moore, K. and N. Freed, \"Use of HTTP State Management\",\n              BCP\
    \ 44, RFC 2964, DOI 10.17487/RFC2964, October 2000,\n              <https://www.rfc-editor.org/info/rfc2964>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n           \
    \   2003, <https://www.rfc-editor.org/info/rfc3629>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n  \
    \ [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n   \
    \           Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n           \
    \   September 2009, <https://www.rfc-editor.org/info/rfc5646>.\n   [RFC5652] \
    \ Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n             \
    \ RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n   \
    \           DOI 10.17487/RFC6265, April 2011,\n              <https://www.rfc-editor.org/info/rfc6265>.\n\
    \   [RFC6381]  Gellens, R., Singer, D., and P. Frojdh, \"The 'Codecs' and\n  \
    \            'Profiles' Parameters for \"Bucket\" Media Types\", RFC 6381,\n \
    \             DOI 10.17487/RFC6381, August 2011,\n              <https://www.rfc-editor.org/info/rfc6381>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n  \
    \            2014, <https://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [SCTE35]   Society of Cable Telecommunications\
    \ Engineers, \"Digital\n              Program Insertion Cueing Message for Cable\"\
    , ANSI/SCTE 35,\n              August 2014, <http://www.scte.org/documents/pdf/Standards/\n\
    \              ANSI_SCTE%2035%202014.pdf>.\n   [US_ASCII] American National Standard\
    \ for Information Systems, \"Coded\n              Character Sets - 7-Bit American\
    \ National Standard Code for\n              Information Interchange (7-Bit ASCII)\"\
    , ANSI X3.4,\n              December 1986.\n   [WebVTT]   World Wide Web Consortium\
    \ (W3C), \"WebVTT: The Web Video\n              Text Tracks Format\", Draft Community\
    \ Group Report, June\n              2017, <http://dev.w3.org/html5/webvtt/>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CMAF]     International Organization for Standardization,\n\
    \              \"Information technology -- Multimedia application format\n   \
    \           (MPEG-A) -- Part 19: Common media application format\n           \
    \   (CMAF) for segmented media\", ISO/IEC FDIS 23000-19,\n              <https://www.iso.org/standard/71975.html>.\n\
    \   [ID3]      ID3.org, \"The ID3 audio file data tagging format\",\n        \
    \      <http://www.id3.org/Developer_Information>.\n   [M3U]      Nullsoft, Inc.,\
    \ \"The M3U Playlist format, originally\n              invented for the Winamp\
    \ media player\",\n              <https://en.wikipedia.org/w/\n              index.php?title=M3U7amp;oldid=786631666>.\n\
    \   [SampleEnc]\n              Apple Inc., \"MPEG-2 Stream Encryption Format for\
    \ HTTP Live\n              Streaming\",\n              <https://developer.apple.com/library/ios/documentation/\n\
    \              AudioVideo/Conceptual/HLS_Sample_Encryption/>.\n   [UNICODE]  The\
    \ Unicode Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n\
    \   [UTI]      Apple Inc., \"Uniform Type Identifier\",\n              <http://developer.apple.com/library/ios/#documentation/\n\
    \              general/conceptual/DevPedia-CocoaCore/\n              UniformTypeIdentifier.html>.\n"
- title: Contributors
  contents:
  - "Contributors\n   Significant contributions to the design of this protocol were\
    \ made by\n   Jim Batson, David Biderman, Bill May, Roger Pantos, Alan Tseng,\
    \ and\n   Eryk Vershen.  Stuart Cheshire helped edit the specification.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Roger Pantos (editor)\n   Apple, Inc.\n   Cupertino, California\n\
    \   United States of America\n   Email: http-live-streaming-review@group.apple.com\n\
    \   William May, Jr.\n   Major League Baseball Advanced Media\n   New York, New\
    \ York\n   United States of America\n   Email: bill.may@mlb.com\n"
