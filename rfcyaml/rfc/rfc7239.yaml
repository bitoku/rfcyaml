- contents:
  - '                        Forwarded HTTP Extension

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines an HTTP extension header field that allows\n
    \  proxy components to disclose information lost in the proxying\n   process,
    for example, the originating IP address of a request or IP\n   address of the
    proxy on the user-agent-facing interface.  In a path\n   of proxying components,
    this makes it possible to arrange it so that\n   each subsequent component will
    have access to, for example, all IP\n   addresses used in the chain of proxied
    HTTP requests.\n   This document also specifies guidelines for a proxy administrator
    to\n   anonymize the origin of a request.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7239.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Notational Conventions ..........................................4\n   3.
    Syntax Notations ................................................4\n   4. Forwarded
    HTTP Header Field .....................................4\n   5. Parameters ......................................................6\n
    \     5.1. Forwarded By ...............................................6\n      5.2.
    Forwarded For ..............................................6\n      5.3. Forwarded
    Host .............................................7\n      5.4. Forwarded Proto
    ............................................7\n      5.5. Extensions .................................................7\n
    \  6. Node Identifiers ................................................8\n      6.1.
    IPv4 and IPv6 Identifiers ..................................9\n      6.2. The
    \"unknown\" Identifier ...................................9\n      6.3. Obfuscated
    Identifier ......................................9\n   7. Implementation Considerations
    ..................................10\n      7.1. HTTP Lists ................................................10\n
    \     7.2. Header Field Preservation .................................10\n      7.3.
    Relation to Via ...........................................10\n      7.4. Transition
    ................................................11\n      7.5. Example Usage .............................................11\n
    \  8. Security Considerations ........................................12\n      8.1.
    Header Validity and Integrity .............................12\n      8.2. Information
    Leak ..........................................12\n      8.3. Privacy Considerations
    ....................................12\n   9. IANA Considerations ............................................14\n
    \  10. References ....................................................14\n      10.1.
    Normative References .....................................14\n      10.2. Informative
    References ...................................15\n   Appendix A. Acknowledgments
    .......................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In today's HTTP landscape, there are a multitude of different\n
    \  applications that act as proxies for the user agents.  In many cases,\n   these
    proxies exists without the action or knowledge of the end-user.\n   These cases
    occur, for example, when the proxy exists as a part of\n   the infrastructure
    within the organization running the web server.\n   Such proxies may be used for
    features such as load balancing or\n   crypto offload.  Another example is when
    the proxy is used within the\n   same organization as the user, and the proxy
    is used to cache\n   resources.  However, these proxies make the requests appear
    as if\n   they originated from the proxy's IP address, and they may change\n   other
    information in the original request.  This represents a loss of\n   information
    from the original request.\n   This loss of information can cause problems for
    a web server that has\n   a specific use for the clients' IP addresses that will
    not be met by\n   using the address of the proxy or other information changed
    by the\n   proxy.  The main uses of this information are for diagnostics, access\n
    \  control, and abuse management.  Diagnostic functions can include\n   event
    logging, troubleshooting, and statistics gathering, and the\n   information collected
    is usually only stored for short periods of\n   time and only gathered in response
    to a particular problem or a\n   complaint from the client.  Access control can
    be operated by\n   configuring a list of client IP addresses from which access
    is\n   permitted, but this approach will not work if a proxy is used, unless\n
    \  the proxy is trusted and is, itself, configured with a list of\n   allowed
    client addresses for the server.  Cases of abuse require\n   identification of
    the abuser and this uses many of the same features\n   identified for diagnostics.\n
    \  Most of the time that a proxy is used, this loss of information is\n   not
    the primary purpose, or even a desired effect, of using the\n   proxy.  Thus,
    to restore the desired functionality when a proxy is in\n   use, a way of disclosing
    the original information at the HTTP level\n   is needed.  Clearly, however, when
    the purpose of using a proxy is to\n   provide client anonymity, the proxy will
    not use the feature defined\n   in this document.\n   It should be noted that
    the use of a reverse proxy also hides\n   information.  Again, where the loss
    of information is not a\n   deliberate function of the use of the reverse proxy,
    it can be\n   desirable to find a way to encode the information within the HTTP\n
    \  messages so that the consumer can see it.\n   A common way to disclose this
    information is by using the non-\n   standard header fields such as X-Forwarded-For,
    X-Forwarded-By, and\n   X-Forwarded-Proto.  There are many benefits to using a
    standardized\n   approach to commonly desired protocol function: not least is\n
    \  interoperability between implementations.  This document standardizes\n   a
    header field called \"Forwarded\" and provides the syntax and\n   semantics for
    disclosing such information.  \"Forwarded\" also combines\n   all the information
    within one single header field, making it\n   possible to correlate that information.
    \ With the header field format\n   described in this document, it is possible
    to know what information\n   belongs together, as long as the proxies are trusted.
    \ Such\n   conclusions are not possible to make with the X-Forwarded class of\n
    \  header fields.  The header field defined in this document is optional\n   such
    that implementations of proxies that are intended to provide\n   privacy are not
    required to operate or implement the header field.\n   Note that similar issues
    to those described for proxies also arise\n   with use of NATs.  This is discussed
    further in [RFC6269].\n"
  title: 1.  Introduction
- contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Notational Conventions
- contents:
  - "3.  Syntax Notations\n   This specification uses the Augmented Backus-Naur Form
    (ABNF)\n   notation of [RFC5234] with the list rule extension defined in Section\n
    \  7 of [RFC7230].\n"
  title: 3.  Syntax Notations
- contents:
  - "4.  Forwarded HTTP Header Field\n   The \"Forwarded\" HTTP header field is an
    OPTIONAL header field that,\n   when used, contains a list of parameter-identifier
    pairs that\n   disclose information that is altered or lost when a proxy is involved\n
    \  in the path of the request.  Due to the sensitive nature of the data\n   passed
    in this header field (see Sections 8.2 and 8.3), this header\n   field should
    be turned off by default.  Further, each parameter\n   should be configured individually.
    \ \"Forwarded\" is only for use in\n   HTTP requests and is not to be used in
    HTTP responses.  This applies\n   to forwarding proxies, as well as reverse proxies.
    \ Information\n   passed in this header field can be, for example, the source
    IP\n   address of the request, the IP address of the incoming interface on\n   the
    proxy, or whether HTTP or HTTPS was used.  If the request is\n   passing through
    several proxies, each proxy can add a set of\n   parameters; it can also remove
    previously added \"Forwarded\" header\n   fields.\n   The top-level list is represented
    as a list of HTTP header\n   field-values as defined in Section 3.2 of [RFC7230].
    \ The first\n   element in this list holds information added by the first proxy
    that\n   implements and uses this header field, and each subsequent element\n
    \  holds information added by each subsequent proxy.  Because this\n   header
    field is optional, any proxy in the chain may choose not to\n   update this header
    field.  Each field-value is a semicolon-separated\n   list; this sublist consists
    of parameter-identifier pairs.\n   Parameter-identifier pairs are grouped together
    by an equals sign.\n   Each parameter MUST NOT occur more than once per field-value.
    \ The\n   parameter names are case-insensitive.  The header field value can be\n
    \  defined in ABNF syntax as:\n       Forwarded   = 1#forwarded-element\n       forwarded-element
    =\n           [ forwarded-pair ] *( \";\" [ forwarded-pair ] )\n       forwarded-pair
    = token \"=\" value\n       value          = token / quoted-string\n       token
    = <Defined in [RFC7230], Section 3.2.6>\n       quoted-string = <Defined in [RFC7230],
    Section 3.2.6>\n   Examples:\n       Forwarded: for=\"_gazonk\"\n       Forwarded:
    For=\"[2001:db8:cafe::17]:4711\"\n       Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43\n
    \      Forwarded: for=192.0.2.43, for=198.51.100.17\n   Note that as \":\" and
    \"[]\" are not valid characters in \"token\", IPv6\n   addresses are written as
    \"quoted-string\".\n   A proxy server that wants to add a new \"Forwarded\" header
    field value\n   can either append it to the last existing \"Forwarded\" header
    field\n   after a comma separator or add a new field at the end of the header\n
    \  block.  A proxy MAY remove all \"Forwarded\" header fields from a\n   request.
    \ It MUST, however, ensure that the correct header field is\n   updated in case
    of multiple \"Forwarded\" header fields.\n"
  title: 4.  Forwarded HTTP Header Field
- contents:
  - "5.  Parameters\n   This document specifies a number of parameters and valid values
    for\n   each of them:\n   o  \"by\" identifies the user-agent facing interface
    of the proxy.\n   o  \"for\" identifies the node making the request to the proxy.\n
    \  o  \"host\" is the host request header field as received by the proxy.\n   o
    \ \"proto\" indicates what protocol was used to make the request.\n"
  - contents:
    - "5.1.  Forwarded By\n   The \"by\" parameter is used to disclose the interface
      where the\n   request came in to the proxy server.  When proxies choose to use
      the\n   \"by\" parameter, its default configuration SHOULD contain an\n   obfuscated
      identifier as described in Section 6.3.  If the server\n   receiving proxied
      requests requires some address-based functionality,\n   this parameter MAY instead
      contain an IP address (and, potentially, a\n   port number).  A third option
      is the \"unknown\" identifier described\n   in Section 6.2.\n   The syntax of
      a \"by\" value, after potential quoted-string unescaping,\n   conforms to the
      \"node\" ABNF described in Section 6.\n   This is primarily added by reverse
      proxies that wish to forward this\n   information to the backend server.  It
      can also be interesting in a\n   multihomed environment to signal to backend
      servers from which the\n   request came.\n"
    title: 5.1.  Forwarded By
  - contents:
    - "5.2.  Forwarded For\n   The \"for\" parameter is used to disclose information
      about the client\n   that initiated the request and subsequent proxies in a
      chain of\n   proxies.  When proxies choose to use the \"for\" parameter, its
      default\n   configuration SHOULD contain an obfuscated identifier as described
      in\n   Section 6.3.  If the server receiving proxied requests requires some\n
      \  address-based functionality, this parameter MAY instead contain an IP\n   address
      (and, potentially, a port number).  A third option is the\n   \"unknown\" identifier
      described in Section 6.2.\n   The syntax of a \"for\" value, after potential
      quoted-string\n   unescaping, conforms to the \"node\" ABNF described in Section
      6.\n   In a chain of proxy servers where this is fully utilized, the first\n
      \  \"for\" parameter will disclose the client where the request was first\n
      \  made, followed by any subsequent proxy identifiers.  The last proxy\n   in
      the chain is not part of the list of \"for\" parameters.  The last\n   proxy's
      IP address, and optionally a port number, are, however,\n   readily available
      as the remote IP address at the transport layer.\n   It can, however, be more
      relevant to read information about the last\n   proxy from preceding \"Forwarded\"
      header field's \"by\" parameter, if\n   present.\n"
    title: 5.2.  Forwarded For
  - contents:
    - "5.3.  Forwarded Host\n   The \"host\" parameter is used to forward the original
      value of the\n   \"Host\" header field.  This can be used, for example, by the
      origin\n   server if a reverse proxy is rewriting the \"Host\" header field
      to\n   some internal host name.\n   The syntax for a \"host\" value, after potential
      quoted-string\n   unescaping, MUST conform to the Host ABNF described in Section
      5.4 of\n   [RFC7230].\n"
    title: 5.3.  Forwarded Host
  - contents:
    - "5.4.  Forwarded Proto\n   The \"proto\" parameter has the value of the used
      protocol type.  The\n   syntax of a \"proto\" value, after potential quoted-string
      unescaping,\n   MUST conform to the URI scheme name as defined in Section 3.1
      in\n   [RFC3986] and registered with IANA according to [RFC4395].  Typical\n
      \  values are \"http\" or \"https\".\n   For example, in an environment where
      a reverse proxy is also used as\n   a crypto offloader, this allows the origin
      server to rewrite URLs in\n   a document to match the type of connection as
      the user agent\n   requested, even though all connections to the origin server
      are\n   unencrypted HTTP.\n"
    title: 5.4.  Forwarded Proto
  - contents:
    - "5.5.  Extensions\n   Extensions allow for additional parameters and values.
      \ Extensions\n   can be particularly useful in reverse proxy environments.  All\n
      \  extension parameters SHOULD be registered in the \"HTTP Forwarded\n   Parameter\"
      registry.  If certain extensions are expected to have\n   widespread deployment,
      they SHOULD also be standardized.  This is\n   further discussed in Section
      9.\n"
    title: 5.5.  Extensions
  title: 5.  Parameters
- contents:
  - "6.  Node Identifiers\n   The node identifier is one of the following:\n   o  The
    client's IP address, with an optional port number\n   o  A token indicating that
    the IP address of the client is not known\n      to the proxy server\n   o  A
    generated token, allowing for tracing and debugging, while\n      allowing the
    internal structure or sensitive information to be\n      hidden\n   The node identifier
    is defined by the ABNF syntax as:\n       node     = nodename [ \":\" node-port
    ]\n       nodename = IPv4address / \"[\" IPv6address \"]\" /\n                   \"unknown\"
    / obfnode\n       IPv4address = <Defined in [RFC3986], Section 3.2.2>\n       IPv6address
    = <Defined in [RFC3986], Section 3.2.2>\n       obfnode = \"_\" 1*( ALPHA / DIGIT
    / \".\" / \"_\" / \"-\")\n       node-port     = port / obfport\n       port          =
    1*5DIGIT\n       obfport       = \"_\" 1*(ALPHA / DIGIT / \".\" / \"_\" / \"-\")\n
    \      DIGIT = <Defined in [RFC5234], Section 3.4>\n       ALPHA = <Defined in
    [RFC5234], Section B.1>\n   Each of the identifiers may optionally have the port
    identifier, for\n   example, allowing the identification of the endpoint in a
    NATed\n   environment.  The \"node-port\" can be identified either by its port\n
    \  number or by a generated token obfuscating the real port number.  An\n   obfuscated
    port may be used in situations where the possessor of the\n   proxy wants the
    ability to trace requests -- for example, in debug\n   purposes -- but does not
    want to reveal internal information.\n   Note that the ABNF above also allows
    port numbers to be appended to\n   the \"unknown\" identifier.  Interpretation
    of such notation is,\n   however, left to the possessor of a proxy adding such
    a value to the\n   header field.  To distinguish an \"obfport\" from a port, the
    \"obfport\"\n   MUST have a leading underscore.  Further, it MUST also consist
    of\n   only \"ALPHA\", \"DIGIT\", and the characters \".\", \"_\", and \"-\".\n
    \  It is important to note that an IPv6 address and any nodename with\n   node-port
    specified MUST be quoted, since \":\" is not an allowed\n   character in \"token\".\n
    \  Examples:\n             \"192.0.2.43:47011\"\n             \"[2001:db8:cafe::17]:47011\"\n"
  - contents:
    - "6.1.  IPv4 and IPv6 Identifiers\n   The ABNF rules for \"IPv6address\" and
      \"IPv4address\" are defined in\n   [RFC3986].  The \"IPv6address\" SHOULD comply
      with textual\n   representation recommendations [RFC5952] (for example, lowercase,\n
      \  compression of zeros).\n   Note that the IP address may be one from the internal
      nets, as\n   defined in [RFC1918] and [RFC4193].  Also, note that an IPv6 address\n
      \  is always enclosed in square brackets.\n"
    title: 6.1.  IPv4 and IPv6 Identifiers
  - contents:
    - "6.2.  The \"unknown\" Identifier\n   The \"unknown\" identifier is used when
      the identity of the preceding\n   entity is not known, but the proxy server
      still wants to signal that\n   a forwarding of the request was made.  One example
      would be a proxy\n   server process generating an outgoing request without direct
      access\n   to the incoming request TCP socket.\n"
    title: 6.2.  The "unknown" Identifier
  - contents:
    - "6.3.  Obfuscated Identifier\n   A generated identifier may be used where there
      is a wish to keep the\n   internal IP addresses secret, while still allowing
      the \"Forwarded\"\n   header field to be used for tracing and debugging.  This
      can also be\n   useful if the proxy uses some sort of interface labels and there
      is a\n   desire to pass them rather than an IP address.  Unless static\n   assignment
      of identifiers is necessary for the server's use of the\n   identifiers, obfuscated
      identifiers SHOULD be randomly generated for\n   each request.  If the server
      requires that identifiers persist across\n   requests, they SHOULD NOT persist
      longer than client IP addresses.\n   To distinguish the obfuscated identifier
      from other identifiers, it\n   MUST have a leading underscore \"_\".  Furthermore,
      it MUST also\n   consist of only \"ALPHA\", \"DIGIT\", and the characters \".\",
      \"_\", and\n   \"-\".\n   Example:\n       Forwarded: for=_hidden, for=_SEVKISEK\n"
    title: 6.3.  Obfuscated Identifier
  title: 6.  Node Identifiers
- contents:
  - '7.  Implementation Considerations

    '
  - contents:
    - "7.1.  HTTP Lists\n   Note that an HTTP list allows white spaces to occur between
      the\n   identifiers, and the list may be split over multiple header fields.\n
      \  As an example, the header field\n       Forwarded: for=192.0.2.43,for=\"[2001:db8:cafe::17]\",for=unknown\n
      \  is equivalent to the header field\n       Forwarded: for=192.0.2.43, for=\"[2001:db8:cafe::17]\",
      for=unknown\n   which is equivalent to the header fields\n       Forwarded:
      for=192.0.2.43\n       Forwarded: for=\"[2001:db8:cafe::17]\", for=unknown\n"
    title: 7.1.  HTTP Lists
  - contents:
    - "7.2.  Header Field Preservation\n   There are some cases when this header field
      should be kept and some\n   cases where it should not be kept.  A directly forwarded
      request\n   should preserve and possibly extend it.  If a single incoming request\n
      \  causes the proxy to make multiple outbound requests, special care\n   must
      be taken to decide whether or not the header field should be\n   preserved.
      \ In many cases, the header field should be preserved, but\n   if the outbound
      request is not a direct consequence of the incoming\n   request, the header
      field should not be preserved.  Consider also the\n   case when a proxy has
      detected a content mismatch in a 304 response\n   and is following the instructions
      in [RFC7232], Section 4.1 to repeat\n   the request unconditionally, in which
      case the new request is still\n   basically a direct consequence of the origin
      request, and the header\n   field should probably be kept.\n"
    title: 7.2.  Header Field Preservation
  - contents:
    - "7.3.  Relation to Via\n   The \"Via\" header field (see [RFC7230], Section
      5.7.1) is a header\n   field with a similar use case as this header field.  The
      \"Via\" header\n   field, however, only provides information about the proxy
      itself, and\n   thereby leaves out the information about the client connecting
      to the\n   proxy server.  The \"Forwarded\" header field, on the other hand,
      has\n   relaying information from the client-facing side of the proxy server\n
      \  as its main purpose.  As \"Via\" is already widely deployed, its format\n
      \  cannot be changed to address the problems that \"Forwarded\" addresses.\n
      \  Note that it is not possible to combine information from this header\n   field
      with the information from the Via header field.  Some proxies\n   will not update
      the \"Forwarded\" header field, some proxies will not\n   update the Via header
      field, and some proxies will update both.\n"
    title: 7.3.  Relation to Via
  - contents:
    - "7.4.  Transition\n   If a proxy gets incoming requests with X-Forwarded-* header
      fields\n   present, it is encouraged to convert these into the header field\n
      \  described in this document, if it can be done in a sensible way.  If\n   the
      request only contains one type -- for example, X-Forwarded-For --\n   this can
      be translated to \"Forwarded\", by prepending each element\n   with \"for=\".
      \ Note that IPv6 addresses may not be quoted in\n   X-Forwarded-For and may
      not be enclosed by square brackets, but they\n   are quoted and enclosed in
      square brackets in \"Forwarded\".\n       X-Forwarded-For: 192.0.2.43, 2001:db8:cafe::17\n
      \  becomes:\n       Forwarded: for=192.0.2.43, for=\"[2001:db8:cafe::17]\"\n
      \  However, special care must be taken if, for example, both\n   X-Forwarded-For
      and X-Forwarded-By exist.  In such cases, it may not\n   be possible to do a
      conversion, since it is not possible to know in\n   which order the already
      existing fields were added.  Also, note that\n   removing the X-Forwarded-For
      header field may cause issues for\n   parties that have not yet implemented
      support for this new header\n   field.\n"
    title: 7.4.  Transition
  - contents:
    - "7.5.  Example Usage\n   A request from a client with IP address 192.0.2.43
      passes through a\n   proxy with IP address 198.51.100.17, then through another
      proxy with\n   IP address 203.0.113.60 before reaching an origin server.  This\n
      \  could, for example, be an office client behind a corporate malware\n   filter
      talking to a origin server through a reverse proxy.\n   o  The HTTP request
      between the client and the first proxy has no\n      \"Forwarded\" header field.\n
      \  o  The HTTP request between the first and second proxy has a\n      \"Forwarded:
      for=192.0.2.43\" header field.\n   o  The HTTP request between the second proxy
      and the origin server\n      has a \"Forwarded: for=192.0.2.43,\n      for=198.51.100.17;by=203.0.113.60;proto=http;host=example.com\"\n
      \     header field.\n   Note that, at some points in a connection chain, the
      information\n   might not be updated in the \"Forwarded\" header field, either
      because\n   of lack of support of this HTTP extension or because of a policy\n
      \  decision not to disclose information about this network component.\n"
    title: 7.5.  Example Usage
  title: 7.  Implementation Considerations
- contents:
  - '8.  Security Considerations

    '
  - contents:
    - "8.1.  Header Validity and Integrity\n   The \"Forwarded\" HTTP header field
      cannot be relied upon to be\n   correct, as it may be modified, whether mistakenly
      or for malicious\n   reasons, by every node on the way to the server, including
      the client\n   making the request.\n   One approach to ensure that the \"Forwarded\"
      HTTP header field is\n   correct is to verify the correctness of proxies and
      to whitelist them\n   as trusted.  This approach has at least two weaknesses.
      \ First, the\n   chain of IP addresses listed before the request came to the
      proxy\n   cannot be trusted.  Second, unless the communication between proxies\n
      \  and the endpoint is secured, the data can be modified by an attacker\n   with
      access to the network.\n"
    title: 8.1.  Header Validity and Integrity
  - contents:
    - "8.2.  Information Leak\n   The \"Forwarded\" HTTP header field can reveal internal
      structures of\n   the network setup behind the NAT or proxy setup, which may
      be\n   undesired.  This can be addressed either by using obfuscated\n   elements,
      by preventing the internal nodes from updating the HTTP\n   header field, or
      by having an egress proxy remove entries that reveal\n   internal network information.\n
      \  This header field should never be copied into response messages by\n   origin
      servers or intermediaries, as it can reveal the whole proxy\n   chain to the
      client.  As a side effect, special care must be taken in\n   hosting environments
      not to allow the TRACE request where the\n   \"Forwarded\" field is used, as
      it would appear in the body of the\n   response message.\n"
    title: 8.2.  Information Leak
  - contents:
    - "8.3.  Privacy Considerations\n   In recent years, there have been growing concerns
      about privacy.\n   There is a trade-off between ensuring privacy for users versus\n
      \  disclosing information that is useful, for example, for debugging,\n   statistics,
      and generating location-dependent content.  The\n   \"Forwarded\" HTTP header
      field, by design, exposes information that\n   some users consider privacy sensitive,
      in order to allow for such\n   uses.  For any proxy, if the HTTP request contains
      header fields that\n   specifically request privacy semantics, the proxy SHOULD
      NOT use the\n   \"Forwarded\" header field, nor in any other manner pass private\n
      \  information, such as IP addresses, on to the next hop.\n   The client's IP
      address, that may be forwarded in the \"for\" parameter\n   of this header field,
      is considered to be privacy sensitive by many\n   people, as the IP address
      may be able to uniquely identify a client,\n   what operator the user is using,
      and possibly a rough estimation of\n   where the user is geographically located.\n
      \  Proxies using this extension will preserve the information of a\n   direct
      connection.  This has an end-user privacy impact regardless of\n   whether the
      end-user or deployer knows or expects that this is the\n   case.\n   Implementers
      and deployers of such proxies need to consider whether,\n   and how, deploying
      this extension affects user privacy.\n   The default configuration for both
      the \"by\" and \"for\" parameters\n   SHOULD contain obfuscated identifiers.
      \ These identifiers SHOULD be\n   randomly generated per request.  If identifiers
      that persist across\n   requests are required, their lifetimes SHOULD be limited
      and they\n   SHOULD NOT persist longer than client IP addresses.  When generating\n
      \  obfuscated identifiers, care must be taken not to include potentially\n   sensitive
      information in them.\n   Note that users' IP addresses may already be forwarded
      by proxies\n   using the header field X-Forwarded-For, which is widely used.
      \ It\n   should also be noted that if the user were doing the connection\n   directly
      without passing the proxy, the client's IP address would be\n   sent to the
      web server.  Users that do not actively choose an\n   anonymizing proxy cannot
      rely on having their IP address shielded.\n   These users who want to minimize
      the risk of being tracked must also\n   note that there are other ways information
      may leak, for example, by\n   browser header field fingerprinting.  The Forwarded
      header field\n   itself, even when used without a uniquely identifying client\n
      \  identifier, may make fingerprinting more feasible by revealing the\n   chain
      of proxies traversed by the client's request.\n"
    title: 8.3.  Privacy Considerations
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   This document specifies the HTTP header field listed
    below, which has\n   been added to the \"Permanent Message Header Field Names\"
    registry\n   defined in [RFC3864].\n   Header field: Forwarded\n   Applicable
    protocol: http\n   Status: standard\n   Author/Change controller:\n       IETF
    (iesg@ietf.org)\n       Internet Engineering Task Force\n   Specification document(s):
    this specification (Section 4)\n   Related information: None\n   The \"Forwarded\"
    header field contains parameters for which IANA has\n   created and now maintains
    a new registry entitled \"HTTP Forwarded\n   Parameters\".  Initial registrations
    are given below.  For future\n   assignments, the registration procedure is IETF
    Review [RFC5226].\n   The security and privacy implications of all new parameters
    should be\n   thoroughly documented.  New parameters and their values MUST conform\n
    \  with the forwarded-pair as defined in ABNF in Section 4.  Further, a\n   short
    description should be provided in the registration.\n   +-------------+---------------------------------------+-------------+\n
    \  | Parameter   | Description                           | Reference   |\n   |
    name        |                                       |             |\n   +-------------+---------------------------------------+-------------+\n
    \  | by          | IP address of incoming interface of a | Section 5.1 |\n   |
    \            | proxy                                 |             |\n   | for
    \        | IP address of client making a request | Section 5.2 |\n   |             |
    through a proxy                       |             |\n   | host        | Host
    header field of the incoming     | Section 5.3 |\n   |             | request                               |
    \            |\n   | proto       | Application protocol used for         | Section
    5.4 |\n   |             | incoming request                      |             |\n
    \  +-------------+---------------------------------------+-------------+\n                       Table
    1: Initial Assignments\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,
      D., Groot, G., and\n              E. Lear, \"Address Allocation for Private
      Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC3864]  Klyne, G., Nottingham, M., and
      J. Mogul, \"Registration\n              Procedures for Message Header Fields\",
      BCP 90, RFC 3864,\n              September 2004.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC4193]
      \ Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\",
      RFC 4193, October 2005.\n   [RFC4395]  Hansen, T., Hardie, T., and L. Masinter,
      \"Guidelines and\n              Registration Procedures for New URI Schemes\",
      BCP 35,\n              RFC 4395, February 2006.\n   [RFC5226]  Narten, T. and
      H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations
      Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5234]
      \ Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5952]  Kawamura, S. and M. Kawashima,
      \"A Recommendation for IPv6\n              Address Text Representation\", RFC
      5952, August 2010.\n   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext
      Transfer\n              Protocol (HTTP/1.1): Message Syntax and Routing\",\n
      \             RFC 7230, June 2014.\n   [RFC7232]  Fielding, R., Ed. and J. Reschke,
      Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Conditional Requests\",
      RFC 7232,\n              June 2014.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC6269]  Ford, M., Boucadair, M., Durand,
      A., Levis, P., and P.\n              Roberts, \"Issues with IP Address Sharing\",
      RFC 6269,\n              June 2011.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Acknowledgments\n   Thanks to Per Cederqvist, Alissa Cooper, Adrian
    Farrel, Stephen\n   Farrell, Ned Freed, Per Hedbor, Amos Jeffries, Poul-Henning
    Kamp,\n   Murray S. Kucherawy, Barry Leiba, Salvatore Loreto, Alexey Melnikov,\n
    \  S. Moonesamy, Susan Nichols, Mark Nottingham, Julian Reschke, John\n   Sullivan,
    Willy Tarreau, and Dan Wing for their feedback.\n"
  title: Appendix A.  Acknowledgments
- contents:
  - "Authors' Addresses\n   Andreas Petersson\n   Opera Software\n   EMail: andreas@sbin.se\n
    \  Martin Nilsson\n   Opera Software\n   S:t Larsgatan 12\n   Linkoping  SE-582
    24\n   EMail: nilsson@opera.com\n"
  title: Authors' Addresses
