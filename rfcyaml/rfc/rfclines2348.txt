The Trivial File Transfer Protocol [1] is a simple, lock step, file transfer protocol which allows a client to get or put a file onto a remote host.
One of its primary uses is the booting of diskless nodes on a Local Area Network.
TFTP is used because it is very simple to implement in a small node's limited ROM space.
However, the choice of a 512 octet blocksize is not the most efficient for use on a LAN whose MTU may 1500 octets or greater.
This document describes a TFTP option which allows the client and server to negotiate a blocksize more applicable to the network medium.
The TFTP Option Extension mechanism is described in [2].
Request or Write Request packet is modified to include the blocksize option as follows.
Note that all fields except "opc" are NULL terminated.
The opcode field contains either a 1, for Read Requests, or 2, for Write Requests, as defined in [1].
The name of the file to be read or written, as defined in [1].
The mode of the file transfer: "netascii", "octet", or "mail", as defined in [1].
blksize The Blocksize option, "blksize" (case in sensitive).
The number of octets in a block, specified in ASCII.
Valid values range between "8" and "65464" octets, inclusive.
The blocksize refers to the number of data octets; it does not include the four octets of TFTP header.
is a Read Request, for the file named "foobar", in octet (binary) transfer mode, with a block size of 1428 octets (Ethernet MTU, less the TFTP, UDP and IP header lengths).
If the server is willing to accept the blocksize option, it sends an Option Acknowledgment (OACK) to the client.
The specified value must be less than or equal to the value specified by the client.
The client must then either use the size specified in the OACK, or send an ERROR packet, with error code 8, to terminate the transfer.
The rules for determining the final packet are unchanged from [1].
The reception of a data packet with a data length less than the negotiated blocksize is the final packet.
If the blocksize is greater than the amount of data to be transfered, the first packet is the final packet.
If the amount of data to be transfered is an integral multiple of the blocksize, an extra data packet containing no data is sent to end the transfer.
Proof of Concept Performance tests were run on the prototype implementation using a variety of block sizes.
The tests were run on a lightly loaded Ethernet, between two HP UX 9000, in "octet" mode, on 2.25MB files.
The average (5x) transfer times for paths with (g time) and without (n time)
a intermediate gateway are graphed as follows:
As was anticipated, the transfer time decreases with an increase in blocksize.
The reason for the reduction in time is the reduction in the number of packets sent.
For example, by increasing the blocksize from 512 octets to 1024 octets, not only are the number of data packets halved, but the number of acknowledgement packets is also halved (along with the number of times the data transmitter must wait for an ACK).
A secondary effect is the efficiency gained by reducing the per packet framing and processing overhead.
Of course, if the blocksize exceeds the path MTU, IP fragmentation and reassembly will begin to add more overhead.
This will be more noticable the greater the number of gateways in the path.
The basic TFTP protocol has no security mechanism.
This is why it has no rename, delete, or file overwrite capabilities.
This document does not add any security to TFTP; however, the specified extensions do not add any additional security risks.
