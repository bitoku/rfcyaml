- title: __initial_text__
  contents:
  - "           Basic Host Identity Protocol (HIP) Extensions for\n              \
    \  Traversal of Network Address Translators\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies extensions to the Host Identity Protocol\n\
    \   (HIP) to facilitate Network Address Translator (NAT) traversal.  The\n   extensions\
    \ are based on the use of the Interactive Connectivity\n   Establishment (ICE)\
    \ methodology to discover a working path between\n   two end-hosts, and on standard\
    \ techniques for encapsulating\n   Encapsulating Security Payload (ESP) packets\
    \ within the User Datagram\n   Protocol (UDP).  This document also defines elements\
    \ of a procedure\n   for NAT traversal, including the optional use of a HIP relay\
    \ server.\n   With these extensions HIP is able to work in environments that have\n\
    \   NATs and provides a generic NAT traversal solution to higher-layer\n   networking\
    \ applications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5770.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................6\n  \
    \ 3. Overview of Operation ...........................................7\n   4.\
    \ Protocol Description ............................................8\n      4.1.\
    \ Relay Registration .........................................8\n      4.2. ICE\
    \ Candidate Gathering ...................................10\n      4.3. NAT Traversal\
    \ Mode Negotiation ............................10\n      4.4. Connectivity Check\
    \ Pacing Negotiation .....................12\n      4.5. Base Exchange via HIP\
    \ Relay Server ........................12\n      4.6. ICE Connectivity Checks\
    \ ...................................15\n      4.7. NAT Keepalives ............................................16\n\
    \      4.8. Base Exchange without ICE Connectivity Checks .............16\n  \
    \    4.9. Initiating a Base Exchange Both with and without\n           UDP Encapsulation\
    \ .........................................17\n      4.10. Sending Control Packets\
    \ after the Base Exchange ..........18\n   5. Packet Formats .................................................18\n\
    \      5.1. HIP Control Packets .......................................19\n  \
    \    5.2. Connectivity Checks .......................................19\n    \
    \  5.3. Keepalives ................................................20\n      5.4.\
    \ NAT Traversal Mode Parameter ..............................21\n      5.5. Connectivity\
    \ Check Transaction Pacing Parameter ...........22\n      5.6. Relay and Registration\
    \ Parameters .........................22\n      5.7. LOCATOR Parameter .........................................23\n\
    \      5.8. RELAY_HMAC Parameter ......................................25\n  \
    \    5.9. Registration Types ........................................25\n    \
    \  5.10. Notify Packet Types ......................................26\n      5.11.\
    \ ESP Data Packets .........................................26\n   6. Security\
    \ Considerations ........................................27\n      6.1. Privacy\
    \ Considerations ....................................27\n      6.2. Opportunistic\
    \ Mode ........................................27\n      6.3. Base Exchange Replay\
    \ Protection for HIP Relay Server ......28\n      6.4. Demuxing Different HIP\
    \ Associations .......................28\n   7. IANA Considerations ............................................28\n\
    \   8. Contributors ...................................................29\n  \
    \ 9. Acknowledgments ................................................29\n   10.\
    \ References ....................................................29\n      10.1.\
    \ Normative References .....................................29\n      10.2. Informative\
    \ References ...................................30\n   Appendix A. Selecting a\
    \ Value for Check Pacing ....................32\n   Appendix B. Base Exchange\
    \ through a Rendezvous Server .............33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HIP [RFC5201] is defined as a protocol that runs directly\
    \ over IPv4\n   or IPv6, and HIP coordinates the setup of ESP security associations\n\
    \   [RFC5202] that are also specified to run over IPv4 or IPv6.  This\n   approach\
    \ is known to have problems traversing NATs and other\n   middleboxes [RFC5207].\
    \  This document defines HIP extensions for the\n   traversal of both Network\
    \ Address Translator (NAT) and Network\n   Address and Port Translator (NAPT)\
    \ middleboxes.  The document\n   generally uses the term NAT to refer to these\
    \ types of middleboxes.\n   Currently deployed NAT devices do not operate consistently\
    \ even\n   though a recommended behavior is described in [RFC4787].  The HIP\n\
    \   protocol extensions in this document make as few assumptions as\n   possible\
    \ about the behavior of the NAT devices so that NAT traversal\n   will work even\
    \ with legacy NAT devices.  The purpose of these\n   extensions is to allow two\
    \ HIP-enabled hosts to communicate with each\n   other even if one or both of\
    \ the communicating hosts are in a network\n   that is behind one or more NATs.\n\
    \   Using the extensions defined in this document, HIP end-hosts use\n   techniques\
    \ drawn from the Interactive Connectivity Establishment\n   (ICE) methodology\
    \ [RFC5245] to find operational paths for the HIP\n   control protocol and for\
    \ ESP encapsulated data traffic.  The hosts\n   test connectivity between different\
    \ locators and try to discover a\n   direct end-to-end path between them.  However,\
    \ with some legacy NATs,\n   utilizing the shortest path between two end-hosts\
    \ located behind NATs\n   is not possible without relaying the traffic through\
    \ a relay, such as\n   a Traversal Using Relay NAT (TURN) server [RFC5128].  Because\n\
    \   relaying traffic increases the roundtrip delay and consumes resources\n  \
    \ from the relay, with the extensions described in this document, hosts\n   try\
    \ to avoid using the TURN server whenever possible.\n   HIP has defined a rendezvous\
    \ server [RFC5204] to allow for mobile HIP\n   hosts to establish a stable point-of-contact\
    \ in the Internet.  This\n   document defines extensions to the rendezvous server\
    \ that solve the\n   same problems, but for both NATed and non-NATed networks.\
    \  The\n   extended rendezvous server, called a \"HIP relay server\", forwards\
    \ HIP\n   control packets between an Initiator and a Responder, allowing hosts\n\
    \   to be located behind NATs.  This behavior is in contrast to the HIP\n   rendezvous\
    \ service that forwards only the initial I1 packet of the\n   base exchange; an\
    \ approach that is less likely to work in a NATed\n   environment [RFC5128]. \
    \ Therefore, when using relays to traverse\n   NATs, HIP uses a HIP relay server\
    \ for the control traffic and a TURN\n   server for the data traffic.\n   The\
    \ basis for the connectivity checks is ICE [RFC5245].  [RFC5245]\n   describes\
    \ ICE as follows:\n      A technique for NAT traversal for UDP-based media streams\
    \ (though\n      ICE can be extended to handle other transport protocols, such\
    \ as\n      TCP) established by the offer/answer model.  ICE is an extension\n\
    \      to the offer/answer model, and works by including a multiplicity\n    \
    \  of IP addresses and ports in SDP offers and answers, which are\n      then\
    \ tested for connectivity by peer-to-peer connectivity checks.\n      The IP addresses\
    \ and ports included in the SDP and the\n      connectivity checks are performed\
    \ using the revised [Simple\n      Traversal of the UDP Protocol through NAT (STUN)]\
    \ specification\n      [RFC5389], now renamed to Session Traversal Utilities for\
    \ NAT.\n   The standard ICE [RFC5245] is specified with SIP in mind and it has\n\
    \   some features that are not necessary or suitable as such for other\n   protocols.\
    \  [MMUSIC-ICE] gives instructions and recommendations on\n   how ICE can be used\
    \ for other protocols and this document follows\n   those guidelines.\n   Two\
    \ HIP hosts that implement this specification communicate their\n   locators to\
    \ each other in the HIP base exchange.  The locators are\n   then paired with\
    \ the locators of the other endpoint and prioritized\n   according to recommended\
    \ and local policies.  These locator pairs are\n   then tested sequentially by\
    \ both of the end-hosts.  The tests may\n   result in multiple operational pairs\
    \ but ICE procedures determine a\n   single preferred address pair to be used\
    \ for subsequent\n   communication.\n   In summary, the extensions in this document\
    \ define:\n   o  UDP encapsulation of HIP packets\n   o  UDP encapsulation of\
    \ IPsec ESP packets\n   o  registration extensions for HIP relay services\n  \
    \ o  how the ICE \"offer\" and \"answer\" are carried in the base exchange\n \
    \  o  interaction with ICE connectivity check messages\n   o  backwards compatibility\
    \ issues with rendezvous servers\n   o  a number of optimizations (such as when\
    \ the ICE connectivity tests\n      can be omitted)\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document borrows terminology from [RFC5201], [RFC5206],\n   [RFC4423],\
    \ [RFC5245], and [RFC5389].  Additionally, the following\n   terms are used:\n\
    \   Rendezvous server:\n      A host that forwards I1 packets to the Responder.\n\
    \   HIP relay server:\n      A host that forwards any kind of HIP control packets\
    \ between the\n      Initiator and the Responder.\n   TURN server:\n      A server\
    \ that forwards data traffic between two end-hosts as\n      defined in [RFC5766].\n\
    \   Locator:\n      As defined in [RFC5206]: \"A name that controls how the packet\
    \ is\n      routed through the network and demultiplexed by the end-host.  It\n\
    \      may include a concatenation of traditional network addresses such\n   \
    \   as an IPv6 address and end-to-end identifiers such as an ESP SPI.\n      It\
    \ may also include transport port numbers or IPv6 Flow Labels as\n      demultiplexing\
    \ context, or it may simply be a network address.\"\n   LOCATOR (written in capital\
    \ letters):\n      Denotes a HIP control packet parameter that bundles multiple\n\
    \      locators together.\n   ICE offer:\n      The Initiator's LOCATOR parameter\
    \ in a HIP I2 control packet.\n   ICE answer:\n      The Responder's LOCATOR parameter\
    \ in a HIP R2 control packet.\n   Transport address:\n      Transport layer port\
    \ and the corresponding IPv4/v6 address.\n   Candidate:\n      A transport address\
    \ that is a potential point of contact for\n      receiving data.\n   Host candidate:\n\
    \      A candidate obtained by binding to a specific port from an IP\n      address\
    \ on the host.\n   Server reflexive candidate:\n      A translated transport address\
    \ of a host as observed by a HIP\n      relay server or a STUN/TURN server.\n\
    \   Peer reflexive candidate:\n      A translated transport address of a host\
    \ as observed by its peer.\n   Relayed candidate:\n      A transport address that\
    \ exists on a TURN server.  Packets that\n      arrive at this address are relayed\
    \ towards the TURN client.\n"
- title: 3.  Overview of Operation
  contents:
  - "3.  Overview of Operation\n                                 +-------+\n     \
    \                            | HIP   |\n              +--------+         | Relay\
    \ |         +--------+\n              | TURN   |         +-------+         | STUN\
    \   |\n              | Server |        /         \\        | Server |\n      \
    \        +--------+       /           \\       +--------+\n                  \
    \            /             \\\n                             /               \\\
    \n                            /                 \\\n                         \
    \  /  <- Signaling ->  \\\n                          /                     \\\n\
    \                    +-------+                +-------+\n                    |\
    \  NAT  |                |  NAT  |\n                    +-------+            \
    \    +-------+\n                     /                              \\\n     \
    \               /                                \\\n               +-------+\
    \                           +-------+\n               | Init- |              \
    \             | Resp- |\n               | iator |                           |\
    \ onder |\n               +-------+                           +-------+\n    \
    \              Figure 1: Example Network Configuration\n   In the example configuration\
    \ depicted in Figure 1, both Initiator and\n   Responder are behind one or more\
    \ NATs, and both private networks are\n   connected to the public Internet.  To\
    \ be contacted from behind a NAT,\n   the Responder must be registered with a\
    \ HIP relay server reachable on\n   the public Internet, and we assume, as a starting\
    \ point, that the\n   Initiator knows both the Responder's Host Identity Tag (HIT)\
    \ and the\n   address of one of its relay servers (how the Initiator learns of\
    \ the\n   Responder's relay server is outside of the scope of this document,\n\
    \   but may be through DNS or another name service).\n   The first steps are for\
    \ both the Initiator and Responder to register\n   with a relay server (need not\
    \ be the same one) and gather a set of\n   address candidates.  The hosts may\
    \ use TURN and STUN servers for\n   gathering the candidates.  Next, the HIP base\
    \ exchange is carried out\n   by encapsulating the HIP control packets in UDP\
    \ datagrams and sending\n   them through the Responder's relay server.  As part\
    \ of the base\n   exchange, each HIP host learns of the peer's candidate addresses\n\
    \   through the ICE offer/answer procedure embedded in the base exchange.\n  \
    \ Once the base exchange is completed, HIP has established a working\n   communication\
    \ session (for signaling) via a relay server, but the\n   hosts still work to\
    \ find a better path, preferably without a relay,\n   for the ESP data flow. \
    \ For this, ICE connectivity checks are carried\n   out until a working pair of\
    \ addresses is discovered.  At the end of\n   the procedure, if successful, the\
    \ hosts will have enabled a UDP-based\n   flow that traverses both NATs, with\
    \ the data flowing directly from\n   NAT to NAT or via a TURN server.  Further\
    \ HIP signaling can be sent\n   over the same address/port pair and is demultiplexed\
    \ from data\n   traffic via a marker in the payload.  Finally, NAT keepalives\
    \ will be\n   sent as needed.\n   If either one of the hosts knows that it is\
    \ not behind a NAT, hosts\n   can negotiate during the base exchange a different\
    \ mode of NAT\n   traversal that does not use ICE connectivity checks, but only\
    \ UDP\n   encapsulation of HIP and ESP.  Also, it is possible for the Initiator\n\
    \   to simultaneously try a base exchange with and without UDP\n   encapsulation.\
    \  If a base exchange without UDP encapsulation\n   succeeds, no ICE connectivity\
    \ checks or UDP encapsulation of ESP are\n   needed.\n"
- title: 4.  Protocol Description
  contents:
  - "4.  Protocol Description\n   This section describes the normative behavior of\
    \ the protocol\n   extension.  Examples of packet exchanges are provided for\n\
    \   illustration purposes.\n"
- title: 4.1.  Relay Registration
  contents:
  - "4.1.  Relay Registration\n   HIP rendezvous servers operate in non-NATed environments\
    \ and their\n   use is described in [RFC5204].  This section specifies a new\n\
    \   middlebox extension, called the HIP relay server, for operating in\n   NATed\
    \ environments.  A HIP relay server forwards HIP control packets\n   between the\
    \ Initiator and the Responder.\n   End-hosts cannot use the HIP relay service\
    \ for forwarding the ESP\n   data plane.  Instead, they use TURN servers [RFC5766].\n\
    \   A HIP relay server MUST silently drop packets to a HIP relay client\n   that\
    \ has not previously registered with the HIP relay.  The\n   registration process\
    \ follows the generic registration extensions\n   defined in [RFC5203] and is\
    \ illustrated in Figure 2.\n      HIP                                        \
    \              HIP\n      Relay                                              \
    \      Relay\n      Client                                                   Server\n\
    \        |   1. UDP(I1)                                           |\n        +------------------------------------------------------->|\n\
    \        |                                                        |\n        |\
    \   2. UDP(R1(REG_INFO(RELAY_UDP_HIP)))                  |\n        |<-------------------------------------------------------+\n\
    \        |                                                        |\n        |\
    \   3. UDP(I2(REG_REQ(RELAY_UDP_HIP)))                   |\n        +------------------------------------------------------->|\n\
    \        |                                                        |\n        |\
    \   4. UDP(R2(REG_RES(RELAY_UDP_HIP), REG_FROM))         |\n        |<-------------------------------------------------------+\n\
    \        |                                                        |\n        \
    \      Figure 2: Example Registration with a HIP Relay\n   In step 1, the relay\
    \ client (Initiator) starts the registration\n   procedure by sending an I1 packet\
    \ over UDP.  It is RECOMMENDED that\n   the Initiator select a random port number\
    \ from the ephemeral port\n   range 49152-65535 for initiating a base exchange.\
    \  Alternatively, a\n   host MAY also use a single fixed port for initiating all\
    \ outgoing\n   connections.  However, the allocated port MUST be maintained until\n\
    \   all of the corresponding HIP Associations are closed.  It is\n   RECOMMENDED\
    \ that the HIP relay server listen to incoming connections\n   at UDP port 10500.\
    \  If some other port number is used, it needs to be\n   known by potential Initiators.\n\
    \   In step 2, the HIP relay server (Responder) lists the services that\n   it\
    \ supports in the R1 packet.  The support for HIP-over-UDP relaying\n   is denoted\
    \ by the Registration Type value RELAY_UDP_HIP (see\n   Section 5.9).\n   In step\
    \ 3, the Initiator selects the services for which it registers\n   and lists them\
    \ in the REG_REQ parameter.  The Initiator registers for\n   HIP relay service\
    \ by listing the RELAY_UDP_HIP value in the request\n   parameter.\n   In step\
    \ 4, the Responder concludes the registration procedure with an\n   R2 packet\
    \ and acknowledges the registered services in the REG_RES\n   parameter.  The\
    \ Responder denotes unsuccessful registrations (if any)\n   in the REG_FAILED\
    \ parameter of R2.  The Responder also includes a\n   REG_FROM parameter that\
    \ contains the transport address of the client\n   as observed by the relay (Server\
    \ Reflexive candidate).  After the\n   registration, the client sends NAT keepalives,\
    \ as described in\n   Section 4.7, periodically to the relay to keep possible\
    \ NAT bindings\n   between the client and the relay alive.  The relay client maintains\n\
    \   the HIP association with the relay server as long as it requires\n   relaying\
    \ service from it.\n"
- title: 4.2.  ICE Candidate Gathering
  contents:
  - "4.2.  ICE Candidate Gathering\n   If a host is going to use ICE, it needs to\
    \ gather a set of address\n   candidates.  The candidate gathering SHOULD be done\
    \ as defined in\n   Section 4.1 of [RFC5245].  Candidates need to be gathered\
    \ for the\n   UDP-encapsulated flow of HIP and ESP traffic.  This flow corresponds\n\
    \   to one ICE media stream and component.  Since ICE component IDs are\n   not\
    \ needed, they are not explicitly signaled and ID value of 1 SHOULD\n   be used\
    \ for ICE processing, where needed.  The Initiator takes the\n   role of the ICE\
    \ controlling agent.\n   The candidate gathering can be done at any time, but\
    \ it needs to be\n   done before sending an I2 or R2 in the base exchange if ICE\
    \ is to be\n   used for the connectivity checks.  It is RECOMMENDED that all three\n\
    \   types of candidates (host, server reflexive, and relayed) are\n   gathered\
    \ to maximize the probability of successful NAT traversal.\n   However, if no\
    \ TURN server is used, and the host has only a single\n   local IP address to\
    \ use, the host MAY use the local address as the\n   only host candidate and the\
    \ address from the REG_FROM parameter\n   discovered during the relay registration\
    \ as a server reflexive\n   candidate.  In this case, no further candidate gathering\
    \ is needed.\n"
- title: 4.3.  NAT Traversal Mode Negotiation
  contents:
  - "4.3.  NAT Traversal Mode Negotiation\n   This section describes the usage of\
    \ a new non-critical parameter\n   type.  The presence of the parameter in a HIP\
    \ base exchange means\n   that the end-host supports NAT traversal extensions\
    \ described in this\n   document.  As the parameter is non-critical (as defined\
    \ in Section\n   5.2.1 of [RFC5201]), it can be ignored by an end-host, which\
    \ means\n   that the host does not support or is not willing to use these\n  \
    \ extensions.\n   With registration with a HIP relay, it is usually sufficient\
    \ to use\n   the UDP-ENCAPSULATION mode of NAT traversal since the relay is\n\
    \   assumed to be in public address space.  Thus, the relay SHOULD\n   propose\
    \ the UDP-ENCAPSULATION mode as the preferred or only mode.\n   The NAT traversal\
    \ mode negotiation in a HIP base exchange is\n   illustrated in Figure 3.\n  \
    \   Initiator                                                Responder\n     |\
    \ 1. UDP(I1)                                                     |\n     +--------------------------------------------------------------->|\n\
    \     |                                                                |\n   \
    \  | 2. UDP(R1(.., NAT_TRAVERSAL_MODE(list of modes), ..))          |\n     |<---------------------------------------------------------------+\n\
    \     |                                                                |\n   \
    \  | 3. UDP(I2(.., NAT_TRAVERSAL_MODE(selected mode), LOCATOR, ..)) |\n     +--------------------------------------------------------------->|\n\
    \     |                                                                |\n   \
    \  | 4. UDP(R2(.., LOCATOR, ..))                                    |\n     |<---------------------------------------------------------------+\n\
    \     |                                                                |\n   \
    \             Figure 3: Negotiation of NAT Traversal Mode\n   In step 1, the Initiator\
    \ sends an I1 to the Responder.  In step 2,\n   the Responder responds with an\
    \ R1.  The NAT_TRAVERSAL_MODE parameter\n   in R1 contains a list of NAT traversal\
    \ modes the Responder supports.\n   The modes specified in this document are shown\
    \ in Table 1 and their\n   values are specified in Section 5.4.\n   +-------------------+-----------------------------------------------+\n\
    \   | Type              | Purpose                                       |\n  \
    \ +-------------------+-----------------------------------------------+\n   |\
    \ RESERVED          | Reserved for future use                       |\n   |  \
    \                 |                                               |\n   | UDP-ENCAPSULATION\
    \ | Use only UDP encapsulation of the HIP         |\n   |                   |\
    \ signaling traffic and ESP (no ICE             |\n   |                   | connectivity\
    \ checks)                          |\n   |                   |               \
    \                                |\n   | ICE-STUN-UDP      | UDP-encapsulated\
    \ control and data traffic     |\n   |                   | with ICE-based connectivity\
    \ checks using STUN |\n   |                   | messages                     \
    \                 |\n   +-------------------+-----------------------------------------------+\n\
    \                       Table 1: NAT Traversal Modes\n   In step 3, the Initiator\
    \ sends an I2 that includes a\n   NAT_TRAVERSAL_MODE parameter.  It contains the\
    \ mode selected by the\n   Initiator from the list of modes offered by the Responder.\
    \  If ICE\n   mode was selected, the I2 also includes the \"Transport address\"\
    \n   locators (as defined in Section 5.7) of the Initiator in a LOCATOR\n   parameter.\
    \  The locators in I2 are the \"ICE offer\".\n   In step 4, the Responder concludes\
    \ the base exchange with an R2\n   packet.  If the Initiator chose ICE NAT traversal\
    \ mode, the Responder\n   includes a LOCATOR parameter in the R2 packet.  The\
    \ locators in R2,\n   encoded like the locators in I2, are the \"ICE answer\"\
    .  If the NAT\n   traversal mode selected by the Initiator is not supported by\
    \ the\n   Responder, the Responder SHOULD reply with a NOTIFY packet with type\n\
    \   NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER and abort the base exchange.\n"
- title: 4.4.  Connectivity Check Pacing Negotiation
  contents:
  - "4.4.  Connectivity Check Pacing Negotiation\n   As explained in [RFC5245], when\
    \ a NAT traversal mode with\n   connectivity checks is used, new transactions\
    \ should not be started\n   too fast to avoid congestion and overwhelming the\
    \ NATs.\n   For this purpose, during the base exchange, hosts can negotiate a\n\
    \   transaction pacing value, Ta, using a TRANSACTION_PACING parameter in\n  \
    \ R1 and I2 packets.  The parameter contains the minimum time\n   (expressed in\
    \ milliseconds) the host would wait between two NAT\n   traversal transactions,\
    \ such as starting a new connectivity check or\n   retrying a previous check.\
    \  If a host does not include this parameter\n   in the base exchange, a Ta value\
    \ of 500 ms MUST be used as that\n   host's minimum value.  The value that is\
    \ used by both of the hosts is\n   the higher out of the two offered values.\n\
    \   Hosts SHOULD NOT use values smaller than 20 ms for the minimum Ta,\n   since\
    \ such values may not work well with some NATs, as explained in\n   [RFC5245].\
    \  The Initiator MUST NOT propose a smaller value than what\n   the Responder\
    \ offered.\n   The minimum Ta value SHOULD be configurable, and if no value is\n\
    \   configured, a value of 500 ms MUST be used.  Guidelines for selecting\n  \
    \ a Ta value are given in Appendix A.  Currently this feature applies\n   only\
    \ to the ICE-STUN-UDP NAT traversal mode, but any other mode using\n   connectivity\
    \ checks SHOULD utilize this feature.\n"
- title: 4.5.  Base Exchange via HIP Relay Server
  contents:
  - "4.5.  Base Exchange via HIP Relay Server\n   This section describes how the Initiator\
    \ and Responder perform a base\n   exchange through a HIP relay server.  The NAT\
    \ traversal mode\n   negotiation (denoted as NAT_TM in the example) was described\
    \ in\n   Section 4.3 and is not repeated here.  If a relay receives an R1 or\n\
    \   I2 packet without the NAT traversal mode parameter, it MUST drop it\n   and\
    \ SHOULD send a NOTIFY error packet with type\n   NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER\
    \ to the sender of the R1/I2.\n   It is RECOMMENDED that the Initiator send an\
    \ I1 packet encapsulated\n   in UDP when it is destined to an IPv4 address of\
    \ the Responder.\n   Respectively, the Responder MUST respond to such an I1 packet\
    \ with a\n   UDP-encapsulated R1 packet and the rest of the base exchange, I2\
    \ and\n   R2, MUST also use UDP encapsulation.\n     Initiator               \
    \    HIP relay                   Responder\n     | 1. UDP(I1)                \
    \   |                                |\n     +----------------------------->|\
    \ 2. UDP(I1(RELAY_FROM))         |\n     |                              +------------------------------->|\n\
    \     |                              |                                |\n    \
    \ |                              | 3. UDP(R1(RELAY_TO, NAT_TM))   |\n     | 4.\
    \ UDP(R1(RELAY_TO, NAT_TM)) |<-------------------------------+\n     |<-----------------------------+\
    \                                |\n     |                              |    \
    \                            |\n     | 5. UDP(I2(LOCATOR, NAT_TM))  |        \
    \                        |\n     +----------------------------->| 6. UDP(I2(LOCATOR,\
    \ RELAY_FROM, |\n     |                              |           NAT_TM))    \
    \         |\n     |                              +------------------------------->|\n\
    \     |                              |                                |\n    \
    \ |                              | 7. UDP(R2(LOCATOR, RELAY_TO))  |\n     | 8.\
    \ UDP(R2(LOCATOR, RELAY_TO))|<-------------------------------+\n     |<-----------------------------+\
    \                                |\n     |                              |    \
    \                            |\n              Figure 4: Base Exchange via a HIP\
    \ Relay Server\n   In step 1 of Figure 4, the Initiator sends an I1 packet over\
    \ the\n   transport layer to the HIT of the Responder and IP address and port\n\
    \   of the HIP relay server.  The source address is one of the locators\n   of\
    \ the Initiator.\n   In step 2, the HIP relay server receives the I1 packet. \
    \ If the\n   destination HIT belongs to a registered Responder, the relay\n  \
    \ processes the packet.  Otherwise, the relay MUST drop the packet\n   silently.\
    \  The relay appends a RELAY_FROM parameter to the I1 packet,\n   which contains\
    \ the transport source address and port of the I1 as\n   observed by the relay.\
    \  The relay protects the I1 packet with\n   RELAY_HMAC as described in [RFC5204],\
    \ except that the parameter type\n   is different (see Section 5.8).  The relay\
    \ changes the source and\n   destination ports and IP addresses of the packet\
    \ to match the values\n   the Responder used when registering to the relay, i.e.,\
    \ the reverse\n   of the R2 used in the registration.  The relay MUST recalculate\
    \ the\n   transport checksum and forward the packet to the Responder.\n   In step\
    \ 3, the Responder receives the I1 packet.  The Responder\n   processes it according\
    \ to the rules in [RFC5201].  In addition, the\n   Responder validates the RELAY_HMAC\
    \ according to [RFC5204] and\n   silently drops the packet if the validation fails.\
    \  The Responder\n   replies with an R1 packet to which it includes RELAY_TO and\
    \ NAT\n   traversal mode parameters.  The RELAY_TO parameter MUST contain the\n\
    \   same information as the RELAY_FROM parameter, i.e., the Initiator's\n   transport\
    \ address, but the type of the parameter is different.  The\n   RELAY_TO parameter\
    \ is not integrity protected by the signature of the\n   R1 to allow pre-created\
    \ R1 packets at the Responder.\n   In step 4, the relay receives the R1 packet.\
    \  The relay drops the\n   packet silently if the source HIT belongs to an unregistered\
    \ host.\n   The relay MAY verify the signature of the R1 packet and drop it if\n\
    \   the signature is invalid.  Otherwise, the relay rewrites the source\n   address\
    \ and port, and changes the destination address and port to\n   match RELAY_TO\
    \ information.  Finally, the relay recalculates\n   transport checksum and forwards\
    \ the packet.\n   In step 5, the Initiator receives the R1 packet and processes\
    \ it\n   according to [RFC5201].  The Initiator MAY use the address in the\n \
    \  RELAY_TO parameter as a local peer-reflexive candidate for this HIP\n   association\
    \ if it is different from all known local candidates.  The\n   Initiator replies\
    \ with an I2 packet that uses the destination\n   transport address of R1 as the\
    \ source address and port.  The I2\n   packet contains a LOCATOR parameter that\
    \ lists all the ICE candidates\n   (ICE offer) of the Initiator.  The candidates\
    \ are encoded using the\n   format defined in Section 5.7.  The I2 packet MUST\
    \ also contain a NAT\n   traversal mode parameter with the mode the Initiator\
    \ selected.\n   In step 6, the relay receives the I2 packet.  The relay appends\
    \ a\n   RELAY_FROM and a RELAY_HMAC to the I2 packet as explained in step 2.\n\
    \   In step 7, the Responder receives the I2 packet and processes it\n   according\
    \ to [RFC5201].  It replies with an R2 packet and includes a\n   RELAY_TO parameter\
    \ as explained in step 3.  The R2 packet includes a\n   LOCATOR parameter that\
    \ lists all the ICE candidates (ICE answer) of\n   the Responder.  The RELAY_TO\
    \ parameter is protected by the HMAC.\n   In step 8, the relay processes the R2\
    \ as described in step 4.  The\n   relay forwards the packet to the Initiator.\
    \  After the Initiator has\n   received the R2 and processed it successfully,\
    \ the base exchange is\n   completed.\n   Hosts MUST include the address of one\
    \ or more HIP relay servers\n   (including the one that is being used for the\
    \ initial signaling) in\n   the LOCATOR parameter in I2/R2 if they intend to use\
    \ such servers for\n   relaying HIP signaling immediately after the base exchange\
    \ completes.\n   The traffic type of these addresses MUST be \"HIP signaling\"\
    \ and they\n   MUST NOT be used as ICE candidates.  If the HIP relay server locator\n\
    \   used for the base exchange is not included in I2/R2 LOCATOR\n   parameters,\
    \ it SHOULD NOT be used after the base exchange, but\n   further HIP signaling\
    \ SHOULD use the same path as the data traffic.\n"
- title: 4.6.  ICE Connectivity Checks
  contents:
  - "4.6.  ICE Connectivity Checks\n   If a HIP relay server was used, the Responder\
    \ completes the base\n   exchange with the R2 packet through the relay.  However,\
    \ the\n   destination address the Initiator and Responder used for the base\n\
    \   exchange packets belongs to the HIP relay server.  Therefore, that\n   address\
    \ MUST NOT be used as a destination for ESP traffic.  Instead,\n   if a NAT traversal\
    \ mode with ICE connectivity checks was selected,\n   the Initiator and Responder\
    \ MUST start the connectivity checks.\n   Creating the checklist for the ICE connectivity\
    \ checks should be\n   performed as described in Section 5.7 of [RFC5245] bearing\
    \ in mind\n   that only one media stream and component is needed (so there will\
    \ be\n   only a single checklist and all candidates should have the same\n   component\
    \ ID value).  The actual connectivity checks MUST be\n   performed as described\
    \ in Section 7 of [RFC5245].  Regular mode\n   SHOULD be used for the candidate\
    \ nomination.  Section 5.2 defines the\n   details of the STUN control packets.\
    \  As a result of the ICE\n   connectivity checks, ICE nominates a single transport\
    \ address pair to\n   be used if an operational address pair was found.  The end-hosts\
    \ MUST\n   use this address pair for the ESP traffic.\n   The connectivity check\
    \ messages MUST be paced by the value negotiated\n   during the base exchange\
    \ as described in Section 4.4.  If neither one\n   of the hosts announced a minimum\
    \ pacing value, a value of 500 ms MUST\n   be used.\n   For retransmissions, the\
    \ retransmission timeout (RTO) value SHOULD be\n   calculated as follows:\n  \
    \    RTO = MAX (500ms, Ta * (Num-Waiting + Num-In-Progress))\n   In the RTO formula,\
    \ Ta is the value used for the connectivity check\n   pacing, Num-Waiting is the\
    \ number of pairs in the checklist in the\n   \"Waiting\" state, and Num-In-Progress\
    \ is the number of pairs in the\n   \"In-Progress\" state.  This is identical\
    \ to the formula in [RFC5245]\n   if there is only one checklist.\n   If the ICE\
    \ connectivity checks failed, the hosts MUST NOT send ESP\n   traffic to each\
    \ other but MAY continue communicating using HIP\n   packets and the locators\
    \ used for the base exchange.  Also, the hosts\n   SHOULD notify each other about\
    \ the failure with a\n   CONNECTIVITY_CHECKS_FAILED NOTIFY packet (see Section\
    \ 5.10).\n"
- title: 4.7.  NAT Keepalives
  contents:
  - "4.7.  NAT Keepalives\n   To prevent NAT states from expiring, communicating hosts\
    \ send\n   periodic keepalives to each other.  HIP relay servers MAY refrain\n\
    \   from sending keepalives if it's known that they are not behind a\n   middlebox\
    \ that requires keepalives.  An end-host MUST send keepalives\n   every 15 seconds\
    \ to refresh the UDP port mapping at the NAT(s) when\n   the control or data channel\
    \ is idle.  To implement failure tolerance,\n   an end-host SHOULD have a shorter\
    \ keepalive period.\n   The keepalives are STUN Binding Indications if the hosts\
    \ have agreed\n   on ICE-STUN-UDP NAT traversal mode during the base exchange.\n\
    \   Otherwise, HIP NOTIFY packets MAY be used as keepalives.\n   The communicating\
    \ hosts MUST send keepalives to each other using the\n   transport locators they\
    \ agreed to use for data and signaling when\n   they are in the ESTABLISHED state.\
    \  Also, the Initiator MUST send a\n   NOTIFY packet to the relay to keep the\
    \ NAT states alive on the path\n   between the Initiator and relay when the Initiator\
    \ has not received\n   any response to its I1 or I2 from the Responder in 15 seconds.\n"
- title: 4.8.  Base Exchange without ICE Connectivity Checks
  contents:
  - "4.8.  Base Exchange without ICE Connectivity Checks\n   In certain network environments,\
    \ the ICE connectivity checks can be\n   omitted to reduce initial connection\
    \ set-up latency because a base\n   exchange acts as an implicit connectivity\
    \ test itself.  For this to\n   work, the Initiator MUST be able to reach the\
    \ Responder by simply UDP\n   encapsulating HIP and ESP packets sent to the Responder's\
    \ address.\n   Detecting and configuring this particular scenario is prone to\n\
    \   failure unless carefully planned.\n   In such a scenario, the Responder MAY\
    \ include UDP-ENCAPSULATION NAT\n   traversal mode as one of the supported modes\
    \ in the R1 packet.  If\n   the Responder has registered to a HIP relay server,\
    \ it MUST also\n   include a LOCATOR parameter in R1 that contains a preferred\
    \ address\n   where the Responder is able to receive UDP-encapsulated ESP and\
    \ HIP\n   packets.  This locator MUST be of type \"Transport address\", its\n\
    \   Traffic type MUST be \"both\", and it MUST have the \"Preferred bit\" set\n\
    \   (see Table 2).  If there is no such locator in R1, the source address\n  \
    \ of R1 is used as the Responder's preferred address.\n   The Initiator MAY choose\
    \ the UDP-ENCAPSULATION mode if the Responder\n   listed it in the supported modes\
    \ and the Initiator does not wish to\n   use ICE for searching for a more optimal\
    \ path.  In this case, the\n   Initiator sends the I2 with UDP-ENCAPSULATION mode\
    \ in the NAT\n   traversal mode parameter directly to the Responder's preferred\n\
    \   address (i.e., to the preferred locator in R1 or to the address where\n  \
    \ R1 was received from if there was no preferred locator in R1).  The\n   Initiator\
    \ MAY include locators in I2 but they MUST NOT be taken as\n   ICE candidates,\
    \ since ICE will not be used for connections with UDP-\n   ENCAPSULATION NAT traversal\
    \ mode.  Instead, if R2 and I2 are received\n   and processed successfully, a\
    \ security association can be created and\n   UDP-encapsulated ESP can be exchanged\
    \ between the hosts after the\n   base exchange completes.  However, the Responder\
    \ SHOULD NOT send any\n   ESP to the Initiator's address before it has received\
    \ data from the\n   Initiator, as specified in Sections 4.4.2. and 6.9 of [RFC5201]\
    \ and\n   in Sections 3.2.9 and 5.4 of [RFC5206].\n   Since an I2 packet with\
    \ UDP-ENCAPSULATION NAT traversal mode selected\n   MUST NOT be sent via a relay,\
    \ the Responder SHOULD reject such I2\n   packets and reply with a NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER\
    \ NOTIFY\n   packet (see Section 5.10).\n   If there is no answer for the I2 packet\
    \ sent directly to the\n   Responder's preferred address, the Initiator MAY send\
    \ another I2 via\n   the HIP relay server, but it MUST NOT choose UDP-ENCAPSULATION\
    \ NAT\n   traversal mode for that I2.\n"
- title: 4.9.  Initiating a Base Exchange Both with and without UDP Encapsulation
  contents:
  - "4.9.  Initiating a Base Exchange Both with and without UDP Encapsulation\n  \
    \ The Initiator MAY also try to simultaneously perform a base exchange\n   with\
    \ the Responder without UDP encapsulation.  In such a case, the\n   Initiator\
    \ sends two I1 packets, one without and one with UDP\n   encapsulation, to the\
    \ Responder.  The Initiator MAY wait for a while\n   before sending the other\
    \ I1.  How long to wait and in which order to\n   send the I1 packets can be decided\
    \ based on local policy.  For\n   retransmissions, the procedure is repeated.\n\
    \   The I1 packet without UDP encapsulation may arrive directly, without\n   any\
    \ relays, at the Responder.  When this happens, the procedures in\n   [RFC5201]\
    \ are followed for the rest of the base exchange.  The\n   Initiator may receive\
    \ multiple R1 packets, with and without UDP\n   encapsulation, from the Responder.\
    \  However, after receiving a valid\n   R1 and answering it with an I2, further\
    \ R1 packets that are not\n   retransmits of the original R1 MUST be ignored.\n\
    \   The I1 packet without UDP encapsulation may also arrive at a HIP-\n   capable\
    \ middlebox.  When the middlebox is a HIP rendezvous server and\n   the Responder\
    \ has successfully registered with the rendezvous\n   service, the middlebox follows\
    \ rendezvous procedures in [RFC5204].\n   If the Initiator receives a NAT traversal\
    \ mode parameter in R1\n   without UDP encapsulation, the Initiator MAY ignore\
    \ this parameter\n   and send an I2 without UDP encapsulation and without any\
    \ selected NAT\n   traversal mode.  When the Responder receives the I2 without\
    \ UDP\n   encapsulation and without NAT traversal mode, it will assume that no\n\
    \   NAT traversal mechanism is needed.  The packet processing will be\n   done\
    \ as described in [RFC5201].  The Initiator MAY store the NAT\n   traversal modes\
    \ for future use, e.g., in case of a mobility or\n   multihoming event that causes\
    \ NAT traversal to be used during the\n   lifetime of the HIP association.\n"
- title: 4.10.  Sending Control Packets after the Base Exchange
  contents:
  - "4.10.  Sending Control Packets after the Base Exchange\n   After the base exchange,\
    \ the end-hosts MAY send HIP control packets\n   directly to each other using\
    \ the transport address pair established\n   for a data channel without sending\
    \ the control packets through the\n   HIP relay server.  When a host does not\
    \ get acknowledgments, e.g., to\n   an UPDATE or CLOSE packet after a timeout\
    \ based on local policies,\n   the host SHOULD resend the packet through the relay,\
    \ if it was listed\n   in the LOCATOR parameter in the base exchange.\n   If control\
    \ packets are sent through a HIP relay server, the host\n   registered with the\
    \ relay MUST utilize the RELAY_TO parameter as in\n   the base exchange.  The\
    \ HIP relay server SHOULD forward HIP packets\n   to the registered hosts and\
    \ forward packets from a registered host to\n   the address in the RELAY_TO parameter.\
    \  The relay MUST add a\n   RELAY_FROM parameter to the control packets it relays\
    \ to the\n   registered hosts.\n   If the HIP relay server is not willing or able\
    \ to relay a HIP packet,\n   it MAY notify the sender of the packet with MESSAGE_NOT_RELAYED\
    \ error\n   notification (see Section 5.10).\n"
- title: 5.  Packet Formats
  contents:
  - "5.  Packet Formats\n   The following subsections define the parameter and packet\
    \ encodings\n   for the HIP, ESP, and ICE connectivity check packets.  All values\n\
    \   MUST be in network byte order.\n"
- title: 5.1.  HIP Control Packets
  contents:
  - "5.1.  HIP Control Packets\n      0                   1                   2  \
    \                 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |        Source Port            |       Destination Port        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \         Length              |           Checksum            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                       32 bits of zeroes                       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     ~      \
    \              HIP Header and Parameters                  ~\n     |          \
    \                                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 5: Format of UDP-Encapsulated HIP Control Packets\n   HIP control\
    \ packets are encapsulated in UDP packets as defined in\n   Section 2.2 of [RFC3948],\
    \ \"IKE Header Format for Port 4500\", except a\n   different port number is used.\
    \  Figure 5 illustrates the\n   encapsulation.  The UDP header is followed by\
    \ 32 zero bits that can\n   be used to differentiate HIP control packets from\
    \ ESP packets.  The\n   HIP header and parameters follow the conventions of [RFC5201]\
    \ with\n   the exception that the HIP header checksum MUST be zero.  The HIP\n\
    \   header checksum is zero for two reasons.  First, the UDP header\n   already\
    \ contains a checksum.  Second, the checksum definition in\n   [RFC5201] includes\
    \ the IP addresses in the checksum calculation.  The\n   NATs unaware of HIP cannot\
    \ recompute the HIP checksum after changing\n   IP addresses.\n   A HIP relay\
    \ server or a Responder without a relay SHOULD listen at\n   UDP port 10500 for\
    \ incoming UDP-encapsulated HIP control packets.  If\n   some other port number\
    \ is used, it needs to be known by potential\n   Initiators.\n"
- title: 5.2.  Connectivity Checks
  contents:
  - "5.2.  Connectivity Checks\n   The connectivity checks are performed using STUN\
    \ Binding requests as\n   defined in [RFC5245].  This section describes the details\
    \ of the\n   parameters in the STUN messages.\n   The Binding requests MUST use\
    \ STUN short-term credentials with the\n   last 32 bits of the HITs of the Initiator\
    \ and Responder as the\n   username fragments.  The username is formed from the\
    \ username\n   fragments as defined in Section 7.1.1.3 of [RFC5245].  The 32-bit\n\
    \   username fragments are expressed using lowercase hexadecimal ASCII\n   characters.\
    \  The leading zeroes MUST NOT be omitted so that the\n   username's size is fixed\
    \ (8 characters); for example, if the local\n   HIT is 2001:15:8ebe:1aa7:42f5:b413:7237:6c0a\
    \ and the remote HIT is\n   2001:18:46fa:97c0:ba5:cd77:51:47b, the local username\
    \ would be\n   72376c0a and the remote username 0051047b.\n   The STUN password\
    \ is drawn from the Diffie-Hellman (DH) keying\n   material.  Drawing of HIP keys\
    \ is defined in [RFC5201], Section 6.5\n   and drawing of ESP keys in [RFC5202],\
    \ Section 7.  Correspondingly,\n   the hosts MUST draw symmetric keys for STUN\
    \ according to [RFC5201],\n   Section 6.5.  The hosts draw the STUN key after\
    \ HIP keys, or after\n   ESP keys if ESP transform was successfully negotiated\
    \ in the base\n   exchange.  Both hosts draw a 128-bit key from the DH keying\
    \ material,\n   express that in hexadecimal ASCII format using only lowercase\
    \ letters\n   (resulting in 32 numbers or lowercase letters), and use that as\
    \ both\n   the local and peer password.  [RFC5389] describes how hosts use the\n\
    \   password for message integrity of STUN messages.\n   Both the username and\
    \ password are expressed in ASCII hexadecimal\n   format to prevent the need to\
    \ run them through SASLPrep as defined in\n   [RFC5389].\n   The connectivity\
    \ checks MUST contain the PRIORITY attribute.  They\n   MAY contain the USE-CANDIDATE\
    \ attribute as defined in Section 7.1.1.1\n   of [RFC5245].\n   The Initiator\
    \ is always in the controlling role during a base\n   exchange.  When two hosts\
    \ are initiating a connection to each other\n   simultaneously, the HIP state\
    \ machine detects it and assigns the host\n   with the larger HIT as the Responder\
    \ as explained in Sections 4.4.2\n   and 6.7 in [RFC5201].  Hence, the ICE-CONTROLLED\
    \ and ICE-CONTROLLING\n   attributes are not needed to resolve role conflicts.\
    \  However, the\n   attributes SHOULD be added to the connectivity check messages\
    \ to\n   ensure interoperability with different ICE stacks, and they can be\n\
    \   safely ignored on received connectivity checks.\n"
- title: 5.3.  Keepalives
  contents:
  - "5.3.  Keepalives\n   The keepalives for HIP associations that are created with\
    \ ICE are\n   STUN Binding Indications, as defined in [RFC5389].  In contrast\
    \ to\n   the UDP-encapsulated HIP header, the non-ESP-marker between the UDP\n\
    \   header and the STUN header is excluded.  Keepalives MUST contain the\n   FINGERPRINT\
    \ STUN attribute but SHOULD NOT contain any other STUN\n   attributes and SHOULD\
    \ NOT utilize any authentication mechanism.  STUN\n   messages are demultiplexed\
    \ from ESP and HIP control packets using the\n   STUN markers, such as the magic\
    \ cookie value and the FINGERPRINT\n   attribute.\n   Keepalives for HIP associations\
    \ created without ICE are HIP control\n   packets that have NOTIFY as the packet\
    \ type.  The keepalive NOTIFY\n   packets do not contain any parameters.\n"
- title: 5.4.  NAT Traversal Mode Parameter
  contents:
  - "5.4.  NAT Traversal Mode Parameter\n   The format of the NAT_TRAVERSAL_MODE parameter\
    \ is similar to the\n   format of the ESP_TRANSFORM parameter in [RFC5202] and\
    \ is shown in\n   Figure 6.  This specification defines traversal mode identifiers\
    \ UDP-\n   ENCAPSULATION and ICE-STUN-UDP.  The identifier RESERVED is reserved\n\
    \   for future use.  Future specifications may define more traversal\n   modes.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \         Reserved            |            Mode ID #1         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |           Mode ID #2          |            Mode ID #3         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \         Mode ID #n          |             Padding           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Type       608\n     Length     length in octets, excluding Type, Length,\
    \ and padding\n     Reserved   zero when sent, ignored when received\n     Mode\
    \ ID    defines the proposed or selected NAT traversal mode(s)\n     The following\
    \ NAT traversal mode IDs are defined:\n         ID name            Value\n   \
    \      RESERVED             0\n         UDP-ENCAPSULATION    1\n         ICE-STUN-UDP\
    \         2\n           Figure 6: Format of the NAT_TRAVERSAL_MODE Parameter\n\
    \   The sender of a NAT_TRAVERSAL_MODE parameter MUST make sure that\n   there\
    \ are no more than six (6) Mode IDs in one NAT_TRAVERSAL_MODE\n   parameter. \
    \ Conversely, a recipient MUST be prepared to handle\n   received NAT traversal\
    \ mode parameters that contain more than six\n   Mode IDs by accepting the first\
    \ six Mode IDs and dropping the rest.\n   The limited number of Mode IDs sets\
    \ the maximum size of the\n   NAT_TRAVERSAL_MODE parameter.  The modes MUST be\
    \ in preference order,\n   most preferred mode(s) first.\n"
- title: 5.5.  Connectivity Check Transaction Pacing Parameter
  contents:
  - "5.5.  Connectivity Check Transaction Pacing Parameter\n   The TRANSACTION_PACING\
    \ parameter shown in Figure 7 contains only the\n   connectivity check pacing\
    \ value, expressed in milliseconds, as a 32-\n   bit unsigned integer.\n     \
    \ 0                   1                   2                   3\n      0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Min Ta                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Type     610\n     Length   4\n     Min Ta   the minimum connectivity check\
    \ transaction pacing\n              value the host would use\n           Figure\
    \ 7: Format of the TRANSACTION_PACING Parameter\n"
- title: 5.6.  Relay and Registration Parameters
  contents:
  - "5.6.  Relay and Registration Parameters\n   The format of the REG_FROM, RELAY_FROM,\
    \ and RELAY_TO parameters is\n   shown in Figure 8.  All parameters are identical\
    \ except for the type.\n   REG_FROM is the only parameter covered with the signature.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \           Port              |    Protocol   |     Reserved  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |                            Address                            |\n     |  \
    \                                                             |\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Type       REG_FROM:   950\n                RELAY_FROM: 63998\n        \
    \        RELAY_TO:   64002\n     Length     20\n     Port       transport port\
    \ number; zero when plain IP is used\n     Protocol   IANA assigned, Internet\
    \ Protocol number.\n                17 for UDP, 0 for plain IP\n     Reserved\
    \   reserved for future use; zero when sent, ignored\n                when received\n\
    \     Address    an IPv6 address or an IPv4 address in \"IPv4-Mapped\n       \
    \         IPv6 address\" format\n   Figure 8: Format of the REG_FROM, RELAY_FROM,\
    \ and RELAY_TO Parameters\n   REG_FROM contains the transport address and protocol\
    \ from which the\n   HIP relay server sees the registration coming.  RELAY_FROM\
    \ contains\n   the address from which the relayed packet was received by the relay\n\
    \   server and the protocol that was used.  RELAY_TO contains the same\n   information\
    \ about the address to which a packet should be forwarded.\n"
- title: 5.7.  LOCATOR Parameter
  contents:
  - "5.7.  LOCATOR Parameter\n   The generic LOCATOR parameter format is the same\
    \ as in [RFC5206].\n   However, presenting ICE candidates requires a new locator\
    \ type.  The\n   generic and NAT-traversal-specific locator parameters are illustrated\n\
    \   in Figure 9.\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |            Length             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Traffic\
    \ Type  |  Locator Type | Locator Length|  Reserved   |P|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                       Locator Lifetime                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Locator                            |\n     |      \
    \                                                         |\n     |          \
    \                                                     |\n     |              \
    \                                                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     .                                                               .\n    \
    \ .                                                               .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Traffic Type  |  Loc Type = 2 | Locator Length|  Reserved   |P|\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                     Locator Lifetime                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Transport Port            |  Transp. Proto|     Kind      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Priority                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                              SPI                              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Address                            |\n     |      \
    \                                                         |\n     |          \
    \                                                     |\n     |              \
    \                                                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 9: LOCATOR Parameter\n   The individual fields\
    \ in the LOCATOR parameter are described in\n   Table 2.\n   +-----------+----------+--------------------------------------------+\n\
    \   | Field     | Value(s) | Purpose                                    |\n  \
    \ +-----------+----------+--------------------------------------------+\n   |\
    \ Type      | 193      | Parameter type                             |\n   | Length\
    \    | Variable | Length in octets, excluding Type and       |\n   |         \
    \  |          | Length fields and padding                  |\n   | Traffic   |\
    \ 0-2      | Is the locator for HIP signaling (1), for  |\n   | Type      |  \
    \        | ESP (2), or for both (0)                   |\n   | Locator   | 2  \
    \      | \"Transport address\" locator type           |\n   | Type      |    \
    \      |                                            |\n   | Locator   | 7    \
    \    | Length of the fields after Locator         |\n   | Length    |        \
    \  | Lifetime in 4-octet units                  |\n   | Reserved  | 0        |\
    \ Reserved for future extensions             |\n   | Preferred | 0 or 1   | Set\
    \ to 1 for a Locator in R1 if the        |\n   | (P) bit   |          | Responder\
    \ can use it for the rest of the   |\n   |           |          | base exchange,\
    \ otherwise set to zero       |\n   | Locator   | Variable | Locator lifetime\
    \ in seconds                |\n   | Lifetime  |          |                   \
    \                         |\n   | Transport | Variable | Transport layer port\
    \ number                |\n   | Port      |          |                       \
    \                     |\n   | Transport | Variable | IANA assigned, transport\
    \ layer Internet    |\n   | Protocol  |          | Protocol number.  Currently\
    \ only UDP (17)  |\n   |           |          | is supported.                \
    \              |\n   | Kind      | Variable | 0 for host, 1 for server reflexive,\
    \ 2 for  |\n   |           |          | peer reflexive or 3 for relayed address\
    \    |\n   | Priority  | Variable | Locator's priority as described in       \
    \  |\n   |           |          | [RFC5245]                                  |\n\
    \   | SPI       | Variable | Security Parameter Index (SPI) value that  |\n  \
    \ |           |          | the host expects to see in incoming ESP    |\n   |\
    \           |          | packets that use this locator              |\n   | Address\
    \   | Variable | IPv6 address or an \"IPv4-Mapped IPv6       |\n   |         \
    \  |          | address\" format IPv4 address [RFC4291]     |\n   +-----------+----------+--------------------------------------------+\n\
    \                 Table 2: Fields of the LOCATOR Parameter\n"
- title: 5.8.  RELAY_HMAC Parameter
  contents:
  - "5.8.  RELAY_HMAC Parameter\n   The RELAY_HMAC parameter value has the TLV type\
    \ 65520.  It has the\n   same semantics as RVS_HMAC [RFC5204].\n"
- title: 5.9.  Registration Types
  contents:
  - "5.9.  Registration Types\n   The REG_INFO, REG_REQ, REG_RESP, and REG_FAILED\
    \ parameters contain\n   Registration Type [RFC5203] values for HIP relay server\
    \ registration.\n   The value for RELAY_UDP_HIP is 2.\n"
- title: 5.10.  Notify Packet Types
  contents:
  - "5.10.  Notify Packet Types\n   A HIP relay server and end-hosts can use NOTIFY\
    \ packets to signal\n   different error conditions.  The new Notify Packet Types\
    \ [RFC5201]\n   defined in this document are shown below.  The Notification Data\n\
    \   field for the error notifications SHOULD contain the HIP header of\n   the\
    \ rejected packet and SHOULD be empty for the\n   CONNECTIVITY_CHECKS_FAILED type.\n\
    \   NOTIFICATION PARAMETER - ERROR TYPES     Value\n   ------------------------------------\
    \     -----\n   NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER      60\n      If a HIP\
    \ relay server does not forward a base exchange packet due\n      to missing NAT\
    \ traversal mode parameter, or the Initiator selects\n      a NAT traversal mode\
    \ that the Responder did not expect, the relay\n      or the Responder may send\
    \ back a NOTIFY error packet with this\n      type.\n   CONNECTIVITY_CHECKS_FAILED\
    \                 61\n      Used by the end-hosts to signal that NAT traversal\
    \ connectivity\n      checks failed and did not produce a working path.\n   MESSAGE_NOT_RELAYED\
    \                        62\n      Used by a HIP relay server to signal that is\
    \ was not able or\n      willing to relay a HIP packet.\n"
- title: 5.11.  ESP Data Packets
  contents:
  - "5.11.  ESP Data Packets\n   [RFC3948] describes the UDP encapsulation of the\
    \ IPsec ESP transport\n   and tunnel mode.  On the wire, the HIP ESP packets do\
    \ not differ from\n   the transport mode ESP, and thus the encapsulation of the\
    \ HIP ESP\n   packets is same as the UDP encapsulation transport mode ESP.\n \
    \  However, the (semantic) difference to Bound End-to-End Tunnel (BEET)\n   mode\
    \ ESP packets used by HIP is that IP header is not used in BEET\n   integrity\
    \ protection calculation.\n   During the HIP base exchange, the two peers exchange\
    \ parameters that\n   enable them to define a pair of IPsec ESP security associations\
    \ (SAs)\n   as described in [RFC5202].  When two peers perform a UDP-encapsulated\n\
    \   base exchange, they MUST define a pair of IPsec SAs that produces\n   UDP-encapsulated\
    \ ESP data traffic.\n   The management of encryption/authentication protocols\
    \ and SPIs is\n   defined in [RFC5202].  The UDP encapsulation format and processing\
    \ of\n   HIP ESP traffic is described in Section 6.1 of [RFC5202].\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  Privacy Considerations
  contents:
  - "6.1.  Privacy Considerations\n   The locators are in plain text format in favor\
    \ of inspection at HIP-\n   aware middleboxes in the future.  The current document\
    \ does not\n   specify encrypted versions of LOCATORs, even though it could be\n\
    \   beneficial for privacy reasons to avoid disclosing them to\n   middleboxes.\n\
    \   It is also possible that end-users may not want to reveal all\n   locators\
    \ to each other.  For example, tracking the physical location\n   of a multihoming\
    \ end-host may become easier if it reveals all\n   locators to its peer during\
    \ a base exchange.  Also, revealing host\n   addresses exposes information about\
    \ the local topology that may not\n   be allowed in all corporate environments.\
    \  For these two reasons, an\n   end-host may exclude certain host addresses from\
    \ its LOCATOR\n   parameter.  However, such behavior creates non-optimal paths\
    \ when the\n   hosts are located behind the same NAT.  Especially, this could\
    \ be\n   problematic with a legacy NAT that does not support routing from the\n\
    \   private address realm back to itself through the outer address of the\n  \
    \ NAT.  This scenario is referred to as the hairpin problem [RFC5128].\n   With\
    \ such a legacy NAT, the only option left would be to use a\n   relayed transport\
    \ address from a TURN server.\n   The use of HIP relay servers and TURN relays\
    \ can be also useful for\n   privacy purposes.  For example, a privacy concerned\
    \ Responder may\n   reveal only its HIP relay server and Relayed candidates to\n\
    \   Initiators.  This same mechanism also protects the Responder against\n   Denial-of-Service\
    \ (DoS) attacks by allowing the Responder to initiate\n   new connections even\
    \ if its relays would be unavailable due to a DoS\n   attack.\n"
- title: 6.2.  Opportunistic Mode
  contents:
  - "6.2.  Opportunistic Mode\n   A HIP relay server should have one address per relay\
    \ client when a\n   HIP relay is serving more than one relay client and supports\n\
    \   opportunistic mode.  Otherwise, it cannot be guaranteed that the HIP\n   relay\
    \ server can deliver the I1 packet to the intended recipient.\n"
- title: 6.3.  Base Exchange Replay Protection for HIP Relay Server
  contents:
  - "6.3.  Base Exchange Replay Protection for HIP Relay Server\n   In certain scenarios,\
    \ it is possible that an attacker, or two\n   attackers, can replay an earlier\
    \ base exchange through a HIP relay\n   server by masquerading as the original\
    \ Initiator and Responder.  The\n   attack does not require the attacker(s) to\
    \ compromise the private\n   key(s) of the attacked host(s).  However, for this\
    \ attack to succeed,\n   the Responder has to be disconnected from the HIP relay\
    \ server.\n   The relay can protect itself against replay attacks by becoming\n\
    \   involved in the base exchange by introducing nonces that the end-\n   hosts\
    \ (Initiator and Responder) are required to sign.  One way to do\n   this is to\
    \ add ECHO_REQUEST_M parameters to the R1 and I2 packets as\n   described in [HIP-MIDDLE]\
    \ and drop the I2 or R2 packets if the\n   corresponding ECHO_RESPONSE_M parameters\
    \ are not present.\n"
- title: 6.4.  Demuxing Different HIP Associations
  contents:
  - "6.4.  Demuxing Different HIP Associations\n   Section 5.1 of [RFC3948] describes\
    \ a security issue for the UDP\n   encapsulation in the standard IP tunnel mode\
    \ when two hosts behind\n   different NATs have the same private IP address and\
    \ initiate\n   communication to the same Responder in the public Internet.  The\n\
    \   Responder cannot distinguish between two hosts, because security\n   associations\
    \ are based on the same inner IP addresses.\n   This issue does not exist with\
    \ the UDP encapsulation of HIP ESP\n   transport format because the Responder\
    \ uses HITs to distinguish\n   between different Initiators.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This section is to be interpreted according to [RFC5226].\n\
    \   This document updates the IANA Registry for HIP Parameter Types\n   [RFC5201]\
    \ by assigning new HIP Parameter Type values for the new HIP\n   Parameters: RELAY_FROM,\
    \ RELAY_TO, and REG_FROM (defined in\n   Section 5.6), RELAY_HMAC (defined in\
    \ Section 5.8), TRANSACTION_PACING\n   (defined in Section 5.5), and NAT_TRAVERSAL_MODE\
    \ (defined in\n   Section 5.4).\n   This document defines an additional registration\
    \ type for the HIP\n   Registration Extension [RFC5203] that allows registering\
    \ with a HIP\n   relay server for relaying service: RELAY_UDP_HIP (defined in\n\
    \   Section 5.9).\n   This document also defines NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER,\n\
    \   CONNECTIVITY_CHECKS_FAILED, and MESSAGE_NOT_RELAYED Notify Packet\n   Types\
    \ [RFC5201] in Section 5.10.\n   The NAT_TRAVERSAL_MODE parameter has 16-bit unsigned\
    \ integer fields\n   for different modes, for which IANA has created and maintains\
    \ a new\n   sub-registry entitled \"HIP NAT Traversal Modes\" under the \"Host\n\
    \   Identity Protocol (HIP) Parameters\".  Initial values for the NAT\n   traversal\
    \ mode registry are given in Section 5.4; future assignments\n   are to be made\
    \ through IETF Review [RFC5226].  Assignments consist of\n   a NAT traversal mode\
    \ identifier name and its associated value.\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   This RFC is a product of a design team that also included\
    \ Marcelo\n   Bagnulo and Philip Matthews, who both have made major contributions\n\
    \   to this document.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Thanks to Jonathan Rosenberg and the rest of the MMUSIC\
    \ WG folks for\n   the excellent work on ICE.  In addition, the authors would\
    \ like to\n   thank Andrei Gurtov, Simon Schuetz, Martin Stiemerling, Lars Eggert,\n\
    \   Vivien Schmitt, and Abhinav Pathak for their contributions and Tobias\n  \
    \ Heer, Teemu Koponen, Juhana Mattila, Jeffrey M. Ahrenholz, Kristian\n   Slavov,\
    \ Janne Lindqvist, Pekka Nikander, Lauri Silvennoinen, Jukka\n   Ylitalo, Juha\
    \ Heinanen, Joakim Koskela, Samu Varjonen, Dan Wing, and\n   Jani Hautakorpi for\
    \ their comments on this document.\n   Miika Komu has been working in the Networking\
    \ Research group at\n   Helsinki Institute for Information Technology (HIIT).\
    \  The work has\n   been funded by Tekes, Telia-Sonera, Elisa, Nokia, the Finnish\
    \ Defence\n   Forces, Ericsson and Birdstep in InfraHIP I and II projects.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC4291]     Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \                 Architecture\", RFC 4291, February 2006.\n   [RFC4423]     Moskowitz,\
    \ R. and P. Nikander, \"Host Identity Protocol\n                 (HIP) Architecture\"\
    , RFC 4423, May 2006.\n   [RFC5201]     Moskowitz, R., Nikander, P., Jokela, P.,\
    \ and T.\n                 Henderson, \"Host Identity Protocol\", RFC 5201,\n\
    \                 April 2008.\n   [RFC5202]     Jokela, P., Moskowitz, R., and\
    \ P. Nikander, \"Using the\n                 Encapsulating Security Payload (ESP)\
    \ Transport Format\n                 with the Host Identity Protocol (HIP)\",\
    \ RFC 5202,\n                 April 2008.\n   [RFC5203]     Laganier, J., Koponen,\
    \ T., and L. Eggert, \"Host\n                 Identity Protocol (HIP) Registration\
    \ Extension\",\n                 RFC 5203, April 2008.\n   [RFC5204]     Laganier,\
    \ J. and L. Eggert, \"Host Identity Protocol\n                 (HIP) Rendezvous\
    \ Extension\", RFC 5204, April 2008.\n   [RFC5206]     Nikander, P., Henderson,\
    \ T., Vogt, C., and J. Arkko,\n                 \"End-Host Mobility and Multihoming\
    \ with the Host\n                 Identity Protocol\", RFC 5206, April 2008.\n\
    \   [RFC5226]     Narten, T. and H. Alvestrand, \"Guidelines for Writing\n   \
    \              an IANA Considerations Section in RFCs\", BCP 26,\n           \
    \      RFC 5226, May 2008.\n   [RFC5245]     Rosenberg, J., \"Interactive Connectivity\
    \ Establishment\n                 (ICE): A Protocol for Network Address Translator\
    \ (NAT)\n                 Traversal for Offer/Answer Protocols\", RFC 5245,\n\
    \                 April 2010.\n   [RFC5389]     Rosenberg, J., Mahy, R., Matthews,\
    \ P., and D. Wing,\n                 \"Session Traversal Utilities for NAT (STUN)\"\
    , RFC 5389,\n                 October 2008.\n   [RFC5766]     Rosenberg, J., Mahy,\
    \ R., and P. Matthews, \"Traversal\n                 Using Relays around NAT (TURN):\
    \ Relay Extensions to\n                 Session Traversal Utilities for NAT (STUN)\"\
    , RFC 5766,\n                 April 2010.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [HIP-MIDDLE]  Heer, T., Wehrle, K., and M.\
    \ Komu, \"End-Host\n                 Authentication for HIP Middleboxes\", Work\
    \ in Progress,\n                 February 2009.\n   [MMUSIC-ICE]  Rosenberg, J.,\
    \ \"Guidelines for Usage of Interactive\n                 Connectivity Establishment\
    \ (ICE) by non Session\n                 Initiation Protocol (SIP) Protocols\"\
    , Work in Progress,\n                 July 2008.\n   [RFC3948]     Huttunen, A.,\
    \ Swander, B., Volpe, V., DiBurro, L., and\n                 M. Stenberg, \"UDP\
    \ Encapsulation of IPsec ESP Packets\",\n                 RFC 3948, January 2005.\n\
    \   [RFC4787]     Audet, F. and C. Jennings, \"Network Address Translation\n \
    \                (NAT) Behavioral Requirements for Unicast UDP\",\n          \
    \       BCP 127, RFC 4787, January 2007.\n   [RFC5128]     Srisuresh, P., Ford,\
    \ B., and D. Kegel, \"State of Peer-\n                 to-Peer (P2P) Communication\
    \ across Network Address\n                 Translators (NATs)\", RFC 5128, March\
    \ 2008.\n   [RFC5207]     Stiemerling, M., Quittek, J., and L. Eggert, \"NAT and\n\
    \                 Firewall Traversal Issues of Host Identity Protocol\n      \
    \           (HIP) Communication\", RFC 5207, April 2008.\n"
- title: Appendix A.  Selecting a Value for Check Pacing
  contents:
  - "Appendix A.  Selecting a Value for Check Pacing\n   Selecting a suitable value\
    \ for the connectivity check transaction\n   pacing is essential for the performance\
    \ of connectivity check-based\n   NAT traversal.  The value should not be so small\
    \ that the checks\n   cause network congestion or overwhelm the NATs.  On the\
    \ other hand, a\n   pacing value that is too high makes the checks last for a\
    \ long time,\n   thus increasing the connection setup delay.\n   The Ta value\
    \ may be configured by the user in environments where the\n   network characteristics\
    \ are known beforehand.  However, if the\n   characteristics are not known, it\
    \ is recommended that the value is\n   adjusted dynamically.  In this case, it's\
    \ recommended that the hosts\n   estimate the round-trip time (RTT) between them\
    \ and set the minimum\n   Ta value so that only two connectivity check messages\
    \ are sent on\n   every RTT.\n   One way to estimate the RTT is to use the time\
    \ it takes for the HIP\n   relay server registration exchange to complete; this\
    \ would give an\n   estimate on the registering host's access link's RTT.  Also,\
    \ the\n   I1/R1 exchange could be used for estimating the RTT, but since the R1\n\
    \   can be cached in the network, or the relaying service can increase\n   the\
    \ delay notably, it is not recommended.\n"
- title: Appendix B.  Base Exchange through a Rendezvous Server
  contents:
  - "Appendix B.  Base Exchange through a Rendezvous Server\n   When the Initiator\
    \ looks up the information of the Responder from\n   DNS, it's possible that it\
    \ discovers a rendezvous server (RVS) record\n   [RFC5204].  In this case, if\
    \ the Initiator uses NAT traversal methods\n   described in this document, it\
    \ MAY use its own HIP relay server to\n   forward HIP traffic to the rendezvous\
    \ server.  The Initiator will\n   send the I1 packet using its HIP relay server,\
    \ which will then\n   forward it to the RVS server of the Responder.  In this\
    \ case, the\n   value of the protocol field in the RELAY_TO parameter MUST be\
    \ IP\n   since RVS does not support UDP-encapsulated base exchange packets.\n\
    \   The Responder will send the R1 packet directly to the Initiator's HIP\n  \
    \ relay server and the following I2 and R2 packets are also sent\n   directly\
    \ using the relay.\n   In case the Initiator is not able to distinguish which\
    \ records are\n   RVS address records and which are Responder's address records\
    \ (e.g.,\n   if the DNS server did not support HIP extensions), the Initiator\n\
    \   SHOULD first try to contact the Responder directly, without using a\n   HIP\
    \ relay server.  If none of the addresses are reachable, it MAY try\n   them out\
    \ using its own HIP relay server as described above.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Miika Komu\n   Helsinki Institute for Information Technology\n\
    \   Metsanneidonkuja 4\n   Espoo\n   Finland\n   Phone: +358503841531\n   Fax:\
    \   +35896949768\n   EMail: miika@iki.fi\n   URI:   http://www.hiit.fi/\n   Thomas\
    \ Henderson\n   The Boeing Company\n   P.O. Box 3707\n   Seattle, WA\n   USA\n\
    \   EMail: thomas.r.henderson@boeing.com\n   Hannes Tschofenig\n   Nokia Siemens\
    \ Networks\n   Linnoitustie 6\n   Espoo  02600\n   Finland\n   Phone: +358 (50)\
    \ 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at/\n\
    \   Jan Melen\n   Ericsson Research Nomadiclab\n   Hirsalantie 11\n   02420 Jorvas\n\
    \   Finland\n   Phone: +358 9 2991\n   EMail: jan.melen@ericsson.com\n   Ari Keranen\
    \ (editor)\n   Ericsson Research Nomadiclab\n   Hirsalantie 11\n   02420 Jorvas\n\
    \   Finland\n   Phone: +358 9 2991\n   EMail: ari.keranen@ericsson.com\n"
