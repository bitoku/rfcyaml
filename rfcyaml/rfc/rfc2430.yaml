- title: __initial_text__
  contents:
  - "                      A Provider Architecture for\n            Differentiated\
    \ Services and Traffic Engineering\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1.0 Abstract
  contents:
  - "1.0 Abstract\n   This document describes the Provider Architecture for Differentiated\n\
    \   Services and Traffic Engineering (PASTE) for Internet Service\n   Providers\
    \ (ISPs).  Providing differentiated services in ISPs is a\n   challenge because\
    \ the scaling problems presented by the sheer number\n   of flows present in large\
    \ ISPs makes the cost of maintaining per-flow\n   state unacceptable.  Coupled\
    \ with this, large ISPs need the ability\n   to perform traffic engineering by\
    \ directing aggregated flows of\n   traffic along specific paths.\n   PASTE addresses\
    \ these issues by using Multiprotocol Label Switching\n   (MPLS) [1] and the Resource\
    \ Reservation Protocol (RSVP) [2] to create\n   a scalable traffic management\
    \ architecture that supports\n   differentiated services.  This document assumes\
    \ that the reader has\n   at least some familiarity with both of these technologies.\n"
- title: 2.0 Terminology
  contents:
  - "2.0 Terminology\n   In common usage, a packet flow, or a flow, refers to a unidirectional\n\
    \   stream of packets, distributed over time.  Typically a flow has very\n   fine\
    \ granularity and reflects a single interchange between hosts,\n   such as a TCP\
    \ connection.  An aggregated flow is a number of flows\n   that share forwarding\
    \ state and a single resource reservation along a\n   sequence of routers.\n \
    \  One mechanism for supporting aggregated flows is Multiprotocol Label\n   Switching\
    \ (MPLS).  In MPLS, packets are tunneled by wrapping them in\n   a minimal header\
    \ [3].  Each such header contains a label, that\n   carries both forwarding and\
    \ resource reservation semantics.  MPLS\n   defines mechanisms to install label-based\
    \ forwarding information\n   along a series of Label Switching Routers (LSRs)\
    \ to construct a Label\n   Switched Path (LSP).  LSPs can also be associated with\
    \ resource\n   reservation information.\n   One protocol for constructing such\
    \ LSPs is the Resource Reservation\n   Protocol (RSVP) [4].  When used with the\
    \ Explicit Route Object (ERO)\n   [5], RSVP can be used to construct an LSP along\
    \ an explicit route\n   [6].\n   To support differentiated services, packets are\
    \ divided into separate\n   traffic classes.  For conceptual purposes, we will\
    \ discuss three\n   different traffic classes: Best Effort, Priority, and Network\n\
    \   Control.  The exact number of subdivisions within each class is to be\n  \
    \ defined.\n   Network Control traffic primarily consists of routing protocols\
    \ and\n   network management traffic.  If Network Control traffic is dropped,\n\
    \   routing protocols can fail or flap, resulting in network instability.\n  \
    \ Thus, Network Control must have very low drop preference.  However,\n   Network\
    \ Control traffic is generally insensitive to moderate delays\n   and requires\
    \ a relatively small amount of bandwidth.  A small\n   bandwidth guarantee is\
    \ sufficient to insure that Network Control\n   traffic operates correctly.\n\
    \   Priority traffic is likely to come in many flavors, depending on the\n   application.\
    \  Particular flows may require bandwidth guarantees,\n   jitter guarantees, or\
    \ upper bounds on delay.  For the purposes of\n   this memo, we will not distinguish\
    \ the subdivisions of priority\n   traffic.  All priority traffic is assumed to\
    \ have an explicit\n   resource reservation.\n   Currently, the vast majority\
    \ of traffic in ISPs is Best Effort\n   traffic.  This traffic is, for the most\
    \ part, delay insensitive and\n   reasonably adaptive to congestion.\n   When\
    \ flows are aggregated according to their traffic class and then\n   the aggregated\
    \ flow is placed inside a LSP, we call the result a\n   traffic trunk, or simply\
    \ a trunk.  The traffic class of a packet is\n   orthogonal to the LSP that it\
    \ is on, so many different trunks, each\n   with its own traffic class, may share\
    \ an LSP if they have different\n   traffic classes.\n"
- title: 3.0 Introduction
  contents:
  - "3.0 Introduction\n   The next generation of the Internet presents special challenges\
    \ that\n   must be addressed by a single, coordinated architecture.  While this\n\
    \   architecture allows for distinction between ISPs, it also defines a\n   framework\
    \ within which ISPs may provide end-to-end differentiated\n   services in a coordinated\
    \ and reliable fashion.  With such an\n   architecture, an ISP would be able to\
    \ craft common agreements for the\n   handling of differentiated services in a\
    \ consistent fashion,\n   facilitating end-to-end differentiated services via\
    \ a composition of\n   these agreements.  Thus, the goal of this document is to\
    \ describe an\n   architecture for providing differentiated services within the\
    \ ISPs of\n   the Internet, while including support for other forthcoming needs\n\
    \   such as traffic engineering.  While this document addresses the needs\n  \
    \ of the ISPs, its applicability is not limited to the ISPs.  The same\n   architecture\
    \ could be used in any large, multiprovider catenet\n   needing differentiated\
    \ services.\n   This document only discusses unicast services.  Extensions to\
    \ the\n   architecture to support multicast are a subject for future research.\n\
    \   One of the primary considerations in any ISP architecture is\n   scalability.\
    \  Solutions that have state growth proportional to the\n   size of the Internet\
    \ result in growth rates exceeding Moore's law,\n   making such solutions intractable\
    \ in the long term.  Thus, solutions\n   that use mechanisms with very limited\
    \ growth rates are strongly\n   preferred.\n   Discussions of differentiated services\
    \ to date have frequently\n   resulted in solutions that require per-flow state\
    \ or per-flow\n   queuing.  As the number of flows in an ISP within the \"default-free\n\
    \   zone of the Internet\" scales with the size of the Internet, the\n   growth\
    \ rate is difficult to support and argues strongly for a\n   solution with lower\
    \ state requirements.  Simultaneously, supporting\n   differentiated services\
    \ is a significant benefit to most ISPs.  Such\n   support would allow providers\
    \ to offer special services such as\n   priority for bandwidth for mission critical\
    \ services for users\n   willing to pay a service premium.  Customers would contract\
    \ with ISPs\n   for these services under Service Level Agreements (SLAs).  Such\
    \ an\n   agreement may specify the traffic volume, how the traffic is handled,\n\
    \   either in an absolute or relative manner, and the compensation that\n   the\
    \ ISP receives.\n   Differentiated services are likely to be deployed across a\
    \ single ISP\n   to support applications such as a single enterprise's Virtual\
    \ Private\n   Network (VPN).  However, this is only the first wave of service\n\
    \   implementation.  Closely following this will be the need for\n   differentiated\
    \ services to support extranets, enterprise VPNs that\n   span ISPs, or industry\
    \ interconnection networks such as the ANX [7].\n   Because such applications\
    \ span enterprises and thus span ISPs, there\n   is a clear need for inter-domain\
    \ SLAs.  This document discusses the\n   technical architecture that would allow\
    \ the creation of such inter-\n   domain SLAs.\n   Another important consideration\
    \ in this architecture is the advent of\n   traffic engineering within ISPs. \
    \ Traffic engineering is the ability\n   to move trunks away from the path selected\
    \ by the ISP's IGP and onto\n   a different path.  This allows an ISP to route\
    \ traffic around known\n   points of congestion in its network, thereby making\
    \ more efficient\n   use of the available bandwidth.  In turn, this makes the\
    \ ISP more\n   competitive within its market by allowing the ISP to pass lower\
    \ costs\n   and better service on to its customers.\n   Finally, the need to provide\
    \ end-to-end differentiated services\n   implies that the architecture must support\
    \ consistent inter-provider\n   differentiated services.  Most flows in the Internet\
    \ today traverse\n   multiple ISPs, making a consistent description and treatment\
    \ of\n   priority flows across ISPs a necessity.\n"
- title: 4.0 Components of the Architecture
  contents:
  - "4.0 Components of the Architecture\n   The Differentiated Services Backbone architecture\
    \ is the integration\n   of several different mechanisms that, when used in a\
    \ coordinated way,\n   achieve the goals outlined above.  This section describes\
    \ each of the\n   mechanisms used in some detail.  Subsequent sections will then\
    \ detail\n   the interoperation of these mechanisms.\n"
- title: 4.1 Traffic classes
  contents:
  - "4.1 Traffic classes\n   As described above, packets may fall into a variety of\
    \ different\n   traffic classes.  For ISP operations, it is essential that packets\
    \ be\n   accurately classified before entering the ISP and that it is very\n \
    \  easy for an ISP device to determine the traffic class for a\n   particular\
    \ packet.\n   The traffic class of MPLS packets can be encoded in the three bits\n\
    \   reserved for CoS within the MPLS label header.  In addition, traffic\n   classes\
    \ for IPv4 packets can be classified via the IPv4 ToS byte,\n   possibly within\
    \ the three precedence bits within that byte.  Note\n   that the consistent interpretation\
    \ of the traffic class, regardless\n   of the bits used to indicate this class,\
    \ is an important feature of\n   PASTE.\n   In this architecture it is not overly\
    \ important to control which\n   packets entering the ISP have a particular traffic\
    \ class.  From the\n   ISP's perspective, each Priority packet should involve\
    \ some economic\n   premium for delivery.  As a result the ISP need not pass judgment\
    \ as\n   to the appropriateness of the traffic class for the application.\n  \
    \ It is important that any Network Control traffic entering an ISP be\n   handled\
    \ carefully.  The contents of such traffic must also be\n   carefully authenticated.\
    \  Currently, there is no need for traffic\n   generated external to a domain\
    \ to transit a border router of the ISP.\n"
- title: 4.2 Trunks
  contents:
  - "4.2 Trunks\n   As described above, traffic of a single traffic class that is\n\
    \   aggregated into a single LSP is called a traffic trunk, or simply a\n   trunk.\
    \  Trunks are essential to the architecture because they allow\n   the overhead\
    \ in the infrastructure to be decoupled from the size of\n   the network and the\
    \ amount of traffic in the network.  Instead, as\n   the traffic scales up, the\
    \ amount of traffic in the trunks increases;\n   not the number of trunks.\n \
    \  The number of trunks within a given topology has a worst case of one\n   trunk\
    \ per traffic class from each entry router to each exit router.\n   If there are\
    \ N routers in the topology and C classes of service, this\n   would be (N * (N-1)\
    \ * C) trunks.  Fortunately, instantiating this\n   many trunks is not always\
    \ necessary.\n   Trunks with a single exit point which share a common internal\
    \ path\n   can be merged to form a single sink tree.  The computation necessary\n\
    \   to determine if two trunks can be merged is straightforward.  If,\n   when\
    \ a trunk is being established, it intersects an existing trunk\n   with the same\
    \ traffic class and the same remaining explicit route,\n   the new trunk can be\
    \ spliced into the existing trunk at the point of\n   intersection.  The splice\
    \ itself is straightforward: both incoming\n   trunks will perform a standard\
    \ label switching operation, but will\n   result in the same outbound label. \
    \ Since each sink tree created this\n   way touches each router at most once and\
    \ there is one sink tree per\n   exit router, the result is N * C sink trees.\n\
    \   The number of trunks or sink trees can also be reduced if multiple\n   trunks\
    \ or sink trees for different classes follow the same path.\n   This works because\
    \ the traffic class of a trunk or sink tree is\n   orthogonal to the path defined\
    \ by its LSP.  Thus, two trunks with\n   different traffic classes can share a\
    \ label for any part of the\n   topology that is shared and ends in the exit router.\
    \  Thus, the\n   entire topology can be overlaid with N trunks.\n   Further, if\
    \ Best Effort trunks and individual Best Effort flows are\n   treated identically,\
    \ there is no need to instantiate any Best Effort\n   trunk that would follow\
    \ the IGP computed path.  This is because the\n   packets can be directly forwarded\
    \ without an LSP. However, traffic\n   engineering may require Best Effort trunks\
    \ to be treated differently\n   from the individual Best Effort flows, thus requiring\
    \ the\n   instantiation of LSPs for Best Effort trunks.  Note that Priority\n\
    \   trunks must be instantiated because end-to-end RSVP packets to\n   support\
    \ the aggregated Priority flows must be tunneled.\n   Trunks can also be aggregated\
    \ with other trunks by adding a new label\n   to the stack of labels for each\
    \ trunk, effectively bundling the\n   trunks into a single tunnel.  For the purposes\
    \ of this document, this\n   is also considered a trunk, or if we need to be specific,\
    \ this will\n   be called an aggregated trunk.  Two trunks can be aggregated if\
    \ they\n   share a portion of their path.  There is no requirement on the exact\n\
    \   length of the common portion of the path, and thus the exact\n   requirements\
    \ for forming an aggregated trunk are beyond the scope of\n   this document. \
    \ Note that traffic class (i.e., QoS indication) is\n   propagated when an additional\
    \ label is added to a trunk, so trunks of\n   different classes may be aggregated.\n\
    \   Trunks can be terminated at any point, resulting in a deaggregation\n   of\
    \ traffic.  The obvious consequence is that there needs to be\n   sufficient switching\
    \ capacity at the point of deaggregation to deal\n   with the resultant traffic.\n\
    \   High reliability for a trunk can be provided through the use of one\n   or\
    \ more backup trunks.  Backup trunks can be initiated either by the\n   same router\
    \ that would initiate the primary trunk or by another\n   backup router.  The\
    \ status of the primary trunk can be ascertained by\n   the router that initiated\
    \ the backup trunk (note that this may be\n   either the same or a different router\
    \ as the router that initiated\n   the primary trunk) through out of band information,\
    \ such as the IGP.\n   If a backup trunk is established and the primary trunk\
    \ returns to\n   service, the backup trunk can be deactivated and the primary\
    \ trunk\n   used instead.\n"
- title: 4.3 RSVP
  contents:
  - "4.3 RSVP\n   Originally RSVP was designed as a protocol to install state\n  \
    \ associated with resource reservations for individual flows\n   originated/destined\
    \ to hosts, where path was determined by\n   destination-based routing. Quoting\
    \ directly from the RSVP\n   specifications, \"The RSVP protocol is used by a\
    \ host, on behalf of an\n   application data stream, to request a specific quality\
    \ of service\n   (QoS) from the network for particular data streams or flows\"\
    \n   [RFC2205].\n   The usage of RSVP in PASTE is quite different from the usage\
    \ of RSVP\n   as it was originally envisioned by its designers.  The first\n \
    \  difference is that RSVP is used in PASTE to install state that\n   applies\
    \ to a collection of flows that all share a common path and\n   common pool of\
    \ reserved resources.  The second difference is that\n   RSVP is used in PASTE\
    \ to install state related to forwarding,\n   including label switching information,\
    \ in addition to resource\n   reservations.  The third difference is that the\
    \ path that this state\n   is installed along is no longer constrained by the\
    \ destination-based\n   routing.\n   The key factor that makes RSVP suitable for\
    \ PASTE is the set of\n   mechanisms provided by RSVP. Quoting from the RSVP specifications,\n\
    \   \"RSVP protocol mechanisms provide a general facility for creating and\n \
    \  maintaining distributed reservation state across a mesh of multicast\n   or\
    \ unicast delivery paths.\" Moreover, RSVP provides a straightforward\n   extensibility\
    \ mechanism by allowing for the creation of new RSVP\n   Objects. This flexibility\
    \ allows us to also use the mechanisms\n   provided by RSVP to create and maintain\
    \ distributed state for\n   information other than pure resource reservation,\
    \ as well as allowing\n   the creation of forwarding state in conjunction with\
    \ resource\n   reservation state.\n   The original RSVP design, in which \"RSVP\
    \ itself transfers and\n   manipulates QoS control parameters as opaque data,\
    \ passing them to\n   the appropriate traffic control modules for interpretation\"\
    \ can thus\n   be extended to include explicit route parameters and label binding\n\
    \   parameters. Just as with QoS parameters, RSVP can transfer and\n   manipulate\
    \ explicit route parameters and label binding parameters as\n   opaque data, passing\
    \ explicit route parameters to the appropriate\n   forwarding module, and label\
    \ parameters to the appropriate MPLS\n   module.\n   Moreover, an RSVP session\
    \ in PASTE is not constrained to be only\n   between a pair of hosts, but is also\
    \ used between pairs of routers\n   that act as the originator and the terminator\
    \ of a traffic trunk.\n   Using RSVP in PASTE helps consolidate procedures for\
    \ several tasks:\n   (a) procedures for establishing forwarding along an explicit\
    \ route,\n   (b) procedures for establishing a label switched path, and (c) RSVP's\n\
    \   existing procedures for resource reservation.  In addition, these\n   functions\
    \ can be cleanly combined in any manner.  The main advantage\n   of this consolidation\
    \ comes from an observation that the above three\n   tasks are not independent,\
    \ but inter-related. Any alternative that\n   accomplished each of these functions\
    \ via independent sets of\n   procedures, would require additional coordination\
    \ between functions,\n   adding more complexity to the system.\n"
- title: 4.4 Traffic Engineering
  contents:
  - "4.4 Traffic Engineering\n   The purpose of traffic engineering is to give the\
    \ ISP precise control\n   over the flow of traffic within its network.  Traffic\
    \ engineering is\n   necessary because standard IGPs compute the shortest path\
    \ across the\n   ISP's network based solely on the metric that has been\n   administratively\
    \ assigned to each link.  This computation does not\n   take into account the\
    \ loading of each link.  If the ISP's network is\n   not a full mesh of physical\
    \ links, the result is that there may not\n   be an obvious way to assign metrics\
    \ to the existing links such that\n   no congestion will occur given known traffic\
    \ patterns.  Traffic\n   engineering can be viewed as assistance to the routing\
    \ infrastructure\n   that provides additional information in routing traffic along\n\
    \   specific paths, with the end goal of more efficient utilization of\n   networking\
    \ resources.\n   Traffic engineering is performed by directing trunks along explicit\n\
    \   paths within the ISP's topology.  This diverts the traffic away from\n   the\
    \ shortest path computed by the IGP and presumably onto uncongested\n   links,\
    \ eventually arriving at the same destination.  Specification of\n   the explicit\
    \ route is done by enumerating an explicit list of the\n   routers in the path.\
    \  Given this list, traffic engineering trunks can\n   be constructed in a variety\
    \ of ways.  For example, a trunk could be\n   manually configured along the explicit\
    \ path.  This would involve\n   configuring each router along the path with state\
    \ information for\n   forwarding the particular label.  Such techniques are currently\
    \ used\n   for traffic engineering in some ISPs today.\n   Alternately, a protocol\
    \ such as RSVP can be used with an Explicit\n   Route Object (ERO) so that the\
    \ first router in the path can establish\n   the trunk.  The computation of the\
    \ explicit route is beyond the scope\n   of this document but may include considerations\
    \ of policy, static and\n   dynamic bandwidth allocation, congestion in the topology\
    \ and manually\n   configured alternatives.\n"
- title: 4.5 Resource reservation
  contents:
  - "4.5 Resource reservation\n   Priority traffic has certain requirements on capacity\
    \ and traffic\n   handling.  To provide differentiated services, the ISP's\n \
    \  infrastructure must know of, and support these requirements.  The\n   mechanism\
    \ used to communicate these requirements dynamically is RSVP.\n   The flow specification\
    \ within RSVP can describe many characteristics\n   of the flow or trunk.  An\
    \ LSR receiving RSVP information about a flow\n   or trunk has the ability to\
    \ look at this information and either\n   accept or reject the reservation based\
    \ on its local policy.  This\n   policy is likely to include constraints about\
    \ the traffic handling\n   functions that can be supported by the network and\
    \ the aggregate\n   capacity that the network is willing to provide for Priority\
    \ traffic.\n"
- title: 4.6 Inter-Provider SLAs (IPSs)
  contents:
  - "4.6 Inter-Provider SLAs (IPSs)\n   Trunks that span multiple ISPs are likely\
    \ to be based on legal\n   agreements and some other external considerations.\
    \  As a result, one\n   of the common functions that we would expect to see in\
    \ this type of\n   architecture is a bilateral agreement between ISPs to support\n\
    \   differentiated services.  In addition to the obvious compensation,\n   this\
    \ agreement is likely to spell out the acceptable traffic handling\n   policies\
    \ and capacities to be used by both parties.\n   Documents similar to this exist\
    \ today on behalf of Best Effort\n   traffic and are known as peering agreements.\
    \  Extending a peering\n   agreement to support differentiated services would\
    \ effectively create\n   an Inter-Provider SLA (IPS).  Such agreements may include\
    \ the types\n   of differentiated services that one ISP provides to the other\
    \ ISP, as\n   well as the upper bound on the amount of traffic associated with\
    \ each\n   such service that the ISP would be willing to accept and carry from\n\
    \   the other ISP.  Further, an IPS may limit the types of differentiated\n  \
    \ services and an upper bound on the amount of traffic that may\n   originate\
    \ from a third party ISP and be passed from one signer of the\n   IPS to the other.\n\
    \   If the expected costs associated with the IPS are not symmetric, the\n   parties\
    \ may agree that one ISP will provide the other ISP with\n   appropriate compensation.\
    \  Such costs may be due to inequality of\n   traffic exchange, costs in delivering\
    \ the exchanged traffic, or the\n   overhead involved in supporting the protocols\
    \ exchanged between the\n   two ISPs.\n   Note that the PASTE architecture provides\
    \ a technical basis to\n   establish IPSs, while the procedures necessary to create\
    \ such IPSs\n   are outside the scope of PASTE.\n"
- title: 4.7 Traffic shaping and policing
  contents:
  - "4.7 Traffic shaping and policing\n   To help support IPSs, special facilities\
    \ must be available at the\n   interconnect between ISPs.  These mechanisms are\
    \ necessary to insure\n   that the network transmitting a trunk of Priority traffic\
    \ does so\n   within the agreed traffic characterization and capacity.  A\n  \
    \ simplistic example of such a mechanism might be a token bucket\n   system, implemented\
    \ on a per-trunk basis.  Similarly, there need to\n   be mechanisms to insure,\
    \ on a per trunk basis, that an ISP receiving\n   a trunk receives only the traffic\
    \ that is in compliance with the\n   agreement between ISPs.\n"
- title: 4.8 Multilateral IPSs
  contents:
  - "4.8 Multilateral IPSs\n   Trunks may span multiple ISPs.  As a result, establishing\
    \ a\n   particular trunk may require more than two ISPs.  The result would be\n\
    \   a multilateral IPS.  This type of agreement is unusual with respect\n   to\
    \ existing Internet business practices in that it requires multiple\n   participating\
    \ parties for a useful result.  This is also challenging\n   because without a\
    \ commonly accepted service level definition, there\n   will need to be a multilateral\
    \ definition, and this definition may\n   not be compatible used in IPSs between\
    \ the same parties.\n   Because this new type of agreement may be a difficulty,\
    \ it may in\n   some cases be simpler for certain ISPs to establish aggregated\
    \ trunks\n   through other ISPs and then contract with customers to aggregate\n\
    \   their trunks.  In this way, trunks can span multiple ISPs without\n   requiring\
    \ multilateral IPSs.\n   Either or both of these two alternatives are possible\
    \ and acceptable\n   within this architecture, and the choice is left for the\
    \ the\n   participants to make on a case-by-case basis.\n"
- title: 5.0 The Provider Architecture for differentiated Services and Traffic
  contents:
  - "5.0 The Provider Architecture for differentiated Services and Traffic\n    Engineering\
    \ (PASTE)\n   The Provider Architecture for differentiated Services and Traffic\n\
    \   Engineering (PASTE) is based on the usage of MPLS and RSVP as\n   mechanisms\
    \ to establish differentiated service connections across\n   ISPs.  This is done\
    \ in a scalable way by aggregating differentiated\n   flows into traffic class\
    \ specific MPLS tunnels, also known as traffic\n   trunks.\n   Such trunks can\
    \ be given an explicit route by an ISP to define the\n   placement of the trunk\
    \ within the ISP's infrastructure, allowing the\n   ISP to traffic engineer its\
    \ own network.  Trunks can also be\n   aggregated and merged, which helps the\
    \ scalability of the\n   architecture by minimizing the number of individual trunks\
    \ that\n   intermediate systems must support.\n   Special traffic handling operations,\
    \ such as specific queuing\n   algorithms or drop computations, can be supported\
    \ by a network on a\n   per-trunk basis, allowing these services to scale with\
    \ the number of\n   trunks in the network.\n   Agreements for handling of trunks\
    \ between ISPs require both legal\n   documentation and conformance mechanisms\
    \ on both sides of the\n   agreement.  As a trunk is unidirectional, it is sufficient\
    \ for the\n   transmitter to monitor and shape outbound traffic, while the receiver\n\
    \   polices the traffic profile.\n   Trunks can either be aggregated across other\
    \ ISPs or can be the\n   subject of a multilateral agreement for the carriage\
    \ of the trunk.\n   RSVP information about individual flows is tunneled in the\
    \ trunk to\n   provide an end-to-end reservation.  To insure that the return RSVP\n\
    \   traffic is handled properly, each trunk must also have another tunnel\n  \
    \ running in the opposite direction.  Note that the reverse tunnel may\n   be\
    \ a different trunk or it may be an independent tunnel terminating\n   at the\
    \ same routers as the trunk.  Routing symmetry between a trunk\n   and its return\
    \ is not assumed.\n   RSVP already contains the ability to do local path repair.\
    \  In the\n   event of a trunk failure, this capability, along with the ability\
    \ to\n   specify abstractions in the ERO, allows RSVP to re-establish the\n  \
    \ trunk in many failure scenarios.\n"
- title: 6.0 Traffic flow in the PASTE architecture
  contents:
  - "6.0 Traffic flow in the PASTE architecture\n   As an example of the operation\
    \ of this architecture, we consider an\n   example of a single differentiated\
    \ flow.  Suppose that a user wishes\n   to make a telephone call using a Voice\
    \ over IP service.  While this\n   call is full duplex, we can consider the data\
    \ flow in each direction\n   in a half duplex fashion because the architecture\
    \ operates\n   symmetrically.\n   Suppose that the data packets for this voice\
    \ call are created at a\n   node S and need to traverse to node D.  Because this\
    \ is a voice call,\n   the data packets are encoded as Priority packets.  If there\
    \ is more\n   granularity within the traffic classes, these packets might be\n\
    \   encoded as wanting low jitter and having low drop preference.\n   Initially\
    \ this is encoded into the precedence bits of the IPv4 ToS\n   byte.\n"
- title: 6.1 Propagation of RSVP messages
  contents:
  - "6.1 Propagation of RSVP messages\n   To establish the flow to node D, node S\
    \ first generates an RSVP PATH\n   message which describes the flow in more detail.\
    \  For example, the\n   flow might require 3kbps of bandwidth, be insensitive\
    \ to jitter of\n   less than 50ms, and require a delay of less than 200ms.  This\
    \ message\n   is passed through node S's local network and eventually appears\
    \ in\n   node S's ISP.  Suppose that this is ISP F.\n   ISP F has considerable\
    \ latitude in its options at this point.  The\n   requirement on F is to place\
    \ the flow into a trunk before it exits\n   F's infrastructure.  One thing that\
    \ F might do is to perform the\n   admission control function at the first hop\
    \ router.  At this point, F\n   would determine if it had the capacity and capability\
    \ of carrying the\n   flow across its own infrastructure to an exit router E.\
    \  If the\n   admission control decision is negative, the first hop router can\n\
    \   inform node S using RSVP.  Alternately, it can propagate the RSVP\n   PATH\
    \ message along the path to exit router E.  This is simply normal\n   operation\
    \ of RSVP on a differentiated flow.\n   At exit router E, there is a trunk that\
    \ ISP F maintains that transits\n   ISP X, Y, and Z and terminates in ISP L. \
    \ Based on BGP path\n   information or on out of band information, Node D is known\
    \ to be a\n   customer of ISP L.  Exit router E matches the flow requirements\
    \ in\n   the RSVP PATH message to the characteristics (e.g., remaining\n   capacity)\
    \ of the trunk to ISP L.  Assuming that the requirements are\n   compatible, it\
    \ then notes that the flow should be aggregated into the\n   trunk.\n   To insure\
    \ that the flow reservation happens end to end, the RSVP PATH\n   message is then\
    \ encapsulated into the trunk itself, where it is\n   transmitted to ISP L.  It\
    \ eventually reaches the end of the trunk,\n   where it is decapsulated by router\
    \ U.  PATH messages are then\n   propagated all the way to the ultimate destination\
    \ D.\n   Note that the end-to-end RSVP RESV messages must be carefully handled\n\
    \   by router U.  The RESV messages from router U to E must return via a\n   tunnel\
    \ back to router E.\n   RSVP is also used by exit router E to initialize and maintain\
    \ the\n   trunk to ISP L.  The RSVP messages for this trunk are not placed\n \
    \  within the trunk itself but the end-to-end RSVP messages are.  The\n   existence\
    \ of multiple overlapping RSVP sessions in PASTE is\n   straightforward, but requires\
    \ explicit enumeration when discussing\n   particular RSVP sessions.\n"
- title: 6.2 Propagation of user data
  contents:
  - "6.2 Propagation of user data\n   Data packets created by S flow through ISP F's\
    \ network following the\n   flow reservation and eventually make it to router\
    \ E.  At that point,\n   they are given an MPLS label and placed in the trunk.\
    \  Normal MPLS\n   switching will propagate this packet across ISP X's network.\
    \  Note\n   that the same traffic class still applies because the class encoding\n\
    \   is propagated from the precedence bits of the IPv4 header to the CoS\n   bits\
    \ in the MPLS label.  As the packet exits ISP X's network, it can\n   be aggregated\
    \ into another trunk for the express purpose of\n   tranisiting ISP Y.\n   Again,\
    \ label switching is used to bring the packet across ISP Y's\n   network and then\
    \ the aggregated trunk terminates at a router in ISP\n   Z's network.  This router\
    \ deaggregates the trunk, and forwards the\n   resulting trunk towards ISP L.\
    \  This trunk transits ISP Z and\n   terminates in ISP L at router U.  At this\
    \ point, the data packets are\n   removed from the trunk and forwarded along the\
    \ path computed by RSVP.\n"
- title: 6.3 Trunk establishment and maintenance
  contents:
  - "6.3 Trunk establishment and maintenance\n   In this example, there are two trunks\
    \ in use.  One trunk runs from\n   ISP F, through ISPs X, Y and Z, and then terminates\
    \ in ISP L.  The\n   other aggregated trunk begins in ISP X, transits ISP Y and\
    \ terminates\n   in ISP Z.\n   The first trunk may be established based on a multilateral\
    \ agreement\n   between ISPs F, X, Z and L.  Note that ISP Y is not part of this\n\
    \   multilateral agreement, and ISP X is contractually responsible for\n   providing\
    \ carriage of the trunk into ISP Z.  Also per this agreement,\n   the tunnel is\
    \ maintained by ISP F and is initialized and maintained\n   through the use of\
    \ RSVP and an explicit route object that lists ISP's\n   X, Z, and L.  Within\
    \ this explicit route, ISP X and ISP L are given\n   as strict hops, thus constraining\
    \ the path so that there may not be\n   other ISPs intervening between the pair\
    \ of ISPs F and X and the pair\n   Z and L.  However, no constraint is placed\
    \ on the path between ISPs X\n   and Z.  Further, there is no constraint placed\
    \ on which router\n   terminates the trunk within L's infrastructure.\n   Normally\
    \ this trunk is maintained by one of ISP F's routers adjacent\n   to ISP X.  For\
    \ robustness, ISP F has a second router adjacent to ISP\n   X, and that provides\
    \ a backup trunk.\n   The second trunk may be established by a bilateral agreement\
    \ between\n   ISP X and Y.  ISP Z is not involved.  The second trunk is constrained\n\
    \   so that it terminates on the last hop router within Y's\n   infrastructure.\
    \  This tunnel is initialized and maintained through\n   the use of RSVP and an\
    \ explicit route that lists the last hop router\n   within ISP Y's infrastructure.\
    \  In order to provide redundancy in the\n   case of the failure of the last hop\
    \ router, there are multiple\n   explicit routes configured into ISP X's routers.\
    \  These routers can\n   select one working explicit route from their configured\
    \ list.\n   Further, in order to provide redundancy against the failure of X's\n\
    \   primary router, X provides a backup router with a backup trunk.\n"
- title: 6.4 Robustness
  contents:
  - "6.4 Robustness\n   Note that in this example, there are no single points of failure\
    \ once\n   the traffic is within ISP F's network.  Each trunk has a backup trunk\n\
    \   to protect against the failure of the primary trunk.  To protect\n   against\
    \ the failure of any particular router, each trunk can be\n   configured with\
    \ multiple explicit route objects that terminate at one\n   of several acceptable\
    \ routers.\n"
- title: 7.0 Security Considerations
  contents:
  - "7.0 Security Considerations\n   Because Priority traffic intrinsically has more\
    \ 'value' than Best\n   Effort traffic, the ability to inject Priority traffic\
    \ into a network\n   must be carefully controlled.  Further, signaling concerning\
    \ Priority\n   traffic has to be authenticated because it is likely that the\n\
    \   signaling information will result in specific accounting and\n   eventually\
    \ billing for the Priority services.  ISPs are cautioned to\n   insure that the\
    \ Priority traffic that they accept is in fact from a\n   known previous hop.\
    \  Note that this is a simple requirement to\n   fulfill at private peerings,\
    \ but it is much more difficult at public\n   interconnects.  For this reason,\
    \ exchanging Priority traffic at\n   public interconnects should be done with\
    \ great care.\n   RSVP traffic needs to be authenticated.  This can possibly be\
    \ done\n   through the use of the Integrity Object.\n"
- title: 8.0 Conclusion
  contents:
  - "8.0 Conclusion\n   The Provider Architecture for differentiated Services and\
    \ Traffic\n   Engineering (PASTE) provides a robust, scalable means of deploying\n\
    \   differentiated services in the Internet.  It provides scalability by\n   aggregating\
    \ flows into class specific MPLS tunnels.  These tunnels,\n   also called trunks,\
    \ can in turn be aggregated, thus leading to a\n   hierarchical aggregation of\
    \ traffic.\n   Trunk establishment and maintenance is done with RSVP, taking\n\
    \   advantage of existing work in differentiated services.  Explicit\n   routes\
    \ within the RSVP signaling structure allow providers to perform\n   traffic engineering\
    \ by placing trunks on particular links in their\n   network.\n   The result is\
    \ an architecture that is sufficient to scale to meet ISP\n   needs and can provide\
    \ differentiated services in the large, support\n   traffic engineering, and continue\
    \ to grow with the Internet.\n"
- title: 8.1 Acknowledgments
  contents:
  - "8.1 Acknowledgments\n   Inspiration and comments about this document came from\
    \ Noel Chiappa,\n   Der-Hwa Gan, Robert Elz, Lisa Bourgeault, and Paul Ferguson.\n"
- title: 9.0 References
  contents:
  - "9.0 References\n   [1] Rosen, E., Viswanathan, A., and R. Callon, \"A Proposed\n\
    \       Architecture for MPLS\", Work in Progress.\n   [2] Braden, R., Zhang,\
    \ L., Berson, S., Herzog, S., and S. Jamin,\n       \"Resource ReSerVation Protocol\
    \ (RSVP) -- Version 1 Functional\n       Specification\", RFC 2205, September\
    \ 1997.\n   [3] Rosen, E., Rekhter, Y., Tappan, D., Farinacci, D., Fedorkow,,\
    \ G.,\n       Li, T., and A. Conta, \"MPLS Label Stack Encoding\", Work in\n \
    \      Progress.\n   [4] Davie, B., Rekhter, Y., Rosen, E., Viswanathan, A., and\
    \ V.\n       Srinivasan, \"Use of Label Switching With RSVP\", Work in Progress.\n\
    \   [5] Gan, D.-H., Guerin, R., Kamat, S., Li, T., and E. Rosen, \"Setting\n \
    \      up Reservations on Explicit Paths using RSVP\", Work in Progress.\n   [6]\
    \ Davie, B., Li, T., Rosen, E., and Y. Rekhter, \"Explicit Route\n       Support\
    \ in MPLS\", Work in Progress.\n   [7] http://www.anxo.com/\n"
- title: 10.0 Authors' Addresses
  contents:
  - "10.0 Authors' Addresses\n   Tony Li\n   Juniper Networks, Inc.\n   385 Ravendale\
    \ Dr.\n   Mountain View, CA 94043\n   Phone: +1 650 526 8006\n   Fax:   +1 650\
    \ 526 8001\n   EMail: tli@juniper.net\n   Yakov Rekhter\n   cisco Systems, Inc.\n\
    \   170 W. Tasman Dr.\n   San Jose, CA 95134\n   EMail:  yakov@cisco.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
