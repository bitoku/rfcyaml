- contents:
  - "                Preserving Topology Confidentiality in\n     Inter-Domain Path
    Computation Using a Path-Key-Based Mechanism\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Multiprotocol Label Switching (MPLS) and Generalized MPLS (GMPLS)\n
    \  Traffic Engineering (TE) Label Switched Paths (LSPs) may be computed\n   by
    Path Computation Elements (PCEs).  Where the TE LSP crosses\n   multiple domains,
    such as Autonomous Systems (ASes), the path may be\n   computed by multiple PCEs
    that cooperate, with each responsible for\n   computing a segment of the path.
    \ However, in some cases (e.g., when\n   ASes are administered by separate Service
    Providers), it would break\n   confidentiality rules for a PCE to supply a path
    segment to a PCE in\n   another domain, thus disclosing AS-internal topology information.\n
    \  This issue may be circumvented by returning a loose hop and by\n   invoking
    a new path computation from the domain boundary Label\n   Switching Router (LSR)
    during TE LSP setup as the signaling message\n   enters the second domain, but
    this technique has several issues\n   including the problem of maintaining path
    diversity.\n   This document defines a mechanism to hide the contents of a segment\n
    \  of a path, called the Confidential Path Segment (CPS).  The CPS may\n   be
    replaced by a path-key that can be conveyed in the PCE\n   Communication Protocol
    (PCEP) and signaled within in a Resource\n   Reservation Protocol TE (RSVP-TE)
    explicit route object.\n"
  title: Abstract
- contents:
  - "Table of contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n   2.
    Path-Key Solution ...............................................5\n      2.1.
    Mode of Operation ..........................................5\n      2.2. Example
    ....................................................6\n   3. PCEP Protocol Extensions
    ........................................7\n      3.1. Path-Keys in PCRep Messages
    ................................7\n           3.1.1. PKS with 32-Bit PCE ID ..............................8\n
    \          3.1.2. PKS with 128-Bit PCE ID .............................9\n      3.2.
    Unlocking Path-Keys .......................................10\n           3.2.1.
    Path-Key Bit .......................................10\n           3.2.2. PATH-KEY
    Object ....................................10\n           3.2.3. Path Computation
    Request (PCReq) Message\n                  with Path-Key ......................................11\n
    \  4. PCEP Mode of Operation for Path-Key Expansion ..................12\n   5.
    Security Considerations ........................................12\n   6. Manageability
    Considerations ...................................13\n      6.1. Control of Function
    through Configuration and Policy ......13\n      6.2. Information and Data Models
    ...............................14\n      6.3. Liveness Detection and Monitoring
    .........................15\n      6.4. Verifying Correct Operation ...............................15\n
    \     6.5. Requirements on Other Protocols and Functional\n           Components
    ................................................15\n      6.6. Impact on Network
    Operation ...............................16\n   7. IANA Considerations ............................................16\n
    \     7.1. New Subobjects for the ERO Object .........................16\n      7.2.
    New PCEP Object ...........................................17\n      7.3. New
    RP Object Bit Flag ....................................17\n      7.4. New NO-PATH-VECTOR
    TLV Bit Flag ...........................17\n   8. References .....................................................17\n
    \     8.1. Normative References ......................................17\n      8.2.
    Informative References ....................................18\n   Acknowledgements
    ..................................................19\n"
  title: Table of contents
- contents:
  - "1.  Introduction\n   Path computation techniques using the Path Computation Element
    (PCE)\n   are described in [RFC4655] and allow for path computation of inter-\n
    \  domain Multiprotocol Label Switching (MPLS) Traffic Engineering (TE)\n   and
    Generalized MPLS (GMPLS) Label Switched Paths (LSPs).\n   An important element
    of inter-domain TE is that TE information is not\n   shared between domains for
    scalability and confidentiality reasons\n   ([RFC4105] and [RFC4216]).  Therefore,
    a single PCE is unlikely to be\n   able to compute a full inter-domain path.\n
    \  Two path computation scenarios can be used for inter-domain TE LSPs:\n   one
    using per-domain path computation (defined in [RFC5152]), and the\n   other using
    a PCE-based path computation technique with cooperation\n   between PCEs (as described
    in [RFC4655]).  In this second case, paths\n   for inter-domain LSPs can be computed
    by cooperation between PCEs\n   each of which computes a segment of the path across
    one domain.  Such\n   a path computation procedure is described in [RFC5441].\n
    \  If confidentiality is required between domains (such as would very\n   likely
    be the case between Autonomous Systems (ASes) belonging to\n   different Service
    Providers), then cooperating PCEs cannot exchange\n   path segments or else the
    receiving PCE and the Path Computation\n   Client (PCC) will be able to see the
    individual hops through another\n   domain thus breaking the confidentiality requirement
    stated in\n   [RFC4105] and [RFC4216].  We define the part of the path that we
    wish\n   to keep confidential as the Confidential Path Segment (CPS).\n   One
    mechanism for preserving the confidentiality of the CPS is for\n   the PCE to
    return a path containing a loose hop in place of the\n   segment that must be
    kept confidential.  The concept of loose and\n   strict hops for the route of
    a TE LSP is described in [RFC3209].  The\n   Path Computation Element Communication
    Protocol (PCEP) defined in\n   [RFC5440] supports the use of paths with loose
    hops, and it is a\n   local policy decision at a PCE whether it returns a full
    explicit\n   path with strict hops or uses loose hops.  Note that a path\n   computation
    request may request an explicit path with strict hops or\n   may allow loose hops
    as detailed in [RFC5440].\n   The option of returning a loose hop in place of
    the CPS can be\n   achieved without further extensions to PCEP or the signaling\n
    \  protocol.  If loose hops are used, the TE LSPs are signaled as normal\n   ([RFC3209]),
    and when a loose hop is encountered in the explicit\n   route, it is resolved
    by performing a secondary path computation to\n   reach the resource or set of
    resources identified by the loose hop.\n   Given the nature of the cooperation
    between PCEs in computing the\n   original path, this secondary computation occurs
    at or on behalf of a\n   Label Switching Router (LSR) at a domain boundary (i.e.,
    an Area\n   Border Router (ABR) or an AS Border Router (ASBR)) and the path is\n
    \  expanded as described in [RFC5152].\n   The PCE-based computation model is
    particularly useful for\n   determining mutually disjoint inter-domain paths such
    as might be\n   required for service protection [RFC5298].  A single path computation\n
    \  request is used.  However, if loose hops are returned, the path of\n   each
    TE LSP must be recomputed at the domain boundaries as the TE\n   LSPs are signaled,
    and since the TE LSP signaling proceeds\n   independently for each TE LSP, disjoint
    paths cannot be guaranteed\n   since the LSRs in charge of expanding the explicit
    route objects\n   (EROs) are not synchronized.  Therefore, if the loose hop technique\n
    \  is used without further extensions, path segment confidentiality and\n   path
    diversity are mutually incompatible requirements.\n   This document defines the
    notion of a Path-Key that is a token that\n   replaces a path segment in an explicit
    route.  The Path-Key is\n   encoded as a Path-Key Subobject (PKS) returned in
    the PCEP Path\n   Computation Reply message (PCRep) ([RFC5440]).  Upon receiving
    the\n   computed path, the PKS will be carried in an RSVP-TE Path message\n   (RSVP-TE
    [RFC3209] and [RSVP-PKS]) during signaling.\n   The BNF in this document follows
    the format described in [RBNF].\n   Please note that the term \"path-key\" used
    in this document refers to\n   an identifier allocated by a PCE to represent a
    segment of a computed\n   path.  This term has no relation to the term \"cryptographic
    key\" used\n   in some documents that describe security mechanisms.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [RFC2119].\n   This document makes use of the following terminology and
      acronyms.\n   AS: Autonomous System.\n   ASBR: Autonomous System Border Routers
      used to connect to another AS\n   of a different or the same Service Provider
      via one or more links\n   inter-connecting between ASes.\n   CPS: Confidential
      Path Segment.  A segment of a path that contains\n   nodes and links that the
      AS policy requires to not be disclosed\n   outside the AS.\n   Inter-AS TE LSP:
      A TE LSP that crosses an AS boundary.\n   LSR: Label Switching Router.\n   LSP:
      Label Switched Path.\n   PCC: Path Computation Client: Any client application
      requesting a\n   path computation to be performed by a Path Computation Element.\n
      \  PCE: Path Computation Element: An entity (component, application or\n   network
      node) that is capable of computing a network path or route\n   based on a network
      graph and applying computational constraints.\n   TE LSP: Traffic Engineering
      Label Switched Path.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Path-Key Solution\n   The Path-Key solution may be applied in the PCE-based
    path\n   computation context as follows.  A PCE computes a path segment\n   related
    to a particular domain and replaces any CPS in the path\n   reported to the requesting
    PCC (or another PCE) by one or more\n   subobjects referred to as PKSes.  The
    entry boundary LSR of each CPS\n   SHOULD be specified using its TE Router Id
    as a hop in the returned\n   path immediately preceding the CPS, and other subobjects
    MAY be\n   included in the path immediately before the hop identifying the\n   boundary
    LSR to indicate link and label choices.  Where two PKSes are\n   supplied in sequence
    with no intervening nodes, the entry node to the\n   second CPS MAY be part of
    the first CPS and does not need to be\n   explicitly present in the returned path.
    \ The exit node of a CPS MAY\n   be present as a strict hop immediately following
    the PKS.\n"
  - contents:
    - "2.1.  Mode of Operation\n   During path computation, when local policy dictates
      that\n   confidentiality must be preserved for all or part of the path segment\n
      \  being computed or if explicitly requested by the path computation\n   request,
      the PCE associates a path-key with the computed path for the\n   CPS, places
      its own identifier (its PCE ID as defined in Section 3.1)\n   along with the
      path-key in a PKS, and inserts the PKS object in the\n   path returned to the
      requesting PCC or PCE immediately after the\n   subobject that identifies (using
      the TE Router Id) the LSR that will\n   expand the PKS into explicit path hops.
      \ This will usually be the LSR\n   that is the starting point of the CPS.  The
      PCE that generates a PKS\n   SHOULD store the computed path segment and the
      path-key for later\n   retrieval.  A local policy SHOULD be used to determine
      for how long\n   to retain such stored\n   information, and whether to discard
      the information after it has been\n   queried using the procedures described
      below.  It is RECOMMENDED for\n   a PCE to store the PKS for a period of 10
      minutes.\n   A path-key value is scoped to the PCE that computed it as identified\n
      \  by the PCE-ID carried in the PKS.  A PCE MUST NOT re-use a path-key\n   value
      to represent a new CPS for at least 30 minutes after discarding\n   the previous
      use of the same path-key.  A PCE that is unable to\n   retain information about
      previously used path-key values over a\n   restart SHOULD use some other mechanism
      to guarantee uniqueness of\n   path-key values such as embedding a timestamp
      or version number in\n   the path-key.\n   A head-end LSR that is a PCC converts
      the path returned by a PCE into\n   an explicit route object (ERO) that it includes
      in the Resource\n   Reservation Protocol (RSVP) Path message.  If the path returned
      by\n   the PCE contains a PKS, this is included in the ERO.  Like any other\n
      \  subobjects, the PKS is passed transparently from hop to hop, until it\n   becomes
      the first subobject in the ERO.  This will occur at the start\n   of the CPS,
      which will usually be the domain boundary.  The PKS MUST\n   be preceded by
      an ERO subobject that identifies the LSR that must\n   expand the PKS.  This
      means that (following the rules for ERO\n   processing set out in [RFC3209])
      the PKS will not be encountered in\n   ERO processing until the ERO is being
      processed by the LSR that is\n   capable of correctly handling the PKS.\n   An
      LSR that encounters a PKS when trying to identify the next hop\n   retrieves
      the PCE-ID from the PKS and sends a Path Computation\n   Request (PCReq) message
      as defined in [RFC5440] to the PCE identified\n   by the PCE-ID that contains
      the path-key object .\n   Upon receiving the PCReq message, the PCE identifies
      the computed\n   path segment using the supplied path-key, and returns the previously\n
      \  computed path segment in the form of explicit hops using an ERO\n   object
      contained in the Path Computation Reply (PCRep) to the\n   requesting node as
      defined in [RFC5440].  The requesting node inserts\n   the explicit hops into
      the ERO and continues to process the TE LSP\n   setup as per [RFC3209].\n"
    title: 2.1.  Mode of Operation
  - contents:
    - "2.2.  Example\n   Figure 1 shows a simple two-AS topology with a PCE responsible
      for\n   the path computations in each AS.  An LSP is requested from the\n   ingress
      LSR in one AS to the egress LSR in the other AS.  The\n   ingress, acting as
      the PCC, sends a path computation request to\n   PCE-1.  PCE-1 is unable to
      compute an end-to-end path and invokes\n   PCE-2 (possibly using the techniques
      described in [RFC5441]).  PCE-2\n   computes a path segment from ASBR-2 to the
      egress as {ASBR-2, C, D,\n   Egress}.  It could pass this path segment back
      to PCE-1 in full, or\n   it could send back the path {ASBR-2, Egress} where
      the second hop is\n   a loose hop.\n   However, in order to protect the confidentiality
      of the topology in\n   the second AS while still specifying the path in full,
      PCE-2 may send\n   PCE-1 a path segment expressed as {ASBR-2, PKS, Egress} where
      the PKS\n   is a Path-Key Subobject as defined in this document.  In this case,\n
      \  PCE-2 has identified the segment {ASBR-2, C, D, Egress} as a\n   Confidential
      Path Segment (CPS).  PCE-1 will compute the path segment\n   that it is responsible
      for, and will supply the full path to the PCC\n   as {Ingress, A, B, ASBR-1,
      ASBR-2, PKS, Egress}.\n   Signaling proceeds in the first AS as normal, but
      when the Path\n   message reaches ASBR-2, the next hop is the PKS, and this
      must be\n   expanded before signaling can progress further.  ASBR-2 uses the\n
      \  information in the PKS to request PCE-2 for a path segment, and PCE-2\n   will
      return the segment {ASBR-2, C, D, Egress} allowing signaling to\n   continue
      to set up the LSP.\n       -----------------------------    ----------------------------\n
      \     |     -------                 |  |    -------                 |\n      |
      \   | PCE-1 |<---------------+--+-->| PCE-2 |                |\n      |     -------
      \                |  |    -------                 |\n      |      ^                      |
      \ |    ^                       |\n      |      |                      |  |    |
      \                      |\n      |      v                      |  |    v                       |\n
      \     |  -------              ----  |  |  ----                      |\n      |
      |  PCC  |   -    -   |ASBR| |  | |ASBR|   -    -    ------  |\n      | |Ingress|--|A|--|B|--|
      \ 1 |-+--+-|  2 |--|C|--|D|--|Egress| |\n      |  -------    -    -    -----
      |  |  ----    -    -    ------  |\n      |                             |  |
      \                           |\n       -----------------------------    ----------------------------\n
      \       Figure 1 : A Simple network to demonstrate the use of the PKS\n"
    title: 2.2.  Example
  title: 2.  Path-Key Solution
- contents:
  - '3.  PCEP Protocol Extensions

    '
  - contents:
    - "3.1.  Path-Keys in PCRep Messages\n   Path-Keys are carried in PCReq and PCRep
      messages as part of the\n   various objects that carry path definitions.  In
      particular, a Path-\n   Key is carried in the Explicit Route Object (ERO) on
      PCRep messages.\n   In all cases, the Path-Key is carried in a Path-Key Subobject
      (PKS).\n   The PKS is a fixed-length subobject containing a Path-Key and a\n
      \  PCE-ID.  The Path-Key is an identifier, or token used to represent\n   the
      CPS within the context of the PCE identified by the PCE-ID.  The\n   PCE-ID
      identifies the PCE that can decode the Path-Key using an\n   identifier that
      is unique within the domain that the PCE serves.  The\n   PCE-ID has to be mapped
      to a reachable IPv4 or IPv6 address of the\n   PCE by the first node of the
      CPS (usually a domain border router) and\n   a PCE MAY use one of its reachable
      IP addresses as its PCE-ID.\n   Alternatively and to provide greater security
      (see Section 5) or\n   increased confidentiality, according to domain-local
      policy, the PCE\n   MAY use some other identifier that is scoped only within
      the domain.\n   To allow IPv4 and IPv6 addresses to be carried, two subobjects
      are\n   defined in the following subsections.\n   The Path-Key Subobject may
      be present in the PCEP ERO or the PCEP\n   PATH-KEY object (see Section 3.2).\n"
    - contents:
      - "3.1.1.  PKS with 32-Bit PCE ID\n   The Subobject Type for the PKS with 32-bit
        PCE ID is 64.  The format\n   of this subobject is as follows:\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |L|    Type     |     Length    |           Path-Key            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                         PCE ID (4 bytes)                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     L\n         The L bit SHOULD NOT be set, so that the subobject represents
        a\n         strict hop in the explicit route.\n      Type\n         Subobject
        Type for a Path-Key with 32-bit PCE ID (64).\n      Length\n         The Length
        contains the total length of the subobject in bytes,\n         including the
        Type and Length fields.  The Length is always 8.\n      PCE ID\n         A
        32-bit identifier of the PCE that can decode this path-key.\n         The
        identifier MUST be unique within the scope of the domain\n         that the
        CPS crosses, and MUST be understood by the LSR that\n         will act as
        PCC for the expansion of the PKS.  The\n         interpretation of the PCE-ID
        is subject to domain-local policy.\n         It MAY be an IPv4 address of
        the PCE that is always reachable,\n         and MAY be an address that is
        restricted to the domain in which\n         the LSR that is called upon to
        expand the CPS lies.  Other\n         values that have no meaning outside
        the domain (for example,\n         the Router ID of the PCE) MAY be used to
        increase security or\n         confidentiality (see Section 5).\n"
      title: 3.1.1.  PKS with 32-Bit PCE ID
    - contents:
      - "3.1.2.  PKS with 128-Bit PCE ID\n   The Subobject Type for the PKS with 128-bit
        PCE ID is 65.  The format\n   of the subobject is as follows.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |L|    Type     |     Length    |           Path-Key            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        PCE ID (16 bytes)                      |\n   |
        \                                                              |\n   |                                                               |\n
        \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     L\n         As above.\n      Type\n         Subobject Type for a Path-Key
        with 128-bit PCE ID (65).\n      Length\n         The Length contains the
        total length of the subobject in bytes,\n         including the Type and Length
        fields.  The Length is always 20.\n      PCE ID\n         A 128-bit identifier
        of the PCE that can decode this path-key.\n         The identifier MUST be
        unique within the scope of the domain\n         that the CPS crosses, and
        MUST be understood by the LSR that\n         will act as PCC for the expansion
        of the PKS.  The\n         interpretation of the PCE-ID is subject to domain-local
        policy.\n         It MAY be an IPv6 address of the PCE that is always reachable,\n
        \        but MAY be an address that is restricted to the domain in which\n
        \        the LSR that is called upon to expand the CPS lies.  Other\n         values
        that have no meaning outside the domain (for example,\n         the IPv6 TE
        Router ID) MAY be used to increase security (see\n         Section 5).\n"
      title: 3.1.2.  PKS with 128-Bit PCE ID
    title: 3.1.  Path-Keys in PCRep Messages
  - contents:
    - "3.2.  Unlocking Path-Keys\n   When a network node needs to decode a Path-Key
      so that it can\n   continue signaling for an LSP, it must send a PCReq to the
      designated\n   PCE.  The PCReq defined in [RFC5440] needs to be modified to
      support\n   this usage, which differs from the normal path computation request.\n
      \  To that end, a new flag is defined to show that the PCReq relates to\n   the
      expansion of a PKS, and a new object is defined to carry the PKS\n   in the
      PCReq.  These result in an update to the BNF for the message.\n   The BNF used
      in this document is as described in [RBNF].\n"
    - contents:
      - "3.2.1.  Path-Key Bit\n   [RFC5440] defines the Request Parameters (RP) object
        that is used to\n   specify various characteristics of the Path Computation
        Request\n   (PCReq).\n   In this document, we define a new bit named the Path-Key
        bit as\n   follows.  See Section 7.3 for the IANA assignment of the appropriate\n
        \  bit number.\n   Path-Key bit: When set, the requesting PCC requires the
        retrieval of\n   a Confidential Path Segment that corresponds to the PKS carried
        in a\n   PATH-KEY object in the path computation request.  The Path-Key bit\n
        \  MUST be cleared when the path computation request is not related to a\n
        \  CPS retrieval.\n"
      title: 3.2.1.  Path-Key Bit
    - contents:
      - "3.2.2.  PATH-KEY Object\n   When a PCC needs to expand a path-key in order
        to expand a CPS, it\n   issues a Path Computation Request (PCReq) to the PCE
        identified in\n   the PKS in the RSVP-TE ERO that it is processing.  The PCC
        supplies\n   the PKS to be expanded in a PATH-KEY Object in the PCReq message.\n
        \  The PATH-KEY Object is defined as follows:\n   PATH-KEY Object-Class is
        16.\n   Path-Key Object-Type is 1.\n   The PATH-KEY Object MUST contain at
        least one Path-Key Subobject (see\n   Section 3.1).  The first PKS MUST be
        processed by the PCE.\n   Subsequent subobjects SHOULD be ignored.\n"
      title: 3.2.2.  PATH-KEY Object
    - contents:
      - "3.2.3.  Path Computation Request (PCReq) Message with Path-Key\n   The format
        of a PCReq message including a PATH-KEY object is\n   unchanged as follows:\n
        \      <PCReq Message>::= <Common Header>\n                          [<SVEC-list>]\n
        \                         <request-list>\n       where:\n          <svec-list>::=<SVEC>[<svec-list>]\n
        \         <request-list>::=<request>[<request-list>]\n   To support the use
        of the message to expand a PKS, the definition of\n   <request> is modified
        as follows :\n       <request>::= <RP>\n                    <segment-computation>
        | <path-key-expansion>\n       where:\n          <segment-computation> ::=
        <END-POINTS>\n                                    [<LSPA>]\n                                    [<BANDWIDTH>]\n
        \                                   [<BANDWIDTH>]\n                                    [<metric-list>]\n
        \                                   [<RRO>]\n                                    [<IRO>]\n
        \                                   [<LOAD-BALANCING>]\n          <path-key-expansion>
        ::= <PATH-KEY>\n   Thus, the format of the message for use in normal path
        computation is\n   unmodified.\n"
      title: 3.2.3.  Path Computation Request (PCReq) Message with Path-Key
    title: 3.2.  Unlocking Path-Keys
  title: 3.  PCEP Protocol Extensions
- contents:
  - "4.  PCEP Mode of Operation for Path-Key Expansion\n   The retrieval of the explicit
    path (the CPS) associated with a PKS by\n   a PCC is no different than any other
    path computation request with\n   the exception that the PCReq message MUST contain
    a PATH-KEY object\n   and the Path-Key bit of the RP object MUST be set.  On receipt
    of a\n   PCRep containing a CPS, the requesting PCC SHOULD insert the CPS into\n
    \  the ERO that it will signal, in accordance with local policy.\n   If the receiving
    PCE does not recognize itself as identified by the\n   PCE ID carried in the PKS,
    it MAY forward the PCReq message to\n   another PCE according to local policy.
    \ If the PCE does not forward\n   such a PCReq, it MUST respond with a PCRep message
    containing a\n   NO-PATH object.\n   If the receiving PCE recognizes itself, but
    cannot find the related\n   CPS, or if the retrieval of the CPS is not allowed
    by policy, the PCE\n   MUST send a PCRep message that contains a NO-PATH object.
    \ The\n   NO-PATH-VECTOR TLV SHOULD be used as described in [RFC5440] and a new\n
    \  bit number (see Section 7.4) is assigned to indicate \"Cannot expand\n   PKS\".\n
    \  Upon receipt of a negative reply, the requesting LSR MUST fail the\n   LSP
    setup and SHOULD use the procedures associated with loose hop\n   expansion failure
    [RFC3209].\n"
  title: 4.  PCEP Mode of Operation for Path-Key Expansion
- contents:
  - "5.  Security Considerations\n   This document describes tunneling confidential
    path information\n   across an untrusted domain (such as an AS).  There are many
    security\n   considerations that apply to PCEP and RSVP-TE.\n   Issues include:\n
    \  - Confidentiality of the CPS (can other network elements probe for\n     expansion
    of path-keys, possibly at random?).\n   - Authenticity of the path-key (resilience
    to alteration by\n     intermediaries, resilience to fake expansion of path-keys).\n
    \  - Resilience from Denial-of-Service (DoS) attacks (insertion of\n     spurious
    path-keys; flooding of bogus path-key expansion requests).\n   Most of the interactions
    required by this extension are point to\n   point, can be authenticated and made
    secure as described in [RFC5440]\n   and [RFC3209].  These interactions include
    the:\n       - PCC->PCE request\n       - PCE->PCE request(s)\n       - PCE->PCE
    response(s)\n       - PCE->PCC response\n       - LSR->LSR request and response.
    \ Note that a rogue LSR could\n         modify the ERO and insert or modify Path-Keys.
    \ This would\n         result in an LSR (which is downstream in the ERO) sending\n
    \        decode requests to a PCE.  This is actually a larger problem\n         with
    RSVP.  The rogue LSR is an existing issue with RSVP and\n         will not be
    addressed here.\n       - LSR->PCE request.  Note that the PCE can check that
    the LSR\n         requesting the decode is the LSR at the head of the Path-Key.\n
    \        This largely contains the previous problem of DoS rather than a\n         security
    issue.  A rogue LSR can issue random decode requests,\n         but these will
    amount only to DoS.\n       - PCE->LSR response\n   Thus, the major security issues
    can be dealt with using standard\n   techniques for securing and authenticating
    point-to-point\n   communications.  In addition, it is recommended that the PCE\n
    \  providing a decode response should check that the LSR that issued the\n   decode
    request is the head end of the decoded ERO segment.\n   Further protection can
    be provided by using a PCE ID to identify the\n   decoding PCE that is only meaningful
    within the domain that contains\n   the LSR at the head of the CPS.  This may
    be an IP address that is\n   only reachable from within the domain, or some not-address
    value.\n   The former requires configuration of policy on the PCEs, the latter\n
    \  requires domain-wide policy.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  Manageability Considerations

    '
  - contents:
    - "6.1.  Control of Function through Configuration and Policy\n   The treatment
      of a path segment as a CPS, and its substitution in a\n   PCRep ERO with a PKS,
      is a function that MUST be under operator and\n   policy control where a PCE
      supports the function.  The operator MUST\n   be given the ability to specify
      which path segments are to be\n   replaced and under what circumstances.  For
      example, an operator\n   might set a policy that states that every path segment
      for the\n   operator's domain will be replaced by a PKS when the PCReq has been\n
      \  issued from outside the domain.\n   The operation of the PKS extensions require
      that path-keys are\n   retained by the issuing PCE to be available for retrieval
      by an LSR\n   (acting as a PCC) at a later date.  But it is possible that the\n
      \  retrieval request will never be made, so good housekeeping requires\n   that
      a timer is run to discard unwanted path-keys.  A default value\n   for this
      timer is suggested in Section 2.1.  Implementations SHOULD\n   provide the ability
      for this value to be overridden through operator\n   configuration or policy.\n
      \  After a PKS has been expanded in response to a retrieval request, it\n   may
      be valuable to retain the path-key and CPS for debugging\n   purposes.  Such
      retention SHOULD NOT be the default behavior of an\n   implementation, but MAY
      be available in response to operator request.\n   Once a path-key has been discarded,
      the path-key value SHOULD NOT be\n   immediately available for re-use for a
      new CPS since this might lead\n   to accidental misuse.  A default timer value
      is suggested in Section\n   2.1.  Implementations SHOULD provide the ability
      for this value to be\n   overridden through operator configuration or policy.\n
      \  A PCE must set a PCE-ID value in each PKS it creates so that PCCs can\n   correctly
      identify it and send PCReq messages to expand the PKS to a\n   path segment.
      \ A PCE implementation SHOULD allow operator or policy\n   control of the value
      to be used as the PCE-ID.  If the PCE allows\n   PCE-ID values that are not
      routable addresses to be used, the PCCs\n   MUST be configurable (by the operator
      or through policy) to allow the\n   PCCs to map from the PCE-ID to a routable
      address of the PCE.  Such\n   mapping may be algorithmic, procedural (for example,
      mapping a PCE-ID\n   equal to the IGP Router ID into a routable address), or
      configured\n   through a local or remote mapping table.\n"
    title: 6.1.  Control of Function through Configuration and Policy
  - contents:
    - "6.2.  Information and Data Models\n   A MIB module for PCEP is already defined
      in [PCEP-MIB].  The\n   configurable items listed in Section 6.1 MUST be added
      as readable\n   objects in the module and SHOULD be added as writable objects.\n
      \  A new MIB module MUST be created to allow inspection of path-keys.\n   For
      a given PCE, this MIB module MUST provide a mapping from path-\n   key to path
      segment (that is, a list of hops), and MUST supply other\n   information including:\n
      \  - The identity of the PCC that issued the original request that led\n     to
      the creation of the path-key.\n   - The request ID of the original PCReq.\n
      \  - Whether the path-key has been retrieved yet, and if so, by which\n     PCC.\n
      \  - How long until the path segment associated with the path-key will\n     be
      discarded.\n   - How long until the path-key will be available for re-use.\n"
    title: 6.2.  Information and Data Models
  - contents:
    - "6.3.  Liveness Detection and Monitoring\n   The procedures in this document
      extend PCEP, but do not introduce new\n   interactions between network entities.
      \ Thus, no new liveness\n   detection or monitoring is required.\n   It is possible
      that a head-end LSR that has be given a path including\n   PKSs replacing specific
      CPSs will want to know whether the path-keys\n   are still valid (or have timed
      out).  However, rather than introduce\n   a mechanism to poll the PCE that is
      responsible for the PKS, it is\n   considered pragmatic to simply signal the
      associated LSP.\n"
    title: 6.3.  Liveness Detection and Monitoring
  - contents:
    - "6.4.  Verifying Correct Operation\n   The procedures in this document extend
      PCEP, but do not introduce new\n   interactions between network entities.  Thus,
      no new tools for\n   verifying correct operation are required.\n   A PCE SHOULD
      maintain counters and logs of the following events that\n   might indicate incorrect
      operation (or might indicate security\n   issues).\n   - Attempts to expand
      an unknown path-key.\n   - Attempts to expand an expired path-key.\n   - Duplicate
      attempts to expand the same path-key.\n   - Expiry of path-key without attempt
      to expand it.\n"
    title: 6.4.  Verifying Correct Operation
  - contents:
    - "6.5.  Requirements on Other Protocols and Functional Components\n   The procedures
      described in this document require that the LSRs\n   signal PKSs as defined
      in [RSVP-PKS].  Note that the only changes to\n   LSRs are at the PCCs.  Specifically,
      changes are only needed at the\n   head-end LSRs that build RSVP-TE Path messages
      containing Path-Key\n   Subobjects in their EROs, and the LSRs that discover
      such subobjects\n   as next hops and must expand them.  Other LSRs in the network,
      even\n   if they are on the path of the LSP, will not be called upon to\n   process
      the PKS.\n"
    title: 6.5.  Requirements on Other Protocols and Functional Components
  - contents:
    - "6.6.  Impact on Network Operation\n   As well as the security and confidentiality
      aspects addressed by the\n   use of the PKS, there may be some scaling benefits
      associated with\n   the procedures described in this document.  For example,
      a single PKS\n   in an explicit route may substitute for many subobjects and
      can\n   reduce the overall message size correspondingly.  In some\n   circumstances,
      such as when the explicit route contains multiple\n   subobjects for each hop
      (including node IDs, TE link IDs, component\n   link IDs for each direction
      of a bidirectional LSP, and label IDs for\n   each direction of a bidirectional
      LSP) or when the LSP is a point-\n   to-multipoint LSP, this scaling improvement
      may be very significant.\n   Note that a PCE will not supply a PKS unless it
      knows that the LSR\n   that will receive the PKS through signaling will be able
      to handle\n   it.  Furthermore, as noted in Section 6.5, only those LSRs\n   specifically
      called upon to expand the PKS will be required to\n   process the subobjects
      during signaling.  Thus, the only backward\n   compatibility issues associated
      with the procedures introduced in\n   this document arise when a head-end LSR
      receives a PCRep with an ERO\n   containing a PKS, and it does not know how
      to encode this into\n   signaling.\n   Since the PCE that inserted the PKS is
      required to keep the CPS\n   confidential, the legacy head-end LSR cannot be
      protected.  It must\n   either fail the LSP setup, or request a new path computation
      avoiding\n   the domain that has supplied it with unknown subobjects.\n"
    title: 6.6.  Impact on Network Operation
  title: 6.  Manageability Considerations
- contents:
  - "7.  IANA Considerations\n   IANA assigns values to PCEP parameters in registries
    defined in\n   [RFC5440].  IANA has made the following additional assignments.\n"
  - contents:
    - "7.1.  New Subobjects for the ERO Object\n   IANA has previously assigned an
      Object-Class and Object-Type to the\n   ERO carried in PCEP messages [RFC5440].
      \ IANA also maintains a list\n   of subobject types valid for inclusion in the
      ERO.\n   IANA assigned two new subobject types for inclusion in the ERO as\n
      \  follows:\n   Subobject Type                                         Reference\n
      \            64   Path-Key with 32-bit PCE ID             [RFC5520]\n             65
      \  Path-Key with 128-bit PCE ID            [RFC5520]\n"
    title: 7.1.  New Subobjects for the ERO Object
  - contents:
    - "7.2.  New PCEP Object\n   IANA assigned a new object class in the registry
      of PCEP Objects as\n   follows.\n   Object  Name          Object  Name                     Reference\n
      \  Class                 Type\n   16    PATH-KEY        1       Path-Key                 [RFC5520]\n
      \      Subobjects\n          This object may carry the following subobjects
      as defined\n          for the ERO object.\n                  64   Path-Key with
      32-bit PCE ID        [RFC5520]\n                  65   Path-Key with 128-bit
      PCE ID       [RFC5520]\n"
    title: 7.2.  New PCEP Object
  - contents:
    - "7.3.  New RP Object Bit Flag\n   IANA maintains a registry of bit flags carried
      in the PCEP RP object\n   as defined in [RFC5440].  IANA assigned a new bit
      flag as follows:\n   Bit Number  Hex       Name                             Reference\n
      \  23          0x000017  Path-Key (P-bit)                 [RFC5520]\n"
    title: 7.3.  New RP Object Bit Flag
  - contents:
    - "7.4.  New NO-PATH-VECTOR TLV Bit Flag\n   IANA maintains a registry of bit
      flags carried in the PCEP NO-PATH-\n   VECTOR TLV in the PCEP NO-PATH object
      as defined in [RFC5440].  IANA\n   assigned a new bit flag as follows:\n   Bit
      Number      Name Flag                    Reference\n   27              PKS expansion
      failure        [RFC5520]\n"
    title: 7.4.  New NO-PATH-VECTOR TLV Bit Flag
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5440]  Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path Computation\n
      \             Element (PCE) Communication Protocol (PCEP)\", RFC 5440,\n              March
      2009.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [PCEP-MIB] Koushik, K., and E. Stephan, \"PCE
      Communication Protocol\n              (PCEP) Management Information Base\",
      Work in Progress,\n              November 2008.\n   [RBNF]     Farrel, A., \"Reduced
      Backus-Naur Form (RBNF) A Syntax Used\n              in Various Protocol Specifications\",
      Work in Progress,\n              November 2008.\n   [RFC3209]  Awduche, D.,
      Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and G. Swallow,
      \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\", RFC 3209, December
      2001.\n   [RFC4105]  Le Roux, J.-L., Ed., Vasseur, J.-P., Ed., and J. Boyle,\n
      \             Ed., \"Requirements for Inter-Area MPLS Traffic\n              Engineering\",
      RFC 4105, June 2005.\n   [RFC4216]  Zhang, R., Ed., and J.-P. Vasseur, Ed.,
      \"MPLS Inter-\n              Autonomous System (AS) Traffic Engineering (TE)\n
      \             Requirements\", RFC 4216, November 2005.\n   [RFC4655]  Farrel,
      A., Vasseur, J.-P., and J. Ash, \"A Path\n              Computation Element
      (PCE)-Based Architecture\", RFC 4655,\n              August 2006.\n   [RFC5152]
      \ Vasseur, JP., Ed., Ayyangar, A., Ed., and R. Zhang, \"A\n              Per-Domain
      Path Computation Method for Establishing\n              Inter-Domain Traffic
      Engineering (TE) Label Switched Paths\n              (LSPs)\", RFC 5152, February
      2008.\n   [RFC5298]  Takeda, T., Ed., Farrel, A., Ed., Ikejiri, Y., and JP.\n
      \             Vasseur, \"Analysis of Inter-Domain Label Switched Path\n              (LSP)
      Recovery\", RFC 5298, August 2008.\n   [RFC5441]  Vasseur, JP., Ed., Zhang,
      R., Bitar, N., and JL. Le Roux,\n              \"A Backward-Recursive PCE-Based
      Computation (BRPC)\n              Procedure to Compute Shortest Constrained
      Inter-Domain\n              Traffic Engineering Label Switched Paths\", RFC
      5441, April\n              2009.\n   [RSVP-PKS] Bradford, R., Vasseur, JP.,
      and A. Farrel, \"RSVP\n              Extensions for Path Key Support\", Work
      in Progress,\n              February 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank Eiji Oki, Ben Campbell,
    and Ross\n   Callon for their comments on this document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Rich Bradford (Editor)\n   Cisco Systems, Inc.\n   1414
    Massachusetts Avenue\n   Boxborough, MA 01719\n   USA\n   EMail: rbradfor@cisco.com\n
    \  JP. Vasseur\n   Cisco Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough,
    MA 01719\n   USA\n   EMail: jpv@cisco.com\n   Adrian Farrel\n   Old Dog Consulting\n
    \  EMail: adrian@olddog.co.uk\n"
  title: Authors' Addresses
