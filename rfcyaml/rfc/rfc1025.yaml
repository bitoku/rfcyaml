- title: __initial_text__
  contents:
  - '                          TCP AND IP BAKE OFF

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo describes some of the procedures, scoring,\
    \ and tests used\n   in the TCP and IP bake offs held in the early development\
    \ of these\n   protocols.  These procedures and tests may still be of use in testing\n\
    \   newly implemented TCP and IP modules.  Distribution of this memo is\n   unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   In the early days of the development of TCP and IP, when there\
    \ were\n   very few implementations and the specifications were still evolving,\n\
    \   the only way to determine if an implementation was \"correct\" was to\n  \
    \ test it against other implementations and argue that the results\n   showed\
    \ your own implementation to have done the right thing.  These\n   tests and discussions\
    \ could, in those early days, as likely change\n   the specification as change\
    \ the implementation.\n   There were a few times when this testing was focused,\
    \ bringing\n   together all known implementations and running through a set of\
    \ tests\n   in hopes of demonstrating the N squared connectivity and correct\n\
    \   implementation of the various tricky cases.  These events were called\n  \
    \ \"Bake Offs\".\n   An early version of the list of tests included here appears\
    \ in IEN-69\n   of October 1978.  A demonstration of four TCP implementations\
    \ was\n   held at the Defense Communication Engineering Center in Reston,\n  \
    \ Virginia on 4 December 1978, and reported in IEN-70 of December 1978.\n   A\
    \ bake off of six implementations was held 27-28 January 1979 at\n   USC-Information\
    \ Sciences Institute in Marina del Rey, California and\n   reported in IEN-77\
    \ of February 1979.  And a distributed bake off was\n   held in April 1980 over\
    \ the network and reported in IEN-145 of May\n   1980.\n   The following section\
    \ reproduces (with very slight editing) the\n   procedure, tests, and scoring\
    \ of the April 1980 Bake Off.\n"
- title: Procedure
  contents:
  - "Procedure\n   This is the procedure for the TCP and IP Bake Off.  Each implementor\n\
    \   of a TCP and IP is to perform the following tests and to report the\n   results.\
    \  In general, this is done by using a test program or user\n   Telnet program\
    \ to open connections to your own or other TCP\n   implementations.\n   Some test\
    \ are made more interesting by the use of a \"flakeway\".  A\n   flakeway is a\
    \ purposely flakey gateway.  It should have control\n   parameters that can be\
    \ adjusted while it is running to specify a\n   percentage of datagrams to be\
    \ dropped, a percentage of datagrams to\n   be corrupted and passed on, and a\
    \ percentage of datagrams to be\n   reordered so that they arrive in a different\
    \ order than sent.\n   Many of the following apply for each distinct TCP contacted\
    \ (for\n   example, in the Middleweight Division there is a possibility of 20\n\
    \   points for each other TCP in the Bake Off).\n   Note Bene: Checksums must\
    \ be enforced.  No points will be awarded if\n   the checksum test is disabled.\n\
    \      Featherweight Division\n         1 point for talking to yourself (opening\
    \ a connection).\n         1 point for saying something to yourself (sending and\
    \ receiving\n         data).\n         1 point for gracefully ending the conversation\
    \ (closing the\n         connection without crashing).\n         2 points for\
    \ repeating the above without reinitializing the\n         TCP.\n         5 points\
    \ for a complete conversation via the testing gateway.\n      Middleweight Division\n\
    \         2 points for talking to someone else (opening a connection).\n     \
    \    2 points for saying something to someone else (sending and\n         receiving\
    \ data).\n         2 points for gracefully ending the conversation (closing the\n\
    \         connection without crashing).\n         4 points for repeating the above\
    \ without reinitializing the\n         TCP.\n         10 points for a complete\
    \ conversation via the testing gateway.\n      Heavyweight Division\n        \
    \ 10 points for being able to talk to more than one other TCP at\n         the\
    \ same time (multiple connections open and active\n         simultaneously with\
    \ different TCPs).\n         10 points for correctly handling urgent data.\n \
    \        10 points for correctly handling sequence number wraparound.\n      \
    \   10 points for correctly being able to process a \"Kamikaze\"\n         packet\
    \ (AKA nastygram, christmas tree packet, lamp test\n         segment, et al.).\
    \  That is, correctly handle a segment with the\n         maximum combination\
    \ of features at once (e.g., a SYN URG PUSH\n         FIN segment with options\
    \ and data).\n         30 points for KOing your opponent with legal blows.  (That\
    \ is,\n         operate a connection until one TCP or the other crashes, the\n\
    \         surviving TCP has KOed the other.  Legal blows are segments\n      \
    \   that meet the requirements of the specification.)\n         20 points for\
    \ KOing your opponent with dirty blows.  (Dirty\n         blows are segments that\
    \ violate the requirements of the\n         specification.)\n         10 points\
    \ for showing your opponents checksum test is faulty or\n         disabled.\n\
    \      Host & Gateway IP Division\n         25 points for doing fragmentation\
    \ and reassembly.\n         15 points for doing loose source route option.\n \
    \        15 points for doing strict source route option.\n         10 points for\
    \ doing return route option.\n         10 points for using source quench messages.\n\
    \         10 points for using routing advice messages.\n         5 points for\
    \ doing something with the type of service.\n         5 points for doing something\
    \ with the security option.\n         5 points for doing something with the timestamp\
    \ option.\n         5 points for showing that a gateway forwards datagrams without\n\
    \         decreasing the time to live (showing a gateway is faulty).\n       \
    \  5 points for showing that a gateway forwards datagrams with the\n         time\
    \ to live equal zero (showing a gateway is faulty).\n         10 points for showing\
    \ that a gateway or hosts checksum test is\n         faulty or disabled (showing\
    \ a gateway is faulty).\n      Bonus Points\n         10 points for the best excuse.\n\
    \         20 points for the fewest excuses.\n         30 points for the longest\
    \ conversation.\n         40 points for the most simultaneous connections.\n \
    \        50 points for the most simultaneous connections with distinct\n     \
    \    TCPs.\n   Tests\n      The following tests have been identified for checking\
    \ the\n      capabilities of a TCP implementation.  These may be useful in\n \
    \     attempting to KO an opponent.\n         1.  Single connection.  Open & close\
    \ a single connection many\n             times.\n         2.  Multi connections.\
    \  Open several connections\n             simultaneously.  Two connections to\
    \ the same socket\n             (i.e., a-b and a-c) check proper separation of\
    \ data.\n         3.  Half Open Connection.  Open a connection, crash local TCP\n\
    \             and attempt to open same connection again.\n         4.  Piggy-back\
    \ Loop.  Open connections via Telnet.\n         user telnet--->TCP--->IP--->net--->IP--->TCP--->server\
    \ telnet\n                                                               |\n \
    \                                                              V\n         server\
    \ telnet<---TCP<---IP<---net<---IP<---TCP<---user telnet\n              |\n  \
    \            V\n         user telnet--->...\n         5.  Maximum connections.\
    \  Open connections between a pair of\n             TCP until refused or worse.\n\
    \         6.  Refused connection.  Open a connection to a non-accepting\n    \
    \         socket, does it get refused?\n         7.  Zero Window.  Try to send\
    \ data to a TCP that is presenting\n             a zero window.\n         8. \
    \ Fire Hose.  Make many connections to data source ports, or\n             connections\
    \ to a data sink and send as fast as you can.\n         9.  Urgent Test.  Try\
    \ to send data to a user program that only\n             receives data when in\
    \ urgent mode.\n         10. Kamikazi Segment.  Send and receive nastygrams. \
    \ A\n             nastygram is a segment with SYN, EOL, URG, and FIN on and\n\
    \             carrying one octet of data.\n         11. Sequence Wraparound. \
    \ Test proper functioning when sequence\n             numbers (a) pass 2**31 (i.e.,\
    \ go from plus to \"minus\") and\n             (b) pass 2**32 (i.e., go from 2**32-1\
    \ to 0).\n         12. Buffer size.  With buffer size not equal to one, send data\n\
    \             in segments of various sizes, use urgent occasionally.\n       \
    \  13. Send a nastygram into a half open connection when the\n             sequence\
    \ number is about to wrap around.\n"
- title: New Ideas
  contents:
  - "New Ideas\n   The above tests check for basic operation and handling of some\
    \ of the\n   tricky cases.  They do not consider performance in any way, or check\n\
    \   to see if some of the recently developed ideas have been implemented.\n  \
    \    New Mechanisms\n         1.  The John Nagel Procedures (RFC-896).\n     \
    \    2.  The Van Jacobson Procedures (slow start, RTT measurements,\n        \
    \     etc).\n         3.  The SQuID Procedures (RFC-1016).\n      Performance\
    \ Tests\n         Performance tests are difficult to specify because the results\n\
    \         depend so much on the state of the environment of the test.\n      \
    \   Here are a few possibilities:\n         1.  FTP Throughput:  Send a 1 megabyte\
    \ file to a locally nearby\n             machine on an Ethernet measuring the\
    \ elapsed time.\n         2.  FTP Throughput:  Send a 1 megabyte file to a locally\
    \ nearby\n             machine on an ARPANET measuring the elapsed time.\n   \
    \      3.  NETBLT Throughput:  Send a 1 megabyte file to a locally\n         \
    \    nearby machine on an Ethernet measuring the elapsed time.\n         4.  NETBLT\
    \ Throughput:  Send a 1 megabyte file to a locally\n             nearby machine\
    \ on an ARPANET measuring the elapsed time.\n         5.  Character Test:  Use\
    \ a test program to send a character via\n             TCP to the Echo Server\
    \ (RFC-862), time the round trip (from\n             the time the character is\
    \ sent until the echo is returned\n             to the test program).\n"
- title: Appendix
  contents:
  - "Appendix\n   For History Buffs Only:\n      The following item was in the original\
    \ 1980 tests, but has been\n      moved to this appendix since it no longer applies.\n\
    \         10 points for correctly handling rubber baby buffer bumpers in\n   \
    \      both directions (End of Letter sequence number adjustments).\n"
