- title: __initial_text__
  contents:
  - ''
- title: Mailgroup Note 19
  contents:
  - "Mailgroup Note 19\n                   Mapping between X.400 and RFC 822\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This RFC suggests a proposed protocol for the ARPA-Internet\n\
    \   community, and requests discussion and suggestions for improvements.\n   Distribution\
    \ of this memo is unlimited.\n   This document describes a set of mappings which\
    \ will enable\n   interworking between systems operating the CCITT X.400 (1984)\
    \ series\n   of protocols [CCITT84a], and systems using the RFC 822 mail protocol\n\
    \   [Crocker82a], or protocols derived from RFC 822.  The approach aims\n   to\
    \ maximise the services offered across the boundary, whilst not\n   requiring\
    \ unduly complex mappings.  The mappings should not require\n   any changes to\
    \ end systems.\n   This specification should be used when this mapping is performed\
    \ on\n   the ARPA-Internet or in the UK Academic Community.  This\n   specification\
    \ may be modified in the light of implementation\n   experience, but no substantial\
    \ changes are expected.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Chapter 1 -- Overview
  contents:
  - "Chapter 1 -- Overview\n   1.1.  X.400\n      The X.400 series protocols have\
    \ been defined by CCITT to provide\n      an Interpersonal Messaging Service (IPMS),\
    \ making use of a store\n      and forward Message Transfer Service.  It is expected\
    \ that this\n      standard will be implemented very widely.  As well as the base\n\
    \      standard (X.400), work is underway on various functional standards\n  \
    \    of profiles which specify how X.400 will be used in various\n      communities.\
    \  Many of the major functional standards (e.g. from\n      CEPT, CEN/CENELEC,\
    \ and NBS) are likely to be similar.  Some of the\n      decisions in this document\
    \ are in the light of this work.  No\n      reference is given, as these documents\
    \ are not currently stable.\n   1.2.  RFC 822\n      RFC 822 evolved as a messaging\
    \ standard on the DARPA (the US\n      Defense Advanced Research Projects Agency)\
    \ Internet.  It is\n      currently used on the ARPA-Internet in conjunction with\
    \ two other\n      standards: RFC 821, also known as Simple Mail Transfer Protocol\n\
    \      (SMTP) [Postel82a], and RFC 920 which is a specification for a\n      domain\
    \ name system and a distributed name service [Postel84a].\n      RFC 822, or protocols\
    \ derived from RFC 822 are used in a number of\n      other networks.  In particular:\n\
    \         UUCP Networks\n            UUCP is the UNIX to UNIX CoPy protocol <0>,\
    \ which is usually\n            used over dialup telephone networks to provide\
    \ a simple\n            message transfer mechanism.  There are some extensions\
    \ to\n            RFC 822, particularly in the addressing.  They are likely to\n\
    \            use domains which conform to RFC 920, but not the\n            corresponding\
    \ domain nameservers [Horton86a].\n         CSNET\n            Some portions of\
    \ CSNET will follow the ARPA-Internet\n            protocols. The dialup portion\
    \ of CSNET uses the Phonenet\n            protocols as a replacement for RFC 821.\
    \  This portion is\n            likely to use domains which conform to RFC 920,\
    \ but not the\n            corresponding domain nameservers.\n         BITNET\n\
    \            Some parts of BITNET use RFC 822 related protocols, with\n      \
    \      EBCDIC encoding.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         JNT Mail Networks\n            A\
    \ number of X.25 networks, particularly those associated\n            with the\
    \ UK Academic Community, use the JNT (Joint Network\n            Team) Mail Protocol,\
    \ also known as Greybook [Kille84a].\n            This is used with domains and\
    \ name service specified by the\n            JNT NRS (Name Registration Scheme)\
    \ [Larmouth83a].\n      The mappings specified here are appropriate for all of\
    \ these\n      networks.\n   1.3.  The Need for Conversion\n      There is a large\
    \ community using RFC 822 based protocols for mail\n      services, who will wish\
    \ to communicate with X.400 systems.  This\n      will be a requirement, even\
    \ in cases where communities intend to\n      make a transition to use of X.400,\
    \ where conversion will be needed\n      to ensure a smooth service transition.\
    \  It is expected that there\n      will be more than one gateway <1>, and this\
    \ specification will\n      enable them to behave in a consistent manner.  These\
    \ gateways are\n      sometimes called mail relays.  Consistency between gateways\
    \ is\n      desirable to provide:\n         1.   Consistent service to users.\n\
    \         2.   The best service in cases where a message passes through\n    \
    \          multiple gateways.\n   1.4.  General Approach\n      There are a number\
    \ of basic principles underlying the details of\n      the specification.\n  \
    \       1.   The specification should be pragmatic.  There should not\n      \
    \        be a requirement for complex mappings for 'Academic'\n              reasons.\
    \  Complex mappings should not be required to\n              support trivial additional\
    \ functionality.\n         2.   Subject to 1), functionality across a gateway\
    \ should be as\n              high as possible.\n         3.   It is always a\
    \ bad idea to lose information as a result of\n              any transformation.\
    \  Hence, it is a bad idea for a gateway\n              to discard information\
    \ in the objects it processes.  This\n              includes requested services\
    \ which cannot be fully mapped.\n         4.   All mail gateways actually operate\
    \ at exactly one level\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n              above the layer on which they\
    \ conceptually operate.  This\n              implies that the gateway must not\
    \ only be cognisant of the\n              semantics of objects at the gateway\
    \ level, but also be\n              cognisant of higher level semantics.  If meaningful\n\
    \              transformation of the objects that the gateway operates on\n  \
    \            is to occur, then the gateway needs to understand more\n        \
    \      than the objects themselves.\n   1.5.  Gatewaying Model\n      1.5.1. \
    \ X.400\n         The CCITT X.400 series recommendations specify a number of\n\
    \         services and protocols.  The services are specified in X.400.\n    \
    \     Two of these services are fundamental to this document:\n            1.\
    \   The Message Transfer Service, which can be provided by\n                 either\
    \ the P1 or P3 protocols, which are  specified in\n                 X.411 [CCITT84b].\
    \ This document talks in terms of P1,\n                 but the mappings are equally\
    \ applicable to P3.\n            2.   The Interpersonal Messaging Service (IPMS),\
    \ which is\n                 provided by the P2 protocol specified in X.420\n\
    \                 [CCITT84c].\n         This document considers only IPMS, and\
    \ not of any other usage\n         of the Message Transfer Service.  This is reasonable,\
    \ as\n         RFC 822, broadly speaking, provides a service corresponding to\n\
    \         IPMS, and no services other than IPMS have been defined over\n     \
    \    the Message Transfer Service. As none of the RTS (Reliable\n         Transfer\
    \ Service) service elements is available to the IPMS\n         user, this level\
    \ and lower levels are of no concern in this\n         gatewaying specification.\
    \  Note that in this memo \"IP\" means\n         \"InterPersonal\" (not Internet\
    \ Protocol).\n         The Message Transfer Service defines an end-to-end service\
    \ over\n         a series of Message Transfer Agents (MTA).  It also defines a\n\
    \         protocol, P1, which is used between a pair of MTAs.  This\n        \
    \ protocol is simply a file format (Message Protocol Data Unit,\n         or MPDU),\
    \ transferred between two MTAs using the RTS.  There\n         are three types\
    \ of MPDU:\n            User MPDU\n               This contains envelope information,\
    \ and uninterpreted\n               contents. The envelope includes an ID, an\
    \ originator, a\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n               list of recipients, and trace\
    \ information.  It is used to\n               carry data for higher level services.\n\
    \            Probe\n               This contains only envelope information.  It\
    \ is used to\n               determine whether a User UMPDU could be delivered\
    \ to a\n               given O/R (originator/recipient) name.\n            Delivery\
    \ Report\n               This contains envelope information, and specified\n \
    \              contents.  It is used to indicate delivery success or\n       \
    \        failure of a User or Probe MPDU over the Message Transfer\n         \
    \      Service.\n         IPMS (P2) specifies two content types for the P1 User\
    \ MPDU\n         (User Agent Protocol Data Units or UAPDU):\n            Interpersonal\
    \ Message (IM-UAPDU)\n               This has two components: a heading, and a\
    \ body.  The body\n               is structured as a sequence of body parts, which\
    \ may be\n               basic components (e.g.IA5 text, or G3 fax), or IP\n \
    \              Messages.  The header contains end to end user\n              \
    \ information, such as subject, primary recipients (To:),\n               and\
    \ priority.  The validity of these fields is not\n               guaranteed by\
    \ the Message Transfer Service.  This\n               provides the basic IPMS.\n\
    \            Status Report (SR-UAPDU)\n               This UAPDU has defined contents.\
    \  It is used to indicate\n               that a message has been received by\
    \ a User Agent.  It\n               does not have to be implemented.\n      1.5.2.\
    \  RFC 822\n         RFC 822 is based on the assumption that there is an underlying\n\
    \         service, which is here called the 822-P1 service.  The 822-P1\n    \
    \     service provides three basic functions:\n            1.   Identification\
    \ of a list of recipients.\n            2.   Identification of an error return\
    \ address.\n            3.   Transfer of an RFC 822 message.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         It is possible to achieve 2) within\
    \ the RFC 822 header.  Some\n         822-P1 protocols, in particular SMTP, can\
    \ provide additional\n         functionality, but as these are neither mandatory\
    \ in SMTP, nor\n         available in other 822-P1 protocols, they are not considered\n\
    \         here.  Details of aspects specific to a number of 822-P1\n         protocols\
    \ are given in appendices B to E.  An RFC 822 message\n         consists of a\
    \ header, and content which is uninterpreted ASCII\n         text.  The header\
    \ is divided into fields, which are the\n         protocol elements.  Most of\
    \ these fields are analogous to P2\n         header elements, although some are\
    \ analogous to P1 envelope\n         elements.\n      1.5.3.  The Gateway\n  \
    \       Given this functional description of the two protocols, the\n        \
    \ functional nature of a gateway can now be considered.  It would\n         be\
    \ elegant to consider the 822-P1 service mapping onto P1 and\n         RFC 822\
    \ mapping onto P2, but reality just does not fit.\n         Therefore one must\
    \ consider that P1 or P1 + P2 on one side are\n         mapped into RFC 822 +\
    \ 822-P1 on the other in a slightly tangled\n         manner.  The details of\
    \ the tangle will be made clear in\n         chapter 5.  The following basic mappings\
    \ are thus proposed.\n         When going from RFC 822 to X.400, an RFC 822 message\
    \ and the\n         associated 822-P1 information is always mapped into an IM-UAPDU\n\
    \         and the associated P1 envelope.  Going from X.400 to RFC 822,\n    \
    \     an RFC 822 message and the associated 822-P1 information may be\n      \
    \   derived from:\n            1.   A Delivery Report MPDU\n            2.   An\
    \ SR-UAPDU and the associated P1 envelope.\n            3.   An IM-UAPDU and the\
    \ associated P1 envelope.\n         Probe MPDUs must be processed by the gateway\
    \ - this is\n         discussed in chapter 5.  Any other User MPDUs are not mapped\
    \ by\n         the gateway, and should be rejected at the gateway.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   1.6.  Document Structure\n      This document\
    \ has five chapters:\n         1.   Overview - this document.\n         2.   Service\
    \ Elements - This describes the (end user) services\n              mapped by a\
    \ gateway.\n         3.   Basic mappings - This describes some basic notation\
    \ used\n              in chapters 3-5, the mappings between character sets, and\n\
    \              some fundamental protocol elements.\n         4.   Addressing -\
    \ This considers the mapping between X.400 O/R\n              names and RFC 822\
    \ addresses, which is a fundamental\n              gateway component.\n      \
    \   5.   Protocol Elements - This describes the details of all\n             \
    \ other mappings.\n      There are also six appendices:\n         A.   Quoted\
    \ String Encodings.\n         B.   Mappings Specific to JNT Mail.\n         C.\
    \   Mappings Specific to Internet Mail.\n         D.   Mappings Specific to Phonenet\
    \ Mail.\n         E.   Mappings Specific to UUCP Mail.\n         F.   Format of\
    \ Address Tables.\n   1.7.  Acknowledgements\n      This document is eclectic,\
    \ and credit should be given:\n         -    Study of the EAN X.400 system code\
    \ which performs this\n              function [Neufeld85a].  Some detailed clarification\
    \ was\n              made by the DFN report on EAN [Bonacker85a].\n         -\
    \    An unpublished ICL report, which considered a subset of\n              the\
    \ problem [ICL84a].\n         -    A document by Marshall Rose [Rose85a].\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         -    A document by Mark Horton [Horton85a].\
    \  The string\n              encodings of chapter 3 were derived directly from\
    \ this\n              work, as is much of chapter 4.\n         -    Discussion\
    \ on a number of electronic mailing lists.\n         -    Meetings in the UK and\
    \ the US.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Chapter 2 -- Service Elements
  contents:
  - "Chapter 2 -- Service Elements\n   RFC 822 and X.400 provide a number of services\
    \ to the end user.  This\n   document describes the extent to which each service\
    \ can be supported\n   across an X.400 <-> RFC 822 gateway.  The cases considered\
    \ are single\n   transfers across such a gateway, although the problems of multiple\n\
    \   crossings are noted where appropriate.\n   When a service element is described\
    \ as supported, this means that\n   when this service element is specified by\
    \ a message originator for a\n   recipient behind a gateway, that it is mapped\
    \ by the gateway to\n   provide the service implied by the element.  For example,\
    \ if an\n   RFC 822 originator specifies a Subject: field, this is considered\
    \ to\n   be supported, as an X.400 recipient will get a subject indication.\n\
    \   Support implies:\n      -    Semantic correspondence.\n      -    No loss\
    \ of information.\n      -    Any actions required by the service element.\n \
    \  For some services, the corresponding protocol elements map well, and\n   so\
    \ the service can be fully provided.  In other cases, the service\n   cannot be\
    \ provided, as there is a complete mismatch.  In the\n   remaining cases, the\
    \ service can be partially fulfilled.  The level\n   of partial support is summarised.\n\
    \      NOTE:  It should be clear that support of service elements on\n      reception\
    \ is not a gatewaying issue.  It is assumed that all\n      outbound messages\
    \ are fully conforming to the appropriate\n      standards.\n   2.1.  RFC 822\n\
    \      RFC 822 does not explicitly define service elements, as distinct\n    \
    \  from protocol elements.  However, all of the RFC 822 header\n      fields,\
    \ with the exception of trace, can be regarded as\n      corresponding to implicit\
    \ RFC 822 service elements.  A mechanism\n      of mapping used in several cases,\
    \ is to place the text of the\n      header into the body of the IP Message. \
    \ This can usually be\n      regarded as partial support, as it allows the information\
    \ to be\n      conveyed to the end user even though there is no corresponding\n\
    \      X.400 protocol element.  Support for the various service elements\n   \
    \   (headers) is now listed.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Date:\n            Supported.\n \
    \        From:\n            Supported.  For messages where there is also a sender\
    \ field,\n            the mapping is to \"Authorising Addresses\", which has subtly\n\
    \            different semantics to the general RFC 822 usage of From:.\n    \
    \     Sender:\n            Supported.\n         Reply-To:\n            Supported.\n\
    \         To:\n            Supported.\n         Cc:\n            Supported.\n\
    \         Bcc:\n            Supported.\n         Message-Id:\n            Supported.\n\
    \         In-Reply-To:\n            Supported, for a single reference in msg-id\
    \ form.  Other\n            cases are passed in the message text.\n         References:\n\
    \            Supported.\n         Keywords:\n            Passed in the message\
    \ text.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Subject:\n            Supported.\n\
    \         Comments:\n            Passed in the message text.\n         Encrypted:\n\
    \            Passed in the message text.  This may not be very useful.\n     \
    \    Resent-*\n            Passed in the message text.  In principle, these could\
    \ be\n            supported in a fuller manner, but this is not suggested.\n \
    \        Other Fields\n            In particular X-* fields, and \"illegal\" fields\
    \ in common\n            usage (e.g. \"Fruit-of-the-day:\") are passed in the\
    \ message\n            text.\n   2.2.  X.400\n      When mapping from X.400 to\
    \ RFC 822, it is not proposed to map any\n      elements into the body of an RFC\
    \ 822 message.  Rather, new RFC 822\n      headers are defined.  It is intended\
    \ that these fields will be\n      registered, and that co-operating RFC 822 systems\
    \ may use them.\n      Where these new fields are used, and no system action is\
    \ implied,\n      the service can be regarded as being almost supported.  Chapter\
    \ 5\n      describes how to map these new headers in both directions.  Other\n\
    \      elements are provided, in part, by the gateway as they cannot be\n    \
    \  provided by RFC 822.  Some service elements are are marked N/A\n      (not\
    \ applicable).  These elements are only applicable to User\n      Agent / Message\
    \ Transfer Agent interaction and have no end-to-end\n      implication. These\
    \ elements do not need to be mapped by the\n      gateway.\n      2.2.1.  Message\
    \ Transfer Service Elements\n         Access Management\n            N/A.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Content Type Indication\n       \
    \     Not mapped.  As it can only have one value (P2), there is\n            little\
    \ use in creating a new RFC 822 header field, unless it\n            was to distinguish\
    \ delivery reports.\n         Converted Indication\n            Supported by a\
    \ new RFC 822 header.\n         Delivery Time Stamp Indication\n            N/A.\n\
    \         Message Identification\n            Supported, by use of a new RFC 822\
    \ header.  This new header\n            is required, as X.400 has two message-ids\
    \ whereas RFC 822\n            has only one.\n         Non-delivery Notification\n\
    \            Not supported, although in general an RFC 822 system will\n     \
    \       return errors as IP messages.  In other elements, this\n            pragmatic\
    \ result is treated as effective support of this\n            service element.\n\
    \         Original Encoded Information Types Indication\n            Supported\
    \ as a new RFC 822 header.\n         Registered Encoded Information Types\n  \
    \          N/A.\n         Submission Time Stamp Indication\n            Supported.\n\
    \         Alternate Recipient Allowed\n            Not supported.  Any value is\
    \ ignored by the gateway.\n         Deferred Delivery\n            Support is\
    \ optional.  The framework is provided so that\n            messages may be held\
    \ at the gateway.  However, a gateway\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            following this specification does\
    \ not have to do this.  This\n            is in line with the emerging functional\
    \ standards.\n         Deferred Delivery Cancellation\n            Supported.\n\
    \         Delivery Notification\n            Supported at gateway.  Thus, a notification\
    \ is sent by the\n            gateway to the originator  <2>.\n         Disclosure\
    \ of Other Recipients\n            Supported by use of a new RFC 822 header.\n\
    \         Grade of Delivery Selection\n            Supported as a new RFC 822\
    \ header.  In general, this will\n            only be for user information in\
    \ the RFC 822 world.\n         Multi-Destination Delivery\n            Supported.\n\
    \         Prevention of Non-delivery Notification\n            Not Supported,\
    \ as there is no control in the RFC 822 world\n            (but see Non-delivery\
    \ Notification).\n         Return of Contents\n            This is normally the\
    \ case, although the user has no control\n            (but see Non-delivery Notification).\n\
    \         Conversion Prohibition\n            Supported.  Note that in practice\
    \ this support is restricted\n            by the nature of the gateway.\n    \
    \     Explicit Conversion\n            Supported, for appropriate values (See\
    \ the IPMS Typed Body\n            service element).\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Implicit Conversion\n           \
    \ Supported, in the sense that there will be implicit\n            conversion\
    \ to IA5 in cases where this is practical.\n         Probe\n            Supported\
    \ at the gateway (i.e. the gateway services the\n            probe).\n       \
    \  Alternate Recipient Assignment\n            N/A.\n         Hold for Delivery\n\
    \            N/A.\n      2.2.2.  Interpersonal Message Service Elements\n    \
    \     IP-message Identification\n            Supported.\n         Typed Body\n\
    \            Supported.  IA5 is fully supported.  ForwardedIPMessage is\n    \
    \        supported, with some loss of information.  A subset of TTX\n        \
    \    is supported (see section 5 for the specification of this\n            subset),\
    \ with some loss of information.  SFD may be\n            supported, with some\
    \ loss of information.  TTX and SFD are\n            only supported when conversion\
    \ is allowed.  Other types are\n            not supported.\n         Blind Copy\
    \ Recipient Indication\n            Supported.\n         Non-receipt Notification\n\
    \            Not supported.\n         Receipt Notification\n            Not supported.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Auto-forwarded Indication\n     \
    \       Supported as new RFC 822 header.\n         Originator Indication\n   \
    \         Supported.\n         Authorising User's Indication\n            Supported,\
    \ although the mapping (From:) is not quite the\n            same.\n         Primary\
    \ and Copy Recipients Indication\n            Supported.\n         Expiry Date\
    \ Indication\n            Supported as new RFC 822 header.  In general, only human\n\
    \            action can be expected.\n         Cross Referencing Indication\n\
    \            Supported.\n         Importance Indication\n            Supported\
    \ as new RFC 822 header.\n         Obsoleting Indication\n            Supported\
    \ as new RFC 822 header.\n         Sensitivity Indication\n            Supported\
    \ as new RFC 822 header.\n         Subject Indication\n            Supported.\n\
    \         Reply Request Indication\n            Supported as comment next to address.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Forwarded IP-message Indication\n\
    \            Supported, with some loss of information.\n         Body Part Encryption\
    \ Indication\n            Not supported.\n         Multi-part Body\n         \
    \   Supported, with some loss of information, in that the\n            structuring\
    \ cannot be formalised in RFC 822.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Chapter 3 -- Basic Mappings
  contents:
  - "Chapter 3 -- Basic Mappings\n   3.1.  Notation\n      The P1 and P2 protocols\
    \ are encoded in a structured manner\n      according to the X.409 specifications,\
    \ whereas RFC 822 is text\n      encoded.  To define a detailed mapping, it is\
    \ necessary to refer\n      to detailed protocol elements in each format.  This\
    \ is described.\n      3.1.4.  RFC 822\n         Structured text is defined according\
    \ to the Extended Backus\n         Naur Form (EBNF) defined in section 2 of RFC\
    \ 822 [Crocker82a].\n         In the EBNF definitions used in this specification,\
    \ the syntax\n         rules given in Appendix D of RFC 822 are assumed.  When\
    \ these\n         EBNF tokens are referred to outside an EBNF definition, they\n\
    \         are identified by the string \"882.\" appended to the beginning\n  \
    \       of the string (e.g. 822.addr-spec).  Additional syntax rules,\n      \
    \   to be used throughout this specification are defined in this\n         chapter.\n\
    \         The EBNF is used in two ways.\n            1.   To describe components\
    \ of RFC 822 messages (or of\n                 822-P1 components).  In this case,\
    \ the lexical analysis\n                 defined in section 3 of RFC 822 should\
    \ be used.  When\n                 these new EBNF tokens are referred to outside\
    \ an EBNF\n                 definition, they are identified by the string \"EBNF.\"\
    \n                 appended to the beginning of the string (e.g.\n           \
    \      EBNF.bilateral-info).\n            2.   To describe the structure of IA5\
    \ or ASCII information\n                 not in an RFC 822 message.  In these\
    \ cases, tokens will\n                 either be self delimiting, or be delimited\
    \ by self\n                 delimiting tokens.  Comments and LWSP are not used\
    \ as\n                 delimiters.\n      3.1.5.  X.409\n         An element is\
    \ referred to with the following syntax, defined in\n         EBNF:\n        \
    \    element        = protocol \".\" definition *( \".\" definition )\n      \
    \      protocol       = \"P1\" / \"P2\"\n            definition     = identifier\
    \ / context\n            identifier     = ALPHA *< ALPHA or DIGIT or \"-\" >\n\
    \            context        = \"[\" 1*DIGIT \"]\"\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         For example, P2.Heading.subject defines\
    \ the subject element of\n         the P2 heading.  The same syntax is also used\
    \ to refer to\n         element values. For example,\n         P1.EncodedInformationTypes.[0].g3Fax\
    \ refers to a value of\n         P1.EncodedInformationTypes.[0] .\n   3.2.  ASCII\
    \ and IA5\n      A gateway will interpret all IA5 as ASCII.  Thus, they are treated\n\
    \      identically for the rest of this document.\n   3.3.  Universal Primitives\n\
    \      There is a need to convert between ASCII text, and some of the\n      Universal\
    \ Primitive types defined in X.409 [CCITT84d].  For each\n      case, an EBNF\
    \ syntax definition is given, for use in all of this\n      specification.  All\
    \ EBNF syntax definitions of Universal\n      Primitives are in lower case, whereas\
    \ X.409 primitives are\n      referred to with the first letter in upper case.\
    \  Except as noted,\n      all mappings are symmetrical.\n      3.3.1.  Boolean\n\
    \         Boolean is encoded as:\n            boolean = \"TRUE\" / \"FALSE\"\n\
    \      3.3.2.  NumericString\n         NumericString is encoded as:\n        \
    \    numericstring = *DIGIT\n      3.3.3.  PrintableString\n         PrintableString\
    \ is a restricted IA5String defined as:\n            printablestring  = *( ps-char\
    \ / ps-delim )\n            ps-char          = 1DIGIT /  1ALPHA / \" \" / \"'\"\
    \ / \"+\" / \")\"\n                               / \",\" / \"-\" / \".\" / \"\
    /\" / \":\" / \"=\" / \"?\"\n            ps-delim         = \"(\"\n         A\
    \ structured subset of EBNF.printablestring is now defined.\n         This can\
    \ be used to encode ASCII in the PrintableString\n         character set.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            ps-encoded       = *( ps-char\
    \ / ps-encoded-char )\n            ps-encoded-char  =   \"(a)\"              \
    \ ; (@)\n                               / \"(p)\"               ; (%)\n      \
    \                         / \"(b)\"               ; (!)\n                    \
    \           / \"(q)\"               ; (\")\n                               / \"\
    (u)\"               ; (_)\n                               / \"(\" 3DIGIT \")\"\
    \n         The 822.3DIGIT in EBNF.ps-encoded-char must have range 0-127\n    \
    \     (Decimal), and is interpreted in decimal as the corresponding\n        \
    \ ASCII character. Special encodings are given for: at sign (@),\n         percent\
    \ (%), exclamation mark/bang (!), double quote (\"), and\n         underscore\
    \ (_).  These characters are not included in\n         PrintableString, but are\
    \ common in RFC 822 addresses.  The\n         abbreviations will ease specification\
    \ of RFC 822 addresses from\n         an X.400 system.\n         An asymmetric\
    \ mapping between PrintableString and ASCII can now\n         be defined <3>.\
    \  To encode ASCII as PrintableString, the\n         EBNF.ps-encoded syntax is\
    \ used, with all EBNF.ps-char AND\n         EBNF.ps-delim mapped directly <4>.\
    \  All other 822.CHAR are\n         encoded as EBNF.ps-encoded-char. There are\
    \ two cases of\n         encoding PrintableString as ASCII.  If the PrintableString\
    \ can\n         be parsed as EBNF.ps-encoded, then the previous mapping should\n\
    \         be reversed.  If not, it should be interpreted as\n         EBNF.printablestring.\n\
    \         Some examples are now given.  Note the arrows which indicate\n     \
    \    asymmetrical mappings:\n            PrintableString           ASCII\n   \
    \         'a demo.'         <->   'a demo.'\n            foo(a)bar         <->\
    \   foo@bar\n            (q)(u)(p)(q)      <->   \"_%\"\n            (a)     \
    \          <->   @\n            (a)               <-    (a)\n            (040)a(041)\
    \       ->    (a)\n            (040)(a)          ->    (@\n            ((a)  \
    \            <-    (@\n         The algorithm is designed so that it is simple\
    \ to use in all\n         common cases, so that it is general, and so that it\
    \ is\n         straightforward to code.  It is not attempting to minimise the\n\
    \         number of pathological cases.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      3.3.4.  T.61String\n         T.61 strings\
    \ are, in general, only used for conveying human\n         interpreted information.\
    \  Thus, the aim of a mapping should be\n         to render the characters appropriately\
    \ in the remote character\n         set, rather than to maximise reversibility.\
    \  The mappings\n         defined in the CEN/CENELEC X.400 functional standard\
    \ should be\n         used [CEN/CENELEC/85a].  These are based on the mappings\
    \ of\n         X.408 (sections 4.2.2 and 5.2.2).\n      3.3.5.  UTCTime\n    \
    \     Both UTCTime and the RFC 822 822.date-time syntax contain: Year\n      \
    \   (lowest two digits), Month, Day of Month, hour, minute, second\n         (optional),\
    \ and Timezone.  822.date-time also contains an\n         optional day of the\
    \ week, but this is redundant.  Therefore a\n         symmetrical mapping can\
    \ be made between these constructs <5>.\n         The UTCTime format which specifies\
    \ the timezone offset should\n         be used, in line with CEN/CENELEC recommendations.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Chapter 4 -- Addressing
  contents:
  - "Chapter 4 -- Addressing\n   Addressing is probably the trickiest problem of an\
    \ X.400 <-> RFC 822\n   gateway.  Therefore it is given a separate chapter.  This\
    \ chapter, as\n   a side effect, also defines a standard textual representation\
    \ of\n   X.400 addresses.\n   Initially we consider an address in the (human)\
    \ mail user sense of\n   \"what is typed at the mailsystem to reference a human\"\
    .  A basic\n   RFC 822 address is defined by the EBNF EBNF.822-address:\n    \
    \  822-address     = [ route ] addr-spec\n   In an 822-P1 protocol, the originator\
    \ and each recipient should be\n   considered to be defined by such a construct.\
    \  In an RFC 822 header,\n   the EBNF.822-address is encapsulated in the 822.address\
    \ syntax rule,\n   and there may also be associated comments.  None of this extra\n\
    \   information has any semantics, other than to the end user.\n   The basic X.400\
    \ address is defined by P1.ORName.  In P1 all recipient\n   P1.ORnames are encapsulated\
    \ within P1.RecipientInfo, and in P2 all\n   P2.ORNames <6> are encapsulated within\
    \ P2.ORDescriptor.\n   It can be seen that RFC 822 822.address must be mapped\
    \ with\n   P2.ORDescriptor, and that RFC 822 EBNF.822-address must be mapped\n\
    \   with P1.ORName (originator) and P1.RecipientInfo (recipients).\n   This chapter\
    \ is structured as follows:\n      4.1  Introduction.\n      4.2  A textual representation\
    \ of P1.ORName.  This is needed for\n           the later mappings, and as a side\
    \ effect provides a standard\n           representation for O/R names.\n     \
    \ 4.3  Mapping between EBNF.822-address and P1.ORName\n      4.4  The Full P1\
    \ / 822-P1 Mapping\n      4.5  The Full P2 / RFC 822 Mapping\n      4.6  Mapping\
    \ Message-IDs.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   4.1.  A textual representation of P1.ORName.\n\
    \      P1.ORName is structured as a set of attribute value pairs.  It is\n   \
    \   clearly necessary to be able to encode this in ASCII for\n      gatewaying\
    \ purposes.  A general encoding is given here, which may\n      be used as a basis\
    \ for a user interface, as well as for the\n      defined gateway mapping.\n \
    \     4.1.1.  Basic Representation\n         A series of BNF definitions of each\
    \ possible attribute value\n         pair is given, which is given a 1:1 mapping\
    \ with the X.400\n         encoding.  The rest of the mapping then talks in terms\
    \ of these\n         BNF components, with the mapping to X.400 encoding being\n\
    \         trivial.\n         attributevalue = c / admd / prmd / x121 / t-id /\
    \ o / ou\n                         / ua-id / pn.g / pn.i / pn.s / pn.gq / dd.value\n\
    \         c        = printablestring       ; P1.CountryName\n         admd   \
    \  = printablestring       ; P1.AdministrationDomainName\n         prmd     =\
    \ printablestring       ; P1.PrivateDomainName\n         x121     = numericstring\
    \         ; P1.X121Address\n         t-id     = numericstring         ; P1.TerminalID\n\
    \         o        = printablestring       ; P1.OrganisationName\n         ou\
    \       = printablestring       ; P1.OrganisationalUnit\n         ua-id    = numericstring\
    \         ; P1.UniqueUAIdentifier\n         pn.s     = printablestring       ;\
    \ P1.PersonalName.surName\n         pn.g     = printablestring       ; P1.PersonalName.givenName\n\
    \         pn.i     = printablestring       ; P1.PersonalName.initials\n      \
    \   pn.gq    = printablestring       ; P1.PersonalName.generation\n          \
    \                                  Qualifier\n         dd.value = printablestring\
    \       ; P1.DomainDefined\n                                            Attribute.value\n\
    \         In cases where an attribute can be encoded as either a\n         PrintableString\
    \ or NumericString (Country, ADMD, PRMD) it is\n         assumed that the NumericString\
    \ encoding will be adopted if\n         possible.  This prevents the encoding\
    \ of PrintableString where\n         the characters are all numbers. This restriction\
    \ seems\n         preferable to the added complexity of a general solution.\n\
    \         Similarly, we can define a set of attribute types.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         dd.type = printablestring      ;\
    \ P1.DomainDefinedAttribute.type\n         standard-type =\n                 \
    \  \"C\"           ; P1.CountryName\n                 / \"ADMD\"        ; P1.AdministrationDomainName\n\
    \                 / \"PRMD\"        ; P1.PrivateDomainName\n                 /\
    \ \"X121\"        ; P1.X121Address\n                 / \"T-ID\"        ; P1.TerminalID\n\
    \                 / \"O\"           ; P1.OrganisationName\n                 /\
    \ \"OU\"          ; P1.OrganisationalUnit\n                 / \"UA-ID\"      \
    \ ; P1.UniqueUAIdentifier\n                 / \"S\"           ; P1.PersonalName.surName\n\
    \                 / \"G\"           ; P1.PersonalName.givenName\n            \
    \     / \"I\"           ; P1.PersonalName.initials\n                 / \"GQ\"\
    \          ; P1.PersonalName.generationQualifier\n         standard-dd-type =\n\
    \                   \"RFC-822\"     ; dd.type = \"RFC-822\"\n                \
    \ / \"JNT-Mail\"    ; dd.type = \"JNT-Mail\"\n                 / \"UUCP\"    \
    \    ; dd.type = \"UUCP\"\n      4.1.2.  Encoding of Personal Name\n         Handling\
    \ of Personal Name based purely on the\n         EBNF.standard-type syntax defined\
    \ above is likely to be clumsy.\n         It seems desirable to utilise the \"\
    human\" conventions for\n         encoding these components.  A syntax is proposed\
    \ here.  It is\n         designed to cope with the common cases of O/R Name\n\
    \         specification where:\n            1.   There is no generational qualifier\n\
    \            2.   Initials contain only letters <7>.\n            3.   Given Name\
    \ does not contain full stop (\".\"), and is at\n                 least two characters\
    \ long.\n            4.   If Surname contains full stop, then it may not be in\n\
    \                 the first two characters, and either initials or given\n   \
    \              name is present.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         The following EBNF is defined:\n\
    \            encoded-pn      = [ given \".\" ] *( initial \".\" ) surname\n  \
    \          given           = 2*<ps-char not including \".\">\n            initial\
    \         = ALPHA\n            surname         = printablestring\n         Subject\
    \ to the above restriction, this is a reversible mapping.\n         For example:\n\
    \            GivenName       = \"Marshall\"\n            Surname         = \"\
    Rose\"\n            Maps with  \"Marshall.Rose\"\n            Initials       \
    \ = \"MT\"\n            Surname         = \"Rose\"\n            Maps with  \"\
    M.T.Rose\"\n            GivenName       = \"Marshall\"\n            Initials \
    \       = \"MT\"\n            Surname         = \"Rose\"\n            Maps with\
    \  \"Marshall.M.T.Rose\"\n         Note that CCITT guidelines suggest that Initials\
    \ is used to\n         encode ALL initials.  Therefore, the proposed encoding\
    \ is\n         \"natural\" when either GivenName or Initials, but not both, are\n\
    \         present.  The case where both are present can be encoded, but\n    \
    \     this appears to be contrived!\n      4.1.3.  Two encodings of P1.ORName\n\
    \         Given this structure, we can specify a BNF representation of an\n  \
    \       O/R Name.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            std-orname      = 1*( \"/\" attribute\
    \ \"=\" value ) \"/\"\n            attribute       = standard-type\n         \
    \                   / \"PN\"\n                            / standard-dd-type\n\
    \                            / registered-dd-type\n                          \
    \  / \"DD.\" std-printablestring\n            value           = std-printablestring\n\
    \            registered-dd-type\n                            = std-printablestring\n\
    \            std-printablestring =\n                            = *( std-char\
    \ / std-pair )\n            std-char        = <ps-delim, and any ps-char except\
    \ \"/\"\n                              and \"=\">\n            std-pair      \
    \  = \"$\" ( ps-delim / ps-char )\n         If the type is PN, the value is interpreted\
    \ according to\n         EBNF.encoded-pn, and the components of P1.PersonalName\
    \ derived\n         accordingly.  If the value is registered-dd-type, if the value\n\
    \         is registered at the SRI NIC as an accepted Domain Defined\n       \
    \  Attribute type, then the value should be interpreted\n         accordingly.\
    \  This restriction maximises the syntax checking\n         which can be done\
    \ at a gateway.\n         Another syntax is now defined.  This is intended to\
    \ be\n         compatible with the syntax used for 822.domains.  This syntax\n\
    \         is not intended to be handled by users.\n            dmn-orname    \
    \  = dmn-part *( \".\" dmn-part )\n            dmn-part        = attribute \"\
    $\" value\n            attribute       = standard-type\n                     \
    \       / \"~\" dmn-printablestring\n            value           = dmn-printablestring\n\
    \            dmn-printablestring =\n                            = *( dmn-char\
    \ / dmn-pair )\n            dmn-char        = <ps-delim, and any ps-char except\
    \ \".\">\n            dmn-pair        = \"\\.\"\n         For example: C$US.ADMD$ATT.~ROLE$Big\\\
    .Chief\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   4.2.  Mapping between EBNF.822-address\
    \ and P1.ORName\n      Ideally, the mapping specified would be entirely symmetrical\
    \ and\n      global, to enable addresses to be referred to transparently in the\n\
    \      remote system, with the choice of gateway being left to the\n      Message\
    \ Transfer Service.  There are two fundamental reasons why\n      this is not\
    \ possible:\n         1.   The syntaxes are sufficiently different to make this\n\
    \              awkward.\n         2.   In the general case, there would not be\
    \ the necessary\n              administrative co-operation between the X.400 and\
    \ RFC 822\n              worlds, which would be needed for this to work.\n   \
    \   Therefore, an asymmetrical mapping is defined.\n      4.2.1.  X.400 encoded\
    \ in RFC 822\n         The std-orname syntax is  used to encode O/R Name information\n\
    \         in the 822.local-part of EBNF.822-address.  Further  O/R Name\n    \
    \     information may be associated with the 822.domain component.\n         This\
    \ cannot be used in the general case, basically due to\n         character set\
    \ problems, and lack of order in X.400 O/R Names.\n         The only way to encode\
    \ the full PrintableString character set\n         in a domain is by use of the\
    \ 822.domain-ref syntax.  This is\n         likely to cause problems on many systems.\
    \  The effective\n         character set of domains is in practice reduced from\
    \ the\n         RFC 822 set, by restrictions imposed by domain conventions and\n\
    \         policy.\n         A generic 822.address consists of a 822.local-part\
    \ and a\n         sequence of 822.domains (e.g.\n         <@domain1,@domain2:user@domain3>).\
    \  All except the 822.domain\n         associated with the 822.local-part (domain3\
    \ in this case)\n         should be considered to specify routing within the RFC\
    \ 822\n         world, and will not be interpreted by the gateway (although\n\
    \         they may have identified the gateway from within the RFC 822\n     \
    \    world).  The 822.domain associated with the 822.local-part may\n        \
    \ also identify the gateway from within the RFC 822 world.  This\n         final\
    \ 822.domain may be used to determine some number of O/R\n         Name attributes.\
    \  The following O/R Name attributes are\n         considered as a hierarchy,\
    \ and may be specified by the domain.\n         They are (in order of hierarchy):\n\
    \            Country, ADMD, PRMD, Organisation, Organisational Unit\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         There may be multiple Organisational\
    \ Units.\n         Associations may be defined between domain specifications,\
    \ and\n         some set of attributes.  This association proceeds\n         hierarchically:\
    \ i.e. if a domain implies ADMD, it also implies\n         country.  If one of\
    \ the hierarchical components is omitted from\n         an X.400 structure, this\
    \ information can be associated with the\n         corresponding domain (e.g.\
    \ a domain can be mapped onto a\n         Country/ADMD/Organisation tuple). Subdomains\
    \ under this are\n         associated according to the O/R Name hierarchy.  For\
    \ example:\n            => \"AC.UK\" might be associated with\n              \
    \                            C=\"234\", ADMD=\"BT\", PRMD=\"DES\"\n          \
    \  then domain \"R-D.Salford.AC.UK\" maps with\n                   C=\"234\",\
    \ ADMD=\"BT\", PRMD=\"DES\", O=\"Salford\", OU=\"R-D\"\n         There are two\
    \ basic reasons why a domain/attribute mapping\n         might be maintained,\
    \ as opposed to using simply subdomains:\n            1.   As a shorthand to avoid\
    \ redundant X.400 information.\n                 In particular, there will often\
    \ be only one ADMD per\n                 country, and so it does not need to be\
    \ given\n                 explicitly.\n            2.   To deal with cases where\
    \ attribute values do not fit\n                 the syntax:\n               domain-syntax\
    \   = ALPHA [ *alphanumhyphen alphanum ]\n               alphanum        = <ALPHA\
    \ or DIGIT>\n               alphanumhyphen  = <ALPHA or DIGIT or HYPHEN>\n   \
    \      Although RFC 822 allows for a more general syntax, this\n         restriced\
    \ syntax is chosen as it is the one chosen by the\n         various domain service\
    \ administrations.\n         This provides a general aliasing mechanism.\n   \
    \      This set of mappings need only be known by the gateways\n         relaying\
    \ between the RFC 822 world, and the O/R Name namespace\n         associated with\
    \ the mapping in question.  However, it is\n         desirable (for the optimal\
    \ mapping of third party addresses)\n         for all gateways to know these mappings.\
    \  A format for the\n         exchange of this information is defined in Appendix\
    \ F.\n         From the standpoint of the RFC 822 Message Transfer System, the\n\
    \         domain specification is simply used to route the message in the\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         standard manner.  The standard domain\
    \ mechanisms are used to\n         identify gateways, and are used to select appropriate\
    \ gateways\n         for the corresponding O/R Name namespace.  In most cases,\
    \ this\n         will be done by registering the higher levels, and assuming\n\
    \         that the gateway can handle the lower levels.\n         As a further\
    \ mechanism to simplify the encoding of common\n         cases, where the only\
    \ attributes to be encoded on the LHS are\n         Personal Name attributes which\
    \ comply with the restrictions of\n         4.2.2, the 822.local-part may be encoded\
    \ as EBNF.encoded-pn.\n         An example encoding is:\n            /PN=J.Linnimouth/GQ=5/@Marketing.Xerox.COM\n\
    \            encodes the P1.ORName consisting of\n               P1.CountryName\
    \                  = \"US\"\n               P1.AdministrationDomainName     =\
    \ \"ATT\"\n               P1.OrganisationName             = \"Xerox\"\n      \
    \         P1.OrganisationalUnit           = \"Marketing\"\n               P1.PersonalName.surName\
    \         = \"Linnimouth\"\n               P1.PersonalName.initials        = \"\
    J\"\n               P1.PersonalName.GenerationQualifier = \"5\"\n            If\
    \ the GenerationQualifier was not present, the encoding\n            J.Linnimouth@Marketing.Xerox.COM\
    \ could be used.\n         Note that in this example, the first three attributes\
    \ are\n         determined by the domain Xerox.COM.  The OrganisationalUnit is\n\
    \         determined systematically.\n         There has been an implicit assumption\
    \ that an RFC 822 domain is\n         either X.400 or RFC 822.  This is pragmatic,\
    \ but undesirable,\n         as the namespace should be structured on a logical\
    \ basis which\n         does not necessarily correspond to the choice of Message\n\
    \         Transfer protocols. The restriction can be lifted, provided\n      \
    \   that the nameservice deals with multiple message transfer\n         protocols.\
    \  This can happen in a straightforward manner for the\n         UK NRS, as explained\
    \ in [Kille86a].  It could also be achieved\n         with the DARPA Domain Nameserver\
    \ scheme by use of the WKS\n         mechanism.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      4.2.2.  RFC 822 Encoded in X.400\n \
    \        In some cases, the encoding defined above may be reversed, to\n     \
    \    give a \"natural\" encoding of genuine RFC 822 addresses.  This\n       \
    \  depends largely on the allocation of appropriate management\n         domains.\n\
    \         The general case is mapped by use of domain defined attributes.\n  \
    \       Three are defined, according to the full environment used to\n       \
    \  interpret the RFC 822 information.\n            1.   Domain defined type \"\
    RFC-822\".  This string is to be\n                 interpreted in the context\
    \ of RFC 822, and RFC 920\n                 [Crocker82a,Postel84a].\n        \
    \    2.   Domain defined type \"JNT-Mail\".  This string is to be\n          \
    \       interpreted in the context of the JNT Mail protocol,\n               \
    \  and the NRS [Kille84a,Larmouth83a].\n            3.   Domain defined type \"\
    UUCP\".  This is interpreted\n                 according to the constraints of\
    \ the UUCP world\n                 [Horton86a].\n         These three are values\
    \ currently known to be of use.  Further\n         recognised values may be defined.\
    \  These will be maintained in\n         a list at the SRI Network Information\
    \ Center.\n         Other O/R Name attributes will be used to identify a context\
    \ in\n         which the O/R Name will be interpreted.  This might be a\n    \
    \     Management Domain, or some part of a Management Domain which\n         identifies\
    \ a gateway MTA.  For example:\n            1)\n            C               =\
    \ \"GB\"\n            ADMD            = \"BT\"\n            PRMD            =\
    \ \"AC\"\n            \"JNT-Mail\"      = \"Jimmy(a)UK.CO.BT-RESEARCH-LABS\"\n\
    \            2)\n            C               = \"US\"\n            ADMD      \
    \      = \"Telemail\"\n            PRMD            = \"San Fransisco\"\n     \
    \       O               = \"U Cal\"\n            OU              = \"Berkeley\"\
    \n            \"RFC-822\"       = \"postel(a)usc-isib.arpa\"\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Note in each case the PrintableString\
    \ encoding of \"@\" as \"(a)\".\n         In the first example, the \"JNT-Mail\"\
    \ domain defined attribute\n         is interpreted everywhere within the (Administrative\
    \ or\n         Private) Management Domain.  In the second example, further\n \
    \        attributes are needed within the Management Domain to identify\n    \
    \     a gateway.  Thus, this scheme can be used with varying levels\n        \
    \ of Management Domain co-operation.\n      4.2.3.  RFC 822 -> X.400\n       \
    \  There are two basic cases:\n            1.   X.400 addresses encoded in RFC\
    \ 822.  This will also\n                 include RFC 822 addresses which are given\
    \ reversible\n                 encodings.\n            2.   \"Genuine\" RFC 822\
    \ addresses.\n         The mapping should proceed as follows, by first assuming\
    \ case\n         1).\n         STAGE 1.\n            1.   If the 822-address is\
    \ not of the form:\n               local-part \"@\" domain\n               go\
    \ to stage 2.\n            2.   Attempt to parse domain as:\n               *(\
    \ domain-syntax \".\" ) known-domain\n               Where known-domain is the\
    \ longest possible match in a\n               list of gatewayed domains.  If this\
    \ fails, and the domain\n               does not explicitly identify the local\
    \ gateway, go to\n               stage 2.  If it succeeds, allocate the attributes\n\
    \               associated with EBNF.known-domain, and systematically\n      \
    \         allocate the attributes implied by each\n               EBNF.domain-syntax\
    \ component.\n            3.   Map 822.local-part to ASCII, according to the\n\
    \                 definition of Appendix A.  This step should be applied:\n  \
    \             A.  If the source network cannot support\n                   822.quoted-string\
    \ (as discussed in Appendix A).\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n               B.  If the address is an 822-P1\
    \ recipient.\n                  This mapping is always applied in case B, as it\n\
    \                  increases the functionality of the gateway, and does\n    \
    \              not imply any loss of generality.  Mapping case B\n           \
    \       allows sites which cannot generate 822.quoted-string\n               \
    \   to address recipients the gateway, without the gateway\n                 \
    \ having to know this explicitly.  There is no loss of\n                  functionality,\
    \ as the quoting character of Appendix A\n                  (#) is not in PrintableString.\
    \  This seems desirable.\n                  It should not be applied in to other\
    \ addresses, as a\n                  third party RFC#822 address containing the\
    \ sequence\n                  EBNF.atom-encoded (as defined in Appendix A) would\
    \ be\n                  transformed asymmetrically.\n            4.   Map the\
    \ result of 3) to EBNF.ps-encoded according to\n                 section 3.\n\
    \            5.   Parse the result of 4) according to the EBNF\n             \
    \    EBNF.std-orname.  If this parse fails, parse the result\n               \
    \  of 4) according to the EBNF EBNF.encoded-pn.  If this\n                 also\
    \ fails, go to stage 2.  Otherwise, the result is a\n                 set of type/value\
    \ pairs.\n            6.   Associate the EBNF.attribute-value syntax (determined\n\
    \                 from the identified type) with each value, and check\n     \
    \            that it conforms.  If not, go to stage 2.\n            7.   Ensure\
    \ that the set of attributes conforms both to the\n                 X.411 P1.ORName\
    \ specification and to the restrictions\n                 on this set given in\
    \ X.400.  If not go to stage 2.\n            8.   Build the O/R Name from this\
    \ information.\n         STAGE 2.\n         This will only be reached if the RFC\
    \ 822 EBNF.822-address is\n         not a valid X.400 encoding.  If the address\
    \ is an 822-P1\n         recipient address, it must be rejected, as there is a\
    \ need to\n         interpret such an address in X.400.  For the 822-P1 return\n\
    \         address, and any addresses in the RFC 822 header, they should\n    \
    \     now be encoded as RFC 822 addresses in an X.400 O/R Name:\n            1.\
    \   Convert the EBNF.822-address to PrintableString, as\n                 specified\
    \ in chapter 3.\n            2.   The domain defined attribute (\"RFC-822\", \"\
    JNT-Mail\" or\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n                 \"UUCP\") appropriate to\
    \ the gateway should be selected,\n                 and its value set.\n     \
    \       3.   Build the rest of the O/R Name in the local Management\n        \
    \         Domain agreed manner, so that the O/R Name will receive\n          \
    \       a correct global interpretation.\n      4.2.4.  X.400 -> RFC 822\n   \
    \      There are two basic cases:\n            1.   RFC 822 addresses encoded\
    \ in X.400.\n            2.   \"Genuine\" X.400 addresses.  This may include\n\
    \                 symmetrically encoded RFC 822 addresses.\n         When a P1\
    \ Recipient O/R Name is interpreted, gatewaying will be\n         selected if\
    \ there a single special domain defined attribute\n         present (\"RFC-822\"\
    , \"JNT-Mail\" or \"UUCP\").  In this case, use\n         mapping A.  For other\
    \ O/R Names which\n            1.   Contain the special attribute.\n         \
    \      AND\n            2.   Identify the local gateway with the other attributes.\n\
    \         Use mapping A.  In other cases, use mapping B.\n         Mapping A\n\
    \            1.   Map the domain defined attribute value to ASCII, as\n      \
    \           defined in chapter 3.\n            2.   Where appropriate (P1 recipients),\
    \ interpret the string\n                 according to the semantics implied by\
    \ the domain\n                 defined attribute.\n         Mapping B.\n     \
    \    This will be used for X.400 addresses which do not use the\n         explicit\
    \ RFC 822 encoding.\n            1.   Noting the hierarchy specified in 4.3.1,\
    \ determine the\n                 maximum set of attributes which have an associated\n\
    \                 domain specification. If no match is found, allocate\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n                 the domain as the domain\
    \ specification of the local\n                 gateway, and go to step 4.\n  \
    \          2.   Following the 4.3.1 hierarchy, if each successive\n          \
    \       component exists, and conforms to the syntax\n                 EBNF.domain-syntax\
    \ (as defined in 4.3.1), allocate the\n                 next subdomain.\n    \
    \        3.   If the remaining components are personal-name\n                \
    \ components, conforming to the restrictions of 4.2.2,\n                 then\
    \ EBNF.encoded-pn should be derived to form\n                 822.local-part.\
    \  In other cases the remaining\n                 components should simply be\
    \ encoded as a 822.local-part\n                 using the EBNF.std-orname syntax.\
    \  Where registered\n                 domain defined types exist, the DD. syntax\
    \ should not\n                 be used.\n            4.   If this step is reached\
    \ for an 822-P1 recipient, then\n                 the address is invalid.  For\
    \ other addresses, if the\n                 derived 822.local-part can only be\
    \ encoded by use of\n                 822.quoted-string, the gateway may optionally\
    \ use the\n                 ASCII to 822.local-part mapping defined in Appendix\
    \ A,\n                 dependent on the mail protocols of the networks being\n\
    \                 relayed to.  Use of this encoding is discouraged.\n   4.3. \
    \ Repeated Mappings\n      The mappings defined are symmetrical across a single\
    \ gateway,\n      except in certain pathological cases (see chapter 3).  However,\
    \ it\n      is always possible to specify any valid address across a gateway.\n\
    \      This symmetry is particularly useful in cases of (mail exploder\n     \
    \ type) distribution list expansion.  For example, an X.400 user\n      sends\
    \ to a list on an RFC 822 system which he belongs to.  The\n      received message\
    \ will have the originator and any 3rd party X.400\n      O/R names in correct\
    \ format (rather than doubly encoded).  In\n      cases (X.400 or RFC 822) where\
    \ there is common agreement on\n      gateway identification, then this will apply\
    \ to multiple gateways.\n      However, the syntax may be used to source route.\n\
    \      For example:  X.400 -> RFC 822  -> X.400\n         C               = \"\
    UK\"\n         ADMD            = \"BT\"\n         PRMD            = \"AC\"\n \
    \        \"JNT-Mail\"      = \"/PN=Duval/DD.Title=Manager/(a)FR.PTT.Inria\"\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         This will be sent to an arbitrary\
    \ UK Academic Community gateway\n         by X.400.  Then by JNT Mail to another\
    \ gateway determined by\n         the domain FR.PTT.Inria.  This will then derive\
    \ the X.400 O/R\n         Name:\n            C               = \"FR\"\n      \
    \      ADMD            = \"PTT\"\n            PRMD            = \"Inria\"\n  \
    \          PN.S            = \"Duval\"\n            \"Title\"         = \"Manager\"\
    \n      Similarly:  RFC 822 -> X.400 -> RFC 822\n         \"/C=UK/ADMD=BT/PRMD=AC/RFC-822=jj(a)seismo.css.gov/\"\
    \n                                                     @monet.berkeley.edu\n \
    \        /C=UK/ADMD=BT/PRMD=AC/RFC-822=jj#l#a#r#seismo.css.gov/\n            \
    \                                         @monet.berkeley.edu\n         The second\
    \ case uses the Appendix A encoding to avoid\n         822.quoted-text. This will\
    \ be sent to monet.berkeley.edu by\n         RFC 822, then to the AC PRMD by X.400,\
    \ and then to\n         jj@seismo.css.gov by RFC 822.\n   4.4.  The full P1 /\
    \ 822-P1 mapping\n      There are two basic mappings at the P1 level:\n      \
    \   1.   822-P1 return address <-> P1.UMPDUEnvelope.originator\n         2.  \
    \ 822-P1 recipient <-> P1.RecipientInfo\n      822-P1 recipients and return addresses\
    \ are encoded as\n      EBNF.822-address.  As P1.UMPDUEnvelope.originator is encoded\
    \ as\n      P1.ORName, mapping 1) has already been specified.\n      P1.RecipientInfo\
    \ contains a P1.ORName and additional information.\n      The handling of this\
    \ additional information is now specified.\n      4.4.1.  RFC 822 -> X.400\n \
    \        The following default settings should be made for each\n         component\
    \ of P1.RecipientInfo.\n            P1.ExtensionIdentifier\n               This\
    \ can be set systematically by the X.400 system.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P1.RecipientInfo.perRecipientFlag\n\
    \               Responsibility Flag should be set.  Report Request should\n  \
    \             be set according to content return policy, as discussed\n      \
    \         in section 5.3. User Report Request should be set to\n             \
    \  Basic.\n            P1.ExplicitConversion\n               This optional component\
    \ should be omitted.\n      4.4.2.  X.400 -> RFC 822\n         The mapping only\
    \ takes place in cases where\n         P1.RecipientInfo.perRecipientFlag Responsibility\
    \ Flag is set.\n         The following treatment should be given to the other\n\
    \         P1.RecipientInfo components.\n            P1.ExtensionIdentifier\n \
    \              Not used.\n            P1.RecipientInfo.perRecipientFlag\n    \
    \           If ReportRequest is Confirmed or Audit-and-Confirmed then\n      \
    \         a delivery report indicating success should be sent by\n           \
    \    the gateway. This report should use each\n               P1.ReportedRecipientInfo.SupplementaryInformation\
    \ to\n               indicate the identity of the gateway, and the nature of\n\
    \               the report (i.e. only as far as the gateway).  Failures\n    \
    \           will be handled by returning RFC 822 messages, and so\n          \
    \     User Report Request set to No report is ignored.\n            P1.ExplicitConversion\n\
    \               If present, the O/R name should be rejected, unless the\n    \
    \           requested conversion can be achieved.  None of the\n             \
    \  currently recognised values of this parameter are\n               appropriate\
    \ to a gateway using this specification.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   4.5.  The full P2 / RFC 822 mapping\n \
    \     All RFC 822 addresses are assumed to use the 822.mailbox syntax.\n     \
    \ This should include all 822.comments associated with the lexical\n      tokens\
    \ of the 822.mailbox.  All P2.ORNames are encoded within the\n      syntax P2.ORDescriptor,\
    \ or P2.Recipient (or within Message IDs).\n      An asymmetrical mapping is defined\
    \ between these components.\n      4.5.1.  RFC 822 -> X.400\n         The following\
    \ sequence is followed.\n            1.   Take the address, and extract an EBNF.822-address.\n\
    \                 This can be derived trivially from either the\n            \
    \     822.addr-spec or 822.route-addr syntax.  This is mapped\n              \
    \   to P2.ORName as described above.\n            2.   A string should be built\
    \ consisting of (if present):\n               -    The 822.phrase component if\
    \ it is a 822.phrase\n                    822.route-addr construct.\n        \
    \       -    Any 822.comments, in order, retaining the\n                    parentheses.\n\
    \                  This string should then be encoded into T.61 (as\n        \
    \          described in chapter 3).  If the string is not null,\n            \
    \      it should be assigned to P2.ORDescriptor.freeformName.\n            3.\
    \   P2.ORDescriptor.telephoneNumber should be omitted.\n            4.   In cases\
    \ of converting to P2.Recipient,\n                 P2.Recipient.replyRequest and\n\
    \                 P2.Recipient.reportRequest should be omitted.\n         If the\
    \ 822.group construct is present, each included\n         822.mailbox should be\
    \ encoded as above.  The 822.group should\n         be mapped to T.61, and a P2.ORDesciptor\
    \ with only a\n         freeformName component built from it.\n      4.5.2.  X.400\
    \ -> RFC 822\n         In the basic case, where P2.ORName is present, proceed\
    \ as\n         follows.\n            1.   Encode P2.ORName as EBNF.822-address.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            2a.  If P2.ORDescriptor.freeformName\
    \ is present, convert it\n                 to ASCII (chapter 3), and use use this\
    \ as the\n                 822.phrase component of 822.mailbox using the\n   \
    \              822.phrase 822.route-addr construct.\n            2b.  If P2.ORDescriptor.freeformName\
    \ is absent, if\n                 EBNF.822-address is parsed as 822.addr-spec\
    \ use this as\n                 the encoding of 822.mailbox. If EBNF.822-address\
    \ is\n                 parsed as 822.route 822.addr-spec, then a 822.phrase\n\
    \                 taken from 822.local-part should be added.\n            3. \
    \  If P2.ORDescriptor.telephoneNumber is present, this\n                 should\
    \ be placed in a trailing 822.comment.\n            4.   If P2.Recipient.reportRequest\
    \ has the\n                 receiptNotification bit set, then an 822.comment\n\
    \                 \"(Receipt Notification Requested)\" should be appended\n  \
    \               to the address.  The effort of correlating P1 and P2\n       \
    \          information is too great to justify the gateway sending\n         \
    \        Receipt Notifications.\n            5.   If P2.Recipient.replyRequest\
    \ is present, an 822.comment\n                 \"(Reply requested)\" or \"(Reply\
    \ not requested)\" should\n                 be appended to the address, dependent\
    \ on its value.\n         If P2.ORName is absent, P2.ORDescriptor.freeformName\
    \ should be\n         converted to ASCII, and used with the RFC 822 822.group\
    \ syntax:\n            freeformname \":\" \";\"\n         Steps 3-5 should then\
    \ be followed.\n   4.6.  Message IDs\n      There is a need to map both ways between\
    \ 822.msg-id and\n      P2.IPMessageID.  A mapping is defined which is symmetrical\
    \ for\n      non-pathological cases.  The mapping allows for the fact that\n \
    \     P2.IPMessageID.PrintableString is mandatory for the Cen/Cenelec\n      profile.\
    \  This allows for good things to happen when messages pass\n      multiple times\
    \ across the X.400/RFC 822 boundary.  A mapping\n      between 822.msg-id and\
    \ P1.MPDUIdentifier is defined.  This allows\n      for X.400 error messages to\
    \ reference an RFC 822 ID, which is\n      preferable to a gateway generated ID.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      4.6.1.  P2.IPMessageID -> 822.msg-id\n\
    \         P2.IPMessageID.ORName is used to generate an 822.addr-spec, as\n   \
    \      defined above.  P2.IPMessageID.PrintableString is mapped to\n         ASCII,\
    \ as defined in chapter 3.  This string (if it is present\n         and if the\
    \ value is not \"RFC-822\") is appended to the front of\n         the 822.local-part\
    \ of the 822.msg-id, with \"*\" as a separator.\n         If no ORName is present,\
    \ an 822.msg-id of the form\n         \"PrintableString*@gateway-domain\" is generated.\n\
    \      4.6.2.  822.msg-id -> P2.IPMessageID\n         822.local-part is parsed\
    \ as:\n            [ printablestring \"*\" ] real-local-part\n         If EBNF.printablestring\
    \ is found, it is mapped to\n         PrintableString, and used as P2.IPMessageID.PrintableString.\n\
    \         Otherwise\n         P2.IPMessageID.PrintableString is set to \"RFC-822\"\
    .  This\n         arbitrary value allows for conformance to Cen/Cenelec.  If\n\
    \         EBNF.real-local-part is not present, no P2.IPMessageID.ORName\n    \
    \     is generated.  Otherwise,  822.local-part is replaced with\n         EBNF.real-local-part,\
    \ and 822.addr-spec is mapped to\n         P2.IPMessageID.ORName as defined above.\n\
    \      4.6.3.  822.msg-id -> P1.MPDUIdentifier\n         P1.CountryName is assigned\
    \ to \"\", P1.AdministrationDomainName\n         to 822.domain (from 822.msg-id)\
    \ and P1.MPDUIdentifier.IA5String\n         to 822.local-part (from 822.msg-id).\n\
    \      4.6.4.  P1.MPDUIdentifier -> 822.msg-id\n         822.local-part is set\
    \ to P1.MPDUIdentifier.IA5String, with any\n         CRLF mapped to SPACE.  If\
    \ P1.CountryName is \"\", 822.domain is\n         set to P1.AdministrationDomainName;\
    \ Otherwise to\n         P1.AdministrationDomainName \"..\" P1.CountryName.  If\
    \ there are\n         any specials,  the domain literal encoding should be used.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Chapter 5 -- Protocol Elements
  contents:
  - "Chapter 5 -- Protocol Elements\n   This chapter gives detailed mappings for the\
    \ functions outlined in\n   chapters 1 and 2.  It makes extensive use of the notations\
    \ and\n   mappings defined in chapters 3 and 4.  This chapter is structured as\n\
    \   follows:\n      5.1. Basic RFC 822 -> X.400 mappings\n      5.2. A definition\
    \ of some new RFC 822 elements, and their mapping\n           to X.400.\n    \
    \  5.3  Some special handling associated with Return of Contents.\n      5.4.\
    \ X.400 -> RFC 822\n   5.1.  RFC 822 -> X.400\n      First, the basic functions\
    \ of an 822-P1 protocol should be mapped\n      as follows:\n         822-P1 Originator\n\
    \            Mapped to P1.UMPDUEnvelope.originator (see chapter 4).\n        \
    \ 822-P1 Recipient\n            Mapped to P1.RecipientInfo (see chapter 4).\n\
    \      The RFC 822 headers are used to generate both a P1.UMPDUEnvelope\n    \
    \  and a P2.Heading.  The IP Message will have either one or two\n      P2.BodyParts\
    \ which will be type P2.IA5Text with no\n      P2.IA5Text.repertoire component.\
    \ The last P2.BodyPart will contain\n      the RFC 822 message body.  If there\
    \ are any RFC 822 headers which\n      indicate mapping into the P2.BodyPart,\
    \ then two P2.BodyParts are\n      generated.  If a revised version of P2 allowed\
    \ for extensible\n      header specification, this would be seen as a preferable\
    \ mapping.\n      The first body part will start with the line:\n         RFC-822-Headers:\n\
    \      The rest of this body part will contain all of the headers not\n      otherwise\
    \ mapped (both 822.field-name and 822.field-body).  The\n      order of any such\
    \ headers should be preserved.  Similarly,\n      ordering within P2.Heading and\
    \ P1.UMPDUEnvelope should reflect\n      ordering within the RFC 822 header. \
    \ No P1 or P2 optional fields\n      are generated unless specified.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      A pro-forma X.400 message is now specified.\
    \  Some of these\n      defaults may be changed by the values in the RFC 822 message\
    \ being\n      mapped.  The mandatory P1 and P2 components have the following\n\
    \      defaults.\n         P1.MPDUIdentifier\n            The default should be\
    \ unique value generated by the gateway.\n         P1.OriginatorORName\n     \
    \       Always generated from 822-P1.\n         P1.ContentType\n            P1.ContentType.p2\n\
    \         P1.RecipientInfo\n            These will always be supplied from 822-P1.\n\
    \         P1.Trace\n            The last P1.TraceInformation component is generated\
    \ such\n            that: P1.TraceInformation.GlobalDomainIdentifier is set to\n\
    \            the local vaglue.  P1.DomainSuppliedInfo.action is set to\n     \
    \       relayed. P1.DomainSuppliedInfo.arrival is set to the current\n       \
    \     time. P1.DomainSuppliedInfo.previous may be set if there is\n          \
    \  anything sensible to set it to.\n         P2.IPMessageID\n            The default\
    \ should be a unique value generated by the\n            gateway.\n      The following\
    \ optional parameters should be set:\n         P1.PerMessageFlag\n           \
    \ The P1.PerMessageFlag.contentReturnRequest bit should be set\n            according\
    \ to the discussion in section 5.3.  The\n            P1.PerMessageFlag.alternateRecipientAllowed\
    \ bit should be\n            set, as it seems desirable to maximise opportunity\
    \ for\n            (reliable) delivery.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      The RFC 822 headings should be mapped\
    \ as follows:\n         Received:\n            Fudged onto P1.TraceInformation\
    \ (try not to grimace too\n            much). P1.DomainSuppliedInfo.action is\
    \ set to relayed.\n            P1.DomainSuppliedInfo.arrival is set to the date-time\n\
    \            component P1.TraceInformation.GlobalDomainIdentifier has\n      \
    \      P1.CountryName as a null string, and\n            P1..AdministrationDomainName\
    \ as the domain of the receiving\n            host (if present - null string if\
    \ not).\n            P1.DomainSuppliedInfo.previous has P1.CountryName as a null\n\
    \            string, and P1.AdministrationDomainName has the domain of\n     \
    \       the sending host with all other information enclosed in\n            round\
    \ parentheses.  The encoding of ASCII to PrintableString\n            (chapter\
    \ 3) should be used if needed.  For example:\n               Received: from 44e.cs.ucl.ac.uk\
    \ by vax2.Cs.Ucl.AC.UK\n                              with SMTP  id a002110; 18\
    \ Dec 85 10:40 GMT\n                  maps to -\n                  P1.GlobalDomainIdentifier\n\
    \                     CountryName                  = \"\"\n                  \
    \   AdministrationDomainName     = \"vax2.Cs.Ucl.AC.UK\"\n                  P1.DomainSuppliedInfo\n\
    \                     arrival                      = 18 Dec 85 10:40 GMT\n   \
    \                  action                       = relayed\n                  \
    \   previous\n                        CountryName               = \"\"\n     \
    \                   AdministrationDomainName  =\n                            \
    \   \"44e.cs.ucl.ac.uk (with SMTP id a002110)\"\n         Date:\n            This\
    \ is used to set the first component of\n            P1.TraceInformation. The\
    \ mandatory components are set as\n            follows:\n               P1.GlobalDomainIdentifier\n\
    \                  CountryName                  = \"\"\n                  AdministrationDomainName\
    \     = \"\"\n               P1.DomainSuppliedInfo\n                  arrival\
    \                      = time derived from Date:\n                  action   \
    \                    = relayed\n            No optional fields are used in the\
    \ trace.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Message-Id:\n            Mapped to\
    \ P2.IPMessageID.  If the RFC 822 message does not\n            contain a P1-Message-ID:\
    \ field, the Message-Id: field is\n            also mapped to P1.MPDUIdentifier.\
    \  For these, and all other\n            fields containing msg-id the mappings\
    \ of chapter 4 are used\n            for each msg-id.\n         From:\n      \
    \      If Sender: is present, this is mapped to\n            P2.AuthorisingUsers.\
    \  If not, it is mapped to P2.Originator.\n            For this, and other components\
    \ containing addresses, the\n            mappings of chapter 4 are used for each\
    \ address.\n         Sender:\n            Mapped to P2.Originator.\n         Reply-To:\n\
    \            Mapped to P2.Heading.replyToUsers.\n         To:\n            Mapped\
    \ to P2.Heading.primaryRecipients\n         Cc:\n            Mapped to P2.Heading.copyRecipients.\n\
    \         Bcc:\n            Mapped to P2.Heading.blindCopyRecipients.\n      \
    \   In-Reply-To:\n            Mapped to P2.Heading.inReplyTo for the first (if\
    \ any)\n            822.msg-id component.  If the field contains an 822.phrase\n\
    \            component, or there are multiple 822.msg-id components, the\n   \
    \         ENTIRE field is passed in the P2.BodyPart.\n         References:\n \
    \           Mapped to P2.Heading.crossReferences.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         Keywords:\n            Passed in\
    \ the P2.BodyPart.\n         Subject:\n            Mapped to P2.Heading.subject.\
    \  The field-body uses the\n            mapping referenced in chapter 3 from ASCII\
    \ to T.61.\n         Comments:\n            Passed in the P2.BodyPart.\n     \
    \    Encrypted:\n            Passed in the P2.BodyPart.\n         Resent-*\n \
    \           Passed in the P2..BodyPart <8>.\n         Other Fields\n         \
    \   In particular X-* fields, and \"illegal\" fields in common\n            usage\
    \ (e.g. \"Fruit-of-the-day:\") are passed in the\n            P2.BodyPart.  The\
    \ same treatment should be applied to\n            RFC 822 fields where the content\
    \ of the field does not\n            conform to RFC 822 (e.g. a Date: field with\
    \ unparsable\n            syntax).\n   5.2.  Extended RFC 822 Elements -> X.400\n\
    \      First an EBNF definition of a number of extended fields is given,\n   \
    \   and then a mapping to X.400 is defined.  In most cases, the\n      RFC 822\
    \ syntax is defined to make this mapping very\n      straightforward, and so no\
    \ detailed explanation of the mapping is\n      needed.\n         extended-field\
    \  = \"P1-Message-ID\" \":\" p1-msg-id\n                         / \"X400-Trace\"\
    \ \":\" x400-trace\n                         / \"Original-Encoded-Information-Types\"\
    \n                            \":\"encoded-info\n                         / \"\
    P1-Content-Type\" \":\" p1-content-type\n                         / \"UA-Content-ID\"\
    \ \":\" printablestring\n                         / \"Priority\" \":\" priority\n\
    \                         / \"P1-Recipient\" : 1 mailbox\n                   \
    \      / \"Deferred-Delivery\" \":\" date-time\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n                         / \"Bilateral-Info\"\
    \ \":\" bilateral-info\n                         / \"Obsoletes\" \":\" 1 msg-id\n\
    \                         / \"Expiry-Date\" \":\" date-time\n                \
    \         / \"Reply-By\" \":\" date-time\n                         / \"Importance\"\
    \ \":\" importance\n                         / \"Sensitivity\" \":\" sensitivity\n\
    \                         / \"Autoforwarded\" \":\" boolean\n         p1-msg-id\
    \       = global-id \";\" *text\n         p1-content-type = \"P2\" / atom\n  \
    \       x400-trace      = global-id \";\"\n                         \"arrival\"\
    \ date-time\n                         [ \"deferred\" date-time ]\n           \
    \              [ \"action\" action ]\n                         [ \"converted\"\
    \ \"(\" encoded-info \")\" ]\n                         [ \"previous\" global-id\
    \ ]\n         action          = \"Relayed\" / \"Rerouted\" / escape\n        \
    \ global-id       = c \"*\" admd [ \"*\" prmd ]\n         encoded-info    = 1\
    \ encoded-type\n         encoded-type    = \"Undefined\"           ; undefined\
    \ (0)\n                         / \"Telex\"               ; tLX (1)\n        \
    \                 / \"IA5-Text\"            ; iA5Text (2)\n                  \
    \       / \"G3-Fax\"              ; g3Fax (3)\n                         / \"TIF0\"\
    \                ; tIF0 (4)\n                         / \"Teletex\"          \
    \   ; tTX (5)\n                         / \"Videotex\"            ; videotex (6)\n\
    \                         / \"Voice\"               ; voice (7)\n            \
    \             / \"SFD\"                 ; sFD (8)\n                         /\
    \ \"TIF1\"                ; tIF1 (9)\n                         / escape\n    \
    \     priority        = \"normal\" / \"non-urgent\" / \"urgent\" / escape\n  \
    \       bilateral-info  = c \"*\" admd \"*\" *text\n         importance      =\
    \ \"low\" / \"normal\" / \"high\" / escape\n         sensitivity     = \"Personal\"\
    \ / \"Private\"\n                         / \"Company-Confidential\" / escape\n\
    \         escape          = 1*DIGIT\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      With the exception of \"Bilateral-Info:\"\
    \ and \"X400-Trace:\", there\n      must be no more than one of each of these\
    \ fields in an RFC 822\n      header.  Any field beginning with the String \"\
    Autoforwarded-\" is\n      valid if the field would be syntactically valid with\
    \ this string\n      removed.\n      The mappings to X.400 are as follows:\n \
    \        P1-Message-ID:\n            Mapped to P1.UMPDUEnvelope.MPDUIdentifier.\
    \  This take\n            precedence over any value derived from Message-ID:.\n\
    \         X400-Trace:\n            Mapped to the next component of\n         \
    \   P1.UMPDUEnvelope.Traceinformation.  Care should be taken to\n            preserve\
    \ order.  If one or more of these mappings is made,\n            then a trace\
    \ component should NOT be generated from the\n            Date: field which should\
    \ be redundant.  This is because the\n            message has previously come\
    \ from X.400, and the Date:\n            information will be redundant.  Note\
    \ that all trace\n            information (Received: and \"X400-Trace:\") in the\
    \ RFC 822\n            message will be in strict order, with the most recent at\
    \ the\n            top.  This order should be preserved in the mapping.\n    \
    \     Original-Encoded-Information-Types:\n            This is used to set P1.UMPDUEnvelope.original.\n\
    \            P1.EncodedInformationTypes.[0] has bits set according to\n      \
    \      each of the encoded-info components in this field.  Any\n            escape\
    \ values should not be encoded.\n         P1-Content-Type:\n            If the\
    \ value is anything other than \"P2\", the mapping should\n            not be\
    \ performed (unless the new value has some semantics to\n            the gateway).\n\
    \         UA-Content-ID:\n            Mapped to P1.UMPDUEnvelope.UAContentID.\n\
    \         Priority:\n            Mapped to P1.UMPDUEnvelope.Priority.  An escape\
    \ value should\n            be encoded as P1.Priority.normal.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         P1-Recipient:\n            If this\
    \ field is set, the\n            P1.PerMessageFlag.discloseRecipients bit should\
    \ be set.  Any\n            of the addresses here which do not correspond to 822-P1\n\
    \            recipients should be added to the P1 recipient list, with\n     \
    \       the responsibility bit turned off.\n         Deferred-Delivery:\n    \
    \        Mapped to P1.UMPDUEnvelope.deferredDelivery.  Note that the\n       \
    \     value of this field should always be in the past, as this\n            field\
    \ should only be present in messages which have come\n            originally from\
    \ X.400.  Thus there should be no implied\n            action.  See also the comments\
    \ on the reverse mapping.\n         Bilateral-Info:\n            No attempt is\
    \ made to reconvert this information back to\n            X.400.\n         Obsoletes:\n\
    \            Mapped to P2.Heading.obsoletes.\n         Expiry-Date:\n        \
    \    Mapped to P2.Heading.expiryDate.\n         Reply-By:\n            Mapped\
    \ to P2.Heading.replyBy.\n         Importance:\n            Mapped to P2.Heading.importance.\
    \  An escape value should be\n            encoded as P2.Heading.importance.normal.\n\
    \         Sensitivity:\n            Mapped to P2.Heading.sensitivity.  An escape\
    \ value should be\n            encoded as P2.Heading.sensitivity.normal.\n   \
    \      Autoforwarded:\n            If this field is present and the value is \"\
    TRUE\", there will\n            be zero or more field names beginning \"Autoforwarded-\"\
    .\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            These should be taken, and the\
    \ string \"Autoforwarded-\"\n            stripped.  These fields, in conjunction\
    \ with the 822-P1\n            information should be used to build an IP Message.\
    \  Any\n            implied actions should be taken. P2.Heading.autoforwarded\
    \ is\n            set in this message.  The other RFC 822 fields are used to\n\
    \            build another IP Message, which is used as the single body\n    \
    \        part of the first message.  This mechanism does not nest.\n   5.3.  Return\
    \ of Contents\n      It is not clear how widely supported X.400 return of contents\n\
    \      service will be.  However, profiling work suggests that most\n      systems\
    \ will not support this service.  As this service is\n      expected in the RFC\
    \ 822 world, two approaches are specified (it is\n      not so necessary in the\
    \ X.400 world, as delivery reports are\n      distinguished from messages).  The\
    \ choice will depend on the\n      service level of the X.400 community being\
    \ serviced by the\n      gateway.\n      In environments where return of contents\
    \ is widely supported, the\n      P1.PerMessageFlag content return request bit\
    \ will be set, and the\n      Report Request bit in P1.PerRecipientFlag will be\
    \ set to\n      Confirmed, for every message passing from RFC 822 -> X.400.  The\n\
    \      content return service can then be passed back to the end\n      (RFC 822)\
    \ user in a straightforward manner.\n      In environments where return of contents\
    \ is not widely supported,\n      a gateway must make special provisions to handle\
    \ return of\n      contents.  For every message passing from RFC 822 -> X.400,\
    \ the\n      P1.PerMessageFlag content return request bit will be set, and the\n\
    \      Report Request bit in P1.PerRecipientFlag will be set to\n      Confirmed.\
    \  When the delivery report comes back, the gateway can\n      note that the message\
    \ has been delivered to the recipient(s) in\n      question.  If a non-delivery\
    \ report is received, a meaningful\n      report (containing some or all of the\
    \ original message) can be\n      sent to the 822-P1 originator.  If no report\
    \ is received for a\n      recipient, a (timeout) failure notice should be sent\
    \ to the 822-P1\n      originator.  The gateway may retransmit the X.400 message\
    \ if it\n      wishes.  Delivery confirmations should only be sent back to the\n\
    \      822-P1 originator if the P1.PerRecipientFlag User Report Request\n    \
    \  bit is set to Confirmed.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   5.4.  X.400 -> RFC 822\n      5.4.1.  General\n\
    \         This section describes how to build a pro-forma message, and\n     \
    \    then explains how these defaults may be overridden.  It should\n        \
    \ be noted that RFC 822 folding of headers should be used in an\n         appropriate\
    \ manner.\n      5.4.2.  Service MPDU\n         5.4.2.1.  Probe\n            Any\
    \ P1.ProbeMPDU should be serviced by the gateway, as there\n            is no\
    \ equivalent RFC 822 functionality.  The value of the\n            reply is dependent\
    \ on whether the gateway could service a\n            User MPDU with the values\
    \ specified in the probe.  The reply\n            should make use of P1.SupplementaryInformation\
    \ to indicate\n            that the probe was serviced by the gateway.\n     \
    \    5.4.2.2.  Delivery Report\n            The 822-P1 components are constructed\
    \ as follows:\n               822-P1 Originator\n                  This is set\
    \ to an 822.addr-spec pointing to an\n                  administrator at the gateway.\n\
    \               822-P1 Recipient\n                  The single recipient is constructed\
    \ from\n                  P1.DeliveryReportEnvelope.originator, using the\n  \
    \                mappings of chapter 4.\n            The mandatory RFC 822 headers\
    \ for an RFC 822 pro-forma are\n            constructed as follows:\n        \
    \       Date:\n                  From the P1.DomainSuppliedInfo.arrival component\
    \ of\n                  the first P1.TraceInformation component.\n           \
    \    From:\n                  This is set to the same as the 822-P1 originator.\
    \  An\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n                  appropriate phrase component\
    \ may be added (e.g. giving\n                  the name of the gateway).\n   \
    \            To:\n                  The same as the 822-P1 recipient.\n      \
    \      A Subject: field should be added, which contains some\n            appropriate\
    \ words (e.g. \"Delivery Report\").\n            The other two P1.DeliveryReportEnvelope\
    \ parameters should be\n            mapped as follows:\n               P1.DeliveryReportEnvelope.report\n\
    \                  This should be mapped to a P1-Message-Id: field.\n        \
    \       P1.DeliveryReportEnvelope.TraceInformation\n                  Each component\
    \ should be mapped to an \"X400-Trace:\"\n                  field.  RFC 822 and\
    \ X.400 ordering should be\n                  maintained (see 5.3).\n        \
    \    The P1.DeliveryReportContent parameters should be mapped to\n           \
    \ a series of new RFC 822 headers.  These new headers are\n            intended\
    \ for processing in the RFC 822 world.  No attempt\n            will be made to\
    \ reverse the mappings.\n               drc-field    = \"Delivery-Report-Content-Original\"\
    \n                           \":\" msg-id\n                 / \"Delivery-Report-Content-Intermediate-Trace\"\
    \n                           \":\" x400-trace\n                 / \"Delivery-Report-Content-UA-Content-ID\"\
    \n                           \":\" printablestring\n                 / \"Delivery-Report-Content-Billing-Information\"\
    \n                           \":\" *text\n                 / \"Delivery-Report-Content-Reported-Recipient-Info\"\
    \n                           \":\" drc-info\n               drc-info     = mailbox\
    \ \";\"\n                            last-trace \";\"\n                      \
    \      \"ext\" 1*DIGIT\n                            \"flags\" 2DIGIT\n       \
    \                     [ \"intended\" mailbox ] \";\"\n                       \
    \     [ \"info\" printablestring ]\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n               last-trace   = drc-report \"\
    ;\"\n                            date-time \";\"\n                           \
    \ [ \"converted\" \"(\" encoded-info \")\"\n               drc-report   = \"SUCCESS\"\
    \ drc-success\n                            / \"FAILURE\" drc-failure\n       \
    \        drc-success  = date-time \";\" 1*DIGIT\n               drc-failure  =\
    \ *text [ \";\" *text ] \";\"\n            There may be multiple\n           \
    \ \"Delivery-Report-Content-Intermediate-Trace:\" and\n            \"Delivery-Report-Content-Reported-Recipient-Info:\"\
    \ fields.\n            The msg-id for \"Delivery-Report-Content-Original\" is\
    \ derived\n            according to the mapping of chapter 4.  EBNF.drc-failure\
    \ may\n            use numeric values or textual explanation.  The latter is\n\
    \            preferred.  All P1.DeliveryReportContent parameters are\n       \
    \     mapped to the corresponding component.  The order of\n            \"Delivery-Report-Content-Intermediate-Trace:\"\
    \ should have\n            the most recently stamped one first.\n            The\
    \ body of the RFC 822 message should be a human readable\n            description\
    \ of the critical parts of the\n            P1.DeliveryReportContent.  In particular,\
    \ the failed\n            recipients, and failure reason should be given.  Some\
    \ or all\n            of the original message should be included in the delivery\n\
    \            report. The original message will be available at the\n         \
    \   gateway, as discussed in section 5.3.\n      5.4.3.  User MPDU\n         These\
    \ elements are the basis for both Status Report and IP\n         Message.\n  \
    \       The 822-P1 components are constructed as follows:\n            822-P1\
    \ Originator\n               This is derived from P1.UMPDUEnvelope.originator.\n\
    \            822-P1 Recipient\n               Each recipient is constructed from\
    \ the P1.RecipientInfo,\n               as described in chapter 4.  This describes\
    \ actions as\n               well as format mappings.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         The mandatory RFC 822 field pro-forma\
    \ is derived as follows.\n         In most cases where the P1.UMPDUContent is\
    \ an IP Message, these\n         defaults will be overridden:\n            Date:\n\
    \               From the P1.DomainSuppliedInfo.arrival component of the\n    \
    \           first P1.TraceInformation component.\n            From:\n        \
    \       From the P1.UMPDUEnvelope.originator, as defined in\n               chapter\
    \ 4.\n            To:\n               This default is only required if the generated\
    \ RFC 822\n               message has no destination specification.  If\n    \
    \           P1.PerMessageFlag.discloseRecipients is set then it\n            \
    \   should contain the ORName in each P1.RecipientInfo\n               component.\
    \  If it is not set, the it should be set to\n               \"To: No Recipients\
    \ Specified : ;\".\n         The mappings, and any actions for each P1.UserMPDU\
    \ element is\n         now considered.\n            P1.MPDUIdentifier\n      \
    \         Mapped to the extended RFC 822 field \"P1-Message-ID:\".\n         \
    \      Note that the sequence CRLF is mapped to SPACE, which\n               makes\
    \ the mapping irreversible for such cases.\n            P1.UMPDUEnvelope.original\n\
    \               Mapped to the extended RFC 822 field\n               \"Original-Encoded-Information-Types:\"\
    .  If it contains\n               only P2.IA5Text, the RFC 822 field may be omitted.\n\
    \            P1.ContentType\n               As this can currently only have one\
    \ value, it is not\n               mapped, on the basis that it is redundant.\
    \  If the field\n               contains any value other than P2, then the UMPDU\
    \ should\n               be rejected.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P1.UAContentID\n             \
    \  Mapped to the extended RFC 822 field \"UA-Content-Id:\".\n            P1.Priority\n\
    \               Mapped to the extended RFC 822 field \"Priority:\".\n        \
    \    P1.PerMesageFlag\n               This has a number of components:\n     \
    \             - discloseRecipients\n                     If this bit is set, a\
    \ \"P1-Recipient:\" field should\n                     be generated, and contain\
    \ each of the P1\n                     recipients.\n                  - conversionProhibited\n\
    \                     If this bit is set, the message should be rejected\n   \
    \                  if it contains P2.BodyPart which is not P2.IA5Text\n      \
    \               or P2.ForwardedIPMessage.\n                  - alternateRecipientAllowed\n\
    \                     The value of this bit is ignored.\n                  - contentReturnRequest\n\
    \                     The value of this bit is ignored.\n            P1.UMPDUEnvelope.deferredDelivery\n\
    \               This should be mapped to the extended RFC 822 field\n        \
    \       \"Deferred-Delivery:\".  X.400 profiles, and in particular\n         \
    \      the CEN/CENELEC profile [CEN/CENELEC/85a], specify that\n             \
    \  this element must be supported at the first MTA.  Thus,\n               it\
    \ is expected that the value of this element will always\n               be in\
    \ the past.  If it is not, the function may\n               optionally be implemented\
    \ by the gateway: that is, the\n               gateway should hold the message\
    \ until the time specified\n               in the protocol element.  Thus the\
    \ extended RFC 822 field\n               is just for information.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P1.PerDomainBilateralInformation\n\
    \               Each component should be encoded in the extended RFC 822\n   \
    \            field \"Bilateral-Info:\".  P1.BilateralInfo should be\n        \
    \       mapped into ASCII in a manner appropriate to its\n               contents.\
    \  This submapping is not reversible.\n            P1.TraceInformation\n     \
    \          This should be mapped to \"X400-Trace:\", as for the\n            \
    \   delivery report.\n      5.4.4.  Status Report\n         The entire status\
    \ report is mapped into the body of the RFC 822\n         message, in the same\
    \ manner as for a Delivery Report.  An\n         appropriate \"Subject:\" field\
    \ should be generated.  As status\n         reports cannot be requested from the\
    \ RFC 822 world, the mapping\n         is not likely to be used a great deal.\n\
    \      5.4.5.  IP Message\n         The P1.UMPDUEnvelope pro-forma specification\
    \ ensures all the\n         822-P1 information, and a minimal (legal) RFC 822\
    \ message.  The\n         mappings and actions for the P2.Heading components are\
    \ now\n         described.  Basically, these are interpreted as actions and/or\n\
    \         mappings into RFC 822 fields. The following mappings are\n         specified:\n\
    \            P2.IPMessageID\n               This is mapped to the field \"Message-ID:\"\
    , according to\n               section 4.\n            P2.Heading.originator\n\
    \               If P2.Heading.authorisingUsers is present this is mapped\n   \
    \            to Sender:, if not to From:.\n            P2.Heading.authorisingUsers\n\
    \               Mapped to From:.\n            P2.Heading.primaryRecipients\n \
    \              Mapped to To:.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P2.Heading.copyRecipients\n  \
    \             Mapped to Cc:.\n            P2.Heading.blindCopyRecipients\n   \
    \            Mapped to Bcc:.\n            P2.Heading.inReplyTo\n             \
    \  Mapped to In-Reply-To:.\n            P2.Heading.obsoletes\n               Mapped\
    \ to the extended RFC 822 field \"Obsoletes:\"\n            P2.Heading.crossReferences\n\
    \               Mapped to References:.\n            P2.Heading.subject\n     \
    \          Mapped to subject.  The contents are converted to ASCII\n         \
    \      (as defined in chapter 3).  Any CRLF are not mapped, but\n            \
    \   are used as points at which the subject field must be\n               folded.\
    \  line.\n            P2.Heading.expiryDate\n               Mapped to the extended\
    \ RFC 822 field \"Expiry-Date:\".\n            P2.Heading.replyBy\n          \
    \     Mapped to the extended RFC 822 field \"Reply-By:\".\n            P2.Heading.replyToUsers\n\
    \               Mapped to Reply-To:.\n            P2.Heading.importance\n    \
    \           Mapped to the extended RFC 822 field \"Importance:\".\n          \
    \  P2.Heading.sensitivity\n               Mapped to the extended RFC 822 field\
    \ \"Sensitivity:\".\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P2.Heading.autoforwarded\n   \
    \            If it is set to FALSE, it is simply mapped to the\n             \
    \  extended RFC 822 field \"Autoforwarded:\".  If this is set\n              \
    \ to TRUE, the P2.Body does not consist of a single\n               P2.ForwardedIPMessage,\
    \ then there is an X.400 error, and\n               the message should be bounced.\
    \  Otherwise the following\n               steps are taken.\n                \
    \  1.  The mappings for all of the message, except the\n                     \
    \ body part are completed.\n                  2.  Prepend each RFC 822 fieldname\
    \ with the string\n                      \"Autoforwarded-\". Mapped to the extended\
    \ RFC 822\n                      field \"Autoforwarded:\".\n                 \
    \ 3.  Add the field \"Autoforwarded:\" with value TRUE.\n                  4.\
    \  Convert the syntax of the P2.ForwardedIPMessage to\n                      generate\
    \ the remaining RFC 822 fields.\n         The P2.Body is mapped into the RFC 822\
    \ message body.  Each\n         P2.BodyPart is converted to ASCII.  If the P2.Body\
    \ contains a\n         P2.BodyPart not listed here, the entire message should\
    \ be\n         rejected.  If there are exactly two P2.IA5Text body parts, and\n\
    \         the first line of the first is \"RFC-822-Headers:\", then the\n    \
    \     rest of this first body part should be treated as additional\n         header\
    \ information for the RFC 822 message.  If there is an\n         \"In-Reply-To:\"\
    \ field, this should be used to replace any\n         generated In-Reply-To: field.\n\
    \         In other cases of multiple P2.BodyPart, the mapping defined by\n   \
    \      Rose and Stefferud in [Rose85b], should be used to separate the\n     \
    \    P2.BodyParts in the single RFC 822 message body.\n         Individual body\
    \ parts are mapped as follows:\n            P2.IA5Text\n               The mapping\
    \ is trivial.\n            P2.TTX\n               If any P1.Teletex.NonBasicParams\
    \ are set, the message\n               should be rejected.  Otherwise, it should\
    \ be converted to\n               ASCII according to chapter 3.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n            P2.SFD\n               An SFD\
    \ should be converted to ASCII as if it was being\n               rendered on\
    \ an 79 column ASCII only VDU.  It seems likely\n               that many gateways\
    \ will not support this conversion.  In\n               these cases, the message\
    \ should be rejected.\n            P2.ForwardedIPMessage\n               The P2.ForwardedIPMessage.delivery\
    \ and\n               P2.ForwardedIPMessage.DeliveryInformation are\n        \
    \       discarded <9>.  The IM-UAPDU should have its syntax\n               mapped\
    \ (recursively) according to this gatewaying\n               specification.  Clearly,\
    \ it makes no sense to apply any\n               of the actions defined here.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix A -- Quoted String Encodings
  contents:
  - "Appendix A -- Quoted String Encodings\n   This Appendix describes a quoting mechanism\
    \ which may be used to\n   allow general interworking between RFC 822, and variants\
    \ of RFC 822\n   which do not support 822.quoted-string.  This is important, as\
    \ the\n   basic X.400 <-> RFC 822 mapping makes use of 822.quoted-string.\n  \
    \ 1.  ASCII <-> 822.atom\n      The following EBNF is specified.\n         atom-encoded\
    \    = *( a-char / a-encoded-char )\n         a-char          = <any CHAR except\
    \ specials, SPACE,\n                                 CTL, \"_\", and \"#\">\n\
    \         a-encoded-char  = \"_\"                   ; (space)\n              \
    \           / \"#u#\"                 ; (_)\n                         / \"#l#\"\
    \                 ; <(>\n                         / \"#r#\"                 ;\
    \ <)>\n                         / \"#m#\"                 ; (,)\n            \
    \             / \"#c#\"                 ; (:)\n                         / \"#b#\"\
    \                 ; (\\)\n                         / \"#h#\"                 ;\
    \ (#)\n                         / \"#e#\"                 ; ($=)\n           \
    \              / \"#s#\"                 ; ($/)\n                         / \"\
    #\" 3DIGIT \"#\"\n      NOTE: There are two encodings of double characters.  This\
    \ is so\n      that systems using this encoding, do not also need to know about\n\
    \      the \"$\" quoting mechanism defined in chapter 4.\n      The 822.3DIGIT\
    \ in EBNF.a-encoded-char must have range 0-127\n      (Decimal), and is interpreted\
    \ in decimal as the corresponding\n      ASCII character.  The choice of special\
    \ abbreviations (as opposed\n      to octal encoding) provided is based on the\
    \ manner in which this\n      mapping is most frequently used: encoding PrintableString\n\
    \      components of O/R names as atom.  Therefore, there are special\n      encodings\
    \ for each of the PrintableString characters not in\n      EBNF.a-char, except\
    \ \".\".  Space is given a single character\n      encoding, due to its (expected)\
    \ frequency of use, and backslash as\n      the RFC 822 single quote character.\n\
    \      To encode (ASCII -> atom): all EBNF.a-char are used directly and\n    \
    \  all other CHAR are encoded as EBNF.a-encoded-char.  To decode\n      (822.atom\
    \ -> ASCII): if 822.atom can be parsed as\n      EBNF.encoded-atom reverse the\
    \ previous mapping.  If it cannot be\n      so parsed, map the characters directly.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   2.  822.local-part <-> ASCII\n      A related\
    \ transformation is for 822.local-part (or other element\n      defined as '822.word\
    \ (\".\" 822.word)') where not 822.quoted-text is\n      used.  To encode (ASCII\
    \ -> 822.local-part), all EBNF.a-char and\n      \".\" are used directly and all\
    \ other 822.CHAR are encoded as\n      EBNF.a-encoded-char.  To decode (822.local-part\
    \ -> ASCII), first\n      attempt to parse 822.local-part as '822.atom *(\".\"\
    \ 822.atom)'.  If\n      this fails, or if each 822.atom cannot be parsed as\n\
    \      EBNF.atom-encoded then map each character directly.  Otherwise map\n  \
    \    each \".\" directly, and each atom as in the previous section.\n      There\
    \ are places where it is needed to convert between\n      PrintableString or IA5Text\
    \ (X.400), and 822.word (RFC 822).  word\n      may be encoded as 822.atom (which\
    \ has a restricted character set)\n      or as 822.quoted-string, which can handle\
    \ all ASCII characters.\n      If 822.quoted-string is used, clearly the mappings\
    \ for\n      PrintableString defined in Chapter 3 provide a straightforward\n\
    \      mapping.  However, some RFC 822 based networks cannot handle the\n    \
    \  822.quoted-string format in all cases.  This Appendix is for use\n      in\
    \ these cases.  The major requirement for this mapping is the\n      UNIX world,\
    \ but it may well be needed in other places.\n      These mappings are somewhat\
    \ artificial, and their usage is\n      discouraged, except in cases where there\
    \ is no alternative.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix B -- Mappings Specific to JNT Mail
  contents:
  - "Appendix B -- Mappings Specific to JNT Mail\n   This Appendix is specific to\
    \ the JNT Mail Protocol.  It describes\n   specific changes in the context of\
    \ this protocol.  Addressing is not\n   discussed here, as it is covered in Appendix\
    \ A.\n   1.  Introduction\n      There are four aspects of a gateway which are\
    \ JNT Mail Specific,\n      in addition to those relating to addressing.  These\
    \ are each given\n      a section of this appendix.\n   2.  Acknowledge-To:\n\
    \      This field has no direct functional equivalent in X.400.  However,\n  \
    \    it can be supported to an extent, and can be used to improve X.400\n    \
    \  support.\n      When going from JNT Mail to X.400, the User Report Request\
    \ bits of\n      each P1.RecipientInfo.perRecipientFlag should be set to confirmed.\n\
    \      If there is more that one address in the Acknowledge-To: field, or\n  \
    \    if the one address is not equivalent to the 822-P1 return address,\n    \
    \  then:\n         a.   Acknowledgement(s) should be generated by the gateway.\n\
    \              The text of these acknowledgements should indicate that\n     \
    \         they are generated by the gateway.\n         b.   The Acknowledge-To:\
    \ field should also be passed in the\n              first P2.BodyPart.\n     \
    \ When going from X.400 to JNT Mail, in cases where\n      P1.RecipientInfo.perRecipientFlag\
    \ has the user bits set to\n      confirmed the copy of the message to that recipient\
    \ should have an\n      Acknowledge-To: field containing the P.UMPDUEnvelope.originator.\n\
    \      No attempt should be made to map Receipt notification requests\n      onto\
    \ Acknowledge-To:.  This is because no association can be\n      guaranteed between\
    \ P2 and P1 level addressing information.\n   3.  Trace\n      JNT Mail trace\
    \ uses the Via: syntax.  When going from JNT Mail to\n      X.400, the following\
    \ mapping onto P1.TraceInformation is used.\n         P1.DomainSuppliedInfo.action\
    \ is set to relayed.\n         P1.DomainSuppliedInfo.arrival is set to the date-time\
    \ component\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n         of the Via: field.  P1.DomainSuppliedInfo.previous\
    \ has\n         P1.CountryName as a null string, and\n         P1.AdministrationDomainName\
    \ as the domain specified in the Via:\n         field.\n         P1.TraceInformation.GlobalDomainIdentifier\
    \ has P1.CountryName\n         as a null string, and P1.AdministrationDomainName\
    \ as any\n         commented information in the Via: field.  For example:\n  \
    \          Via: UK.AC.Edinburgh ; 17 Jun 85 9:15:29 BST (EMAS V7)\n          \
    \  maps to -\n            P1.GlobalDomainIdentifier\n               CountryName\
    \                  = \"\"\n               AdministrationDomainName     = \"(EMAS\
    \ V7)\"\n            P1.DomainSuppliedInfo\n               arrival           \
    \           = 17 Jun 85 9:15:29 BST\n               action                   \
    \    = relayed\n               previous\n                  CountryName       \
    \        = \"\"\n                  AdministrationDomainName  = \"UK.AC.Edinburgh\"\
    \n   4.  Timezone specification\n      The extended syntax of zone defined in\
    \ the JNT Mail Protocol\n      should be used in the mapping of UTCTime defined\
    \ in chapter 3.\n   5.  Lack of separate 822-P1 originator specification\n   \
    \   In JNT Mail the default mapping of the P1.MPDUEnvelope.originator\n      is\
    \ to the Sender: field.  This can cause a problem if the mapping\n      of P2.Heading\
    \ has already generated a Sender: field.  To overcome\n      this, new extended\
    \ JNT Mail field is defined.  This is chosen to\n      align with the JNT recommendation\
    \ for interworking with full\n      RFC 822 systems [Kille84b].\n         original-sender\
    \     = \"Original-Sender\" \":\" mailbox\n      If an IPM has no P2.heading.authorisingUsers\
    \ component and\n      P2.Heading.originator.ORName is different from\n      P1.UMPDUEnvelope.originator,\
    \ map P1.MPDUEnvelope.originator onto\n      the Sender: field.\n      If an IPM\
    \ has a P2.heading.authorisingUsers component, and\n      P2.Heading.originator.ORName\
    \ is different from\n      P1.UMPDUEnvelope.originator, P1.MPDUEnvelpoe.originator\
    \ should be\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n      mapped onto the Sender: field, and P2.Heading.originator\
    \ mapped\n      onto the Original-Sender: field.\n      In other cases the P1.MPDUEnvelope.Originator\
    \ is already correctly\n      represented.\n      Note that in some pathological\
    \ cases, this mapping is\n      asymmetrical.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix C -- Mappings Specific to Internet Mail
  contents:
  - "Appendix C -- Mappings Specific to Internet Mail\n   The Simple Mail Transfer\
    \ Protocol [Postel82a] is used in the\n   ARPA-Internet, and in any network following\
    \ the US DoD standards for\n   internetwork protocols.  This appendix is specific\
    \ to those hosts\n   which use SMTP to exchange mail.\n   1.   Mapping between\
    \ O/R names and SMTP addresses\n      The mappings of Chapter 4 are to be used.\n\
    \   2.   Use of the ARPA Domain System\n      Whenever possible, domain-qualified\
    \ addresses should be be used to\n      specify encoded O/R names.  These domain\
    \ encodings naturally\n      should be independent of any routing information.\n\
    \   3.   Identification of gateways\n      The ARPA-Internet Network Information\
    \ Center (NIC) will maintain a\n      list of registered X.400 gateways in the\
    \ ARPA Internet.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix D -- Mappings Specific to Phonenet Mail
  contents:
  - "Appendix D -- Mappings Specific to Phonenet Mail\n   There are currently no mappings\
    \ specific to Phonenet Mail.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix E -- Mappings Specific to UUCP Mail
  contents:
  - "Appendix E -- Mappings Specific to UUCP Mail\n   Gatewaying of UUCP and X.400\
    \ is handled by first gatewaying the UUCP\n   address into RFC 822 syntax (using\
    \ RFC 976) [Horton86a] and then\n   gatewaying the resulting RFC 822 address into\
    \ X.400.  For example, an\n   X.400 address\n      Country         US\n      Organization\
    \    Xerox\n      Personal Name   John Smith\n   might be expressed from UUCP\
    \ as\n      inthop!gate!gatehost.COM!/C=US/O=Xerox/PN=John.Smith/\n   (assuming\
    \ gate is a UUCP-ARPA gateway and gatehost.COM is an\n   ARPA-X.400 gateway) or\n\
    \      inthop!gate!Xerox.COM!John.Smith\n   (assuming that Xerox.COM and /C=US/O=Xerox/\
    \ are equivalent.)\n   In the other direction, a UUCP address Smith@ATT.COM, integrated\
    \ into\n   822, would be handled as any other 822 address.  A non-integrated\n\
    \   address such as inthop!dest!user might be handled thought a pair of\n   gateways:\n\
    \      Country         US\n      ADMD            ATT\n      PRMD            ARPA\n\
    \      Organization    GateOrg\n      RFC-822         inthop!dest!user@gatehost.COM\n\
    \   or through a single X.400 to UUCP gateway:\n      Country         US\n   \
    \   ADMD            ATT\n      PRMD            UUCP\n      Organization    GateOrg\n\
    \      UUCP            inthop!dest!user\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: Appendix F -- Format of Address Mapping Tables
  contents:
  - "Appendix F -- Format of Address Mapping Tables\n   There is a need to specify\
    \ the association between the domain and\n   X.400 namespaces described in 4.2.1.\
    \  This is defined as a table\n   syntax, but the syntax is defined in a manner\
    \ which makes it suitable\n   for use with domain nameservers (such as the DARPA\
    \ Domain nameservers\n   or the UK NRS).  The symmetry of the mapping is not clear,\
    \ so a\n   separate table is specified for each direction.  For domain -> X.400:\n\
    \      domain-syntax \"#\" dmn-orname \"#\"\n      For example:\n      AC.UK#PRMD$DES.ADMD$BT.C$UK#\n\
    \      XEROX.COM#O$Xerox.ADMD$ATT.C$US#\n   For X.400 -> domain:\n      dmn-orname\
    \ \"#\" domain-syntax \"#\"\n   EBNF.domain-syntax will be interpreted according\
    \ to RFC 920.\n   EBNF.dmn-orname will have components ordered as defined in section\n\
    \   4.2.1, and with the most significant component on the RHS.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: References
  contents:
  - "References\n   Bonacker85a.\n      K.H. Bonacker, U. Pankoke-Babatz, and H. Santo,\
    \ \"EAN - Conformity\n      to X.400 and DFN-Pflichtenheft,\" GMD (Gesellschaft\
    \ fur Mathematik\n      und Datenverarbeitung) report, June 1985.\n   CCITT84a.\n\
    \      CCITT SG 5/VII, \"Recommendations X.400,\" Message Handling Systems:\n\
    \      System Model - Service Elements, October 1984.\n   CCITT84b.\n      CCITT\
    \ SG 5/VII, \"Recommendations X.411,\" Message Handling Systems:\n      Message\
    \ Transfer Layer, October 1984.\n   CCITT84c.\n      CCITT SG 5/VII, \"Recommendations\
    \ X.420,\" Message Handling Systems:\n      Interpersonal Messaging User Agent\
    \ Layer, October 1984.\n   CCITT84d.\n      CCITT SG 5/VII, \"Recommendations\
    \ X.409,\" Message Handling Systems:\n      Presentation Transfer Syntax and Notation,\
    \ October 1984.\n   CEN/CENELEC/85a.\n      CEN/CENELEC/Information Technology/Working\
    \ Group on Private\n      Message Handling Systems, \"FUNCTIONAL STANDARD A/3222,\"\
    \n      CEN/CLC/IT/WG/PMHS N 17, October 1985.\n   Crocker82a.\n      D.H. Crocker,\
    \ \"Standard of the Format of ARPA Internet Text\n      Messages,\" RFC 822, August\
    \ 1982.\n   Horton85a.\n      M.R. Horton, \"Draft Standard for ARPA/MHS Addressing\
    \ Gateways,\"\n      AT&T Bell Laboratories, October 1985.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   Horton86a.\n      M.R. Horton, \"UUCP Mail\
    \ Interchange Format Standard\", RFC 976,\n      February 1986.\n   ICL84a.\n\
    \      ICL, \"Comparison of service elements of Grey Book Mail and X.400,\"\n\
    \      Mailgroup Note 18: Extract from unpublished report for ITSU\n      (Information\
    \ Technology Standards Unit), July 1984.\n   Kille84a.\n      S.E. Kille, (editor),\
    \ JNT Mail Protocol (revision 1.0), Joint\n      Network Team, Rutherford Appleton\
    \ Laboratory, March 1984.\n   Kille84b.\n      S.E. Kille, \"Gatewaying between\
    \ RFC 822 and JNT Mail,\" JNT\n      Mailgroup Note 15, May 1984.\n   Kille86a.\n\
    \      S.E. Kille, \"O/R Names in the UK Academic Community,\" UK Working\n  \
    \    Document, March 1986.\n   Larmouth83a.\n      J. Larmouth, \"JNT Name Registration\
    \ Technical Guide,\" Salford\n      University Computer Centre, April 1983.\n\
    \   Neufeld85a.\n      G. Neufeld, J. Demco, B. Hilpert, and R. Sample, \"EAN:\
    \ an X.400\n      message system,\" in Second International Symposium on Computer\n\
    \      Message Systems, Washington, pp. 1-13, North Holland,\n      September\
    \ 1985.\n   Postel82a.\n      J. Postel, \"Simple Mail Transfer Protocol,\" RFC\
    \ 821, August 1982.\n   Postel84a.\n      J. Postel and J. Reynolds, \"Domain\
    \ Requirements,\" RFC 920,\n      October 1984.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - "Mapping between X.400 and RFC 822\n   Rose85a.\n      M.T. Rose, \"Mapping Service\
    \ Elements between ARPA and MHS,\" Draft\n      proposal, October 1985.\n   Rose85b.\n\
    \      M.T. Rose and E.A. Stefferud, \"Proposed Standard for Message\n      Encapsulation,\"\
    \ RFC 934, January 1985.\n"
- title: RFC 987                                                        June 1986
  contents:
  - 'RFC 987                                                        June 1986

    '
- title: Mapping between X.400 and RFC 822
  contents:
  - 'Mapping between X.400 and RFC 822

    '
- title: 'Notes:'
  contents:
  - "Notes:\n   <0>  UNIX is a trademark of Bell Laboratories.\n   <1>  The term gateway\
    \ is used to describe a component performing the\n        protocol mappings between\
    \ RFC 822 and X.400.  This is standard\n        usage amongst mail implementors,\
    \ but should be noted carefully\n        by transport and network service implementors.\
    \  (Sometime called\n        a \"mail relay\".)\n   <2>  If the remote protocol\
    \ is JNT Mail, a notification may also be\n        sent by the recipient UA.\n\
    \   <3>  The asymmetry occurs where an ASCII string contains the sequence\n  \
    \      EBNF.ps-encoded-char.  This would be mapped directly to\n        PrintableString,\
    \ but the reverse mapping would be to the value\n        implied by the sequence.\n\
    \   <4>  It might be suggested that for reasons of elegance,\n        EBNF.ps-delim\
    \ (left parenthesis) is encoded as\n        EBNF.ps-encoded-char. This is not\
    \ done, as it it would never be\n        possible to represent a PrintableString\
    \ containing the character\n        \"(\" in ASCII.  This is because an \"(\"\
    \ in ASCII would be mapped\n        to the encoding in PrintableString.\n   <5>\
    \  In practice, a gateway will need to parse various illegal\n        variants\
    \ on 822.date-time.  In cases where 822.date-time cannot\n        be parsed, it\
    \ is recommended that the derived UTCTime is set to\n        the value at the\
    \ time of translation.\n   <6>  P2.ORname is defined as P1.ORName.\n   <7>  This\
    \ recommendation may change in the light of CCITT or\n        CEN/CENELEC guidelines\
    \ on the use of initials.\n   <8>  It would be possible to use a ForwardedIPMessage\
    \ for these\n        fields, but the semantics are (arguably) slightly different,\
    \ and\n        it is probably not worth the effort.\n   <9>  Although this violates\
    \ chapter 1, part 4, principles 2 and 3, it\n        is suggested that this is\
    \ justified by principle 1.\n"
