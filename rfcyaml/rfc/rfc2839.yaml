- title: __initial_text__
  contents:
  - '                        Internet Kermit Service

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document describes a new file transfer service for the Internet\n\
    \   based on Telnet Protocol for option negotiation and Kermit Protocol\n   for\
    \ file transfer and management.  The Internet Kermit Service\n   provides access\
    \ to both authenticated and anonymous users.  The use\n   of Kermit protocol over\
    \ a Telnet connection provides several\n   advantages over FTP, including easy\
    \ traversal of firewalls, transfers\n   over multiple transports, and security\
    \ via a combination of supported\n   Telnet authentication and encryption option\
    \ negotiations, plus\n   significant functional benefits.  While this document\
    \ describes a new\n   service for the Internet, the clients for this service already\
    \ exist\n   on most platforms in the form of Telnet clients that support the\n\
    \   Kermit file transfer protocol.  These clients are available not only\n   from\
    \ Columbia University's Kermit Project but also numerous third\n   parties.\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n   1. INTRODUCTION ................................................\
    \ 2\n   2. BACKGROUND .................................................. 3\n \
    \  2.1. History ................................................... 3\n   2.2.\
    \ Motivation ................................................ 4\n   3. THE INTERNET\
    \ KERMIT SERVICE MODEL ........................... 7\n   3.1. Server-Side Kermit\
    \ Server ................................. 7\n   3.2. Client-Side Kermit Server\
    \ ................................. 8\n   3.3. Loosely Coupled Operation .................................\
    \ 9\n   4. SECURITY CONSIDERATIONS .....................................10\n \
    \  4.1. AUTHENTICATION ............................................10\n   4.1.1.\
    \ Telnet Authentication ...................................10\n   4.1.2. Telnet\
    \ over TLS option ..................................11\n   4.1.3. Plaintext Authentication\
    \ via Kermit REMOTE LOGIN ........11\n   4.1.4. Plaintext Authentication via Command\
    \ Prompt .............11\n   4.1.5. Anonymous Login .........................................12\n\
    \   4.2. ENCRYPTION (PRIVACY) ......................................12\n   4.2.1\
    \  Telnet Encryption .......................................12\n   4.2.2  Telnet\
    \ Start_TLS ........................................12\n   5. SERVICES ....................................................13\n\
    \   5.1. Features for System Administrators ........................13\n   5.2.\
    \ Features for Users ........................................14\n   5.3. User\
    \ Interface ............................................16\n   6. REFERENCES ..................................................18\n\
    \   7. AUTHORS' ADDRESSES ..........................................19\n   8.\
    \ Full Copyright Statement ....................................20\n"
- title: PREFACE
  contents:
  - "PREFACE\n   This document describes an Internet Kermit Service (IKS) which\n\
    \   provides an alternative to FTP for the transfer of files.  This\n   service\
    \ is based upon both the TELNET protocol and the Kermit file\n   transfer protocol.\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   The Internet Kermit Service:\n   1. Provides direct access\
    \ to Kermit file transfer and management\n      services without requiring the\
    \ user to first login to a shell\n      account;\n   2. Provides Kermit file transfer\
    \ and management services to anonymous\n      users;\n   3. Provides services\
    \ to all Telnet clients that support Kermit file\n      transfer protocol via\
    \ a simple, predictable, scriptable, and\n      well-documented textual interface;\n\
    \   4. Provides direct and tightly-coupled access to a Kermit server when\n  \
    \    requested via the Telnet Kermit Option [TKO].\n   This memo assumes knowledge\
    \ of Transmission Control Protocol, the\n   Telnet Protocol [TEL], the Kermit\
    \ File Transfer Protocol [KER,PRF],\n   Telnet Kermit Option [TKO], and the commands\
    \ and features of Kermit\n   software [CKB,CMG,K95].\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in RFC 2119 [BCP].\n   Definitions:\n   Kermit server\n\
    \      A software program that is ready to accept and act upon commands\n    \
    \  in the form of well-defined Kermit packets [KER].\n   Kermit client\n     \
    \ A software program that receives requests through its user\n      interface\
    \ from a human user (or a script or other source) and\n      translates them to\
    \ command packets, which it sends to a Kermit\n      server, thus initiating a\
    \ Kermit protocol transaction such as the\n      transfer of one or more files.\n"
- title: 2. BACKGROUND
  contents:
  - '2. BACKGROUND

    '
- title: 2.1. History
  contents:
  - "2.1. History\n   \"Kermit\" is the name of an extensible platform- and medium-\n\
    \   independent file transfer and management protocol [KER,PRF] and of a\n   suite\
    \ of communications software programs that implement it and\n   integrate it with\
    \ other communications functions [CMG,CKB,K95].\n   The Kermit protocol was first\
    \ developed at Columbia University in New\n   York City in 1981 for transferring\
    \ files without errors between\n   diverse types of computers over potentially\
    \ hostile communication\n   links.  Since 1981, the Kermit Project at Columbia\
    \ University has\n   expanded the protocol, developed communications software\
    \ that\n   implements it upon key platforms, and worked with volunteer\n   programmers\
    \ at other sites adapting Kermit protocol to other\n   platforms or communication\
    \ methods.  The Kermit Project also serves\n   as the central point of Kermit\
    \ software development, support,\n   information, and distribution throughout\
    \ the world.\n   Kermit software is now available for nearly every computer and\n\
    \   operating system in existence.  The major features of the most\n   popular\
    \ Kermit programs are:\n   -  Connection establishment and maintenance for a variety\
    \ of\n      connection methods including direct serial, dialup, TCP/IP, X.25,\n\
    \      DECnet, and NETBIOS.\n   -  Terminal emulation.\n   -  Error-free transfer\
    \ of both text and binary files, individually or\n      in groups.\n   -  Character-set\
    \ translation during both terminal emulation and\n      text-mode file transfer\
    \ -- a unique feature of Kermit software.\n   -  Remote file management through\
    \ the client/server protocol.\n   -  A powerful and portable scripting language\
    \ allowing complete\n      automation of any task that can be performed manually.\n\
    \   Kermit's command and script language is consistent across all\n   platforms\
    \ and communication methods, thus offering a unified method\n   for accomplishing\
    \ a wide range of communication tasks manually or\n   under script control.\n\
    \   A single Kermit program combines the functions of many different\n   programs\
    \ such as uucp, cu, tip, telnet, rlogin, ftp, iconv, and\n   expect:  it is a\
    \ Telnet and Rlogin client that can also transfer\n   files; it is a file transfer\
    \ program that can also convert character\n   sets; it is a dialout program that\
    \ can use dialing directories and\n   understands country codes and area codes;\
    \ it is fully scriptable; it\n   offers both client/server and interactive modes\
    \ of operation.  In its\n   desktop versions (particularly for DOS, Windows, and\
    \ OS/2) it offers\n   all the features of communications software that are usually\
    \ lacking\n   from Internet client software (key mapping, colors, scrollback,\
    \ mouse\n   functions, printer control, etc)\n   Kermit software is widely used\
    \ throughout the academic, government,\n   and corporate spheres, both in the\
    \ USA and internationally.\n   In addition to the Kermit software developed and/or\
    \ distributed by\n   the Kermit Project at Columbia University, hundreds of other\
    \ software\n   products -- commercial, shareware, and freeware -- also include\
    \ some\n   level of support for the Kermit protocol.  Thus there are hundreds,\n\
    \   perhaps thousands, of independent and interoperable Kermit protocol\n   implementations\
    \ based upon the open Kermit protocol specification\n   [KER].\n   The Internet\
    \ has formed the primary mechanism by which users and\n   developers of Kermit\
    \ software have collaborated to produce feature\n   and command sets that continually\
    \ evolve to meet their needs as\n   technology changes.\n"
- title: 2.2. Motivation.
  contents:
  - "2.2. Motivation.\n   Kermit protocol and software makes connections from one\
    \ computer to\n   another and transfers data between them.  Countless people \"\
    live\" in\n   Kermit all day long; as a customizable Telnet or Rlogin (or serial\n\
    \   communication) client with a wide selection of terminal emulations\n   and\
    \ convenience features, it is their window onto the Internet.\n   Others use it\
    \ in more creative ways, including some that involve key\n   parts of the Internet,\
    \ e.g. in batch or cron jobs that update news or\n   Web servers or fetch email,\
    \ or to monitor routers, terminal servers,\n   and hubs and dial pagers when faults\
    \ are detected.  It is used by\n   vendors of telecommunications equipment for\
    \ remote diagnosis,\n   patching, and updates.  Telecom managers often use Kermit\
    \ scripts to\n   configure PBXs, muxes, routers, or terminal servers.  In the\
    \ world of\n   commerce, Kermit is widely used for financial transactions, EDI,\n\
    \   medical claim submission, and so forth.  It is used with mobile\n   barcode\
    \ readers in warehousing and inventory applications.  It is\n   found in US Postal\
    \ Service sorting and scanning equipment.  It\n   connects many of the logistics\
    \ and supply systems throughout the\n   military.  It is found in fast-food restaurant\
    \ cash registers,\n   milling and die-cutting machines, textile looms and cutters,\
    \ printing\n   presses, and medical diagnostic equipment.  It was the communications\n\
    \   backbone of the 1994 Brazilian national election -- the largest in\n   history.\n\
    \   And yet there has never been a strong, explicit connection of Kermit\n   with\
    \ the Internet.  In the early years, Kermit acted as a kind of\n   do-it-yourself\
    \ network, enabling ordinary users to make connections\n   that were not already\
    \ there, and for some years was the predominant\n   method of connecting a personal\
    \ computer to the ARPAnet (e.g. by\n   dialing a TAC).\n   Nowadays, however,\
    \ with so many of the world's computers on the\n   Internet, the role of Kermit\
    \ software and protocol is changing.\n   Kermit users on the network would like\
    \ to have the features,\n   functions, and interface they are accustomed to --\
    \ especially the\n   automation features -- available for use in settings where\
    \ presently\n   only tools like FTP are available -- and even more so in situations\n\
    \   where standard software like FTP can't be used.\n   An Internet Kermit Service\
    \ can fill this role, and augment the data\n   transfer power and flexibility\
    \ of other Internet applications such as\n   Web browsers:\n   -  Like FTP, Kermit\
    \ provides a service that can be accessed from many\n      different platforms\
    \ with a consistent set of commands, but unlike\n      FTP, these commands include\
    \ programming constructions such as\n      variables, arrays, looping and selection\
    \ mechanisms, and local and\n      remote procedure calls.\n   -  Like FTP, Kermit\
    \ provides both text- and binary-mode data\n      transfer, as well as file management\
    \ capabilities.  But Kermit\n      also offers numerous features lacking from\
    \ FTP, such as\n      character-set translation, flexible file selection mechanisms,\n\
    \      attribute preservation, and so on (see Section 5.3 for a longer\n     \
    \ list).\n   -  Unlike standard FTP, Kermit can transfer data through multiple\n\
    \      firewalls, proxies, and network address translators (NATs) on a\n     \
    \ single port.\n   -  Unlike FTP, Kermit can transfer data across a combination\
    \ of\n      transports (e.g. dial-up to a terminal server and thence to an\n \
    \     Internet host).\n   -  Authentication and data transfer can take place over\
    \ secure\n      connections (mutually authenticated and encrypted) using\n   \
    \   established Telnet authentication and encryption options.\n   -  Unlike traditional\
    \ Kermit use over Telnet, anonymous access is\n      possible, and the considerable\
    \ overhead of the intervening Telnet\n      server and pseudoterminal service\
    \ is eliminated.\n   Until now the primary obstacles to an Internet Kermit Service\
    \ have\n   been:\n   -  Issues of authentication, privacy, and anonymous access.\
    \  These\n      have been addressed in our implementation, as described Section\
    \ 4\n      of this document.\n   -  Issues of coordination and control.  A Kermit\
    \ software program can\n      be in any of several \"modes\": at its command prompt\
    \ or menu,\n      awaiting commands from the user; in terminal mode, in which\
    \ the\n      user's keystrokes are sent to the remote computer or service; or\n\
    \      in protocol mode, in which two Kermit programs communicate via\n      well-defined\
    \ Kermit packets [KER].  Commands or operations valid\n      in one mode do not\
    \ necessarily work in another.  Until now, it has\n      been the user's responsibility\
    \ to switch modes at one or both ends\n      of the connection as needed.  A companion\
    \ document [TKO] to this\n      one specifies a mechanism to closely couple the\
    \ client and server\n      via Telnet protocol negotiations, allowing each to\
    \ know the\n      other's state and to switch to the appropriate mode automatically\n\
    \      so a valid and useful relationship obtains at all times.\n   -  Lack of\
    \ a standard TCP port.  The \"registered\" port 1649 was\n      assigned by IANA\
    \ for this purpose (27 September 1995) and is named\n      \"Kermit\". (renamed\
    \ from \"Inspect\".)\n"
- title: 3. THE INTERNET KERMIT SERVICE MODEL
  contents:
  - "3. THE INTERNET KERMIT SERVICE MODEL\n   The Internet Kermit Service (IKS) uses\
    \ a standard Telnet [TEL]\n   connection, in which all Telnet rules apply.  Unlike\
    \ FTP, which\n   requires additional TCP connections, IKS uses a single channel\
    \ for\n   both signaling and data transfer.  The connection is multiplexed via\n\
    \   (a) Telnet options, and (b) Kermit protocol messages.  This allows\n   existing\
    \ Telnet clients that also support the Kermit protocol,\n   whether or not they\
    \ support the Telnet Kermit Option [TKO], to use\n   the IKS and take advantage\
    \ of all relevant Telnet options including\n   authentication and encryption.\n\
    \   The system Internet services daemon (e.g. inetd) waits for a\n   connection\
    \ on the Kermit socket (1649) and then starts the IKS on the\n   new connection.\
    \  The IKS performs the familiar Telnet negotiations\n   including the Telnet\
    \ Kermit option.  Unlike a standard Telnet server,\n   the IKS does not support\
    \ the ability to present the user with an\n   interactive system shell.  The Kermit\
    \ socket is used only for file\n   transfer and management functions provided\
    \ by Kermit file transfer\n   protocol and the Kermit script language.\n   Once\
    \ the connection is established, the Telnet Kermit Option is\n   negotiated in\
    \ both directions.  The results determine which of the\n   following configurations\
    \ is used by the Telnet client and Server:\n    . Server-side Kermit Server (SKS)\n\
    \    . Client-side Kermit Server (CKS)\n    . No Kermit Server (NKS)\n   Different\
    \ procedures and functions apply to each configuration.  The\n   configuration\
    \ may be changed at any time by Telnet Kermit Option\n   subnegotiations, which\
    \ assure that the Telnet client and server are\n   always in compatible states.\n\
    \   The three configurations are described in the following sections.\n"
- title: 3.1. Server-Side Kermit Server
  contents:
  - "3.1. Server-Side Kermit Server\n   In the Server-Side Kermit Server (SKS) configuration,\
    \ the Telnet\n   server is the Kermit server and the Telnet client is the Kermit\n\
    \   client.  This configuration is used when both Telnet client and IKS\n   support\
    \ the Telnet Kermit Option and the IKS sends WILL KERMIT to the\n   Telnet client\
    \ and receives DO KERMIT from the Telnet client [TKO].\n   In this case, the IKS\
    \ immediately starts a Kermit server and reports\n   this to the Telnet client\
    \ with a Telnet KERMIT START-SERVER\n   subnegotiation.\n   The SKS configuration\
    \ is appropriate when the user wishes to interact\n   only with the Telnet client's\
    \ commands or menus.\n   If authentication was not performed with one of the Telnet\n\
    \   Authentication Option protocols, the Kermit server rejects all Kermit\n  \
    \ protocol operations (except REMOTE LOGIN, REMOTE HELP, REMOTE EXIT,\n   BYE,\
    \ or FINISH -- that is, the ones that request help, that log in,\n   that close\
    \ the connection, or that change the status of the\n   connection) until:\n  \
    \ - A Kermit REMOTE LOGIN command successfully authenticates the user;\n   - The\
    \ login retry limit is reached;\n   - A Kermit BYE or REMOTE EXIT command is received,\
    \ which closes the\n      connection;\n   - A Kermit FINISH command or a Telnet\
    \ KERMIT REQ-KERMIT-STOP\n      subnegotiation is received to request the IKS\
    \ exit from Kermit\n      server mode.  At this point, the IKS can either exit\
    \ and close the\n      connection or issue an interactive login prompt, depending\
    \ on how\n      it was started or configured by the system administrator.\n  \
    \ Once the user is authenticated:\n   - The Telnet client configures itself for\
    \ Kermit client/server\n      operation, with itself as the Kermit client, communicating\
    \ with\n      the server only by Kermit packets, and optionally adjusting its\n\
    \      menus or commands to eliminate functions (such as terminal\n      emulation)\
    \ that make no sense in this context.\n   - The relationship persists until the\
    \ Telnet client and IKS agree to\n      terminate the Kermit server via Kermit\
    \ protocol commands (BYE,\n      FINISH, or REMOTE EXIT), or by Telnet Kermit\
    \ Option\n      subnegotiation, or by closing the connection.\n"
- title: 3.2. Client-Side Kermit Server
  contents:
  - "3.2. Client-Side Kermit Server\n   In the Client-Side Kermit Server (CKS) configuration,\
    \ the Telnet\n   server is the Kermit client, and the Telnet client is the Kermit\n\
    \   server.  This configuration is used when the IKS has sent WONT KERMIT\n  \
    \ or SB KERMIT STOP-SERVER, and the Telnet Client has sent WILL KERMIT\n   and\
    \ SB KERMIT START-SERVER, indicating that it is prepared to accept\n   and process\
    \ Kermit protocol packets.\n   In the CKS configuration, the Telnet client assumes\
    \ the role of\n   Kermit server by virtue of its ability to recognize and process\n\
    \   Kermit protocol packets in its terminal emulator.  Thus the Telnet\n   client\
    \ must not send WILL KERMIT or the KERMIT START-SERVER\n   subnegotiation unless\
    \ its terminal emulator is capable of recognizing\n   Kermit packets.\n   If the\
    \ IKS is at top command level (as opposed to executing a\n   script), or when\
    \ it reaches top level after finishing a script, it\n   issues its interactive\
    \ command prompt.\n   At this point, the user may type commands or send scripted\
    \ commands\n   to the IKS command prompt.  When a data-transfer command (such\
    \ as\n   SEND) is issued by the user at the IKS prompt, a Kermit packet is\n \
    \  transmitted and recognized by the Telnet client, causing it to\n   automatically\
    \ perform the requested action (e.g. receive a file), and\n   then resume its\
    \ previous mode (terminal emulation or script\n   execution) when the data transfer\
    \ is complete.\n   Thus, in the CKS configuration, data transfers are initiated\
    \ by the\n   IKS rather than by the Telnet client.  This configuration is useful\n\
    \   when the user prefers the command interface or repertoire of the\n   server\
    \ to that of the client.\n   If the IKS sends a Telnet KERMIT START-SERVER subnegotiation,\
    \ the\n   relationship switches automatically to Server-Side Kermit Server\n \
    \  (Section 3.1), in which the Telnet client is the Kermit client and\n   the\
    \ Telnet server is the Kermit server.\n   If the Telnet client sends a KERMIT\
    \ STOP-SERVER subnegotiation, the\n   connection switches to No Kermit Server\
    \ (Section 3.3) and the IKS\n   issues its command prompt.  At this point, neither\
    \ side is a Kermit\n   server, and both sides may optionally disable Kermit protocol\n\
    \   commands.  Subsequent user action can designate one side or the other\n  \
    \ as the Kermit server, as desired.\n"
- title: 3.3. No Kermit Server
  contents:
  - "3.3. No Kermit Server\n   If both Telnet client and IKS send WONT KERMIT or SB\
    \ KERMIT STOP-\n   SERVER, or if the Kermit client and server are connected across\n\
    \   multiple hosts or transports, thus precluding end-to-end Telnet\n   negotiation,\
    \ a Kermit server is not known to be available.  In the\n   KERMIT STOP-SERVER\
    \ case, the Kermit partners can later switch back to\n   SKS or CKS, but in the\
    \ other two cases, there is no such signaling\n   and loose coupling characterizes\
    \ the entire session.\n   In the No Kermit Server (NKS) configuration, the IKS\
    \ presents a\n   command prompt to the Telnet client.  As in the Client-Side Kermit\n\
    \   Server configuration, plain-text commands are issued to the IKS.\n   In the\
    \ loosely coupled NKS configuration, the Telnet client does not\n   know the state\
    \ of the Telnet server, and so can not automatically\n   adjust its commands and\
    \ menus to present only valid choices, or\n   automatically change its state to\
    \ complement the server's; it is the\n   user's responsibility to assure that\
    \ the \"mode\" (command prompt,\n   terminal emulation, server command wait) of\
    \ each Kermit partner is\n   appropriate for each action.  Thus an Internet Kermit\
    \ Server appears\n   as an ordinary remote Kermit program to any Telnet client\
    \ that does\n   not implement the Telnet Kermit Option, or in which this feature\
    \ is\n   disabled or can not be used.\n   The NKS configuration allows successful\
    \ manual operation of the IKS\n   through Telnet clients that do not support the\
    \ Telnet Kermit Option.\n   The Telnet client might or might not support Kermit\
    \ \"autodownload\"\n   and \"autoupload\"; if it does not, then the user is forced\
    \ to manually\n   issue command on both sides of the connection in the traditional\
    \ and\n   familiar manner [CKB,CMG,K95].\n"
- title: 4. SECURITY CONSIDERATIONS
  contents:
  - '4. SECURITY CONSIDERATIONS

    '
- title: 4.1. AUTHENTICATION
  contents:
  - "4.1. AUTHENTICATION\n   Authentication is provided via one or more of the following\
    \ methods:\n    - The Telnet AUTHENTICATION option;\n    - The Telnet START_TLS\
    \ option;\n    - Plaintext userid/password verification.\n"
- title: 4.1.1. Telnet Authentication option
  contents:
  - "4.1.1. Telnet Authentication option\n   The use of one of the many Telnet authentication\
    \ option methods\n   removes the need to transmit passwords in plaintext across\
    \ public\n   networks.  In addition, the exchange of user authentication\n   information\
    \ often provides a shared secret that can be used with the\n   Telnet Encryption\
    \ Option protocols to encrypt the connection in one\n   or both directions.\n\
    \   Telnet authentication may also be used in conjunction with the Telnet\n  \
    \ START_TLS option to negotiate end user identity over the encrypted\n   and host\
    \ authenticated TLS channel.\n   The IKS currently supports Kerberos 4, Kerberos\
    \ 5, Secure Remote\n   Password and Microsoft NTLM authentication methods via\
    \ the Telnet\n   AUTH option.\n"
- title: 4.1.2. Telnet over TLS option
  contents:
  - "4.1.2. Telnet over TLS option\n   The Telnet START_TLS option provides for the\
    \ negotiation and\n   establishment of a TLS version 1 session after the initial\
    \ telnet\n   connection.  The TLS connection provides host to client\n   authentication\
    \ via the use of X.509 certificate chains.  TLS also\n   supports optional client\
    \ to host authentication using host verified\n   X.509 certificates which may\
    \ be used to authenticate a userid\n   provided by the client or be mapped to\
    \ a userid based upon properties\n   of the certificate.\n"
- title: 4.1.3. Plaintext Authentication via Kermit REMOTE LOGIN
  contents:
  - "4.1.3. Plaintext Authentication via Kermit REMOTE LOGIN\n   In the Server-Side\
    \ Kermit Server configuration, if the client is not\n   yet authenticated, the\
    \ client must log in using a REMOTE LOGIN\n   command, in which a Kermit packet\
    \ containing user ID and password in\n   clear text is sent from the Telnet client\
    \ to the Telnet server, which\n   then calls upon local mechanisms to authenticate\
    \ the user.  Any\n   packets other than login (or REMOTE HELP, REMOTE EXIT, FINISH,\
    \ or\n   BYE) packets are rejected (returned with an error message) until the\n\
    \   user is authenticated.  If the number of unsuccessful login attempts\n   exceeds\
    \ the limit, the connection is closed.  Many Kermit client\n   programs support\
    \ this login method already.\n   This method should be avoided whenever possible.\
    \  If plaintext\n   passwords are used, they should only be sent after the Telnet\
    \ START-\n   TLS option has been negotiated (see 4.2.2).  Otherwise, passwords\
    \ are\n   open to packet sniffing.\n"
- title: 4.1.4. Plaintext Authentication via Command Prompt
  contents:
  - "4.1.4. Plaintext Authentication via Command Prompt\n   In the Client-Side Kermit\
    \ Server and No Kermit Server configurations,\n   the server presents the user\
    \ with a plain-text interactive interface\n   that begins with the server issuing\
    \ \"Username:\" and \"Password:\"\n   prompts, just as if the user were logging\
    \ in to a multiuser\n   timesharing system such as VMS or UNIX.  When a password\
    \ is not\n   required an empty response can be given.  Invalid username-password\n\
    \   combinations result in a new series of prompts up to the login retry\n   limit,\
    \ and then disconnection.\n   This method should be avoided whenever possible.\
    \  If plaintext\n   passwords are used, they should only be sent after the Telnet\
    \ START-\n   TLS option has been negotiated (see 4.2.2).  Otherwise, passwords\
    \ are\n   open to packet sniffing.\n"
- title: 4.1.5. Anonymous Login
  contents:
  - "4.1.5. Anonymous Login\n   When the username is \"anonymous\" or \"ftp\", the\
    \ IKS behaves like an\n   anonymous ftp server, in a manner appropriate to the\
    \ underlying\n   platform.  In UNIX, for example, access is restricted to a designated\n\
    \   area of the file system.  A password might or might not be required,\n   according\
    \ to the preference of the site administrator.\n   If privacy is desired the Telnet\
    \ START-TLS option should be used (see\n   4.2.2).\n"
- title: 4.2.  ENCRYPTION (PRIVACY)
  contents:
  - "4.2.  ENCRYPTION (PRIVACY)\n   As the Internet becomes ever more public and susceptible\
    \ to\n   eavesdropping, it becomes increasingly necessary to provide methods\n\
    \   for private access to services.  Telnet provides two such mechanisms:\n  \
    \  . Telnet Encryption option\n    . Telnet START-TLS option\n"
- title: 4.2.1.  Telnet Encryption option
  contents:
  - "4.2.1.  Telnet Encryption option\n   The Telnet Encryption option, although it\
    \ has never achieved RFC\n   status, has been used for years in conjunction with\
    \ the Telnet Auth\n   option in Telnet clients and servers that support Kerberos\
    \ 4,\n   Kerberos 5, Secure Remote Password, and others.  The IKS currently\n\
    \   supports the following encryption methods under the Telnet Encryption\n  \
    \ option:\n    .  cast128_ofb64\n    .  cast5_40_ofb64\n    .  des_ofb64\n   \
    \ .  cast128_cfb64\n    .  cast5_40_cfb64\n    .  des_cfb64\n"
- title: 4.2.2. Telnet over TLS option
  contents:
  - "4.2.2. Telnet over TLS option\n   Transport Layer Security (TLS), the successor\
    \ to Secure Sockets Layer\n   (SSL), provides methods to implement Server authentication,\
    \ Client\n   authentication, and Transport Layer encryption.  Unlike Telnet\n\
    \   Encryption, Start-TLS does not require the use of Telnet\n   Authentication\
    \ in order to provide a private channel.  This means\n   that it can be used in\
    \ conjunction with plaintext passwords and\n   anonymous connections.\n"
- title: 5. SERVICES
  contents:
  - "5. SERVICES\n   The Internet Kermit Service includes features for both users\
    \ and\n   system administrators.  The IKS is incorporated into  the 7.0 release\n\
    \   of Columbia University's C-Kermit software, which is the \"master\"\n   Kermit\
    \ software program in terms of features and command language.\n   An overview\
    \ of C-Kermit can be found at:\n     http://www.columbia.edu/kermit/ckermit.html\n\
    \     http://www.kermit-project.org/ckermit.html\n   When C-Kermit is employed\
    \ as an Internet Kermit Service, it may offer\n   all its functions to \"real\"\
    \ users (those who are authenticated as\n   specific users), and a safe subset\
    \ of its functions to anonymous\n   users.\n   The Internet Kermit Service resembles\
    \ an FTP server in that it\n   performs its own authentication and uses a well-defined\
    \ protocol to\n   communicate with its client, but differs from the FTP server\
    \ by also\n   offering (at the system manager's discretion) an interactive user\n\
    \   interface to the Telnet client when it is in terminal mode.  It also\n   differs\
    \ from FTP in restricting all protocol messages and data\n   transfer to a single\
    \ socket connection.\n   An IKS has been deployed at Columbia University for worldwide\
    \ public\n   access to the Kermit FTP site:\n     telnet://kermit.columbia.edu:1649/\n\
    \     telnet://ftp.kermit-project.org:1649/\n"
- title: 5.1. Features for System Administrators
  contents:
  - "5.1. Features for System Administrators\n   The system administrator can supply\
    \ IKS configuration parameters as\n   command-line options or in a configuration\
    \ file, or both in\n   combination.  Such parameters include:\n    . Whether anonymous\
    \ logins are allowed.\n    . The file system or root directory to which anonymous\
    \ users are\n      restricted.\n    . Specification of permissions and other attributes\
    \ to be assigned\n      to files uploaded by anonymous users.\n    . Whether to\
    \ make session entries in system logs.\n    . Specific services to disable: reception\
    \ of files, sending of\n      files, sending of email, printing, changing of directories,\n\
    \      getting directory listings, deleting files, etc (see next\n      section).\n\
    \    . Whether access to the interactive command prompt is allowed.\n"
- title: 5.2. Features for Users
  contents:
  - "5.2. Features for Users\n   The IKS supports a wide range of services, including,\
    \ but not limited\n   to, the following:\n    . Authentication as a real user\
    \ or anonymously.\n    . Transmission of files to which read access is allowed.\n\
    \    . Reception of files into directories or devices to which write\n      access\
    \ is allowed.\n    . The ability to display a file on the client's screen.\n \
    \   . Ability to list files.\n    . Ability to change its working (default) directory.\n\
    \    . Ability to delete files to which write or delete access is\n      allowed.\n\
    \    . Ability to rename and copy files\n    . Ability to create and remove directories.\n\
    \    . The ability to route received files to a specified printer, or to\n   \
    \   send them as email to a specified address list.\n    . Client control of server\
    \ parameter settings, within limits\n      established by the server system administrator.\n\
    \    . Transmission of variables from client to server or vice versa.\n    . Remote\
    \ and local script execution.\n    . Remote and local procedure execution.\n \
    \  File transfer features include:\n    . Kermit text-mode transfers incorporate\
    \ not only record-format\n      conversion, but also character-set translation;\n\
    \    . Kermit can switch automatically between text and binary mode on a\n   \
    \   per-file basis when sending groups of files.\n    . A selection of file collision\
    \ options, including \"make backup copy\n      of existing file and accept incoming\
    \ file\", \"reject incoming\n      file\", \"accept incoming file only if newer\
    \ than existing file\",\n      etc.\n    . Numerous methods for selecting the\
    \ files to be transferred,\n      including pattern matching, lists of filenames\
    \ (or patterns),\n      exception lists, date and/or size ranges, etc.\n    .\
    \ Filename conversion and file renaming.\n    . Automatic directory creation if\
    \ elected and enabled.\n    . Standard mechanisms for directory traversal, allowing\
    \ transmission\n      of entire directory trees or other file hierarchies even\
    \ between\n      unlike file systems such as VMS, UNIX, and Windows.\n    . Atomic\
    \ file movement: optionally, the source file can be deleted\n      (or renamed,\
    \ or moved) when and only when it has been transferred\n      successfully.\n\
    \    . Kermit can retain file attributes including time stamps and\n      permissions\
    \ (at the user's or system administrator's discretion),\n      even between unlike\
    \ platforms;\n    . Recovery of interrupted transfers from the point of failure.\n\
    \    . File-transfer pipes and filters.\n   Script programming features include:\n\
    \    . Macros with parameter substitution.\n    . Built-in and user-defined variables\
    \ and arrays, with global or\n      local scope.\n    . Built-in and user-defined\
    \ functions.  Built-in functions include:\n          - String functions\n    \
    \      - Arithmetic functions\n          - Date / time functions\n          -\
    \ File functions\n    . Input search for multiple simultaneous targets.\n    .\
    \ IF-ELSE, WHILE, FOR, SWITCH, GOTO, C-like block structure.\n    . Every command\
    \ returns a completion status that may be tested and\n      used as a basis for\
    \ subsequent actions.\n"
- title: 5.3. User Interface
  contents:
  - "5.3. User Interface\n   The Internet Kermit Service uses the Kermit command and\
    \ script\n   language, as implemented in Columbia University's C-Kermit\n   communication\
    \ software [CKB].  This program and its command language\n   are portable to all\
    \ known varieties of UNIX, as well as to Windows\n   95/98/NT, OS/2, Digital (Open)VMS,\
    \ Stratus VOS, Data General AOS/VS,\n   Plan 9, OS-9, QNX, the Commodore Amiga,\
    \ and other platforms.  The\n   C-Kermit command language is a superset of that\
    \ of other Kermit\n   software programs including MS-DOS Kermit for DOS and Windows\
    \ 3.x,\n   IBM Mainframe Kermit for VM/CMS, MVS/TSO, CICS, and MUSIC, PDP-11\n\
    \   Kermit for RT-11, RSTS/E, RSX-11, and IAS, and dozens of other Kermit\n  \
    \ programs.\n   It is far beyond the scope of this document to enumerate, let\
    \ alone\n   describe, the commands and services of C-Kermit; this is the subject\n\
    \   of a 600-page book [CKB], augmented by hundreds of pages of online\n   material.\
    \  A brief overview is included here.\n   Commands are based on English words.\
    \  There is no plan at present to\n   support other natural languages (Italian,\
    \ Portuguese, Norwegian,\n   Russian, Hebrew, Japanese, Cherokee, etc) as alternative\
    \ bases for\n   command words, since this would reduce the portability of scripts.\n\
    \   However, since the command language includes a macro capability,\n   macros\
    \ may be defined to provide selected commands in different\n   languages if desired.\n\
    \   Certain commands can apply either locally or remotely, for example\n   \"\
    CD\" (Change Directory).  The convention is to prefix the command\n   with the\
    \ word REMOTE if it is to apply remotely.  Example: \"cd foo\"\n   changes to\
    \ the \"foo\" directory on the computer where the command was\n   given; \"remote\
    \ cd foo\" sends a Kermit packet to the Kermit server\n   requesting it to change\
    \ its directory to \"foo\".  The commands in this\n   category include:\n    \
    \ ASSIGN <variable> <value>      Assign a value to a variable.\n     CD <directory>\
    \                 Change working directory.\n     COPY <files> <destination> \
    \    Copy file(s)\n     DELETE <files>                 Delete file(s)\n     DIRECTORY\
    \ [ <pattern> ]        List file(s)\n     EXIT                           Exit\n\
    \     HELP [ <topic-or-command> ]    Display help text\n     MKDIR <directory>\
    \              Create a directory\n     PRINT <files>                  Print file(s)\n\
    \     PWD                            Print working directory\n     RENAME <old>\
    \ <new>             Rename file(s)\n     RMDIR <directory>              Remove\
    \ a directory\n     SET <parameter> <value>        Change a parameter's value\n\
    \     TYPE <file>                    Display the contents of a file\n   As a convenience,\
    \ REMOTE commands also have short synonyms: RASSIGN,\n   RCD, RCOPY, RDELETE,\
    \ and so forth.\n   The basic file transfer commands are:\n     SEND [ modifiers\
    \ ] <files>    Send file(s) (to server)\n     GET [ modifiers ] <files>     Get\
    \ file(s) (from server)\n   These commands take a file name, pattern, or list,\
    \ plus various\n   optional modifiers, including transfer mode specifiers (text,\n\
    \   binary), file selectors (date, size, exception list), aliasing, name\n   and\
    \ path options, disposition specifiers, and so on.\n   In addition to the commands\
    \ listed above, the following commands are\n   sent by the client to the server:\n\
    \     REMOTE QUERY                   Get value of variable or procedure\n    \
    \ BYE                            Log out and close the connection\n     FINISH\
    \                         Request the server leave server mode\n   Like all Kermit\
    \ client/server commands, these can be disabled if\n   desired.\n   Of course\
    \ there are numerous other commands with purely local effect,\n   such as the\
    \ many scripting commands.  These, plus all the commands\n   above, are fully\
    \ documented in [CKB].  The repertoire grows over\n   time, but never in a way\
    \ that invalidates existing scripts.\n   The system administrator can allow or\
    \ forbid access to any of these\n   features, and to the command language as a\
    \ whole.  In the latter\n   case, the IKS may be accessed only as a Kermit server,\
    \ by giving\n   commands to the client.\n"
- title: 6. REFERENCES
  contents:
  - "6. REFERENCES\n   [TKO] Altman, J. and F. da Cruz, \"Telnet Kermit Option\",\
    \ RFC 2840,\n         May 2000.\n   [BCP] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [KER] da Cruz, Frank, \"Kermit, A File Transfer Protocol\", Digital\n    \
    \     Press/ Butterworth Heinemann, Newton, MA (1987).  379 pages,\n         ISBN\
    \ 0-932376-88-6.\n   [CKB] da Cruz, Frank, and Christine M. Gianone, \"Using C-Kermit\"\
    ,\n         Second Edition, Digital Press / Butterworth-Heinemann, Woburn,\n \
    \        MA (1997).  622 pages, ISBN 1-55558-164-1.\n   [CMG] Gianone, Christine\
    \ M., \"Using MS-DOS Kermit\", Second Edition,\n         Digital Press / Butterworth-Heinemann,\
    \ Woburn, MA (1992). 345\n         pages, ISBN 1-55558-082-3.\n   [K95] Gianone,\
    \ Christine M., and Frank da Cruz, \"Kermit 95\", Manning\n         Publications,\
    \ Greenwich CT, (1996). 88 pages, ISBN 1-884777-\n         14-7.\n   [PRF] Huggins,\
    \ James K., \"Kermit Protocol - Formal Specification and\n         Verification\"\
    , in Boerger, E., \"Specification and Validation\n         Methods\", Oxford University\
    \ Press (1995).  ISBN 0-19-853854-5.\n   [FTP] Postel, J. and J. Reynolds, \"\
    File Transfer Protocol (FTP)\", STD\n         9, RFC 959, October 1985.\n   [TEL]\
    \ Postel, J. and J. Reynolds, \"Telnet Protocol Specification\",\n         STD\
    \ 8, RFC854, May 1983, et seq.; \"Telnet Option\n         Specification\", STD\
    \ 8, RFC855, May 1983, et seq.\n   [IAN] Internet Assigned Numbers Authority:\n\
    \         http://www.iana.org/numbers.html\n         http://www.iana.org/assignment/port-numbers\n"
- title: 7. AUTHORS' ADDRESSES
  contents:
  - "7. AUTHORS' ADDRESSES\n   Frank da Cruz\n   EMail: fdc@columbia.edu\n   Jeffrey\
    \ E. Altman\n   EMail:jaltman@columbia.edu\n   The Kermit Project\n   Columbia\
    \ University\n   612 West 115th Street\n   New York NY 10025-7799\n   USA\n  \
    \ http://www.columbia.edu/kermit/\n   http://www.kermit-project.org/\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
