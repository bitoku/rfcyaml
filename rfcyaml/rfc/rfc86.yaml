- title: __initial_text__
  contents:
  - "                 Proposal for a Network Standard Format\n             for a Data\
    \ Stream to Control Graphics Display\nA typical arrangement of facilities is to\
    \ have a console attached to a\ncomputer at the user's site, and to be using the\
    \ computational facilities\nof a remote site.  Information entered by the user\
    \ is transmitted to the\nremote Host, and output from the remote Host is transmitted\
    \ back to the\nlocal user.  In this proposal I am concerned with specifying the\
    \ form of\nthe output stream for the case that the output portion of the console\
    \ is a\ntypical refresh display with point, vector and character drawing capability.\n\
    Devices in this class include the DEC 338, DEC 340, IBM 2250, and IMLAC\nPDS-1.\n\
    It must be understood that this proposal is illustrative only, and knowingly\n\
    avoids important issues.  Its main purpose is to provide a basis for dis-\ncussion\
    \ and development.\nIn order to specify the semantices of the network standard\
    \ graphics data\nstream (NGDS), I will postulate\n   1.   a network standard display\
    \ list (NGDL)\n   2.   a network standard stream interpreter (NGSI)\n   3.   a\
    \ network standard list interpreter (NGLI), also called the\n        display controller,\
    \ and\n   4.   a network standard screen (NGS)\nNGSI is a process which modifies\
    \ the NGDL according to inputs in the NGDS.\nThe NGDL is the display list for\
    \ the NGLI; the NGLI executes the NGDL and\ncontrols the beam which writes on\
    \ the NGS.\nThe NGS is square, has horizontal and vertical sides, and positions\
    \ on it\nare specified by an ordered pair of unsigned 16 bit fractions.  The first\n\
    fraction specifies the horizontal distance from the left hand edge, and\nthe second\
    \ specifies the vertical distance from the bottom edge.  The\nresolution of the\
    \ screen is unspecified.\nThe lack of specification of the resolution of the NGS\
    \ is intentional;\nprograms designers should not interpret this to mean that they\
    \ may impose\na particular requirement on the using system.  Thus the quality\
    \ of the\ndisplayed picture should degrade gradually with decreasing resolution.\n\
    The NGLI has primitives for moving the beam to a particular point, intensify-\n\
    ing a point, drawing a vector, or drawing a character.  Characters are\nassumed\
    \ to be not more than .015 screen width wide, and not more than .025\nscreen height\
    \ high.  When the beam is moved to a screen position before\ndrawing characters,\
    \ that position should be at the lower left hand corner\nof the first character\
    \ drawn.  The beam position after drawing a character\nis immediately to the right\
    \ of the character, properly positioned for another\ncharacter.  However, after\
    \ drawing one or more characters, the exact horizontal\nThe imprecise specification\
    \ of character size is intended to take cognizance\nof the existance of character\
    \ drawing hardware which is capable of producing\nonly one or a few character\
    \ sizes.  The particular proportions of .015 wide\nby .025 high provides for 67\
    \ characters to a line and 40 lines, and seems\nwell within the capability of\
    \ most displays in the class considered.  As in\nthe case of screen resolution,\
    \ variations in character drawing hardware\nshould cause only minor degradation\
    \ in the usefulness of the picture.\nThe character set intrepreted by the NGLI\
    \ is ASCII, excepting all form\ncontrol characters, but including the space character.\
    \  The tab, return\nand line feed functions should be simulated by explicit positioning\
    \ of the\nbeam.\nThe NGDL consists of a set of named and possibly null lists.\
    \  The names\nare 16 bit integers, and the name zero is the name of the chief\
    \ list.\nEach list is composed of zero of more display items.  An item is any\
    \ of\nthe following:\n   b)  \"Display vector from current position to xxxx,yyyy,\
    \ relative to\n        current origin\"\n   c)  \"Display current point\"\n  \
    \ d)  \"Display the following n characters:\n       c  c  ...c \"\n        1 \
    \ 2     n\n   e)  \"Execute list gggg with origin xxxx,yyyy relative to current\
    \ origin\"\nThe NGLI is constantly in a loop executing the chief list, the origin\
    \ of\nthe chief list is always <0,0>.  When the NGLI comes to the end of the\n\
    chief list, it returns to the top of it.  When the NGLI encounters a\ntype e item,\
    \ it suspends execution of the current list, set the new origin\nto <xxxx,yyyy>\
    \ + <the old origin>, and executes the list named gggg. When\nfinished with the\
    \ list, the old origin is restored and execution of the\nold list resumed.  The\
    \ NGLI is, therefore, a recursive interpreter, and\ntype e items are subroutine\
    \ calls.\nThere remains only the matter of the NGDS and the NGSI.  The NGDS is\
    \ parsed\ninto commands by the NGSI and each command is executed as soon as it\
    \ is\nrecognized.  The commands in the NGDS are in prefix form, consisting of\
    \ an\neight bit operation code followed by any arguments.  Only two commands\n\
    are defined: Erase and Replace.\nThe Erase command consists of a single zero-valued\
    \ opcode and no arguments.\nThe NGSI executes the Erase command by making all\
    \ lists into null lists.\nThe Replace command has an opcode of 1, followed by\
    \ a 16-bit list name,\nfollowed by an 8 bit subargument count, followed by the\
    \ indicated number\nof subarguments.  The NGSI executes the Replcae command by\
    \ deleteing all\nitems from the indicated list, and rebuilding the list from the\
    \ subarguments.\nThere are five kinds of subarguments, corresponding to the five\
    \ item types.\n                                      <dtype> | <etype>\n     \
    \       <atype>::= <a> <x> <y>\n            <btype>::= <b> <x> <y>\n         \
    \   <ctype>::= <c>\n            <dtype>::= <d> <n> <c> ... <c>\n             \
    \                       n\n            <etype>::= <e> <g> <x> <y>\n<a>, <b>, <c>,\
    \ <d>, and <e> are 8 bit bytes valued at 0, 1 ... 4,\nrespectively and corresponging\
    \ to the item types listed on page 4.\n            <x> and <y> are 16 bit numbers\n\
    \            <g> is a 16 bit list name\n            <n> is an 8 bit count\n  \
    \          <c> is an ASCII character code\n       [ This RFC was put into machine\
    \ readable form for entry ]\n         [ into the online RFC archives by Anand\
    \ Kumria 6/97 ]\n"
