- title: __initial_text__
  contents:
  - "                        Desired Enhancements to\n   Generic Security Services\
    \ Application Program Interface (GSS-API)\n                            Version\
    \ 3 Naming\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Generic Security Services API (GSS-API) provides a naming\n\
    \   architecture that supports name-based authorization.  GSS-API\n   authenticates\
    \ two named parties to each other.  Names can be stored\n   on access control\
    \ lists (ACLs) to make authorization decisions.\n   Advances in security mechanisms\
    \ and the way implementers wish to use\n   GSS-API require this model to be extended\
    \ for the next version of\n   GSS-API.  As people move within an organization\
    \ or change their\n   names, the name authenticated by GSS-API may change.  Using\
    \ some sort\n   of constant identifier would make ACLs more stable.  Some mechanisms,\n\
    \   such as public-key mechanisms, do not have a single name to be used\n   across\
    \ all environments.  Other mechanisms, such as Kerberos, may\n   include group\
    \ membership or role information as part of\n   authentication.  This document\
    \ motivates extensions to GSS-API naming\n   and describes the extensions under\
    \ discussion.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Kerberos Naming .................................................3\n  \
    \ 3. X.509 Names .....................................................4\n   4.\
    \ Composite Names .................................................5\n      4.1.\
    \ Usage of Name Attributes ...................................6\n      4.2. Open\
    \ Issues ................................................6\n      4.3. Handling\
    \ gss_export_name ...................................7\n   5. Credential Extensions\
    \ ...........................................7\n   6. Mechanisms for Export Name\
    \ ......................................8\n   7. Selection of Source Identity\
    \ ....................................8\n   8. Compatibility with GSS-API V2 ...................................9\n\
    \   9. Security Considerations .........................................9\n  \
    \ 10. Acknowledgements ..............................................10\n   11.\
    \ Informative References ........................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Generic Security Services API [2] authenticates two\
    \ named parties\n   to each other.  GSS names can be imported in a variety of\
    \ formats\n   through the gss_import_name call.  Several mechanism-independent\
    \ name\n   formats are provided, including GSS_C_NT_HOSTBASED_SERVICE for\n  \
    \ services running on an Internet host, and GSS_C_NT_USER_NAME for the\n   names\
    \ of users.  Other mechanism-specific name types are also\n   provided.  By the\
    \ time a name is used in acquiring a mechanism-\n   specific credential or establishing\
    \ a security context, it has been\n   transformed into one of these mechanism-specific\
    \ name types.  In\n   addition, the GSS-API provides a function called gss_export_name\
    \ that\n   will transform a GSS-API name into a binary blob suitable for\n   comparisons.\
    \  This binary blob can be stored on ACLs and then\n   authorization decisions\
    \ can be made simply by comparing the name\n   exported from a newly accepted\
    \ context to the name on the ACL.\n   Storing names on ACLs can be problematic\
    \ because names tend to change\n   over time.  If the name contains organizational\
    \ information, such as\n   a domain part or an indication of what department someone\
    \ works for,\n   this changes as the person moves around the organization.  Even\
    \ if no\n   organizational information is included in the name, the name will\n\
    \   change as people change their names.  Updating ACLs to reflect name\n   changes\
    \ is difficult.  Another significant problem is that names can\n   be reused to\
    \ apply to an entity other than the entity to which they\n   originally applied.\
    \  For example, if a Unix user ID is placed on an\n   ACL, the account deleted\
    \ and then a new user assigned the old ID,\n   then that new user may gain privileges\
    \ intended for the old user.\n   Inherent in the GSS naming model is the idea\
    \ that mechanism names\n   need to be able to be represented in a single canonical\
    \ form.  Anyone\n   importing that name needs to be able to retrieve the canonical\
    \ form\n   of that name.\n   Several security mechanisms have been proposed for\
    \ which this naming\n   architecture is too restrictive.  In some cases, it is\
    \ not always\n   possible to canonicalize any name that is imported.  In other\
    \ cases,\n   there is no single canonical name.\n   Also, as GSS-API is used in\
    \ more complex environments, there is a\n   desire to use attribute certificates\
    \ [6], Kerberos authorization data\n   [3], or other non-name-based authorization\
    \ models.  GSS-API needs to\n   be enhanced in order to support these uses in\
    \ a mechanism-independent\n   manner.\n   This document discusses the particular\
    \ naming problems with two\n   important classes of GSS-API mechanisms.  It also\
    \ discusses the set\n   of proposed solutions and their associated open issues.\
    \  This\n   document limits discussion to these solutions and provides a\n   description\
    \ of the problem against which the solutions can be judged.\n   These solutions\
    \ are targeted for incorporation into GSS-API Version\n   3.\n"
- title: 2.  Kerberos Naming
  contents:
  - "2.  Kerberos Naming\n   The Kerberos mechanism demonstrates both the naming stability\
    \ problem\n   and the authorization extension problem.\n   The Kerberos Referrals\
    \ document [4] proposes a new type of Kerberos\n   name called an enterprise name.\
    \  The intent is that the enterprise\n   name is an alias that the user knows\
    \ for themselves and can use to\n   log in.  The Kerberos Key Distribution Center\
    \ (KDC) translates this\n   name into a normal Kerberos principal and gives the\
    \ user tickets for\n   this principal.  This normal principal is used for authorization.\n\
    \   The intent is that the enterprise name tracks the user as they moves\n   throughout\
    \ the organization, even if they move to parts of the\n   organization that have\
    \ different naming policies.  The name they type\n   at login remains constant,\
    \ but the Kerberos principal used to\n   authenticate them to services changes.\n\
    \   Unauthenticated services cannot generally perform a mapping from\n   enterprise\
    \ name to principal name.  Even authenticated services may\n   not be authorized\
    \ to map names other than the name of the\n   authenticated service.  Also, Kerberos\
    \ does not (and does not plan\n   to) provide a mechanism for mapping enterprise\
    \ names to principals\n   besides authentication as the enterprise name.  Thus,\
    \ any such\n   mapping would be vendor-specific.  With this feature in Kerberos,\
    \ it\n   is not possible to implement gss_canonicalize_name for enterprise\n \
    \  name types.  Of course, other name types such as traditional\n   principal\
    \ names could be used for GSS-API applications.  Naturally,\n   this loses the\
    \ benefits of enterprise names.\n   Another issue arises with enterprise names.\
    \  In some cases, it would\n   be desirable to put the enterprise name on the\
    \ ACL instead of a\n   principal name for greater ACL stability.  At first glance,\
    \ this\n   could be accomplished by including the enterprise name in the name\n\
    \   exported by gss_export_name.  Unfortunately, if this were done, the\n   exported\
    \ name would change whenever the mapping changed, invalidating\n   any ACL entries\
    \ based off the old exported name and defeating the\n   purpose of including the\
    \ enterprise name in the exported name.  In\n   some cases, it would be desirable\
    \ to have the exported name be based\n   on the enterprise name and, in others,\
    \ based on the principal name,\n   but this is not permitted by the current GSS-API.\n\
    \   Another development also complicates GSS-API naming for Kerberos.\n   Several\
    \ vendors have been looking at mechanisms to include group\n   membership information\
    \ in Kerberos authorization data.  It is\n   desirable to put these group names\
    \ on ACLs.  Again, GSS-API currently\n   has no mechanism to use this information.\n"
- title: 3.  X.509 Names
  contents:
  - "3.  X.509 Names\n   X.509 names are more complicated than Kerberos names.  In\
    \ the\n   Kerberos case, there is a single principal carried in all Kerberos\n\
    \   messages.  X.509 certificates have multiple options.  It seems the\n   subject\
    \ name might be the appropriate name to use as the name to be\n   exported in\
    \ a GSS-API mechanism.  However, RFC 3280 [5] allows the\n   subject name to be\
    \ an empty sequence in end-entity certificates.\n   Therefore, the subjectAltName\
    \ extension might be the only portion of\n   the certificate that identifies the\
    \ subject.  As in the case of\n   Kerberos group memberships, there may be many\
    \ subjectAltName\n   extensions available in a certificate.  Different applications\
    \ will\n   care about different name forms.  One possible candidate for an\n \
    \  exported name would be all the names from the subject field, and the\n   subjectAltName\
    \ extension from a certificate.  However, as new names\n   are added, existing\
    \ ACL entries would be invalidated; this is\n   undesirable.  Thus, there is no\
    \ single value that can be defined as\n   the exported GSS-API name that will\
    \ be useful in all environments.\n   A profile of a particular X.509 GSS-API mechanism\
    \ could require that\n   a specific name be used.  However, this would limit that\
    \ mechanism to\n   require a particular type of certificate.  There is interest\
    \ in being\n   able to use arbitrary X.509 certificates with GSS-API for some\n\
    \   applications.\n   Experience so far has not led to sufficient interoperability\
    \ with\n   GSS-API X.509 mechanisms.  Even if the subject name is used, there\
    \ is\n   ambiguity in how to handle sorting of name components.  Martin Rex\n\
    \   said that he was aware of several SPKM [1] implementations, but that\n   no\
    \ two were fully interoperable on names.\n   Also, as discussed in the introduction,\
    \ it is desirable to support\n   X.509 attribute certificates.\n"
- title: 4.  Composite Names
  contents:
  - "4.  Composite Names\n   One proposal to solve these problems is to extend the\
    \ concept of a\n   GSS-API name to include a set of name attributes.  Each attribute\n\
    \   would be an octet-string labeled by an OID.  Examples of attributes\n   would\
    \ include Kerberos enterprise names, group memberships in an\n   authorization\
    \ infrastructure, and Kerberos authorization data\n   attributes and subjectAltName\
    \ attributes in a certificate.  Several\n   new operations would be needed:\n\
    \   1.  Add an attribute to name.\n   2.  Query attributes of name.\n   3.  Query\
    \ values of an attribute.\n   4.  Delete an attribute from a name.\n   5.  Export\
    \ a complete composite name and all its attributes for\n       transport between\
    \ processes.\n   Note that an exported composite name would not generally be suitable\n\
    \   for binary comparison.  Avoiding confusion between this operation and\n  \
    \ the existing gss_export_name operation will require careful work.\n   However,\
    \ many attributes of composite names will be appropriate for\n   binary comparisons.\
    \  Such attributes can be used on ACLs, just as\n   exported names are used on\
    \ ACLs today.  For example, if a particular\n   SubjectAltName extension contains\
    \ the appropriate identity for an\n   application, then the name attribute for\
    \ this SubjectAltName can be\n   placed on the ACL.  This is only true if the\
    \ name attribute is stored\n   in some canonical form.\n   Additional utility\
    \ operations will probably be needed depending on\n   the implementation of name\
    \ attributes.\n"
- title: 4.1.  Usage of Name Attributes
  contents:
  - "4.1.  Usage of Name Attributes\n   Since attributes are part of GSS-API names,\
    \ the acceptor can retrieve\n   the attributes of the initiator's and acceptor's\
    \ name from the\n   context.  These attributes can then be used for authorization.\n\
    \   Most name attributes will probably not come from explicit operations\n   to\
    \ add attributes to a name.  Instead, name attributes will probably\n   come from\
    \ mechanism-specific credentials.  Components of these\n   mechanism-specific\
    \ credentials may come from platform or environment-\n   specific names.  Mechanism-specific\
    \ naming and group membership can\n   be mapped into name attributes by the mechanism\
    \ implementation.  The\n   specific form of this mapping will generally require\
    \ protocol\n   specification for each mechanism.\n"
- title: 4.2.  Open Issues
  contents:
  - "4.2.  Open Issues\n   This section describes parts of the proposal to add attributes\
    \ to\n   names that will need to be explored before the proposal can become a\n\
    \   protocol specification.\n   Are mechanisms expected to be able to carry arbitrary\
    \ name attributes\n   as part of a context establishment?  At first, it seems\
    \ like this\n   would be desirable.  However, the purpose of GSS-API is to establish\n\
    \   an authenticated context between two peers.  In particular, a context\n  \
    \ authenticates two named entities to each other.  The names of these\n   entities\
    \ and attributes associated with these names will be used for\n   authorization\
    \ decisions.  If an initiator or acceptor is allowed to\n   assert name attributes,\
    \ and the authenticity of these assertions is\n   not validated by the mechanisms,\
    \ then security problems will result.\n   On the other hand, requiring that name\
    \ attributes be\n   mechanism-specific and only be carried by mechanisms that\
    \ understand\n   the name attributes and can validate them compromises GSS-API's\
    \ place\n   as a generic API.  Application authors would be forced to understand\n\
    \   mechanism-specific attributes to make authorization decisions.  In\n   addition,\
    \ if mechanisms are not required to transport arbitrary\n   attributes, then application\
    \ authors will need to deal with different\n   implementations of the same mechanism\
    \ that support different sets of\n   name attributes.  One possible solution is\
    \ to carry a source along\n   with each name attribute; this source could indicate\
    \ whether the\n   attribute comes from a mechanism data structure or from the\
    \ other\n   party in the authentication.\n   Another related question is how name\
    \ attributes will be mapped into\n   their mechanism-specific forms.  For example,\
    \ it would be desirable\n   to map many Kerberos authorization data elements into\
    \ name\n   attributes.  In the case of the Microsoft PAC (privilege attribute\n\
    \   certificate), it would be desirable for some applications to get the\n   entire\
    \ PAC.  However, in many cases, the specific lists of security\n   IDs contained\
    \ in the PAC would be more directly useful to an\n   application.  So there may\
    \ not be a good one-to-one mapping between\n   the mechanism-specific elements\
    \ and the representation desirable at\n   the GSS-API layer.\n   Specific name\
    \ matching rules need to be developed.  How do names with\n   attributes compare?\
    \  What is the effect of a name attribute on a\n   target name in gss_accept_sec_context?\n"
- title: 4.3.  Handling gss_export_name
  contents:
  - "4.3.  Handling gss_export_name\n   For many mechanisms, there will be an obvious\
    \ choice to use for the\n   name exported by gss_export_name.  For example, in\
    \ the case of\n   Kerberos, the principal name can continue to be used as the\
    \ exported\n   name.  This will allow applications that depend on existing GSS-API\n\
    \   name-based authorization to continue to work.  However, it is\n   probably\
    \ desirable to allow GSS-API mechanisms for which\n   gss_export_name cannot meaningfully\
    \ be defined.  In such cases, the\n   behavior of gss_export_name should probably\
    \ be to return some error.\n   Such mechanisms may not work with existing applications\
    \ and cannot\n   conform to the current version of the GSS-API.\n"
- title: 5.  Credential Extensions
  contents:
  - "5.  Credential Extensions\n   An alternative to the name attributes proposal\
    \ is to extend GSS-API\n   credentials with extensions labeled by OIDs.  Interfaces\
    \ would be\n   needed to manipulate these credential extensions and to retrieve\
    \ the\n   credential extensions for credentials used to establish a context.\n\
    \   Even if name attributes are used, credential extensions may be useful\n  \
    \ for other unrelated purposes.\n   It is possible to solve problems discussed\
    \ in this document using\n   some credential extension mechanism.  Doing so will\
    \ have many of the\n   same open issues as discussed in the composite names proposal.\
    \  The\n   main advantage of a credential extensions proposal is that it avoids\n\
    \   specifying how name attributes interact with name comparison or\n   target\
    \ names.\n   The primary advantage of the name attributes proposal over credential\n\
    \   extensions is that name attributes seem to fit better into the GSS-\n   API\
    \ authorization model.  Names are already available at all points\n   when authorization\
    \ decisions are made.  In addition, for many\n   mechanisms, the sort of information\
    \ carried as name attributes will\n   also be carried as part of the name in the\
    \ mechanism.\n"
- title: 6.  Mechanisms for Export Name
  contents:
  - "6.  Mechanisms for Export Name\n   Another proposal is to define some GSS-API\
    \ mechanisms whose only\n   purpose is to have an exportable name form that is\
    \ useful.  For\n   example, you might be able to export a name as a local machine\
    \ user\n   ID with such a mechanism.\n   This solution works well for name information\
    \ that can be looked up\n   in a directory.  It was unclear whether this solution\
    \ would allow\n   mechanism-specific name information to be extracted from a context.\n\
    \   If so, then this solution would meet many of the goals of this\n   document.\n\
    \   One advantage of this solution is that it requires few, if any,\n   changes\
    \ to GSS-API semantics.  It is not as flexible as other\n   solutions.  Also,\
    \ it is not clear how to handle mechanisms that do\n   not have a well-defined\
    \ name to export with this solution.\n"
- title: 7.  Selection of Source Identity
  contents:
  - "7.  Selection of Source Identity\n   Today, applications such as e-mail clients\
    \ and Web browsers require\n   connections to multiple targets.  For each target,\
    \ there may be one\n   or more source identities that is appropriate for the connection.\n\
    \   Currently each application must choose the source name to use when\n   acquiring\
    \ credentials or initiating a security context.  However, the\n   rules that applications\
    \ use can be generalized to a large extent.\n   GSS-API could simplify application\
    \ design and implementation by\n   taking a larger role in selection of source\
    \ identity to use when\n   connecting to a particular target.\n   Currently, GSS-API\
    \ credentials represent a single mechanism name.\n   That is, by the time credentials\
    \ are acquired, they must act as if a\n   particular single identity is chosen\
    \ for each mechanism in the\n   credential.  All these identities must correspond\
    \ to a single\n   mechanism independent name.\n   Two possibilities have been\
    \ proposed for involving GSS-API in the\n   selection of source identities.  First,\
    \ the restriction that a\n   mechanism name must be chosen when credentials are\
    \ acquired could be\n   relaxed.  Some name form would need to be used, but this\
    \ name form\n   could represent a set of possibilities.  The particular identity\n\
    \   would be chosen when context establishment happened.  This could\n   involve\
    \ information received from the target in identity selection.\n   Another possibility\
    \ is to provide a mechanism to acquire credentials\n   and to provide information\
    \ about the target when credentials are\n   acquired.  This would be much less\
    \ of a change to GSS-API, but would\n   not allow information received from the\
    \ target to choose identity\n   selection.\n   With both approaches, information\
    \ to communicate the needs of the\n   application to the GSS-API mechanism will\
    \ be required.  For example,\n   hinting about whether information can be cached\
    \ and about the scope\n   of cache entries is required.\n   Another possibility\
    \ can be implemented in GSS-API V2 today: Do not\n   bind the credentials to a\
    \ mechanism name until either the credentials\n   are queried or they are used\
    \ to set up a context.  This is\n   undesirable because if an application uses\
    \ the credential inquiry\n   interface, then it will get different behavior than\
    \ cases where this\n   interface is not used.  For this reason, the working group\
    \ favors an\n   extension to GSS-API V3.\n"
- title: 8.  Compatibility with GSS-API V2
  contents:
  - "8.  Compatibility with GSS-API V2\n   In order to avoid breaking existing applications\
    \ or mechanisms, the\n   following backward compatibility requirements need to\
    \ be met:\n   1.  Existing APIs must continue to behave as they do in GSS-API\
    \ V2.\n   2.  GSS-API V2 mechanisms must produce the same exported name forms;\n\
    \       composite names cannot change the existing exported name forms.\n   3.\
    \  Extensions add new optional behavior.\n   If GSS-API V3 mechanisms are more\
    \ permissive than GSS-API V2\n   mechanisms, then care must be taken so that GSS-API\
    \ V2 applications\n   do not select these mechanisms.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   GSS-API sets up a security context between two\
    \ named parties.  The\n   GSS-API names are security assertions that are authenticated\
    \ by the\n   context establishment process.  As such, the GSS naming architecture\n\
    \   is critical to the security of GSS-API.\n   Currently, GSS-API uses a simplistic\
    \ naming model for authorization.\n   Names can be compared against a set of names\
    \ on an access control\n   list.  This architecture is relatively simple, and\
    \ its security\n   properties are well understood.  However, it does not provide\
    \ the\n   flexibility and feature set for future deployments of GSS-API.\n   This\
    \ proposal will significantly increase the complexity of the GSS\n   naming architecture.\
    \  As this proposal is fleshed out, we need to\n   consider ways of managing security\
    \ exposures created by this\n   increased complexity.\n   One area where the complexity\
    \ may lead to security problems is\n   composite names with attributes from different\
    \ sources.  This may be\n   desirable so that name attributes can carry their\
    \ own authentication.\n   However, the design of any solutions needs to make sure\
    \ that\n   applications can assign appropriate trust to name components.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   John Brezak, Paul Leach, and Nicolas Williams all participated\
    \ in\n   discussions that led to a desire to enhance GSS naming.  Martin Rex\n\
    \   provided descriptions of the current naming architecture and pointed\n   out\
    \ many ways in which proposed enhancements would create\n   interoperability problems\
    \ or increase complexity.  Martin also\n   provided excellent information on what\
    \ aspects of GSS naming have\n   tended to be implemented badly or have not met\
    \ the needs of some\n   customers.\n   Nicolas Williams helped describe the possible\
    \ approaches for\n   enhancing naming.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [1]  Adams, C., \"The Simple Public-Key GSS-API\
    \ Mechanism (SPKM)\",\n        RFC 2025, October 1996.\n   [2]  Linn, J., \"Generic\
    \ Security Service Application Program\n        Interface Version 2, Update 1\"\
    , RFC 2743, January 2000.\n   [3]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn,\
    \ \"The Kerberos\n        Network Authentication Service (V5)\", RFC 4120, July\
    \ 2005.\n   [4]  Zhu, L., \"Generating KDC Referrals to Locate Kerberos Realms\"\
    ,\n        Work in Progress, June 2006.\n   [5]  Housley, R., Polk, W., Ford,\
    \ W., and D. Solo, \"Internet X.509\n        Public Key Infrastructure Certificate\
    \ and Certificate Revocation\n        List (CRL) Profile\", RFC 3280, April 2002.\n\
    \   [6]  Farrell, S. and R. Housley, \"An Internet Attribute Certificate\n   \
    \     Profile for Authorization\", RFC 3281, April 2002.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Sam Hartman\n   MIT\n   EMail: hartmans-ietf@mit.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
