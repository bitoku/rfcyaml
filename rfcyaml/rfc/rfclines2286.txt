Test Cases for HMAC RIPEMD160 and HMAC RIPEMD128 Status of this Memo
This memo provides information for the Internet community.
It does not specify an Internet standard of any kind.
Distribution of this memo is unlimited.
This document provides two sets of test cases for HMAC RIPEMD160 and HMAC RIPEMD128, respectively.
HMAC RIPEMD160 and HMAC RIPEMD128 are two constructs of the HMAC [HMAC] message authentication function using the RIPEMD 160 and RIPEMD 128 [RIPE] hash functions.
The test cases and results provided in this document are meant to be used as a conformance test for HMAC RIPEMD160 and HMAC RIPEMD128 implementations.
The general method for constructing a HMAC message authentication function using a particular hash function is described in section 2 of [HMAC].
In sections 2 and 3 test cases for HMAC RIPEMD160 and HMAC RIPEMD128, respectively are provided.
Each case includes the key, the data, and the result.
The values of keys and data are either hexadecimal numbers (prefixed by "0x") or ASCII character strings in double quotes.
If a value is an ASCII character string, then the HMAC computation for the corresponding test case DOES NOT include the trailing null character ('\0') in the string.
The C source code of the functions used to generate HMAC RIPEMD160 and HMAC RIPEMD128 results is listed in the Appendix.
Please Note that the functions provided are implemented in such a way as to be simple and easy to understand as a result they are not optimized in any way.
The C source code for computing HMAC MD5 can be found in [MD5].
Test Cases for HMAC RIPEMD160 test case
Test Cases for HMAC RIPEMD128 test case
This document raises no security issues.
Discussion on the strength of the HMAC construction can be found in [HMAC].
A Strengthened Version of RIPEMD" April 1996
Author's Address Justin S. Kapp Reaper Technologies
The Post Office, Dunsop Bridge Clitheroe, Lancashire.
This code which implements HMAC RIPEMD160 using an existing RIPEMD  160 library.
It assumes that the RIPEMD 160 library has similar API's as those of the MD5 code described in RFC 1321.
The code for HMAC MD5, is similar, this HMAC MD5 code is also listed in RFC 2104.
To adapt this example to produce the HMAC RIPEMD128 then replace each occurance of 'RMD160' with 'RMD128'.
20 #endif #ifndef RMD128 DIGESTSIZE #
/ void HMAC RMD160(input, len, key, keylen, digest) unsigned char
key  / unsigned char  digest;
/ unsigned char tk[RMD160 DIGESTSIZE]; int i;
/  if key is longer than 64 bytes reset it to key SHA1(key)
where K is an n byte key ipad is the byte
memset(k ipad, 0x00, sizeof(k ipad)); memset(k opad, 0x00, sizeof(k opad));
} Full Copyright Statement Copyright (C)
This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works.
However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.
The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.
This document and the information contained herein is provided on an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS
ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY
