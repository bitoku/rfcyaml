- contents:
  - ''
  title: __initial_text__
- contents:
  - 'A Publication Protocol for the Resource Public Key Infrastructure (RPKI)

    '
  title: A Publication Protocol for the Resource Public Key Infrastructure (RPKI)
- contents:
  - "Abstract\n   This document defines a protocol for publishing Resource Public
    Key\n   Infrastructure (RPKI) objects.  Even though the RPKI will have many\n
    \  participants issuing certificates and creating other objects, it is\n   operationally
    useful to consolidate the publication of those objects.\n   Even in cases where
    a certificate issuer runs its own publication\n   repository, it can be useful
    to run the certificate engine itself on\n   a different machine from the publication
    repository.  This document\n   defines a protocol which addresses these needs.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8181.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Historical Note . . . . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   2.  Protocol Specification  . . . . . . . . . . . . . . . . . . .   5\n
    \    2.1.  Common XML Message Format . . . . . . . . . . . . . . . .   6\n     2.2.
    \ Publication and Withdrawal  . . . . . . . . . . . . . . .   7\n     2.3.  Listing
    the Repository  . . . . . . . . . . . . . . . . .   8\n     2.4.  Error Handling
    \ . . . . . . . . . . . . . . . . . . . . .   8\n     2.5.  Error Codes . . .
    . . . . . . . . . . . . . . . . . . . .   9\n     2.6.  XML Schema  . . . . .
    . . . . . . . . . . . . . . . . . .  10\n   3.  Examples  . . . . . . . . . .
    . . . . . . . . . . . . . . . .  12\n     3.1.  <publish/> Query, No Existing
    Object  . . . . . . . . . .  12\n     3.2.  <publish/> Query, Overwriting Existing
    Object . . . . . .  12\n     3.3.  <withdraw/> Query . . . . . . . . . . . . .
    . . . . . . .  13\n     3.4.  <success/> Reply  . . . . . . . . . . . . . . .
    . . . . .  13\n     3.5.  <report_error/> with Optional Elements  . . . . . .
    . . .  13\n     3.6.  <report_error/> without Optional Elements . . . . . . .
    .  14\n     3.7.  Error Handling with Multi-Element Queries . . . . . . . .  14\n
    \      3.7.1.  Multi-Element Query . . . . . . . . . . . . . . . . .  14\n       3.7.2.
    \ Successful Multi-Element Response . . . . . . . . . .  15\n       3.7.3.  Failure
    Multi-Element Response, First Error Only  . .  15\n       3.7.4.  Failure Multi-Element
    Response, All Errors  . . . . .  16\n     3.8.  <list/> Query . . . . . . . .
    . . . . . . . . . . . . . .  16\n     3.9.  <list/> Reply . . . . . . . . . .
    . . . . . . . . . . . .  17\n   4.  IANA Considerations . . . . . . . . . . .
    . . . . . . . . . .  17\n   5.  Security Considerations . . . . . . . . . . .
    . . . . . . . .  18\n   6.  References  . . . . . . . . . . . . . . . . . . .
    . . . . . .  19\n     6.1.  Normative References  . . . . . . . . . . . . . .
    . . . .  19\n     6.2.  Informative References  . . . . . . . . . . . . . . .
    . .  20\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 21\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document assumes a working knowledge of the Resource
    Public Key\n   Infrastructure (RPKI), which is intended to support improved routing\n
    \  security on the Internet.  See [RFC6480] for an overview of the RPKI.\n   In
    order to make participation in the RPKI easier, it is helpful to\n   have a few
    consolidated repositories for RPKI objects, thus saving\n   every participant
    from the cost of maintaining a new service.\n   Similarly, relying parties using
    the RPKI objects will find it faster\n   and more reliable to retrieve the necessary
    set from a smaller number\n   of repositories.\n   These consolidated RPKI object
    repositories will in many cases be\n   outside the administrative scope of the
    organization issuing a given\n   RPKI object.  In some cases, outsourcing operation
    of the repository\n   will be an explicit goal: some resource holders who strongly
    wish to\n   control their own RPKI private keys may lack the resources to operate\n
    \  a 24x7 repository or may simply not wish to do so.\n   The operator of an RPKI
    publication repository may well be an\n   Internet registry which issues certificates
    to its customers, but it\n   need not be; conceptually, operation of an RPKI publication\n
    \  repository is separate from operation of an RPKI Certification\n   Authority
    (CA).\n   Even in cases where a resource holder operates both a certificate\n
    \  engine and a publication repository, it can be useful to separate the\n   two
    functions, as they have somewhat different operational and\n   security requirements.\n
    \  This document defines an RPKI publication protocol which allows\n   publication
    either within or across organizational boundaries and\n   which makes fairly minimal
    demands on both the CA engine and the\n   publication service.\n   The authentication
    and message integrity architecture of the\n   publication protocol is essentially
    identical to the architecture\n   used in [RFC6492] because the participants in
    this protocol are the\n   same CA engines as in RFC 6492; this allows reuse of
    the same\n   \"Business PKI\" (BPKI) (see Section 1.2) infrastructure used to\n
    \  support RFC 6492.  As in RFC 6492, authorization is a matter of\n   external
    configuration: we assume that any given publication\n   repository has some kind
    of policy controlling which certificate\n   engines are allowed to publish, modify,
    or withdraw particular RPKI\n   objects, most likely following the recommendation
    in [RFC6480],\n   Section 4.4; the details of this policy are a private matter
    between\n   the operator of a certificate engine and the operator of the chosen\n
    \  publication repository.\n   The following diagram attempts to convey where
    this publication\n   protocol fits into the overall data flow between the certificate\n
    \  issuers and relying parties:\n          +------+    +------+    +------+\n
    \         |  CA  |    |  CA  |    |  CA  |\n          +------+    +------+    +------+\n
    \             |           |           |    Publication protocol\n              |
    \          |           |    business relationship\n              +-------+   |
    \ +--------+      perhaps set up by\n                      |   |  |                    RFC
    8183\n                 +----v---v--v-----+\n                 |                 |\n
    \                |   Publication   |\n                 |   Repository    |\n                 |
    \                |\n                 +-----------------+     Distribution protocols\n
    \                         |                   rsync or RRDP\n           +--------------+----------------+\n
    \          |              |                |\n   +-------v-----+ +------v------+
    \ +------v------+\n   |   Relying   | |   Relying   |  |   Relying   |\n   |    Party
    \   | |    Party    |  |    Party    |\n   +-------------+ +-------------+  +-------------+\n
    \  The publication protocol itself is not visible to relying parties: a\n   relying
    party sees the public interface of the publication server,\n   which is an rsync
    or RPKI Repository Delta Protocol (RRDP) [RFC8182]\n   server.\n   Operators of
    certificate engines and publication repositories may\n   find [RFC8183] a useful
    tool in setting up the pairwise relationships\n   between these servers, but they
    are not required to use it.\n"
  - contents:
    - "1.1.  Historical Note\n   This protocol started out as an informal collaboration
      between\n   several of the early RPKI implementers, and while it was always
      the\n   designers' intention that the resulting protocol end up on the IETF\n
      \  Standards Track, it took a few years to get there because\n   standardization
      of other pieces of the overall RPKI protocol space\n   was more urgent.  The
      Standards Track version of this publication\n   protocol preserves the original
      XML namespace and protocol version\n   scheme in order to maintain backwards
      compatibility with running code\n   implemented against older versions of the
      specification.\n"
    title: 1.1.  Historical Note
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n   \"Publication engine\" and \"publication server\"
      are used\n   interchangeably to refer to the server providing the service\n
      \  described in this document.\n   \"Business Public Key Infrastructure\" (\"Business
      PKI\" or \"BPKI\")\n   refers to a PKI, separate from the RPKI, used to authenticate
      clients\n   to the publication engine.  We use the term \"Business PKI\" here\n
      \  because an Internet registry might already have a PKI for\n   authenticating
      its clients and might wish to reuse that PKI for this\n   protocol.  There is,
      however, no requirement to reuse such a PKI.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Protocol Specification\n   The publication protocol uses XML [XML] messages
    wrapped in signed\n   Cryptographic Message Syntax (CMS) messages, carried over
    HTTP\n   transport [RFC7230].  The CMS encapsulation is identical to that used\n
    \  in Section 3.1 (and subsections) of RFC 6492 [RFC6492].\n   The publication
    protocol uses a simple request/response interaction.\n   The client passes a request
    to the server, and the server generates a\n   corresponding response.\n   A message
    exchange commences with the client initiating an HTTP POST\n   with a content
    type of \"application/rpki-publication\", with the\n   message object as the body.
    \ The server's response will similarly be\n   the body of the response with a
    content type of \"application/\n   rpki-publication\".\n   The content of the
    POST and the server's response will be a well-\n   formed CMS [RFC5652] object
    with OID = 1.2.840.113549.1.7.2 as\n   described in Section 3.1 of [RFC6492].\n
    \  The CMS signatures are used to protect the integrity of the protocol\n   messages
    and to authenticate the client and server to each other.\n   Authorization to
    perform particular operations is a local matter,\n   perhaps determined by contractual
    agreements between the operators of\n   any particular client-server pair, but
    in any case is beyond the\n   scope of this specification.\n"
  - contents:
    - "2.1.  Common XML Message Format\n   The XML schema for this protocol is below
      in Section 2.6.  The basic\n   XML message format looks like this:\n   <msg\n
      \      type=\"query\"\n       version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <!-- Zero or more PDUs -->\n   </msg>\n   <msg\n       type=\"reply\"\n
      \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <!-- Zero or more PDUs -->\n   </msg>\n   As noted above, the outermost
      XML element is encapsulated in a signed\n   CMS message.  Query messages are
      signed by the client, and reply\n   messages are signed by the server.\n   Common
      attributes:\n   version:  The value of this attribute is the version of this\n
      \     protocol.  This document describes version 4.\n   type:  The possible
      values of this attribute are \"reply\" and \"query\".\n   A query PDU may be
      one of three types: <publish/>, <withdraw/>, or\n   <list/>.\n   A reply PDU
      may be one of three types: <success/>, <list/>, or\n   <report_error/>.\n   The
      <publish/> and <withdraw/> PDUs include a \"tag\" attribute to\n   facilitate
      bulk operation.  When performing bulk operations, a CA\n   engine will probably
      find it useful to specify a distinct tag value\n   for each <publish/> or <withdraw/>
      PDU, to simplify matching an error\n   with the PDU which triggered it.  The
      tag attribute is mandatory, to\n   simplify parsing, but a CA engine which has
      no particular use for\n   tagging MAY use any syntactically legal value, including
      simply using\n   the empty string for all tag fields.\n   This document describes
      version 4 of this protocol.  An\n   implementation which understands only this
      version of the protocol\n   MUST reject messages with a different protocol version
      attribute,\n   signaling the error as described in Section 2.4.  Since \"4\"
      is\n   currently the only value allowed for the version attribute in the\n   schema
      (Section 2.6), an incorrect protocol version can be detected\n   either by checking
      the version attribute directly or as a schema\n   validation error.  Any future
      update to this protocol which is either\n   syntactically or semantically incompatible
      with the current version\n   will need to increment the protocol version number.\n"
    title: 2.1.  Common XML Message Format
  - contents:
    - "2.2.  Publication and Withdrawal\n   The publication protocol uses a common
      message format to request\n   publication of any RPKI object.  This format was
      chosen specifically\n   to allow this protocol to accommodate new types of RPKI
      objects\n   without needing changes to this protocol.\n   Both the <publish/>
      and <withdraw/> PDUs have a payload of a tag and\n   an rsync URI [RFC3986]
      [RFC5781].  The <publish/> query also contains\n   the DER object to be published,
      encoded in Base64 ([RFC4648],\n   Section 4, with line breaks within the Base64
      text permitted but not\n   required).\n   Both the <publish/> and <withdraw/>
      PDUs also have a \"hash\"\n   attribute, which carries a hash of an existing
      object at the\n   specified repository URI, encoded as a hexadecimal string.
      \ For\n   <withdraw/> PDUs, the hash MUST be present, as this operation makes\n
      \  no sense if there is no existing object to withdraw.  For <publish/>\n   PDUs,
      the hash MUST be present if the publication operation is\n   overwriting an
      existing object, and it MUST NOT be present if this\n   publication operation
      is writing to a new URI where no prior object\n   exists.  Presence of an object
      when no \"hash\" attribute has been\n   specified is an error, as is absence
      of an object or an incorrect\n   hash value when a \"hash\" attribute has been
      specified.  Any such\n   errors MUST be reported using the <report_error/> PDU.\n
      \  The hash algorithm is SHA-256 [SHS], to simplify comparison of\n   publication
      protocol hashes with RPKI manifest hashes.\n   The intent behind the \"hash\"
      attribute is to allow the client and\n   server to detect any disagreements
      about the effect that a <publish/>\n   or <withdraw/> PDU will have on the repository.\n
      \  Note that every publish and withdraw action requires a new manifest,\n   thus
      every publish or withdraw action will involve at least two\n   objects.\n   Processing
      of a query message is handled atomically: either the\n   entire query succeeds
      or none of it does.  When a query message\n   contains multiple PDUs, failure
      of any PDU may require the server to\n   roll back actions triggered by earlier
      PDUs.\n   When a query message containing <publish/> or <withdraw/> PDUs\n   succeeds,
      the server returns a single <success/> reply.\n   When a query fails, the server
      returns one or more <report_error/>\n   reply PDUs.  Typically, a server will
      only generate one\n   <report_error/> corresponding to the first query PDU that
      failed, but\n   servers MAY return multiple <report_error/> PDUs at the implementer's\n
      \  discretion.\n"
    title: 2.2.  Publication and Withdrawal
  - contents:
    - "2.3.  Listing the Repository\n   The <list/> operation allows the client to
      ask the server for a\n   complete listing of objects which the server believes
      the client has\n   published.  This is intended primarily to allow the client
      to recover\n   upon detecting (probably via use of the \"hash\" attribute; see\n
      \  Section 2.2) that they have somehow lost synchronization.\n   The <list/>
      query consists of a single PDU.  A <list/> query MUST be\n   the only PDU in
      a query -- it may not be combined with any <publish/>\n   or <withdraw/> queries.\n
      \  The <list/> reply consists of zero or more PDUs, one per object\n   published
      in this repository by this client, each PDU conveying the\n   URI and hash of
      one published object.\n"
    title: 2.3.  Listing the Repository
  - contents:
    - "2.4.  Error Handling\n   Errors are handled at two levels.\n   Errors that
      make it impossible to decode a query or encode a response\n   are handled at
      the HTTP layer.  4xx and 5xx HTTP response codes\n   indicate that something
      bad happened.\n   In all other cases, errors result in an XML <report_error/>
      PDU.\n   Like the rest of this protocol, <report_error/> PDUs are CMS-signed\n
      \  XML messages and thus can be archived to provide an audit trail.\n   <report_error/>
      PDUs only appear in replies, never in queries.\n   The \"tag\" attribute of
      the <report_error/> PDU associated with a\n   <publish/> or <withdraw/> PDU
      MUST be set to the same value as the\n   \"tag\" attribute in the PDU which
      generated the error.  A client can\n   use the \"tag\" attribute to determine
      which PDU caused processing of\n   an update to fail.\n   The error itself is
      conveyed in the \"error_code\" attribute.  The\n   value of this attribute is
      a token indicating the specific error that\n   occurred.\n   The body of the
      <report_error/> element contains two sub-elements:\n   1.  An optional text
      element <error_text/>, which, if present,\n       contains a text string with
      debugging information intended for\n       human consumption.\n   2.  An optional
      element <failed_pdu/>, which, if present, contains a\n       verbatim copy of
      the query PDU whose failure triggered the\n       <report_error/> PDU.  The
      quoted element must be syntactically\n       valid.\n   See Section 3.7 for
      examples of a multi-element query and responses.\n"
    title: 2.4.  Error Handling
  - contents:
    - "2.5.  Error Codes\n   These are the defined error codes as well as some discussion
      of each.\n   Text similar to these descriptions may be sent in an <error_text/>\n
      \  element to help explain the error encountered.\n   xml_error:  Encountered
      an XML problem.  Note that some XML errors\n      may be severe enough to require
      error reporting at the HTTP layer,\n      instead.  Implementations MAY choose
      to report any or all XML\n      errors at the HTTP layer.\n   permission_failure:
      \ Client does not have permission to update this\n      URI.\n   bad_cms_signature:
      \ Bad CMS signature.\n   object_already_present:  An object is already present
      at this URI,\n      yet a \"hash\" attribute was not specified.  A \"hash\"
      attribute must\n      be specified when overwriting or deleting an object.  Perhaps\n
      \     client and server are out of sync?\n   no_object_present:  There is no
      object present at this URI, yet a\n      \"hash\" attribute was specified.  Perhaps
      client and server are out\n      of sync?\n   no_object_matching_hash:  The
      \"hash\" attribute supplied does not\n      match the \"hash\" attribute of
      the object at this URI.  Perhaps\n      client and server are out of sync?\n
      \  consistency_problem:  Server detected an update that looks like it\n      will
      cause a consistency problem (e.g., an object was deleted, but\n      the manifest
      was not updated).  Note that a server is not required\n      to make such checks.
      \ Indeed, it may be unwise for a server to do\n      so.  This error code just
      provides a way for the server to explain\n      its (in-)action.\n   other_error:
      \ A meteor fell on the server.\n"
    title: 2.5.  Error Codes
  - contents:
    - "2.6.  XML Schema\n   The following is a [RELAX-NG] compact form schema describing
      the\n   publication protocol.\n   This schema is normative: in the event of
      a disagreement between this\n   schema and the document text above, this schema
      is authoritative.\n   # RELAX NG schema for RPKI publication protocol.\n   default
      namespace =\n       \"http://www.hactrn.net/uris/rpki/publication-spec/\"\n
      \  # This is version 4 of the protocol.\n   version = \"4\"\n   # Top-level
      PDU is either a query or a reply.\n   start |= element msg {\n     attribute
      version { version },\n     attribute type    { \"query\" },\n     query_elt\n
      \  }\n   start |= element msg {\n     attribute version { version },\n     attribute
      type    { \"reply\" },\n     reply_elt\n   }\n   # Tag attributes for bulk operations.\n
      \  tag = attribute tag { xsd:token { maxLength=\"1024\" } }\n   # Base64-encoded
      DER stuff.\n   base64 = xsd:base64Binary\n   # Publication URIs.\n   uri = attribute
      uri { xsd:anyURI { maxLength=\"4096\" } }\n   # Digest of an existing object
      (hexadecimal).\n   hash = attribute hash { xsd:string { pattern = \"[0-9a-fA-F]+\"
      } }\n   # Error codes.\n   error |= \"xml_error\"\n   error |= \"permission_failure\"\n
      \  error |= \"bad_cms_signature\"\n   error |= \"object_already_present\"\n
      \  error |= \"no_object_present\"\n   error |= \"no_object_matching_hash\"\n
      \  error |= \"consistency_problem\"\n   error |= \"other_error\"\n   # <publish/>
      and <withdraw/> query elements\n   query_elt |= (\n     element publish  { tag,
      uri, hash?, base64 } |\n     element withdraw { tag, uri, hash          }\n
      \  )*\n   # <success/> reply\n   reply_elt |= element success { empty }\n   #
      <list/> query and reply\n   query_elt |= element list { empty }\n   reply_elt
      |= element list { uri, hash }*\n   # <report_error/> reply\n   reply_elt |=
      element report_error {\n     tag?,\n     attribute error_code { error },\n     element
      \  error_text { xsd:string { maxLength=\"512000\" }}?,\n     element   failed_pdu
      { query_elt }?\n   }*\n"
    title: 2.6.  XML Schema
  title: 2.  Protocol Specification
- contents:
  - "3.  Examples\n   Following are examples of various queries and the corresponding\n
    \  replies for the RPKI publication protocol.\n   Note that the authors have taken
    liberties with the Base64, hash, and\n   URI text in these examples in the interest
    of making the examples fit\n   nicely into RFC text format.  Similarly, these
    examples do not show\n   the CMS signature wrapper around the XML, just the XML
    payload.\n"
  - contents:
    - "3.1.  <publish/> Query, No Existing Object\n   <msg\n       type=\"query\"\n
      \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <!-- body is base64(new-object) -->\n     <publish\n         tag=\"\"\n
      \        uri=\"rsync://wombat.example/Alice/01a97a70ac477f06.cer\">\n         SGVsbG8sIG15IG5hbWUgaXMgQWxpY2U=\n
      \      </publish>\n   </msg>\n"
    title: 3.1.  <publish/> Query, No Existing Object
  - contents:
    - "3.2.  <publish/> Query, Overwriting Existing Object\n   <msg\n       type=\"query\"\n
      \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <!-- hash is hex(SHA-256(old-object)) -->\n     <!-- body is base64(new-object)
      -->\n     <publish\n         hash=\"01a97a70ac477f06\"\n         tag=\"foo\"\n
      \        uri=\"rsync://wombat.example/Alice/01a97a70ac477f06.cer\">\n         SGVsbG8sIG15IG5hbWUgaXMgQWxpY2U=\n
      \      </publish>\n   </msg>\n"
    title: 3.2.  <publish/> Query, Overwriting Existing Object
  - contents:
    - "3.3.  <withdraw/> Query\n   <msg\n       type=\"query\"\n       version=\"4\"\n
      \      xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n     <!--
      hash is hex(SHA-256(old-object)) -->\n     <withdraw\n         hash=\"01a97a70ac477f06\"\n
      \        tag=\"foo\"\n         uri=\"rsync://wombat.example/Alice/01a97a70ac477f06.cer\"/>\n
      \  </msg>\n"
    title: 3.3.  <withdraw/> Query
  - contents:
    - "3.4.  <success/> Reply\n   <msg\n       type=\"reply\"\n       version=\"4\"\n
      \      xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n     <success/>\n
      \  </msg>\n"
    title: 3.4.  <success/> Reply
  - contents:
    - "3.5.  <report_error/> with Optional Elements\n   <msg\n       type=\"reply\"\n
      \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <report_error\n         error_code=\"no_object_matching_hash\"\n         tag=\"foo\">\n
      \      <error_text>\n         Can't delete an object I don't have\n       </error_text>\n
      \      <failed_pdu>\n         <publish\n             hash=\"01a97a70ac477f06\"\n
      \            tag=\"foo\"\n             uri=\"rsync://wombat.example/Alice/01a97a70ac477f06.cer\">\n
      \        SGVsbG8sIG15IG5hbWUgaXMgQWxpY2U=\n       </publish>\n       </failed_pdu>\n
      \    </report_error>\n   </msg>\n"
    title: 3.5.  <report_error/> with Optional Elements
  - contents:
    - "3.6.  <report_error/> without Optional Elements\n   <msg\n       type=\"reply\"\n
      \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
      \    <report_error\n         error_code=\"object_already_present\"\n         tag=\"foo\"/>\n
      \  </msg>\n"
    title: 3.6.  <report_error/> without Optional Elements
  - contents:
    - '3.7.  Error Handling with Multi-Element Queries

      '
    - contents:
      - "3.7.1.  Multi-Element Query\n   <msg\n       type=\"query\"\n       version=\"4\"\n
        \      xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n     <publish\n
        \        tag=\"Alice\"\n         uri=\"rsync://wombat.example/Alice/01a97a70ac477f06.cer\">\n
        \        SGVsbG8sIG15IG5hbWUgaXMgQWxpY2U=\n       </publish>\n     <withdraw\n
        \        hash=\"f46a4198efa3070e\"\n         tag=\"Bob\"\n         uri=\"rsync://wombat.example/Bob/f46a4198efa3070e.cer\"/>\n
        \    <publish\n         tag=\"Carol\"\n         uri=\"rsync://wombat.example/Carol/32e0544eeb510ec0.cer\">\n
        \        SGVsbG8sIG15IG5hbWUgaXMgQ2Fyb2w=\n       </publish>\n     <withdraw\n
        \        hash=\"421ee4ac65732d72\"\n         tag=\"Dave\"\n         uri=\"rsync://wombat.example/Dave/421ee4ac65732d72.cer\"/>\n
        \    <publish\n         tag=\"Eve\"\n         uri=\"rsync://wombat.example/Eve/9dd859b01e5c2ebd.cer\">\n
        \        SGVsbG8sIG15IG5hbWUgaXMgRXZl\n       </publish>\n   </msg>\n"
      title: 3.7.1.  Multi-Element Query
    - contents:
      - "3.7.2.  Successful Multi-Element Response\n   <msg\n       type=\"reply\"\n
        \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
        \    <success/>\n   </msg>\n"
      title: 3.7.2.  Successful Multi-Element Response
    - contents:
      - "3.7.3.  Failure Multi-Element Response, First Error Only\n   <msg\n       type=\"reply\"\n
        \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
        \    <report_error\n         error_code=\"no_object_matching_hash\"\n         tag=\"Dave\">\n
        \      <failed_pdu>\n         <withdraw\n             hash=\"421ee4ac65732d72\"\n
        \            tag=\"Dave\"\n             uri=\"rsync://wombat.example/Dave/421ee4ac65732d72.cer\"/>\n
        \      </failed_pdu>\n     </report_error>\n   </msg>\n"
      title: 3.7.3.  Failure Multi-Element Response, First Error Only
    - contents:
      - "3.7.4.  Failure Multi-Element Response, All Errors\n   <msg\n       type=\"reply\"\n
        \      version=\"4\"\n       xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n
        \    <report_error\n         error_code=\"no_object_matching_hash\"\n         tag=\"Dave\">\n
        \      <failed_pdu>\n         <withdraw\n             hash=\"421ee4ac65732d72\"\n
        \            tag=\"Dave\"\n             uri=\"rsync://wombat.example/Dave/421ee4ac65732d72.cer\"/>\n
        \      </failed_pdu>\n     </report_error>\n     <report_error\n         error_code=\"object_already_present\"\n
        \        tag=\"Eve\">\n       <failed_pdu>\n         <publish\n             tag=\"Eve\"\n
        \            uri=\"rsync://wombat.example/Eve/9dd859b01e5c2ebd.cer\">\n         SGVsbG8sIG15IG5hbWUgaXMgRXZl\n
        \      </publish>\n       </failed_pdu>\n     </report_error>\n   </msg>\n"
      title: 3.7.4.  Failure Multi-Element Response, All Errors
    title: 3.7.  Error Handling with Multi-Element Queries
  - contents:
    - "3.8.  <list/> Query\n   <msg\n       type=\"query\"\n       version=\"4\"\n
      \      xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n     <list/>\n
      \  </msg>\n"
    title: 3.8.  <list/> Query
  - contents:
    - "3.9.  <list/> Reply\n   <msg\n       type=\"reply\"\n       version=\"4\"\n
      \      xmlns=\"http://www.hactrn.net/uris/rpki/publication-spec/\">\n     <list\n
      \        hash=\"eb719b72f0648cf4\"\n         uri=\"rsync://wombat.example/Fee/eb719b72f0648cf4.cer\"/>\n
      \    <list\n         hash=\"c7c50a68b7aa50bf\"\n         uri=\"rsync://wombat.example/Fie/c7c50a68b7aa50bf.cer\"/>\n
      \    <list\n         hash=\"f222481ded47445d\"\n         uri=\"rsync://wombat.example/Foe/f222481ded47445d.cer\"/>\n
      \    <list\n         hash=\"15b94e08713275bc\"\n         uri=\"rsync://wombat.example/Fum/15b94e08713275bc.cer\"/>\n
      \  </msg>\n"
    title: 3.9.  <list/> Reply
  title: 3.  Examples
- contents:
  - "4.  IANA Considerations\n   IANA has registered the \"application/rpki-publication\"
    media type as\n   follows:\n      Type name:  application\n      Subtype name:
    \ rpki-publication\n      Required parameters:  None\n      Optional parameters:
    \ None\n      Encoding considerations:  binary\n      Security considerations:
    \ Carries an RPKI publication protocol\n         message, as defined in RFC 8181.\n
    \     Interoperability considerations:  None\n      Published specification:  RFC
    8181\n      Applications which use this media type: HTTP\n      Additional information:\n
    \        Magic number(s):  None\n         File extension(s):  None\n         Macintosh
    File Type Code(s):  None\n      Person & email address to contact for further
    information:\n         Rob Austein <sra@hactrn.net>\n      Intended usage:  COMMON\n
    \     Author/Change controller: IETF\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   The RPKI publication protocol and the data it
    publishes use entirely\n   separate PKIs for authentication.  The published data
    is\n   authenticated within the RPKI, and this protocol has nothing to do\n   with
    that authentication, nor does it require that the published\n   objects be valid
    in the RPKI.  The publication protocol uses a\n   separate BPKI to authenticate
    its messages.\n   Each RPKI publication protocol message is wrapped in a signed
    CMS\n   message, which provides message integrity protection and an auditable\n
    \  form of message authentication.  Because of these protections at the\n   application
    layer, and because all the data being published are\n   intended to be public
    information in any case, this protocol does\n   not, strictly speaking, require
    the use of HTTPS or other transport\n   security mechanisms.  There may, however,
    be circumstances in which a\n   particular publication operator may prefer HTTPS
    over HTTP anyway, as\n   a matter of (BPKI) CA policy.  Use of HTTP versus HTTPS
    here is,\n   essentially, a private matter between the repository operator and
    its\n   clients.  Note, however, that even if a client/server pair uses HTTPS\n
    \  for this protocol, message authentication for this protocol is still\n   based
    on the CMS signatures, not HTTPS.\n   Although the hashes used in the <publish/>
    and <withdraw/> PDUs are\n   cryptographically strong, the digest algorithm was
    selected for\n   convenience in comparing these hashes with the hashes that appear
    in\n   RPKI manifests.  The hashes used in the <publish/> and <withdraw/>\n   PDUs
    are not particularly security sensitive because these PDUs are\n   protected by
    the CMS signatures.  Because of this, the most likely\n   reason for a change
    to this digest algorithm would be to track a\n   corresponding change in the digest
    algorithm used in RPKI manifests.\n   If and when such a change happens, it will
    require incrementing the\n   version number of this publication protocol, but
    given that the most\n   likely implementation of a publication server uses these
    hashes as\n   lookup keys in a database, bumping the protocol version number would\n
    \  be a relatively minor portion of the effort of changing the\n   algorithm.\n
    \  Compromise of a publication server, perhaps through mismanagement of\n   BPKI
    private keys, could lead to a denial-of-service attack on the\n   RPKI.  An attacker
    gaining access to BPKI private keys could use this\n   protocol to delete (withdraw)
    RPKI objects, leading to routing\n   changes or failures.  Accordingly, as in
    most PKIs, good key\n   management practices are important.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RELAX-NG] Clark, J., \"RELAX NG Compact Syntax\",
      OASIS Committee\n              Specification, November 2002,\n              <https://www.oasis-open.org/committees/relax-ng/\n
      \             compact-20021121.html>.\n   [RFC2119]  Bradner, S., \"Key words
      for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC
      2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4648]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n
      \             RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC5781]  Weiler, S., Ward, D., and R. Housley, \"The rsync URI\n              Scheme\",
      RFC 5781, DOI 10.17487/RFC5781, February 2010,\n              <http://www.rfc-editor.org/info/rfc5781>.\n
      \  [RFC6492]  Huston, G., Loomans, R., Ellacott, B., and R. Austein, \"A\n              Protocol
      for Provisioning Resource Certificates\",\n              RFC 6492, DOI 10.17487/RFC6492,
      February 2012,\n              <http://www.rfc-editor.org/info/rfc6492>.\n   [RFC7230]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <http://www.rfc-editor.org/info/rfc8174>.\n   [SHS]      National Institute
      of Standards and Technology, \"Secure\n              Hash Standard (SHS)\",
      FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4, August 2015,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n
      \             NIST.FIPS.180-4.pdf>.\n   [XML]      Cowan, J., \"Extensible Markup
      Language (XML) 1.1\", W3C\n              Consortium Recommendation REC-xml11-20060816,
      October\n              2002, <http://www.w3.org/TR/2002/CR-xml11-20021015>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC6480]  Lepinski, M. and S. Kent, \"An
      Infrastructure to Support\n              Secure Internet Routing\", RFC 6480,
      DOI 10.17487/RFC6480,\n              February 2012, <http://www.rfc-editor.org/info/rfc6480>.\n
      \  [RFC8182]  Bruijnzeels, T., Muravskiy, O., Weber, B., and R. Austein,\n              \"The
      RPKI Repository Delta Protocol (RRDP)\", RFC 8182,\n              DOI 10.17487/RFC8182,
      July 2017,\n              <http://www.rfc-editor.org/info/rfc8182>.\n   [RFC8183]
      \ Austein, R., \"An Out-of-Band Setup Protocol for Resource\n              Public
      Key Infrastructure (RPKI) Production Services\",\n              RFC 8183, DOI
      10.17487/RFC8183, July 2017,\n              <http://www.rfc-editor.org/info/rfc8183>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank: Geoff Huston, George Michaelson,\n
    \  Oleg Muravskiy, Paul Wouters, Randy Bush, Rob Loomans, Robert\n   Kisteleki,
    Tim Bruijnzeels, Tom Petch, and anybody else who helped\n   along the way but
    whose name(s) the authors have temporarily\n   forgotten.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Samuel Weiler\n   W3C / MIT\n   Email: weiler@csail.mit.edu\n
    \  Anuja Sonalker\n   STEER Tech\n   Email: anuja@steer-tech.com\n   Rob Austein\n
    \  Dragon Research Labs\n   Email: sra@hactrn.net\n"
  title: Authors' Addresses
