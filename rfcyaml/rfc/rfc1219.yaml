- title: __initial_text__
  contents:
  - '                  On the Assignment of Subnet Numbers

    '
- title: Status Of This Memo
  contents:
  - "Status Of This Memo\n   This memo suggests a new procedure for assigning subnet\
    \ numbers.  Use\n   of this assignment technique within a network would be a purely\
    \ local\n   matter, and would not effect other networks.  Therefore, the use of\n\
    \   these procedures is entirely discretionary.\n   This memo provides information\
    \ for the Internet community.  It does\n   not specify an Internet standard. \
    \ Distribution of this memo is\n   unlimited.\n"
- title: Overview
  contents:
  - "Overview\n   RFC-950 [2] specifies a procedure for subnetting Internet addresses\n\
    \   using a bit-mask.  While RFC-950 allows the \"ones\" in the subnet mask\n\
    \   to be non-contiguous, RFC-950 recommends that 1) they be contiguous,\n   and\
    \ 2) that they occupy the most significant bits of the \"host\" part\n   of the\
    \ internet address.\n   RFC-950 did not specify whether different subnets of the\
    \ same network\n   may have different masks.  This ambiguity was unfortunate,\
    \ as it\n   resulted in development of routing protocols that do not support\n\
    \   different masks; see e.g., RIP [6].  The Gateway Requirements RFC [7]\n  \
    \ settled the issue in favor of allowing different masks, and therefore\n   future\
    \ routing protocols may be expected to support this feature;\n   OSPF [3] is an\
    \ example.\n   The network administrator must of course determine the mask for\
    \ each\n   subnet.  This involves making an estimate of how many hosts each\n\
    \   subnet is expected to have.  As it is often impossible to predict how\n  \
    \ large each subnet will grow, inefficient choices are often made, with\n   some\
    \ subnets under-utilized, and others possibly requiring\n   renumbering because\
    \ of exceeded capacity.\n   This memo specifies a procedure for assigning subnet\
    \ numbers that\n   eliminates the need to estimate subnet size.  Essentially,\
    \ host bits\n   (mask = 0) are assigned from the least significant bit working\n\
    \   towards the most, and subnet bits (mask = 1) are assigned from the\n   most\
    \ significant bit working towards the least.  As subnets grow,\n   more host bits\
    \ are assigned.  As the number of subnets grows, more\n   subnet bits are assigned.\
    \  While this process does sometimes result\n   in new subnet masks, no host ever\
    \ need change addresses.\n   This technique is not new, but it is also not widely\
    \ known, and even\n   less widely implemented.  With the development of new routing\n\
    \   protocols such as OSPF, it is possible to take full advantage of this\n  \
    \ technique.  The purpose of this memo, then, is to make this technique\n   widely\
    \ known, and to specify it exactly.\n   This memo requires no changes to existing\
    \ Internet standards.  It\n   does, however, require that the intra-domain routing\
    \ protocol handle\n   multiple different subnet masks.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author would like to thank Phil Karn, Charles Lynn, Jeff\
    \ Mogul,\n   and Charles Wolverton for their helpful suggestions.  Special thanks\n\
    \   go to Joel Halpern for his painstaking debugging of the detailed\n   specification\
    \ and the examples.\n"
- title: 1.  Motivation
  contents:
  - "1.  Motivation\n   The Subnetting standard, RFC-950, specifies that the Host\
    \ part of the\n   formally 2-level Internet address can be divided into two fields,\n\
    \   Subnet and Host.  This gives the Internet address a third level of\n   hierarchy,\
    \ and the concomitant firewalls and savings in routing\n   overhead.  It also\
    \ introduces increased inefficiency in the\n   allocation of addresses.\n   This\
    \ inefficiency arises from the fact that the network administrator\n   typically\
    \ over-estimates the size (number of hosts) of any single\n   subnetwork, in order\
    \ to prevent future re-addressing of subnets.  It\n   may also occur if the routing\
    \ protocol being used does not handle\n   different length subnets, and the administrator\
    \ must therefore give\n   every subnet an amount of space equivalent to that received\
    \ by the\n   largest subnet. (This RFC does not help in the latter case, as the\n\
    \   technique herein requires different length subnets.)\n   The administrative\
    \ hassle associated with changing the subnet\n   structure of a network can be\
    \ considerable.  For instance, consider\n   the following case.  A network has\
    \ three subnets A, B, and C.  Assume\n   that the lowest significant byte is the\
    \ host part, and the next byte\n   is the subnet part (that is, the mask is 255.255.255.0).\
    \  Assume\n   further that A has subnet 1.0, B has subnet 2.0, and C has subnet\n\
    \   3.0.\n   Now, assume that B grows beyond its allocation of 254 hosts.\n  \
    \ Ideally, we would like to simply change B's mask without changing any\n   of\
    \ the host addresses in B.  However, the subnets numerically above\n   and below\
    \ B are already taken by A and C.  (If say 3.0 was not taken\n   by C, B's mask\
    \ could be changed from 255.0 (ff00) to 254.0 (fe00).\n   In this case, all of\
    \ B's existing addresses would still match the new\n   subnet.  Indeed, if non-contiguous\
    \ masks were in use, it might be\n   possible for B to find some other mask bit\
    \ to change to 0.  However,\n   non-contiguous masks are generally not in favor,\
    \ as they impose\n   limitations on certain forwarding table lookup algorithms.\
    \  Indeed,\n   RFC-950 discourages their use.)\n   So, the choices available to\
    \ the network administrator are to 1) form\n   two subnets out of the existing\
    \ one, or 2) renumber the subnet so\n   that the subnet ends up with a smaller\
    \ (fewer 1's) mask.  Choice 1\n   can either be accomplished physically or logically.\
    \  Physically\n   forming two subnets requires partitioning the subnet and inserting\
    \ a\n   gateway between the two partitions.  For obvious reasons, this is not\n\
    \   a desirable course of action.  Logically forming two subnets can be\n   done\
    \ by simply assigning another subnet number (say 4.0) to the same\n   subnet,\
    \ and assigning host addresses under the new subnet.  The\n   result of this logical\
    \ partition is that the hosts with different\n   subnet numbers will not recognize\
    \ that the others are on the same\n   subnet, and will send packets to the default\
    \ gateway rather than\n   directly to the host.  In fact, this is not such a bad\
    \ solution,\n   because assuming that the gateway is capable of recognizing multiple\n\
    \   subnet numbers on the same subnet, the gateway will simply send the\n   host\
    \ an ICMP Redirect [4], and subsequent packets will go directly to\n   the host\
    \ [1] (this may not work correctly on all hosts).\n   If, however, neither choice\
    \ is acceptable or possible, then the\n   network administrator must assign a\
    \ new subnet number to B, thus\n   renumbering the existing hosts, modifying the\
    \ Domain Name System\n   entries, and changing any other configuration files that\
    \ have\n   hardwired addresses for hosts in subnet B.\n"
- title: 2. A More Flexible and Efficient Technique for Assigning Subnet Numbers
  contents:
  - "2. A More Flexible and Efficient Technique for Assigning Subnet Numbers\n   In\
    \ order to help explain the new technique, we shall show what is\n   wrong with\
    \ what is currently done now.  Currently, most subnets are\n   assigned by splitting\
    \ the host part of the address in two fields; the\n   subnet field and the host\
    \ field.  Mask bits are one for subnet field\n   bits, and 0 for host field bits.\
    \  (In all of our addresses, the least\n   significant bit (LSB) is on the right,\
    \ the most significant bit (MSB)\n   is on the left.)\n        MSB           \
    \                     LSB\n        --------------------------------------\n  \
    \     | subnet field    | host field         |\n        --------------------------------------\n\
    \   The subnet field could be different lengths for different size\n   subnets.\
    \  For instance, say a network had two large subnets and the\n   rest small subnets\
    \ (by large subnet we mean a large number of hosts).\n   Then the network administrator\
    \ might assign two types of addresses:\n        --------------------------------------\n\
    \       | subnet |               host          |  large subnets\n        --------------------------------------\n\
    \        --------------------------------------\n       |         subnet     \
    \        |  host   |  small subnets\n        --------------------------------------\n\
    \   In this case, the full range of subnet numbers would not be available\n  \
    \ to the small subnets, as the bits in the small subnet that correspond\n   to\
    \ those in the large subnet could not have the same values as those\n   in the\
    \ large subnets.  For instance, say that the large subnets had\n   4-bit subnet\
    \ numbers, and the small subnets had 8-bit subnet numbers.\n   If the large subnets\
    \ had values 0001 and 0010, then subnet numbers in\n   the range 00010000 to 00101111\
    \ could not be assigned to the small\n   subnets, otherwise there will be addresses\
    \ that would match both\n   subnets.\n   In any event, a network administrator\
    \ will typically assign values to\n   the two fields in numerical order.  For\
    \ example, within a given\n   subnet, hosts will be numbered 1, 2, 3, etc.  Within\
    \ a given network,\n   subnets will be numbered 1, 2, 3, etc.  The result is that\
    \ some\n   number of bits on the right side of the subnet and host fields will\n\
    \   be ones for some hosts and zeros for others, and some number of bits\n   on\
    \ the left side of the subnet and host fields will be zeros for all\n   subnets\
    \ and hosts.  The \"all zeros\" bits represent room for growth,\n   and the \"\
    ones and zeros\" bits represent bits already consumed by\n   growth.\n       \
    \ --------------------------------------\n       | subnet field    | host field\
    \         |\n       |-----+-----------+-------+------------|\n       |     | \
    \          |       |            |\n       | 0's | 1's & 0's |  0's  | 1's & 0's\
    \  |\n          /\\                /\\\n          ||                ||\n     \
    \   subnets can         hosts can grow here\n        grow here\n   Now, let's\
    \ assume that the number of hosts in a certain subnet grows\n   to the maximum\
    \ allowed, but that there is still room in the subnet\n   field to assign more\
    \ addresses.  We then have the following:\n        --------------------------------------\n\
    \       | subnet field    | host field         |\n       |-----+-----------+--------------------|\n\
    \       |     |           |                    |\n       | 0's | 1's & 0's | \
    \    1's & 0's      |\n   While the host field can no longer grow, there is still\
    \ room in the\n   address for growth.  The problem is that because of where the\
    \ growth\n   areas are situated, the remaining growth has been effectively\n \
    \  reserved for subnets only.\n   What should be done instead is to assign subnet\
    \ numbers so that the\n   ones start from the left of the subnet field and work\
    \ right.  In this\n   case we get the following:\n        --------------------------------------\n\
    \       | subnet field    | host field         |\n       |-----------+-------------+------------|\n\
    \       |           |             |            |\n       | 1's & 0's |    0's\
    \      | 1's & 0's  |\n                         /\\\n                        \
    \ ||\n                    Both hosts and subnets can\n                    grow\
    \ here\n   Now, both hosts and subnets individually have considerably more\n \
    \  growing space than before, although the combined growing space is the\n   same.\
    \  Since one can rarely predict how many hosts might end up in a\n   subnet, or\
    \ how many subnets there might eventually be, this\n   arrangement allows for\
    \ the maximum flexibility in growth.\n   Actually, the previous figure is misleading.\
    \  The boundary between\n   the host and subnet fields is being shown in the middle\
    \ of the growth\n   area.  However, the boundary could exist anywhere within the\
    \ growth\n   area.  Note that it is the mask itself that determines where the\n\
    \   boundary is.  Ones in the mask indicate subnet bits, and zeros\n   indicate\
    \ host bits.  We will show later that in fact the boundary\n   should lie somewhere\
    \ in the middle.  Putting it there minimizes the\n   number of times that the\
    \ masks must be changed in hosts.\n   2.1  Specification of the New Technique\n\
    \   Having given the appropriate explanatory material, we can now specify\n  \
    \ the procedure for subnet number assignment.  We need the following\n   definitions:\n\
    \   Host-assigned Bits (h-bits):  These are the bits, contiguous from\n      the\
    \ right, for which host values, within a given subnet, contain\n      both ones\
    \ and zeros.  Different subnets may have different h-bits.\n   Subnet-assigned\
    \ Bits (s-bits):  These are the bits, contiguous from\n      the left, which 1)\
    \ are not h-bits, AND 2) are required to\n      distinguish one subnet from another,\
    \ AND 3) include all bits\n      to the left of and including the right-most one.\
    \  Notice that\n      different subnets may have different s-bits.\n   Growth\
    \ Bits (g-bits):  These are the \"all zeros\" bits in between\n      the h-bits\
    \ and s-bits.\n   s-mask:  For a given subnet, the mask whereby all s-bits are\
    \ one,\n      and all g-bits and h-bits are zero.\n   g-mask:  For a given subnet,\
    \ the mask whereby all s-bits and g-bits\n      are one, and all h-bits are zero.\n\
    \   Subnet Field:  These are the one bits in the subnet mask (as\n      defined\
    \ in RFC-950).  These bits are on the left.  The subnet\n      field must at least\
    \ include all of the s-bits, and may\n      additionally include some or all of\
    \ the g-bits.\n   Host Field:  These are the zero bits in the subnet mask.\n \
    \     These bits are on the right.  The host field must at least\n      include\
    \ all of the h-bits, and may additionally include some\n      or all of the g-bits.\n\
    \   Mirror-image Counting:  Normal counting, in binary, causes one\n      bits\
    \ to start at the right and work left.  This is how host\n      values are assigned.\
    \  However, for subnet assignment, we want\n      the one bits to start at the\
    \ left and work right.  This process\n      is the mirror image of normal counting,\
    \ where the MSB is swapped\n      with the LSB, the second MSB is swapped with\
    \ the second LSB, and\n      so on.  So, where normal counting is:\n         \
    \       0       (reserved to mean \"this host\")\n               01\n        \
    \       10\n              011\n              100\n              101\n        \
    \      :\n              :\n        11...1110\n        11...1111       (reserved\
    \ to mean \"all hosts\")\n      and so on, Mirror-image, or MI counting, is:\n\
    \        0       (reserved to mean \"this subnet\")\n        10\n        01\n\
    \        110\n        001\n        101\n          :\n          :\n        011...11\n\
    \        111...11        (reserved to mean \"all subnets\")\n      and so on.\
    \  If the current MI counting value is, say, 001,\n      the \"next\" MI value\
    \ is 101, and the \"previous\" MI value is 11.\n   Now we can specify the algorithm.\
    \  We have the following functions:\n   Initialize(), AddSubnet(), RemoveSubnet(subnet#),\
    \ AddHost(subnet#),\n   and RemoveHost(subnet#,host#).\n   Notice that the algorithm\
    \ is described as though one state machine is\n   executing it.  In reality, there\
    \ may be a root Address Authority\n   (RootAA) that assigns subnet numbers (Initialize,\
    \ AddSubnet, and\n   RemoveSubnet), and subnet AA, that assign host numbers within\
    \ a\n   subnet (AddHost and RemoveHost).  While in general the AAs can act\n \
    \  independently, there are two cases where \"coordination\" is required\n   between\
    \ the rootAA and a subnetAA.  These are the cases where either\n   the rootAA\
    \ or the subnetAA \"grabs\" the last growth bit (in the former\n   case because\
    \ another subnet has been added, and in the latter because\n   another host has\
    \ been added).  Since it is impossible for the rootAA\n   and a subnetAA to simultaneously\
    \ grab the last growth bit, either one\n   or the other must do it.\n   Finally,\
    \ note that the following C language style notation is used:\n        &      \
    \         bit-wise AND function\n        ==              is equal to\n       \
    \ !=              is not equal to\n        x-mask(X)       the x-mask of X (where\
    \ x is s or g)\n   Initialize():\n      Assign the first subnet value to be 0\
    \ (the value reserved to mean\n      \"this subnet\").  This is not assigned to\
    \ any real subnet.\n   AddSubnet():\n      1.  Find the lowest non-zero (in MI\
    \ counting) non-assigned subnet\n          number S such that (S & g-mask(Y))\
    \ != (Y & g-mask(Y)) for all\n          existing subnet numbers Y, (Y != S).\n\
    \      2.  If all bits in S from the rightmost one bit left are ones,\n      \
    \    then label all bits to the left of and including one bit\n          position\
    \ to the right of the rightmost one bit in S to be\n          s-bits. Else, label\
    \ all bits to the left of and including the\n          rightmost one bit in S\
    \ to be s-bits.  This prevents the \"all\n          ones\" value (which is the\
    \ \"all subnets\" broadcast address)\n          from being assigned to a subnet.\
    \  (Since no hosts have been\n          added, the rightmost one bit is a subnet\
    \ bit.)\n      3.  Label all other bits in the address to be g-bits.  (By\n  \
    \        address, we mean that part of the IP address not including\n        \
    \  the network number.)\n      4.  Set the subnet mask to include at least all\
    \ s-bits, and\n          optionally some g-bits.  The subnet mask must be contiguous.\n\
    \          (Section 2.2 discusses the pros and cons of choosing a mask.)\n   \
    \   5.  For all existing subnet numbers Y (Y != S):\n          51. If (S & s-mask(Y))\
    \ == (Y & s-mask(Y)), then:\n              511.  Change the leftmost g-bit of\
    \ Y to an s-bit.  If\n                    the rootAA and YAA (the address authority\
    \ for Y) are\n                    separate AAs, then the YAA must be informed\
    \ of the\n                    change of bit status.  If this is the last g-bit,\n\
    \                    then this change must be coordinated with YAA.\n        \
    \      512.  Expand the subnet mask for all hosts in Y if\n                  \
    \  necessary (that is, if the subnet mask no longer\n                    includes\
    \ all s-bits).\n   RemoveSubnet(S):\n      1.  Consider B to be the bit position\
    \ of the rightmost s-bit in S.\n      2.  Remove S.\n      3.  For all existing\
    \ subnet numbers Y:\n          31.  If the bit in position B is not an s-bit,\
    \ or if the bit\n               in bit position B is a one, or if the bit in bit\
    \ position\n               B is a zero and all bits to the left of bit position\
    \ B\n               are ones, then do nothing (skip steps 32 and 33).\n      \
    \    32.  Change the s-bit in position B to a g-bit.\n          33.  If for any\
    \ other existing subnet numbers X\n               (X & s-mask(Y)) == (Y & s-mask(Y)),\
    \ then change the\n               g-bit in position B back into an s-bit for Y.\
    \  Else,\n               inform YAA that of the change of bit status.\n   AddHost(S):\n\
    \      1.  Create an address A consisting of subnet number S concatenated\n  \
    \        with zeros.\n      2.  Assign to A the same h-bits, g-bits, and s-bits\
    \ as the\n          other host addresses.\n      3.  Find the lowest non-zero\
    \ (using normal counting) non-assigned\n          host number H.\n      4.  If\
    \ all bits from the leftmost one bit to bit position 0 are\n          ones, then\
    \ execute steps 5 and 6 using bit position B equals\n          one bit position\
    \ to the left of the leftmost one bit in H.\n          Else, execute steps 5 and\
    \ 6 with bit position B equals\n          the leftmost one bit in H.  This prevents\
    \ the \"all ones\" value\n          (which is the \"all hosts\" broadcast address)\
    \ from being\n          assigned to a host.\n      5.  If bit position B is an\
    \ s-bit, then the host cannot be added.\n          Skip the remaining steps.\n\
    \      6.  If bit position B is a g-bit:\n          61.  Change the g-bit to an\
    \ h-bit for all hosts in S.  Note\n               that if this is the last g-bit,\
    \ this change must be\n               coordinated with the address authority assigning\
    \ subnet\n               numbers (see section 2.2).\n          62.  Modify the\
    \ subnet mask in all hosts if necessary.\n      7.  Create a new address A consisting\
    \ of S concatenated with H\n      8.  Assign A to the host.\n   RemoveHost(S,H):\n\
    \      1.  Remove H.\n      2.  If for all remaining host numbers in S, the value\
    \ of the bit\n          position of the leftmost h-bit is zero, and there is a\
    \ zero in\n          at least one of the bit positions to the right of the leftmost\n\
    \          h-bit, then for all hosts change the leftmost h-bit into a\n      \
    \    g-bit.\n      It is worth noting here that this technique is a 2-level subset\
    \ of\n      the more general n-level kampai addressing [5].  The main\n      difference\
    \ here is that n-level kampai results in non-contiguous\n      masks, while 2-level\
    \ does not.  In the description of kampai\n      addressing in [5], g-bits are\
    \ called a-bits, h-bits are called\n      g-bits, and s-bits are called i-bits.\n\
    \   2.2  An Example\n   For this example, we assume a class C network, so we will\
    \ only need\n   to work with 8 bits.  We start with 3 subnets, A, B, and C.  Our\n\
    \   nomenclature is h for h-bit and g for g-bit.  Note that h-bits can be\n  \
    \ one or zero, but g-bits are all zero.  The remaining bits are s-bits,\n   but\
    \ are shown as 1's and 0's according to the subnet number\n   assignment.  The\
    \ space is just to make the addresses and masks easier\n   to read.  Finally,\
    \ we number our bits 0 to 7 from right to left as\n   shown below.\n        Subnet\
    \  Address         Mask\n        A       10gg ghhh       1111 0000\n        B\
    \       01gg ghhh       1111 0000\n        C       110g ghhh       1111 0000\n\
    \            bit 7       bit 0\n   We see that each subnet has at most 6 hosts\
    \ (because of the three h-\n   bits).  Notice that we have chosen the masks so\
    \ that there is room\n   for growth in both hosts and subnets without requiring\
    \ a mask change.\n   However, we have generally allowed for more growth in subnets\
    \ than in\n   hosts because adding new subnets can cause mask changes in existing\n\
    \   subnets, while adding new hosts in a subnet only causes that subnet's\n  \
    \ mask to change.\n   Further, if a subnet's mask must change, but not all hosts\
    \ are\n   reconfigured at the same time, then it is less damaging if the not\n\
    \   yet reconfigured hosts have too large a mask (too many ones) than if\n   they\
    \ have too small a mask.  This is because with too large a mask, a\n   host may\
    \ think that another host which is in fact on the subnet is on\n   another subnet.\
    \  In this case, the host will send packets to the\n   gateway, and will be redirected\
    \ to the host.\n   However, with too small a mask, a host may think that another\
    \ host\n   which is in fact not on the subnet is on the subnet, and will ARP for\n\
    \   that host but receive no reply.  (Note that broadcasts may fail if\n   all\
    \ masks do not match.)\n   Finally, notice that subnet C requires three s-bits\
    \ instead of just\n   two.  This is because with just two, the subnet address\
    \ of C could be\n   \"11\" (rather than \"110\"), which is a broadcast value.\
    \  Step 2 of\n   AddSubnet checks for this case.\n   Now, a fourth subnet, D,\
    \ also with 6 hosts, is added.  We get:\n        Subnet  Addr            Mask\n\
    \        A       10gg ghhh       1111 0000\n        B       01gg ghhh       1111\
    \ 0000\n        C       110g ghhh       1111 0000\n        D       001g ghhh \
    \      1111 0000\n   Notice that none of the original subnets required a change\
    \ in any of\n   their status bits.  This is because, when D compared its subnet\n\
    \   number with the others (step 5 of AddSubnet(), using the s-mask),\n   they\
    \ were all different.  In other words, a router would be able to\n   distinguish\
    \ an address in D from addresses in A, B, and C.\n   Next, a fifth subnet, E,\
    \ is added.  We get:\n        Subnet  Addr            Mask\n        A       100g\
    \ ghhh       1111 0000\n        B       01gg ghhh       1111 0000\n        C \
    \      110g ghhh       1111 0000\n        D       001g ghhh       1111 0000\n\
    \        E       101g ghhh       1111 0000\n   Notice that this time, A was forced\
    \ to change its leftmost g-bit (bit\n   5) into an s-bit, because bit 5 is needed\
    \ to distinguish subnet A\n   from subnet E (step 511 of AddSubnet()).  Changing\
    \ bit 5 into an s-\n   bit prevents hosts from being added to A to the point where\
    \ bit 5\n   would be changed into a one (that is, step 5 of AddHost() would\n\
    \   fail).\n   Notice also that if the masks in A, B, and C were originally set\
    \ to\n   1100.0000, then the addition of E would have caused A's mask to\n   change\
    \ to 1110.0000 (Step 512 of AddSubnet()).\n   Next, 8 hosts each are added to\
    \ subnets A and C, thus causing the\n   right-most g-bit in each to change to\
    \ an h-bit.\n        Subnet  Addr            Mask\n        A       100g hhhh \
    \      1111 0000\n        B       01gg ghhh       1111 0000\n        C       110g\
    \ hhhh       1111 0000\n        D       001g ghhh       1111 0000\n        E \
    \      101g ghhh       1111 0000\n   Notice again that no masks have changed.\
    \  If the masks for A, B, and\n   C were originally set to 1111 1000, then they\
    \ would have required\n   changing (step 62 of AddHost()).\n   Next, enough hosts\
    \ are added to subnet B that all of its remaining\n   g-bits become h-bits.\n\
    \        Subnet  Addr            Mask\n        A       100g hhhh       1111 0000\n\
    \        B       01hh hhhh       1100 0000\n        C       110g hhhh       1111\
    \ 0000\n        D       001g ghhh       1111 0000\n        E       101g ghhh \
    \      1111 0000\n   Notice here that the masks in B's subnet had to be changed\
    \ to\n   accommodate the new h-bits (step 62 of AddHost()).  Notice also that\n\
    \   if the person assigning host addresses for B (B Address Authority, or\n  \
    \ BAA) is different than the person assigning network numbers (RootAA),\n   then\
    \ BAA must coordinate the change of its last g-bit to an h-bit\n   with the RootAA.\
    \  This allows the RootAA to properly assign\n   additional subnet numbers, as\
    \ in the next step, where we add another\n   subnet F:\n        Subnet  Addr \
    \           Mask\n        A       100g hhhh       1111 0000\n        B       01hh\
    \ hhhh       1100 0000\n        C       110g hhhh       1111 0000\n        D \
    \      001g ghhh       1111 0000\n        E       101g ghhh       1111 0000\n\
    \        F       1110 ghhh       1111 0000\n   Notice that F received subnet number\
    \ 1110 rather than subnet number\n   011 (which is what comes after 101 in MI\
    \ counting).  The reason is\n   that 1) 011 is not distinguishable from B's subnet\
    \ address using B's\n   mask, and 2) we can't increase B's mask to make it distinguishable\n\
    \   because B has already assigned hosts at bit position 5.  In other\n   words,\
    \ when the comparison of step 1 in AddSubnet() was tried on\n   number 011, the\
    \ two values were equal, and so the next number was\n   tried.  In fact, no subnet\
    \ numbers with 01 in bit positions 7 and 6\n   can be assigned (unless B loses\
    \ hosts).\n   Next, subnet E is removed:\n        Subnet  Addr            Mask\n\
    \        A       10gg hhhh       1111 0000\n        B       01hh hhhh       1100\
    \ 0000\n        C       110g hhhh       1111 0000\n        D       001g ghhh \
    \      1111 0000\n        F       1110 ghhh       1111 0000\n   Notice that this\
    \ caused subnet A to change an s-bit back into a g-\n   bit.  This is because\
    \ the equality of step 33 of RemoveSubnet() did\n   not hold true for subnet A\
    \ with respect to the remaining subnets.\n"
- title: References
  contents:
  - "References\n   [1] Braden, R., \"Requirements for Internet Hosts -- Communication\n\
    \       Layers\", RFC 1122, USC/Information Sciences Institute, October\n    \
    \   1989.\n   [2] Mogul, J., and J. Postel, \"Internet Standard Subnetting\n \
    \      Procedure\", RFC 950, USC/Information Sciences Institute, August\n    \
    \   1985.\n   [3] Moy, J., \"OSPF Specification\", RFC 1131, Proteon, October\
    \ 1989.\n   [4] Postel, J., \"Internet Control Message Protocol\", RFC 792,\n\
    \       USC/Information Sciences Institute, September 1981.\n   [5] Tsuchiya,\
    \ P., \"Efficient and Flexible Hierarchical Address\n       Assignment\", TM-ARH-018495,\
    \ Bellcore, February 1991.\n   [6] Hedrick, C., \"Routing Information Protocol\"\
    \ RFC 1058, Rutgers\n       University, June 1988.\n   [7] Braden, R., and J.\
    \ Postel, \"Requirements for Internet Gateways\",\n       RFC 1009, USC/Information\
    \ Sciences Institute, June 1987.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul F. Tsuchiya\n   Bellcore\n   435 South St.5 South St.\n\
    \   MRE 2L-281\n   Morristown, NJ 07960\n   Phone: 201 829-4484\n   EMail: tsuchiya@thumper.bellcore.com\n"
