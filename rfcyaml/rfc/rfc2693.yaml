- title: __initial_text__
  contents:
  - '                        SPKI Certificate Theory

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The SPKI Working Group has developed a standard form for digital\n\
    \   certificates whose main purpose is authorization rather than\n   authentication.\
    \  These structures bind either names or explicit\n   authorizations to keys or\
    \ other objects.  The binding to a key can be\n   directly to an explicit key,\
    \ or indirectly through the hash of the\n   key or a name for it.  The name and\
    \ authorization structures can be\n   used separately or together.  We use S-expressions\
    \ as the standard\n   format for these certificates and define a canonical form\
    \ for those\n   S-expressions.  As part of this development, a mechanism for deriving\n\
    \   authorization decisions from a mixture of certificate types was\n   developed\
    \ and is presented in this document.\n   This document gives the theory behind\
    \ SPKI certificates and ACLs\n   without going into technical detail about those\
    \ structures or their\n   uses.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Overview of Contents.......................................3\n\
    \   1.1 Glossary..................................................4\n   2. Name\
    \ Certification.........................................5\n   2.1 First Definition\
    \ of CERTIFICATE...........................6\n   2.2 The X.500 Plan and X.509..................................6\n\
    \   2.3 X.509, PEM and PGP........................................7\n   2.4 Rethinking\
    \ Global Names...................................7\n   2.5 Inescapable Identifiers...................................9\n\
    \   2.6 Local Names..............................................10\n   2.6.1\
    \ Basic SDSI Names.......................................10\n   2.6.2 Compound\
    \ SDSI Names....................................10\n   2.7 Sources of Global Identifiers............................11\n\
    \   2.8 Fully Qualified SDSI Names...............................11\n   2.9 Fully\
    \ Qualified X.509 Names..............................12\n   2.10 Group Names.............................................12\n\
    \   3. Authorization.............................................12\n   3.1 Attribute\
    \ Certificates...................................13\n   3.2 X.509v3 Extensions.......................................13\n\
    \   3.3 SPKI Certificates........................................14\n   3.4 ACL\
    \ Entries..............................................15\n   4. Delegation................................................15\n\
    \   4.1 Depth of Delegation......................................15\n   4.1.1\
    \ No control.............................................15\n   4.1.2 Boolean\
    \ control........................................16\n   4.1.3 Integer control........................................16\n\
    \   4.1.4 The choice: boolean....................................16\n   4.2 May\
    \ a Delegator Also Exercise the Permission?............17\n   4.3 Delegation of\
    \ Authorization vs. ACLs.....................17\n   5. Validity Conditions.......................................18\n\
    \   5.1 Anti-matter CRLs.........................................18\n   5.2 Timed\
    \ CRLs...............................................19\n   5.3 Timed Revalidations......................................20\n\
    \   5.4 Setting the Validity Interval............................20\n   5.5 One-time\
    \ Revalidations...................................20\n   5.6 Short-lived Certificates.................................21\n\
    \   5.7 Other possibilities......................................21\n   5.7.1\
    \ Micali's Inexpensive On-line Results...................21\n   5.7.2 Rivest's\
    \ Reversal of the CRL Logic.....................21\n   6. Tuple Reduction...........................................22\n\
    \   6.1 5-tuple Defined..........................................23\n   6.2 4-tuple\
    \ Defined..........................................24\n   6.3 5-tuple Reduction\
    \ Rules..................................24\n   6.3.1 AIntersect.............................................25\n\
    \   6.3.2 VIntersect.............................................27\n   6.3.3\
    \ Threshold Subjects.....................................27\n   6.3.4 Certificate\
    \ Path Discovery.............................28\n   6.4 4-tuple Reduction........................................28\n\
    \   6.4.1 4-tuple Threshold Subject Reduction....................29\n   6.4.2\
    \ 4-tuple Validity Intersection..........................29\n   6.5 Certificate\
    \ Translation..................................29\n   6.5.1 X.509v1................................................29\n\
    \   6.5.2 PGP....................................................30\n   6.5.3\
    \ X.509v3................................................30\n   6.5.4 X9.57..................................................30\n\
    \   6.5.5 SDSI 1.0...............................................30\n   6.5.6\
    \ SPKI...................................................31\n   6.5.7 SSL....................................................31\n\
    \   6.6 Certificate Result Certificates..........................32\n   7. Key\
    \ Management............................................33\n   7.1 Through Inescapable\
    \ Names................................33\n   7.2 Through a Naming Authority...............................33\n\
    \   7.3 Through <name,key> Certificates..........................34\n   7.4 Increasing\
    \ Key Lifetimes.................................34\n   7.5 One Root Per Individual..................................35\n\
    \   7.6 Key Revocation Service...................................36\n   7.7 Threshold\
    \ ACL Subjects...................................36\n   8. Security Considerations...................................37\n\
    \   References...................................................38\n   Acknowledgments..............................................40\n\
    \   Authors' Addresses...........................................41\n   Full Copyright\
    \ Statement.....................................43\n"
- title: 1. Overview of Contents
  contents:
  - "1. Overview of Contents\n   This document contains the following sections:\n\
    \   Section 2: history of name certification, from 1976 on.\n   Section 3: discussion\
    \ of authorization, rather than authentication,\n   as the desired purpose of\
    \ a certificate.\n   Section 4: discussion of delegation.\n   Section 5: discussion\
    \ of validity conditions: date ranges, CRLs, re-\n   validations and one-time\
    \ on-line validity tests.\n   Section 6: definition of 5-tuples and their reduction.\n\
    \   Section 7: discussion of key management.\n   Section 8: security considerations.\n\
    \   The References section lists all documents referred to in the text as\n  \
    \ well as readings which might be of interest to anyone reading on this\n   topic.\n\
    \   The Acknowledgements section, including a list of contributors\n   primarily\
    \ from the start of the working group.  [The archive of\n   working group mail\
    \ is a more accurate source of contributor\n   information.]\n   The Authors'\
    \ Addresses section gives the addresses, telephone numbers\n   and e-mail addresses\
    \ of the authors.\n"
- title: 1.1 Glossary
  contents:
  - "1.1 Glossary\n   We use some terms in the body of this document in ways that\
    \ could be\n   specific to SPKI:\n   ACL: an Access Control List: a list of entries\
    \ that anchors a\n   certificate chain.  Sometimes called a \"list of root keys\"\
    , the ACL\n   is the source of empowerment for certificates.  That is, a\n   certificate\
    \ communicates power from its issuer to its subject, but\n   the ACL is the source\
    \ of that power (since it theoretically has the\n   owner of the resource it controls\
    \ as its implicit issuer).  An ACL\n   entry has potentially the same content\
    \ as a certificate body, but has\n   no Issuer (and is not signed).  There is\
    \ most likely one ACL for each\n   resource owner, if not for each controlled\
    \ resource.\n   CERTIFICATE: a signed instrument that empowers the Subject.  It\n\
    \   contains at least an Issuer and a Subject.  It can contain validity\n   conditions,\
    \ authorization and delegation information.  Certificates\n   come in three categories:\
    \ ID (mapping <name,key>), Attribute (mapping\n   <authorization,name>), and Authorization\
    \ (mapping\n   <authorization,key>).  An SPKI authorization or attribute certificate\n\
    \   can pass along all the empowerment it has received from the Issuer or\n  \
    \ it can pass along only a portion of that empowerment.\n   ISSUER: the signer\
    \ of a certificate and the source of empowerment\n   that the certificate is communicating\
    \ to the Subject.\n   KEYHOLDER: the person or other entity that owns and controls\
    \ a given\n   private key.  This entity is said to be the keyholder of the keypair\n\
    \   or just the public key, but control of the private key is assumed in\n   all\
    \ cases.\n   PRINCIPAL: a cryptographic key, capable of generating a digital\n\
    \   signature.  We deal with public-key signatures in this document but\n   any\
    \ digital signature method should apply.\n   SPEAKING: A Principal is said to\
    \ \"speak\" by means of a digital\n   signature.  The statement made is the signed\
    \ object (often a\n   certificate).  The Principal is said to \"speak for\" the\
    \ Keyholder.\n   SUBJECT: the thing empowered by a certificate or ACL entry. \
    \ This can\n   be in the form of a key, a name (with the understanding that the\
    \ name\n   is mapped by certificate to some key or other object), a hash of some\n\
    \   object, or a set of keys arranged in a threshold function.\n   S-EXPRESSION:\
    \ the data format chosen for SPKI/SDSI.  This is a LISP-\n   like parenthesized\
    \ expression with the limitations that empty lists\n   are not allowed and the\
    \ first element in any S-expression must be a\n   string, called the \"type\"\
    \ of the expression.\n   THRESHOLD SUBJECT: a Subject for an ACL entry or certificate\
    \ that\n   specifies K of N other Subjects.  Conceptually, the power being\n \
    \  transmitted to the Subject by the ACL entry or certificate is\n   transmitted\
    \ in (1/K) amount to each listed subordinate Subject.  K of\n   those subordinate\
    \ Subjects must agree (by delegating their shares\n   along to the same object\
    \ or key) for that power to be passed along.\n   This mechanism introduces fault\
    \ tolerance and is especially useful in\n   an ACL entry, providing fault tolerance\
    \ for \"root keys\".\n"
- title: 2. Name Certification
  contents:
  - "2. Name Certification\n   Certificates were originally viewed as having one function:\
    \ binding\n   names to keys or keys to names.  This thought can be traced back\
    \ to\n   the paper by Diffie and Hellman introducing public key cryptography\n\
    \   in 1976.  Prior to that time, key management was risky, involved and\n   costly,\
    \ sometimes employing special couriers with briefcases\n   handcuffed to their\
    \ wrists.\n   Diffie and Hellman thought they had radically solved this problem.\n\
    \   \"Given a system of this kind, the problem of key distribution is\n   vastly\
    \ simplified.  Each user generates a pair of inverse\n   transformations, E and\
    \ D, at his terminal.  The deciphering\n   transformation, D, must be kept secret\
    \ but need never be communicated\n   on any channel.  The enciphering key, E,\
    \ can be made public by\n   placing it in a public directory along with the user's\
    \ name and\n   address.  Anyone can then encrypt messages and send them to the\
    \ user,\n   but no one else can decipher messages intended for him.\" [DH]\n \
    \  This modified telephone book, fully public, took the place of the\n   trusted\
    \ courier.  This directory could be put on-line and therefore\n   be available\
    \ on demand, worldwide.  In considering that prospect,\n   Loren Kohnfelder, in\
    \ his 1978 bachelor's thesis in electrical\n   engineering from MIT [KOHNFELDER],\
    \ noted: \"Public-key communication\n   works best when the encryption functions\
    \ can reliably be shared among\n   the communicants (by direct contact if possible).\
    \  Yet when such a\n   reliable exchange of functions is impossible the next best\
    \ thing is\n   to trust a third party.  Diffie and Hellman introduce a central\n\
    \   authority known as the Public File.\"\n"
- title: 2.1 First Definition of CERTIFICATE
  contents:
  - "2.1 First Definition of CERTIFICATE\n   Kohnfelder then noted, \"Each individual\
    \ has a name in the system by\n   which he is referenced in the Public File. \
    \ Once two communicants\n   have gotten each other's keys from the Public File\
    \ they can securely\n   communicate.  The Public File digitally signs all of its\n\
    \   transmissions so that enemy impersonation of the Public File is\n   precluded.\"\
    \  In an effort to prevent performance problems, Kohnfelder\n   invented a new\
    \ construct: a digitally signed data record containing a\n   name and a public\
    \ key.  He called this new construct a CERTIFICATE.\n   Because it was digitally\
    \ signed, such a certificate could be held by\n   non-trusted parties and passed\
    \ around from person to person,\n   resolving the performance problems involved\
    \ in a central directory.\n"
- title: 2.2 The X.500 Plan and X.509
  contents:
  - "2.2 The X.500 Plan and X.509\n   Ten years after Kohnfelder's thesis, the ISO\
    \ X.509 recommendation was\n   published as part of X.500.  X.500 was to be a\
    \ global, distributed\n   database of named entities: people, computers, printers,\
    \ etc.  In\n   other words, it was to be a global, on-line telephone book.  The\n\
    \   organizations owning some portion of the name space would maintain\n   that\
    \ portion and possibly even provide the computers on which it was\n   stored.\
    \  X.509 certificates were defined to bind public keys to X.500\n   path names\
    \ (Distinguished Names) with the intention of noting which\n   keyholder had permission\
    \ to modify which X.500 directory nodes.  In\n   fact, the X.509 data record was\
    \ originally designed to hold a\n   password instead of a public key as the record-access\
    \ authentication\n   mechanism.\n   The original X.500 plan is unlikely ever to\
    \ come to fruition.\n   Collections of directory entries (such as employee lists,\
    \ customer\n   lists, contact lists, etc.) are considered valuable or even\n \
    \  confidential by those owning the lists and are not likely to be\n   released\
    \ to the world in the form of an X.500 directory sub-tree.\n   For an extreme\
    \ example, imagine the CIA adding its directory of\n   agents to a world-wide\
    \ X.500 pool.\n   The X.500 idea of a distinguished name (a single, globally unique\n\
    \   name that everyone could use when referring to an entity) is also not\n  \
    \ likely to occur.  That idea requires a single, global naming\n   discipline\
    \ and there are too many entities already in the business of\n   defining names\
    \ not under a single discipline.  Legacy therefore\n   militates against such\
    \ an idea.\n"
- title: 2.3 X.509, PEM and PGP
  contents:
  - "2.3 X.509, PEM and PGP\n   The Privacy Enhanced Mail [PEM] effort of the Internet\
    \ Engineering\n   Task Force [RFC1114] adopted X.509 certificates, but with a\
    \ different\n   interpretation.  Where X.509 was originally intended to mean \"\
    the\n   keyholder may modify this portion of the X.500 database\", PEM took\n\
    \   the certificate to mean \"the key speaks for the named person\".  What\n \
    \  had been an access control instrument was now an identity instrument,\n   along\
    \ the lines envisioned by Diffie, Hellman and Kohnfelder.\n   The insistence on\
    \ X.509 certificates with a single global root\n   delayed PEM's adoption past\
    \ its window of viability.  RIPEM, by Mark\n   Riordan of MSU, was a version of\
    \ PEM without X.509 certificates.  It\n   was distributed and used by a small\
    \ community, but fell into disuse.\n   MOSS (a MIME-enhanced version of PEM, produced\
    \ by TIS (www.tis.com))\n   made certificate use optional, but received little\
    \ distribution.\n   At about the same time, in 1991, Phil Zimmermann's PGP was\
    \ introduced\n   with a different certificate model.  Instead of waiting for a\
    \ single\n   global root and the hierarchy of Certificate Authorities descending\n\
    \   from that root, PGP allowed multiple, (hopefully) independent but not\n  \
    \ specially trusted individuals to sign a <name,key> association,\n   attesting\
    \ to its validity.  The theory was that with enough such\n   signatures, that\
    \ association could be trusted because not all of\n   these signer would be corrupt.\
    \  This was known as the \"web of trust\"\n   model.  It differed from X.509 in\
    \ the method of assuring trust in the\n   <name,key> binding, but it still intended\
    \ to bind a globally unique\n   name to a key.  With PEM and PGP, the intention\
    \ was for a keyholder\n   to be known to anyone in the world by this certified\
    \ global name.\n"
- title: 2.4 Rethinking Global Names
  contents:
  - "2.4 Rethinking Global Names\n   The assumption that the job of a certificate\
    \ was to bind a name to a\n   key made sense when it was first published.  In\
    \ the 1970's, people\n   operated in relatively small communities.  Relationships\
    \ formed face\n   to face.  Once you knew who someone was, you often knew enough\
    \ to\n   decide how to behave with that person.  As a result, people have\n  \
    \ reduced this requirement to the simply stated: \"know who you're\n   dealing\
    \ with\".\n   Names, in turn, are what we humans use as identifiers of persons.\
    \  We\n   learn this practice as infants.  In the family environment names work\n\
    \   as identifiers, even today.  What we learn as infants is especially\n   difficult\
    \ to re-learn later in life.  Therefore, it is natural for\n   people to translate\
    \ the need to know who the keyholder is into a need\n   to know the keyholder's\
    \ name.\n   Computer applications need to make decisions about keyholders.  These\n\
    \   decisions are almost never made strictly on the basis of a\n   keyholder's\
    \ name.  There is some other fact about the keyholder of\n   interest to the application\
    \ (or to the human being running the\n   application).  If a name functions at\
    \ all for security purposes, it\n   is as an index into some database (or human\
    \ memory) of that other\n   information.  To serve in this role, the name must\
    \ be unique, in\n   order to serve as an index, and there must be some information\
    \ to be\n   indexed.\n   The names we use to identify people are usually unique,\
    \ within our\n   local domain, but that is not true on a global scale.  It is\n\
    \   extremely unlikely that the name by which we know someone, a given\n   name,\
    \ would function as a unique identifier on the Internet.  Given\n   names continue\
    \ to serve the social function of making the named\n   person feel recognized\
    \ when addressed by name but they are inadequate\n   as the identifiers envisioned\
    \ by Diffie, Hellman and Kohnfelder.\n   In the 1970's and even through the early\
    \ 1990's, relationships formed\n   in person and one could assume having met the\
    \ keyholder and therefore\n   having acquired knowledge about that person.  If\
    \ a name could be\n   found that was an adequate identifier of that keyholder,\
    \ then one\n   might use that name to index into memories about the keyholder\
    \ and\n   then be able to make the relevant decision.\n   In the late 1990's,\
    \ this is no longer true.  With the explosion of\n   the Internet, it is likely\
    \ that one will encounter keyholders who are\n   complete strangers in the physical\
    \ world and will remain so.  Contact\n   will be made digitally and will remain\
    \ digital for the duration of\n   the relationship.  Therefore, on first encounter\
    \ there is no body of\n   knowledge to be indexed by any identifier.\n   One might\
    \ consider building a global database of facts about all\n   persons in the world\
    \ and making that database available (perhaps for\n   a fee).  The name that indexes\
    \ that database might also serve as a\n   globally unique ID for the person referenced.\
    \  The database entry\n   under that name could contain all the information needed\
    \ to allow\n   someone to make a security decision.  Since there are multiple\n\
    \   decision-makers, each interested in specific information, the\n   database\
    \ would need to contain the union of multiple sets of\n   information.  However,\
    \ that solution would constitute a massive\n   privacy violation and would probably\
    \ be rejected as politically\n   impossible.\n   A globally unique ID might even\
    \ fail when dealing with people we do\n   know.  Few of us know the full given\
    \ names of people with whom we\n   deal.  A globally unique name for a person\
    \ would be larger than the\n   full given name (and probably contain it, out of\
    \ deference to a\n   person's fondness for his or her own name).  It would therefore\
    \ not\n   be a name by which we know the person, barring a radical change in\n\
    \   human behavior.\n   A globally unique ID that contains a person's given name\
    \ poses a\n   special danger.  If a human being is part of the process (e.g.,\n\
    \   scanning a database of global IDs in order to find the ID of a\n   specific\
    \ person for the purpose of issuing an attribute certificate),\n   then it is\
    \ likely that the human operator would pay attention to the\n   familiar portion\
    \ of the ID (the common name) and pay less attention\n   to the rest.  Since the\
    \ common name is not an adequate ID, this can\n   lead to mistakes.  Where there\
    \ can be mistakes, there is an avenue\n   for attack.\n   Where globally unique\
    \ identifiers need to be used, perhaps the best\n   ID is one that is uniform\
    \ in appearance (such as a long number or\n   random looking text string) so that\
    \ it has no recognizable sub-field.\n   It should also be large enough (from a\
    \ sparse enough name space) that\n   typographical errors would not yield another\
    \ valid identifier.\n"
- title: 2.5 Inescapable Identifiers
  contents:
  - "2.5 Inescapable Identifiers\n   Some people speak of global IDs as if they were\
    \ inescapable\n   identifiers, able to prevent someone from doing evil under one\
    \ name,\n   changing his name and starting over again.  To make that scenario\n\
    \   come true, one would have to have assignment of such identifiers\n   (probably\
    \ by governments, at birth) and some mechanism so that it is\n   always possible\
    \ to get from any flesh and blood person back to his or\n   her identifier.  Given\
    \ that latter mechanism, any Certificate\n   Authority desiring to issue a certificate\
    \ to a given individual would\n   presumably choose the same, inescapable name\
    \ for that certificate.  A\n   full set of biometrics might suffice, for example,\
    \ to look up a\n   person without danger of false positive in a database of globally\n\
    \   assigned ID numbers and with that procedure one could implement\n   inescapable\
    \ IDs.\n   The use of an inescapable identifier might be possible in some\n  \
    \ countries, but in others (such as the US) it would meet strong\n   political\
    \ opposition.  Some countries have government-assigned ID\n   numbers for citizens\
    \ but also have privacy regulations that prohibit\n   the use of those numbers\
    \ for routine business.  In either of these\n   latter cases, the inescapable\
    \ ID would not be available for use in\n   routine certificates.\n   There was\
    \ a concern that commercial Certificate Authorities might\n   have been used to\
    \ bring inescapable names into existence, bypassing\n   the political process\
    \ and the opposition to such names in those\n   countries where such opposition\
    \ is strong.  As the (name,key)\n   certificate business is evolving today, there\
    \ are multiple competing\n   CAs each creating disjoint Distinguished Name spaces.\
    \  There is also\n   no real block to the creation of new CAs.  Therefore a person\
    \ is able\n   to drop one Distinguished Name and get another, by changing CA,\n\
    \   making these names not inescapable.\n"
- title: 2.6 Local Names
  contents:
  - "2.6 Local Names\n   Globally unique names may be politically undesirable and\
    \ relatively\n   useless, in the world of the Internet, but we use names all the\
    \ time.\n   The names we use are local names.  These are the names we write in\n\
    \   our personal address books or use as nicknames or aliases with e-mail\n  \
    \ agents.  They can be IDs assigned by corporations (e.g., bank account\n   numbers\
    \ or employee numbers).  Those names or IDs do not need to be\n   globally unique.\
    \  Rather, they need to be unique for the one entity\n   that maintains that address\
    \ book, e-mail alias file or list of\n   accounts.  More importantly, they need\
    \ to be meaningful to the person\n   who uses them as indexes.\n   Ron Rivest\
    \ and Butler Lampson showed with SDSI 1.0 [SDSI] that one\n   can not only use\
    \ local names locally, one can use local names\n   globally.  The clear security\
    \ advantage and operational simplicity of\n   SDSI names caused us in the SPKI\
    \ group to adopt SDSI names as part of\n   the SPKI standard.\n"
- title: 2.6.1 Basic SDSI Names
  contents:
  - "2.6.1 Basic SDSI Names\n   A basic SDSI 2.0 name is an S-expression with two\
    \ elements: the word\n   \"name\" and the chosen name.  For example,\n       \
    \ george:  (name fred)\n   represents a basic SDSI name \"fred\" in the name space\
    \ defined by\n   george.\n"
- title: 2.6.2 Compound SDSI Names
  contents:
  - "2.6.2 Compound SDSI Names\n   If fred in turn defines a name, for example,\n\
    \        fred:  (name sam)\n   then george can refer to this same entity as\n\
    \        george:  (name fred sam)\n"
- title: 2.7 Sources of Global Identifiers
  contents:
  - "2.7 Sources of Global Identifiers\n   Even though humans use local names, computer\
    \ systems often need\n   globally unique identifiers.  Even in the examples of\
    \ section 2.6.2\n   above, we needed to make the local names more global and did\
    \ so by\n   specifying the name-space owner.\n   If we are using public key cryptography,\
    \ we have a ready source of\n   globally unique identifiers.\n   When one creates\
    \ a key pair, for use in public key cryptography, the\n   private key is bound\
    \ to its owner by good key safeguarding practice.\n   If that private key gets\
    \ loose from its owner, then a basic premise\n   of public key cryptography has\
    \ been violated and that key is no\n   longer of interest.\n   The private key\
    \ is also globally unique.  If it were not, then the\n   key generation process\
    \ would be seriously flawed and we would have to\n   abandon this public key system\
    \ implementation.\n   The private key must be kept secret, so it is not a possible\n\
    \   identifier, but each public key corresponds to one private key and\n   therefore\
    \ to one keyholder.  The public key, viewed as a byte string,\n   is therefore\
    \ an identifier for the keyholder.\n   If there exists a collision-free hash function,\
    \ then a collision-free\n   hash of the public key is also a globally unique identifier\
    \ for the\n   keyholder, and probably a shorter one than the public key.\n"
- title: 2.8 Fully Qualified SDSI Names
  contents:
  - "2.8 Fully Qualified SDSI Names\n   SDSI local names are of great value to their\
    \ definer.  Each local\n   name maps to one or more public keys and therefore\
    \ to the\n   corresponding keyholder(s).  Through SDSI's name chaining, these\n\
    \   local names become useful potentially to the whole world.  [See\n   section\
    \ 2.6.2 for an example of SDSI name chaining.]\n   To a computer system making\
    \ use of these names, the name string is\n   not enough.  One must identify the\
    \ name space in which that byte\n   string is defined.  That name space can be\
    \ identified globally by a\n   public key.\n   It is SDSI 1.0 convention, preserved\
    \ in SPKI, that if a (local) SDSI\n   name occurs within a certificate, then the\
    \ public key of the issuer\n   is the identifier of the name space in which that\
    \ name is defined.\n   However, if a SDSI name is ever to occur outside of a certificate,\n\
    \   the name space within which it is defined must be identified.  This\n   gives\
    \ rise to the Fully Qualified SDSI Name.  That name is a public\n   key followed\
    \ by one or more names relative to that key.  If there are\n   two or more names,\
    \ then the string of names is a SDSI name chain.\n   For example,\n        (name\
    \ (hash sha1 |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|) jim therese)\n   is a fully qualified\
    \ SDSI name, using the SHA-1 hash of a public key\n   as the global identifier\
    \ defining the name space and anchoring this\n   name string.\n"
- title: 2.9 Fully Qualified X.509 Names
  contents:
  - "2.9 Fully Qualified X.509 Names\n   An X.509 Distinguished Name can and sometimes\
    \ must be expressed as a\n   Fully Qualified Name.  If the PEM or original X.500\
    \ vision of a\n   single root for a global name space had come true, this wouldn't\
    \ be\n   necessary because all names would be relative to that same one root\n\
    \   key.  However, there is not now and is not likely ever to be a single\n  \
    \ root key.  Therefore, every X.509 name should be expressed as the\n   pair\n\
    \        (name <root key> <leaf name>)\n   if all leaf names descending from that\
    \ root are unique.  If\n   uniqueness is enforced only within each individual\
    \ CA, then one would\n   build a Fully Qualified Name chain from an X.509 certificate\
    \ chain,\n   yielding the form\n        (name <root key> <CA(1)> <CA(2)> ... <CA(k)>\
    \ <leaf name>).\n"
- title: 2.10 Group Names
  contents:
  - "2.10 Group Names\n   SPKI/SDSI does not claim to enforce one key per name.  Therefore,\
    \ a\n   named group can be defined by issuing multiple (name,key)\n   certificates\
    \ with the same name -- one for each group member.\n"
- title: 3. Authorization
  contents:
  - "3. Authorization\n   Fully qualified SDSI names represent globally unique names,\
    \ but at\n   every step of their construction the local name used is presumably\n\
    \   meaningful to the issuer.  Therefore, with SDSI name certificates one\n  \
    \ can identify the keyholder by a name relevant to someone.\n   However, what\
    \ an application needs to do, when given a public key\n   certificate or a set\
    \ of them, is answer the question of whether the\n   remote keyholder is permitted\
    \ some access.  That application must\n   make a decision.  The data needed for\
    \ that decision is almost never\n   the spelling of a keyholder's name.\n   Instead,\
    \ the application needs to know if the keyholder is authorized\n   for some access.\
    \  This is the primary job of a certificate, according\n   to the members of the\
    \ SPKI WG, and the SPKI certificate was designed\n   to meet this need as simply\
    \ and directly as possible.\n   We realize that the world is not going to switch\
    \ to SPKI certificates\n   overnight.  Therefore, we developed an authorization\
    \ computation\n   process that can use certificates in any format.  That process\
    \ is\n   described below in section 6.\n   The various methods of establishing\
    \ authorization are documented\n   below, briefly.  (See also [UPKI])\n"
- title: 3.1 Attribute Certificates
  contents:
  - "3.1 Attribute Certificates\n   An Attribute Certificate, as defined in X9.57,\
    \ binds an attribute\n   that could be an authorization to a Distinguished Name.\
    \  For an\n   application to use this information, it must combine an attribute\n\
    \   certificate with an ID certificate, in order to get the full mapping:\n  \
    \      authorization -> name -> key\n   Presumably the two certificates involved\
    \ came from different issuers,\n   one an authority on the authorization and the\
    \ other an authority on\n   names.  However, if either of these issuers were subverted,\
    \ then an\n   attacker could obtain an authorization improperly.  Therefore, both\n\
    \   the issuers need to be trusted with the authorization decision.\n"
- title: 3.2 X.509v3 Extensions
  contents:
  - "3.2 X.509v3 Extensions\n   X.509v3 permits general extensions.  These extensions\
    \ can be used to\n   carry authorization information.  This makes the certificate\
    \ an\n   instrument mapping both:\n        authorization -> key\n   and\n    \
    \    name -> key\n   In this case, there is only one issuer, who must be an authority\
    \ on\n   both the authorization and the name.\n   Some propose issuing a master\
    \ X.509v3 certificate to an individual\n   and letting extensions hold all the\
    \ attributes or authorizations the\n   individual would need.  This would require\
    \ the issuer to be an\n   authority on all of those authorizations.  In addition,\
    \ this\n   aggregation of attributes would result in shortening the lifetime of\n\
    \   the certificate, since each attribute would have its own lifetime.\n   Finally,\
    \ aggregation of attributes amounts to the building of a\n   dossier and represents\
    \ a potential privacy violation.\n   For all of these reasons, it is desirable\
    \ that authorizations be\n   limited to one per certificate.\n"
- title: 3.3 SPKI Certificates
  contents:
  - "3.3 SPKI Certificates\n   A basic SPKI certificate defines a straight authorization\
    \ mapping:\n        authorization -> key\n   If someone wants access to a keyholder's\
    \ name, for logging purposes\n   or even for punishment after wrong-doing, then\
    \ one can map from key\n   to location information (name, address, phone, ...)\
    \ to get:\n        authorization -> key -> name\n   This mapping has an apparent\
    \ security advantage over the attribute\n   certificate mapping.  In the mapping\
    \ above, only the\n        authorization -> key\n   mapping needs to be secure\
    \ at the level required for the access\n   control mechanism.  The\n        key\
    \ -> name\n   mapping (and the issuer of any certificates involved) needs to be\n\
    \   secure enough to satisfy lawyers or private investigators, but a\n   subversion\
    \ of this mapping does not permit the attacker to defeat the\n   access control.\
    \  Presumably, therefore, the care with which these\n   certificates (or database\
    \ entries) are created is less critical than\n   the care with which the authorization\
    \ certificate is issued.  It is\n   also possible that the mapping to name need\
    \ not be on-line or\n   protected as certificates, since it would be used by human\n\
    \   investigators only in unusual circumstances.\n"
- title: 3.4 ACL Entries
  contents:
  - "3.4 ACL Entries\n   SDSI 1.0 defined an ACL, granting authorization to names.\
    \  It was\n   then like an attribute certificate, except that it did not need\
    \ to be\n   signed or issued by any key.  It was held in local memory and was\n\
    \   assumed issued by the owner of the computer and therefore of the\n   resource\
    \ being controlled.\n   In SPKI, an ACL entry is free to be implemented in any\
    \ way the\n   developer chooses, since it is never communicated and therefore\
    \ does\n   not need to be standardized.  However, a sample implementation is\n\
    \   documented, as a certificate body minus the issuer field.  The ACL\n   entry\
    \ can have a name as a subject, as in SDSI 1.0, or it can have a\n   key as a\
    \ subject.  Examples of the latter include the list of SSL\n   root keys in an\
    \ SSL capable browser or the file .ssh/authorized_keys\n   in a user's home UNIX\
    \ directory.  Those ACLs are single-purpose, so\n   the individual entries do\
    \ not carry explicit authorizations, but SPKI\n   uses explicit authorizations\
    \ so that one can use common authorization\n   computation code to deal with multiple\
    \ applications.\n"
- title: 4. Delegation
  contents:
  - "4. Delegation\n   One of the powers of an authorization certificate is the ability\
    \ to\n   delegate authorizations from one person to another without bothering\n\
    \   the owner of the resource(s) involved.  One might issue a simple\n   permission\
    \ (e.g., to read some file) or issue the permission to\n   delegate that permission\
    \ further.\n   Two issues arose as we considered delegation: the desire to limit\n\
    \   depth of delegation and the question of separating delegators from\n   those\
    \ who can exercise the delegated permission.\n"
- title: 4.1 Depth of Delegation
  contents:
  - "4.1 Depth of Delegation\n   There were three camps in discussing depth of delegation:\
    \ no control,\n   boolean control and integer control.  There remain camps in\
    \ favor of\n   each of these, but a decision was reached in favor of boolean\n\
    \   control.\n"
- title: 4.1.1 No control
  contents:
  - "4.1.1 No control\n   The argument in favor of no control is that if a keyholder\
    \ is given\n   permission to do something but not the permission to delegate it,\n\
    \   then it is possible for that keyholder to loan out the empowered\n   private\
    \ key or to set up a proxy service, signing challenges or\n   requests for the\
    \ intended delegate.  Therefore, the attempt to\n   restrict the permission to\
    \ delegate is ineffective and might back-\n   fire, by leading to improper security\
    \ practices.\n"
- title: 4.1.2 Boolean control
  contents:
  - "4.1.2 Boolean control\n   The argument in favor of boolean control is that one\
    \ might need to\n   specify an inability to delegate.  For example, one could\
    \ imagine the\n   US Commerce Department having a key that is authorized to declare\
    \ a\n   cryptographic software module exportable and also to delegate that\n \
    \  authorization to others (e.g., manufacturers).  It is reasonable to\n   assume\
    \ the Commerce Department would not issue permission to delegate\n   this further.\
    \  That is, it would want to have a direct legal\n   agreement with each manufacturer\
    \ and issue a certificate to that\n   manufacturer only to reflect that the legal\
    \ agreement is in place.\n"
- title: 4.1.3 Integer control
  contents:
  - "4.1.3 Integer control\n   The argument in favor of integer control is that one\
    \ might want to\n   restrict the depth of delegation in order to control the\n\
    \   proliferation of a delegated permission.\n"
- title: '4.1.4 The choice: boolean'
  contents:
  - "4.1.4 The choice: boolean\n   Of these three, the group chose boolean control.\
    \  The subject of a\n   certificate or ACL entry may exercise any permission granted\
    \ and, if\n   delegation is TRUE, may also delegate that permission or some subset\n\
    \   of it to others.\n   The no control argument has logical appeal, but there\
    \ remains the\n   assumption that a user will value his or her private key enough\
    \ not\n   to loan it out or that the key will be locked in hardware where it\n\
    \   can't be copied to any other user.  This doesn't prevent the user\n   from\
    \ setting up a signing oracle, but lack of network connectivity\n   might inhibit\
    \ that mechanism.\n   The integer control option was the original design and has\
    \ appeal,\n   but was defeated by the inability to predict the proper depth of\n\
    \   delegation.  One can always need to go one more level down, by\n   creating\
    \ a temporary signing key (e.g., for use in a laptop).\n   Therefore, the initially\
    \ predicted depth could be significantly off.\n   As for controlling the proliferation\
    \ of permissions, there is no\n   control on the width of the delegation tree,\
    \ so control on its depth\n   is not a tight control on proliferation.\n"
- title: 4.2 May a Delegator Also Exercise the Permission?
  contents:
  - "4.2 May a Delegator Also Exercise the Permission?\n   We decided that a delegator\
    \ is free to create a new key pair, also\n   controlled by it, and delegate the\
    \ rights to that key to exercise the\n   delegated permission.  Therefore, there\
    \ was no benefit from\n   attempting to restrict the exercise of a permission\
    \ by someone\n   permitted to delegate it.\n"
- title: 4.3 Delegation of Authorization vs. ACLs
  contents:
  - "4.3 Delegation of Authorization vs. ACLs\n   One concern with defining an authorization\
    \ certificate is that the\n   function can be performed by traditional <authorization,name>\
    \ ACLs\n   and <name,key> ID certificates defining groups.  Such a mechanism was\n\
    \   described in SDSI 1.0.  A new mechanism needs to add value or it just\n  \
    \ complicates life for the developer.\n   The argument for delegated authorization\
    \ as opposed to ACLs can be\n   seen in the following example.\n   Imagine a firewall\
    \ proxy permitting telnet and ftp access from the\n   Internet into a network\
    \ of US DoD machines.  Because of the\n   sensitivity of that destination network,\
    \ strong access control would\n   be desired.  One could use public key authentication\
    \ and public key\n   certificates to establish who the individual keyholder was.\
    \  Both the\n   private key and the keyholder's certificates could be kept on\
    \ a\n   Fortezza card.  That card holds X.509v1 certificates, so all that can\n\
    \   be established is the name of the keyholder.  It is then the job of\n   the\
    \ firewall to keep an ACL, listing named keyholders and the forms\n   of access\
    \ they are each permitted.\n   Consider the ACL itself.  Not only would it be\
    \ potentially huge,\n   demanding far more storage than the firewall would otherwise\
    \ require,\n   but it would also need its own ACL.  One could not, for example,\
    \ have\n   someone in the Army have the power to decide whether someone in the\n\
    \   Navy got access.  In fact, the ACL would probably need not one level\n   of\
    \ its own ACL, but a nested set of ACLs, eventually reflecting the\n   organization\
    \ structure of the entire Defense Department.\n   Without the ACLs, the firewall\
    \ could be implemented in a device with\n   no mass storage, residing in a sealed\
    \ unit one could easily hold in\n   one hand.  With the ACLs, it would need a\
    \ large mass storage device\n   that would be accessed not only while making access\
    \ control decisions\n   but also for updating the ACLs.\n   By contrast, let the\
    \ access be controlled by authorization\n   certificates.  The firewall would\
    \ have an ACL with one entry,\n   granting a key belonging to the Secretary of\
    \ Defense the right to\n   delegate all access through the firewall.  The Secretary\
    \ would, in\n   turn, issue certificates delegating this permission to delegate\
    \ to\n   each of his or her subordinates.  This process would iterate, until\n\
    \   some enlisted man would receive permission to penetrate that firewall\n  \
    \ for some specific one protocol, but not have permission to delegate\n   that\
    \ permission.\n   The certificate structure generated would reflect the organization\n\
    \   structure of the entire Defense Department, just as the nested ACLs\n   would\
    \ have, but the control of these certificates (via their issuance\n   and revocation)\
    \ is distributed and need not show up in that one\n   firewall or be replicated\
    \ in all firewalls.  Each individual\n   delegator of permission performs a simple\
    \ task, well understood.  The\n   application software to allow that delegation\
    \ is correspondingly\n   simple.\n"
- title: 5. Validity Conditions
  contents:
  - "5. Validity Conditions\n   A certificate, or an ACL entry, has optional validity\
    \ conditions.\n   The traditional ones are validity dates: not-before and not-after.\n\
    \   The SPKI group resolved, in discussion, that on-line tests of various\n  \
    \ kinds are also validity conditions.  That is, they further refine the\n   valid\
    \ date range of a certificate.  Three kinds of on-line tests are\n   envisioned:\
    \ CRL, re-validation and one-time.\n   When validity confirmation is provided\
    \ by some online test, then the\n   issuer of those refinements need not be the\
    \ issuer of the original\n   certificate.  In many cases, the business or security\
    \ model for the\n   two issuers is different.  However, in SPKI, the certificate\
    \ issuer\n   must specify the issuer of validity confirmations.\n"
- title: 5.1 Anti-matter CRLs
  contents:
  - "5.1 Anti-matter CRLs\n   An early form of CRL [Certificate Revocation List] was\
    \ modeled after\n   the news print book that used to be kept at supermarket checkout\n\
    \   stands.  Those books held lists of bad checking account numbers and,\n   later,\
    \ bad credit card numbers.  If one's payment instrument wasn't\n   listed in the\
    \ book, then that instrument was considered good.\n   These books would be issued\
    \ periodically, and delivered by some means\n   not necessarily taking a constant\
    \ time.  However, when a new book\n   arrived, the clerk would replace the older\
    \ edition with the new one\n   and start using it.  This design was suited to\
    \ the constraints of the\n   implementation: use of physical books, delivered\
    \ by physical means.\n   The book held bad account numbers rather than good ones\
    \ because the\n   list of bad accounts was smaller.\n   An early CRL design followed\
    \ this model.  It had a list of revoked\n   certificate identifiers.  It also\
    \ had a sequence number, so that one\n   could tell which of two CRLs was more\
    \ recent.  A newer CRL would\n   replace an older one.\n   This mode of operation\
    \ is like wandering anti-matter.  When the\n   issuer wants to revoke a certificate,\
    \ it is listed in the next CRL to\n   go out.  If the revocation is urgent, then\
    \ that CRL can be released\n   immediately.  The CRL then follows some dissemination\
    \ process\n   unrelated to the needs of the consumers of the CRL.  If the CRL\n\
    \   encounters a certificate it has listed, it effectively annihilates\n   that\
    \ certificate.  If it encounters an older CRL, it annihilates that\n   CRL also,\
    \ leaving a copies of itself at the verifiers it encounters.\n   However, this\
    \ process is non-deterministic.  The result of the\n   authorization computation\
    \ is at least timing dependent.  Given an\n   active adversary, it can also be\
    \ a security hole.  That is, an\n   adversary can prevent revocation of a given\
    \ certificate by preventing\n   the delivery of new CRLs.  This does not require\
    \ cryptographic level\n   effort, merely network tampering.\n   SPKI has ruled\
    \ out the use of wandering anti-matter CRLs for its\n   certificates.  Every authorization\
    \ computation is deterministic,\n   under SPKI rules.\n"
- title: 5.2 Timed CRLs
  contents:
  - "5.2 Timed CRLs\n   SPKI permits use of timed CRLs.  That is, if a certificate\
    \ can be\n   referenced in a CRL, then the CRL process is subject to three\n \
    \  conditions.\n   1.  The certificate must list the key (or its hash) that will\
    \ sign\n       the CRL and may give one or more locations where that CRL might\n\
    \       be fetched.\n   2.  The CRL must carry validity dates.\n   3.  CRL validity\
    \ date ranges must not intersect.  That is, one may\n       not issue a new CRL\
    \ to take effect before the expiration of the\n       CRL currently deployed.\n\
    \   Under these rules, no certificate that might use a CRL can be\n   processed\
    \ without a valid CRL and no CRL can be issued to show up as\n   a surprise at\
    \ the verifier.  This yields a deterministic validity\n   computation, independent\
    \ of clock skew, although clock inaccuracies\n   in the verifier may produce a\
    \ result not desired by the issuer.  The\n   CRL in this case is a completion\
    \ of the certificate, rather than a\n   message to the world announcing a change\
    \ of mind.\n   Since CRLs might get very large and since they tend to grow\n \
    \  monotonically, one might want to issue changes to CRLs rather than\n   full\
    \ ones.  That is, a CRL might be a full CRL followed by a sequence\n   of delta-CRLs.\
    \  That sequence of instruments is then treated as a\n   current CRL and the combined\
    \ CRL must follow the conditions listed\n   above.\n"
- title: 5.3 Timed Revalidations
  contents:
  - "5.3 Timed Revalidations\n   CRLs are negative statements.  The positive version\
    \ of a CRL is what\n   we call a revalidation.  Typically a revalidation would\
    \ list only one\n   certificate (the one of interest), although it might list\
    \ a set of\n   certificates (to save digital signature effort).\n   As with the\
    \ CRL, SPKI demands that this process be deterministic and\n   therefore that\
    \ the revalidation follow the same rules listed above\n   (in section 5.2).\n"
- title: 5.4 Setting the Validity Interval
  contents:
  - "5.4 Setting the Validity Interval\n   Both timed CRLs and timed revalidations\
    \ have non-0 validity\n   intervals.  To set this validity interval, one must\
    \ answer the\n   question: \"How long are you willing to let the world believe\
    \ and act\n   on a statement you know to be false?\"\n   That is, one must assume\
    \ that the previous CRL or revalidation has\n   just been signed and transmitted\
    \ to at least one consumer, locking up\n   a time slot.  The next available time\
    \ slot starts after this validity\n   interval ends.  That is the earliest one\
    \ can revoke a certificate one\n   learns to be false.\n   The answer to that\
    \ question comes from risk management.  It will\n   probably be based on expected\
    \ monetary losses, at least in commercial\n   cases.\n"
- title: 5.5 One-time Revalidations
  contents:
  - "5.5 One-time Revalidations\n   Validity intervals of length zero are not possible.\
    \  Since\n   transmission takes time, by the time a CRL was received by the\n\
    \   verifier, it would be out of date and unusable.  That assumes perfect\n  \
    \ clock synchronization.  If clock skew is taken into consideration,\n   validity\
    \ intervals need to be that much larger to be meaningful.\n   For those who want\
    \ to set the validity interval to zero, SPKI defines\n   a one-time revalidation.\n\
    \   This form of revalidation has no lifetime beyond the current\n   authorization\
    \ computation.  One applies for this on-line, one-time\n   revalidation by submitting\
    \ a request containing a nonce.  That nonce\n   gets returned in the signed revalidation\
    \ instrument, in order to\n   prevent replay attacks.  This protocol takes the\
    \ place of a validity\n   date range and represents a validity interval of zero,\
    \ starting and\n   ending at the time the authorization computation completes.\n"
- title: 5.6 Short-lived Certificates
  contents:
  - "5.6 Short-lived Certificates\n   A performance analysis of the various methods\
    \ of achieving fine-grain\n   control over the validity interval of a certificate\
    \ should consider\n   the possibility of just making the original certificate\
    \ short-lived,\n   especially if the online test result is issued by the same\
    \ key that\n   issued the certificate.  There are cases in which the short-lived\n\
    \   certificate requires fewer signatures and less network traffic than\n   the\
    \ various online test options.  The use of a short-lived\n   certificate always\
    \ requires fewer signature verifications than the\n   use of certificate plus\
    \ online test result.\n   If one wants to issue short-lived certificates, SPKI\
    \ defines a kind\n   of online test statement to tell the user of the certificate\
    \ where a\n   replacement short-lived certificate might be fetched.\n"
- title: 5.7 Other possibilities
  contents:
  - "5.7 Other possibilities\n   There are other possibilities to be considered when\
    \ choosing a\n   validity condition model to use.\n"
- title: 5.7.1 Micali's Inexpensive On-line Results
  contents:
  - "5.7.1 Micali's Inexpensive On-line Results\n   Silvio Micali has patented a mechanism\
    \ for using hash chains to\n   revalidate or revoke a certificate inexpensively.\
    \  This mechanism\n   changes the performance requirements of those models and\
    \ might\n   therefore change the conclusion from a performance analysis [ECR].\n"
- title: 5.7.2 Rivest's Reversal of the CRL Logic
  contents:
  - "5.7.2 Rivest's Reversal of the CRL Logic\n   Ron Rivest has written a paper [R98]\
    \ suggesting that the whole\n   validity condition model is flawed because it\
    \ assumes that the issuer\n   (or some entity to which it delegates this responsibility)\
    \ decides\n   the conditions under which a certificate is valid.  That traditional\n\
    \   model is consistent with a military key management model, in which\n   there\
    \ is some central authority responsible for key release and for\n   determining\
    \ key validity.\n   However, in the commercial space, it is the verifier and not\
    \ the\n   issuer who is taking a risk by accepting a certificate.  It should\n\
    \   therefore be the verifier who decides what level of assurance he\n   needs\
    \ before accepting a credential.  That verifier needs information\n   from the\
    \ issuer, and the more recent that information the better, but\n   the decision\
    \ is the verifier's in the end.\n   This line of thought deserves further consideration,\
    \ but is not\n   reflected in the SPKI structure definition.  It might even be\
    \ that\n   both the issuer and the verifier have stakes in this decision, so\n\
    \   that any replacement validity logic would have to include inputs from\n  \
    \ both.\n"
- title: 6. Tuple Reduction
  contents:
  - "6. Tuple Reduction\n   The processing of certificates and related objects to\
    \ yield an\n   authorization result is the province of the developer of the\n\
    \   application or system.  The processing plan presented here is an\n   example\
    \ that may be followed, but its primary purpose is to clarify\n   the semantics\
    \ of an SPKI certificate and the way it and various other\n   kinds of certificate\
    \ might be used to yield an authorization result.\n   There are three kinds of\
    \ entity that might be input to the\n   computation that yields an authorization\
    \ result:\n    1.  <name,key> (as a certificate)\n    2.  <authorization,name>\
    \ (as an attribute certificate or ACL entry)\n    3.  <authorization,key> (as\
    \ an authorization certificate or ACL\n        entry)\n   These entities are processed\
    \ in three stages.\n    1.  Individual certificates are verified by checking their\n\
    \        signatures and possibly performing other work.  They are then\n     \
    \   mapped to intermediate forms, called \"tuples\" here.\n        The other work\
    \ for SPKI or SDSI certificates might include\n        processing of on-line test\
    \ results (CRL, re-validation or one-\n        time validation).\n        The\
    \ other work for PGP certificates may include a web-of-trust\n        computation.\n\
    \        The other work for X.509 certificates depends on the written\n      \
    \  documentation for that particular use of X.509 (typically tied\n        to\
    \ the root key from which the certificate descended) and could\n        involve\
    \ checking information in the parent certificate as well\n        as additional\
    \ information in extensions of the certificate in\n        question.  That is,\
    \ some use X.509 certificates just to define\n        names.  Others use X.509\
    \ to communicate an authorization\n        implicitly (e.g., SSL server certificates).\
    \  Some might define\n        extensions of X.509 to carry explicit authorizations.\
    \  All of\n        these interpretations are specified in written documentation\n\
    \        associated with the certificate chain and therefore with the\n      \
    \  root from which the chain descends.\n        If on-line tests are involved\
    \ in the certificate processing,\n        then the validity dates of those on-line\
    \ test results are\n        intersected by VIntersect() [defined in 6.3.2, below]\
    \ with the\n        validity dates of the certificate to yield the dates in the\n\
    \        certificate's tuple(s).\n    2.  Uses of names are replaced with simple\
    \ definitions (keys or\n        hashes), based on the name definitions available\
    \ from reducing\n        name 4-tuples.\n    3.  Authorization 5-tuples are then\
    \ reduced to a final authorization\n        result.\n"
- title: 6.1 5-tuple Defined
  contents:
  - "6.1 5-tuple Defined\n   The 5-tuple is an intermediate form, assumed to be held\
    \ in trusted\n   memory so that it doesn't need a digital signature for integrity.\
    \  It\n   is produced from certificates or other credentials via trusted\n   software.\
    \  Its contents are the same as the contents of an SPKI\n   certificate body,\
    \ but it might be derived from another form of\n   certificate or from an ACL\
    \ entry.\n   The elements of a 5-tuple are:\n    1.  Issuer: a public key (or\
    \ its hash), or the reserved word \"Self\".\n        This identifies the entity\
    \ speaking this intermediate result.\n    2.  Subject: a public key (or its hash),\
    \ a name used to identify a\n        public key, the hash of an object or a threshold\
    \ function of\n        subordinate subjects.  This identifies the entity being\
    \ spoken\n        about in this intermediate result.\n    3.  Delegation: a boolean.\
    \  If TRUE, then the Subject is permitted\n        by the Issuer to further propagate\
    \ the authorization in this\n        intermediate result.\n    4.  Authorization:\
    \ an S-expression.  [Rules for combination of\n        Authorizations are given\
    \ below.]\n    5.  Validity dates: a not-before date and a not-after date, where\n\
    \        \"date\" means date and time.  If the not-before date is missing\n  \
    \      from the source credential then minus infinity is assumed.  If\n      \
    \  the not-after date is missing then plus infinity is assumed.\n"
- title: 6.2 4-tuple Defined
  contents:
  - "6.2 4-tuple Defined\n   A <name,key> certificate (such as X.509v1 or SDSI 1.0)\
    \ carries no\n   authorization field but does carry a name.  Since it is qualitatively\n\
    \   different from an authorization certificate, a separate intermediate\n   form\
    \ is defined for it.\n   The elements of a Name 4-tuple are:\n    1.  Issuer:\
    \ a public key (or its hash).  This identifies the entity\n        defining this\
    \ name in its private name space.\n    2.  Name: a byte string\n    3.  Subject:\
    \ a public key (or its hash), a name, or a threshold\n        function of subordinate\
    \ subjects.  This defines the name.\n    4.  Validity dates: a not-before date\
    \ and a not-after date, where\n        \"date\" means date and time.  If the not-before\
    \ date is missing\n        from the source credential then minus infinity is assumed.\
    \  If\n        the not-after date is missing then plus infinity is assumed.\n"
- title: 6.3 5-tuple Reduction Rules
  contents:
  - "6.3 5-tuple Reduction Rules\n   The two 5-tuples:\n      <I1,S1,D1,A1,V1> + <I2,S2,D2,A2,V2>\n\
    \   yield\n         <I1,S2,D2,AIntersect(A1,A2),VIntersect(V1,V2)>\n   provided\n\
    \       the two intersections succeed,\n       S1 = I2\n   and\n       D1 = TRUE\n\
    \   If S1 is a threshold subject, there is a slight modification to this\n   rule,\
    \ as described below in section 6.3.3.\n"
- title: 6.3.1 AIntersect
  contents:
  - "6.3.1 AIntersect\n   An authorization is a list of strings or sub-lists, of meaning\
    \ to and\n   probably defined by the application that will use this authorization\n\
    \   for access control.  Two authorizations intersect by matching,\n   element\
    \ for element.  If one list is longer than the other but match\n   at all elements\
    \ where both lists have elements, then the longer list\n   is the result of the\
    \ intersection.  This means that additional\n   elements of a list must restrict\
    \ the permission granted.\n   Although actual authorization string definitions\
    \ are application\n   dependent, AIntersect provides rules for automatic intersection\
    \ of\n   these strings so that application developers can know the semantics\n\
    \   of the strings they use.  Special semantics would require special\n   reduction\
    \ software.\n   For example, there might be an ftpd that allows public key access\n\
    \   control, using authorization certificates.  Under that service,\n       (ftp\
    \ (host ftp.clark.net))\n   might imply that the keyholder would be allowed ftp\
    \ access to all\n   directories on ftp.clark.net, with all kinds of access (read,\
    \ write,\n   delete, ...).  This is more general (allows more access) than\n \
    \      (ftp (host ftp.clark.net) (dir /pub/cme))\n   which would allow all kinds\
    \ of access but only in the directory\n   specified.  The intersection of the\
    \ two would be the second.\n   Since the AIntersect rules imply position dependency,\
    \ one could also\n   define the previous authorization string as:\n       (ftp\
    \ ftp.clark.net /pub/cme)\n   to keep the form compact.\n   To allow for wild\
    \ cards, there are a small number of special S-\n   expressions defined, using\
    \ \"*\" as the expression name.\n   (*)\n             stands for the set of all\
    \ S-expressions and byte-strings.\n             In other words, it will match\
    \ anything.  When intersected\n             with anything, the result is that\
    \ other thing.  [The\n             AIntersect rule about lists of different length\
    \ treats a\n             list as if it had enough (*) entries implicitly appended\
    \ to\n             it to match the length of another list with which it was\n\
    \             being intersected.]\n   (* set <tag-expr>*)\n             stands\
    \ for the set of elements listed in the *-form.\n   (* prefix <byte-string>)\n\
    \             stands for the set of all byte strings that start with the\n   \
    \          one given in the *-form.\n   (* range <ordering> <lower-limit>? <upper-limit>?)\n\
    \             stands for the set of all byte strings lexically (or\n         \
    \    numerically) between the two limits.  The ordering\n             parameter\
    \ (alpha, numeric, time, binary, date) specifies\n             the kind of strings\
    \ allowed.\n   AIntersect() is normal set intersection, when *-forms are defined\
    \ as\n   they are above and a normal list is taken to mean all lists that\n  \
    \ start with those elements.  The following examples should give a more\n   concrete\
    \ explanation for those who prefer an explanation without\n   reference to set\
    \ operations.\n   AIntersect( (tag (ftp ftp.clark.net cme (* set read write))),\n\
    \               (tag (*)) )\n   evaluates to (tag (ftp ftp.clark.net cme (* set\
    \ read write)))\n   AIntersect( (tag (* set read write (foo bla) delete)),\n \
    \              (tag (* set write read) ) )\n   evaluates to (tag (* set read write))\n\
    \   AIntersect( (tag (* set read write (foo bla) delete)),\n               (tag\
    \ read ) )\n   evaluates to (tag read)\n   AIntersect( (tag (* prefix http://www.clark.net/pub/)),\n\
    \               (tag (* prefix http://www.clark.net/pub/cme/html/)) )\n   evaluates\
    \ to (tag (* prefix http://www.clark.net/pub/cme/html/))\n   AIntersect( (tag\
    \ (* range numeric ge #30# le #39# )), (tag #26#) )\n   fails to intersect.\n"
- title: 6.3.2 VIntersect
  contents:
  - "6.3.2 VIntersect\n   Date range intersection is straight-forward.\n       V =\
    \ VIntersect( X, Y )\n   is defined as\n       Vmin = max( Xmin, Ymin )\n    \
    \   Vmax = min( Xmax, Ymax )\n   and if Vmin > Vmax, then the intersection failed.\n\
    \   These rules assume that daytimes are expressed in a monotonic form,\n   as\
    \ they are in SPKI.\n   The full SPKI VIntersect() also deals with online tests.\
    \  In the most\n   straight-forward implementation, each online test to which\
    \ a\n   certificate is subject is evaluated.  Each such test carries with it\n\
    \   a validity interval, in terms of dates.  That validity interval is\n   intersected\
    \ with any present in the certificate, to yield a new,\n   current validity interval.\n\
    \   It is possible for an implementation of VIntersect() to gather up\n   online\
    \ tests that are present in each certificate and include the\n   union of all\
    \ those tests in the accumulating tuples.  In this case,\n   the evaluation of\
    \ those online tests is deferred until the end of the\n   process.  This might\
    \ be appropriate if the tuple reduction is being\n   performed not for answering\
    \ an immediate authorization question but\n   rather for generation of a summary\
    \ certificate (Certificate Result\n   Certificate) that one might hope would be\
    \ useful for a long time.\n"
- title: 6.3.3 Threshold Subjects
  contents:
  - "6.3.3 Threshold Subjects\n   A threshold subject is specified by two numbers,\
    \ K and N [0<K<=N],\n   and N subordinate subjects.  A threshold subject is reduced\
    \ to a\n   single subject by selecting K of the N subjects and reducing each of\n\
    \   those K to the same subject, through a sequence of certificates.  The\n  \
    \ (N-K) unselected subordinate subjects are set to (null).\n   The intermediate\
    \ form for a threshold subject is a copy of the tuple\n   in which the threshold\
    \ subject appears, but with only one of the\n   subordinate subjects.  Those subordinate\
    \ tuples are reduced\n   individually until the list of subordinate tuples has\
    \ (N-K) (null)\n   entries and K entries with the same subject.  At that point,\
    \ those K\n   tuples are validity-, authorization- and delegation- intersected\
    \ to\n   yield the single tuple that will replace the list of tuples.\n"
- title: 6.3.4 Certificate Path Discovery
  contents:
  - "6.3.4 Certificate Path Discovery\n   All reduction operations are in the order\
    \ provided by the prover.\n   That simplifies the job of the verifier, but leaves\
    \ the job of\n   finding the correct list of reductions to the prover.\n   The\
    \ general algorithm for finding the right certificate paths from a\n   large set\
    \ of unordered certificates has been solved[ELIEN], but might\n   be used only\
    \ rarely.  Each keyholder who is granted some authority\n   should receive a sequence\
    \ of certificates delegating that authority.\n   That keyholder may then want\
    \ to delegate part of this authority on to\n   some other keyholder.  To do that,\
    \ a single additional certificate is\n   generated and appended to the sequence\
    \ already available, yielding a\n   sequence that can be used by the delegatee\
    \ to prove access\n   permission.\n"
- title: 6.4 4-tuple Reduction
  contents:
  - "6.4 4-tuple Reduction\n   There will be name 4-tuples in two different classes,\
    \ those that\n   define the name as a key and those that define the name as another\n\
    \   name.\n    1.  [(name K1 N) -> K2]\n    2.  [(name K1 N) -> (name K2 N1 N2\
    \ ... Nk)]\n   As with the 5-tuples discussed in the previous section, name\n\
    \   definition 4-tuples should be delivered in the order needed by the\n   prover.\
    \  In that case, the rule for name reduction is to replace the\n   name just defined\
    \ by its definition.  For example,\n        (name K1 N N1 N2 N3) + [(name K1 N)\
    \ -> K2]\n             -> (name K2 N1 N2 N3)\n   or, in case 2 above,\n      \
    \  (name K1 N Na Nb Nc) + [(name K1 N) -> (name K2 N1 N2 ... Nk)]\n          \
    \   -> (name K2 N1 N2 ... Nk Na Nb Nc)\n   With the second form of name definition,\
    \ one might have names that\n   temporarily grow.  If the prover is providing\
    \ certificates in order,\n   then the verifier need only do as it is told.\n \
    \  If the verifier is operating from an unordered pool of tuples, then a\n   safe\
    \ rule for name reduction is to apply only those 4-tuples that\n   define a name\
    \ as a key.  Such applications should bring 4-tuples that\n   started out in class\
    \ (2) into class (1), and eventually reduce all\n   names to keys.  Any naming\
    \ loops are avoided by this process.\n"
- title: 6.4.1 4-tuple Threshold Subject Reduction
  contents:
  - "6.4.1 4-tuple Threshold Subject Reduction\n   Some of a threshold subject's subordinate\
    \ subjects might be names.\n   Those names must be reduced by application of 4-tuples.\
    \  The name\n   reduction process proceeds independently on each name in the\n\
    \   subordinate subject as indicated in 6.3.3 above.\n   One can reduce individual\
    \ named subjects in a threshold subject and\n   leave the subject in threshold\
    \ form, if one desires.  There is no\n   delegation- or authorization-intersection\
    \ involved, only a validity-\n   intersection during name reduction.  This might\
    \ be used by a service\n   that produces Certificate Result Certificates [see\
    \ 6.7].\n"
- title: 6.4.2 4-tuple Validity Intersection
  contents:
  - "6.4.2 4-tuple Validity Intersection\n   Whenever a 4-tuple is used to reduce\
    \ the subject (or part of the\n   subject) of another tuple, its validity interval\
    \ is intersected with\n   that of the tuple holding the subject being reduced\
    \ and the\n   intersection is used in the resulting tuple.  Since a 4-tuple\n\
    \   contains no delegation or authorization fields, the delegation\n   permission\
    \ and authorization of the tuple being acted upon does not\n   change.\n"
- title: 6.5 Certificate Translation
  contents:
  - "6.5 Certificate Translation\n   Any certificate currently defined, as well as\
    \ ACL entries and\n   possibly other instruments, can be translated to 5-tuples\
    \ (or name\n   tuples) and therefore take part in an authorization computation.\
    \  The\n   specific rules for those are given below.\n"
- title: 6.5.1 X.509v1
  contents:
  - "6.5.1 X.509v1\n   The original X.509 certificate is a <name,key> certificate.\
    \  It\n   translates directly to a name tuple.  The form\n        [Kroot, (name\
    \ <leaf-name>), K1, validity]\n   is used if the rules for that particular X.509\
    \ hierarchy is that all\n   leaf names are unique, under that root.  If uniqueness\
    \ of names\n   applies only to individual CAs in the X.509 hierarchy, then one\
    \ must\n   generate\n        [Kroot, (name CA1 CA2 ... CAk <leaf-name>), K1, validity]\n\
    \   after verifying the certificate chain by the rules appropriate to\n   that\
    \ particular chain.\n"
- title: 6.5.2 PGP
  contents:
  - "6.5.2 PGP\n   A PGP certificate is a <name,key> certificate.  It is verified\
    \ by\n   web-of-trust rules (as specified in the PGP documentation).  Once\n \
    \  verified, it yields name tuples of the form\n        [Ki, name, K1, validity]\n\
    \   where Ki is a key that signed that PGP (UserID,key) pair.  There\n   would\
    \ be one tuple produced for each signature on the key, K1.\n"
- title: 6.5.3 X.509v3
  contents:
  - "6.5.3 X.509v3\n   An X.509v3 certificate may be used to declare a name.  It might\
    \ also\n   declare explicit authorizations, by way of extensions.  It might also\n\
    \   declare an implicit authorization of the form (tag (*)).  The actual\n   set\
    \ of tuples it yields depends on the documentation associated with\n   that line\
    \ of certificates.  That documentation could conceptually be\n   considered associated\
    \ with the root key of the certificate chain.  In\n   addition, some X.509v3 certificates\
    \ (such as those used for SET),\n   have defined extra validity tests for certificate\
    \ chains depending on\n   custom extensions.  As a result, it is likely that X.509v3\
    \ chains\n   will have to be validated independently, by chain validation code\n\
    \   specific to each root key.  After that validation, that root-specific\n  \
    \ code can then generate the appropriate multiple tuples from the one\n   certificate.\n"
- title: 6.5.4 X9.57
  contents:
  - "6.5.4 X9.57\n   An X9.57 attribute certificate should yield one or more 5-tuples,\n\
    \   with names as Subject.  The code translating the attribute\n   certificate\
    \ will have to build a fully-qualified name to represent\n   the Distinguished\
    \ Name in the Subject.  For any attribute\n   certificates that refer to an ID\
    \ certificate explicitly, the Subject\n   of the 5-tuple can be the key in that\
    \ ID certificate, bypassing the\n   construction of name 4-tuples.\n"
- title: 6.5.5 SDSI 1.0
  contents:
  - "6.5.5 SDSI 1.0\n   A SDSI 1.0 certificate maps directly to one 4-tuple.\n"
- title: 6.5.6 SPKI
  contents:
  - "6.5.6 SPKI\n   An SPKI certificate maps directly to one 4- or 5- tuple, depending\n\
    \   respectively on whether it is a name certificate or carries an\n   authorization.\n"
- title: 6.5.7 SSL
  contents:
  - "6.5.7 SSL\n   An SSL certificate carries a number of authorizations, some\n \
    \  implicitly.  The authorization:\n        (tag (ssl))\n   is implicit.  In addition,\
    \ the server certificate carries a DNS name\n   parameter to be matched against\
    \ the DNS name of the web page to which\n   the connection is being made.  That\
    \ might be encoded as:\n        (tag (dns <domain-name>))\n   Meanwhile, there\
    \ is the \"global cert\" permission -- the permission\n   for a US-supplied browser\
    \ to connect using full strength symmetric\n   cryptography even though the server\
    \ is outside the USA.  This might\n   be encoded as:\n        (tag (us-crypto))\n\
    \   There are other key usage attributes that would also be encoded as\n   tag\
    \ fields, but a full discussion of those fields is left to the\n   examples document.\n\
    \   An ACL entry for an SSL root key would have the tag:\n        (tag (* set\
    \ (ssl) (dns (*))))\n   which by the rules of intersection is equivalent to:\n\
    \        (tag (* set (ssl) (dns)))\n   unless that root key also had the permission\
    \ from the US Commerce\n   Department to grant us-crypto permission, in which\
    \ case the root key\n   would have:\n        (tag (* set (ssl) (dns) (us-crypto)))\n\
    \   A CA certificate, used for SSL, would then need only to communicate\n   down\
    \ its certificate chain those permissions allocated in the ACL.\n   Its tag might\
    \ then translate to:\n        (tag (*))\n   A leaf server certificate for the\
    \ Datafellows server might, for\n   example, have a tag field of the form:\n \
    \       (tag (* set (ssl) (dns www.datafellows.com)))\n   showing that it was\
    \ empowered to do SSL and to operate from the given\n   domain name, but not to\
    \ use US crypto with a US browser.\n   The use of (* set) for the two attributes\
    \ in this example could have\n   been abbreviated as:\n        (tag (ssl www.datafellows.com))\n\
    \   while CA certificates might carry:\n        (tag (ssl (*))) or just (tag (*))\n\
    \   but separating them, via (* set), allows for a future enhancement of\n   SSL\
    \ in which the (ssl) permission is derived from one set of root\n   keys (those\
    \ of current CAs) while the (dns) permission is derived\n   from another set of\
    \ root keys (those empowered to speak in DNSSEC)\n   while the (us-crypto) permission\
    \ might be granted only to a root key\n   belonging to the US Department of Commerce.\
    \  The three separate tests\n   in the verifying code (e.g., the browser) would\
    \ then involve separate\n   5-tuple reductions from separate root key ACL entries.\n\
    \   The fact that these three kinds of permission are treated as if ANDed\n  \
    \ is derived from the logic of the code that interprets the permissions\n   and\
    \ is not expressed in the certificate.  That decision is embodied\n   in the authorization\
    \ code executed by the verifying application.\n"
- title: 6.6 Certificate Result Certificates
  contents:
  - "6.6 Certificate Result Certificates\n   Typically, one will reduce a chain of\
    \ certificates to answer an\n   authorization question in one of two forms:\n\
    \    1.  Is this Subject, S, allowed to do A, under this ACL and with\n      \
    \  this set of certificates?\n    2.  What is Subject S allowed to do, under this\
    \ ACL and with this\n        set of certificates?\n   The answer to the second\
    \ computation can be put into a new\n   certificate issued by the entity doing\
    \ the computation.  That one\n   certificate corresponds to the semantics of the\
    \ underlying\n   certificates and online test results.  We call it a Certificate\n\
    \   Result Certificate.\n"
- title: 7. Key Management
  contents:
  - "7. Key Management\n   Cryptographic keys have limited lifetimes.  Keys can be\
    \ stolen.  Keys\n   might also be discovered through cryptanalysis.  If the theft\
    \ is\n   noticed, then the key can be replaced as one would replace a credit\n\
    \   card.  More likely, the theft will not be noticed.  To cover this\n   case,\
    \ keys are replaced routinely.\n   The replacement of a key needs to be announced\
    \ to those who would use\n   the new key.  It also needs to be accomplished smoothly,\
    \ with a\n   minimum of hassle.\n   Rather than define a mechanism for declaring\
    \ a key to be bad or\n   replaced, SPKI defines a mechanism for giving certificates\
    \ limited\n   lifetimes so that they can be replaced.  That is, under SPKI one\
    \ does\n   not declare a key to be bad but rather stops empowering it and\n  \
    \ instead empowers some other key.  This limitation of a certificate's\n   lifetime\
    \ might be by limited lifetime at time of issuance or might be\n   via the lifetime\
    \ acquired through an on-line test (CRL, revalidation\n   or one-time).  Therefore,\
    \ all key lifetime control becomes\n   certificate lifetime control.\n"
- title: 7.1 Through Inescapable Names
  contents:
  - "7.1 Through Inescapable Names\n   If keyholders had inescapable names [see section\
    \ 2.5, above], then\n   one could refer to them by those names and define a certificate\
    \ to\n   map from an inescapable name to the person's current key.  That\n   certificate\
    \ could be issued by any CA, since all CAs would use the\n   inescapable name\
    \ for the keyholder.  The attribute certificates and\n   ACLs that refer to the\
    \ keyholder would all refer to this one\n   inescapable name.\n   However, there\
    \ are no inescapable names for keyholders.  [See section\n   2.5, above.]\n"
- title: 7.2 Through a Naming Authority
  contents:
  - "7.2 Through a Naming Authority\n   One could conceivably have a governmental\
    \ body or other entity that\n   would issue names voluntarily to a keyholder,\
    \ strictly for the\n   purpose of key management.  One would then receive all\
    \ authorizations\n   through that name.  There would have to be only one such\
    \ authority,\n   however.  Otherwise, names would have to be composed of parts:\
    \ an\n   authority name and the individual's name.  The authority name would,\n\
    \   in turn, have to be granted by some single global authority.\n   That authority\
    \ then becomes able to create keys of its own and\n   certificates to empower\
    \ them as any individual, and through those\n   false certificates acquire access\
    \ rights of any individual in the\n   world.  Such power is not likely to be tolerated.\
    \  Therefore, such a\n   central authority is not likely to come to pass.\n"
- title: 7.3 Through <name,key> Certificates
  contents:
  - "7.3 Through <name,key> Certificates\n   Instead of inescapable names or single-root\
    \ naming authorities, we\n   have names assigned by some entity that issues a\
    \ <name,key>\n   certificate.  As noted in sections 2.8 and 2.9, above, such names\n\
    \   have no meaning by themselves.  They must be fully qualified to have\n   meaning.\n\
    \   Therefore, in the construct:\n        (name (hash sha1 |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|)\
    \ jim)\n   the name is not\n        \"jim\"\n   but rather\n        \"(name (hash\
    \ sha1 |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|) jim)\"\n   This name includes a public\
    \ key (through its hash, in the example\n   above).  That key has a lifetime like\
    \ any other key, so this name has\n   not achieved the kind of permanence (free\
    \ from key lifetimes) that an\n   inescapable name has.  However, it appears to\
    \ be our only\n   alternative.\n   This name could easily be issued by the named\
    \ keyholder, for the\n   purpose of key management only.  In that case, there\
    \ is no concern\n   about access control being subverted by some third-party naming\n\
    \   authority.\n"
- title: 7.4 Increasing Key Lifetimes
  contents:
  - "7.4 Increasing Key Lifetimes\n   By the logic above, any name will hang off some\
    \ public key.  The job\n   is then to increase the lifetime of that public key.\
    \  Once a key\n   lifetime exceeds the expected lifetime of any authorization\
    \ granted\n   through it, then a succession of new, long-lifetime keys can cover\
    \ a\n   keyholder forever.\n   For a key to have a long lifetime, it needs to\
    \ be strong against\n   cryptanalytic attack and against theft.  It should be\
    \ used only on a\n   trusted machine, running trusted software.  It should not\
    \ be used on\n   an on-line machine.  It should be used very rarely, so that the\n\
    \   attacker has few opportunities to find the key in the clear where it\n   can\
    \ be stolen.\n   Different entities will approach this set of requirements in\n\
    \   different ways.  A private individual, making his own naming root key\n  \
    \ for this purpose, has the advantage of being too small to invite a\n   well\
    \ funded attack as compared to the attacks a commercial CA might\n   face.\n"
- title: 7.5 One Root Per Individual
  contents:
  - "7.5 One Root Per Individual\n   In the limit, one can have one highly protected\
    \ naming root key for\n   each individual.  One might have more than one such\
    \ key per\n   individual, in order to frustrate attempts to build dossiers, but\
    \ let\n   us assume only one key for the immediate discussion.\n   If there is\
    \ only one name descending from such a key, then one can\n   dispense with the\
    \ name.  Authorizations can be assigned to the key\n   itself, in raw SPKI style,\
    \ rather than to some name defined under\n   that key.  There is no loss of lifetime\
    \ -- only a change in the\n   subject of the certificate the authorizing key uses\
    \ to delegate\n   authority.\n   However, there is one significant difference,\
    \ under the SPKI\n   structure.  If one delegates some authorization to\n    \
    \    (name (hash sha1 |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|) carl)\n   and a different\
    \ authorization to\n        (hash sha1 |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|)\n   directly,\
    \ both without granting the permission to delegate, that key\n   can delegate\
    \ at will through <name,key> certificates in the former\n   case and not delegate\
    \ at all in the latter case.\n   In the case of key management, we desire the\
    \ ability to delegate from\n   a long lived, rarely used key to a shorter lived,\
    \ often used key --\n   so in this case, the former mechanism (through a SDSI\
    \ name) gives\n   more freedom.\n"
- title: 7.6 Key Revocation Service
  contents:
  - "7.6 Key Revocation Service\n   In either of the models above, key |TLCgPLFlGTzgUbcaYLW8kGTEnUk=|\n\
    \   will issue a certificate.  In the first model, it will be a\n   <name,key>\
    \ certificate.  In the second, it will be an authorization\n   certificate delegating\
    \ all rights through to the more temporary key.\n   Either of those certificates\
    \ might want an on-line validity test.\n   Whether this test is in the form of\
    \ a CRL, a re-validation or a one-\n   time test, it will be supplied by some\
    \ entity that is on-line.\n   As the world moves to having all machines on-line\
    \ all the time, this\n   might be the user's machine.  However, until then --\
    \ and maybe even\n   after then -- the user might want to hire some service to\
    \ perform\n   this function.  That service could run a 24x7 manned desk, to receive\n\
    \   phone calls reporting loss of a key.  That authority would not have\n   the\
    \ power to generate a new key for the user, only to revoke a\n   current one.\n\
    \   If, in the worst case, a user loses his master key, then the same\n   process\
    \ that occurs today with lost wallets would apply.  All issuers\n   of authorizations\
    \ through that master key would need to issue new\n   authorizations through the\
    \ new master key and, if the old master key\n   had been stolen, cancel all old\
    \ authorizations through that key.\n"
- title: 7.7 Threshold ACL Subjects
  contents:
  - "7.7 Threshold ACL Subjects\n   One can take extraordinary measures to protect\
    \ root keys and thus\n   increase the lifetimes of those keys.  The study of computer\
    \ fault-\n   tolerance teaches us that truly long lifetimes can be achieved only\n\
    \   by redundancy and replacement.  Both can be achieved by the use of\n   threshold\
    \ subjects [section 6.3.3], especially in ACL entries.\n   If we use a threshold\
    \ subject in place of a single key subject, in an\n   ACL (or a certificate),\
    \ then we achieve redundancy immediately.  This\n   can be redundancy not only\
    \ of keys but also of algorithms.  That is,\n   the keys in a threshold subject\
    \ do not need to have the same\n   algorithm.\n   Truly long lifetimes come from\
    \ replacement, not just redundancy.  As\n   soon as a component fails (or a key\
    \ is assumed compromised), it must\n   be replaced.\n   An ACL needs to be access-controlled\
    \ itself.  Assume that the ACL\n   includes an entry with authorization\n    \
    \   (tag (acl-edit))\n   Assume also that what might have been a single root authorization\n\
    \   key, K1, is actually a threshold subject\n       (k-of-n #03# #07# K1 K2 K3\
    \ K4 K5 K6 K7)\n   used in any ACL entry granting a normal authorization.\n  \
    \ That same ACL could have the subject of an (acl-edit) entry be\n       (k-of-n\
    \ #05# #07# K1 K2 K3 K4 K5 K6 K7)\n   This use of threshold subject would allow\
    \ the set of root keys to\n   elect new members to that set and retire old members.\
    \  In this\n   manner, replacement is achieved alongside redundancy and the proper\n\
    \   choice of K and N should allow threshold subject key lifetimes\n   approaching\
    \ infinity.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   There are three classes of information that can\
    \ be bound together by\n   public key certificates: key, name and authorization.\
    \  There are\n   therefore three general kinds of certificate, depending on what\
    \ pair\n   of items the certificate ties together.  If one considers the\n   direction\
    \ of mapping between items, there are six classes: name->key,\n   key->name, authorization->name,\
    \ name->authorization, authorization-\n   >key, key->authorization.\n   The SPKI\
    \ working group concluded that the most important use for\n   certificates was\
    \ access control.  Given the various kinds of mapping\n   possible, there are\
    \ at least two ways to implement access control.\n   One can use a straight authorization\
    \ certificate:\n       (authorization->key)\n   or one can use an attribute certificate\
    \ and an ID certificate:\n       (authorization->name) + (name->key)\n   There\
    \ are at least two ways in which the former is more secure than\n   the latter.\n\
    \    1.  Each certificate has an issuer.  If that issuer is subverted,\n     \
    \   then the attacker can gain access.  In the former case, there is\n       \
    \ only one issuer to trust.  In the latter case, there are two.\n    2.  In the\
    \ second case, linkage between the certificates is by name.\n        If the name\
    \ space of the issuer of the ID certificate is\n        different from the name\
    \ space of the issuer of the attribute\n        certificate, then one of the two\
    \ issuers must use a foreign name\n        space.  The process of choosing the\
    \ appropriate name from a\n        foreign name space is more complex than string\
    \ matching and\n        might even involve a human guess.  It is subject to mistakes.\n\
    \        Such a mistake can be made by accident or be guided by an\n        attacker.\n\
    \   This is not to say that one must never use the second construct.  If\n   the\
    \ two certificates come from the same issuer, and therefore with\n   the same\
    \ name space, then both of the security differentiators above\n   are canceled.\n"
- title: References
  contents:
  - "References\n   [Ab97]       Abadi, Martin, \"On SDSI's Linked Local Name Spaces\"\
    ,\n                Proceedings of the 10th IEEE Computer Security\n          \
    \      Foundations Workshop (June 1997).\n   [BFL]        Matt Blaze, Joan Feigenbaum\
    \ and Jack Lacy, \"Distributed\n                Trust Management\", Proceedings\
    \ 1996 IEEE Symposium on\n                Security and Privacy.\n   [CHAUM]  \
    \    D. Chaum, \"Blind Signatures for Untraceable Payments\",\n              \
    \  Advances in Cryptology -- CRYPTO '82, 1983.\n   [DH]         Whitfield Diffie\
    \ and Martin Hellman, \"New Directions in\n                Cryptography\", IEEE\
    \ Transactions on Information Theory,\n                November 1976, pp. 644-654.\n\
    \   [DvH]        J. B. Dennis and E. C. Van Horn, \"Programming Semantics\n  \
    \              for Multiprogrammed Computations\", Communications of the\n   \
    \             ACM 9(3), March 1966.\n   [ECR]        Silvio Micali, \"Efficient\
    \ Certificate Revocation\",\n                manuscript, MIT LCS.\n   [ELIEN]\
    \      Jean-Emile Elien, \"Certificate Discovery Using SPKI/SDSI\n           \
    \     2.0 Certificates\", Masters Thesis, MIT LCS, May 1998,\n               \
    \ <http://theory.lcs.mit.edu/~cis/theses/elien-masters.ps>\n                [also\
    \ .pdf and\n   [HARDY]      Hardy, Norman, \"THE KeyKOS Architecture\", Operating\n\
    \                Systems Review, v.19 n.4, October 1985. pp 8-25.\n   [IDENT]\
    \      Carl Ellison, \"Establishing Identity Without\n                Certification\
    \ Authorities\", USENIX Security Symposium,\n                July 1996.\n   [IWG]\
    \        McConnell and Appel, \"Enabling Privacy, Commerce,\n                Security\
    \ and Public Safety in the Global Information\n                Infrastructure\"\
    , report of the Interagency Working Group\n                on Cryptography Policy,\
    \ May 12, 1996; (quote from\n                paragraph 5 of the Introduction).\n\
    \   [KEYKOS]     Bomberger, Alan, et al., \"The KeyKOS(r) Nanokernel\n       \
    \         Architecture\", Proceedings of the USENIX Workshop on\n            \
    \    Micro-Kernels and Other Kernel Architectures, USENIX\n                Association,\
    \ April 1992. pp 95-112 (In addition, there\n                are KeyKOS papers\
    \ on the net available through\n                <http://www.cis.upenn.edu/~KeyKOS/#bibliography>).\n\
    \   [KOHNFELDER] Kohnfelder, Loren M., \"Towards a Practical Public-key\n    \
    \            Cryptosystem\", MIT S.B. Thesis, May. 1978.\n   [LAMPSON]    B. Lampson,\
    \ M. Abadi, M. Burrows, and E. Wobber,\n                \"Authentication in distributed\
    \ systems: Theory and\n                practice\", ACM Trans. Computer Systems\
    \ 10, 4 (Nov.\n                1992), pp 265-310.\n   [LANDAU]     Landau, Charles,\
    \ \"Security in a Secure Capability-Based\n                System\", Operating\
    \ Systems Review, Oct 1989 pp 2-4.\n   [LEVY]       Henry M. Levy, \"Capability-Based\
    \ Computer Systems\",\n                Digital Press, 12 Crosby Dr., Bedford MA\
    \ 01730, 1984.\n   [LINDEN]     T. A. Linden, \"Operating System Structures to\
    \ Support\n                Security and Reliable Software\", Computing Surveys\
    \ 8(4),\n                December 1976.\n   [PKCS1]      PKCS #1: RSA Encryption\
    \ Standard, RSA Data Security,\n                Inc., 3 June 1991, Version 1.4.\n\
    \   [PKLOGIN]    David Kemp, \"The Public Key Login Protocol\", Work in\n    \
    \            Progress.\n   [R98]        R. Rivest, \"Can We Eliminate Revocation\
    \ Lists?\", to\n                appear in the Proceedings of Financial Cryptography\n\
    \                1998, <http://theory.lcs.mit.edu/~rivest/revocation.ps>.\n  \
    \ [RFC1114]    Kent, S. and  J. Linn, \"Privacy Enhancement for Internet\n   \
    \             Electronic Mail: Part II -- Certificate-Based Key\n            \
    \    Management\", RFC 1114, August 1989.\n   [RFC1321]    Rivest, R., \"The MD5\
    \ Message-Digest Algorithm\", RFC\n                1321, April 1992.\n   [RFC2045]\
    \    Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n             \
    \   Extensions (MIME) Part One: Format of Internet Message\n                Bodies\"\
    , RFC 2045, December 1996.\n   [RFC2046]    Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n                Extensions (MIME) Part Two: Media Types\", RFC\
    \ 2046,\n                December 1996.\n   [RFC2047]    K. Moore, \"MIME (Multipurpose\
    \ Internet Mail Extensions)\n                Part Three: Message Header Extensions\
    \ for Non-ASCII\n                Text\", RFC 2047, December 1996.\n   [RFC2065]\
    \    Eastlake, D. and C. Kaufman, \"Proposed Standard for DNS\n              \
    \  Security\", RFC 2065, January 1997.\n   [RFC2104]    Krawczyk, H., Bellare,\
    \ M. and R. Canetti, \"HMAC:\n                Keyed-Hashing for Message Authentication\"\
    , RFC 2104,\n                February 1997.\n   [SDSI]       Ron Rivest and Butler\
    \ Lampson, \"SDSI - A Simple\n                Distributed Security Infrastructure\
    \ [SDSI]\",\n                <http://theory.lcs.mit.edu/~cis/sdsi.html>.\n   [SET]\
    \        Secure Electronic Transactions -- a protocol designed by\n          \
    \      VISA, MasterCard and others, including a certificate\n                structure\
    \ covering all participants.  See\n                <http://www.visa.com/>.\n \
    \  [SEXP]       Ron Rivest, code and description of S-expressions,\n         \
    \       <http://theory.lcs.mit.edu/~rivest/sexp.html>.\n   [SRC-070]    Abadi,\
    \ Burrows, Lampson and Plotkin, \"A Calculus for\n                Access Control\
    \ in Distributed Systems\", DEC SRC-070,\n                revised August 28, 1991.\n\
    \   [UPKI]       C. Ellison, \"The nature of a useable PKI\", Computer\n     \
    \           Networks 31 (1999) pp. 823-830.\n   [WEBSTER]    \"Webster's Ninth\
    \ New Collegiate Dictionary\", Merriam-\n                Webster, Inc., 1991.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Several independent contributions, published elsewhere on\
    \ the net or\n   in print, worked in synergy with our effort.  Especially important\
    \ to\n   our work were: [SDSI], [BFL] and [RFC2065].  The inspiration we\n   received\
    \ from the notion of CAPABILITY in its various forms (SDS-940,\n   Kerberos, DEC\
    \ DSSA, [SRC-070], KeyKOS [HARDY]) can not be over-rated.\n   Significant contributions\
    \ to this effort by the members of the SPKI\n   mailing list and especially the\
    \ following persons (listed in\n   alphabetic order) are gratefully acknowledged:\
    \ Steve Bellovin, Mark\n   Feldman, John Gilmore, Phill Hallam-Baker, Bob Jueneman,\
    \ David Kemp,\n   Angelos D. Keromytis, Paul Lambert, Jon Lasser, Jeff Parrett,\
    \ Bill\n   Sommerfeld, Simon Spero.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carl M. Ellison\n   Intel Corporation\n   2111 NE 25th\
    \ Ave  M/S JF3-212\n   Hillsboro OR 97124-5961 USA\n   Phone: +1-503-264-2900\n\
    \   Fax:   +1-503-264-6225\n   EMail: carl.m.ellison@intel.com\n          cme@alum.mit.edu\n\
    \   Web:   http://www.pobox.com/~cme\n   Bill Frantz\n   Electric Communities\n\
    \   10101 De Anza Blvd.\n   Cupertino CA 95014\n   Phone: +1 408-342-9576\n  \
    \ EMail: frantz@netcom.com\n   Butler Lampson\n   Microsoft\n   180 Lake View\
    \ Ave\n   Cambridge MA 02138\n   Phone: +1 617-547-9580 (voice + FAX)\n   EMail:\
    \ blampson@microsoft.com\n   Ron Rivest\n   Room 324, MIT Laboratory for Computer\
    \ Science\n   545 Technology Square\n   Cambridge MA 02139\n   Phone: +1-617-253-5880\n\
    \   Fax:   +1-617-258-9738\n   EMail: rivest@theory.lcs.mit.edu\n   Web:   http://theory.lcs.mit.edu/~rivest\n\
    \   Brian Thomas\n   Southwestern Bell\n   One Bell Center, Room 34G3\n   St.\
    \ Louis MO 63101 USA\n   Phone: +1 314-235-3141\n   Fax:   +1 314-235-0162\n \
    \  EMail: bt0008@sbc.com\n   Tatu Ylonen\n   SSH Communications Security Ltd.\n\
    \   Tekniikantie 12\n   FIN-02150 ESPOO\n   Finland\n   EMail: ylo@ssh.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
