- contents:
  - '          Dial Control Management Information Base using SMIv2

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in the Internet community.\n   In
    particular, it describes managed objects used for managing demand\n   access circuits,
    including ISDN.\n   This document specifies a MIB module in a manner that is compliant
    to\n   the SNMPv2 SMI.  The set of objects is consistent with the SNMP\n   framework
    and existing SNMP standards.\n   This document is a product of the ISDN MIB working
    group within the\n   Internet Engineering Task Force.  Comments are solicited
    and should\n   be addressed to the working group's mailing list at isdn-\n   mib@cisco.com
    and/or the author.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1 The SNMPv2 Network Management Framework ......................
    \   2\n   1.1 Object Definitions .........................................    2\n
    \  2 Overview .....................................................    2\n   2.1
    Structure of MIB ...........................................    2\n   2.2 Relationship
    to the Interfaces MIB .........................    3\n   2.2.1 Layering Model
    and Virtual Circuits ......................    3\n   2.2.2 ifTestTable ..............................................
    \   4\n   2.2.3 ifRcvAddressTable ........................................    4\n
    \  2.2.3.1 ifEntry for a single peer ..............................    5\n   2.3
    Multilink and backup line support ..........................    5\n   2.4 Support
    for generic peers ..................................    5\n   3 Definitions ..................................................
    \   6\n   3.1 Dial Control MIB ...........................................    6\n
    \  4 Acknowledgments ..............................................   32\n   5
    References ...................................................   33\n   6 Security
    Considerations ......................................   33\n   7 Author's Address
    .............................................   34\n"
  title: Table of Contents
- contents:
  - "1.  The SNMPv2 Network Management Framework\n   The SNMPv2 Network Management
    Framework presently consists of three\n   major components.  They are:\n   o    the
    SMI, described in RFC 1902 [1] - the mechanisms used for\n        describing and
    naming objects for the purpose of management.\n   o    the MIB-II, STD 17, RFC
    1213 [2] - the core set of managed\n        objects for the Internet suite of
    protocols.\n   o    the protocol, STD 15, RFC 1157 [3] and/or RFC 1905 [4], -\n
    \       the protocol for accessing managed objects.\n   The Framework permits
    new objects to be defined for the purpose of\n   experimentation and evaluation.\n"
  - contents:
    - "1.1.  Object Definitions\n   Managed objects are accessed via a virtual information
      store, termed\n   the Management Information Base or MIB.  Objects in the MIB
      are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n   defined
      in the SMI.  In particular, each object type is named by an\n   OBJECT IDENTIFIER,
      an administratively assigned name.  The object\n   type together with an object
      instance serves to uniquely identify a\n   specific instantiation of the object.
      \ For human convenience, we\n   often use a textual string, termed the descriptor,
      to refer to the\n   object type.\n"
    title: 1.1.  Object Definitions
  title: 1.  The SNMPv2 Network Management Framework
- contents:
  - '2.  Overview

    '
  - contents:
    - "2.1.  Structure of MIB\n   Managing demand access circuits requires the following
      groups of\n   information:\n   o    General configuration information.\n   o
      \   Information to describe peer configuration and peer statistics.\n        In
      this respect, peer configuration means information on how to\n        connect
      to peers on outgoing calls, how to identify peers on\n        incoming calls,
      and other call related configuration\n        information.\n   o    Information
      to store active call information.\n   o    Information to retain call history.\n
      \  The MIB, therefore, is structured into four groups.\n   o    The dialCtlConfiguration
      group is used to specify general\n        configuration information.\n   o    The
      dialCtlPeer group is used to describe peer configuration\n        and peer statistics.\n
      \  o    The callActive group is used to store active call information.\n   o
      \   The callHistory group is used to store call history information.\n        These
      calls could be circuit switched or they could be virtual\n        circuits.
      History of each and every call is stored, of successful\n        calls as well
      as unsuccessful and rejected calls.  An entry will\n        be created when
      a call is cleared.\n"
    title: 2.1.  Structure of MIB
  - contents:
    - "2.2.  Relationship to the Interfaces MIB\n   This section clarifies the relationship
      of this MIB to the Interfaces\n   MIB [8].  Several areas of correlation are
      addressed in the following\n   subsections.  The implementor is referred to
      the Interfaces MIB\n   document in order to understand the general intent of
      these areas.\n"
    - contents:
      - "2.2.1.  Layering Model and Virtual Circuits\n   On an occasional access channel,
        there are a number of peer systems\n   that are permitted to call or be called,
        all of which need to be\n   treated as active from a routing viewpoint, but
        most of which have no\n   call in progress at any given time.\n   On dialup
        interfaces, this is further complicated by the fact that\n   calls to a given
        peer float from channel to channel. One cannot\n   definitively say \"I call
        this peer on that interface.\" It is\n   necessary, therefore, to provide
        a mapping algorithm between the\n   low-level interfaces, and the various
        logical interfaces supporting\n   the peers.  This is solved by creating a
        logical interface (ifEntry)\n   for each peer and a logical interface (ifEntry)
        for each low-level\n   interface.  These are then correlated using the ifStackTable.\n
        \  The low-level interfaces are either physical interfaces, e.g.  modem\n
        \  interfaces, or logical interfaces, e.g. ISDN B channels, which then\n   in
        turn are layered on top of physical ISDN interfaces.\n   The model, therefore,
        looks something like this, taking ISDN as an\n   example:\n"
      - '+-------------------------------------------------------+

        '
      - '|               Network Layer Protocol                  |

        '
      - "+------+ +-------+ +-------+ +-------+ +-------+ +------+\n       | |       |
        |       | |       | |       | | <== appears active\n     +-+ +-+   +-+ +-+
        \  +-+ +-+   +-+ +-+   +-+ +-+\n     | PPP |   | PPP |   | F/R |   | PPP |
        \  | F/R |\n     | for |   | for |   | for |   | for |   | for |   ifEntry
        with\n     |Peer1|   |Peer2|   |switch   |Peer3|   |switch   shadow PeerEntry\n
        \    |     |   |     |   |  A  |   |     |   |  B  |\n     +-+ +-+   +-+ +-+
        \  +-+ +-+   +-+ +-+   +-+ +-+\n                 | |                 | |           <==
        some actually are\n    +--+ +--+ +--+ +--+ +--+ +--+ +--+ +--+ +--+ +--+\n
        \   |   B   | |   B   | |   B   | |   B   | |   B   |\n    |channel| |channel|
        |channel| |channel| |channel|\n    +--+ +--+ +--+ +--+ +--+ +--+ +--+ +--+
        +--+ +--+\n       | |       | |       | |       | |       | |\n"
      - '+------+ +-------+ +-------+ +-------+ +-------+ +------+

        '
      - '|             Basic/Primary Rate Interface              |

        '
      - "+-------------------------------------------------------+\n   Mapping of
        IP interfaces to Called Peers to B Channels\n   IfEntries are maintained for
        each peer.\n   In this model, each peer is required to have an associated\n
        \  encapsulation layer interface. This interface can be of any kind,\n   e.g.
        PPP or LAPB.\n   In order to specify the network address for a given peer,
        one would\n   then usually add a routing/forwarding table entry, pointing
        to the\n   encapsulation layer interface through which this peer can be reached.\n"
      title: 2.2.1.  Layering Model and Virtual Circuits
    - contents:
      - "2.2.2.  ifTestTable\n   The ifTestTable usage is defined in the MIBs defining
        the\n   encapsulation below the network layer.  For example, if PPP\n   encapsulation
        is being used, the ifTestTable is defined by PPP.\n"
      title: 2.2.2.  ifTestTable
    - contents:
      - "2.2.3.  ifRcvAddressTable\n   The ifRcvAddressTable usage is defined in the
        MIBs defining the\n   encapsulation below the network layer.  For example,
        if PPP\n   encapsulation is being used, the ifRcvAddressTable is defined by
        PPP.\n"
      - contents:
        - "2.2.3.1.  ifEntry for a single peer\n   IfEntries are defined in the MIBs
          defining the encapsulation below\n   the network layer.  For example, if
          PPP encapsulation is being used,\n   the ifEntry is defined by PPP.\n   ifEntries
          will never be created by the Dial Control MIB.  The Dial\n   Control MIB
          always depends on some other ifIndex of some set of\n   ifTypes.  That is,
          to create an entry in the Dial Control MIB, the\n   base ifEntry must already
          have been created through some other\n   mechanism.\n   The Dial Control
          entry does have its own RowStatus, permitting the\n   Dial Control supplementary
          information to come and go, but not\n   otherwise disturbing the ifIndex
          to which it is attached.  If in a\n   given implementation the two are tightly
          bound, deleting the ifEntry\n   may have the side effect of deleting the
          Dial Control entry.\n"
        title: 2.2.3.1.  ifEntry for a single peer
      title: 2.2.3.  ifRcvAddressTable
    title: 2.2.  Relationship to the Interfaces MIB
  - contents:
    - "2.3.  Multilink and backup line support\n   In order to support multilink and
      backup procedures, there may be\n   several entries for a single peer in the
      dialCtlPeerCfgTable.\n   A single peer is identified using the dialCtlPeerCfgId
      object of the\n   dialCtlPeerCfgTable.  There may be several entries in\n   dialCtlPeerCfgTable
      with the same value of dialCtlPeerCfgId, but\n   different ifIndex values.  Each
      of those entries will then describe a\n   possible connection to the same peer.
      \ Such entries can then be used\n   to handle multilink as well as backup procedures,
      e.g. by bundling\n   the attached ifEntries using PPP multilink.\n"
    title: 2.3.  Multilink and backup line support
  - contents:
    - "2.4.  Support for generic peers\n   Generic peers can for example be supported
      by permitting wild-card\n   characters (e.g., '?' or '*') in dialCtlPeerCfgAnswerAddress.
      \ A\n   number to be accepted could then be defined as partly (e.g., '*1234')\n
      \  or entirely generic (e.g., '*').\n   A detailed specification of such a functionality
      is outside the scope\n   of this document.\n   However, the implementor should
      be aware that supporting generic\n   peers may cause a security hole.  The user
      would not know where a\n   call is from, which could potentially allow unauthorized
      access.\n"
    title: 2.4.  Support for generic peers
  title: 2.  Overview
- contents:
  - '3.  Definitions

    '
  - contents:
    - '3.1.  Dial Control MIB

      '
    - 'DIAL-CONTROL-MIB DEFINITIONS ::= BEGIN

      '
    - "IMPORTS\n        MODULE-IDENTITY,\n        NOTIFICATION-TYPE,\n        OBJECT-TYPE,\n
      \       Unsigned32\n                FROM SNMPv2-SMI\n        TEXTUAL-CONVENTION,\n
      \       DisplayString,\n        TimeStamp,\n        RowStatus\n                 FROM
      SNMPv2-TC\n        MODULE-COMPLIANCE,\n        OBJECT-GROUP,\n        NOTIFICATION-GROUP\n
      \               FROM SNMPv2-CONF\n        IANAifType\n                FROM IANAifType-MIB\n
      \       ifOperStatus,\n        ifIndex,\n        InterfaceIndex,\n        InterfaceIndexOrZero\n
      \               FROM IF-MIB\n        transmission\n                FROM RFC1213-MIB;\n"
    - "dialControlMib MODULE-IDENTITY\n        LAST-UPDATED    \"9609231544Z\" --
      Sep 23, 1996\n        ORGANIZATION    \"IETF ISDN Working Group\"\n        CONTACT-INFO\n
      \           \"        Guenter Roeck\n             Postal: cisco Systems\n                     170
      West Tasman Drive\n                     San Jose, CA 95134\n                     U.S.A.\n
      \            Phone:  +1 408 527 3143\n             E-mail: groeck@cisco.com\"\n
      \       DESCRIPTION\n            \"The MIB module to describe peer information
      for\n             demand access and possibly other kinds of interfaces.\"\n
      \       ::= { transmission 21 }\n"
    - "AbsoluteCounter32 ::= TEXTUAL-CONVENTION\n        STATUS      current\n        DESCRIPTION\n
      \           \"Represents a Counter32-like value that starts at zero,\n             does
      not decrease, and does not wrap. This may be used\n             only in situations
      where wrapping is not possible or\n             extremely unlikely. Should such
      a counter overflow,\n             it locks at the maxium value of 4,294,967,295.\n
      \            The primary use of this type of counter is situations\n             where
      a counter value is to be recorded as history\n             and is thus no longer
      subject to reading for changing\n             values.\"\n        SYNTAX      Unsigned32\n"
    - '-- Dial Control Mib objects definitions

      '
    - 'dialControlMibObjects OBJECT IDENTIFIER ::= { dialControlMib 1 }

      '
    - '-- General configuration group

      '
    - 'dialCtlConfiguration OBJECT IDENTIFIER ::= { dialControlMibObjects 1 }

      '
    - '-- general configuration data/parameters

      '
    - "dialCtlAcceptMode OBJECT-TYPE\n        SYNTAX INTEGER {\n            acceptNone(1),\n
      \           acceptAll(2),\n            acceptKnown(3)\n        }\n        MAX-ACCESS
      \ read-write\n        STATUS      current\n        DESCRIPTION\n            \"The
      security level for acceptance of incoming calls.\n             acceptNone(1)
      \ - incoming calls will not be accepted\n             acceptAll(2)   - incoming
      calls will be accepted,\n                              even if there is no matching
      entry\n                              in the dialCtlPeerCfgTable\n             acceptKnown(3)
      - incoming calls will be accepted only\n                              if there
      is a matching entry in the\n                              dialCtlPeerCfgTable\n
      \           \"\n        ::= { dialCtlConfiguration 1 }\n"
    - "dialCtlTrapEnable OBJECT-TYPE\n        SYNTAX      INTEGER {\n            enabled(1),\n
      \           disabled(2)\n        }\n        MAX-ACCESS  read-write\n        STATUS
      \     current\n        DESCRIPTION\n            \"This object indicates whether
      dialCtlPeerCallInformation\n             and dialCtlPeerCallSetup traps should
      be generated for\n             all peers. If the value of this object is enabled(1),\n
      \            traps will be generated for all peers. If the value\n             of
      this object is disabled(2), traps will be generated\n             only for peers
      having dialCtlPeerCfgTrapEnable set\n             to enabled(1).\"\n        DEFVAL
      \     { disabled }\n        ::= { dialCtlConfiguration 2 }\n"
    - '-- Peer group

      '
    - 'dialCtlPeer OBJECT IDENTIFIER ::= { dialControlMibObjects 2 }

      '
    - '-- peer configuration table

      '
    - "dialCtlPeerCfgTable OBJECT-TYPE\n        SYNTAX      SEQUENCE OF DialCtlPeerCfgEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"The list of peers from which the managed device\n             will
      accept calls or to which it will place them.\"\n       ::= { dialCtlPeer 1 }\n"
    - "dialCtlPeerCfgEntry OBJECT-TYPE\n        SYNTAX      DialCtlPeerCfgEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"Configuration data for a single Peer. This entry is\n             effectively
      permanent, and contains information\n             to identify the peer, how
      to connect to the peer,\n             how to identify the peer and its permissions.\n
      \            The value of dialCtlPeerCfgOriginateAddress must be\n             specified
      before a new row in this table can become\n             active(1). Any writeable
      parameters in an existing entry\n             can be modified while the entry
      is active. The modification\n             will take effect when the peer in
      question will be\n             called the next time.\n             An entry
      in this table can only be created if the\n             associated ifEntry already
      exists.\"\n        INDEX       { dialCtlPeerCfgId, ifIndex }\n      ::= { dialCtlPeerCfgTable
      1 }\n"
    - "DialCtlPeerCfgEntry ::= SEQUENCE {\n            dialCtlPeerCfgId                 INTEGER,\n
      \           dialCtlPeerCfgIfType             IANAifType,\n            dialCtlPeerCfgLowerIf
      \           InterfaceIndexOrZero,\n            dialCtlPeerCfgOriginateAddress
      \  DisplayString,\n            dialCtlPeerCfgAnswerAddress      DisplayString,\n
      \           dialCtlPeerCfgSubAddress         DisplayString,\n            dialCtlPeerCfgClosedUserGroup
      \   DisplayString,\n            dialCtlPeerCfgSpeed              INTEGER,\n
      \           dialCtlPeerCfgInfoType           INTEGER,\n            dialCtlPeerCfgPermission
      \        INTEGER,\n            dialCtlPeerCfgInactivityTimer    INTEGER,\n            dialCtlPeerCfgMinDuration
      \       INTEGER,\n            dialCtlPeerCfgMaxDuration        INTEGER,\n            dialCtlPeerCfgCarrierDelay
      \      INTEGER,\n            dialCtlPeerCfgCallRetries        INTEGER,\n            dialCtlPeerCfgRetryDelay
      \        INTEGER,\n            dialCtlPeerCfgFailureDelay       INTEGER,\n            dialCtlPeerCfgTrapEnable
      \        INTEGER,\n            dialCtlPeerCfgStatus             RowStatus\n
      \       }\n"
    - "dialCtlPeerCfgId OBJECT-TYPE\n        SYNTAX      INTEGER (1..2147483647)\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"This object identifies a single peer. There may\n             be
      several entries in this table for one peer,\n             defining different
      ways of reaching this peer.\n             Thus, there may be several entries
      in this table\n             with the same value of dialCtlPeerCfgId.\n             Multiple
      entries for one peer may be used to support\n             multilink as well
      as backup lines.\n             A single peer will be identified by a unique
      value\n             of this object. Several entries for one peer MUST\n             have
      the same value of dialCtlPeerCfgId, but different\n             ifEntries and
      thus different values of ifIndex.\"\n        ::= { dialCtlPeerCfgEntry 1 }\n"
    - "dialCtlPeerCfgIfType OBJECT-TYPE\n        SYNTAX      IANAifType\n        MAX-ACCESS
      \ read-create\n        STATUS      current\n        DESCRIPTION\n            \"The
      interface type to be used for calling this peer.\n             In case of ISDN,
      the value of isdn(63) is to be used.\"\n        DEFVAL      { other }\n        ::=
      { dialCtlPeerCfgEntry 2 }\n"
    - "dialCtlPeerCfgLowerIf OBJECT-TYPE\n        SYNTAX      InterfaceIndexOrZero\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"ifIndex value of an interface the peer will have to be\n             called
      on. For example, on an ISDN interface, this can be\n             the ifIndex
      value of a D channel or the ifIndex value of a\n             B channel, whatever
      is appropriate for a given peer.\n             As an example, for Basic Rate
      leased lines it will be\n             necessary to specify a B channel ifIndex,
      while for\n             semi-permanent connections the D channel ifIndex has\n
      \            to be specified.\n             If the interface can be dynamically
      assigned, this object\n             has a value of zero.\"\n        DEFVAL      {
      0 }\n        ::= { dialCtlPeerCfgEntry 3 }\n"
    - "dialCtlPeerCfgOriginateAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"Call Address at which the peer will be called.\n             Think
      of this as the set of characters following 'ATDT '\n             or the 'phone
      number' included in a D channel call request.\n             The structure of
      this information will be switch type\n             specific. If there is no
      address information required\n             for reaching the peer, i.e., for
      leased lines,\n             this object will be a zero length string.\"\n        ::=
      { dialCtlPeerCfgEntry 4 }\n"
    - "dialCtlPeerCfgAnswerAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"Calling Party Number information element, as for example\n             passed
      in an ISDN SETUP message by a PBX or switch,\n             for incoming calls.\n
      \            This address can be used to identify the peer.\n             If
      this address is either unknown or identical\n             to dialCtlPeerCfgOriginateAddress,
      this object will be\n             a zero length string.\"\n        DEFVAL      {
      \"\" }\n        ::= { dialCtlPeerCfgEntry 5 }\n"
    - "dialCtlPeerCfgSubAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n        MAX-ACCESS
      \ read-create\n        STATUS      current\n        DESCRIPTION\n            \"Subaddress
      at which the peer will be called.\n             If the subaddress is undefined
      for the given media or\n             unused, this is a zero length string.\"\n
      \       DEFVAL      { \"\" }\n        ::= { dialCtlPeerCfgEntry 6 }\n"
    - "dialCtlPeerCfgClosedUserGroup OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"Closed User Group at which the peer will be called.\n             If
      the Closed User Group is undefined for the given media\n             or unused,
      this is a zero length string.\"\n        REFERENCE\n            \"Q.931, chapter
      4.6.1.\"\n        DEFVAL      { \"\" }\n        ::= { dialCtlPeerCfgEntry 7
      }\n"
    - "dialCtlPeerCfgSpeed OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"The desired information transfer speed in bits/second\n             when
      calling this peer.\n             The detailed media specific information, e.g.
      information\n             type and information transfer rate for ISDN circuits,\n
      \            has to be extracted from this object.\n             If the transfer
      speed to be used is unknown or the default\n             speed for this type
      of interfaces, the value of this object\n             may be zero.\"\n        DEFVAL
      \     { 0 }\n        ::= { dialCtlPeerCfgEntry 8 }\n"
    - "dialCtlPeerCfgInfoType OBJECT-TYPE\n        SYNTAX      INTEGER {\n            other(1),\n
      \           speech(2),\n            unrestrictedDigital(3),     -- 64k/s data\n
      \           unrestrictedDigital56(4),   -- with 56k rate adaption\n            restrictedDigital(5),\n
      \           audio31(6),                 -- 3.1 kHz audio\n            audio7(7),
      \                 -- 7 kHz audio\n            video(8),\n            packetSwitched(9),\n
      \           fax(10)\n        }\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"The Information Transfer Capability
      to be used when\n             calling this peer.\n             speech(2) refers
      to a non-data connection, whereas\n             audio31(6) and audio7(7) refer
      to data mode\n             connections.\"\n        DEFVAL      { other }\n        ::=
      { dialCtlPeerCfgEntry 9 }\n"
    - "dialCtlPeerCfgPermission OBJECT-TYPE\n        SYNTAX      INTEGER {\n            originate(1),\n
      \           answer(2),\n            both(3),               -- both originate
      & answer\n            callback(4),\n            none(5)\n        }\n        MAX-ACCESS
      \ read-create\n        STATUS      current\n        DESCRIPTION\n            \"Applicable
      permissions. callback(4) either rejects the\n             call and then calls
      back, or uses the 'Reverse charging'\n             information element if it
      is available.\n             Note that callback(4) is supposed to control charging,
      not\n             security, and applies to callback prior to accepting a\n             call.
      Callback for security reasons can be handled using\n             PPP callback.\"\n
      \       DEFVAL      { both }\n        ::= { dialCtlPeerCfgEntry 10 }\n"
    - "dialCtlPeerCfgInactivityTimer OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       UNITS       \"seconds\"\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"The connection will be automatically
      disconnected\n             if no longer carrying useful data for a time\n             period,
      in seconds, specified in this object.\n             Useful data in this context
      refers to forwarding\n             packets, including routing information; it\n
      \            excludes the encapsulator maintenance frames.\n             A value
      of zero means the connection will not be\n             automatically taken down
      due to inactivity,\n             which implies that it is a dedicated circuit.\"\n
      \       DEFVAL      { 0 }\n        ::= { dialCtlPeerCfgEntry 11 }\n"
    - "dialCtlPeerCfgMinDuration OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"Minimum duration of a call in seconds, starting from the\n             time
      the call is connected until the call is disconnected.\n             This is
      to accomplish the fact that in most countries\n             charging applies
      to units of time, which should be matched\n             as closely as possible.\"\n
      \       DEFVAL      { 0 }\n        ::= { dialCtlPeerCfgEntry 12 }\n"
    - "dialCtlPeerCfgMaxDuration OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"Maximum call duration in seconds. Zero means 'unlimited'.\"\n
      \       DEFVAL      { 0 }\n        ::= { dialCtlPeerCfgEntry 13 }\n"
    - "dialCtlPeerCfgCarrierDelay OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       UNITS       \"seconds\"\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"The call timeout time in seconds.
      The default value\n             of zero means that the call timeout as specified
      for\n             the media in question will apply.\"\n        DEFVAL      {
      0 }\n        ::= { dialCtlPeerCfgEntry 14 }\n"
    - "dialCtlPeerCfgCallRetries OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of calls to a non-responding address\n             that
      may be made. A retry count of zero means\n             there is no bound. The
      intent is to bound\n             the number of successive calls to an address\n
      \            which is inaccessible, or which refuses those calls.\n             Some
      countries regulate the number of call retries\n             to a given peer
      that can be made.\"\n        DEFVAL      { 0 }\n        ::= { dialCtlPeerCfgEntry
      15 }\n"
    - "dialCtlPeerCfgRetryDelay OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       UNITS       \"seconds\"\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"The time in seconds between
      call retries if a peer\n             cannot be reached.\n             A value
      of zero means that call retries may be done\n             without any delay.\"\n
      \       DEFVAL      { 0 }\n        ::= { dialCtlPeerCfgEntry 16 }\n"
    - "dialCtlPeerCfgFailureDelay OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       UNITS       \"seconds\"\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"The time in seconds after
      which call attempts are\n             to be placed again after a peer has been
      noticed\n             to be unreachable, i.e. after dialCtlPeerCfgCallRetries\n
      \            unsuccessful call attempts.\n             A value of zero means
      that a peer will not be called\n             again after dialCtlPeerCfgCallRetries
      unsuccessful call\n             attempts.\"\n        DEFVAL      { 0 }\n        ::=
      { dialCtlPeerCfgEntry 17 }\n"
    - "dialCtlPeerCfgTrapEnable OBJECT-TYPE\n        SYNTAX      INTEGER {\n            enabled(1),\n
      \           disabled(2)\n        }\n        MAX-ACCESS  read-create\n        STATUS
      \     current\n        DESCRIPTION\n            \"This object indicates whether
      dialCtlPeerCallInformation\n             and dialCtlPeerCallSetup traps should
      be generated for\n             this peer.\"\n        DEFVAL      { disabled
      }\n        ::= { dialCtlPeerCfgEntry 18 }\n"
    - "dialCtlPeerCfgStatus OBJECT-TYPE\n        SYNTAX      RowStatus\n        MAX-ACCESS
      \ read-create\n        STATUS      current\n        DESCRIPTION\n            \"Status
      of one row in this table.\"\n        ::= { dialCtlPeerCfgEntry 19 }\n"
    - '-- Peer statistics table

      '
    - "dialCtlPeerStatsTable OBJECT-TYPE\n        SYNTAX      SEQUENCE OF DialCtlPeerStatsEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"Statistics information for each peer entry.\n             There
      will be one entry in this table for each entry\n             in the dialCtlPeerCfgTable.\"\n
      \      ::= { dialCtlPeer 2 }\n"
    - "dialCtlPeerStatsEntry OBJECT-TYPE\n        SYNTAX      DialCtlPeerStatsEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"Statistics information for a single Peer. This entry\n             is
      effectively permanent, and contains information\n             describing the
      last call attempt as well as supplying\n             statistical information.\"\n
      \       AUGMENTS    { dialCtlPeerCfgEntry }\n      ::= { dialCtlPeerStatsTable
      1 }\n"
    - "DialCtlPeerStatsEntry ::=\n        SEQUENCE {\n            dialCtlPeerStatsConnectTime
      \         AbsoluteCounter32,\n            dialCtlPeerStatsChargedUnits         AbsoluteCounter32,\n
      \           dialCtlPeerStatsSuccessCalls         AbsoluteCounter32,\n            dialCtlPeerStatsFailCalls
      \           AbsoluteCounter32,\n            dialCtlPeerStatsAcceptCalls          AbsoluteCounter32,\n
      \           dialCtlPeerStatsRefuseCalls          AbsoluteCounter32,\n            dialCtlPeerStatsLastDisconnectCause
      \ OCTET STRING,\n            dialCtlPeerStatsLastDisconnectText   DisplayString,\n
      \           dialCtlPeerStatsLastSetupTime        TimeStamp\n        }\n"
    - "dialCtlPeerStatsConnectTime OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       UNITS       \"seconds\"\n        MAX-ACCESS  read-only\n        STATUS
      \     current\n        DESCRIPTION\n            \"Accumulated connect time to
      the peer since system startup.\n             This is the total connect time,
      i.e. the connect time\n             for outgoing calls plus the time for incoming
      calls.\"\n        ::= { dialCtlPeerStatsEntry 1 }\n"
    - "dialCtlPeerStatsChargedUnits OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The total number of charging units applying to this\n             peer
      since system startup.\n             Only the charging units applying to the
      local interface,\n             i.e. for originated calls or for calls with 'Reverse\n
      \            charging' being active, will be counted here.\"\n        ::= {
      dialCtlPeerStatsEntry 2 }\n"
    - "dialCtlPeerStatsSuccessCalls OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"Number of completed calls to this peer.\"\n        ::= { dialCtlPeerStatsEntry
      3 }\n"
    - "dialCtlPeerStatsFailCalls OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"Number of failed call attempts to this peer since system\n             startup.\"\n
      \       ::= { dialCtlPeerStatsEntry 4 }\n"
    - "dialCtlPeerStatsAcceptCalls OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"Number of calls from this peer accepted since system\n             startup.\"\n
      \       ::= { dialCtlPeerStatsEntry 5 }\n"
    - "dialCtlPeerStatsRefuseCalls OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"Number of calls from this peer refused since system\n             startup.\"\n
      \       ::= { dialCtlPeerStatsEntry 6 }\n"
    - "dialCtlPeerStatsLastDisconnectCause OBJECT-TYPE\n        SYNTAX      OCTET
      STRING (SIZE (0..4))\n        MAX-ACCESS  read-only\n        STATUS      current\n
      \       DESCRIPTION\n            \"The encoded network cause value associated
      with the last\n             call.\n             This object will be updated
      whenever a call is started\n             or cleared.\n             The value
      of this object will depend on the interface type\n             as well as on
      the protocol and protocol version being\n             used on this interface.
      Some references for possible cause\n             values are given below.\"\n
      \       REFERENCE\n            \"- Bellcore SR-NWT-001953, Generic Guidelines
      for\n               ISDN Terminal Equipment On Basic Access Interfaces,\n               chapter
      5.2.5.8.\n             - Bellcore SR-NWT-002343, ISDN Primary Rate Interface\n
      \              Generic Guidelines for Customer Premises Equipment,\n               chapter
      8.2.5.8.\n             - ITU-T Q.931, Appendix I.\n             - ITU-T X.25,
      CAUSE and DIAGNOSTIC field values.\n             - German Telekom FTZ 1TR6,
      chapter 3.2.3.4.4.4.\"\n        ::= { dialCtlPeerStatsEntry 7 }\n"
    - "dialCtlPeerStatsLastDisconnectText OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"ASCII text describing the reason for the last call\n             termination.\n
      \            This object exists because it would be impossible for\n             a
      management station to store all possible cause values\n             for all
      types of interfaces. It should be used only if\n             a management station
      is unable to decode the value of\n             dialCtlPeerStatsLastDisconnectCause.\n
      \            This object will be updated whenever a call is started\n             or
      cleared.\"\n        ::= { dialCtlPeerStatsEntry 8 }\n"
    - "dialCtlPeerStatsLastSetupTime OBJECT-TYPE\n        SYNTAX      TimeStamp\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The value of sysUpTime when the last call to this peer\n             was
      started.\n             For ISDN media, this will be the time when the setup\n
      \            message was received from or sent to the network.\n             This
      object will be updated whenever a call is started\n             or cleared.\"\n
      \       ::= { dialCtlPeerStatsEntry 9 }\n"
    - '--

      '
    - '-- the active call group

      '
    - '--

      '
    - 'callActive OBJECT IDENTIFIER ::= { dialControlMibObjects 3 }

      '
    - '-- callActiveTable

      '
    - '-- Table to store active call information.

      '
    - '-- These calls could be circuit switched or they could

      '
    - '-- be virtual circuits.

      '
    - '-- An entry will be created when a call is started and deleted

      '
    - '-- when a call is cleared.

      '
    - "callActiveTable OBJECT-TYPE\n        SYNTAX      SEQUENCE OF CallActiveEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"A table containing information about active\n             calls
      to a specific destination.\"\n        ::= { callActive 1 }\n"
    - "callActiveEntry OBJECT-TYPE\n        SYNTAX      CallActiveEntry\n        MAX-ACCESS
      \ not-accessible\n        STATUS      current\n        DESCRIPTION\n            \"The
      information regarding a single active Connection.\n             An entry in
      this table will be created when a call is\n             started. An entry in
      this table will be deleted when\n             an active call clears.\"\n        INDEX
      \      { callActiveSetupTime, callActiveIndex }\n        ::= { callActiveTable
      1 }\n"
    - "CallActiveEntry ::=\n        SEQUENCE {\n            callActiveSetupTime                  TimeStamp,\n
      \           callActiveIndex                      INTEGER,\n            callActivePeerAddress
      \               DisplayString,\n            callActivePeerSubAddress             DisplayString,\n
      \           callActivePeerId                     INTEGER,\n            callActivePeerIfIndex
      \               INTEGER,\n            callActiveLogicalIfIndex             InterfaceIndexOrZero,\n
      \           callActiveConnectTime                TimeStamp,\n            callActiveCallState
      \                 INTEGER,\n            callActiveCallOrigin                 INTEGER,\n
      \           callActiveChargedUnits               AbsoluteCounter32,\n            callActiveInfoType
      \                  INTEGER,\n            callActiveTransmitPackets            AbsoluteCounter32,\n
      \           callActiveTransmitBytes              AbsoluteCounter32,\n            callActiveReceivePackets
      \            AbsoluteCounter32,\n            callActiveReceiveBytes               AbsoluteCounter32\n
      \       }\n"
    - "callActiveSetupTime OBJECT-TYPE\n        SYNTAX      TimeStamp\n        MAX-ACCESS
      \ not-accessible\n        STATUS      current\n        DESCRIPTION\n            \"The
      value of sysUpTime when the call associated to this\n             entry was
      started. This will be useful for an NMS to\n             retrieve all calls
      after a specific time. Also, this object\n             can be useful in finding
      large delays between the time the\n             call was started and the time
      the call was connected.\n             For ISDN media, this will be the time
      when the setup\n             message was received from or sent to the network.\"\n
      \       ::= { callActiveEntry 1 }\n"
    - "callActiveIndex OBJECT-TYPE\n        SYNTAX      INTEGER (1..'7fffffff'h)\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"Small index variable to distinguish calls that start in\n             the
      same hundredth of a second.\"\n        ::= { callActiveEntry 2 }\n"
    - "callActivePeerAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      number this call is connected to. If the number is\n             not available,
      then it will have a length of zero.\"\n        ::= { callActiveEntry 3 }\n"
    - "callActivePeerSubAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      subaddress this call is connected to. If the subaddress\n             is undefined
      or not available, this will be a zero length\n             string.\"\n        ::=
      { callActiveEntry 4 }\n"
    - "callActivePeerId OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the Id value of the peer table entry\n             to
      which this call was made. If a peer table entry\n             for this call
      does not exist or is unknown, the value\n             of this object will be
      zero.\"\n        ::= { callActiveEntry 5 }\n"
    - "callActivePeerIfIndex OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the ifIndex value of the peer table entry\n             to
      which this call was made. If a peer table entry\n             for this call
      does not exist or is unknown, the value\n             of this object will be
      zero.\"\n        ::= { callActiveEntry 6 }\n"
    - "callActiveLogicalIfIndex OBJECT-TYPE\n        SYNTAX      InterfaceIndexOrZero\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the ifIndex value of the logical interface through\n             which
      this call was made. For ISDN media, this would be\n             the ifIndex
      of the B channel which was used for this call.\n             If the ifIndex
      value is unknown, the value of this object\n             will be zero.\"\n        ::=
      { callActiveEntry 7 }\n"
    - "callActiveConnectTime OBJECT-TYPE\n        SYNTAX      TimeStamp\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      value of sysUpTime when the call was connected.\n             If the call is
      not connected, this object will have a\n             value of zero.\"\n        ::=
      { callActiveEntry 8 }\n"
    - "callActiveCallState OBJECT-TYPE\n        SYNTAX      INTEGER {\n            unknown(1),\n
      \           connecting(2),\n            connected(3),\n            active(4)\n
      \       }\n        MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The current call state.\n             unknown(1)     - The call
      state is unknown.\n             connecting(2)  - A connection attempt (outgoing
      call)\n                              is being made.\n             connected(3)
      \  - An incoming call is in the process\n                              of validation.\n
      \            active(4)      - The call is active.\n            \"\n        ::=
      { callActiveEntry 9 }\n"
    - "callActiveCallOrigin OBJECT-TYPE\n        SYNTAX      INTEGER {\n            originate(1),\n
      \           answer(2),\n            callback(3)\n        }\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      call origin.\"\n        ::= { callActiveEntry 10 }\n"
    - "callActiveChargedUnits OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of charged units for this connection.\n             For
      incoming calls or if charging information is\n             not supplied by the
      switch, the value of this object\n             will be zero.\"\n        ::=
      { callActiveEntry 11 }\n"
    - "callActiveInfoType OBJECT-TYPE\n        SYNTAX      INTEGER {\n            other(1),
      \                  -- e.g. for non-isdn media\n            speech(2),\n            unrestrictedDigital(3),
      \    -- 64k/s data\n            unrestrictedDigital56(4),   -- with 56k rate
      adaption\n            restrictedDigital(5),\n            audio31(6),                 --
      3.1 kHz audio\n            audio7(7),                  -- 7 kHz audio\n            video(8),\n
      \           packetSwitched(9),\n            fax(10)\n        }\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      information type for this call.\"\n        ::= { callActiveEntry 12 }\n"
    - "callActiveTransmitPackets OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS     current\n        DESCRIPTION\n
      \           \"The number of packets which were transmitted for this\n             call.\"\n
      \       ::= { callActiveEntry 13 }\n"
    - "callActiveTransmitBytes OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of bytes which were transmitted for this\n             call.\"\n
      \       ::= { callActiveEntry 14 }\n"
    - "callActiveReceivePackets OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of packets which were received for this\n             call.\"\n
      \       ::= { callActiveEntry 15 }\n"
    - "callActiveReceiveBytes OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of bytes which were received for this call.\"\n        ::=
      { callActiveEntry 16 }\n"
    - '--

      '
    - '-- the call history group

      '
    - '--

      '
    - 'callHistory OBJECT IDENTIFIER ::= { dialControlMibObjects 4 }

      '
    - "callHistoryTableMaxLength OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-write\n        STATUS      current\n        DESCRIPTION\n
      \           \"The upper limit on the number of entries that the\n             callHistoryTable
      may contain.  A value of 0\n             will prevent any history from being
      retained. When\n             this table is full, the oldest entry will be deleted\n
      \            and the new one will be created.\"\n        ::= { callHistory 1
      }\n"
    - "callHistoryRetainTimer OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       UNITS       \"minutes\"\n        MAX-ACCESS  read-write\n        STATUS
      \     current\n        DESCRIPTION\n            \"The minimum amount of time
      that an callHistoryEntry\n             will be maintained before being deleted.
      A value of\n             0 will prevent any history from being retained in the\n
      \            callHistoryTable, but will neither prevent callCompletion\n             traps
      being generated nor affect other tables.\"\n        ::= { callHistory 2 }\n"
    - '-- callHistoryTable

      '
    - '-- Table to store the past call information. The Destination number

      '
    - '-- and the call connect and disconnect time, the disconnection cause

      '
    - '-- are stored. These calls could be circuit switched or they could

      '
    - '-- be virtual circuits. History of each and every call is stored,

      '
    - '-- of successful calls as well as of unsuccessful and rejected calls.

      '
    - '-- An entry will be created when a call is cleared.

      '
    - "callHistoryTable OBJECT-TYPE\n        SYNTAX      SEQUENCE OF CallHistoryEntry\n
      \       MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n
      \           \"A table containing information about specific\n             calls
      to a specific destination.\"\n        ::= { callHistory 3 }\n"
    - "callHistoryEntry OBJECT-TYPE\n        SYNTAX      CallHistoryEntry\n        MAX-ACCESS
      \ not-accessible\n        STATUS      current\n        DESCRIPTION\n            \"The
      information regarding a single Connection.\"\n        INDEX       { callActiveSetupTime,
      callActiveIndex }\n        ::= { callHistoryTable 1 }\n"
    - "CallHistoryEntry ::=\n        SEQUENCE {\n            callHistoryPeerAddress
      \              DisplayString,\n            callHistoryPeerSubAddress            DisplayString,\n
      \           callHistoryPeerId                    INTEGER,\n            callHistoryPeerIfIndex
      \              INTEGER,\n            callHistoryLogicalIfIndex            InterfaceIndex,\n
      \           callHistoryDisconnectCause           OCTET STRING,\n            callHistoryDisconnectText
      \           DisplayString,\n            callHistoryConnectTime               TimeStamp,\n
      \           callHistoryDisconnectTime            TimeStamp,\n            callHistoryCallOrigin
      \               INTEGER,\n            callHistoryChargedUnits              AbsoluteCounter32,\n
      \           callHistoryInfoType                  INTEGER,\n            callHistoryTransmitPackets
      \          AbsoluteCounter32,\n            callHistoryTransmitBytes             AbsoluteCounter32,\n
      \           callHistoryReceivePackets            AbsoluteCounter32,\n            callHistoryReceiveBytes
      \             AbsoluteCounter32\n        }\n"
    - "callHistoryPeerAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      number this call was connected to. If the number is\n             not available,
      then it will have a length of zero.\"\n        ::= { callHistoryEntry 1 }\n"
    - "callHistoryPeerSubAddress OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The subaddress this call was connected to. If the subaddress\n
      \            is undefined or not available, this will be a zero length\n             string.\"\n
      \       ::= { callHistoryEntry 2 }\n"
    - "callHistoryPeerId OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the Id value of the peer table entry\n             to
      which this call was made. If a peer table entry\n             for this call
      does not exist, the value of this object\n             will be zero.\"\n        ::=
      { callHistoryEntry 3 }\n"
    - "callHistoryPeerIfIndex OBJECT-TYPE\n        SYNTAX      INTEGER (0..2147483647)\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the ifIndex value of the peer table entry\n             to
      which this call was made. If a peer table entry\n             for this call
      does not exist, the value of this object\n             will be zero.\"\n        ::=
      { callHistoryEntry 4 }\n"
    - "callHistoryLogicalIfIndex OBJECT-TYPE\n        SYNTAX      InterfaceIndex\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"This is the ifIndex value of the logical interface through\n             which
      this call was made. For ISDN media, this would be\n             the ifIndex
      of the B channel which was used for this call.\"\n        ::= { callHistoryEntry
      5 }\n"
    - "callHistoryDisconnectCause OBJECT-TYPE\n        SYNTAX      OCTET STRING (SIZE
      (0..4))\n        MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The encoded network cause value associated with this call.\n             The
      value of this object will depend on the interface type\n             as well
      as on the protocol and protocol version being\n             used on this interface.
      Some references for possible cause\n             values are given below.\"\n
      \       REFERENCE\n            \"- Bellcore SR-NWT-001953, Generic Guidelines
      for\n               ISDN Terminal Equipment On Basic Access Interfaces,\n               chapter
      5.2.5.8.\n             - Bellcore SR-NWT-002343, ISDN Primary Rate Interface\n
      \              Generic Guidelines for Customer Premises Equipment,\n               chapter
      8.2.5.8.\n             - ITU-T Q.931, Appendix I.\n             - ITU-T X.25,
      CAUSE and DIAGNOSTIC field values.\n             - German Telekom FTZ 1TR6,
      chapter 3.2.3.4.4.4.\"\n        ::= { callHistoryEntry 6 }\n"
    - "callHistoryDisconnectText OBJECT-TYPE\n        SYNTAX      DisplayString\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"ASCII text describing the reason for call termination.\n             This
      object exists because it would be impossible for\n             a management
      station to store all possible cause values\n             for all types of interfaces.
      It should be used only if\n             a management station is unable to decode
      the value of\n             dialCtlPeerStatsLastDisconnectCause.\"\n        ::=
      { callHistoryEntry 7 }\n"
    - "callHistoryConnectTime OBJECT-TYPE\n        SYNTAX      TimeStamp\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      value of sysUpTime when the call was connected.\"\n        ::= { callHistoryEntry
      8 }\n"
    - "callHistoryDisconnectTime OBJECT-TYPE\n        SYNTAX      TimeStamp\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      value of sysUpTime when the call was disconnected.\"\n        ::= { callHistoryEntry
      9 }\n"
    - "callHistoryCallOrigin OBJECT-TYPE\n        SYNTAX      INTEGER {\n            originate(1),\n
      \           answer(2),\n            callback(3)\n        }\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      call origin.\"\n        ::= { callHistoryEntry 10 }\n"
    - "callHistoryChargedUnits OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of charged units for this connection.\n             For
      incoming calls or if charging information is\n             not supplied by the
      switch, the value of this object\n             will be zero.\"\n        ::=
      { callHistoryEntry 11 }\n"
    - "callHistoryInfoType OBJECT-TYPE\n        SYNTAX      INTEGER {\n            other(1),
      \                  -- e.g. for non-isdn media\n            speech(2),\n            unrestrictedDigital(3),
      \    -- 64k/s data\n            unrestrictedDigital56(4),   -- with 56k rate
      adaption\n            restrictedDigital(5),\n            audio31(6),                 --
      3.1 kHz audio\n            audio7(7),                  -- 7 kHz audio\n            video(8),\n
      \           packetSwitched(9),\n            fax(10)\n        }\n        MAX-ACCESS
      \ read-only\n        STATUS      current\n        DESCRIPTION\n            \"The
      information type for this call.\"\n        ::= { callHistoryEntry 12 }\n"
    - "callHistoryTransmitPackets OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS     current\n        DESCRIPTION\n
      \           \"The number of packets which were transmitted while this\n             call
      was active.\"\n        ::= { callHistoryEntry 13 }\n"
    - "callHistoryTransmitBytes OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of bytes which were transmitted while this\n             call
      was active.\"\n        ::= { callHistoryEntry 14 }\n"
    - "callHistoryReceivePackets OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of packets which were received while this\n             call
      was active.\"\n        ::= { callHistoryEntry 15 }\n"
    - "callHistoryReceiveBytes OBJECT-TYPE\n        SYNTAX      AbsoluteCounter32\n
      \       MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n
      \           \"The number of bytes which were received while this\n             call
      was active.\"\n        ::= { callHistoryEntry 16 }\n"
    - '-- Traps related to Connection management

      '
    - 'dialControlMibTrapPrefix OBJECT IDENTIFIER ::= { dialControlMib 2 }

      '
    - 'dialControlMibTraps OBJECT IDENTIFIER ::= { dialControlMibTrapPrefix 0 }

      '
    - "dialCtlPeerCallInformation NOTIFICATION-TYPE\n        OBJECTS {\n            callHistoryPeerId,\n
      \           callHistoryPeerIfIndex,\n            callHistoryLogicalIfIndex,\n
      \           ifOperStatus,\n            callHistoryPeerAddress,\n            callHistoryPeerSubAddress,\n
      \           callHistoryDisconnectCause,\n            callHistoryConnectTime,\n
      \           callHistoryDisconnectTime,\n            callHistoryInfoType,\n            callHistoryCallOrigin\n
      \       }\n        STATUS      current\n        DESCRIPTION\n            \"This
      trap/inform is sent to the manager whenever\n             a successful call
      clears, or a failed call attempt\n             is determined to have ultimately
      failed. In the\n             event that call retry is active, then this is after\n
      \            all retry attempts have failed. However, only one such\n             trap
      is sent in between successful call attempts;\n             subsequent call attempts
      result in no trap.\n             ifOperStatus will return the operational status
      of the\n             virtual interface associated with the peer to whom\n             this
      call was made to.\"\n     ::= { dialControlMibTraps 1 }\n"
    - "dialCtlPeerCallSetup NOTIFICATION-TYPE\n        OBJECTS {\n            callActivePeerId,\n
      \           callActivePeerIfIndex,\n            callActiveLogicalIfIndex,\n
      \           ifOperStatus,\n            callActivePeerAddress,\n            callActivePeerSubAddress,\n
      \           callActiveInfoType,\n            callActiveCallOrigin\n        }\n
      \       STATUS      current\n        DESCRIPTION\n            \"This trap/inform
      is sent to the manager whenever\n             a call setup message is received
      or sent.\n             ifOperStatus will return the operational status of the\n
      \            virtual interface associated with the peer to whom\n             this
      call was made to.\"\n     ::= { dialControlMibTraps 2 }\n"
    - '-- conformance information

      '
    - "dialControlMibConformance OBJECT IDENTIFIER ::=\n                                {
      dialControlMib 3 }\n"
    - "dialControlMibCompliances OBJECT IDENTIFIER ::=\n                                {
      dialControlMibConformance 1 }\n"
    - "dialControlMibGroups      OBJECT IDENTIFIER ::=\n                                {
      dialControlMibConformance 2 }\n"
    - '-- compliance statements

      '
    - "dialControlMibCompliance MODULE-COMPLIANCE\n        STATUS      current\n        DESCRIPTION\n
      \           \"The compliance statement for entities which\n             implement
      the DIAL CONTROL MIB\"\n        MODULE      -- this module\n        MANDATORY-GROUPS\n
      \           { dialControlGroup, callActiveGroup, callHistoryGroup,\n              callNotificationsGroup
      }\n        ::= { dialControlMibCompliances 1 }\n"
    - '-- units of conformance

      '
    - "dialControlGroup OBJECT-GROUP\n        OBJECTS {\n            dialCtlAcceptMode,\n
      \           dialCtlTrapEnable,\n            dialCtlPeerCfgIfType,\n            dialCtlPeerCfgLowerIf,\n
      \           dialCtlPeerCfgOriginateAddress,\n            dialCtlPeerCfgAnswerAddress,\n
      \           dialCtlPeerCfgSubAddress,\n            dialCtlPeerCfgClosedUserGroup,\n
      \           dialCtlPeerCfgSpeed,\n            dialCtlPeerCfgInfoType,\n            dialCtlPeerCfgPermission,\n
      \           dialCtlPeerCfgInactivityTimer,\n            dialCtlPeerCfgMinDuration,\n
      \           dialCtlPeerCfgMaxDuration,\n            dialCtlPeerCfgCarrierDelay,\n
      \           dialCtlPeerCfgCallRetries,\n            dialCtlPeerCfgRetryDelay,\n
      \           dialCtlPeerCfgFailureDelay,\n            dialCtlPeerCfgTrapEnable,\n
      \           dialCtlPeerCfgStatus,\n            dialCtlPeerStatsConnectTime,\n
      \           dialCtlPeerStatsChargedUnits,\n            dialCtlPeerStatsSuccessCalls,\n
      \           dialCtlPeerStatsFailCalls,\n            dialCtlPeerStatsAcceptCalls,\n
      \           dialCtlPeerStatsRefuseCalls,\n            dialCtlPeerStatsLastDisconnectCause,\n
      \           dialCtlPeerStatsLastDisconnectText,\n            dialCtlPeerStatsLastSetupTime\n
      \       }\n        STATUS      current\n        DESCRIPTION\n            \"A
      collection of objects providing the DIAL CONTROL\n             capability.\"\n
      \       ::= { dialControlMibGroups 1 }\n"
    - "callActiveGroup OBJECT-GROUP\n        OBJECTS {\n            callActivePeerAddress,\n
      \           callActivePeerSubAddress,\n            callActivePeerId,\n            callActivePeerIfIndex,\n
      \           callActiveLogicalIfIndex,\n            callActiveConnectTime,\n
      \           callActiveCallState,\n            callActiveCallOrigin,\n            callActiveChargedUnits,\n
      \           callActiveInfoType,\n            callActiveTransmitPackets,\n            callActiveTransmitBytes,\n
      \           callActiveReceivePackets,\n            callActiveReceiveBytes\n
      \       }\n        STATUS      current\n        DESCRIPTION\n            \"A
      collection of objects providing the active call\n             capability.\"\n
      \       ::= { dialControlMibGroups 2 }\n"
    - "callHistoryGroup OBJECT-GROUP\n        OBJECTS {\n            callHistoryTableMaxLength,\n
      \           callHistoryRetainTimer,\n            callHistoryPeerAddress,\n            callHistoryPeerSubAddress,\n
      \           callHistoryPeerId,\n            callHistoryPeerIfIndex,\n            callHistoryLogicalIfIndex,\n
      \           callHistoryDisconnectCause,\n            callHistoryDisconnectText,\n
      \           callHistoryConnectTime,\n            callHistoryDisconnectTime,\n
      \           callHistoryCallOrigin,\n            callHistoryChargedUnits,\n            callHistoryInfoType,\n
      \           callHistoryTransmitPackets,\n            callHistoryTransmitBytes,\n
      \           callHistoryReceivePackets,\n            callHistoryReceiveBytes\n
      \       }\n        STATUS      current\n        DESCRIPTION\n            \"A
      collection of objects providing the Call History\n             capability.\"\n
      \       ::= { dialControlMibGroups 3 }\n"
    - "callNotificationsGroup NOTIFICATION-GROUP\n    NOTIFICATIONS { dialCtlPeerCallInformation,
      dialCtlPeerCallSetup }\n    STATUS        current\n    DESCRIPTION\n            \"The
      notifications which a Dial Control MIB entity is\n             required to implement.\"\n
      \   ::= { dialControlMibGroups 4 }\n"
    - 'END

      '
    title: 3.1.  Dial Control MIB
  title: 3.  Definitions
- contents:
  - "4.  Acknowledgments\n   This document was produced by the ISDN MIB Working Group.
    \ Special\n   thanks is due to the following persons:\n           Ed Alcoff\n
    \          Fred Baker\n           Bibek A. Das\n           Ken Grigg\n           Jeffrey
    T. Johnson\n           Glenn Kime\n           Oliver Korfmacher\n           Kedar
    Madineni\n           Bill Miskovetz\n           David M. Piscitello\n           Lisa
    A. Phifer\n           Randy Roberts\n           Hascall H. Sharp\n           Hongchi
    Shih\n           Robert Snyder\n           Bob Stewart\n           Ron Stoughton\n
    \          James Watt\n"
  title: 4.  Acknowledgments
- contents:
  - '5.  References

    '
  - "[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,
    \"Structure of Management Information for Version 2\n     of the Simple Network
    Management Protocol (SNMPv2)\", RFC 1902,\n     January 1996.\n"
  - "[2]  McCloghrie, K., and M. Rose, Editors, \"Management Information Base\n     for
    Network Management of TCP/IP-based internets: MIB-II\", STD 17,\n     RFC 1213,
    Hughes LAN Systems, Performance Systems International,\n     March 1991.\n"
  - "[3]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"A Simple\n     Network
    Management Protocol (SNMP)\", STD 15, RFC 1157, SNMP\n     Research, Performance
    Systems International, MIT Lab for Computer\n     Science, May 1990.\n"
  - "[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and\n     S. Waldbusser,
    \"Protocol Operations for Version 2 of the Simple\n     Network Management Protocol
    (SNMPv2)\", RFC 1905, January 1996.\n"
  - "[5]  ITU-T Recommendation \"Digital subscriber Signalling System No. 1\n     (DSS
    1) - ISDN user-network interface layer 3 specification for\n     basic call control\",
    Rec. Q.931(I.451), March 1993.\n"
  - "[6]  ITU-T Recommendation \"Generic procedures for the control of ISDN\n     supplementary
    services ISDN user-network interface layer 3\n     specification\", Rec. Q.932(I.452).\n"
  - "[7]  ITU-T Recommendation \"Digital subscriber Signalling System No. 1\n     (DSS
    1) - Signalling specification for frame-mode basic call\n     control\", Rec.
    Q.933.\n"
  - "[8]  McCloghrie, K. and F. Kastenholz, \"Evolution of the Interfaces\n     Group
    of MIB-II\", RFC 1573, Hughes LAN Systems, FTP Software,\n     January 1994.\n"
  title: 5.  References
- contents:
  - "6.  Security Considerations\n   Information in this MIB may be used by upper
    protocol layers for\n   security purpose.\n   The implementor should be aware
    that supporting generic peers as\n   described in section 3.4 may cause a security
    hole.  The user would\n   not know where a call is from, which could potentially
    allow\n   unauthorized access if there is no other authentication scheme, e.g.\n
    \  PPP authentication, available.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Author's Address\n   Guenter Roeck\n   cisco Systems\n   170 West Tasman
    Drive\n   San Jose, CA 95134\n   U.S.A.\n   Phone: +1 408 527 3143\n   EMail:
    groeck@cisco.com\n"
  title: 7.  Author's Address
