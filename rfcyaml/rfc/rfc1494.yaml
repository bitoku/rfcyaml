- title: __initial_text__
  contents:
  - '       Equivalences between 1988 X.400 and RFC-822 Message Bodies

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction .............................................\
    \    2\n   2.  Equivalence Table Definition .............................    2\n\
    \   3.  Generic conversions ......................................    3\n   3.1.\
    \  Byte copy ..............................................    3\n   3.2.  Text\
    \ Conversion ........................................    3\n   3.3.  Image Conversion\
    \ .......................................    3\n   3.4.  Tunneling ..............................................\
    \    3\n   4.  Conversion Table for known X.400 and MIME  Types .........    4\n\
    \   4.1.  MIME to X.400 Table ....................................    4\n   4.2.\
    \  X.400 to MIME Table ....................................    4\n   5.  Newly\
    \ defined X.400 Body Parts ...........................    5\n   5.1.  Use of OBJECT\
    \ IDENTIFIERs and ASN.1 MACROS .............    5\n   5.2.  The Generic MIME Extended\
    \ Body Part ....................    6\n   5.3.  The PostScript body part ...............................\
    \    7\n   5.4.  The JPEG body part .....................................    7\n\
    \   5.5.  The GIF body part ......................................    8\n   6.\
    \  Newly defined MIME content-types .........................    8\n   6.1.  The\
    \ application/x400-bp content-type ...................    8\n   6.2.  The image/g3fax\
    \ content-type ...........................    9\n   6.2.1.  G3Fax Parameters .....................................\
    \    9\n   6.2.2.  Content Encoding .....................................   10\n\
    \   6.3.  The Application/ODA content-type .......................   11\n   7.\
    \ Equivalence Definitions ...................................   11\n   7.1. IA5Text\
    \ - text/plain ....................................   11\n   7.2. GeneralText\
    \ - text/plain (ISO-8859) .....................   12\n   7.3. BilaterallyDefined\
    \ -  application/octet-stream ..........   13\n   7.4. ODA - application/oda ...................................\
    \   14\n   7.5. g3-facsimile - image/g3fax ..............................   15\n\
    \   7.6. application/postscript -  postscript-body-part ..........   16\n   7.7.\
    \ application/jpeg - jpeg-body-part .......................   16\n   7.8. image/gif\
    \ - gif-body-part ...............................   16\n   8. OID Assignments\
    \ ...........................................   17\n   9. IANA Registration form\
    \ for new mappings ...................   17\n   10. Security Considerations ..................................\
    \   18\n   11. Authors' Addresses .......................................   18\n\
    \   12. References ...............................................   19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is a companion to [1], which defines the principles\n\
    \   behind interworking between MIME-based RFC-822 mail and X.400 mail.\n   This\
    \ document describes the content of the \"IANA MHS/MIME Equivalence\n   table\"\
    \ referenced in the companion document, and defines the initial\n   configuration\
    \ of this table.  Mappings for new MIME content-types\n   and/or X.400 body part\
    \ types should be registered with the IANA to\n   minimize redundancy and promote\
    \ interoperability.\n   In MIME, the term \"content-type\" is used to refer to\
    \ an information\n   object contained in the body of a message.  In contrast,\
    \ X.400 uses\n   the term \"body part type.\"  In this document, the term \"body\
    \ part\" is\n   used to refer to either.\n   Please send comments to the MIME-MHS\
    \ mailing list:\n   <mime-mhs@surfnet.nl>.\n"
- title: 2.  Equivalence Table Definition
  contents:
  - "2.  Equivalence Table Definition\n   For each MIME content-type/X.400 body part\
    \ pair, the Equivalence\n   Table will contain an entry with the following sections:\n\
    \   X.400 Body Part\n        This section identifies the X.400 Body Part governed\
    \ by this\n        Table entry. It includes any OBJECT IDENTIFIERs or other\n\
    \        parameters necessary to uniquely identify the Body Part.\n   MIME Content-Type\n\
    \        This section identifies the MIME content-type governed by this\n    \
    \    Table entry.  The MIME content-type named here must be\n        registered\
    \ with the IANA.\n   Conversion Type\n        This section identifies the type\
    \ of conversion applied.  See the\n        section on Generic Conversions for\
    \ an explanation of the\n        possible values.\n   Comments (optional)\n  \
    \      This section gives any additional commentary that might be\n        useful\
    \ in understanding the mapping between the X.400 and MIME\n        representations.\n\
    \   The initial Equivalence Table entries in this document are described\n   using\
    \ this convention.  Any future submissions to the IANA should\n   follow this\
    \ format.\n"
- title: 3.  Generic conversions
  contents:
  - '3.  Generic conversions

    '
- title: 3.1.  Byte copy
  contents:
  - "3.1.  Byte copy\n   This is the trivial case, that is, no conversion at all.\
    \  The byte\n   stream is simply copied between MIME and X.400.\n   This is the\
    \ preferred conversion, since it is the simplest.\n   Implementors and vendors\
    \ will be registering OBJECT IDENTIFIERs and\n   MIME content-types for their\
    \ various objects.  They are STRONGLY\n   ENCOURAGED to specify their content\
    \ formats such that a gateway can\n   use Byte Copy to map between them.\n   Note\
    \ that in some cases, it is necessary to define exactly which\n   ASN.1 construct\
    \ to replace with the content of the MIME object.\n"
- title: 3.2.  Text Conversion
  contents:
  - "3.2.  Text Conversion\n   This type of conversion applies to text objects that\
    \ cannot be mapped\n   using a simple Byte Copy.  Conversion involves scanning\
    \ and\n   reformatting the object.  For example, the MIME and X.400 objects\n\
    \   might differ in their encoding of nonstandard characters, or line or\n   page\
    \ breaks.\n"
- title: 3.3.  Image Conversion
  contents:
  - "3.3.  Image Conversion\n   This conversion type applies to raster images, like\
    \ Group 3 Facsimile\n   or JPEG.  Again, it differs from Byte Copy in that it\
    \ involves\n   scanning reformatting the byte stream.  It differs from Text\n\
    \   Conversion in that it is pixel- oriented, rather than character-\n   oriented.\n"
- title: 3.4.  Tunneling
  contents:
  - "3.4.  Tunneling\n   This is not a conversion at all, but an encapsulation of\
    \ the object.\n   This is the fallback conversion, used when no explicit mapping\n\
    \   applies.\n"
- title: 4.  Conversion Table for known X.400 and MIME Types
  contents:
  - "4.  Conversion Table for known X.400 and MIME Types\n   This section itemizes\
    \ the equivalences for all currently known MIME\n   content-types and X.400 body\
    \ parts.\n"
- title: 4.1.  MIME to X.400 Table
  contents:
  - "4.1.  MIME to X.400 Table\n       MIME content-type          X.400 Body Part\
    \             Section\n       -----------------          ------------------  \
    \        -------\n       text/plain\n         charset=us-ascii         ia5-text\
    \                     7.1\n         charset=iso-8859-x       EBP - GeneralText\
    \            7.2\n       text/richtext              no mapping defined       \
    \    5.2\n       application/oda            EBP - ODA                    7.4\n\
    \       application/octet-stream   bilaterally-defined          7.3\n       application/postscript\
    \     EBP - mime-postscript-body   5.4, 7.6\n       image/g3fax              \
    \  g3-facsimile                 6.2, 7.5\n       image/jpeg                 EBP\
    \ - mime-jpeg-body         5.5, 7.7\n       image/gif                  EBP - mime-gif-body\
    \          5.6, 7.8\n       audio/basic                no mapping defined    \
    \       5.2\n       video/mpeg                 no mapping defined           5.2\n\
    \       Abbreviation: EBP - Extended Body Part\n"
- title: 4.2.  X.400 to MIME Table
  contents:
  - "4.2.  X.400 to MIME Table\n                                Basic Body Parts\n\
    \       X.400 Basic Body Part      MIME content-type           Section\n     \
    \  ---------------------      --------------------        -------\n       ia5-text\
    \                   text/plain;charset=us-ascii 7.1\n       voice            \
    \          No Mapping Defined          6.1\n       g3-facsimile              \
    \ image/g3fax                 6.2, 7.5\n       g4-class1                  no mapping\
    \ defined          6.1\n       teletex                    no mapping defined \
    \         6.1\n       videotex                   no mapping defined          6.1\n\
    \       encrypted                  no mapping defined          6.1\n       bilaterally-defined\
    \        application/octet-stream    7.3\n       nationally-defined         no\
    \ mapping defined          6.1\n       externally-defined         See Extended\
    \ Body Parts     6.1\n       X.400 Extended Body Part  MIME content-type     \
    \         Section\n       ------------------------- --------------------     \
    \      -------\n       GeneralText               text/plain;charset=iso-8859-x\
    \  7.2\n       ODA                       application/oda                7.4\n\
    \       mime-postscript-body      application/postscript         5.3, 7.6\n  \
    \     mime-jpeg-body            image/jpeg                     5.4, 7.7\n    \
    \   mime-gif-body             image/gif                      5.5, 7.8\n"
- title: 5.  Newly defined X.400 Body Parts
  contents:
  - "5.  Newly defined X.400 Body Parts\n   This section defines new X.400 Body Parts\
    \ for the purposes of\n   interworking with MIME.\n   All new X.400 Body Parts\
    \ defined here will be Extended Body Parts, as\n   defined in CCITT Recommendation\
    \ X.420 [2].\n"
- title: 5.1.  Use of OBJECT IDENTIFIERs and ASN.1 MACROS
  contents:
  - "5.1.  Use of OBJECT IDENTIFIERs and ASN.1 MACROS\n   X.420 dictates that Extended\
    \ Body Parts shall:\n       (1)  use OBJECT IDENTIFIERs (OIDs) to uniquely identify\n\
    \            the contents, and\n       (2)  be defined by using the ASN.1 Macro:\n\
    \               EXTENDED-BODY-PART-TYPE MACRO::=\n               BEGIN\n     \
    \             TYPE NOTATION  ::= Parameters Data\n                  VALUE NOTATION\
    \ ::= value (VALUE OBJECT IDENTIFIER)\n                  Parameters     ::=  \"\
    PARAMETERS\" type \"IDENTIFIED\"\n                                      \"BY\"\
    \ value(OBJECT IDENTIFIER)\n                                    | empty;\n   \
    \               Data           ::= \"DATA\" type\n               END\n   To meet\
    \ these requirements, this document uses the OID\n      mime-mhs-bodies\n   defined\
    \ in [1], as the root OID for X.400 Extended Body Parts defined\n   for MIME interworking.\n\
    \   Each Extended Body Part contains Data and optional Parameters, each\n   being\
    \ named by an OID.  To this end, two OID subtrees are defined\n   under mime-mhs-bodies,\
    \ one for Data, and the other for Parameters:\n          mime-mhs-bp-data  OBJECT\
    \ IDENTIFIER ::=\n                          { mime-mhs-bodies 1 }\n          mime-mhs-bp-parameter\
    \ OBJECT IDENTIFIER ::=\n                          { mime-mhs-bodies 2 }\n   All\
    \ definitions of X.400 body parts submitted to the IANA for\n   registration must\
    \ use the Extended Body Part Type macro for the\n   definition.  See the next\
    \ section for an example.\n   Lastly, the IANA will use the mime-mhs-bp-data and\
    \ mime-mhs-bp-\n   parameter OIDs as root OIDs for any new MIME content-type/subtypes\n\
    \   that aren't otherwise registered in the Equivalence Table.\n"
- title: 5.2.  The Generic MIME Extended Body Part
  contents:
  - "5.2.  The Generic MIME Extended Body Part\n   The following X.400 Body Part is\
    \ defined to carry any MIME content-\n   type for which there is no explicit IANA\
    \ registered mapping.\n         mime-body-part EXTENDED-BODY-PART-TYPE\n     \
    \       PARAMETERS MimeParameters\n               IDENTIFIED BY mime-generic-parameters\n\
    \            DATA            OCTET STRING\n            ::= mime-generic-data\n\
    \         MimeParameters ::=\n             SEQUENCE {\n                 content-type\
    \       IA5String,\n                 content-parameters SEQUENCE OF\n        \
    \                            SEQUENCE {\n                                    \
    \    parameter          IA5String,\n                                        parameter-value\
    \    IA5String\n                                    }\n                      \
    \              -- from RFC-1327, sec. 5.1.12\n                 other-header-fields\
    \ RFC822FieldList\n             }\n         mime-generic-parameters OBJECT IDENTIFIER\
    \ ::=\n             { mime-mhs-bp-parameter 1 }\n         mime-generic-data  \
    \     OBJECT IDENTIFIER ::=\n             { mime-mhs-bp-data  1 }\n   To convert\
    \ the MIME content-type into the X.400 mime- body-part:\n       (1)  Copy the\
    \ \"type/subtype\" string from the MIME\n            Content-Type: header field\
    \ into\n            MimeParameters.content-type\n       (2)  For each \"parameter=value\"\
    \ string in the MIME\n            Content-Type header field, create a\n      \
    \      MimeParameters.content-parameters structure, and copy\n            the\
    \ \"parameter\" string into MimeParameters.content-\n            parameters.parameter\
    \ field and the \"value\" string\n            into the paired MimeParameters.content-\n\
    \            parameters.parameter-value field.\n       (3)  Convert the MIME body\
    \ part into its canonical form.\n            (See appendix H of RFC 1341 [3] for\
    \ a discussion\n            of canonical in this context.) Said another way,\n\
    \            reverse the transfer encoding to recover the original\n         \
    \   byte stream.\n       (4)  Copy the canonical byte stream into the mime-body-\n\
    \            part.data octet string.\n       (5)  Remove the Content-type and\
    \ the Content-transfer-\n            encoding header fields from the MIME body\
    \ part's\n            RFC822 header.\n       (6)  Any header fields starting with\
    \ \"Content-\" in the\n            MIME body part is placed in the optional other-\n\
    \            header-fields structure. Note that this can only\n            occur\
    \ when the MIME content-type occurs as part of a\n            \"multipart\" content-type.\n\
    \   The mapping from the X.400 mime-body-part to a MIME content-type is\n   the\
    \ inverse of the above steps.\n"
- title: 5.3.  The PostScript body part
  contents:
  - "5.3.  The PostScript body part\n   The following Extended Body Part is defined\
    \ for PostScript data\n   streams.  It has no parameters.\n         postscript-body-part\
    \ EXTENDED-BODY-PART-TYPE\n           DATA             OCTET STRING\n        \
    \   ::= mime-postscript-body\n         mime-postscript-body OBJECT IDENTIFIER\
    \ ::=\n                   { mime-mhs-bp-data 2 }\n"
- title: 5.4.  The JPEG body part
  contents:
  - "5.4.  The JPEG body part\n   The following Extended Body Part is defined for\
    \ JPEG data streams.\n   It has no parameters.\n          jpeg-body-part EXTENDED-BODY-PART-TYPE\n\
    \            DATA            OCTET STRING\n            ::= mime-jpeg-body\n  \
    \        mime-jpeg-body OBJECT IDENTIFIER ::=\n                  { mime-mhs-bp-data\
    \ 3 }\n"
- title: 5.5.  The GIF body part
  contents:
  - "5.5.  The GIF body part\n   The following Extended Body Part is defined for GIF\
    \ data streams.  It\n   has no parameters.\n          gif-body-part EXTENDED-BODY-PART-TYPE\n\
    \            DATA            OCTET STRING\n            ::= mime-gif-body\n   \
    \       mime-gif-body OBJECT IDENTIFIER ::=\n                  { mime-mhs-bp-data\
    \ 4 }\n"
- title: 6.  Newly defined MIME content-types
  contents:
  - "6.  Newly defined MIME content-types\n   This section defines new MIME content-types\
    \ for the purposes of\n   interworking with X.400.\n"
- title: 6.1.  The application/x400-bp content-type
  contents:
  - "6.1.  The application/x400-bp content-type\n   This content-type is defined to\
    \ carry any X.400(88) body part for\n   which there is no registered IANA mapping.\n\
    \       The content-type field is\n         application/x400-bp\n       The parameters\
    \ are:\n             bp-type=<INTEGER or OBJECT IDENTIFIER>\n   The body contains\
    \ the raw ASN.1 IPM.body octet stream, including the\n   initial tag octet.\n\
    \   If the body is a basic body part, the bp-type parameter is set to the\n  \
    \ number of the body part's context-specific tag, that is, the tag of\n   the\
    \ IPMS.Body.BodyPart component.\n   If the body is an Extended Body Part, the\
    \ bp-type parameter is set to\n   the OBJECT IDENTIFIER from\n            IPMS.body.externally-defined.data.direct-reference\n\
    \   No attempt is made to turn the parameters of Extended Body Parts into\n  \
    \ MIME parameters.  (This task is the responsibility of the recipient's\n   UA).\n\
    \   For example, a basic VideotexBodyPart will have\n      Content-type=application/x400-bp;\
    \ bp-type=6\n   whilst a Extended Videotex body part will have\n      Content-type=application/x400-bp;\
    \ bp-type=2.6.1.4.5\n   application/x400-bp will need a content-transfer-encoding\
    \ of base64\n   or quoted-printable when carried in 7-bit MIME.  Since there is\
    \ no\n   way to know beforehand the content, it is recommended to just inspect\n\
    \   the first 1 KByte or so of data and choose the one that seems to\n   produce\
    \ the more compact encoding.\n   If this is not feasible, Base64 is recommended.\n"
- title: 6.2.  The image/g3fax content-type
  contents:
  - "6.2.  The image/g3fax content-type\n   This content-type is defined to carry\
    \ G3 Facsimile byte streams.\n   In general, a G3Fax image contains 3 pieces of\
    \ information:\n       (1)  A set of flags indicating the particular coding\n\
    \            scheme.  CCITT Recommendation T.30 defines how the\n            flags\
    \ are transmitted over telephones. In this\n            medium, the flags are\
    \ carried as parameters in the\n            MIME content-type header field.\n\
    \       (2)  A structure that divides the bits into pages.  CCITT\n          \
    \  recommendation T.30 describes how to define page\n            boundaries. \
    \ A page break algorithm is defined here\n            that is independent of how\
    \ the image data is\n            conveyed.\n       (3)  For each page, a sequence\
    \ of bits that form the\n            encoding of the image.  CCITT recommendation\
    \ T.4\n            defines the bit image format.  This is used without\n     \
    \       change.\n"
- title: 6.2.1.  G3Fax Parameters
  contents:
  - "6.2.1.  G3Fax Parameters\n   The following parameters are defined:\n       (1)\
    \  page-length - possible values: A4, B4 and Unlimited\n       (2)  page-width\
    \ - possible values: A3, A4, B4\n       (3)  encoding - possible values: 1-dimensional,\
    \ 2-\n            dimensional, Uncompressed\n       (4)  resolution - possible\
    \ values: Fine, Coarse\n       (5)  DCS - a bit string, represented in Base64.\n\
    \       (6)  pages - an integer, giving the number of pages in the\n         \
    \   document\n   If nothing is specified, the default parameter settings are:\n\
    \         page-length=A4\n         page-width=A4\n         encoding=1-dimensional\n\
    \         resolution=Coarse\n   It is possible (but misleading) to view the representation\
    \ of these\n   values as single-bit flags. They correspond to the following bits\
    \ of\n   the T.30 control string and X.400 G3FacsimileParameters:\n       Parameter\
    \               T.30 bit        X.400 bit\n       page-length=A4             no\
    \ bit set\n       page-length=B4          19              21\n       page-length=Unlimited\
    \   20              20\n       page-width=A4              no bit set\n       page-width=A3\
    \           18              22\n       page-width=B4           17            \
    \  23\n       encoding=1-dimensional     no bit set\n       encoding=2-dimensional\
    \  16              8\n       encoding=Uncompressed   26              30\n    \
    \   resolution=Coarse          no bit set\n       resolution=Fine         15 \
    \             9\n   The reason for the different bit numbers is that X.400 counts\
    \ bits in\n   an octet from the MSB down to the LSB, while T.30 uses the opposite\n\
    \   numbering scheme.\n   If any bit but these are set in the Device Control String,\
    \ the DCS\n   parameter should be supplied.\n"
- title: 6.2.2.  Content Encoding
  contents:
  - "6.2.2.  Content Encoding\n   X.400 defines the g3-facsimile data stream as a\
    \ SEQUENCE of BIT\n   STRINGs. Each BIT STRING is a page of facsimile image data,\
    \ encoded\n   as defined by Recommendation T.4.  The following content encoding\
    \ is\n   reversible between MIME and X.400 and ensures that page breaks are\n\
    \   honored in the MIME representation.\n   An EOL is defined as a bit sequence\
    \ of\n          000000000001 (eleven zeroes and a one).\n   Each page of the message\
    \ is delimited by a sequence of six (6) EOLs\n   that MUST start on a byte boundary.\
    \  The image bit stream is padded\n   as needed to achieve this alignment.\n \
    \  Searching for the boundary is a matter of searching for the byte\n   sequence\
    \ (HEX) 00 10 01 00 10 01 00 10 01, which cannot occur inside\n   the image.\n\
    \   See Section 7.5 for the algorithm on conversion between this encoding\n  \
    \ and the X.400 encoding.\n   The Base64 content-transfer-encoding is appropriate\
    \ for carrying this\n   content-type.\n"
- title: 6.3.  The Application/ODA content-type
  contents:
  - "6.3.  The Application/ODA content-type\n   The \"ODA\" subtype of application\
    \ is used to indicate that a body\n   contains information encoded according to\
    \ the Office Document\n   Architecture [4] standards, using the ODIF representation\
    \ format.\n   For application/oda, the Content- Type line should also specify\
    \ an\n   attribute/value pair that indicates the document application profile\n\
    \   (DAP), using the key word \"profile\", and the document class, using\n   the\
    \ keyword \"class\".\n   For the keyword \"class\", the values \"formatted\",\
    \ \"processable\" and\n   \"formatted-processable\" are legal values.\n   Thus\
    \ an appropriate header field  might look like this:\n       Content-Type:  application/oda;\
    \ profile=Q112;\n       class=formatted\n   Consult the ODA standard [4] for further\
    \ information.\n   The Base64 content-transfer-encoding is appropriate for carrying\
    \ ODA.\n"
- title: 7.  Equivalence Definitions
  contents:
  - '7.  Equivalence Definitions

    '
- title: 7.1.  IA5Text - text/plain
  contents:
  - "7.1.  IA5Text - text/plain\n   X.400 Body Part: IA5Text\n   MIME Content-type:\
    \ text/plain; charset=US-ASCII\n   Conversion Type: Byte copy\n   Comments:\n\
    \   When mapping from X.400 to MIME, the \"repertoire\" parameter is\n   ignored.\n\
    \   When mapping from MIME to X.400, the \"repertoire\" parameter is set to\n\
    \   IA5 (5).\n   NOTE: The MIME Content-type headers are omitted, when mapping\
    \ from\n   X.400 to MIME, if and only if the IA5Text body part is the only body\n\
    \   part in the IPMS.Body sequence.\n   NOTE: IA5Text specifies the \"currency\"\
    \ symbol in position 2/4. This\n   is converted without comment to the \"dollar\"\
    \ symbol, since the author\n   of this document has seen many documents in which\
    \ the position was\n   intended to indicate \"dollar\" while he has not yet seen\
    \ one in which\n   the \"currency\" symbol is intended.\n   (For reference: The\
    \ T.50 (1988) recommendation, which defines IA5,\n   talks about ISO registered\
    \ set number 2, while ASCII, using the\n   \"dollar\" symbol, is ISO registered\
    \ set number 6. There are no other\n   differences.)\n"
- title: 7.2.  GeneralText - text/plain (ISO-8859)
  contents:
  - "7.2.  GeneralText - text/plain (ISO-8859)\n   X.400 Body Part: GeneralText; CharacterSets\
    \ in\n                           6,100,101,109,110,126,127,138,144,148\n   MIME\
    \ Content-Type: text/plain; charset=ISO-8859-(1-9)\n   Conversion Type: Byte copy\n\
    \   Comments:\n   When mapping from X.400 to MIME, the character-set chosen from\
    \ table\n   below according to the value of Parameters.CharacterSets.\n   When\
    \ mapping from MIME to X.400, GeneralText is an Extended Body\n   Part, hence\
    \ it requires an OID.  The OID for the GeneralText body is\n   defined in [5],\
    \ part 8, annex D, as {2 6 1 4 11}. The OID for the\n   parameters is {2 6 1 11\
    \ 11}.\n   The Parameters.CharacterSets is set from table below according to the\n\
    \   value of \"charset\"\n   NOTE: The GeneralText body part is defined in ISO\
    \ 10021-8 [5], and\n   NOT in the corresponding CCITT recommendation. Its parameters\
    \ were\n   heavily modified in a defect report, and will be a SET OF INTEGER\n\
    \   (indicating the ISO registry numbers of all the used sets) in the\n   next\
    \ version of the standard.\n   The following table lists the MIME character sets\
    \ and the\n   corresponding ISO registry numbers. If no correspondence is found,\n\
    \   this conversion fails, and the generic body part approach is used.\n   MIME\
    \ charset    ISO IR numbers          Comment\n   -----------------------------------------------\n\
    \   ISO-8859-1      6, 100                  West European \"8-bit ASCII\"\n  \
    \ ISO-8859-2      6, 101                  East European\n   ISO-8859-3      6,\
    \ 109                  <regarded as obsolete>\n   ISO-8859-4      6, 110     \
    \             <regarded as obsolete>\n   ISO-8859-5      6, 144              \
    \    Cyrillic\n   ISO-8859-6      6, 127                  Arabic\n   ISO-8859-7\
    \      6, 126                  Greek\n   ISO-8859-8      6, 138              \
    \    Hebrew\n   ISO-8859-8      6, 148                  Other Latin-using languages\n\
    \   When converting from MIME to X.400, generate the correct OIDs for use\n  \
    \ in the message envelope's Encoded Information Types by looking up the\n   ISO\
    \ IR number in the above table, and then appending it to the id-\n   cs-eit-authority\
    \ {1 0 10021 7 1 0} OID.\n   The escape sequences to designate and invoke the\
    \ relevant character\n   sets in their proper positions must be added to the front\
    \ of the\n   GeneralText character string.\n"
- title: 7.3.  BilaterallyDefined - application/octet-stream
  contents:
  - "7.3.  BilaterallyDefined - application/octet-stream\n   X.400 Body Part: BilaterallyDefined\n\
    \   MIME Content-Type: Application/Octet-Stream (no parameters)\n   Conversion\
    \ Type: Byte copy\n   Comments:\n   When mapping from MIME to X.400, if there\
    \ are parameters present in\n   the Content-Type: header field, the conversion\
    \ fails since the\n   BilaterallyDefined Body Part does not have any corresponding\
    \ ASN.1\n   parameters.\n   DISCUSSION: The parameters \"name\" \"type\" and \"\
    conversions\" are\n   advisory, but may in some cases give vital hints on the\
    \ expected\n   handling of the file. The parameter \"conversions\" is not fully\n\
    \   defined, but it is expected that it will be useful, so we cannot drop\n  \
    \ it and expect people to be satisfied.\n   The parameter \"padding\" changes\
    \ the interpretation of the last byte\n   of the data, and so cannot be deleted.\n\
    \   An option is to prepend an IA5 body part that contains the parameter\n   text;\
    \ this will aid unmodified readers, and can probably be made\n   reversible with\
    \ suitable chicanery, but is it worth it????\n   Also, use of BilaterallyDefined\
    \ Body Parts is specifically deprecated\n   in both 1988 and 1992 X.400.  It is\
    \ retained solely for backward\n   compatibility with 1984 systems. 1992 X.400\
    \ defines a File Transfer\n   Body Part to solve this problem (i.e. binary file\
    \ transfer through\n   email). The standard and its regional profiles are not\
    \ solid enough\n   yet to exploit as a solution for this problem.\n"
- title: 7.4.  ODA - application/oda
  contents:
  - "7.4.  ODA - application/oda\n   X.400 Body Part: ODA\n   MIME Content-Type: application/oda\n\
    \   Conversion Type: Byte copy\n   Comments:\n   The ODA body part is defined\
    \ in the CCITT document T.411 [6],\n   appendix E, section E.2, \"ODA identification\
    \ in the P2 protocol of\n   MHS\"\n   An abbreviated version of its ASN.1 definition\
    \ is:\n       oda-body-part EXTENDED-BODY-PART-TYPE\n            PARAMETERS  \
    \    OdaBodyPartParameters\n            DATA            OdaData\n            ::=\
    \ id-et-oda\n       OdaBodyPartParameters ::= SET {\n            document-application-profile\
    \    [0] OBJECT IDENTIFIER\n            document-architecture-class     [1] INTEGER\
    \ {\n                                            formatted (0)\n             \
    \                               processable (1)\n                            \
    \                formatted-processable(2)}}\n       id-et-oda OBJECT IDENTIFIER\
    \ ::= { 2 8 1 0 1 }\n   Mapping from X.400 to MIME, the following is done:\n \
    \  The Parameters.document-application-profile is mapped onto the MIME\n   parameter\
    \ \"profile\" according to the table below.\n       Profile         OBJECT IDENTIFIER\n\
    \       Q112            { iso (1) identified-organization (3) ewos (16)\n    \
    \                     eg (2) oda (6) profile (0)  q112 (1) }\n   The Parameters.document-architecture-class\
    \ is mapped onto the MIME\n   parameter \"class\" according to the table below\n\
    \       String                  Integer\n       formatted               formatted(0)\n\
    \       processable             processable(1)\n       formatted-processable \
    \  formatted-processable(2)\n   NOTE: This parameter is not defined in RFC 1341.\n\
    \   The body of the MIME content-type is the Data part of the ODA body\n   part.\n\
    \   When mapping from MIME to X.400, the following steps are done:\n   The Parameters.document-application-profile\
    \ and Parameters.document-\n   architecture-class are set from the tables above.\
    \  If any of the\n   parameters are missing, the values for Q112 and formatted-processable\n\
    \   are used.\n   It is an option for the gateway implementor to try to access\
    \ them\n   from inside the document, where they are defined as\n   document-profile.document-characteristics.document-architecture-class\n\
    \   document-profile.document-characteristics.document-application-profile\n \
    \  Gateways are NOT required to do this, since the document-\n   characteristics\
    \ are optional parameters.  If a gateway does not, it\n   simply uses the defaulting\
    \ rules defined above.\n   The OBJECT IDENTIFIERs for the document application\
    \ profile and for\n   ODA {2 8 0 0} must be added to the Encoded Information Types\n\
    \   parameter of the message envelope.\n"
- title: 7.5.  g3-facsimile - image/g3fax
  contents:
  - "7.5.  g3-facsimile - image/g3fax\n   X.400 Body part: g3-facsimile\n   MIME Content-Type:\
    \ image/g3fax\n   Conversion Type: nearly Byte copy\n   Comments:\n   The Parameters\
    \ of the X.400 G3Fax body part are mapped to the\n   corresponding Parameters\
    \ on the MIME Image/G3Fax body part and vice\n   versa.  Note that:\n       (1)\
    \  If fineResolution is not specified, pixels will be\n            twice as tall\
    \ as they are wide\n       (2)  If any bit not corresponding to a specially named\n\
    \            option is set in the G3Fax NonBasicParameters, the\n            \"\
    DCS\" parameter must be used.\n       (3)  Interworking is not guaranteed if any\
    \ bit apart from\n            those specially named are used in the\n        \
    \    NonBasicParameters\n   From X.400 to G3Fax, the body is created in the following\
    \ way:\n       (1)  Any trailing EOL markers on each bitstring is\n          \
    \  removed. The bistring is padded to a byte boundary.\n       (2)  6 consecutive\
    \ EOL markers are appended to each\n            bitstring.\n       (3)  The padded\
    \ bitstrings are concatenated together\n   An EOL marker is the bit sequence 000000000001\
    \ (11 zeroes and a one).\n   From G3Fax to X.400, the body is created in the following\
    \ way:\n       (1)  The body is split into bitstrings at each occurrence\n   \
    \         of 6 consecutive EOL markers, and trailing EOLs and\n            padding\
    \ are removed\n       (2)  Each bitstring is made into an ASN.1 BITSTRING\n  \
    \     (3)  The bitstrings are made into an ASN.1 SEQUENCE, which\n           \
    \ forms the body of the G3Fax body part.\n"
- title: 7.6.  application/postscript - postscript-body-part
  contents:
  - "7.6.  application/postscript - postscript-body-part\n   X.400 Body Part: Extended\
    \ Body Part, OID postscript-body-part\n   MIME Content-Type: application/postscript\n\
    \   Conversion Type: Byte Copy\n"
- title: 7.7.  application/jpeg - jpeg-body-part
  contents:
  - "7.7.  application/jpeg - jpeg-body-part\n   X.400 Body Part: Extended Body Part,\
    \ OID jpeg-body-part\n   MIME Content-Type: application/jpeg\n   Conversion Type:\
    \ Byte Copy\n"
- title: 7.8.  image/gif - gif-body-part
  contents:
  - "7.8.  image/gif - gif-body-part\n   X.400 Body Part: Extended Body Part, OID\
    \ gif-body-part\n   MIME Content-Type: application/gif\n   Conversion Type: Byte\
    \ Copy\n"
- title: 8.  OID Assignments
  contents:
  - "8.  OID Assignments\n       MIME-MHS-MAPPINGS DEFINITIONS ::= BEGIN\n       IMPORTS\n\
    \          mail, mime-mhs, mime-mhs-bodies\n              FROM MIME-MHS;\n   \
    \    mime-mhs-bp-data OBJECT IDENTIFIER ::=\n               { mime-mhs-bodies\
    \ 1}\n       mime-mhs-bp-parameter OBJECT IDENTIFIER ::=\n               { mime-mhs-bodies\
    \ 2}\n       mime-generic-data OBJECT IDENTIFIER ::=\n               { mime-mhs-bp-data\
    \ 1}\n       mime-generic-parameters OBJECT IDENTIFIER ::=\n               { mime-mhs-bp-parameter\
    \ 1}\n       mime-postscript-body OBJECT IDENTIFIER ::=\n               { mime-mhs-bp-data\
    \ 2}\n       mime-jpeg-body OBJECT IDENTIFIER ::=\n               { mime-mhs-bp-data\
    \ 3}\n       mime-gif-body OBJECT IDENTIFIER ::=\n               { mime-mhs-bp-data\
    \ 4};\n"
- title: 9.  IANA Registration form for new mappings
  contents:
  - "9.  IANA Registration form for new mappings\n   To: IANA@isi.edu\n   Subject:\
    \ Registration of new X.400/MIME content type mapping\n   MIME type name:\n  \
    \ (this must have been registered previously with IANA)\n   X.400 body part:\n\
    \   X.400 Object Identifier for Data:\n   (If left empty, an OID will be assigned\
    \ by IANA under\n   mime-mhs-bp-data)\n   X.400 Object Identifier for Parameters:\n\
    \   (If left empty, an OID will be assigned by IANA under\n   mime-mhs-bp-parameter.\
    \  If it is not used, fill in the\n   words NOT USED.)\n   X.400 ASN.1 Syntax:\n\
    \   (must be an EXTENDED-BODY-PART-TYPE macro, or reference to\n   a Basic body\
    \ part type)\n   Conversion algorithm:\n   (must be defined completely enough\
    \ for independent\n   implementation. It may be defined by reference to RFCs).\n\
    \   Person & email address to contact for further information:\n   INFORMATION\
    \ TO THE SUBMITTER:\n   The accepted registrations will be listed in the \"Assigned\n\
    \   Numbers\" series of RFCs.  The information in the\n   registration form is\
    \ freely distributable.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Harald Tveit Alvestrand\n   SINTEF DELAB\n   N-7034\
    \ Trondheim\n   NORWAY\n   EMail: Harald.Alvestrand@delab.sintef.no\n   Steven\
    \ J. Thompson\n   Soft*Switch, Inc.\n   640 Lee Road\n   Wayne, PA 19087\n   Phone:\
    \ (215) 640-7556\n   EMail: sjt@gateway.ssw.com\n"
- title: 12.  References
  contents:
  - "12.  References\n   [1]  Alvestrand, H., Kille, S., Miles, R., Rose, M., and\
    \ S. Thompson,\n        \"Mapping between X.400 and RFC-822 Message Bodies\",\
    \ RFC 1495,\n        SINTEF DELAB, ISODE Consortium, Soft*Switch, Inc, Dover Beach\n\
    \        Consulting, Inc., Soft*Switch, Inc., August 1993.\n   [2]  CCITT Recommendation\
    \ X.420 (1988), Interpersonal Messaging\n        System.\n   [3]  Borenstein,\
    \ N, and N. Freed, \"MIME: Mechanisms for Specifying\n        and Describing the\
    \ Format of Internet Message Bodies\", RFC 1341,\n        Bellcore, Innosoft,\
    \ June 1992.\n   [4]  ISO 8613; Information Processing: Text and Office System;\
    \ Office\n        Document Architecture (ODA) and Interchange Format (ODIF), Part\n\
    \        1-8, 1989.\n   [5]  ISO/IEC International Standard 10021, Information\
    \ technology -\n        Text Communication - Message-Oriented Text Interchange\
    \ Systems\n        (MOTIS) (Parts 1 to 8).\n   [6]  CCITT Recommendation T.411\
    \ (1988), Open Document Architecture\n        (ODA) and Interchange Format, Introduction\
    \ and General\n        Principles.\n   [7]  Crocker, D., \"Standard for the Format\
    \ of ARPA Internet Text\n        Messages\", STD 11, RFC 822, UDEL, August 1982.\n\
    \   [8]  Hardcastle-Kille, S., \"Mapping between X.400(1988) / ISO 10021\n   \
    \     and RFC-822\", RFC 1327, University College London, May 1992.\n   [9]  CCITT\
    \ Recommendation T.4, Standardization of Group 3 Facsimile\n        Apparatus\
    \ for Document Transmission (1988).\n   [10] CCITT Recommendation T.30, Procedures\
    \ For Document Facsimile\n        Transmission in the General Switched Telephone\
    \ Network (1988).\n   [11] CCITT, Data Communication Networks - Message Handling\
    \ Systems -\n        Recommendations X.400 - X.420 (1988 version).\n   [12] Alvestrand,\
    \ H., \"X.400 Use of Extended Character Sets\", RFC\n        1502, SINTEF DELAB,\
    \ August 1993.\n"
