- title: __initial_text__
  contents:
  - '               IPv4 Reassembly Errors at High Data Rates

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   IPv4 fragmentation is not sufficiently robust for use under some\n\
    \   conditions in today's Internet.  At high data rates, the 16-bit IP\n   identification\
    \ field is not large enough to prevent frequent\n   incorrectly assembled IP fragments,\
    \ and the TCP and UDP checksums are\n   insufficient to prevent the resulting\
    \ corrupted datagrams from being\n   delivered to higher protocol layers.  This\
    \ note describes some easily\n   reproduced experiments demonstrating the problem,\
    \ and discusses some\n   of the operational implications of these observations.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPv4 header was designed at a time when data rates were\
    \ several\n   orders of magnitude lower than those achievable today.  This document\n\
    \   describes a consequent scale-related failure in the IP identification\n  \
    \ (ID) field, where fragments may be incorrectly assembled at a rate\n   high\
    \ enough that it is likely to invalidate assumptions about data\n   integrity\
    \ failure rates.\n   That IP fragmentation results in inefficient use of the network\
    \ has\n   been well documented [Kent87].  This note presents a different kind\n\
    \   of problem, which can result not only in significant performance\n   degradation,\
    \ but also frequent data corruption.  This is especially\n   pertinent due to\
    \ the recent proliferation of UDP bulk transport tools\n   that sometimes fragment\
    \ every datagram.\n   Additionally, there is some network equipment that ignores\
    \ the Don't\n   Fragment (DF) bit in the IP header to work around MTU discovery\n\
    \   problems [RFC2923].  This equipment indirectly exposes properly\n   implemented\
    \ protocols and applications to corrupt data.\n"
- title: 2.  Wrapping the IP ID Field
  contents:
  - "2.  Wrapping the IP ID Field\n   The Internet Protocol standard [RFC0791] specifies:\n\
    \      \"The choice of the Identifier for a datagram is based on the need\n  \
    \    to provide a way to uniquely identify the fragments of a\n      particular\
    \ datagram.  The protocol module assembling fragments\n      judges fragments\
    \ to belong to the same datagram if they have the\n      same source, destination,\
    \ protocol, and Identifier.  Thus, the\n      sender must choose the Identifier\
    \ to be unique for this source,\n      destination pair and protocol for the time\
    \ the datagram (or any\n      fragment of it) could be alive in the Internet.\"\
    \n   Strict conformance to this standard limits transmissions in one\n   direction\
    \ between any address pair to no more than 65536 packets per\n   protocol (e.g.,\
    \ TCP, UDP, or ICMP) per maximum packet lifetime.\n   Clearly, not all hosts follow\
    \ this standard because it implies an\n   unreasonably low maximum data rate.\
    \  For example, a host sending\n   1500-byte packets with a 30-second maximum\
    \ packet lifetime could send\n   at only about 26 Mbps before exceeding 65535\
    \ packets per packet\n   lifetime.  Or, filling a 1 Gbps interface with 1500-byte\
    \ packets\n   requires sending 65536 packets in less than 1 second, an unreasonably\n\
    \   short maximum packet lifetime, being less than the round-trip time on\n  \
    \ some paths.  This requirement is widely ignored.\n   Additionally, it is worth\
    \ noting that reusing values in the IP ID\n   field once per 65536 datagrams is\
    \ the best case.  Some\n   implementations randomize the IP ID to prevent leaking\
    \ information\n   out of the kernel [Bellovin02], which causes reuse of the IP\
    \ ID field\n   to occur probabilistically at all sending rates.\n   IP receivers\
    \ store fragments in a reassembly buffer until all\n   fragments in a datagram\
    \ arrive, or until the reassembly timeout\n   expires (15 seconds is suggested\
    \ in [RFC0791]).  Fragments in a\n   datagram are associated with each other by\
    \ their protocol number, the\n   value in their ID field, and by the source/destination\
    \ address pair.\n   If a sender wraps the ID field in less than the reassembly\
    \ timeout,\n   it becomes possible for fragments from different datagrams to be\n\
    \   incorrectly spliced together (\"mis-associated\"), and delivered to the\n\
    \   upper layer protocol.\n   A case of particular concern is when mis-association\
    \ is self-\n   propagating.  This occurs, for example, when there is reliable\n\
    \   ordering of packets and the first fragment of a datagram is lost in\n   the\
    \ network.  The rest of the fragments are stored in the fragment\n   reassembly\
    \ buffer, and when the sender wraps the ID field, the first\n   fragment of the\
    \ new datagram will be mis-associated with the rest of\n   the old datagram. \
    \ The new datagram will be now be incomplete (since\n   it is missing its first\
    \ fragment), so the rest of it will be saved in\n   the fragment reassembly buffer,\
    \ forming a cycle that repeats every\n   65536 datagrams.  It is possible to have\
    \ a number of simultaneous\n   cycles, bounded by the size of the fragment reassembly\
    \ buffer.\n   IPv6 is considerably less vulnerable to this type of problem, since\n\
    \   its fragment header contains a 32-bit identification field [RFC2460].\n  \
    \ Mis-association will only be a problem at packet rates 65536 times\n   higher\
    \ than for IPv4.\n"
- title: 3.  Effects of Mis-Associated Fragments
  contents:
  - "3.  Effects of Mis-Associated Fragments\n   When the mis-associated fragments\
    \ are delivered, transport-layer\n   checksumming should detect these datagrams\
    \ as incorrect and discard\n   them.  When the datagrams are discarded, it could\
    \ create a\n   performance problem for loss-feedback congestion control algorithms,\n\
    \   particularly when a large congestion window is required, since it\n   will\
    \ introduce a certain amount of non-congestive loss.\n   Transport checksums,\
    \ however, may not be designed to handle such high\n   error rates.  The TCP/UDP\
    \ checksum is only 16 bits in length.  If\n   these checksums follow a uniform\
    \ random distribution, we expect mis-\n   associated datagrams to be accepted\
    \ by the checksum at a rate of one\n   per 65536.  With only one mis-association\
    \ cycle, we expect corrupt\n   data delivered to the application layer once per\
    \ 2^32 datagrams.\n   This number can be significantly higher with multiple concurrent\n\
    \   cycles.\n   With non-random data, the TCP/UDP checksum may be even weaker\
    \ still.\n   It is possible to construct datasets where mis-associated fragments\n\
    \   will always have the same checksum.  Such a case may be considered\n   unlikely,\
    \ but is worth considering.  \"Real\" data may be more likely\n   than random\
    \ data to cause checksum hot spots and increase the\n   probability of false checksum\
    \ match [Stone98].  Also, some\n   applications or higher-level protocols may\
    \ turn off checksumming to\n   increase speed, though this practice has been found\
    \ to be dangerous\n   for other reasons when data reliability is important [Stone00].\n"
- title: 4.  Experimental Observations
  contents:
  - "4.  Experimental Observations\n   To test the practical impact of fragmentation\
    \ on UDP, we ran a series\n   of experiments using a UDP bulk data transport protocol\
    \ that was\n   designed to be used as an alternative to TCP for transporting large\n\
    \   data sets over specialized networks.  The tool, Reliable Blast UDP\n   (RBUDP),\
    \ part of the QUANTA networking toolkit [QUANTA], was selected\n   because it\
    \ has a clean interface which facilitated automated\n   experiments.  The decision\
    \ to use RBUDP had little to do with the\n   details of the transport protocol\
    \ itself.  Any UDP transport protocol\n   that does not have additional means\
    \ to detect corruption, and that\n   could be configured to use IP fragmentation,\
    \ would have the same\n   results.\n   In order to diagnose corruption on files\
    \ transferred with the UDP\n   bulk transfer tool, we used a file format that\
    \ included embedded\n   sequence numbers and MD5 checksums in each fragment of\
    \ each datagram.\n   Thus, it was possible to distinguish random corruption from\
    \ that\n   caused by mis-associated fragments.  We used two different types of\n\
    \   files.  One was constructed so that all the UDP checksums were\n   constant\
    \ -- we will call this the \"constant\" dataset.  The other was\n   constructed\
    \ so that UDP checksums were uniformly random -- the\n   \"random\" dataset. \
    \ All tests were done using 400 MB files, sent in\n   1524-byte datagrams so that\
    \ they were fragmented on standard Fast\n   Ethernet with a 1500-byte MTU.\n \
    \  The UDP bulk file transport tool was used to send the datasets\n   between\
    \ a pair of hosts at slightly less than the available data rate\n   (100 Mbps).\
    \  Near the beginning of each flow, a brief secondary flow\n   was started to\
    \ induce packet loss in the primary flow.  Throughout\n   the life of the primary\
    \ flow, we typically observed mis-association\n   rates on the order of a few\
    \ hundredths of a percent.\n   Tests run with the \"constant\" dataset resulted\
    \ in corruption on all\n   mis-associated fragments, that is, corruption on the\
    \ order of a few\n   hundredths of a percent.  In sending approximately 10 TB\
    \ of \"random\"\n   datasets, we observed 8847668 UDP checksum errors and 121\
    \ corruptions\n   of the data due to mis-associated fragments.\n"
- title: 5.  Preventing Mis-Association
  contents:
  - "5.  Preventing Mis-Association\n   The most straightforward way to avoid mis-association\
    \ is to avoid\n   fragmentation altogether by implementing Path MTU Discovery\
    \ [RFC1191]\n   [RFC4821].  However, this is not always feasible for all\n   applications.\
    \  Further, as a work-around for MTU discovery problems\n   [RFC2923], some TCP\
    \ implementations and communications gear provide\n   mechanisms to disable path\
    \ MTU discovery by clearing or ignoring the\n   DF bit.  Doing so will expose\
    \ all protocols using IPv4, even those\n   that participate in MTU discovery,\
    \ to mis-association errors.\n   If IP fragmentation is in use, it may be possible\
    \ to reduce the\n   timeout sufficiently so that mis-association will not occur.\n\
    \   However, there are a number of difficulties with such an approach.\n   Since\
    \ the sender controls the rate of packets sent and the selection\n   of IP ID,\
    \ while the receiver controls the reassembly timeout, there\n   would need to\
    \ be some mutual assurance between each party as to\n   participation in the scheme.\
    \  Further, it is not generally possible\n   to set the timeout low enough so\
    \ that a fast sender's fragments will\n   not be mis-associated, yet high enough\
    \ so that a slow sender's\n   fragments will not be unconditionally discarded\
    \ before it is possible\n   to reassemble them.  Therefore, the timeout and IP\
    \ ID selection would\n   need to be done on a per-peer basis.  Also, it is likely\
    \ NAT will\n   break any per-peer tables keyed by IP address.  It is not within\
    \ the\n   scope of this document to recommend solutions to these problems,\n \
    \  though we believe a per-peer adaptive timeout is likely to prevent\n   mis-association\
    \ under circumstances where it would most commonly\n   occur.\n   A case particularly\
    \ worth noting is that of tunnels encapsulating\n   payload in IPv4.  To deal\
    \ with difficulties in MTU Discovery\n   [RFC4459], tunnels may rely on fragmentation\
    \ between the two\n   endpoints, even if the payload is marked with a DF bit [RFC4301].\
    \  In\n   such a mode, the two tunnel endpoints behave as IP end hosts, with\n\
    \   all tunneled traffic having the same protocol type.  Thus, the\n   aggregate\
    \ rate of tunneled packets may not exceed 65536 per maximum\n   packet lifetime,\
    \ or tunneled data becomes exposed to possible mis-\n   association.  Even protocols\
    \ doing MTU discovery such as TCP will be\n   affected.  Operators of tunnels\
    \ should ensure that the receiving\n   end's reassembly timeout is short enough\
    \ that mis-association cannot\n   occur given the tunnel's maximum rate.\n"
- title: 6.  Mitigating Mis-Association
  contents:
  - "6.  Mitigating Mis-Association\n   It is difficult to concisely describe all\
    \ possible situations under\n   which fragments might be mis-associated.  Even\
    \ if an end host\n   carefully follows the specification, ensuring unique IP IDs,\
    \ the\n   presence of NATs or tunnels may expose applications to IP ID space\n\
    \   conflicts.  Further, devices in the network that the end hosts cannot\n  \
    \ see or control, such as tunnels, may cause mis-association.  Even a\n   fragmenting\
    \ application that sends at a low rate might possibly be\n   exposed when running\
    \ simultaneously with a non-fragmenting\n   application that sends at a high rate.\
    \  As described above, the\n   receiver might implement to reduce or eliminate\
    \ the possibility of\n   conflict, but there is no mechanism in place for a sender\
    \ to know\n   what the receiver is doing in this respect.  As a consequence, there\n\
    \   is no general mechanism for an application that is using IPv4\n   fragmentation\
    \ to know if it is deterministically or statistically\n   protected from mis-associated\
    \ fragments.\n   Under circumstances when it is impossible or impractical to prevent\n\
    \   mis-association, its effects may be mitigated by use of stronger\n   integrity\
    \ checking at any layer above IP.  This is a natural side\n   effect of using\
    \ cryptographic authentication.  For example, IPsec AH\n   [RFC4302] will discard\
    \ any corrupted datagrams, preventing their\n   deliver to upper layers.  A stronger\
    \ transport layer checksum such as\n   SCTP's, which is 32 bits in length [RFC2960],\
    \ may help significantly.\n   At the application layer, SSH message authentication\
    \ codes [RFC4251]\n   will prevent delivery of corrupted data, though since the\
    \ TCP\n   connection underneath is not protected, it is considered invalid and\n\
    \   the session is immediately terminated.  While stronger integrity\n   checking\
    \ may prevent data corruption, it will not prevent the\n   potential performance\
    \ impact described above of non-congestive loss\n   on congestion control at high\
    \ congestion windows.\n   It should also be noted that mis-association is not\
    \ the only possible\n   source of data corruption above the network layer [Stone00].\
    \  Most\n   applications for which data integrity is critically important should\n\
    \   implement strong integrity checking regardless of exposure to mis-\n   association.\n\
    \   In general, applications that rely on IPv4 fragmentation should be\n   written\
    \ with these issues in mind, as well as those issues documented\n   in [Kent87].\
    \  Applications that rely on IPv4 fragmentation while\n   sending at high speeds\
    \ (the order of 100 Mbps or higher) and devices\n   that deliberately introduce\
    \ fragmentation to otherwise unfragmented\n   traffic (e.g., tunnels) should be\
    \ particularly cautious, and\n   introduce strong mechanisms to ensure data integrity.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   If a malicious entity knows that a pair of hosts\
    \ are communicating\n   using a fragmented stream, it may be presented with an\
    \ opportunity to\n   corrupt the flow.  By sending \"high\" fragments (those with\
    \ offset\n   greater than zero) with a forged source address, the attacker can\n\
    \   deliberately cause corruption as described above.  Exploiting this\n   vulnerability\
    \ requires only knowledge of the source and destination\n   addresses of the flow,\
    \ its protocol number, and fragment boundaries.\n   It does not require knowledge\
    \ of port or sequence numbers.\n   If the attacker has visibility of packets on\
    \ the path, the attack\n   profile is similar to injecting full segments.  Using\
    \ this attack\n   makes blind disruptions easier and might possibly be used to\
    \ cause\n   degradation of service.  We believe only streams using IPv4\n   fragmentation\
    \ are likely vulnerable.  Because of the nature of the\n   problems outlined in\
    \ this document, the use of IPv4 fragmentation for\n   critical applications may\
    \ not be advisable, regardless of security\n   concerns.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [Kent87]     Kent, C. and J. Mogul, \"Fragmentation\
    \ considered\n                harmful\", Proc. SIGCOMM '87 vol. 17, No. 5, October\n\
    \                1987.\n   [RFC2923]    Lahey, K., \"TCP Problems with Path MTU\
    \ Discovery\", RFC\n                2923, September 2000.\n   [RFC0791]    Postel,\
    \ J., \"Internet Protocol\", STD 5, RFC 791,\n                September 1981.\n\
    \   [RFC1191]    Mogul, J. and S. Deering, \"Path MTU discovery\", RFC\n     \
    \           1191, November 1990.\n   [Stone98]    Stone, J., Greenwald, M., Partridge,\
    \ C., and J. Hughes,\n                \"Performance of Checksums and CRC's over\
    \ Real Data\",\n                IEEE/ ACM Transactions on Networking vol. 6, No.\
    \ 5,\n                October 1998.\n   [Stone00]    Stone, J. and C. Partridge,\
    \ \"When The CRC and TCP\n                Checksum Disagree\", Proc. SIGCOMM 2000\
    \ vol. 30, No. 4,\n                October 2000.\n   [QUANTA]     He, E., Alimohideen,\
    \ J., Eliason, J., Krishnaprasad, N.,\n                Leigh, J., Yu, O., and\
    \ T. DeFanti, \"Quanta: a toolkit\n                for high performance data delivery\
    \ over photonic\n                networks\", Future Generation Computer Systems\
    \ Vol. 19,\n                No. 6, August 2003.\n   [Bellovin02] Bellovin, S.,\
    \ \"A Technique for Counting NATted Hosts\",\n                Internet Measurement\
    \ Conference, Proceedings of the 2nd\n                ACM SIGCOMM Workshop on\
    \ Internet Measurement, November\n                2002.\n   [RFC2460]    Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n                (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2960]    Stewart, R., Xie, Q., Morneault, K.,\
    \ Sharp, C.,\n                Schwarzbauer, H., Taylor, T., Rytina, I., Kalla,\
    \ M.,\n                Zhang, L., and V. Paxson, \"Stream Control Transmission\n\
    \                Protocol\", RFC 2960, October 2000.\n   [RFC4251]    Ylonen,\
    \ T. and C. Lonvick, \"The Secure Shell (SSH)\n                Protocol Architecture\"\
    , RFC 4251, January 2006.\n   [RFC4301]    Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                Internet Protocol\", RFC 4301, December 2005.\n   [RFC4302]\
    \    Kent, S., \"IP Authentication Header\", RFC 4302, December\n            \
    \    2005.\n   [RFC4459]    Savola, P., \"MTU and Fragmentation Issues with In-the-\n\
    \                Network Tunneling\", RFC 4459, April 2006.\n   [RFC4821]    Mathis,\
    \ M. and J. Heffner, \"Packetization Layer Path MTU\n                Discovery\"\
    , RFC 4821, March 2007.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   This work was supported by the National Science\
    \ Foundation under\n   Grant No. 0083285.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John W. Heffner\n   Pittsburgh Supercomputing Center\n\
    \   4400 Fifth Avenue\n   Pittsburgh, PA  15213\n   US\n   Phone: 412-268-2329\n\
    \   EMail: jheffner@psc.edu\n   Matt Mathis\n   Pittsburgh Supercomputing Center\n\
    \   4400 Fifth Avenue\n   Pittsburgh, PA  15213\n   US\n   Phone: 412-268-3319\n\
    \   EMail: mathis@psc.edu\n   Ben Chandler\n   Pittsburgh Supercomputing Center\n\
    \   4400 Fifth Avenue\n   Pittsburgh, PA  15213\n   US\n   Phone: 412-268-9783\n\
    \   EMail: bchandle@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
