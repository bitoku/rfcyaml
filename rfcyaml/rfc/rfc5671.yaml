- title: __initial_text__
  contents:
  - "         Applicability of the Path Computation Element (PCE) to\n   Point-to-Multipoint\
    \ (P2MP) MPLS and GMPLS Traffic Engineering (TE)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Path Computation Element (PCE) provides path computation\n \
    \  functions in support of traffic engineering in Multiprotocol Label\n   Switching\
    \ (MPLS) and Generalized MPLS (GMPLS) networks.\n   Extensions to the MPLS and\
    \ GMPLS signaling and routing protocols have\n   been made in support of point-to-multipoint\
    \ (P2MP) Traffic Engineered\n   (TE) Label Switched Paths (LSPs).\n   This document\
    \ examines the applicability of PCE to path computation\n   for P2MP TE LSPs in\
    \ MPLS and GMPLS networks.  It describes the\n   motivation for using a PCE to\
    \ compute these paths and examines which\n   of the PCE architectural models are\
    \ appropriate.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Architectural Considerations ....................................4\n  \
    \    2.1. Offline Computation ........................................4\n    \
    \  2.2. Online Computation .........................................4\n      \
    \     2.2.1. LSR Loading .........................................5\n        \
    \   2.2.2. PCE Overload ........................................6\n          \
    \ 2.2.3. PCE Capabilities ....................................6\n   3. Fragmenting\
    \ the P2MP Tree .......................................7\n   4. Central Replication\
    \ Points ......................................8\n   5. Reoptimization and Modification\
    \ .................................9\n   6. Repair .........................................................10\n\
    \   7. Disjoint Paths .................................................11\n  \
    \ 8. Manageability Considerations ...................................11\n    \
    \  8.1. Control of Function and Policy ............................11\n      8.2.\
    \ Information and Data Models ...............................11\n      8.3. Liveness\
    \ Detection and Monitoring .........................12\n      8.4. Verifying Correct\
    \ Operation ...............................12\n      8.5. Requirements on Other\
    \ Protocols and Functional\n           Components ................................................12\n\
    \      8.6. Impact on Network Operation ...............................13\n  \
    \ 9. Security Considerations ........................................13\n   10.\
    \ Acknowledgments ...............................................13\n   11. References\
    \ ....................................................13\n      11.1. Normative\
    \ References .....................................13\n      11.2. Informative\
    \ References ...................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Computation Element (PCE) defined in [RFC4655]\
    \ is an entity\n   that is capable of computing a network path or route based\
    \ on a\n   network graph and of applying computational constraints.  The\n   intention\
    \ is that the PCE is used to compute the path of Traffic\n   Engineered Label\
    \ Switched Paths (TE LSPs) within Multiprotocol Label\n   Switching (MPLS) and\
    \ Generalized MPLS (GMPLS) networks.\n   [RFC4655] defines various deployment\
    \ models that place PCEs\n   differently within the network.  The PCEs may be\
    \ collocated with the\n   Label Switching Routers (LSRs), may be part of the management\
    \ system\n   that requests the LSPs to be established, or may be positioned as\
    \ one\n   or more computation servers within the network.\n   Requirements for\
    \ point-to-multipoint (P2MP) MPLS TE LSPs are\n   documented in [RFC4461], and\
    \ signaling protocol extensions for\n   setting up P2MP MPLS TE LSPs are defined\
    \ in [RFC4875].  In this\n   document, P2MP MPLS TE networks are considered in\
    \ support of various\n   features including layer 3 multicast VPNs [RFC4834],\
    \ video\n   distribution, etc.\n   Fundamental to the determination of the paths\
    \ for P2MP LSPs within a\n   network is the selection of branch points.  Not only\
    \ is this\n   selection constrained by the network topology and available network\n\
    \   resources, but it is determined by the objective functions that may\n   be\
    \ applied to path computation.  For example, one standard objective\n   is to\
    \ minimize the total cost of the tree (that is, to minimize the\n   sum of the\
    \ costs of each link traversed by the tree) to produce what\n   is known as a\
    \ Steiner tree.  Another common objective function\n   requires that the cost\
    \ to reach each leaf of the P2MP tree be\n   minimized.\n   The selection of branch\
    \ points within the network is further\n   complicated by the fact that not all\
    \ LSRs in the network are\n   necessarily capable of performing branching functions.\
    \  This\n   information may be recorded in the Traffic Engineering Database (TED)\n\
    \   that the PCE uses to perform its computations, and may have been\n   distributed\
    \ using extensions to the Interior Gateway Protocol (IGP)\n   operating within\
    \ the network [RFC5073].\n   Additionally, network policies may dictate specific\
    \ branching\n   behavior.  For example, it may be decided that, for certain types\
    \ of\n   LSPs in certain types of networks, it is important that no branch LSR\n\
    \   is responsible for handling more than a certain number of downstream\n   branches\
    \ for any one LSP.  This might arise because the replication\n   mechanism used\
    \ at the LSRs is a round-robin copying process that\n   delays the data transmission\
    \ on each downstream branch by the time\n   taken to replicate the data onto each\
    \ previous downstream branch.\n   Alternatively, administrative policies may dictate\
    \ that replication\n   should be concentrated on specific key replication nodes\
    \ behaving\n   like IP multicast rendezvous points (perhaps to ensure appropriate\n\
    \   policing of receivers in the P2MP tree, or perhaps to make protection\n  \
    \ and resiliency easier to implement).\n   Path computation for P2MP TE LSPs presents\
    \ a significant challenge\n   because of the complexity of the computations described\
    \ above.\n   Determining disjoint protection paths for P2MP TE LSPs can add\n\
    \   considerably to this complexity, while small modifications to a P2MP\n   tree\
    \ (such as adding or removing just one leaf) can completely change\n   the optimal\
    \ path.  Reoptimization of a network containing multiple\n   P2MP TE LSPs requires\
    \ considerable computational resources.  All of\n   this means that an ingress\
    \ LSR might not have sufficient processing\n   power to perform the necessary\
    \ computations, and even if it does, the\n   act of path computation might interfere\
    \ with the control and\n   management plane operation necessary to maintain existing\
    \ LSPs.  The\n   PCE architecture offers a way to offload such path computations\
    \ from\n   LSRs.\n"
- title: 2.  Architectural Considerations
  contents:
  - '2.  Architectural Considerations

    '
- title: 2.1.  Offline Computation
  contents:
  - "2.1.  Offline Computation\n   Offline path computation is performed ahead of\
    \ time, before the LSP\n   setup is requested.  That means that it is requested\
    \ by, or performed\n   as part of, a management application.  This model can be\
    \ seen in\n   Section 5.5 of [RFC4655].\n   The offline model is particularly\
    \ appropriate to long-lived LSPs\n   (such as those present in a transport network)\
    \ or for planned\n   responses to network failures.  In these scenarios, more\
    \ planning is\n   normally a feature of LSP provisioning.\n   This model may also\
    \ be used where the network operator wishes to\n   retain full manual control\
    \ of the placement of LSPs, using the PCE\n   only as a computation tool to assist\
    \ the operator, not as part of an\n   automated network.\n   Offline path computation\
    \ may be applied as a background activity for\n   network reoptimization to determine\
    \ whether and when the current LSP\n   placements are significantly sub-optimal.\
    \  See Section 5 for further\n   discussions of reoptimization.\n"
- title: 2.2.  Online Computation
  contents:
  - "2.2.  Online Computation\n   Online path computation is performed on-demand as\
    \ LSRs in the network\n   determine that they need to know the paths to use for\
    \ LSPs.  Thus,\n   each computation is triggered by a request from an LSR.\n \
    \  As described in [RFC4655], the path computation function for online\n   computation\
    \ may be collocated with the LSR that makes the request, or\n   it may be present\
    \ in a computation-capable PCE server within the\n   network.  The PCE server\
    \ may be another LSR in the network, a\n   dedicated server, or a functional component\
    \ of a Network Management\n   System (NMS).  Furthermore, the computation is not\
    \ necessarily\n   achieved by a single PCE operating on its own, but may be the\
    \ result\n   of cooperation between several PCEs.\n   The remainder of this document\
    \ makes frequent reference to these\n   different online models in order to indicate\
    \ which is more\n   appropriate in different P2MP scenarios.\n"
- title: 2.2.1.  LSR Loading
  contents:
  - "2.2.1.  LSR Loading\n   An important feature of P2MP path computation is the\
    \ processing load\n   that it places on the network element that is determining\
    \ the path.\n   Roughly speaking, the load to compute a least-cost-to-leaf tree\
    \ is\n   the same as the cost to compute a single optimal path to each leaf in\n\
    \   turn.  The load to compute a Steiner tree is approximately an order\n   of\
    \ magnitude greater, although algorithms exist to approximate\n   Steiner trees\
    \ in roughly the same order of magnitude of time as for a\n   least-cost-to-leaf\
    \ tree.\n   Whereas many LSRs are capable of simple Constrained Shortest Path\n\
    \   First (CSPF) computations to determine a path for a single point-to-\n   point\
    \ (P2P) LSP, they rapidly become swamped if called on to perform\n   multiple\
    \ such computations, such as when recovering from a network\n   failure.  Thus,\
    \ it is reasonable to expect that an LSR would struggle\n   to handle a P2MP path\
    \ computation for a tree with many destinations.\n   The result of an LSR becoming\
    \ overloaded by a P2MP path computation\n   may be two-fold.  First, the LSR may\
    \ be unable to provide timely\n   computations of paths for P2P LSPs; this may\
    \ impact LSP setup times\n   for simple demand-based services and could damage\
    \ the LSR's ability\n   to recover services after network faults.  Secondly, the\
    \ LSR's\n   processing capabilities may be diverted from other important tasks,\n\
    \   not the least of which is maintaining the control plane protocols\n   that\
    \ are necessary to the support of existing LSPs and forwarding\n   state within\
    \ the network.  It is obviously critically important that\n   existing traffic\
    \ should not be disrupted by the computation of a path\n   for a new LSP.\n  \
    \ It is also not reasonable to expect the ingress LSRs of P2MP LSRs to\n   be\
    \ specially powerful and capable of P2MP computations.  Although a\n   solution\
    \ to the overloading problem would be to require that all LSRs\n   that form the\
    \ ingresses to P2MP LSPs be sufficiently high-capacity to\n   perform P2MP computations,\
    \ this is not an acceptable solution\n   because, in all other senses, the ingress\
    \ to a P2MP LSP is just a\n   normal ingress LSR.\n   Thus, there is an obvious\
    \ solution: off-load P2MP path computations\n   from LSRs to remotely located\
    \ PCEs.  Such PCE function can be\n   provided on dedicated or high-capacity network\
    \ elements (such as\n   dedicated servers, or high-end routers that might be located\
    \ as\n   Autonomous System Border Routers - ASBRs).\n"
- title: 2.2.2.  PCE Overload
  contents:
  - "2.2.2.  PCE Overload\n   Since P2MP path computations are resource-intensive,\
    \ it may be that\n   the introduction of P2MP LSPs into an established PCE network\
    \ will\n   cause overload at the PCEs.  That is, the P2MP computations may block\n\
    \   other P2P computations and might even overload the PCE.\n   Several measures\
    \ can be taken within the PCE architecture to\n   alleviate this situation as\
    \ described in [RFC4655].  For example,\n   path computation requests can be assigned\
    \ priorities by the LSRs that\n   issue them.  Thus, the LSRs could assign lower\
    \ priority to the P2MP\n   requests, ensuring that P2P requests were serviced\
    \ in preference.\n   Furthermore, the PCEs are able to apply local and network-wide\
    \ policy\n   and this may dictate specific processing rules [RFC5394].\n   But\
    \ ultimately, a network must possess sufficient path computation\n   resources\
    \ for its needs and this is achieved within the PCE\n   architecture simply by\
    \ increasing the number of PCEs.\n   Once there are sufficient PCEs available\
    \ within the network, the LSRs\n   may choose between them and may use overload\
    \ notification information\n   supplied by the PCEs to spot which PCEs are currently\
    \ over-loaded.\n   Additionally, a PCE that is becoming over-loaded may redistribute\
    \ its\n   queue of computation requests (using the PCE cooperation model\n   described\
    \ in [RFC4655]) to other, less burdened PCEs within the\n   network.\n"
- title: 2.2.3.  PCE Capabilities
  contents:
  - "2.2.3.  PCE Capabilities\n   An LSR chooses between available PCEs to select\
    \ the one most likely\n   to be able to perform the requested path computation.\
    \  This selection\n   may be based on overload notifications from the PCEs, but\
    \ could also\n   consider other computational capabilities.\n   For example, it\
    \ is quite likely that only a subset of the PCEs in the\n   network have the ability\
    \ to perform P2MP computations since this\n   requires advanced functionality.\
    \  Some of those PCEs might have the\n   ability to satisfy certain objective\
    \ functions (for example, least\n   cost to destination), but lack support for\
    \ other objective functions\n   (for example, Steiner).  Additionally, some PCEs\
    \ might not be capable\n   of the more complex P2MP reoptimization functionality.\n\
    \   The PCE architecture allows an LSR to discover the capabilities of\n   the\
    \ PCEs within the network at the same time it discovers their\n   existence. \
    \ Further and more detailed exchanges of PCE capabilities\n   can be made directly\
    \ between the PCEs and the LSRs.  This exchange of\n   PCE capabilities information\
    \ allows a Path Computation Client (PCC)\n   to select the PCE that can best answer\
    \ its computation requests.\n"
- title: 3.  Fragmenting the P2MP Tree
  contents:
  - "3.  Fragmenting the P2MP Tree\n   A way to reduce the computational burden of\
    \ computing a large P2MP\n   tree on a single PCE is to fragment or partition\
    \ the tree.  This may\n   be particularly obvious in a multi-domain network (such\
    \ as multiple\n   routing areas), but is equally applicable in a single domain.\n\
    \   Consider the network topology in Figure 1.  A P2MP LSP is required\n   from\
    \ ingress LSR A to egress LSRs s, t, u, v, w, x, y, and z.  Using\n   a single\
    \ PCE model, LSR A may request the entire path of the tree and\n   this may be\
    \ supplied by the PCE.  Alternatively, the PCE that is\n   consulted by LSR A\
    \ may only compute the first fragment of the tree\n   (for example, from A to\
    \ K, L, and M) and may rely on other PCEs to\n   compute the three smaller trees\
    \ from K to t, u, and v; from L to w\n   and x; and from M to s, y, and z.\n \
    \  The LSR consulted by A may simply return the first subtree and leave\n   LSRs\
    \ K, L, and M to invoke PCEs in their turn in order to complete\n   the signaling.\
    \  Alternatively, the first PCE may cooperate with other\n   PCEs to collect the\
    \ paths for the later subtrees and return them in a\n   single computation response\
    \ to PCE A.  The mechanisms for both of\n   these approaches are described in\
    \ the PCE architecture [RFC4655].\n                                       t\n\
    \                                      /\n                                   \
    \  /\n                                    n--u\n                             \
    \      /\n                                  /\n                        e--f--h--K--o--v\n\
    \                       /\n                      /\n               A--b--c--d--g--i--L--p--w\n\
    \                            \\        \\\n                             \\   \
    \     \\\n                              j        x\n                         \
    \      \\\n                                \\\n                              \
    \   M--r--y\n                                  \\  \\\n                      \
    \             \\  \\\n                                    s  z\n        Figure\
    \ 1: A P2MP Tree with Intermediate Computation Points\n   A further possibility\
    \ is that LSRs at which the subtrees are stitched\n   together (K, L, and M in\
    \ this example) are selected from a set of\n   potential such points using a cooperative\
    \ PCE technique, such as the\n   Backward Recursive Path Computation (BRPC) mechanism\
    \ [RFC5441].\n   Indeed, if LSRs K, L, and M were ASBRs or Area Border Routers\
    \ (ABRs),\n   the BRPC technique would be particularly applicable.\n   Note, however,\
    \ that while these mechanisms are superficially\n   beneficial, it is far from\
    \ obvious how the first LSR selects the\n   transit LSRs K, L, and M, or how the\
    \ leaf nodes are assigned to be\n   downstream of particular downstream nodes.\
    \  The computation to\n   determine these questions may be no less intensive than\
    \ the\n   determination of the full tree unless there is some known property of\n\
    \   the leaf node identifiers such as might be provided by address\n   aggregation.\n"
- title: 4.  Central Replication Points
  contents:
  - "4.  Central Replication Points\n   A deployment model for P2MP LSPs is to use\
    \ centralized, well-known\n   replication points.  This choice may be made for\
    \ administrative or\n   security reasons, or because of particular hardware capability\n\
    \   limitations within the network.  Indeed, this deployment model can be\n  \
    \ achieved using P2P LSPs between ingress and replication point as well\n   as\
    \ between replication point and each leaf so as to achieve a P2MP\n   service\
    \ without the use of P2MP MPLS-TE.\n   The motivations for this type of deployment\
    \ are beyond the scope of\n   this document, but it is appropriate to examine\
    \ how PCE might be used\n   to support this model.\n   In Figure 2, a P2MP service\
    \ is required from ingress LSR a to egress\n   LSRs m, n, o, and p.  There are\
    \ four replication-capable LSRs in the\n   network: D, E, J, and K.\n   When LSR\
    \ a consults a PCE, it could be given the full P2MP path from\n   LSR a to the\
    \ leaves, but in this model, the PCE simply returns a P2P\n   path to the first\
    \ replication point (in this case, LSR D).  LSR D\n   will consult a PCE in its\
    \ turn and determine the P2P LSPs to egress\n   LSRs m and p as well as the P2P\
    \ LSP to the next replication point,\n   LSR J.  Finally, LSR J will use a PCE\
    \ to determine P2P LSPs to\n   egresses n and o.\n                           \
    \     f--i--m\n                               /\n                            \
    \  /\n                    a--b--c--D--g--J--n\n                              \\\
    \     \\\n                               \\     \\\n                         \
    \    E  h  K  o\n                                 \\\n                       \
    \           \\\n                                   l--p\n              Figure\
    \ 2: Using Centralized Replication Points\n   In this model of operation, it is\
    \ quite likely that the PCE function\n   is located at the replication points,\
    \ which will be high-capacity\n   LSRs.  One of the main features of the computation\
    \ activity is the\n   selection of the replication points (for example, why is\
    \ LSR D\n   selected in preference to LSR E, and why is LSR J chosen over LSR\n\
    \   K?).  This selection may be made solely on the basis of path\n   optimization\
    \ as it would be for a P2MP computation, but may also be\n   influenced by policy\
    \ issues (for example, LSR D may be able to give\n   better security to protect\
    \ against rogue leaf attachment) or network\n   loading concerns (for example,\
    \ LSR E may already be handling a very\n   large amount of traffic replication\
    \ for other P2MP services).\n"
- title: 5.  Reoptimization and Modification
  contents:
  - "5.  Reoptimization and Modification\n   Once established, P2MP LSPs are more\
    \ sensitive to modification than\n   their P2P counterparts.  If an egress is\
    \ removed from a P2P LSP, the\n   whole LSP is torn down.  But egresses may be\
    \ added to and removed\n   from active P2MP LSPs as receivers come and go.\n \
    \  The removal of an egress from a P2MP LSP does not require any new\n   path\
    \ computation since the tree can be automatically pruned.\n   The addition of\
    \ a new egress to a P2MP LSP can be handled as the\n   computation of an appropriate\
    \ branch point and the determination of a\n   P2P path from the branch point to\
    \ the new egress.  This is a\n   relatively simple computation and can be achieved\
    \ by reverse-path\n   CSPF, much as in the manner of some multicast IP routing\
    \ protocols.\n   However, repeated addition to and removal from a P2MP LSP will\
    \ almost\n   certainly leave it in a sub-optimal state.  The tree shape that was\n\
    \   optimal for the original set of destinations will be distorted by the\n  \
    \ changes and will not be optimal for the new set of destinations.\n   Further,\
    \ as resource availability changes in the network due to other\n   LSPs being\
    \ released or network resources being brought online, the\n   path of the P2MP\
    \ LSP may become sub-optimal.\n   Computing a new optimal path for the P2MP LSP\
    \ is as simple as\n   computing any optimal P2MP path, but selecting a path that\
    \ can be\n   applied within the network as a migration from the existing LSP may\n\
    \   be more complex.  Additional constraints may be applied by the\n   network\
    \ administrator so that only subsets of the egresses (or\n   subtrees of the P2MP\
    \ tree) are optimized at any time.  In these\n   cases, the computational load\
    \ of reoptimization may be considerable,\n   but fortunately reoptimization computations\
    \ may be performed as\n   background activities.  Splitting the P2MP tree into\
    \ subtrees, as\n   described in Section 3, may further reduce the computation\
    \ load and\n   may assist with administrative preferences for partial tree\n \
    \  reoptimization.\n   Network-wide reoptimization of multiple LSPs [RFC5557]\
    \ can achieve\n   far greater improvements in optimality within overloaded networks\n\
    \   than can be achieved by reoptimizing LSPs sequentially.  Such\n   computation\
    \ would typically be performed offline and would usually\n   require a dedicated\
    \ processor such as a PCE invoked by the NMS.\n"
- title: 6.  Repair
  contents:
  - "6.  Repair\n   LSP repair is necessary when a network fault disrupts the ability\
    \ of\n   the LSP to deliver data to an egress.  For a P2MP LSP, a network\n  \
    \ fault is (statistically) likely to only impact a small subset of the\n   total\
    \ set of egresses.  Repair activity, therefore, does not need to\n   recompute\
    \ the path of the entire P2MP tree.  Rather, it needs to\n   quickly find suitable\
    \ new branches that can be grafted onto the\n   existing tree to reconnect the\
    \ disconnected leaves.\n   In fact, immediately after a network failure there\
    \ may be a very\n   large number of path computations required in order to restore\n\
    \   multiple P2P and P2MP LSPs.  The PCEs will be heavily loaded, and it\n   is\
    \ important that computation requests are restricted to only the\n   'essential'.\n\
    \   In this light, it is useful to note that the simple repair\n   computations\
    \ described in the first paragraph of this section may be\n   applied to achieve\
    \ a first repair of the LSPs, while more\n   sophisticated reoptimization computations\
    \ can be deferred until the\n   network is stable and the load on the PCEs has\
    \ been reduced.  Those\n   reoptimizations can be computed as described in Section\
    \ 5.\n"
- title: 7.  Disjoint Paths
  contents:
  - "7.  Disjoint Paths\n   Disjoint paths are required for end-to-end protection\
    \ services and\n   sometimes for load balancing.  They may require to be fully\
    \ disjoint\n   (except at the ingress and egress!), link disjoint (allowing common\n\
    \   nodes on the paths), or best-effort disjoint (allowing shared links\n   or\
    \ nodes when no other path can be found).\n   It is possible to compute disjoint\
    \ paths sequentially, but this can\n   lead to blocking problems where the second\
    \ path cannot be placed.\n   Such issues are more readily avoided if the paths\
    \ are computed in\n   parallel.\n   The computation of link disjoint P2P paths\
    \ may be non-trivial and may\n   be the sort of task that an LSR offloads to a\
    \ PCE because of its\n   complexity.  The computation of disjoint P2MP paths is\
    \ considerably\n   more difficult and is therefore a good candidate to be offloaded\
    \ to a\n   PCE that has dedicated resources.  In fact, it may well be the case\n\
    \   that not all P2MP-capable PCEs can handle disjoint path requests and\n   it\
    \ may be necessary to select between PCEs based on their\n   capabilities.\n"
- title: 8.  Manageability Considerations
  contents:
  - "8.  Manageability Considerations\n   The use of PCE to compute P2MP paths has\
    \ many of the same\n   manageability considerations as when it is used for P2P\
    \ LSPs\n   [RFC5440].  There may be additional manageability implications for\n\
    \   the size of P2MP computation requests and the additional loading\n   exerted\
    \ on the PCEs.\n"
- title: 8.1.  Control of Function and Policy
  contents:
  - "8.1.  Control of Function and Policy\n   As already described, individual PCEs\
    \ may choose to not be capable of\n   P2MP computation, and where this function\
    \ is available, it may be\n   disabled by an operator, or may be automatically\
    \ withdrawn when the\n   PCE becomes loaded or based on other policy considerations.\n\
    \   Further, a PCE may refuse any P2MP computation request or pass it on\n   to\
    \ another PCE based on policy.\n"
- title: 8.2.  Information and Data Models
  contents:
  - "8.2.  Information and Data Models\n   P2MP computation requests necessitate considerably\
    \ more information\n   exchange between the LSR and the PCE than is required for\
    \ P2P\n   computations.  This will result in much larger data sets to be\n   controlled\
    \ and modeled, and will impact the utility of any management\n   data models,\
    \ such as MIB modules.  Care needs to be taken in the\n   design of such data\
    \ models, and the use of other management protocols\n   and data modeling structures,\
    \ such as NETCONF [RFC4741] and the\n   NETCONF Data Modeling Language (NETMOD),\
    \ could be considered.\n"
- title: 8.3.  Liveness Detection and Monitoring
  contents:
  - "8.3.  Liveness Detection and Monitoring\n   PCE liveness detection and monitoring\
    \ is unchanged from P2P\n   operation, but it should be noted that P2MP requests\
    \ will take longer\n   to process than P2P requests, meaning that the time between\
    \ request\n   and response will be, on average, longer.  This increases the chance\n\
    \   of a communications failure between request and response and means\n   that\
    \ liveness detection is more important.\n"
- title: 8.4.  Verifying Correct Operation
  contents:
  - "8.4.  Verifying Correct Operation\n   Correct operation of any communication\
    \ between LSRs and PCEs is\n   exactly as important as it is for P2P computations.\n\
    \   The correct operation of path computation algorithms implemented at\n   PCEs\
    \ is out of scope, but LSRs that are concerned that PCE algorithms\n   might not\
    \ be operating correctly may make identical requests to\n   separate PCEs and\
    \ compare the responses.\n"
- title: 8.5.  Requirements on Other Protocols and Functional Components
  contents:
  - "8.5.  Requirements on Other Protocols and Functional Components\n   As is clear\
    \ from the PCE architecture, a communications protocol is\n   necessary to allow\
    \ LSRs to send computation requests to PCEs and for\n   PCEs to cooperate.  Requirements\
    \ for such a protocol to handle P2P\n   path computations are described in [RFC4657],\
    \ and additional\n   requirements in support of P2MP computations are described\
    \ in\n   [PCE-P2MP].  The PCE Communication Protocol (PCEP) is defined in\n  \
    \ [RFC5440], but extensions will be necessary to support P2MP\n   computation\
    \ requests.\n   As described in the body of this document, LSRs need to be able\
    \ to\n   recognize which PCEs can perform P2MP computations.  Capability\n   advertisement\
    \ is already present in the PCE Discovery protocols\n   ([RFC5088] and [RFC5089])\
    \ and can also be exchanged in PCEP\n   ([RFC5440]), but extensions will be required\
    \ to describe P2MP\n   capabilities.\n   As also described in this document, the\
    \ PCE needs to know the branch\n   capabilities of the LSRs and store this information\
    \ in the TED.  This\n   information can be distributed using the routing protocols\
    \ as\n   described in [RFC5073].\n"
- title: 8.6.  Impact on Network Operation
  contents:
  - "8.6.  Impact on Network Operation\n   The use of a PCE to perform P2MP computations\
    \ may have a beneficial\n   impact on network operation if it can offload processing\
    \ from the\n   LSRs, freeing them up to handle protocol operations.\n   Furthermore,\
    \ the use of a PCE may enable more dynamic behavior in\n   P2MP LSPs (such as\
    \ the addition of new egresses, reoptimization, and\n   failure recovery) than\
    \ is possible using more traditional\n   management-based planning techniques.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The use of PCE to compute P2MP paths does not\
    \ raise any additional\n   security issues beyond those that generally apply to\
    \ the PCE\n   architecture.  See [RFC4655] for a full discussion.\n   Note, however,\
    \ that P2MP computation requests are more CPU-intensive\n   and also use more\
    \ link bandwidth.  Therefore, if the PCE was attacked\n   by the injection of\
    \ spurious path computation requests, it would be\n   more vulnerable through\
    \ a smaller number of such requests.\n   Thus, the use of message integrity and\
    \ authentication mechanisms\n   within the PCE protocol should be used to mitigate\
    \ attacks from\n   devices that are not authorized to send requests to the PCE.\
    \  It\n   would be possible to consider applying different authorization\n   policies\
    \ for P2MP path computation requests compared to other\n   requests.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors would like to thank Jerry Ash and Jean-Louis\
    \ Le Roux for\n   their thoughtful comments.  Lars Eggert, Dan Romascanu, and\
    \ Tim Polk\n   provided useful comments during IESG review.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC4655]  Farrel, A., Vasseur, J.-P., and J.\
    \ Ash, \"A Path\n              Computation Element (PCE)-Based Architecture\"\
    , RFC 4655,\n              August 2006.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4461]  Yasukawa, S., Ed., \"Signaling Requirements\
    \ for Point-to-\n              Multipoint Traffic-Engineered MPLS Label Switched\
    \ Paths\n              (LSPs)\", RFC 4461, April 2006.\n   [RFC4657]  Ash, J.,\
    \ Ed., and J. Le Roux, Ed., \"Path Computation\n              Element (PCE) Communication\
    \ Protocol Generic\n              Requirements\", RFC 4657, September 2006.\n\
    \   [RFC4741]  Enns, R., Ed., \"NETCONF Configuration Protocol\", RFC 4741,\n\
    \              December 2006.\n   [RFC4834]  Morin, T., Ed., \"Requirements for\
    \ Multicast in Layer 3\n              Provider-Provisioned Virtual Private Networks\
    \ (PPVPNs)\",\n              RFC 4834, April 2007.\n   [RFC4875]  Aggarwal, R.,\
    \ Ed., Papadimitriou, D., Ed., and S.\n              Yasukawa, Ed., \"Extensions\
    \ to Resource Reservation\n              Protocol - Traffic Engineering (RSVP-TE)\
    \ for Point-to-\n              Multipoint TE Label Switched Paths (LSPs)\", RFC\
    \ 4875, May\n              2007.\n   [RFC5073]  Vasseur, J., Ed., and J. Le Roux,\
    \ Ed., \"IGP Routing\n              Protocol Extensions for Discovery of Traffic\
    \ Engineering\n              Node Capabilities\", RFC 5073, December 2007.\n \
    \  [RFC5088]  Le Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and R.\n    \
    \          Zhang, \"OSPF Protocol Extensions for Path Computation\n          \
    \    Element (PCE) Discovery\", RFC 5088, January 2008.\n   [RFC5089]  Le Roux,\
    \ JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and R.\n              Zhang, \"IS-IS\
    \ Protocol Extensions for Path Computation\n              Element (PCE) Discovery\"\
    , RFC 5089, January 2008.\n   [RFC5394]  Bryskin, I., Papadimitriou, D., Berger,\
    \ L., and J. Ash,\n              \"Policy-Enabled Path Computation Framework\"\
    , RFC 5394,\n              December 2008.\n   [RFC5440]  Vasseur, JP., Ed., and\
    \ JL. Le Roux, Ed., \"Path Computation\n              Element (PCE) Communication\
    \ Protocol (PCEP)\", RFC 5440,\n              March 2009.\n   [RFC5441]  Vasseur,\
    \ JP., Ed., Zhang, R., Bitar, N., and JL. Le Roux,\n              \"A Backward-Recursive\
    \ PCE-Based Computation (BRPC)\n              Procedure to Compute Shortest Constrained\
    \ Inter-Domain\n              Traffic Engineering Label Switched Paths\", RFC\
    \ 5441, April\n              2009.\n   [RFC5557]  Lee, Y., Le Roux, JL., King,\
    \ D., and E. Oki, \"Path\n              Computation Element Communication Protocol\
    \ (PCEP)\n              Requirements and Protocol Extensions in Support of Global\n\
    \              Concurrent Optimization\", RFC 5557, July 2009.\n   [PCE-P2MP]\
    \ Yasukawa, S., and Farrel, A., \"PCC-PCE Communication\n              Requirements\
    \ for Point to Multipoint Multiprotocol Label\n              Switching Traffic\
    \ Engineering (MPLS-TE)\", Work in\n              Progress, May 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Seisho Yasukawa\n   NTT Corporation\n   9-11, Midori-Cho\
    \ 3-Chome\n   Musashino-Shi, Tokyo 180-8585,\n   Japan\n   EMail: yasukawa.seisho@lab.ntt.co.jp\n\
    \   Adrian Farrel\n   Old Dog Consulting\n   EMail: adrian@olddog.co.uk\n"
