Abstract Structured syntax suffixes for media types allow other media types to build on them and make it explicit that they are built on an existing media type as their foundation.
This specification defines and registers " json seq" as a structured syntax suffix for JSON text sequences.
Introduction Media type structured syntax suffixes [RFC6838] were introduced as a way for a media type to signal that it is based on another media type as its foundation.
Some structured syntax suffixes were registered initially [RFC6839], including " json", for the widely popular JSON format [RFC7159].
JSON text sequences [RFC7464] is a recent specification in the JSON space that defines how a sequence of multiple JSON texts can be represented in one representation.
This document defines and registers the " json seq" structured syntax suffix in the "Structured Syntax Suffix Registry".
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The " json seq" Structured Syntax Suffix
The use case for the " json seq" structured syntax suffix is the same as for " json": It SHOULD be used by media types when parsing the JSON text sequence of a media type leads to a meaningful result, by simply using the generic JSON text sequence processing.
Applications encountering such a media type can then either simply use generic processing if all they need is a generic view of the JSON text sequence, or they can use generic JSON text sequence tools for initial parsing and then implement their own specific processing on top of that generic parsing tool.
IANA Considerations Structured Syntax Suffixes are registered within the "Structured Syntax Suffix Registry" maintained at <https://www.iana.org/assignments/media type structured suffix
IANA has registered the " json seq" structured syntax suffix in accordance with [RFC6838].
[RFC7464], RFC 8091 Encoding considerations:
See [RFC7464] Section 2.2 Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  json seq SHOULD be as specified for "application/json seq".
(At publication of this document, there is no fragment identification syntax defined for "application/json seq".)
The syntax and semantics for fragment identifiers for a specific "xxx/yyy json seq" SHOULD be processed as follows:
For cases defined in  json seq, where the fragment identifier resolves per the  json seq rules, then process as specified in  json seq.
For cases defined in  json seq, where the fragment identifier does not resolve per the  json seq rules, then process as specified in "xxx/yyy json seq".
For cases not defined in  json seq, then process as specified in "xxx/yyy json seq".
: See [RFC7464] Section 3 Contact: Applications and Real Time Area Discussion (art@ietf.org), or any IESG designated successor.
The Applications and Real Time Area Working Group.
IESG has change control over this registration.
All the security considerations of JSON text sequences [RFC7464] apply.
All the security considerations of JSON [RFC7159] apply.
This format provides no cryptographic integrity protection of any kind.
As usual, parsers must operate on input that is assumed to be untrusted.
This means that parsers must fail gracefully in the face of malicious inputs.
Note that incremental JSON text parsers can produce partial results and later indicate failure to parse the remainder of a text.
A sequence parser that uses an incremental JSON text parser might treat a sequence like '<RS>"foo"<LF>456<LF><RS>' as a sequence of one element ("foo"), while a sequence parser that uses a non incremental JSON text parser might treat the same sequence as being empty.
This effect, and texts that fail to parse and are ignored, can be used to smuggle data past sequence parsers that don't warn about JSON text failures.
Repeated parsing and re encoding of a JSON text sequence can result in the addition (or stripping) of trailing LF bytes from (to) individual sequence element JSON texts.
This can break signature validation.
JSON has no canonical form for JSON texts, therefore neither does the JSON text sequence format.
