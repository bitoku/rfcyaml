- title: __initial_text__
  contents:
  - '                Aggregate Server Access Protocol (ASAP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Aggregate Server Access Protocol (ASAP; RFC 5352), in conjunction\n\
    \   with the Endpoint Handlespace Redundancy Protocol (ENRP; RFC 5353),\n   provides\
    \ a high-availability data transfer mechanism over IP\n   networks.  ASAP uses\
    \ a handle-based addressing model that isolates a\n   logical communication endpoint\
    \ from its IP address(es), thus\n   effectively eliminating the binding between\
    \ the communication\n   endpoint and its physical IP address(es), which normally\
    \ constitutes\n   a single point of failure.\n   In addition, ASAP defines each\
    \ logical communication destination as a\n   pool, providing full transparent\
    \ support for server pooling and load\n   sharing.  It also allows dynamic system\
    \ scalability -- members of a\n   server pool can be added or removed at any time\
    \ without interrupting\n   the service.\n   ASAP is designed to take full advantage\
    \ of the network level\n   redundancy provided by the Stream Transmission Control\
    \ Protocol\n   (SCTP; RFC 4960).  Each transport protocol, other than SCTP, MUST\n\
    \   have an accompanying transport mapping document.  It should be noted\n   that\
    \ ASAP messages passed between Pool Elements (PEs) and ENRP\n   servers MUST use\
    \ the SCTP transport protocol.\n   The high-availability server pooling is gained\
    \ by combining two\n   protocols, namely ASAP and ENRP, in which ASAP provides\
    \ the user\n   interface for Pool Handle to address translation, load sharing\n\
    \   management, and fault management, while ENRP defines the high-\n   availability\
    \ Pool Handle translation service.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Definitions ................................................4\n  \
    \    1.2. Conventions ................................................5\n    \
    \  1.3. Organization of This Document ..............................6\n      1.4.\
    \ Scope of ASAP ..............................................6\n           1.4.1.\
    \ Extent of the Handlespace ...........................6\n   2. Message Definitions\
    \ .............................................6\n      2.1. ASAP Parameter Formats\
    \ .....................................7\n      2.2. ASAP Messages ..............................................7\n\
    \           2.2.1. ASAP_REGISTRATION Message ...........................7\n  \
    \         2.2.2. ASAP_DEREGISTRATION Message .........................8\n    \
    \       2.2.3. ASAP_REGISTRATION_RESPONSE Message ..................9\n      \
    \     2.2.4. ASAP_DEREGISTRATION_RESPONSE Message ...............10\n        \
    \   2.2.5. ASAP_HANDLE_RESOLUTION Message .....................10\n          \
    \ 2.2.6. ASAP_HANDLE_RESOLUTION_RESPONSE Message ............11\n           2.2.7.\
    \ ASAP_ENDPOINT_KEEP_ALIVE Message ...................13\n           2.2.8. ASAP_ENDPOINT_KEEP_ALIVE_ACK\
    \ Message ...............14\n           2.2.9. ASAP_ENDPOINT_UNREACHABLE Message\
    \ ..................14\n           2.2.10. ASAP_SERVER_ANNOUNCE Message ......................15\n\
    \           2.2.11. ASAP_COOKIE Message ...............................16\n  \
    \         2.2.12. ASAP_COOKIE_ECHO Message ..........................16\n    \
    \       2.2.13. ASAP_BUSINESS_CARD Message ........................17\n      \
    \     2.2.14. ASAP_ERROR Message ................................17\n   3. Procedures\
    \ .....................................................18\n      3.1. Registration\
    \ ..............................................18\n      3.2. De-Registration\
    \ ...........................................21\n      3.3. Handle Resolution\
    \ .........................................23\n      3.4. Endpoint Keep Alive\
    \ .......................................25\n      3.5. Unreachable Endpoints\
    \ .....................................26\n      3.6. ENRP Server Hunt Procedures\
    \ ...............................27\n      3.7. Handling ASAP Endpoint to ENRP\
    \ Server\n           Communication Failures ....................................28\n\
    \           3.7.1. SCTP Send Failure ..................................28\n  \
    \         3.7.2. T1-ENRPrequest Timer Expiration ....................29\n    \
    \       3.7.3. Registration Failure ...............................29\n      3.8.\
    \ Cookie Handling Procedures ................................29\n      3.9. Business\
    \ Card Handling Procedures .........................30\n   4. Roles of Endpoints\
    \ .............................................31\n   5. SCTP Considerations ............................................31\n\
    \   6. The ASAP Interfaces ............................................31\n  \
    \    6.1. Registration.Request Primitive ............................32\n    \
    \  6.2. Deregistration.Request Primitive ..........................32\n      6.3.\
    \ CachePopulateRequest Primitive ............................33\n      6.4. CachePurgeRequest\
    \ Primitive ...............................33\n      6.5. DataSendRequest Primitive\
    \ .................................33\n           6.5.1. Sending to a Pool Handle\
    \ ...........................34\n           6.5.2. Pool Element Selection .............................35\n\
    \                  6.5.2.1. Round-Robin Policy ........................35\n  \
    \         6.5.3. Sending to a Pool Element Handle ...................35\n    \
    \       6.5.4. Send by Transport Address ..........................37\n      \
    \     6.5.5. Message Delivery Options ...........................37\n      6.6.\
    \ Data.Received Notification ................................38\n      6.7. Error.Report\
    \ Notification .................................39\n      6.8. Examples ..................................................39\n\
    \           6.8.1. Send to a New Pool .................................39\n  \
    \         6.8.2. Send to a Cached Pool Handle .......................40\n    \
    \  6.9. PE Send Failure ...........................................41\n      \
    \     6.9.1. Translation.Request Primitive ......................41\n        \
    \   6.9.2. Transport.Failure Primitive ........................42\n   7. Timers,\
    \ Variables, and Thresholds ..............................42\n      7.1. Timers\
    \ ....................................................42\n      7.2. Variables\
    \ .................................................42\n      7.3. Thresholds ................................................43\n\
    \   8. IANA Considerations ............................................43\n  \
    \    8.1. A New Table for ASAP Message Types ........................43\n    \
    \  8.2. Port Numbers ..............................................44\n      8.3.\
    \ SCTP Payload Protocol Identifier ..........................44\n      8.4. Multicast\
    \ Addresses .......................................44\n   9. Security Considerations\
    \ ........................................44\n      9.1. Summary of RSerPool Security\
    \ Threats ......................45\n      9.2. Implementing Security Mechanisms\
    \ ..........................46\n      9.3. Chain of Trust ............................................49\n\
    \   10. Acknowledgments ...............................................50\n  \
    \ 11. References ....................................................50\n    \
    \  11.1. Normative References .....................................50\n      11.2.\
    \ Informative References ...................................51\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Aggregate Server Access Protocol (ASAP), when used in\
    \ conjunction\n   with Endpoint Name Resolution Protocol [RFC5353], provides a\
    \ high-\n   availability data-transfer mechanism over IP networks.  ASAP uses\
    \ a\n   handle-based addressing model that isolates a logical communication\n\
    \   endpoint from its IP address(es), thus effectively eliminating the\n   binding\
    \ between the communication endpoint and its physical IP\n   address(es), which\
    \ normally constitutes a single point of failure.\n   When multiple receiver instances\
    \ exist under the same handle (aka a\n   server pool), an ASAP Endpoint will select\
    \ one Pool Element (PE),\n   based on the current load sharing policy indicated\
    \ by the server\n   pool, and deliver its message to the selected PE.\n   While\
    \ delivering the message, ASAP can be used to monitor the\n   reachability of\
    \ the selected PE.  If it is found unreachable, before\n   notifying the message\
    \ sender (an ASAP User) of the failure, ASAP can\n   automatically select another\
    \ PE (if one exists) under that pool and\n   attempt to deliver the message to\
    \ that PE.  In other words, ASAP is\n   capable of transparent failover amongst\
    \ PE instances within a server\n   pool.\n   ASAP depends on ENRP, which provides\
    \ a high-availability Pool\n   Handlespace.  ASAP is responsible for the abstraction\
    \ of the\n   underlying transport technologies, load distribution management,\n\
    \   fault management, as well as presentation to the upper layer (aka an\n   ASAP\
    \ User) via a unified primitive interface.\n   When SCTP [RFC4960] is used as\
    \ the transport layer protocol, ASAP can\n   seamlessly incorporate the link-layer\
    \ redundancy provided by SCTP.\n   This document defines the ASAP portion of the\
    \ high-availability\n   server pool.\n"
- title: 1.1.  Definitions
  contents:
  - "1.1.  Definitions\n   This document uses the following terms:\n   ASAP User:\
    \  Either a PE or Pool User (PU) that uses ASAP.\n   Business Card:  When presented\
    \ by a PU or PE, it specifies the pool\n      the sender belongs to and provides\
    \ a list of alternate PEs in case\n      of failovers.\n   Operational Scope:\
    \  The part of the network visible to pool users by\n      a specific instance\
    \ of the reliable server pooling protocols.\n   Pool (or Server Pool):  A collection\
    \ of servers providing the same\n      application functionality.\n   Pool Handle:\
    \  A logical pointer to a pool.  Each server pool will be\n      identifiable\
    \ in the operational scope of the system by a unique\n      Pool Handle.\n   Pool\
    \ Element:  A server entity having registered to a pool.\n   Pool User:  A server\
    \ pool user.\n   Pool Element Handle (or Endpoint Handle):  A logical pointer\
    \ to a\n      particular Pool Element in a pool, consisting of the Pool Handle\n\
    \      and a destination transport address of the Pool Element.\n   Handlespace:\
    \  A cohesive structure of Pool Handles and relations that\n      may be queried\
    \ by an internal or external agent.\n   Home ENRP Server:  The ENRP server to\
    \ which a PE or PU currently\n      sends all namespace service requests.  A PE\
    \ must only have one\n      Home ENRP server at any given time, and both the PE\
    \ and its Home\n      ENRP server MUST know and keep track of this relationship.\
    \  A PU\n      should select one of the available ENRP servers as its Home ENRP\n\
    \      server, but the collective ENRP servers may change this by the\n      sending\
    \ of an ASAP_ENDPOINT_KEEP_ALIVE message.\n   ENRP Client Channel:  The communication\
    \ channel through which an ASAP\n      User sends all namespace service requests.\
    \  The client channel is\n      usually defined by the transport address of the\
    \ Home ENRP server\n      and a well-known port number.  The channel MAY make\
    \ use of\n      multicast or a named list of ENRP servers.\n   Network Byte Order:\
    \  Most significant byte first, aka Big Endian.\n   Transport Address:  A transport\
    \ address is traditionally defined by\n      Network Layer address, Transport\
    \ Layer protocol and Transport\n      Layer port number.  In the case of SCTP\
    \ running over IP, a\n      transport address is defined by the combination of\
    \ an IP address\n      and an SCTP port number (where SCTP is the Transport protocol).\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 1.3.  Organization of This Document
  contents:
  - "1.3.  Organization of This Document\n   Section 2 details the ASAP message formats.\
    \  In Section 3, we provide\n   detailed ASAP procedures for the ASAP implementer.\
    \  Section 4\n   summarizes which messages need to be supported by which nodes,\
    \ and\n   Section 5 describes the usage of SCTP.  In Section 6, details of the\n\
    \   ASAP interface are given, focusing on the communication primitives\n   between\
    \ ASAP, the applications above ASAP, and ASAP itself, and the\n   communications\
    \ primitives between ASAP and SCTP (or other transport\n   layers).  Also included\
    \ in this discussion are relevant timers and\n   configurable parameters, as appropriate.\
    \  Section 7 provides\n   threshold and protocol variables.\n   It should be noted\
    \ that variables, timers, and constants are used in\n   the text when necessary.\
    \  The complete list can be found in\n   Section 7.\n"
- title: 1.4.  Scope of ASAP
  contents:
  - "1.4.  Scope of ASAP\n   The requirements for high availability and scalability\
    \ do not imply\n   requirements on shared state and data.  ASAP does not provide\n\
    \   transaction failover.  If a host or application fails during the\n   processing\
    \ of a transaction, this transaction may be lost.  Some\n   services MAY provide\
    \ a way to handle the failure, but this is not\n   guaranteed.  ASAP MAY provide\
    \ hooks to assist an application in\n   building a mechanism to share state but\
    \ ASAP in itself does NOT share\n   any state.\n"
- title: 1.4.1.  Extent of the Handlespace
  contents:
  - "1.4.1.  Extent of the Handlespace\n   The scope of ASAP/ENRP is NOT Internet-wide.\
    \  The handlespace is\n   neither hierarchical nor arbitrarily large like DNS.\
    \  A flat peer-to-\n   peer model is detailed.  Pools of servers will exist in\
    \ different\n   administrative domains.  For example, suppose the use of ASAP\
    \ and\n   ENRP is wanted.  First, the PU may use DNS to contact an ENRP server.\n\
    \   Suppose a PU in North America wishes to contact a server pool in\n   Japan\
    \ instead of North America.  The PU would use DNS to get the list\n   of IP addresses\
    \ of the Japanese server pool; that is, the ENRP client\n   channel in Japan.\
    \  From there, the PU would query the Home ENRP\n   server it established and\
    \ then directly contact the PE(s) of\n   interest.\n"
- title: 2.  Message Definitions
  contents:
  - "2.  Message Definitions\n   All messages, as well as their fields described below,\
    \ shall be in\n   network byte order during transmission.  For fields with a length\n\
    \   bigger than 4 bytes, a number in a pair of parentheses may follow the\n  \
    \ field name to indicate the length of the field in number of bytes.\n"
- title: 2.1.  ASAP Parameter Formats
  contents:
  - "2.1.  ASAP Parameter Formats\n   The basic message format and all parameter formats\
    \ can be found in\n   [RFC5354].  Note also that *all* ASAP messages exchanged\
    \ between an\n   ENRP server and a PE MUST use SCTP as transport, while ASAP messages\n\
    \   exchanged between an ENRP server and a PU MUST use either SCTP or TCP\n  \
    \ as transport.  PE to PU data traffic MAY use any transport protocol\n   specified\
    \ by the PE during registration.\n"
- title: 2.2.  ASAP Messages
  contents:
  - "2.2.  ASAP Messages\n   This section details the individual messages used by\
    \ ASAP.  These\n   messages are composed of a standard message format found in\
    \ Section 4\n   of [RFC5354].  The parameter descriptions can be found in [RFC5354].\n\
    \   The following ASAP message types are defined in this section:\n   Type   \
    \    Message Name\n   -----      -------------------------\n   0x00       - (Reserved\
    \ by IETF)\n   0x01       - ASAP_REGISTRATION\n   0x02       - ASAP_DEREGISTRATION\n\
    \   0x03       - ASAP_REGISTRATION_RESPONSE\n   0x04       - ASAP_DEREGISTRATION_RESPONSE\n\
    \   0x05       - ASAP_HANDLE_RESOLUTION\n   0x06       - ASAP_HANDLE_RESOLUTION_RESPONSE\n\
    \   0x07       - ASAP_ENDPOINT_KEEP_ALIVE\n   0x08       - ASAP_ENDPOINT_KEEP_ALIVE_ACK\n\
    \   0x09       - ASAP_ENDPOINT_UNREACHABLE\n   0x0a       - ASAP_SERVER_ANNOUNCE\n\
    \   0x0b       - ASAP_COOKIE\n   0x0c       - ASAP_COOKIE_ECHO\n   0x0d      \
    \ - ASAP_BUSINESS_CARD\n   0x0e       - ASAP_ERROR\n   others     - (Reserved\
    \ by IETF)\n                                 Figure 1\n"
- title: 2.2.1.  ASAP_REGISTRATION Message
  contents:
  - "2.2.1.  ASAP_REGISTRATION Message\n   The ASAP_REGISTRATION message is sent by\
    \ a PE to its Home ENRP server\n   to either create a new pool or to add itself\
    \ to an existing pool.\n   The PE sending the ASAP_REGISTRATION message MUST fill\
    \ in the Pool\n   Handle parameter and the Pool Element parameter.  The Pool Handle\n\
    \   parameter specifies the name to be registered.  The Pool Element\n   parameter\
    \ MUST be filled in by the registrant, as outlined in\n   Section 3.1.  Note that\
    \ the PE sending the registration message MUST\n   send the message using an SCTP\
    \ association.  Furthermore, the IP\n   address(es) of the PE that is registered\
    \ within the Pool Element\n   parameter MUST be a subset of the IP address(es)\
    \ used in the SCTP\n   association, regardless of the registered transport protocol.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x01 |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Element Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   Pool Element Parameter:\n  \
    \ See [RFC5354].\n"
- title: 2.2.2.  ASAP_DEREGISTRATION Message
  contents:
  - "2.2.2.  ASAP_DEREGISTRATION Message\n   The ASAP_DEREGISTRATION message is sent\
    \ by a PE to its Home ENRP\n   server to remove itself from a pool to which it\
    \ registered.\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Type\
    \ = 0x02 |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                    PE Identifier Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+++\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   PE Identifier Parameter:\n \
    \  See [RFC5354].\n   The PE sending the ASAP_DEREGISTRATION MUST fill in the\
    \ Pool Handle\n   and the PE identifier parameter in order to allow the ENRP server\
    \ to\n   verify the identity of the endpoint.  Note that de-registration is\n\
    \   NOT allowed by proxy; in other words, a PE may only de-register\n   itself.\n"
- title: 2.2.3.  ASAP_REGISTRATION_RESPONSE Message
  contents:
  - "2.2.3.  ASAP_REGISTRATION_RESPONSE Message\n   The ASAP_REGISTRATION_RESPONSE\
    \ message is sent in response by the\n   Home ENRP server to the PE that sent\
    \ an ASAP_REGISTRATION message.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x03 |0|0|0|0|0|0|0|R|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                    PE Identifier Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                   Operational Error (optional)                :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   R (Reject) Flag:\n   When set to '1', this flag indicates that the ENRP server\
    \ sending\n   this message has rejected the registration.  Otherwise, when this\n\
    \   flag is set to '0', this indicates the registration has been granted.\n  \
    \ Pool Handle Parameter:\n   See [RFC5354].\n   PE Identifier Parameter:\n   See\
    \ [RFC5354].\n   Operational Error Parameter (optional):\n   See [RFC5354].\n\
    \   This parameter is included if an error or some atypical events\n   occurred\
    \ during the registration process.  When the R flag is set to\n   '1', this parameter,\
    \ if present, indicates the cause of the\n   rejection.  When the R flag is set\
    \ to '0', this parameter, if\n   present, serves as a warning to the registering\
    \ PE, informing it that\n   some of its registration values may have been modified\
    \ by the ENRP\n   server.  If the registration was successful and there is no\
    \ warning,\n   this parameter is not included.\n"
- title: 2.2.4.  ASAP_DEREGISTRATION_RESPONSE Message
  contents:
  - "2.2.4.  ASAP_DEREGISTRATION_RESPONSE Message\n   The ASAP_DEREGISTRATION_RESPONSE\
    \ message is returned by the Home ENRP\n   server to a PE in response to an ASAP_DEREGISTRATION\
    \ message or due\n   to the expiration of the registration life of the PE in the\
    \ pool.\n    0                   1                   2                   3\n \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x04 |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                    PE Identifier Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                   Operational Error (optional)                :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   PE Identifier Parameter:\n \
    \  See [RFC5354].\n   Operational Error:\n   See [RFC5354].\n   This parameter\
    \ is included if an error or some atypical events\n   occurred during the de-registration\
    \ process.  If the de-registration\n   was successful this parameter is not included.\n"
- title: 2.2.5.  ASAP_HANDLE_RESOLUTION Message
  contents:
  - "2.2.5.  ASAP_HANDLE_RESOLUTION Message\n   The ASAP_HANDLE_RESOLUTION message\
    \ is sent by either a PE or PU to\n   its Home ENRP server to resolve a Pool Handle\
    \ into a list of Pool\n   Elements that are members of the pool indicated by the\
    \ Pool Handle.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Type\
    \ = 0x05 |0|0|0|0|0|0|0|S|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The 'S' bit:\n   The 'S' bit, if set to '1', requests the Home ENRP server\
    \ to send\n   updates to this Pool dynamically when the Pool changes for the\n\
    \   lifetime of the SCTP association.  Dynamic updates to the pool will\n   consist\
    \ of additional ASAP_HANDLE_RESOLUTION_RESPONSE messages,\n   without the user\
    \ needing to send in an ASAP_HANDLE_RESOLUTION.\n   If the 'S' bit is set to '0',\
    \ no Dynamic updates are requested.\n   Note that if a new Home ENRP server is\
    \ adopted, any 'dynamic update\n   request' will need to be re-sent to the new\
    \ Home ENPR server if the\n   endpoint would like to continue to receive updates.\
    \  In other words,\n   the ENRP servers do NOT share state regarding which of\
    \ its PU's are\n   requesting automatic update of state.  Thus, upon change of\
    \ Home ENRP\n   server, the PU will need to re-send an ASAP_HANDLE_RESOLUTION\
    \ message\n   with the 'S' bit set to '1'.  Note also, that the 'S' bit will only\n\
    \   cause Dynamic update of a Pool when the Pool exists.  If a negative\n   response\
    \ is returned, no further updates to the Pool (when it is\n   created) will occur.\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n"
- title: 2.2.6.  ASAP_HANDLE_RESOLUTION_RESPONSE Message
  contents:
  - "2.2.6.  ASAP_HANDLE_RESOLUTION_RESPONSE Message\n   The ASAP_HANDLE_RESOLUTION_RESPONSE\
    \ message is sent in response by\n   the Home ENRP server of the PU or PE that\
    \ sent an\n   ASAP_HANDLE_RESOLUTION message or is sent periodically upon Pool\n\
    \   changes if the PU has requested Dynamic updates.\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x06 |0|0|0|0|0|0|0|A|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :             Overall PE Selection Policy (optional)            :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :               Pool Element Parameter 1 (optional)             :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                              ...                              :\n   :  \
    \                                                             :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :               Pool Element Parameter N (optional)             :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                   Operational Error (optional)                :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   'A' bit:\n   This bit is set to '1' if the ENRP server accepts the request\
    \ to send\n   automatic updates (i.e., the 'S' bit was set on the request).  If\n\
    \   this bit is set to '0', either the ENRP server does NOT support\n   automatic\
    \ updates, it has resource issues and cannot supply this\n   feature, or the user\
    \ did not request it.\n   Pool Handle Parameter:\n   See [RFC5354].\n   Overall\
    \ PE Selection Policy (optional):\n   See [RFC5354].\n   This parameter can be\
    \ present when the response is positive.  If\n   present, it indicates the overall\
    \ pool member selection policy of the\n   pool.  If not present, a Round-Robin\
    \ overall pool member selection\n   policy is assumed.  This parameter is not\
    \ present when the response\n   is negative.\n   Note, any load policy parameter\
    \ within a Pool Element parameter (if\n   present) MUST be ignored, and MUST NOT\
    \ be used to determine the\n   overall pool member selection policy.\n   Pool\
    \ Element Parameters (optional):\n   See [RFC5354].\n   When the response is positive,\
    \ an array of PE parameters are\n   included, indicating the current information\
    \ about the PEs in the\n   named pool.  At least one PE parameter MUST be present.\
    \  When the\n   response is negative, no PE parameters are included.\n   Operational\
    \ Error (optional):\n   See [RFC5354].\n   The presence of this parameter indicates\
    \ that the response is\n   negative (the handle resolution request was rejected\
    \ by the ENRP\n   server).  The cause code in this parameter (if present) will\
    \ indicate\n   the reason the handle resolution request was rejected (e.g., the\n\
    \   requested Pool Handle was not found).  The absence of this parameter\n   indicates\
    \ that the response is positive.\n"
- title: 2.2.7.  ASAP_ENDPOINT_KEEP_ALIVE Message
  contents:
  - "2.2.7.  ASAP_ENDPOINT_KEEP_ALIVE Message\n   The ASAP_ENDPOINT_KEEP_ALIVE message\
    \ is sent by an ENRP server to a\n   PE.  The ASAP_ENDPOINT_KEEP_ALIVE message\
    \ is used to verify that the\n   PE is reachable and requires the PE to adopt\
    \ the sending server as\n   its new Home ENRP server if the 'H' bit is set to\
    \ '1'.  Regardless of\n   the setting of the 'H' bit, an ASAP Endpoint MUST respond\
    \ with an\n   ASAP_ENDPOINT_KEEP_ALIVE_ACK to any ASAP_ENDPOINT_KEEP_ALIVE messages\n\
    \   that arrive.\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \ Type = 0x07 |0|0|0|0|0|0|0|H|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Server Identifier                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   H (Home ENRP server) Flag:\n   When set to '1', indicates that the ENRP server\
    \ that sends this\n   message wants to be the Home ENRP server of the receiver\
    \ of this\n   message.\n   Server Identifier: 32 bits (unsigned integer)\n   This\
    \ is the ID of the ENRP server, as discussed in [RFC5353].\n   Pool Handle Parameter:\n\
    \   See [RFC5354].\n"
- title: 2.2.8.  ASAP_ENDPOINT_KEEP_ALIVE_ACK Message
  contents:
  - "2.2.8.  ASAP_ENDPOINT_KEEP_ALIVE_ACK Message\n   The ASAP_ENDPOINT_KEEP_ALIVE_ACK\
    \ message is sent by a PE in response\n   to an ASAP_ENDPOINT_KEEP_ALIVE message\
    \ sent by an ENRP server.\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x08 |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                    PE Identifier Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   PE Identifier Parameter:\n \
    \  See [RFC5354].\n"
- title: 2.2.9.  ASAP_ENDPOINT_UNREACHABLE Message
  contents:
  - "2.2.9.  ASAP_ENDPOINT_UNREACHABLE Message\n   The ASAP_ENDPOINT_UNREACHABLE message\
    \ is sent by either a PE or PU to\n   its Home ENRP server to report an unreachable\
    \ PE.\n    0                   1                   2                   3\n   \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x09 |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                    PE Identifier Parameter                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   PE Identifier Parameter:\n \
    \  See [RFC5354].\n"
- title: 2.2.10.  ASAP_SERVER_ANNOUNCE Message
  contents:
  - "2.2.10.  ASAP_SERVER_ANNOUNCE Message\n   The ASAP_SERVER_ANNOUNCE message is\
    \ sent by an ENRP server such that\n   PUs and PEs know the transport information\
    \ necessary to connect to\n   the ENRP server.\n    0                   1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x0a |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Server Identifier                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                       Transport Param #1                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                       Transport Param #2                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                                                               :\n   :  \
    \                           .....                             :\n   :        \
    \                                                       :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                       Transport Param #n                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Server Identifier: 32 bits (unsigned integer)\n   This is the ID of the ENRP\
    \ server, as discussed in [RFC5353].\n   Transport Parameters (optional):\n  \
    \ See [RFC5354] for the SCTP and TCP Transport parameters.\n   Only SCTP and TCP\
    \ Transport parameters are allowed for use within the\n   SERVER_ANNOUNCE message.\n"
- title: 2.2.11.  ASAP_COOKIE Message
  contents:
  - "2.2.11.  ASAP_COOKIE Message\n   The ASAP_COOKIE message is sent by a PE to a\
    \ PU, allowing the PE to\n   convey information it wishes to share using a control\
    \ channel.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x0b |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                         Cookie Parameter                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Cookie Parameter :\n   See [RFC5354].\n"
- title: 2.2.12.  ASAP_COOKIE_ECHO Message
  contents:
  - "2.2.12.  ASAP_COOKIE_ECHO Message\n   The ASAP_COOKIE_ECHO message is sent by\
    \ a PU to a new PE when it\n   detects a failure with the current PE to aid in\
    \ failover.  The Cookie\n   Parameter sent by the PE is the latest one received\
    \ from the failed\n   PE.\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x0c |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                         Cookie Parameter                      :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Cookie Parameter:\n   See [RFC5354].\n"
- title: 2.2.13.  ASAP_BUSINESS_CARD Message
  contents:
  - "2.2.13.  ASAP_BUSINESS_CARD Message\n   The ASAP_BUSINESS_CARD message is sent\
    \ by a PU to a PE or from a PE\n   to a PU using a control channel to convey the\
    \ pool handle and a\n   preferred failover ordering.\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x0d |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                     Pool Handle Parameter                     :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                   Pool Element Parameter-1                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                              ..                               :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                   Pool Element Parameter-N                    :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Pool Handle Parameter:\n   See [RFC5354].\n   Pool Element Parameters:\n \
    \  See [RFC5354].\n"
- title: 2.2.14.  ASAP_ERROR Message
  contents:
  - "2.2.14.  ASAP_ERROR Message\n   The ASAP_ERROR message is sent in response by\
    \ an ASAP Endpoint\n   receiving an unknown message or an unknown parameter to\
    \ the sending\n   ASAP Endpoint to report the problem or issue.\n   0        \
    \           1                   2                   3\n   0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type = 0x0e |0|0|0|0|0|0|0|0|        Message Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :                 Operational Error Parameter                   :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Operational Error Parameter:\n   See [RFC5354].\n   When an ASAP Endpoint\
    \ receives an ASAP message with an unknown\n   message type or a message of known\
    \ type that contains an unknown\n   parameter, it SHOULD handle the unknown message\
    \ or the unknown\n   parameter according to the unrecognized message and parameter\n\
    \   handling rules, defined in Section 3.\n   According to the rules, if an error\
    \ report to the message sender is\n   needed, the ASAP endpoint that discovered\
    \ the error SHOULD send back\n   an ASAP_ERROR message that includes an Operational\
    \ Error parameter\n   with the proper cause code, cause length, and case-specific\n\
    \   information.\n"
- title: 3.  Procedures
  contents:
  - "3.  Procedures\n   This section will focus on the methods and procedures used\
    \ by an\n   internal ASAP Endpoint.  Appropriate timers and recovery actions for\n\
    \   failure detection and management are also discussed.  Also, please\n   note\
    \ that ASAP messages sent between a PE and PU are identified by an\n   SCTP Payload\
    \ Protocol Identifier (PPID).\n"
- title: 3.1.  Registration
  contents:
  - "3.1.  Registration\n   When a PE wishes to initiate or join a server pool, it\
    \ MUST use the\n   procedures outlined in this section for registration.  Often,\
    \ the\n   registration will be triggered by a user request primitive (discussed\n\
    \   in Section 6.1).  The PE MUST register using an SCTP association\n   established\
    \ between itself and the Home ENRP server.  If the PE has\n   not established\
    \ its Home ENRP server, it MUST follow the procedures\n   specified in Section\
    \ 3.6.\n   Once the PE's ASAP Endpoint has established its Home ENRP server, the\n\
    \   following procedures MUST be followed to register:\n   R1)  The PE's SCTP\
    \ endpoint used to communicate with the Home ENRP\n      server MUST be bound\
    \ to all IP addresses that will be used by the\n      PE (regardless of which\
    \ transport protocol will be used to service\n      user requests to the PE).\n\
    \   R2)  The PE's ASAP Endpoint MUST formulate an ASAP_REGISTRATION\n      message,\
    \ as defined in Section 2.2.1.  In formulating the message,\n      the PE MUST:\n\
    \      R2.1)  Fill in the Pool Handle parameter to specify which server\n    \
    \     pool the ASAP Endpoint wishes to join.\n      R2.2)  Fill in the PE identifier\
    \ using a good-quality randomly\n         generated number ([RFC4086] provides\
    \ some information on\n         randomness guidelines).\n      R2.3)  Fill in\
    \ the Registration Lifetime parameter with the number\n         of seconds that\
    \ this registration is valid for.  Note that a PE\n         that wishes to continue\
    \ service MUST re-register before the\n         registration expires.\n      R2.4)\
    \  Fill in a User Transport parameter to specify the type of\n         transport\
    \ and the data/control channel usage the PE is willing\n         to support. \
    \ Note, in joining an existing server pool, the PE\n         MUST follow the overall\
    \ transport type and overall data/control\n         channel usage of the pool.\
    \  Otherwise, the registration may be\n         rejected by the ENRP server.\n\
    \      R2.5)  Fill in the preferred Pool Member Selection Policy\n         parameter.\n\
    \   R3)  Send the ASAP_REGISTRATION message to the Home ENRP server using\n  \
    \    SCTP.\n   R4)  Start a T2-registration timer.\n   Note: the PE does not need\
    \ to fill in the optional ASAP transport\n   parameter.  The ASAP transport parameter\
    \ will be filled in and used\n   by the Home ENRP server.\n   If the T2-registration\
    \ timer expires before receiving an\n   ASAP_REGISTRATION_RESPONSE message, or\
    \ a SEND.FAILURE notification is\n   received from the SCTP layer, the PE shall\
    \ start the Server Hunt\n   procedure (see Section 3.6) in an attempt to get service\
    \ from a\n   different ENRP server.  After establishing a new Home ENRP server,\n\
    \   the PE SHOULD restart the registration procedure.\n   At the reception of\
    \ the registration response, the PE MUST stop the\n   T2-registration timer. \
    \ If the response indicates success, the PE is\n   registered and will be considered\
    \ an available member of the server\n   pool.  If the registration response indicates\
    \ a failure, the PE must\n   either re-attempt registration after correcting the\
    \ error or return a\n   failure indication to the PE's upper layer.  The PE MUST\
    \ NOT re-\n   attempt registration without correcting the error condition.\n \
    \  At any time, a registered PE MAY wish to re-register to either update\n   its\
    \ member selection Policy Value or registration expiration time.\n   When re-registering,\
    \ the PE MUST use the same PE identifier.\n   After successful registration, the\
    \ PE MUST start a T4-reregistration\n   timer.  At its expiration, a re-registration\
    \ SHOULD be made starting\n   at step R1, including (at completion) restarting\
    \ the T4-\n   reregistration timer.\n   Note that an implementation SHOULD keep\
    \ a record of the number of\n   registration (and re-registration) attempts it\
    \ makes in a local\n   variable that gets set to zero before the initial registration\n\
    \   attempt to the Home ENRP server or after a successful re-\n   registration.\
    \  If repeated registration timeouts or failures occurs\n   and the local count\
    \ exceeds the Threshold 'MAX-REG-ATTEMPT', the\n   implementation SHOULD report\
    \ the error to its upper layer and stop\n   attempting registration.\n   The ENRP\
    \ server handles the ASAP_REGISTRATION message according to\n   the following\
    \ rules:\n   1.  If the named pool does not exist in the handlespace, the ENRP\n\
    \       server MUST create a new pool with that handle in the handlespace\n  \
    \     and add the PE to the pool as its first PE.\n       When a new pool is created,\
    \ the overall member selection policy\n       of the pool MUST be set to the policy\
    \ type indicated by the first\n       PE, the overall pool transport type MUST\
    \ be set to the transport\n       type indicated by the PE, and the overall pool\
    \ data/control\n       channel configuration MUST be set to what is indicated\
    \ in the\n       Transport Use field of the User Transport parameter by the\n\
    \       registering PE.\n   2.  If the named pool already exists in the handlespace,\
    \ but the\n       requesting PE is not currently a member of the pool, the ENRP\n\
    \       server will add the PE as a new member to the pool.\n       However, before\
    \ adding the PE to the pool, the server MUST check\n       if the policy type,\
    \ transport type, and transport usage indicated\n       by the registering PE\
    \ is consistent with those of the pool.  If\n       different, the ENRP server\
    \ MUST reject the registration.\n   3.  If the named pool already exists in the\
    \ handlespace *and* the\n       requesting PE is already a member of the pool,\
    \ the ENRP server\n       SHOULD consider this as a re-registration case.  The\
    \ ENRP server\n       MUST perform the same tests on policy, transport type, and\n\
    \       transport use, as described above.  If the re-registration is\n      \
    \ accepted after the test, the ENRP server SHOULD replace the\n       attributes\
    \ of the existing PE with the information carried in the\n       received ASAP_REGISTRATION\
    \ message.\n   4.  After accepting the registration, the ENRP server MUST assign\n\
    \       itself the owner of this PE.  If this is a re-registration, the\n    \
    \   ENRP server MUST take over ownership of this PE, regardless of\n       whether\
    \ the PE was previously owned by this server or by another\n       server.  The\
    \ ENRP server MUST also record the SCTP transport\n       address from which it\
    \ received the ASAP_REGISTRATION in the ASAP\n       Transport parameter TLV inside\
    \ the PE parameter of this PE.\n   5.  The ENRP server may reject the registration\
    \ due to other reasons\n       such as invalid values, lack of resource, authentication\
    \ failure,\n       etc.\n   In all above cases, the ENRP server MUST reply to\
    \ the requesting PE\n   with an ASAP_REGISTRATION_RESPONSE message.  If the registration\
    \ is\n   accepted, the ENRP server MUST set the R flag in the\n   ASAP_REGISTRATION_RESPONSE\
    \ to '0'.  If the registration is rejected,\n   the ENRP server MUST indicate\
    \ the rejection by setting the R flag in\n   the ASAP_REGISTRATION_RESPONSE to\
    \ '1'.\n   If the registration is rejected, the ENRP server SHOULD include the\n\
    \   proper error cause(s) in the ASAP_REGISTRATION_RESPONSE message.\n   If the\
    \ registration is granted (either a new registration or a re-\n   registration\
    \ case), the ENRP server MUST assign itself to be the Home\n   ENRP server of\
    \ the PE, i.e., to \"own\" the PE.\n      Implementation note: For better performance,\
    \ the ENRP server may\n      find it both efficient and convenient to internally\
    \ maintain two\n      separate PE lists or tables -- one is for the PEs that are\
    \ owned\n      by the ENRP server and the other is for all the PEs owned by their\n\
    \      peer(s).\n   Moreover, if the registration is granted, the ENRP server\
    \ MUST take\n   the handlespace update action to inform its peers about the change\n\
    \   just made.  If the registration is denied, no message will be sent to\n  \
    \ its peers.\n"
- title: 3.2.  De-Registration
  contents:
  - "3.2.  De-Registration\n   In the event a PE wishes to de-register from its server\
    \ pool\n   (normally, via an upper-layer request, see Section 6.2), it SHOULD\n\
    \   use the following procedure.  It should be noted that an alternate\n   method\
    \ of de-registration is to NOT re-register and to allow the\n   registration life\
    \ of the PE to expire.  In this case, an\n   ASAP_DEREGISTRATION_RESPONSE message\
    \ is sent to the PE's ASAP\n   Endpoint to indicate the removal of the PE from\
    \ the pool it\n   registered.\n   When de-registering, the PE SHOULD use the SCTP\
    \ association that was\n   used for registration with its Home ENRP server.  To\
    \ de-register, the\n   PE's ASAP Endpoint MUST take the following actions:\n \
    \  D1)  Fill in the Pool Handle parameter of the ASAP_DEREGISTRATION\n      message\
    \ (Section 2.2.2) using the same Pool Handle parameter sent\n      during registration.\n\
    \   D2)  Fill in the PE Identifier parameter of the ASAP_DEREGISTRATION\n    \
    \  message.  The identifier MUST be the same as used during\n      registration.\
    \  The use of the same Pool Handle and Pool Identifier\n      parameters used\
    \ in registration allows the identity of the PE ASAP\n      Endpoint to be verified\
    \ before de-registration can occur.\n   D3)  Send the ASAP_DEREGISTRATION message\
    \ to the Home ENRP server\n      using the PE's SCTP association.\n   D4)  Start\
    \ a T3-Deregistration timer.\n   If the T3-Deregistration timer expires before\
    \ receiving either an\n   ASAP_REGISTRATION_RESPONSE message, or a SEND.FAILURE\
    \ notification\n   from the PE's SCTP endpoint, the PE's ASAP Endpoint shall start\
    \ the\n   ENRP Server Hunt procedure (see Section 3.6) in an attempt to get\n\
    \   service from another ENRP server.  After establishing a new Home ENRP\n  \
    \ server, the ASAP Endpoint SHOULD restart the de-registration\n   procedure.\n\
    \   At the reception of the ASAP_DEREGISTRATION_RESPONSE, the PE's ASAP\n   endpoint\
    \ MUST stop the T3-Deregistration timer.\n   It should be noted that after a successful\
    \ de-registration, the PE\n   MAY still receive requests for some period of time.\
    \  The PE MAY wish\n   to remain active and service these requests or to exit\
    \ and ignore\n   these requests.\n   Upon receiving the message, the ENRP server\
    \ SHALL remove the PE from\n   its handlespace.  Moreover, if the PE is the last\
    \ one of the named\n   pool, the ENRP server will remove the pool from the handlespace\
    \ as\n   well.\n   If the ENRP server fails to find any record of the PE in its\n\
    \   handlespace, it SHOULD consider the de-registration granted and\n   completed,\
    \ and send an ASAP_DEREGISTRATION_RESPONSE message to the\n   PE.\n   The ENRP\
    \ server may reject the de-registration request for various\n   reasons, such\
    \ as invalid parameters, authentication failure, etc.\n   In response, the ENRP\
    \ server MUST send an\n   ASAP_DEREGISTRATION_RESPONSE message to the PE.  If\
    \ the de-\n   registration is rejected, the ENRP server MUST indicate the rejection\n\
    \   by including the proper Operational Error parameter.\n   It should be noted\
    \ that de-registration does not stop the PE from\n   sending or receiving application\
    \ messages.\n   Once the de-registration request is granted *and* the PE removed\
    \ from\n   its local copy of the handlespace, the ENRP server MUST take the\n\
    \   handlespace update action to inform its peers about the change just\n   made.\
    \  Otherwise, the ENRP server MUST NOT inform its peers.\n"
- title: 3.3.  Handle Resolution
  contents:
  - "3.3.  Handle Resolution\n   At any time, a PE or PU may wish to resolve a handle.\
    \  This usually\n   will occur when an ASAP Endpoint sends a Pool Handle (Section\
    \ 6.5.1)\n   to its Home ENRP server or requests a cache population (Section 6.3).\n\
    \   It may also occur for other reasons (e.g., the internal ASAP PE\n   wishes\
    \ to know its peers to send a message to all of them).  When an\n   ASAP Endpoint\
    \ (PE or PU) wishes to resolve a pool handle to a list of\n   accessible transport\
    \ addresses of the member PEs of the pool, it MUST\n   take the following actions:\n\
    \   NR1)  Fill in an ASAP_HANDLE_RESOLUTION message (Section 2.2.5) with\n   \
    \   the Pool Handle to be resolved.\n   NR2)  If the endpoint does not have a\
    \ Home ENRP server, start the\n      ENRP Server Hunt procedures specified in\
    \ Section 3.6 to obtain\n      one.  Otherwise, proceed to step NR3.\n   NR3)\
    \  If a PE, send the ASAP_HANDLE_RESOLUTION message to the Home\n      ENRP server\
    \ using SCTP; if a PU, send the ASAP_HANDLE_RESOLUTION\n      message to the Home\
    \ ENRP server using either TCP or SCTP.  If sent\n      from a PE, the SCTP association\
    \ used for registration SHOULD be\n      used.\n   NR4)  Start a T1-ENRPrequest\
    \ timer.\n   If the T1-ENRPrequest timer expires before receiving a response\n\
    \   message, the ASAP Endpoint SHOULD take the steps described in\n   Section\
    \ 3.7.2.  If a SEND.FAILURE notification is received from the\n   SCTP or TCP\
    \ layer, the ASAP Endpoint SHOULD start the Server Hunt\n   procedure (see Section\
    \ 3.6) in an attempt to get service from a\n   different ENRP server.  After establishing\
    \ a new Home ENRP server,\n   the ASAP Endpoint SHOULD restart the handle resolution\
    \ procedure.\n   At the reception of the ASAP_HANDLE_RESOLUTION_RESPONSE message,\
    \ the\n   ASAP Endpoint MUST stop its T1-ENRPrequest timer.  After stopping the\n\
    \   T1-ENRPrequest timer, the ASAP Endpoint SHOULD process the message as\n  \
    \ appropriate (e.g., populate a local cache, give the response to the\n   ASAP\
    \ User, and/or use the response to send the ASAP User's message).\n   Note that\
    \ some ASAP Endpoints MAY use a cache to minimize the number\n   of handle resolutions\
    \ sent.  If a cache is used, it SHOULD:\n   C1)  Be consulted before sending a\
    \ handle resolution.\n   C2)  Have a stale timeout timer associated with each\
    \ cache entry.  If\n      the cache entry is determined to be stale upon a cache\
    \ hit, a\n      handle resolution message SHOULD be sent so the cache can be\n\
    \      updated.\n   C3)  In the case of a stale cache entry, the implementation\
    \ may, in\n      parallel, update the cache and answer the request, or it may\
    \ block\n      the user and wait for an updated cache before proceeding with the\n\
    \      users request.\n   C4)  If the cache entry is NOT stale, the endpoint SHOULD\
    \ NOT send a\n      handle resolution request but instead SHOULD use the entry\
    \ from\n      the cache.\n   It should be noted that the impact of using a cache\
    \ depends on the\n   policy and the requirements of the application.  For some\n\
    \   applications, cache-usage can increase the performance of the system;\n  \
    \ for some, it can decrease it.\n   An ENRP server SHOULD be prepared to receive\
    \ ASAP_HANDLE_RESOLUTION\n   requests from PUs, either over an SCTP association\
    \ on the well-known\n   SCTP port, or over a TCP connection on the well-known\
    \ TCP port.\n   Upon reception of the ASAP_HANDLE_RESOLUTION message, the ENRP\
    \ server\n   MUST first look up the pool handle in its handlespace.  If the pool\n\
    \   exists, the Home ENRP server MUST compose and send back an\n   ASAP_HANDLE_RESOLUTION_RESPONSE\
    \ message to the requesting PU.\n   In the response message, the ENRP server SHOULD\
    \ list all the PEs\n   currently registered in this pool, in a list of PE parameters.\
    \  The\n   ENRP server MUST also include a pool member selection policy\n   parameter\
    \ to indicate the overall member selection policy for the\n   pool, if the current\
    \ pool member selection policy is not Round-Robin.\n   If the named pool does\
    \ not exist in the handlespace, the ENRP server\n   MUST reject the handle resolution\
    \ request by responding with an\n   ASAP_HANDLE_RESOLUTION_RESPONSE message carrying\
    \ an Unknown Pool\n   Handle error.\n"
- title: 3.4.  Endpoint Keep Alive
  contents:
  - "3.4.  Endpoint Keep Alive\n   The ASAP_ENDPOINT_KEEP_ALIVE message is sent by\
    \ an ENRP server to a\n   PE in order to verify it is reachable.  If the transport\
    \ level\n   heartbeat mechanism is insufficient, this message can be used in a\n\
    \   heartbeat mechanism for the ASAP level whose goal is determining the\n   health\
    \ status of the ASAP level in a timely fashion.  (The transport\n   level heartbeat\
    \ mechanism may be insufficient due to either the\n   timeouts or the heartbeat\
    \ interval being set too long, or, that the\n   transport level heartbeat mechanism's\
    \ coverage is limited only to the\n   transport level at the two ends.)  Additionally,\
    \ the\n   ASAP_ENDPOINT_KEEP_ALIVE message has value in the reliability of\n \
    \  fault detection if the SCTP stack is in the kernel.  In such a case,\n   while\
    \ the SCTP-level heartbeat monitors the end-to-end connectivity\n   between the\
    \ two SCTP stacks, the ASAP-level heartbeat monitors the\n   end-to-end liveliness\
    \ of the ASAP layer above it.\n   The use of the ASAP_ENDPOINT_KEEP_ALIVE message\
    \ (Section 2.2.7) and\n   the ASAP_ENDPOINT_KEEP_ALIVE_ACK (Section 2.2.8) is\
    \ described below.\n   Upon reception of an ASAP_ENDPOINT_KEEP_ALIVE message,\
    \ the following\n   actions MUST be taken:\n   KA1)  The PE must verify that the\
    \ Pool Handle is correct and matches\n      the Pool Handle sent in its earlier\
    \ ASAP_REGISTRATION message.  If\n      the Pool Handle does not match, the PE\
    \ MUST silently discard the\n      message.\n   KA2)  Send an ASAP_ENDPOINT_KEEP_ALIVE_ACK\
    \ (Section 2.2.8) as\n      follows:\n      KA2.1)  Fill in the Pool Handle parameter\
    \ with the PE's Pool\n         Handle.\n      KA2.2)  Fill in the PE Identifier\
    \ parameter using the PE\n         identifier used by this PE for registration.\n\
    \      KA2.3)  Send the ASAP_ENDPOINT_KEEP_ALIVE_ACK message via the\n       \
    \  appropriate SCTP association for the ENRP server that sent the\n         ASAP_ENDPOINT_KEEP_ALIVE\
    \ message.\n      KA2.4)  If the H flag in the received ASAP_ENDPOINT_KEEP_ALIVE\n\
    \         message is set, and the Server Identifier in the message is NOT\n  \
    \       the identity of your Home ENRP server (or it is not set, e.g.,\n     \
    \    you have a no Home ENRP server) adopt the sender of the\n         ASAP_ENDPOINT_KEEP_ALIVE\
    \ message as the new Home ENRP server.\n"
- title: 3.5.  Unreachable Endpoints
  contents:
  - "3.5.  Unreachable Endpoints\n   Occasionally, an ASAP Endpoint may realize a\
    \ PE is unreachable.  This\n   may occur by a specific SCTP error realized by\
    \ the ASAP endpoint or\n   via an ASAP User report via the Transport.Failure Primitive\n\
    \   (Section 6.9.2).  In either case, the ASAP Endpoint SHOULD report the\n  \
    \ unavailability of the PE by sending an ASAP_ENDPOINT_UNREACHABLE\n   message\
    \ to any ENRP server.  Before sending the\n   ASAP_ENDPOINT_UNREACHABLE message,\
    \ the ASAP Endpoint should fill in\n   the Pool Handle parameter and PE Identifier\
    \ parameter of the\n   unreachable endpoint.  If the sender is a PE, the message\
    \ MUST be\n   sent via SCTP.  It should be noted that an ASAP Endpoint MUST report\n\
    \   no more than once each time it encounters such an event.\n   Additionally,\
    \ when processing a Transport.Failure Primitive\n   (Section 6.9.2), the ASAP\
    \ Endpoint MUST NOT send an\n   ASAP_ENDPOINT_UNREACHABLE message unless the user\
    \ has made a previous\n   request to send data to the PE specified by the primitive.\n\
    \   Upon the reception of an ASAP_ENDPOINT_UNREACHABLE message, an ENRP\n   server\
    \ MUST immediately send a point-to-point\n   ASAP_ENDPOINT_KEEP_ALIVE message\
    \ to the PE in question (the H flag in\n   the message SHOULD be set to '0', in\
    \ this case).  If this\n   ASAP_ENDPOINT_KEEP_ALIVE fails (e.g., it results in\
    \ an SCTP\n   SEND.FAILURE notification), the ENRP server MUST consider the PE\
    \ as\n   truly unreachable and MUST remove the PE from its handlespace.\n   If\
    \ the ASAP_ENDPOINT_KEEP_ALIVE message is transmitted successfully\n   to the\
    \ PE, the ENRP server MUST retain the PE in its handlespace.\n   Moreover, the\
    \ server SHOULD keep a counter to record how many\n   ASAP_ENDPOINT_UNREACHABLE\
    \ messages it has received reporting\n   reachability problem relating to this\
    \ PE.  If the counter exceeds the\n   protocol threshold MAX-BAD-PE-REPORT, the\
    \ ENRP server SHOULD remove\n   the PE from its handlespace.\n   Optionally, an\
    \ ENRP server may also periodically send point-to-point\n   ASAP_ENDPOINT_KEEP_ALIVE\
    \ (with the H flag set to '0') messages to\n   each of the PEs owned by the ENRP\
    \ server in order to check their\n   reachability status.  If the sending of ASAP_ENDPOINT_KEEP_ALIVE\
    \ to a\n   PE fails, the ENRP server MUST consider the PE as unreachable and\n\
    \   MUST remove the PE from its handlespace.  Note, if an ENRP server\n   owns\
    \ a large number of PEs, the implementation should pay attention\n   not to flood\
    \ the network with bursts of ASAP_ENDPOINT_KEEP_ALIVE\n   messages.  Instead,\
    \ the implementation MUST distribute the\n   ASAP_ENDPOINT_KEEP_ALIVE message\
    \ traffic over a time period.  This\n   can be achieved by varying the time between\
    \ two\n   ASAP_ENDPOINT_KEEP_ALIVE messages to the same PE randomly by plus/\n\
    \   minus 50 percent.\n"
- title: 3.6.  ENRP Server Hunt Procedures
  contents:
  - "3.6.  ENRP Server Hunt Procedures\n   Each PU and PE manages a list of transport\
    \ addresses of ENRP servers\n   it knows about.\n   If multicast capabilities\
    \ are used within the operational scope, an\n   ENRP server MUST send periodically\
    \ every (N+1)*T6-Serverannounce an\n   ASAP_SERVER_ANNOUNCE message (Section 2.2.10),\
    \ which includes all the\n   transport addresses available for ASAP communication\
    \ on the multicast\n   ENRP client channel, where N is the number of ENRP servers\
    \ the server\n   has found via receiving ASAP_SERVER_ANNOUNCE messages.  This\
    \ should\n   result in a message rate of approximately 1 ASAP_SERVER_ANNOUNCE\
    \ per\n   T6-Serverannounce.\n   If an ASAP_SERVER_ANNOUNCE message is received\
    \ by a PU or PE, it\n   SHOULD insert all new included transport addresses into\
    \ its list of\n   ENRP server addresses and start a T7-ENRPoutdate timer for each\n\
    \   address.  For all already-known, included transport addresses, the\n   T7-ENRPoutdate\
    \ timer MUST be restarted for each address.  If no\n   transport parameters are\
    \ included in the ASAP_SERVER_ANNOUNCE\n   message, the SCTP transport protocol\
    \ is assumed to be used and the\n   source IP address and the IANA-registered\
    \ ASAP port number is used\n   for communication with the ENRP server.  If a T7-ENRPoutdate\
    \ timer\n   for a transport address expires, the corresponding address is deleted\n\
    \   from the managed list of transport addresses of the PU or PE.\n   If multicast\
    \ capabilities are not used within the operational scope,\n   each PU and PE MUST\
    \ have a configured list of transport addresses of\n   ENRP servers.\n   At its\
    \ startup, or when it fails to communicate with its Home ENRP\n   server (i.e.,\
    \ timed out on an ENRP request), a PE or PU MUST\n   establish a new Home ENRP\
    \ server (i.e., set up a TCP connection or\n   SCTP association with a different\
    \ ENRP server).\n   To establish a Home ENRP server, the following rules MUST\
    \ be\n   followed:\n   SH1)  The PE or PU SHOULD try to establish an association\
    \ or\n      connection, with no more than three ENRP servers.  An ASAP\n     \
    \ Endpoint MUST NOT establish more than three associations or\n      connections.\n\
    \   SH2)  The ASAP Endpoint shall start a T5-Serverhunt timer.\n   SH3)  If the\
    \ ASAP Endpoint establishes an association or connection\n      it MUST stop its\
    \ T5-Serverhunt timer.  The ASAP Endpoint SHOULD\n      also reset the T5-Serverhunt\
    \ timer to its initial value and then\n      proceed to step SH6.\n   SH4)  If\
    \ an association or connection establishment fails, the ASAP\n      Endpoint SHOULD\
    \ try to establish an association or connection\n      using a different transport\
    \ address.\n   SH5)  If the T5-Serverhunt timer expires, the following should\
    \ be\n      performed:\n      SH5.1)  The ASAP Endpoint MUST double the value\
    \ of the T5-\n         Serverhunt timer.  Note that this doubling is capped at\
    \ the\n         value RETRAN.max.\n      SH5.2)  The ASAP Endpoint SHOULD stop\
    \ the establishment of\n         associations and connections with the transport\
    \ addresses\n         selected in step SH1.\n      SH5.2)  The ASAP Endpoint SHOULD\
    \ repeat trying to establish an\n         association or connection by proceeding\
    \ to step SH1.  It SHOULD\n         attempt to select a different set of transport\
    \ addresses with\n         which to connect.\n   SH6)  The PE or PU shall pick\
    \ one of the ENRP servers with which it\n      was able to establish an association\
    \ or connection, and send all\n      subsequent ENRP request messages to this\
    \ new Home ENRP server.\n"
- title: 3.7.  Handling ASAP Endpoint to ENRP Server Communication Failures
  contents:
  - "3.7.  Handling ASAP Endpoint to ENRP Server Communication Failures\n   Three\
    \ types of failure may occur when the ASAP Endpoint at either the\n   PE or PU\
    \ tries to communicate with an ENRP server:\n   A) SCTP send failure\n   B) T1-ENRPrequest\
    \ timer expiration\n   C) Registration failure\n"
- title: 3.7.1.  SCTP Send Failure
  contents:
  - "3.7.1.  SCTP Send Failure\n   This communication failure indicates that the SCTP\
    \ layer was unable\n   to deliver a message sent to an ENRP server.  In other\
    \ words, the\n   ENRP server is unreachable.\n   In such a case, the ASAP Endpoint\
    \ MUST NOT re-send the undeliverable\n   message.  Instead, it SHOULD discard\
    \ the message and start the ENRP\n   Server Hunt procedure as described in Section\
    \ 3.6.  After finding a\n   new Home ENRP server, the ASAP Endpoint should re-send\
    \ the request.\n   Note that an ASAP Endpoint MAY also choose to NOT discard the\n\
    \   message, but to queue it for retransmission after a new Home ENRP\n   server\
    \ is found.  If an ASAP Endpoint does choose to discard the\n   message, after\
    \ a new Home ENRP server is found, the ASAP Endpoint\n   MUST be capable of reconstructing\
    \ the original request.\n"
- title: 3.7.2.  T1-ENRPrequest Timer Expiration
  contents:
  - "3.7.2.  T1-ENRPrequest Timer Expiration\n   When the T1-ENRPrequest timer expires,\
    \ the ASAP Endpoint should re-\n   send the original request to the ENRP server\
    \ and restart the T1-\n   ENRPrequest timer.  In parallel, the ASAP Endpoint should\
    \ begin the\n   ENRP server hunt procedures described in Section 3.6.\n   This\
    \ should be repeated up to MAX-REQUEST-RETRANSMIT times.  After\n   that, an Error.Report\
    \ notification should be generated to inform the\n   ASAP User, and the ENRP request\
    \ message associated with the T1-\n   ENRPrequest timer should be discarded. \
    \ It should be noted that if an\n   alternate ENRP server responds, the ASAP Endpoint\
    \ SHOULD adopt the\n   responding ENRP server as its new Home ENRP server and\
    \ re-send the\n   request to the new Home ENRP server.\n"
- title: 3.7.3.  Registration Failure
  contents:
  - "3.7.3.  Registration Failure\n   Registration failure is discussed in Section\
    \ 3.1.\n"
- title: 3.8.  Cookie Handling Procedures
  contents:
  - "3.8.  Cookie Handling Procedures\n   Whenever a PE wants, and a control channel\
    \ exists, it can send an\n   ASAP_COOKIE message to a PU via the control channel.\
    \  The PU's ASAP\n   endpoint stores the Cookie parameter and discards an older\
    \ cookie if\n   it is previously stored.\n   Note: A control channel is a communication\
    \ channel between a PU and\n   PE that does not carry data passed to the user.\
    \  This is accomplished\n   with SCTP by using a PPID to separate the ASAP messages\
    \ (Cookie and\n   Business Card) from normal data messages.\n   If the PU's ASAP\
    \ Endpoint detects a failure and initiates a failover\n   to a different PE, it\
    \ SHOULD send the latest received cookie\n   parameter in an ASAP_COOKIE_ECHO\
    \ message to the new PE as the first\n   message on the control channel.  Upper\
    \ layers may be involved in the\n   failover procedure.\n   The cookie handling\
    \ procedure can be used for state sharing.\n   Therefore, a cookie should be signed\
    \ by the sending PE ASAP Endpoint\n   and the cookie should be verified by the\
    \ receiving PE's ASAP\n   Endpoint.  The details of the verification procedure\
    \ are out of scope\n   for this document.  It is only important that the PU always\
    \ stores\n   the last received Cookie parameter and sends that back unmodified\
    \ in\n   case of a PE failure.\n"
- title: 3.9.  Business Card Handling Procedures
  contents:
  - "3.9.  Business Card Handling Procedures\n   When communication begins between\
    \ a PU and a PE, either of which\n   could be part of a PU/PE combination (i.e.,\
    \ a message is sent between\n   the entities), a PE should always send an ASAP_BUSINESS_CARD\
    \ message\n   to a PU.  A PU should send an ASAP_BUSINESS_CARD message to a PE\
    \ only\n   if it is part of a PU/PE combination.  An ASAP_BUSINESS_CARD message\n\
    \   MUST ONLY be sent if a control channel exists between a PU and PE.\n   After\
    \ communication has been established between a PE and PU, a new\n   ASAP_BUSINESS_CARD\
    \ message may be sent at any time by either entity\n   to update its failover\
    \ order.\n   The ASAP_BUSINESS_CARD message serves two purposes.  First, it lists\n\
    \   the pool handle.  For a PU that is part of a PU/PE combination that\n   is\
    \ contacting a PE, this is essential so that the PE learns the pool\n   handle\
    \ of the PU/PE combination requesting service.  Secondly, the\n   ASAP_BUSINESS_CARD\
    \ message tells the receiving entity a failover\n   order that is recommended\
    \ to follow.  This should facilitate\n   rendezvous between entities that have\
    \ been working together, as well\n   as to control the load redistribution upon\
    \ the failure of any PE.\n   Upon receipt of an ASAP_BUSINESS_CARD message (see\
    \ Section 2.2.13),\n   the receiving ASAP Endpoint SHOULD:\n   BC1)  Unpack the\
    \ message, and if no entry exists in the translation\n      cache of the receiving\
    \ ASAP Endpoint for the pool handle listed\n      within the ASAP_BUSINESS_CARD\
    \ message, perform an\n      ASAP_HANDLE_RESOLUTION for that pool handle.  If\
    \ the translation\n      cache does hold an entry for the pool handle, then it\
    \ may be\n      necessary to update the peer endpoint.\n   BC2)  Unpack the message\
    \ and populate a preferred list for failover\n      order.  If the peer's PE should\
    \ fail, this preferred list will be\n      used to guide the ASAP Endpoint in\
    \ the selection of an alternate\n      PE.\n"
- title: 4.  Roles of Endpoints
  contents:
  - "4.  Roles of Endpoints\n   A PU MUST implement the handling of ASAP_HANDLE_RESOLUTION\
    \ and\n   ASAP_HANDLE_RESOLUTION_RESPONSE messages.  Furthermore, it MUST\n  \
    \ support the handling of ASAP_ERROR messages.  It MAY implement the\n   handling\
    \ of ASAP_COOKIE, ASAP_COOKIE_ECHO, and ASAP_BUSINESS_CARD\n   messages.  It MAY\
    \ also implement the handling of ASAP_SERVER_ANNOUNCE\n   messages.\n   A PE MUST\
    \ implement the handling of ASAP_REGISTRATION,\n   ASAP_DEREGISTRATION, ASAP_REGISTRATION_RESPONSE,\
    \ and\n   ASAP_DEREGISTRATION_RESPONSE messages.  Furthermore, it MUST support\n\
    \   the handling of ASAP_ENDPOINT_KEEP_ALIVE,\n   ASAP_ENDPOINT_KEEP_ALIVE_ACK,\
    \ ASAP_ENDPOINT_UNREACHABLE, and\n   ASAP_ERROR messages.  It SHOULD support the\
    \ handling of ASAP_COOKIE,\n   ASAP_COOKIE_ECHO, and ASAP_BUSINESS_CARD messages.\
    \  Furthermore, it\n   MAY support the handling of ASAP_SERVER_ANNOUNCE messages.\n\
    \   An ENRP server MUST implement the handling of ASAP_REGISTRATION,\n   ASAP_DEREGISTRATION,\
    \ ASAP_REGISTRATION_RESPONSE, and\n   ASAP_DEREGISTRATION_RESPONSE messages. \
    \ Furthermore, it MUST support\n   the handling of ASAP_ENDPOINT_KEEP_ALIVE,\n\
    \   ASAP_ENDPOINT_KEEP_ALIVE_ACK, ASAP_ENDPOINT_UNREACHABLE, and\n   ASAP_ERROR\
    \ messages.  Furthermore, it MAY support the handling of\n   ASAP_SERVER_ANNOUNCE\
    \ messages.\n   If a node acts as a PU and a PE, it MUST fulfill both roles.\n"
- title: 5.  SCTP Considerations
  contents:
  - "5.  SCTP Considerations\n   Each ASAP message is considered as an SCTP user message.\
    \  The PPID\n   registered for ASAP SHOULD be used.  The SCTP port used at the\
    \ ENRP\n   server might be preconfigured or announced in the\n   ASAP_SERVER_ANNOUNCE\
    \ message or the well-known ASAP port.\n   ASAP messages belonging to the control\
    \ channel MUST be sent using the\n   PPID registered for ASAP.  Messages belonging\
    \ to the data channel\n   MUST NOT use the PPID registered for ASAP.\n"
- title: 6.  The ASAP Interfaces
  contents:
  - "6.  The ASAP Interfaces\n   This chapter will focus primarily on the primitives\
    \ and notifications\n   that form the interface between the ASAP User and ASAP\
    \ and that\n   between ASAP and its lower-layer transport protocol (e.g., SCTP).\n\
    \   Note, the following primitive and notification descriptions are shown\n  \
    \ for illustrative purposes.  We believe that including these\n   descriptions\
    \ in this document is important to the understanding of\n   the operation of many\
    \ aspects of ASAP; but an ASAP implementation is\n   not required to use the exact\
    \ syntax described in this section.\n   An ASAP User passes primitives to the\
    \ ASAP sub-layer to request\n   certain actions.  Upon the completion of those\
    \ actions or upon the\n   detection of certain events, the ASAP layer will notify\
    \ the ASAP\n   User.\n"
- title: 6.1.  Registration.Request Primitive
  contents:
  - "6.1.  Registration.Request Primitive\n         Format: registration.request(Pool\
    \ Handle,\n                                      User Transport parameter(s))\n\
    \   The Pool Handle parameter contains a NULL terminated ASCII string of\n   fixed\
    \ length.  The optional User Transport parameter(s) indicates\n   specific transport\
    \ parameters and types with which to register.  If\n   this optional parameter\
    \ is left off, then the SCTP endpoint used to\n   communicate with the ENRP server\
    \ is used as the default User\n   Transport parameter.  Note that any IP address\
    \ contained within a\n   User Transport parameter MUST be a bound IP address in\
    \ the SCTP\n   endpoint used to communicate with the ENRP server.\n   The ASAP\
    \ User invokes this primitive to add itself to the\n   handlespace, thus becoming\
    \ a Pool Element of a pool.  The ASAP User\n   must register itself with the ENRP\
    \ server by using this primitive\n   before other ASAP Users using the handlespace\
    \ can send message(s) to\n   this ASAP User by Pool Handle or by PE handle (see\
    \ Sections 6.5.1 and\n   6.5.3).\n   In response to the registration primitive,\
    \ the ASAP Endpoint will\n   send an ASAP_REGISTRATION message to the Home ENRP\
    \ server (see\n   Sections 2.2.1 and 3.1), and start a T2-registration timer.\n"
- title: 6.2.  Deregistration.Request Primitive
  contents:
  - "6.2.  Deregistration.Request Primitive\n         Format: deregistration.request(Pool\
    \ Handle)\n   The ASAP PE invokes this primitive to remove itself from the Server\n\
    \   Pool.  This should be used as a part of the graceful shutdown process\n  \
    \ by the application.\n   An ASAP_DEREGISTRATION message will be sent by the ASAP\
    \ Endpoint to\n   the Home ENRP server (see Sections 2.2.2 and 3.2).\n"
- title: 6.3.  CachePopulateRequest Primitive
  contents:
  - "6.3.  CachePopulateRequest Primitive\n          Format: cache_populate_request([Pool-Handle\
    \ |\n                                        Pool-Element-Handle])\n   If the\
    \ address type is a Pool Handle and a local handle translation\n   cache exists,\
    \ the ASAP Endpoint should initiate a mapping information\n   query by sending\
    \ an ASAP_HANDLE_RESOLUTION message on the Pool handle\n   and updating its local\
    \ cache when the response comes back from the\n   ENRP server.\n   If a Pool-Element-Handle\
    \ is passed, then the Pool Handle is unpacked\n   from the Pool-Element-Handle\
    \ and the ASAP_HANDLE_RESOLUTION message\n   is sent to the ENRP server for resolution.\
    \  When the response message\n   returns from the ENRP server, the local cache\
    \ is updated.\n   Note that if the ASAP service does NOT support a local cache,\
    \ this\n   primitive performs NO action.\n"
- title: 6.4.  CachePurgeRequest Primitive
  contents:
  - "6.4.  CachePurgeRequest Primitive\n      Format: cache_purge_request([Pool-Handle\
    \ | Pool-Element-Handle])\n   If the user passes a Pool Handle and local handle\
    \ translation cache\n   exists, the ASAP Endpoint should remove the mapping information\
    \ on\n   the Pool Handle from its local cache.  If the user passes a Pool-\n \
    \  Element-Handle, then the Pool Handle within is used for the\n   cache_purge_request.\n\
    \   Note that if the ASAP service does NOT support a local cache, this\n   primitive\
    \ performs NO action.\n"
- title: 6.5.  DataSendRequest Primitive
  contents:
  - "6.5.  DataSendRequest Primitive\n         Format: data_send_request(destinationAddress,\
    \ typeOfAddress,\n                                   message, sizeOfMessage, Options);\n\
    \   This primitive requests ASAP to send a message to some specified Pool\n  \
    \ or Pool Element within the current Operational scope.\n   Depending on the address\
    \ type used for the send request, the sender's\n   ASAP Endpoint may perform address\
    \ translation and Pool Element\n   selection before sending the message out. \
    \ This MAY also dictate the\n   creation of a local transport endpoint in order\
    \ to meet the required\n   transport type.\n   The data_send_request primitive\
    \ can take different forms of address\n   types, as described in the following\
    \ sections.\n"
- title: 6.5.1.  Sending to a Pool Handle
  contents:
  - "6.5.1.  Sending to a Pool Handle\n   In this case, the destinationAddress and\
    \ typeOfAddress together\n   indicate a pool handle.\n   This is the simplest\
    \ form of send_data_request primitive.  By\n   default, this directs ASAP to send\
    \ the message to one of the Pool\n   Elements in the specified pool.\n   Before\
    \ sending the message out to the pool, the sender's ASAP\n   endpoint MUST first\
    \ perform a pool handle to address translation.  It\n   may also need to perform\
    \ Pool Element selection if multiple Pool\n   Elements exist in the pool.\n  \
    \ If the sender's ASAP implementation does not support a local cache of\n   the\
    \ mapping information, or if it does not have the mapping\n   information on the\
    \ pool in its local cache, it will transmit an\n   ASAP_HANDLE_RESOLUTION message\
    \ (see Sections 2.2.5 and 3.3) to the\n   current Home ENRP server and MUST hold\
    \ the outbound message in queue\n   while awaiting the response from the ENRP\
    \ server (any further send\n   request to this pool before the ENRP server responds\
    \ SHOULD also be\n   queued).\n   Once the necessary mapping information arrives\
    \ from the ENRP server,\n   the sender's ASAP will:\n   A) map the pool handle\
    \ into a list of transport addresses of the\n      destination PE(s);\n   B) if\
    \ multiple PEs exist in the pool, choose one of them and transmit\n      the message\
    \ to it.  In that case, the choice of the PE is made by\n      the ASAP Endpoint\
    \ of the sender based on the server pooling\n      policy, as discussed in Section\
    \ 6.5.2;\n   C) optionally create any transport endpoint that may be needed to\n\
    \      communicate with the PE selected;\n   D) if no transport association or\
    \ connection exists towards the\n      destination PE, establish any needed transport\
    \ state;\n   E) send out the queued message(s) to the appropriate transport\n\
    \      connection using the appropriate send mechanism (e.g., for SCTP,\n    \
    \  the SEND primitive in [RFC4960] would be used); and,\n   F) if the local cache\
    \ is implemented, append/update the local cache\n      with the mapping information\
    \ received in the ENRP server's\n      response.  Also, record the local transport\
    \ information (e.g., the\n      SCTP association id) if any new transport state\
    \ was created.\n   For more on the ENRP server request procedures see [RFC5353].\n\
    \   Optionally, the ASAP Endpoint of the sender may return a Pool Element\n  \
    \ handle of the selected PE to the application after sending the\n   message.\
    \  This PE handle can then be used for future transmissions to\n   that same PE\
    \ (see Section 6.5.3).\n   Section 3.7 defines the failover procedures for cases\
    \ where the\n   selected PE is found unreachable.\n"
- title: 6.5.2.  Pool Element Selection
  contents:
  - "6.5.2.  Pool Element Selection\n   Each time an ASAP User sends a message to\
    \ a pool that contains more\n   than one PE, the sender's ASAP Endpoint must select\
    \ one of the PEs in\n   the pool as the receiver of the current message.  The\
    \ selection is\n   made according to the current server pooling policy of the\
    \ pool to\n   which the message is sent.\n   Note, no selection is needed if the\
    \ ASAP_SEND_TOALL option is set\n   (see Section 6.5.5).\n   Together with the\
    \ server pooling policy, each PE can also specify a\n   Policy Value for itself\
    \ at the registration time.  The meaning of the\n   Policy Value depends on the\
    \ current server pooling policy of the\n   group.  A PE can also change its Policy\
    \ Value whenever it desires, by\n   re-registering itself with the handlespace\
    \ with a new Policy Value.\n   Re-registration shall be done by simply sending\
    \ another\n   ASAP_REGISTRATION to its Home ENRP server (see Section 2.2.1).\n\
    \   One basic policy is defined in this document; others can be found in\n   [RFC5356]\n"
- title: 6.5.2.1.  Round-Robin Policy
  contents:
  - "6.5.2.1.  Round-Robin Policy\n   When an ASAP Endpoint sends messages by Pool\
    \ Handle and Round-Robin\n   is the current policy of that Pool, the ASAP Endpoint\
    \ of the sender\n   will select the receiver for each outbound message by Round-Robining\n\
    \   through all the registered PEs in that Pool, in an attempt to achieve\n  \
    \ an even distribution of outbound messages.  Note that in a large\n   server\
    \ pool, the ENRP server might not send back all PEs to the ASAP\n   client.  In\
    \ this case, the client or PU will be performing a Round-\n   Robin policy on\
    \ a subset of the entire Pool.\n"
- title: 6.5.3.  Sending to a Pool Element Handle
  contents:
  - "6.5.3.  Sending to a Pool Element Handle\n   In this case, the destinationAddress\
    \ and typeOfAddress together\n   indicate an ASAP Pool Element handle.\n   This\
    \ requests that the ASAP Endpoint deliver the message to the PE\n   identified\
    \ by the Pool Element handle.\n   The Pool Element handle should contain the Pool\
    \ Handle and a\n   destination transport address of the destination PE or the\
    \ Pool\n   Handle and the transport type.  Other implementation dependent\n  \
    \ elements may also be cached in a Pool Element handle.\n   The ASAP Endpoint\
    \ shall use the transport address and transport type\n   to identify the endpoint\
    \ with which to communicate.  If no\n   communication state exists with the peer\
    \ endpoint (and is required by\n   the transport protocol), the ASAP Endpoint\
    \ MAY set up the needed\n   state and then invoke the SEND primitive for the particular\
    \ transport\n   protocol to send the message to the PE.\n   In addition, if a\
    \ local translation cache is supported, the endpoint\n   will:\n   A) send out\
    \ the message to the transport address (or association id)\n      designated by\
    \ the PE handle.\n   B) determine if the Pool Handle is in the local cache.\n\
    \      If it is *not*, the endpoint will:\n      i) ask the Home ENRP server for\
    \ handle resolution on the pool\n         handle by sending an ASAP_HANDLE_RESOLUTION\
    \ message (see\n         Section 2.2.5), and\n      ii)  use the response to update\
    \ the local cache.\n         If the pool handle is in the cache, the endpoint\
    \ will only\n         update the pool handle if the cache is stale.  A stale cache\
    \ is\n         indicated by it being older than the protocol parameter\n     \
    \    'stale.cache.value' (see Section 7.2).\n   Sections 3.5 and 6.9 define the\
    \ failover procedures for cases where\n   the PE pointed to by the Pool Element\
    \ handle is found to be\n   unreachable.\n   Optionally, the ASAP Endpoint may\
    \ return the actual Pool Element\n   handle to which the message was sent (this\
    \ may be different from the\n   Pool Element handle specified when the primitive\
    \ is invoked, due to\n   the possibility of automatic failover).\n"
- title: 6.5.4.  Send by Transport Address
  contents:
  - "6.5.4.  Send by Transport Address\n   In this case, the destinationAddress and\
    \ typeOfAddress together\n   indicate a transport address and transport type.\n\
    \   This directs the sender's ASAP Endpoint to send the message out to\n   the\
    \ specified transport address.\n   No endpoint failover is supported when this\
    \ form of send request is\n   used.  This form of send request effectively bypasses\
    \ the ASAP\n   endpoint.\n"
- title: 6.5.5.  Message Delivery Options
  contents:
  - "6.5.5.  Message Delivery Options\n   The Options parameter passed in the various\
    \ forms of the above\n   data_send_request primitive gives directions to the sender's\
    \ ASAP\n   endpoint on special handling of the message delivery.\n   The value\
    \ of the Options parameter is generated by bit-wise \"OR\"ing\n   of the following\
    \ pre-defined constants:\n   ASAP_USE_DEFAULT: 0x0000  Use default setting.\n\
    \   ASAP_SEND_FAILOVER: 0x0001  Enables PE failover on this message.  In\n   \
    \   the case where the first selected PE or the PE pointed to by the\n      PE\
    \ handle is found unreachable, the sender's ASAP Endpoint SHOULD\n      re-select\
    \ an alternate PE from the same pool if one exists, and\n      silently re-send\
    \ the message to this newly selected endpoint.\n      Note that this is a best-effort\
    \ service.  Applications should be\n      aware that messages can be lost during\
    \ the failover process, even\n      if the underlying transport supports retrieval\
    \ of unacknowledged\n      data (e.g., SCTP).  (Example: messages acknowledged\
    \ by the SCTP\n      layer at a PE, but not yet read by the PE when a PE failure\n\
    \      occurs.)  In the case where the underlying transport does not\n      support\
    \ such retrieval (e.g., TCP), any data already submitted by\n      ASAP to the\
    \ transport layer may be lost upon failover.\n   ASAP_SEND_NO_FAILOVER: 0x0002\
    \  This option prohibits the sender's\n      ASAP Endpoint from re-sending the\
    \ message to any alternate PE in\n      case that the first selected PE, or the\
    \ PE pointed to by the PE\n      handle, is found to be unreachable.  Instead,\
    \ the sender's ASAP\n      Endpoint shall notify its upper layer about the unreachability\n\
    \      with an Error.Report and return any unsent data.\n   ASAP_SEND_TO_LAST:\
    \ 0x0004  This option requests that the sender's\n      ASAP Endpoint send the\
    \ message to the same PE in the pool to which\n      the previous message destined\
    \ to this pool was sent.\n   ASAP_SEND_TO_ALL: 0x0008  When sending by Pool Handle,\
    \ this option\n      directs the sender's ASAP endpoint to send a copy of the\
    \ message\n      to all the PEs, except for the sender itself if the sender is\
    \ a PE\n      in that pool.\n   ASAP_SEND_TO_SELF: 0x0010  This option only applies\
    \ in combination\n      with the ASAP_SEND_TO_ALL option.  It permits the sender's\
    \ ASAP\n      Endpoint to also deliver a copy of the message to itself if the\n\
    \      sender is a PE of the pool (i.e., loop-back).\n   ASAP_SCTP_UNORDER: 0x1000\
    \  This option requests that the transport\n      layer send the current message\
    \ using un-ordered delivery (note the\n      underlying transport must support\
    \ un-ordered delivery for this\n      option to be effective).\n"
- title: 6.6.  Data.Received Notification
  contents:
  - "6.6.  Data.Received Notification\n         Format: data.received(messageReceived,\
    \ sizeOfMessage,\n                               senderAddress, typeOfAddress)\n\
    \   When a new user message is received, the ASAP Endpoint of the\n   receiver\
    \ uses this notification to pass the message to its upper\n   layer.\n   Along\
    \ with the message being passed, the ASAP Endpoint of the\n   receiver should\
    \ also indicate to its upper layer the message senders\n   address.  The sender's\
    \ address can be in the form of either an SCTP\n   association id, TCP transport\
    \ address, UDP transport address, or an\n   ASAP Pool Element handle.\n   A) If\
    \ the handle translation local cache is implemented at the\n      receiver's ASAP\
    \ Endpoint, a reverse mapping from the sender's IP\n      address to the pool\
    \ handle should be performed, and if the mapping\n      is successful, the sender's\
    \ ASAP Pool Element handle should be\n      constructed and passed in the senderAddress\
    \ field.\n   B) If there is no local cache or the reverse mapping is not\n   \
    \   successful, the SCTP association id or other transport specific\n      identification\
    \ (if SCTP is not being used) should be passed in the\n      senderAddress field.\n"
- title: 6.7.  Error.Report Notification
  contents:
  - "6.7.  Error.Report Notification\n         Format: error.report(destinationAddress,\
    \ typeOfAddress,\n                              failedMessage, sizeOfMessage)\n\
    \   An error.report should be generated to notify the ASAP User about\n   failed\
    \ message delivery as well as other abnormalities.\n   The destinationAddress\
    \ and typeOfAddress together indicate to whom\n   the message was originally sent.\
    \  The address type can be either an\n   ASAP Pool Element handle, association\
    \ id, or a transport address.\n   The original message (or the first portion of\
    \ it if the message is\n   too big) and its size should be passed in the failedMessage\
    \ and\n   sizeOfMessage fields, respectively.\n"
- title: 6.8.  Examples
  contents:
  - "6.8.  Examples\n   These examples assume an underlying SCTP transport between\
    \ the PE and\n   PU.  Other transports are possible, but SCTP is utilized in the\n\
    \   examples for illustrative purposes.  Note that all communication\n   between\
    \ the PU and ENRP server and the PE and ENRP servers would be\n   using SCTP.\n"
- title: 6.8.1.  Send to a New Pool
  contents:
  - "6.8.1.  Send to a New Pool\n   This example shows the event sequence when a Pool\
    \ User sends the\n   message \"hello\" to a pool that is not in the local translation\
    \ cache\n   (assuming local caching is supported).\n     ENRP Server         \
    \              PU         new-handle:PEx\n       |                           \
    \     |                 |\n       |                              +---+       \
    \        |\n       |                              | 1 |               |\n    \
    \   |2. ASAP_HANDLE_RESOLUTION     +---+               |\n       |<-------------------------------|\
    \                 |\n       |                              +---+             \
    \  |\n       |                              | 3 |               |\n       |4.\
    \ ASAP_HANDLE_RESOLUTION_RSP +---+               |\n       |------------------------------->|\
    \                 |\n       |                              +---+             \
    \  |\n       |                              | 5 |               |\n       |  \
    \                            +---+  6. \"hello1\"  |\n       |               \
    \                 |---------------->|\n       |                              \
    \  |                 |\n   1) The user at PU invokes:\n      data_send_request(\"\
    new-handle\", handle-type, \"hello1\", 6, 0);\n      The ASAP Endpoint, in response,\
    \ looks up the pool \"new-handle\" in\n      its local cache, but fails to find\
    \ it.\n   2) The ASAP Endpoint of the PU queues the message and sends an\n   \
    \   ASAP_HANDLE_RESOLUTION request to the ENRP server asking for all\n      information\
    \ about pool \"new-handle\".\n   3) A T1-ENRPrequest timer is started while the\
    \ ASAP Endpoint is\n      waiting for the response from the ENRP server.\n   4)\
    \ The ENRP server responds to the query with an\n      ASAP_HANDLE_RESOLUTION_RESPONSE\
    \ message that contains all the\n      information about pool \"new-handle\".\n\
    \   5) ASAP at PU cancels the T1-ENRPrequest timer and populate its local\n  \
    \    cache with information on pool \"new-handle\".\n   6) Based on the server\
    \ pooling policy of pool \"new-handle\", ASAP at\n      PU selects the destination\
    \ PE (PEx), sets up, if necessary, an\n      SCTP association towards PEx (explicitly\
    \ or implicitly), and sends\n      out the queued \"hello1\" user message.\n"
- title: 6.8.2.  Send to a Cached Pool Handle
  contents:
  - "6.8.2.  Send to a Cached Pool Handle\n   This shows the event sequence when the\
    \ ASAP User PU sends another\n   message to the pool \"new-handle\" after what\
    \ happened in\n   Section 6.8.1.\n     ENRP Server                       PU  \
    \       new-handle:PEx\n       |                                |            \
    \     |\n       |                              +---+               |\n       |\
    \                              | 1 |               |\n       |               \
    \               +---+  2. \"hello2\"  |\n       |                            \
    \    |---------------->|\n       |                                |          \
    \       |\n   1) The user at PU invokes:\n      data_send_request(\"new-handle\"\
    , handle-type, \"hello2\", 6, 0);\n      The ASAP Endpoint, in response, looks\
    \ up the pool \"new-handle\" in\n      its local cache and finds the mapping information.\n\
    \   2) Based on the server pooling policy of \"new-handle\", ASAP at PU\n    \
    \  selects the PE (assuming EPx is selected again), and sends out\n      \"hello2\"\
    \ message (assuming the SCTP association is already set\n      up).\n"
- title: 6.9.  PE Send Failure
  contents:
  - "6.9.  PE Send Failure\n   When the ASAP Endpoint in a PE or PU attempts to send\
    \ a message to a\n   PE and fails, the failed sender will report the event as\
    \ described in\n   Section 3.5.\n   Additional primitives are also defined in\
    \ this section to support\n   those user applications that do not wish to use\
    \ ASAP as the actual\n   transport.\n"
- title: 6.9.1.  Translation.Request Primitive
  contents:
  - "6.9.1.  Translation.Request Primitive\n           Format: translation.request(Pool-Handle)\n\
    \   If the address type is a Pool Handle and a local handle translation\n   cache\
    \ exists, the ASAP Endpoint should look within its translation\n   cache and return\
    \ the current known transport types, ports, and\n   addresses to the caller.\n\
    \   If the Pool Handle does not exist in the local handle cache or no\n   handle\
    \ cache exists, the ASAP Endpoint will send an\n   ASAP_HANDLE_RESOLUTION request\
    \ using the Pool Handle.  Upon\n   completion of the handle resolution, the ASAP\
    \ Endpoint should\n   populate the local handle cache (if a local handle cache\
    \ is\n   supported) and return the transport types, ports, and addresses to\n\
    \   the caller.\n"
- title: 6.9.2.  Transport.Failure Primitive
  contents:
  - "6.9.2.  Transport.Failure Primitive\n       Format: transport.failure(Pool-Handle,\
    \ Transport-address)\n   If an external user encounters a failure in sending to\
    \ a PE and is\n   *not* using ASAP, it can use this primitive to report the failure\
    \ to\n   the ASAP endpoint.  ASAP will send an ASAP_ENDPOINT_UNREACHABLE to\n\
    \   the \"Home\" ENRP server in response to this primitive.  Note ASAP\n   SHOULD\
    \ NOT send an ASAP_ENDPOINT_UNREACHABLE *unless* the user has\n   actually made\
    \ a previous request to send data to the PE.\n"
- title: 7.  Timers, Variables, and Thresholds
  contents:
  - "7.  Timers, Variables, and Thresholds\n   The following is a summary of the timers,\
    \ variables, and pre-set\n   protocol constants used in ASAP.\n"
- title: 7.1.  Timers
  contents:
  - "7.1.  Timers\n   T1-ENRPrequest -  A timer started when a request is sent by\
    \ ASAP to\n      the ENRP server (providing application information is queued).\n\
    \      Normally set to 15 seconds.\n   T2-registration -  A timer started when\
    \ sending an ASAP_REGISTRATION\n      request to the Home ENRP server, normally\
    \ set to 30 seconds.\n   T3-deregistration -  A timer started when sending a de-registration\n\
    \      request to the Home ENRP server, normally set to 30 seconds.\n   T4-reregistration\
    \ -  This timer is started after successful\n      registration into the ENRP\
    \ handlespace and is used to cause a re-\n      registration at a periodic interval.\
    \  This timer is normally set\n      to 10 minutes or 20 seconds less than the\
    \ Lifetime parameter used\n      in the registration request (whichever is less).\n\
    \   T5-Serverhunt -  This timer is used during the ENRP Server Hunt\n      procedure\
    \ and is normally set to 10 seconds.\n   T6-Serverannounce -  This timer gives\
    \ the time between the sending of\n      consecutive ASAP_SERVER_ANNOUNCE messages.\
    \  It is normally set to\n      1 second.\n   T7-ENRPoutdate -  This timer gives\
    \ the time a server announcement is\n      valid.  It is normally set to 5 seconds.\n"
- title: 7.2.  Variables
  contents:
  - "7.2.  Variables\n   stale_cache_value -  A threshold variable that indicates\
    \ how long a\n      cache entry is valid for.\n"
- title: 7.3.  Thresholds
  contents:
  - "7.3.  Thresholds\n   MAX-REG-ATTEMPT -  The maximum number of registration attempts\
    \ to be\n      made before a server hunt is issued.  The default value of this\
    \ is\n      set to 2.\n   MAX-REQUEST-RETRANSMIT -  The maximum number of attempts\
    \ to be made\n      when requesting information from the local ENRP server before\
    \ a\n      server hunt is issued.  The default value for this is 2.\n   RETRAN-MAX\
    \ -  This value represents the maximum time between\n      registration attempts\
    \ and puts a ceiling on how far the\n      registration timer will back off. \
    \ The default value for this is\n      normally set to 60 seconds.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document (RFC 5352) is the reference for all\
    \ registrations\n   described in this section.  All registrations have been listed\
    \ on the\n   Reliable Server Pooling (RSerPool) Parameters page.\n"
- title: 8.1.  A New Table for ASAP Message Types
  contents:
  - "8.1.  A New Table for ASAP Message Types\n   ASAP Message Types are maintained\
    \ by IANA.  Fourteen initial values\n   have been assigned by IANA as described\
    \ in Figure 1.  IANA created a\n   new table, \"ASAP Message Types\":\n   Type\
    \       Message Name                     Reference\n   -----      -------------------------\
    \        ---------\n   0x00       (Reserved by IETF)               RFC 5352\n\
    \   0x01       ASAP_REGISTRATION                RFC 5352\n   0x02       ASAP_DEREGISTRATION\
    \              RFC 5352\n   0x03       ASAP_REGISTRATION_RESPONSE       RFC 5352\n\
    \   0x04       ASAP_DEREGISTRATION_RESPONSE     RFC 5352\n   0x05       ASAP_HANDLE_RESOLUTION\
    \           RFC 5352\n   0x06       ASAP_HANDLE_RESOLUTION_RESPONSE  RFC 5352\n\
    \   0x07       ASAP_ENDPOINT_KEEP_ALIVE         RFC 5352\n   0x08       ASAP_ENDPOINT_KEEP_ALIVE_ACK\
    \     RFC 5352\n   0x09       ASAP_ENDPOINT_UNREACHABLE        RFC 5352\n   0x0a\
    \       ASAP_SERVER_ANNOUNCE             RFC 5352\n   0x0b       ASAP_COOKIE \
    \                     RFC 5352\n   0x0c       ASAP_COOKIE_ECHO               \
    \  RFC 5352\n   0x0d       ASAP_BUSINESS_CARD               RFC 5352\n   0x0e\
    \       ASAP_ERROR                       RFC 5352\n   0x0b-0xff  (Available for\
    \ Assignment)       RFC 5352\n   Requests to register an ASAP Message Type in\
    \ this table should be\n   sent to IANA.  The number must be unique.  The \"Specification\n\
    \   Required\" policy of [RFC5226] MUST be applied.\n"
- title: 8.2.  Port Numbers
  contents:
  - "8.2.  Port Numbers\n   The references for the already assigned port numbers\n\
    \      asap-tcp 3863/tcp\n      asap-udp 3863/udp\n      asap-sctp 3863/sctp\n\
    \      asap-tcp-tls 3864/tcp\n      asap-sctp-tls 3864/sctp\n   have been updated\
    \ to RFC 5352.\n"
- title: 8.3.  SCTP Payload Protocol Identifier
  contents:
  - "8.3.  SCTP Payload Protocol Identifier\n   The reference for the already assigned\
    \ ASAP payload protocol\n   identifier 11 has been updated to RFC 5352.\n"
- title: 8.4.  Multicast Addresses
  contents:
  - "8.4.  Multicast Addresses\n   IANA has assigned an IPv4 multicast address (224.0.1.185)\
    \ and an IPv6\n   multicast address (FF0X:0:0:0:0:0:0:133).  The IPv4 address\
    \ is part\n   of the Internetwork Control Block (224.0.1/24).\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   We present a summary of the of the threats to\
    \ the RSerPool\n   architecture and describe security requirements in response\
    \ in order\n   to mitigate the threats.  Next, we present the security mechanisms,\n\
    \   based on TLS, that are implementation requirements in response to the\n  \
    \ threats.  Finally, we present a chain-of-trust argument that examines\n   critical\
    \ data paths in RSerPool and shows how these paths are\n   protected by the TLS\
    \ implementation.\n"
- title: 9.1.  Summary of RSerPool Security Threats
  contents:
  - "9.1.  Summary of RSerPool Security Threats\n   \"Threats Introduced by Reliable\
    \ Server Pooling (RSerPool) and\n   Requirements for Security in Response to Threats\"\
    \ [RFC5355] describes\n   the threats to the RSerPool architecture in detail and\
    \ lists the\n   security requirements in response to each threat.  From the threats\n\
    \   described in this document, the security services required for the\n   RSerPool\
    \ protocol are enumerated below.\n   Threat 1) PE registration/de-registration\
    \ flooding or spoofing.\n   -----------\n   Security mechanism in response: ENRP\
    \ server authenticates the PE.\n   Threat 2) PE registers with a malicious ENRP\
    \ server.\n   -----------\n   Security mechanism in response: PE authenticates\
    \ the ENRP server.\n   Threats 1 and 2, taken together, result in mutual authentication\
    \ of\n   the ENRP server and the PE.\n   Threat 3) Malicious ENRP server joins\
    \ the ENRP server pool.\n   -----------\n   Security mechanism in response: ENRP\
    \ servers mutually authenticate.\n   Threat 4) A PU communicates with a malicious\
    \ ENRP server for handle\n   resolution.\n   -----------\n   Security mechanism\
    \ in response: The PU authenticates the ENRP server.\n   Threat 5) Replay attack.\n\
    \   -----------\n   Security mechanism in response: Security protocol that has\
    \ protection\n   from replay attacks.\n   Threat 6) Corrupted data that causes\
    \ a PU to have misinformation\n   concerning a pool handle resolution.\n   -----------\n\
    \   Security mechanism in response: Security protocol that supports\n   integrity\
    \ protection.\n   Threat 7) Eavesdropper snooping on handlespace information.\n\
    \   -----------\n   Security mechanism in response: Security protocol that supports\
    \ data\n   confidentiality.\n   Threat 8) Flood of ASAP_ENDPOINT_UNREACHABLE messages\
    \ from the PU to\n   ENRP server.\n   -----------\n   Security mechanism in response:\
    \ ASAP must control the number of ASAP\n   Endpoint unreachable messages transmitted\
    \ from the PU to the ENRP\n   server.\n   Threat 9) Flood of ASAP_ENDPOINT_KEEP_ALIVE\
    \ messages to the PE from\n   the ENRP server.\n   -----------\n   Security mechanism\
    \ in response: ENRP server must control the number\n   of ASAP_ENDPOINT_KEEP_ALIVE\
    \ messages to the PE.\n   To summarize, the threats 1-7 require security mechanisms\
    \ that\n   support authentication, integrity, data confidentiality, and\n   protection\
    \ from replay attacks.\n   For RSerPool we need to authenticate the following:\n\
    \      PU <----  ENRP server (PU authenticates the ENRP server)\n      PE <---->\
    \ ENRP server (mutual authentication)\n      ENRP server <-----> ENRP server (mutual\
    \ authentication)\n"
- title: 9.2.  Implementing Security Mechanisms
  contents:
  - "9.2.  Implementing Security Mechanisms\n   We do not define any new security\
    \ mechanisms specifically for\n   responding to threats 1-7.  Rather, we use an\
    \ existing IETF security\n   protocol, specifically [RFC3237], to provide the\
    \ security services\n   required.  TLS supports all these requirements and MUST\
    \ be\n   implemented.  The TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite MUST be\n\
    \   supported, at a minimum, by implementers of TLS for RSerPool.  For\n   purposes\
    \ of backwards compatibility, ENRP SHOULD support\n   TLS_RSA_WITH_3DES_EDE_CBC_SHA.\
    \  Implementers MAY also support any\n   other IETF-approved ciphersuites.\n \
    \  ENRP servers, PEs, and PUs MUST implement TLS.  ENRP servers and PEs\n   MUST\
    \ support mutual authentication using PSK (pre-shared-key).  ENRP\n   servers\
    \ MUST support mutual authentication among themselves using\n   PSK.  PUs MUST\
    \ authenticate ENRP servers using certificates.\n   TLS with PSK is mandatory\
    \ to implement as the authentication\n   mechanism for ENRP to ENRP authentication\
    \ and PE to ENRP\n   authentication.  For PSK, having a pre-shared-key constitutes\n\
    \   authorization.  The network administrators of a pool need to decide\n   which\
    \ nodes are authorized to participate in the pool.  The\n   justification for\
    \ PSK is that we assume that one administrative\n   domain will control and manage\
    \ the server pool.  This allows for PSK\n   to be implemented and managed by a\
    \ central security administrator.\n   TLS with certificates is mandatory to implement\
    \ as the authentication\n   mechanism for PUs to the ENRP server.  PUs MUST authenticate\
    \ ENRP\n   servers using certificates.  ENRP servers MUST possess a site\n   certificate\
    \ whose subject corresponds to their canonical hostname.\n   PUs MAY have certificates\
    \ of their own for mutual authentication with\n   TLS, but no provisions are set\
    \ forth in this document for their use.\n   All RSerPool Elements that support\
    \ TLS MUST have a mechanism for\n   validating certificates received during TLS\
    \ negotiation; this entails\n   possession of one or more root certificates issued\
    \ by certificate\n   authorities (preferably, well-known distributors of site\
    \ certificates\n   comparable to those that issue root certificates for web browsers).\n\
    \   In order to prevent man-in-the-middle attacks, the client MUST verify\n  \
    \ the server's identity (as presented in the server's Certificate\n   message).\
    \  The client's understanding of the server's identity\n   (typically, the identity\
    \ used to establish the transport connection)\n   is called the \"reference identity\"\
    .  The client determines the type\n   (e.g., DNS name or IP address) of the reference\
    \ identity and performs\n   a comparison between the reference identity and each\
    \ subjectAltName\n   value of the corresponding type until a match is produced.\
    \  Once a\n   match is produced, the server's identity has been verified, and\
    \ the\n   server identity check is complete.  Different subjectAltName types\n\
    \   are matched in different ways.  The client may map the reference\n   identity\
    \ to a different type prior to performing a comparison.\n   Mappings may be performed\
    \ for all available subjectAltName types to\n   which the reference identity can\
    \ be mapped; however, the reference\n   identity should only be mapped to types\
    \ for which the mapping is\n   either inherently secure (e.g., extracting the\
    \ DNS name from a URI to\n   compare with a subjectAltName of type dNSName) or\
    \ for which the\n   mapping is performed in a secure manner (e.g., using DNS Security\n\
    \   (DNSSEC), or using user- or admin-configured host-to-address/\n   address-to-host\
    \ lookup tables).\n   If the server identity check fails, user-oriented clients\
    \ SHOULD\n   either notify the user or close the transport connection and indicate\n\
    \   that the server's identity is suspect.  Automated clients SHOULD\n   close\
    \ the transport connection and then return or log an error\n   indicating that\
    \ the server's identity is suspect, or both.  Beyond\n   the server identity check\
    \ described in this section, clients should\n   be prepared to do further checking\
    \ to ensure that the server is\n   authorized to provide the service it is requested\
    \ to provide.  The\n   client may need to make use of local policy information\
    \ in making\n   this determination.\n   If the reference identity is an internationalized\
    \ domain name,\n   conforming implementations MUST convert it to the ASCII Compatible\n\
    \   Encoding (ACE) format, as specified in Section 4 of [RFC3490], before\n  \
    \ comparison with subjectAltName values of type dNSName.  Specifically,\n   conforming\
    \ implementations MUST perform the conversion operation\n   specified in Section\
    \ 4 of [RFC3490] as follows: * in step 1, the\n   domain name SHALL be considered\
    \ a \"stored string\"; * in step 3, set\n   the flag called \"UseSTD3ASCIIRules\"\
    ; * in step 4, process each label\n   with the \"ToASCII\" operation; and * in\
    \ step 5, change all label\n   separators to U+002E (full stop).\n   After performing\
    \ the \"to-ASCII\" conversion, the DNS labels and names\n   MUST be compared for\
    \ equality, according to the rules specified in\n   Section 3 of RFC 3490.  The\
    \ '*' (ASCII 42) wildcard character is\n   allowed in subjectAltName values of\
    \ type dNSName, and then, only as\n   the left-most (least significant) DNS label\
    \ in that value.  This\n   wildcard matches any left-most DNS label in the server\
    \ name.  That\n   is, the subject *.example.com matches the server names a.example.com\n\
    \   and b.example.com, but does not match example.com or a.b.example.com.\n  \
    \ When the reference identity is an IP address, the identity MUST be\n   converted\
    \ to the \"network byte order\" octet string representation in\n   [RFC0791] and\
    \ [RFC2460].  For IP version 4, as specified in RFC 791,\n   the octet string\
    \ will contain exactly four octets.  For IP version 6,\n   as specified in RFC\
    \ 2460, the octet string will contain exactly\n   sixteen octets.  This octet\
    \ string is then compared against\n   subjectAltName values of type iPAddress.\
    \  A match occurs if the\n   reference identity octet string and value octet strings\
    \ are\n   identical.\n   After a TLS layer is established in a session, both parties\
    \ are to\n   independently decide whether or not to continue based on local policy\n\
    \   and the security level achieved.  If either party decides that the\n   security\
    \ level is inadequate for it to continue, it SHOULD remove the\n   TLS layer immediately\
    \ after the TLS (re)negotiation has completed\n   (see RFC 4511)[RFC4511].  Implementations\
    \ may re-evaluate the\n   security level at any time and, upon finding it inadequate,\
    \ should\n   remove the TLS layer.\n   Implementations MUST support TLS with SCTP,\
    \ as described in [RFC3436]\n   or TLS over TCP, as described in [RFC5246].  When\
    \ using TLS/SCTP we\n   must ensure that RSerPool does not use any features of\
    \ SCTP that are\n   not available to a TLS/SCTP user.  This is not a difficult\
    \ technical\n   problem, but simply a requirement.  When describing an API of\
    \ the\n   RSerPool lower layer, we also have to take into account the\n   differences\
    \ between TLS and SCTP.\n   Threat 8 requires the ASAP protocol to limit the number\
    \ of\n   ASAP_ENDPOINT_UNREACHABLE messages (see Section 3.5) to the ENRP\n  \
    \ server.\n   Threat 9 requires the ENRP protocol to limit the number of\n   ASAP_ENDPOINT_KEEP_ALIVE\
    \ messages from the ENRP server to the PE (see\n   [RFC5353]).\n   There is no\
    \ security mechanism defined for the multicast\n   announcements.  Therefore,\
    \ a receiver of such an announcement cannot\n   consider the source address of\
    \ such a message to be a trustworthy\n   address of an ENRP server.  A receiver\
    \ must also be prepared to\n   receive a large number of multicast announcements\
    \ from attackers.\n"
- title: 9.3.  Chain of Trust
  contents:
  - "9.3.  Chain of Trust\n   Security is mandatory to implement in RSerPool and is\
    \ based on TLS\n   implementation in all three architecture components that comprise\n\
    \   RSerPool -- namely PU, PE, and ENRP server.  We define an ENRP server\n  \
    \ that uses TLS for all communication and authenticates ENRP peers and\n   PE\
    \ registrants to be a secured ENRP server.\n   Here is a description of all possible\
    \ data paths and a description of\n   the security.\n   PU <---> secured ENRP\
    \ server (authentication of ENRP server;\n            queries over TLS)\n   PE\
    \ <---> secured ENRP server (mutual authentication;\n            registration/de-registration\
    \ over TLS)\n   secured ENRP server <---> secured ENRP server (mutual authentication;\n\
    \            database updates using TLS)\n   If all components of the system authenticate\
    \ and communicate using\n   TLS, the chain of trust is sound.  The root of the\
    \ trust chain is the\n   ENRP server.  If that is secured using TLS, then security\
    \ will be\n   enforced for all ENRP and PE components that try to connect to it.\n\
    \   Summary of interaction between secured and unsecured components: If\n   the\
    \ PE does not use TLS and tries to register with a secure ENRP\n   server, it\
    \ will receive an error message response indicated as an\n   error due to security\
    \ considerations and the registration will be\n   rejected.  If an ENRP server\
    \ that does not use TLS tries to update\n   the database of a secure ENRP server,\
    \ then the update will be\n   rejected.  If a PU does not use TLS and communicates\
    \ with a secure\n   ENRP server, it will get a response with the understanding\
    \ that the\n   response is not secure, as the response can be tampered with in\n\
    \   transit even if the ENRP database is secured.\n   The final case is the PU\
    \ sending a secure request to ENRP.  It might\n   be that ENRP and PEs are not\
    \ secured and this is an allowable\n   configuration.  The intent is to secure\
    \ the communication over the\n   Internet between the PU and the ENRP server.\n\
    \   Summary:\n   RSerPool architecture components can communicate with each other\
    \ to\n   establish a chain of trust.  Secured PE and ENRP servers reject any\n\
    \   communications with unsecured ENRP or PE servers.\n   If the above is enforced,\
    \ then a chain of trust is established for\n   the RSerPool user.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors wish to thank John Loughney, Lyndon Ong,\
    \ Walter Johnson,\n   Thomas Dreibholz, and many others for their invaluable comments\
    \ and\n   feedback.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              September 1981.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC3237]  Tuexen, M., Xie, Q., Stewart, R., Shore, M., Ong, L.,\n\
    \              Loughney, J., and M. Stillman, \"Requirements for Reliable\n  \
    \            Server Pooling\", RFC 3237, January 2002.\n   [RFC3436]  Jungmaier,\
    \ A., Rescorla, E., and M. Tuexen, \"Transport\n              Layer Security over\
    \ Stream Control Transmission Protocol\",\n              RFC 3436, December 2002.\n\
    \   [RFC3490]  Faltstrom, P., Hoffman, P., and A. Costello,\n              \"\
    Internationalizing Domain Names in Applications (IDNA)\",\n              RFC 3490,\
    \ March 2003.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n\
    \   [RFC4511]  Sermersheim, J., \"Lightweight Directory Access Protocol\n    \
    \          (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC4960]  Stewart,\
    \ R., \"Stream Control Transmission Protocol\",\n              RFC 4960, September\
    \ 2007.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n\
    \              May 2008.\n   [RFC5356]  Dreibholz, T. and M. Tuexen, \"Reliable\
    \ Server Pooling\n              Policies\", RFC 5356, September 2008.\n   [RFC5354]\
    \  Stewart, R., Xie, Q., Stillman, M., and M. Tuexen,\n              \"Aggregate\
    \ Server Access Protocol (ASAP) and Endpoint\n              Handlespace Redundancy\
    \ Protocol (ENRP) Parameters\",\n              RFC 5354, September 2008.\n   [RFC5353]\
    \  Xie, Q., Stewart, R., Stillman, M., Tuexen, M., and A.\n              Silverton,\
    \ \"Endpoint Handlespace Redundancy Protocol\n              (ENRP)\", RFC 5353,\
    \ September 2008.\n   [RFC5355]  Stillman, M., Ed., Gopal, R., Guttman, E., Holdrege,\
    \ M.,\n              and S. Sengodan, \"Threats Introduced by Reliable Server\n\
    \              Pooling (RSerPool) and Requirements for Security in\n         \
    \     Response to Threats\", RFC 5355, September 2008.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4086]  Eastlake, D., Schiller, J., and\
    \ S. Crocker, \"Randomness\n              Requirements for Security\", BCP 106,\
    \ RFC 4086, June 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Randall R. Stewart\n   The Resource Group\n   1700 Pennsylvania\
    \ Ave NW\n   Suite 560\n   Washington, D.C.,   20006\n   USA\n   EMail: randall@lakerest.net\n\
    \   Qiaobing Xie\n   The Resource Group\n   1700 Pennsylvania Ave NW\n   Suite\
    \ 560\n   Washington, D.C.,   20006\n   USA\n   Phone: +1 224-465-5954\n   EMail:\
    \ Qiaobing.Xie@gmail.com\n   Maureen Stillman\n   Nokia\n   1167 Peachtree Ct.\n\
    \   Naperville, IL  60540\n   USA\n   EMail: maureen.stillman@nokia.com\n   Michael\
    \ Tuexen\n   Muenster Univ. of Applied Sciences\n   Stegerwaldstr. 39\n   48565\
    \ Steinfurt\n   Germany\n   EMail: tuexen@fh-muenster.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
