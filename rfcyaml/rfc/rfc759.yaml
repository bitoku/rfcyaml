- title: __initial_text__
  contents:
  - "                       INTERNET MESSAGE PROTOCOL\n                          \
    \ Jonathan B. Postel\n                              August 1980\n            \
    \         Information Sciences Institute\n                   University of Southern\
    \ California\n                           4676 Admiralty Way\n                \
    \                               Internet Message Protocol\n                  \
    \         TABLE OF CONTENTS\n    PREFACE ........................................................\
    \ iii\n"
- title: 1.  INTRODUCTION ..................................................... 1
  contents:
  - "1.  INTRODUCTION ..................................................... 1\n  1.1.\
    \  Motivation ................................................... 1\n  1.2.  Scope\
    \ ........................................................ 1\n  1.3.  The Internetwork\
    \ Environment ................................. 2\n  1.4.  Model of Operation\
    \ ........................................... 2\n  1.5.  Interfaces ...................................................\
    \ 4\n"
- title: 2.  FUNCTIONAL DESCRIPTION ........................................... 5
  contents:
  - "2.  FUNCTIONAL DESCRIPTION ........................................... 5\n  2.1.\
    \  Terminology .................................................. 5\n  2.2.  Assumptions\
    \  ................................................. 5\n  2.3.  General Specification\
    \ ........................................ 6\n  2.4.  Mechanisms ...................................................\
    \ 7\n  2.5.  Relation to Other Protocols ................................. 10\n"
- title: 3.  DETAILED SPECIFICATION .......................................... 13
  contents:
  - "3.  DETAILED SPECIFICATION .......................................... 13\n  3.1.\
    \  Overview of Message Structure ............................... 13\n  3.2.  Message\
    \ Structure ........................................... 14\n  3.3.  Identification\
    \ .............................................. 15\n  3.4.  Command .....................................................\
    \ 15\n  3.5.  Document .................................................... 19\n\
    \  3.6.  Message Objects ............................................. 20\n  3.7.\
    \  Data Elements ............................................... 27\n"
- title: 4.  OTHER ISSUES .................................................... 35
  contents:
  - "4.  OTHER ISSUES .................................................... 35\n  4.1.\
    \  Accounting and Billing ...................................... 35\n  4.2.  Addressing\
    \ and Routing ...................................... 36\n  4.3.  Encryption ..................................................\
    \ 37\n"
- title: '5.  The MPM:  A Possible Architecture ............................... 39'
  contents:
  - "5.  The MPM:  A Possible Architecture ............................... 39\n  5.1.\
    \  Interfaces .................................................. 39\n  5.2.  MPM\
    \ Organization ............................................ 40\n"
- title: 6.  EXAMPLES & SCENARIOS ............................................ 45
  contents:
  - "6.  EXAMPLES & SCENARIOS ............................................ 45\n  Example\
    \ 1:  Message Format ........................................ 45\n  Example 2:\
    \  Delivery and Acknowledgment ........................... 47\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Table Of Contents
  contents:
  - 'Table Of Contents

    '
- title: 7.  SPECIFICATION SUMMARY ........................................... 55
  contents:
  - "7.  SPECIFICATION SUMMARY ........................................... 55\n  7.1.\
    \  Message Fields .............................................. 55\n  7.2.  Deliver\
    \ Message ............................................. 58\n  7.3.  Acknowledge\
    \ Message ......................................... 59\n  7.4.  Probe Message\
    \ ............................................... 61\n  7.5.  Response Message\
    \ ............................................ 62\n  7.6.  Cancel Message ..............................................\
    \ 64\n  7.7.  Canceled Message ............................................ 66\n\
    \  7.8.  Data Element Summary ........................................ 68\n"
- title: REFERENCES .......................................................... 69
  contents:
  - "REFERENCES .......................................................... 69\n  \
    \                                             Internet Message Protocol\n    \
    \                            PREFACE\n"
- title: This is the second edition of this specification and should be treated
  contents:
  - 'This is the second edition of this specification and should be treated

    '
- title: as a request for comments, advice, and suggestions.  A great deal of
  contents:
  - 'as a request for comments, advice, and suggestions.  A great deal of

    '
- title: prior work has been done on computer aided message systems and some of
  contents:
  - 'prior work has been done on computer aided message systems and some of

    '
- title: this is listed in the reference section.  This specification was shaped
  contents:
  - 'this is listed in the reference section.  This specification was shaped

    '
- title: by many discussions with members of the ARPA research community, and
  contents:
  - 'by many discussions with members of the ARPA research community, and

    '
- title: others interested in the development of computer aided message systems.
  contents:
  - 'others interested in the development of computer aided message systems.

    '
- title: This document was prepared as part of the ARPA sponsored Internetwork
  contents:
  - 'This document was prepared as part of the ARPA sponsored Internetwork

    '
- title: Concepts Research Project at ISI, with the assistance of Greg Finn,
  contents:
  - 'Concepts Research Project at ISI, with the assistance of Greg Finn,

    '
- title: Suzanne Sluizer, Alan Katz, Paul Mockapetris, and Linda Sato.
  contents:
  - "Suzanne Sluizer, Alan Katz, Paul Mockapetris, and Linda Sato.\n             \
    \                                                 Jon Postel\n"
- title: 'RFC: 759                                                         USC-ISI'
  contents:
  - "RFC: 759                                                         USC-ISI\n  \
    \                                                           August 1980\n    \
    \                   INTERNET MESSAGE PROTOCOL\n                            1.\
    \  INTRODUCTION\n"
- title: This document describes an internetwork message system.  The system is
  contents:
  - 'This document describes an internetwork message system.  The system is

    '
- title: designed to transmit messages between message processing modules
  contents:
  - 'designed to transmit messages between message processing modules

    '
- title: according to formats and procedures specified in this document.  The
  contents:
  - 'according to formats and procedures specified in this document.  The

    '
- title: message processing modules are processes in host computers.  Message
  contents:
  - 'message processing modules are processes in host computers.  Message

    '
- title: processing modules are located in different networks and together
  contents:
  - 'processing modules are located in different networks and together

    '
- title: constitute an internetwork message delivery system.
  contents:
  - 'constitute an internetwork message delivery system.

    '
- title: This document is intended to provide all the information necessary to
  contents:
  - 'This document is intended to provide all the information necessary to

    '
- title: implement a compatible cooperating module of this internetwork message
  contents:
  - 'implement a compatible cooperating module of this internetwork message

    '
- title: delivery system.
  contents:
  - 'delivery system.

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n  As computer supported message processing activities grow\
    \ on individual\n  host computers and in networks of computers, there is a natural\
    \ desire\n  to provide for the interconnection and interworking of such systems.\n\
    \  This specification describes the formats and procedures of a general\n  purpose\
    \ internetwork message system, which can be used as a standard\n  for the interconnection\
    \ of individual message systems, or as a message\n  delivery system in its own\
    \ right.\n  This system also provides for the communication of data items beyond\n\
    \  the scope of contemporary message systems.  Messages can include data\n  objects\
    \ which could represent drawings, or facsimile images, or\n  digitized speech.\
    \  One can imagine message stations equipped with\n  speakers and microphones\
    \ (or telephone hand sets) where the body of a\n  message or a portion of it is\
    \ recorded digitized speech.  The output\n  terminal could include a graphics\
    \ display, and the message might\n  present a drawing on the display, and verbally\
    \ (via the speaker)\n  describe certain features of the drawing.  This specification\
    \ provides\n  for the composition of complex data objects and their encoding in\n\
    \  machine independent basic data elements.\n"
- title: 1.2.  Scope
  contents:
  - "1.2.  Scope\n  The Internet Message Protocol is intended to be used for the\n\
    \  transmission of messages between networks.  It may also be used for\n  the\
    \ local message system of a network or host.  This specification was\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Introduction
  contents:
  - "Introduction\n  developed in the context of the ARPA work on the interconnection\
    \ of\n  networks, but it is thought that it has a more general scope.\n  The focus\
    \ here is on the internal mechanisms to transmit messages,\n  rather than the\
    \ external interface to users.  It is assumed that a\n  number of user interface\
    \ programs will exist.  These will be both new\n  programs designed to work with\
    \ this system and old programs designed\n  to work with earlier systems.\n"
- title: 1.3.  The Internetwork Environment
  contents:
  - "1.3.  The Internetwork Environment\n  The internetwork message environment consists\
    \ of processes which run\n  in hosts which are connected to networks which are\
    \ interconnected by\n  gateways.  Each network consists of many different hosts.\
    \  The\n  networks are tied together through gateways.  The gateways are\n  essentially\
    \ hosts on two (or more) networks and are not assumed to\n  have much storage\
    \ capacity or to \"know\" which hosts are on the\n  networks to which they are\
    \ attached [1,2].\n"
- title: 1.4.  Model of Operation
  contents:
  - "1.4.  Model of Operation\n  This protocol is implemented in a process called\
    \ a Message Processing\n  Module or MPM.  The MPMs exchange messages by establishing\
    \ full duplex\n  communication and sending the messages in a fixed format described\
    \ in\n  this document.  The MPM may also communicate other information by\n  means\
    \ of commands described here.\n  A message is formed by a user interacting with\
    \ a User Interface\n  Program or UIP.  The user may utilize several commands to\
    \ create\n  various fields of the message and may invoke an editor program to\n\
    \  correct or format some or all of the message.  Once the user is\n  satisfied\
    \ with the message it is submitted for transmission by placing\n  it in a data\
    \ structure read by the MPM.\n  The MPM discovers the unprocessed input data (either\
    \ by a specific\n  request or by a general background search), examines it, and,\
    \ using\n  routing tables (or some other method), determines which outgoing link\n\
    \  to use.  The destination may be another user on the same host, one on\n  another\
    \ host on a network in common with the same host, or a user in\n  another network.\n\
    \  In the first case, another user on this host, the MPM places the\n  message\
    \ in a data structure read by the destination user, where that\n  user's UIP will\
    \ look for incoming messages.\n  In the second case, the user on another host\
    \ in this network, the MPM\n  transmits the message to the MPM on that host. \
    \ That MPM then repeats\n                                               Internet\
    \ Message Protocol\n                                                         \
    \   Introduction\n  the routing decision, and discovering the destination is local\
    \ to it,\n  places the message in the data structure shared with the destination\n\
    \  user.\n  In the third case, the user on a host in another network, the MPM\n\
    \  transmits the messages to an MPM in that network if it knows how to\n  establish\
    \ a connection directly to it; otherwise, the MPM transmits\n  the message to\
    \ an MPM that is \"closer\" to the destination.  An MPM\n  might not know of direct\
    \ connections to MPMs in all other networks,\n  but it must be able to select\
    \ a next MPM to handle the message for\n  each possible destination network.\n\
    \  An MPM might know a way to establish direct connections to each of a\n  few\
    \ MPMs in other nearby networks, and send all other messages to a\n  particular\
    \ big brother MPM that has a wider knowledge of the internet\n  environment.\n\
    \  An individual network's message system may be quite different from the\n  internet\
    \ message system.  In this case, intranet messages will be\n  delivered using\
    \ the network's own message system.  If a message is\n  addressed outside the\
    \ network, it is given to an MPM which then sends\n  it through the appropriate\
    \ gateways to (or towards) the MPM in the\n  destination network.  Eventually,\
    \ the message gets to an MPM on the\n  network of the recipient of the message.\
    \  The message is then sent via\n  the local message system to that host.\n  When\
    \ local message protocols are used, special conversion programs are\n  required\
    \ to transform local messages to internet format when they are\n  going out, and\
    \ to transform internet messages to local format when\n  they come into the local\
    \ environment.  Such transformations\n  potentially lead to information loss.\
    \  The internet message format\n  attempts to provide features to capture all\
    \ the information any local\n  message system might use.  However, a particular\
    \ local message system\n  is unlikely to have features equivalent to all the possible\
    \ features\n  of the internet message system.  Thus, in some cases the\n  transformation\
    \ of an internet message to a local message discards some\n  of the information.\
    \  For example, if an internet message carrying\n  mixed text and speech data\
    \ in the body is to be delivered in a local\n  system which only carries text,\
    \ the speech data may be replaced by the\n  text string \"There was some speech\
    \ here\".  Such discarding of\n  information is to be avoided when at all possible,\
    \ and to be deferred\n  as long as possible; still, the possibility remains that\
    \ in some cases\n  it is the only reasonable thing to do.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Introduction
  contents:
  - 'Introduction

    '
- title: 1.5.  Interfaces
  contents:
  - "1.5.  Interfaces\n  The MPM calls on a reliable communication procedure to communicate\n\
    \  with other MPMs.  This is a Transport Level protocol such as the\n  Transmission\
    \ Control Protocol (TCP) [3].  The interface to such a\n  procedure conventionally\
    \ provides calls to open and close connections,\n  send and receive data on a\
    \ connection, and some means to signal and be\n  notified of special conditions\
    \ (i.e., interrupts).\n  The MPM receives input and produces output through data\
    \ structures\n  that are produced and consumed respectively by user interface\
    \ (or\n  other) programs.\n                                               Internet\
    \ Message Protocol\n                       2.  FUNCTIONAL DESCRIPTION\n"
- title: This section gives an overview of the Internet Message System and its
  contents:
  - 'This section gives an overview of the Internet Message System and its

    '
- title: environment.
  contents:
  - 'environment.

    '
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n  The messages are routed by a process called the Message\
    \ Processing\n  Module or MPM.  Messages are created and consumed by User Interface\n\
    \  Programs (UIPs) in conjunction with users.\n  The basic unit transferred between\
    \ MPMs is called a message.  A\n  message is made up of a transaction identifier\
    \ (which uniquely\n  identifies the message), a command (which contains the necessary\n\
    \  information for delivery), and document.  The document may have a\n  header\
    \ and a body.\n  For a personal letter the document body corresponds to the contents\
    \ of\n  the letter; the document header corresponds to the date line,\n  greeting,\
    \ and signature.\n  For an inter-office memo the document body corresponds to\
    \ the text;\n  the document header corresponds to the header of the memo.\n  The\
    \ commands correspond to the information used by the Post Office or\n  the mail\
    \ room to route the letter or memo.  Some of the information in\n  the command\
    \ is supplied by the UIP.\n"
- title: 2.2.  Assumptions
  contents:
  - "2.2.  Assumptions\n  The following assumptions are made about the internetwork\
    \ environment:\n  In general, it is not known what format intranet addresses will\n\
    \  assume.  Since no standard addressing scheme would suit all networks,\n  it\
    \ is safe to assume there will be several and that they will change\n  with time.\
    \  Thus, frequent software modification throughout all\n  internet MPMs would\
    \ be required if such MPMs were to know about the\n  formats on many networks.\
    \  Therefore, each MPM which handles internet\n  messages is required to know\
    \ only the minimum necessary to deliver\n  them.\n  Each MPM is required to know\
    \ completely only the addressing format of\n  its own network(s).  In addition,\
    \ the MPM must be able to select an\n  output link for each message addressed\
    \ to another network or host.\n  This does not preclude more intelligent behavior\
    \ on the part of a\n  given MPM, but at least this minimum is necessary.  Each\
    \ network has a\n  unique name and numeric address.  Such names and addresses\
    \ are\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - "Functional Description\n  registered with a naming authority and may be listed\
    \ in documents such\n  as Assigned Numbers [4].\n  Each MPM will have a unique\
    \ internet address.  This feature will\n  enable every MPM to place a unique \"\
    handling-stamp\" on a message which\n  passes through the MPM enroute to delivery.\n"
- title: 2.3.  General Specification
  contents:
  - "2.3.  General Specification\n  There are several aspects to a distributed service\
    \ to be specified.\n  First, there is the service to be provided; that is, the\n\
    \  characteristics of the service as seen by its users.  Second, there is\n  the\
    \ service it uses; that is, the characteristics it assumes to be\n  provided by\
    \ some lower level service.  And third, there is the\n  protocol used between\
    \ the modules of the distributed service.\n       User                       \
    \                   User       \n          \\                                \
    \          /          \n          UIP                                      UIP\
    \          \n            \\                                      /           \
    \ \n         --+----------------------------------------+-- Service \n       \
    \    |   \\                                /   | Interface \n           |  +--------+\
    \                +--------+  |           \n           |  | Module | <--Protocol-->\
    \ | Module |  |           \n           |  +--------+                +--------+\
    \  |           \n           |        \\                       /       |      \
    \     \n           |        +-----------------------+       |           \n   \
    \        |        | Communication Service |       |           \n           | \
    \       +-----------------------+       |           \n           |           \
    \                             |           \n           +----------------------------------------+\
    \           \n                            Message Service\n                  \
    \             Figure 1.\n  The User/Message Service Interface\n    The service\
    \ the message delivery system provides is to accept\n    messages conforming to\
    \ a specified format, to attempt to deliver\n    those messages, and to report\
    \ on the success or failure of the\n    delivery attempt.  This service is provided\
    \ in the context of an\n    interconnected system of networks and may involve\
    \ relaying a message\n    through several intermediate MPMs via different communication\n\
    \    services.\n                                               Internet Message\
    \ Protocol\n                                                  Functional Description\n\
    \  The Message/Communication Service Interface\n    The message delivery system\
    \ calls on a communication service to\n    transfer information from one MPM to\
    \ another.  There may be\n    different communication services used between different\
    \ pairs of\n    MPMs, though all communication services must meet the service\n\
    \    characteristics described below.\n    It is assumed that the communication\
    \ service provides a reliable\n    two-way data stream.  Such a data stream can\
    \ usually be obtained in\n    computer networks from the transport level protocol,\
    \ for example,\n    the Transmission Control Protocol (TCP) [3].  In any case,\
    \ the\n    properties the communication service must provide are:\n      o  Logical\
    \ connections for two way simultaneous data flow of\n         arbitrary data (i.e.,\
    \ no forbidden codes).  All data sent is\n         delivered in order.\n     \
    \ o  Simple commands to open and close the connections, and to send\n        \
    \ and receive data on the connections.\n      o  Controlled flow of data so that\
    \ data is not transmitted faster\n         that the receiver chooses to consume\
    \ it (on the average).\n      o  Transmission errors are corrected without user\
    \ notification or\n         involvement of the sender or receiver.  Complete breakdown\
    \ on\n         communication is reported to the sender or receiver.\n  The Message-Message\
    \ Protocol\n    The protocol used between the distributed modules of the message\n\
    \    delivery system, that is, the MPMs, is a small set of commands which\n  \
    \  convey requests and replies.  These commands are encoded in a highly\n    structured\
    \ and rigidly specified format.\n"
- title: 2.4.  Mechanisms
  contents:
  - "2.4.  Mechanisms\n  MPMs are processes which use some communication service.\
    \  A pair of\n  MPMs which can communicate reside in a common interprocess\n \
    \ communication environment.  An MPM might exist in two (or more)\n  interprocess\
    \ communication environments, and such an MPM might act to\n  relay messages between\
    \ MPMs.  Messages may be held for a time in an\n  MPM; the total path required\
    \ for delivery need not be available\n  simultaneously.\n  From the time a message\
    \ is accepted from a UIP by an MPM until it is\n  delivered to a UIP by an MPM\
    \ and an acknowledgment is returned to the\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - "Functional Description\n  originating UIP, the message is considered to be active\
    \ in the message\n  system.\n     User                                       \
    \             User \n       \\                                               \
    \       /   \n       UIP                                                  UIP\
    \   \n         \\                                                  /     \n  \
    \    +---------------------------------------------------------+ \n      |   \
    \ \\                                              /     | \n      |  +-----+ \
    \               +-----+                +-----+  | \n      |  | MPM | <--Protocol-->\
    \ | MPM | <--Protocol--> | MPM |  | \n      |  +-----+                +-----+\
    \                +-----+  | \n      |     |                    /   \\        \
    \            |     | \n      |  +-----------------------+   +-----------------------+\
    \  | \n      |  |Communication Service A|   |Communication Service B|  | \n  \
    \    |  +-----------------------+   +-----------------------+  | \n      |   \
    \                                                      | \n      +---------------------------------------------------------+\
    \ \n                 Message Service with Internal Relaying\n                \
    \               Figure 2.\n  It should be clear that there are two roles an MPM\
    \ can play, an\n  end-point MPM or a relay MPM.  Most MPMs will play both roles.\
    \  A\n  relay MPM acts to relay messages from one communication environment to\n\
    \  another.  An end-point MPM acts as a source or destination of\n  messages.\n\
    \  The transfer of data between UIPs and MPMs is viewed as the exchange\n  of\
    \ data structures which encode messages.  The transfer of data\n  between MPMs\
    \ is also in terms of the transmission of structured data.\n                 \
    \                              Internet Message Protocol\n                   \
    \                               Functional Description\n                    +-----+\
    \     DATA       +-----+         \n             USER-->| UIP |-->STRUCTURES-->|\
    \ MPM |-->other \n                    +-----+    +-----+     +-----+    MPMs \n\
    \                               |     |                     \n               \
    \                |  +-----+                  \n                              \
    \ +--|     |                  \n                                  |  +-----+ \
    \              \n                                  +--|     |               \n\
    \                                     |     |               \n               \
    \                      +-----+               \n                     +-----+  \
    \   DATA       +-----+        \n             other-->| MPM |-->STRUCTURES-->|\
    \ UIP |-->USER \n             MPMs    +-----+    +-----+     +-----+        \n\
    \                                |     |                    \n               \
    \                 |  +-----+                 \n                              \
    \  +--|     |                 \n                                   |  +-----+\
    \              \n                                   +--|     |              \n\
    \                                      |     |              \n               \
    \                       +-----+              \n                              Message\
    \ Flow\n                               Figure 3.\n  In the following, a message\
    \ will be described as a structured data\n  object represented in a particular\
    \ kind of typed data elements.  This\n  is how a message is presented when transmitted\
    \ between MPMs or\n  exchanged between an MPM and a UIP.  Internal to an MPM (or\
    \ a UIP), a\n  message may be represented in any convenient form.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Functional Description
  contents:
  - 'Functional Description

    '
- title: 2.5.  Relation to Other Protocols
  contents:
  - "2.5.  Relation to Other Protocols\n  This protocol the benefited from the earlier\
    \ work on message protocols\n  in the ARPA Network [5,6,7,8,9], and the ideas\
    \ of others about the\n  design of computer message systems\n  [10,11,12,13,14,15,16,17,18,19,20,21].\n\
    \  Figure 4 illustrates the place of the message protocol in the ARPA\n  internet\
    \ protocol hierarchy:\n   +------+ +-----+ +-------+ +-----+     +-----+     \
    \              \n   |Telnet| | FTP | |Message| |Voice| ... |     | Application\
    \ Level \n   +------+ +-----+ +-------+ +-----+     +-----+                  \
    \ \n           \\   |   /             |           |                      \n  \
    \          +-----+           +-----+     +-----+                   \n        \
    \    | TCP |           | RTP | ... |     | Host Level        \n            +-----+\
    \           +-----+     +-----+                   \n               |         \
    \        |           |                      \n              +-------------------------------+\
    \                     \n              |       Internet Protocol       |   Gateway\
    \ Level     \n              +-------------------------------+                \
    \     \n                              |                                     \n\
    \                +---------------------------+                       \n      \
    \          |   Local Network Protocol  |     Network Level     \n            \
    \    +---------------------------+                       \n                  \
    \            |                                     \n                        \
    \ Protocol Relationships\n                               Figure 4.\n  Note that\
    \ \"local network\" means an individual or specific network.\n  For example, the\
    \ ARPANET is a local network.\n  The message protocol interfaces on one side to\
    \ user interface programs\n  and on the other side to a reliable transport protocol\
    \ such as TCP.\n  In this internet message system the MPMs communicate directly\
    \ using\n  the lower level transport protocol.  In the old ARPANET system,\n \
    \ message transmission was part of the file transfer protocol.\n             \
    \                                  Internet Message Protocol\n               \
    \                                   Functional Description\n        +------+ \
    \  +-----+   +-------+                              \n        |Telnet|   | FTP\
    \ |---|Message|            Application Level \n        +------+   +-----+   +-------+\
    \                              \n              \\     /                      \
    \                         \n    +-----+   +-----+                            \
    \                   \n    |Voice|---| NCP |                             Host Level\
    \        \n    +-----+   +-----+                                             \
    \  \n                 |                                                  \n  \
    \               |                                                  \n        \
    \         |                                Gateway Level     \n              \
    \   |                                                  \n                 |  \
    \                                                \n         +----------------+\
    \                                         \n         |    ARPA NET    |      \
    \                 Network Level     \n         +----------------+            \
    \                             \n                         Old ARPANET Protocols\n\
    \                               Figure 5.\n  Note that in the old ARPANET protocols\
    \ one can't send messages (or\n  communicate in any way) to other networks since\
    \ it has no gateway\n  level or internet protocol [5].\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                       3.  DETAILED SPECIFICATION\n"
- title: The presentation of the information in this section is difficult since
  contents:
  - 'The presentation of the information in this section is difficult since

    '
- title: everything depends on everything, and since this is a linear medium it
  contents:
  - 'everything depends on everything, and since this is a linear medium it

    '
- title: has to come in some order.  In this attempt, a brief overview of the
  contents:
  - 'has to come in some order.  In this attempt, a brief overview of the

    '
- title: message structure is given, the detail of the message is presented in
  contents:
  - 'message structure is given, the detail of the message is presented in

    '
- title: terms of data objects, the various data objects are defined, and finally
  contents:
  - 'terms of data objects, the various data objects are defined, and finally

    '
- title: the representation of the data elements is specified.  Several aspects
  contents:
  - 'the representation of the data elements is specified.  Several aspects

    '
- title: of the message structure are based on the NSW Transaction Protocol [22],
  contents:
  - 'of the message structure are based on the NSW Transaction Protocol [22],

    '
- title: and similar (but more general) proposals [23,24].
  contents:
  - 'and similar (but more general) proposals [23,24].

    '
- title: 3.1.  Overview of Message Structure
  contents:
  - "3.1.  Overview of Message Structure\n  A message is normally composed of three\
    \ parts:  the identification,\n  the command, and the document.  Each part is\
    \ in turn composed of data\n  objects.\n  The identification part is composed\
    \ of a transaction number assigned\n  by the originating MPM and the MPM identifier.\n\
    \  The command part is composed of an operation type, an operation code,\n  the\
    \ arguments to the operation, error information, the destination\n  mailbox, and\
    \ a trace.  The trace is a list of the MPMs that have\n  handled this message.\n\
    \  The document part is a data structure.  The message delivery system\n  does\
    \ not depend on the contents of the document part.  A standard for\n  the document\
    \ part is defined in reference [25].\n  The following sections define the representation\
    \ of a message as a\n  structured object composed of other objects.  Objects in\
    \ turn are\n  represented using a set of basic data elements.\n  The basic data\
    \ elements are defined in section 3.7.  In summary, these\n  are exact forms for\
    \ representing integers, strings, booleans, et\n  cetera.  There are also two\
    \ elements for building data structures:\n  list and property list.  Lists are\
    \ simple lists of elements, including\n  lists.  Property lists are lists of pairs\
    \ of elements, where the first\n  element of each pair names the pair.  That is,\
    \ a property list is a\n  list of <name,value> pairs.  In general, when an object\
    \ is composed of\n  multiple instances of a simpler object it is represented as\
    \ a list of\n  the simpler objects.  When an object is composed of a variety of\n\
    \  simpler objects it is represented as a property list of the simpler\n  objects.\
    \  In most uses of the property list representation, the\n  presence of <name,value>\
    \ pairs in addition to those specifically\n  required is permitted.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - 'Specification

    '
- title: 3.2.  Message Structure
  contents:
  - "3.2.  Message Structure\n  An internet message is composed of two or three parts.\
    \  The first is\n  the Identification which identifies the transaction; the second\
    \ is the\n  Command; and the optional third part is the Document.\n  When shipped\
    \ between two MPMs, a message will take the form of a\n  property list, with the\
    \ <name,value> pairs in this order.\n    MESSAGE is:\n      ( Identification,\
    \ Command [, Document ] )\n    It is convenient to batch several messages together,\
    \ shipping them\n    as a unit from one MPM to another.  Such a group of messages\
    \ is\n    called a message-bag.\n    A message-bag will be a list of Messages;\
    \ each Message is of the\n    form described above.\n      MESSAGE-BAG is:\n \
    \       ( Message, Message, ... )\n  The Identification\n    This is the transaction\
    \ identifier.  It is assigned by the\n    originating MPM.  The identification\
    \ is composed of the MPM\n    identifier, and a transaction number unique in that\
    \ context for this\n    message.\n  The Command\n    The command is composed of\
    \ a mailbox, an operation code, the\n    arguments to that operation, some error\
    \ information, and a trace of\n    the route of this message.  The command is\
    \ implemented by a property\n    list which contains <name,value> pairs, where\
    \ the names are used to\n    identify the associated argument values.\n  The Document\n\
    \    The document portion of an internet message is optional and when\n    present\
    \ is a data structure as defined in [25].\n                                  \
    \             Internet Message Protocol\n                                    \
    \                       Specification\n"
- title: 3.3.  Identification
  contents:
  - "3.3.  Identification\n  Each message must have a unique identifier while it exists\
    \ in the\n  message delivery system.  This is provided by the combination of the\n\
    \  unique identifier of the MPM and a unique transaction number chosen\n  for\
    \ the message by this MPM.\n    IDENTIFICATION is:\n      ( mpm-identifier, transaction-number\
    \ )\n  The mpm-identifier is based on the host address of the computer in\n  which\
    \ the MPM resides.  If there is more than one MPM in a host the\n  mpm-identifier\
    \ must be extended to distinguish between the co-resident\n  MPMs.\n"
- title: 3.4.  Command
  contents:
  - "3.4.  Command\n  This section describes the commands MPMs use to communicate\
    \ between\n  themselves.  The commands come in pairs, with each request having\
    \ a\n  corresponding reply.\n    COMMAND is:\n      ( mailbox, operation, [arguments,]\n\
    \                                    [error-class, error-string,] trace )\n  The\
    \ mailbox is the \"To\" specification of the message.  Mailbox is a\n  property\
    \ list of general information, some of which is the essential\n  information for\
    \ delivery, and some of which could be extra information\n  which may be helpful\
    \ for delivery.  Mailbox is different from address\n  in that address is a very\
    \ specific property list without extra\n  information.  The mailbox includes a\
    \ specification of the user,  when\n  a command is addressed to the MPM itself\
    \ (rather than a user it\n  serves) the special user name \"*MPM*\" is specified.\n\
    \  The operation is the name of the operation or procedure to be\n  performed.\n\
    \  The arguments to the operation vary from operation to operation.\n  The error\
    \ information is composed of a error class code and a\n  character string, and\
    \ indicates what, if any, error occurred.  The\n  error information is normally\
    \ present only in replies, and not present\n  in requests.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  The trace is a list of the MPMs that have handled the message.\
    \  Each\n  MPM must add its handling-stamp to the list.\n                    \
    \                           Internet Message Protocol\n                      \
    \                                     Specification\n  3.4.1.  Command:  DELIVER\n\
    \    function:  Sends a document to a mailbox.\n    reply:  The reply is ACKNOWLEDGE.\n\
    \    arguments:\n      type-of-service:  one or more of the following:\n     \
    \   \"REGULAR\"  regular delivery\n        \"FORWARD\"  message forwarding\n \
    \       \"GENDEL\"   general delivery\n        \"PRIORITY\" priority delivery\n\
    \  3.4.2.  Command:  ACKNOWLEDGE\n    function:  Reply to DELIVER.\n    arguments:\n\
    \      reference:  the identifier of the originating message.\n      address:\n\
    \        The address is the final mailbox the message was delivered to.\n    \
    \    This would be different from the original mailbox if the message\n      \
    \  was forwarded, and is limited to the essential information\n        needed\
    \ for delivery.\n      type-of-service:  one of the following:\n        \"GENDEL\"\
    \    message was accepted for general delivery\n        \"REGULAR\"   message\
    \ was accepted for normal delivery\n        \"PRIORITY\"  message was accepted\
    \ for priority delivery\n      error-class:\n      error-string:\n        If the\
    \ document was delivered successfully, the error\n        information has class\
    \ 0 and string \"ok\".  Otherwise, the error\n        information has a non-zero\
    \ class and the string would be one of\n        \"no such user\", \"no such host\"\
    , \"no such network\", \"address\n        ambiguous\", or a similar response.\n\
    \      trail:   the trace from the DELIVER command.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  3.4.3.  Command:  PROBE\n    function:  Finds out if specified\
    \ mailbox (specified in mailbox of\n    the command) exists at a host.\n    reply:\
    \  The reply is RESPONSE.\n    arguments:  none.\n  3.4.4.  Command:  RESPONSE\n\
    \    function:  Reply to PROBE.\n    arguments:\n      reference:  the identification\
    \ of the originating PROBE.\n      address:  a specific address.\n      error-class:\n\
    \      error-string:\n        If the mailbox was found the error class is 0 and\
    \ the error\n        string is \"OK\".  If the mailbox has moved and a forwarding\n\
    \        address in known the error class is 1 and the error string is\n     \
    \   \"Mailbox moved, see address\".  Otherwise the error class is\n        greater\
    \ than 1 and the error string may be one of the following:\n        \"Mailbox\
    \ doesn't exist\", \"Mailbox full\", \"Mailbox has moved, try\n        the new\
    \ location indicated in the address\".\n      trail:  the trace which came from\
    \ the originating PROBE.\n                                               Internet\
    \ Message Protocol\n                                                         \
    \  Specification\n  3.4.5.  Command:  CANCEL\n    function:  Abort request for\
    \ specified transaction.\n    reply:  The reply is CANCELED.\n    arguments:\n\
    \      reference:  identification of transaction to be canceled.\n  3.4.6.  Command:\
    \  CANCELED\n    function:  Reply to CANCEL.\n    arguments:\n      reference:\
    \  identification of canceled transaction.\n      error-class:\n      error-string:\n\
    \        If the command was canceled the error class is 0 and the error\n    \
    \    string is \"OK\".  Otherwise the error class is positive and the\n      \
    \  error string may be one of the following: \"No such transaction\",\n      \
    \  or any error for an unreachable mailbox.\n      trail:  the trace of the CANCEL\
    \ command.\n  To summarize again, a command generally consists of a property list\
    \ of\n  the following objects:\n    name            value\n    ----          \
    \  -----\n    mailbox         property list of address information\n    operation\
    \       name of operation\n    arguments       ---\n    error-class     numeric\
    \ class of the error\n    error-string    text description of the error\n    trace\
    \           list ( handling-stamp, ... )\n"
- title: 3.5.  Document
  contents:
  - "3.5.  Document\n  The actual document follows the command.  The message delivery\
    \ system\n  does not depend on the document, examine it, or use it in any way.\n\
    \  The standard for the contents of the document is reference [25].  The\n  document\
    \ must be the last <name,value> pair in the message property\n  list.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - 'Specification

    '
- title: 3.6.  Message Objects
  contents:
  - "3.6.  Message Objects\n  In the composition of messages, we use a set of objects\
    \ such as\n  mailbox or date.  These objects are encoded in basic data elements.\n\
    \  Some objects are simple things like integers or character strings,\n  other\
    \ objects are more complex things built up of lists or property\n  lists.\n  The\
    \ following is a list of the objects used in messages.  The object\n  descriptions\
    \ are in alphabetical order.\n  Action\n    The type of handling action taken\
    \ by the MPM when processing a\n    message.  One of ORIGIN, RELAY, FORWARD, or\
    \ DESTINATION.\n  Address\n    Address is intended to contain the minimum information\
    \ necessary to\n    deliver a message, and no more (compare with mailbox).\n \
    \     An address is a property list.  An address contains the following\n    \
    \  <name,value> pairs:\n        name    description\n        ----    -----------\n\
    \        NET     network name\n        HOST    host name\n        USER    user\
    \ name\n      or:\n        name    description\n        ----    -----------\n\
    \        MPM     mpm-identifier\n        USER    user name\n  Answer\n    A yes\
    \ (true) or no (false) answer to a question.\n  Arguments\n    Many operations\
    \ require arguments, which differ from command to\n    command.  This \"object\"\
    \ is a place holder for the actual arguments\n    when commands are described\
    \ in a general way.\n                                               Internet Message\
    \ Protocol\n                                                           Specification\n\
    \  City\n    The character string name of a city.\n  Command\n    (mailbox, operation\
    \ [ ,arguments ]\n                                  [ ,error-class, error-string\
    \ ], trace)\n  Country\n    The character string name of a country.\n  Date\n\
    \    The date and time are represented according to the International\n    Standards\
    \ Organization (ISO) recommendations [26,27,28].  Taken\n    together the ISO\
    \ recommendations 2014, 3307, and 4031 result in the\n    following representation\
    \ of the date and time:\n      yyyy-mm-dd-hh:mm:ss,fff+hh:mm\n    Where yyyy is\
    \ the four-digit year, mm is the two-digit month, dd is\n    the two-digit day,\
    \ hh is the two-digit hour in 24 hour time, mm is\n    the two-digit minute, ss\
    \ is the two-digit second, and fff is the\n    decimal fraction of the second.\
    \  To this basic date and time is\n    appended the offset from Greenwich as plus\
    \ or minus hh hours and mm\n    minutes.\n    The time is local time and the offset\
    \ is the difference between\n    local time and Coordinated Universal Time (UTC).\
    \  To convert from\n    local time to UTC algebraically subtract the offset from\
    \ the local\n    time.\n    For example, when the time in\n              Los Angeles\
    \ is  14:25:00-08:00\n              the UTC is      22:25:00\n    or when the\
    \ time in\n              Paris is        11:43:00+01:00\n              the UTC\
    \ is      10:43:00\n  Document\n    The document is the user's composition and\
    \ is not used by the\n    message delivery system in any way.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Error-Class\n    A numeric code for the class of the error.\
    \  The error classes are\n    coded as follows:\n      = 0: indicates success,\
    \ no error.\n        This is the normal case.\n      = 1: failure, address changed.\n\
    \        This error is used when forwarding is possible, but not allowed\n   \
    \     by the type of service specified.\n      = 2: failure, resources unavailable.\n\
    \        These errors are temporary and the command they respond to may\n    \
    \    work if attempted at a later time.\n      = 3: failure, user error.\n   \
    \     For example, unknown operation, or bad arguments.\n      = 4: failure, MPM\
    \ error.  Recoverable.\n        These errors are temporary and the command they\
    \ respond to may\n        work if attempted at a later time.\n      = 5: failure,\
    \ MPM error.  Permanent.\n        These errors are permanent, there is no point\
    \ in trying the same\n        command again.\n      = 6: Aborted as requested\
    \ by user.\n        The response to a successfully canceled command.\n       \
    \                                        Internet Message Protocol\n         \
    \                                                  Specification\n  Error-String\n\
    \    This is a character string describing the error.  Possible errors:\n    \
    \          error-string                  error-class\n      No errors        \
    \                          0\n      Ok                                       \
    \  0\n      Mailbox Moved, see address                 1\n      Mailbox Full,\
    \ try again later              2\n      Syntax error, operation unrecognized \
    \      3\n      Syntax error, in arguments                 3\n      No Such User\
    \                               3\n      No Such Host                        \
    \       3\n      No Such Network                            3\n      No Such Transaction\
    \                        3\n      Mailbox Does Not Exist                     3\n\
    \      Ambiguous Address                          3\n      Server error, try again\
    \ later              4\n      No service available                       5\n \
    \     Command not implemented                    5\n      Aborted as requested\
    \ by user               6\n  Handling-Stamp\n    The handling-stamp indicates\
    \ the MPM, the date (including the time)\n    that a message was processed by\
    \ an MPM, and the type of handling\n    action taken.\n    ( mpm-identifier, date,\
    \ action )\n  Host\n    The character string name of a host.\n  Identification\n\
    \    This is the transaction identifier associated with a particular\n    message.\
    \  It is the transaction number, and the MPM identifier of\n    the originating\
    \ MPM.\n    ( mpm-identifier, transaction-number )\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Internet Address\n    This identifies a host in the ARPA internetwork\
    \ environment.  When\n    used as a part of identification, it identifies the\
    \ originating host\n    of a message.  The internet address is a 32 bit number,\
    \ the higher\n    order 8 bits identify the network, and the lower order 24 bits\n\
    \    identify the host on that network [2].  For use in the MPMs the\n    internet\
    \ address is divided into eight bit fields and the value of\n    each field is\
    \ represented in decimal digits.  For example, the\n    ARPANET address of ISIE\
    \ is 167837748 and is represented as\n    10,1,0,52.  Further, this representation\
    \ may be extended to include\n    an address within a host, such as the TCP port\
    \ of the MPM, for\n    example, 10,1,0,52,0,45.\n  Mailbox\n    This is the destination\
    \ address of a user of the internetwork mail\n    system.  Mailbox contains information\
    \ such as network, host,\n    location, and local user indentifier of the recipient\
    \ of the\n    message.  Some information contained in mailbox may not be necessary\n\
    \    for delivery.\n    As an example, when one sends a message to someone for\
    \ the first\n    time, he may include many items which are not necessary simply\
    \ to\n    insure delivery.  However, once he gets a reply to this message, the\n\
    \    reply will contain an Address (as opposed to Mailbox) which may be\n    used\
    \ from then on.\n      A mailbox is a property list.  A mailbox might contain\
    \ the\n      following <name,value> pairs:\n        name    description\n    \
    \    ----    -----------\n        MPM     mpm-identifier\n        NET     network\
    \ name\n        HOST    host name\n        PORT    address of MPM within the host\n\
    \        USER    user name\n        ORG     organization name\n        CITY  \
    \  city\n        STATE   state\n        COUNTRY country\n        ZIP     zip code\n\
    \        PHONE   phone number\n    The minimum mail box is an Address.\n     \
    \                                          Internet Message Protocol\n       \
    \                                                    Specification\n  MPM-Identifier\n\
    \    The internetwork address of the MPM.  This may be the ARPA Internet\n   \
    \ Address or an X.121 Public Data Network Address [29].  The\n    mpm-identifier\
    \ is a property list which has one <name,value> pair.\n    This unusual structure\
    \ is used so that it will be easy to determine\n    the type of address used.\n\
    \  Network\n    This character string name of a network.\n  Operation\n    This\
    \ names the operation or procedure to be performed.  It is a\n    character string\
    \ name.\n  Organization\n    This character string name of a organization.\n \
    \ Phone\n    This character string name representation of a phone number. For\n\
    \    example the phone number of ISI is 1 (international region) + 213\n    (area\
    \ code) + 822 (central office) + 1511 (station number) =\n    12138221511.\n \
    \ Port\n    This names the port or subaddress within a host of the MPM.  The\n\
    \    default port for the MPM is 45 (55 octal) [4].\n  Reference\n    The reference\
    \ is an identification from an earlier message.\n  State\n    The character string\
    \ name of a state.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  Trace\n    Each MPM that handles the message must add its handling-stamp\
    \ to\n    this list.  This will allow detection of messages being sent in a\n\
    \    loop within the internet mail system, and aid in fault isolation.\n  Trail\n\
    \    When a message is sent through the internetwork environment, it\n    acquires\
    \ this trace, a list of MPMs that have handled the message.\n    This list is\
    \ then carried as the trail in a reply or acknowledgment\n    of that message.\
    \  Requests and replies always have a trace and each\n    MPM adds its handling-stamp\
    \ to this trace.  Replies, in addition,\n    have a trail which is the complete\
    \ trace of the original message.\n  Transaction Number\n    This is a number which\
    \ is uniquely associated with this transaction\n    by the originating MPM.  It\
    \ identifies the transaction.  (A\n    transaction is a message and acknowledgment.)\
    \  A transaction number\n    must be unique during the time which the message\
    \ (a request or\n    reply) containing it could be active in the network.\n  Type-of-Service\n\
    \    A service parameter for the delivery of a message, for instance a\n    message\
    \ could be delivered (REGULAR), forwarded (FORWARD), turned\n    over to general\
    \ delivery (GENDEL) (i.e., allow a person to decide\n    how to further attempt\
    \ to deliver the message), or require priority\n    handling (PRIORITY).\n  User\n\
    \    The character string name of a user.\n  X121 Address\n    This identifies\
    \ a host in the Public Data Network environment.  When\n    used as a part of\
    \ identifier, it identifies the originating host of\n    a message.  The X121\
    \ address is a sequence of up to 14 digits [29].\n    For use in the MPMs the\
    \ X121 address is represented in decimal\n    digits.\n                      \
    \                         Internet Message Protocol\n                        \
    \                                   Specification\n  Zip Code\n    The character\
    \ string representation of a postal zip code.  The zip\n    code of ISI is 90291.\n"
- title: 3.7.  Data Elements
  contents:
  - "3.7.  Data Elements\n  The data elements defined here are similar to the data\
    \ structure and\n  encoding used in NSW [30].\n  Each of the diagrams which follow\
    \ represent a sequence of octets.\n  Field boundaries are denoted by the \"|\"\
    \ character, octet boundaries by\n  the \"+\" character.  Each element begins\
    \ with a one-octet code.  The\n  order of the information in each element is left-to-right.\
    \  In fields\n  with numeric values the high-order (or most significant) bit is\
    \ the\n  left-most bit.  For transmission purposes, the leftmost octet is\n  transmitted\
    \ first.  Cohen has described some of the difficulties in\n  mapping memory order\
    \ to transmission order [31].\n  Code  Type          Representation\n  ----  ----\
    \          --------------\n                      +------+\n    0  No Operation\
    \   |  0   |\n                      +------+\n                      +------+------+------+------+------\n\
    \    1  Padding        |  1   |     octet count    | Data ...\n              \
    \        +------+------+------+------+------\n                      +------+------+\n\
    \    2  Boolean        |  2   | 1/0  |\n                      +------+------+\n\
    \                      +------+------+------+\n    3  Index          |  3   |\
    \     Data    |\n                      +------+------+------+\n              \
    \        +------+------+------+------+------+\n    4  Integer        |  4   |\
    \            Data           |\n                      +------+------+------+------+------+\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n       Extended       +------+------+------+------+------\n  \
    \  5  Precision      |  5   |    octet count     | Data ...\n       Integer  \
    \      +------+------+------+------+------\n                      +------+------+------+------+------\n\
    \    6  Bit String     |  6   |      bit count     | Data ...\n              \
    \        +------+------+------+------+------\n                      +------+------+------\n\
    \    7  Name String    |  7   | count|  Data ...\n                      +------+------+------\n\
    \                      +------+------+------+------+------\n    8  Text String\
    \    |  8   |     octet count    |  Data ...\n                      +------+------+------+------+------\n\
    \                      +------+------+------+------+-----\n    9  List       \
    \    |  9   |     octet count    | Data ...\n                      +------+------+------+------+-----\n\
    \                      +------+------+------+------+------\n    10 Proplist  \
    \     |  10  |     octet count    | Data ...\n                      +------+------+------+------+------\n\
    \                      +------+\n    11 End of List    |  11  |\n            \
    \          +------+\n  Element code 0 (NOP) is an empty data element used for\
    \ padding when it\n  is necessary.  It is ignored.\n  Element code 1 (PAD) is\
    \ used to transmit large amounts of data with a\n  message for test or padding\
    \ purposes.  The type-octet is followed by a\n  three-octet count of the number\
    \ of octets to follow.  No action is\n  taken with this data but the count of\
    \ dummy octets must be correct to\n  indicate the next element code.\n  Element\
    \ code 2 (BOOLEAN) is a boolean data element.  The octet\n  following the type-octet\
    \ has the value 1 for True and 0 for False.\n                                \
    \               Internet Message Protocol\n                                  \
    \                         Specification\n  Element code 3 (INDEX) is a 16-bit\
    \ unsigned integer datum.  Element\n  code 3 occupies only 3 octets.\n  Element\
    \ code 4 (INTEGER) is a signed 32-bit integer datum.  This will\n  always occupy\
    \ five octets.  Representation is two's complement.\n  Element code 5 (EPI) is\
    \ an extended precision integer.  The type octet\n  is followed by a three-octet\
    \ count of the number of data octets to\n  follow.  Representation is two's complement.\n\
    \  Element code 6 (BITSTR) is a bit string element for binary data.  The\n  bit\
    \ string is padded on the right with zeros to fill out the last\n  octet if the\
    \ bit string does not end on an octet boundary.  This data\n  type must have the\
    \ bit-count in the three-octet count field instead of\n  the number of octets.\n\
    \  Element code 7 (NAME) is used for the representation of character\n  string\
    \ names (or other short strings).  The type octet is followed by\n  a one-octet\
    \ count of the number of characters (one per octet) to\n  follow.  Seven bit ASCII\
    \ characters are used, right justified in the\n  octet.  The high order bit in\
    \ the octet is zero.\n  Element code 8 (TEXT) is used for the representation of\
    \ text.  The\n  type octet is followed by a three-octet count of the number of\n\
    \  characters (one per octet) to follow.  Seven bit ASCII characters are\n  used,\
    \ right justified in the octet.  The high order bit in the octet\n  is zero.\n\
    \  Element code 9 (LIST) can be used to create structures composed of\n  other\
    \ elements.  The three-octet octet count specifies the number of\n  octets in\
    \ the whole list (i.e., the number of octets following this\n  count field to\
    \ the end of the list, not including the ENDLIST octet).\n  The two-octet item\
    \ count contains the number of elements which follow.\n  Any element may be used\
    \ including list itself.\n    +------+------+------+------+------+------+\n  \
    \  |   9  |     octet count    |  item count |\n    +------+------+------+------+------+------+\n\
    \                                     +------+------/---+\n                  \
    \        repeated   |      element    |\n                                    \
    \ +------+------/---+\n                                                     +-------+\n\
    \                                                     |ENDLIST|\n            \
    \                                         +-------+\n  In some situations it may\
    \ not be possible to know the length of a list\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n  until the head of it has been transmitted.  To allow for this\
    \ a\n  special ENDLIST element is defined.  A list of undetermined length is\n\
    \  transmitted with the octet count cleared to zero, and the item count\n  cleared\
    \ to zero.  A null or empty List, one with no elements, has an\n  octet count\
    \ of two (2) and an item count of zero (0).  The ENDLIST\n  element always follows\
    \ a LIST, even when the length is determined.\n  Element code 10 (PROPLIST) is\
    \ the Property List element.  It is a\n  special case of the list element, in\
    \ which the elements are in pairs\n  and the first element of each pair is a name.\
    \  It has the following\n  form:\n    +------+------+------+------+------+\n \
    \   |  10  |     octet count    | pair |\n    +------+------+------+------+------+\n\
    \                         +------+------/---+------+------/---+\n            \
    \  repeated   | name element    | value element   |\n                        \
    \ +------+------/---+------+------/---+\n                                    \
    \                       +-------+\n                                          \
    \                 |ENDLIST|\n                                                \
    \           +-------+\n  The Property List structure consists of a set of unordered\n\
    \  <name,value> pairs.  The pairs are composed of a name which must be a\n  NAME\
    \ element and a value which may be any kind of element.  Following\n  the type\
    \ code is a three-octet octet count of the following octets.\n  Following the\
    \ octet count is a one-octet pair count of the number of\n  <name,value> pairs\
    \ in the property list.\n  The name of a <name,value> pair is to be unique within\
    \ the property\n  list, that is, there shall be at most one occurrence of any\
    \ particular\n  name in one property list.\n  In some situations it may not be\
    \ possible to know the length of a\n  property list until the head of it has been\
    \ transmitted.  To allow for\n  this the special ENDLIST element is defined. \
    \ A property list of\n  undetermined length is transmitted with the octet count\
    \ cleared to\n  zero, and the pair count cleared to zero.  A null or empty property\n\
    \  list, one with no elements, has an octet count of one (1) and an pair\n  count\
    \ of zero (0).  The ENDLIST element always follows a property\n  list, even when\
    \ the length is determined.\n  Element code 11 (ENDLIST) is the end of list element.\
    \  It marks the\n  end of the corresponding list or property list.\n         \
    \                                      Internet Message Protocol\n           \
    \                                                Specification\n  Structure Sharing\n\
    \    When messages are batched in message-bags for transmission, it may\n    often\
    \ be the case that the same document will be sent to more than\n    one recipient.\
    \  Since the document portion can usually be expected\n    to be the major part\
    \ of the message, much repeated data would be\n    sent if a copy of the document\
    \ for each recipient were to be shipped\n    in the message-bag.\n    To avoid\
    \ this redundancy, messages may be assembled in the\n    message-bag so that actual\
    \ data appears on its first occurrence and\n    only references to it appear in\
    \ later occurrences.  When data is\n    shared, the first occurrence of the data\
    \ will be tagged, and later\n    locations where the data should appear will only\
    \ reference the\n    earlier tagged location.  All references to copied data point\
    \ to\n    earlier locations in the message-bag.  The data to be retrieved is\n\
    \    indicated by the tag.\n    This is a very general sharing mechanism.  PLEASE\
    \ NOTE THAT THE MPM\n    WILL NOT SUPPORT THE FULL USE OF THIS MECHANISM.  THE\
    \ MPM WILL ONLY\n    SUPPORT SHARING OF WHOLE DOCUMENTS.  No other level of sharing\
    \ will\n    be supported by the MPMs.\n    This sharing mechanism may be used\
    \ within a document as long as all\n    references refer to tags within the same\
    \ document.\n    Sharing is implemented by placing a share-tag on the first\n\
    \    occurrence of the data to be shared, and placing a share-reference\n    at\
    \ the locations where copies of that data should occur.\n                    \
    \       +------+------+------+\n      12 Share Tag         |  12  | share-index\
    \ |\n                           +------+------+------+\n                     \
    \      +------+------+------+\n      13 Share Reference   |  13  | share-index\
    \ |\n                           +------+------+------+\n    Element code 12 (S-TAG)\
    \ is a share tag element.  The two octets\n    following the type-octet specify\
    \ the shared data identification code\n    for the following data element.  Note\
    \ that s-tag is not a DATA\n    element, in the sense that data elements encode\
    \ higher level\n    objects.\n    Element code 13 (S-REF) is a share reference\
    \ element.  The two\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Specification
  contents:
  - "Specification\n    octets following the type-octet specify the referenced shared\
    \ data\n    identification code.\n    An example of using this mechanism is\n\
    \      ( ( <a>, <b> ) ( <c>, <b> ) )\n    could be coded as follows to share <b>\n\
    \      ( ( <a>, <s-tag-1><b> ) ( <c>, <s-ref-1> ) )\n    To facilitate working\
    \ with structures which may contain shared data,\n    the two high-order bits\
    \ of the list and property list element codes\n    are reserved for indicating\
    \ if the structure contains data to be\n    shared or contains a reference to\
    \ shared data.  That is, if the\n    high-order bit of the list or property list\
    \ element code octet is\n    set to one then the property list contains a share-reference\
    \ to\n    shared data.  Or, if the second high-order bit is set to one the\n \
    \   structure contains a share-tag for data to be shared.\n    The example above\
    \ is now repeated in detail showing the use of the\n    high-order bits.\n   \
    \ +------+------+------+------+------+------+------+------+\n    |11 - 9|01 -\
    \ 9|  <a> |  12  |   0  |   1  |  <b> |  11  |\n    +------+------+------+------+------+------+------+------+\n\
    \                      +------+------+------+------+------+------+------+\n  \
    \                    |10 - 9|  <c> |  13  |   0  |   1  |  11  |  11  |\n    \
    \                  +------+------+------+------+------+------+------+\n    It\
    \ is not considered an error for an element to be tagged but not\n    referenced.\n\
    \    A substructure with internal sharing may be created.  If such a\n    substructure\
    \ is closed with respect to sharing -- that is, all\n    references to its tagged\
    \ elements are within the substructure --\n    then there is no need for the knowledge\
    \ of the sharing to propagate\n    up the hierarchy of lists.  For example, if\
    \ the substructure is:\n      00-LIST ( a b c b )\n    which with sharing is:\n\
    \      11-LIST ( a T1:b c R1 )\n    When this substructure is included in a large\
    \ structure the high\n                                               Internet\
    \ Message Protocol\n                                                         \
    \  Specification\n    order bits can be reset since the substructure is closed\
    \ with\n    respect to sharing.  For example:\n      00-LIST ( x 11-LIST ( a T1:b\
    \ c R1 ) y )\n    Note:  While sharing adds transmission and memory efficiency,\
    \ it is\n    costly in processing to separate shared elements.  This is the main\n\
    \    reason for restricting the sharing supported by the MPM.  At some\n    later\
    \ time these restrictions may be eased.\n    It is possible to create loops, \"\
    strange loops\" and \"tangled\n    hierarchies\" using this mechanism [32].  The\
    \ MPM will not check for\n    such improper structures within documents, and will\
    \ not deliver\n    messages involved in such structures between documents.\n \
    \   If an encryption scheme is used to ensure the privacy of\n    communication\
    \ it is unlikely that any parts of the message can be\n    shared.  This is due\
    \ to the fact that in most case the encryption\n    keys will be specific between\
    \ two individuals.  There may be a few\n    cases where encrypted data may be\
    \ shared.  For example, all the\n    members of a committee may use a common key\
    \ when acting on committee\n    business, or in a public key scheme a document\
    \ may be \"signed\" using\n    the private key of the sender and inspected by\
    \ anyone using the\n    public key of the sender.\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                            4.  OTHER ISSUES\n"
- title: This section discusses various other issues that need to be dealt with
  contents:
  - 'This section discusses various other issues that need to be dealt with

    '
- title: in a computer message system.
  contents:
  - 'in a computer message system.

    '
- title: 4.1.  Accounting and Billing
  contents:
  - "4.1.  Accounting and Billing\n  Accounting and billing must be performed by the\
    \ MPM.  The charge to\n  the user by the message delivery system must be predictable,\
    \ and so\n  cannot depend on the actual cost of sending a particular message which\n\
    \  incurs random delays, handling and temporary storage charges.  Rather,\n  these\
    \ costs must be aggregated and charged back to the users on an\n  average cost\
    \ basis.  The user of the service may be charged based on\n  the destination or\
    \ distance, the length of the message, type of\n  service, or other parameters\
    \ selected as the message is entered into\n  the delivery system, but must not\
    \ depend on essentially random\n  handling by the system of the particular message.\n\
    \  This means it is pointless to have each message carry an accumulated\n  charge\
    \ (or list of charges).  Rather, the MPM will keep a log of\n  messages handled\
    \ and periodically bill the originators of those\n  messages.\n  It seems that\
    \ the most reasonable scheme is to follow the practice of\n  the international\
    \ telephone authorities.  In such schemes the\n  authority where the message originates\
    \ bills the user of the service\n  for the total charge.  The authorities assist\
    \ each other in providing\n  the international message transfer and the authorities\
    \ periodically\n  settle any differences in accounts due to an imbalance in\n\
    \  international traffic.\n  Thus the MPMs will keep logs of messages handled\
    \ and will periodically\n  charge their neighboring MPM for messages handled for\
    \ them.  This\n  settlement procedure is outside the message system and between\
    \ the\n  administrators of the MPMs.\n  As traffic grows it will be impractical\
    \ to log every message\n  individually.  It will be necessary to establish categories\
    \ of\n  messages (e.g., short, medium, large) and only count the number in\n \
    \ each category.\n  The MPM at the source of the message will have a local means\
    \ of\n  identifying the user to charge for the message delivery service.  The\n\
    \  relay and destination MPMs will know which neighbor MPMs to charge (or\n  settle\
    \ with) for delivery of their messages.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Other Issues
  contents:
  - 'Other Issues

    '
- title: 4.2.  Addressing and Routing
  contents:
  - "4.2.  Addressing and Routing\n  The mailbox provides for many types of address\
    \ information.  The MPMs\n  in the ARPA internet can most effectively use the\
    \ internet address\n  [2].  The use of other address information is not yet very\
    \ clear.\n  Some thoughts on addressing issues may be found in the references\n\
    \  [33,34,35].\n  An MPM sometimes must make a routing decision when it is acting\
    \ as a\n  relay-MPM (or source MPM).  It must be able to use the information\n\
    \  from the mailbox to determine to which of its neighbor MPMs to send\n  the\
    \ message.  One way this might be implemented is to have a table of\n  destination\
    \ networks with corresponding neighbor MPM identifiers to\n  use for routing toward\
    \ that network.\n  It is not expected that such routing tables would be very dynamic.\n\
    \  Changes would occur only when new MPMs came into existence or MPMs\n  went\
    \ out of service for periods of days.\n  Even with relatively slowly changing\
    \ routing information the MPMs need\n  an automatic mechanism for adjusting their\
    \ routing tables.  The\n  routing problem here is quite similar to the problem\
    \ of routing in a\n  network of packet switches such as the ARPANET IMPs or a\
    \ set of\n  internet gateways.  A great deal of work has been done on such\n \
    \ problems and many simple schemes have been found faulty.  There are\n  details\
    \ of these procedures which may become troublesome when the\n  number of nodes\
    \ grows beyond a certain point or the frequency of\n  update exchanges gets large.\n\
    \  A basic routing scheme is to have a table of <network-name,\n  mpm-identifier>\
    \ pairs.  The MPM could look up the network name found\n  in the mailbox of the\
    \ message and determine the internet\n  mpm-identifier of the next MPM to which\
    \ to route the message.  To\n  permit automatic routing updates another column\
    \ would be added to\n  indicate the distance to the destination.  This could be\
    \ measured in\n  several ways, for example, the number of relay MPM (or hops)\
    \ to the\n  final destination.  In this case each entry in the table is a triple\n\
    \  of <network-name, mpm-identifier, distance>.\n  To update the routing information\
    \ when changes occur an MPM updates\n  its table.  It then sends to each next\
    \ MPM in its table a table of\n  pairs <network-name, distance>, which say in\
    \ effect \"I can get a\n  message to each of these networks with \"cost\" distance.\"\
    \  An MPM which\n  receives such an update will add to all the distances the distance\
    \ to\n  the MPM sending the update (e.g., one hop) and compare the information\n\
    \  with its own table.\n                                               Internet\
    \ Message Protocol\n                                                         \
    \   Other Issues\n  If the update information shows that the distance to a destination\n\
    \  network is now smaller via the MPM which sent the update, the MPM\n  changes\
    \ its own table to reflect the better route, and the new\n  distance.  If the\
    \ MPM has made changes in its table it sends update\n  information to all the\
    \ MPMs listed as next-MPMs in its table.\n  One further feature is that when a\
    \ new network comes into existence an\n  entry must be added to the table in each\
    \ MPM.  The MPMs should\n  therefore expect the case that update information may\
    \ contain entries\n  which are new networks, and in such an event add these entries\
    \ to\n  their own tables.\n  When a new MPM comes into existence it will have\
    \ an initial table\n  indicating that it is a good route (short distance) to the\
    \ network it\n  is in, and will have entries for a few neighbor networks.  It\
    \ will\n  send an initial \"update\" to those neighbor MPMs which will respond\n\
    \  with more complete tables, thus informing the new MPM of routes to\n  many\
    \ networks.\n  This routing update mechanism is a simple minded scheme and may\
    \ have\n  to be replaced as the system of MPMs grows.  In addition it ignores\n\
    \  the opportunity for MPMs to use other information (besides destination\n  network\
    \ name) for routing.  MPMs may have tables that indicate\n  next-MPMs based on\
    \ city, telephone number, organization, or other\n  categories of information.\n"
- title: 4.3.  Encryption
  contents:
  - "4.3.  Encryption\n  It is straightforward to add the capability to have the document\n\
    \  portion of messages either wholly or partially encrypted.  An\n  additional\
    \ basic data element is defined to carry encrypted data.  The\n  data within this\
    \ element may be composed of other elements, but that\n  could only be perceived\
    \ after the data was decrypted.\n                      +------+------+------+------+\n\
    \    14 Encrypt        |  14  |     octet count    |\n                      +------+------+------+------+\n\
    \                             +------+------+------+-------\n                \
    \             |alg id|   key id    | Data ...\n                             +------+------+------+--------\n\
    \  Element code 14 (ENCRYPT) is used to encapsulate encrypted data.  The\n  format\
    \ is the one-octet type code, the three-octet octet count, a\n  one-octet algorithm\
    \ identifier, a two-octet key identifier, and count\n  octets of data.  Use of\
    \ this element indicates that the data it\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Other Issues
  contents:
  - "Other Issues\n  contains is encrypted.  The encryption scheme is indicated by\
    \ the\n  algorithm identifier, and the key used is indicated by the key\n  identifier\
    \ (this is not the key itself).  The NBS Data Encryption\n  Standard (DES) [36],\
    \ public key encryption [37,38,39], or other\n  schemes may be used.\n  To process\
    \ this data element, the user is asked for the appropriate\n  key and the data\
    \ can then be decrypted.  The data thus revealed will\n  be in the form of complete\
    \ data element fields.  Encryption cannot\n  occur over a partial field.  The\
    \ revealed data is then processed\n  normally.\n  Note that there is no reason\
    \ why all fields of a document could not be\n  encrypted including all document\
    \ header information such as From,\n  Date, etc.\n                           \
    \                    Internet Message Protocol\n                 5.  THE MPM:\
    \  A POSSIBLE ARCHITECTURE\n"
- title: The heart of the internet message system is the MPM which is responsible
  contents:
  - 'The heart of the internet message system is the MPM which is responsible

    '
- title: for routing and delivering messages.  Each network must have at least
  contents:
  - 'for routing and delivering messages.  Each network must have at least

    '
- title: one MPM.  These MPMs are logically connected together, and internet mail
  contents:
  - 'one MPM.  These MPMs are logically connected together, and internet mail

    '
- title: is always transferred along logical channels between them.  The MPMs
  contents:
  - 'is always transferred along logical channels between them.  The MPMs

    '
- title: interface with existing local message systems.
  contents:
  - 'interface with existing local message systems.

    '
- title: Since the local message system may be very different from the internet
  contents:
  - 'Since the local message system may be very different from the internet

    '
- title: system, special programs may be necessary to convert incoming internet
  contents:
  - 'system, special programs may be necessary to convert incoming internet

    '
- title: messages to the local format.  Likewise, messages outgoing to other
  contents:
  - 'messages to the local format.  Likewise, messages outgoing to other

    '
- title: networks may be converted to the internet format and sent via the MPMs.
  contents:
  - 'networks may be converted to the internet format and sent via the MPMs.

    '
- title: 5.1.  Interfaces
  contents:
  - "5.1.  Interfaces\n  User Interface\n    It is assumed that the interface between\
    \ the MPM and the UIP\n    provides for passing data structures which represent\
    \ the document\n    portion of the message.  In addition, this interface must\
    \ pass the\n    delivery address information (which becomes the information in\
    \ the\n    mailbox field of the command).  It is assumed that the information\n\
    \    is passed between the UIP and the MPM via shared files, but this is\n   \
    \ not the only possible mechanism.  These two processes may be more\n    strongly\
    \ coupled (e.g., by sharing memory), or less strongly coupled\n    (e.g., by communicating\
    \ via logical channels).\n    When a UIP passes a document and a destination address\
    \ to the MPM,\n    the MPM assigns a transaction-number and forms a message to\
    \ send.\n    The MPM must record the relationship between the transaction-number,\n\
    \    the document, and the UIP, so that it can inform the UIP about the\n    outcome\
    \ of the delivery attempt for that document when the\n    acknowledgment message\
    \ is received at some later time.\n    Assuming a file passing mode of communication\
    \ between the UIP and\n    the MPM the sending and receiving of mail might involve\
    \ the\n    following interactions:\n      A user has an interactive session with\
    \ a UIP to compose a document\n      to send to a destination (or list of destinations).\
    \  When the user\n      indicates to the UIP that the document is to be sent,\
    \ the UIP\n      places the information into a file for the MPM.  The UIP may\
    \ then\n      turn to the next request of the user.\n      The MPM finds the file\
    \ and extracts the the information.  It\n      creates a message, assigning a\
    \ transaction-number and forming a\n      deliver command.  The MPM records the\
    \ UIP associated with this\n      message.  The MPM sends the message toward the\
    \ destination.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: MPM Architecture
  contents:
  - "MPM Architecture\n      When the MPM receives a deliver message from another\
    \ MPM addressed\n      to a user in its domain, it extracts the document and puts\
    \ it into\n      a file for the UIP associated with the destination user.  The\
    \ MPM\n      also sends an acknowledge message to the originating MPM.\n     \
    \ When the MPM receives an acknowledgment for a message it sent, the\n      MPM\
    \ creates a notification for the associated UIP and places it in\n      a file\
    \ for that UIP.\n      The format of these files is up to each UIP/MPM interface\
    \ pair.\n      One reasonable choice is to use the same data structures used in\n\
    \      the MPM-MPM communication.\n  Communication Interface\n    It is assumed\
    \ here that the MPMs use an underlying communication\n    system, and TCP [3]\
    \ has been taken as the model.  In particular, the\n    MPM is assumed to be listening\
    \ for a TCP connection on a TCP port,\n    i.e., it is a server process.  The\
    \ port is either given explicitly\n    in the mpm-identifier or takes the default\
    \ vaule 45 (55 octal) [4].\n    Again, this is not intended to limit the implementation\
    \ choices;\n    other forms of interprocess communication are allowed, and other\n\
    \    types of physical interconnection are permitted.  One might even use\n  \
    \  dial telephone calls to interconnect MPMs (using suitable protocols\n    to\
    \ provide reliable communication) [12,19,20,21].\n"
- title: 5.2.  The MPM Organization
  contents:
  - "5.2.  The MPM Organization\n  Messages in the internet mail system are transmitted\
    \ in lists called\n  message-bags (or simply bags), each bag containing one or\
    \ more\n  messages.  Each MPM is expected to implement functions which will\n\
    \  allow it to deliver local messages it receives and to forward\n  non-local\
    \ ones to other MPMs presumably closer to the message's\n  destination.\n  Loosely,\
    \ each MPM can be separated into six components:\n    1--Acceptor\n      Receives\
    \ incoming message-bags, from other MPMs, from UIPs, or\n      from conversion\
    \ programs.\n    2--Message-Bag Processor\n      Splits a bag into these three\
    \ portions:\n                                               Internet Message Protocol\n\
    \        a.    Local Host Messages\n        b.    Local Net Messages\n       \
    \ c.    Foreign Net Messages\n    3--Local Host Delivery\n      Delivers local\
    \ host messages, may call on conversion program.\n    4--Local Net Delivery\n\
    \      Delivers local net messages, may call on conversion program.\n    5--Foreign\
    \ Net Router\n      Forms message-bags for transmission to other MPMs and determines\n\
    \      the first step in the route.\n    6--Foreign Net Sender\n      Activates\
    \ transmission channels to other MPMs and sends\n      message-bags to foreign\
    \ MPMs.\n  If the local net message system uses the protocol of the MPMs, then\n\
    \  there need be no distinction between local net and foreign net\n  delivery\
    \ procedures.\n  All of these components can be thought of as independent.  The\n\
    \  function of the Acceptor is to await incoming message-bags and to\n  insert\
    \ them into the Bag-Input Queue.\n  The Bag-Input queue is read by the message-bag\
    \ Processor which will\n  separate and deliver suitable portions of the message-bags\
    \ it\n  retrieves from the queue to one of three queues:\n    a.    Local Host\
    \ Queue\n    b.    Local Net Queue\n    c.    Foreign Net Queue\n  When an MPM\
    \ has a message to send to another MPM, it must add its own\n  handling-stamp\
    \ to the trace field of the command.  The trace then\n  becomes a record of the\
    \ route the message has taken.  An MPM should\n  examine the trace field to see\
    \ if the message is in a routing loop.\n  All commands require the return of the\
    \ trace as a trail in the\n  matching reply command.\n  All of these queues have\
    \ as elements complete message-bags created by\n  selecting messages from the\
    \ input message-bags.\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n  The Local Host queue serves as input to the Local\
    \ Host Delivery\n  process.  This component is responsible for delivering messages\
    \ to its\n  local host.  It may call on a conversion program to reformat the\n\
    \  messages into a form the local protocol will accept.  This will\n  probably\
    \ involve such things as copying shared information.\n  The Local Net queue serves\
    \ as input to the Local Net Delivery process.\n  This component is responsible\
    \ for delivering messages to other hosts\n  on its local net.  It must be capable\
    \ of handling whatever error\n  conditions the local net might return, and should\
    \ include the ability\n  to retransmit.  It may call on a conversion program to\
    \ reformat the\n  messages into a form the local protocol will accept.  This will\n\
    \  probably involve such things as copying shared information.\n  The other two\
    \ processes are more closely coupled.  The Foreign Net\n  Router takes its input\
    \ bags from the Foreign Net Queue.  From the\n  internal information it contains,\
    \ it determines which of the MPMs to\n  which it is connected should receive the\
    \ bag.\n  It then places the bag along with the routing information into the\n\
    \  Send Mail Queue.  The Foreign Net Sender retrieves it from that queue\n  and\
    \ transmits it across a channel to the intended foreign MPM.  The\n  Sender aggregates\
    \ messages to the same next MPM into a bag.\n  The Foreign Net Router should be\
    \ capable of receiving external input\n  to its routing information table.  This\
    \ may come from the Foreign Net\n  Sender in the case of a channel going down,\
    \ requiring a decision to\n  either postpone delivery or to determine a new route.\
    \  The Router is\n  responsible for maintaining sufficient information to determine\
    \ where\n  to send any incoming message-bag.\n  Forwarding\n    An MPM may have\
    \ available information on the correct mailboxes of\n    users which are not at\
    \ its location.  This information, called a\n    forwarding data base, may be\
    \ used to return the correct address in\n    response to a probe command, or to\
    \ actually forward a deliver\n    command (if allowed by the type of service).\n\
    \    Because such forwarding may cause the route of a message to pass\n    through\
    \ an MPM already on the trace of this message, only the\n    portion of the trace\
    \ back to the most recent forward action should\n    be used for loop detection\
    \ by a relay relaying MPM, and only the\n    forward action entries in the trace\
    \ should be checked by a\n    forwarding MPM.\n                              \
    \                 Internet Message Protocol\n  Implementation Recommendations\n\
    \    Transaction numbers can be assigned sequentially, with wrap around\n    when\
    \ the highest value is reached.  This should ensure that no\n    message with\
    \ a particular transaction number from this source is in\n    the network when\
    \ another instance of this transaction number is\n    chosen.\n    The processing\
    \ to separate shared elements when the routes of the\n    shared elements diverge\
    \ while still preserving the sharing possible\n    appears to be an O(N*M**2)\
    \ operation where N is the number of\n    distinct objects in a message which\
    \ may be shared across message\n    boundaries and M is the number of messages\
    \ in the bag.\n    Also note that share-tags may be copied into separate message\
    \ bags\n    which are not referenced.  These could be removed with another pass\n\
    \    over the message bag.\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                        6.  EXAMPLES & SCENARIOS\n"
- title: 'Example 1:  Message Format'
  contents:
  - "Example 1:  Message Format\n  Suppose we want to send the following message:\n\
    \    Date: 1979-03-29-11:46-08:00\n    From: Jon Postel <Postel@ISIE>\n    Subject:\
    \ Meeting Thursday\n    To: Danny Cohen <Cohen@USC-ISIB>\n    CC: Linda\n    Danny:\n\
    \    Please mark your calendar for our meeting Thursday at 3 pm.\n    --jon.\n\
    \  It will be encoded in the structured format.  The following will\n  present\
    \ successive steps in the top down generation of this message.\n  The actual document\
    \ above will not be shown in the coded form.\n  1.  message\n  2.  (identification,\
    \ command, document)\n  3.  (ID:(mpm-identifier, transaction-number),\n      \
    \ CMD:(MAILBOX:mailbox, OPERATION:operation,\n                               \
    \                 arguments, TRACE:trace),\n       DOC:<<document>>)\n  4.  (ID:(mpm-identifier,\
    \ transaction-number),\n       CMD:(MAILBOX:mailbox, OPERATION:operation,\n  \
    \                                TYPE-OF-SERVICE:regular, TRACE:trace),\n    \
    \   DOC:<<document>>)\n  5.  (ID:(MPM:(IA:12,1,0,52,0,45), TRANSACTION:37),\n\
    \       CMD:(MAILBOX:(MPM:(IA:12,3,0,52,0,45),\n                     NET:ARPA,\n\
    \                     HOST:ISIB,\n                     PORT:45,\n            \
    \         USER:Cohen),\n            OPERATION:DELIVER,\n            TYPE-OF-SERVICE:REGULAR,\n\
    \            TRACE:(MPM:(IA:12,1,0,52,0,45)\n                   DATE:1979-03-29-11:46-08:00,\n\
    \                   ACTION:ORIGIN)),\n       DOC:<<document>>)\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n  6.  PROPLIST:(\n        ID:PROPLIST:(\n             MPM:PROPLIST:(\n\
    \                   IA:12,1,0,52,0,45),\n                 ENDLIST\n          \
    \   TRANSACTION:37)\n           ENDLIST,\n        CMD:PROPLIST(\n            \
    \ MAILBOX:(PROPLIST:(\n                        MPM:PROPLIST(\n               \
    \               IA:12,3,0,52,0,45),\n                            ENDLIST\n   \
    \                     NET:ARPA,\n                        HOST:ISIB,\n        \
    \                PORT:45,\n                        USER:Cohen ),\n           \
    \           ENDLIST\n             OPERATION:DELIVER,\n             TYPE-OF-SERVICE:REGULAR,\n\
    \             TRACE:(PROPLIST:MPM:\n                       (PROPLIST:\n      \
    \                    IA:12,1,0,52,0,45)\n                        ENDLIST\n   \
    \                   DATE:1979-03-29-11:46-08:00,\n                      ACTION:ORIGIN)),\n\
    \                    ENDLIST\n          ENDLIST\n        DOC:<<document>>)\n \
    \     ENDLIST\n                                               Internet Message\
    \ Protocol\n                                                    Examples & Scenarios\n"
- title: 'Example 2:  Delivery and Acknowledgment'
  contents:
  - "Example 2:  Delivery and Acknowledgment\n  The following are four views of the\
    \ message of example 1 during the\n  successive transmission from the origination\
    \ MPM, through a relay MPM,\n  to the destination MPM, and the return of the acknowledgment,\
    \ through\n  a relay MPM, to the originating MPM.\n  +-----------------------------------------------------------------+\
    \ \n  |                          A         B                            | \n \
    \ | sending --> originating --> relay --> destination --> receiving | \n  |  \
    \ user          MPM          MPM          MPM            user   | \n  |      \
    \                                                           | \n  |          \
    \                D         C                            | \n  |             originating\
    \ <-- relay <-- destination               | \n  |                 MPM        \
    \  MPM          MPM                   | \n  +-----------------------------------------------------------------+\
    \ \n                           Transmission Path\n                           \
    \    Figure 6.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n  A.  Between the originating MPM and the relay MPM.\n\
    \    PROPLIST:\n      NAME:\"ID\",\n        PROPLIST:\n          NAME:\"MPM\"\
    ,\n            PROPLIST:\n              NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\n\
    \            ENDLIST\n          NAME:\"TRANSACTION\", INTEGER:37\n        ENDLIST\n\
    \      NAME:\"CMD\",\n        PROPLIST:\n          NAME:\"MAILBOX\",\n       \
    \     PROPLIST:\n              NAME:\"MPM\",\n                PROPLIST:\n    \
    \              NAME:\"IA\", NAME:\"10,3,0,52,0,45\"\n                ENDLIST\n\
    \              NAME:\"NET\", NAME:\"ARPA\"\n              NAME:\"HOST\", NAME:\"\
    ISIB\"\n              NAME:\"PORT\", NAME:\"45\"\n              NAME:\"USER\"\
    , NAME:\"Cohen\"\n            ENDLIST\n          NAME:\"OPERATION\", NAME:\"DELIVER\"\
    \n          NAME:\"TYPE-OF-SERVICE\", NAME:\"REGULAR\"\n          NAME:\"TRACE\"\
    ,\n            LIST:\n              PROPLIST:\n                NAME:\"MPM\",\n\
    \                  PROPLIST:\n                    NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\
    \n                  ENDLIST\n                NAME:\"DATE\", NAME:\"1979-03-29-11:47.5-08:00\"\
    \n                NAME:\"ACTION\", NAME:\"ORIGIN\"\n              ENDLIST\n  \
    \          ENDLIST\n        ENDLIST\n      NAME:\"DOC\", <<document>>\n    ENDLIST\n\
    \                                               Internet Message Protocol\n  \
    \                                                  Examples & Scenarios\n  B.\
    \  Between the relay MPM and the destination MPM.\n    PROPLIST:\n      NAME:\"\
    ID\",\n        PROPLIST:\n          NAME:\"MPM\",\n            PROPLIST:\n   \
    \           NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\n            ENDLIST\n      \
    \    NAME:\"TRANSACTION\", INTEGER:37\n        ENDLIST\n      NAME:\"CMD\",\n\
    \        PROPLIST:\n          NAME:\"MAILBOX\",\n            PROPLIST:\n     \
    \         NAME:\"MPM\",\n                PROPLIST:\n                  NAME:\"\
    IA\", NAME:\"10,3,0,52,0,45\"\n                ENDLIST\n              NAME:\"\
    NET\", NAME:\"ARPA\"\n              NAME:\"HOST\", NAME:\"ISIB\"\n           \
    \   NAME:\"PORT\", NAME:\"45\"\n              NAME:\"USER\", NAME:\"Cohen\"\n\
    \            ENDLIST\n          NAME:\"OPERATION\", NAME:\"DELIVER\"\n       \
    \   NAME:\"TYPE-OF-SERVICE\", NAME:\"REGULAR\"\n          NAME:\"TRACE\",\n  \
    \          LIST:\n              PROPLIST:\n                NAME:\"MPM\",\n   \
    \               PROPLIST:\n                    NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\
    \n                  ENDLIST\n                NAME:\"DATE\", NAME:\"1979-03-29-11:47.5-08:00\"\
    \n                NAME:\"ACTION\", NAME:\"ORIGIN\"\n              ENDLIST\n  \
    \            PROPLIST:\n                NAME:\"MPM\",\n                  PROPLIST:\n\
    \                    NAME:\"IA\", NAME:\"10,2,0,52,0,45\"\n                  ENDLIST\n\
    \                NAME:\"DATE\", NAME:\"1979-03-29-11:48-08:00\"\n            \
    \    NAME:\"ACTION\", NAME:\"RELAY\"\n              ENDLIST\n            ENDLIST\n\
    \        ENDLIST\n      NAME:\"DOC\", <<document>>\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n    ENDLIST\n  C.  Between the destination MPM and the\
    \ relay MPM.\n    PROPLIST:\n      NAME:\"ID\",\n        PROPLIST:\n         \
    \ NAME:\"MPM\",\n            PROPLIST:\n              NAME:\"IA\", NAME:\"10,3,0,52,0,45\"\
    \n            ENDLIST\n          NAME:\"TRANSACTION\", INTEGER:1993\n        ENDLIST\n\
    \      NAME:\"CMD\",\n        PROPLIST:\n          NAME:\"MAILBOX\",\n       \
    \     PROPLIST:\n              NAME:\"MPM\",\n                PROPLIST:\n    \
    \              NAME:\"IA\", INTEGER:\"10,1,0,52,0,45\"\n                ENDLIST\n\
    \              NAME:\"NET\", NAME:\"ARPA\"\n              NAME:\"HOST\", NAME:\"\
    ISIE\"\n              NAME:\"PORT\", NAME:\"45\"\n              NAME:\"USER\"\
    , NAME:\"*MPM*\"\n            ENDLIST\n          NAME:\"OPERATION\", NAME:\"ACKNOWLEDGE\"\
    \n          NAME:\"REFERENCE\",\n            PROPLIST:\n              NAME:\"\
    MPM\",\n                PROPLIST:\n                  NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\
    \n                ENDLIST\n              NAME:\"TRANSACTION\", INTEGER:37\n  \
    \          ENDLIST\n          NAME:\"ADDRESS\",\n            PROPLIST:\n     \
    \         NAME:\"MPM\",\n                PROPLIST:\n                  NAME:\"\
    IA\", INTEGER:\"10,3,0,52,0,45\"\n                ENDLIST\n              NAME:\"\
    USER\", NAME:\"Cohen\"\n            ENDLIST\n          NAME:\"TYPE-OF-SERVICE\"\
    , NAME:\"REGULAR\"\n          NAME:\"ERROR-CLASS\", INDEX:0\n          NAME:\"\
    ERROR-STRING\", NAME:\"Ok\"\n          NAME:\"TRAIL\",\n                     \
    \                          Internet Message Protocol\n                       \
    \                             Examples & Scenarios\n            LIST:\n      \
    \        PROPLIST:\n                NAME:\"MPM\",\n                  PROPLIST:\n\
    \                    NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\n                  ENDLIST\n\
    \                NAME:\"DATE\", NAME:\"1979-03-29-11:47.5-08:00\"\n          \
    \      NAME:\"ACTION\", NAME:\"ORIGIN\"\n              ENDLIST\n             \
    \ PROPLIST:\n                NAME:\"MPM\",\n                  PROPLIST:\n    \
    \                NAME:\"IA\", NAME:\"10,2,0,52,0,45\"\n                  ENDLIST\n\
    \                NAME:\"DATE\", NAME:\"1979-03-29-11:48-08:00\"\n            \
    \    NAME:\"ACTION\", NAME:\"RELAY\"\n              ENDLIST\n              PROPLIST:\n\
    \                NAME:\"MPM\",\n                  PROPLIST:\n                \
    \    NAME:\"IA\", NAME:\"10,3,0,52,0,45\"\n                  ENDLIST\n       \
    \         NAME:\"DATE\", NAME:\"1979-03-29-11:51.567-08:00\"\n               \
    \ NAME:\"ACTION\", NAME:\"DESTINATION\"\n              ENDLIST\n            ENDLIST\n\
    \          NAME:\"TRACE\",\n            LIST:\n              PROPLIST:\n     \
    \           NAME:\"MPM\",\n                  PROPLIST:\n                    NAME:\"\
    IA\", NAME:\"10,3,0,52,0,45\"\n                  ENDLIST\n                NAME:\"\
    DATE\", NAME:\"1979-03-29-11:52-08:00\"\n                NAME:\"ACTION\", NAME:\"\
    ORIGIN\"\n              ENDLIST\n            ENDLIST\n        ENDLIST\n    ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: Examples & Scenarios
  contents:
  - "Examples & Scenarios\n  D.  Between the relay MPM and the originating MPM.\n\
    \    PROPLIST:\n      NAME:\"ID\",\n        PROPLIST:\n          NAME:\"MPM\"\
    ,\n            PROPLIST:\n              NAME:\"IA\", NAME:\"10,3,0,52,0,45\"\n\
    \            ENDLIST\n          NAME:\"TRANSACTION\", INTEGER:1993\n        ENDLIST\n\
    \      NAME:\"CMD\",\n        PROPLIST:\n          NAME:\"MAILBOX\",\n       \
    \     PROPLIST:\n              NAME:\"MPM\",\n                PROPLIST:\n    \
    \              NAME:\"IA\", INTEGER:\"10,1,0,52,0,45\"\n                ENDLIST\n\
    \              NAME:\"NET\", NAME:\"ARPA\"\n              NAME:\"HOST\", NAME:\"\
    ISIE\"\n              NAME:\"PORT\", NAME:\"45\"\n              NAME:\"USER\"\
    , NAME:\"*MPM*\"\n            ENDLIST\n          NAME:\"OPERATION\", NAME:\"ACKNOWLEDGE\"\
    \n          NAME:\"REFERENCE\",\n            PROPLIST:\n              NAME:\"\
    MPM\",\n                PROPLIST:\n                  NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\
    \n                ENDLIST\n              NAME:\"TRANSACTION\", INTEGER:37\n  \
    \          ENDLIST\n          NAME:\"ADDRESS\",\n            PROPLIST:\n     \
    \         NAME:\"MPM\",\n                PROPLIST:\n                  NAME:\"\
    IA\", INTEGER:\"10,3,0,52,0,45\"\n                ENDLIST\n              NAME:\"\
    USER\", NAME:\"Cohen\"\n            ENDLIST\n          NAME:\"TYPE-OF-SERVICE\"\
    , NAME:\"REGULAR\"\n          NAME:\"ERROR-CLASS\", INDEX:0\n          NAME:\"\
    ERROR-STRING\", NAME:\"Ok\"\n          NAME:\"TRAIL\",\n            LIST:\n  \
    \            PROPLIST:\n                                               Internet\
    \ Message Protocol\n                                                    Examples\
    \ & Scenarios\n                NAME:\"MPM\",\n                  PROPLIST:\n  \
    \                  NAME:\"IA\", NAME:\"10,1,0,52,0,45\"\n                  ENDLIST\n\
    \                NAME:\"DATE\", NAME:\"1979-03-29-11:47.5-08:00\"\n          \
    \      NAME:\"ACTION\", NAME:\"ORIGIN\"\n              ENDLIST\n             \
    \ PROPLIST:\n                NAME:\"MPM\",\n                  PROPLIST:\n    \
    \                NAME:\"IA\", NAME:\"10,2,0,52,0,45\"\n                  ENDLIST\n\
    \                NAME:\"DATE\", NAME:\"1979-03-29-11:48-08:00\"\n            \
    \    NAME:\"ACTION\", NAME:\"RELAY\"\n              ENDLIST\n              PROPLIST:\n\
    \                NAME:\"MPM\",\n                  PROPLIST:\n                \
    \    NAME:\"IA\", NAME:\"10,3,0,52,0,45\"\n                  ENDLIST\n       \
    \         NAME:\"DATE\", NAME:\"1979-03-29-11:51.567-08:00\"\n               \
    \ NAME:\"ACTION\", NAME:\"DESTINATION\"\n              ENDLIST\n            ENDLIST\n\
    \          NAME:\"TRACE\",\n            LIST:\n              PROPLIST:\n     \
    \           NAME:\"MPM\",\n                  PROPLIST:\n                    NAME:\"\
    IA\", NAME:\"10,3,0,52,0,45\"\n                  ENDLIST\n                NAME:\"\
    DATE\", NAME:\"1979-03-29-11:52-08:00\"\n                NAME:\"ACTION\", NAME:\"\
    ORIGIN\"\n              ENDLIST\n              PROPLIST:\n                NAME:\"\
    MPM\",\n                  PROPLIST:\n                    NAME:\"IA\", NAME:\"\
    10,2,0,52,0,45\"\n                  ENDLIST\n                NAME:\"DATE\", NAME:\"\
    1979-03-29-11:52.345-08:00\"\n                NAME:\"ACTION\", NAME:\"RELAY\"\n\
    \              ENDLIST\n            ENDLIST\n        ENDLIST\n    ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                                               Internet\
    \ Message Protocol\n                       7.  SPECIFICATION SUMMARY\n"
- title: 7.1.  Message Fields
  contents:
  - "7.1.  Message Fields\n  All keywords used in this protocol are to be recognized\
    \ independent of\n  case.\n  action: NAME (one of)\n    \"ORIGIN\" | \"RELAY\"\
    \ | \"FORWARD\" | \"DESTINATION\"\n  address: PROPLIST (one of)\n    NAME: \"\
    MPM\", <mpm-identifier>\n    NAME: \"USER\", <user>\n      or\n    NAME: \"NET\"\
    , <net>\n    NAME: \"HOST\", <host>\n    NAME: \"PORT\", <port>\n    NAME: \"\
    USER\", <user>\n  answer: BOOLEAN\n  city: NAME\n  command: PROPLIST\n    NAME:\
    \ \"MAILBOX\", <mailbox>\n    NAME: \"OPERATION\", <operation>\n    <<arguments>>\n\
    \    NAME: \"ERROR-CLASS\", <error-class>    (only in replies)\n    NAME: \"ERROR-STRING\"\
    , <error-string>  (only in replies)\n    NAME: \"TRACE\", <trace>\n  country:\
    \ NAME\n  document: <<document>>\n  error-class: INDEX\n  error-string: NAME\n\
    \  host: NAME\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n  handling-stamp: PROPLIST\n    NAME: \"MPM\", <mpm-identifier>\n\
    \    NAME: \"DATE\", <date>\n    NAME: \"ACTION\", <action>\n  identification:\
    \ LIST\n    NAME: \"MPM\", <mpm-identifier>\n    NAME: \"TRANSACTION\", <transaction-number>\n\
    \  internet-address: NAME\n  mailbox:  PROPLIST (some of)\n    NAME: \"MPM\",\
    \ <mpm-identifier>\n    NAME: \"NET\", <net>\n    NAME: \"HOST\", <host>\n   \
    \ NAME: \"PORT\", <port>\n    NAME: \"USER\", <user>\n    NAME: \"ORG\", <organization>\n\
    \    NAME: \"CITY\", <city>\n    NAME: \"STATE\", <state>\n    NAME: \"COUNTRY\"\
    , <country>\n    NAME: \"ZIP\", <zip-code>\n    NAME: \"PHONE\", <phone-number>\n\
    \    <<other-items>>\n  message: PROPLIST\n    NAME: \"ID\", <identification>\n\
    \    NAME: \"CMD\", <command>\n    NAME: \"DOC\", <document> (only in deliver)\n\
    \  mpm-identifier: PROPLIST (one of)\n    NAME: \"IA\", <internet-address>\n \
    \     or\n    NAME: \"X121\", <x121-address>\n  net: NAME\n  operation: NAME (one\
    \ of)\n      \"DELIVER\" | \"ACKNOWLEDGE\n    | \"PROBE\"   | \"RESPONSE\n   \
    \ | \"CANCEL\"  | \"CANCELED\"\n  organization: NAME\n  phone-number: NAME\n \
    \                                              Internet Message Protocol\n  port:\
    \ NAME\n  state: NAME\n  trace: LIST\n    <handling-stamp>\n    ...\n  trail:\
    \ LIST\n    <handling-stamp>\n    ...\n  transaction-number: INTEGER\n  type-of-service:\
    \ NAME (one or more of)\n    \"REGULAR\" | \"FORWARD\" | \"GENDEL\" | \"PRIORITY\"\
    \n  user: NAME\n  x121-address: NAME\n  zip-code: NAME\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 7.2.  Deliver Message
  contents:
  - "7.2.  Deliver Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n     \
    \   NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"NET\", NAME:<net>\n            NAME:\"HOST\", NAME:<host>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"USER\", NAME:<user>\n\
    \            NAME:\"ORG\", NAME:<organization>\n            NAME:\"CITY\", NAME:<city>\n\
    \            NAME:\"STATE\", NAME:<state>\n            NAME:\"COUNTRY\", NAME:<country>\n\
    \            NAME:\"ZIP\", NAME:<zip-code>\n            NAME:\"PHONE\", NAME:<phone-number>\n\
    \            <<other-items>>\n          ENDLIST\n        NAME:\"OPERATION\", NAME:\"\
    DELIVER\"\n        NAME:\"TYPE-OF-SERVICE\", NAME:<type-of-service>\n        NAME:\"\
    TRACE\",\n          LIST:\n            PROPLIST:\n              NAME:\"MPM\",\n\
    \                PROPLIST:\n                  NAME:\"IA\", INTEGER:<internet-address>\n\
    \                ENDLIST\n              NAME:\"DATE\", NAME:<date>\n         \
    \     NAME:\"ACTION\", NAME:<action>\n            ENDLIST\n            ...\n \
    \         ENDLIST\n      ENDLIST\n    NAME:\"DOC\", <<document>>\n  ENDLIST\n\
    \                                               Internet Message Protocol\n"
- title: 7.3.  Acknowledge Message
  contents:
  - "7.3.  Acknowledge Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n \
    \       NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"USER\", NAME:\"*MPM*\"\n            NAME:\"NET\", NAME:<net>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"HOST\", NAME:<host>\n\
    \          ENDLIST\n        NAME:\"OPERATION\", NAME:\"ACKNOWLEDGE\"\n       \
    \ NAME:\"REFERENCE\",\n          PROPLIST:\n            NAME:\"MPM\",\n      \
    \        PROPLIST:\n                NAME:\"IA\", NAME:<internet-address>\n   \
    \           ENDLIST\n            NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \          ENDLIST\n        NAME:\"ADDRESS\",\n          PROPLIST:\n         \
    \   NAME:\"MPM\",\n              PROPLIST:\n                NAME:\"IA\", INTEGER:<internet-address>\n\
    \              ENDLIST\n            NAME:\"USER\", NAME:<user>\n          ENDLIST\n\
    \        NAME:\"TYPE-OF-SERVICE\", NAME:<type-of-service>\n        NAME:\"ERROR-CLASS\"\
    , INDEX:<error-class>\n        NAME:\"ERROR-STRING\", NAME:<error-string>\n  \
    \      NAME:\"TRAIL\",\n          LIST:\n            PROPLIST:\n             \
    \ NAME:\"MPM\",\n"
- title: Internet Message Protocol
  contents:
  - "Internet Message Protocol\n                PROPLIST:\n                  NAME:\"\
    IA\", INTEGER:<internet-address>\n                ENDLIST\n              NAME:\"\
    DATE\", NAME:<date>\n              NAME:\"ACTION\", NAME:<action>\n          \
    \  ENDLIST\n            ...\n          ENDLIST\n        NAME:\"TRACE\",\n    \
    \      LIST:\n            PROPLIST:\n              NAME:\"MPM\",\n           \
    \     PROPLIST:\n                  NAME:\"IA\", INTEGER:<internet-address>\n \
    \               ENDLIST\n              NAME:\"DATE\", NAME:<date>\n          \
    \    NAME:\"ACTION\", NAME:<action>\n            ENDLIST\n            ...\n  \
    \        ENDLIST\n      ENDLIST\n  ENDLIST\n                                 \
    \              Internet Message Protocol\n"
- title: 7.4.  Probe Message
  contents:
  - "7.4.  Probe Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n       \
    \ NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"NET\", NAME:<net>\n            NAME:\"HOST\", NAME:<host>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"USER\", NAME:<user>\n\
    \            NAME:\"ORG\", NAME:<organization>\n            NAME:\"CITY\", NAME:<city>\n\
    \            NAME:\"STATE\", NAME:<state>\n            NAME:\"COUNTRY\", NAME:<country>\n\
    \            NAME:\"ZIP\", NAME:<zip-code>\n            NAME:\"PHONE\", NAME:<phone-number>\n\
    \            <<other-items>>\n          ENDLIST\n        NAME:\"OPERATION\", NAME:\"\
    PROBE\"\n        NAME:\"TRACE\",\n          LIST:\n            PROPLIST:\n   \
    \           NAME:\"MPM\",\n                PROPLIST:\n                  NAME:\"\
    IA\", INTEGER:<internet-address>\n                ENDLIST\n              NAME:\"\
    DATE\", NAME:<date>\n              NAME:\"ACTION\", NAME:<action>\n          \
    \  ENDLIST\n            ...\n          ENDLIST\n      ENDLIST\n  ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 7.5.  Response Message
  contents:
  - "7.5.  Response Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n    \
    \    NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"NET\", NAME:<net>\n            NAME:\"HOST\", NAME:<host>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"USER\", NAME:\"*MPM*\"\
    \n          ENDLIST\n        NAME:\"OPERATION\", NAME:\"RESPONSE\"\n        NAME:\"\
    REFERENCE\",\n          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n\
    \                NAME:\"IA\", NAME:<internet-address>\n              ENDLIST\n\
    \            NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n          ENDLIST\n\
    \        NAME:\"ADDRESS\",\n          PROPLIST:\n            NAME:\"MPM\",\n \
    \             PROPLIST:\n                NAME:\"IA\", INTEGER:<internet-address>\n\
    \              ENDLIST\n            NAME:\"USER\", NAME:<user>\n          ENDLIST\n\
    \        NAME:\"ERROR-CLASS\", INDEX:<error-class>\n        NAME:\"ERROR-STRING\"\
    , NAME:<error-string>\n        NAME:\"TRAIL\",\n          LIST:\n            PROPLIST:\n\
    \              NAME:\"MPM\",\n                PROPLIST:\n                    \
    \                           Internet Message Protocol\n                  NAME:\"\
    IA\", INTEGER:<internet-address>\n                ENDLIST\n              NAME:\"\
    DATE\", NAME:<date>\n              NAME:\"ACTION\", NAME:<action>\n          \
    \  ENDLIST\n            ...\n          ENDLIST\n        NAME:\"TRACE\",\n    \
    \      LIST:\n            PROPLIST:\n              NAME:\"MPM\",\n           \
    \     PROPLIST:\n                  NAME:\"IA\", INTEGER:<internet-address>\n \
    \               ENDLIST\n              NAME:\"DATE\", NAME:<date>\n          \
    \    NAME:\"ACTION\", NAME:<action>\n            ENDLIST\n            ...\n  \
    \        ENDLIST\n      ENDLIST\n  ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 7.6.  Cancel Message
  contents:
  - "7.6.  Cancel Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n      \
    \  NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"NET\", NAME:<net>\n            NAME:\"HOST\", NAME:<host>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"USER\", NAME:<user>\n\
    \            NAME:\"ORG\", NAME:<organization>\n            NAME:\"CITY\", NAME:<city>\n\
    \            NAME:\"STATE\", NAME:<state>\n            NAME:\"COUNTRY\", NAME:<country>\n\
    \            NAME:\"ZIP\", NAME:<zip-code>\n            NAME:\"PHONE\", NAME:<phone-number>\n\
    \            <<other-items>>\n          ENDLIST\n        NAME:\"OPERATION\", NAME:\"\
    CANCEL\"\n        NAME:\"REFERENCE\",\n          PROPLIST:\n            NAME:\"\
    MPM\",\n              PROPLIST:\n                NAME:\"IA\", NAME:<internet-address>\n\
    \              ENDLIST\n            NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \          ENDLIST\n        NAME:\"TRACE\",\n          LIST:\n            PROPLIST:\n\
    \              NAME:\"MPM\",\n                PROPLIST:\n                  NAME:\"\
    IA\", INTEGER:<internet-address>\n                ENDLIST\n              NAME:\"\
    DATE\", NAME:<date>\n                                               Internet Message\
    \ Protocol\n              NAME:\"ACTION\", NAME:<action>\n            ENDLIST\n\
    \            ...\n          ENDLIST\n      ENDLIST\n  ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 7.7.  Canceled Message
  contents:
  - "7.7.  Canceled Message\n  PROPLIST:\n    NAME:\"ID\",\n      PROPLIST:\n    \
    \    NAME:\"MPM\",\n          PROPLIST:\n            NAME:\"IA\", NAME:<internet-address>\n\
    \          ENDLIST\n        NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n\
    \      ENDLIST\n    NAME:\"CMD\",\n      PROPLIST:\n        NAME:\"MAILBOX\",\n\
    \          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n   \
    \             NAME:\"IA\", INTEGER:<internet-address>\n              ENDLIST\n\
    \            NAME:\"NET\", NAME:<net>\n            NAME:\"HOST\", NAME:<host>\n\
    \            NAME:\"PORT\", NAME:<port>\n            NAME:\"USER\", NAME:\"*MPM*\"\
    \n          ENDLIST\n        NAME:\"OPERATION\", NAME:\"CANCELED\"\n        NAME:\"\
    REFERENCE\",\n          PROPLIST:\n            NAME:\"MPM\",\n              PROPLIST:\n\
    \                NAME:\"IA\", NAME:<internet-address>\n              ENDLIST\n\
    \            NAME:\"TRANSACTION\", INTEGER:<transaction-number>\n          ENDLIST\n\
    \        NAME:\"ADDRESS\",\n          PROPLIST:\n            NAME:\"MPM\",\n \
    \             PROPLIST:\n                NAME:\"IA\", INTEGER:<internet-address>\n\
    \              ENDLIST\n            NAME:\"USER\", NAME:<user>\n          ENDLIST\n\
    \        NAME:\"ERROR-CLASS\", INDEX:<error-class>\n        NAME:\"ERROR-STRING\"\
    , NAME:<error-string>\n        NAME:\"TRAIL\",\n          LIST:\n            PROPLIST:\n\
    \              NAME:\"MPM\",\n                PROPLIST:\n                    \
    \                           Internet Message Protocol\n                  NAME:\"\
    IA\", INTEGER:<internet-address>\n                ENDLIST\n              NAME:\"\
    DATE\", NAME:<date>\n              NAME:\"ACTION\", NAME:<action>\n          \
    \  ENDLIST\n            ...\n          ENDLIST\n        NAME:\"TRACE\",\n    \
    \      LIST:\n            PROPLIST:\n              NAME:\"MPM\",\n           \
    \     PROPLIST:\n                  NAME:\"IA\", INTEGER:<internet-address>\n \
    \               ENDLIST\n              NAME:\"DATE\", NAME:<date>\n          \
    \    NAME:\"ACTION\", NAME:<action>\n            ENDLIST\n            ...\n  \
    \        ENDLIST\n      ENDLIST\n  ENDLIST\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: 7.8.  Data Element Summary
  contents:
  - "7.8.  Data Element Summary\n  CODE   NAME      STRUCTURE                    \
    \            LENGTH\n  ----   ----      ---------                            \
    \    ------\n   0     NOP       CODE(1)                                   1\n\
    \   1     PAD       CODE(1),COUNT(3),DATA(C)                  C+4\n   2     BOOLEAN\
    \   CODE(1),TRUE-FALSE(1)                     2\n   3     INDEX     CODE(1),INDEX(2)\
    \                          3\n   4     INTEGER   CODE(1),INTEGER(4)          \
    \              5\n   5     EPI       CODE(1),COUNT(3),INTEGER(C)             \
    \  C+4\n   6     BITSTR    CODE(1),COUNT(3),BITS(C/8)                C/8+4\n \
    \  7     NAME      CODE(1),COUNT(1),NAME(C)                  C+2\n   8     TEXT\
    \      CODE(1),COUNT(3),TEXT(C)                  C+4\n   9     LIST      CODE(1),COUNT(3),ITEMS(2),DATA(C-2)\
    \       C+4\n  10     PROPLIST  CODE(1),COUNT(3),PAIRS(1),DATA(C-1)       C+4\n\
    \  11     ENDLIST   CODE(1)                                   1\n  12     S-TAG\
    \     CODE(1),INDEX(2)                          3\n  13     S-REF     CODE(1),INDEX(2)\
    \                          3\n  14     ENCRYPT   CODE(1),COUNT(3),ALG-ID(1),\n\
    \                                   KEY-ID(2),DATA(C-3)       C+4\n  The numbers\
    \ in parentheses are the number of octets in the field.\n                    \
    \                           Internet Message Protocol\n                      \
    \         REFERENCES\n"
- title: '[1]   Cerf, V., "The Catenet Model for Internetworking," Information'
  contents:
  - "[1]   Cerf, V., \"The Catenet Model for Internetworking,\" Information\n    \
    \  Processing Techniques Office, Defense Advanced Research Projects\n      Agency,\
    \ IEN 48, July 1978.\n"
- title: '[2]   Postel, J.,  "DOD Standard Internet Protocol," USC/Information'
  contents:
  - "[2]   Postel, J.,  \"DOD Standard Internet Protocol,\" USC/Information\n    \
    \  Sciences Institute, IEN 128, NTIS number AD A079730, January 1980.\n"
- title: '[3]   Postel, J.,  "DOD Standard Transmission Control Protocol,"'
  contents:
  - "[3]   Postel, J.,  \"DOD Standard Transmission Control Protocol,\"\n      USC/Information\
    \ Sciences Institute, IEN 129, NTIS number AD\n      A082609, January 1980.\n"
- title: '[4]   Postel, J., "Assigned Numbers," RFC 762, USC/Information Sciences'
  contents:
  - "[4]   Postel, J., \"Assigned Numbers,\" RFC 762, USC/Information Sciences\n \
    \     Institute, January 1980.\n"
- title: '[5]   Feinler, E. and J. Postel, eds., "ARPANET Protocol Handbook,"'
  contents:
  - "[5]   Feinler, E. and J. Postel, eds., \"ARPANET Protocol Handbook,\"\n     \
    \ NIC 7104, for the Defense Communications Agency by the Network\n      Information\
    \ Center of SRI International, Menlo Park, California,\n      Revised January\
    \ 1978.\n"
- title: '[6]   Neigus, N., "File Transfer Protocol for the ARPA Network,"'
  contents:
  - "[6]   Neigus, N., \"File Transfer Protocol for the ARPA Network,\"\n      RFC\
    \ 542, NIC 17759, SRI International, August 1973.\n"
- title: '[7]   Bhushan, A., K. Progran, R. Tomlinson, and J. White,'
  contents:
  - "[7]   Bhushan, A., K. Progran, R. Tomlinson, and J. White,\n      \"Standardizing\
    \ Network Mail Headers,\" RFC 561, NIC 18516,\n      September 1973.\n"
- title: '[8]   Myer, T., and D. Henderson, "Message Transmission Protocol,"'
  contents:
  - "[8]   Myer, T., and D. Henderson, \"Message Transmission Protocol,\"\n      RFC\
    \ 680, NIC 32116, 30 April 1975.\n"
- title: '[9]   Crocker, D., J. Vittal, K. Progran, and D. Henderson, "Standard'
  contents:
  - "[9]   Crocker, D., J. Vittal, K. Progran, and D. Henderson, \"Standard\n    \
    \  for the Format of ARPA Network Text Messages,\" RFC 733, NIC 41952,\n     \
    \ 21 November 1977.\n"
- title: '[10]  Barber, D., and J. Laws, "A Basic Mail Scheme for EIN," INWG 192,'
  contents:
  - "[10]  Barber, D., and J. Laws, \"A Basic Mail Scheme for EIN,\" INWG 192,\n \
    \     February 1979.\n"
- title: '[11]  Braaten, O., "Introduction to a Mail Protocol," Norwegian'
  contents:
  - "[11]  Braaten, O., \"Introduction to a Mail Protocol,\" Norwegian\n      Computing\
    \ Center, INWG 180, August 1978.\n"
- title: '[12]  Crocker, D., E. Szurkowski, and D. Farber, "An Internetwork Memo'
  contents:
  - "[12]  Crocker, D., E. Szurkowski, and D. Farber, \"An Internetwork Memo\n   \
    \   Distribution Capability - MMDF,\" Sixth Data Communications\n      Symposium,\
    \ ACM/IEEE, November 1979.\n"
- title: Internet Message Protocol
  contents:
  - 'Internet Message Protocol

    '
- title: References
  contents:
  - 'References

    '
- title: '[13]  Haverty, J., D. Henderson, and D. Oestreicher, "Proposed'
  contents:
  - "[13]  Haverty, J., D. Henderson, and D. Oestreicher, \"Proposed\n      Specification\
    \ of an Inter-site Message Protocol,\" 8 July 1975.\n"
- title: '[14]  Thomas, R., "Providing Mail Services for NSW Users," BBN NSW'
  contents:
  - "[14]  Thomas, R., \"Providing Mail Services for NSW Users,\" BBN NSW\n      Working\
    \ Note 24, Bolt Beranek and Newman, October 1978.\n"
- title: '[15]  White, J., "A Proposed Mail Protocol," RFC 524, NIC 17140, SRI'
  contents:
  - "[15]  White, J., \"A Proposed Mail Protocol,\" RFC 524, NIC 17140, SRI\n    \
    \  International, 13 June 1973.\n"
- title: '[16]  White, J., "Description of a Multi-Host Journal," NIC 23144, SRI'
  contents:
  - "[16]  White, J., \"Description of a Multi-Host Journal,\" NIC 23144, SRI\n  \
    \    International, 30 May 1974.\n"
- title: '[17]  White, J., "Journal Subscription Service," NIC 23143, SRI'
  contents:
  - "[17]  White, J., \"Journal Subscription Service,\" NIC 23143, SRI\n      International,\
    \ 28 May 1974.\n"
- title: '[18]  Levin, R., and M. Schroeder, "Transport of Electronic Messages'
  contents:
  - "[18]  Levin, R., and M. Schroeder, \"Transport of Electronic Messages\n     \
    \ Through a Network,\" Teleinformatics 79, Boutmy & Danthine (eds.)\n      North\
    \ Holland Publishing Co., 1979.\n"
- title: '[19]  Earnest, L., and J. McCarthy, "DIALNET: A Computer Communications'
  contents:
  - "[19]  Earnest, L., and J. McCarthy, \"DIALNET: A Computer Communications\n  \
    \    Study,\" Computer Science Department, Stanford University, August\n     \
    \ 1978.\n"
- title: '[20]  Crispin M., "DIALNET: A Telephone Network Data Communications'
  contents:
  - "[20]  Crispin M., \"DIALNET: A Telephone Network Data Communications\n      Protocol,\"\
    \ DECUS Proceedings, Fall 1979.\n"
- title: '[21]  Caulkins, D., "The Personal Computer Network (PCNET) Project: A'
  contents:
  - "[21]  Caulkins, D., \"The Personal Computer Network (PCNET) Project: A\n    \
    \  Status Report,\" Dr. Dobbs Journal of Computer Calisthenics and\n      Orthodontia,\
    \  v.5, n.6, June 1980.\n"
- title: '[22]  Postel, J., "NSW Transaction Protocol (NSWTP)," USC/Information'
  contents:
  - "[22]  Postel, J., \"NSW Transaction Protocol (NSWTP),\" USC/Information\n   \
    \   Sciences Institute, IEN 38, May 1978.\n"
- title: '[23]  Haverty, J., "MSDTP -- Message Services Data Transmission'
  contents:
  - "[23]  Haverty, J., \"MSDTP -- Message Services Data Transmission\n      Protocol,\"\
    \ RFC 713, NIC 34739, April 1976.\n"
- title: '[24]  Haverty, J., "Thoughts on Interactions in Distributed Services,"'
  contents:
  - "[24]  Haverty, J., \"Thoughts on Interactions in Distributed Services,\"\n  \
    \    RFC 722, NIC 36806, 16 September 1976.\n"
- title: '[25]  Postel, J., "A Structured Format for Transmission of Multi-Media'
  contents:
  - "[25]  Postel, J., \"A Structured Format for Transmission of Multi-Media\n   \
    \   Documents,\" RFC 767, USC/Information Sciences Institute,\n      August 1980.\n"
- title: '[26]  ISO-2014, "Writing of calendar dates in all-numeric form,"'
  contents:
  - "[26]  ISO-2014, \"Writing of calendar dates in all-numeric form,\"\n      Recommendation\
    \ 2014, International Organization for\n      Standardization, 1975.\n       \
    \                                        Internet Message Protocol\n         \
    \                                                     References\n"
- title: '[27]  ISO-3307, "Information Interchange -- Representations of time of'
  contents:
  - "[27]  ISO-3307, \"Information Interchange -- Representations of time of\n   \
    \   the day,\" Recommendation 3307, International Organization for\n      Standardization,\
    \ 1975.\n"
- title: '[28]  ISO-4031, "Information Interchange -- Representation of local time'
  contents:
  - "[28]  ISO-4031, \"Information Interchange -- Representation of local time\n \
    \     differentials,\" Recommendation 4031, International Organization\n     \
    \ for Standardization, 1978.\n"
- title: '[29]  CCITT-X.121, "International Numbering Plan for Public Data'
  contents:
  - "[29]  CCITT-X.121, \"International Numbering Plan for Public Data\n      Networks,\"\
    \ Recommendation X.121, CCITT, Geneva, 1978.\n"
- title: '[30]  Postel, J.,  "NSW Data Representation (NSWB8)," USC/Information'
  contents:
  - "[30]  Postel, J.,  \"NSW Data Representation (NSWB8),\" USC/Information\n   \
    \   Sciences Institute, IEN 39, May 1978.\n"
- title: '[31]  Cohen, D., "On Holy Wars and a Plea for Peace," IEN 137,'
  contents:
  - "[31]  Cohen, D., \"On Holy Wars and a Plea for Peace,\" IEN 137,\n      USC/Information\
    \ Sciences Institute, 1 April 1980.\n"
- title: '[32]  Hofstadter, D., "Godel, Escher, Bach: An Eternal Golden Braid,"'
  contents:
  - "[32]  Hofstadter, D., \"Godel, Escher, Bach: An Eternal Golden Braid,\"\n   \
    \   Basic Books, New York, 1979..\n"
- title: '[33]  Harrenstien, K., "Field Addressing," ARPANET Message, SRI'
  contents:
  - "[33]  Harrenstien, K., \"Field Addressing,\" ARPANET Message, SRI\n      International,\
    \ October 1977.\n"
- title: '[34]  Postel, J., "Out-of-Net Host Address for Mail," RFC 754,'
  contents:
  - "[34]  Postel, J., \"Out-of-Net Host Address for Mail,\" RFC 754,\n      USC/Information\
    \ Sciences Institute, April 1979.\n"
- title: '[35]  Shoch, J., "On Inter-Network Naming, Addressing, and Routing,"'
  contents:
  - "[35]  Shoch, J., \"On Inter-Network Naming, Addressing, and Routing,\"\n    \
    \  IEEE Computer Society, COMPCON, Fall 1978.\n"
- title: '[36]  National Bureau of Standards, "Data Encryption Standard," Federal'
  contents:
  - "[36]  National Bureau of Standards, \"Data Encryption Standard,\" Federal\n \
    \     Information Processing Standards Publication 46, January 1977.\n"
- title: '[37]  Diffie, W., and M. Hellman, "New Directions in Cryptology," IEEE'
  contents:
  - "[37]  Diffie, W., and M. Hellman, \"New Directions in Cryptology,\" IEEE\n  \
    \    Transactions on Information Theory, IT-22, 6, November 1976.\n"
- title: '[38]  Rivest, R., A. Shamir, and L. Adleman,  "A Method for Obtaining'
  contents:
  - "[38]  Rivest, R., A. Shamir, and L. Adleman,  \"A Method for Obtaining\n    \
    \  Digital Signatures and Public-Key Cryptosystems\"  Communications\n      of\
    \ the ACM, Vol. 21, Number 2, February 1978.\n"
- title: '[39]  Merkle, R., and M. Hellman, "Hiding Information and Signatures in'
  contents:
  - "[39]  Merkle, R., and M. Hellman, \"Hiding Information and Signatures in\n  \
    \    Trapdoor Knapsacks,\" IEEE Transactions of Information Theory,\n      IT-24,5,\
    \ September 1978.\n"
