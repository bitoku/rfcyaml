- title: __initial_text__
  contents:
  - '   Framework for Content Distribution Network Interconnection (CDNI)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document presents a framework for Content Distribution Network\n\
    \   Interconnection (CDNI).  The purpose of the framework is to provide\n   an\
    \ overall picture of the problem space of CDNI and to describe the\n   relationships\
    \ among the various components necessary to interconnect\n   CDNs.  CDNI requires\
    \ the specification of interfaces and mechanisms\n   to address issues such as\
    \ request routing, distribution metadata\n   exchange, and logging information\
    \ exchange across CDNs.  The intent\n   of this document is to outline what each\
    \ interface needs to\n   accomplish and to describe how these interfaces and mechanisms\
    \ fit\n   together, while leaving their detailed specification to other\n   documents.\
    \  This document, in combination with RFC 6707, obsoletes\n   RFC 3466.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7336.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Reference Model ............................................6\n    \
    \  1.3. Structure of This Document ................................10\n   2. Building\
    \ Blocks ................................................10\n      2.1. Request\
    \ Redirection .......................................10\n           2.1.1. DNS\
    \ Redirection ....................................10\n           2.1.2. HTTP Redirection\
    \ ...................................12\n   3. Overview of CDNI Operation .....................................12\n\
    \      3.1. Preliminaries .............................................14\n  \
    \    3.2. Iterative HTTP Redirect Example ...........................15\n    \
    \  3.3. Recursive HTTP Redirection Example ........................21\n      3.4.\
    \ Iterative DNS-Based Redirection Example ...................25\n           3.4.1.\
    \ Notes on Using DNSSEC ..............................28\n      3.5. Dynamic Footprint\
    \ Discovery Example .......................29\n      3.6. Content Removal Example\
    \ ...................................31\n      3.7. Pre-positioned Content Acquisition\
    \ Example ................32\n      3.8. Asynchronous CDNI Metadata Example ........................33\n\
    \      3.9. Synchronous CDNI Metadata Acquisition Example .............35\n  \
    \    3.10. Content and Metadata Acquisition with Multiple\n            Upstream\
    \ CDNs ............................................37\n   4. Main Interfaces ................................................38\n\
    \      4.1. In-Band versus Out-of-Band Interfaces .....................39\n  \
    \    4.2. Cross-Interface Concerns ..................................40\n    \
    \  4.3. Request Routing Interfaces ................................40\n      4.4.\
    \ CDNI Logging Interface ....................................41\n      4.5. CDNI\
    \ Control Interface ....................................43\n      4.6. CDNI Metadata\
    \ Interface ...................................43\n      4.7. HTTP Adaptive Streaming\
    \ Concerns ..........................44\n      4.8. URI Rewriting .............................................46\n\
    \   5. Deployment Models ..............................................47\n  \
    \    5.1. Meshed CDNs ...............................................47\n    \
    \  5.2. CSP Combined with CDN .....................................48\n      5.3.\
    \ CSP Using CDNI Request Routing Interface ..................49\n      5.4. CDN\
    \ Federations and CDN Exchanges .........................50\n   6. Trust Model\
    \ ....................................................53\n   7. Privacy Considerations\
    \ .........................................54\n   8. Security Considerations ........................................55\n\
    \      8.1. Security of CDNI Interfaces ...............................56\n  \
    \    8.2. Digital Rights Management .................................56\n   9.\
    \ Contributors ...................................................56\n   10. Acknowledgements\
    \ ..............................................57\n   11. Informative References\
    \ ........................................57\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides an overview of the various components\n\
    \   necessary to interconnect CDNs, expanding on the problem statement\n   and\
    \ use cases introduced in [RFC6770] and [RFC6707].  It describes\n   the necessary\
    \ interfaces and mechanisms in general terms and outlines\n   how they fit together\
    \ to form a complete system for CDN\n   Interconnection.  Detailed specifications\
    \ are left to other\n   documents.  This document makes extensive use of message\
    \ flow\n   examples to illustrate the operation of interconnected CDNs, but\n\
    \   these examples should be considered illustrative rather than\n   prescriptive.\n\
    \   [RFC3466] uses different terminology and models for \"Content\n   (distribution)\
    \ Internetworking (CDI)\".  It is also less prescriptive\n   in terms of interfaces.\
    \  To avoid confusion, this document obsoletes\n   [RFC3466].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document uses the core terminology defined in [RFC6707].\
    \  It\n   also introduces the following terms:\n   CDN-Domain:  a hostname (Fully\
    \ Qualified Domain Name -- FQDN) at the\n      beginning of a URL (excluding port\
    \ and scheme), representing a set\n      of content that is served by a given\
    \ CDN.  For example, in the URL\n      http://cdn.csp.example/...rest of URL...,\
    \ the CDN-Domain is\n      cdn.csp.example.  A major role of CDN-Domain is to\
    \ identify a\n      region (subset) of the URI space relative to which various\
    \ CDNI\n      rules and policies apply.  For example, a record of CDNI Metadata\n\
    \      might be defined for the set of resources corresponding to some\n     \
    \ CDN-Domain.\n   Distinguished CDN-Domain:  a CDN-Domain that is allocated by\
    \ a CDN\n      for the purposes of communication with a peer CDN but that is not\n\
    \      found in client requests.  Such CDN-Domains may be used for inter-\n  \
    \    CDN acquisition, or as redirection targets, and enable a CDN to\n      distinguish\
    \ a request from a peer CDN from an end-user request.\n   Delivering CDN:  the\
    \ CDN that ultimately delivers a piece of content\n      to the end user.  The\
    \ last in a potential sequence of Downstream\n      CDNs.\n   Iterative CDNI Request\
    \ Redirection:  When an Upstream CDN elects to\n      redirect a request towards\
    \ a Downstream CDN, the Upstream CDN can\n      base its redirection purely on\
    \ a local decision (and without\n      attempting to take into account how the\
    \ Downstream CDN may in turn\n      redirect the user agent).  In that case, the\
    \ Upstream CDN\n      redirects the request to the Request Routing system in the\n\
    \      Downstream CDN, which in turn will decide how to redirect that\n      request:\
    \ this approach is referred to as \"Iterative\" CDNI Request\n      Redirection.\n\
    \   Recursive CDNI Request Redirection:  When an Upstream CDN elects to\n    \
    \  redirect a request towards a Downstream CDN, the Upstream CDN can\n      query\
    \ the Downstream CDN Request Routing system via the CDNI\n      Request Routing\
    \ Redirection interface (or use information cached\n      from earlier similar\
    \ queries) to find out how the Downstream CDN\n      wants the request to be redirected.\
    \  This allows the Upstream CDN\n      to factor in the Downstream CDN response\
    \ when redirecting the user\n      agent.  This approach is referred to as \"\
    Recursive\" CDNI Request\n      Redirection.  Note that the Downstream CDN may\
    \ elect to have the\n      request redirected directly to a Surrogate inside the\
    \ Downstream\n      CDN, or to any other element in the Downstream CDN (or in\
    \ another\n      CDN), to handle the redirected request appropriately.\n   Synchronous\
    \ CDNI operations:  operations between CDNs that happen\n      during the process\
    \ of servicing a user request, i.e., between the\n      time that the user agent\
    \ begins its attempt to obtain content and\n      the time at which that request\
    \ is served.\n   Asynchronous CDNI operations:  operations between CDNs that happen\n\
    \      independently of any given user request, such as advertisement of\n   \
    \   footprint information or pre-positioning of content for later\n      delivery.\n\
    \   Trigger Interface:  a subset of the CDNI Control interface that\n      includes\
    \ operations to pre-position, revalidate, and purge both\n      metadata and content.\
    \  These operations are typically called in\n      response to some action (Trigger)\
    \ by the Content Service Provider\n      (CSP) on the Upstream CDN.\n   We also\
    \ sometimes use uCDN and dCDN as shorthand for Upstream CDN and\n   Downstream\
    \ CDN (see [RFC6707]), respectively.\n   At various points in this document, the\
    \ concept of a CDN footprint is\n   used.  For a discussion on what constitutes\
    \ a CDN footprint, the\n   reader is referred to [FOOTPRINT-CAPABILITY].\n"
- title: 1.2.  Reference Model
  contents:
  - "1.2.  Reference Model\n   This document uses the reference model in Figure 1,\
    \ which expands the\n   reference model originally defined in [RFC6707].  (The\
    \ difference is\n   that the expanded model splits the Request Routing interface\
    \ into its\n   two distinct parts: the Request Routing Redirection interface and\
    \ the\n   Footprint & Capabilities Advertisement interface, as described\n   below.)\n\
    \      --------\n     /        \\\n     |   CSP  |\n     \\        /\n      --------\n\
    \          *\n          *\n          *                         /\\\n         \
    \ *                        /  \\\n      ----------------------      |CDNI|   \
    \    ----------------------\n     /     Upstream CDN     \\     |    |      /\
    \    Downstream CDN    \\\n     |      +-------------+ |     | CI |      | +-------------+\
    \      |\n     |*******   Control   |<======|====|=======>|   Control   *******|\n\
    \     |*     +------*----*-+ |     |    |      | +-*----*------+     *|\n    \
    \ |*            *    *   |     |    |      |   *    *            *|\n     |* \
    \    +------*------+ |     | LI |      | +------*------+     *|\n     |* *****\
    \   Logging   |<======|====|=======>|   Logging   ***** *|\n     |* *   +-*-----------+\
    \ |     |    |      | +-----------*-+   * *|\n     |* *     *         *   |  \
    \   |    |      |   *         *     * *|\n   .....*...+-*---------*-+ |     |\
    \ RI |      | +-*---------*-+...*.*...\n   . |* *   |             |<======|====|=======>|\
    \             |   * *| .\n   . |* *   | Req-Routing | |     |FCI |      | | Req-Routing\
    \ |   * *| .\n   . |* * ***             |<======|====|=======>|             |**\
    \ * *| .\n   . |* * * +-------------+.|     |    |      | +-------------+ * *\
    \ *| .\n   . |* * *                 .     |    |      |                 * * *|\
    \ .\n   . |* * * +-------------+ |.    | MI |      | +-------------+ * * *| .\n\
    \   . |* * * | Distribution|<==.===|====|=======>| Distribution| * * *| .\n  \
    \ . |* * * |             | |  .   \\  /       | |             | * * *| .\n   .\
    \ |* * * |+---------+  | |   .   \\/        | |  +---------+| * * *| .\n   . |*\
    \ * ***| +---------+| |    ...Request......+---------+ |*** * *| .\n   . |* *****+-|Surrogate|***********************|Surrogate|-+*****\
    \ *| .\n   . |*******  +---------+| |   Acquisition   | |+----------+ *******|\
    \ .\n   . |      +-------------+ |                 | +-------*-----+      | .\n\
    \   . \\                      /                 \\         *            / .\n\
    \   .  ----------------------                   ---------*------------  .\n  \
    \ .                                                    *              .\n   .\
    \                                                    * Delivery     .\n   .  \
    \                                                  *              .\n   .    \
    \                                             +--*---+          .\n   ...............Request............................|\
    \ User |..Request..\n                                                     | Agent|\n\
    \                                                     +------+\n            <==>\
    \ interfaces inside the scope of CDNI\n   **** and .... interfaces outside the\
    \ scope of CDNI\n             Figure 1: CDNI Expanded Model and CDNI Interfaces\n\
    \   While some interfaces in the reference model are \"out of scope\" for\n  \
    \ the CDNI WG (in the sense that there is no need to define new\n   protocols\
    \ for those interfaces), we note that we still need to refer\n   to them in this\
    \ document to explain the overall operation of CDNI.\n   We also note that, while\
    \ we generally show only one Upstream CDN\n   serving a given CSP, it is entirely\
    \ possible that multiple uCDNs can\n   serve a single CSP.  In fact, this situation\
    \ effectively exists today\n   in the sense that a single CSP can currently delegate\
    \ its content\n   delivery to more than one CDN.\n   The following briefly describes\
    \ the five CDNI interfaces,\n   paraphrasing the definitions given in [RFC6707].\
    \  We discuss these\n   interfaces in more detail in Section 4.\n   o  CDNI Control\
    \ interface (CI): Operations to bootstrap and\n      parameterize the other CDNI\
    \ interfaces, as well as operations to\n      pre-position, revalidate, and purge\
    \ both metadata and content.\n      The latter subset of operations is sometimes\
    \ collectively called\n      the \"Trigger interface\".\n   o  CDNI Request Routing\
    \ interface: Operations to determine what CDN\n      (and optionally what Surrogate\
    \ within a CDN) is to serve end-user\n      requests.  This interface is actually\
    \ a logical bundling of two\n      separate, but related, interfaces:\n      *\
    \  CDNI Footprint & Capabilities Advertisement interface (FCI):\n         Asynchronous\
    \ operations to exchange routing information (e.g.,\n         the network footprint\
    \ and capabilities served by a given CDN)\n         that enables CDN selection\
    \ for subsequent user requests; and\n      *  CDNI Request Routing Redirection\
    \ interface (RI): Synchronous\n         operations to select a delivery CDN (Surrogate)\
    \ for a given\n         user request.\n   o  CDNI Metadata interface (MI): Operations\
    \ to communicate metadata\n      that governs how the content is delivered by\
    \ interconnected CDNs.\n      Examples of CDNI Metadata include geo-blocking directives,\n\
    \      availability windows, access control mechanisms, and purge\n      directives.\
    \  It may include a combination of:\n      *  Asynchronous operations to exchange\
    \ metadata that govern\n         subsequent user requests for content; and\n \
    \     *  Synchronous operations that govern behavior for a given user\n      \
    \   request for content.\n   o  CDNI Logging interface (LI): Operations that allow\
    \ interconnected\n      CDNs to exchange relevant activity logs.  It may include\
    \ a\n      combination of:\n      *  Real-time exchanges, suitable for runtime\
    \ traffic monitoring;\n         and\n      *  Offline exchanges, suitable for\
    \ analytics and billing.\n   The division between the sets of Trigger-based operations\
    \ in the CDNI\n   Control interface and the CDNI Metadata interface is somewhat\n\
    \   arbitrary.  For both cases, the information passed from the Upstream\n   CDN\
    \ to the Downstream CDN can broadly be viewed as metadata that\n   describes how\
    \ content is to be managed by the Downstream CDN.  For\n   example, the information\
    \ conveyed by the CI to pre-position,\n   revalidate, or purge metadata is similar\
    \ to the information conveyed\n   by posting updated metadata via the MI.  Even\
    \ the CI operation to\n   purge content could be viewed as a metadata update for\
    \ that content:\n   purge simply says that the availability window for the named\
    \ content\n   ends now.  The two interfaces share much in common, so minimally,\n\
    \   there will need to be a consistent data model that spans both.\n   The distinction\
    \ we draw has to do with what the uCDN knows about the\n   successful application\
    \ of the metadata by the dCDN.  In the case of\n   the CI, the Downstream CDN\
    \ returning a successful status message\n   guarantees that the operation has\
    \ been successfully completed; for\n   example, the content has been purged or\
    \ pre-positioned.  This implies\n   that the Downstream CDN accepts responsibility\
    \ for having\n   successfully completed the requested operation.  In contrast,\n\
    \   metadata passed between CDNs via the MI carries no such completion\n   guarantee.\
    \  Returning success implies successful receipt of the\n   metadata, but nothing\
    \ can be inferred about precisely when the\n   metadata will take effect in the\
    \ Downstream CDN, only that it will\n   take effect eventually.  This is because\
    \ of the challenge in globally\n   synchronizing updates to metadata with end-user\
    \ requests that are\n   currently in progress (or indistinguishable from currently\
    \ being in\n   progress).  Clearly, a CDN will not be viewed as a trusted peer\
    \ if\n   \"eventually\" often becomes an indefinite period of time, but the\n\
    \   acceptance of responsibility cannot be as crisply defined for the MI.\n  \
    \ Finally, there is a practical issue that impacts all of the CDNI\n   interfaces,\
    \ and that is whether or not to optimize CDNI for HTTP\n   Adaptive Streaming\
    \ (HAS).  We highlight specific issues related to\n   delivering HAS content throughout\
    \ this document, but for a more\n   thorough treatment of the topic, see [RFC6983].\n"
- title: 1.3.  Structure of This Document
  contents:
  - "1.3.  Structure of This Document\n   The remainder of this document is organized\
    \ as follows:\n   o  Section 2 describes some essential building blocks for CDNI,\n\
    \      notably the various options for redirecting user requests to a\n      given\
    \ CDN.\n   o  Section 3 provides a number of illustrative examples of various\n\
    \      CDNI operations.\n   o  Section 4 describes the functionality of the main\
    \ CDNI interfaces.\n   o  Section 5 shows how various deployment models of CDNI\
    \ may be\n      achieved using the defined interfaces.\n   o  Section 6 describes\
    \ the trust model of CDNI and the issues of\n      transitive trust in particular\
    \ that CDNI raises.\n"
- title: 2.  Building Blocks
  contents:
  - '2.  Building Blocks

    '
- title: 2.1.  Request Redirection
  contents:
  - "2.1.  Request Redirection\n   At its core, CDNI requires the redirection of requests\
    \ from one CDN\n   to another.  For any given request that is received by an Upstream\n\
    \   CDN, it will either respond to the request directly, or somehow\n   redirect\
    \ the request to a Downstream CDN.  Two main mechanisms are\n   available for\
    \ redirecting a request to a Downstream CDN.  The first\n   leverages the DNS\
    \ name resolution process and the second uses\n   application-layer redirection\
    \ mechanisms such as the HTTP 302 or\n   Real-Time Streaming Protocol (RTSP) 302\
    \ redirection responses.  While\n   there exists a large variety of application-layer\
    \ protocols that\n   include some form of redirection mechanism, this document\
    \ will use\n   HTTP (and HTTPS) in its examples.  Similar mechanisms can be applied\n\
    \   to other application-layer protocols.  What follows is a short\n   discussion\
    \ of both DNS- and HTTP-based redirection, before presenting\n   some examples\
    \ of their use in Section 3.\n"
- title: 2.1.1.  DNS Redirection
  contents:
  - "2.1.1.  DNS Redirection\n   DNS redirection is based on returning different IP\
    \ addresses for the\n   same DNS name, for example, to balance server load or\
    \ to account for\n   the client's location in the network.  A DNS server, sometimes\
    \ called\n   the Local DNS (LDNS), resolves DNS names on behalf of an end user.\n\
    \   The LDNS server in turn queries other DNS servers until it reaches\n   the\
    \ authoritative DNS server for the CDN-Domain.  The network\n   operator typically\
    \ provides the LDNS server, although the user is\n   free to choose other DNS\
    \ servers (e.g., OpenDNS, Google Public DNS).\n   This latter possibility is important\
    \ because the authoritative DNS\n   server sees only the IP address of the DNS\
    \ server that queries it,\n   not the IP address of the original end user.\n \
    \  The advantage of DNS redirection is that it is completely transparent\n   to\
    \ the end user; the user sends a DNS name to the LDNS server and\n   gets back\
    \ an IP address.  On the other hand, DNS redirection is\n   problematic because\
    \ the DNS request comes from the LDNS server, not\n   the end user.  This may\
    \ affect the accuracy of server selection that\n   is based on the user's location.\
    \  The transparency of DNS redirection\n   is also a problem in that there is\
    \ no opportunity to take the\n   attributes of the user agent or the URI path\
    \ component into account.\n   We consider two main forms of DNS redirection: simple\
    \ and CNAME-\n   based.\n   In simple DNS redirection, the authoritative DNS server\
    \ for the name\n   simply returns an IP address from a set of possible IP addresses.\n\
    \   The answer is chosen from the set based on characteristics of the set\n  \
    \ (e.g., the relative loads on the servers) or characteristics of the\n   client\
    \ (e.g., the location of the client relative to the servers).\n   Simple redirection\
    \ is straightforward.  The only caveats are (1)\n   there is a limit to the number\
    \ of alternate IP addresses a single DNS\n   server can manage; and (2) DNS responses\
    \ are cached by Downstream\n   servers so the Time to Live (TTL) on the response\
    \ must be set to an\n   appropriate value so as to preserve the freshness of the\
    \ redirection.\n   In CNAME-based DNS redirection, the authoritative server returns\
    \ a\n   CNAME response to the DNS request, telling the LDNS server to restart\n\
    \   the name lookup using a new name.  A CNAME is essentially a symbolic\n   link\
    \ in the DNS namespace, and like a symbolic link, redirection is\n   transparent\
    \ to the client; the LDNS server gets the CNAME response\n   and re-executes the\
    \ lookup.  Only when the name has been resolved to\n   an IP address does it return\
    \ the result to the user.  Note that DNAME\n   would be preferable to CNAME if\
    \ it becomes widely supported.\n   One of the advantages of DNS redirection compared\
    \ to HTTP redirection\n   is that it can be cached, reducing load on the redirecting\
    \ CDN's DNS\n   server.  However, this advantage can also be a drawback, especially\n\
    \   when a given DNS resolver doesn't strictly adhere to the TTL, which\n   is\
    \ a known problem in some real-world environments.  In such cases,\n   an end\
    \ user might end up at a dCDN without first having passed\n   through the uCDN,\
    \ which might be an undesirable scenario from a uCDN\n   point of view.\n"
- title: 2.1.2.  HTTP Redirection
  contents:
  - "2.1.2.  HTTP Redirection\n   HTTP redirection makes use of the redirection response\
    \ of the HTTP\n   protocol (e.g.,\"302\" or \"307\").  This response contains\
    \ a new URL\n   that the application should fetch instead of the original URL.\
    \  By\n   changing the URL appropriately, the server can cause the user to\n \
    \  redirect to a different server.  The advantages of HTTP redirection\n   are\
    \ that (1) the server can change the URL fetched by the client to\n   include,\
    \ for example, both the DNS name of the particular server to\n   use, as well\
    \ as the original HTTP server that was being accessed; (2)\n   the client sends\
    \ the HTTP request to the server, so that its IP\n   address is known and can\
    \ be used in selecting the server; and (3)\n   other attributes (e.g., content\
    \ type, user agent type) are visible to\n   the redirection mechanism.\n   Just\
    \ as is the case for DNS redirection, there are some potential\n   disadvantages\
    \ of using HTTP redirection.  For example, it may affect\n   application behavior;\
    \ web browsers will not send cookies if the URL\n   changes to a different domain.\
    \  In addition, although this might also\n   be an advantage, results of HTTP\
    \ redirection are not cached so that\n   all redirections must go through to the\
    \ uCDN.\n"
- title: 3.  Overview of CDNI Operation
  contents:
  - "3.  Overview of CDNI Operation\n   To provide a big-picture overview of the various\
    \ components of CDNI,\n   we walk through a \"day in the life\" of a content item\
    \ that is made\n   available via a pair of interconnected CDNs.  This will serve\
    \ to\n   illustrate many of the functions that need to be supported in a\n   complete\
    \ CDNI solution.  We give examples using both DNS-based and\n   HTTP-based redirection.\
    \  We begin with very simple examples and then\n   show how additional capabilities,\
    \ such as recursive request\n   redirection and content removal, might be added.\n\
    \   Before walking through the specific examples, we present a high-level\n  \
    \ view of the operations that may take place.  This high-level overview\n   is\
    \ illustrated in Figure 2.  Note that most operations will involve\n   only a\
    \ subset of all the messages shown below, and that the order and\n   number of\
    \ operations may vary considerably, as the more detailed\n   examples illustrate.\n\
    \   The following shows Operator A as the Upstream CDN (uCDN) and\n   Operator\
    \ B as the Downstream CDN (dCDN), where the former has a\n   relationship with\
    \ a content provider and the latter is the CDN\n   selected by Operator A to deliver\
    \ content to the end user.  The\n   interconnection relationship may be symmetric\
    \ between these two CDN\n   operators, but each direction can be considered as\
    \ operating\n   independently of the other; for simplicity, we show the interaction\n\
    \   in one direction only.\n         End User                  Operator B    \
    \            Operator A\n             |                         |            \
    \             |\n             |                         |                    \
    \     |\n             |                         |  [Async FCI Push]       | (1)\n\
    \             |                         |                         |\n        \
    \     |                         |  [MI pre-positioning]   | (2)\n            \
    \ |                         |                         |\n             | CONTENT\
    \ REQUEST         |                         |\n             |-------------------------------------------------->|\
    \ (3)\n             |                         |                         |\n  \
    \           |                         |   [Sync RI Pull]        | (4)\n      \
    \       |                         |                         |\n             |\
    \ CONTENT REQUEST REDIRECTION                       |\n             |<--------------------------------------------------|\
    \ (5)\n             |                         |                         |\n  \
    \           |                         |                         |\n          \
    \   | CONTENT REQUEST         |                         |\n             |------------------------>|\
    \                         | (6)\n             |                         |    \
    \                     |\n             |                         |   [Sync MI Pull]\
    \        | (7)\n             |                         |                     \
    \    |\n             |                         | ACQUISITION REQUEST     |\n \
    \            |                         X------------------------>| (8)\n     \
    \        |                         X                         |\n             |\
    \                         X CONTENT DATA            |\n             |        \
    \                 X<------------------------| (9)\n             |            \
    \             |                         |\n             | CONTENT DATA       \
    \     |                         |\n             |<------------------------|  \
    \                       | (10)\n             |                         |     \
    \                    |\n             :                         :             \
    \            :\n             :          [Other content requests]             \
    \    :\n             :                         :                         :\n \
    \            |                         |  [CI: Content Purge]    | (11)\n    \
    \         :                         :                         :\n            \
    \ |                         |  [LI: Log exchange]     | (12)\n             | \
    \                        |                         |\n                      Figure\
    \ 2: Overview of Operation\n   The operations shown in the figure are as follows:\n\
    \   1.   The dCDN uses the FCI to advertise information relevant to its\n    \
    \    delivery footprint and capabilities prior to any content\n        requests\
    \ being redirected.\n   2.   Prior to any content request, the uCDN uses the MI\
    \ to pre-\n        position CDNI Metadata to the dCDN, thereby making that metadata\n\
    \        available in readiness for later content requests.\n   3.   A content\
    \ request from a user agent arrives at the uCDN.\n   4.   The uCDN may use the\
    \ RI to synchronously request information\n        from the dCDN regarding its\
    \ delivery capabilities to decide if\n        the dCDN is a suitable target for\
    \ redirection of this request.\n   5.   The uCDN redirects the request to the\
    \ dCDN by sending some\n        response (DNS, HTTP) to the user agent.\n   6.\
    \   The user agent requests the content from the dCDN.\n   7.   The dCDN may use\
    \ the MI to synchronously request metadata\n        related to this content from\
    \ uCDN, e.g., to decide whether to\n        serve it.\n   8.   If the content\
    \ is not already in a suitable cache in the dCDN,\n        the dCDN may acquire\
    \ it from the uCDN.\n   9.   The content is delivered to the dCDN from the uCDN.\n\
    \   10.  The content is delivered to the user agent by the dCDN.\n   11.  Some\
    \ time later, perhaps at the request of the CSP (not shown)\n        the uCDN\
    \ may use the CI to instruct the dCDN to purge the\n        content, thereby ensuring\
    \ it is not delivered again.\n   12.  After one or more content delivery actions\
    \ by the dCDN, a log of\n        delivery actions may be provided to the uCDN\
    \ using the LI.\n   The following sections show some more specific examples of\
    \ how these\n   operations may be combined to perform various delivery, control,\
    \ and\n   logging operations across a pair of CDNs.\n"
- title: 3.1.  Preliminaries
  contents:
  - "3.1.  Preliminaries\n   Initially, we assume that there is at least one CSP that\
    \ has\n   contracted with an Upstream CDN (uCDN) to deliver content on its\n \
    \  behalf.  We are not particularly concerned with the interface between\n   the\
    \ CSP and uCDN, other than to note that it is expected to be the\n   same as in\
    \ the \"traditional\" (non-interconnected) CDN case.  Existing\n   mechanisms\
    \ such as DNS CNAMEs or HTTP redirects (Section 2) can be\n   used to direct a\
    \ user request for a piece of content from the CSP\n   towards the CSP's chosen\
    \ Upstream CDN.\n   We assume Operator A provides an Upstream CDN that serves\
    \ content on\n   behalf of a CSP with CDN-Domain cdn.csp.example.  We assume that\n\
    \   Operator B provides a Downstream CDN.  An end user at some point\n   makes\
    \ a request for URL\n   http://cdn.csp.example/...rest of URL...\n   It may well\
    \ be the case that cdn.csp.example is just a CNAME for some\n   other CDN-Domain\
    \ (such as csp.op-a.example).  Nevertheless, the HTTP\n   request in the examples\
    \ that follow is assumed to be for the example\n   URL above.\n   Our goal is\
    \ to enable content identified by the above URL to be\n   served by the CDN of\
    \ Operator B.  In the following sections, we will\n   walk through some scenarios\
    \ in which content is served as well as\n   other CDNI operations such as the\
    \ removal of content from a\n   Downstream CDN.\n"
- title: 3.2.  Iterative HTTP Redirect Example
  contents:
  - "3.2.  Iterative HTTP Redirect Example\n   In this section, we walk through a\
    \ simple, illustrative example using\n   HTTP redirection from a uCDN to a dCDN.\
    \  The example also assumes the\n   use of HTTP redirection inside the uCDN and\
    \ dCDN; however, this is\n   independent of the choice of redirection approach\
    \ across CDNs, so an\n   alternative example could be constructed still showing\
    \ HTTP\n   redirection from the uCDN to dCDN but using DNS for the handling of\n\
    \   the request inside each CDN.\n   For this example, we assume that Operators\
    \ A and B have established\n   an agreement to interconnect their CDNs, with A\
    \ being Upstream and B\n   being Downstream.\n   The operators agree that a CDN-Domain\
    \ peer-a.op-b.example will be\n   used as the target of redirections from the\
    \ uCDN to dCDN.  We assume\n   the name of this domain is communicated by some\
    \ means to each CDN.\n   (This could be established out of band or via a CDNI\
    \ interface.)  We\n   refer to this domain as a \"distinguished\" CDN-Domain to\
    \ convey the\n   fact that its use is limited to the interconnection mechanism;\
    \ such a\n   domain is never used directly by a CSP.\n   We assume the operators\
    \ also agree on some distinguished CDN-Domain\n   that will be used for inter-CDN\
    \ acquisition of the CSP's content from\n   the uCDN by the dCDN.  In this example,\
    \ we'll use\n   op-b-acq.op-a.example.\n   We assume the operators also exchange\
    \ information regarding which\n   requests the dCDN is prepared to serve.  For\
    \ example, the dCDN may be\n   prepared to serve requests from clients in a given\
    \ geographical\n   region or a set of IP address prefixes.  This information may\
    \ again\n   be provided out of band or via a defined CDNI interface.\n   We assume\
    \ DNS is configured in the following way:\n   o  The content provider is configured\
    \ to make Operator A the\n      authoritative DNS server for cdn.csp.example (or\
    \ to return a CNAME\n      for cdn.csp.example for which Operator A is the authoritative\
    \ DNS\n      server).\n   o  Operator A is configured so that a DNS request for\n\
    \      op-b-acq.op-a.example returns a Request Router in Operator A.\n   o  Operator\
    \ B is configured so that a DNS request for\n      peer-a.op-b.example/cdn.csp.example\
    \ returns a Request Router in\n      Operator B.\n   Figure 3 illustrates how\
    \ a client request for\n   http://cdn.csp.example/...rest of URL...\n   is handled.\n\
    \         End User                 Operator B                Operator A\n    \
    \         |DNS cdn.csp.example      |                         |\n            \
    \ |-------------------------------------------------->|\n             |      \
    \                   |                         |(1)\n             |IPaddr of A's\
    \ Request Router                       |\n             |<--------------------------------------------------|\n\
    \             |HTTP cdn.csp.example     |                         |\n        \
    \     |-------------------------------------------------->|\n             |  \
    \                       |                         |(2)\n             |302 peer-a.op-b.example/cdn.csp.example\
    \            |\n             |<--------------------------------------------------|\n\
    \             |DNS peer-a.op-b.example  |                         |\n        \
    \     |------------------------>|                         |\n             |  \
    \                       |(3)                      |\n             |IPaddr of B's\
    \ Request Router                       |\n             |<------------------------|\
    \                         |\n             |                         |        \
    \                 |\n             |HTTP peer-a.op-b.example/cdn.csp.example  \
    \         |\n             |------------------------>|                        \
    \ |\n             |                         |(4)                      |\n    \
    \         |302 node1.peer-a.op-b.example/cdn.csp.example      |\n            \
    \ |<------------------------|                         |\n             |DNS node1.peer-a.op-b.example\
    \                      |\n             |------------------------>|           \
    \              |\n             |                         |(5)                \
    \      |\n             |IPaddr of B's Delivery Node                        |\n\
    \             |<------------------------|                         |\n        \
    \     |                         |                         |\n             |HTTP\
    \ node1.peer-a.op-b.example/cdn.csp.example     |\n             |------------------------>|\
    \                         |\n             |                         |(6)     \
    \                 |\n             |                         |DNS op-b-acq.op-a.example|\n\
    \             |                         |------------------------>|\n        \
    \     |                         |                         |(7)\n             |\
    \                         |IPaddr of A's Request Router\n             |      \
    \                   |<------------------------|\n             |              \
    \           |HTTP op-b-acq.op-a.example\n             |                      \
    \   |------------------------>|\n             |                         |    \
    \                     |(8)\n             |                         |302 node2.op-b-acq.op-a.example\n\
    \             |                         |<------------------------|\n        \
    \     |                         |DNS node2.op-b-acq.op-a.example\n           \
    \  |                         |------------------------>|\n             |     \
    \                    |                         |(9)\n             |          \
    \               |IPaddr of A's Delivery Node\n             |                 \
    \        |<------------------------|\n             |                         |\
    \                         |\n             |                         |HTTP node2.op-b-acq.op-a.example\n\
    \             |                         |------------------------>|\n        \
    \     |                         |                         |(10)\n            \
    \ |                         |Data                     |\n             |      \
    \                   |<------------------------|\n             |Data          \
    \           |                         |\n             |<------------------------|\
    \                         |\n           Figure 3: Message Flow for Iterative HTTP\
    \ Redirection\n   The steps illustrated in the figure are as follows:\n   1. \
    \  A DNS resolver for Operator A processes the DNS request for its\n        customer\
    \ based on CDN-Domain cdn.csp.example.  It returns the IP\n        address of\
    \ a Request Router in Operator A.\n   2.   A Request Router for Operator A processes\
    \ the HTTP request and\n        recognizes that the end user is best served by\
    \ another CDN,\n        specifically one provided by Operator B, and so it returns\
    \ a 302\n        redirect message for a new URL constructed by \"stacking\"\n\
    \        Operator B's distinguished CDN-Domain (peer-a.op-b.example) on\n    \
    \    the front of the original URL.  (Note that more complex URL\n        manipulations\
    \ are possible, such as replacing the initial CDN-\n        Domain by some opaque\
    \ handle.)\n   3.   The end user does a DNS lookup using Operator B's distinguished\n\
    \        CDN-Domain (peer-a.op-b.example).  B's DNS resolver returns the\n   \
    \     IP address of a Request Router for Operator B.  Note that if\n        request\
    \ routing within the dCDN was performed using DNS instead\n        of HTTP redirection,\
    \ B's DNS resolver would also behave as the\n        Request Router and directly\
    \ return the IP address of a delivery\n        node.\n   4.   The Request Router\
    \ for Operator B processes the HTTP request and\n        selects a suitable delivery\
    \ node to serve the end-user request,\n        and it returns a 302 redirect message\
    \ for a new URL constructed\n        by replacing the hostname with a subdomain\
    \ of the Operator B's\n        distinguished CDN-Domain that points to the selected\
    \ delivery\n        node.\n   5.   The end user does a DNS lookup using Operator\
    \ B's delivery node\n        subdomain (node1.peer-a.op-b.example).  B's DNS resolver\
    \ returns\n        the IP address of the delivery node.\n   6.   The end user\
    \ requests the content from B's delivery node.  In\n        the case of a cache\
    \ hit, steps 6, 7, 8, 9, and 10 below do not\n        happen, and the content\
    \ data is directly returned by the\n        delivery node to the end user.  In\
    \ the case of a cache miss, the\n        content needs to be acquired by the dCDN\
    \ from the uCDN (not the\n        CSP).  The distinguished CDN-Domain peer-a.op-b.example\n\
    \        indicates to the dCDN that this content is to be acquired from\n    \
    \    the uCDN; stripping the CDN-Domain reveals the original CDN-\n        Domain\
    \ cdn.csp.example, and the dCDN may verify that this CDN-\n        Domain belongs\
    \ to a known peer (so as to avoid being tricked\n        into serving as an open\
    \ proxy).  It then does a DNS request for\n        an inter-CDN acquisition CDN-Domain\
    \ as agreed above (in this\n        case, op-b-acq.op-a.example).\n   7.   Operator\
    \ A's DNS resolver processes the DNS request and returns\n        the IP address\
    \ of a Request Router in Operator A.\n   8.   The Request Router for Operator\
    \ A processes the HTTP request\n        from Operator B's delivery node.  Operator\
    \ A's Request Router\n        recognizes that the request is from a peer CDN rather\
    \ than an\n        end user because of the dedicated inter-CDN acquisition domain\n\
    \        (op-b-acq.op-a.example).  (Note that without this specially\n       \
    \ defined inter-CDN acquisition domain, Operator A would be at\n        risk of\
    \ redirecting the request back to Operator B, resulting in\n        an infinite\
    \ loop).  The Request Router for Operator A selects a\n        suitable delivery\
    \ node in uCDN to serve the inter-CDN\n        acquisition request and returns\
    \ a 302 redirect message for a new\n        URL constructed by replacing the hostname\
    \ with a subdomain of\n        the Operator A's distinguished inter-CDN acquisition\
    \ domain that\n        points to the selected delivery node.\n   9.   Operator\
    \ A's DNS resolver processes the DNS request and returns\n        the IP address\
    \ of the delivery node in Operator A.\n   10.  Operator B requests (acquires)\
    \ the content from Operator A.\n        Although not shown, Operator A processes\
    \ the rest of the URL: it\n        extracts information identifying the origin\
    \ server, validates\n        that this server has been registered, and determines\
    \ the content\n        provider that owns the origin server.  It may also perform\
    \ its\n        own content acquisition steps if needed before returning the\n\
    \        content to dCDN.\n   The main advantage of this design is that it is\
    \ simple: each CDN need\n   only know the distinguished CDN-Domain for each peer,\
    \ with the\n   Upstream CDN \"pushing\" the Downstream CDN-Domain onto the URL\
    \ as part\n   of its redirect (step 2), and the Downstream CDN \"popping\" its\
    \ CDN-\n   Domain off the URL to expose a CDN-Domain that the Upstream CDN can\n\
    \   correctly process.  Neither CDN need be aware of the internal\n   structure\
    \ of the other's URLs.  Moreover, the inter-CDN redirection\n   is entirely supported\
    \ by a single HTTP redirect; neither CDN need be\n   aware of the other's internal\
    \ redirection mechanism (i.e., whether it\n   is DNS or HTTP based).\n   One disadvantage\
    \ is that the end user's browser is redirected to a\n   new URL that is not in\
    \ the same domain of the original URL.  This has\n   implications on a number\
    \ of security or validation mechanisms\n   sometimes used on endpoints.  For example,\
    \ it is important that any\n   redirected URL be in the same domain (e.g., csp.example)\
    \ if the\n   browser is expected to send any cookies associated with that domain.\n\
    \   As another example, some video players enforce validation of a cross-\n  \
    \ domain policy that needs to accommodate the domains involved in the\n   CDN\
    \ redirection.  These problems are generally solvable, but the\n   solutions complicate\
    \ the example, so we do not discuss them further\n   in this document.\n   We\
    \ note that this example begins to illustrate some of the interfaces\n   that\
    \ may be required for CDNI, but it does not require all of them.\n   For example,\
    \ obtaining information from a dCDN regarding the set of\n   client IP addresses\
    \ or geographic regions it might be able to serve\n   is an aspect of request\
    \ routing (specifically of the CDNI Footprint &\n   Capabilities Advertisement\
    \ interface).  Important configuration\n   information such as the distinguished\
    \ names used for redirection and\n   inter-CDN acquisition could also be conveyed\
    \ via a CDNI interface\n   (e.g., perhaps the CDNI Control interface).  The example\
    \ also shows\n   how existing HTTP-based methods suffice for the acquisition\n\
    \   interface.  Arguably, the absolute minimum metadata required for CDNI\n  \
    \ is the information required to acquire the content, and this\n   information\
    \ was provided \"in-band\" in this example by means of the\n   URI handed to the\
    \ client in the HTTP 302 response.  The example also\n   assumes that the CSP\
    \ does not require any distribution policy (e.g.,\n   time window or geo-blocking)\
    \ or delivery processing to be applied by\n   the interconnected CDNs.  Hence,\
    \ there is no explicit CDNI Metadata\n   interface invoked in this example.  There\
    \ is also no explicit CDNI\n   Logging interface discussed in this example.\n\
    \   We also note that the step of deciding when a request should be\n   redirected\
    \ to the dCDN rather than served by the uCDN has been\n   somewhat glossed over.\
    \  It may be as simple as checking the client IP\n   address against a list of\
    \ prefixes, or it may be considerably more\n   complex, involving a wide range\
    \ of factors, such as the geographic\n   location of the client (perhaps determined\
    \ from a third-party\n   service), CDN load, or specific business rules.\n   This\
    \ example uses the \"iterative\" CDNI request redirection approach.\n   That is,\
    \ a uCDN performs part of the request redirection function by\n   redirecting\
    \ the client to a Request Router in the dCDN, which then\n   performs the rest\
    \ of the redirection function by redirecting to a\n   suitable Surrogate.  If\
    \ request routing is performed in the dCDN\n   using HTTP redirection, this translates\
    \ in the end user experiencing\n   two successive HTTP redirections.  By contrast,\
    \ the alternative\n   approach of \"recursive\" CDNI request redirection effectively\n\
    \   coalesces these two successive HTTP redirections into a single one,\n   sending\
    \ the end user directly to the right delivery node in the dCDN.\n   This \"recursive\"\
    \ CDNI request routing approach is discussed in the\n   next section.\n   While\
    \ the example above uses HTTP, the iterative HTTP redirection\n   mechanism would\
    \ work over HTTPS in a similar fashion.  In order to\n   make sure an end user's\
    \ HTTPS request is not downgraded to HTTP along\n   the redirection path, it is\
    \ necessary for every Request Router along\n   the path from the initial uCDN\
    \ Request Router to the final Surrogate\n   in the dCDN to respond to an incoming\
    \ HTTPS request with an HTTP\n   redirect containing an HTTPS URL.  It should\
    \ be noted that using\n   HTTPS will have the effect of increasing the total redirection\n\
    \   process time and increasing the load on the Request Routers,\n   especially\
    \ when the redirection path includes many redirects and thus\n   many Secure Socket\
    \ Layer/Transport Layer Security (SSL/TLS) sessions.\n   In such cases, a recursive\
    \ HTTP redirection mechanism, as described\n   in an example in the next section,\
    \ might help to reduce some of these\n   issues.\n"
- title: 3.3.  Recursive HTTP Redirection Example
  contents:
  - "3.3.  Recursive HTTP Redirection Example\n   The following example builds on\
    \ the previous one to illustrate the\n   use of the request routing interface\
    \ (specifically, the CDNI Request\n   Routing Redirection interface) to enable\
    \ \"recursive\" CDNI request\n   routing.  We build on the HTTP-based redirection\
    \ approach because it\n   illustrates the principles and benefits clearly, but\
    \ it is equally\n   possible to perform recursive redirection when DNS-based redirection\n\
    \   is employed.\n   In contrast to the prior example, the operators need not\
    \ agree in\n   advance on a CDN-Domain to serve as the target of redirections\
    \ from\n   the uCDN to dCDN.  We assume that the operators agree on some\n   distinguished\
    \ CDN-Domain that will be used for inter-CDN acquisition\n   of the CSP's content\
    \ by dCDN.  In this example, we'll use\n   op-b-acq.op-a.example.\n   We assume\
    \ the operators also exchange information regarding which\n   requests the dCDN\
    \ is prepared to serve.  For example, the dCDN may be\n   prepared to serve requests\
    \ from clients in a given geographical\n   region or a set of IP address prefixes.\
    \  This information may again\n   be provided out of band or via a defined protocol.\n\
    \   We assume DNS is configured in the following way:\n   o  The content provider\
    \ is configured to make Operator A the\n      authoritative DNS server for cdn.csp.example\
    \ (or to return a CNAME\n      for cdn.csp.example for which Operator A is the\
    \ authoritative DNS\n      server).\n   o  Operator A is configured so that a\
    \ DNS request for\n      op-b-acq.op-a.example returns a Request Router in Operator\
    \ A.\n   o  Operator B is configured so that a request for node1.op-b.example/\n\
    \      cdn.csp.example returns the IP address of a delivery node.  Note\n    \
    \  that there might be a number of such delivery nodes.\n   Figure 3 illustrates\
    \ how a client request for\n   http://cdn.csp.example/...rest of URL...\n   is\
    \ handled.\n         End User                 Operator B                Operator\
    \ A\n             |DNS cdn.csp.example      |                         |\n    \
    \         |-------------------------------------------------->|\n            \
    \ |                         |                         |(1)\n             |IPaddr\
    \ of A's Request Router                       |\n             |<--------------------------------------------------|\n\
    \             |HTTP cdn.csp.example     |                         |\n        \
    \     |-------------------------------------------------->|\n             |  \
    \                       |                         |(2)\n             |       \
    \                  |RR/RI REQ cdn.csp.example|\n             |               \
    \          |<------------------------|\n             |                       \
    \  |                         |\n             |                         |RR/RI\
    \ RESP node1.op-b.example\n             |                         |------------------------>|\n\
    \             |                         |                         |(3)\n     \
    \        |302 node1.op-b.example/cdn.csp.example             |\n             |<--------------------------------------------------|\n\
    \             |DNS node1.op-b.example   |                         |\n        \
    \     |------------------------>|                         |\n             |  \
    \                       |(4)                      |\n             |IPaddr of B's\
    \ Delivery Node                        |\n             |<------------------------|\
    \                         |\n             |HTTP node1.op-b.example/cdn.csp.example\
    \            |\n             |------------------------>|                     \
    \    |\n             |                         |(5)                      |\n \
    \            |                         |DNS op-b-acq.op-a.example|\n         \
    \    |                         |------------------------>|\n             |   \
    \                      |                         |(6)\n             |        \
    \                 |IPaddr of A's Request Router\n             |              \
    \           |<------------------------|\n             |                      \
    \   |HTTP op-b-acq.op-a.example\n             |                         |------------------------>|\n\
    \             |                         |                         |(7)\n     \
    \        |                         |302 node2.op-b-acq.op-a.example\n        \
    \     |                         |<------------------------|\n             |  \
    \                       |DNS node2.op-b-acq.op-a.example\n             |     \
    \                    |------------------------>|\n             |             \
    \            |                         |(8)\n             |                  \
    \       |IPaddr of A's Delivery Node\n             |                         |<------------------------|\n\
    \             |                         |                         |\n        \
    \     |                         |HTTP node2.op-b-acq.op-a.example\n          \
    \   |                         |------------------------>|\n             |    \
    \                     |                         |(9)\n             |         \
    \                |Data                     |\n             |                 \
    \        |<------------------------|\n             |Data                     |\
    \                         |\n             |<------------------------|        \
    \                 |\n           Figure 4: Message Flow for Recursive HTTP Redirection\n\
    \   The steps illustrated in the figure are as follows:\n   1.  A DNS resolver\
    \ for Operator A processes the DNS request for its\n       customer based on CDN-Domain\
    \ cdn.csp.example.  It returns the IP\n       address of a Request Router in Operator\
    \ A.\n   2.  A Request Router for Operator A processes the HTTP request and\n\
    \       recognizes that the end user is best served by another CDN --\n      \
    \ specifically one provided by Operator B -- so it queries the CDNI\n       Request\
    \ Routing Redirection interface of Operator B, providing a\n       set of information\
    \ about the request including the URL requested.\n       Operator B replies with\
    \ the DNS name of a delivery node.\n   3.  Operator A returns a 302 redirect message\
    \ for a new URL obtained\n       from the RI.\n   4.  The end user does a DNS\
    \ lookup using the hostname of the URL just\n       provided (node1.op-b.example).\
    \  B's DNS resolver returns the IP\n       address of the corresponding delivery\
    \ node.  Note that, since the\n       name of the delivery node was already obtained\
    \ from B using the\n       RI, there should not be any further redirection here\
    \ (in contrast\n       to the iterative method described above.)\n   5.  The end\
    \ user requests the content from B's delivery node,\n       potentially resulting\
    \ in a cache miss.  In the case of a cache\n       miss, the content needs to\
    \ be acquired from the uCDN (not the\n       CSP.)  The distinguished CDN-Domain\
    \ op-b.example indicates to the\n       dCDN that this content is to be acquired\
    \ from another CDN;\n       stripping the CDN-Domain reveals the original CDN-Domain\n\
    \       cdn.csp.example.  The dCDN may verify that this CDN-Domain\n       belongs\
    \ to a known peer (so as to avoid being tricked into\n       serving as an open\
    \ proxy).  It then does a DNS request for the\n       inter-CDN Acquisition \"\
    distinguished\" CDN-Domain as agreed above\n       (in this case, op-b-acq.op-a.example).\n\
    \   6.  Operator A's DNS resolver processes the DNS request and returns\n    \
    \   the IP address of a Request Router in Operator A.\n   7.  The Request Router\
    \ for Operator A processes the HTTP request from\n       Operator B's delivery\
    \ node.  Operator A's Request Router\n       recognizes that the request is from\
    \ a peer CDN rather than an end\n       user because of the dedicated inter-CDN\
    \ acquisition domain\n       (op-b-acq.op-a.example).  (Note that without this\
    \ specially\n       defined inter-CDN acquisition domain, Operator A would be\
    \ at risk\n       of redirecting the request back to Operator B, resulting in\
    \ an\n       infinite loop).  The Request Router for Operator A selects a\n  \
    \     suitable delivery node in the uCDN to serve the inter-CDN\n       acquisition\
    \ request and returns a 302 redirect message for a new\n       URL constructed\
    \ by replacing the hostname with a subdomain of the\n       Operator A's distinguished\
    \ inter-CDN acquisition domain that\n       points to the selected delivery node.\n\
    \   8.  Operator A recognizes that the DNS request is from a peer CDN\n      \
    \ rather than an end user (due to the internal CDN-Domain) and so\n       returns\
    \ the address of a delivery node.  (Note that without this\n       specially defined\
    \ internal domain, Operator A would be at risk of\n       redirecting the request\
    \ back to Operator B, resulting in an\n       infinite loop.)\n   9.  Operator\
    \ B requests (acquires) the content from Operator A.\n       Operator A serves\
    \ content for the requested CDN-Domain to the\n       dCDN.  Although not shown,\
    \ it is at this point that Operator A\n       processes the rest of the URL: it\
    \ extracts information\n       identifying the origin server, validates that this\
    \ server has\n       been registered, and determines the content provider that\
    \ owns\n       the origin server.  It may also perform its own content\n     \
    \  acquisition steps if needed before returning the content to the\n       dCDN.\n\
    \   Recursive redirection has the advantage (over iterative redirection)\n   of\
    \ being more transparent from the end user's perspective but the\n   disadvantage\
    \ of each CDN exposing more of its internal structure (in\n   particular, the\
    \ addresses of edge caches) to peer CDNs.  By contrast,\n   iterative redirection\
    \ does not require the dCDN to expose the\n   addresses of its edge caches to\
    \ the uCDN.\n   This example happens to use HTTP-based redirection in both CDN\
    \ A and\n   CDN B, but a similar example could be constructed using DNS-based\n\
    \   redirection in either CDN.  Hence, the key point to take away here is\n  \
    \ simply that the end user only sees a single redirection of some type,\n   as\
    \ opposed to the pair of redirections in the prior (iterative)\n   example.\n\
    \   The use of the RI requires that the request routing mechanism be\n   appropriately\
    \ configured and bootstrapped, which is not shown here.\n   More discussion on\
    \ the bootstrapping of interfaces is provided in\n   Section 4\n"
- title: 3.4.  Iterative DNS-Based Redirection Example
  contents:
  - "3.4.  Iterative DNS-Based Redirection Example\n   In this section we walk through\
    \ a simple example using DNS-based\n   redirection for request redirection from\
    \ the uCDN to the dCDN (as\n   well as for request routing inside the dCDN and\
    \ the uCDN).  As noted\n   in Section 2.1, DNS-based redirection has certain advantages\
    \ over\n   HTTP-based redirection (notably, it is transparent to the end user)\n\
    \   as well as some drawbacks (notably, the client IP address is not\n   visible\
    \ to the Request Router).\n   As before, Operator A has to learn the set of requests\
    \ that the dCDN\n   is willing or able to serve (e.g., which client IP address\
    \ prefixes\n   or geographic regions are part of the dCDN footprint).  We assume\n\
    \   Operator B has and makes known to Operator A some unique identifier\n   that\
    \ can be used for the construction of a distinguished CDN-Domain,\n   as shown\
    \ in more detail below.  (This identifier strictly needs only\n   to be unique\
    \ within the scope of Operator A, but a globally unique\n   identifier, such as\
    \ an Autonomous System (AS) number assigned to B,\n   is one easy way to achieve\
    \ that.)  Also, Operator A obtains the NS\n   records for Operator B's externally\
    \ visible redirection servers.\n   Also, as before, a distinguished CDN-Domain,\
    \ such as\n   op-b-acq.op-a.example, must be assigned for inter-CDN acquisition.\n\
    \   We assume DNS is configured in the following way:\n   o  The CSP is configured\
    \ to make Operator A the authoritative DNS\n      server for cdn.csp.example (or\
    \ to return a CNAME for\n      cdn.csp.example for which Operator A is the authoritative\
    \ DNS\n      server).\n   o  When uCDN sees a request best served by the dCDN,\
    \ it returns CNAME\n      and NS records for \"b.cdn.csp.example\", where \"b\"\
    \ is the unique\n      identifier assigned to Operator B.  (It may, for example,\
    \ be an AS\n      number assigned to Operator B.)\n   o  The dCDN is configured\
    \ so that a request for \"b.cdn.csp.example\"\n      returns a delivery node in\
    \ the dCDN.\n   o  The uCDN is configured so that a request for\n      \"op-b-acq.op-a.example\"\
    \ returns a delivery node in the uCDN.\n   Figure 5 depicts the exchange of DNS\
    \ and HTTP requests.  The main\n   differences from Figure 3 are the lack of HTTP\
    \ redirection and\n   transparency to the end user.\n         End User       \
    \          Operator B                Operator A\n             |DNS cdn.csp.example\
    \      |                         |\n             |-------------------------------------------------->|\n\
    \             |                         |                         |(1)\n     \
    \        |CNAME b.cdn.csp.example  |                         |\n             |<--------------------------------------------------|\n\
    \             |                         |                         |\n        \
    \     |DNS b.cdn.csp.example    |                         |\n             |-------------------------------------------------->|\n\
    \             |                         |                         |(2)\n     \
    \        |NS records for b.cdn.csp.example +                 |\n             |Glue\
    \ AAAA/A records for b.cdn.csp.example          |\n             |<--------------------------------------------------|\n\
    \             |                         |                         |\n        \
    \     |DNS b.cdn.csp.example    |                         |\n             |------------------------>|\
    \                         |\n             |                         |(3)     \
    \                 |\n             |IPaddr of B's Delivery Node               \
    \         |\n             |<------------------------|                        \
    \ |\n             |HTTP cdn.csp.example     |                         |\n    \
    \         |------------------------>|                         |\n            \
    \ |                         |(4)                      |\n             |      \
    \                   |DNS op-b-acq.op-a.example|\n             |              \
    \           |------------------------>|\n             |                      \
    \   |                         |(5)\n             |                         |IPaddr\
    \ of A's Delivery Node\n             |                         |<------------------------|\n\
    \             |                         |HTTP op-b-acq.op-a.example\n        \
    \     |                         |------------------------>|\n             |  \
    \                       |                         |(6)\n             |       \
    \                  |Data                     |\n             |               \
    \          |<------------------------|\n             |Data                   \
    \  |                         |\n             |<------------------------|     \
    \                    |\n             Figure 5: Message Flow for DNS-Based Redirection\n\
    \   The steps illustrated in the figure are as follows:\n   1.  The Request Router\
    \ for Operator A processes the DNS request for\n       CDN-Domain cdn.csp.example\
    \ and recognizes that the end user is\n       best served by another CDN.  (This\
    \ may depend on the IP address\n       of the user's LDNS resolver, or other information\
    \ discussed\n       below.)  The Request Router returns a DNS CNAME response by\n\
    \       \"stacking\" the distinguished identifier for Operator B onto the\n  \
    \     original CDN-Domain (e.g., b.cdn.csp.example).\n   2.  The end user sends\
    \ a DNS query for the modified CDN-Domain (i.e.,\n       b.cdn.csp.example) to\
    \ Operator A's DNS server.  The Request\n       Router for Operator A processes\
    \ the DNS request and returns a\n       delegation to b.cdn.csp.example by sending\
    \ an NS record plus glue\n       records pointing to Operator B's DNS server.\
    \  (This extra step is\n       necessary since typical DNS implementation won't\
    \ follow an NS\n       record when it is sent together with a CNAME record, thereby\n\
    \       necessitating a two-step approach.)\n   3.  The end user sends a DNS query\
    \ for the modified CDN-Domain (i.e.,\n       b.cdn.csp.example) to Operator B's\
    \ DNS server, using the NS and\n       AAAA/A records received in step 2.  This\
    \ causes B's Request\n       Router to respond with a suitable delivery node.\n\
    \   4.  The end user requests the content from B's delivery node.  The\n     \
    \  requested URL contains the name cdn.csp.example.  (Note that the\n       returned\
    \ CNAME does not affect the URL.)  At this point, the\n       delivery node has\
    \ the correct IP address of the end user and can\n       do an HTTP 302 redirect\
    \ if the redirections in steps 2 and 3 were\n       incorrect.  Otherwise, B verifies\
    \ that this CDN-Domain belongs to\n       a known peer (so as to avoid being tricked\
    \ into serving as an\n       open proxy).  It then does a DNS request for an \"\
    internal\" CDN-\n       Domain as agreed above (op-b-acq.op-a.example).\n   5.\
    \  Operator A recognizes that the DNS request is from a peer CDN\n       rather\
    \ than an end user (due to the internal CDN-Domain) and so\n       returns the\
    \ address of a delivery node in uCDN.\n   6.  Operator A serves content to dCDN.\
    \  Although not shown, it is at\n       this point that Operator A processes the\
    \ rest of the URL: it\n       extracts information identifying the origin server,\
    \ validates\n       that this server has been registered, and determines the content\n\
    \       provider that owns the origin server.\n   The advantages of this approach\
    \ are that it is more transparent to\n   the end user and requires fewer round\
    \ trips than HTTP-based\n   redirection (in its worst case, i.e., when none of\
    \ the needed DNS\n   information is cached).  A potential problem is that the\
    \ Upstream CDN\n   depends on being able to learn the correct Downstream CDN that\
    \ serves\n   the end user from the client address in the DNS request.  In standard\n\
    \   DNS operation, the uCDN will only obtain the address of the client's\n   LDNS\
    \ resolver, which is not guaranteed to be in the same network (or\n   geographic\
    \ region) as the client.  If not (e.g., the end user uses a\n   global DNS service),\
    \ then the Upstream CDN cannot determine the\n   appropriate Downstream CDN to\
    \ serve the end user.  In this case, and\n   assuming the uCDN is capable of detecting\
    \ that situation, one option\n   is for the Upstream CDN to treat the end user\
    \ as it would any user\n   not connected to a peer CDN.  Another option is for\
    \ the Upstream CDN\n   to \"fall back\" to a pure HTTP-based redirection strategy\
    \ in this case\n   (i.e., use the first method).  Note that this problem affects\n\
    \   existing CDNs that rely on DNS to determine where to redirect client\n   requests,\
    \ but the consequences are arguably less serious for CDNI\n   since the LDNS is\
    \ likely in the same network as the dCDN serves.\n   As with the prior example,\
    \ this example partially illustrates the\n   various interfaces involved in CDNI.\
    \  Operator A could learn\n   dynamically from Operator B the set of prefixes\
    \ or regions that B is\n   willing and able to serve via the CDNI Footprint &\
    \ Capabilities\n   Advertisement interface.  The distinguished name used for acquisition\n\
    \   and the identifier for Operator B that is prepended to the CDN-Domain\n  \
    \ on redirection are examples of information elements that might also\n   be conveyed\
    \ by CDNI interfaces (or, alternatively, statically\n   configured).  As before,\
    \ minimal metadata sufficient to obtain the\n   content is carried \"in-band\"\
    \ as part of the redirection process, and\n   standard HTTP is used for inter-CDN\
    \ acquisition.  There is no\n   explicit CDNI Logging interface discussed in this\
    \ example.\n"
- title: 3.4.1.  Notes on Using DNSSEC
  contents:
  - "3.4.1.  Notes on Using DNSSEC\n   Although it is possible to use DNSSEC in combination\
    \ with the\n   Iterative DNS-based Redirection mechanism explained above, it is\n\
    \   important to note that the uCDN might have to sign records on the\n   fly,\
    \ since the CNAME returned, and thus the signature provided, can\n   potentially\
    \ be different for each incoming query.  Although there is\n   nothing preventing\
    \ a uCDN from performing such on-the-fly signing,\n   this might be computationally\
    \ expensive.  In the case where the\n   number of dCDNs, and thus the number of\
    \ different CNAMEs to return,\n   is relatively stable, an alternative solution\
    \ would be for the uCDN\n   to pre-generate signatures for all possible CNAMEs.\
    \  For each\n   incoming query, the uCDN would then determine the appropriate\
    \ CNAME\n   and return it together with the associated pre-generated signature.\n\
    \   Note: In the latter case, maintaining the serial number and signature\n  \
    \ of Start of Authority (SOA) might be an issue since, technically, it\n   should\
    \ change every time a different CNAME is used.  However, since,\n   in practice,\
    \ direct SOA queries are relatively rare, a uCDN could\n   defer incrementing\
    \ the serial number and resigning the SOA until it\n   is queried and then do\
    \ it on-the-fly.\n   Note also that the NS record and the glue records used in\
    \ step 2 in\n   the previous section should generally be identical to those of\
    \ their\n   authoritative zone managed by Operator B.  Even if they differ, this\n\
    \   will not make the DNS resolution process fail, but the client DNS\n   server\
    \ will prefer the authoritative data in its cache and use it for\n   subsequent\
    \ queries.  Such inconsistency is a general operational\n   issue of DNS, but\
    \ it may be more important for this architecture\n   because the uCDN (Operator\
    \ A) would rely on the consistency to make\n   the resulting redirection work\
    \ as intended.  In general, it is the\n   administrator's responsibility to make\
    \ them consistent.\n"
- title: 3.5.  Dynamic Footprint Discovery Example
  contents:
  - "3.5.  Dynamic Footprint Discovery Example\n   There could be situations where\
    \ being able to dynamically discover\n   the set of requests that a given dCDN\
    \ is willing and able to serve is\n   beneficial.  For example, a CDN might at\
    \ one time be able to serve a\n   certain set of client IP prefixes, but that\
    \ set might change over\n   time due to changes in the topology and routing policies\
    \ of the IP\n   network.  The following example illustrates this capability. \
    \ We have\n   chosen the example of DNS-based redirection, but HTTP-based\n  \
    \ redirection could equally well use this approach.\n         End User       \
    \          Operator B                Operator A\n             |DNS cdn.csp.example\
    \      |                         |\n             |-------------------------------------------------->|\n\
    \             |                         |                         |(1)\n     \
    \        |                         |   RI REQ op-b.example   |\n             |\
    \                         |<------------------------|\n             |        \
    \                 |                         |(2)\n             |             \
    \            |    RI REPLY             |\n             |                     \
    \    |------------------------>|\n             |                         |   \
    \                      |(3)\n             |CNAME b.cdn.csp.example  |        \
    \                 |\n             |NS records for b.cdn.csp.example          \
    \         |\n             |<--------------------------------------------------|\n\
    \             |DNS b.cdn.csp.example    |                         |\n        \
    \     |------------------------>|                         |\n             |  \
    \                       |(2)                      |\n             |IPaddr of B's\
    \ Delivery Node                        |\n             |<------------------------|\
    \                         |\n             |HTTP cdn.csp.example     |        \
    \                 |\n             |------------------------>|                \
    \         |\n             |                         |(3)                     \
    \ |\n             |                         |DNS op-b-acq.op-a.example|\n    \
    \         |                         |------------------------>|\n            \
    \ |                         |                         |(4)\n             |   \
    \                      |IPaddr of A's Delivery Node\n             |          \
    \               |<------------------------|\n             |                  \
    \       |HTTP op-b-acq.op-a.example\n             |                         |------------------------>|\n\
    \             |                         |                         |(5)\n     \
    \        |                         |Data                     |\n             |\
    \                         |<------------------------|\n             |Data    \
    \                 |                         |\n             |<------------------------|\
    \                         |\n          Figure 6: Message Flow for Dynamic Footprint\
    \ Discovery\n   This example differs from the one in Figure 5 only in the addition\
    \ of\n   an RI request (step 2) and corresponding response (step 3).  The RI\n\
    \   REQ could be a message such as \"Can you serve clients from this IP\n   Prefix?\"\
    \ or it could be \"Provide the list of client IP prefixes you\n   can currently\
    \ serve\".  In either case the response might be cached by\n   Operator A to avoid\
    \ repeatedly asking the same question.\n   Alternatively, or in addition, Operator\
    \ B may spontaneously advertise\n   to Operator A information (or changes) on\
    \ the set of requests it is\n   willing and able to serve on behalf of Operator\
    \ A; in that case,\n   Operator B may spontaneously issue RR/RI REPLY messages\
    \ that are not\n   in direct response to a corresponding RR/RI REQ message.  (Note\
    \ that\n   the issues of determining the client's subnet from DNS requests, as\n\
    \   described above, are exactly the same here as in Section 3.4.)\n   Once Operator\
    \ A obtains the RI response, it is now able to determine\n   that Operator B's\
    \ CDN is an appropriate dCDN for this request and\n   therefore a valid candidate\
    \ dCDN to consider in its redirection\n   decision.  If that dCDN is selected,\
    \ the redirection and serving of\n   the request proceeds as before (i.e., in\
    \ the absence of dynamic\n   footprint discovery).\n"
- title: 3.6.  Content Removal Example
  contents:
  - "3.6.  Content Removal Example\n   The following example illustrates how the CDNI\
    \ Control interface may\n   be used to achieve pre-positioning of an item of content\
    \ in the dCDN.\n   In this example, user requests for a particular content, and\n\
    \   corresponding redirection of such requests from Operator A to\n   Operator\
    \ B CDN, may (or may not) have taken place earlier.  Then, at\n   some point in\
    \ time, the uCDN (for example, in response to a\n   corresponding Trigger from\
    \ the Content Provider) uses the CI to\n   request that content identified by\
    \ a particular URL be removed from\n   dCDN.  The following diagram illustrates\
    \ the operation.  It should be\n   noted that a uCDN will typically not know whether\
    \ a dCDN has cached a\n   given content item; however, it may send the content\
    \ removal request\n   to make sure no cached versions remain to satisfy any contractual\n\
    \   obligations it may have.\n         End User            Operator B        \
    \        Operator A\n             |                    |CI purge cdn.csp.example/...\n\
    \             |                    |<------------------------|\n             |\
    \                    |                         |\n             |             \
    \       |CI OK                    |\n             |                    |------------------------>|\n\
    \             |                    |                         |\n             \
    \   Figure 7: Message Flow for Content Removal\n   The CI is used to convey the\
    \ request from the uCDN to the dCDN that\n   some previously acquired content\
    \ should be deleted.  The URL in the\n   request specifies which content to remove.\
    \  This example corresponds\n   to a DNS-based redirection scenario such as Section\
    \ 3.4.  If HTTP-\n   based redirection had been used, the URL for removal would\
    \ be of the\n   form peer-a.op-b.example/cdn.csp.example/...\n   The dCDN is expected\
    \ to confirm to the uCDN, as illustrated by the CI\n   OK message, the completion\
    \ of the removal of the targeted content\n   from all the caches in the dCDN.\n"
- title: 3.7.  Pre-positioned Content Acquisition Example
  contents:
  - "3.7.  Pre-positioned Content Acquisition Example\n   The following example illustrates\
    \ how the CI may be used to pre-\n   position an item of content in the dCDN.\
    \  In this example, Operator A\n   uses the CDNI Metadata interface to request\
    \ that content identified\n   by a particular URL be pre-positioned into Operator\
    \ B CDN.\n         End User            Operator B                Operator A\n\
    \             |                    |CI pre-position cdn.csp.example/...\n    \
    \         |                    |<------------------------|\n             |   \
    \                 |                         |(1)\n             |             \
    \       |CI OK                    |\n             |                    |------------------------>|\n\
    \             |                    |                         |\n             |\
    \                    |DNS op-b-acq.op-a.example|\n             |             \
    \       |------------------------>|\n             |                    |     \
    \                    |(2)\n             |                    |IPaddr of A's Delivery\
    \ Node\n             |                    |<------------------------|\n      \
    \       |                    |HTTP op-b-acq.op-a.example\n             |     \
    \               |------------------------>|\n             |                  \
    \  |                         |(3)\n             |                    |Data   \
    \                  |\n             |                    |<------------------------|\n\
    \             |DNS cdn.csp.example |                         |\n             |--------------------------------------------->|\n\
    \             |                    |                         |(4)\n          \
    \   |IPaddr of A's Request Router                  |\n             |<---------------------------------------------|\n\
    \             |HTTP cdn.csp.example|                         |\n             |--------------------------------------------->|\n\
    \             |                    |                         |(5)\n          \
    \   |302 peer-a.op-b.example/cdn.csp.example       |\n             |<---------------------------------------------|\n\
    \             |DNS peer-a.op-b.example                       |\n             |------------------->|\
    \                         |\n             |                    |(6)          \
    \            |\n             |IPaddr of B's Delivery Node                   |\n\
    \             |<-------------------|                         |\n             |HTTP\
    \ peer-a.op-b.example/cdn.csp.example      |\n             |------------------->|\
    \                         |\n             |                    |(7)          \
    \            |\n             |Data                |                         |\n\
    \             |<-------------------|                         |\n            Figure\
    \ 8: Message Flow for Content Pre-Positioning\n   The steps illustrated in the\
    \ figure are as follows:\n   1.  Operator A uses the CI to request that Operator\
    \ B pre-position a\n       particular content item identified by its URL.  Operator\
    \ B\n       responds by confirming that it is willing to perform this\n      \
    \ operation.\n   Steps 2 and 3 are exactly the same as steps 5 and 6 of Figure\
    \ 3, only\n   this time those steps happen as the result of the Pre-positioning\n\
    \   request instead of as the result of a cache miss.\n   Steps 4, 5, 6, and 7\
    \ are exactly the same as steps 1, 2, 3, and 4 of\n   Figure 3, only this time,\
    \ Operator B's CDN can serve the end-user\n   request without triggering dynamic\
    \ content acquisition, since the\n   content has been pre-positioned in the dCDN.\
    \  Note that, depending on\n   dCDN operations and policies, the content pre-positioned\
    \ in the dCDN\n   may be pre-positioned to all, or a subset of, dCDN caches. \
    \ In the\n   latter case, intra-CDN dynamic content acquisition may take place\n\
    \   inside the dCDN serving requests from caches on which the content has\n  \
    \ not been pre-positioned; however, such intra-CDN dynamic acquisition\n   would\
    \ not involve the uCDN.\n"
- title: 3.8.  Asynchronous CDNI Metadata Example
  contents:
  - "3.8.  Asynchronous CDNI Metadata Example\n   In this section, we walk through\
    \ a simple example illustrating a\n   scenario of asynchronously exchanging CDNI\
    \ Metadata, where the\n   Downstream CDN obtains CDNI Metadata for content ahead\
    \ of a\n   corresponding content request.  The example that follows assumes that\n\
    \   HTTP-based inter-CDN redirection and recursive CDNI request routing\n   are\
    \ used, as in Section 3.3.  However, Asynchronous exchange of CDNI\n   Metadata\
    \ is similarly applicable to DNS-based inter-CDN redirection\n   and iterative\
    \ request routing (in which cases the CDNI Metadata may\n   be used at slightly\
    \ different processing stages of the message\n   flows).\n         End User  \
    \               Operator B                Operator A\n             |         \
    \                |                         |\n             |                 \
    \        |CI pre-position (Trigger)|\n             |                         |<------------------------|(1)\n\
    \             |                         |                         |\n        \
    \     |                         |CI OK                    |\n             |  \
    \                       |------------------------>|(2)\n             |       \
    \                  |                         |\n             |               \
    \          |MI pull REQ              |\n             |                       \
    \  |------------------------>|(3)\n             |                         |  \
    \                       |\n             |                         |MI metadata\
    \ REP          |(4)\n             |                         |                \
    \         |\n             |                         |                        \
    \ |\n             | CONTENT REQUEST         |                         |\n    \
    \         |-------------------------------------------------->|(5)\n         \
    \    |                         |                         |\n             |   \
    \                      |   RI REQ                |\n             |           \
    \              |<------------------------|(6)\n             |                \
    \         |                         |\n             |                        \
    \ |   RI RESP               |\n             |                         |------------------------>|(7)\n\
    \             |                         |                         |\n        \
    \     | CONTENT REDIRECTION     |                         |\n             |<--------------------------------------------------|(8)\n\
    \             |                         |                         |\n        \
    \     | CONTENT REQUEST         |                         |\n             |------------------------>|(9)\
    \                      |\n             |                         |           \
    \              |\n             :                         :                   \
    \      :\n             | CONTENT DATA            |                         |\n\
    \             |<------------------------|                         |(10)\n    \
    \       Figure 9: Message Flow for Asynchronous CDNI Metadata\n   The steps illustrated\
    \ in the figure are as follows:\n   1.   Operator A uses the CI to trigger the\
    \ signaling of the\n        availability of CDNI Metadata to Operator B.\n   2.\
    \   Operator B acknowledges the receipt of this Trigger.\n   3.   Operator B requests\
    \ the latest metadata from Operator A using\n        the MI.\n   4.   Operator\
    \ A replies with the requested metadata.  This document\n        does not constrain\
    \ how the CDNI Metadata information is actually\n        represented.  For the\
    \ purposes of this example, we assume that\n        Operator A provides CDNI Metadata\
    \ to Operator B indicating that:\n        *  this CDNI Metadata is applicable\
    \ to any content referenced by\n           some CDN-Domain.\n        *  this CDNI\
    \ Metadata consists of a distribution policy\n           requiring enforcement\
    \ by the delivery node of a specific per-\n           request authorization mechanism\
    \ (e.g., URI signature or token\n           validation).\n   5.   A Content Request\
    \ occurs as usual.\n   6.   A CDNI Request Routing Redirection request (RI REQ)\
    \ is issued by\n        Operator A's CDN, as discussed in Section 3.3.  Operator\
    \ B's\n        Request Router can access the CDNI Metadata that are relevant to\n\
    \        the requested content and that have been pre-positioned as per\n    \
    \    Steps 1-4, which may or may not affect the response.\n   7.   Operator B's\
    \ Request Router issues a CDNI Request Routing\n        Redirection response (RI\
    \ RESP) as in Section 3.3.\n   8.   Operator B performs content redirection as\
    \ discussed in\n        Section 3.3.\n   9.   On receipt of the Content Request\
    \ by the end user, the delivery\n        node detects that previously acquired\
    \ CDNI Metadata is\n        applicable to the requested content.  In accordance\
    \ with the\n        specific CDNI metadata of this example, the delivery node\
    \ will\n        invoke the appropriate per-request authorization mechanism,\n\
    \        before serving the content.  (Details of this authorization are\n   \
    \     not shown.)\n   10.  Assuming successful per-request authorization, serving\
    \ of\n        Content Data (possibly preceded by inter-CDN acquisition)\n    \
    \    proceeds as in Section 3.3.\n"
- title: 3.9.  Synchronous CDNI Metadata Acquisition Example
  contents:
  - "3.9.  Synchronous CDNI Metadata Acquisition Example\n   In this section we walk\
    \ through a simple example illustrating a\n   scenario of Synchronous CDNI Metadata\
    \ acquisition, in which the\n   Downstream CDN obtains CDNI Metadata for content\
    \ at the time of\n   handling a first request for the corresponding content. \
    \ As in the\n   preceding section, this example assumes that HTTP-based inter-CDN\n\
    \   redirection and recursive CDNI request routing are used (as in\n   Section\
    \ 3.3), but dynamic CDNI Metadata acquisition is applicable to\n   other variations\
    \ of request routing.\n       End User                 Operator B            \
    \    Operator A\n           |                         |                      \
    \   |\n           | CONTENT REQUEST         |                         |\n    \
    \       |-------------------------------------------------->|(1)\n           |\
    \                         |                         |\n           |          \
    \               |   RI REQ                |\n           |                    \
    \  (2)|<------------------------|\n           |                         |    \
    \                     |\n           |                         |   MI REQ     \
    \           |\n           |                      (3)|------------------------>|\n\
    \           |                         |   MI RESP               |\n          \
    \ |                         |<------------------------|(4)\n           |     \
    \                    |                         |\n           |               \
    \          |   RI RESP               |\n           |                         |------------------------>|(5)\n\
    \           |                         |                         |\n          \
    \ |                         |                         |\n           | CONTENT\
    \ REDIRECTION     |                         |\n           |<--------------------------------------------------|(6)\n\
    \           |                         |                         |\n          \
    \ | CONTENT REQUEST         |                         |\n           |------------------------>|(7)\
    \                      |\n           |                         |             \
    \            |\n           |                         |   MI REQ              \
    \  |\n           |                      (8)|------------------------>|\n     \
    \      |                         |   MI RESP               |\n           |   \
    \                      |<------------------------|(9)\n           |          \
    \               |                         |\n           :                    \
    \     :                         :\n           | CONTENT DATA            |    \
    \                     |\n           |<------------------------|              \
    \           |(10)\n     Figure 10: Message Flow for Synchronous CDNI Metadata\
    \ Acquisition\n   The steps illustrated in the figure are as follows:\n   1. \
    \  A Content Request arrives as normal.\n   2.   An RI request occurs as in the\
    \ prior example.\n   3.   On receipt of the CDNI Request Routing Request, Operator\
    \ B's CDN\n        initiates Synchronous acquisition of CDNI Metadata that are\n\
    \        needed for routing of the end-user request.  We assume the URI\n    \
    \    for the a metadata server is known ahead of time through some\n        out-of-band\
    \ means.\n   4.   On receipt of a CDNI Metadata request, Operator A's CDN\n  \
    \      responds, making the corresponding CDNI Metadata information\n        available\
    \ to Operator B's CDN.  This metadata is considered by\n        Operator B's CDN\
    \ before responding to the Request Routing\n        request.  (In a simple case,\
    \ the metadata could simply be an\n        allow or deny response for this particular\
    \ request.)\n   5.   Response to the RI request as normal.\n   6.   Redirection\
    \ message is sent to the end user.\n   7.   A delivery node of Operator B receives\
    \ the end user request.\n   8.   The delivery node Triggers dynamic acquisition\
    \ of additional\n        CDNI Metadata that are needed to process the end-user\
    \ content\n        request.  Note that there may exist cases where this step need\n\
    \        not happen, for example, because the metadata were already\n        acquired\
    \ previously.\n   9.   Operator A's CDN responds to the CDNI Metadata Request\
    \ and makes\n        the corresponding CDNI Metadata available to Operator B.\
    \  This\n        metadata influence how Operator B's CDN processes the end-user\n\
    \        request.\n   10.  Content is served (possibly preceded by inter-CDN acquisition)\n\
    \        as in Section 3.3.\n"
- title: 3.10.  Content and Metadata Acquisition with Multiple Upstream CDNs
  contents:
  - "3.10.  Content and Metadata Acquisition with Multiple Upstream CDNs\n   A single\
    \ dCDN may receive end-user requests from multiple uCDNs.\n   When a dCDN receives\
    \ an end-user request, it must determine the\n   identity of the uCDN from which\
    \ it should acquire the requested\n   content.\n   Ideally, the acquisition path\
    \ of an end-user request will follow the\n   redirection path of the request.\
    \  The dCDN should acquire the content\n   from the same uCDN that redirected\
    \ the request.\n   Determining the acquisition path requires the dCDN to reconstruct\
    \ the\n   redirection path based on information in the end-user request.  The\n\
    \   method for reconstructing the redirection path differs based on the\n   redirection\
    \ approach: HTTP or DNS.\n   With HTTP-redirection, the rewritten URI should include\
    \ sufficient\n   information for the dCDN to directly or indirectly determine\
    \ the uCDN\n   when the end-user request is received.  The HTTP-redirection approach\n\
    \   can be further broken-down based on the how the URL is rewritten\n   during\
    \ redirection: HTTP redirection with or without Site\n   Aggregation.  HTTP redirection\
    \ with Site Aggregation hides the\n   identity of the original CSP.  HTTP redirection\
    \ without Site\n   Aggregation does not attempt to hide the identity of the original\n\
    \   CSP.  With both approaches, the rewritten URI includes enough\n   information\
    \ to identify the immediate neighbor uCDN.\n   With DNS-redirection, the dCDN\
    \ receives the published URI (instead of\n   a rewritten URI) and does not have\
    \ sufficient information for the\n   dCDN to identify the appropriate uCDN.  The\
    \ dCDN may narrow the set\n   of viable uCDNs by examining the CDNI Metadata from\
    \ each to determine\n   which uCDNs are hosting metadata for the requested content.\
    \  If there\n   is a single uCDN hosting metadata for the requested content, the\
    \ dCDN\n   can assume that the request redirection is coming from this uCDN and\n\
    \   can acquire content from that uCDN.  If there are multiple uCDNs\n   hosting\
    \ metadata for the requested content, the dCDN may be ready to\n   trust any of\
    \ these uCDNs to acquire the content (provided the uCDN is\n   in a position to\
    \ serve it).  If the dCDN is not ready to trust any of\n   these uCDNs, it needs\
    \ to ensure via out of band arrangements that,\n   for a given content, only a\
    \ single uCDN will ever redirect requests\n   to the dCDN.\n   Content acquisition\
    \ may be preceded by content metadata acquisition.\n   If possible, the acquisition\
    \ path for metadata should also follow the\n   redirection path.  Additionally,\
    \ we assume metadata is indexed based\n   on rewritten URIs in the case of HTTP\
    \ redirection and is indexed\n   based on published URIs in the case of DNS-redirection.\
    \  Thus, the RI\n   and the MI are tightly coupled in that the result of request\
    \ routing\n   (a rewritten URI pointing to the dCDN) serves as an input to metadata\n\
    \   lookup.  If the content metadata includes information for acquiring\n   the\
    \ content, then the MI is also tightly coupled with the acquisition\n   interface\
    \ in that the result of the metadata lookup (an acquisition\n   URL likely hosted\
    \ by the uCDN) should serve as input to the content\n   acquisition.\n"
- title: 4.  Main Interfaces
  contents:
  - "4.  Main Interfaces\n   Figure 1 illustrates the main interfaces that are in\
    \ scope for the\n   CDNI WG, along with several others.  The detailed specifications\
    \ of\n   these interfaces are left to other documents, but see [RFC6707] and\n\
    \   [RFC7337] for some discussion of the interfaces.\n   One interface that is\
    \ not shown in Figure 1 is the interface between\n   the user and the CSP.  While\
    \ for the purposes of CDNI that interface\n   is out of scope, it is worth noting\
    \ that it does exist and can\n   provide useful functions, such as end-to-end\
    \ performance monitoring\n   and some forms of authentication and authorization.\n\
    \   There is also an important interface between the user and the Request\n  \
    \ Routing function of both uCDN and dCDN (shown as the \"Request\"\n   interface\
    \ in Figure 1).  As we saw in some of the preceding examples,\n   that interface\
    \ can be used as a way of passing metadata, such as the\n   minimum information\
    \ that is required for dCDN to obtain the content\n   from the uCDN.\n   In this\
    \ section we will provide an overview of the functions\n   performed by each of\
    \ the CDNI interfaces and discuss how they fit\n   into the overall solution.\
    \  We also examine some of the design trade-\n   offs, and explore several cross-interface\
    \ concerns.  We begin with an\n   examination of one such trade-off that affects\
    \ all the interfaces --\n   the use of in-band or out-of-band communication.\n"
- title: 4.1.  In-Band versus Out-of-Band Interfaces
  contents:
  - "4.1.  In-Band versus Out-of-Band Interfaces\n   Before getting to the individual\
    \ interfaces, we observe that there is\n   a high-level design choice for each,\
    \ involving the use of existing\n   in-band communication channels versus defining\
    \ new out-of-band\n   interfaces.\n   It is possible that the information needed\
    \ to carry out various\n   interconnection functions can be communicated between\
    \ peer CDNs using\n   existing in-band protocols.  The use of HTTP 302 redirect\
    \ is an\n   example of how certain aspects of request routing can be implemented\n\
    \   in-band (embedded in URIs).  Note that using existing in-band\n   protocols\
    \ does not imply that the CDNI interfaces are null; it is\n   still necessary\
    \ to establish the rules (conventions) by which such\n   protocols are used to\
    \ implement the various interface functions.\n   There are other opportunities\
    \ for in-band communication beyond HTTP\n   redirects.  For example, many of the\
    \ HTTP directives used by proxy\n   servers can also be used by peer CDNs to inform\
    \ each other of caching\n   activity.  Of these, one that is particularly relevant\
    \ is the\n   If-Modified-Since directive, which is used with the GET method to\n\
    \   make it conditional: if the requested object has not been modified\n   since\
    \ the time specified in this field, a copy of the object will not\n   be returned,\
    \ and instead, a 304 (not modified) response will be\n   returned.\n"
- title: 4.2.  Cross-Interface Concerns
  contents:
  - "4.2.  Cross-Interface Concerns\n   Although the CDNI interfaces are largely independent,\
    \ there are a set\n   of conventions practiced consistently across all interfaces.\
    \  Most\n   important among these is how resources are named, for example, how\n\
    \   the CDNI Metadata and Control interfaces identify the set of\n   resources\
    \ to which a given directive applies or the CDNI Logging\n   interface identifies\
    \ the set of resources for which a summary record\n   applies.\n   While, theoretically,\
    \ the CDNI interfaces could explicitly identify\n   every individual resource,\
    \ in practice, they name resource aggregates\n   (sets of URIs) that are to be\
    \ treated in a similar way.  For example,\n   URI aggregates can be identified\
    \ by a CDN-Domain (i.e., the FQDN at\n   the beginning of a URI) or by a URI-Filter\
    \ (i.e., a regular\n   expression that matches a subset of URIs contained in some\
    \ CDN-\n   Domain).  In other words, CDN-Domains and URI-Filters provide a\n \
    \  uniform means to aggregate sets (and subsets) of URIs for the purpose\n   of\
    \ defining the scope for some operation in one of the CDNI\n   interfaces.\n"
- title: 4.3.  Request Routing Interfaces
  contents:
  - "4.3.  Request Routing Interfaces\n   The Request Routing interface comprises\
    \ two parts: the Asynchronous\n   interface used by a dCDN to advertise footprint\
    \ and capabilities\n   (denoted FCI) to a uCDN, allowing the uCDN to decide whether\
    \ to\n   redirect particular user requests to that dCDN; and the Synchronous\n\
    \   interface used by the uCDN to redirect a user request to the dCDN\n   (denoted\
    \ RI).  (These are somewhat analogous to the operations of\n   routing and forwarding\
    \ in IP.)\n   As illustrated in Section 3, the RI part of request routing may\
    \ be\n   implemented in part by DNS and HTTP.  Naming conventions may be\n   established\
    \ by which CDN peers communicate whether a request should\n   be routed or content\
    \ served.\n   We also note that RI plays a key role in enabling recursive\n  \
    \ redirection, as illustrated in Section 3.3.  It enables the user to\n   be redirected\
    \ to the correct delivery node in dCDN with only a single\n   redirection step\
    \ (as seen by the user).  This may be particularly\n   valuable as the chain of\
    \ interconnected CDNs increases beyond two\n   CDNs.  For further discussion on\
    \ the RI, see [REDIRECTION].\n   In support of these redirection requests, it\
    \ is necessary for CDN\n   peers to exchange additional information with each\
    \ other, and this is\n   the role of the FCI part of request routing.  Depending\
    \ on the\n   method(s) supported, this might include:\n   o  The operator's unique\
    \ id (operator-id) or distinguished CDN-Domain\n      (operator-domain);\n   o\
    \  NS records for the operator's set of externally visible Request\n      Routers;\n\
    \   o  The set of requests the dCDN operator is prepared to serve (e.g.,\n   \
    \   a set of client IP prefixes or geographic regions that may be\n      served\
    \ by the dCDN).\n   o  Additional capabilities of the dCDN, such as its ability\
    \ to\n      support different CDNI Metadata requests.\n   Note that the set of\
    \ requests that a dCDN is willing to serve could\n   in some cases be relatively\
    \ static (e.g., a set of IP prefixes),\n   could be exchanged off-line, or might\
    \ even be negotiated as part of a\n   peering agreement.  However, it may also\
    \ be more dynamic, in which\n   case the exchange supported by FCI would be helpful.\
    \  A further\n   discussion of the Footprint & Capability Advertisement interface\
    \ can\n   be found in [FOOTPRINT-CAPABILITY].\n"
- title: 4.4.  CDNI Logging Interface
  contents:
  - "4.4.  CDNI Logging Interface\n   It is necessary for the Upstream CDN to have\
    \ visibility into the\n   delivery of content that it redirected to a Downstream\
    \ CDN.  This\n   allows the Upstream CDN to properly bill its customers for multiple\n\
    \   deliveries of content cached by the Downstream CDN, as well as to\n   report\
    \ accurate traffic statistics to those content providers.  This\n   is one role\
    \ of the LI.\n   Other operational data that may be relevant to CDNI can also\
    \ be\n   exchanged by the LI.  For example, a dCDN may report the amount of\n\
    \   content it has acquired from uCDN, and how much cache storage has\n   been\
    \ consumed by content cached on behalf of uCDN.\n   Traffic logs are easily exchanged\
    \ off-line.  For example, the\n   following traffic log is a small deviation from\
    \ the Apache log file\n   format, where entries include the following fields:\n\
    \   o  Domain - the full domain name of the origin server\n   o  IP address -\
    \ the IP address of the client making the request\n   o  End time - the ending\
    \ time of the transfer\n   o  Time zone - any time zone modifier for the end time\n\
    \   o  Method - the transfer command itself (e.g., GET, POST, HEAD)\n   o  URL\
    \ - the requested URL\n   o  Version - the protocol version, such as HTTP/1.0\n\
    \   o  Response - a numeric response code indicating transfer result\n   o  Bytes\
    \ Sent - the number of bytes in the body sent to the client\n   o  Request ID\
    \ - a unique identifier for this transfer\n   o  User agent - the user agent,\
    \ if supplied\n   o  Duration - the duration of the transfer in milliseconds\n\
    \   o  Cached Bytes - the number of body bytes served from the cache\n   o  Referrer\
    \ - the referrer string from the client, if supplied\n   Of these, only the Domain\
    \ field is indirect in the Downstream CDN --\n   it is set to the CDN-Domain used\
    \ by the Upstream CDN rather than the\n   actual origin server.  This field could\
    \ then used to filter traffic\n   log entries so only those entries matching the\
    \ Upstream CDN are\n   reported to the corresponding operator.  Further discussion\
    \ of the LI\n   can be found in [LOGGING].\n   One open question is who does the\
    \ filtering.  One option is that the\n   Downstream CDN filters its own logs and\
    \ passes the relevant records\n   directly to each Upstream peer.  This requires\
    \ that the Downstream\n   CDN know the set of CDN-Domains that belong to each\
    \ Upstream peer.\n   If this information is already exchanged between peers as\
    \ part of\n   another interface, then direct peer-to-peer reporting is\n   straightforward.\
    \  If it is not available, and operators do not wish\n   to advertise the set\
    \ of CDN-Domains they serve to their peers, then\n   the second option is for\
    \ each CDN to send both its non-local traffic\n   records and the set of CDN-Domains\
    \ it serves to an independent third\n   party (i.e., a CDN Exchange), which subsequently\
    \ filters, merges, and\n   distributes traffic records on behalf of each participating\
    \ CDN\n   operator.\n   A second open question is how timely traffic information\
    \ should be.\n   For example, in addition to offline traffic logs, accurate real-time\n\
    \   traffic monitoring might also be useful, but such information\n   requires\
    \ that the Downstream CDN inform the Upstream CDN each time it\n   serves Upstream\
    \ content from its cache.  The Downstream CDN can do\n   this, for example, by\
    \ sending a conditional HTTP GET request\n   (If-Modified-Since) to the Upstream\
    \ CDN each time it receives an HTTP\n   GET request from one of its end users.\
    \  This allows the Upstream CDN\n   to record that a request has been issued for\
    \ the purpose of real-time\n   traffic monitoring.  The Upstream CDN can also\
    \ use this information\n   to validate the traffic logs received later from the\
    \ Downstream CDN.\n   There is obviously a trade-off between accuracy of such\
    \ monitoring\n   and the overhead of the Downstream CDN having to go back to the\n\
    \   Upstream CDN for every request.\n   Another design trade-off in the LI is\
    \ the degree of aggregation or\n   summarization of data.  One situation that\
    \ lends itself to\n   summarization is the delivery of HTTP Adaptive Streaming\
    \ (HAS), since\n   the large number of individual chunk requests potentially results\
    \ in\n   large volumes of logging information.  This case is discussed below,\n\
    \   but other forms of aggregation may also be useful.  For example,\n   there\
    \ may be situations where bulk metrics such as bytes delivered\n   per hour may\
    \ suffice rather than the detailed per-request logs\n   outlined above.  It seems\
    \ likely that a range of granularities of\n   logging will be needed along with\
    \ ways to specify the type and degree\n   of aggregation required.\n"
- title: 4.5.  CDNI Control Interface
  contents:
  - "4.5.  CDNI Control Interface\n   The CDNI Control interface is initially used\
    \ to bootstrap the other\n   interfaces.  As a simple example, it could be used\
    \ to provide the\n   address of the logging server in the dCDN to the uCDN in\
    \ order to\n   bootstrap the CDNI Logging interface.  It may also be used, for\n\
    \   example, to establish security associations for the other interfaces.\n  \
    \ The other role the CI plays is to allow the uCDN to pre-position,\n   revalidate,\
    \ or purge metadata and content on a dCDN.  These\n   operations, sometimes collectively\
    \ called the \"Trigger interface\",\n   are discussed further in [CONTROL-TRIGGERS].\n"
- title: 4.6.  CDNI Metadata Interface
  contents:
  - "4.6.  CDNI Metadata Interface\n   The role of the CDNI Metadata interface is\
    \ to enable CDNI\n   distribution metadata to be conveyed to the Downstream CDN\
    \ by the\n   Upstream CDN.  Such metadata includes geo-blocking restrictions,\n\
    \   availability windows, access-control policies, and so on.  It may\n   also\
    \ include information to facilitate acquisition of content by a\n   dCDN (e.g.,\
    \ alternate sources for the content, authorization\n   information needed to acquire\
    \ the content from the source).  For a\n   full discussion of the CDNI Metadata\
    \ interface, see [METADATA]\n   Some distribution metadata may be partially emulated\
    \ using in-band\n   mechanisms.  For example, in case of any geo-blocking restrictions\
    \ or\n   availability windows, the Upstream CDN can elect to redirect a\n   request\
    \ to the Downstream CDN only if that CDN's advertised delivery\n   footprint is\
    \ acceptable for the requested URL.  Similarly, the\n   request could be forwarded\
    \ only if the current time is within the\n   availability window.  However, such\
    \ approaches typically come with\n   shortcomings such as inability to prevent\
    \ from replay outside the\n   time window or inability to make use of a Downstream\
    \ CDN that covers\n   a broader footprint than the geo-blocking restrictions.\n\
    \   Similarly, some forms of access control may also be performed on a\n   per-request\
    \ basis using HTTP directives.  For example, being able to\n   respond to a conditional\
    \ GET request gives the Upstream CDN an\n   opportunity to influence how the Downstream\
    \ CDN delivers its content.\n   Minimally, the Upstream CDN can invalidate (purge)\
    \ content previously\n   cached by the Downstream CDN.\n   All of these in-band\
    \ techniques serve to illustrate that uCDNs have\n   the option of enforcing some\
    \ of their access control policies\n   themselves (at the expense of increased\
    \ inter-CDN signaling load),\n   rather than delegating enforcement to dCDNs using\
    \ the MI.  As a\n   consequence, the MI could provide a means for the uCDN to\
    \ express its\n   desire to retain enforcement for itself.  For example, this\
    \ might be\n   done by including a \"check with me\" flag in the metadata associated\n\
    \   with certain content.  The realization of such in-band techniques\n   over\
    \ the various inter-CDN acquisition protocols (e.g., HTTP)\n   requires further\
    \ investigation and may require small extensions or\n   semantic changes to the\
    \ acquisition protocol.\n"
- title: 4.7.  HTTP Adaptive Streaming Concerns
  contents:
  - "4.7.  HTTP Adaptive Streaming Concerns\n   We consider HTTP Adaptive Streaming\
    \ (HAS) and the impact it has on\n   the CDNI interfaces because large objects\
    \ (e.g., videos) are broken\n   into a sequence of small, independent chunks.\
    \  For each of the\n   following, a more thorough discussion, including an overview\
    \ of the\n   trade-offs involved in alternative designs, can be found in RFC 6983.\n\
    \   First, with respect to Content Acquisition and File Management, which\n  \
    \ are out of scope for the CDNI interfaces but, nonetheless, relevant\n   to the\
    \ overall operation, we assume no additional measures are\n   required to deal\
    \ with large numbers of chunks.  This means that the\n   dCDN is not explicitly\
    \ made aware of any relationship between\n   different chunks, and the dCDN handles\
    \ each chunk as if it were an\n   individual and independent content item.  The\
    \ result is that content\n   acquisition between uCDN and dCDN also happens on\
    \ a per-chunk basis.\n   This approach is in line with the recommendations made\
    \ in RFC 6983,\n   which also identifies potential improvements in this area that\
    \ might\n   be considered in the future.\n   Second, with respect to request routing,\
    \ we note that HAS manifest\n   files have the potential to interfere with request\
    \ routing since\n   manifest files contain URLs pointing to the location of content\n\
    \   chunks.  To make sure that a manifest file does not hinder CDNI\n   request\
    \ routing and does not place excessive load on CDNI resources,\n   either the\
    \ use of manifest files could be limited to those containing\n   relative URLs\
    \ or the uCDN could modify the URLs in the manifest.  Our\n   approach for dealing\
    \ with these issues is twofold.  As a mandatory\n   requirement, CDNs should be\
    \ able to handle unmodified manifest files\n   containing either relative or absolute\
    \ URLs.  To limit the number of\n   redirects, and thus the load placed on the\
    \ CDNI interfaces, as an\n   optional feature uCDNs can use the information obtained\
    \ through the\n   CDNI Request Routing Redirection interface to modify the URLs\
    \ in the\n   manifest file.  Since the modification of the manifest file is an\n\
    \   optional uCDN-internal process, this does not require any\n   standardization\
    \ effort beyond being able to communicate chunk\n   locations in the CDNI Request\
    \ Routing Redirection interface.\n   Third, with respect to the CDNI Logging interface,\
    \ there are several\n   potential issues, including the large number of individual\
    \ chunk\n   requests potentially resulting in large volumes of logging\n   information,\
    \ and the desire to correlate logging information for\n   chunk requests that\
    \ correspond to the same HAS session.  For the\n   initial CDNI specification,\
    \ our approach is to expect participating\n   CDNs to support per-chunk logging\
    \ (e.g., logging each chunk request\n   as if it were an independent content request)\
    \ over the CDNI Logging\n   interface.  Optionally, the LI may include a Content\
    \ Collection\n   IDentifier (CCID) and/or a Session IDentifier (SID) as part of\
    \ the\n   logging fields, thereby facilitating correlation of per-chunk logs\n\
    \   into per-session logs for applications benefiting from such session\n   level\
    \ information (e.g., session-based analytics).  This approach is\n   in line with\
    \ the recommendations made in RFC 6983, which also\n   identifies potential improvements\
    \ in this area that might be\n   considered in the future.\n   Fourth, with respect\
    \ to the CDNI Control interface, and in particular\n   purging HAS chunks from\
    \ a given CDN, our approach is to expect each\n   CDN supports per-chunk content\
    \ purge (e.g., purging of chunks as if\n   they were individual content items).\
    \  Optionally, a CDN may support\n   content purge on the basis of a \"Purge IDentifier\
    \ (Purge-ID)\"\n   allowing the removal of all chunks related to a given Content\n\
    \   Collection with a single reference.  It is possible that this Purge-\n   ID\
    \ could be merged with the CCID discussed above for HAS Logging, or\n   alternatively,\
    \ they may remain distinct.\n"
- title: 4.8.  URI Rewriting
  contents:
  - "4.8.  URI Rewriting\n   When using HTTP redirection, content URIs may be rewritten\
    \ when\n   redirection takes place within a uCDN, from a uCDN to a dCDN, and\n\
    \   within the dCDN.  In the case of cascaded CDNs, content URIs may be\n   rewritten\
    \ at every CDN hop (e.g., between the uCDN and the dCDN\n   acting as the transit\
    \ CDN, and between the transit CDN and the dCDN\n   serving the request).  The\
    \ content URI used between any uCDN/dCDN\n   pair becomes a common handle that\
    \ can be referred to without\n   ambiguity by both CDNs in all their inter-CDN\
    \ communications.  This\n   handle allows the uCDN and dCDN to correlate information\
    \ exchanged\n   using other CDNI interfaces in both the Downstream direction (e.g.,\n\
    \   when using the MI) and the Upstream direction (e.g., when using the\n   LI).\n\
    \   Consider the simple case of a single uCDN/dCDN pair using HTTP\n   redirection.\
    \  We introduce the following terminology for content URIs\n   to simplify the\
    \ discussion:\n      \"u-URI\" represents a content URI in a request presented\
    \ to the\n      uCDN;\n      \"ud-URI\" is a content URI acting as the common\
    \ handle across uCDN\n      and dCDN for requests redirected by the uCDN to a\
    \ specific dCDN;\n      \"d-URI\" represents a content URI in a request made within\
    \ the\n      delegate dCDN.\n   In our simple pair-wise example, the \"ud-URI\"\
    \ effectively becomes the\n   handle that the uCDN/dCDN pair use to correlate\
    \ all CDNI information.\n   In particular, for a given pair of CDNs executing\
    \ the HTTP\n   redirection, the uCDN needs to map the u-URI to the ud-URI handle\
    \ for\n   all MI message exchanges, while the dCDN needs to map the d-URI to\n\
    \   the ud-URI handle for all LI message exchanges.\n   In the case of cascaded\
    \ CDNs, the transit CDN will rewrite the\n   content URI when redirecting to the\
    \ dCDN, thereby establishing a new\n   handle between the transit CDN and the\
    \ dCDN, that is different from\n   the handle between the uCDN and transit CDN.\
    \  It is the\n   responsibility of the transit CDN to manage its mapping across\n\
    \   handles so the right handle for all pairs of CDNs is always used in\n   its\
    \ CDNI communication.\n   In summary, all CDNI interfaces between a given pair\
    \ of CDNs need to\n   always use the \"ud-URI\" handle for that specific CDN pair\
    \ as their\n   content URI reference.\n"
- title: 5.  Deployment Models
  contents:
  - "5.  Deployment Models\n   In this section, we describe a number of possible deployment\
    \ models\n   that may be achieved using the CDNI interfaces described above. \
    \ We\n   note that these models are by no means exhaustive and that many other\n\
    \   models may be possible.\n   Although the reference model of Figure 1 shows\
    \ all CDN functions on\n   each side of the CDNI interface, deployments can rely\
    \ on entities\n   that are involved in any subset of these functions, and therefore\n\
    \   only support the relevant subset of CDNI interfaces.  As already\n   noted\
    \ in Section 3, effective CDNI deployments can be built without\n   necessarily\
    \ implementing all the interfaces.  Some examples of such\n   deployments are\
    \ shown below.\n   Note that, while we refer to Upstream and Downstream CDNs,\
    \ this\n   distinction applies to specific content items and transactions.  That\n\
    \   is, a given CDN may be Upstream for some transactions and Downstream\n   for\
    \ others, depending on many factors such as location of the\n   requesting client\
    \ and the particular piece of content requested.\n"
- title: 5.1.  Meshed CDNs
  contents:
  - "5.1.  Meshed CDNs\n   Although the reference model illustrated in Figure 1 shows\
    \ a\n   unidirectional CDN interconnection with a single uCDN and a single\n \
    \  dCDN, any arbitrary CDNI meshing can be built from this, such as the\n   example\
    \ meshing illustrated in Figure 11.  (Support for arbitrary\n   meshing may or\
    \ may not be in the initial scope for the working group,\n   but the model allows\
    \ for it.)\n         -------------             -----------\n        /    CDN A\
    \    \\<==CDNI===>/   CDN B   \\\n        \\             /           \\      \
    \     /\n         -------------             -----------\n              /\\   \
    \   \\\\                 /\\\n              ||       \\\\                ||\n\
    \             CDNI       \\==CDNI===\\\\    CDNI\n              ||           \
    \        \\\\    ||\n              \\/                   \\/    \\/\n        \
    \ -------------             -----------\n        /    CDN C    \\===CDNI===>/\
    \   CDN D   \\\n        \\             /           \\           /\n         -------------\
    \             -----------\n              /\\\n              ||\n             CDNI\n\
    \              ||\n              \\/\n         -------------\n        /    CDN\
    \ E    \\\n        \\             /\n         -------------\n      ===>  CDNI\
    \ interfaces, with right-hand side CDN acting as dCDN\n            to left-hand\
    \ side CDN\n      <==>  CDNI interfaces, with right-hand side CDN acting as dCDN\n\
    \            to left-hand side CDN and with left-hand side CDN acting\n      \
    \      as dCDN to right-hand side CDN\n           Figure 11: CDNI Deployment Model:\
    \ CDN Meshing Example\n"
- title: 5.2.  CSP Combined with CDN
  contents:
  - "5.2.  CSP Combined with CDN\n   Note that our terminology refers to functional\
    \ roles and not economic\n   or business roles.  That is, a given organization\
    \ may be operating as\n   both a CSP and a fully fledged uCDN when we consider\
    \ the functions\n   performed, as illustrated in Figure 12.\n    #####################################\
    \       ##################\n    #                                   #       #\
    \                #\n    #       Organization A              #       # Organization\
    \ B #\n    #                                   #       #                #\n  \
    \  #     --------       -------------  #       #  -----------   #\n    #    /\
    \   CSP  \\     /   uCDN      \\ #       # /   dCDN    \\  #\n    #    |     \
    \   |     |  +----+     | #       # |  +----+   |  #\n    #    |        |    \
    \ |  | C  |     | #       # |  | C  |   |  #\n    #    |        |     |  +----+\
    \     | #       # |  +----+   |  #\n    #    |        |     |  +----+     | #\
    \       # |  +----+   |  #\n    #    |        |     |  | L  |     | #       #\
    \ |  | L  |   |  #\n    #    |        |*****|  +----+     |===CDNI===>|  +----+\
    \   |  #\n    #    |        |     |  +----+     | #       # |  +----+   |  #\n\
    \    #    |        |     |  | RR |     | #       # |  | RR |   |  #\n    #   \
    \ |        |     |  +----+     | #       # |  +----+   |  #\n    #    |      \
    \  |     |  +----+     | #       # |  +----+   |  #\n    #    |        |     |\
    \  | D  |     | #       # |  | D  |   |  #\n    #    |        |     |  +----+\
    \     | #       # |  +----+   |  #\n    #    \\        /     \\             /\
    \ #       # \\           /  #\n    #     --------       -------------  #     \
    \  #  -----------   #\n    #                                   #       #     \
    \           #\n    #####################################       ##################\n\
    \    ===>  CDNI interfaces, with right-hand side CDN acting as dCDN\n        \
    \  to left-hand side CDN\n    ****  interfaces outside the scope of CDNI\n   \
    \ C     Control component of the CDN\n    L     Logging component of the CDN\n\
    \    RR    Request Routing component of the CDN\n    D     Distribution component\
    \ of the CDN\n    Figure 12: CDNI Deployment Model: Organization Combining CSP\
    \ & uCDN\n"
- title: 5.3.  CSP Using CDNI Request Routing Interface
  contents:
  - "5.3.  CSP Using CDNI Request Routing Interface\n   As another example, a content\
    \ provider organization may choose to run\n   its own Request Routing function\
    \ as a way to select among multiple\n   candidate CDN providers; in this case,\
    \ the content provider may be\n   modeled as the combination of a CSP and of a\
    \ special, restricted case\n   of a CDN.  In that case, as illustrated in Figure\
    \ 13, the CDNI\n   Request Routing interfaces can be used between the restricted\
    \ CDN\n   operated by the content provider Organization and the CDN operated by\n\
    \   the full CDN organization acting as a dCDN in the request routing\n   control\
    \ plane.  Interfaces outside the scope of the CDNI work can be\n   used between\
    \ the CSP functional entities of the content provider\n   organization and the\
    \ CDN operated by the full CDN organization acting\n   as a uCDN) in the CDNI\
    \ control planes other than the request routing\n   plane (i.e., Control, Distribution,\
    \ Logging).\n    #####################################       ##################\n\
    \    #                                   #       #                #\n    #   \
    \    Organization A              #       # Organization B #\n    #           \
    \                        #       #                #\n    #     --------      \
    \ -------------  #       #  -----------   #\n    #    /   CSP  \\     /  uCDN(RR)\
    \   \\ #       # /  dCDN(RR) \\  #\n    #    |        |     |  +----+     | #\
    \       # |  +----+   |  #\n    #    |        |*****|  | RR |==========CDNI=====>|\
    \ RR |   |  #\n    #    |        |     |  +----+     | #   RR  # |  +----+   |\
    \  #\n    #    |        |     \\             / #       # |           |  #\n  \
    \  #    |        |      -------------  #       # |uCDN(C,L,D)|  #\n    #    |\
    \        |                     #       # |  +----+   |  #\n    #    |        |\
    \                     #       # |  | C  |   |  #\n    #    |        |*******************************|\
    \  +----+   |  #\n    #    |        |                     #       # |  +----+\
    \   |  #\n    #    |        |                     #       # |  | L  |   |  #\n\
    \    #    |        |                     #       # |  +----+   |  #\n    #   \
    \ |        |                     #       # |  +----+   |  #\n    #    |      \
    \  |                     #       # |  | D  |   |  #\n    #    |        |     \
    \                #       # |  +----+   |  #\n    #    \\        /            \
    \         #       # \\           /  #\n    #     --------                    \
    \  #       #  -----------   #\n    #                                   #     \
    \  #                #\n    #####################################       ##################\n\
    \    ===>  CDNI Request Routing Interface\n    ****  interfaces outside the scope\
    \ of CDNI\n         Figure 13: CDNI Deployment Model: Organization Combining\n\
    \                            CSP and Partial CDN\n"
- title: 5.4.  CDN Federations and CDN Exchanges
  contents:
  - "5.4.  CDN Federations and CDN Exchanges\n   There are two additional concepts\
    \ related to, but distinct from,\n   CDNI.  The first is CDN Federation.  Our\
    \ view is that CDNI is the\n   more general concept, involving two or more CDNs\
    \ serving content to\n   each other's users, while federation implies a multi-lateral\n\
    \   interconnection arrangement, but other CDNI agreements are also\n   possible\
    \ (e.g., symmetric bilateral, asymmetric bilateral).  An\n   important conclusion\
    \ is that CDNI technology should not presume (or\n   bake in) a particular interconnection\
    \ agreement, but should instead\n   be general enough to permit alternative interconnection\
    \ arrangements\n   to evolve.\n   The second concept often used in the context\
    \ of CDN Federation is CDN\n   Exchange -- a third-party broker or exchange that\
    \ is used to\n   facilitate a CDN federation.  Our view is that a CDN exchange\
    \ offers\n   valuable machinery to scale the number of CDN operators involved\
    \ in a\n   multi-lateral (federated) agreement, but that this machinery is built\n\
    \   on top of the core CDNI mechanisms.  For example, as illustrated in\n   Figure\
    \ 14, the exchange might aggregate and redistribute information\n   about each\
    \ CDN footprint and capacity, as well as collect, filter,\n   and redistribute\
    \ traffic logs that each participant needs for\n   interconnection settlement,\
    \ but inter-CDN Request Routing, inter-CDN\n   content distribution (including\
    \ inter-CDN acquisition), and inter-CDN\n   control, which fundamentally involve\
    \ a direct interaction between an\n   Upstream CDN and a Downstream CDN -- operate\
    \ exactly as in a pair-\n   wise peering arrangement.  Turning to Figure 14, we\
    \ observe that in\n   this example:\n   o  each CDN supports a direct CDNI Control\
    \ interface to every other\n      CDN\n   o  each CDN supports a direct CDNI Metadata\
    \ interface to every other\n      CDN\n   o  each CDN supports a CDNI Logging\
    \ interface with the CDN Exchange\n   o  each CDN supports both a CDNI Request\
    \ Routing interface with the\n      CDN Exchange (for aggregation and redistribution\
    \ of dynamic CDN\n      footprint discovery information) and a direct RI to every\
    \ other\n      CDN (for actual request redirection).\n             ----------\
    \                            ---------\n            /    CDN A \\            \
    \              /   CDN B  \\\n            | +----+   |                       \
    \  |  +----+   |\n   //========>| C  |<==============CDNI============>| C  |<==========\\\
    \\\n   ||       | +----+   |            C            |  +----+   |       ||\n\
    \   ||       | +----+   |                         |  +----+   |       ||\n   ||\
    \ //=====>| D  |<==============CDNI============>| D  |<=======\\\\ ||\n   || ||\
    \    | +----+   |            M            |  +----+   |    || ||\n   || ||   \
    \ |          |     /------------\\      |           |    || ||\n   || ||    |\
    \ +----+   |     | +--+ CDN Ex|      |  +----+   |    || ||\n   || || //==>| RR\
    \ |<===CDNI==>|RR|<=======CDNI====>| RR |<====\\\\ || ||\n   || || || | +----+\
    \   | RR  | +--+       | RR   |  +----+   | || || ||\n   || || || |          |\
    \     |  /\\        |      |           | || || ||\n   || || || | +----+   |  \
    \   |  ||  +---+ |      |  +----+   | || || ||\n   || || || | | L  |<===CDNI=======>|\
    \ L |<=CDNI====>| L  |   | || || ||\n   || || || | +----+   |  L  |  ||  +---+\
    \ |  L   |  +----+   | || || ||\n   || || || \\          /     \\  ||    /\\ \
    \ /      \\           / || || ||\n   || || || -----------       --||----||-- \
    \       -----------  || || ||\n   || || ||                     ||    ||      \
    \                 || || ||\n   || || ||                  CDNI RR  ||         \
    \              || || ||\n   || || ||                     ||   CDNI L         \
    \           || || ||\n   || || ||                     ||    ||               \
    \        || || ||\n   || || ||                  ---||----||----              \
    \     || || ||\n   || || ||                 /   \\/    ||    \\              \
    \    || || ||\n   || || ||                 |  +----+ ||    |                 \
    \ || || ||\n   || || \\\\=====CDNI==========>| RR |<=============CDNI========//\
    \ || ||\n   || ||         RR         |  +----+ \\/    |       RR            ||\
    \ ||\n   || ||                    |        +----+ |                     || ||\n\
    \   || ||                    |        | L  | |                     || ||\n   ||\
    \ ||                    |        +----+ |                     || ||\n   || ||\
    \                    |  +----+       |                     || ||\n   || \\\\=======CDNI===========>|\
    \ D  |<=============CDNI===========// ||\n   ||           M           |  +----+\
    \       |       M                ||\n   ||                       |  +----+   \
    \    |                        ||\n   \\\\==========CDNI===========>| C  |<=============CDNI==============//\n\
    \                C           |  +----+       |       C\n                     \
    \       \\        CDN C  /\n                             --------------\n   <=CDNI\
    \ RR=>     CDNI Request Routing Interface\n   <=CDNI M==>     CDNI Metadata Interface\n\
    \   <=CDNI C==>     CDNI Control Interface\n   <=CDNI L==>     CDNI Logging Interface\n\
    \              Figure 14: CDNI Deployment Model: CDN Exchange\n   Note that a\
    \ CDN exchange may alternatively support a different set of\n   functionality\
    \ (e.g., Logging only, or Logging and full request\n   routing, or all the functionality\
    \ of a CDN including content\n   distribution).  All these options are expected\
    \ to be allowed by the\n   IETF CDNI specifications.\n"
- title: 6.  Trust Model
  contents:
  - "6.  Trust Model\n   There are a number of trust issues that need to be addressed\
    \ by a\n   CDNI solution.  Many of them are in fact similar or identical to\n\
    \   those in a simple CDN without interconnection.  In a standard CDN\n   environment\
    \ (without CDNI), the CSP places a degree of trust in a\n   single CDN operator\
    \ to perform many functions.  The CDN is trusted to\n   deliver content with appropriate\
    \ quality of experience for the end\n   user.  The CSP trusts the CDN operator\
    \ not to corrupt or modify the\n   content.  The CSP often relies on the CDN operator\
    \ to provide\n   reliable accounting information regarding the volume of delivered\n\
    \   content.  The CSP may also trust the CDN operator to perform actions\n   such\
    \ as timely invalidation of content and restriction of access to\n   content based\
    \ on certain criteria such as location of the user and\n   time of day, and to\
    \ enforce per-request authorization performed by\n   the CSP using techniques\
    \ such as URI signing.\n   A CSP also places trust in the CDN not to distribute\
    \ any information\n   that is confidential to the CSP (e.g., how popular a given\
    \ piece of\n   content is) or confidential to the end user (e.g., which content\
    \ has\n   been watched by which user).\n   A CSP does not necessarily have to\
    \ place complete trust in a CDN.  A\n   CSP will in some cases take steps to protect\
    \ its content from\n   improper distribution by a CDN, e.g., by encrypting it\
    \ and\n   distributing keys in some out of band way.  A CSP also depends on\n\
    \   monitoring (possibly by third parties) and reporting to verify that\n   the\
    \ CDN has performed adequately.  A CSP may use techniques such as\n   client-based\
    \ metering to verify that accounting information provided\n   by the CDN is reliable.\
    \  HTTP conditional requests may be used to\n   provide the CSP with some checks\
    \ on CDN operation.  In other words,\n   while a CSP may trust a CDN to perform\
    \ some functions in the short\n   term, the CSP is able, in most cases, to verify\
    \ whether these actions\n   have been performed correctly and to take action (such\
    \ as moving the\n   content to a different CDN) if the CDN does not live up to\n\
    \   expectations.\n   One of the trust issues raised by CDNI is transitive trust.\
    \  A CDN\n   that has a direct relationship with a CSP can now \"outsource\" the\n\
    \   delivery of content to another (Downstream) CDN.  That CDN may in\n   term\
    \ outsource delivery to yet another Downstream CDN, and so on.\n   The top-level\
    \ CDN in such a chain of delegation is responsible for\n   ensuring that the requirements\
    \ of the CSP are met.  Failure to do so\n   is presumably just as serious as in\
    \ the traditional single CDN case.\n   Hence, an Upstream CDN is essentially trusting\
    \ a Downstream CDN to\n   perform functions on its behalf in just the same way\
    \ as a CSP trusts\n   a single CDN.  Monitoring and reporting can similarly be\
    \ used to\n   verify that the Downstream CDN has performed appropriately.  However,\n\
    \   the introduction of multiple CDNs in the path between CSP and end\n   user\
    \ complicates the picture.  For example, third-party monitoring of\n   CDN performance\
    \ (or other aspects of operation, such as timely\n   invalidation) might be able\
    \ to identify the fact that a problem\n   occurred somewhere in the chain but\
    \ not point to the particular CDN\n   at fault.\n   In summary, we assume that\
    \ an Upstream CDN will invest a certain\n   amount of trust in a Downstream CDN,\
    \ but that it will verify that the\n   Downstream CDN is performing correctly,\
    \ and take corrective action\n   (including potentially breaking off its relationship\
    \ with that CDN)\n   if behavior is not correct.  We do not expect that the trust\n\
    \   relationship between a CSP and its \"top level\" CDN will differ\n   significantly\
    \ from that found today in single CDN situations.\n   However, it does appear\
    \ that more sophisticated tools and techniques\n   for monitoring CDN performance\
    \ and behavior will be required to\n   enable the identification of the CDN at\
    \ fault in a particular\n   delivery chain.\n   We expect that the detailed designs\
    \ for the specific interfaces for\n   CDNI will need to take the transitive trust\
    \ issues into account.  For\n   example, explicit confirmation that some action\
    \ (such as content\n   removal) has taken place in a Downstream CDN may help to\
    \ mitigate\n   some issues of transitive trust.\n"
- title: 7.  Privacy Considerations
  contents:
  - "7.  Privacy Considerations\n   In general, a CDN has the opportunity to collect\
    \ detailed information\n   about the behavior of end users, e.g., by logging which\
    \ files are\n   being downloaded.  While the concept of interconnected CDNs as\n\
    \   described in this document doesn't necessarily allow any given CDN to\n  \
    \ gather more information on any specific user, it potentially\n   facilitates\
    \ sharing of this data by a CDN with more parties.  As an\n   example, the purpose\
    \ of the CDNI Logging interface is to allow a dCDN\n   to share some of its log\
    \ records with a uCDN, both for billing\n   purposes as well as for sharing traffic\
    \ statistics with the Content\n   Provider on whose behalf the content was delivered.\
    \  The fact that\n   the CDNI interfaces provide mechanisms for sharing such potentially\n\
    \   sensitive user data, shows that it is necessary to include in these\n   interface\
    \ appropriate privacy and confidentiality mechanisms.  The\n   definition of such\
    \ mechanisms is dealt with in the respective CDN\n   interface documents.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   While there are a variety of security issues\
    \ introduced by a single\n   CDN, we are concerned here specifically with the\
    \ additional issues\n   that arise when CDNs are interconnected.  For example,\
    \ when a single\n   CDN has the ability to distribute content on behalf of a CSP,\
    \ there\n   may be concerns that such content could be distributed to parties\
    \ who\n   are not authorized to receive it, and there are mechanisms to deal\n\
    \   with such concerns.  Our focus in this section is on how CDNI\n   introduces\
    \ new security issues not found in the single CDN case.  For\n   a more detailed\
    \ analysis of the security requirements of CDNI, see\n   Section 9 of [RFC7337].\n\
    \   Many of the security issues that arise in CDNI are related to the\n   transitivity\
    \ of trust (or lack thereof) described in Section 6.  As\n   noted above, the\
    \ design of the various interfaces for CDNI must take\n   account of the additional\
    \ risks posed by the fact that a CDN with\n   whom a CSP has no direct relationship\
    \ is now potentially distributing\n   content for that CSP.  The mechanisms used\
    \ to mitigate these risks\n   may be similar to those used in the single CDN case,\
    \ but their\n   suitability in this more complex environment must be validated.\n\
    \   CDNs today offer a variety of means to control access to content,\n   such\
    \ as time-of-day restrictions, geo-blocking, and URI signing.\n   These mechanisms\
    \ must continue to function in CDNI environments, and\n   this consideration is\
    \ likely to affect the design of certain CDNI\n   interfaces (e.g., metadata,\
    \ request routing).  For more information\n   on URI signing in CDNI, see [URI-SIGNING].\n\
    \   Just as with a single CDN, each peer CDN must ensure that it is not\n   used\
    \ as an \"open proxy\" to deliver content on behalf of a malicious\n   CSP.  Whereas\
    \ a single CDN typically addresses this problem by having\n   CSPs explicitly\
    \ register content (or origin servers) that are to be\n   served, simply propagating\
    \ this information to peer Downstream CDNs\n   may be problematic because it reveals\
    \ more information than the\n   Upstream CDN is willing to specify.  (To this\
    \ end, the content\n   acquisition step in the earlier examples force the dCDN\
    \ to retrieve\n   content from the uCDN rather than go directly to the origin\
    \ server.)\n   There are several approaches to this problem.  One is for the uCDN\
    \ to\n   encode a signed token generated from a shared secret in each URL\n  \
    \ routed to a dCDN, and for the dCDN to validate the request based on\n   this\
    \ token.  Another one is to have each Upstream CDN advertise the\n   set of CDN-Domains\
    \ they serve, where the Downstream CDN checks each\n   request against this set\
    \ before caching and delivering the associated\n   object.  Although straightforward,\
    \ this approach requires operators\n   to reveal additional information, which\
    \ may or may not be an issue.\n"
- title: 8.1.  Security of CDNI Interfaces
  contents:
  - "8.1.  Security of CDNI Interfaces\n   It is noted in [RFC7337] that all CDNI\
    \ interfaces must be able to\n   operate securely over insecure IP networks. \
    \ Since it is expected\n   that the CDNI interfaces will be implemented using\
    \ existing\n   application protocols such as HTTP or Extensible Messaging and\n\
    \   Presence Protocol (XMPP), we also expect that the security mechanisms\n  \
    \ available to those protocols may be used by the CDNI interfaces.\n   Details\
    \ of how these interfaces are secured will be specified in the\n   relevant interface\
    \ documents.\n"
- title: 8.2.  Digital Rights Management
  contents:
  - "8.2.  Digital Rights Management\n   Digital Rights Management (DRM), also sometimes\
    \ called digital\n   restrictions management, is often employed for content distributed\n\
    \   via CDNs.  In general, DRM relies on the CDN to distribute encrypted\n   content,\
    \ with decryption keys distributed to users by some other\n   means (e.g., directly\
    \ from the CSP to the end user).  For this\n   reason, DRM is considered out of\
    \ scope [RFC6707] and does not\n   introduce additional security issues for CDNI.\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   The following individuals contributed to this document:\n\
    \   o  Matt Caulfield\n   o  Francois Le Faucheur\n   o  Aaron Falk\n   o  David\
    \ Ferguson\n   o  John Hartman\n   o  Ben Niven-Jenkins\n   o  Kent Leung\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors would like to thank Huw Jones and Jinmei\
    \ Tatuya for their\n   helpful input to this document.  In addition, the authors\
    \ would like\n   to thank Stephen Farrell, Ted Lemon, and Alissa Cooper for their\n\
    \   reviews, which have helped to improve this document.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [CONTROL-TRIGGERS]\n              Murray, R.\
    \ and B. Niven-Jenkins, \"CDNI Control Interface /\n              Triggers\",\
    \ Work in Progress, July 2014.\n   [FOOTPRINT-CAPABILITY]\n              Seedorf,\
    \ J., Peterson, J., Previdi, S., Brandenburg, R.,\n              and K. Ma, \"\
    CDNI Request Routing: Footprint and\n              Capabilities Semantics\", Work\
    \ in Progress, July 2014.\n   [LOGGING]  Faucheur, F., Ed., Bertrand, G., Ed.,\
    \ Oprescu, I., Ed.,\n              and R. Peterkofsky, \"CDNI Logging Interface\"\
    , Work in\n              Progress, July 2014.\n   [METADATA]\n              Niven-Jenkins,\
    \ B., Murray, R., Caulfield, M., Leung, K.,\n              and K. Ma, \"CDN Interconnection\
    \ Metadata\", Work in\n              Progress, July 2014.\n   [REDIRECTION]\n\
    \              Niven-Jenkins, B., Ed. and R. Brandenburg, Ed., \"Request\n   \
    \           Routing Redirection Interface for CDN Interconnection\",\n       \
    \       Work in Progress, April 2014.\n   [RFC3466]  Day, M., Cain, B., Tomlinson,\
    \ G., and P. Rzewski, \"A Model\n              for Content Internetworking (CDI)\"\
    , RFC 3466, February\n              2003.\n   [RFC6707]  Niven-Jenkins, B., Le\
    \ Faucheur, F., and N. Bitar, \"Content\n              Distribution Network Interconnection\
    \ (CDNI) Problem\n              Statement\", RFC 6707, September 2012.\n   [RFC6770]\
    \  Bertrand, G., Stephan, E., Burbridge, T., Eardley, P., Ma,\n              K.,\
    \ and G. Watson, \"Use Cases for Content Delivery Network\n              Interconnection\"\
    , RFC 6770, November 2012.\n   [RFC6983]  van Brandenburg, R., van Deventer, O.,\
    \ Le Faucheur, F.,\n              and K. Leung, \"Models for HTTP-Adaptive-Streaming-Aware\n\
    \              Content Distribution Network Interconnection (CDNI)\", RFC\n  \
    \            6983, July 2013.\n   [RFC7337]  Leung, K., Ed. and Y. Lee, Ed., \"\
    Content Distribution\n              Network Interconnection (CDNI) Requirements\"\
    , RFC 7337,\n              August 2014.\n   [URI-SIGNING]\n              Leung,\
    \ K., Faucheur, F., Downey, B., Brandenburg, R., and\n              S. Leibrand,\
    \ \"URI Signing for CDN Interconnection (CDNI)\",\n              Work in Progress,\
    \ March 2014.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Larry Peterson\n   Akamai Technologies, Inc.\n   8 Cambridge\
    \ Center\n   Cambridge, MA  02142\n   USA\n   EMail: lapeters@akamai.com\n   Bruce\
    \ Davie\n   VMware, Inc.\n   3401 Hillview Ave.\n   Palo Alto, CA  94304\n   USA\n\
    \   EMail: bdavie@vmware.com\n   Ray van Brandenburg (editor)\n   TNO\n   Brassersplein\
    \ 2\n   Delft  2612CT\n   the Netherlands\n   Phone: +31-88-866-7000\n   EMail:\
    \ ray.vanbrandenburg@tno.nl\n"
