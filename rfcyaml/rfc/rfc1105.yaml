- title: __initial_text__
  contents:
  - '                    A Border Gateway Protocol (BGP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC outlines a specific approach for the exchange\
    \ of network\n   reachability information between Autonomous Systems.\n   At the\
    \ time of this writing, the Border Gateway Protocol\n   implementations exist\
    \ for cisco routers as well as for the NSFNET\n   Nodal Switching Systems.  A\
    \ public domain version for \"gated\" is\n   currently being implemented.\n  \
    \ Distribution of this memo is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Border Gateway Protocol (BGP) is an inter-autonomous\
    \ system\n   routing protocol.  It is built on experience gained with EGP as\n\
    \   defined in RFC 904 [1] and EGP usage in the NSFNET Backbone as\n   described\
    \ in RFC 1092 [2] and RFC 1093 [3].\n   The primary function of a BGP speaking\
    \ system is to exchange network\n   reachability information with other BGP systems.\
    \  This network\n   reachability information includes information on the autonomous\n\
    \   systems (AS's) that traffic must transit to reach these networks.\n   This\
    \ information is sufficient to construct a graph of AS\n   connectivity from which\
    \ routing loops may be pruned and policy\n   decisions at an AS level may be enforced.\n\
    \   BGP runs over a reliable transport level protocol.  This eliminates\n   the\
    \ need to implement explicit update fragmentation, retransmission,\n   acknowledgement,\
    \ and sequencing.  Any authentication scheme used by\n   the transport protocol\
    \ may be used in addition to BGP's own\n   authentication mechanisms.\n   The\
    \ initial BGP implementation is based on TCP [4], however any\n   reliable transport\
    \ may be used.  A message passing protocol such as\n   VMTP [5] might be more\
    \ natural for BGP.  TCP will be used, however,\n   since it is present in virtually\
    \ all commercial routers and hosts.\n   In the following descriptions the phrase\
    \ \"transport protocol\n   connection\" can be understood to refer to a TCP connection.\
    \  BGP uses\n   TCP port 179 for establishing its connections.\n"
- title: 2. Summary of Operation
  contents:
  - "2. Summary of Operation\n   Two hosts form a transport protocol connection between\
    \ one another.\n   They exchange messages to open and confirm the connection parameters.\n\
    \   The initial data flow is the entire BGP routing table.  Incremental\n   updates\
    \ are sent as the routing tables change.  Keepalive messages\n   are sent periodically\
    \ to ensure the liveness of the connection.\n   Notification messages are sent\
    \ in response to errors or special\n   conditions.  If a connection encounters\
    \ an error condition, a\n   notification message is sent and the connection is\
    \ optionally closed.\n   The hosts executing the Border Gateway Protocol need\
    \ not be routers.\n   A non-routing host could exchange routing information with\
    \ routers\n   via EGP or even an interior routing protocol.  That non-routing\
    \ host\n   could then use BGP to exchange routing information with a border\n\
    \   gateway in another autonomous system.  The implications and\n   applications\
    \ of this architecture are for further study.\n   If a particular AS has more\
    \ than one BGP gateway, then all these\n   gateways should have a consistent view\
    \ of routing.  A consistent view\n   of the interior routes of the autonomous\
    \ system is provided by the\n   intra-AS routing protocol.  A consistent view\
    \ of the routes exterior\n   to the AS may be provided in a variety of ways. \
    \ One way is to use\n   the BGP protocol to exchange routing information between\
    \ the BGP\n   gateways within a single AS.  In this case, in order to maintain\n\
    \   consist routing information, these gateways MUST have direct BGP\n   sessions\
    \ with each other (the BGP sessions should form a complete\n   graph).  Note that\
    \ this requirement does not imply that all BGP\n   gateways within a single AS\
    \ must have direct links to each other;\n   other methods may be used to ensure\
    \ consistent routing information.\n"
- title: 3. Message Formats
  contents:
  - "3. Message Formats\n   This section describes message formats and actions to\
    \ be taken when\n   errors are detected while processing these messages.\n   Messages\
    \ are sent over a reliable transport protocol connection.  A\n   message is processed\
    \ after it is entirely received.  The maximum\n   message size is 1024 bytes.\
    \  All implementations are required to\n   support this maximum message size.\
    \  The smallest message that may be\n   sent consists of a BGP header without\
    \ a data portion, or 8 bytes.\n   The phrase \"the BGP connection is closed\"\
    \ means that the transport\n   protocol connection has been closed and that all\
    \ resources for that\n   BGP connection have been deallocated.  Routing table\
    \ entries\n   associated with the remote peer are marked as invalid.  This\n \
    \  information is passed to other BGP peers before being deleted from\n   the\
    \ system.\n"
- title: 3.1 Message Header Format
  contents:
  - "3.1 Message Header Format\n   Each message has a fixed size header.  There may\
    \ or may not be a data\n   portion following the header, depending on the message\
    \ type.  The\n   layout of these fields is shown below.\n    0               \
    \    1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Marker                |          Length                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version   |     Type      |        Hold Time               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Marker: 16 bits\n      The Marker field is 16 bits of all ones.  This field\
    \ is used to\n      mark the start of a message.  If the first two bytes of a\
    \ message\n      are not all ones then we have a synchronization error and the\
    \ BGP\n      connection should be closed after sending a notification message\n\
    \      with opcode 5 (connection not synchronized).  No notification data\n  \
    \    is sent.\n   Length: 16 bits\n      The Length field is 16 bits.  It is the\
    \ total length of the\n      message, incluluding header, in bytes.  If an illegal\
    \ length is\n      encountered (more than 1024 bytes or less than 8 bytes), a\n\
    \      notification message with opcode 6 (bad message length) and two\n     \
    \ data bytes of the bad length should be sent and the BGP connection\n      closed.\n\
    \   Version: 8 bits\n      The Version field is 8 bits of protocol version number.\
    \  The\n      current BGP version number is 1.  If a bad version number is\n \
    \     found, a notification message with opcode 8 (bad version number)\n     \
    \ should be sent and the BGP connection closed.  The bad version\n      number\
    \ should be included in one byte of notification data.\n   Type: 8 bits\n    \
    \  The Type field is 8 bits of message type code.  The following type\n      codes\
    \ are defined:\n                    1 - OPEN\n                    2 - UPDATE\n\
    \                    3 - NOTIFICATION\n                    4 - KEEPALIVE\n   \
    \                 5 - OPEN CONFIRM\n      If an unrecognized type value is found,\
    \ a notification message\n      with opcode 7 (bad type code) and data consisting\
    \ of the byte of\n      type field in question should be sent and the BGP connection\n\
    \      closed.\n   Hold Timer: 16 bits.\n      This field contains the number\
    \ of seconds that may elapse since\n      receiving a BGP KEEPALIVE or BGP UPDATE\
    \ message from our BGP peer\n      before we declare an error and close the BGP\
    \ connection.\n"
- title: 3.2  OPEN Message Format
  contents:
  - "3.2  OPEN Message Format\n   After a transport protocol connection is established,\
    \ the first\n   message sent by either side is an OPEN message.  If the OPEN message\n\
    \   is acceptable, an OPEN CONFIRM message confirming the OPEN is sent\n   back.\
    \  Once the OPEN is confirmed, UPDATE, KEEPALIVE, and\n   NOTIFICATION messages\
    \ may be exchanged.\n   In addition to the fixed size BGP header, the OPEN message\
    \ contains\n   the following fields.\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    My Autonomous System      |   Link Type   |  Auth. Code    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \               Authentication Data                           |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   My Autonomous System: 16 bits\n      This field is our 16 bit autonomous system\
    \ number.  If there is a\n      problem with this field, a notification message\
    \ with opcode 9\n      (invalid AS field) should be sent and the BGP connection\
    \ closed.\n      No notification data is sent.\n   Link Type: 8 bits\n      The\
    \ Link Type field is a single octet containing one of the\n      following codes\
    \ defining our position in the AS graph relative to\n      our peer.\n       \
    \                0  - INTERNAL\n                       1  - UP\n             \
    \          2  - DOWN\n                       3  - H-LINK\n      UP indicates the\
    \ peer is higher in the AS hierarchy, DOWN\n      indicates lower, and H-LINK\
    \ indicates at the same level.  INTERNAL\n      indicates that the peer is another\
    \ BGP speaking host in our\n      autonomous system.  INTERNAL links are used\
    \ to keep AS routing\n      information consistent with an AS with multiple border\
    \ gateways.\n      If the Link Type field is unacceptable, a notification message\n\
    \      with opcode 1 (link type error in open) and data consisting of the\n  \
    \    expected link type should be sent and the BGP connection closed.\n      The\
    \ acceptable values for the Link Type fields of two BGP peers\n      are discussed\
    \ below.\n   Authentication Code: 8 bits\n      The Authentication Code field\
    \ is an octet whose value describes\n      the authentication mechanism being\
    \ used.  A value of zero\n      indicates no BGP authentication.  Note that a\
    \ separate\n      authentication mechanism may be used in establishing the transport\n\
    \      level connection.  If the authentication code is not recognized, a\n  \
    \    notification message with opcode 2 (unknown authentication code)\n      and\
    \ no data is sent and the BGP connection is closed.\n   Authentication Data: variable\
    \ length\n      The Authentication Data field is a variable length field\n   \
    \   containing authentication data.  If the value of Authentication\n      Code\
    \ field is zero, the Authentication Data field has zero length.\n      If authentication\
    \ fails, a notification message with opcode 3\n      (authentication failure)\
    \ and no data is sent and the BGP\n      connection is closed.\n"
- title: 3.3 OPEN CONFIRM Message Format
  contents:
  - "3.3 OPEN CONFIRM Message Format\n   An OPEN CONFIRM message is sent after receiving\
    \ an OPEN message.\n   This completes the BGP connection setup.  UPDATE, NOTIFICATION,\
    \ and\n   KEEPALIVE messages may now be exchanged.\n   An OPEN CONFIRM message\
    \ consists of a BGP header with an OPEN CONFIRM\n   type code.  There is no data\
    \ in an OPEN CONFIRM message.\n"
- title: 3.4 UPDATE Message Format
  contents:
  - "3.4 UPDATE Message Format\n   UPDATE messages are used to transfer routing information\
    \ between BGP\n   peers.  The information in the UPDATE packet can be used to\
    \ construct\n   a graph describing the relationships of the various autonomous\n\
    \   systems.  By applying rules to be discussed, routing information\n   loops\
    \ and some other anomalies may be detected and removed from the\n   inter-AS routing.\n\
    \   Whenever an error in a UPDATE message is detected, a notification\n   message\
    \ is sent with opcode 4 (bad update), a two byte subcode\n   describing the nature\
    \ of the problem, and a data field consisting of\n   as much of the UPDATE message\
    \ data portion as possible.  UPDATE\n   messages have the following format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Gateway                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   AS count    | Direction     |         AS Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     repeat (Direction, AS Number) pairs AS count times        |\n   /  \
    \                                                             /\n   /        \
    \                                                       /\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Net Count                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Network                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Metric                   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |       repeat (Network, Metric) pairs Net\
    \ Count times          |\n   /                                               \
    \                /\n   /                                                     \
    \          /\n   |                                                           \
    \    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Gateway: 32 bits.\n      The Gateway field is the address of a gateway that\
    \ has routes to\n      the Internet networks listed in the rest of the UPDATE\
    \ message.\n      This gateway MUST belong to the same AS as the BGP peer who\n\
    \      advertises it.  If there is a problem with the gateway field, a\n     \
    \ notification message with subcode 6 (invalid gateway field) is\n      sent.\n\
    \   AS count: 8 bits.\n      This field is the count of Direction and AS Number\
    \ pairs in this\n      UPDATE message.  If an incorrect AS count field is detected,\n\
    \      subcode 1 (invalid AS count) is specified in the notification\n      message.\n\
    \   Direction: 8 bits\n      The Direction field is an octet containing the direction\
    \ taken by\n      the routing information when exiting the AS defined by the\n\
    \      succeeding AS Number field.  The following values are defined.\n      \
    \      1  - UP            (went up a link in the graph)\n            2  - DOWN\
    \          (went down a link in the graph)\n            3  - H_LINK        (horizontal\
    \ link in the graph)\n            4  - EGP_LINK      (EGP derived information)\n\
    \            5  - INCOMPLETE    (incomplete information)\n      There is a special\
    \ provision to pass exterior learned (non-BGP)\n      routes over BGP.  If an\
    \ EGP learned route is passed over BGP, then\n      the Direction field is set\
    \ to EGP-LINK and the AS Number field is\n      set to the AS number of the EGP\
    \ peer that advertised this route.\n      All other exterior-learned routes (non-BGP\
    \ and non-EGP) may be\n      passed by setting AS Number field to zero and Direction\
    \ field to\n      INCOMPLETE.  If the direction code is not recognized, a\n  \
    \    notification message with subcode 2 (invalid direction code) is\n      sent.\n\
    \   AS Number: 16 bits\n      This field is the AS number that transmitted the\
    \ routing\n      information.  If there is a problem with this AS number, a\n\
    \      notification message with subcode 3 (invalid autonomous system) is\n  \
    \    sent.\n   Net Count: 16 bits.\n      The Net Count field is the number of\
    \ Metric and Network field\n      pairs which follow this field.  If there is\
    \ a problem with this\n      field, a notification with subcode 7 (invalid net\
    \ count field) is\n      sent.\n   Network: 32 bits\n      The Network field is\
    \ four bytes of Internet network number.  If\n      there is a problem with the\
    \ network field, a notification message\n      with subcode 8 (invalid network\
    \ field) is sent.\n   Metric: 16 bits\n      The Metric field is 16 bits of an\
    \ unspecified metric.  BGP metrics\n      are comparable ONLY if routes have exactly\
    \ the same AS path.  A\n      metric of all ones indicates the network is unreachable.\
    \  In all\n      other cases the metric field is MEANINGLESS and MUST BE IGNORED.\n\
    \      There are no illegal metric values.\n"
- title: 3.5  NOTIFICATION Message Format
  contents:
  - "3.5  NOTIFICATION Message Format\n   NOTIFICATION messages are sent when an error\
    \ condition is detected.\n   The BGP connection is closed shortly after sending\
    \ the notification\n   message.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Opcode               |           Data                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Opcode: 16 bits\n      The Opcode field describes the type of NOTIFICATION.\
    \  The\n      following opcodes have been defined.\n            1 (*) - link type\
    \ error in open.  Data is one byte of proper\n                    link type.\n\
    \            2 (*) - unknown authentication code.  No data.\n            3 (*)\
    \ - authentication failure.  No data.\n            4     - update error.  See\
    \ below for data description.\n            5 (*) - connection out of sync.  No\
    \ data.\n            6 (*) - invalid message length.  Data is two bytes of\n \
    \                   bad length.\n            7 (*) - invalid message type.  Data\
    \ is one byte of bad\n                    message type.\n            8 (*) - invalid\
    \ version number.  Data is one byte of\n                    bad version.\n   \
    \         9 (*) - invalid AS field in OPEN.  No data.\n           10 (*) - BGP\
    \ Cease.  No data.\n      The starred opcodes in the list above are considered\
    \ fatal errors\n      and cause transport connection termination.\n      The update\
    \ error (opcode 4) has as data 16 bits of subcode\n      followed by the last\
    \ UPDATE message in question.  After the\n      subcode comes as much of the data\
    \ portion of the UPDATE in\n      question as possible.  The following subcodes\
    \ are defined:\n               1 - invalid AS count\n               2 - invalid\
    \ direction code\n               3 - invalid autonomous system\n             \
    \  4 - EGP_LINK or INCOMPLETE_LINK link type at other than\n                 \
    \  the end of the AS path list\n               5 - routing loop\n            \
    \   6 - invalid gateway field\n               7 - invalid Net Count field\n  \
    \             8 - invalid network field\n   Data: variable\n      The Data field\
    \ contains zero or more bytes of data to be used in\n      diagnosing the reason\
    \ for the NOTIFICATION.  The contents of the\n      Data field depend upon the\
    \ opcode.  See the opcode descriptions\n      above for more details.\n"
- title: 3.6 KEEPALIVE Message Format
  contents:
  - "3.6 KEEPALIVE Message Format\n   BGP does not use any transport protocol based\
    \ keepalive mechanism to\n   determine if peers are reachable.  Instead KEEPALIVE\
    \ messages are\n   exchanged between peers often enough as not to cause the hold\
    \ time\n   (as advertised in the BGP header) to expire.  A reasonable minimum\n\
    \   frequency of KEEPALIVE exchange would be one third of the Hold Time\n   interval.\n\
    \   As soon as the Hold Time associated with BGP peer has expired, the\n   BGP\
    \ connection is closed and BGP deallocates all resources associated\n   with this\
    \ peer.\n   The KEEPALIVE message is a BGP header without any data.\n"
- title: 4. BGP Finite State machine.
  contents:
  - "4. BGP Finite State machine.\n   This section specifies BGP operation in terms\
    \ of a Finite State\n   Machine (FSM).  Following is a brief summary and overview\
    \ of BGP\n   operations by state as determined by this FSM.  A condensed version\n\
    \   of the BGP FSM is found in Appendix 1.\n   Initially BGP is in the BGP_Idle\
    \ state.\n   BGP_Idle state:\n      In this state BGP refuses all incoming BGP\
    \ connections.  No\n      resources are allocated to the BGP neighbor.  In response\
    \ to the\n      Start event (initiated by either system or operator) the local\n\
    \      system initializes all BGP resources and changes its state to\n      BGP_Active.\n\
    \   BGP_Active state:\n      In this state BGP is trying to acquire a BGP neighbor\
    \ by opening a\n      transport protocol connection.  If the transport protocol\
    \ open\n      fails (for example, retransmission timeout),  BGP stays in the\n\
    \      BGP_Active state.\n      Otherwise,  the local system sends an OPEN message\
    \ to its peer,\n      and changes its state to BGP_OpenSent.  Since the hold time\
    \ of the\n      peer is still undetermined, the hold time is initialized to some\n\
    \      large value.\n      In response to the Stop event (initiated by either\
    \ system or\n      operator) the local system releases all BGP resources and changes\n\
    \      its state to BGP_Idle.\n   BGP_OpenSent state:\n      In this state BGP\
    \ waits for an OPEN message from its peer.  When\n      an OPEN message is received,\
    \ all fields are checked for\n      correctness.  If the initial BGP header checking\
    \ detects an error,\n      BGP deallocates all resources associated with this\
    \ peer and\n      returns to the BGP_Active state.  Otherwise, the Link Type,\n\
    \      Authentication Code, and Authentication Data fields are checked\n     \
    \ for correctness.\n      If the link type is incorrect, a NOTIFICATION message\
    \ with opcode\n      1 (link type error in open) is sent.  The following combination\
    \ of\n      link type fields are correct; all other combinations are invalid.\n\
    \                      Our view         Peer view\n                      UP  \
    \              DOWN\n                      DOWN              UP\n            \
    \          INTERNAL          INTERNAL\n                      H-LINK          \
    \  H-LINK\n      If the link between two peers is INTERNAL, then AS number of\
    \ both\n      peers must be the same.  Otherwise, a NOTIFICATION message with\n\
    \      opcode 1 (link type error in open) is sent.\n      If both peers have the\
    \ same AS number and the link type between\n      these peers is not INTERNAL,\
    \ then a NOTIFICATION message with\n      opcode 1 (link type error in open) is\
    \ sent.\n      If the value of the Authentication Code field is zero, any\n  \
    \    information in the Authentication Data field (if present) is\n      ignored.\
    \  If the Authentication Code field is non-zero it is\n      checked for known\
    \ authentication codes.  If authentication code is\n      unknown, then the BGP\
    \ NOTIFICATION message with opcode 2 (unknown\n      authentication code) is sent.\n\
    \      If the Authentication Code value is non-zero, then the\n      corresponding\
    \ authentication procedure is invoked.  The default\n      values are a zero Authentication\
    \ Code and no Authentication Data.\n      If any of the above tests detect an\
    \ error, the local system closes\n      the BGP connection and changes its state\
    \ to BGP_Idle.\n      If there are no errors in the BGP OPEN message, BGP sends\
    \ an OPEN\n      CONFIRM message and goes into the BGP_OpenConfirm state.  At\
    \ this\n      point the hold timer which was originally set to some arbitrary\n\
    \      large value (see above) is replaced with the value indicated in\n     \
    \ the OPEN message.\n      If disconnect notification is received from the underlying\n\
    \      transport protocol or if the hold time expires, the local system\n    \
    \  closes the BGP connection and changes its state to BGP_Idle.\n   BGP_OpenConfirm\
    \ state:\n      In this state BGP waits for an OPEN CONFIRM message.  As soon\
    \ as\n      this message is received, BGP changes its state to\n      BGP_Established.\
    \  If the hold timer expires before an OPEN CONFIRM\n      message is received,\
    \ the local system closes the BGP connection\n      and changes its state to BGP_Idle.\n\
    \   BGP_Established state:\n      In the BGP_Established state BGP can exchange\
    \ UPDATE,\n      NOTIFICATION, and KEEPALIVE messages with its peer.\n      If\
    \ disconnect notification is received from the underlying\n      transport protocol\
    \ or if the hold time expires, the local system\n      closes the BGP connection\
    \ and changes its state to BGP_Idle.\n      In response to the Stop event initiated\
    \ by either the system or\n      operator, the local system sends a NOTIFICATION\
    \ message with\n      opcode 10 (BGP Cease), closes the BGP connection, and changes\
    \ its\n      state to BGP_Idle.\n"
- title: 5. UPDATE Message Handling
  contents:
  - "5. UPDATE Message Handling\n   A BGP UPDATE message may be received only in the\
    \ BGP_Established\n   state.  When a BGP UPDATE message is received, each field\
    \ is checked\n   for validity.  When a NOTIFICATION message is sent regarding\
    \ an\n   UPDATE, the opcode is always 4 (update error), the subcode depends on\n\
    \   the type of error, and the rest of the data field is as much as\n   possible\
    \ of the data portion of the UPDATE that caused the error.\n   If the Gateway\
    \ field is incorrect, a BGP NOTIFICATION message is sent\n   with subcode 6 (invalid\
    \ gateway field).  All information in this\n   UPDATE message is discarded.\n\
    \   If the AS Count field is less than or equal to zero, a BGP\n   NOTIFICATION\
    \ is sent with subcode 1 (invalid AS count).  Otherwise,\n   the complete AS path\
    \ is extracted and checked as described below.\n   If one of the Direction fields\
    \ in the AS route list is not defined, a\n   BGP NOTIFICATION message is with\
    \ subcode 2 (invalid direction code).\n   If one of the AS Number fields in the\
    \ AS route list is incorrect, a\n   BGP NOTIFICATION message is sent with subcode\
    \ 3 (invalid autonomous\n   system).\n   If either a EGP_LINK or a INCOMPLETE_LINK\
    \ link type occurs at other\n   than the end of the AS path, a BGP NOTIFICATION\
    \ message is sent with\n   subcode 4 (EGP_LINK or INCOMPLETE_LINK link type at\
    \ other than the\n   end of the AS path list).\n   If none of the above tests\
    \ failed, the full AS route is checked for\n   AS loops.\n   AS loop detection\
    \ is done by scanning the full AS route and checking\n   that each AS in this\
    \ route occurs only once.  If an AS loop is\n   detected, a BGP NOTIFICATION message\
    \ is sent with subcode 5 (routing\n   loop).\n   If any of the above errors are\
    \ detected, no further processing is\n   done.  Otherwise, the complete AS path\
    \ is correct and the rest of the\n   UPDATE message is processed.\n   If the Net\
    \ Count field is incorrect, a BGP NOTIFICATION message is\n   sent with subcode\
    \ 7 (invalid Net Count field).\n   Each network and metric pair listed in the\
    \ BGP UPDATE message is\n   checked for a valid network number.  If the Network\
    \ field is\n   incorrect, a BGP Notification message is sent with subcode 8 (invalid\n\
    \   network field).  No checking is done on the metric field.  It is up\n   to\
    \ a particular implementation to decide whether to continue\n   processing or\
    \ terminate it upon the first incorrect network.\n   If the network, its complete\
    \ AS path, and the gateway are correct,\n   then the route is compared with other\
    \ routes to the same network.  If\n   the new route is better than the current\
    \ one, then it is flooded to\n   other BGP peers as follows:\n    - If the BGP\
    \ UPDATE was received over the INTERNAL link, it is not\n      propagated over\
    \ any other INTERNAL link.  This restriction is\n      due to the fact that all\
    \ BGP gateways within a single AS\n      form a completely connected graph (see\
    \ above).\n    - Before sending a BGP UPDATE message over the non-INTERNAL links,\n\
    \      check the AS path to insure that doing so would not cause a\n      routing\
    \ loop.  The BGP UPDATE message is then propagated (subject\n      to the local\
    \ policy restrictions) over any of the non-INTERNAL\n      link of a routing loop\
    \ would not result.\n    - If the BGP UPDATE message is propagated over a non-INTERNAL\
    \ link,\n      then the current AS number and link type of the link over which\n\
    \      it is going to be propagated is prepended to the full AS path\n      and\
    \ the AS count field is incremented by 1.  If the BGP UPDATE\n      message is\
    \ propagated over an INTERNAL link, then the full AS\n      path passed unmodified\
    \ and the AS count stays the same.  The\n      Gateway field is replaced with\
    \ the sender's own address.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   We would like to express our thanks to Len Bosack (cisco\
    \ Systems),\n   Jeff Honig (Cornell University) and all members of the IWG task\
    \ force\n   for their contributions to this document.\n                      \
    \          Appendix 1\n"
- title: BGP FSM State Transitions and Actions.
  contents:
  - "BGP FSM State Transitions and Actions.\n   This Appendix discusses the transitions\
    \ between states in the BGP FSM\n   in response to BGP events.  The following\
    \ is the list of these states\n   and events.\n       BGP States:\n          \
    \  1 - BGP_Idle\n            2 - BGP_Active\n            3 - BGP_OpenSent\n  \
    \          4 - BGP_OpenConfirm\n            5 - BGP_Established\n       BGP Events:\n\
    \            1 - BGP Start\n            2 - BGP Transport connection open\n  \
    \          3 - BGP Transport connection closed\n            4 - BGP Transport\
    \ connection open failed\n            5 - Receive OPEN message\n            6\
    \ - Receive OPEN CONFIRM message\n            7 - Receive KEEPALIVE message\n\
    \            8 - Receive UPDATE messages\n            9 - Receive NOTIFICATION\
    \ message\n           10 - Holdtime timer expired\n           11 - KeepAlive timer\
    \ expired\n           12 - Receive CEASE message\n           13 - BGP Stop\n \
    \  The following table describes the state transitions of the BGP FSM\n   and\
    \ the actions triggered by these transitions.\n   Event                Actions\
    \               Message Sent   Next State\n   --------------------------------------------------------------------\n\
    \   BGP_Idle (1)\n     1            Initialize resources           none      \
    \       2\n   BGP_Active (2)\n     2           Initialize resources          \
    \  OPEN             3\n     4                   none                    none \
    \            2\n    13           Release resources               none        \
    \     1\n   BGP_OpenSent(3)\n    3                    none                   \
    \ none             1\n    5            Process OPEN is OK            OPEN CONFIRM\
    \       4\n                 Process OPEN Message failed   NOTIFICATION       1\n\
    \   11            Restart KeepAlive timer       KEEPALIVE          3\n   13  \
    \          Release resources               none             1\n   BGP_OpenConfirm\
    \ (4)\n    6            Complete initialization         none             5\n \
    \   3                   none                     none             1\n   10   \
    \         Close transport connection      none             1\n   11          \
    \  Restart KeepAlive timer       KEEPALIVE          4\n   13            Release\
    \ resources               none             1\n   BGP_Established (5)\n    7  \
    \          Process KEEPALIVE               none             5\n    8         \
    \   Process UPDATE is OK          UPDATE             5\n                 Process\
    \ UPDATE failed         NOTIFICATION       5\n    9            Process NOTIFICATION\
    \            none             5\n   10            Close transport connection \
    \     none             1\n   11            Restart KeepAlive timer       KEEPALIVE\
    \          5\n   12            Close transport connection    NOTIFICATION    \
    \   1\n   13            Release resources               none             1\n \
    \  --------------------------------------------------------------------\n   All\
    \ other state-event combinations are considered fatal errors and\n   cause the\
    \ termination of the BGP transport connection (if necessary)\n   and a transition\
    \ to the BGP_Idle state.\n   The following is a condensed version of the above\
    \ state transition\n   table.\n   Events|BGP_Idle BGP_Active BGP_OpenSent BGP_OpenConfirm\
    \ BGP_Estab\n         |  (1)   |    (2)   |     (3)    |      (4)      |     \
    \ (5)\n         |-------------------------------------------------------------\n\
    \    1    |   2    |          |            |               |\n         |     \
    \   |          |            |               |\n    2    |        |     3    |\
    \            |               |\n         |        |          |            |  \
    \             |\n    3    |        |          |      1     |       1       |\n\
    \         |        |          |            |               |\n    4    |     \
    \   |     2    |            |               |\n         |        |          |\
    \            |               |\n    5    |        |          |    4 or 1  |  \
    \             |\n         |        |          |            |               |\n\
    \    6    |        |          |            |       5       |\n         |     \
    \   |          |            |               |\n    7    |        |          |\
    \            |               |       5\n         |        |          |       \
    \     |               |\n    8    |        |          |            |         \
    \      |       5\n         |        |          |            |               |\n\
    \    9    |        |          |            |               |       5\n       \
    \  |        |          |            |               |\n   10    |        |   \
    \       |            |       1       |       1\n         |        |          |\
    \            |               |\n   11    |        |          |      3     |  \
    \     4       |       5\n         |        |          |            |         \
    \      |\n   12    |        |          |            |               |       1\n\
    \         |        |          |            |               |\n   13    |     \
    \   |     1    |      1     |       1       |       1\n         |        |   \
    \       |            |               |\n         --------------------------------------------------------------\n"
- title: References
  contents:
  - "References\n  [1]  Mills, D., \"Exterior Gateway Protocol Formal Specification\"\
    , RFC\n       904, BBN, April 1984.\n  [2]  Rekhter, Y., \"EGP and Policy Based\
    \ Routing in the New NSFNET\n       Backbone\", RFC 1092, T. J. Watson Research\
    \ Center, February 1989.\n  [3]  Braun, H-W., \"The NSFNET Routing Architecture\"\
    , RFC 1093,\n       MERIT/NSFNET Project, February 1989.\n  [4]  Postel, J., \"\
    Transmission Control Protocol - DARPA Internet\n       Program Protocol Specification\"\
    , RFC 793, DARPA, September 1981.\n  [5]  Cheriton, D., \"VMTP: Versatile Message\
    \ Transaction Protocol\", RFC\n       1045, Stanford University, February 1988.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kirk Lougheed\n   cisco Systems, Inc.\n   1360 Willow\
    \ Road, Suite 201\n   Menlo Park, CA 94025\n   Phone: (415) 326-1941\n   Email:\
    \ LOUGHEED@MATHOM.CISCO.COM\n   Jacob Rekhter\n   T.J. Watson Research Center\n\
    \   IBM Corporation\n   P.O. Box 218\n   Yorktown Heights, NY 10598\n   Phone:\
    \ (914) 945-3896\n   Email: YAKOV@IBM.COM\n"
