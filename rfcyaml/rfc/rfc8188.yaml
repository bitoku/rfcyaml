- contents:
  - '                  Encrypted Content-Encoding for HTTP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo introduces a content coding for HTTP that allows message\n
    \  payloads to be encrypted.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8188.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . . .
    . . .   3\n   2.  The \"aes128gcm\" HTTP Content Coding . . . . . . . . . . .
    . .   3\n     2.1.  Encryption Content-Coding Header  . . . . . . . . . . . .
    \  5\n     2.2.  Content-Encryption Key Derivation . . . . . . . . . . . .   6\n
    \    2.3.  Nonce Derivation  . . . . . . . . . . . . . . . . . . . .   6\n   3.
    \ Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n     3.1.
    \ Encryption of a Response  . . . . . . . . . . . . . . . .   7\n     3.2.  Encryption
    with Multiple Records  . . . . . . . . . . . .   8\n   4.  Security Considerations
    . . . . . . . . . . . . . . . . . . .   8\n     4.1.  Automatic Decryption  .
    . . . . . . . . . . . . . . . . .   9\n     4.2.  Message Truncation  . . . .
    . . . . . . . . . . . . . . .   9\n     4.3.  Key and Nonce Reuse . . . . . .
    . . . . . . . . . . . . .   9\n     4.4.  Data Encryption Limits  . . . . . .
    . . . . . . . . . . .  10\n     4.5.  Content Integrity . . . . . . . . . . .
    . . . . . . . . .  10\n     4.6.  Leaking Information in Header Fields  . . .
    . . . . . . .  10\n     4.7.  Poisoning Storage . . . . . . . . . . . . . . .
    . . . . .  11\n     4.8.  Sizing and Timing Attacks . . . . . . . . . . . . .
    . . .  11\n   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . .
    .  12\n     5.1.  The \"aes128gcm\" HTTP Content Coding . . . . . . . . . . .
    \ 12\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12\n
    \    6.1.  Normative References  . . . . . . . . . . . . . . . . . .  12\n     6.2.
    \ Informative References  . . . . . . . . . . . . . . . . .  13\n   Appendix A.
    \ JWE Mapping  . . . . . . . . . . . . . . . . . . . .  15\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  16\n   Author's Address  .
    . . . . . . . . . . . . . . . . . . . . . . .  16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   It is sometimes desirable to encrypt the contents of an
    HTTP message\n   (request or response) so that when the payload is stored (e.g.,
    with\n   an HTTP PUT), only someone with the appropriate key can read it.\n   For
    example, it might be necessary to store a file on a server\n   without exposing
    its contents to that server.  Furthermore, that same\n   file could be replicated
    to other servers (to make it more resistant\n   to server or network failure),
    downloaded by clients (to make it\n   available offline), etc., without exposing
    its contents.\n   These uses are not met by the use of Transport Layer Security
    (TLS)\n   [RFC5246], since it only encrypts the channel between the client and\n
    \  server.\n   This document specifies a content coding (see Section 3.1.2 of\n
    \  [RFC7231]) for HTTP to serve these and other use cases.\n   This content coding
    is not a direct adaptation of message-based\n   encryption formats -- such as
    those that are described by [RFC4880],\n   [RFC5652], [RFC7516], and [XMLENC].
    \ Those formats are not suited to\n   stream processing, which is necessary for
    HTTP.  The format described\n   here follows more closely to the lower-level constructs
    described in\n   [RFC5116].\n   To the extent that message-based encryption formats
    use the same\n   primitives, the format can be considered to be a sequence of\n
    \  encrypted messages with a particular profile.  For instance,\n   Appendix A
    explains how the format is congruent with a sequence of\n   JSON Web Encryption
    [RFC7516] values with a fixed header.\n   This mechanism is likely only a small
    part of a larger design that\n   uses content encryption.  How clients and servers
    acquire and\n   identify keys will depend on the use case.  In particular, a key\n
    \  management system is not described.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  The \"aes128gcm\" HTTP Content Coding\n   The \"aes128gcm\" HTTP content
    coding indicates that a payload has been\n   encrypted using Advanced Encryption
    Standard (AES) in Galois/Counter\n   Mode (GCM) as identified as AEAD_AES_128_GCM
    in [RFC5116],\n   Section 5.1.  The AEAD_AES_128_GCM algorithm uses a 128-bit
    content-\n   encryption key.\n   Using this content coding requires knowledge
    of a key.  How this key\n   is acquired is not defined in this document.\n   The
    \"aes128gcm\" content coding uses a single fixed set of encryption\n   primitives.
    \ Cipher agility is achieved by defining a new content-\n   coding scheme.  This
    ensures that only the HTTP Accept-Encoding\n   header field is necessary to negotiate
    the use of encryption.\n   The \"aes128gcm\" content coding uses a fixed record
    size.  The final\n   encoding consists of a header (see Section 2.1) and zero
    or more\n   fixed-size encrypted records; the final record can be smaller than\n
    \  the record size.\n   The record size determines the length of each portion
    of plaintext\n   that is enciphered.  The record size (\"rs\") is included in
    the\n   content-coding header (see Section 2.1).\n   +-----------+             content\n
    \  |   data    |             any length up to rs-17 octets\n   +-----------+\n
    \       |\n        v\n   +-----------+-----+       add a delimiter octet (0x01
    or 0x02)\n   |   data    | pad |       then 0x00-valued octets to rs-16\n   +-----------+-----+
    \      (or less on the last record)\n            |\n            v\n   +--------------------+
    \   encrypt with AEAD_AES_128_GCM;\n   |    ciphertext      |    final size is
    rs;\n   +--------------------+    the last record can be smaller\n   AEAD_AES_128_GCM
    produces ciphertext 16 octets longer than its input\n   plaintext.  Therefore,
    the unencrypted content of each record is\n   shorter than the record size by
    16 octets.  Valid records always\n   contain at least a padding delimiter octet
    and a 16-octet\n   authentication tag.\n   Each record contains a single padding
    delimiter octet followed by any\n   number of zero octets.  The last record uses
    a padding delimiter\n   octet set to the value 2, all other records have a padding
    delimiter\n   octet value of 1.\n   On decryption, the padding delimiter is the
    last non-zero-valued\n   octet of the record.  A decrypter MUST fail if the record
    contains no\n   non-zero octet.  A decrypter MUST fail if the last record contains
    a\n   padding delimiter with a value other than 2 or if any record other\n   than
    the last contains a padding delimiter with a value other than 1.\n   The nonce
    for each record is a 96-bit value constructed from the\n   record sequence number
    and the input-keying material.  Nonce\n   derivation is covered in Section 2.3.\n
    \  The additional data passed to each invocation of AEAD_AES_128_GCM is\n   a
    zero-length octet sequence.\n   A consequence of this record structure is that
    range requests\n   [RFC7233] and random access to encrypted payload bodies are
    possible\n   at the granularity of the record size.  Partial records at the ends\n
    \  of a range cannot be decrypted.  Thus, it is best if range requests\n   start
    and end on record boundaries.  However, note that random access\n   to specific
    parts of encrypted data could be confounded by the\n   presence of padding.\n
    \  Selecting the record size most appropriate for a given situation\n   requires
    a trade-off.  A smaller record size allows decrypted octets\n   to be released
    more rapidly, which can be appropriate for\n   applications that depend on responsiveness.
    \ Smaller records also\n   reduce the additional data required if random access
    into the\n   ciphertext is needed.\n   Applications that don't depend on streaming,
    random access, or\n   arbitrary padding can use larger records, or even a single
    record.  A\n   larger record size reduces processing and data overheads.\n"
  - contents:
    - "2.1.  Encryption Content-Coding Header\n   The content coding uses a header
      block that includes all parameters\n   needed to decrypt the content (other
      than the key).  The header block\n   is placed in the body of a message ahead
      of the sequence of records.\n   +-----------+--------+-----------+---------------+\n
      \  | salt (16) | rs (4) | idlen (1) | keyid (idlen) |\n   +-----------+--------+-----------+---------------+\n
      \  salt:  The \"salt\" parameter comprises the first 16 octets of the\n      \"aes128gcm\"
      content-coding header.  The same \"salt\" parameter\n      value MUST NOT be
      reused for two different payload bodies that\n      have the same input-keying
      material; generating a random salt for\n      every application of the content
      coding ensures that content-\n      encryption key reuse is highly unlikely.\n
      \  rs:  The \"rs\" or record size parameter contains an unsigned 32-bit\n      integer
      in network byte order that describes the record size in\n      octets.  Note
      that it is, therefore, impossible to exceed the\n      2^36-31 limit on plaintext
      input to AEAD_AES_128_GCM.  Values\n      smaller than 18 are invalid.\n   idlen:
      \ The \"idlen\" parameter is an unsigned 8-bit integer that\n      defines the
      length of the \"keyid\" parameter.\n   keyid:  The \"keyid\" parameter can be
      used to identify the keying\n      material that is used.  This field is the
      length determined by the\n      \"idlen\" parameter.  Recipients that receive
      a message are expected\n      to know how to retrieve keys; the \"keyid\" parameter
      might be input\n      to that process.  A \"keyid\" parameter SHOULD be a UTF-8-encoded\n
      \     [RFC3629] string, particularly where the identifier might need to\n      be
      rendered in a textual form.\n"
    title: 2.1.  Encryption Content-Coding Header
  - contents:
    - "2.2.  Content-Encryption Key Derivation\n   In order to allow the reuse of
      keying material for multiple different\n   HTTP messages, a content-encryption
      key is derived for each message.\n   The content-encryption key is derived from
      the \"salt\" parameter using\n   the HMAC-based key derivation function (HKDF)
      described in [RFC5869]\n   using the SHA-256 hash algorithm [FIPS180-4].\n   The
      value of the \"salt\" parameter is the salt input to the HKDF.  The\n   keying
      material identified by the \"keyid\" parameter is the input-\n   keying material
      (IKM) to HKDF.  Input-keying material is expected to\n   be provided to recipients
      separately.  The extract phase of HKDF,\n   therefore, produces a pseudorandom
      key (PRK) as follows:\n      PRK = HMAC-SHA-256 (salt, IKM)\n   The info parameter
      to HKDF is set to the ASCII-encoded string\n   \"Content-Encoding: aes128gcm\"
      and a single zero octet:\n      cek_info = \"Content-Encoding: aes128gcm\" ||
      0x00\n   Note(1):  Concatenation of octet sequences is represented by the \"||\"\n
      \     operator.\n   Note(2):  The strings used here and in Section 2.3 do not
      include a\n      terminating 0x00 octet, as is used in some programming languages.\n
      \  AEAD_AES_128_GCM requires a 16-octet (128-bit) content-encryption key\n   (CEK),
      so the length (L) parameter to HKDF is 16.  The second step of\n   HKDF can,
      therefore, be simplified to the first 16 octets of a single\n   HMAC:\n      CEK
      = HMAC-SHA-256(PRK, cek_info || 0x01)\n"
    title: 2.2.  Content-Encryption Key Derivation
  - contents:
    - "2.3.  Nonce Derivation\n   The nonce input to AEAD_AES_128_GCM is constructed
      for each record.\n   The nonce for each record is a 12-octet (96-bit) value
      that is\n   derived from the record sequence number, input-keying material,
      and\n   \"salt\" parameter.\n   The input-keying material and \"salt\" parameter
      are input to HKDF with\n   different info and length (L) parameters.\n   The
      length (L) parameter is 12 octets.  The info parameter for the\n   nonce is
      the ASCII-encoded string \"Content-Encoding: nonce\",\n   terminated by a single
      zero octet:\n      nonce_info = \"Content-Encoding: nonce\" || 0x00\n   The
      result is combined with the record sequence number -- using\n   exclusive or
      -- to produce the nonce.  The record sequence number\n   (SEQ) is a 96-bit unsigned
      integer in network byte order that starts\n   at zero.\n   Thus, the final nonce
      for each record is a 12-octet value:\n      NONCE = HMAC-SHA-256(PRK, nonce_info
      || 0x01) XOR SEQ\n   This nonce construction prevents removal or reordering
      of records.\n"
    title: 2.3.  Nonce Derivation
  title: 2.  The "aes128gcm" HTTP Content Coding
- contents:
  - "3.  Examples\n   This section shows a few examples of the encrypted-content coding.\n
    \  Note: All binary values in the examples in this section use base64\n   encoding
    with URL and filename safe alphabet [RFC4648].  This\n   includes the bodies of
    requests.  Whitespace and line wrapping is\n   added to fit formatting constraints.\n"
  - contents:
    - "3.1.  Encryption of a Response\n   Here, a successful HTTP GET response has
      been encrypted.  This uses a\n   record size of 4096 octets and no padding (just
      the single-octet\n   padding delimiter), so only a partial record is present.
      \ The input-\n   keying material is identified by an empty string (that is,
      the\n   \"keyid\" field in the header is zero octets in length).\n   The encrypted
      data in this example is the UTF-8-encoded string \"I am\n   the walrus\".  The
      input-keying material is the value \"yqdlZ-\n   tYemfogSmv7Ws5PQ\" (in base64url).
      \ The 54-octet content body contains\n   a single record and is shown here using
      71 base64url characters for\n   presentation reasons.\n   HTTP/1.1 200 OK\n
      \  Content-Type: application/octet-stream\n   Content-Length: 54\n   Content-Encoding:
      aes128gcm\n   I1BsxtFttlv3u_Oo94xnmwAAEAAA-NAVub2qFgBEuQKRapoZu-IxkIva3MEB1PD-\n
      \  ly8Thjg\n   Note that the media type has been changed to \"application/octet-\n
      \  stream\" to avoid exposing information about the content.\n   Alternatively
      (and equivalently), the Content-Type header field can\n   be omitted.\n   Intermediate
      values for this example (all shown using base64url):\n   salt (from header)
      = I1BsxtFttlv3u_Oo94xnmw\n   PRK = zyeH5phsIsgUyd4oiSEIy35x-gIi4aM7y0hCF8mwn9g\n
      \  CEK = _wniytB-ofscZDh4tbSjHw\n   NONCE = Bcs8gkIRKLI8GeI8\n   unencrypted
      data = SSBhbSB0aGUgd2FscnVzAg\n"
    title: 3.1.  Encryption of a Response
  - contents:
    - "3.2.  Encryption with Multiple Records\n   This example shows the same message
      with input-keying material of\n   \"BO3ZVPxUlnLORbVGMpbT1Q\".  In this example,
      the plaintext is split\n   into records of 25 octets each (that is, the \"rs\"
      field in the header\n   is 25).  The first record includes one 0x00 padding
      octet.  This\n   means that there are 7 octets of message in the first record
      and 8 in\n   the second.  A key identifier of the UTF-8-encoded string \"a1\"
      is\n   also included in the header.\n   HTTP/1.1 200 OK\n   Content-Length:
      73\n   Content-Encoding: aes128gcm\n   uNCkWiNYzKTnBN9ji3-qWAAAABkCYTHOG8chz_gnvgOqdGYovxyjuqRyJFjEDyoF\n
      \  1Fvkj6hQPdPHI51OEUKEpgz3SsLWIqS_uA\n"
    title: 3.2.  Encryption with Multiple Records
  title: 3.  Examples
- contents:
  - "4.  Security Considerations\n   This mechanism assumes the presence of a key
    management framework\n   that is used to manage the distribution of keys between
    valid senders\n   and receivers.  Defining key management is part of composing
    this\n   mechanism into a larger application, protocol, or framework.\n   Implementation
    of cryptography -- and key management in particular --\n   can be difficult.  For
    instance, implementations need to account for\n   the potential for exposing keying
    material on side channels, such as\n   might be exposed by the time it takes to
    perform a given operation.\n   The requirements for a good implementation of cryptographic\n
    \  algorithms can change over time.\n"
  - contents:
    - "4.1.  Automatic Decryption\n   As a content coding, a \"aes128gcm\" content
      coding might be\n   automatically removed by a receiver in a way that is not
      obvious to\n   the ultimate consumer of a message.  Recipients that depend on\n
      \  content-origin authentication using this mechanism MUST reject\n   messages
      that don't include the \"aes128gcm\" content coding.\n"
    title: 4.1.  Automatic Decryption
  - contents:
    - "4.2.  Message Truncation\n   This content encoding is designed to permit the
      incremental\n   processing of large messages.  It also permits random access
      to\n   plaintext in a limited fashion.  The content encoding permits a\n   receiver
      to detect when a message is truncated.\n   A partially delivered message MUST
      NOT be processed as though the\n   entire message was successfully delivered.
      \ For instance, a partially\n   delivered message cannot be cached as though
      it were complete.\n   An attacker might exploit willingness to process partial
      messages to\n   cause a receiver to remain in a specific intermediate state.\n
      \  Implementations performing processing on partial messages need to\n   ensure
      that any intermediate processing states don't advantage an\n   attacker.\n"
    title: 4.2.  Message Truncation
  - contents:
    - "4.3.  Key and Nonce Reuse\n   Encrypting different plaintext with the same
      content-encryption key\n   and nonce in AES-GCM is not safe [RFC5116].  The
      scheme defined here\n   uses a fixed progression of nonce values.  Thus, a new
      content-\n   encryption key is needed for every application of the content coding.\n
      \  Since input-keying material can be reused, a unique \"salt\" parameter\n
      \  is needed to ensure that a content-encryption key is not reused.\n   If a
      content-encryption key is reused -- that is, if input-keying\n   material and
      \"salt\" parameter are reused -- this could expose the\n   plaintext and the
      authentication key, nullifying the protection\n   offered by encryption.  Thus,
      if the same input-keying material is\n   reused, then the \"salt\" parameter
      MUST be unique each time.  This\n   ensures that the content-encryption key
      is not reused.  An\n   implementation SHOULD generate a random \"salt\" parameter
      for every\n   message.\n"
    title: 4.3.  Key and Nonce Reuse
  - contents:
    - "4.4.  Data Encryption Limits\n   There are limits to the data that AEAD_AES_128_GCM
      can encipher.  The\n   maximum value for the record size is limited by the size
      of the \"rs\"\n   field in the header (see Section 2.1), which ensures that
      the 2^36-31\n   limit for a single application of AEAD_AES_128_GCM is not reached\n
      \  [RFC5116].  In order to preserve a 2^-40 probability of\n   indistinguishability
      under chosen plaintext attack (IND-CPA), the\n   total amount of plaintext that
      can be enciphered with the key derived\n   from the same input-keying material
      and salt MUST be less than 2^44.5\n   blocks of 16 octets [AEBounds].\n   If
      the record size is a multiple of 16 octets, this means that 398\n   terabytes
      can be encrypted safely, including padding and overhead.\n   However, if the
      record size is not a multiple of 16 octets, the total\n   amount of data that
      can be safely encrypted is reduced because\n   partial AES blocks are encrypted.
      \ The worst case is a record size of\n   18 octets, for which at most 74 terabytes
      of plaintext can be\n   encrypted, of which at least half is padding.\n"
    title: 4.4.  Data Encryption Limits
  - contents:
    - "4.5.  Content Integrity\n   This mechanism only provides content-origin authentication.
      \ The\n   authentication tag only ensures that an entity with access to the\n
      \  content-encryption key produced the encrypted data.\n   Any entity with the
      content-encryption key can, therefore, produce\n   content that will be accepted
      as valid.  This includes all recipients\n   of the same HTTP message.\n   Furthermore,
      any entity that is able to modify both the Content-\n   Encoding header field
      and the HTTP message body can replace the\n   contents.  Without the content-encryption
      key or the input-keying\n   material, modifications to, or replacement of, parts
      of a payload\n   body are not possible.\n"
    title: 4.5.  Content Integrity
  - contents:
    - "4.6.  Leaking Information in Header Fields\n   Because only the payload body
      is encrypted, information exposed in\n   header fields is visible to anyone
      who can read the HTTP message.\n   This could expose side-channel information.\n
      \  For example, the Content-Type header field can leak information about\n   the
      payload body.\n   There are a number of strategies available to mitigate this
      threat,\n   depending upon the application's threat model and the users'\n   tolerance
      for leaked information:\n   1.  Determine that it is not an issue.  For example,
      if it is\n       expected that all content stored will be \"application/json\",
      or\n       another very common media type, exposing the Content-Type header\n
      \      field could be an acceptable risk.\n   2.  If it is considered sensitive
      information and it is possible to\n       determine it through other means (e.g.,
      out of band, using hints\n       in other representations, etc.), omit the relevant
      headers, and/\n       or normalize them.  In the case of Content-Type, this
      could be\n       accomplished by always sending Content-Type:\n       application/octet-stream
      (the most generic media type), or no\n       Content-Type at all.\n   3.  If
      it is considered sensitive information and it is not possible\n       to convey
      it elsewhere, encapsulate the HTTP message using the\n       application/http
      media type (see Section 8.3.2 of [RFC7230]),\n       encrypting that as the
      payload of the \"outer\" message.\n"
    title: 4.6.  Leaking Information in Header Fields
  - contents:
    - "4.7.  Poisoning Storage\n   This mechanism only offers data-origin authentication;
      it does not\n   perform authentication or authorization of the message creator,
      which\n   could still need to be performed (e.g., by HTTP authentication\n   [RFC7235]).\n
      \  This is especially relevant when an HTTP PUT request is accepted by a\n   server
      without decrypting the payload; if the request is\n   unauthenticated, it becomes
      possible for a third party to deny\n   service and/or poison the store.\n"
    title: 4.7.  Poisoning Storage
  - contents:
    - "4.8.  Sizing and Timing Attacks\n   Applications using this mechanism need
      to be aware that the size of\n   encrypted messages, as well as their timing,
      HTTP methods, URIs and\n   so on, may leak sensitive information.  See, for
      example, [NETFLIX]\n   or [CLINIC].\n   This risk can be mitigated through the
      use of the padding that this\n   mechanism provides.  Alternatively, splitting
      up content into\n   segments and storing them separately might reduce exposure.
      \ HTTP/2\n   [RFC7540] combined with TLS [RFC5246] might be used to hide the
      size\n   of individual messages.\n   Developing a padding strategy is difficult.
      \ A good padding strategy\n   can depend on context.  Common strategies include
      padding to a small\n   set of fixed lengths, padding to multiples of a value,
      or padding to\n   powers of 2.  Even a good strategy can still cause size information\n
      \  to leak if processing activity of a recipient can be observed.  This\n   is
      especially true if the trailing records of a message contain only\n   padding.
      \ Distributing non-padding data across records is recommended\n   to avoid leaking
      size information.\n"
    title: 4.8.  Sizing and Timing Attacks
  title: 4.  Security Considerations
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  The \"aes128gcm\" HTTP Content Coding\n   This memo registers the \"aes128gcm\"
      HTTP content coding in the \"HTTP\n   Content Coding Registry\", as detailed
      in Section 2.\n   o  Name: aes128gcm\n   o  Description: AES-GCM encryption
      with a 128-bit content-encryption\n      key\n   o  Reference: this specification\n"
    title: 5.1.  The "aes128gcm" HTTP Content Coding
  title: 5.  IANA Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [FIPS180-4]\n              National Institute
      of Standards and Technology, \"Secure\n              Hash Standard (SHS)\",
      FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS180-4, August 2015,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/\n
      \             NIST.FIPS.180-4.pdf>.\n   [RFC2119]  Bradner, S., \"Key words
      for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC
      2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
      STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC5116]  McGrew, D., \"An Interface and Algorithms for Authenticated\n
      \             Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5116>.\n   [RFC5869]  Krawczyk,
      H. and P. Eronen, \"HMAC-based Extract-and-Expand\n              Key Derivation
      Function (HKDF)\", RFC 5869,\n              DOI 10.17487/RFC5869, May 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5869>.\n   [RFC7230]  Fielding,
      R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):
      Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <http://www.rfc-editor.org/info/rfc8174>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [AEBounds] Luykx, A. and K. Paterson, \"Limits
      on Authenticated\n              Encryption Use in TLS\", March 2016,\n              <http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf>.\n
      \  [CLINIC]   Miller, B., Huang, L., Joseph, A., and J. Tygar, \"I Know\n              Why
      You Went to the Clinic: Risks and Realization of HTTPS\n              Traffic
      Analysis\", DOI 10.1007/978-3-319-08506-7_8, March\n              2014, <https://arxiv.org/abs/1403.0297>.\n
      \  [NETFLIX]  Reed, A. and M. Kranch, \"Identifying HTTPS-Protected\n              Netflix
      Videos in Real-Time\", Proceedings of the Seventh\n              ACM on Conference
      on Data and Application Security and\n              Privacy CODASPY '17, DOI
      10.1145/3029806.3029821, 2017.\n   [RFC4648]  Josefsson, S., \"The Base16, Base32,
      and Base64 Data\n              Encodings\", RFC 4648, DOI 10.17487/RFC4648,
      October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC4880]
      \ Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and R.\n              Thayer,
      \"OpenPGP Message Format\", RFC 4880,\n              DOI 10.17487/RFC4880, November
      2007,\n              <http://www.rfc-editor.org/info/rfc4880>.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5652]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC
      5652, DOI 10.17487/RFC5652, September 2009,\n              <http://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n              \"Hypertext
      Transfer Protocol (HTTP/1.1): Range Requests\",\n              RFC 7233, DOI
      10.17487/RFC7233, June 2014,\n              <http://www.rfc-editor.org/info/rfc7233>.\n
      \  [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI
      10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n
      \  [RFC7516]  Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n
      \             RFC 7516, DOI 10.17487/RFC7516, May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n
      \  [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n   [XMLENC]
      \  Eastlake, D., Reagle, J., Hirsch, F., and T. Roessler,\n              \"XML
      Encryption Syntax and Processing Version 1.1\", World\n              Wide Web
      Consortium Recommendation\n              REC-xmlenc-core1-20130411, April 2013,\n
      \             <http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  JWE Mapping\n   The \"aes128gcm\" content coding can be considered
    as a sequence of\n   JSON Web Encryption (JWE) [RFC7516] objects, each corresponding
    to a\n   single fixed-size record that includes trailing padding.  The\n   following
    transformations are applied to a JWE object that might be\n   expressed using
    the JWE Compact Serialization:\n   o  The JWE Protected Header is fixed to the
    value { \"alg\": \"dir\",\n      \"enc\": \"A128GCM\" }, describing direct encryption
    using AES-GCM\n      with a 128-bit content-encryption key.  This header is not\n
    \     transmitted, it is instead implied by the value of the Content-\n      Encoding
    header field.\n   o  The JWE Encrypted Key is empty, as stipulated by the direct\n
    \     encryption algorithm.\n   o  The JWE Initialization Vector (\"iv\") for
    each record is set to the\n      exclusive-or of the 96-bit record sequence number,
    starting at\n      zero, and a value derived from the input-keying material (see\n
    \     Section 2.3).  This value is also not transmitted.\n   o  The final value
    is the concatenated header, JWE Ciphertext, and\n      JWE Authentication Tag,
    all expressed without base64url encoding.\n      The \".\" separator is omitted,
    since the length of these fields is\n      known.\n   Thus, the example in Section
    3.1 can be rendered using the JWE\n   Compact Serialization as:\n   eyAiYWxnIjogImRpciIsICJlbmMiOiAiQTEyOEdDTSIgfQ..Bcs8gkIRKLI8GeI8.\n
    \  -NAVub2qFgBEuQKRapoZuw.4jGQi9rcwQHU8P6XLxOGOA\n   Where the first line represents
    the fixed JWE Protected Header, an\n   empty JWE Encrypted Key, and the algorithmically
    determined JWE\n   Initialization Vector.  The second line contains the encoded
    body,\n   split into JWE Ciphertext and JWE Authentication Tag.\n"
  title: Appendix A.  JWE Mapping
- contents:
  - "Acknowledgements\n   Mark Nottingham was an original author of this document.\n
    \  The following people provided valuable input: Richard Barnes, David\n   Benjamin,
    Peter Beverloo, JR Conlin, Mike Jones, Stephen Farrell,\n   Adam Langley, James
    Manger, John Mattsson, Julian Reschke, Eric\n   Rescorla, Jim Schaad, and Magnus
    Westerlund.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Martin Thomson\n   Mozilla\n   Email: martin.thomson@gmail.com\n"
  title: Author's Address
