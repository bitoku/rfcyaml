- title: __initial_text__
  contents:
  - '                          PPP Deflate Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  The PPP Compression Control Protocol [2] provides a method to\n   negotiate\
    \ and utilize compression protocols over PPP encapsulated\n   links.\n   This\
    \ document describes the use of the PPP Deflate compression\n   protocol for compressing\
    \ PPP encapsulated packets.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ......................................\
    \    2\n        1.1       Licensing ...................................    2\n\
    \     2.     PPP Deflate Packets ...............................    3\n      \
    \  2.1       Packet Format ...............................    6\n     3.     Configuration\
    \ Option Format .......................    8\n     SECURITY CONSIDERATIONS ..................................\
    \    9\n     REFERENCES ...............................................    9\n\
    \     ACKNOWLEDGEMENTS .........................................    9\n     CHAIR'S\
    \ ADDRESS ..........................................   10\n     AUTHOR'S ADDRESS\
    \ .........................................   10\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: The 'deflate' compression format[3], as used by the PKZIP and gzip
  contents:
  - 'The ''deflate'' compression format[3], as used by the PKZIP and gzip

    '
- title: compressors and as embodied in the freely and widely distributed
  contents:
  - 'compressors and as embodied in the freely and widely distributed

    '
- title: 'zlib[4] library source code, has the following features:'
  contents:
  - "zlib[4] library source code, has the following features:\n       - an apparently\
    \ unencumbered encoding and compression\n         algorithm, with an open and\
    \ publically-available\n         specification.\n       - low-overhead escape\
    \ mechanism for incompressible data.  The\n         PPP Deflate specification\
    \ offers options to reduce that\n         overhead further.\n       - heavily\
    \ used for many years in networks, on modem and other\n         point-to-point\
    \ links to transfer files for personal computers\n         and workstations.\n\
    \       - easily achieves 2:1 compression on the Calgary corpus[5]\n         using\
    \ less than 64KBytes of memory on both sender and\n         receive.\n"
- title: 1.1.  Licensing
  contents:
  - "1.1.  Licensing\n   The zlib source is widely and freely available, subject to\
    \ the\n   following copyright:\n      (C) 1995 Jean-Loup Gailly and Mark Adler\n\
    \       This software is provided 'as-is', without any express or implied\n  \
    \     warranty.  In no event will the authors be held liable for any\n       damages\
    \ arising from the use of this software.\n       Permission is granted to anyone\
    \ to use this software for any\n       purpose, including commercial applications,\
    \ and to alter it and\n       redistribute it freely, subject to the following\
    \ restrictions:\n       1. The origin of this software must not be misrepresented;\
    \ you\n          must not claim that you wrote the original software. If you\n\
    \          use this software in a product, an acknowledgment in the\n        \
    \  product documentation would be appreciated but is not\n          required.\n\
    \       2. Altered source versions must be plainly marked as such, and\n     \
    \     must not be misrepresented as being the original software.\n       3. This\
    \ notice may not be removed or altered from any source\n          distribution.\n\
    \       Jean-Loup Gailly        Mark Adler\n       gzip@prep.ai.mit.edu    madler@alumni.caltech.edu\n\
    \      If you use the zlib library in a product, we would appreciate\n      *not*\
    \ receiving lengthy legal documents to sign. The sources are\n      provided for\
    \ free but without warranty of any kind.  The library\n      has been entirely\
    \ written by Jean-Loup Gailly and Mark Adler; it\n      does not include third-party\
    \ code.\n   The deflate format and compression algorithm are based on Lempel-Ziv\n\
    \   LZ77 compression; extensive research has been done by the GNU Project\n  \
    \ and the Portable Network Graphics working group supporting its patent\n   free\
    \ status.\n"
- title: 2.  PPP Deflate Packets
  contents:
  - "2.  PPP Deflate Packets\n   Before any PPP Deflate packets may be communicated,\
    \ PPP must reach\n   the Network-Layer Protocol phase, and the CCP Control Protocol\
    \ must\n   reach the Opened state.\n   Exactly one PPP Deflate datagram is encapsulated\
    \ in the PPP\n   Information field, where the PPP Protocol field contains 0xFD\
    \ or\n   0xFB.  0xFD is used when the PPP multilink protocol is not used or\n\
    \   \"above\" multilink.  0xFB is used \"below\" multilink, to compress\n   independently\
    \ on individual links of a multilink bundle.\n   The maximum length of the PPP\
    \ Deflate datagram transmitted over a PPP\n   link is the same as the maximum\
    \ length of the Information field of a\n   PPP encapsulated packet.\n   Only packets\
    \ with PPP Protocol numbers in the range 0x0000 to 0x3FFF\n   and neither 0xFD\
    \ nor 0xFB are compressed.  Other PPP packets are\n   always sent uncompressed.\
    \  Control packets are infrequent and should\n   not be compressed for robustness.\n\
    \   Padding\n      PPP Deflate packets require the previous negotiation of the\
    \ Self-\n      Describing-Padding Configuration Option [6] if padding is added\
    \ to\n      packets.  If no padding is added, than Self-Describing-Padding is\n\
    \      not required.\n   Reliability and Sequencing\n      PPP Deflate requires\
    \ the packets to be delivered in sequence.  It\n      relies on Reset-Request\
    \ and Reset-Ack LCP packets or on\n      renegotiation of the Compression Control\
    \ Protocol [2] to indicate\n      loss of synchronization between the transmitter\
    \ and receiver.  The\n      LCP FCS detects corrupted packets and the normal mechanisms\n\
    \      discard them.  Missing or out of order packets are detected by the\n  \
    \    sequence number in each packet.  The packet sequence number ought\n     \
    \ to be checked before decoding the packet.\n      Instead of transmitting a Reset-Request\
    \ packet when detecting a\n      sequence error, the receiver MAY momentarily\
    \ force CCP to drop out\n      of the Opened state by transmitting a new CCP Configure-Request.\n\
    \      This method is more expensive than using Reset-Requests.\n      When the\
    \ receiver first encounters an unexpected sequence number\n      it SHOULD send\
    \ a Reset-Request LCP packet as defined in the\n      Compression Control Protocol.\
    \  When the transmitter sends the\n      Reset-Ack or when the receiver receives\
    \ a Reset-ACK, they must\n      reset the sequence number to zero, clear the compression\n\
    \      dictionary, and resume sending and receiving compressed packets.\n    \
    \  The receiver MUST discard all compressed packets after detecting\n      an\
    \ error and until it receives a Reset-Ack.  This strategy can be\n      thought\
    \ of as abandoning the transmission of one \"file\" and\n      starting the transmission\
    \ of a new \"file.\"\n      The transmitter must clear its compression history\
    \ and respond\n      with a Reset-Ack each time it receives a Reset-Request, because\
    \ it\n      cannot know if previous Reset-Acks reached the receiver.  The\n  \
    \    receiver need not do anything to its history when it receives a\n      Reset-Ack,\
    \ because the transmitter will simply not refer to any\n      prior history ('deflate'\
    \ is a sliding-window compressor).\n      When the link is busy, one decompression\
    \ error is usually followed\n      by several more before the Reset-Ack can be\
    \ received.  It is\n      undesirable to transmit Reset-Requests more frequently\
    \ than the\n      round-trip-time of the link, because redundant Reset-Requests\n\
    \      cause unnecessary compression dictionary clearing.  The receiver\n    \
    \  MAY transmit an additional Reset-Request each time it receives a\n      compressed\
    \ or uncompressed packet until it finally receives a\n      Reset-Ack, but the\
    \ receiver ought not transmit another Reset-\n      Request until the Reset-Ack\
    \ for the previous one is late.  The\n      receiver MUST transmit enough Reset-Request\
    \ packets to ensure that\n      the transmitter receives at least one.  For example,\
    \ the receiver\n      might choose to not transmit another Reset-Request until\
    \ after one\n      second (or, of course, a Reset-Ack has been received and\n\
    \      decompression resumed).\n   Data Expansion\n      'Deflate', as used in\
    \ this standard, expands incompressible data\n      by approximately 14-18 bytes\
    \ (8 bytes worst-case at the 'deflate'\n      level, two further bytes for the\
    \ 'deflate' end-of-block and the\n      zero-length synchronization block header,\
    \ two bytes of sequence\n      number, and two bytes to account for adding the\
    \ PPP Protocol Field\n      to the transmitted data unit).\n      The BSD Compress\
    \ draft proposal[7] describes an escape mechanism\n      for incompressible data\
    \ that trades off a layering violation for\n      the irritating complications\
    \ of variable and potentially\n      unpredictable effective MRU lengths.  That\
    \ direct escape mechanism\n      (and much of the text of its description) is\
    \ used here as well.\n      If an incompressible data packet does not fit within\
    \ the MRU of\n      the link, the packet MUST be sent in its original form without\
    \ CCP\n      encapsulation; PPP packets with significant data expansion that do\n\
    \      not exceed the MRU of the link SHOULD be sent in their original\n     \
    \ form without CCP encapsulation.  In both of these cases, the\n      transmitter\
    \ must increment the sequence number, as future\n      encapsulated packets will\
    \ depend on the correct reception of some\n      number of unencapsulated packets.\n\
    \      When a PPP packet is received with PPP Protocol numbers in the\n      range\
    \ 0x0000 to 0x3FFF, (except, of course, 0xFD and 0xFB) it is\n      assumed that\
    \ the packet would have caused expansion.  The packet\n      is locally added\
    \ to the compression history.  (Given the\n      definition of the 'deflate' format,\
    \ a convenient method of doing\n      this is to locally \"decompress\" a stored-block\
    \ header of the\n      appropriate length, followed by the actual data block;\
    \ or the data\n      can simply be appended to the receiver's history, depending\
    \ on\n      implementation details.)\n      Sending incompressible packets in\
    \ their native encapsulation\n      avoids maximum transmission unit complications.\
    \  If uncompressed\n      packets could be larger than their native form, then\
    \ it would be\n      necessary for the upper layers of an implementation to treat\
    \ the\n      PPP link as if it had a smaller MTU, to ensure that compressed\n\
    \      incompressible packets are never larger than the negotiated PPP\n     \
    \ MTU.\n      Using native encapsulation for incompressible packets complicates\n\
    \      the implementation.  The transmitter and the receiver must start\n    \
    \  putting information into the compression dictionary starting with\n      the\
    \ same packets, without relying upon seeing a compressed packet\n      for synchronization.\
    \  The first few packets after clearing the\n      dictionary are usually incompressible,\
    \ and so are likely to sent\n      in their native encapsulation, just like packets\
    \ before\n      compression is turned on.  If CCP or LCP packets are handled\n\
    \      separately from Network-Layer packets (e.g. a \"daemon\" for control\n\
    \      packets and \"kernel code\" for data packets), care must be taken to\n\
    \      ensure that the transmitter synchronizes clearing the dictionary\n    \
    \  with the transmission of the configure-ACK or Reset-Ack that\n      starts\
    \ compression, and the receiver must similarly ensure that\n      its dictionary\
    \ is cleared before it processes the next packet.\n"
- title: 2.1.  Packet Format
  contents:
  - "2.1.  Packet Format\n   A summary of the PPP Deflate packet format is shown below.\n\
    \   The fields are transmitted from left to right.\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         PPP Protocol          |           Sequence            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Data ...\n   +-+-+-+-+-+-+-+-+\n   PPP Protocol\n      The PPP Protocol\
    \ field is described in the Point-to-Point Protocol\n      Encapsulation [1].\n\
    \      When the PPP Deflate compression protocol is successfully\n      negotiated\
    \ by the PPP Compression Control Protocol [2], the value\n      of the protocol\
    \ field is 0xFD or 0xFB.  This value MAY be\n      compressed when Protocol-Field-Compression\
    \ is negotiated.\n   Sequence\n      The sequence number is sent most significant\
    \ octet first.  It\n      starts at 0 when the dictionary is cleared, and is incremented\
    \ by\n      1 for each packet, including uncompressed packets.  The sequence\n\
    \      number after 65535 is zero.  In other words, the sequence number\n    \
    \  \"wraps\" in the usual way.\n      The sequence number ensures that lost or\
    \ out of order packets do\n      not cause the compression databases of the peers\
    \ to become\n      unsynchronized.  When an unexpected sequence number is\n  \
    \    encountered, the dictionaries must be resynchronized with a CCP\n      Reset-Request\
    \ or Configure-Request.  The packet sequence number\n      can be checked before\
    \ a compressed packet is decoded.\n   Data\n      The compressed PPP encapsulated\
    \ packet, consisting of the Protocol\n      and Data fields of the original, uncompressed\
    \ packet follows.\n      The Protocol field compression MUST be applied to the\
    \ protocol\n      field in the original packet before the sequence number is\n\
    \      computed or the entire packet is compressed, regardless of whether\n  \
    \    the PPP protocol field compression has been negotiated.  Thus, if\n     \
    \ the original protocol number was less than 0x100, it must be\n      compressed\
    \ to a single byte.\n      The basic format of the compressed data is precisely\
    \ described by\n      the 'Deflate' Compressed Data Format Specification[3]. \
    \ Each\n      transmitted packet must begin at a 'deflate' block boundary, to\n\
    \      ensure synchronization when incompressible data resets the\n      transmitter's\
    \ state; to ensure this, each transmitted packet must\n      be terminated with\
    \ a zero-length 'deflate' non-compressed block\n      (BTYPE of 00).  This means\
    \ that the last four bytes of the\n      compressed format must be 0x00 0x00 0xFF\
    \ 0xFF.  These bytes MUST\n      be removed before transmission; the receiver\
    \ can reinsert them if\n      required by the implementation.\n"
- title: 3.  Configuration Option Format
  contents:
  - "3.  Configuration Option Format\n   Description\n      The CCP PPP Deflate Configuration\
    \ Option negotiates the use of PPP\n      Deflate on the link.  By default or\
    \ ultimate disagreement, no\n      compression is used.\n   A summary of the PPP\
    \ Deflate Configuration Option format is shown\n   below.  The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |Window | Method|    MBZ    |Chk|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      26 for PPP Deflate.\n   Length\n      3\n   Window\n      Represents\
    \ the maximum window size the decompressor is willing to\n      allocate; expressed\
    \ as the base-2 logarithm of the LZ77 window\n      size, minus 8.  'Deflate'\
    \ compliant decompressors must be willing\n      to accept the maximum 32KB window\
    \ size, represented by a value of\n      7.  A 'deflate' compliant compressor\
    \ is at liberty to use a\n      reduced window size, so a PPP Deflate compressor\
    \ MUST either honor\n      the restriction requested or reject the option.\n \
    \  Method\n      Must be the binary number 1000.  Represents the 'zlib' Compression\n\
    \      Method identifier of '8' for 'deflate' compression with up to 32K\n   \
    \   window size.\n   MBZ\n      Must be all 0 bits.\n   Chk\n      Must be 00\
    \ to specify sequence number check method.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD\
    \ 51,\n         RFC 1661, July 1994.\n   [2]   Rand, D., \"The PPP Compression\
    \ Control Protocol (CCP)\",\n         RFC 1962, June 1996.\n   [3]   Deutsch,\
    \ L.P., \"'Deflate' Compressed Data Format\n         Specification\", draft available\
    \ in\n         ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc.\n   [4]   Gailly,\
    \ J.-L., \"Zlib 0.95 beta\".\n   [5]   Bell, T.C., Cleary, G. G. and Witten, I.H.,\
    \ \"Text Compression\",\n         Prentice_Hall, Englewood Cliffs NJ, 1990.  The\
    \ compression\n         corpus itself can be found in ftp.uu.net:/pub/archiving/zip/.\n\
    \   [6]   Simpson, W., \"PPP LCP Extensions\", RFC 1570, January 1994.\n   [7]\
    \   Schryver, V., \"PPP BSD Compression Protocol\", RFC 1977,\n         August\
    \ 1996.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   William Simpson provided the very valuable idea of not using\
    \ any\n   additional header bytes for incompressible packets.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl Fox\n   Ascend Communications\n   3518 Riverside Drive, Suite 101\n \
    \  Columbus, Ohio 43221\n   EMail: karl@ascend.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   John\
    \ Woods\n   Proteon, Inc.\n   9 Technology Drive\n   Westborough MA 01581-1799\n\
    \   (508) 898-2800 ext. 2651\n   EMail: jfw@funhouse.com\n"
