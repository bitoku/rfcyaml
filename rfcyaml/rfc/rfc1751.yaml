- title: __initial_text__
  contents:
  - "              A Convention for Human-Readable 128-bit Keys\nStatus of this Memo\n\
    \   This memo provides information for the Internet community.  This memo\n  \
    \ does not specify an Internet standard of any kind.  Distribution of\n   the\
    \ memo is unlimited.\nIntroduction\n   The Internet community has begun to address\
    \ matters of security.\n   Recent standards, including version 2 of SNMP [GM93],\
    \ have explicit\n   requirements for an authentication mechanism.  These require\
    \ use of a\n   keyed message-digest algorithm, MD5 [Riv92], with a key size of\
    \ 128-\n   bits.  A 128-bit key, while sufficiently strong, is hard for most\n\
    \   people to read, remember, and type in.  This memo proposes a\n   convention\
    \ for use with Internet applications & protocols using 128-\n   bit cryptographic\
    \ keys.\nA Solution Already Exists\n   The S/Key(tm) one-time password system\
    \ [Hal94] uses MD4 (and now MD5,\n   as well) to compute one-time passwords. \
    \ It takes the 128-bit result\n   of MD4 and collapses it to a 64-bit result.\
    \  Despite the size\n   reduction, 64-bit one-time passwords are still difficult\
    \ for ordinary\n   people to remember and enter.  The authors of S/Key devised\
    \ a system\n   to make the 64-bit one-time password easy for people to enter.\n\
    \   Their idea was to transform the password into a string of small\n   English\
    \ words.  English words are significantly easier for people to\n   both remember\
    \ and type.  The authors of S/Key started with a\n   dictionary of 2048 English\
    \ words, ranging in length from one to four\n   characters.  The space covered\
    \ by a 64-bit key (2^64) could be\n   covered by six words from this dictionary\
    \ (2^66) with room remaining\n   for parity.  For example, an S/Key one-time password\
    \ of hex value:\n                            EB33 F77E E73D 4053\n   would become\
    \ the following six English words:\n                       TIDE ITCH SLOW REIN\
    \ RULE MOT\n   Because of the need for interoperability, it is undesirable to\
    \ have\n   different dictionaries for different languages.  Also, the current\n\
    \   dictionary only uses characters from the invariant portion of ISO-\n   646.\
    \  Finally, there is an installed base of users and applications\n   with this\
    \ dictionary.\nThe Proposal\n   The code (see Appendix A) which S/Key uses to\
    \ convert 64-bit numbers\n   to six English words contains two primitives which\
    \ perform\n   conversions either way.  The primitive btoe(char *engout,char *c)\n\
    \   takes a 64-bit quantity referenced by c and places English words in\n   the\
    \ string referenced by engout.  The primitive etob(char *out,char\n   *e) performs\
    \ the opposite with an input string of English words\n   referenced by e, and\
    \ by placing the 64-bit result into the buffer\n   referenced by out.\n   The\
    \ aforementioned primitives can be applied to both halves of a\n   128-bit key,\
    \ or both halves of a string of twelve English words.  Two\n   new primitives\
    \ (see Appendix B), key2eng(char *engout,char *key) and\n   eng2key(char *keyout,char\
    \ *eng) serve as wrappers which call the\n   S/Key primitives twice, once for\
    \ each half of the 128-bit key or\n   string of twelve words.\n   For example,\
    \ the 128-bit key of:\n                  CCAC 2AED 5910 56BE 4F90 FD44 1C53 4766\n\
    \   would become\n         RASH BUSH MILK LOOK BAD BRIM AVID GAFF BAIT ROT POD\
    \ LOVE\n   Likewise, a user should be able to type in\n          TROD MUTE TAIL\
    \ WARM CHAR KONG HAAG CITY BORE O TEAL AWL\n   as a key, and the machine should\
    \ make the translation to:\n                  EFF8 1F9B FBC6 5350 920C DD74 16DE\
    \ 8009\n   If this proposal is to work, it is critical that the dictionary of\n\
    \   English words does not change with different implementations.  A\n   freely\
    \ redistributable reference implementation is given in\n   Appendices A and B.\n\
    Security Considerations\n   This document recommends a method of representing\
    \ 128-bit keys using\n   strings of English words.  Since the strings of English\
    \ words are\n   easy to remember, people may potentially construct easy-to-guess\n\
    \   strings of English words.  With easy-to-guess strings comes the\n   possibility\
    \ of a sentential equivalent of a dictionary attack.  In\n   order to maximize\
    \ the strength of any authentication mechanism that\n   uses 128-bit keys, the\
    \ keys must be sufficiently obscure.  In\n   particular, people should avoid the\
    \ temptation to devise sentences.\nAcknowledgements\n   S/Key is a registered\
    \ trademark of Bell Communications Research.\n   Thanks to Randall Atkinson for\
    \ the bulk of the security\n   considerations section, and for general advice.\
    \  Thanks to Phil Karn\n   and Neil Haller for producing the S/Key one-time password\
    \ system,\n   which inspired this document.\nReferences\n   [GM93]  Galvin, J.\
    \ and K. McCloghrie, \"Security Protocols for version\n   2 of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1446,\n   Trusted Information Systems, Hughes\
    \ LAN Systems, April 1993.\n   [Hal94]  Haller, N., \"The S/Key(tm) One-Time Password\
    \ System\",\n   Proceedings of the Symposium on Network & Distributed Systems\n\
    \   Security, Internet Society, San Diego, February 1994.\n   [Riv92]  Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n   MIT Laboratory for Computer\
    \ Science and RSA Data Security, Inc.,\n   April 1992.\nAuthor's Address\n   Daniel\
    \ L. McDonald\n   United States Naval Research Laboratory\n   Code 5544\n   4555\
    \ Overlook Ave. SW\n   Washington, DC 20375\n   Phone:  (202) 404-7122\n   EMail:\
    \  danmcd@itd.nrl.navy.mil\nAppendix A - Source for S/Key 8-bytes to/from Words\
    \ Routines (put.c)\n/* This code originally appeared in the source for S/Key(TM),\n\
    \ * available in the directory\n *   ftp://thumper.bellcore.com/pub/nmh\n *\n\
    \ * It has been modified only to remove explicit S/Key(TM) references.\n */\n\
    #include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <ctype.h>\n\
    #ifdef __STDC__\n#define __ARGS(x) x\n#else\n#define __ARGS(x) ()\n#endif\nstatic\
    \ unsigned long extract __ARGS((char *s,int start,int length));\nstatic void standard\
    \ __ARGS((char *word));\nstatic void insert __ARGS((char *s, int x, int start,\
    \ int length));\nstatic int wsrch __ARGS((char *w,int low,int high));\n/* Dictionary\
    \ for integer-word translations */\nchar Wp[2048][4] = { \"A\", \"ABE\", \"ACE\"\
    , \"ACT\", \"AD\", \"ADA\", \"ADD\",\n\"AGO\", \"AID\", \"AIM\", \"AIR\", \"ALL\"\
    , \"ALP\", \"AM\", \"AMY\", \"AN\", \"ANA\",\n\"AND\", \"ANN\", \"ANT\", \"ANY\"\
    , \"APE\", \"APS\", \"APT\", \"ARC\", \"ARE\", \"ARK\",\n\"ARM\", \"ART\", \"\
    AS\", \"ASH\", \"ASK\", \"AT\", \"ATE\", \"AUG\", \"AUK\", \"AVE\",\n\"AWE\",\
    \ \"AWK\", \"AWL\", \"AWN\", \"AX\", \"AYE\", \"BAD\", \"BAG\", \"BAH\", \"BAM\"\
    ,\n\"BAN\", \"BAR\", \"BAT\", \"BAY\", \"BE\", \"BED\", \"BEE\", \"BEG\", \"BEN\"\
    , \"BET\",\n\"BEY\", \"BIB\", \"BID\", \"BIG\", \"BIN\", \"BIT\", \"BOB\", \"\
    BOG\", \"BON\", \"BOO\",\n\"BOP\", \"BOW\", \"BOY\", \"BUB\", \"BUD\", \"BUG\"\
    , \"BUM\", \"BUN\", \"BUS\", \"BUT\",\n\"BUY\", \"BY\", \"BYE\", \"CAB\", \"CAL\"\
    , \"CAM\", \"CAN\", \"CAP\", \"CAR\", \"CAT\",\n\"CAW\", \"COD\", \"COG\", \"\
    COL\", \"CON\", \"COO\", \"COP\", \"COT\", \"COW\", \"COY\",\n\"CRY\", \"CUB\"\
    , \"CUE\", \"CUP\", \"CUR\", \"CUT\", \"DAB\", \"DAD\", \"DAM\", \"DAN\",\n\"\
    DAR\", \"DAY\", \"DEE\", \"DEL\", \"DEN\", \"DES\", \"DEW\", \"DID\", \"DIE\"\
    , \"DIG\",\n\"DIN\", \"DIP\", \"DO\", \"DOE\", \"DOG\", \"DON\", \"DOT\", \"DOW\"\
    , \"DRY\", \"DUB\",\n\"DUD\", \"DUE\", \"DUG\", \"DUN\", \"EAR\", \"EAT\", \"\
    ED\", \"EEL\", \"EGG\", \"EGO\",\n\"ELI\", \"ELK\", \"ELM\", \"ELY\", \"EM\",\
    \ \"END\", \"EST\", \"ETC\", \"EVA\", \"EVE\",\n\"EWE\", \"EYE\", \"FAD\", \"\
    FAN\", \"FAR\", \"FAT\", \"FAY\", \"FED\", \"FEE\", \"FEW\",\n\"FIB\", \"FIG\"\
    , \"FIN\", \"FIR\", \"FIT\", \"FLO\", \"FLY\", \"FOE\", \"FOG\", \"FOR\",\n\"\
    FRY\", \"FUM\", \"FUN\", \"FUR\", \"GAB\", \"GAD\", \"GAG\", \"GAL\", \"GAM\"\
    , \"GAP\",\n\"GAS\", \"GAY\", \"GEE\", \"GEL\", \"GEM\", \"GET\", \"GIG\", \"\
    GIL\", \"GIN\", \"GO\",\n\"GOT\", \"GUM\", \"GUN\", \"GUS\", \"GUT\", \"GUY\"\
    , \"GYM\", \"GYP\", \"HA\", \"HAD\",\n\"HAL\", \"HAM\", \"HAN\", \"HAP\", \"HAS\"\
    , \"HAT\", \"HAW\", \"HAY\", \"HE\", \"HEM\",\n\"HEN\", \"HER\", \"HEW\", \"HEY\"\
    , \"HI\", \"HID\", \"HIM\", \"HIP\", \"HIS\", \"HIT\",\n\"HO\", \"HOB\", \"HOC\"\
    , \"HOE\", \"HOG\", \"HOP\", \"HOT\", \"HOW\", \"HUB\", \"HUE\",\n\"HUG\", \"\
    HUH\", \"HUM\", \"HUT\", \"I\", \"ICY\", \"IDA\", \"IF\", \"IKE\", \"ILL\",\n\"\
    INK\", \"INN\", \"IO\", \"ION\", \"IQ\", \"IRA\", \"IRE\", \"IRK\", \"IS\", \"\
    IT\", \"ITS\",\n\"IVY\", \"JAB\", \"JAG\", \"JAM\", \"JAN\", \"JAR\", \"JAW\"\
    , \"JAY\", \"JET\", \"JIG\",\n\"JIM\", \"JO\", \"JOB\", \"JOE\", \"JOG\", \"JOT\"\
    , \"JOY\", \"JUG\", \"JUT\", \"KAY\",\n\"KEG\", \"KEN\", \"KEY\", \"KID\", \"\
    KIM\", \"KIN\", \"KIT\", \"LA\", \"LAB\", \"LAC\",\n\"LAD\", \"LAG\", \"LAM\"\
    , \"LAP\", \"LAW\", \"LAY\", \"LEA\", \"LED\", \"LEE\", \"LEG\",\n\"LEN\", \"\
    LEO\", \"LET\", \"LEW\", \"LID\", \"LIE\", \"LIN\", \"LIP\", \"LIT\", \"LO\",\n\
    \"LOB\", \"LOG\", \"LOP\", \"LOS\", \"LOT\", \"LOU\", \"LOW\", \"LOY\", \"LUG\"\
    , \"LYE\",\n\"MA\", \"MAC\", \"MAD\", \"MAE\", \"MAN\", \"MAO\", \"MAP\", \"MAT\"\
    , \"MAW\", \"MAY\",\n\"ME\", \"MEG\", \"MEL\", \"MEN\", \"MET\", \"MEW\", \"MID\"\
    , \"MIN\", \"MIT\", \"MOB\",\n\"MOD\", \"MOE\", \"MOO\", \"MOP\", \"MOS\", \"\
    MOT\", \"MOW\", \"MUD\", \"MUG\", \"MUM\",\n\"MY\", \"NAB\", \"NAG\", \"NAN\"\
    , \"NAP\", \"NAT\", \"NAY\", \"NE\", \"NED\", \"NEE\",\n\"NET\", \"NEW\", \"NIB\"\
    , \"NIL\", \"NIP\", \"NIT\", \"NO\", \"NOB\", \"NOD\", \"NON\",\n\"NOR\", \"NOT\"\
    , \"NOV\", \"NOW\", \"NU\", \"NUN\", \"NUT\", \"O\", \"OAF\", \"OAK\",\n\"OAR\"\
    , \"OAT\", \"ODD\", \"ODE\", \"OF\", \"OFF\", \"OFT\", \"OH\", \"OIL\", \"OK\"\
    ,\n\"OLD\", \"ON\", \"ONE\", \"OR\", \"ORB\", \"ORE\", \"ORR\", \"OS\", \"OTT\"\
    , \"OUR\",\n\"OUT\", \"OVA\", \"OW\", \"OWE\", \"OWL\", \"OWN\", \"OX\", \"PA\"\
    , \"PAD\", \"PAL\",\n\"PAM\", \"PAN\", \"PAP\", \"PAR\", \"PAT\", \"PAW\", \"\
    PAY\", \"PEA\", \"PEG\", \"PEN\",\n\"PEP\", \"PER\", \"PET\", \"PEW\", \"PHI\"\
    , \"PI\", \"PIE\", \"PIN\", \"PIT\", \"PLY\",\n\"PO\", \"POD\", \"POE\", \"POP\"\
    , \"POT\", \"POW\", \"PRO\", \"PRY\", \"PUB\", \"PUG\",\n\"PUN\", \"PUP\", \"\
    PUT\", \"QUO\", \"RAG\", \"RAM\", \"RAN\", \"RAP\", \"RAT\", \"RAW\",\n\"RAY\"\
    , \"REB\", \"RED\", \"REP\", \"RET\", \"RIB\", \"RID\", \"RIG\", \"RIM\", \"RIO\"\
    ,\n\"RIP\", \"ROB\", \"ROD\", \"ROE\", \"RON\", \"ROT\", \"ROW\", \"ROY\", \"\
    RUB\", \"RUE\",\n\"RUG\", \"RUM\", \"RUN\", \"RYE\", \"SAC\", \"SAD\", \"SAG\"\
    , \"SAL\", \"SAM\", \"SAN\",\n\"SAP\", \"SAT\", \"SAW\", \"SAY\", \"SEA\", \"\
    SEC\", \"SEE\", \"SEN\", \"SET\", \"SEW\",\n\"SHE\", \"SHY\", \"SIN\", \"SIP\"\
    , \"SIR\", \"SIS\", \"SIT\", \"SKI\", \"SKY\", \"SLY\",\n\"SO\", \"SOB\", \"SOD\"\
    , \"SON\", \"SOP\", \"SOW\", \"SOY\", \"SPA\", \"SPY\", \"SUB\",\n\"SUD\", \"\
    SUE\", \"SUM\", \"SUN\", \"SUP\", \"TAB\", \"TAD\", \"TAG\", \"TAN\", \"TAP\"\
    ,\n\"TAR\", \"TEA\", \"TED\", \"TEE\", \"TEN\", \"THE\", \"THY\", \"TIC\", \"\
    TIE\", \"TIM\",\n\"TIN\", \"TIP\", \"TO\", \"TOE\", \"TOG\", \"TOM\", \"TON\"\
    , \"TOO\", \"TOP\", \"TOW\",\n\"TOY\", \"TRY\", \"TUB\", \"TUG\", \"TUM\", \"\
    TUN\", \"TWO\", \"UN\", \"UP\", \"US\",\n\"USE\", \"VAN\", \"VAT\", \"VET\", \"\
    VIE\", \"WAD\", \"WAG\", \"WAR\", \"WAS\", \"WAY\",\n\"WE\", \"WEB\", \"WED\"\
    , \"WEE\", \"WET\", \"WHO\", \"WHY\", \"WIN\", \"WIT\", \"WOK\",\n\"WON\", \"\
    WOO\", \"WOW\", \"WRY\", \"WU\", \"YAM\", \"YAP\", \"YAW\", \"YE\", \"YEA\",\n\
    \"YES\", \"YET\", \"YOU\", \"ABED\", \"ABEL\", \"ABET\", \"ABLE\", \"ABUT\", \"\
    ACHE\",\n\"ACID\", \"ACME\", \"ACRE\", \"ACTA\", \"ACTS\", \"ADAM\", \"ADDS\"\
    , \"ADEN\", \"AFAR\",\n\"AFRO\", \"AGEE\", \"AHEM\", \"AHOY\", \"AIDA\", \"AIDE\"\
    , \"AIDS\", \"AIRY\", \"AJAR\",\n\"AKIN\", \"ALAN\", \"ALEC\", \"ALGA\", \"ALIA\"\
    , \"ALLY\", \"ALMA\", \"ALOE\", \"ALSO\",\n\"ALTO\", \"ALUM\", \"ALVA\", \"AMEN\"\
    , \"AMES\", \"AMID\", \"AMMO\", \"AMOK\", \"AMOS\",\n\"AMRA\", \"ANDY\", \"ANEW\"\
    , \"ANNA\", \"ANNE\", \"ANTE\", \"ANTI\", \"AQUA\", \"ARAB\",\n\"ARCH\", \"AREA\"\
    , \"ARGO\", \"ARID\", \"ARMY\", \"ARTS\", \"ARTY\", \"ASIA\", \"ASKS\",\n\"ATOM\"\
    , \"AUNT\", \"AURA\", \"AUTO\", \"AVER\", \"AVID\", \"AVIS\", \"AVON\", \"AVOW\"\
    ,\n\"AWAY\", \"AWRY\", \"BABE\", \"BABY\", \"BACH\", \"BACK\", \"BADE\", \"BAIL\"\
    , \"BAIT\",\n\"BAKE\", \"BALD\", \"BALE\", \"BALI\", \"BALK\", \"BALL\", \"BALM\"\
    , \"BAND\", \"BANE\",\n\"BANG\", \"BANK\", \"BARB\", \"BARD\", \"BARE\", \"BARK\"\
    , \"BARN\", \"BARR\", \"BASE\",\n\"BASH\", \"BASK\", \"BASS\", \"BATE\", \"BATH\"\
    , \"BAWD\", \"BAWL\", \"BEAD\", \"BEAK\",\n\"BEAM\", \"BEAN\", \"BEAR\", \"BEAT\"\
    , \"BEAU\", \"BECK\", \"BEEF\", \"BEEN\", \"BEER\",\n\"BEET\", \"BELA\", \"BELL\"\
    , \"BELT\", \"BEND\", \"BENT\", \"BERG\", \"BERN\", \"BERT\",\n\"BESS\", \"BEST\"\
    , \"BETA\", \"BETH\", \"BHOY\", \"BIAS\", \"BIDE\", \"BIEN\", \"BILE\",\n\"BILK\"\
    , \"BILL\", \"BIND\", \"BING\", \"BIRD\", \"BITE\", \"BITS\", \"BLAB\", \"BLAT\"\
    ,\n\"BLED\", \"BLEW\", \"BLOB\", \"BLOC\", \"BLOT\", \"BLOW\", \"BLUE\", \"BLUM\"\
    , \"BLUR\",\n\"BOAR\", \"BOAT\", \"BOCA\", \"BOCK\", \"BODE\", \"BODY\", \"BOGY\"\
    , \"BOHR\", \"BOIL\",\n\"BOLD\", \"BOLO\", \"BOLT\", \"BOMB\", \"BONA\", \"BOND\"\
    , \"BONE\", \"BONG\", \"BONN\",\n\"BONY\", \"BOOK\", \"BOOM\", \"BOON\", \"BOOT\"\
    , \"BORE\", \"BORG\", \"BORN\", \"BOSE\",\n\"BOSS\", \"BOTH\", \"BOUT\", \"BOWL\"\
    , \"BOYD\", \"BRAD\", \"BRAE\", \"BRAG\", \"BRAN\",\n\"BRAY\", \"BRED\", \"BREW\"\
    , \"BRIG\", \"BRIM\", \"BROW\", \"BUCK\", \"BUDD\", \"BUFF\",\n\"BULB\", \"BULK\"\
    , \"BULL\", \"BUNK\", \"BUNT\", \"BUOY\", \"BURG\", \"BURL\", \"BURN\",\n\"BURR\"\
    , \"BURT\", \"BURY\", \"BUSH\", \"BUSS\", \"BUST\", \"BUSY\", \"BYTE\", \"CADY\"\
    ,\n\"CAFE\", \"CAGE\", \"CAIN\", \"CAKE\", \"CALF\", \"CALL\", \"CALM\", \"CAME\"\
    , \"CANE\",\n\"CANT\", \"CARD\", \"CARE\", \"CARL\", \"CARR\", \"CART\", \"CASE\"\
    , \"CASH\", \"CASK\",\n\"CAST\", \"CAVE\", \"CEIL\", \"CELL\", \"CENT\", \"CERN\"\
    , \"CHAD\", \"CHAR\", \"CHAT\",\n\"CHAW\", \"CHEF\", \"CHEN\", \"CHEW\", \"CHIC\"\
    , \"CHIN\", \"CHOU\", \"CHOW\", \"CHUB\",\n\"CHUG\", \"CHUM\", \"CITE\", \"CITY\"\
    , \"CLAD\", \"CLAM\", \"CLAN\", \"CLAW\", \"CLAY\",\n\"CLOD\", \"CLOG\", \"CLOT\"\
    , \"CLUB\", \"CLUE\", \"COAL\", \"COAT\", \"COCA\", \"COCK\",\n\"COCO\", \"CODA\"\
    , \"CODE\", \"CODY\", \"COED\", \"COIL\", \"COIN\", \"COKE\", \"COLA\",\n\"COLD\"\
    , \"COLT\", \"COMA\", \"COMB\", \"COME\", \"COOK\", \"COOL\", \"COON\", \"COOT\"\
    ,\n\"CORD\", \"CORE\", \"CORK\", \"CORN\", \"COST\", \"COVE\", \"COWL\", \"CRAB\"\
    , \"CRAG\",\n\"CRAM\", \"CRAY\", \"CREW\", \"CRIB\", \"CROW\", \"CRUD\", \"CUBA\"\
    , \"CUBE\", \"CUFF\",\n\"CULL\", \"CULT\", \"CUNY\", \"CURB\", \"CURD\", \"CURE\"\
    , \"CURL\", \"CURT\", \"CUTS\",\n\"DADE\", \"DALE\", \"DAME\", \"DANA\", \"DANE\"\
    , \"DANG\", \"DANK\", \"DARE\", \"DARK\",\n\"DARN\", \"DART\", \"DASH\", \"DATA\"\
    , \"DATE\", \"DAVE\", \"DAVY\", \"DAWN\", \"DAYS\",\n\"DEAD\", \"DEAF\", \"DEAL\"\
    , \"DEAN\", \"DEAR\", \"DEBT\", \"DECK\", \"DEED\", \"DEEM\",\n\"DEER\", \"DEFT\"\
    , \"DEFY\", \"DELL\", \"DENT\", \"DENY\", \"DESK\", \"DIAL\", \"DICE\",\n\"DIED\"\
    , \"DIET\", \"DIME\", \"DINE\", \"DING\", \"DINT\", \"DIRE\", \"DIRT\", \"DISC\"\
    ,\n\"DISH\", \"DISK\", \"DIVE\", \"DOCK\", \"DOES\", \"DOLE\", \"DOLL\", \"DOLT\"\
    , \"DOME\",\n\"DONE\", \"DOOM\", \"DOOR\", \"DORA\", \"DOSE\", \"DOTE\", \"DOUG\"\
    , \"DOUR\", \"DOVE\",\n\"DOWN\", \"DRAB\", \"DRAG\", \"DRAM\", \"DRAW\", \"DREW\"\
    , \"DRUB\", \"DRUG\", \"DRUM\",\n\"DUAL\", \"DUCK\", \"DUCT\", \"DUEL\", \"DUET\"\
    , \"DUKE\", \"DULL\", \"DUMB\", \"DUNE\",\n\"DUNK\", \"DUSK\", \"DUST\", \"DUTY\"\
    , \"EACH\", \"EARL\", \"EARN\", \"EASE\", \"EAST\",\n\"EASY\", \"EBEN\", \"ECHO\"\
    , \"EDDY\", \"EDEN\", \"EDGE\", \"EDGY\", \"EDIT\", \"EDNA\",\n\"EGAN\", \"ELAN\"\
    , \"ELBA\", \"ELLA\", \"ELSE\", \"EMIL\", \"EMIT\", \"EMMA\", \"ENDS\",\n\"ERIC\"\
    , \"EROS\", \"EVEN\", \"EVER\", \"EVIL\", \"EYED\", \"FACE\", \"FACT\", \"FADE\"\
    ,\n\"FAIL\", \"FAIN\", \"FAIR\", \"FAKE\", \"FALL\", \"FAME\", \"FANG\", \"FARM\"\
    , \"FAST\",\n\"FATE\", \"FAWN\", \"FEAR\", \"FEAT\", \"FEED\", \"FEEL\", \"FEET\"\
    , \"FELL\", \"FELT\",\n\"FEND\", \"FERN\", \"FEST\", \"FEUD\", \"FIEF\", \"FIGS\"\
    , \"FILE\", \"FILL\", \"FILM\",\n\"FIND\", \"FINE\", \"FINK\", \"FIRE\", \"FIRM\"\
    , \"FISH\", \"FISK\", \"FIST\", \"FITS\",\n\"FIVE\", \"FLAG\", \"FLAK\", \"FLAM\"\
    , \"FLAT\", \"FLAW\", \"FLEA\", \"FLED\", \"FLEW\",\n\"FLIT\", \"FLOC\", \"FLOG\"\
    , \"FLOW\", \"FLUB\", \"FLUE\", \"FOAL\", \"FOAM\", \"FOGY\",\n\"FOIL\", \"FOLD\"\
    , \"FOLK\", \"FOND\", \"FONT\", \"FOOD\", \"FOOL\", \"FOOT\", \"FORD\",\n\"FORE\"\
    , \"FORK\", \"FORM\", \"FORT\", \"FOSS\", \"FOUL\", \"FOUR\", \"FOWL\", \"FRAU\"\
    ,\n\"FRAY\", \"FRED\", \"FREE\", \"FRET\", \"FREY\", \"FROG\", \"FROM\", \"FUEL\"\
    , \"FULL\",\n\"FUME\", \"FUND\", \"FUNK\", \"FURY\", \"FUSE\", \"FUSS\", \"GAFF\"\
    , \"GAGE\", \"GAIL\",\n\"GAIN\", \"GAIT\", \"GALA\", \"GALE\", \"GALL\", \"GALT\"\
    , \"GAME\", \"GANG\", \"GARB\",\n\"GARY\", \"GASH\", \"GATE\", \"GAUL\", \"GAUR\"\
    , \"GAVE\", \"GAWK\", \"GEAR\", \"GELD\",\n\"GENE\", \"GENT\", \"GERM\", \"GETS\"\
    , \"GIBE\", \"GIFT\", \"GILD\", \"GILL\", \"GILT\",\n\"GINA\", \"GIRD\", \"GIRL\"\
    , \"GIST\", \"GIVE\", \"GLAD\", \"GLEE\", \"GLEN\", \"GLIB\",\n\"GLOB\", \"GLOM\"\
    , \"GLOW\", \"GLUE\", \"GLUM\", \"GLUT\", \"GOAD\", \"GOAL\", \"GOAT\",\n\"GOER\"\
    , \"GOES\", \"GOLD\", \"GOLF\", \"GONE\", \"GONG\", \"GOOD\", \"GOOF\", \"GORE\"\
    ,\n\"GORY\", \"GOSH\", \"GOUT\", \"GOWN\", \"GRAB\", \"GRAD\", \"GRAY\", \"GREG\"\
    , \"GREW\",\n\"GREY\", \"GRID\", \"GRIM\", \"GRIN\", \"GRIT\", \"GROW\", \"GRUB\"\
    , \"GULF\", \"GULL\",\n\"GUNK\", \"GURU\", \"GUSH\", \"GUST\", \"GWEN\", \"GWYN\"\
    , \"HAAG\", \"HAAS\", \"HACK\",\n\"HAIL\", \"HAIR\", \"HALE\", \"HALF\", \"HALL\"\
    , \"HALO\", \"HALT\", \"HAND\", \"HANG\",\n\"HANK\", \"HANS\", \"HARD\", \"HARK\"\
    , \"HARM\", \"HART\", \"HASH\", \"HAST\", \"HATE\",\n\"HATH\", \"HAUL\", \"HAVE\"\
    , \"HAWK\", \"HAYS\", \"HEAD\", \"HEAL\", \"HEAR\", \"HEAT\",\n\"HEBE\", \"HECK\"\
    , \"HEED\", \"HEEL\", \"HEFT\", \"HELD\", \"HELL\", \"HELM\", \"HERB\",\n\"HERD\"\
    , \"HERE\", \"HERO\", \"HERS\", \"HESS\", \"HEWN\", \"HICK\", \"HIDE\", \"HIGH\"\
    ,\n\"HIKE\", \"HILL\", \"HILT\", \"HIND\", \"HINT\", \"HIRE\", \"HISS\", \"HIVE\"\
    , \"HOBO\",\n\"HOCK\", \"HOFF\", \"HOLD\", \"HOLE\", \"HOLM\", \"HOLT\", \"HOME\"\
    , \"HONE\", \"HONK\",\n\"HOOD\", \"HOOF\", \"HOOK\", \"HOOT\", \"HORN\", \"HOSE\"\
    , \"HOST\", \"HOUR\", \"HOVE\",\n\"HOWE\", \"HOWL\", \"HOYT\", \"HUCK\", \"HUED\"\
    , \"HUFF\", \"HUGE\", \"HUGH\", \"HUGO\",\n\"HULK\", \"HULL\", \"HUNK\", \"HUNT\"\
    , \"HURD\", \"HURL\", \"HURT\", \"HUSH\", \"HYDE\",\n\"HYMN\", \"IBIS\", \"ICON\"\
    , \"IDEA\", \"IDLE\", \"IFFY\", \"INCA\", \"INCH\", \"INTO\",\n\"IONS\", \"IOTA\"\
    , \"IOWA\", \"IRIS\", \"IRMA\", \"IRON\", \"ISLE\", \"ITCH\", \"ITEM\",\n\"IVAN\"\
    , \"JACK\", \"JADE\", \"JAIL\", \"JAKE\", \"JANE\", \"JAVA\", \"JEAN\", \"JEFF\"\
    ,\n\"JERK\", \"JESS\", \"JEST\", \"JIBE\", \"JILL\", \"JILT\", \"JIVE\", \"JOAN\"\
    , \"JOBS\",\n\"JOCK\", \"JOEL\", \"JOEY\", \"JOHN\", \"JOIN\", \"JOKE\", \"JOLT\"\
    , \"JOVE\", \"JUDD\",\n\"JUDE\", \"JUDO\", \"JUDY\", \"JUJU\", \"JUKE\", \"JULY\"\
    , \"JUNE\", \"JUNK\", \"JUNO\",\n\"JURY\", \"JUST\", \"JUTE\", \"KAHN\", \"KALE\"\
    , \"KANE\", \"KANT\", \"KARL\", \"KATE\",\n\"KEEL\", \"KEEN\", \"KENO\", \"KENT\"\
    , \"KERN\", \"KERR\", \"KEYS\", \"KICK\", \"KILL\",\n\"KIND\", \"KING\", \"KIRK\"\
    , \"KISS\", \"KITE\", \"KLAN\", \"KNEE\", \"KNEW\", \"KNIT\",\n\"KNOB\", \"KNOT\"\
    , \"KNOW\", \"KOCH\", \"KONG\", \"KUDO\", \"KURD\", \"KURT\", \"KYLE\",\n\"LACE\"\
    , \"LACK\", \"LACY\", \"LADY\", \"LAID\", \"LAIN\", \"LAIR\", \"LAKE\", \"LAMB\"\
    ,\n\"LAME\", \"LAND\", \"LANE\", \"LANG\", \"LARD\", \"LARK\", \"LASS\", \"LAST\"\
    , \"LATE\",\n\"LAUD\", \"LAVA\", \"LAWN\", \"LAWS\", \"LAYS\", \"LEAD\", \"LEAF\"\
    , \"LEAK\", \"LEAN\",\n\"LEAR\", \"LEEK\", \"LEER\", \"LEFT\", \"LEND\", \"LENS\"\
    , \"LENT\", \"LEON\", \"LESK\",\n\"LESS\", \"LEST\", \"LETS\", \"LIAR\", \"LICE\"\
    , \"LICK\", \"LIED\", \"LIEN\", \"LIES\",\n\"LIEU\", \"LIFE\", \"LIFT\", \"LIKE\"\
    , \"LILA\", \"LILT\", \"LILY\", \"LIMA\", \"LIMB\",\n\"LIME\", \"LIND\", \"LINE\"\
    , \"LINK\", \"LINT\", \"LION\", \"LISA\", \"LIST\", \"LIVE\",\n\"LOAD\", \"LOAF\"\
    , \"LOAM\", \"LOAN\", \"LOCK\", \"LOFT\", \"LOGE\", \"LOIS\", \"LOLA\",\n\"LONE\"\
    , \"LONG\", \"LOOK\", \"LOON\", \"LOOT\", \"LORD\", \"LORE\", \"LOSE\", \"LOSS\"\
    ,\n\"LOST\", \"LOUD\", \"LOVE\", \"LOWE\", \"LUCK\", \"LUCY\", \"LUGE\", \"LUKE\"\
    , \"LULU\",\n\"LUND\", \"LUNG\", \"LURA\", \"LURE\", \"LURK\", \"LUSH\", \"LUST\"\
    , \"LYLE\", \"LYNN\",\n\"LYON\", \"LYRA\", \"MACE\", \"MADE\", \"MAGI\", \"MAID\"\
    , \"MAIL\", \"MAIN\", \"MAKE\",\n\"MALE\", \"MALI\", \"MALL\", \"MALT\", \"MANA\"\
    , \"MANN\", \"MANY\", \"MARC\", \"MARE\",\n\"MARK\", \"MARS\", \"MART\", \"MARY\"\
    , \"MASH\", \"MASK\", \"MASS\", \"MAST\", \"MATE\",\n\"MATH\", \"MAUL\", \"MAYO\"\
    , \"MEAD\", \"MEAL\", \"MEAN\", \"MEAT\", \"MEEK\", \"MEET\",\n\"MELD\", \"MELT\"\
    , \"MEMO\", \"MEND\", \"MENU\", \"MERT\", \"MESH\", \"MESS\", \"MICE\",\n\"MIKE\"\
    , \"MILD\", \"MILE\", \"MILK\", \"MILL\", \"MILT\", \"MIMI\", \"MIND\", \"MINE\"\
    ,\n\"MINI\", \"MINK\", \"MINT\", \"MIRE\", \"MISS\", \"MIST\", \"MITE\", \"MITT\"\
    , \"MOAN\",\n\"MOAT\", \"MOCK\", \"MODE\", \"MOLD\", \"MOLE\", \"MOLL\", \"MOLT\"\
    , \"MONA\", \"MONK\",\n\"MONT\", \"MOOD\", \"MOON\", \"MOOR\", \"MOOT\", \"MORE\"\
    , \"MORN\", \"MORT\", \"MOSS\",\n\"MOST\", \"MOTH\", \"MOVE\", \"MUCH\", \"MUCK\"\
    , \"MUDD\", \"MUFF\", \"MULE\", \"MULL\",\n\"MURK\", \"MUSH\", \"MUST\", \"MUTE\"\
    , \"MUTT\", \"MYRA\", \"MYTH\", \"NAGY\", \"NAIL\",\n\"NAIR\", \"NAME\", \"NARY\"\
    , \"NASH\", \"NAVE\", \"NAVY\", \"NEAL\", \"NEAR\", \"NEAT\",\n\"NECK\", \"NEED\"\
    , \"NEIL\", \"NELL\", \"NEON\", \"NERO\", \"NESS\", \"NEST\", \"NEWS\",\n\"NEWT\"\
    , \"NIBS\", \"NICE\", \"NICK\", \"NILE\", \"NINA\", \"NINE\", \"NOAH\", \"NODE\"\
    ,\n\"NOEL\", \"NOLL\", \"NONE\", \"NOOK\", \"NOON\", \"NORM\", \"NOSE\", \"NOTE\"\
    , \"NOUN\",\n\"NOVA\", \"NUDE\", \"NULL\", \"NUMB\", \"OATH\", \"OBEY\", \"OBOE\"\
    , \"ODIN\", \"OHIO\",\n\"OILY\", \"OINT\", \"OKAY\", \"OLAF\", \"OLDY\", \"OLGA\"\
    , \"OLIN\", \"OMAN\", \"OMEN\",\n\"OMIT\", \"ONCE\", \"ONES\", \"ONLY\", \"ONTO\"\
    , \"ONUS\", \"ORAL\", \"ORGY\", \"OSLO\",\n\"OTIS\", \"OTTO\", \"OUCH\", \"OUST\"\
    , \"OUTS\", \"OVAL\", \"OVEN\", \"OVER\", \"OWLY\",\n\"OWNS\", \"QUAD\", \"QUIT\"\
    , \"QUOD\", \"RACE\", \"RACK\", \"RACY\", \"RAFT\", \"RAGE\",\n\"RAID\", \"RAIL\"\
    , \"RAIN\", \"RAKE\", \"RANK\", \"RANT\", \"RARE\", \"RASH\", \"RATE\",\n\"RAVE\"\
    , \"RAYS\", \"READ\", \"REAL\", \"REAM\", \"REAR\", \"RECK\", \"REED\", \"REEF\"\
    ,\n\"REEK\", \"REEL\", \"REID\", \"REIN\", \"RENA\", \"REND\", \"RENT\", \"REST\"\
    , \"RICE\",\n\"RICH\", \"RICK\", \"RIDE\", \"RIFT\", \"RILL\", \"RIME\", \"RING\"\
    , \"RINK\", \"RISE\",\n\"RISK\", \"RITE\", \"ROAD\", \"ROAM\", \"ROAR\", \"ROBE\"\
    , \"ROCK\", \"RODE\", \"ROIL\",\n\"ROLL\", \"ROME\", \"ROOD\", \"ROOF\", \"ROOK\"\
    , \"ROOM\", \"ROOT\", \"ROSA\", \"ROSE\",\n\"ROSS\", \"ROSY\", \"ROTH\", \"ROUT\"\
    , \"ROVE\", \"ROWE\", \"ROWS\", \"RUBE\", \"RUBY\",\n\"RUDE\", \"RUDY\", \"RUIN\"\
    , \"RULE\", \"RUNG\", \"RUNS\", \"RUNT\", \"RUSE\", \"RUSH\",\n\"RUSK\", \"RUSS\"\
    , \"RUST\", \"RUTH\", \"SACK\", \"SAFE\", \"SAGE\", \"SAID\", \"SAIL\",\n\"SALE\"\
    , \"SALK\", \"SALT\", \"SAME\", \"SAND\", \"SANE\", \"SANG\", \"SANK\", \"SARA\"\
    ,\n\"SAUL\", \"SAVE\", \"SAYS\", \"SCAN\", \"SCAR\", \"SCAT\", \"SCOT\", \"SEAL\"\
    , \"SEAM\",\n\"SEAR\", \"SEAT\", \"SEED\", \"SEEK\", \"SEEM\", \"SEEN\", \"SEES\"\
    , \"SELF\", \"SELL\",\n\"SEND\", \"SENT\", \"SETS\", \"SEWN\", \"SHAG\", \"SHAM\"\
    , \"SHAW\", \"SHAY\", \"SHED\",\n\"SHIM\", \"SHIN\", \"SHOD\", \"SHOE\", \"SHOT\"\
    , \"SHOW\", \"SHUN\", \"SHUT\", \"SICK\",\n\"SIDE\", \"SIFT\", \"SIGH\", \"SIGN\"\
    , \"SILK\", \"SILL\", \"SILO\", \"SILT\", \"SINE\",\n\"SING\", \"SINK\", \"SIRE\"\
    , \"SITE\", \"SITS\", \"SITU\", \"SKAT\", \"SKEW\", \"SKID\",\n\"SKIM\", \"SKIN\"\
    , \"SKIT\", \"SLAB\", \"SLAM\", \"SLAT\", \"SLAY\", \"SLED\", \"SLEW\",\n\"SLID\"\
    , \"SLIM\", \"SLIT\", \"SLOB\", \"SLOG\", \"SLOT\", \"SLOW\", \"SLUG\", \"SLUM\"\
    ,\n\"SLUR\", \"SMOG\", \"SMUG\", \"SNAG\", \"SNOB\", \"SNOW\", \"SNUB\", \"SNUG\"\
    , \"SOAK\",\n\"SOAR\", \"SOCK\", \"SODA\", \"SOFA\", \"SOFT\", \"SOIL\", \"SOLD\"\
    , \"SOME\", \"SONG\",\n\"SOON\", \"SOOT\", \"SORE\", \"SORT\", \"SOUL\", \"SOUR\"\
    , \"SOWN\", \"STAB\", \"STAG\",\n\"STAN\", \"STAR\", \"STAY\", \"STEM\", \"STEW\"\
    , \"STIR\", \"STOW\", \"STUB\", \"STUN\",\n\"SUCH\", \"SUDS\", \"SUIT\", \"SULK\"\
    , \"SUMS\", \"SUNG\", \"SUNK\", \"SURE\", \"SURF\",\n\"SWAB\", \"SWAG\", \"SWAM\"\
    , \"SWAN\", \"SWAT\", \"SWAY\", \"SWIM\", \"SWUM\", \"TACK\",\n\"TACT\", \"TAIL\"\
    , \"TAKE\", \"TALE\", \"TALK\", \"TALL\", \"TANK\", \"TASK\", \"TATE\",\n\"TAUT\"\
    , \"TEAL\", \"TEAM\", \"TEAR\", \"TECH\", \"TEEM\", \"TEEN\", \"TEET\", \"TELL\"\
    ,\n\"TEND\", \"TENT\", \"TERM\", \"TERN\", \"TESS\", \"TEST\", \"THAN\", \"THAT\"\
    , \"THEE\",\n\"THEM\", \"THEN\", \"THEY\", \"THIN\", \"THIS\", \"THUD\", \"THUG\"\
    , \"TICK\", \"TIDE\",\n\"TIDY\", \"TIED\", \"TIER\", \"TILE\", \"TILL\", \"TILT\"\
    , \"TIME\", \"TINA\", \"TINE\",\n\"TINT\", \"TINY\", \"TIRE\", \"TOAD\", \"TOGO\"\
    , \"TOIL\", \"TOLD\", \"TOLL\", \"TONE\",\n\"TONG\", \"TONY\", \"TOOK\", \"TOOL\"\
    , \"TOOT\", \"TORE\", \"TORN\", \"TOTE\", \"TOUR\",\n\"TOUT\", \"TOWN\", \"TRAG\"\
    , \"TRAM\", \"TRAY\", \"TREE\", \"TREK\", \"TRIG\", \"TRIM\",\n\"TRIO\", \"TROD\"\
    , \"TROT\", \"TROY\", \"TRUE\", \"TUBA\", \"TUBE\", \"TUCK\", \"TUFT\",\n\"TUNA\"\
    , \"TUNE\", \"TUNG\", \"TURF\", \"TURN\", \"TUSK\", \"TWIG\", \"TWIN\", \"TWIT\"\
    ,\n\"ULAN\", \"UNIT\", \"URGE\", \"USED\", \"USER\", \"USES\", \"UTAH\", \"VAIL\"\
    , \"VAIN\",\n\"VALE\", \"VARY\", \"VASE\", \"VAST\", \"VEAL\", \"VEDA\", \"VEIL\"\
    , \"VEIN\", \"VEND\",\n\"VENT\", \"VERB\", \"VERY\", \"VETO\", \"VICE\", \"VIEW\"\
    , \"VINE\", \"VISE\", \"VOID\",\n\"VOLT\", \"VOTE\", \"WACK\", \"WADE\", \"WAGE\"\
    , \"WAIL\", \"WAIT\", \"WAKE\", \"WALE\",\n\"WALK\", \"WALL\", \"WALT\", \"WAND\"\
    , \"WANE\", \"WANG\", \"WANT\", \"WARD\", \"WARM\",\n\"WARN\", \"WART\", \"WASH\"\
    , \"WAST\", \"WATS\", \"WATT\", \"WAVE\", \"WAVY\", \"WAYS\",\n\"WEAK\", \"WEAL\"\
    , \"WEAN\", \"WEAR\", \"WEED\", \"WEEK\", \"WEIR\", \"WELD\", \"WELL\",\n\"WELT\"\
    , \"WENT\", \"WERE\", \"WERT\", \"WEST\", \"WHAM\", \"WHAT\", \"WHEE\", \"WHEN\"\
    ,\n\"WHET\", \"WHOA\", \"WHOM\", \"WICK\", \"WIFE\", \"WILD\", \"WILL\", \"WIND\"\
    , \"WINE\",\n\"WING\", \"WINK\", \"WINO\", \"WIRE\", \"WISE\", \"WISH\", \"WITH\"\
    , \"WOLF\", \"WONT\",\n\"WOOD\", \"WOOL\", \"WORD\", \"WORE\", \"WORK\", \"WORM\"\
    , \"WORN\", \"WOVE\", \"WRIT\",\n\"WYNN\", \"YALE\", \"YANG\", \"YANK\", \"YARD\"\
    , \"YARN\", \"YAWL\", \"YAWN\", \"YEAH\",\n\"YEAR\", \"YELL\", \"YOGA\", \"YOKE\"\
    \n};\n/* Encode 8 bytes in 'c' as a string of English words.\n * Returns a pointer\
    \ to a static buffer\n */\nchar *\nbtoe(engout,c)\nchar *c, *engout;\n{\n    \
    \    char cp[9];     /* add in room for the parity 2 bits*/\n        int p,i ;\n\
    \        engout[0] = '\\0';\n        memcpy(cp, c,8);\n        /* compute parity\
    \ */\n        for(p = 0,i = 0; i < 64;i += 2)\n                p += extract(cp,i,2);\n\
    \        cp[8] = (char)p << 6;\n        strncat(engout,&Wp[extract(cp, 0,11)][0],4);\n\
    \        strcat(engout,\" \");\n        strncat(engout,&Wp[extract(cp,11,11)][0],4);\n\
    \        strcat(engout,\" \");\n        strncat(engout,&Wp[extract(cp,22,11)][0],4);\n\
    \        strcat(engout,\" \");\n        strncat(engout,&Wp[extract(cp,33,11)][0],4);\n\
    \        strcat(engout,\" \");\n        strncat(engout,&Wp[extract(cp,44,11)][0],4);\n\
    \        strcat(engout,\" \");\n        strncat(engout,&Wp[extract(cp,55,11)][0],4);\n\
    #ifdef  notdef\n        printf(\"engout is %s\\n\\r\",engout);\n#endif\n     \
    \   return(engout);\n}\n/* convert English to binary\n * returns 1 OK - all good\
    \ words and parity is OK\n *         0 word not in data base\n *        -1 badly\
    \ formed in put ie > 4 char word\n *        -2 words OK but parity is wrong\n\
    \ */\nint\netob(out, e)\nchar *out;\nchar *e;\n{\n        char *word;\n      \
    \  int i, p, v,l, low,high;\n        char b[9];\n        char input[36];\n   \
    \     if(e == NULL)\n                return -1;\n        strncpy(input,e,sizeof(input));\n\
    \        memset(b, 0, sizeof(b));\n        memset(out, 0, 8);\n        for(i=0,p=0;i<6;i++,p+=11){\n\
    \                if((word = strtok(i == 0 ? input : NULL,\" \")) == NULL)\n  \
    \                      return -1;\n                l = strlen(word);\n       \
    \         if(l > 4 || l < 1){\n                        return -1;\n          \
    \      } else if(l < 4){\n                        low = 0;\n                 \
    \       high = 570;\n                } else {\n                        low = 571;\n\
    \                        high = 2047;\n                }\n                standard(word);\n\
    \                if( (v = wsrch(word,low,high)) < 0 )\n                      \
    \  return 0;\n                insert(b,v,p,11);\n        }\n        /* now check\
    \ the parity of what we got */\n        for(p = 0, i = 0; i < 64; i +=2)\n   \
    \             p += extract(b, i, 2);\n        if( (p & 3) != extract(b, 64,2)\
    \ )\n                return -2;\n        memcpy(out,b,8);\n        return 1;\n\
    }\n/* Display 8 bytes as a series of 16-bit hex digits */\nchar *\nput8(out,s)\n\
    char *out;\nchar *s;\n{\n        sprintf(out,\"%02X%02X %02X%02X %02X%02X %02X%02X\"\
    ,\n                s[0] & 0xff,s[1] & 0xff,s[2] & 0xff,\n                s[3]\
    \ & 0xff,s[4] & 0xff,s[5] & 0xff,\n                s[6] & 0xff,s[7] & 0xff);\n\
    \        return out;\n}\n#ifdef  notdef\n/* Encode 8 bytes in 'cp' as stream of\
    \ ascii letters.\n * Provided as a possible alternative to btoe()\n */\nchar *\n\
    btoc(cp)\nchar *cp;\n{\n        int i;\n        static char out[31];\n       \
    \ /* code out put by characters 6 bits each added to 0x21 (!)*/\n        for(i=0;i\
    \ <= 10;i++){\n                /* last one is only 4 bits not 6*/\n          \
    \      out[i] = '!'+ extract(cp,6*i,i >= 10 ? 4:6);\n        }\n        out[i]\
    \ = '\\0';\n        return(out);\n}\n#endif\n/* Internal subroutines for word\
    \ encoding/decoding */\n/* Dictionary binary search */\nstatic int\nwsrch(w,low,high)\n\
    char *w;\nint low, high;\n{\n        int i,j;\n        for(;;){\n            \
    \    i = (low + high)/2;\n                if((j = strncmp(w,Wp[i],4)) == 0)\n\
    \                        return i;       /* Found it */\n                if(high\
    \ == low+1){\n                        /* Avoid effects of integer truncation in\
    \ /2 */\n                        if(strncmp(w,Wp[high],4) == 0)\n            \
    \                    return high;\n                        else\n            \
    \                    return -1;\n                }\n                if(low >=\
    \ high)\n                        return -1;\n                   /* I don't *think*\
    \ this can happen...*/\n                if(j < 0)\n                        high\
    \ = i;  /* Search lower half */\n                else\n                      \
    \  low = i;   /* Search upper half */\n        }\n}\nstatic void\ninsert(s, x,\
    \ start, length)\nchar *s;\nint x;\nint  start, length;\n{\n        unsigned char\
    \ cl;\n        unsigned char cc;\n        unsigned char cr;\n        unsigned\
    \ long y;\n        int shift;\n        assert(length <= 11);\n        assert(start\
    \ >= 0);\n        assert(length >= 0);\n        assert(start +length <= 66);\n\
    \        shift = ((8  -(( start + length) % 8))%8);\n        y = (long) x << shift;\n\
    \        cl = (y >> 16) & 0xff;\n        cc = (y >> 8) & 0xff;\n        cr = y\
    \ & 0xff;\n        if(shift + length > 16){\n                s[start /8] |= cl;\n\
    \                s[start/8 +1] |= cc;\n                s[start/8 +2] |= cr;\n\
    \        } else if(shift +length > 8){\n                s[start/8] |= cc;\n  \
    \              s[start/8 + 1] |= cr;\n        } else {\n                s[start/8]\
    \ |= cr;\n        }\n}\nstatic void\nstandard(word)\nregister char *word;\n{\n\
    \        while(*word){\n                if(!isascii(*word))\n                \
    \        break;\n                if(islower(*word))\n                        *word\
    \ = toupper(*word);\n                if(*word == '1')\n                      \
    \  *word = 'L';\n                if(*word == '0')\n                        *word\
    \ = 'O';\n                if(*word == '5')\n                        *word = 'S';\n\
    \                word++;\n        }\n}\n/* Extract 'length' bits from the char\
    \ array 's'\n   starting with bit 'start' */\nstatic unsigned long\nextract(s,\
    \ start, length)\nchar *s;\nint start, length;\n{\n        unsigned char cl;\n\
    \        unsigned char cc;\n        unsigned char cr;\n        unsigned long x;\n\
    \        assert(length <= 11);\n        assert(start >= 0);\n        assert(length\
    \ >= 0);\n        assert(start +length <= 66);\n        cl = s[start/8];\n   \
    \     cc = s[start/8 +1];\n        cr = s[start/8 +2];\n        x = ((long)(cl<<8\
    \ | cc) <<8  | cr) ;\n        x = x >> (24 - (length + (start %8)));\n       \
    \ x =( x & (0xffff >> (16-length) )   );\n        return(x);\n}\nAppendix B -\
    \ Source for 128-bit key to/from English words (convert.c)\n/* convert.c  -- \
    \ Wrapper to S/Key binary-to-English routines.\n      Daniel L. McDonald  -- \
    \ U. S. Naval Research Laboratory. */\n#include <string.h>\n/* eng2key() assumes\
    \ words must be separated by spaces only.\n   eng2key() returns\n   1 if succeeded\n\
    \   0 if word not in dictionary\n   -1 if badly formed string\n   -2 if words\
    \ are okay but parity is wrong.\n   (see etob() in S/Key)\n*/\nint eng2key(keyout,eng)\n\
    char *keyout,*eng;\n{\n  int rc=0,state=1;\n  char *eng2;\n  /* Find pointer to\
    \ word 7. */\n  for (eng2 = eng; rc<7 && (*(++eng2) != '\\0'); )\n    if (*eng2\
    \ != ' ')\n      {\n        rc += state;\n        state = 0;\n      }\n    else\
    \ state=1;\n  if ( (rc = etob(keyout,eng)) != 1)\n    return rc;\n  rc = etob(keyout+8,eng2);\n\
    \  return rc;\n}\n/* key2eng() assumes string referenced by\n   engout has at\
    \ least 60 characters\n   (4*12 + 11 spaces + '\\0') of space.\n   key2eng() returns\
    \ pointer to engout.\n*/\nchar *key2eng(engout,key)\nchar *engout,*key;\n{\n \
    \ btoe(engout,key);\n  strcat(engout,\" \");\n  btoe(engout+strlen(engout),key+8);\n\
    \  return engout;\n}\n"
