- contents:
  - '                  The EAP-TLS Authentication Protocol

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   The Extensible Authentication Protocol (EAP), defined in RFC 3748,\n
    \  provides support for multiple authentication methods.  Transport\n   Layer
    Security (TLS) provides for mutual authentication, integrity-\n   protected ciphersuite
    negotiation, and key exchange between two\n   endpoints.  This document defines
    EAP-TLS, which includes support for\n   certificate-based mutual authentication
    and key derivation.\n   This document obsoletes RFC 2716.  A summary of the changes
    between\n   this document and RFC 2716 is available in Appendix A.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Requirements ...............................................3\n      1.2.
    Terminology ................................................3\n   2. Protocol
    Overview ...............................................4\n      2.1. Overview
    of the EAP-TLS Conversation .......................4\n           2.1.1. Base Case
    ...........................................4\n           2.1.2. Session Resumption
    ..................................7\n           2.1.3. Termination .........................................8\n
    \          2.1.4. Privacy ............................................11\n           2.1.5.
    Fragmentation ......................................14\n      2.2. Identity Verification
    .....................................16\n      2.3. Key Hierarchy .............................................17\n
    \     2.4. Ciphersuite and Compression Negotiation ...................19\n   3.
    Detailed Description of the EAP-TLS Protocol ...................20\n      3.1.
    EAP-TLS Request Packet ....................................20\n      3.2. EAP-TLS
    Response Packet ...................................22\n   4. IANA Considerations
    ............................................23\n   5. Security Considerations
    ........................................24\n      5.1. Security Claims ...........................................24\n
    \     5.2. Peer and Server Identities ................................25\n      5.3.
    Certificate Validation ....................................26\n      5.4. Certificate
    Revocation ....................................27\n      5.5. Packet Modification
    Attacks ...............................28\n   6. References .....................................................29\n
    \     6.1. Normative References ......................................29\n      6.2.
    Informative References ....................................29\n   Acknowledgments
    ...................................................31\n   Appendix A -- Changes
    from RFC 2716 ...............................32\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP), described
    in [RFC3748],\n   provides a standard mechanism for support of multiple authentication\n
    \  methods.  Through the use of EAP, support for a number of\n   authentication
    schemes may be added, including smart cards, Kerberos,\n   Public Key, One Time
    Passwords, and others.  EAP has been defined for\n   use with a variety of lower
    layers, including the Point-to-Point\n   Protocol (PPP) [RFC1661], Layer 2 tunneling
    protocols such as the\n   Point-to-Point Tunneling Protocol (PPTP) [RFC2637] or
    Layer 2\n   Tunneling Protocol (L2TP) [RFC2661], IEEE 802 wired networks\n   [IEEE-802.1X],
    and wireless technologies such as IEEE 802.11 [IEEE-\n   802.11] and IEEE 802.16
    [IEEE-802.16e].\n   While the EAP methods defined in [RFC3748] did not support
    mutual\n   authentication, the use of EAP with wireless technologies such as\n
    \  [IEEE-802.11] has resulted in development of a new set of\n   requirements.
    \ As described in \"Extensible Authentication Protocol\n   (EAP) Method Requirements
    for Wireless LANs\" [RFC4017], it is\n   desirable for EAP methods used for wireless
    LAN authentication to\n   support mutual authentication and key derivation.  Other
    link layers\n   can also make use of EAP to enable mutual authentication and key\n
    \  derivation.\n   This document defines EAP-Transport Layer Security (EAP-TLS),
    which\n   includes support for certificate-based mutual authentication and key\n
    \  derivation, utilizing the protected ciphersuite negotiation, mutual\n   authentication
    and key management capabilities of the TLS protocol,\n   described in \"The Transport
    Layer Security (TLS) Protocol\n   Version 1.1\" [RFC4346].  While this document
    obsoletes RFC 2716\n   [RFC2716], it remains backward compatible with it.  A summary
    of the\n   changes between this document and RFC 2716 is available in Appendix\n
    \  A.\n"
  - contents:
    - "1.1.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.1.  Requirements
  - contents:
    - "1.2.  Terminology\n   This document frequently uses the following terms:\n
      \  authenticator\n     The entity initiating EAP authentication.\n   peer\n
      \    The entity that responds to the authenticator.  In [IEEE-802.1X],\n     this
      entity is known as the Supplicant.\n   backend authentication server\n     A
      backend authentication server is an entity that provides an\n     authentication
      service to an authenticator.  When used, this server\n     typically executes
      EAP methods for the authenticator.  This\n     terminology is also used in [IEEE-802.1X].\n
      \  EAP server\n     The entity that terminates the EAP authentication method
      with the\n     peer.  In the case where no backend authentication server is
      used,\n     the EAP server is part of the authenticator.  In the case where
      the\n     authenticator operates in pass-through mode, the EAP server is\n     located
      on the backend authentication server.\n   Master Session Key (MSK)\n     Keying
      material that is derived between the EAP peer and server and\n     exported
      by the EAP method.\n   Extended Master Session Key (EMSK)\n     Additional keying
      material derived between the EAP peer and server\n     that is exported by the
      EAP method.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - '2.  Protocol Overview

    '
  - contents:
    - "2.1.  Overview of the EAP-TLS Conversation\n   As described in [RFC3748], the
      EAP-TLS conversation will typically\n   begin with the authenticator and the
      peer negotiating EAP.  The\n   authenticator will then typically send an EAP-Request/Identity
      packet\n   to the peer, and the peer will respond with an EAP-Response/Identity\n
      \  packet to the authenticator, containing the peer's user-Id.\n   From this
      point forward, while nominally the EAP conversation occurs\n   between the EAP
      authenticator and the peer, the authenticator MAY act\n   as a pass-through
      device, with the EAP packets received from the peer\n   being encapsulated for
      transmission to a backend authentication\n   server.  In the discussion that
      follows, we will use the term \"EAP\n   server\" to denote the ultimate endpoint
      conversing with the peer.\n"
    - contents:
      - "2.1.1.  Base Case\n   Once having received the peer's Identity, the EAP server
        MUST respond\n   with an EAP-TLS/Start packet, which is an EAP-Request packet
        with\n   EAP-Type=EAP-TLS, the Start (S) bit set, and no data.  The EAP-TLS\n
        \  conversation will then begin, with the peer sending an EAP-Response\n   packet
        with EAP-Type=EAP-TLS.  The data field of that packet will\n   encapsulate
        one or more TLS records in TLS record layer format,\n   containing a TLS client_hello
        handshake message.  The current cipher\n   spec for the TLS records will be
        TLS_NULL_WITH_NULL_NULL and null\n   compression.  This current cipher spec
        remains the same until the\n   change_cipher_spec message signals that subsequent
        records will have\n   the negotiated attributes for the remainder of the handshake.\n
        \  The client_hello message contains the peer's TLS version number, a\n   sessionId,
        a random number, and a set of ciphersuites supported by\n   the peer.  The
        version offered by the peer MUST correspond to TLS\n   v1.0 or later.\n   The
        EAP server will then respond with an EAP-Request packet with\n   EAP-Type=EAP-TLS.
        \ The data field of this packet will encapsulate one\n   or more TLS records.
        \ These will contain a TLS server_hello handshake\n   message, possibly followed
        by TLS certificate, server_key_exchange,\n   certificate_request, server_hello_done
        and/or finished handshake\n   messages, and/or a TLS change_cipher_spec message.
        \ The server_hello\n   handshake message contains a TLS version number, another
        random\n   number, a sessionId, and a ciphersuite.  The version offered by
        the\n   server MUST correspond to TLS v1.0 or later.\n   If the peer's sessionId
        is null or unrecognized by the server, the\n   server MUST choose the sessionId
        to establish a new session.\n   Otherwise, the sessionId will match that offered
        by the peer,\n   indicating a resumption of the previously established session
        with\n   that sessionId.  The server will also choose a ciphersuite from those\n
        \  offered by the peer.  If the session matches the peer's, then the\n   ciphersuite
        MUST match the one negotiated during the handshake\n   protocol execution
        that established the session.\n   If the EAP server is not resuming a previously
        established session,\n   then it MUST include a TLS server_certificate handshake
        message, and\n   a server_hello_done handshake message MUST be the last handshake\n
        \  message encapsulated in this EAP-Request packet.\n   The certificate message
        contains a public key certificate chain for\n   either a key exchange public
        key (such as an RSA or Diffie-Hellman\n   key exchange public key) or a signature
        public key (such as an RSA or\n   Digital Signature Standard (DSS) signature
        public key).  In the\n   latter case, a TLS server_key_exchange handshake
        message MUST also be\n   included to allow the key exchange to take place.\n
        \  The certificate_request message is included when the server desires\n   the
        peer to authenticate itself via public key.  While the EAP server\n   SHOULD
        require peer authentication, this is not mandatory, since\n   there are circumstances
        in which peer authentication will not be\n   needed (e.g., emergency services,
        as described in [UNAUTH]), or where\n   the peer will authenticate via some
        other means.\n   If the peer supports EAP-TLS and is configured to use it,
        it MUST\n   respond to the EAP-Request with an EAP-Response packet of EAP-\n
        \  Type=EAP-TLS.  If the preceding server_hello message sent by the EAP\n
        \  server in the preceding EAP-Request packet did not indicate the\n   resumption
        of a previous session, the data field of this packet MUST\n   encapsulate
        one or more TLS records containing a TLS\n   client_key_exchange, change_cipher_spec,
        and finished messages.  If\n   the EAP server sent a certificate_request message
        in the preceding\n   EAP-Request packet, then unless the peer is configured
        for privacy\n   (see Section 2.1.4) the peer MUST send, in addition, certificate
        and\n   certificate_verify messages.  The former contains a certificate for\n
        \  the peer's signature public key, while the latter contains the peer's\n
        \  signed authentication response to the EAP server.  After receiving\n   this
        packet, the EAP server will verify the peer's certificate and\n   digital
        signature, if requested.\n   If the preceding server_hello message sent by
        the EAP server in the\n   preceding EAP-Request packet indicated the resumption
        of a previous\n   session, then the peer MUST send only the change_cipher_spec
        and\n   finished handshake messages.  The finished message contains the\n
        \  peer's authentication response to the EAP server.\n   In the case where
        the EAP-TLS mutual authentication is successful,\n   the conversation will
        appear as follows:\n   Authenticating Peer     Authenticator\n   -------------------
        \    -------------\n                           <- EAP-Request/\n                           Identity\n
        \  EAP-Response/\n   Identity (MyID) ->\n                           <- EAP-Request/\n
        \                          EAP-Type=EAP-TLS\n                           (TLS
        Start)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS client_hello)->\n                           <-
        EAP-Request/\n                           EAP-Type=EAP-TLS\n                           (TLS
        server_hello,\n                             TLS certificate,\n                    [TLS
        server_key_exchange,]\n                     TLS certificate_request,\n                        TLS
        server_hello_done)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n
        \   TLS client_key_exchange,\n    TLS certificate_verify,\n    TLS change_cipher_spec,\n
        \   TLS finished) ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS change_cipher_spec,\n                            TLS
        finished)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Success\n"
      title: 2.1.1.  Base Case
    - contents:
      - "2.1.2.  Session Resumption\n   The purpose of the sessionId within the TLS
        protocol is to allow for\n   improved efficiency in the case where a peer
        repeatedly attempts to\n   authenticate to an EAP server within a short period
        of time.  While\n   this model was developed for use with HTTP authentication,
        it also\n   can be used to provide \"fast reconnect\" functionality as defined
        in\n   Section 7.2.1 of [RFC3748].\n   It is left up to the peer whether to
        attempt to continue a previous\n   session, thus shortening the TLS conversation.
        \ Typically, the peer's\n   decision will be made based on the time elapsed
        since the previous\n   authentication attempt to that EAP server.  Based on
        the sessionId\n   chosen by the peer, and the time elapsed since the previous\n
        \  authentication, the EAP server will decide whether to allow the\n   continuation
        or to choose a new session.\n   In the case where the EAP server and authenticator
        reside on the same\n   device, the peer will only be able to continue sessions
        when\n   connecting to the same authenticator.  Should the authenticators
        be\n   set up in a rotary or round-robin, then it may not be possible for\n
        \  the peer to know in advance the authenticator to which it will be\n   connecting,
        and therefore which sessionId to attempt to reuse.  As a\n   result, it is
        likely that the continuation attempt will fail.  In the\n   case where the
        EAP authentication is remoted, then continuation is\n   much more likely to
        be successful, since multiple authenticators will\n   utilize the same backend
        authentication server.\n   If the EAP server is resuming a previously established
        session, then\n   it MUST include only a TLS change_cipher_spec message and
        a TLS\n   finished handshake message after the server_hello message.  The\n
        \  finished message contains the EAP server's authentication response to\n
        \  the peer.\n   In the case where a previously established session is being
        resumed,\n   and both sides authenticate successfully, the conversation will\n
        \  appear as follows:\n   Authenticating Peer     Authenticator\n   -------------------
        \    -------------\n                           <- EAP-Request/\n                           Identity\n
        \  EAP-Response/\n   Identity (MyID) ->\n                           <- EAP-Request/\n
        \                          EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS Start)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n
        \  (TLS client_hello)->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS server_hello,\n                           TLS
        change_cipher_spec\n                           TLS finished)\n   EAP-Response/\n
        \  EAP-Type=EAP-TLS\n   (TLS change_cipher_spec,\n    TLS finished) ->\n                           <-
        EAP-Success\n"
      title: 2.1.2.  Session Resumption
    - contents:
      - "2.1.3.  Termination\n   If the peer's authentication is unsuccessful, the
        EAP server SHOULD\n   send an EAP-Request packet with EAP-Type=EAP-TLS, encapsulating
        a TLS\n   record containing the appropriate TLS alert message.  The EAP server\n
        \  SHOULD send a TLS alert message immediately terminating the\n   conversation
        so as to allow the peer to inform the user or log the\n   cause of the failure
        and possibly allow for a restart of the\n   conversation.\n   To ensure that
        the peer receives the TLS alert message, the EAP\n   server MUST wait for
        the peer to reply with an EAP-Response packet.\n   The EAP-Response packet
        sent by the peer MAY encapsulate a TLS\n   client_hello handshake message,
        in which case the EAP server MAY\n   allow the EAP-TLS conversation to be
        restarted, or it MAY contain an\n   EAP-Response packet with EAP-Type=EAP-TLS
        and no data, in which case\n   the EAP-Server MUST send an EAP-Failure packet
        and terminate the\n   conversation.  It is up to the EAP server whether to
        allow restarts,\n   and if so, how many times the conversation can be restarted.
        \ An EAP\n   Server implementing restart capability SHOULD impose a per-peer
        limit\n   on the number of restarts, so as to protect against denial-of-service\n
        \  attacks.\n   If the peer authenticates successfully, the EAP server MUST
        respond\n   with an EAP-Request packet with EAP-Type=EAP-TLS, which includes,
        in\n   the case of a new TLS session, one or more TLS records containing TLS\n
        \  change_cipher_spec and finished handshake messages.  The latter\n   contains
        the EAP server's authentication response to the peer.  The\n   peer will then
        verify the finished message in order to authenticate\n   the EAP server.\n
        \  If EAP server authentication is unsuccessful, the peer SHOULD delete\n
        \  the session from its cache, preventing reuse of the sessionId.  The\n   peer
        MAY send an EAP-Response packet of EAP-Type=EAP-TLS containing a\n   TLS Alert
        message identifying the reason for the failed\n   authentication.  The peer
        MAY send a TLS alert message rather than\n   immediately terminating the conversation
        so as to allow the EAP\n   server to log the cause of the error for examination
        by the system\n   administrator.\n   To ensure that the EAP Server receives
        the TLS alert message, the\n   peer MUST wait for the EAP Server to reply
        before terminating the\n   conversation.  The EAP Server MUST reply with an
        EAP-Failure packet\n   since server authentication failure is a terminal condition.\n
        \  If the EAP server authenticates successfully, the peer MUST send an\n   EAP-Response
        packet of EAP-Type=EAP-TLS, and no data.  The EAP Server\n   then MUST respond
        with an EAP-Success message.\n   In the case where the server authenticates
        to the peer successfully,\n   but the peer fails to authenticate to the server,
        the conversation\n   will appear as follows:\n   Authenticating Peer     Authenticator\n
        \  -------------------     -------------\n                           <- EAP-Request/\n
        \                          Identity\n   EAP-Response/\n   Identity (MyID)
        ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS Start)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n
        \  (TLS client_hello)->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS server_hello,\n                             TLS
        certificate,\n                    [TLS server_key_exchange,]\n               TLS
        certificate_request,\n                 TLS server_hello_done)\n   EAP-Response/\n
        \  EAP-Type=EAP-TLS\n   (TLS certificate,\n    TLS client_key_exchange,\n
        \   TLS certificate_verify,\n    TLS change_cipher_spec,\n    TLS finished)
        ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS change_cipher_spec,\n                           TLS
        finished)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Request\n                           EAP-Type=EAP-TLS\n                           (TLS
        Alert message)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Failure\n                           (User Disconnected)\n   In the case
        where server authentication is unsuccessful, the\n   conversation will appear
        as follows:\n   Authenticating Peer     Authenticator\n   -------------------
        \    -------------\n                           <- EAP-Request/\n                           Identity\n
        \  EAP-Response/\n   Identity (MyID) ->\n                           <- EAP-Request/\n
        \                          EAP-Type=EAP-TLS\n                           (TLS
        Start)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n    (TLS client_hello)->\n
        \                          <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS server_hello,\n                            TLS
        certificate,\n                  [TLS server_key_exchange,]\n                   TLS
        certificate_request,\n                   TLS server_hello_done)\n   EAP-Response/\n
        \  EAP-Type=EAP-TLS\n   (TLS Alert message) ->\n                           <-
        EAP-Failure\n                           (User Disconnected)\n"
      title: 2.1.3.  Termination
    - contents:
      - "2.1.4.  Privacy\n   EAP-TLS peer and server implementations MAY support privacy.\n
        \  Disclosure of the username is avoided by utilizing a privacy Network\n
        \  Access Identifier (NAI) [RFC4282] in the EAP-Response/Identity, and\n   transmitting
        the peer certificate within a TLS session providing\n   confidentiality.\n
        \  In order to avoid disclosing the peer username, an EAP-TLS peer\n   configured
        for privacy MUST negotiate a TLS ciphersuite supporting\n   confidentiality
        and MUST provide a client certificate list containing\n   no entries in response
        to the initial certificate_request from the\n   EAP-TLS server.\n   An EAP-TLS
        server supporting privacy MUST NOT treat a certificate\n   list containing
        no entries as a terminal condition; instead, it MUST\n   bring up the TLS
        session and then send a hello_request.  The\n   handshake then proceeds normally;
        the peer sends a client_hello and\n   the server replies with a server_hello,
        certificate,\n   server_key_exchange, certificate_request, server_hello_done,
        etc.\n   For the calculation of exported keying material (see Section 2.3),\n
        \  the master_secret derived within the second handshake is used.\n   An EAP-TLS
        peer supporting privacy MUST provide a certificate list\n   containing at
        least one entry in response to the subsequent\n   certificate_request sent
        by the server.  If the EAP-TLS server\n   supporting privacy does not receive
        a client certificate in response\n   to the subsequent certificate_request,
        then it MUST abort the\n   session.\n   EAP-TLS privacy support is designed
        to allow EAP-TLS peers that do\n   not support privacy to interoperate with
        EAP-TLS servers supporting\n   privacy.  EAP-TLS servers supporting privacy
        MUST request a client\n   certificate, and MUST be able to accept a client
        certificate offered\n   by the EAP-TLS peer, in order to preserve interoperability
        with EAP-\n   TLS peers that do not support privacy.\n   However, an EAP-TLS
        peer configured for privacy typically will not be\n   able to successfully
        authenticate with an EAP-TLS server that does\n   not support privacy, since
        such a server will typically treat the\n   refusal to provide a client certificate
        as a terminal error.  As a\n   result, unless authentication failure is considered
        preferable to\n   disclosure of the username, EAP-TLS peers SHOULD only be
        configured\n   for privacy on networks known to support it.\n   This is most
        easily achieved with EAP lower layers that support\n   network advertisement,
        so that the network and appropriate privacy\n   configuration can be determined.
        \ In order to determine the privacy\n   configuration on link layers (such
        as IEEE 802 wired networks) that\n   do not support network advertisement,
        it may be desirable to utilize\n   information provided in the server certificate
        (such as the subject\n   and subjectAltName fields) or within identity selection
        hints\n   [RFC4284] to determine the appropriate configuration.\n   In the
        case where the peer and server support privacy and mutual\n   authentication,
        the conversation will appear as follows:\n   Authenticating Peer     Authenticator\n
        \  -------------------     -------------\n                           <- EAP-Request/\n
        \                          Identity\n   EAP-Response/\n   Identity (Anonymous
        NAI) ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS Start)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n
        \  (TLS client_hello)->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS server_hello,\n                            TLS
        certificate,\n                    [TLS server_key_exchange,]\n                     TLS
        certificate_request,\n                        TLS server_hello_done)\n   EAP-Response/\n
        \  EAP-Type=EAP-TLS\n   (TLS certificate (no cert),\n    TLS client_key_exchange,\n
        \   TLS change_cipher_spec,\n    TLS finished) ->\n                           <-
        EAP-Request/\n                           EAP-Type=EAP-TLS\n                           (TLS
        change_cipher_spec,\n                             finished,\n                             hello_request)\n
        \  EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS client_hello)->\n                           <-
        EAP-Request/\n                           EAP-Type=EAP-TLS\n                           (TLS
        server_hello,\n                             TLS certificate,\n                     TLS
        server_key_exchange,\n                     TLS certificate_request,\n                        TLS
        server_hello_done)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n
        \   TLS client_key_exchange,\n    TLS certificate_verify,\n    TLS change_cipher_spec,\n
        \   TLS finished) ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS change_cipher_spec,\n                            TLS
        finished)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Success\n"
      title: 2.1.4.  Privacy
    - contents:
      - "2.1.5.  Fragmentation\n   A single TLS record may be up to 16384 octets in
        length, but a TLS\n   message may span multiple TLS records, and a TLS certificate
        message\n   may in principle be as long as 16 MB.  The group of EAP-TLS messages\n
        \  sent in a single round may thus be larger than the MTU size or the\n   maximum
        Remote Authentication Dail-In User Service (RADIUS) packet\n   size of 4096
        octets.  As a result, an EAP-TLS implementation MUST\n   provide its own support
        for fragmentation and reassembly.  However,\n   in order to ensure interoperability
        with existing implementations,\n   TLS handshake messages SHOULD NOT be fragmented
        into multiple TLS\n   records if they fit within a single TLS record.\n   In
        order to protect against reassembly lockup and denial-of-service\n   attacks,
        it may be desirable for an implementation to set a maximum\n   size for one
        such group of TLS messages.  Since a single certificate\n   is rarely longer
        than a few thousand octets, and no other field is\n   likely to be anywhere
        near as long, a reasonable choice of maximum\n   acceptable message length
        might be 64 KB.\n   Since EAP is a simple ACK-NAK protocol, fragmentation
        support can be\n   added in a simple manner.  In EAP, fragments that are lost
        or damaged\n   in transit will be retransmitted, and since sequencing information
        is\n   provided by the Identifier field in EAP, there is no need for a\n   fragment
        offset field as is provided in IPv4.\n   EAP-TLS fragmentation support is
        provided through addition of a flags\n   octet within the EAP-Response and
        EAP-Request packets, as well as a\n   TLS Message Length field of four octets.
        \ Flags include the Length\n   included (L), More fragments (M), and EAP-TLS
        Start (S) bits.  The L\n   flag is set to indicate the presence of the four-octet
        TLS Message\n   Length field, and MUST be set for the first fragment of a
        fragmented\n   TLS message or set of messages.  The M flag is set on all but
        the\n   last fragment.  The S flag is set only within the EAP-TLS start\n
        \  message sent from the EAP server to the peer.  The TLS Message Length\n
        \  field is four octets, and provides the total length of the TLS\n   message
        or set of messages that is being fragmented; this simplifies\n   buffer allocation.\n
        \  When an EAP-TLS peer receives an EAP-Request packet with the M bit\n   set,
        it MUST respond with an EAP-Response with EAP-Type=EAP-TLS and\n   no data.
        \ This serves as a fragment ACK.  The EAP server MUST wait\n   until it receives
        the EAP-Response before sending another fragment.\n   In order to prevent
        errors in processing of fragments, the EAP server\n   MUST increment the Identifier
        field for each fragment contained\n   within an EAP-Request, and the peer
        MUST include this Identifier\n   value in the fragment ACK contained within
        the EAP-Response.\n   Retransmitted fragments will contain the same Identifier
        value.\n   Similarly, when the EAP server receives an EAP-Response with the
        M\n   bit set, it MUST respond with an EAP-Request with EAP-Type=EAP-TLS\n
        \  and no data.  This serves as a fragment ACK.  The EAP peer MUST wait\n
        \  until it receives the EAP-Request before sending another fragment.\n   In
        order to prevent errors in the processing of fragments, the EAP\n   server
        MUST increment the Identifier value for each fragment ACK\n   contained within
        an EAP-Request, and the peer MUST include this\n   Identifier value in the
        subsequent fragment contained within an EAP-\n   Response.\n   In the case
        where the EAP-TLS mutual authentication is successful,\n   and fragmentation
        is required, the conversation will appear as\n   follows:\n   Authenticating
        Peer     Authenticator\n   -------------------     -------------\n                           <-
        EAP-Request/\n                           Identity\n   EAP-Response/\n   Identity
        (MyID) ->\n                           <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \                          (TLS Start, S bit set)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n
        \  (TLS client_hello)->\n                           <- EAP-Request/\n                              EAP-Type=EAP-TLS\n
        \                            (TLS server_hello,\n                               TLS
        certificate,\n                     [TLS server_key_exchange,]\n                       TLS
        certificate_request,\n                         TLS server_hello_done)\n                    (Fragment
        1: L, M bits set)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Request/\n                              EAP-Type=EAP-TLS\n                           (Fragment
        2: M bit set)\n   EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <-
        EAP-Request/\n                           EAP-Type=EAP-TLS\n                           (Fragment
        3)\n   EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n    TLS client_key_exchange,\n
        \   TLS certificate_verify,\n    TLS change_cipher_spec,\n    TLS finished)(Fragment
        1:\n    L, M bits set)->\n                            <- EAP-Request/\n                           EAP-Type=EAP-TLS\n
        \  EAP-Response/\n   EAP-Type=EAP-TLS\n   (Fragment 2)->\n                          <-
        EAP-Request/\n                           EAP-Type=EAP-TLS\n                           (TLS
        change_cipher_spec,\n                            TLS finished)\n   EAP-Response/\n
        \  EAP-Type=EAP-TLS ->\n                           <- EAP-Success\n"
      title: 2.1.5.  Fragmentation
    title: 2.1.  Overview of the EAP-TLS Conversation
  - contents:
    - "2.2.  Identity Verification\n   As noted in Section 5.1 of [RFC3748]:\n      It
      is RECOMMENDED that the Identity Response be used primarily for\n      routing
      purposes and selecting which EAP method to use.  EAP\n      Methods SHOULD include
      a method-specific mechanism for obtaining\n      the identity, so that they
      do not have to rely on the Identity\n      Response.\n   As part of the TLS
      negotiation, the server presents a certificate to\n   the peer, and if mutual
      authentication is requested, the peer\n   presents a certificate to the server.
      \ EAP-TLS therefore provides a\n   mechanism for determining both the peer identity
      (Peer-Id in\n   [KEYFRAME]) and server identity (Server-Id in [KEYFRAME]).  For\n
      \  details, see Section 5.2.\n   Since the identity presented in the EAP-Response/Identity
      need not be\n   related to the identity presented in the peer certificate, EAP-TLS\n
      \  implementations SHOULD NOT require that they be identical.  However,\n   if
      they are not identical, the identity presented in the EAP-\n   Response/Identity
      is unauthenticated information, and SHOULD NOT be\n   used for access control
      or accounting purposes.\n"
    title: 2.2.  Identity Verification
  - contents:
    - "2.3.  Key Hierarchy\n   Figure 1 illustrates the TLS Key Hierarchy, described
      in [RFC4346]\n   Section 6.3.  The derivation proceeds as follows:\n   master_secret
      = TLS-PRF-48(pre_master_secret, \"master secret\",\n                    client.random
      || server.random) key_block     =\n   TLS-PRF-X(master_secret, \"key expansion\",\n
      \                   server.random || client.random)\n   Where:\n   TLS-PRF-X
      =     TLS pseudo-random function defined in [RFC4346],\n                   computed
      to X octets.\n   In EAP-TLS, the MSK, EMSK, and Initialization Vector (IV) are
      derived\n   from the TLS master secret via a one-way function.  This ensures
      that\n   the TLS master secret cannot be derived from the MSK, EMSK, or IV\n
      \  unless the one-way function (TLS PRF) is broken.  Since the MSK and\n   EMSK
      are derived from the TLS master secret, if the TLS master secret\n   is compromised
      then the MSK and EMSK are also compromised.\n   The MSK is divided into two
      halves, corresponding to the \"Peer to\n   Authenticator Encryption Key\" (Enc-RECV-Key,
      32 octets) and\n   \"Authenticator to Peer Encryption Key\" (Enc-SEND-Key, 32
      octets).\n   The IV is a 64-octet quantity that is a known value; octets 0-31
      are\n   known as the \"Peer to Authenticator IV\" or RECV-IV, and octets 32-63\n
      \  are known as the \"Authenticator to Peer IV\", or SEND-IV.\n            |
      \                      | pre_master_secret       |\n      server|                       |
      \                        | client\n      Random|                       V                         |
      Random\n            |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n            |
      \    |                                     |     |\n            +---->|             master_secret
      \          |<----+\n            |     |               (TMS)                 |
      \    |\n            |     |                                     |     |\n            |
      \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n            |                       |
      \                        |\n            V                       V                         V\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                                                         |\n
      \     |                         key_block                       |\n      |                   label
      == \"key expansion\"              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \       |         |         |         |         |         |\n        | client
      \ | server  | client  | server  | client  | server\n        | MAC     | MAC
      \    | write   | write   | IV      | IV\n        |         |         |         |
      \        |         |\n        V         V         V         V         V         V\n
      \                 Figure 1 - TLS [RFC4346] Key Hierarchy\n   EAP-TLS derives
      exported keying material and parameters as follows:\n   Key_Material = TLS-PRF-128(master_secret,
      \"client EAP encryption\",\n                     client.random || server.random)\n
      \  MSK          = Key_Material(0,63)\n   EMSK         = Key_Material(64,127)\n
      \  IV           = TLS-PRF-64(\"\", \"client EAP encryption\",\n                     client.random
      || server.random)\n   Enc-RECV-Key = MSK(0,31) = Peer to Authenticator Encryption
      Key\n                  (MS-MPPE-Recv-Key in [RFC2548]).  Also known as the\n
      \                 PMK in [IEEE-802.11].\n   Enc-SEND-Key = MSK(32,63) = Authenticator
      to Peer Encryption Key\n                  (MS-MPPE-Send-Key in [RFC2548])\n
      \  RECV-IV      = IV(0,31) = Peer to Authenticator Initialization Vector\n   SEND-IV
      \     = IV(32,63) = Authenticator to Peer Initialization\n                              Vector\n
      \  Session-Id   = 0x0D || client.random || server.random\n   Where:\n   Key_Material(W,Z)
      = Octets W through Z inclusive of the key material.\n   IV(W,Z)           =
      Octets W through Z inclusive of the IV.\n   MSK(W,Z)          = Octets W through
      Z inclusive of the MSK.\n   EMSK(W,Z)         = Octets W through Z inclusive
      of the EMSK.\n   TLS-PRF-X         = TLS PRF function computed to X octets.\n
      \  client.random     = Nonce generated by the TLS client.\n   server.random
      \    = Nonce generated by the TLS server.\n         |                       |
      pre_master_secret       |\n   server|                       |                         |
      client\n   Random|                       V                         | Random\n
      \        |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |\n         |     |
      \                                    |     |\n         +---->|             master_secret
      \          |<----+\n         |     |                                     |     |\n
      \        |     |                                     |     |\n         |     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \    |\n         |                       |                         |\n         V
      \                      V                         V\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                         |\n   |                        MSK,
      EMSK                        |\n   |               label == \"client EAP encryption\"
      \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |             |             |\n     | MSK(0,31)   | MSK(32,63)  | EMSK(0,63)\n
      \    |             |             |\n     |             |             |\n     V
      \            V             V\n                     Figure 2 - EAP-TLS Key Hierarchy\n
      \  The use of these keys is specific to the lower layer, as described in\n   Section
      2.1 of [KEYFRAME].\n"
    title: 2.3.  Key Hierarchy
  - contents:
    - "2.4.  Ciphersuite and Compression Negotiation\n   EAP-TLS implementations MUST
      support TLS v1.0.\n   EAP-TLS implementations need not necessarily support all
      TLS\n   ciphersuites listed in [RFC4346].  Not all TLS ciphersuites are\n   supported
      by available TLS tool kits, and licenses may be required in\n   some cases.\n
      \  To ensure interoperability, EAP-TLS peers and servers MUST support\n   the
      TLS [RFC4346] mandatory-to-implement ciphersuite:\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\n
      \  EAP-TLS peers and servers SHOULD also support and be able to\n   negotiate
      the following TLS ciphersuites:\n      TLS_RSA_WITH_RC4_128_SHA [RFC4346]\n
      \     TLS_RSA_WITH_AES_128_CBC_SHA [RFC3268]\n   In addition, EAP-TLS servers
      SHOULD support and be able to negotiate\n   the following TLS ciphersuite:\n
      \     TLS_RSA_WITH_RC4_128_MD5 [RFC4346]\n   Since TLS supports ciphersuite
      negotiation, peers completing the TLS\n   negotiation will also have selected
      a ciphersuite, which includes\n   encryption and hashing methods.  Since the
      ciphersuite negotiated\n   within EAP-TLS applies only to the EAP conversation,
      TLS ciphersuite\n   negotiation MUST NOT be used to negotiate the ciphersuites
      used to\n   secure data.\n   TLS also supports compression as well as ciphersuite
      negotiation.\n   However, during the EAP-TLS conversation the EAP peer and server
      MUST\n   NOT request or negotiate compression.\n"
    title: 2.4.  Ciphersuite and Compression Negotiation
  title: 2.  Protocol Overview
- contents:
  - '3.  Detailed Description of the EAP-TLS Protocol

    '
  - contents:
    - "3.1.  EAP-TLS Request Packet\n   A summary of the EAP-TLS Request packet format
      is shown below.  The\n   fields are transmitted from left to right.\n   0                   1
      \                  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
      6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |     Flags     |      TLS Message Length\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     TLS Message Length        |       TLS Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Code\n      1\n   Identifier\n      The Identifier field is one octet and
      aids in matching responses\n      with requests.  The Identifier field MUST
      be changed on each\n      Request packet.\n   Length\n      The Length field
      is two octets and indicates the length of the EAP\n      packet including the
      Code, Identifier, Length, Type, and Data\n      fields.  Octets outside the
      range of the Length field should be\n      treated as Data Link Layer padding
      and MUST be ignored on\n      reception.\n   Type\n      13 -- EAP-TLS\n   Flags\n
      \     0 1 2 3 4 5 6 7 8\n      +-+-+-+-+-+-+-+-+\n      |L M S R R R R R|\n
      \     +-+-+-+-+-+-+-+-+\n      L = Length included\n      M = More fragments\n
      \     S = EAP-TLS start\n      R = Reserved\n      The L bit (length included)
      is set to indicate the presence of the\n      four-octet TLS Message Length
      field, and MUST be set for the first\n      fragment of a fragmented TLS message
      or set of messages.  The M\n      bit (more fragments) is set on all but the
      last fragment.  The S\n      bit (EAP-TLS start) is set in an EAP-TLS Start
      message.  This\n      differentiates the EAP-TLS Start message from a fragment\n
      \     acknowledgment.  Implementations of this specification MUST set\n      the
      reserved bits to zero, and MUST ignore them on reception.\n   TLS Message Length\n
      \     The TLS Message Length field is four octets, and is present only\n      if
      the L bit is set.  This field provides the total length of the\n      TLS message
      or set of messages that is being fragmented.\n   TLS data\n      The TLS data
      consists of the encapsulated TLS packet in TLS record\n      format.\n"
    title: 3.1.  EAP-TLS Request Packet
  - contents:
    - "3.2.  EAP-TLS Response Packet\n      A summary of the EAP-TLS Response packet
      format is shown below.\n      The fields are transmitted from left to right.\n
      \     0                   1                   2                   3\n      0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Code      |   Identifier  |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Type      |     Flags     |      TLS Message Length\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     TLS Message Length        |       TLS Data...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Code\n      2\n   Identifier\n      The Identifier field is one octet and
      MUST match the Identifier\n      field from the corresponding request.\n   Length\n
      \     The Length field is two octets and indicates the length of the EAP\n      packet
      including the Code, Identifier, Length, Type, and Data\n      fields.  Octets
      outside the range of the Length field should be\n      treated as Data Link
      Layer padding and MUST be ignored on\n      reception.\n   Type\n      13 --
      EAP-TLS\n   Flags\n      0 1 2 3 4 5 6 7 8\n      +-+-+-+-+-+-+-+-+\n      |L
      M R R R R R R|\n      +-+-+-+-+-+-+-+-+\n      L = Length included\n      M
      = More fragments\n      R = Reserved\n      The L bit (length included) is set
      to indicate the presence of the\n      four-octet TLS Message Length field,
      and MUST be set for the first\n      fragment of a fragmented TLS message or
      set of messages.  The M\n      bit (more fragments) is set on all but the last
      fragment.\n      Implementations of this specification MUST set the reserved
      bits\n      to zero, and MUST ignore them on reception.\n   TLS Message Length\n
      \     The TLS Message Length field is four octets, and is present only\n      if
      the L bit is set.  This field provides the total length of the\n      TLS message
      or set of messages that is being fragmented.\n   TLS data\n      The TLS data
      consists of the encapsulated TLS packet in TLS record\n      format.\n"
    title: 3.2.  EAP-TLS Response Packet
  title: 3.  Detailed Description of the EAP-TLS Protocol
- contents:
  - "4.  IANA Considerations\n   IANA has allocated EAP Type 13 for EAP-TLS.  The
    allocation has been\n   updated to reference this document.\n"
  title: 4.  IANA Considerations
- contents:
  - '5.  Security Considerations

    '
  - contents:
    - "5.1.  Security Claims\n   EAP security claims are defined in Section 7.2.1
      of [RFC3748].  The\n   security claims for EAP-TLS are as follows:\n   Auth.
      mechanism:           Certificates\n   Ciphersuite negotiation:   Yes [4]\n   Mutual
      authentication:     Yes [1]\n   Integrity protection:      Yes [1]\n   Replay
      protection:         Yes [1]\n   Confidentiality:           Yes [2]\n   Key derivation:
      \           Yes\n   Key strength:              [3]\n   Dictionary attack prot.:
      \  Yes\n   Fast reconnect:            Yes\n   Crypt. binding:            N/A\n
      \  Session independence:      Yes [1]\n   Fragmentation:             Yes\n   Channel
      binding:           No\n   Notes\n   -----\n   [1] A formal proof of the security
      of EAP-TLS when used with\n   [IEEE-802.11] is provided in [He].  This proof
      relies on the\n   assumption that the private key pairs used by the EAP peer
      and server\n   are not shared with other parties or applications.  For example,
      a\n   backend authentication server supporting EAP-TLS SHOULD NOT utilize\n
      \  the same certificate with https.\n   [2] Privacy is an optional feature described
      in Section 2.1.4.\n   [3] Section 5 of BCP 86 [RFC3766] offers advice on the
      required RSA\n   or Diffie-Hellman (DH) module and Digital Signature Algorithm
      (DSA)\n   subgroup size in bits, for a given level of attack resistance in\n
      \  bits.  For example, a 2048-bit RSA key is recommended to provide\n   128-bit
      equivalent key strength.  The National Institute of Standards\n   and Technology
      (NIST) also offers advice on appropriate key sizes in\n   [SP800-57].\n   [4]
      EAP-TLS inherits the secure ciphersuite negotiation features of\n   TLS, including
      key derivation function negotiation when utilized with\n   TLS v1.2 [RFC4346bis].\n"
    title: 5.1.  Security Claims
  - contents:
    - "5.2.  Peer and Server Identities\n   The EAP-TLS peer name (Peer-Id) represents
      the identity to be used\n   for access control and accounting purposes.  The
      Server-Id represents\n   the identity of the EAP server.  Together the Peer-Id
      and Server-Id\n   name the entities involved in deriving the MSK/EMSK.\n   In
      EAP-TLS, the Peer-Id and Server-Id are determined from the subject\n   or subjectAltName
      fields in the peer and server certificates.  For\n   details, see Section 4.1.2.6
      of [RFC3280].  Where the subjectAltName\n   field is present in the peer or
      server certificate, the Peer-Id or\n   Server-Id MUST be set to the contents
      of the subjectAltName.  If\n   subject naming information is present only in
      the subjectAltName\n   extension of a peer or server certificate, then the subject
      field\n   MUST be an empty sequence and the subjectAltName extension MUST be\n
      \  critical.\n   Where the peer identity represents a host, a subjectAltName
      of type\n   dnsName SHOULD be present in the peer certificate.  Where the peer\n
      \  identity represents a user and not a resource, a subjectAltName of\n   type
      rfc822Name SHOULD be used, conforming to the grammar for the\n   Network Access
      Identifier (NAI) defined in Section 2.1 of [RFC4282].\n   If a dnsName or rfc822Name
      are not available, other field types (for\n   example, a subjectAltName of type
      ipAddress or\n   uniformResourceIdentifier) MAY be used.\n   A server identity
      will typically represent a host, not a user or a\n   resource.  As a result,
      a subjectAltName of type dnsName SHOULD be\n   present in the server certificate.
      \ If a dnsName is not available\n   other field types (for example, a subjectAltName
      of type ipAddress or\n   uniformResourceIdentifier) MAY be used.\n   Conforming
      implementations generating new certificates with Network\n   Access Identifiers
      (NAIs) MUST use the rfc822Name in the subject\n   alternative name field to
      describe such identities.  The use of the\n   subject name field to contain
      an emailAddress Relative Distinguished\n   Name (RDN) is deprecated, and MUST
      NOT be used.  The subject name\n   field MAY contain other RDNs for representing
      the subject's identity.\n   Where it is non-empty, the subject name field MUST
      contain an X.500\n   distinguished name (DN).  If subject naming information
      is present\n   only in the subject name field of a peer certificate and the
      peer\n   identity represents a host or device, the subject name field SHOULD\n
      \  contain a CommonName (CN) RDN or serialNumber RDN.  If subject naming\n   information
      is present only in the subject name field of a server\n   certificate, then
      the subject name field SHOULD contain a CN RDN or\n   serialNumber RDN.\n   It
      is possible for more than one subjectAltName field to be present\n   in a peer
      or server certificate in addition to an empty or non-empty\n   subject distinguished
      name.  EAP-TLS implementations supporting\n   export of the Peer-Id and Server-Id
      SHOULD export all the\n   subjectAltName fields within Peer-Ids or Server-Ids,
      and SHOULD also\n   export a non-empty subject distinguished name field within
      the Peer-\n   Ids or Server-Ids.  All of the exported Peer-Ids and Server-Ids
      are\n   considered valid.\n   EAP-TLS implementations supporting export of the
      Peer-Id and Server-\n   Id SHOULD export Peer-Ids and Server-Ids in the same
      order in which\n   they appear within the certificate.  Such canonical ordering
      would\n   aid in comparison operations and would enable using those identifiers\n
      \  for key derivation if that is deemed useful.  However, the ordering\n   of
      fields within the certificate SHOULD NOT be used for access\n   control.\n"
    title: 5.2.  Peer and Server Identities
  - contents:
    - "5.3.  Certificate Validation\n   Since the EAP-TLS server is typically connected
      to the Internet, it\n   SHOULD support validating the peer certificate using
      RFC 3280\n   [RFC3280] compliant path validation, including the ability to\n
      \  retrieve intermediate certificates that may be necessary to validate\n   the
      peer certificate.  For details, see Section 4.2.2.1 of [RFC3280].\n   Where
      the EAP-TLS server is unable to retrieve intermediate\n   certificates, either
      it will need to be pre-configured with the\n   necessary intermediate certificates
      to complete path validation or it\n   will rely on the EAP-TLS peer to provide
      this information as part of\n   the TLS handshake (see Section 7.4.6 of [RFC4346]).\n
      \  In contrast to the EAP-TLS server, the EAP-TLS peer may not have\n   Internet
      connectivity.  Therefore, the EAP-TLS server SHOULD provide\n   its entire certificate
      chain minus the root to facilitate certificate\n   validation by the peer.  The
      EAP-TLS peer SHOULD support validating\n   the server certificate using RFC
      3280 [RFC3280] compliant path\n   validation.\n   Once a TLS session is established,
      EAP-TLS peer and server\n   implementations MUST validate that the identities
      represented in the\n   certificate are appropriate and authorized for use with
      EAP-TLS.  The\n   authorization process makes use of the contents of the certificates\n
      \  as well as other contextual information.  While authorization\n   requirements
      will vary from deployment to deployment, it is\n   RECOMMENDED that implementations
      be able to authorize based on the\n   EAP-TLS Peer-Id and Server-Id determined
      as described in Section 5.2.\n   In the case of the EAP-TLS peer, this involves
      ensuring that the\n   certificate presented by the EAP-TLS server was intended
      to be used\n   as a server certificate.  Implementations SHOULD use the Extended
      Key\n   Usage (see Section 4.2.1.13 of [RFC3280]) extension and ensure that\n
      \  at least one of the following is true:\n   1) The certificate issuer included
      no Extended Key Usage identifiers\n      in the certificate.\n   2) The issuer
      included the anyExtendedKeyUsage identifier in the\n      certificate (see Section
      4.2.1.13 of [RFC3280]).\n   3) The issuer included the id-kp-serverAuth identifier
      in the\n      certificate (see Section 4.2.1.13 [RFC3280]).\n   When performing
      this comparison, implementations MUST follow the\n   validation rules specified
      in Section 3.1 of [RFC2818].  In the case\n   of the server, this involves ensuring
      the certificate presented by\n   the EAP-TLS peer was intended to be used as
      a client certificate.\n   Implementations SHOULD use the Extended Key Usage
      (see Section\n   4.2.1.13 [RFC3280]) extension and ensure that at least one
      of the\n   following is true:\n   1) The certificate issuer included no Extended
      Key Usage identifiers\n      in the certificate.\n   2) The issuer included
      the anyExtendedKeyUsage identifier in the\n      certificate (see Section 4.2.1.13
      of [RFC3280]).\n   3) The issuer included the id-kp-clientAuth identifier in
      the\n      certificate (see Section 4.2.1.13 of [RFC3280]).\n"
    title: 5.3.  Certificate Validation
  - contents:
    - "5.4.  Certificate Revocation\n   Certificates are long-lived assertions of
      identity.  Therefore, it is\n   important for EAP-TLS implementations to be
      capable of checking\n   whether these assertions have been revoked.\n   EAP-TLS
      peer and server implementations MUST support the use of\n   Certificate Revocation
      Lists (CRLs); for details, see Section 3.3 of\n   [RFC3280].  EAP-TLS peer and
      server implementations SHOULD also\n   support the Online Certificate Status
      Protocol (OCSP), described in\n   \"X.509 Internet Public Key Infrastructure
      Online Certificate Status\n   Protocol - OCSP\" [RFC2560].  OCSP messages are
      typically much smaller\n   than CRLs, which can shorten connection times especially
      in\n   bandwidth-constrained environments.  While EAP-TLS servers are\n   typically
      connected to the Internet during the EAP conversation, an\n   EAP-TLS peer may
      not have Internet connectivity until authentication\n   completes.\n   In the
      case where the peer is initiating a voluntary Layer 2 tunnel\n   using PPTP
      [RFC2637] or L2TP [RFC2661], the peer will typically\n   already have a PPP
      interface and Internet connectivity established at\n   the time of tunnel initiation.\n
      \  However, in the case where the EAP-TLS peer is attempting to obtain\n   network
      access, it will not have network connectivity and is\n   therefore not capable
      of checking for certificate revocation until\n   after authentication completes
      and network connectivity is available.\n   For this reason, EAP-TLS peers and
      servers SHOULD implement\n   Certificate Status Request messages, as described
      in \"Transport Layer\n   Security (TLS) Extensions\", Section 3.6 of [RFC4366].
      \ To enable\n   revocation checking in situations where servers do not support\n
      \  Certificate Status Request messages and network connectivity is not\n   available
      prior to authentication completion, peer implementations\n   MUST also support
      checking for certificate revocation after\n   authentication completes and network
      connectivity is available, and\n   they SHOULD utilize this capability by default.\n"
    title: 5.4.  Certificate Revocation
  - contents:
    - "5.5.  Packet Modification Attacks\n   The integrity protection of EAP-TLS packets
      does not extend to the\n   EAP header fields (Code, Identifier, Length) or the
      Type or Flags\n   fields.  As a result, these fields can be modified by an attacker.\n
      \  In most cases, modification of the Code or Identifier fields will\n   only
      result in a denial-of-service attack.  However, an attacker can\n   add additional
      data to an EAP-TLS packet so as to cause it to be\n   longer than implied by
      the Length field.  EAP peers, authenticators,\n   or servers that do not check
      for this could be vulnerable to a buffer\n   overrun.\n   It is also possible
      for an attacker to modify the Type or Flags\n   fields.  By modifying the Type
      field, an attacker could cause one\n   TLS-based EAP method to be negotiated
      instead of another.  For\n   example, the EAP-TLS Type field (13) could be changed
      to indicate\n   another TLS-based EAP method.  Unless the alternative TLS-based
      EAP\n   method utilizes a different key derivation formula, it is possible\n
      \  that an EAP method conversation altered by a man-in-the-middle could\n   run
      all the way to completion without detection.  Unless the\n   ciphersuite selection
      policies are identical for all TLS-based EAP\n   methods utilizing the same
      key derivation formula, it may be possible\n   for an attacker to mount a successful
      downgrade attack, causing the\n   peer to utilize an inferior ciphersuite or
      TLS-based EAP method.\n"
    title: 5.5.  Packet Modification Attacks
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for
      use in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC2560]      Myers, M., Ankney, R., Malpani, A., Galperin,
      S., and\n                  C. Adams, \"X.509 Internet Public Key Infrastructure\n
      \                 Online Certificate Status Protocol - OCSP\", RFC 2560,\n                  June
      1999.\n   [RFC2818]      Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n
      \  [RFC3268]      Chown, P., \"Advanced Encryption Standard (AES)\n                  Ciphersuites
      for Transport Layer Security (TLS)\", RFC\n                  3268, June 2002.\n
      \  [RFC3280]      Housley, R., Polk, W., Ford, W., and D. Solo,\n                  \"Internet
      X.509 Public Key Infrastructure Certificate\n                  and Certificate
      Revocation List (CRL) Profile\", RFC\n                  3280, April 2002.\n
      \  [RFC3748]      Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and\n                  H.
      Levkowetz, Ed., \"Extensible Authentication Protocol\n                  (EAP)\",
      RFC 3748, June 2004.\n   [RFC4282]      Aboba, B., Beadles, M., Arkko, J., and
      P. Eronen, \"The\n                  Network Access Identifier\", RFC 4282, December
      2005.\n   [RFC4346]      Dierks, T. and E. Rescorla, \"The Transport Layer\n
      \                 Security (TLS) Protocol Version 1.1\", RFC 4346, April\n                  2006.\n
      \  [RFC4366]      Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen,\n                  J.,
      and T. Wright, \"Transport Layer Security (TLS)\n                  Extensions\",
      RFC 4366, April 2006.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [IEEE-802.1X]  Institute of Electrical and
      Electronics Engineers,\n                  \"Local and Metropolitan Area Networks:
      Port-Based\n                  Network Access Control\", IEEE Standard 802.1X-2004,\n
      \                 December 2004.\n   [IEEE-802.11]  Information technology -
      Telecommunications and\n                  information exchange between systems
      - Local and\n                  metropolitan area networks - Specific Requirements\n
      \                 Part 11:  Wireless LAN Medium Access Control (MAC) and\n                  Physical
      Layer (PHY) Specifications, IEEE Std.\n                  802.11-2007, 2007.\n
      \  [IEEE-802.16e] Institute of Electrical and Electronics Engineers,\n                  \"IEEE
      Standard for Local and Metropolitan Area\n                  Networks: Part 16:
      Air Interface for Fixed and Mobile\n                  Broadband Wireless Access
      Systems: Amendment for\n                  Physical and Medium Access Control
      Layers for Combined\n                  Fixed and Mobile Operations in Licensed
      Bands\", IEEE\n                  802.16e, August 2005.\n   [He]           He,
      C., Sundararajan, M., Datta, A., Derek, A. and J.\n                  Mitchell,
      \"A Modular Correctness Proof of IEEE 802.11i\n                  and TLS\",
      CCS '05, November 7-11, 2005, Alexandria,\n                  Virginia, USA\n
      \  [KEYFRAME]     Aboba, B., Simon, D. and P. Eronen, \"Extensible\n                  Authentication
      Protocol (EAP) Key Management\n                  Framework\", Work in Progress,
      November 2007.\n   [RFC1661]      Simpson, W., Ed., \"The Point-to-Point Protocol
      (PPP)\",\n                  STD 51, RFC 1661, July 1994.\n   [RFC2548]      Zorn,
      G., \"Microsoft Vendor-specific RADIUS\n                  Attributes\", RFC
      2548, March 1999.\n   [RFC2637]      Hamzeh, K., Pall, G., Verthein, W., Taarud,
      J.,\n                  Little, W., and G. Zorn, \"Point-to-Point Tunneling\n
      \                 Protocol (PPTP)\", RFC 2637, July 1999.\n   [RFC2661]      Townsley,
      W., Valencia, A., Rubens, A., Pall, G.,\n                  Zorn, G., and B.
      Palter, \"Layer Two Tunneling Protocol\n                  \"L2TP\"\", RFC 2661,
      August 1999.\n   [RFC2716]      Aboba, B. and D. Simon, \"PPP EAP TLS Authentication\n
      \                 Protocol\", RFC 2716, October 1999.\n   [RFC3766]      Orman,
      H. and P. Hoffman, \"Determining Strengths For\n                  Public Keys
      Used For Exchanging Symmetric Keys\", BCP\n                  86, RFC 3766, April
      2004.\n   [RFC4017]      Stanley, D., Walker, J., and B. Aboba, \"Extensible\n
      \                 Authentication Protocol (EAP) Method Requirements for\n                  Wireless
      LANs\", RFC 4017, March 2005.\n   [RFC4284]      Adrangi, F., Lortz, V., Bari,
      F., and P. Eronen,\n                  \"Identity Selection Hints for the Extensible\n
      \                 Authentication Protocol (EAP)\", RFC 4284, January\n                  2006.\n
      \  [SP800-57]     National Institute of Standards and Technology,\n                  \"Recommendation
      for Key Management\", Special\n                  Publication 800-57, May 2006.\n
      \  [RFC4346bis]   Dierks, T. and E. Rescorla, \"The TLS Protocol Version\n                  1.2\",
      Work in Progress, February 2008.\n   [UNAUTH]       Schulzrinne. H., McCann,
      S., Bajko, G. and H.\n                  Tschofenig, \"Extensions to the Emergency
      Services\n                  Architecture for dealing with Unauthenticated and\n
      \                 Unauthorized Devices\", Work in Progress, November\n                  2007.\n"
    - "Acknowledgments\n   Thanks to Terence Spies, Mudit Goel, Anthony Leibovitz,
      and Narendra\n   Gidwani of Microsoft, Glen Zorn of NetCube, Joe Salowey of
      Cisco, and\n   Pasi Eronen of Nokia for useful discussions of this problem space.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A -- Changes from RFC 2716\n   This appendix lists the major changes
    between [RFC2716] and this\n   document.  Minor changes, including style, grammar,
    spelling, and\n   editorial changes, are not mentioned here.\n   o  As EAP is
    now in use with a variety of lower layers, not just PPP\n      for which it was
    first designed, mention of PPP is restricted to\n      situations relating to
    PPP-specific behavior and reference is made\n      to other lower layers such
    as IEEE 802.11, IEEE 802.16, etc.\n   o  The document now cites TLS v1.1 as a
    normative reference (Sections\n      1 and 6.1).\n   o  The terminology section
    has been updated to reflect definitions\n      from [RFC3748] (Section 1.2), and
    the EAP Key Management Framework\n      [KEYFRAME] (Section 1.2).\n   o  Use for
    peer unauthenticated access is clarified (Section 2.1.1).\n   o  Privacy is supported
    as an optional feature (Section 2.1.4).\n   o  It is no longer recommended that
    the identity presented in the\n      EAP-Response/Identity be compared to the
    identity provided in the\n      peer certificate (Section 2.2).\n   o  The EAP-TLS
    key hierarchy is defined, using terminology from\n      [RFC3748].  This includes
    formulas for the computation of TEKs as\n      well as the MSK, EMSK, IV, and
    Session-Id (Section 2.3).\n   o  Mandatory and recommended TLS ciphersuites are
    provided.  The use\n      of TLS ciphersuite negotiation for determining the lower
    layer\n      ciphersuite is prohibited (Section 2.4).\n   o  The Start bit is
    not set within an EAP-Response packet (Section\n      3.2).\n   o  A section on
    security claims has been added and advice on key\n      strength is provided (Section
    5.1).\n   o  The Peer-Id and Server-Id are defined (Section 5.2), and\n      requirements
    for certificate validation (Section 5.3) and\n      revocation (Section 5.4) are
    provided.\n   o  Packet modification attacks are described (Section 5.5).\n   o
    \ The examples have been updated to reflect typical messages sent in\n      the
    described scenarios.  For example, where mutual authentication\n      is performed,
    the EAP-TLS server is shown to request a client\n      certificate and the peer
    is shown to provide a certificate_verify\n      message.  A privacy example is
    provided, and two faulty examples\n      of session resume failure were removed.\n"
  title: Appendix A -- Changes from RFC 2716
- contents:
  - "Authors' Addresses\n   Dan Simon\n   Microsoft Corporation\n   One Microsoft
    Way\n   Redmond, WA 98052-6399\n   Phone: +1 425 882 8080\n   Fax:   +1 425 936
    7329\n   EMail: dansimon@microsoft.com\n   Bernard Aboba\n   Microsoft Corporation\n
    \  One Microsoft Way\n   Redmond, WA 98052-6399\n   Phone: +1 425 706 6605\n   Fax:
    \  +1 425 936 7329\n   EMail: bernarda@microsoft.com\n   Ryan Hurst\n   Microsoft
    Corporation\n   One Microsoft Way\n   Redmond, WA 98052-6399\n   Phone: +1 425
    882 8080\n   Fax:   +1 425 936 7329\n   EMail: rmh@microsoft.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
