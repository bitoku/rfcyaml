- title: __initial_text__
  contents:
  - '         Resource Reservation Protocol (RSVP) Proxy Approaches

    '
- title: Abstract
  contents:
  - "Abstract\n   The Resource Reservation Protocol (RSVP) can be used to make end-to-\n\
    \   end resource reservations in an IP network in order to guarantee the\n   quality\
    \ of service required by certain flows.  RSVP assumes that both\n   the data sender\
    \ and receiver of a given flow take part in RSVP\n   signaling.  Yet, there are\
    \ use cases where resource reservation is\n   required, but the receiver, the\
    \ sender, or both, is not RSVP-capable.\n   This document presents RSVP proxy\
    \ behaviors allowing RSVP routers to\n   initiate or terminate RSVP signaling\
    \ on behalf of a receiver or a\n   sender that is not RSVP-capable.  This allows\
    \ resource reservations\n   to be established on a critical subset of the end-to-end\
    \ path.  This\n   document reviews conceptual approaches for deploying RSVP proxies\
    \ and\n   discusses how RSVP reservations can be synchronized with application\n\
    \   requirements, despite the sender, receiver, or both not participating\n  \
    \ in RSVP.  This document also points out where extensions to RSVP (or\n   to\
    \ other protocols) may be needed for deployment of a given RSVP\n   proxy approach.\
    \  However, such extensions are outside the scope of\n   this document.  Finally,\
    \ practical use cases for RSVP proxy are\n   described.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5945.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. RSVP Proxy Behaviors ............................................6\n  \
    \    2.1. RSVP Receiver Proxy ........................................6\n    \
    \  2.2. RSVP Sender Proxy ..........................................7\n   3. Terminology\
    \ .....................................................7\n   4. RSVP Proxy Approaches\
    \ ...........................................9\n      4.1. Path-Triggered Receiver\
    \ Proxy ..............................9\n           4.1.1. Mechanisms for Maximizing\
    \ the Reservation Span .....11\n      4.2. Path-Triggered Sender Proxy for Reverse\
    \ Direction .........15\n      4.3. Inspection-Triggered Proxy ................................18\n\
    \      4.4. STUN-Triggered Proxy ......................................21\n  \
    \    4.5. Application_Entity-Controlled Proxy .......................23\n    \
    \       4.5.1. Application_Entity-Controlled Sender Proxy\n                  Using\
    \ \"RSVP over GRE\" ..............................26\n           4.5.2. Application_Entity-Controlled\
    \ Proxy via Co-Location 28\n      4.6. Policy_Server-Controlled Proxy ............................29\n\
    \      4.7. RSVP-Signaling-Triggered Proxy ............................32\n  \
    \    4.8. Reachability Considerations ...............................33\n   5.\
    \ Security Considerations ........................................34\n   6. Acknowledgments\
    \ ................................................36\n   7. References .....................................................36\n\
    \      7.1. Normative References ......................................36\n  \
    \    7.2. Informative References ....................................37\n   Appendix\
    \ A.  Use Cases for RSVP Proxies ...........................40\n     A.1.  RSVP-Based\
    \ VoD Admission Control in Broadband\n           Aggregation Networks ......................................40\n\
    \     A.2.  RSVP-Based Voice/Video Connection Admission Control\n           (CAC)\
    \ in Enterprise WAN ...................................43\n     A.3.  RSVP Proxies\
    \ for Mobile Access Networks ...................44\n     A.4.  RSVP Proxies for\
    \ Reservations in the Presence of IPsec\n           Gateways ..................................................46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Guaranteed Quality of Service (QoS) for some applications\
    \ with tight\n   requirements (such as voice or video) may be achieved by reserving\n\
    \   resources in each node on the end-to-end path.  The main IETF\n   protocol\
    \ for these resource reservations is the Resource Reservation\n   Protocol (RSVP),\
    \ as specified in [RFC2205].  RSVP does not require\n   that all intermediate\
    \ nodes support RSVP; however, it assumes that\n   both the sender and the receiver\
    \ of the data flow support RSVP.\n   There are environments where it would be\
    \ useful to be able to reserve\n   resources for a flow on at least a subset of\
    \ the flow path even when\n   the sender or the receiver (or both) is not RSVP-capable\
    \ (for\n   example, from the sender to the network edge, or from edge to edge,\n\
    \   or from the network edge to the receiver).\n   Since the data sender or receiver\
    \ may be unaware of RSVP, there are\n   two types of RSVP proxies.  When the sender\
    \ is not using RSVP, an\n   entity in the network must operate on behalf of the\
    \ data sender, and\n   in particular, generate RSVP Path messages, and eventually\
    \ receive,\n   process, and sink Resv messages.  We refer to this entity as the\
    \ RSVP\n   Sender Proxy.  When the receiver is not using RSVP, an entity in the\n\
    \   network must receive Path messages sent by a data sender (or by an\n   RSVP\
    \ Sender Proxy), sink those, and return Resv messages on behalf of\n   the data\
    \ receiver(s).  We refer to this entity as the RSVP Receiver\n   Proxy.  The RSVP\
    \ proxies need to be on the data path in order to\n   establish the RSVP reservation;\
    \ note, however, that some of the\n   approaches described in this document allow\
    \ the RSVP proxies to be\n   controlled/triggered by an off-path entity.\n   The\
    \ flow sender and receiver generally have at least some (if not\n   full) awareness\
    \ of the application producing or consuming that flow.\n   Hence, the sender and\
    \ receiver are in a natural position to\n   synchronize the establishment, maintenance,\
    \ and teardown of the RSVP\n   reservation with the application requirements.\
    \  Similarly, they are\n   in a natural position to determine the characteristics\
    \ of the\n   reservation (bandwidth, QoS service, etc.) that best match the\n\
    \   application requirements.  For example, before completing the\n   establishment\
    \ of a multimedia session, the endpoints may decide to\n   establish RSVP reservations\
    \ for the corresponding flows.  Similarly,\n   when the multimedia session is\
    \ torn down, the endpoints may decide to\n   tear down the corresponding RSVP\
    \ reservations.  For instance,\n   [RFC3312] discusses how RSVP reservations can\
    \ be very tightly\n   synchronized by endpoints that uses the Session Initiation\
    \ Protocol\n   (SIP) ([RFC3261]) for session control.\n   When RSVP reservation\
    \ establishment, maintenance, and teardown are to\n   be handled by RSVP proxies\
    \ on behalf of an RSVP sender or receiver, a\n   key challenge for the RSVP proxy\
    \ is to determine when the RSVP\n   reservations need to be established, maintained,\
    \ and torn down, and\n   to determine what the characteristics are (bandwidth,\
    \ QoS, etc.) of\n   the required RSVP reservations matching the application requirements.\n\
    \   We refer to this problem as the synchronization of RSVP reservations\n   with\
    \ application-level requirements.\n   The IETF Next Steps in Signaling (NSIS)\
    \ working group has specified a\n   new QoS signaling protocol: the QoS NSIS Signaling\
    \ Layer Protocol\n   (NSLP) ([RFC5974]).  This protocol also includes the notion\
    \ of proxy\n   operation, and terminating QoS signaling on nodes that are not\
    \ the\n   actual data senders or receivers (see Section 4.8, \"Proxy Mode\", of\n\
    \   [RFC5974].  This is the same concept as the proxy operation for RSVP\n   discussed\
    \ in this document.  One difference, though, is that the NSIS\n   framework does\
    \ not consider multicast resource reservations, which\n   RSVP provides today.\n\
    \   Section 2 introduces the notion of RSVP Sender Proxy and RSVP\n   Receiver\
    \ Proxy.  Section 3 defines useful terminology.  Section 4\n   then presents several\
    \ fundamental RSVP proxy approaches, discussing\n   how they achieve the necessary\
    \ synchronization of RSVP reservations\n   with application-level requirements.\
    \  Appendix A includes more\n   detailed use cases for the proxies in various\
    \ real-life deployment\n   environments.\n   It is important to keep in mind that\
    \ the strongly recommended RSVP\n   deployment model remains end-to-end as assumed\
    \ in [RFC2205] with RSVP\n   support on the sender and the receiver.  The end-to-end\
    \ model allows\n   the most effective synchronization between the reservation\
    \ and\n   application requirements.  Also, when compared to the end-to-end RSVP\n\
    \   model, the use of RSVP proxies involves additional operational burden\n  \
    \ and/or imposes some topological constraints.  The additional\n   operational\
    \ burden comes in particular from additional configuration\n   needed to activate\
    \ the RSVP proxies and to help them identify for\n   which senders/receivers a\
    \ proxy behavior is required and for which\n   senders/receivers it is not (so\
    \ that an RSVP proxy does not perform\n   establishment of reservations on behalf\
    \ of devices that are capable\n   of doing so themselves but would then be prevented\
    \ -- without\n   notification -- from doing so by the RSVP proxy).  The additional\n\
    \   topological constraints come in particular from the requirement to\n   have\
    \ one RSVP Receiver Proxy on the path from any sender to every\n   non-RSVP-capable\
    \ device (so that a non-RSVP-capable device is always\n   taken care of by an\
    \ RSVP proxy) and the objective to have only one\n   such Receiver Proxy on the\
    \ path from any sender to every non-RSVP-\n   capable device (so that an RSVP\
    \ Receiver Proxy does not short-circuit\n   another RSVP Receiver Proxy closer\
    \ to the non-RSVP-capable device,\n   thereby reducing the span of the RSVP reservation\
    \ and the associated\n   benefits).  In the case of the Path-Triggered Receiver\
    \ Proxy\n   approach, the operational burden and topological constraints can be\n\
    \   significantly alleviated using the mechanisms discussed in\n   Section 4.1.1.\n\
    \   It is also worth noting that RSVP operations on end-systems are\n   considerably\
    \ simpler than on a router, and consequently that RSVP\n   implementations on\
    \ end-systems are very lightweight (particularly\n   considering modern end-systems'\
    \ capabilities, including mobile and\n   portable devices).  For example, end-system\
    \ RSVP implementations are\n   reported to only consume low tens of kilobytes\
    \ of code space.  Hence,\n   this document should not be seen as an encouragement\
    \ to depart from\n   the end-to-end RSVP model.  Its purpose is only to allow\
    \ RSVP\n   deployment in special environments where RSVP just cannot be used on\n\
    \   some senders and/or some receivers for reasons specific to the\n   environment.\n"
- title: 2.  RSVP Proxy Behaviors
  contents:
  - "2.  RSVP Proxy Behaviors\n   This section discusses the two types of proxies:\
    \ the RSVP Sender\n   Proxy operating on behalf of data senders, and the RSVP\
    \ Receiver\n   Proxy operating for data receivers.  The concepts presented in\
    \ this\n   document are not meant to deprecate the traditional [RFC2205] RSVP\n\
    \   end-to-end model: end-to-end RSVP reservations are still expected to\n   be\
    \ used whenever possible.  However, RSVP proxies are intended to\n   facilitate\
    \ RSVP deployment where end-to-end RSVP signaling is not\n   possible.\n"
- title: 2.1.  RSVP Receiver Proxy
  contents:
  - "2.1.  RSVP Receiver Proxy\n   With conventional end-to-end RSVP operations, RSVP\
    \ reservations are\n   controlled by receivers of data.  After a data sender has\
    \ sent an\n   RSVP Path message towards the intended recipient(s), each recipient\n\
    \   that requires a reservation generates a Resv message.  If, however, a\n  \
    \ data receiver is not running the RSVP protocol, the last-hop RSVP\n   router\
    \ will still send the Path message to the data receiver, which\n   will silently\
    \ drop this message as an IP packet with an unknown\n   protocol number.\n   In\
    \ order for reservations to be made in such a scenario, one of the\n   RSVP routers\
    \ on the data path determines that the data receiver will\n   not be participating\
    \ in the resource reservation signaling and\n   performs RSVP Receiver Proxy functionality\
    \ on behalf of the data\n   receiver.  This is illustrated in Figure 1.  Various\
    \ mechanisms by\n   which the RSVP proxy router can gain the required information\
    \ are\n   discussed later in the document.\n    |****|         ***          ***\
    \         |**********|          |----|\n    | S  |---------*r*----------*r*---------|\
    \ RSVP     |----------| R  |\n    |****|         ***          ***         | Receiver\
    \ |          |----|\n                                            | Proxy    |\n\
    \                                            |**********|\n        ===================RSVP==============>\n\
    \        ***********************************************************>\n |****|\
    \ RSVP-capable     |----| non-RSVP-capable       ***\n | S  | Sender         \
    \  | R  | Receiver               *r* regular RSVP\n |****|                  |----|\
    \                        *** router\n ***> unidirectional media flow\n ==>  segment\
    \ of flow path protected by RSVP reservation\n                       Figure 1:\
    \ RSVP Receiver Proxy\n"
- title: 2.2.  RSVP Sender Proxy
  contents:
  - "2.2.  RSVP Sender Proxy\n   With conventional end-to-end RSVP operations, if\
    \ a data sender is not\n   running the RSVP protocol, a resource reservation cannot\
    \ be set up; a\n   data receiver alone cannot reserve resources without Path messages\n\
    \   first being received.  Thus, even if the data receiver is running\n   RSVP,\
    \ it still needs some node on the data path to send a Path\n   message towards\
    \ the data receiver.\n   In that case, an RSVP node on the data path determines\
    \ that it should\n   generate Path messages to allow the receiver to set up the\
    \ resource\n   reservation.  This node is referred to as the RSVP Sender Proxy\
    \ and\n   is illustrated in Figure 2.  This case presents additional challenges\n\
    \   over the Receiver Proxy case, since the RSVP Sender Proxy must be\n   able\
    \ to generate all the information in the Path message (such as the\n   SENDER_TSPEC\
    \ object) without the benefit of having previously\n   received any RSVP message.\
    \  An RSVP Receiver Proxy, by contrast, only\n   needs to formulate an appropriate\
    \ Resv message in response to an\n   incoming Path message.  Mechanisms to operate\
    \ an RSVP Sender Proxy\n   are discussed later in this document.\n    |----| \
    \        |**********|         ***          ***          |****|\n    | S  |---------|\
    \ RSVP     |---------*r*----------*r*----------| R  |\n    |----|         | Sender\
    \   |         ***          ***          |****|\n                   | Proxy   \
    \ |\n                   |**********|\n                             ================RSVP==================>\n\
    \        ***********************************************************>\n |----|\
    \ non-RSVP-capable     |****| RSVP-capable       ***\n | S  | Sender         \
    \      | R  | Receiver           *r* regular RSVP\n |----|                   \
    \   |****|                    *** router\n ***> unidirectional media flow\n ==>\
    \  segment of flow path protected by RSVP reservation\n                      \
    \  Figure 2: RSVP Sender Proxy\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   o  On-Path: located on the data path of the actual flow of\n\
    \      application data (regardless of where it is located with respect\n    \
    \  to the application-level signaling path).\n   o  Off-Path: not On-Path.\n \
    \  o  RSVP-capable (or RSVP-aware): supporting the RSVP protocol as per\n    \
    \  [RFC2205].\n   o  RSVP Receiver Proxy: an RSVP-capable router performing, on\
    \ behalf\n      of a receiver, the RSVP operations that would normally be\n  \
    \    performed by an RSVP-capable receiver if end-to-end RSVP signaling\n    \
    \  were used.  Note that while RSVP is used upstream of the RSVP\n      Receiver\
    \ Proxy, RSVP is not used downstream of the RSVP Receiver\n      Proxy.\n   o\
    \  RSVP Sender Proxy: an RSVP-capable router performing, on behalf of\n      a\
    \ sender, the RSVP operations that would normally be performed by\n      an RSVP-capable\
    \ sender if end-to-end RSVP signaling were used.\n      Note that while RSVP is\
    \ used downstream of the RSVP Sender Proxy,\n      RSVP is not used upstream of\
    \ the RSVP Sender Proxy.\n   o  Regular RSVP Router: an RSVP-capable router that\
    \ is not behaving\n      as an RSVP Receiver Proxy or as an RSVP Sender Proxy.\n\
    \   o  Application-level signaling: signaling between entities operating\n   \
    \   above the IP layer and that are aware of the QoS requirements for\n      actual\
    \ media flows.  SIP ([RFC3261]) and the Real Time Streaming\n      Protocol (RTSP)\
    \ ([RFC2326]) are examples of application-level\n      signaling protocols.  The\
    \ Session Description Protocol (SDP)\n      ([RFC4566]) is an example of a protocol\
    \ that can be used by the\n      application-level signaling protocol and from\
    \ which some of the\n      RSVP reservation parameters (addresses, ports, and\
    \ bandwidth)\n      might be derived.  RSVP is clearly not an application-level\n\
    \      signaling protocol.\n   The roles of the RSVP Receiver Proxy, RSVP Sender\
    \ Proxy, and regular\n   RSVP router are all relative to a given unidirectional\
    \ flow.  A given\n   router may act as the RSVP Receiver Proxy for a flow, as\
    \ the RSVP\n   Sender Proxy for another flow, and as a regular RSVP router for\
    \ yet\n   another flow.\n   Some application-level signaling protocols support\
    \ negotiation of QoS\n   reservations for a media stream.  For example, with [RFC3312],\n\
    \   resource reservation requirements are explicitly signaled during\n   session\
    \ establishment using SIP and SDP.  Also, [RFC5432] defines a\n   mechanism to\
    \ negotiate which resource reservation mechanism is to be\n   used for a particular\
    \ media stream.  Clearly, these reservation\n   negotiation mechanisms can be\
    \ invoked and operate effectively when\n   both ends support RSVP (and obviously\
    \ RSVP proxies are not used).\n   When both ends do not support RSVP (and RSVP\
    \ proxies are used at both\n   ends), these mechanisms will simply not be invoked.\
    \  In the case\n   where one end supports RSVP and the other does not (and is\
    \ helped by\n   an RSVP proxy), the application-level signaling entity supporting\
    \ the\n   non-RSVP-capable end might use the reservation negotiation mechanisms\n\
    \   in such a way that the non-RSVP-capable end (helped by an RSVP proxy)\n  \
    \ appears to the remote end as an RSVP-capable device.  This will\n   ensure that\
    \ the RSVP-capable end is not discouraged from using RSVP\n   because the remote\
    \ end is not RSVP-capable.  In the case of SIP, the\n   application-level entity\
    \ may achieve this by taking advantage of the\n   \"segmented\" status type of\
    \ [RFC3312] and/or by taking advantage of a\n   SIP [RFC3261] Back-to-Back User\
    \ Agent (B2BUA).\n"
- title: 4.  RSVP Proxy Approaches
  contents:
  - "4.  RSVP Proxy Approaches\n   This section discusses fundamental RSVP proxy approaches.\n"
- title: 4.1.  Path-Triggered Receiver Proxy
  contents:
  - "4.1.  Path-Triggered Receiver Proxy\n   In this approach, it is assumed that\
    \ the sender is RSVP-capable and\n   takes full care of the synchronization between\
    \ application\n   requirements and RSVP reservations.  With this approach, the\
    \ RSVP\n   Receiver Proxy uses the RSVP Path messages generated by the sender\
    \ as\n   the cue for establishing the RSVP reservation on behalf of the\n   receiver.\
    \  The RSVP Receiver Proxy is effectively acting as a slave\n   making reservations\
    \ (on behalf of the receiver) under the sender's\n   control.  This changes somewhat\
    \ the usual RSVP reservation model\n   where reservations are normally controlled\
    \ by receivers.  Such a\n   change greatly facilitates operations in the scenario\
    \ of interest\n   here, which is where the receiver is not RSVP-capable.  Indeed,\
    \ it\n   allows the RSVP Receiver Proxy to remain application-unaware by\n   taking\
    \ advantage of the application awareness and RSVP awareness of\n   the sender.\n\
    \   With the Path-Triggered RSVP Receiver Proxy approach, the RSVP router\n  \
    \ may be configured to use receipt of a regular RSVP Path message as\n   the trigger\
    \ for RSVP Receiver Proxy behavior.\n   On receipt of the RSVP Path message, the\
    \ RSVP Receiver Proxy:\n   1.  establishes the RSVP Path state as per regular\
    \ RSVP processing.\n   2.  identifies the downstream interface towards the receiver.\n\
    \   3.  sinks the Path message.\n   4.  behaves as if a Resv message (whose details\
    \ are discussed below)\n       was received on the downstream interface.  This\
    \ includes\n       performing admission control on the downstream interface,\n\
    \       establishing a Resv state (in case of successful admission\n       control),\
    \ and forwarding the Resv message upstream, sending\n       periodic refreshes\
    \ of the Resv message and tearing down the\n       reservation if the Path state\
    \ is torn down.\n   In order to build the Resv message, the RSVP Receiver Proxy\
    \ can take\n   into account information received in the Path message.  For example,\n\
    \   the RSVP Receiver Proxy may compose a FLOWSPEC object for the Resv\n   message\
    \ that mirrors the SENDER_TSPEC object in the received Path\n   message (as an\
    \ RSVP-capable receiver would typically do).\n   Operation of the Path-Triggered\
    \ Receiver Proxy in the case of a\n   successful reservation is illustrated in\
    \ Figure 3.\n    |****|         ***          ***         |**********|        \
    \  |----|\n    | S  |---------*r*----------*r*---------| RSVP     |----------|\
    \ R  |\n    |****|         ***          ***         | Receiver |          |----|\n\
    \                                            | Proxy    |\n                  \
    \                          |**********|\n         ---Path---> ----Path----> ---Path---->\n\
    \         <--Resv---> <---Resv----- <--Resv----\n         ==================RSVP===============>\n\
    \         **********************************************************>\n |****|\
    \ RSVP-capable     |----| Non-RSVP-capable        ***\n | S  | Sender        \
    \   | R  | Receiver                *r* regular RSVP\n |****|                 \
    \ |----|                         *** router\n ***> media flow\n ==>  segment of\
    \ flow path protected by RSVP reservation\n               Figure 3: Path-Triggered\
    \ RSVP Receiver Proxy\n   In case the reservation establishment is rejected (for\
    \ example,\n   because of an admission control failure on a regular RSVP router\
    \ on\n   the path between the RSVP-capable sender and the RSVP Receiver\n   Proxy),\
    \ a ResvErr message will be generated as per conventional RSVP\n   operations\
    \ and will travel downstream towards the RSVP Receiver\n   Proxy.  While this\
    \ ensures that the RSVP Receiver Proxy is aware of\n   the reservation failure,\
    \ conventional RSVP procedures do not cater to\n   the notification of the sender\
    \ of the reservation failure.  Operation\n   of the Path-Triggered RSVP Receiver\
    \ Proxy in the case of an admission\n   control failure is illustrated in Figure\
    \ 4.\n    |****|         ***          ***         |**********|          |----|\n\
    \    | S  |---------*r*----------*r*---------| RSVP     |----------| R  |\n  \
    \  |****|         ***          ***         | Receiver |          |----|\n    \
    \                                        | Proxy    |\n                      \
    \                      |**********|\n         ---Path---> ----Path----> ---Path---->\n\
    \                    <---Resv----- <--Resv------\n                    ---ResvErr--->\
    \ --ResvErr--->\n         ===================RSVP===============>\n         **********************************************************>\n\
    \ |****| RSVP-capable     |----| Non-RSVP-capable       ***\n | S  | Sender  \
    \         | R  | Receiver               *r* regular RSVP\n |****|            \
    \      |----|                        *** router\n ***> media flow\n ==>  segment\
    \ of flow path protected by RSVP reservation\n         Figure 4: Path-Triggered\
    \ RSVP Receiver Proxy with Failure\n   Since, as explained above, in this scenario\
    \ involving the RSVP\n   Receiver Proxy, synchronization between an application\
    \ and an RSVP\n   reservation is generally performed by the sender, notifying\
    \ the\n   sender of reservation failure is needed.  [RFC5946] specifies RSVP\n\
    \   extensions allowing such sender notification in the case of\n   reservation\
    \ failure in the presence of a Path-Triggered RSVP Receiver\n   Proxy.\n"
- title: 4.1.1.  Mechanisms for Maximizing the Reservation Span
  contents:
  - "4.1.1.  Mechanisms for Maximizing the Reservation Span\n   The presence in the\
    \ flow path of a Path-Triggered RSVP Receiver Proxy\n   (for a given flow) that\
    \ strictly behaves as described previously\n   would cause the Path message to\
    \ be terminated and a Resv message to\n   be generated towards the sender.  When\
    \ the receiver is indeed not\n   RSVP-capable and there is no other RSVP Receiver\
    \ Proxy downstream on\n   the flow path, this achieves the best achievable result\
    \ of\n   establishing an RSVP reservation as far downstream as the RSVP\n   Receiver\
    \ Proxy.\n   However, if the eventual receiver was in fact RSVP-capable, it would\n\
    \   be prevented from participating in RSVP signaling, since it does not\n   receive\
    \ any Path message.  As a result, the RSVP reservation would\n   only span a subset\
    \ of the path it could actually span.  A similar\n   sub-optimality would exist\
    \ with multiple Receiver Proxies in the path\n   of the flow: the first Receiver\
    \ Proxy may prevent the Path message\n   from reaching the second one and therefore\
    \ prevent the reservation\n   from extending down to the second Receiver Proxy.\n\
    \   It is desirable that, in the presence of Path-Triggered RSVP Receiver\n  \
    \ Proxies and of a mix of RSVP-capable and non-RSVP-capable receivers,\n   the\
    \ RSVP reservation spans as much of the flow path as possible.\n   This can be\
    \ achieved dynamically (avoiding tedious specific\n   configuration), using the\
    \ mechanisms described in Sections 4.1.1.1\n   and 4.1.1.2.\n"
- title: 4.1.1.1.  Dynamic Discovery of Downstream RSVP Functionality
  contents:
  - "4.1.1.1.  Dynamic Discovery of Downstream RSVP Functionality\n   When generating\
    \ a proxy Resv message upstream, a Receiver Proxy may\n   be configured to perform\
    \ dynamic discovery of downstream RSVP\n   functionality.  To that end, when generating\
    \ the proxy Resv message\n   upstream, the Receiver Proxy forwards the Path message\
    \ downstream\n   instead of terminating it.  This allows an RSVP-capable receiver\
    \ (or\n   a downstream Receiver Proxy) to respond to the Path with an upstream\n\
    \   Resv message.  On receipt of a Resv message, the Receiver Proxy\n   internally\
    \ converts its state from a proxied reservation to a regular\n   midpoint RSVP\
    \ behavior.  From then on, everything proceeds as if the\n   RSVP router had behaved\
    \ as a regular RSVP router at reservation\n   establishment (as opposed to having\
    \ behaved as an RSVP Receiver Proxy\n   for that flow).\n   The RSVP Receiver\
    \ Proxy behavior for dynamic discovery of downstream\n   RSVP functionality is\
    \ illustrated in Figure 5 and is also discussed\n   in Section 4.1 of [RFC5946].\n\
    \      |****|         ***         |**********|   |----|\n      | S  |---------*r*---------|\
    \ RSVP     |---| R1 |\n      |****|         ***         | Receiver |   |----|\n\
    \                                 | Proxy    |\n                             \
    \    |          |\n                                 |          |            |****|\n\
    \                                 |          |------------| R2 |\n           \
    \                      |**********|            |****|\n           ---Path--->\
    \  --Path--->\n              (R1)        (R1)    \\-------Path-->\n          \
    \                        /       (R1)\n           <--Resv---  <---Resv---\n  \
    \        ================RSVP===>\n          **************************************>\n\
    \           ---Path--->  --Path--->\n              (R2)        (R2)    \\-------------Path---->\n\
    \                                  /             (R2)\n           <--Resv--- \
    \ <---Resv---\n                                             <----Resv---\n   \
    \       ================RSVP===========================>\n          ***********************************************>\n\
    \   |****| RSVP-capable  |----| non-RSVP-capable  |****| RSVP-capable\n   | S\
    \  | Sender        | R  | Receiver          | R  | Receiver\n   |****|       \
    \        |----|                   |****|\n   ***\n   *r* regular RSVP\n   ***\
    \ router\n   (R1) = Path message contains a Session object whose destination is\
    \ R1\n   ***> media flow\n   ==>  segment of flow path protected by RSVP reservation\n\
    \       Figure 5: Dynamic Discovery of Downstream RSVP Functionality\n   This\
    \ dynamic discovery mechanism has the benefit that new (or\n   upgraded) RSVP\
    \ endpoints will automatically and seamlessly be able to\n   take advantage of\
    \ end-to-end reservations, without impacting the\n   ability of a Receiver Proxy\
    \ to proxy RSVP for other, non-RSVP-capable\n   endpoints.  This mechanism also\
    \ achieves the goal of automatically\n   discovering the longest possible RSVP-supporting\
    \ segment in a network\n   with multiple Receiver Proxies along the path.  This\
    \ mechanism\n   dynamically adjusts to any topology and routing change.  Also,\
    \ this\n   mechanism dynamically handles the situation in which a receiver was\n\
    \   RSVP-capable and for some reason (e.g., software downgrade) no longer\n  \
    \ is.  Finally, this approach requires no new RSVP protocol extensions\n   and\
    \ no configuration changes to the Receiver Proxy as new RSVP-\n   capable endpoints\
    \ come and go.\n   The only identified drawbacks to this approach are:\n   o \
    \ If admission control fails on the segment between the Receiver\n      Proxy\
    \ and the RSVP-capable receiver, the receiver will get a\n      ResvErr and can\
    \ take application-level signaling steps to\n      terminate the call.  However,\
    \ the Receiver Proxy has already sent\n      a Resv upstream for this flow, so\
    \ the sender will see a \"false\"\n      reservation that is not truly end-to-end.\
    \  The actual admission\n      control status will resolve itself in a short while,\
    \ but the\n      sender will need to roll back any permanent action (such as\n\
    \      billing) that may have been taken on receipt of the phantom Resv.\n   \
    \   Note that if the second receiver is also a Receiver Proxy that is\n      not\
    \ participating in application signaling, it will convert the\n      received\
    \ ResvErr into a PathErr that will be received by the\n      sender.\n   o  If\
    \ there is no RSVP-capable receiver (or other Receiver Proxy)\n      downstream\
    \ of the Receiver Proxy, then the Path messages sent by\n      the Receiver Proxy\
    \ every RSVP refresh interval (e.g., 30 seconds\n      by default) will never\
    \ be responded to.  However, these messages\n      consume a small amount of bandwidth,\
    \ and in addition would install\n      some RSVP state on RSVP-capable midpoint\
    \ nodes downstream of the\n      first Receiver Proxy.  This is seen as a very\
    \ minor sub-\n      optimality.  We also observe that such resources would be\
    \ consumed\n      anyways if the receiver was RSVP-capable.  Still, if deemed\n\
    \      necessary, to mitigate this, the Receiver Proxy can tear down any\n   \
    \   unanswered downstream Path state and stop sending Path messages\n      for\
    \ the flow (or only send them at much lower frequency) as\n      further discussed\
    \ in [RFC5946].\n"
- title: 4.1.1.2.  Selective Receiver Proxy and Sender Control of Receiver Proxy
  contents:
  - "4.1.1.2.  Selective Receiver Proxy and Sender Control of Receiver Proxy\n   An\
    \ RSVP Receiver Proxy can be selective about the sessions that it\n   terminates,\
    \ based on local policy decision.  For example, an edge\n   router functioning\
    \ as a Receiver Proxy may behave as a proxy only for\n   Path messages that are\
    \ actually going to exit the domain in question,\n   and not for Path messages\
    \ that are transiting through it but stay\n   within the domain.  As another example,\
    \ the Receiver Proxy may be\n   configurable to only proxy for flows addressed\
    \ to a given destination\n   address or destination address ranges (for which\
    \ end devices are\n   known to not be RSVP-capable).\n   The decision to proxy\
    \ a Resv for a Path may also be based on\n   information signaled from the sender\
    \ in the Path message.  For\n   example, the sender may identify the type of application\
    \ or flow in\n   the Application Identity policy element ([RFC2872]) in the Path,\
    \ and\n   the Receiver Proxy may be configured to proxy for only certain types\n\
    \   of flows.  Or, if the sender knows (for example, through application\n   signaling)\
    \ that the receiver is RSVP-capable, the sender can include\n   an indication\
    \ in a policy element to any Receiver Proxy that it ought\n   not to terminate\
    \ the Path (or conversely, if the receiver is known\n   not to support RSVP, the\
    \ sender could include an indication to\n   Receiver Proxies that they ought to\
    \ generate a proxy Resv message).\n   The Receiver Proxy Control policy element\
    \ specified in Section 4.2 of\n   [RFC5946] can be used for that purpose.\n"
- title: 4.2.  Path-Triggered Sender Proxy for Reverse Direction
  contents:
  - "4.2.  Path-Triggered Sender Proxy for Reverse Direction\n   In this approach,\
    \ it is assumed that one endpoint is RSVP-capable and\n   takes full care of the\
    \ synchronization between application\n   requirements and RSVP reservations.\
    \  This endpoint is the sender for\n   one flow direction (which we refer to as\
    \ the \"forward\" direction) and\n   is the receiver for the flow in the opposite\
    \ direction (which we\n   refer to as the \"reverse\" direction).\n   With the\
    \ Path-Triggered Sender Proxy for Reverse Direction approach,\n   the RSVP proxy\
    \ uses the RSVP signaling generated by the receiver (for\n   the reverse direction)\
    \ as the cue for initiating RSVP signaling for\n   the reservation in the reverse\
    \ direction.  More precisely, the RSVP\n   proxy can take the creation (or maintenance\
    \ or teardown) of a Path\n   state by the receiver as the cue to create (or maintain\
    \ or tear down,\n   respectively) a Path state towards the receiver.  Thus, the\
    \ RSVP\n   proxy is effectively acting as a Sender Proxy for the reverse\n   direction\
    \ under the control of the receiver (for the reverse\n   direction).  Note that\
    \ this assumes a degree of symmetry, for\n   example, in terms of bandwidth for\
    \ the two directions of the flow (as\n   is currently typical for IP telephony).\n\
    \   The signaling flow for the Path-Triggered Sender Proxy for Reverse\n   Direction\
    \ is illustrated in Figure 6.\n   Path messages generated by the receiver need\
    \ to transit via the RSVP\n   Sender Proxy that is on the path from the sender\
    \ to the receiver.  In\n   some topologies, this will always be the case: for\
    \ example, where the\n   sender is on a stub network hanging off the RSVP Sender\
    \ Proxy or\n   where there is no asymmetric routing (such that if an RSVP Sender\n\
    \   Proxy is on the path from receiver to sender, then it is also on the\n   path\
    \ from sender to receiver).  In some topologies (such as those\n   involving asymmetric\
    \ routing), this may not always happen naturally.\n   Measures to ensure this\
    \ does happen in these topologies are outside\n   the scope of this document.\n\
    \    |****|         ***          ***         |**********|          |----|\n  \
    \  | R  |---------*r*----------*r*---------| RSVP     |----------| S  |\n    |****|\
    \         ***          ***         | Sender   |          |----|\n            \
    \                                | Proxy    |\n                              \
    \              |**********|\n         ---Path---> ----Path----> ---Path---->\n\
    \         <--Path---> <---Path----- <--Path----\n         ---Resv---> ----Resv---->\
    \ ---Resv---->\n        <================RSVP==================\n        <**********************************************************\n\
    \ |****| RSVP-capable       |----| Non-RSVP-capable     ***\n | R  | Receiver\
    \ for       | S  | Sender for           *r* regular RSVP\n |****| reverse direction\
    \  |----| reverse direction    *** router\n ***> media flow\n ==>  segment of\
    \ flow path protected by RSVP reservation\n      in reverse direction\n      \
    \  Figure 6: Path-Triggered Sender Proxy for Reverse Direction\n   Of course,\
    \ the RSVP proxy may simultaneously (and typically will)\n   also act as the Path-Triggered\
    \ Receiver Proxy for the forward\n   direction, as defined in Section 4.1.  Such\
    \ an approach is most\n   useful in situations involving RSVP reservations in\
    \ both directions\n   for symmetric flows.  This is illustrated in Figure 7.\n\
    \    |****|         ***          ***         |----------|          |----|\n  \
    \  |S/R |---------*r*----------*r*---------| RSVP     |----------|S/R |\n    |****|\
    \         ***          ***         | Receiver |          |----|\n            \
    \                                | & Sender |\n                              \
    \              | Proxy    |\n                                            |----------|\n\
    \         ---Path---> ----Path----> ---Path---->\n         <--Resv---> <---Resv-----\
    \ <--Resv----\n         <--Path---> <---Path----- <--Path----\n         ---Resv--->\
    \ ----Resv----> ---Resv---->\n        ================RSVP==================>\n\
    \        <================RSVP==================\n        **********************************************************>\n\
    \        <**********************************************************\n |****|\
    \ RSVP-capable     |----| Non-RSVP-capable       ***\n |S/R | Sender and     \
    \  |S/R | Sender and             *r* regular RSVP\n |****| Receiver         |----|\
    \ Receiver               *** router\n ***> media flow\n ==>  segment of flow path\
    \ protected by RSVP reservation\n      in forward and in reverse direction\n \
    \           Figure 7: Path Triggered Receiver and Sender Proxy\n   With the Path-Triggered\
    \ Sender Proxy for Reverse Direction approach,\n   the RSVP router may be configurable\
    \ to use receipt of a regular RSVP\n   Path message as the trigger for Sender\
    \ Proxy for Reverse Direction\n   behavior.\n   On receipt of the RSVP Path message\
    \ for the forward direction, the\n   RSVP Sender Receiver Proxy:\n   1.  sinks\
    \ the Path message.\n   2.  behaves as if a Path message for the reverse direction\
    \ (whose\n       details are discussed below) had been received by the Sender\n\
    \       Proxy.  This includes establishing the corresponding Path state,\n   \
    \    forwarding the Path message downstream, sending periodic\n       refreshes\
    \ of the Path message, and tearing down the Path in the\n       reverse direction\
    \ when the Path state in the forward direction is\n       torn down.\n   In order\
    \ to build the Path message for the reverse direction, the\n   RSVP Sender Proxy\
    \ can take into account information in the received\n   Path message for the forward\
    \ direction.  For example, the RSVP Sender\n   Proxy may mirror the SENDER_TSPEC\
    \ object in the received Path\n   message.\n   We observe that this approach does\
    \ not require any extensions to the\n   existing RSVP protocol.\n   In the case\
    \ where reservations are required in both directions (as\n   shown in Figure 7),\
    \ the RSVP-capable device simply needs to behave as\n   a regular RSVP sender\
    \ and RSVP receiver.  It need not be aware that\n   an RSVP proxy happens to be\
    \ used, and the Path message it sent for\n   the forward reservation also acts\
    \ as the trigger for establishment of\n   the reverse reservation.  However, in\
    \ the case where a reservation is\n   only required in the reverse direction (as\
    \ shown in Figure 6), the\n   RSVP-capable device has to generate Path messages\
    \ in order to trigger\n   the reverse-direction reservation even if no reservation\
    \ is required\n   in the forward direction.  Although this is not in violation\
    \ of\n   [RFC2205], it may not be the default behavior of an RSVP-capable\n  \
    \ device and therefore may need a behavioral change specifically to\n   facilitate\
    \ operation of the Path-Triggered Sender Proxy for Reverse\n   Direction.\n"
- title: 4.3.  Inspection-Triggered Proxy
  contents:
  - "4.3.  Inspection-Triggered Proxy\n   In this approach, it is assumed that the\
    \ RSVP proxy is on the data\n   path of \"packets of interest\", that it can inspect\
    \ such packets on\n   the fly as they transit through it, and that it can infer\
    \ information\n   from these packets of interest to determine what RSVP reservations\n\
    \   need to be established, as well as when and with what characteristics\n  \
    \ (possibly also using some configured information).\n   One example of \"packets\
    \ of interest\" could be application-level\n   signaling.  An RSVP proxy capable\
    \ of inspecting SIP signaling for a\n   multimedia session or RTSP signaling for\
    \ video streaming can obtain\n   from such signaling information about when a\
    \ multimedia session is up\n   or when a video is going to be streamed.  It can\
    \ also identify the\n   addresses and ports of senders and receivers and can determine\
    \ the\n   bandwidth of the corresponding flows.  It can also determine when the\n\
    \   reservation is no longer needed and tear it down.  Thus, such an RSVP\n  \
    \ proxy can determine all necessary information to synchronize RSVP\n   reservations\
    \ to application requirements.  This is illustrated in\n   Figure 8.\n       \
    \                       |-------------|\n                              | Application\
    \ |\n                              | Signaling   |\n                         \
    \     | Entity      |\n                              |-------------|\n       \
    \                           /   \\\n                                 /     \\\n\
    \                                /       \\\n        <///////////////////////\
    \         \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\>\n    |----|      \
    \  |********|      ***        |********|          |----|\n    | S  |--------|\
    \ RSVP   |------*r*--------| RSVP   |----------| R  |\n    |----|        | Proxy\
    \  |      ***        | Proxy  |          |----|\n                  |********|\
    \                 |********|\n                          =======RSVP=======>\n\
    \         ********************************************************>\n |----| Non-RSVP-capable\
    \   |----| Non-RSVP-capable      ***\n | S  | Sender             | R  | Receiver\
    \              *r* regular RSVP\n |----|                    |----|           \
    \            *** router\n </\\> application-level signaling\n ***> media flow\n\
    \ ==>  segment of flow path protected by RSVP reservation\n                 Figure\
    \ 8: Inspection-Triggered RSVP Proxy\n   Another example of \"packets of interest\"\
    \ could be transport control\n   messages (e.g., the Real-time Transport Control\
    \ Protocol (RTCP)\n   [RFC3550]) traveling alongside the application flow itself\
    \ (i.e.,\n   media packets).  An RSVP proxy capable of detecting the transit of\n\
    \   packets from a particular flow can attempt to establish a reservation\n  \
    \ corresponding to that flow.  Characteristics of the reservation may\n   be derived\
    \ by various methods such as from configuration, flow\n   measurement, or a combination\
    \ of those.  However, these methods\n   usually come with their respective operational\
    \ drawbacks:\n   configuration involves an operational cost and may hinder\n \
    \  introduction of new applications, and measurement is reactive so that\n   accurate\
    \ reservation may lag actual traffic.\n   In the case of reservation failure,\
    \ the Inspection-Triggered RSVP\n   Proxy does not have a direct mechanism for\
    \ notifying the application\n   (since it is not participating itself actively\
    \ in application\n   signaling) so that the application is not in a position to\
    \ take\n   appropriate action (for example, terminate the corresponding\n   session).\
    \  To mitigate this problem, the Inspection-Triggered RSVP\n   Proxy may differently\
    \ mark the Differentiated Services codepoint\n   (DSCP) ([RFC2474]) of flows for\
    \ which an RSVP reservation has been\n   successfully proxied from the flows for\
    \ which a reservation is not in\n   place.  In some situations, the Inspection-Triggered\
    \ Proxy might be\n   able to modify the \"packets of interest\" (e.g., application\
    \ signaling\n   messages) to convey some hint to applications that the corresponding\n\
    \   flows cannot be guaranteed by RSVP reservations.\n   With the Inspection-Triggered\
    \ Proxy approach, the RSVP proxy is\n   effectively required to attempt to build\
    \ application awareness by\n   traffic inspection and then is somewhat limited\
    \ in the actions it can\n   take in case of reservation failure.  Depending on\
    \ the \"packets of\n   interest\" used by the RSVP proxy to trigger the reservation,\
    \ there is\n   a risk that the RSVP proxy will end up establishing a reservation\
    \ for\n   a media flow that actually never starts.  However, this can be\n   mitigated\
    \ by the timing out and tearing down of an unnecessary\n   reservation by the\
    \ RSVP proxy when no corresponding media flow is\n   observed.  This flow observation\
    \ and timeout approach can also be\n   used to tear down reservations that were\
    \ rightfully established for a\n   flow but are no longer needed because the flow\
    \ stopped.\n   The Inspection-Triggered approach is also subject to the general\n\
    \   limitations associated with data inspection.  This includes being\n   impeded\
    \ by encryption or tunneling, or being dependent on some\n   topology constraints\
    \ such as relying on the fact that both the\n   packets of interest and the corresponding\
    \ flow packets always transit\n   through the same RSVP proxy.\n   Nonetheless,\
    \ this may be a useful approach in specific environments.\n   Note also that this\
    \ approach does not require any change to the RSVP\n   protocol.\n   With the\
    \ Inspection-Triggered RSVP Proxy approach, the RSVP router\n   may be configurable\
    \ to use and interpret some specific packets of\n   interest as the trigger for\
    \ RSVP Receiver Proxy behavior.\n   When operating off signaling traffic, the\
    \ Inspection-Triggered RSVP\n   Proxy may be able to detect from the signaling\
    \ that the endpoint is\n   capable of establishing an RSVP reservation (e.g.,\
    \ in the case of\n   SIP, via the inspection of the [RFC3312]/[RFC4032] precondition),\
    \ in\n   which case it would not behave as a proxy for that endpoint.  Also,\n\
    \   the Inspection-Triggered RSVP Proxy may inspect RSVP signaling, and\n   if\
    \ it sees RSVP signaling for the flow of interest, it can disable\n   its Sender\
    \ Proxy behavior for that flow (or that sender).\n   Optionally, through RSVP\
    \ signaling inspection, the Sender Proxy might\n   also gradually \"learn\" (possibly\
    \ with some timeout) which sender is\n   RSVP-capable and which is not.  These\
    \ mechanisms can facilitate\n   gradual and dynamic migration from the proxy model\
    \ towards the end-\n   to-end RSVP model as more and more endpoints become RSVP-capable.\n"
- title: 4.4.  STUN-Triggered Proxy
  contents:
  - "4.4.  STUN-Triggered Proxy\n   In this approach, the RSVP proxy takes advantage\
    \ of the application\n   awareness provided by the Session Traversal Utilities\
    \ for NAT (STUN)\n   ([RFC5389]) signaling to synchronize RSVP reservations with\n\
    \   application requirements.  The STUN signaling is sent from endpoint\n   to\
    \ endpoint.  This is illustrated in Figure 9.  In this approach, a\n   STUN message\
    \ triggers the RSVP proxy.\n    |----|        |********|      ***        |********|\
    \          |----|\n    | S  |--------| RSVP   |------*r*--------| RSVP   |----------|\
    \ R  |\n    |----|        | Proxy  |      ***        | Proxy  |          |----|\n\
    \                  |********|                 |********|\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^>\n\
    \                          =======RSVP=======>\n         ********************************************************>\n\
    \ |----| Non-RSVP-capable   |----| Non-RSVP-capable      ***\n | S  | Sender \
    \            | R  | Receiver              *r* regular RSVP\n |----|          \
    \          |----|                       *** router\n ^^^> STUN message flow (over\
    \ same UDP ports as media flow)\n ==>  segment of flow path protected by RSVP\
    \ reservation\n ***> RTP media flow\n                      Figure 9: STUN-Triggered\
    \ Proxy\n   For unicast flows, [RFC5245] is a widely adopted approach for Network\n\
    \   Address Translator (NAT) traversal.  For our purposes of triggering\n   RSVP\
    \ proxy behavior, we rely on the Interactive Connectivity\n   Establishment (ICE)\
    \ protocol's connectivity check, which is based on\n   the exchange of STUN Binding\
    \ Request messages between hosts to verify\n   connectivity (see Section 2.2 of\
    \ [RFC5245]).  The STUN message could\n   also include (yet to be specified) STUN\
    \ attributes to indicate\n   information such as the bandwidth and application\
    \ requesting the\n   flow, which would allow the RSVP proxy agent to create an\n\
    \   appropriately sized reservation for each flow.  Including such new\n   STUN\
    \ attributes in the ICE connectivity check messages would\n   facilitate operation\
    \ of the RSVP proxy.  To ensure RSVP reservations\n   are only established when\
    \ needed, the RSVP proxy needs to\n   distinguish, among all the STUN messages,\
    \ the ones that reflect (with\n   high likelihood) an actual upcoming media flow.\
    \  This can be achieved\n   by identifying the STUN messages associated with an\
    \ ICE connectivity\n   check.  In turn, this can be achieved through (some combination\
    \ of)\n   the following checks:\n   o  if, as discussed above, new STUN attributes\
    \ (e.g., conveying the\n      flow bandwidth) are indeed defined in the future\
    \ in view of\n      facilitating STUN-Triggered reservations, then the presence\
    \ of\n      these attributes would reveal that the STUN message is part of an\n\
    \      ICE connectivity check.\n   o  the presence of the PRIORITY, USE-CANDIDATE,\
    \ ICE-CONTROLLED, or\n      ICE-CONTROLLING attributes reveals that the STUN message\
    \ is part\n      of an ICE connectivity check.\n   o  the RSVP proxy may wait\
    \ for a STUN message containing the USE-\n      CANDIDATE attribute indicating\
    \ the selected ICE \"path\" to trigger\n      reservation only for the selected\
    \ \"path\".  This allows the RSVP\n      proxy to only trigger a reservation for\
    \ the \"path\" actually\n      selected and therefore for the media flow that\
    \ will actually be\n      established (for example, when ICE is being used for\
    \ IPv4/v6 path\n      selection).\n   o  the RSVP proxy configuration could contain\
    \ some information\n      facilitating determination of when to perform RSVP proxy\n\
    \      reservation and when not to.  For example, the RSVP proxy\n      configuration\
    \ could contain the IP addresses of the STUN servers\n      such that STUN messages\
    \ to/from those addresses are known to not\n      be part of an ICE connectivity\
    \ check.  As another example, the\n      RSVP proxy configuration could contain\
    \ information identifying the\n      set of Differentiated Services codepoint\
    \ (DSCP) values that the\n      media flows requiring reservation use, so that\
    \ STUN messages not\n      using one of these DSCP values are known to not be\
    \ part of an ICE\n      connectivity check.\n   Despite these checks, there is\
    \ always a potential risk that the RSVP\n   proxy will end up establishing a reservation\
    \ for a media flow that\n   actually never starts.  However, this is limited to\
    \ situations in\n   which the end-systems are interested enough in establishing\n\
    \   connectivity for a flow but never transmit.  Also, this can be\n   mitigated\
    \ by timing out and tear down of an unnecessary reservation\n   by the RSVP proxy\
    \ when no corresponding media flow is observed.\n   The RSVP proxy agent can inform\
    \ endpoints of an RSVP reservation\n   failure implicitly by dropping the ICE\
    \ connectivity check message or\n   explicitly by sending ICMP messages back to\
    \ the endpoint.  This\n   allows reasonably effective synchronization between\
    \ RSVP reservations\n   handled by the RSVP proxies and the application running\
    \ on non-RSVP-\n   capable endpoints.  It also has the benefits of operating through\n\
    \   NATs.\n   For multicast flows (or certain kinds of unicast flows that don't\
    \ or\n   can't use ICE), a STUN Indication message [RFC5389] could be used to\n\
    \   carry the (yet to be defined) STUN attributes mentioned earlier to\n   indicate\
    \ the flow bandwidth, thereby providing a benefit similar to\n   the ICE connectivity\
    \ check.  STUN Indication messages are not\n   acknowledged by the receiver and\
    \ have the same scalability as the\n   underlying multicast flow.\n   The corresponding\
    \ extensions to ICE and STUN for such a STUN-\n   Triggered RSVP Proxy approach\
    \ are beyond the scope of this document.\n   They may be defined in the future\
    \ in a separate document.  As the\n   STUN-Triggered RSVP Proxy approach uses\
    \ STUN in a way (i.e., to\n   trigger reservations) that is beyond its initial\
    \ intended purpose,\n   the potential security implications need to be considered\
    \ by the\n   operator.\n   ICE connectivity checks are not always used for all\
    \ flows.  When the\n   STUN-Triggered RSVP Proxy approach is used, it can establish\
    \ RSVP\n   reservations for flows for which ICE connectivity is performed.\n \
    \  However, the STUN-Triggered RSVP Proxy will not establish a\n   reservation\
    \ for flows for which an ICE connectivity check is not\n   performed.  Those flows\
    \ either will not benefit from an RSVP\n   reservation or can benefit from an\
    \ RSVP reservation established\n   through other means (end-to-end RSVP, other\
    \ forms of RSVP proxy).\n   The STUN-Triggered approach relies on interception\
    \ and inspection of\n   STUN messages.  Thus, this approach may be impeded by\
    \ encryption or\n   tunneling.\n"
- title: 4.5.  Application_Entity-Controlled Proxy
  contents:
  - "4.5.  Application_Entity-Controlled Proxy\n   In this approach, it is assumed\
    \ that an entity involved in the\n   application-level signaling controls an RSVP\
    \ proxy that is located in\n   the data path of the application flows (i.e., \"\
    on-path\").  With this\n   approach, the RSVP proxy does not itself attempt to\
    \ determine the\n   application reservation requirements.  Instead, the RSVP proxy\
    \ is\n   instructed by the entity participating in application-level signaling\n\
    \   to establish, maintain, and tear down reservations as needed by the\n   application\
    \ flows.  In other words, with this approach, the solution\n   for synchronizing\
    \ RSVP signaling with application-level requirements\n   is to rely on an application-level\
    \ signaling entity that controls an\n   RSVP proxy function that sits in the flow\
    \ data path.  This approach\n   allows control of an RSVP Sender Proxy, an RSVP\
    \ Receiver Proxy, or\n   both.\n   Operation of the Application_Entity-Controlled\
    \ Proxy is illustrated\n   in Figure 10.\n                        |---------|\
    \        |---------|\n               /////////|  App    |////\\\\\\\\|  App  \
    \  |\\\\\\\\\\\\\\\\\n              /         | Entity  |        | Entity  | \
    \       \\\n             /          |---------|        |---------|         \\\n\
    \            /               //                \\\\                \\\n      \
    \     /               //                  \\\\                \\\n          /\
    \               //                    \\\\                \\\n         /     \
    \          //                      \\\\                \\\n        /         \
    \      //                        \\\\                \\\n    |----|          |********|\
    \      ***       |*********|         |----|\n    | S  |----------|        |------*r*-------|\
    \         |---------| R  |\n    |----|          | RSVP   |      ***       | RSVP\
    \    |         |----|\n                    | Sender |                | Receiver|\n\
    \                    | Proxy  |                | Proxy   |\n                 \
    \   |********|                |*********|\n                            =======RSVP=======>\n\
    \         ********************************************************>\n |----| Non-RSVP-capable\
    \   |----| Non-RSVP-capable      ***\n | S  | Sender             | R  | Receiver\
    \              *r* regular RSVP\n |----|                    |----|           \
    \            *** router\n ***> media flow\n ==>  segment of flow path protected\
    \ by RSVP reservation\n /\\   Application signaling (e.g., SIP)\n //   RSVP proxy\
    \ control interface\n              Figure 10: Application_Entity-Controlled Proxy\n\
    \   As an example, the Application_Entity-Controlled Proxy may be used in\n  \
    \ the context of SIP servers ([RFC3261]) or Session Border Controllers\n   (SBCs)\
    \ (see [RFC5853] for a description of SBCs) to establish RSVP\n   reservations\
    \ for multimedia sessions.  In that case, the application\n   entity may be the\
    \ signaling component of the SBC.\n   This RSVP proxy approach does not require\
    \ any extension to the RSVP\n   protocol.  However, it relies on an RSVP proxy\
    \ control interface\n   allowing control of the RSVP proxy by an application signaling\n\
    \   entity.  This RSVP proxy control interface is beyond the scope of\n   this\
    \ document.  Candidate protocols for realizing such an interface\n   include the\
    \ IETF Network Configuration (NETCONF) Protocol ([RFC4741],\n   [RFC5277]), the\
    \ Web Services protocol ([W3C]), the QoS Policy\n   Information Model (QPIM) ([RFC3644]),\
    \ and Diameter ([RFC3588]).  This\n   interface can rely on soft states or hard\
    \ states.  Clearly, when hard\n   states are used, those need to be converted\
    \ appropriately by the RSVP\n   proxy entities into the corresponding RSVP soft\
    \ states.  As an\n   example, [RFC5866] is intended to allow control of RSVP proxy\
    \ via\n   Diameter.\n   In general, the application entity is not expected to\
    \ maintain\n   awareness of which RSVP Receiver Proxy is on the path to which\n\
    \   destination.  However, in the particular cases where it does so\n   reliably,\
    \ we observe that the application entity could control the\n   RSVP Sender Proxy\
    \ and Receiver Proxy so that aggregate RSVP\n   reservations are used between\
    \ those, instead of one reservation per\n   flow.  For example, these aggregate\
    \ reservations could be of the\n   RSVP-AGGREGATE type, as specified in [RFC3175],\
    \ or of the GENERIC-\n   AGGREGATE type, as specified in [RFC4860].  Such aggregate\n\
    \   reservations could be used so that a single reservation can be used\n   for\
    \ multiple (possibly all) application flows transiting via the same\n   RSVP Sender\
    \ Proxy and the same RSVP Receiver Proxy.\n   For situations in which only the\
    \ RSVP Sender Proxy has to be\n   controlled by this interface, the interface\
    \ may be realized through\n   the simple use of RSVP itself, over a Generic Routing\
    \ Encapsulation\n   (GRE) tunnel from the application entity to the RSVP Sender\
    \ Proxy.\n   This particular case is further discussed in Section 4.5.1.  Another\n\
    \   particular case of interest is where the application signaling entity\n  \
    \ resides on the same device as the RSVP proxy.  In that case, this\n   interface\
    \ may be trivially realized as an internal API.  An example\n   environment based\
    \ on this particular case is illustrated in\n   Section 4.5.2.\n   The application\
    \ entity controlling the RSVP proxy (e.g., a SIP Call\n   Agent) would often be\
    \ aware of a number of endpoint capabilities, and\n   it has to be aware of which\
    \ endpoint can be best \"served\" by which\n   RSVP proxy anyways.  So it is reasonable\
    \ to assume that such an\n   application is aware of whether a given endpoint\
    \ is RSVP-capable or\n   not.  The application may also consider the QoS preconditions\
    \ and QoS\n   mechanisms signaled by an endpoint as per [RFC3312]/[RFC4032] and\n\
    \   [RFC5432].  The information about endpoint RSVP capability can then\n   be\
    \ used by the application to decide whether to trigger proxy\n   behavior or not\
    \ for a given endpoint.  This can facilitate gradual\n   and dynamic migration\
    \ from the proxy model towards the end-to-end\n   RSVP model as more and more\
    \ endpoints become RSVP-capable.\n   In some environments, the application entities\
    \ (e.g., SIP back-to-\n   back user agents) that need to control the RSVP proxies\
    \ would already\n   be deployed independently of the use, or not, of the\n   Application_Entity-Controlled\
    \ Proxy approach.  In this case, the\n   activation of the RSVP proxy approach\
    \ should not introduce\n   significant disruption in the application signaling\
    \ path.  In some\n   environments, additional application entities may need to\
    \ be deployed\n   to control the RSVP proxies.  In this case, the network operator\n\
    \   needs to consider the associated risks of disruption to the\n   application\
    \ signaling path.\n"
- title: 4.5.1.  Application_Entity-Controlled Sender Proxy Using "RSVP over GRE"
  contents:
  - "4.5.1.  Application_Entity-Controlled Sender Proxy Using \"RSVP over GRE\"\n\
    \   This approach is simply a particular case of the more general\n   Application_Entity-Controlled\
    \ Proxy, but where only RSVP Sender\n   Proxies need to be controlled by the application,\
    \ and where RSVP is\n   effectively used as the control protocol between the application-\n\
    \   signaling entity and the RSVP Sender Proxy.\n   In this approach, the RSVP\
    \ messages (e.g., RSVP Path message) are\n   effectively generated by the application\
    \ entity and logically\n   \"tunneled\" to the RSVP Sender Proxy via GRE tunneling.\
    \  This is to\n   ensure that the RSVP messages follow the exact same path as\
    \ the flow\n   they protect (as required by RSVP operations) on the segment of\
    \ the\n   end-to-end path that is to be subject to RSVP reservations.\n   Figure\
    \ 11 illustrates such an environment.\n                                |-------------|\n\
    \                    ////////////| Application |\\\\\\\\\\\\\\\\\\\n         \
    \          /            | Entity      |         \\\n                  /      \
    \       |-------------|          \\\n                 /                 /=/  \
    \                  \\\n                /                 /=/                 \
    \     \\\n               /                 /=/                        \\\n   \
    \           /                 /=/                          \\\n             /\
    \                 /=/                            \\\n            /           \
    \      /=/                              \\\n           /                 /=/ \
    \                               \\\n          /                 /=/          \
    \                        \\\n     |----|           |********|           ***  \
    \               |****|\n     | S  |-----------| RSVP   |-----------*r*-----------------|\
    \ R  |\n     |----|           | Sender |           ***                 |****|\n\
    \                      | Proxy  |\n                      |********|\n        \
    \                      =========RSVP====================>\n          *****************************************************>\n\
    \  |----| non-RSVP-capable     |----| RSVP-capable       ***\n  | S  | Sender\
    \               | R  | Receiver           *r* regular RSVP\n  |----|         \
    \             |----|                    *** router\n  ***> media flow\n  ==> \
    \ segment of flow path protected by RSVP reservation\n  /\\    Application-level\
    \ signaling\n  /=/  GRE-tunneled RSVP (Path messages)\n         Figure 11: Application_Entity-Controlled\
    \ Sender Proxy via\n                              \"RSVP over GRE\"\n   With the\
    \ Application_Entity-Controlled Sender Proxy using \"RSVP Over\n   GRE\", the\
    \ application entity:\n   o  generates a Path message on behalf of the sender,\
    \ corresponding to\n      the reservation needed by the application, and maintains\
    \ the\n      corresponding Path state.  The Path message built by the\n      application\
    \ entity is exactly the same as would be built by the\n      actual sender (if\
    \ it was RSVP-capable), with one single exception,\n      which is that the application\
    \ entity puts its own IP address as\n      the RSVP previous hop.  In particular,\
    \ it is recommended that the\n      source address of the Path message built by\
    \ the application entity\n      be set to the IP address of the sender (not of\
    \ the application\n      entity).  This helps ensure that, in the presence of\
    \ non-RSVP\n      routers and of load-balancing in the network where the load-\n\
    \      balancing algorithm takes into account the source IP address, the\n   \
    \   Path message generated by the application entity follows the exact\n     \
    \ same path as the actual stream sourced by the sender.\n   o  encapsulates the\
    \ Path message into a GRE tunnel whose destination\n      address is the RSVP\
    \ Sender Proxy, i.e., an RSVP router sitting on\n      the data path for the flow\
    \ (and upstream of the segment that\n      requires QoS guarantees via RSVP reservation).\n\
    \   o  processes the corresponding received RSVP messages (including Resv\n  \
    \    messages) as per regular RSVP.\n   o  synchronizes the RSVP reservation state\
    \ with application-level\n      requirements and signaling.\n   Note that since\
    \ the application entity encodes its own IP address as\n   the previous RSVP hop\
    \ inside the [RFC2205] RSVP_HOP object of the\n   Path message, the RSVP router\
    \ terminating the GRE tunnel naturally\n   addresses all the RSVP messages traveling\
    \ upstream hop-by-hop (such\n   as Resv messages) to the application entity (without\
    \ having to\n   encapsulate those in a reverse-direction GRE tunnel towards the\n\
    \   application entity).\n"
- title: 4.5.2.  Application_Entity-Controlled Proxy via Co-Location
  contents:
  - "4.5.2.  Application_Entity-Controlled Proxy via Co-Location\n   This approach\
    \ is simply a particular case of the more general\n   Application_Entity-Controlled\
    \ Proxy, but where the application entity\n   is co-located with the RSVP proxy.\
    \  As an example, Session Border\n   Controllers (SBCs) with on-board SIP agents\
    \ could implement RSVP\n   proxy functions and make use of such an approach to\
    \ achieve session\n   admission control over the SBC-to-SBC segment using RSVP\
    \ signaling.\n   Figure 12 illustrates operations of the Application_Entity-Controlled\n\
    \   RSVP Proxy via co-location.\n                  |---------|               |---------|\n\
    \          ////////| App     |////////\\\\\\\\\\\\\\| App     |\\\\\\\\\\\\\\\\\
    \\\n         /        | Entity  |               | Entity  |         \\\n     \
    \   /         |         |               |         |          \\\n    |----|  \
    \      |*********|      ***      |*********|         |----|\n    | S  |--------|\
    \ RSVP    |------*r*------| RSVP    |---------| R  |\n    |----|        | Sender\
    \  |      ***      | Receiver|         |----|\n                  | Proxy   | \
    \              | Proxy   |\n                  |*********|               |*********|\n\
    \                           =======RSVP======>\n         *******************************************************>\n\
    \ |----| Non-RSVP-capable   |----| Non-RSVP-capable      ***\n | S  | Sender \
    \            | R  | Receiver              *r* regular RSVP\n |----|          \
    \          |----|                       *** router\n ***> media flow\n ==>  segment\
    \ of flow path protected by RSVP reservation\n /\\   Application-level signaling\n\
    \      Figure 12: Application_Entity-Controlled Proxy via Co-Location\n   This\
    \ RSVP proxy approach does not require any protocol extensions.\n   We also observe\
    \ that when multiple sessions are to be established on\n   paths sharing the same\
    \ RSVP Sender Proxy and the same RSVP Receiver\n   Proxy, the RSVP proxies have\
    \ the option to establish aggregate RSVP\n   reservations (as defined in ([RFC3175]\
    \ or [RFC4860]) for a group of\n   sessions, instead of establishing one RSVP\
    \ reservation per session.\n"
- title: 4.6.  Policy_Server-Controlled Proxy
  contents:
  - "4.6.  Policy_Server-Controlled Proxy\n   In this approach, it is assumed that\
    \ a policy server, which is\n   located in the control plane of the network, controls\
    \ an RSVP proxy\n   that is located in the data path of the application flows\
    \ (i.e., \"on-\n   path\").  In turn, the policy server is triggered by an entity\n\
    \   involved in the application-level signaling.  With this approach, the\n  \
    \ RSVP proxy does not itself attempt to determine the application\n   reservation\
    \ requirements, but instead is instructed by the policy\n   server to establish,\
    \ maintain, and tear down reservations as needed\n   by the application flows.\
    \  Moreover, the entity participating in\n   application-level signaling does\
    \ not attempt to understand the\n   specific reservation mechanism (i.e., RSVP)\
    \ or the topology of the\n   network layer, but instead it simply asks the policy\
    \ server to\n   perform (or tear down) a reservation.  In other words, with this\n\
    \   approach, the solution for synchronizing RSVP signaling with\n   application-level\
    \ requirements is to rely on an application-level\n   entity that controls a policy\
    \ server that, in turn, controls an RSVP\n   proxy function that sits in the flow\
    \ data path.  This approach allows\n   control of an RSVP Sender Proxy, an RSVP\
    \ Receiver Proxy, or both.\n   Operation of the Policy_Server-Controlled proxy\
    \ is illustrated in\n   Figure 13.\n                                |---------|\n\
    \                   /////////////|  App    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n   \
    \               /             | Entity  |              \\\n                 /\
    \              |---------|               \\\n                /               \
    \     I                     \\\n               /                     I       \
    \               \\\n              /                 |----------|             \
    \    \\\n             /                  |  Policy  |                  \\\n  \
    \          /                   |  Server  |                   \\\n           /\
    \                    |----------|                    \\\n          /         \
    \           //          \\\\                    \\\n         /               \
    \     //            \\\\                    \\\n        /                    //\
    \              \\\\                    \\\n    |----|           |********|   \
    \   ***     |*********|          |----|\n    | S  |-----------|        |------*r*-----|\
    \         |----------| R  |\n    |----|           | RSVP   |      ***     | RSVP\
    \    |          |----|\n                     | Sender |              | Receiver|\n\
    \                     | Proxy  |              | Proxy   |\n                  \
    \   |********|              |*********|\n                             =====RSVP========>\n\
    \        **********************************************************>\n |----|\
    \ Non-RSVP-capable   |----| Non-RSVP-capable      ***\n | S  | Sender        \
    \     | R  | Receiver              *r* regular RSVP\n |----|                 \
    \   |----|                       *** router\n ***> media flow\n ==>  segment of\
    \ flow path protected by RSVP reservation\n /\\   Application signaling (e.g.,\
    \ SIP)\n //   RSVP proxy control interface\n I    Interface between application\
    \ entity and policy server\n                 Figure 13: Policy_Server-Controlled\
    \ Proxy\n   This RSVP proxy approach does not require any extension to the RSVP\n\
    \   protocol.  However, as with the Application_Entity-Controlled Proxy\n   approach\
    \ presented in Figure 10, this approach relies on an RSVP\n   proxy control interface\
    \ allowing control of the RSVP proxy (by the\n   policy server in this case).\
    \  This RSVP proxy control interface is\n   beyond the scope of this document.\
    \  Considerations about candidate\n   protocols for realizing such an interface\
    \ can be found in\n   Section 4.5.  Again, for situations in which only the RSVP\
    \ Sender\n   Proxy has to be controlled by this interface, the interface may be\n\
    \   realized through the simple use of RSVP itself, over a GRE tunnel\n   from\
    \ the policy server to the RSVP Sender Proxy.  This is similar to\n   what is\
    \ presented in Section 4.5.1, except that the \"RSVP over GRE\"\n   interface\
    \ is used in this case by the policy server (instead of the\n   application entity).\n\
    \   The interface between the application entity and the policy server is\n  \
    \ beyond the scope of this document.\n"
- title: 4.7.  RSVP-Signaling-Triggered Proxy
  contents:
  - "4.7.  RSVP-Signaling-Triggered Proxy\n   An RSVP proxy can also be triggered\
    \ and controlled through extended\n   RSVP signaling from the remote end that\
    \ is RSVP-capable (and supports\n   these RSVP extensions for proxy control).\
    \  For example, an RSVP-\n   capable sender could send a new or extended RSVP\
    \ message explicitly\n   requesting an RSVP proxy on the path towards the receiver\
    \ to behave\n   as an RSVP Receiver Proxy and also to trigger a reverse-direction\n\
    \   reservation, thus also behaving as an RSVP Sender Proxy.  The new or\n   extended\
    \ RSVP message sent by the sender could also include\n   attributes (e.g., bandwidth)\
    \ for the reservations to be signaled by\n   the RSVP proxy.\n   The challenges\
    \ in these explicit signaling schemes include the\n   following:\n   o  How can\
    \ the nodes determine when a reservation request ought to be\n      proxied and\
    \ when it should not, and accordingly invoke appropriate\n      signaling procedures?\n\
    \   o  How does the node sending the messages explicitly triggering the\n    \
    \  proxy know where the proxy is located, e.g., determine an IP\n      address\
    \ of the proxy that should reply to the signaling?\n   o  How is all the information\
    \ needed by a Sender Proxy to generate a\n      Path message actually communicated\
    \ to the proxy?\n   An example of such a mechanism is presented in [QOS-MOBILE].\
    \  This\n   scheme is primarily targeted to local access network reservations\n\
    \   whereby an end host can request resource reservations for both\n   incoming\
    \ and outgoing flows only over the access network.  This may\n   be useful in\
    \ environments where the access network is typically the\n   bottleneck while\
    \ the core is comparatively over-provisioned, as may\n   be the case with a number\
    \ of radio access technologies.  In this\n   proposal, messages targeted to the\
    \ proxy are flagged with one bit in\n   all RSVP messages.  Similarly, all RSVP\
    \ messages sent back by the\n   proxy are also flagged.  The use of such a flag\
    \ allows\n   differentiating between proxied and end-to-end reservations.  For\n\
    \   triggering an RSVP Receiver Proxy, the sender of the data sends a\n   Path\
    \ message that is marked with the mentioned flag.  The Receiver\n   Proxy is located\
    \ on the signaling and data path, eventually gets the\n   Path message, and replies\
    \ back with a Resv message.  A node triggers\n   an RSVP Sender Proxy with a newly\
    \ defined Path_Request message, which\n   instructs the proxy to send Path messages\
    \ towards the triggering\n   node.  The node then replies back with a Resv.  More\
    \ details can be\n   found in [QOS-MOBILE].\n   Such an RSVP-Signaling-Triggered\
    \ Proxy approach would require RSVP\n   signaling extensions (that are outside\
    \ the scope of this document).\n   However, it could provide more flexibility\
    \ in the control of the\n   proxy behavior (e.g., control of reverse reservation\
    \ parameters) than\n   would the Path-Triggered approaches defined in Section\
    \ 4.1 and\n   Section 4.2.\n   Through potential corresponding protocol extensions,\
    \ an RSVP-\n   Signaling-Triggered Proxy approach could facilitate operation (e.g.,\n\
    \   reduce or avoid the need for associated configuration) in hybrid\n   environments\
    \ involving both reservations established end-to-end and\n   reservations established\
    \ via RSVP proxies.  For example, [QOS-MOBILE]\n   proposed a mechanism allowing\
    \ an end-system to control whether a\n   reservation can be handled by an RSVP\
    \ proxy on the path, or is to be\n   established end-to-end.\n"
- title: 4.8.  Reachability Considerations
  contents:
  - "4.8.  Reachability Considerations\n   There may be situations in which the RSVP\
    \ Receiver Proxy is reachable\n   by the sender, while the receiver itself is\
    \ not.  In such situations,\n   it is possible that the RSVP Receiver Proxy is\
    \ not always aware that\n   the receiver is unreachable, and consequently may\
    \ accept to establish\n   an RSVP reservation on behalf of that receiver.  This\
    \ would result in\n   unnecessary reservation establishment and unnecessary network\n\
    \   resource consumption.\n   This is not considered a significant practical concern\
    \ for a number\n   of reasons.  First, in many cases, if the receiver is not reachable\n\
    \   from the sender, it will not be reachable for application signaling\n   either,\
    \ and so application-level session establishment will not be\n   possible in the\
    \ first place.  Secondly, where the receiver is\n   unreachable from the sender\
    \ but is reachable for application-level\n   signaling (say, because session establishment\
    \ is performed through an\n   off-path SIP agent that uses a different logical\
    \ topology to\n   communicate with the receiver), then the sender may detect that\
    \ the\n   receiver is unreachable before attempting reservation establishment.\n\
    \   This may be achieved through mechanisms such as ICE's connectivity\n   check\
    \ ([RFC5245]).  Finally, even if the sender does not detect that\n   the receiver\
    \ is unreachable before triggering the RSVP reservation\n   establishment, it\
    \ is very likely that the application will quickly\n   realize this lack of connectivity\
    \ (e.g., the human accepting the\n   phone call on the receiver side will not\
    \ hear the human's voice on\n   the sender side) and therefore tear down the session\
    \ (e.g., hang up\n   the phone), which in turn will trigger RSVP reservation release.\n\
    \   Nonetheless, it is recommended that network administrators consider\n   the\
    \ above in light of their particular environment when deploying\n   RSVP proxies.\n\
    \   The mirror considerations apply for situations involving an RSVP\n   Sender\
    \ Proxy and where the sender cannot reach the destination while\n   the RSVP Sender\
    \ Proxy can.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   In the environments of concern for this document,\
    \ RSVP messages are\n   used to control resource reservations on a segment of\
    \ the end-to-end\n   path of flows.  The general security considerations associated\
    \ with\n   [RFC2205] apply.  To ensure the integrity of the associated\n   reservation\
    \ and admission control mechanisms, the RSVP cryptographic\n   authentication\
    \ mechanisms defined in [RFC2747] and [RFC3097] can be\n   used.  Those protect\
    \ RSVP messages integrity hop-by-hop and provide\n   node authentication, thereby\
    \ protecting against corruption, spoofing\n   of RSVP messages, and replay.  [RSVP-SEC-KEY]\
    \ discusses key types and\n   key provisioning methods, as well as their respective\
    \ applicability\n   to RSVP authentication.\n   [RSVP-SEC-KEY] also discusses\
    \ applicability of IPsec mechanisms\n   ([RFC4302][RFC4303]) and associated key\
    \ provisioning methods for\n   security protection of RSVP.  This discussion applies\
    \ to the\n   protection of RSVP in the presence of RSVP proxies as defined in\
    \ this\n   document.\n   A subset of RSVP messages are signaled with the IP router\
    \ alert\n   option ([RFC2113], [RFC2711]).  Based on the current security\n  \
    \ concerns associated with the use of the IP router alert option, the\n   applicability\
    \ of RSVP (and therefore of the RSVP proxy approaches\n   discussed in this document)\
    \ is limited to controlled environments\n   (i.e., environments where the security\
    \ risks associated with the use\n   of the IP router alert option are understood\
    \ and protected against).\n   The security aspects and common practices around\
    \ the use of the\n   current IP router alert option, and consequences of using\
    \ the IP\n   router alert option by applications such as RSVP, are discussed in\n\
    \   detail in [RTR-ALERT].\n   A number of additional security considerations\
    \ apply to the use of\n   RSVP proxies and are discussed below.\n   With some\
    \ RSVP proxy approaches, the RSVP proxy operates autonomously\n   inside an RSVP\
    \ router.  This is the case for the Path-Triggered Proxy\n   approaches defined\
    \ in Section 4.1 and in Section 4.2, for the\n   Inspection-Triggered Proxy approach\
    \ defined in Section 4.3, for the\n   STUN-Triggered Proxy approach defined in\
    \ Section 4.4, and for the\n   RSVP-Signaling-Triggered approach defined in Section\
    \ 4.7.  Proper\n   reservation operation assumes that the RSVP proxy can be trusted\
    \ to\n   behave correctly in order to control the RSVP reservation as required\n\
    \   and expected by the end-systems.  Since the basic RSVP operation\n   already\
    \ assumes a trust model where end-systems trust RSVP nodes to\n   appropriately\
    \ perform RSVP reservations, the use of an RSVP proxy\n   that behaves autonomously\
    \ within an RSVP router is not seen as\n   introducing any significant additional\
    \ security threat or as\n   fundamentally modifying the RSVP trust model.\n  \
    \ With some RSVP proxy approaches, the RSVP proxy operates under the\n   control\
    \ of another entity.  This is the case for the\n   Application_Entity-Controlled\
    \ Proxy approach defined in Section 4.5\n   and for the Policy_Server-Controlled\
    \ Proxy approach defined in\n   Section 4.6.  This introduces additional security\
    \ risks since the\n   entity controlling the RSVP proxy needs to be trusted for\
    \ proper\n   reservation operation and also introduces additional authentication\n\
    \   and confidentiality requirements.  The exact mechanisms to establish\n   such\
    \ trust, authentication, and confidentiality are beyond the scope\n   of this\
    \ document, but they may include security mechanisms inside the\n   protocol used\
    \ as the control interface between the RSVP proxy and the\n   entity controlling\
    \ it, as well as security mechanisms for all the\n   interfaces involved in the\
    \ reservation control chain (e.g., inside\n   the application signaling protocol\
    \ between the end-systems and the\n   application entity, and, in the case of\
    \ the Policy_Server-Controlled\n   Proxy approach, in the protocol between the\
    \ application entity and\n   the policy server).\n   In some situations, the use\
    \ of RSVP proxy to control reservations on\n   behalf of end-systems may actually\
    \ reduce the security risk (at least\n   from the network operator viewpoint).\
    \  This could be the case, for\n   example, because the routers where the RSVP\
    \ proxy functionality runs\n   are less exposed to tampering than end-systems.\
    \  Such a case is\n   further discussed in Section 4 of [RFC5946].  This could\
    \ also be the\n   case because the use of RSVP proxy allows localization of RSVP\n\
    \   operation within the boundaries of a given administrative domain\n   (thus\
    \ easily operating as a controlled environment) while the end-to-\n   end flow\
    \ path spans multiple administrative domains.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   This document benefited from earlier work on the concept\
    \ of RSVP\n   proxy including the one documented by Silvano Gai, Dinesh Dutt,\n\
    \   Nitsan Elfassy, and Yoram Bernet.  It also benefited from discussions\n  \
    \ with Pratik Bose, Chris Christou, and Michael Davenport.  Tullio\n   Loffredo\
    \ and Massimo Sassi provided the base material for\n   Section 4.6.  Thanks to\
    \ James Polk, Magnus Westerlund, Dan Romascanu,\n   Ross Callon, Cullen Jennings,\
    \ and Jari Arkko for their thorough\n   review and comments.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2205]  Braden, B., Zhang, L., Berson, S.,\
    \ Herzog, S., and S.\n              Jamin, \"Resource ReSerVation Protocol (RSVP)\
    \ -- Version 1\n              Functional Specification\", RFC 2205, September\
    \ 1997.\n   [RFC2210]  Wroclawski, J., \"The Use of RSVP with IETF Integrated\n\
    \              Services\", RFC 2210, September 1997.\n   [RFC2475]  Blake, S.,\
    \ Black, D., Carlson, M., Davies, E., Wang, Z.,\n              and W. Weiss, \"\
    An Architecture for Differentiated\n              Services\", RFC 2475, December\
    \ 1998.\n   [RFC2747]  Baker, F., Lindell, B., and M. Talwar, \"RSVP Cryptographic\n\
    \              Authentication\", RFC 2747, January 2000.\n   [RFC3097]  Braden,\
    \ R. and L. Zhang, \"RSVP Cryptographic\n              Authentication -- Updated\
    \ Message Type Value\", RFC 3097,\n              April 2001.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              April 2010.\n   [RFC5389]  Rosenberg,\
    \ J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session Traversal\
    \ Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [QOS-MOBILE]    Manner, J., \"Provision of Quality\
    \ of Service in IP-\n                   based Mobile Access Networks\", Doctoral\n\
    \                   dissertation, University of Helsinki, 2003,\n            \
    \       <http://ethesis.helsinki.fi>.\n   [RFC1633]       Braden, B., Clark, D.,\
    \ and S. Shenker, \"Integrated\n                   Services in the Internet Architecture:\
    \ an Overview\",\n                   RFC 1633, June 1994.\n   [RFC2113]      \
    \ Katz, D., \"IP Router Alert Option\", RFC 2113,\n                   February\
    \ 1997.\n   [RFC2326]       Schulzrinne, H., Rao, A., and R. Lanphier, \"Real\
    \ Time\n                   Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n\
    \   [RFC2474]       Nichols, K., Blake, S., Baker, F., and D. Black,\n       \
    \            \"Definition of the Differentiated Services Field (DS\n         \
    \          Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n                \
    \   December 1998.\n   [RFC2711]       Partridge, C. and A. Jackson, \"IPv6 Router\
    \ Alert\n                   Option\", RFC 2711, October 1999.\n   [RFC2872]  \
    \     Bernet, Y. and R. Pabbati, \"Application and Sub\n                   Application\
    \ Identity Policy Element for Use with\n                   RSVP\", RFC 2872, June\
    \ 2000.\n   [RFC2961]       Berger, L., Gan, D., Swallow, G., Pan, P., Tommasi,\n\
    \                   F., and S. Molendini, \"RSVP Refresh Overhead\n          \
    \         Reduction Extensions\", RFC 2961, April 2001.\n   [RFC3175]       Baker,\
    \ F., Iturralde, C., Le Faucheur, F., and B.\n                   Davie, \"Aggregation\
    \ of RSVP for IPv4 and IPv6\n                   Reservations\", RFC 3175, September\
    \ 2001.\n   [RFC3261]       Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n \
    \                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n    \
    \               and E. Schooler, \"SIP: Session Initiation Protocol\",\n     \
    \              RFC 3261, June 2002.\n   [RFC3312]       Camarillo, G., Marshall,\
    \ W., and J. Rosenberg,\n                   \"Integration of Resource Management\
    \ and Session\n                   Initiation Protocol (SIP)\", RFC 3312, October\
    \ 2002.\n   [RFC3550]       Schulzrinne, H., Casner, S., Frederick, R., and V.\n\
    \                   Jacobson, \"RTP: A Transport Protocol for Real-Time\n    \
    \               Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3588]   \
    \    Calhoun, P., Loughney, J., Guttman, E., Zorn, G., and\n                 \
    \  J. Arkko, \"Diameter Base Protocol\", RFC 3588,\n                   September\
    \ 2003.\n   [RFC3644]       Snir, Y., Ramberg, Y., Strassner, J., Cohen, R., and\n\
    \                   B. Moore, \"Policy Quality of Service (QoS)\n            \
    \       Information Model\", RFC 3644, November 2003.\n   [RFC4032]       Camarillo,\
    \ G. and P. Kyzivat, \"Update to the Session\n                   Initiation Protocol\
    \ (SIP) Preconditions Framework\",\n                   RFC 4032, March 2005.\n\
    \   [RFC4301]       Kent, S. and K. Seo, \"Security Architecture for the\n   \
    \                Internet Protocol\", RFC 4301, December 2005.\n   [RFC4302] \
    \      Kent, S., \"IP Authentication Header\", RFC 4302,\n                   December\
    \ 2005.\n   [RFC4303]       Kent, S., \"IP Encapsulating Security Payload (ESP)\"\
    ,\n                   RFC 4303, December 2005.\n   [RFC4566]       Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP:\n                   Session Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC4741]       Enns, R., \"NETCONF Configuration\
    \ Protocol\", RFC 4741,\n                   December 2006.\n   [RFC4860]     \
    \  Le Faucheur, F., Davie, B., Bose, P., Christou, C.,\n                   and\
    \ M. Davenport, \"Generic Aggregate Resource\n                   ReSerVation Protocol\
    \ (RSVP) Reservations\", RFC 4860,\n                   May 2007.\n   [RFC4923]\
    \       Baker, F. and P. Bose, \"Quality of Service (QoS)\n                  \
    \ Signaling in a Nested Virtual Private Network\",\n                   RFC 4923,\
    \ August 2007.\n   [RFC5277]       Chisholm, S. and H. Trevino, \"NETCONF Event\n\
    \                   Notifications\", RFC 5277, July 2008.\n   [RFC5432]      \
    \ Polk, J., Dhesikan, S., and G. Camarillo, \"Quality of\n                   Service\
    \ (QoS) Mechanism Selection in the Session\n                   Description Protocol\
    \ (SDP)\", RFC 5432, March 2009.\n   [RFC5853]       Hautakorpi, J., Camarillo,\
    \ G., Penfield, R.,\n                   Hawrylyshen, A., and M. Bhatia, \"Requirements\
    \ from\n                   Session Initiation Protocol (SIP) Session Border\n\
    \                   Control (SBC) Deployments\", RFC 5853, April 2010.\n   [RFC5866]\
    \       Sun, D., McCann, P., Tschofenig, H., Tsou, T., Doria,\n              \
    \     A., and G. Zorn, \"Diameter Quality-of-Service\n                   Application\"\
    , RFC 5866, May 2010.\n   [RFC5946]       Le Faucheur, F., Manner, J., Narayanan,\
    \ A., Guillou,\n                   A., and H. Malik, \"Resource Reservation Protocol\n\
    \                   (RSVP) Extensions for Path-Triggered RSVP Receiver\n     \
    \              Proxy\", RFC 5946, October 2010.\n   [RFC5974]       Manner, J.,\
    \ Karagiannis, G., and A. McDonald, \"NSIS\n                   Signaling Layer\
    \ Protocol (NSLP) for Quality-of-\n                   Service Signaling\", RFC\
    \ 5974, October 2010.\n   [RSVP-SEC-KEY]  Behringer, M. and F. Le Faucheur, \"\
    Applicability of\n                   Keying Methods for RSVP Security\", Work\
    \ in Progress,\n                   June 2009.\n   [RTR-ALERT]     Le Faucheur,\
    \ F., \"IP Router Alert Considerations and\n                   Usage\", Work in\
    \ Progress, October 2009.\n   [W3C]           \"World Wide Web Consortium (W3C)\
    \ - Web Services\n                   Architecture\", <http://www.w3.org/TR/ws-arch/>.\n"
- title: Appendix A.  Use Cases for RSVP Proxies
  contents:
  - 'Appendix A.  Use Cases for RSVP Proxies

    '
- title: A.1.  RSVP-Based VoD Admission Control in Broadband Aggregation Networks
  contents:
  - "A.1.  RSVP-Based VoD Admission Control in Broadband Aggregation Networks\n  \
    \ As broadband services for residential customers are becoming more and\n   more\
    \ prevalent, next-generation aggregation networks are being\n   deployed in order\
    \ to aggregate traffic from broadband users (whether\n   attached via Digital\
    \ Subscriber Line technology, aka DSL; Fiber To\n   The Home/Curb, aka FTTx; Cable;\
    \ or other broadband access\n   technology).  Video on Demand (VoD) services,\
    \ which may be offered to\n   broadband users, present significant capacity planning\
    \ challenges for\n   the aggregation network for a number of reasons.  First,\
    \ each VoD\n   stream requires significant dedicated sustained bandwidth (typically\n\
    \   2-4 Mb/s in Standard Definition TV and 6-12 Mb/s in High Definition\n   TV).\
    \  Secondly, the VoD codec algorithms are very sensitive to packet\n   loss. \
    \ Finally, the load resulting from such services is very hard to\n   predict (e.g.,\
    \ it can vary quite suddenly with blockbuster titles\n   made available as well\
    \ as with promotional offerings).  As a result,\n   transport of VoD streams on\
    \ the aggregation network usually translate\n   into a strong requirement for\
    \ admission control.  The admission\n   control solution protects the quality\
    \ of established VoD sessions by\n   rejecting the additional excessive session\
    \ attempts during\n   unpredictable peaks, during link or node failures, or a\
    \ combination\n   of those factors.\n   RSVP can be used in the aggregation network\
    \ for admission control of\n   the VoD sessions.  However, since customer premises\
    \ equipment such as\n   Set Top Boxes (STBs) (which behave as the receiver for\
    \ VoD streams)\n   often do not support RSVP, the last IP hop in the aggregation\
    \ network\n   can behave as an RSVP Receiver Proxy.  This way, RSVP can be used\n\
    \   between VoD pumps and the last IP hop in the aggregation network to\n   perform\
    \ accurate admission control of VoD streams over the resources\n   set aside for\
    \ VoD in the aggregation network (typically a certain\n   percentage of the bandwidth\
    \ of any link).  As VoD streams are\n   unidirectional, a simple Path-Triggered\
    \ RSVP Receiver Proxy (as\n   described in Section 4.1) is all that is required\
    \ in this use case.\n   Figure 14 illustrates operation of RSVP-based admission\
    \ control of\n   VoD sessions in an aggregation network involving RSVP support\
    \ on the\n   VoD pump (the senders) and the RSVP Receiver proxy on the last IP\
    \ hop\n   of the aggregation network.  All the customer premises equipment\n \
    \  remains RSVP-unaware.\n                         |-------------|\n         \
    \                | VoD  SRM    |\n                         |             |\n \
    \                ////////|             |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n       \
    \         /        |-------------|              \\\n               /         \
    \                              \\\n              /                           \
    \              \\\n             /                                           \\\
    \n            /                                             \\\n           / \
    \                                              \\\n      |****|   ***   ***  \
    \ ***   |********|   |-----|    |---|\n      |VoD |---*r*---*r*---*r*---|RSVP\
    \    |---|DSLAM|~~~~|STB|--TV\n      |Pump|   ***   ***   ***   |Receiver|   |-----|\
    \    |---|\n      |****|                     |Proxy   |\n                    \
    \             |********|\n               <---Aggregation Net----------->\n   \
    \        ************************************************>\n           ==============RSVP================>\n\
    \   SRM Session Resource Manager\n   ***                       |---|\n   *r* regular\
    \ RSVP          |STB| Set Top Box\n   *** router                |---|\n   ***>\
    \ VoD media flow\n   ==>  segment of flow path protected by RSVP reservation\n\
    \   /\\   VoD Application-level signaling (e.g., RTSP)\n                Figure\
    \ 14: VoD Use Case with Receiver Proxy\n   In the case where the VoD pumps are\
    \ not RSVP-capable, an\n   Application_Entity-Controlled Sender Proxy via the\
    \ \"RSVP over GRE\"\n   approach (as described in Section 4.5.1) can also be implemented\
    \ on\n   the VoD Controller or Session Resource Manager (SRM) devices\n   typically\
    \ involved in VoD deployments.  Figure 15 illustrates\n   operation of RSVP-based\
    \ admission control of VoD sessions in an\n   aggregation network involving such\
    \ an Application_Entity-Controlled\n   Source Proxy combined with an RSVP Receiver\
    \ Proxy on the last IP hop\n   of the aggregation network.  All the customer premises\
    \ equipment, as\n   well as the VoD pumps, remain RSVP-unaware.\n            \
    \             |-------------|\n                     ////| VoD  SRM    |\\\\\\\\\
    \\\\\\\\\\\\\\\n                    /    |             |           \\\n      \
    \             /     |     +       |            \\\n                  /      |\
    \ RSVP Sender |             \\\n                 /       |Proxy Control|     \
    \         \\\n                /        |-------------|               \\\n    \
    \           /        /=/                             \\\n              /     \
    \   /=/                               \\\n             /        /=/          \
    \                       \\\n            /        /=/                         \
    \          \\\n           /        /=/                                     \\\n\
    \      |----|  |******|    ***  ***  |********|  |-----|    |---|\n      | VoD|--|RSVP\
    \  |----*r*--*r*--|RSVP    |--|DSLAM|~~~~|STB|--TV\n      |Pump|  |Sender|   \
    \ ***  ***  |Receiver|  |-----|    |---|\n      |----|  |Proxy |             \
    \ |Proxy   |\n              |******|              |********|\n               <---Aggregation\
    \ Net------------->\n           ************************************************>\n\
    \                    =========RSVP==============>\n   SRM Systems Resource Manager\n\
    \   ***                       |---|\n   *r* regular RSVP          |STB| Set Top\
    \ Box\n   *** router                |---|\n   ***> VoD media flow\n   ==>  segment\
    \ of flow path protected by RSVP reservation\n   /    VoD Application-level signaling\
    \ (e.g., RTSP)\n   /=/  GRE-tunneled RSVP (Path messages)\n                Figure\
    \ 15: VoD Use Case with Receiver Proxy\n                        and SRM-Based\
    \ Sender Proxy\n   The RSVP proxy entities specified in this document play a significant\n\
    \   role here since they allow immediate deployment of an RSVP-based\n   admission\
    \ control solution for VoD without requiring any upgrade to\n   the huge installed\
    \ base of non-RSVP-capable customer premises\n   equipment.  In one mode described\
    \ above, they also avoid upgrade of\n   non-RSVP-capable VoD pumps.  In turn,\
    \ this means that the benefits of\n   on-path admission control can be offered\
    \ to VoD services over\n   broadband aggregation networks without network or VoD\
    \ pump upgrade.\n   Those include accurate bandwidth accounting regardless of\
    \ topology\n   (hub-and-spoke, ring, mesh, star, arbitrary combinations) and dynamic\n\
    \   adjustment to any change in topology (such as failure, routing\n   change,\
    \ additional links, etc.).\n"
- title: A.2.  RSVP-Based Voice/Video Connection Admission Control (CAC) in
  contents:
  - "A.2.  RSVP-Based Voice/Video Connection Admission Control (CAC) in\n      Enterprise\
    \ WAN\n   More and more enterprises are migrating their telephony and\n   videoconferencing\
    \ applications onto IP.  When doing so, there is a\n   need for retaining admission\
    \ control capabilities of existing TDM-\n   based (Time-Division Multiplexing)\
    \ systems to ensure the QoS of these\n   applications is maintained even when\
    \ transiting through the\n   enterprise's Wide Area Network (WAN).  Since many\
    \ of the endpoints\n   already deployed (such as IP phones or videoconferencing\
    \ terminals)\n   are not RSVP-capable, RSVP proxy approaches are very useful:\
    \ they\n   allow deployment of an RSVP-based admission control solution over the\n\
    \   WAN without requiring upgrade of the existing terminals.\n   A common deployment\
    \ architecture for such environments relies on the\n   Application_Entity-Controlled\
    \ Proxy approach as defined in\n   Section 4.5.  Routers sitting at the edges\
    \ of the WAN are naturally\n   \"on-path\" for all inter-campus calls (or sessions)\
    \ and behave as RSVP\n   proxies.  The RSVP proxies establish, maintain, and tear\
    \ down RSVP\n   reservations over the WAN segment for the calls (or sessions)\
    \ under\n   the control of the SIP server/proxy.  The SIP server/proxy\n   synchronizes\
    \ the RSVP reservation status with the status of end-to-\n   end calls.  For example,\
    \ the called IP phone will only be instructed\n   to play a ring tone if the RSVP\
    \ reservation over the corresponding\n   WAN segment has been successfully established.\n\
    \   This architecture allowing RSVP-based admission control of voice and\n   video\
    \ on the enterprise WAN is illustrated in Figure 16.\n                       \
    \          |---------|\n                   //////////////| SIP     |\\\\\\\\\\\
    \\\\\\\\\\\\\\\n                  /              | Server/ |            \\\n \
    \                /               | Proxy   |             \\\n                /\
    \                |---------|              \\\n               /               \
    \ //       \\\\                \\\n              /                //         \\\
    \\                \\\n             /                //           \\\\        \
    \        \\\n            /                //             \\\\                \\\
    \n           /                //               \\\\                \\\n      |-----|\
    \      |********|   ***   ***   |********|       |-----|\n      | IP  |------|\
    \ Media  |---*r*---*r*---| Media  |-------|IP   |\n      |Phone|      | Relay\
    \  |   ***   ***   | Relay  |       |Phone|\n      |-----|      |  +     |   \
    \            |    +   |       |-----|\n                   | RSVP   |         \
    \      | RSVP   |\n                   | Proxy  |               | Proxy  |\n  \
    \                 |********|               |********|\n        <--campus-->  \
    \                              <--campus-->\n           network              \
    \                       network\n                        <---------WAN----------->\n\
    \        <*************> <***********************> <**************>\n        \
    \               <=========RSVP===========>\n   ***\n   *r*   Regular RSVP router\n\
    \   ***\n   <***> media flow\n   <==>  segment of flow path protected by RSVP\
    \ reservation\n   /\\    SIP signaling\n   //   control interface between the\
    \ SIP server/proxy and\n        RSVP proxy\n                 Figure 16: CAC on\
    \ Enterprise WAN Use Case\n"
- title: A.3.  RSVP Proxies for Mobile Access Networks
  contents:
  - "A.3.  RSVP Proxies for Mobile Access Networks\n   Mobile access networks are\
    \ increasingly based on IP technology.  This\n   implies that, on the network\
    \ layer, all traffic, both traditional\n   data and streamed data like audio or\
    \ video, is transmitted as\n   packets.  Increasingly popular multimedia applications\
    \ would benefit\n   from better than best-effort service from the network, a forwarding\n\
    \   service with strict Quality of Service (QoS) with guaranteed minimum\n   bandwidth\
    \ and bounded delay.  Other applications, such as electronic\n   commerce, network\
    \ control and management, and remote-login\n   applications, would also benefit\
    \ from a differentiated treatment.\n   The IETF has two main models for providing\
    \ differentiated treatment\n   of packets in routers.  The Integrated Services\
    \ (IntServ) model\n   [RFC1633], together with the Resource Reservation Protocol\
    \ (RSVP)\n   [RFC2205], [RFC2210], [RFC2961] provides per-flow guaranteed end-to-\n\
    \   end transmission service.  The Differentiated Services (Diffserv)\n   framework\
    \ [RFC2475] provides non-signaled flow differentiation that\n   usually provides,\
    \ but does not guarantee, proper transmission\n   service.\n   However, these\
    \ architectures have potential weaknesses for deployment\n   in Mobile Access\
    \ Networks.  For example, RSVP requires support from\n   both communication endpoints,\
    \ and the protocol may have potential\n   performance issues in mobile environments.\
    \  Diffserv can only provide\n   statistical guarantees and is not well suited\
    \ for dynamic\n   environments.\n   Let us consider a scenario, where a fixed\
    \ network correspondent node\n   (CN) would be sending a multimedia stream to\
    \ an end host behind a\n   wireless link.  If the correspondent node does not\
    \ support RSVP, it\n   cannot signal its traffic characteristics to the network\
    \ and request\n   specific forwarding services.  Likewise, if the correspondent\
    \ node is\n   not able to mark its traffic with a proper Differentiated Services\n\
    \   codepoint (DSCP) to trigger service differentiation, the multimedia\n   stream\
    \ will get only best-effort service, which may result in poor\n   visual and audio\
    \ quality in the receiving application.  Even if the\n   connecting wired network\
    \ is over-provisioned, an end host would still\n   benefit from local resource\
    \ reservations, especially in wireless\n   access networks, where the bottleneck\
    \ resource is most probably the\n   wireless link.\n   RSVP proxies would be a\
    \ very beneficial solution to this problem.  It\n   would allow distinguishing\
    \ local network reservations from the end-\n   to-end reservations.  The end host\
    \ does not need to know the access\n   network topology or the nodes that will\
    \ reserve the local resources.\n   The access network would do resource reservations\
    \ for both incoming\n   and outgoing flows based on certain criteria, e.g., filters\
    \ based on\n   application protocols.  Another option is that the mobile end host\n\
    \   makes an explicit reservation that identifies the intention, and the\n   access\
    \ network will find the correct local access network node(s) to\n   respond to\
    \ the reservation.  RSVP proxies would, thus, allow resource\n   reservation over\
    \ the segment that is the most likely bottleneck, the\n   wireless link.  If the\
    \ wireless access network uses a local mobility\n   management mechanism, where\
    \ the IP address of the mobile node does\n   not change during handover, RSVP\
    \ reservations would follow the mobile\n   node movement.\n"
- title: A.4.  RSVP Proxies for Reservations in the Presence of IPsec Gateways
  contents:
  - "A.4.  RSVP Proxies for Reservations in the Presence of IPsec Gateways\n   [RFC4923]\
    \ discusses how resource reservation can be supported end-to-\n   end in a nested\
    \ VPN environment.  At each VPN level, VPN routers\n   behave as [RFC4301] security\
    \ gateways between a plaintext domain and\n   a ciphertext domain.  To achieve\
    \ end-to-end resource reservation, the\n   VPN routers process RSVP signaling\
    \ on the plaintext side, perform\n   aggregation of plaintext reservations, and\
    \ maintain the corresponding\n   aggregate RSVP reservations on the ciphertext\
    \ side.  Each aggregate\n   reservation is established on behalf of multiple encrypted\
    \ end-to-end\n   sessions sharing the same ingress and egress VPN routers.  These\n\
    \   aggregate reservations can be as specified in [RFC3175] or [RFC4860].\n  \
    \ Section 3 of [RFC4923] discusses the necessary data flows within a\n   VPN router\
    \ to achieve the behavior described in the previous\n   paragraph.  Two mechanisms\
    \ are described to achieve such data flows.\n   Section 3.1 presents the case\
    \ where the VPN router carries data\n   across the cryptographic boundary.  Section\
    \ 3.2 discusses the case\n   where the VPN router uses a Network Guard.\n   Where\
    \ such mechanisms are not supported by the VPN routers, the\n   approach for end-to-end\
    \ reservations presented in [RFC4923] cannot be\n   deployed.  An alternative\
    \ approach to support resource reservations\n   within the ciphertext core is\
    \ to use the Application_Entity-\n   Controlled Proxy approach (as defined in\
    \ Section 4.5) in the\n   following way:\n   o  the RSVP proxies are located inside\
    \ the ciphertext domain and use\n      aggregate RSVP reservations.\n   o  the\
    \ application entity exchange application-level signaling with\n      the end-systems\
    \ in the plaintext domain.\n   o  the application entity controls the RSVP proxies\
    \ in the ciphertext\n      domain via an RSVP proxy control interface.\n   This\
    \ is illustrated in Figure 17 in the case where the application is\n   SIP-based\
    \ multimedia communications.\n         |-------|                             \
    \       |-------|\n         |SIP    |///////////////////\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\|SIP    |\n        /|Server/|                                    |Server/|\\\
    \n       / |Proxy  |                                    |Proxy  | \\\n      /\
    \  |-------|                                    |-------|  \\\n     /      ^ \
    \   \\\\                                  //   ^       \\\n    /       ^     \\\
    \\                                //    ^        \\\n   /        ^      \\\\ \
    \                             //     ^         \\\n |***|   |------|  |********|\
    \   ***   ***   |********|  |------|   |***|\n | S |---|IPsec |--|  ARSVP |---*r*---*r*---|\
    \ ARSVP  |--|IPsec |---| R |\n |***|   | GW   |  | Sender |   ***   ***   |Receiver|\
    \  | GW   |   |***|\n         |------|  |  Proxy |               | Proxy  |  |------|\n\
    \                   |********|               |********|\n     ***PT*****> **********************CT****************>\
    \ ****PT***>\n     =====>                                                   =====>\n\
    \                            =====ARSVP======>\n |****| RSVP-capable      |****|\
    \ RSVP-capable         ***\n | S  | Sender            | R  | Receiver        \
    \     *r* regular RSVP\n |****|                   |****|                     \
    \ *** router\n |------|\n |IPsec | IPsec security gateway\n | GW   |\n |------|\n\
    \ ARSVP Aggregate RSVP\n ***>  media flow\n ==>   segment of flow path protected\
    \ by RSVP reservation\n / \\   SIP signaling\n  ^    Network management interface\
    \ between SIP server/proxy\n       and IPsec security gateway\n //    control\
    \ interface between SIP server/proxy and ARSVP proxy\n PT    Plaintext network\n\
    \ CT    Ciphertext network\n        Figure 17: RSVP Proxies for Reservations in\
    \ the Presence of\n                              IPsec Gateways\n   Where the\
    \ sender and receiver are RSVP-capable, they may also use\n   RSVP signaling.\
    \  This achieves resource reservation on the plaintext\n   segments of the end-to-end,\
    \ i.e.,\n   o  from the sender to the ingress IPsec gateway, and\n   o  from the\
    \ egress IPsec gateway to the receiver.\n   In this use case, because the VPN\
    \ routers do not support any RSVP-\n   specific mechanism, the end-to-end RSVP\
    \ signaling is effectively\n   hidden by the IPsec gateways on the ciphertext\
    \ segment of the end-to-\n   end path.\n   As with the Application_Entity-Controlled\
    \ Proxy approach (defined in\n   Section 4.5), the solution here for synchronizing\
    \ RSVP signaling with\n   application-level signaling is to rely on an application-level\n\
    \   signaling device that controls an on-path RSVP proxy function.\n   However,\
    \ in this use case, the RSVP proxies are a component of a\n   ciphertext network\
    \ where all user (bearer) traffic is IPsec\n   encrypted.  This has a number of\
    \ implications, including the\n   following:\n   1.  encrypted flows cannot be\
    \ identified in the ciphertext domain so\n       that network nodes can only classify\
    \ traffic based on IP address\n       and Differentiated Services codepoints (DSCPs).\
    \  As a result,\n       only aggregate RSVP reservations (such as those specified\
    \ in\n       [RFC3175] or [RFC4860]) can be used.  This is similar to\n      \
    \ [RFC4923].\n   2.  Determining the RSVP Sender Proxy and RSVP Receiver Proxy\
    \ to be\n       used for aggregation of a given flow from sender to receiver\n\
    \       creates a number of challenges.  Details on how this may be\n       achieved\
    \ are beyond the scope of this document.  We observe that,\n       as illustrated\
    \ in Figure 17, this may be facilitated by a network\n       management interface\
    \ between the application entity and the IPsec\n       gateways.  For example,\
    \ this interface may be used by the\n       application entity to obtain information\
    \ about which IPsec\n       gateway is on the path of a given end-to-end flow.\
    \  Then, the\n       application entity may maintain awareness of which RSVP proxy\
    \ is\n       on the ciphertext path between a given pair of IPsec gateways.\n\
    \       How such awareness is achieved is beyond the scope of this\n       document.\
    \  We simply observe that such awareness can be easily\n       achieved through\
    \ simple configuration in the particular case\n       where a single (physical\
    \ or logical) RSVP proxy is fronting a\n       given IPsec gateway.  We also observe\
    \ that when awareness of the\n       RSVP Receiver Proxy for a particular egress\
    \ IPsec gateway (or\n       end-to-end flow) is not available, the aggregate reservation\
    \ may\n       be signaled by the RSVP Sender Proxy to the destination address\n\
    \       of the egress IPsec gateway and then proxied by the RSVP Receiver\n  \
    \     Proxy.\n   Different flavors of operations are possible in terms of aggregate\n\
    \   reservation sizing.  For example, the application entity can initiate\n  \
    \ an aggregate reservation of fixed size a priori and then simply keep\n   count\
    \ of the bandwidth used by sessions and reject sessions that\n   would result\
    \ in excess usage of an aggregate reservation.  The\n   application entity could\
    \ also re-size the aggregate reservations on a\n   session-by-session basis. \
    \ Alternatively, the application entity\n   could re-size the aggregate reservations\
    \ in step increments typically\n   corresponding to the bandwidth requirement\
    \ of multiple sessions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Francois Le Faucheur\n   Cisco Systems\n   Greenside,\
    \ 400 Avenue de Roumanille\n   Sophia Antipolis  06410\n   France\n   Phone: +33\
    \ 4 97 23 26 19\n   EMail: flefauch@cisco.com\n   Jukka Manner\n   Aalto University\n\
    \   Department of Communications and Networking (Comnet)\n   P.O. Box 13000\n\
    \   FIN-00076 Aalto\n   Finland\n   Phone: +358 9 470 22481\n   EMail: jukka.manner@tkk.fi\n\
    \   URI:   http://www.netlab.tkk.fi/~jmanner/\n   Dan Wing\n   Cisco Systems\n\
    \   170 West Tasman Drive\n   San Jose, CA  95134\n   United States\n   EMail:\
    \ dwing@cisco.com\n   Allan Guillou\n   SFR\n   40-42 Quai du Point du Jour\n\
    \   Boulogne-Billancourt  92659\n   France\n   EMail: allan.guillou@sfr.com\n"
