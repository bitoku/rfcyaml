- contents:
  - "           3755, 3757, 3845                                          ISC\n         3007,
    3597, 3226                                       VeriSign\n            Resource
    Records for the DNS Security Extensions\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document is part of a family of documents that describe the
    DNS\n   Security Extensions (DNSSEC).  The DNS Security Extensions are a\n   collection
    of resource records and protocol modifications that\n   provide source authentication
    for the DNS.  This document defines the\n   public key (DNSKEY), delegation signer
    (DS), resource record digital\n   signature (RRSIG), and authenticated denial
    of existence (NSEC)\n   resource records.  The purpose and format of each resource
    record is\n   described in detail, and an example of each resource record is given.\n
    \  This document obsoletes RFC 2535 and incorporates changes from all\n   updates
    to RFC 2535.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .  3\n       1.1.  Background and Related Documents . . . . . . . . .
    . .  3\n       1.2.  Reserved Words . . . . . . . . . . . . . . . . . . . .  3\n
    \  2.  The DNSKEY Resource Record . . . . . . . . . . . . . . . . .  4\n       2.1.
    \ DNSKEY RDATA Wire Format . . . . . . . . . . . . . . .  4\n             2.1.1.
    \ The Flags Field. . . . . . . . . . . . . . . .  4\n             2.1.2.  The
    Protocol Field . . . . . . . . . . . . . .  5\n             2.1.3.  The Algorithm
    Field. . . . . . . . . . . . . .  5\n             2.1.4.  The Public Key Field
    . . . . . . . . . . . . .  5\n             2.1.5.  Notes on DNSKEY RDATA Design
    . . . . . . . . .  5\n       2.2.  The DNSKEY RR Presentation Format. . . . .
    . . . . . .  5\n       2.3.  DNSKEY RR Example  . . . . . . . . . . . . . . .
    . . .  6\n   3.  The RRSIG Resource Record  . . . . . . . . . . . . . . . . .
    \ 6\n       3.1.  RRSIG RDATA Wire Format. . . . . . . . . . . . . . . .  7\n
    \            3.1.1.  The Type Covered Field . . . . . . . . . . . .  7\n             3.1.2.
    \ The Algorithm Number Field . . . . . . . . . .  8\n             3.1.3.  The
    Labels Field . . . . . . . . . . . . . . .  8\n             3.1.4.  Original TTL
    Field . . . . . . . . . . . . . .  8\n             3.1.5.  Signature Expiration
    and Inception Fields. . .  9\n             3.1.6.  The Key Tag Field. . . . .
    . . . . . . . . . .  9\n             3.1.7.  The Signer's Name Field. . . . .
    . . . . . . .  9\n             3.1.8.  The Signature Field. . . . . . . . . .
    . . . .  9\n       3.2.  The RRSIG RR Presentation Format . . . . . . . . . .
    . 10\n       3.3.  RRSIG RR Example . . . . . . . . . . . . . . . . . . . 11\n
    \  4.  The NSEC Resource Record . . . . . . . . . . . . . . . . . . 12\n       4.1.
    \ NSEC RDATA Wire Format . . . . . . . . . . . . . . . . 13\n             4.1.1.
    \ The Next Domain Name Field . . . . . . . . . . 13\n             4.1.2.  The
    Type Bit Maps Field. . . . . . . . . . . . 13\n             4.1.3.  Inclusion
    of Wildcard Names in NSEC RDATA. . . 14\n       4.2.  The NSEC RR Presentation
    Format. . . . . . . . . . . . 14\n       4.3.  NSEC RR Example. . . . . . . .
    . . . . . . . . . . . . 15\n   5.  The DS Resource Record . . . . . . . . . .
    . . . . . . . . . 15\n       5.1.  DS RDATA Wire Format . . . . . . . . . . .
    . . . . . . 16\n             5.1.1.  The Key Tag Field. . . . . . . . . . . .
    . . . 16\n             5.1.2.  The Algorithm Field. . . . . . . . . . . . . .
    16\n             5.1.3.  The Digest Type Field. . . . . . . . . . . . . 17\n             5.1.4.
    \ The Digest Field . . . . . . . . . . . . . . . 17\n       5.2.  Processing of
    DS RRs When Validating Responses . . . . 17\n       5.3.  The DS RR Presentation
    Format. . . . . . . . . . . . . 17\n       5.4.  DS RR Example. . . . . . . .
    . . . . . . . . . . . . . 18\n   6.  Canonical Form and Order of Resource Records
    . . . . . . . . 18\n       6.1.  Canonical DNS Name Order . . . . . . . . . .
    . . . . . 18\n       6.2.  Canonical RR Form. . . . . . . . . . . . . . . . .
    . . 19\n       6.3.  Canonical RR Ordering within an RRset. . . . . . . . . 20\n
    \  7.  IANA Considerations. . . . . . . . . . . . . . . . . . . . . 20\n   8.
    \ Security Considerations. . . . . . . . . . . . . . . . . . . 21\n   9.  Acknowledgements
    . . . . . . . . . . . . . . . . . . . . . . 22\n   10. References . . . . . .
    . . . . . . . . . . . . . . . . . . . 22\n       10.1. Normative References .
    . . . . . . . . . . . . . . . . 22\n       10.2. Informative References . . .
    . . . . . . . . . . . . . 23\n   A.  DNSSEC Algorithm and Digest Types. . . .
    . . . . . . . . . . 24\n       A.1.  DNSSEC Algorithm Types . . . . . . . . .
    . . . . . . . 24\n             A.1.1.  Private Algorithm Types. . . . . . . .
    . . . . 25\n       A.2.  DNSSEC Digest Types. . . . . . . . . . . . . . . . .
    . 25\n   B.  Key Tag Calculation. . . . . . . . . . . . . . . . . . . . . 25\n
    \      B.1.  Key Tag for Algorithm 1 (RSA/MD5). . . . . . . . . . . 27\n   Authors'
    Addresses . . . . . . . . . . . . . . . . . . . . . . . 28\n   Full Copyright
    Statement . . . . . . . . . . . . . . . . . . . . 29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The DNS Security Extensions (DNSSEC) introduce four new
    DNS resource\n   record types: DNS Public Key (DNSKEY), Resource Record Signature\n
    \  (RRSIG), Next Secure (NSEC), and Delegation Signer (DS).  This\n   document
    defines the purpose of each resource record (RR), the RR's\n   RDATA format, and
    its presentation format (ASCII representation).\n"
  - contents:
    - "1.1.  Background and Related Documents\n   This document is part of a family
      of documents defining DNSSEC, which\n   should be read together as a set.\n
      \  [RFC4033] contains an introduction to DNSSEC and definition of common\n   terms;
      the reader is assumed to be familiar with this document.\n   [RFC4033] also
      contains a list of other documents updated by and\n   obsoleted by this document
      set.\n   [RFC4035] defines the DNSSEC protocol operations.\n   The reader is
      also assumed to be familiar with the basic DNS concepts\n   described in [RFC1034],
      [RFC1035], and the subsequent documents that\n   update them, particularly [RFC2181]
      and [RFC2308].\n   This document defines the DNSSEC resource records.  All numeric
      DNS\n   type codes given in this document are decimal integers.\n"
    title: 1.1.  Background and Related Documents
  - contents:
    - "1.2.  Reserved Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.2.  Reserved Words
  title: 1.  Introduction
- contents:
  - "2.  The DNSKEY Resource Record\n   DNSSEC uses public key cryptography to sign
    and authenticate DNS\n   resource record sets (RRsets).  The public keys are stored
    in DNSKEY\n   resource records and are used in the DNSSEC authentication process\n
    \  described in [RFC4035]: A zone signs its authoritative RRsets by\n   using
    a private key and stores the corresponding public key in a\n   DNSKEY RR.  A resolver
    can then use the public key to validate\n   signatures covering the RRsets in
    the zone, and thus to authenticate\n   them.\n   The DNSKEY RR is not intended
    as a record for storing arbitrary\n   public keys and MUST NOT be used to store
    certificates or public keys\n   that do not directly relate to the DNS infrastructure.\n
    \  The Type value for the DNSKEY RR type is 48.\n   The DNSKEY RR is class independent.\n
    \  The DNSKEY RR has no special TTL requirements.\n"
  - contents:
    - "2.1.  DNSKEY RDATA Wire Format\n   The RDATA for a DNSKEY RR consists of a
      2 octet Flags Field, a 1\n   octet Protocol Field, a 1 octet Algorithm Field,
      and the Public Key\n   Field.\n                        1 1 1 1 1 1 1 1 1 1 2
      2 2 2 2 2 2 2 2 2 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |              Flags            |    Protocol   |   Algorithm   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                                                               /\n   /                            Public
      Key                         /\n   /                                                               /\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    - contents:
      - "2.1.1.  The Flags Field\n   Bit 7 of the Flags field is the Zone Key flag.
        \ If bit 7 has value 1,\n   then the DNSKEY record holds a DNS zone key, and
        the DNSKEY RR's\n   owner name MUST be the name of a zone.  If bit 7 has value
        0, then\n   the DNSKEY record holds some other type of DNS public key and
        MUST\n   NOT be used to verify RRSIGs that cover RRsets.\n   Bit 15 of the
        Flags field is the Secure Entry Point flag, described\n   in [RFC3757].  If
        bit 15 has value 1, then the DNSKEY record holds a\n   key intended for use
        as a secure entry point.  This flag is only\n   intended to be a hint to zone
        signing or debugging software as to the\n   intended use of this DNSKEY record;
        validators MUST NOT alter their\n   behavior during the signature validation
        process in any way based on\n   the setting of this bit.  This also means
        that a DNSKEY RR with the\n   SEP bit set would also need the Zone Key flag
        set in order to be able\n   to generate signatures legally.  A DNSKEY RR with
        the SEP set and the\n   Zone Key flag not set MUST NOT be used to verify RRSIGs
        that cover\n   RRsets.\n   Bits 0-6 and 8-14 are reserved: these bits MUST
        have value 0 upon\n   creation of the DNSKEY RR and MUST be ignored upon receipt.\n"
      title: 2.1.1.  The Flags Field
    - contents:
      - "2.1.2.  The Protocol Field\n   The Protocol Field MUST have value 3, and
        the DNSKEY RR MUST be\n   treated as invalid during signature verification
        if it is found to be\n   some value other than 3.\n"
      title: 2.1.2.  The Protocol Field
    - contents:
      - "2.1.3.  The Algorithm Field\n   The Algorithm field identifies the public
        key's cryptographic\n   algorithm and determines the format of the Public
        Key field.  A list\n   of DNSSEC algorithm types can be found in Appendix
        A.1\n"
      title: 2.1.3.  The Algorithm Field
    - contents:
      - "2.1.4.  The Public Key Field\n   The Public Key Field holds the public key
        material.  The format\n   depends on the algorithm of the key being stored
        and is described in\n   separate documents.\n"
      title: 2.1.4.  The Public Key Field
    - contents:
      - "2.1.5.  Notes on DNSKEY RDATA Design\n   Although the Protocol Field always
        has value 3, it is retained for\n   backward compatibility with early versions
        of the KEY record.\n"
      title: 2.1.5.  Notes on DNSKEY RDATA Design
    title: 2.1.  DNSKEY RDATA Wire Format
  - contents:
    - "2.2.  The DNSKEY RR Presentation Format\n   The presentation format of the
      RDATA portion is as follows:\n   The Flag field MUST be represented as an unsigned
      decimal integer.\n   Given the currently defined flags, the possible values
      are: 0, 256,\n   and 257.\n   The Protocol Field MUST be represented as an unsigned
      decimal integer\n   with a value of 3.\n   The Algorithm field MUST be represented
      either as an unsigned decimal\n   integer or as an algorithm mnemonic as specified
      in Appendix A.1.\n   The Public Key field MUST be represented as a Base64 encoding
      of the\n   Public Key.  Whitespace is allowed within the Base64 text.  For a\n
      \  definition of Base64 encoding, see [RFC3548].\n"
    title: 2.2.  The DNSKEY RR Presentation Format
  - contents:
    - "2.3.  DNSKEY RR Example\n   The following DNSKEY RR stores a DNS zone key for
      example.com.\n   example.com. 86400 IN DNSKEY 256 3 5 ( AQPSKmynfzW4kyBv015MUG2DeIQ3\n
      \                                         Cbl+BBZH4b/0PY1kxkmvHjcZc8no\n                                          kfzj31GajIQKY+5CptLr3buXA10h\n
      \                                         WqTkF7H6RfoRqXQeogmMHfpftf6z\n                                          Mv1LyBUgia7za6ZEzOJBOztyvhjL\n
      \                                         742iU/TpPSEDhm2SNKLijfUppn1U\n                                          aNvv4w==
      \ )\n   The first four text fields specify the owner name, TTL, Class, and RR\n
      \  type (DNSKEY).  Value 256 indicates that the Zone Key bit (bit 7) in\n   the
      Flags field has value 1.  Value 3 is the fixed Protocol value.\n   Value 5 indicates
      the public key algorithm.  Appendix A.1 identifies\n   algorithm type 5 as RSA/SHA1
      and indicates that the format of the\n   RSA/SHA1 public key field is defined
      in [RFC3110].  The remaining\n   text is a Base64 encoding of the public key.\n"
    title: 2.3.  DNSKEY RR Example
  title: 2.  The DNSKEY Resource Record
- contents:
  - "3.  The RRSIG Resource Record\n   DNSSEC uses public key cryptography to sign
    and authenticate DNS\n   resource record sets (RRsets).  Digital signatures are
    stored in\n   RRSIG resource records and are used in the DNSSEC authentication\n
    \  process described in [RFC4035].  A validator can use these RRSIG RRs\n   to
    authenticate RRsets from the zone.  The RRSIG RR MUST only be used\n   to carry
    verification material (digital signatures) used to secure\n   DNS operations.\n
    \  An RRSIG record contains the signature for an RRset with a particular\n   name,
    class, and type.  The RRSIG RR specifies a validity interval\n   for the signature
    and uses the Algorithm, the Signer's Name, and the\n   Key Tag to identify the
    DNSKEY RR containing the public key that a\n   validator can use to verify the
    signature.\n   Because every authoritative RRset in a zone must be protected by
    a\n   digital signature, RRSIG RRs must be present for names containing a\n   CNAME
    RR.  This is a change to the traditional DNS specification\n   [RFC1034], which
    stated that if a CNAME is present for a name, it is\n   the only type allowed
    at that name.  A RRSIG and NSEC (see Section 4)\n   MUST exist for the same name
    as a CNAME resource record in a signed\n   zone.\n   The Type value for the RRSIG
    RR type is 46.\n   The RRSIG RR is class independent.\n   An RRSIG RR MUST have
    the same class as the RRset it covers.\n   The TTL value of an RRSIG RR MUST match
    the TTL value of the RRset it\n   covers.  This is an exception to the [RFC2181]
    rules for TTL values\n   of individual RRs within a RRset: individual RRSIG RRs
    with the same\n   owner name will have different TTL values if the RRsets they
    cover\n   have different TTL values.\n"
  - contents:
    - "3.1.  RRSIG RDATA Wire Format\n   The RDATA for an RRSIG RR consists of a 2
      octet Type Covered field, a\n   1 octet Algorithm field, a 1 octet Labels field,
      a 4 octet Original\n   TTL field, a 4 octet Signature Expiration field, a 4
      octet Signature\n   Inception field, a 2 octet Key tag, the Signer's Name field,
      and the\n   Signature field.\n                        1 1 1 1 1 1 1 1 1 1 2
      2 2 2 2 2 2 2 2 2 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |        Type Covered           |  Algorithm    |     Labels    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Original TTL                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Signature Expiration                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Signature Inception                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            Key Tag            |                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \        Signer's Name         /\n   /                                                               /\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               /\n
      \  /                            Signature                          /\n   /                                                               /\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    - contents:
      - "3.1.1.  The Type Covered Field\n   The Type Covered field identifies the
        type of the RRset that is\n   covered by this RRSIG record.\n"
      title: 3.1.1.  The Type Covered Field
    - contents:
      - "3.1.2.  The Algorithm Number Field\n   The Algorithm Number field identifies
        the cryptographic algorithm\n   used to create the signature.  A list of DNSSEC
        algorithm types can\n   be found in Appendix A.1\n"
      title: 3.1.2.  The Algorithm Number Field
    - contents:
      - "3.1.3.  The Labels Field\n   The Labels field specifies the number of labels
        in the original RRSIG\n   RR owner name.  The significance of this field is
        that a validator\n   uses it to determine whether the answer was synthesized
        from a\n   wildcard.  If so, it can be used to determine what owner name was\n
        \  used in generating the signature.\n   To validate a signature, the validator
        needs the original owner name\n   that was used to create the signature.  If
        the original owner name\n   contains a wildcard label (\"*\"), the owner name
        may have been\n   expanded by the server during the response process, in which
        case the\n   validator will have to reconstruct the original owner name in
        order\n   to validate the signature.  [RFC4035] describes how to use the Labels\n
        \  field to reconstruct the original owner name.\n   The value of the Labels
        field MUST NOT count either the null (root)\n   label that terminates the
        owner name or the wildcard label (if\n   present).  The value of the Labels
        field MUST be less than or equal\n   to the number of labels in the RRSIG
        owner name.  For example,\n   \"www.example.com.\" has a Labels field value
        of 3, and\n   \"*.example.com.\" has a Labels field value of 2.  Root (\".\")
        has a\n   Labels field value of 0.\n   Although the wildcard label is not
        included in the count stored in\n   the Labels field of the RRSIG RR, the
        wildcard label is part of the\n   RRset's owner name when the signature is
        generated or verified.\n"
      title: 3.1.3.  The Labels Field
    - contents:
      - "3.1.4.  Original TTL Field\n   The Original TTL field specifies the TTL of
        the covered RRset as it\n   appears in the authoritative zone.\n   The Original
        TTL field is necessary because a caching resolver\n   decrements the TTL value
        of a cached RRset.  In order to validate a\n   signature, a validator requires
        the original TTL.  [RFC4035]\n   describes how to use the Original TTL field
        value to reconstruct the\n   original TTL.\n"
      title: 3.1.4.  Original TTL Field
    - contents:
      - "3.1.5.  Signature Expiration and Inception Fields\n   The Signature Expiration
        and Inception fields specify a validity\n   period for the signature.  The
        RRSIG record MUST NOT be used for\n   authentication prior to the inception
        date and MUST NOT be used for\n   authentication after the expiration date.\n
        \  The Signature Expiration and Inception field values specify a date\n   and
        time in the form of a 32-bit unsigned number of seconds elapsed\n   since
        1 January 1970 00:00:00 UTC, ignoring leap seconds, in network\n   byte order.
        \ The longest interval that can be expressed by this\n   format without wrapping
        is approximately 136 years.  An RRSIG RR can\n   have an Expiration field
        value that is numerically smaller than the\n   Inception field value if the
        expiration field value is near the\n   32-bit wrap-around point or if the
        signature is long lived.  Because\n   of this, all comparisons involving these
        fields MUST use \"Serial\n   number arithmetic\", as defined in [RFC1982].
        \ As a direct\n   consequence, the values contained in these fields cannot
        refer to\n   dates more than 68 years in either the past or the future.\n"
      title: 3.1.5.  Signature Expiration and Inception Fields
    - contents:
      - "3.1.6.  The Key Tag Field\n   The Key Tag field contains the key tag value
        of the DNSKEY RR that\n   validates this signature, in network byte order.
        \ Appendix B explains\n   how to calculate Key Tag values.\n"
      title: 3.1.6.  The Key Tag Field
    - contents:
      - "3.1.7.  The Signer's Name Field\n   The Signer's Name field value identifies
        the owner name of the DNSKEY\n   RR that a validator is supposed to use to
        validate this signature.\n   The Signer's Name field MUST contain the name
        of the zone of the\n   covered RRset.  A sender MUST NOT use DNS name compression
        on the\n   Signer's Name field when transmitting a RRSIG RR.\n"
      title: 3.1.7.  The Signer's Name Field
    - contents:
      - "3.1.8.  The Signature Field\n   The Signature field contains the cryptographic
        signature that covers\n   the RRSIG RDATA (excluding the Signature field)
        and the RRset\n   specified by the RRSIG owner name, RRSIG class, and RRSIG
        Type\n   Covered field.  The format of this field depends on the algorithm
        in\n   use, and these formats are described in separate companion documents.\n"
      - contents:
        - "3.1.8.1.  Signature Calculation\n   A signature covers the RRSIG RDATA
          (excluding the Signature Field)\n   and covers the data RRset specified
          by the RRSIG owner name, RRSIG\n   class, and RRSIG Type Covered fields.
          \ The RRset is in canonical form\n   (see Section 6), and the set RR(1),...RR(n)
          is signed as follows:\n         signature = sign(RRSIG_RDATA | RR(1) | RR(2)...
          ) where\n            \"|\" denotes concatenation;\n            RRSIG_RDATA
          is the wire format of the RRSIG RDATA fields\n               with the Signer's
          Name field in canonical form and\n               the Signature field excluded;\n
          \           RR(i) = owner | type | class | TTL | RDATA length | RDATA\n
          \              \"owner\" is the fully qualified owner name of the RRset
          in\n               canonical form (for RRs with wildcard owner names, the\n
          \              wildcard label is included in the owner name);\n               Each
          RR MUST have the same owner name as the RRSIG RR;\n               Each RR
          MUST have the same class as the RRSIG RR;\n               Each RR in the
          RRset MUST have the RR type listed in the\n               RRSIG RR's Type
          Covered field;\n               Each RR in the RRset MUST have the TTL listed
          in the\n               RRSIG Original TTL Field;\n               Any DNS
          names in the RDATA field of each RR MUST be in\n               canonical
          form; and\n               The RRset MUST be sorted in canonical order.\n
          \  See Sections 6.2 and 6.3 for details on canonical form and ordering\n
          \  of RRsets.\n"
        title: 3.1.8.1.  Signature Calculation
      title: 3.1.8.  The Signature Field
    title: 3.1.  RRSIG RDATA Wire Format
  - contents:
    - "3.2.  The RRSIG RR Presentation Format\n   The presentation format of the RDATA
      portion is as follows:\n   The Type Covered field is represented as an RR type
      mnemonic.  When\n   the mnemonic is not known, the TYPE representation as described
      in\n   [RFC3597], Section 5, MUST be used.\n   The Algorithm field value MUST
      be represented either as an unsigned\n   decimal integer or as an algorithm
      mnemonic, as specified in Appendix\n   A.1.\n   The Labels field value MUST
      be represented as an unsigned decimal\n   integer.\n   The Original TTL field
      value MUST be represented as an unsigned\n   decimal integer.\n   The Signature
      Expiration Time and Inception Time field values MUST be\n   represented either
      as an unsigned decimal integer indicating seconds\n   since 1 January 1970 00:00:00
      UTC, or in the form YYYYMMDDHHmmSS in\n   UTC, where:\n      YYYY is the year
      (0001-9999, but see Section 3.1.5);\n      MM is the month number (01-12);\n
      \     DD is the day of the month (01-31);\n      HH is the hour, in 24 hour
      notation (00-23);\n      mm is the minute (00-59); and\n      SS is the second
      (00-59).\n   Note that it is always possible to distinguish between these two\n
      \  formats because the YYYYMMDDHHmmSS format will always be exactly 14\n   digits,
      while the decimal representation of a 32-bit unsigned integer\n   can never
      be longer than 10 digits.\n   The Key Tag field MUST be represented as an unsigned
      decimal integer.\n   The Signer's Name field value MUST be represented as a
      domain name.\n   The Signature field is represented as a Base64 encoding of
      the\n   signature.  Whitespace is allowed within the Base64 text.  See\n   Section
      2.2.\n"
    title: 3.2.  The RRSIG RR Presentation Format
  - contents:
    - "3.3.  RRSIG RR Example\n   The following RRSIG RR stores the signature for
      the A RRset of\n   host.example.com:\n   host.example.com. 86400 IN RRSIG A
      5 3 86400 20030322173103 (\n                                  20030220173103
      2642 example.com.\n                                  oJB1W6WNGv+ldvQ3WDG0MQkg5IEhjRip8WTr\n
      \                                 PYGv07h108dUKGMeDPKijVCHX3DDKdfb+v6o\n                                  B9wfuh3DTJXUAfI/M0zmO/zz8bW0Rznl8O3t\n
      \                                 GNazPwQKkRN20XPXV6nwwfoXmJQbsLNrLfkG\n                                  J5D6fwFm8nN+6pBzeDQfsS3Ap3o=
      )\n   The first four fields specify the owner name, TTL, Class, and RR type\n
      \  (RRSIG).  The \"A\" represents the Type Covered field.  The value 5\n   identifies
      the algorithm used (RSA/SHA1) to create the signature.\n   The value 3 is the
      number of Labels in the original owner name.  The\n   value 86400 in the RRSIG
      RDATA is the Original TTL for the covered A\n   RRset.  20030322173103 and 20030220173103
      are the expiration and\n   inception dates, respectively.  2642 is the Key Tag,
      and example.com.\n   is the Signer's Name.  The remaining text is a Base64 encoding
      of the\n   signature.\n   Note that combination of RRSIG RR owner name, class,
      and Type Covered\n   indicates that this RRSIG covers the \"host.example.com\"
      A RRset.  The\n   Label value of 3 indicates that no wildcard expansion was
      used.  The\n   Algorithm, Signer's Name, and Key Tag indicate that this signature\n
      \  can be authenticated using an example.com zone DNSKEY RR whose\n   algorithm
      is 5 and whose key tag is 2642.\n"
    title: 3.3.  RRSIG RR Example
  title: 3.  The RRSIG Resource Record
- contents:
  - "4.  The NSEC Resource Record\n   The NSEC resource record lists two separate
    things: the next owner\n   name (in the canonical ordering of the zone) that contains\n
    \  authoritative data or a delegation point NS RRset, and the set of RR\n   types
    present at the NSEC RR's owner name [RFC3845].  The complete\n   set of NSEC RRs
    in a zone indicates which authoritative RRsets exist\n   in a zone and also form
    a chain of authoritative owner names in the\n   zone.  This information is used
    to provide authenticated denial of\n   existence for DNS data, as described in
    [RFC4035].\n   Because every authoritative name in a zone must be part of the
    NSEC\n   chain, NSEC RRs must be present for names containing a CNAME RR.\n   This
    is a change to the traditional DNS specification [RFC1034],\n   which stated that
    if a CNAME is present for a name, it is the only\n   type allowed at that name.
    \ An RRSIG (see Section 3) and NSEC MUST\n   exist for the same name as does a
    CNAME resource record in a signed\n   zone.\n   See [RFC4035] for discussion of
    how a zone signer determines\n   precisely which NSEC RRs it has to include in
    a zone.\n   The type value for the NSEC RR is 47.\n   The NSEC RR is class independent.\n
    \  The NSEC RR SHOULD have the same TTL value as the SOA minimum TTL\n   field.
    \ This is in the spirit of negative caching ([RFC2308]).\n"
  - contents:
    - "4.1.  NSEC RDATA Wire Format\n   The RDATA of the NSEC RR is as shown below:\n
      \                       1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    0 1
      2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                      Next Domain Name                         /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                       Type Bit Maps                           /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    - contents:
      - "4.1.1.  The Next Domain Name Field\n   The Next Domain field contains the
        next owner name (in the canonical\n   ordering of the zone) that has authoritative
        data or contains a\n   delegation point NS RRset; see Section 6.1 for an explanation
        of\n   canonical ordering.  The value of the Next Domain Name field in the\n
        \  last NSEC record in the zone is the name of the zone apex (the owner\n
        \  name of the zone's SOA RR).  This indicates that the owner name of\n   the
        NSEC RR is the last name in the canonical ordering of the zone.\n   A sender
        MUST NOT use DNS name compression on the Next Domain Name\n   field when transmitting
        an NSEC RR.\n   Owner names of RRsets for which the given zone is not authoritative\n
        \  (such as glue records) MUST NOT be listed in the Next Domain Name\n   unless
        at least one authoritative RRset exists at the same owner\n   name.\n"
      title: 4.1.1.  The Next Domain Name Field
    - contents:
      - "4.1.2.  The Type Bit Maps Field\n   The Type Bit Maps field identifies the
        RRset types that exist at the\n   NSEC RR's owner name.\n   The RR type space
        is split into 256 window blocks, each representing\n   the low-order 8 bits
        of the 16-bit RR type space.  Each block that\n   has at least one active
        RR type is encoded using a single octet\n   window number (from 0 to 255),
        a single octet bitmap length (from 1\n   to 32) indicating the number of octets
        used for the window block's\n   bitmap, and up to 32 octets (256 bits) of
        bitmap.\n   Blocks are present in the NSEC RR RDATA in increasing numerical\n
        \  order.\n      Type Bit Maps Field = ( Window Block # | Bitmap Length |
        Bitmap )+\n      where \"|\" denotes concatenation.\n   Each bitmap encodes
        the low-order 8 bits of RR types within the\n   window block, in network bit
        order.  The first bit is bit 0.  For\n   window block 0, bit 1 corresponds
        to RR type 1 (A), bit 2 corresponds\n   to RR type 2 (NS), and so forth.  For
        window block 1, bit 1\n   corresponds to RR type 257, and bit 2 to RR type
        258.  If a bit is\n   set, it indicates that an RRset of that type is present
        for the NSEC\n   RR's owner name.  If a bit is clear, it indicates that no
        RRset of\n   that type is present for the NSEC RR's owner name.\n   Bits representing
        pseudo-types MUST be clear, as they do not appear\n   in zone data.  If encountered,
        they MUST be ignored upon being read.\n   Blocks with no types present MUST
        NOT be included.  Trailing zero\n   octets in the bitmap MUST be omitted.
        \ The length of each block's\n   bitmap is determined by the type code with
        the largest numerical\n   value, within that block, among the set of RR types
        present at the\n   NSEC RR's owner name.  Trailing zero octets not specified
        MUST be\n   interpreted as zero octets.\n   The bitmap for the NSEC RR at
        a delegation point requires special\n   attention.  Bits corresponding to
        the delegation NS RRset and the RR\n   types for which the parent zone has
        authoritative data MUST be set;\n   bits corresponding to any non-NS RRset
        for which the parent is not\n   authoritative MUST be clear.\n   A zone MUST
        NOT include an NSEC RR for any domain name that only\n   holds glue records.\n"
      title: 4.1.2.  The Type Bit Maps Field
    - contents:
      - "4.1.3.  Inclusion of Wildcard Names in NSEC RDATA\n   If a wildcard owner
        name appears in a zone, the wildcard label (\"*\")\n   is treated as a literal
        symbol and is treated the same as any other\n   owner name for the purposes
        of generating NSEC RRs.  Wildcard owner\n   names appear in the Next Domain
        Name field without any wildcard\n   expansion.  [RFC4035] describes the impact
        of wildcards on\n   authenticated denial of existence.\n"
      title: 4.1.3.  Inclusion of Wildcard Names in NSEC RDATA
    title: 4.1.  NSEC RDATA Wire Format
  - contents:
    - "4.2.  The NSEC RR Presentation Format\n   The presentation format of the RDATA
      portion is as follows:\n   The Next Domain Name field is represented as a domain
      name.\n   The Type Bit Maps field is represented as a sequence of RR type\n
      \  mnemonics.  When the mnemonic is not known, the TYPE representation\n   described
      in [RFC3597], Section 5, MUST be used.\n"
    title: 4.2.  The NSEC RR Presentation Format
  - contents:
    - "4.3.  NSEC RR Example\n   The following NSEC RR identifies the RRsets associated
      with\n   alfa.example.com. and identifies the next authoritative name after\n
      \  alfa.example.com.\n   alfa.example.com. 86400 IN NSEC host.example.com. (\n
      \                                  A MX RRSIG NSEC TYPE1234 )\n   The first
      four text fields specify the name, TTL, Class, and RR type\n   (NSEC).  The
      entry host.example.com. is the next authoritative name\n   after alfa.example.com.
      in canonical order.  The A, MX, RRSIG, NSEC,\n   and TYPE1234 mnemonics indicate
      that there are A, MX, RRSIG, NSEC,\n   and TYPE1234 RRsets associated with the
      name alfa.example.com.\n   The RDATA section of the NSEC RR above would be encoded
      as:\n            0x04 'h'  'o'  's'  't'\n            0x07 'e'  'x'  'a'  'm'
      \ 'p'  'l'  'e'\n            0x03 'c'  'o'  'm'  0x00\n            0x00 0x06
      0x40 0x01 0x00 0x00 0x00 0x03\n            0x04 0x1b 0x00 0x00 0x00 0x00 0x00
      0x00\n            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n            0x00
      0x00 0x00 0x00 0x00 0x00 0x00 0x00\n            0x00 0x00 0x00 0x00 0x20\n   Assuming
      that the validator can authenticate this NSEC record, it\n   could be used to
      prove that beta.example.com does not exist, or to\n   prove that there is no
      AAAA record associated with alfa.example.com.\n   Authenticated denial of existence
      is discussed in [RFC4035].\n"
    title: 4.3.  NSEC RR Example
  title: 4.  The NSEC Resource Record
- contents:
  - "5.  The DS Resource Record\n   The DS Resource Record refers to a DNSKEY RR and
    is used in the DNS\n   DNSKEY authentication process.  A DS RR refers to a DNSKEY
    RR by\n   storing the key tag, algorithm number, and a digest of the DNSKEY RR.\n
    \  Note that while the digest should be sufficient to identify the\n   public
    key, storing the key tag and key algorithm helps make the\n   identification process
    more efficient.  By authenticating the DS\n   record, a resolver can authenticate
    the DNSKEY RR to which the DS\n   record points.  The key authentication process
    is described in\n   [RFC4035].\n   The DS RR and its corresponding DNSKEY RR have
    the same owner name,\n   but they are stored in different locations.  The DS RR
    appears only\n   on the upper (parental) side of a delegation, and is authoritative\n
    \  data in the parent zone.  For example, the DS RR for \"example.com\" is\n   stored
    in the \"com\" zone (the parent zone) rather than in the\n   \"example.com\" zone
    (the child zone).  The corresponding DNSKEY RR is\n   stored in the \"example.com\"
    zone (the child zone).  This simplifies\n   DNS zone management and zone signing
    but introduces special response\n   processing requirements for the DS RR; these
    are described in\n   [RFC4035].\n   The type number for the DS record is 43.\n
    \  The DS resource record is class independent.\n   The DS RR has no special TTL
    requirements.\n"
  - contents:
    - "5.1.  DS RDATA Wire Format\n   The RDATA for a DS RR consists of a 2 octet
      Key Tag field, a 1 octet\n   Algorithm field, a 1 octet Digest Type field, and
      a Digest field.\n                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
      2 2 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |           Key
      Tag             |  Algorithm    |  Digest Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                                                               /\n   /                            Digest
      \                            /\n   /                                                               /\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    - contents:
      - "5.1.1.  The Key Tag Field\n   The Key Tag field lists the key tag of the
        DNSKEY RR referred to by\n   the DS record, in network byte order.\n   The
        Key Tag used by the DS RR is identical to the Key Tag used by\n   RRSIG RRs.
        \ Appendix B describes how to compute a Key Tag.\n"
      title: 5.1.1.  The Key Tag Field
    - contents:
      - "5.1.2.  The Algorithm Field\n   The Algorithm field lists the algorithm number
        of the DNSKEY RR\n   referred to by the DS record.\n   The algorithm number
        used by the DS RR is identical to the algorithm\n   number used by RRSIG and
        DNSKEY RRs.  Appendix A.1 lists the\n   algorithm number types.\n"
      title: 5.1.2.  The Algorithm Field
    - contents:
      - "5.1.3.  The Digest Type Field\n   The DS RR refers to a DNSKEY RR by including
        a digest of that DNSKEY\n   RR.  The Digest Type field identifies the algorithm
        used to construct\n   the digest.  Appendix A.2 lists the possible digest
        algorithm types.\n"
      title: 5.1.3.  The Digest Type Field
    - contents:
      - "5.1.4.  The Digest Field\n   The DS record refers to a DNSKEY RR by including
        a digest of that\n   DNSKEY RR.\n   The digest is calculated by concatenating
        the canonical form of the\n   fully qualified owner name of the DNSKEY RR
        with the DNSKEY RDATA,\n   and then applying the digest algorithm.\n     digest
        = digest_algorithm( DNSKEY owner name | DNSKEY RDATA);\n      \"|\" denotes
        concatenation\n     DNSKEY RDATA = Flags | Protocol | Algorithm | Public Key.\n
        \  The size of the digest may vary depending on the digest algorithm and\n
        \  DNSKEY RR size.  As of the time of this writing, the only defined\n   digest
        algorithm is SHA-1, which produces a 20 octet digest.\n"
      title: 5.1.4.  The Digest Field
    title: 5.1.  DS RDATA Wire Format
  - contents:
    - "5.2.  Processing of DS RRs When Validating Responses\n   The DS RR links the
      authentication chain across zone boundaries, so\n   the DS RR requires extra
      care in processing.  The DNSKEY RR referred\n   to in the DS RR MUST be a DNSSEC
      zone key.  The DNSKEY RR Flags MUST\n   have Flags bit 7 set.  If the DNSKEY
      flags do not indicate a DNSSEC\n   zone key, the DS RR (and the DNSKEY RR it
      references) MUST NOT be\n   used in the validation process.\n"
    title: 5.2.  Processing of DS RRs When Validating Responses
  - contents:
    - "5.3.  The DS RR Presentation Format\n   The presentation format of the RDATA
      portion is as follows:\n   The Key Tag field MUST be represented as an unsigned
      decimal integer.\n   The Algorithm field MUST be represented either as an unsigned
      decimal\n   integer or as an algorithm mnemonic specified in Appendix A.1.\n
      \  The Digest Type field MUST be represented as an unsigned decimal\n   integer.\n
      \  The Digest MUST be represented as a sequence of case-insensitive\n   hexadecimal
      digits.  Whitespace is allowed within the hexadecimal\n   text.\n"
    title: 5.3.  The DS RR Presentation Format
  - contents:
    - "5.4.  DS RR Example\n   The following example shows a DNSKEY RR and its corresponding
      DS RR.\n   dskey.example.com. 86400 IN DNSKEY 256 3 5 ( AQOeiiR0GOMYkDshWoSKz9Xz\n
      \                                            fwJr1AYtsmx3TGkJaNXVbfi/\n                                             2pHm822aJ5iI9BMzNXxeYCmZ\n
      \                                            DRD99WYwYqUSdjMmmAphXdvx\n                                             egXd/M5+X7OrzKBaMbCVdFLU\n
      \                                            Uh6DhweJBjEVv5f2wwjM9Xzc\n                                             nOf+EPbtG9DMBmADjFDc2w/r\n
      \                                            ljwvFw==\n                                             )
      ;  key id = 60485\n   dskey.example.com. 86400 IN DS 60485 5 1 ( 2BB183AF5F22588179A53B0A\n
      \                                             98631FAD1A292118 )\n   The first
      four text fields specify the name, TTL, Class, and RR type\n   (DS).  Value
      60485 is the key tag for the corresponding\n   \"dskey.example.com.\" DNSKEY
      RR, and value 5 denotes the algorithm\n   used by this \"dskey.example.com.\"
      DNSKEY RR.  The value 1 is the\n   algorithm used to construct the digest, and
      the rest of the RDATA\n   text is the digest in hexadecimal.\n"
    title: 5.4.  DS RR Example
  title: 5.  The DS Resource Record
- contents:
  - "6.  Canonical Form and Order of Resource Records\n   This section defines a canonical
    form for resource records, a\n   canonical ordering of DNS names, and a canonical
    ordering of resource\n   records within an RRset.  A canonical name order is required
    to\n   construct the NSEC name chain.  A canonical RR form and ordering\n   within
    an RRset are required in order to construct and verify RRSIG\n   RRs.\n"
  - contents:
    - "6.1.  Canonical DNS Name Order\n   For the purposes of DNS security, owner
      names are ordered by treating\n   individual labels as unsigned left-justified
      octet strings.  The\n   absence of a octet sorts before a zero value octet,
      and uppercase\n   US-ASCII letters are treated as if they were lowercase US-ASCII\n
      \  letters.\n   To compute the canonical ordering of a set of DNS names, start
      by\n   sorting the names according to their most significant (rightmost)\n   labels.
      \ For names in which the most significant label is identical,\n   continue sorting
      according to their next most significant label, and\n   so forth.\n   For example,
      the following names are sorted in canonical DNS name\n   order.  The most significant
      label is \"example\".  At this level,\n   \"example\" sorts first, followed
      by names ending in \"a.example\", then\n   by names ending \"z.example\".  The
      names within each level are sorted\n   in the same way.\n             example\n
      \            a.example\n             yljkjljk.a.example\n             Z.a.example\n
      \            zABC.a.EXAMPLE\n             z.example\n             \\001.z.example\n
      \            *.z.example\n             \\200.z.example\n"
    title: 6.1.  Canonical DNS Name Order
  - contents:
    - "6.2.  Canonical RR Form\n   For the purposes of DNS security, the canonical
      form of an RR is the\n   wire format of the RR where:\n   1.  every domain name
      in the RR is fully expanded (no DNS name\n       compression) and fully qualified;\n
      \  2.  all uppercase US-ASCII letters in the owner name of the RR are\n       replaced
      by the corresponding lowercase US-ASCII letters;\n   3.  if the type of the
      RR is NS, MD, MF, CNAME, SOA, MB, MG, MR, PTR,\n       HINFO, MINFO, MX, HINFO,
      RP, AFSDB, RT, SIG, PX, NXT, NAPTR, KX,\n       SRV, DNAME, A6, RRSIG, or NSEC,
      all uppercase US-ASCII letters in\n       the DNS names contained within the
      RDATA are replaced by the\n       corresponding lowercase US-ASCII letters;\n
      \  4.  if the owner name of the RR is a wildcard name, the owner name is\n       in
      its original unexpanded form, including the \"*\" label (no\n       wildcard
      substitution); and\n   5.  the RR's TTL is set to its original value as it appears
      in the\n       originating authoritative zone or the Original TTL field of the\n
      \      covering RRSIG RR.\n"
    title: 6.2.  Canonical RR Form
  - contents:
    - "6.3.  Canonical RR Ordering within an RRset\n   For the purposes of DNS security,
      RRs with the same owner name,\n   class, and type are sorted by treating the
      RDATA portion of the\n   canonical form of each RR as a left-justified unsigned
      octet sequence\n   in which the absence of an octet sorts before a zero octet.\n
      \  [RFC2181] specifies that an RRset is not allowed to contain duplicate\n   records
      (multiple RRs with the same owner name, class, type, and\n   RDATA).  Therefore,
      if an implementation detects duplicate RRs when\n   putting the RRset in canonical
      form, it MUST treat this as a protocol\n   error.  If the implementation chooses
      to handle this protocol error\n   in the spirit of the robustness principle
      (being liberal in what it\n   accepts), it MUST remove all but one of the duplicate
      RR(s) for the\n   purposes of calculating the canonical form of the RRset.\n"
    title: 6.3.  Canonical RR Ordering within an RRset
  title: 6.  Canonical Form and Order of Resource Records
- contents:
  - "7.  IANA Considerations\n   This document introduces no new IANA considerations,
    as all of the\n   protocol parameters used in this document have already been
    assigned\n   by previous specifications.  However, since the evolution of DNSSEC\n
    \  has been long and somewhat convoluted, this section attempts to\n   describe
    the current state of the IANA registries and other protocol\n   parameters that
    are (or once were) related to DNSSEC.\n   Please refer to [RFC4035] for additional
    IANA considerations.\n   DNS Resource Record Types: [RFC2535] assigned types 24,
    25, and 30 to\n      the SIG, KEY, and NXT RRs, respectively.  [RFC3658] assigned
    DNS\n      Resource Record Type 43 to DS.  [RFC3755] assigned types 46, 47,\n
    \     and 48 to the RRSIG, NSEC, and DNSKEY RRs, respectively.\n      [RFC3755]
    also marked type 30 (NXT) as Obsolete and restricted use\n      of types 24 (SIG)
    and 25 (KEY) to the \"SIG(0)\" transaction\n      security protocol described
    in [RFC2931] and to the transaction\n      KEY Resource Record described in [RFC2930].\n
    \  DNS Security Algorithm Numbers: [RFC2535] created an IANA registry\n      for
    DNSSEC Resource Record Algorithm field numbers and assigned\n      values 1-4
    and 252-255.  [RFC3110] assigned value 5.  [RFC3755]\n      altered this registry
    to include flags for each entry regarding\n      its use with the DNS security
    extensions.  Each algorithm entry\n      could refer to an algorithm that can
    be used for zone signing,\n      transaction security (see [RFC2931]), or both.
    \ Values 6-251 are\n      available for assignment by IETF standards action ([RFC3755]).\n
    \     See Appendix A for a full listing of the DNS Security Algorithm\n      Numbers
    entries at the time of this writing and their status for\n      use in DNSSEC.\n
    \     [RFC3658] created an IANA registry for DNSSEC DS Digest Types and\n      assigned
    value 0 to reserved and value 1 to SHA-1.\n   KEY Protocol Values: [RFC2535] created
    an IANA Registry for KEY\n      Protocol Values, but [RFC3445] reassigned all
    values other than 3\n      to reserved and closed this IANA registry.  The registry
    remains\n      closed, and all KEY and DNSKEY records are required to have a\n
    \     Protocol Octet value of 3.\n   Flag bits in the KEY and DNSKEY RRs: [RFC3755]
    created an IANA\n      registry for the DNSSEC KEY and DNSKEY RR flag bits.  Initially,\n
    \     this registry only contains assignments for bit 7 (the ZONE bit)\n      and
    bit 15 (the Secure Entry Point flag (SEP) bit; see [RFC3757]).\n      As stated
    in [RFC3755], bits 0-6 and 8-14 are available for\n      assignment by IETF Standards
    Action.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   This document describes the format of four DNS
    resource records used\n   by the DNS security extensions and presents an algorithm
    for\n   calculating a key tag for a public key.  Other than the items\n   described
    below, the resource records themselves introduce no\n   security considerations.
    \ Please see [RFC4033] and [RFC4035] for\n   additional security considerations
    related to the use of these\n   records.\n   The DS record points to a DNSKEY
    RR by using a cryptographic digest,\n   the key algorithm type, and a key tag.
    \ The DS record is intended to\n   identify an existing DNSKEY RR, but it is theoretically
    possible for\n   an attacker to generate a DNSKEY that matches all the DS fields.
    \ The\n   probability of constructing a matching DNSKEY depends on the type of\n
    \  digest algorithm in use.  The only currently defined digest algorithm\n   is
    SHA-1, and the working group believes that constructing a public\n   key that
    would match the algorithm, key tag, and SHA-1 digest given\n   in a DS record
    would be a sufficiently difficult problem that such an\n   attack is not a serious
    threat at this time.\n   The key tag is used to help select DNSKEY resource records\n
    \  efficiently, but it does not uniquely identify a single DNSKEY\n   resource
    record.  It is possible for two distinct DNSKEY RRs to have\n   the same owner
    name, the same algorithm type, and the same key tag.\n   An implementation that
    uses only the key tag to select a DNSKEY RR\n   might select the wrong public
    key in some circumstances.  Please see\n   Appendix B for further details.\n   The
    table of algorithms in Appendix A and the key tag calculation\n   algorithms in
    Appendix B include the RSA/MD5 algorithm for\n   completeness, but the RSA/MD5
    algorithm is NOT RECOMMENDED, as\n   explained in [RFC3110].\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgements\n   This document was created from the input and ideas of
    the members of\n   the DNS Extensions Working Group and working group mailing
    list.  The\n   editors would like to express their thanks for the comments and\n
    \  suggestions received during the revision of these security extension\n   specifications.
    \ Although explicitly listing everyone who has\n   contributed during the decade
    in which DNSSEC has been under\n   development would be impossible, [RFC4033]
    includes a list of some of\n   the participants who were kind enough to comment
    on these documents.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n
      \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC1982]  Elz, R. and R. Bush, \"Serial
      Number Arithmetic\", RFC 1982,\n              August 1996.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC2181]  Elz, R. and R. Bush, \"Clarifications
      to the DNS\n              Specification\", RFC 2181, July 1997.\n   [RFC2308]
      \ Andrews, M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\",
      RFC 2308, March 1998.\n   [RFC2536]  Eastlake 3rd, D., \"DSA KEYs and SIGs in
      the Domain Name\n              System (DNS)\", RFC 2536, March 1999.\n   [RFC2931]
      \ Eastlake 3rd, D., \"DNS Request and Transaction Signatures\n              (
      SIG(0)s )\", RFC 2931, September 2000.\n   [RFC3110]  Eastlake 3rd, D., \"RSA/SHA-1
      SIGs and RSA KEYs in the\n              Domain Name System (DNS)\", RFC 3110,
      May 2001.\n   [RFC3445]  Massey, D. and S. Rose, \"Limiting the Scope of the
      KEY\n              Resource Record (RR)\", RFC 3445, December 2002.\n   [RFC3548]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 3548, July 2003.\n   [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS
      Resource Record\n              (RR) Types\", RFC 3597, September 2003.\n   [RFC3658]
      \ Gudmundsson, O., \"Delegation Signer (DS) Resource Record\n              (RR)\",
      RFC 3658, December 2003.\n   [RFC3755]  Weiler, S., \"Legacy Resolver Compatibility
      for Delegation\n              Signer (DS)\", RFC 3755, May 2004.\n   [RFC3757]
      \ Kolkman, O., Schlyter, J., and E. Lewis, \"Domain Name\n              System
      KEY (DNSKEY) Resource Record (RR) Secure Entry\n              Point (SEP) Flag\",
      RFC 3757, April 2004.\n   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey,
      D., and S.\n              Rose, \"DNS Security Introduction and Requirements\",
      RFC\n              4033, March 2005.\n   [RFC4035]  Arends, R., Austein, R.,
      Larson, M., Massey, D., and S.\n              Rose, \"Protocol Modifications
      for the DNS Security\n              Extensions\", RFC 4035, March 2005.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC2535]  Eastlake 3rd, D., \"Domain Name
      System Security\n              Extensions\", RFC 2535, March 1999.\n   [RFC2537]
      \ Eastlake 3rd, D., \"RSA/MD5 KEYs and SIGs in the Domain\n              Name
      System (DNS)\", RFC 2537, March 1999.\n   [RFC2539]  Eastlake 3rd, D., \"Storage
      of Diffie-Hellman Keys in the\n              Domain Name System (DNS)\", RFC
      2539, March 1999.\n   [RFC2930]  Eastlake 3rd, D., \"Secret Key Establishment
      for DNS (TKEY\n              RR)\", RFC 2930, September 2000.\n   [RFC3845]
      \ Schlyter, J., \"DNS Security (DNSSEC) NextSECure (NSEC)\n              RDATA
      Format\", RFC 3845, August 2004.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  DNSSEC Algorithm and Digest Types\n   The DNS security extensions
    are designed to be independent of the\n   underlying cryptographic algorithms.
    \ The DNSKEY, RRSIG, and DS\n   resource records all use a DNSSEC Algorithm Number
    to identify the\n   cryptographic algorithm in use by the resource record.  The
    DS\n   resource record also specifies a Digest Algorithm Number to identify\n
    \  the digest algorithm used to construct the DS record.  The currently\n   defined
    Algorithm and Digest Types are listed below.  Additional\n   Algorithm or Digest
    Types could be added as advances in cryptography\n   warrant them.\n   A DNSSEC
    aware resolver or name server MUST implement all MANDATORY\n   algorithms.\n"
  - contents:
    - "A.1.  DNSSEC Algorithm Types\n   The DNSKEY, RRSIG, and DS RRs use an 8-bit
      number to identify the\n   security algorithm being used.  These values are
      stored in the\n   \"Algorithm number\" field in the resource record RDATA.\n
      \  Some algorithms are usable only for zone signing (DNSSEC), some only\n   for
      transaction security mechanisms (SIG(0) and TSIG), and some for\n   both.  Those
      usable for zone signing may appear in DNSKEY, RRSIG, and\n   DS RRs.  Those
      usable for transaction security would be present in\n   SIG(0) and KEY RRs,
      as described in [RFC2931].\n                                Zone\n   Value Algorithm
      [Mnemonic]  Signing  References   Status\n   ----- -------------------- ---------
      ----------  ---------\n     0   reserved\n     1   RSA/MD5 [RSAMD5]         n
      \     [RFC2537]  NOT RECOMMENDED\n     2   Diffie-Hellman [DH]      n      [RFC2539]
      \  -\n     3   DSA/SHA-1 [DSA]          y      [RFC2536]  OPTIONAL\n     4   Elliptic
      Curve [ECC]              TBA       -\n     5   RSA/SHA-1 [RSASHA1]      y      [RFC3110]
      \ MANDATORY\n   252   Indirect [INDIRECT]      n                  -\n   253
      \  Private [PRIVATEDNS]     y      see below  OPTIONAL\n   254   Private [PRIVATEOID]
      \    y      see below  OPTIONAL\n   255   reserved\n   6 - 251  Available for
      assignment by IETF Standards Action.\n"
    - contents:
      - "A.1.1.  Private Algorithm Types\n   Algorithm number 253 is reserved for
        private use and will never be\n   assigned to a specific algorithm.  The public
        key area in the DNSKEY\n   RR and the signature area in the RRSIG RR begin
        with a wire encoded\n   domain name, which MUST NOT be compressed.  The domain
        name indicates\n   the private algorithm to use, and the remainder of the
        public key\n   area is determined by that algorithm.  Entities should only
        use\n   domain names they control to designate their private algorithms.\n
        \  Algorithm number 254 is reserved for private use and will never be\n   assigned
        to a specific algorithm.  The public key area in the DNSKEY\n   RR and the
        signature area in the RRSIG RR begin with an unsigned\n   length byte followed
        by a BER encoded Object Identifier (ISO OID) of\n   that length.  The OID
        indicates the private algorithm in use, and the\n   remainder of the area
        is whatever is required by that algorithm.\n   Entities should only use OIDs
        they control to designate their private\n   algorithms.\n"
      title: A.1.1.  Private Algorithm Types
    title: A.1.  DNSSEC Algorithm Types
  - contents:
    - "A.2.  DNSSEC Digest Types\n   A \"Digest Type\" field in the DS resource record
      types identifies the\n   cryptographic digest algorithm used by the resource
      record.  The\n   following table lists the currently defined digest algorithm
      types.\n              VALUE   Algorithm                 STATUS\n                0
      \     Reserved                   -\n                1      SHA-1                   MANDATORY\n
      \             2-255    Unassigned                 -\n"
    title: A.2.  DNSSEC Digest Types
  title: Appendix A.  DNSSEC Algorithm and Digest Types
- contents:
  - "Appendix B.  Key Tag Calculation\n   The Key Tag field in the RRSIG and DS resource
    record types provides\n   a mechanism for selecting a public key efficiently.
    \ In most cases, a\n   combination of owner name, algorithm, and key tag can efficiently\n
    \  identify a DNSKEY record.  Both the RRSIG and DS resource records\n   have
    corresponding DNSKEY records.  The Key Tag field in the RRSIG\n   and DS records
    can be used to help select the corresponding DNSKEY RR\n   efficiently when more
    than one candidate DNSKEY RR is available.\n   However, it is essential to note
    that the key tag is not a unique\n   identifier.  It is theoretically possible
    for two distinct DNSKEY RRs\n   to have the same owner name, the same algorithm,
    and the same key\n   tag.  The key tag is used to limit the possible candidate
    keys, but\n   it does not uniquely identify a DNSKEY record.  Implementations
    MUST\n   NOT assume that the key tag uniquely identifies a DNSKEY RR.\n   The
    key tag is the same for all DNSKEY algorithm types except\n   algorithm 1 (please
    see Appendix B.1 for the definition of the key\n   tag for algorithm 1).  The
    key tag algorithm is the sum of the wire\n   format of the DNSKEY RDATA broken
    into 2 octet groups.  First, the\n   RDATA (in wire format) is treated as a series
    of 2 octet groups.\n   These groups are then added together, ignoring any carry
    bits.\n   A reference implementation of the key tag algorithm is as an ANSI C\n
    \  function is given below, with the RDATA portion of the DNSKEY RR is\n   used
    as input.  It is not necessary to use the following reference\n   code verbatim,
    but the numerical value of the Key Tag MUST be\n   identical to what the reference
    implementation would generate for the\n   same input.\n   Please note that the
    algorithm for calculating the Key Tag is almost\n   but not completely identical
    to the familiar ones-complement checksum\n   used in many other Internet protocols.
    \ Key Tags MUST be calculated\n   using the algorithm described here rather than
    the ones complement\n   checksum.\n   The following ANSI C reference implementation
    calculates the value of\n   a Key Tag.  This reference implementation applies
    to all algorithm\n   types except algorithm 1 (see Appendix B.1).  The input is
    the wire\n   format of the RDATA portion of the DNSKEY RR.  The code is written\n
    \  for clarity, not efficiency.\n   /*\n    * Assumes that int is at least 16
    bits.\n    * First octet of the key tag is the most significant 8 bits of the\n
    \   * return value;\n    * Second octet of the key tag is the least significant
    8 bits of the\n    * return value.\n    */\n   unsigned int\n   keytag (\n           unsigned
    char key[],  /* the RDATA part of the DNSKEY RR */\n           unsigned int keysize
    \ /* the RDLENGTH */\n          )\n   {\n           unsigned long ac;     /* assumed
    to be 32 bits or larger */\n           int i;                /* loop index */\n
    \          for ( ac = 0, i = 0; i < keysize; ++i )\n                   ac += (i
    & 1) ? key[i] : key[i] << 8;\n           ac += (ac >> 16) & 0xFFFF;\n           return
    ac & 0xFFFF;\n   }\n"
  - contents:
    - "B.1.  Key Tag for Algorithm 1 (RSA/MD5)\n   The key tag for algorithm 1 (RSA/MD5)
      is defined differently from the\n   key tag for all other algorithms, for historical
      reasons.  For a\n   DNSKEY RR with algorithm 1, the key tag is defined to be
      the most\n   significant 16 bits of the least significant 24 bits in the public\n
      \  key modulus (in other words, the 4th to last and 3rd to last octets\n   of
      the public key modulus).\n   Please note that Algorithm 1 is NOT RECOMMENDED.\n"
    title: B.1.  Key Tag for Algorithm 1 (RSA/MD5)
  title: Appendix B.  Key Tag Calculation
- contents:
  - "Authors' Addresses\n   Roy Arends\n   Telematica Instituut\n   Brouwerijstraat
    1\n   7523 XC  Enschede\n   NL\n   EMail: roy.arends@telin.nl\n   Rob Austein\n
    \  Internet Systems Consortium\n   950 Charter Street\n   Redwood City, CA  94063\n
    \  USA\n   EMail: sra@isc.org\n   Matt Larson\n   VeriSign, Inc.\n   21345 Ridgetop
    Circle\n   Dulles, VA  20166-6503\n   USA\n   EMail: mlarson@verisign.com\n   Dan
    Massey\n   Colorado State University\n   Department of Computer Science\n   Fort
    Collins, CO 80523-1873\n   EMail: massey@cs.colostate.edu\n   Scott Rose\n   National
    Institute for Standards and Technology\n   100 Bureau Drive\n   Gaithersburg,
    MD  20899-8920\n   USA\n   EMail: scott.rose@nist.gov\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
