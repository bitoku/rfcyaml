- title: __initial_text__
  contents:
  - '            Initializing a DNS Resolver with Priming Queries

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the queries that a DNS resolver should emit\n\
    \   to initialize its cache.  The result is that the resolver gets both a\n  \
    \ current NS Resource Record Set (RRset) for the root zone and the\n   necessary\
    \ address information for reaching the root servers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8109.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Description of Priming ..........................................3\n  \
    \ 3. Priming Queries .................................................3\n    \
    \  3.1. Repeating Priming Queries ..................................4\n      3.2.\
    \ Target Selection ...........................................4\n      3.3. DNSSEC\
    \ with Priming Queries ................................4\n   4. Priming Responses\
    \ ...............................................5\n      4.1. Expected Properties\
    \ of the Priming Response ................5\n      4.2. Completeness of the Response\
    \ ...............................5\n   5. Security Considerations .........................................6\n\
    \   6. IANA Considerations .............................................6\n  \
    \ 7. Normative References ............................................6\n   Acknowledgements\
    \ ...................................................7\n   Authors' Addresses\
    \ .................................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Recursive DNS resolvers need a starting point to resolve\
    \ queries.\n   [RFC1034] describes a common scenario for recursive resolvers:\
    \ they\n   begin with an empty cache and some configuration for finding the\n\
    \   names and addresses of the DNS root servers.  [RFC1034] describes\n   that\
    \ configuration as a list of servers that will give authoritative\n   answers\
    \ to queries about the root.  This has become a common\n   implementation choice\
    \ for recursive resolvers, and is the topic of\n   this document.\n   This document\
    \ describes the steps needed for this common\n   implementation choice.  Note\
    \ that this is not the only way to start a\n   recursive name server with an empty\
    \ cache, but it is the only one\n   described in [RFC1034].  Some implementers\
    \ have chosen other\n   directions, some of which work well and others of which\
    \ fail\n   (sometimes disastrously) under different conditions.  For example,\
    \ an\n   implementation that only gets the addresses of the root name servers\n\
    \   from configuration, not from the DNS as described in this document,\n   will\
    \ have stale data that could cause slower resolution.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [RFC2119].\n   This document only deals with\
    \ recursive name servers (recursive\n   resolvers, resolvers) for the IN class.\n"
- title: 2.  Description of Priming
  contents:
  - "2.  Description of Priming\n   Priming is the act of finding the list of root\
    \ servers from a\n   configuration that lists some or all of the purported IP\
    \ addresses of\n   some or all of those root servers.  A recursive resolver starts\
    \ with\n   no information about the root servers, and ends up with a list of\n\
    \   their names and their addresses.\n   Priming is described in Sections 5.3.2\
    \ and 5.3.3 of [RFC1034].  The\n   scenario used in that description, that of\
    \ a recursive server that is\n   also authoritative, is no longer as common.\n\
    \   The configured list of IP addresses for the root servers usually\n   comes\
    \ from the vendor or distributor of the recursive server\n   software.  This list\
    \ is usually correct and complete when shipped,\n   but may become out of date\
    \ over time.\n   The list of root server operators and the domain name associated\
    \ with\n   each one has been stable since 1997.  However, there are address\n\
    \   changes for the root server domain names, both for IPv4 and IPv6\n   addresses.\
    \  However, research shows that after those addresses\n   change, some resolvers\
    \ never get the new addresses.  Therefore, it is\n   important that resolvers\
    \ be able to cope with change, even without\n   relying upon configuration updates\
    \ to be applied by their operator.\n   Root server change is the main reason that\
    \ resolvers need to do\n   priming instead of just going from a configured list\
    \ to get a full\n   and accurate list of root servers.\n"
- title: 3.  Priming Queries
  contents:
  - "3.  Priming Queries\n   A priming query is a DNS query used to get the root server\n\
    \   information in a resolver.  It has a QNAME of \".\" and a QTYPE of NS,\n \
    \  and is sent to one of the addresses in the configuration for the\n   recursive\
    \ resolver.  The priming query can be sent over either UDP or\n   TCP.  If the\
    \ query is sent over UDP, the source port SHOULD be\n   randomly selected (see\
    \ [RFC5452]).  The Recursion Desired (RD) bit\n   MAY be set to 0 or 1, although\
    \ the meaning of it being set to 1 is\n   undefined for priming queries.\n   The\
    \ recursive resolver SHOULD use EDNS(0) [RFC6891] for priming\n   queries and\
    \ SHOULD announce and handle a reassembly size of at least\n   1024 octets [RFC3226].\
    \  Doing so allows responses that cover the size\n   of a full priming response\
    \ (see Section 4.2) for the current set of\n   root servers.  See Section 3.3\
    \ for discussion of setting the DNSSEC\n   OK (DO) bit (defined in [RFC4033]).\n"
- title: 3.1.  Repeating Priming Queries
  contents:
  - "3.1.  Repeating Priming Queries\n   The recursive resolver SHOULD send a priming\
    \ query only when it is\n   needed, such as when the resolver starts with an empty\
    \ cache and when\n   the NS RRset for the root zone has expired.  Because the\
    \ NS records\n   for the root are not special, the recursive resolver expires\
    \ those NS\n   records according to their TTL values.  (Note that a recursive\n\
    \   resolver MAY pre-fetch the NS RRset before it expires.)\n   If a priming query\
    \ does not get a response, the recursive resolver\n   needs to retry the query\
    \ with a different target address from the\n   configuration.\n"
- title: 3.2.  Target Selection
  contents:
  - "3.2.  Target Selection\n   In order to spread the load across all the root server\
    \ domain names,\n   the recursive resolver SHOULD select the target for a priming\
    \ query\n   randomly from the list of addresses.  The recursive resolver might\n\
    \   choose either IPv4 or IPv6 addresses based on its knowledge of\n   whether\
    \ the system on which it is running has adequate connectivity\n   on either type\
    \ of address.\n   Note that this recommended method is not the only way to choose\
    \ from\n   the list in a recursive resolver's configuration.  Two other common\n\
    \   methods include picking the first from the list, and remembering\n   which\
    \ address in the list gave the fastest response earlier and using\n   that one.\
    \  There are probably other methods in use today.  However,\n   the random method\
    \ listed above SHOULD be used for priming.\n"
- title: 3.3.  DNSSEC with Priming Queries
  contents:
  - "3.3.  DNSSEC with Priming Queries\n   The resolver MAY set the DNSSEC OK (DO)\
    \ bit.  At the time of\n   publication, there is little use to performing DNSSEC\
    \ validation on\n   the priming query.  Currently, all root name server names\
    \ end in\n   \"root-servers.net\" and the AAAA and A RRsets for the root server\n\
    \   names reside in the \"root-servers.net\" zone.  All root servers are\n   also\
    \ authoritative for this zone, allowing priming responses to\n   include the appropriate\
    \ root name server A and AAAA RRsets.  But,\n   because the \"root-servers.net\"\
    \ zone is not currently signed, these\n   RRsets cannot be validated.\n   A man-in-the-middle\
    \ attack on the priming query could direct a\n   resolver to a rogue root name\
    \ server.  Note, however, that a\n   validating resolver will not accept responses\
    \ from rogue root name\n   servers if they are different from the real responses\
    \ because the\n   resolver has a trust anchor for the root and the answers from\
    \ the\n   root are signed.  Thus, if there is a man-in-the-middle attack on the\n\
    \   priming query, the only result for a validating resolver will be a\n   denial\
    \ of service, not the resolver's accepting the bad responses.\n   If the \"root-servers.net\"\
    \ zone is later signed, or if the root\n   servers are named in a different zone\
    \ and that zone is signed, having\n   DNSSEC validation for the priming queries\
    \ might be valuable.\n"
- title: 4.  Priming Responses
  contents:
  - "4.  Priming Responses\n   A priming query is a normal DNS query.  Thus, a root\
    \ name server\n   cannot distinguish a priming query from any other query for\
    \ the root\n   NS RRset.  Thus, the root server's response will also be a normal\
    \ DNS\n   response.\n"
- title: 4.1.  Expected Properties of the Priming Response
  contents:
  - "4.1.  Expected Properties of the Priming Response\n   The priming response is\
    \ expected to have an RCODE of NOERROR, and to\n   have the Authoritative Answer\
    \ (AA) bit set.  Also, it is expected to\n   have an NS RRset in the Answer section\
    \ (because the NS RRset\n   originates from the root zone), and an empty Authority\
    \ section\n   (because the NS RRset already appears in the Answer section).  There\n\
    \   will also be an Additional section with A and/or AAAA RRsets for the\n   root\
    \ name servers pointed at by the NS RRset.\n   Resolver software SHOULD treat\
    \ the response to the priming query as a\n   normal DNS response, just as it would\
    \ use any other data fed to its\n   cache.  Resolver software SHOULD NOT expect\
    \ exactly 13 NS RRs\n   because, historically, some root servers have returned\
    \ fewer.\n"
- title: 4.2.  Completeness of the Response
  contents:
  - "4.2.  Completeness of the Response\n   There are currently 13 root servers. \
    \ All have one IPv4 address and\n   one IPv6 address.  Not even counting the NS\
    \ RRset, the combined size\n   of all the A and AAAA RRsets exceeds the original\
    \ 512-octet payload\n   limit from [RFC1035].\n   In the event of a response where\
    \ the Additional section omits certain\n   root server address information, re-issuing\
    \ of the priming query does\n   not help with those root name servers that respond\
    \ with a fixed order\n   of addresses in the Additional section.  Instead, the\
    \ recursive\n   resolver needs to issue direct queries for A and AAAA RRsets for\
    \ the\n   remaining names.  Currently, these RRsets would be authoritatively\n\
    \   available from the root name servers.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Spoofing a response to a priming query can be\
    \ used to redirect all of\n   the queries originating from a victim recursive\
    \ resolver to one or\n   more servers for the attacker.  Until the responses to\
    \ priming\n   queries are protected with DNSSEC, there is no definitive way to\n\
    \   prevent such redirection.\n   An on-path attacker who sees a priming query\
    \ coming from a resolver\n   can inject false answers before a root server can\
    \ give correct\n   answers.  If the attacker's answers are accepted, this can\
    \ set up the\n   ability to give further false answers for future queries to the\n\
    \   resolver.  False answers for root servers are more dangerous than,\n   say,\
    \ false answers for Top-Level Domains (TLDs), because the root is\n   the highest\
    \ node of the DNS.  See Section 3.3 for more discussion.\n   In both of the scenarios\
    \ above, a validating resolver will be able to\n   detect the attack if its chain\
    \ of queries comes to a zone that is\n   signed, but not for those that are unsigned.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC1034]   Mockapetris, P., \"Domain names - concepts\
    \ and\n               facilities\", STD 13, RFC 1034, DOI 10.17487/RFC1034,\n\
    \               November 1987, <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]\
    \   Mockapetris, P., \"Domain names - implementation and\n               specification\"\
    , STD 13, RFC 1035, DOI 10.17487/RFC1035,\n               November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119,\n               DOI 10.17487/RFC2119,\
    \ March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3226]\
    \   Gudmundsson, O., \"DNSSEC and IPv6 A6 aware\n               server/resolver\
    \ message size requirements\", RFC 3226,\n               DOI 10.17487/RFC3226,\
    \ December 2001,\n               <http://www.rfc-editor.org/info/rfc3226>.\n \
    \  [RFC4033]   Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \          Rose, \"DNS Security Introduction and Requirements\",\n           \
    \    RFC 4033, DOI 10.17487/RFC4033, March 2005,\n               <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC5452]   Hubert, A. and R. van Mook, \"Measures for Making DNS More\n \
    \              Resilient against Forged Answers\", RFC 5452,\n               DOI\
    \ 10.17487/RFC5452, January 2009,\n               <http://www.rfc-editor.org/info/rfc5452>.\n\
    \   [RFC6891]   Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n \
    \              for DNS (EDNS(0))\", STD 75, RFC 6891,\n               DOI 10.17487/RFC6891,\
    \ April 2013,\n               <http://www.rfc-editor.org/info/rfc6891>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is the product of the DNSOP WG and benefitted\
    \ from the\n   reviews done there.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Koch\n   DENIC eG\n   Kaiserstrasse 75-77\n   Frankfurt\
    \  60329\n   Germany\n   Phone: +49 69 27235 0\n   Email: pk@DENIC.DE\n   Matt\
    \ Larson\n   ICANN\n   Email: matt.larson@icann.org\n   Paul Hoffman\n   ICANN\n\
    \   Email: paul.hoffman@icann.org\n"
