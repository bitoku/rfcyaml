Description In RFC 1071 on pages 4 and 5, there is a description of a method to update the IP checksum in the IP header without having to completely recompute the checksum.
In particular, the RFC recommends the following equation for computing the update checksum C' from the original checksum C, and
the old and new values of byte m: C'   C
While the equation above is correct, it is not very useful for incremental updates since the equation above updates the checksum C, rather than the 1's complement of the checksum, ~C, which is the value stored in the checksum field.
In addition, it suffers because the notation does not clearly specify that all arithmetic, including the unary negation, must be performed one's complement, and so is difficult to use to build working code.
The useful calculation for 2's complement machines is:
~m' In the oft mentioned case of updating the IP TTL field, subtracting one from the TTL means ADDING 1 or 256 as appropriate to the checksum field in the packet, using one's complement addition.
One big endian non portable implementation in C looks like: unsigned long sum;
This special case can be optimized in many ways: for instance, you can bundle updating and checking the ttl.
Here is a more general and possibly more helpful example which updates the ttl by n seconds: UpdateTTL(iph,n)
struct ip hdr  ipptr; unsigned char n; { unsigned long sum; unsigned short old; old   ntohs( (unsigned short  )&ipptr ttl); ipptr ttl    n;
