- title: __initial_text__
  contents:
  - '         Architectural Guidelines for Multipath TCP Development

    '
- title: Abstract
  contents:
  - "Abstract\n   Hosts are often connected by multiple paths, but TCP restricts\n\
    \   communications to a single path per transport connection.  Resource\n   usage\
    \ within the network would be more efficient were these multiple\n   paths able\
    \ to be used concurrently.  This should enhance user\n   experience through improved\
    \ resilience to network failure and higher\n   throughput.\n   This document outlines\
    \ architectural guidelines for the development\n   of a Multipath Transport Protocol,\
    \ with references to how these\n   architectural components come together in the\
    \ development of a\n   Multipath TCP (MPTCP).  This document lists certain high-level\
    \ design\n   decisions that provide foundations for the design of the MPTCP\n\
    \   protocol, based upon these architectural requirements.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6182.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Requirements Language ......................................5\n  \
    \    1.2. Terminology ................................................5\n    \
    \  1.3. Reference Scenario .........................................6\n   2. Goals\
    \ ...........................................................6\n      2.1. Functional\
    \ Goals ...........................................6\n      2.2. Compatibility\
    \ Goals ........................................7\n           2.2.1. Application\
    \ Compatibility ...........................7\n           2.2.2. Network Compatibility\
    \ ...............................8\n           2.2.3. Compatibility with Other\
    \ Network Users .............10\n      2.3. Security Goals ............................................10\n\
    \      2.4. Related Protocols .........................................10\n  \
    \ 3. An Architectural Basis for Multipath TCP .......................11\n   4.\
    \ A Functional Decomposition of MPTCP ............................12\n   5. High-Level\
    \ Design Decisions ....................................14\n      5.1. Sequence\
    \ Numbering ........................................14\n      5.2. Reliability\
    \ and Retransmissions ...........................15\n      5.3. Buffers ...................................................17\n\
    \      5.4. Signaling .................................................18\n  \
    \    5.5. Path Management ...........................................19\n    \
    \  5.6. Connection Identification .................................20\n      5.7.\
    \ Congestion Control ........................................21\n      5.8. Security\
    \ ..................................................21\n   6. Software Interactions\
    \ ..........................................23\n      6.1. Interactions with Applications\
    \ ............................23\n      6.2. Interactions with Management Systems\
    \ ......................23\n   7. Interactions with Middleboxes ..................................23\n\
    \   8. Contributors ...................................................25\n  \
    \ 9. Acknowledgements ...............................................25\n   10.\
    \ Security Considerations .......................................26\n   11. References\
    \ ....................................................26\n      11.1. Normative\
    \ References .....................................26\n      11.2. Informative\
    \ References ...................................26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   As the Internet evolves, demands on Internet resources are\
    \ ever-\n   increasing, but often these resources (in particular, bandwidth)\n\
    \   cannot be fully utilized due to protocol constraints both on the end-\n  \
    \ systems and within the network.  If these resources could be used\n   concurrently,\
    \ end user experience could be greatly improved.  Such\n   enhancements would\
    \ also reduce the necessary expenditure on network\n   infrastructure that would\
    \ otherwise be needed to create an equivalent\n   improvement in user experience.\
    \  By the application of resource\n   pooling [3], these available resources can\
    \ be 'pooled' such that they\n   appear as a single logical resource to the user.\n\
    \   Multipath transport aims to realize some of the goals of resource\n   pooling\
    \ by simultaneously making use of multiple disjoint (or\n   partially disjoint)\
    \ paths across a network.  The two key benefits of\n   multipath transport are\
    \ the following:\n   o  To increase the resilience of the connectivity by providing\n\
    \      multiple paths, protecting end hosts from the failure of one.\n   o  To\
    \ increase the efficiency of the resource usage, and thus\n      increase the\
    \ network capacity available to end hosts.\n   Multipath TCP is a modified version\
    \ of TCP [1] that implements a\n   multipath transport and achieves these goals\
    \ by pooling multiple\n   paths within a transport connection, transparently to\
    \ the\n   application.  Multipath TCP is primarily concerned with utilizing\n\
    \   multiple paths end-to-end, where one or both of the end hosts are\n   multihomed.\
    \  It may also have applications where multiple paths exist\n   within the network\
    \ and can be manipulated by an end host, such as\n   using different port numbers\
    \ with Equal Cost MultiPath (ECMP) [4].\n   MPTCP, defined in [5], is a specific\
    \ protocol that instantiates the\n   Multipath TCP concept.  This document looks\
    \ both at general\n   architectural principles for a Multipath TCP fulfilling\
    \ the goals\n   described in Section 2, as well as the key design decisions behind\n\
    \   MPTCP, which are detailed in Section 5.\n   Although multihoming and multipath\
    \ functions are not new to transport\n   protocols (Stream Control Transmission\
    \ Protocol (SCTP) [6] being a\n   notable example), MPTCP aims to gain wide-scale\
    \ deployment by\n   recognizing the importance of application and network compatibility\n\
    \   goals.  These goals, discussed in detail in Section 2, relate to the\n   appearance\
    \ of MPTCP to the network (so non-MPTCP-aware entities see\n   it as TCP) and\
    \ to the application (through providing a service\n   equivalent to TCP for non-MPTCP-aware\
    \ applications).\n   This document has three key purposes: (i) it describes goals\
    \ for a\n   multipath transport -- goals that MPTCP is designed to meet; (ii)\
    \ it\n   lays out an architectural basis for MPTCP's design -- a discussion\n\
    \   that applies to other multipath transports as well; and (iii) it\n   discusses\
    \ and documents high-level design decisions made in MPTCP's\n   development, and\
    \ considers their implications.\n   Companion documents to this architectural\
    \ overview are those that\n   provide details of the protocol extensions [5],\
    \ congestion control\n   algorithms [7], and application-level considerations\
    \ [8].  Put\n   together, these components specify a complete Multipath TCP design.\n\
    \   Note that specific components are replaceable in accordance with the\n   layer\
    \ and functional decompositions discussed in this document.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [2].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Regular/Single-Path TCP:  The standard version of TCP [1]\
    \ in use\n      today, operating between a single pair of IP addresses and ports.\n\
    \   Multipath TCP:  A modified version of the TCP protocol that supports\n   \
    \   the simultaneous use of multiple paths between hosts.\n   Path:  A sequence\
    \ of links between a sender and a receiver, defined\n      in this context by\
    \ a source and destination address pair.\n   Host:  An end host either initiating\
    \ or terminating a Multipath TCP\n      connection.\n   MPTCP:  The proposed protocol\
    \ extensions specified in [5] to provide\n      a Multipath TCP implementation.\n\
    \   Subflow:  A flow of TCP segments operating over an individual path,\n    \
    \  which forms part of a larger Multipath TCP connection.\n   (Multipath TCP)\
    \ Connection:  A set of one or more subflows combined\n      to provide a single\
    \ Multipath TCP service to an application at a\n      host.\n"
- title: 1.3.  Reference Scenario
  contents:
  - "1.3.  Reference Scenario\n   The diagram shown in Figure 1 illustrates a typical\
    \ usage scenario\n   for Multipath TCP.  Two hosts, A and B, are communicating\
    \ with each\n   other.  These hosts are multihomed and multi-addressed, providing\
    \ two\n   disjoint connections to the Internet.  The addresses on each host are\n\
    \   referred to as A1, A2, B1, and B2.  There are therefore up to four\n   different\
    \ paths between the two hosts: A1-B1, A1-B2, A2-B1, A2-B2.\n               +------+\
    \           __________           +------+\n               |      |A1 ______ (\
    \          ) ______ B1|      |\n               | Host |--/      (            )\
    \      \\--| Host |\n               |      |        (   Internet   )        |\
    \      |\n               |  A   |--\\______(            )______/--|   B  |\n \
    \              |      |A2        (__________)        B2|      |\n            \
    \   +------+                                +------+\n               Figure 1:\
    \ Simple Multipath TCP Usage Scenario\n   The scenario could have any number of\
    \ addresses (1 or more) on each\n   host, as long as the number of paths available\
    \ between the two hosts\n   is 2 or more (i.e., num_addr(A) * num_addr(B) > 1).\
    \  The paths\n   created by these address combinations through the Internet need\
    \ not\n   be entirely disjoint -- potential fairness issues introduced by\n  \
    \ shared bottlenecks need to be handled by the Multipath TCP congestion\n   controller.\
    \  Furthermore, the paths through the Internet often do not\n   provide a pure\
    \ end-to-end service, and instead may be affected by\n   middleboxes such as NATs\
    \ and firewalls.\n"
- title: 2.  Goals
  contents:
  - "2.  Goals\n   This section outlines primary goals that Multipath TCP aims to\
    \ meet.\n   These are broadly broken down into the following: functional goals,\n\
    \   which steer services and features that Multipath TCP must provide,\n   and\
    \ compatibility goals, which determine how Multipath TCP should\n   appear to\
    \ entities that interact with it.\n"
- title: 2.1.  Functional Goals
  contents:
  - "2.1.  Functional Goals\n   In supporting the use of multiple paths, Multipath\
    \ TCP has the\n   following two functional goals.\n   o  Improve Throughput: Multipath\
    \ TCP MUST support the concurrent use\n      of multiple paths.  To meet the minimum\
    \ performance incentives for\n      deployment, a Multipath TCP connection over\
    \ multiple paths SHOULD\n      achieve no worse throughput than a single TCP connection\
    \ over the\n      best constituent path.\n   o  Improve Resilience: Multipath\
    \ TCP MUST support the use of multiple\n      paths interchangeably for resilience\
    \ purposes, by permitting\n      segments to be sent and re-sent on any available\
    \ path.  It follows\n      that, in the worst case, the protocol MUST be no less\
    \ resilient\n      than regular single-path TCP.\n   As distribution of traffic\
    \ among available paths and responses to\n   congestion are done in accordance\
    \ with resource pooling principles\n   [3], a secondary effect of meeting these\
    \ goals is that widespread use\n   of Multipath TCP over the Internet should improve\
    \ overall network\n   utility by shifting load away from congested bottlenecks\
    \ and by\n   taking advantage of spare capacity wherever possible.\n   Furthermore,\
    \ Multipath TCP SHOULD feature automatic negotiation of\n   its use.  A host supporting\
    \ Multipath TCP that requires the other\n   host to do so too must be able to\
    \ detect reliably whether this host\n   does in fact support the required extensions,\
    \ using them if so, and\n   otherwise automatically falling back to single-path\
    \ TCP.\n"
- title: 2.2.  Compatibility Goals
  contents:
  - "2.2.  Compatibility Goals\n   In addition to the functional goals listed above,\
    \ a Multipath TCP\n   must meet a number of compatibility goals in order to support\n\
    \   deployment in today's Internet.  These goals fall into the following\n   categories.\n"
- title: 2.2.1.  Application Compatibility
  contents:
  - "2.2.1.  Application Compatibility\n   Application compatibility refers to the\
    \ appearance of Multipath TCP\n   to the application both in terms of the API\
    \ that can be used and the\n   expected service model that is provided.\n   Multipath\
    \ TCP MUST follow the same service model as TCP [1]: in-\n   order, reliable,\
    \ and byte-oriented delivery.  Furthermore, a\n   Multipath TCP connection SHOULD\
    \ provide the application with no worse\n   throughput or resilience than it would\
    \ expect from running a single\n   TCP connection over any one of its available\
    \ paths.  A Multipath TCP\n   may not, however, be able to provide the same level\
    \ of consistency of\n   throughput and latency as a single TCP connection.  These,\
    \ and other,\n   application considerations are discussed in detail in [8].\n\
    \   A multipath-capable equivalent of TCP MUST retain some level of\n   backward\
    \ compatibility with existing TCP APIs, so that existing\n   applications can\
    \ use the newer transport merely by upgrading the\n   operating systems of the\
    \ end hosts.  This does not preclude the use\n   of an advanced API to permit\
    \ multipath-aware applications to specify\n   preferences, nor for users to configure\
    \ their systems in a different\n   way from the default, for example switching\
    \ on or off the automatic\n   use of multipath extensions.\n   It is possible\
    \ for regular TCP sessions today to survive brief breaks\n   in connectivity by\
    \ retaining state at end hosts before a timeout\n   occurs.  It would be desirable\
    \ to support similar session continuity\n   in MPTCP; however, the circumstances\
    \ could be different.  Whilst in\n   regular TCP the IP addresses will remain\
    \ constant across the break in\n   connectivity, in MPTCP a different interface\
    \ may appear.  It is\n   desirable (but not mandated) to support this kind of\
    \ \"break-before-\n   make\" session continuity.  This places constraints on security\n\
    \   mechanisms, however, as discussed in Section 5.8.  Timeouts for this\n   function\
    \ would be locally configured.\n"
- title: 2.2.2.  Network Compatibility
  contents:
  - "2.2.2.  Network Compatibility\n   In the traditional Internet architecture, network\
    \ devices operate at\n   the network layer and lower layers, with the layers above\
    \ the network\n   layer instantiated only at the end hosts.  While this architecture,\n\
    \   shown in Figure 2, was initially largely adhered to, this layering no\n  \
    \ longer reflects the \"ground truth\" in the Internet with the\n   proliferation\
    \ of middleboxes [9].  Middleboxes routinely interpose on\n   the transport layer;\
    \ sometimes even completely terminating transport\n   connections, thus leaving\
    \ the application layer as the first real\n   end-to-end layer, as shown in Figure\
    \ 3.\n   +-------------+                                       +-------------+\n\
    \   | Application |<------------ end-to-end ------------->| Application |\n  \
    \ +-------------+                                       +-------------+\n   |\
    \  Transport  |<------------ end-to-end ------------->|  Transport  |\n   +-------------+\
    \   +-------------+   +-------------+   +-------------+\n   |   Network   |<->|\
    \   Network   |<->|   Network   |<->|   Network   |\n   +-------------+   +-------------+\
    \   +-------------+   +-------------+\n      End Host           Router       \
    \      Router          End Host\n                Figure 2: Traditional Internet\
    \ Architecture\n   +-------------+                                       +-------------+\n\
    \   | Application |<------------ end-to-end ------------->| Application |\n  \
    \ +-------------+                     +-------------+   +-------------+\n   |\
    \  Transport  |<------------------->|  Transport  |<->|  Transport  |\n   +-------------+\
    \   +-------------+   +-------------+   +-------------+\n   |   Network   |<->|\
    \   Network   |<->|   Network   |<->|   Network   |\n   +-------------+   +-------------+\
    \   +-------------+   +-------------+\n                                      \
    \    Firewall,\n      End Host           Router         NAT, or Proxy      End\
    \ Host\n                        Figure 3: Internet Reality\n   Middleboxes that\
    \ interpose on the transport layer result in loss of\n   \"fate-sharing\" [10],\
    \ that is, they often hold \"hard\" state that, when\n   lost or corrupted, results\
    \ in loss or corruption of the end-to-end\n   transport connection.\n   The network\
    \ compatibility goal requires that the multipath extension\n   to TCP retain compatibility\
    \ with the Internet as it exists today,\n   including making reasonable efforts\
    \ to be able to traverse\n   predominant middleboxes such as firewalls, NATs,\
    \ and performance-\n   enhancing proxies [9].  This requirement comes from recognizing\n\
    \   middleboxes as a significant deployment bottleneck for any transport\n   that\
    \ is not TCP or UDP, and constrains Multipath TCP to appear as TCP\n   does on\
    \ the wire and to use established TCP extensions where\n   necessary.  To ensure\
    \ \"end-to-endness\" of the transport, Multipath\n   TCP MUST preserve fate-sharing\
    \ without making any assumptions about\n   middlebox behavior.\n   A detailed\
    \ analysis of middlebox behavior and the impact on the\n   Multipath TCP architecture\
    \ is presented in Section 7.  In addition,\n   network compatibility must be retained\
    \ to the extent that Multipath\n   TCP MUST fall back to regular TCP if there\
    \ are insurmountable\n   incompatibilities for the multipath extension on a path.\n\
    \   Middleboxes may also cause some TCP features to be able to exist on\n   one\
    \ subflow but not another.  Typically, these will be at the subflow\n   level\
    \ (such as selective acknowledgment (SACK) [11]) and thus do not\n   affect the\
    \ connection-level behavior.  In the future, any proposed\n   TCP connection-level\
    \ extensions should consider how they can coexist\n   with MPTCP.\n   The modifications\
    \ to support Multipath TCP remain at the transport\n   layer, although some knowledge\
    \ of the underlying network layer is\n   required.  Multipath TCP SHOULD work\
    \ with IPv4 and IPv6\n   interchangeably, i.e., one connection may operate over\
    \ both IPv4 and\n   IPv6 networks.\n"
- title: 2.2.3.  Compatibility with Other Network Users
  contents:
  - "2.2.3.  Compatibility with Other Network Users\n   As a corollary to both network\
    \ and application compatibility, the\n   architecture must enable new Multipath\
    \ TCP flows to coexist\n   gracefully with existing single-path TCP flows, competing\
    \ for\n   bandwidth neither unduly aggressively nor unduly timidly (unless low-\n\
    \   precedence operation is specifically requested by the application,\n   such\
    \ as with LEDBAT).  The use of multiple paths MUST NOT unduly harm\n   users using\
    \ single-path TCP at shared bottlenecks, beyond the impact\n   that would occur\
    \ from another single-path TCP flow.  Multiple\n   Multipath TCP flows on a shared\
    \ bottleneck MUST share bandwidth\n   between each other with similar fairness\
    \ to that which occurs at a\n   shared bottleneck with single-path TCP.\n"
- title: 2.3.  Security Goals
  contents:
  - "2.3.  Security Goals\n   The extension of TCP with multipath capabilities will\
    \ bring with it a\n   number of new threats, analyzed in detail in [12].  The\
    \ security goal\n   for Multipath TCP is to provide a service no less secure than\n\
    \   regular, single-path TCP.  This will be achieved through a\n   combination\
    \ of existing TCP security mechanisms (potentially modified\n   to align with\
    \ the Multipath TCP extensions) and of protection against\n   the new multipath\
    \ threats identified.  The design decisions derived\n   from this goal are presented\
    \ in Section 5.8.\n"
- title: 2.4.  Related Protocols
  contents:
  - "2.4.  Related Protocols\n   There are several similarities between SCTP [6] and\
    \ MPTCP, in that\n   both can make use of multiple addresses at end hosts to give\
    \ some\n   multipath capability.  In SCTP, the primary use case is to support\n\
    \   redundancy and mobility for multihomed hosts (i.e., a single path\n   will\
    \ change one of its end host addresses); the simultaneous use of\n   multiple\
    \ paths is not supported.  Extensions are proposed to support\n   simultaneous\
    \ multipath transport [13], but these are yet to be\n   standardized.  By far\
    \ the most widely used stream-based transport\n   protocol is, however, TCP [1],\
    \ and SCTP does not meet the network and\n   application compatibility goals specified\
    \ in Section 2.2.  For\n   network compatibility, there are issues with various\
    \ middleboxes\n   (especially NATs) that are unaware of SCTP and consequently\
    \ end up\n   blocking it.  For application compatibility, applications need to\n\
    \   actively choose to use SCTP, and with the deployment issues, very few\n  \
    \ choose to do so.  MPTCP's compatibility goals are in part based on\n   these\
    \ observations of SCTP's deployment issues.\n"
- title: 3.  An Architectural Basis for Multipath TCP
  contents:
  - "3.  An Architectural Basis for Multipath TCP\n   This section presents one possible\
    \ transport architecture that the\n   authors believe can effectively support\
    \ the goals for Multipath TCP.\n   The new Internet model described here is based\
    \ on ideas proposed\n   earlier in Tng (\"Transport next-generation\") [14]. \
    \ While by no means\n   the only possible architecture supporting multipath transport,\
    \ Tng\n   incorporates many lessons learned from previous transport research\n\
    \   and development practice, and offers a strong starting point from\n   which\
    \ to consider the extant Internet architecture and its bearing on\n   the design\
    \ of any new Internet transports or transport extensions.\n          +------------------+\n\
    \          |    Application   |\n          +------------------+  ^ Application-oriented\
    \ transport\n          |                  |  | functions (Semantic Layer)\n  \
    \        + - - Transport - -+ ----------------------------------\n          |\
    \                  |  | Network-oriented transport\n          +------------------+\
    \  v functions (Flow+Endpoint Layer)\n          |      Network     |\n       \
    \   +------------------+\n            Existing Layers             Tng Decomposition\n\
    \              Figure 4: Decomposition of Transport Functions\n   Tng loosely\
    \ splits the transport layer into \"application-oriented\"\n   and \"network-oriented\"\
    \ layers, as shown in Figure 4.  The\n   application-oriented \"Semantic\" layer\
    \ implements functions driven\n   primarily by concerns of supporting and protecting\
    \ the application's\n   end-to-end communication, while the network-oriented \"\
    Flow+Endpoint\"\n   layer implements functions such as endpoint identification\
    \ (using\n   port numbers) and congestion control.  These network-oriented\n \
    \  functions, while traditionally located in the ostensibly \"end-to-end\"\n \
    \  Transport layer, have proven in practice to be of great concern to\n   network\
    \ operators and the middleboxes they deploy in the network to\n   enforce network\
    \ usage policies [15] [16] or optimize communication\n   performance [17].  Figure\
    \ 5 shows how middleboxes interact with\n   different layers in this decomposed\
    \ model of the transport layer: the\n   application-oriented layer operates end-to-end,\
    \ while the network-\n   oriented layer operates \"segment-by-segment\" and can\
    \ be interposed\n   upon by middleboxes.\n   +-------------+                 \
    \                      +-------------+\n   | Application |<------------ end-to-end\
    \ ------------->| Application |\n   +-------------+                          \
    \             +-------------+\n   |  Semantic   |<------------ end-to-end ------------->|\
    \  Semantic   |\n   +-------------+   +-------------+   +-------------+   +-------------+\n\
    \   |Flow+Endpoint|<->|Flow+Endpoint|<->|Flow+Endpoint|<->|Flow+Endpoint|\n  \
    \ +-------------+   +-------------+   +-------------+   +-------------+\n   |\
    \   Network   |<->|   Network   |<->|   Network   |<->|   Network   |\n   +-------------+\
    \   +-------------+   +-------------+   +-------------+\n                    \
    \    Firewall         Performance\n      End Host           or NAT        Enhancing\
    \ Proxy      End Host\n              Figure 5: Middleboxes in the New Internet\
    \ Model\n   MPTCP's architectural design follows Tng's decomposition as shown\
    \ in\n   Figure 6.  MPTCP, which provides application compatibility through\n\
    \   the preservation of TCP-like semantics of global ordering of\n   application\
    \ data and reliability, is an instantiation of the\n   \"application-oriented\"\
    \ Semantic layer; whereas the subflow TCP\n   component, which provides network\
    \ compatibility by appearing and\n   behaving as a TCP flow in the network, is\
    \ an instantiation of the\n   \"network-oriented\" Flow+Endpoint layer.\n    \
    \ +--------------------------+    +-------------------------------+\n     |  \
    \    Application         |    |          Application          |\n     +--------------------------+\
    \    +-------------------------------+\n     |        Semantic          |    |\
    \             MPTCP             |\n     |------------+-------------|    + - -\
    \ - - - - - + - - - - - - - +\n     | Flow+Endpt | Flow+Endpt  |    | Subflow\
    \ (TCP) | Subflow (TCP) |\n     +------------+-------------+    +---------------+---------------+\n\
    \     |   Network  |   Network   |    |       IP      |       IP      |\n    \
    \ +------------+-------------+    +---------------+---------------+\n        Figure\
    \ 6: Relationship between Tng (Left) and MPTCP (Right)\n   As a protocol extension\
    \ to TCP, MPTCP thus explicitly acknowledges\n   middleboxes in its design, and\
    \ specifies a protocol that operates at\n   two scales: the MPTCP component operates\
    \ end-to-end, while it allows\n   the TCP component to operate segment-by-segment.\n"
- title: 4.  A Functional Decomposition of MPTCP
  contents:
  - "4.  A Functional Decomposition of MPTCP\n   The previous two sections have discussed\
    \ the goals for a Multipath\n   TCP design, and provided a basis for decomposing\
    \ the functions of a\n   transport protocol in order to better understand the\
    \ form a solution\n   should take.  This section builds upon this analysis by\
    \ presenting\n   the functional components that are used within the MPTCP design.\n\
    \   MPTCP makes use of (what appear to the network to be) standard TCP\n   sessions,\
    \ termed \"subflows\", to provide the underlying transport per\n   path, and as\
    \ such these retain the network compatibility desired.\n   MPTCP-specific information\
    \ is carried in a TCP-compatible manner,\n   although this mechanism is separate\
    \ from the actual information being\n   transferred so could evolve in future\
    \ revisions.  Figure 7\n   illustrates the layered architecture.\n           \
    \                        +-------------------------------+\n                 \
    \                  |           Application         |\n      +---------------+\
    \            +-------------------------------+\n      |  Application  |      \
    \      |             MPTCP             |\n      +---------------+            +\
    \ - - - - - - - + - - - - - - - +\n      |      TCP      |            | Subflow\
    \ (TCP) | Subflow (TCP) |\n      +---------------+            +-------------------------------+\n\
    \      |      IP       |            |       IP      |      IP       |\n      +---------------+\
    \            +-------------------------------+\n      Figure 7: Comparison of\
    \ Standard TCP and MPTCP Protocol Stacks\n   Situated below the application, the\
    \ MPTCP extension in turn manages\n   multiple TCP subflows below it.  In order\
    \ to do this, it must\n   implement the following functions:\n   o  Path Management:\
    \ This is the function to detect and use multiple\n      paths between two hosts.\
    \  MPTCP uses the presence of multiple IP\n      addresses at one or both of the\
    \ hosts as an indicator of this.\n      The path management features of the MPTCP\
    \ protocol are the\n      mechanisms to signal alternative addresses to hosts,\
    \ and\n      mechanisms to set up new subflows joined to an existing MPTCP\n \
    \     connection.\n   o  Packet Scheduling: This function breaks the byte stream\
    \ received\n      from the application into segments to be transmitted on one\
    \ of the\n      available subflows.  The MPTCP design makes use of a data sequence\n\
    \      mapping, associating segments sent on different subflows to a\n      connection-level\
    \ sequence numbering, thus allowing segments sent\n      on different subflows\
    \ to be correctly re-ordered at the receiver.\n      The packet scheduler is dependent\
    \ upon information about the\n      availability of paths exposed by the path\
    \ management component,\n      and then makes use of the subflows to transmit\
    \ queued segments.\n      This function is also responsible for connection-level\
    \ re-ordering\n      on receipt of packets from the TCP subflows, according to\
    \ the\n      attached data sequence mappings.\n   o  Subflow (single-path TCP)\
    \ Interface: A subflow component takes\n      segments from the packet-scheduling\
    \ component and transmits them\n      over the specified path, ensuring detectable\
    \ delivery to the host.\n      MPTCP uses TCP underneath for network compatibility;\
    \ TCP ensures\n      in-order, reliable delivery.  TCP adds its own sequence numbers\
    \ to\n      the segments; these are used to detect and retransmit lost packets\n\
    \      at the subflow layer.  On receipt, the subflow passes its\n      reassembled\
    \ data to the packet scheduling component for\n      connection-level reassembly;\
    \ the data sequence mapping from the\n      sender's packet scheduling component\
    \ allows re-ordering of the\n      entire byte stream.\n   o  Congestion Control:\
    \ This function coordinates congestion control\n      across the subflows.  As\
    \ specified, this congestion control\n      algorithm MUST ensure that an MPTCP\
    \ connection does not unfairly\n      take more bandwidth than a single path TCP\
    \ flow would take at a\n      shared bottleneck.  An algorithm to support this\
    \ is specified in\n      [7].\n   These functions fit together as follows.  The\
    \ path management looks\n   after the discovery (and if necessary, initialization)\
    \ of multiple\n   paths between two hosts.  The packet scheduler then receives\
    \ a stream\n   of data from the application destined for the network, and undertakes\n\
    \   the necessary operations on it (such as segmenting the data into\n   connection-level\
    \ segments, and adding a connection-level sequence\n   number) before sending\
    \ it on to a subflow.  The subflow then adds its\n   own sequence number, ACKs,\
    \ and passes them to network.  The receiving\n   subflow re-orders data (if necessary)\
    \ and passes it to the packet\n   scheduling component, which performs connection\
    \ level re-ordering,\n   and sends the data stream to the application.  Finally,\
    \ the\n   congestion control component exists as part of the packet scheduling,\n\
    \   in order to schedule which segments should be sent at what rate on\n   which\
    \ subflow.\n"
- title: 5.  High-Level Design Decisions
  contents:
  - "5.  High-Level Design Decisions\n   There is seemingly a wide range of choices\
    \ when designing a multipath\n   extension to TCP.  However, the goals as discussed\
    \ earlier in this\n   document constrain the possible solutions, leaving relative\
    \ little\n   choice in many areas.  This section outlines high-level design\n\
    \   choices that draw from the architectural basis discussed earlier in\n   Section\
    \ 3, which the design of MPTCP [5] takes into account.\n"
- title: 5.1.  Sequence Numbering
  contents:
  - "5.1.  Sequence Numbering\n   MPTCP uses two levels of sequence spaces: a connection-level\
    \ sequence\n   number and another sequence number for each subflow.  This permits\n\
    \   connection-level segmentation and reassembly and retransmission of\n   the\
    \ same part of connection-level sequence space on different\n   subflow-level\
    \ sequence space.\n   The alternative approach would be to use a single connection-level\n\
    \   sequence number, which gets sent on multiple subflows.  This has two\n   problems:\
    \ first, the individual subflows will appear to the network\n   as TCP sessions\
    \ with gaps in the sequence space; this in turn may\n   upset certain middleboxes\
    \ such as intrusion detection systems, or\n   certain transparent proxies, and\
    \ would thus go against the network\n   compatibility goal.  Second, the sender\
    \ would not be able to\n   attribute packet losses or receptions to the correct\
    \ path when the\n   same segment is sent on multiple paths (i.e., in the case\
    \ of\n   retransmissions).\n   The sender must be able to tell the receiver how\
    \ to reassemble the\n   data, for delivery to the application.  In order to achieve\
    \ this, the\n   receiver must determine how subflow-level data (carrying subflow\n\
    \   sequence numbers) maps at the connection level.  This is referred to\n   as\
    \ the \"data sequence mapping\".  This mapping can be represented as a\n   tuple\
    \ of (data sequence number, subflow sequence number, length),\n   i.e., for a\
    \ given number of bytes (the length), the subflow sequence\n   space beginning\
    \ at the given sequence number maps to the connection-\n   level sequence space\
    \ (beginning at the given data sequence number).\n   This information could conceivably\
    \ have various sources.\n   One option to signal the data sequence mapping would\
    \ be to use\n   existing fields in the TCP segment (such as subflow sequence number,\n\
    \   length) and add only the data sequence number to each segment, for\n   instance,\
    \ as a TCP option.  This would be vulnerable, however, to\n   middleboxes that\
    \ re-segment or assemble data, since there is no\n   specified behavior for coalescing\
    \ TCP options.  If one signaled (data\n   sequence number, length), this would\
    \ still be vulnerable to\n   middleboxes that coalesce segments and do not understand\
    \ MPTCP\n   signaling so do not correctly rewrite the options.\n   Because of\
    \ these potential issues, the design decision taken in the\n   MPTCP protocol\
    \ is that whenever a mapping for subflow data needs to\n   be conveyed to the\
    \ other host, all three pieces of data (data seq,\n   subflow seq, length) must\
    \ be sent.  To reduce the overhead, it would\n   be permissible for the mapping\
    \ to be sent periodically and cover more\n   than a single segment.  Further experimentation\
    \ is required to\n   determine what tradeoffs exist regarding the frequency at\
    \ which\n   mappings should be sent.  It could also be excluded entirely in the\n\
    \   case of a connection before more than one subflow is used, where the\n   data-level\
    \ and subflow-level sequence space is the same.\n"
- title: 5.2.  Reliability and Retransmissions
  contents:
  - "5.2.  Reliability and Retransmissions\n   MPTCP features acknowledgements at\
    \ connection-level as well as\n   subflow-level acknowledgements, in order to\
    \ provide a robust service\n   to the application.\n   Under normal behavior,\
    \ MPTCP could use the data sequence mapping and\n   subflow ACKs to decide when\
    \ a connection-level segment was received.\n   The transmission of TCP ACKs for\
    \ a subflow are handled entirely at\n   the subflow level, in order to maintain\
    \ TCP semantics and trigger\n   subflow-level retransmissions.  This has certain\
    \ implications on end-\n   to-end semantics.  It would mean that once a segment\
    \ is ACKed at the\n   subflow level, it cannot be discarded in the re-order buffer\
    \ at the\n   connection level.  Secondly, unlike in standard TCP, a receiver\n\
    \   cannot simply drop out-of-order segments if needed (for instance, due\n  \
    \ to memory pressure).  Under certain circumstances, it may be\n   desirable to\
    \ drop segments after acknowledgement on the subflow but\n   before delivery to\
    \ the application, and this can be facilitated by a\n   connection-level acknowledgement.\n\
    \   Furthermore, it is possible to conceive of some cases where\n   connection-level\
    \ acknowledgements could improve robustness.  Consider\n   a subflow traversing\
    \ a transparent proxy: if the proxy ACKs a segment\n   and then crashes, the sender\
    \ will not retransmit the lost segment on\n   another subflow, as it thinks the\
    \ segment has been received.  The\n   connection grinds to a halt despite having\
    \ other working subflows,\n   and the sender would be unable to determine the\
    \ cause of the problem.\n   An example situation where this may occur would be\
    \ mobility between\n   wireless access points, each of which operates a transport-level\n\
    \   proxy.  Finally, as an optimization, it may be feasible for a\n   connection-level\
    \ acknowledgement to be transmitted over the shortest\n   Round-Trip Time (RTT)\
    \ path, potentially reducing send buffer\n   requirements (see Section 5.3).\n\
    \   Therefore, to provide a fully robust multipath TCP solution given the\n  \
    \ above constraints, MPTCP for use on the public Internet MUST feature\n   explicit\
    \ connection-level acknowledgements, in addition to subflow-\n   level acknowledgements.\
    \  A connection-level acknowledgement would\n   only be required in order to signal\
    \ when the receive window moves\n   forward; the heuristics for using such a signal\
    \ are discussed in more\n   detail in the protocol specification [5].\n   Regarding\
    \ retransmissions, it MUST be possible for a segment to be\n   retransmitted on\
    \ a different subflow from that on which it was\n   originally sent.  This is\
    \ one of MPTCP's core goals, in order to\n   maintain integrity during temporary\
    \ or permanent subflow failure, and\n   this is enabled by the dual sequence number\
    \ space.\n   The scheduling of retransmissions will have significant impact on\n\
    \   MPTCP user experience.  The current MPTCP specification suggests that\n  \
    \ data outstanding on subflows that have timed out should be\n   rescheduled for\
    \ transmission on different subflows.  This behavior\n   aims to minimize disruption\
    \ when a path breaks, and uses the first\n   timeout as indicators.  More conservative\
    \ versions would be to use\n   second or third timeouts for the same segment.\n\
    \   Typically, fast retransmit on an individual subflow will not trigger\n   retransmission\
    \ on another subflow, although this may still be\n   desirable in certain cases,\
    \ for instance, to reduce the receive\n   buffer requirements.  However, in all\
    \ cases with retransmissions on\n   different subflows, the lost segments SHOULD\
    \ still be sent on the\n   path that lost them.  This is currently believed to\
    \ be necessary to\n   maintain subflow integrity, as per the network compatibility\
    \ goal.\n   By doing this, some efficiency is lost, and it is unclear at this\n\
    \   point what the optimal retransmit strategy is.\n   Large-scale experiments\
    \ are therefore required in order to determine\n   the most appropriate retransmission\
    \ strategy, and recommendations\n   will be refined once more information is available.\n"
- title: 5.3.  Buffers
  contents:
  - "5.3.  Buffers\n   To ensure in-order delivery, MPTCP must use a connection level\n\
    \   receive buffer, where segments are placed until they are in order and\n  \
    \ can be read by the application.\n   In regular, single-path TCP, it is usually\
    \ recommended to set the\n   receive buffer to 2*BDP (Bandwidth-Delay Product,\
    \ i.e., BDP = BW*RTT,\n   where BW = Bandwidth and RTT = Round-Trip Time).  One\
    \ BDP allows\n   supporting reordering of segments by the network.  The other\
    \ BDP\n   allows the connection to continue during fast retransmit: when a\n \
    \  segment is fast retransmitted, the receiver must be able to store\n   incoming\
    \ data during one more RTT.\n   For MPTCP, the story is a bit more complicated.\
    \  The ultimate goal is\n   that a subflow packet loss or subflow failure should\
    \ not affect the\n   throughput of other working subflows; the receiver should\
    \ have enough\n   buffering to store all data until the missing segment is re-\n\
    \   transmitted and reaches the destination.\n   The worst-case scenario would\
    \ be when the subflow with the highest\n   RTT/RTO (Round-Trip Time or Retransmission\
    \ TimeOut) experiences a\n   timeout; in that case, the receiver has to buffer\
    \ data from all\n   subflows for the duration of the RTO.  Thus, the smallest\
    \ connection-\n   level receive buffer that would be needed to avoid stalling\
    \ with\n   subflow failures is sum(BW_i)*RTO_max, where BW_i = Bandwidth for\n\
    \   each subflow and RTO_max is the largest RTO across all subflows.\n   This\
    \ is an order of magnitude more than the receive buffer required\n   for a single\
    \ connection, and is probably too expensive for practical\n   purposes.  A more\
    \ sensible requirement is to avoid stalls in the\n   absence of timeouts.  Therefore,\
    \ the RECOMMENDED receive buffer is\n   2*sum(BW_i)*RTT_max, where RTT_max is\
    \ the largest RTT across all\n   subflows.  This buffer sizing ensures subflows\
    \ do not stall when fast\n   retransmit is triggered on any subflow.\n   The resulting\
    \ buffer size should be small enough for practical use.\n   However, there may\
    \ be extreme cases where fast, high throughput paths\n   (e.g., 100 Mb/s, 10 ms\
    \ RTT) are used in conjunction with slow paths\n   (e.g., 1 Mb/s, 1000 ms RTT).\
    \  In that case, the required receive\n   buffer would be 12.5 MB, which is likely\
    \ too big.  In extreme cases\n   such as this example, it may be prudent to only\
    \ use some of the\n   fastest available paths for the MPTCP connection, potentially\
    \ using\n   the slow path(s) for backup only.\n   Send Buffer: The RECOMMENDED\
    \ send buffer is the same size as the\n   recommended receive buffer, i.e., 2*sum(BW_i)*RTT_max.\
    \  This is\n   because the sender must locally store the segments sent but\n \
    \  unacknowledged by the connection level ACK.  The send buffer size\n   matters\
    \ particularly for hosts that maintain a large number of\n   ongoing connections.\
    \  If the required send buffer is too large, a\n   host can choose to only send\
    \ data on the fast subflows, using the\n   slow subflows only in cases of failure.\n"
- title: 5.4.  Signaling
  contents:
  - "5.4.  Signaling\n   Since MPTCP uses TCP as its subflow transport mechanism,\
    \ an MPTCP\n   connection will also begin as a single TCP connection.  Nevertheless,\n\
    \   it must signal to the peer that it supports MPTCP and wishes to use\n   it\
    \ on this connection.  As such, a TCP option will be used to\n   transmit this\
    \ information, since this is the established mechanism\n   for indicating additional\
    \ functionality on a TCP session.\n   In addition, further signaling is required\
    \ during the operation of an\n   MPTCP session, such as that for reassembly across\
    \ multiple subflows,\n   and for informing the other host about other available\
    \ IP addresses.\n   The MPTCP protocol design will use TCP options for this additional\n\
    \   signaling.  This has been chosen as the mechanism most fitting in\n   with\
    \ the goals as specified in Section 2.  With this mechanism, the\n   signaling\
    \ required to operate MPTCP is transported separately from\n   the data, allowing\
    \ it to be created and processed separately from the\n   data stream, and retaining\
    \ architectural compatibility with network\n   entities.\n   This decision is\
    \ the consensus of the Working Group (following\n   detailed discussions at IETF78),\
    \ and the main reasons for this are as\n   follows:\n   o  TCP options are the\
    \ traditional signaling method for TCP;\n   o  A TCP option on a SYN is the most\
    \ compatible way for an end host\n      to signal it is MPTCP capable;\n   o \
    \ If connection-level ACKs are signaled in the payload, then they\n      may suffer\
    \ from packet loss and may be congestion-controlled,\n      which may affect the\
    \ data throughput in the forward direction and\n      could lead to head-of-line\
    \ blocking;\n   o  Middleboxes, such as NAT traversal helpers, can easily parse\
    \ TCP\n      options, e.g., to rewrite addresses.\n   On the other hand, the main\
    \ drawbacks of TCP options compared to TLV\n   encoding in the payload are the\
    \ following:\n   o  There is limited space for signaling messages;\n   o  A middlebox\
    \ may, potentially, drop a packet with an unknown\n      option;\n   o  The transport\
    \ of control information in options is not necessarily\n      reliable.\n   The\
    \ detailed design of MPTCP alleviates these issues as far as\n   possible by carefully\
    \ considering the size of MPTCP options and\n   seamlessly falling back to regular\
    \ TCP on the loss of control data.\n   Both option and payload encoding may interfere\
    \ with offloading of TCP\n   processing to high-speed network interface cards,\
    \ such as\n   segmentation, checksumming, and reassembly.  For network cards\n\
    \   supporting MPTCP, signaling in TCP options should simplify offloading\n  \
    \ due to the separate handling of MPTCP signaling and data.\n"
- title: 5.5.  Path Management
  contents:
  - "5.5.  Path Management\n   Currently, the network does not expose path diversity\
    \ between pairs\n   of IP addresses.  In order to achieve path diversity from\
    \ today's IP\n   networks, in the typical case, MPTCP uses multiple addresses\
    \ at one\n   or both hosts to infer different paths across the network.  It is\n\
    \   expected that these paths, whilst not necessarily entirely non-\n   overlapping,\
    \ will be sufficiently disjoint to allow multipath to\n   achieve improved throughput\
    \ and robustness.  The use of multiple IP\n   addresses is a simple mechanism\
    \ that requires no additional features\n   in the network.\n   Multiple different\
    \ (source, destination) address pairs will thus be\n   used as path selectors\
    \ in most cases.  However, each path will be\n   identified by a standard five-tuple\
    \ (i.e., source address,\n   destination address, source port, destination port,\
    \ protocol), which\n   can allow the extension of MPTCP to use ports as well as\
    \ addresses as\n   path selectors.  This will allow hosts to use port-based load\n\
    \   balancing with MPTCP, for example, if the network routes different\n   ports\
    \ over different paths (which may be the case with technologies\n   such as Equal\
    \ Cost MultiPath (ECMP) routing [4]).  It should be\n   noted, however, that ISPs\
    \ often undertake traffic engineering in\n   order to optimize resource utilization\
    \ within their networks, and\n   care should be taken (by both ISPs and developers)\
    \ that MPTCP using\n   broadly similar paths does not adversely interfere with\
    \ this.\n   For an increased chance of successfully setting up additional\n  \
    \ subflows (such as when one end is behind a firewall, NAT, or other\n   restrictive\
    \ middlebox), either host SHOULD be able to add new\n   subflows to an MPTCP connection.\
    \  MPTCP MUST be able to handle paths\n   that appear and disappear during the\
    \ lifetime of a connection (for\n   example, through the activation of an additional\
    \ network interface).\n   The path management is a separate function from the\
    \ packet\n   scheduling, subflow interface, and congestion control functions of\n\
    \   MPTCP, as documented in Section 4.  As such, it would be feasible to\n   replace\
    \ this IP-address-based design with an alternative path\n   selection mechanism\
    \ in the future, with no significant changes to the\n   other functional components.\n"
- title: 5.6.  Connection Identification
  contents:
  - "5.6.  Connection Identification\n   Since an MPTCP connection may not be bound\
    \ to a traditional 5-tuple\n   (source address and port, destination address and\
    \ port, protocol\n   number) for the entirety of its existence, it is desirable\
    \ to provide\n   a new mechanism for connection identification.  This will be\
    \ useful\n   for MPTCP-aware applications and for the MPTCP implementation (and\n\
    \   MPTCP-aware middleboxes) to have a unique identifier with which to\n   associate\
    \ the multiple subflows.\n   Therefore, each MPTCP connection requires a connection\
    \ identifier at\n   each host, which is locally unique within that host.  In many\
    \ ways,\n   this is analogous to an ephemeral port number in regular TCP.  The\n\
    \   manifestation and purpose of such an identifier is out of the scope\n   of\
    \ this architecture document.\n   Non-MPTCP-aware applications will not, however,\
    \ have access to this\n   identifier and in such cases an MPTCP connection will\
    \ be identified\n   by the 5-tuple of the first TCP subflow.  It is out of the\
    \ scope of\n   this document, however, to define the behavior of the MPTCP\n \
    \  implementation if the first TCP subflow later fails.  If there are\n   MPTCP-unaware\
    \ applications that make assumptions about continued\n   existence of the initial\
    \ address pair, their behavior could be\n   disrupted by carrying on regardless.\
    \  It is expected that this is a\n   very small, possibly negligible, set of applications,\
    \ however.  MPTCP\n   MUST NOT be used for applications that request to bind to\
    \ a specific\n   address or interface, since such applications are making a deliberate\n\
    \   choice of path in use.\n   Since the requirements of applications are not\
    \ clear at this stage,\n   however, it is as yet unconfirmed whether carrying\
    \ on in the event of\n   the loss of the initial address pair would be a damaging\
    \ assumption\n   to make.  This behavior will be an implementation-specific solution,\n\
    \   and as such it is expected to be chosen by implementors once more\n   research\
    \ has been undertaken to determine its impact.\n"
- title: 5.7.  Congestion Control
  contents:
  - "5.7.  Congestion Control\n   As discussed in network-layer compatibility requirements\n\
    \   Section 2.2.3, there are three goals for the congestion control\n   algorithms\
    \ used by an MPTCP implementation: improve throughput (at\n   least as well as\
    \ a single-path TCP connection would perform); do no\n   harm to other network\
    \ users (do not take up more capacity on any one\n   path than if it was a single\
    \ path flow using only that route -- this\n   is particularly relevant for shared\
    \ bottlenecks); and balance\n   congestion by moving traffic away from the most\
    \ congested paths.  To\n   achieve these goals, the congestion control algorithms\
    \ on each\n   subflow must be coupled in some way.  A proposal for a suitable\n\
    \   congestion control algorithm is given in [7].\n"
- title: 5.8.  Security
  contents:
  - "5.8.  Security\n   A detailed threat analysis for Multipath TCP is presented\
    \ in a\n   separate document [12].  That document focuses on flooding attacks\n\
    \   and hijacking attacks that can be launched against a Multipath TCP\n   connection.\n\
    \   The basic security goal of Multipath TCP, as introduced in\n   Section 2.3,\
    \ can be stated as: \"provide a solution that is no worse\n   than standard TCP\"\
    .\n   From the threat analysis, and with this goal in mind, three key\n   security\
    \ requirements can be identified.  A multi-addressed Multipath\n   TCP SHOULD\
    \ be able to do the following:\n   o  Provide a mechanism to confirm that the\
    \ parties in a subflow\n      handshake are the same as in the original connection\
    \ setup (e.g.,\n      require use of a key exchanged in the initial handshake\
    \ in the\n      subflow handshake, to limit the scope for hijacking attacks).\n\
    \   o  Provide verification that the peer can receive traffic at a new\n     \
    \ address before adding it (i.e., verify that the address belongs to\n      the\
    \ other host, to prevent flooding attacks).\n   o  Provide replay protection,\
    \ i.e., ensure that a request to add/\n      remove a subflow is 'fresh'.\n  \
    \ Additional mechanisms have been deployed as part of standard TCP\n   stacks\
    \ to provide resistance to Denial-of-Service (DoS) attacks.  For\n   example,\
    \ there are various mechanisms to protect against TCP reset\n   attacks [18],\
    \ and Multipath TCP should continue to support similar\n   protection.  In addition,\
    \ TCP SYN Cookies [19] were developed to\n   allow a TCP server to defer the creation\
    \ of session state in the\n   SYN_RCVD state, and remain stateless until the ESTABLISHED\
    \ state had\n   been reached.  Multipath TCP should, ideally, continue to provide\n\
    \   such functionality and, at a minimum, avoid significant computational\n  \
    \ burden prior to reaching the ESTABLISHED state (of the Multipath TCP\n   connection\
    \ as a whole).\n   It should be noted that aspects of the Multipath TCP design\
    \ space\n   place constraints on the security solution:\n   o  The use of TCP\
    \ options significantly limits the amount of\n      information that can be carried\
    \ in the handshake.\n   o  The need to work through middleboxes results in the\
    \ need to handle\n      mutability of packets.\n   o  The desire to support a\
    \ 'break-before-make' (as well as a 'make-\n      before-break') approach to adding\
    \ subflows (within a limited time\n      period) implies that a host cannot rely\
    \ on using a pre-existing\n      subflow to support the addition of a new one.\n\
    \   The MPTCP protocol will be designed with these security requirements\n   in\
    \ mind, and the protocol specification [5] will document how these\n   are met.\n"
- title: 6.  Software Interactions
  contents:
  - '6.  Software Interactions

    '
- title: 6.1.  Interactions with Applications
  contents:
  - "6.1.  Interactions with Applications\n   In the case of applications that have\
    \ used an existing API call to\n   bind to a specific address or interface, the\
    \ MPTCP extension MUST NOT\n   be used.  This is because the applications are\
    \ indicating a clear\n   choice of path to use and thus will have expectations\
    \ of behavior\n   that must be maintained, in order to adhere to the application\n\
    \   compatibility goals.\n   Interactions with applications are presented in [8]\
    \ -- including, but\n   not limited to, performances changes that may be expected,\
    \ semantic\n   changes, and new features that may be requested through an enhanced\n\
    \   API.\n   TCP features the ability to send \"Urgent\" data, the delivery of\
    \ which\n   to the application may or may not be out-of-band.  The use of this\n\
    \   feature is not recommended due to security implications and\n   implementation\
    \ differences [20].  MPTCP requires contiguous data to\n   support its data sequence\
    \ mapping over multiple segments, and\n   therefore the Urgent pointer cannot\
    \ interrupt an existing mapping.\n   An MPTCP implementation MAY choose to support\
    \ sending Urgent data,\n   and if it does, it SHOULD send the Urgent data on the\
    \ soonest\n   available unassigned subflow sequence space.  Incoming Urgent data\n\
    \   SHOULD be mapped to connection-level sequence space and delivered to\n   the\
    \ application analogous to Urgent data in regular TCP.\n"
- title: 6.2.  Interactions with Management Systems
  contents:
  - "6.2.  Interactions with Management Systems\n   To enable interactions between\
    \ TCP and network management systems,\n   the TCP [21] and TCP Extended Statistics\
    \ (ESTATS) [22] MIBs have been\n   defined.  MPTCP should share these MIBs for\
    \ aspects that are designed\n   to be transparent to the application.\n   It is\
    \ anticipated that an MPTCP MIB will be defined in the future,\n   once experience\
    \ of experimental MPTCP deployments is gathered.  This\n   MIB would provide access\
    \ to MPTCP-specific properties such as whether\n   MPTCP is enabled and the number\
    \ and properties of the individual\n   paths in use.\n"
- title: 7.  Interactions with Middleboxes
  contents:
  - "7.  Interactions with Middleboxes\n   As discussed in Section 2.2, it is a goal\
    \ of MPTCP to be deployable\n   today and thus compatible with the majority of\
    \ middleboxes.  This\n   section summarizes the issues that may arise with NATs,\
    \ firewalls,\n   proxies, intrusion detection systems, and other middleboxes that,\
    \ if\n   not considered in the protocol design, may hinder its deployment.\n \
    \  This section is intended primarily as a description of options and\n   considerations\
    \ only.  Protocol-specific solutions to these issues\n   will be given in the\
    \ companion documents.\n   Multipath TCP will be deployed in a network that no\
    \ longer provides\n   just basic datagram delivery.  A myriad of middleboxes are\
    \ deployed\n   to optimize various perceived problems with the Internet protocols:\n\
    \   NATs primarily address IP address space shortage [15], Performance\n   Enhancing\
    \ Proxies (PEPs) optimize TCP for different link\n   characteristics [17], firewalls\
    \ [16] and intrusion detection systems\n   try to block malicious content from\
    \ reaching a host, and traffic\n   normalizers [23] ensure a consistent view of\
    \ the traffic stream to\n   Intrusion Detection Systems (IDS) and hosts.\n   All\
    \ these middleboxes optimize current applications at the expense of\n   future\
    \ applications.  In effect, future applications will often need\n   to behave\
    \ in a similar fashion to existing ones, in order to increase\n   the chances\
    \ of successful deployment.  Further, the precise behavior\n   of all these middleboxes\
    \ is not clearly specified, and implementation\n   errors make matters worse,\
    \ raising the bar for the deployment of new\n   technologies.\n   The following\
    \ list of middlebox classes documents behavior that could\n   impact the use of\
    \ MPTCP.  This list is used in [5] to describe the\n   features of the MPTCP protocol\
    \ that are used to mitigate the impact\n   of these middlebox behaviors.\n   o\
    \  NATs: Network Address Translators decouple the host's local IP\n      address\
    \ (and, in the case of NAPTs, port) with that which is seen\n      in the wider\
    \ Internet when the packets are transmitted through a\n      NAT.  This adds complexity,\
    \ and reduces the chances of success,\n      when signaling IP addresses.\n  \
    \ o  PEPs: Performance Enhancing Proxies, which aim to improve the\n      performance\
    \ of protocols over low-performance (e.g., high-latency\n      or high-error-rate)\
    \ links.  As such, they may \"split\" a TCP\n      connection and behavior such\
    \ as proactive ACKing may occur, and\n      therefore it is no longer guaranteed\
    \ that one host is\n      communicating directly with another.  PEPs, firewalls,\
    \ or other\n      middleboxes may also change the declared receive window size.\n\
    \   o  Traffic Normalizers: These aim to eliminate ambiguities and\n      potential\
    \ attacks at the network level, and amongst other things,\n      are unlikely\
    \ to permit holes in TCP-level sequence space (which\n      has an impact on MPTCP's\
    \ retransmission and subflow sequence\n      numbering design choices).\n   o\
    \  Firewalls: on top of preventing incoming connections, firewalls\n      may\
    \ also attempt additional protection such as sequence number\n      randomization\
    \ (so a sender cannot reliably know what TCP sequence\n      number the receiver\
    \ will see).\n   o  IDSs: Intrusion Detection Systems may look for traffic patterns\
    \ to\n      protect a network and may have false positives with MPTCP and drop\n\
    \      the connections during normal operation.  Future MPTCP-aware\n      middleboxes\
    \ will require the ability to correlate the various\n      paths in use.\n   o\
    \  Content-Aware Firewalls: Some middleboxes may actively change data\n      in\
    \ packets, such as rewriting URIs in HTTP traffic.\n   In addition, all classes\
    \ of middleboxes may affect TCP traffic in the\n   following ways:\n   o  TCP\
    \ Options: some middleboxes may drop packets with unknown TCP\n      options or\
    \ strip those options from the packets.\n   o  Segmentation and Coalescing: middleboxes\
    \ (or even something as\n      close to the end host as TCP Segmentation Offloading\
    \ (TSO) on a\n      Network Interface Card (NIC)) may change the packet boundaries\n\
    \      from those that the sender intended.  It may do this by splitting\n   \
    \   packets or coalescing them together.  This leads to two major\n      impacts:\
    \ where a packet boundary will be cannot be guaranteed and\n      what a middlebox\
    \ will do with TCP options in these cases (they may\n      be repeated, dropped,\
    \ or sent only once) cannot be said for sure.\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   The authors would like to acknowledge the contributions\
    \ of Andrew\n   McDonald and Bryan Ford to this document.\n   The authors would\
    \ also like to thank the following people for\n   detailed reviews: Olivier Bonaventure,\
    \ Gorry Fairhurst, Iljitsch van\n   Beijnum, Philip Eardley, Michael Scharf, Lars\
    \ Eggert, Cullen\n   Jennings, Joel Halpern, Juergen Quittek, Alexey Melnikov,\
    \ David\n   Harrington, Jari Arkko, and Stewart Bryant.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Alan Ford, Costin Raiciu, Mark Handley, and Sebastien\
    \ Barre are\n   supported by Trilogy (http://www.trilogy-project.org), a research\n\
    \   project (ICT-216372) partially funded by the European Community under\n  \
    \ its Seventh Framework Program.  The views expressed here are those of\n   the\
    \ author(s) only.  The European Commission is not liable for any\n   use that\
    \ may be made of the information in this document.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This informational document provides an architectural\
    \ overview for\n   Multipath TCP and so does not, in itself, raise any security\
    \ issues.\n   A separate threat analysis [12] lists threats that can exist with\
    \ a\n   Multipath TCP.  However, a protocol based on the architecture in this\n\
    \   document will have a number of security requirements.  The high-level\n  \
    \ goals for such a protocol are identified in Section 2.3, whilst\n   Section\
    \ 5.8 provides more detailed discussion of security\n   requirements and design\
    \ decisions which are applied in the MPTCP\n   protocol design [5].\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]   Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC 793,\n         September 1981.\n   [2]   Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [3]   Wischik, D., Handley, M., and M. Bagnulo\
    \ Braun, \"The Resource\n         Pooling Principle\", ACM SIGCOMM CCR vol. 38\
    \ num. 5, pp. 47-52,\n         October 2008,\n         <http://ccr.sigcomm.org/online/files/p47-handleyA4.pdf>.\n\
    \   [4]   Hopps, C., \"Analysis of an Equal-Cost Multi-Path Algorithm\",\n   \
    \      RFC 2992, November 2000.\n   [5]   Ford, A., Raiciu, C., Handley, M., and\
    \ O. Bonaventure, \"TCP\n         Extensions for Multipath Operation with Multiple\
    \ Addresses\",\n         Work in Progress, March 2011.\n   [6]   Stewart, R.,\
    \ \"Stream Control Transmission Protocol\", RFC 4960,\n         September 2007.\n\
    \   [7]   Raiciu, C., Handley, M., and D. Wischik, \"Coupled Congestion\n    \
    \     Control for Multipath Transport Protocols\", Work in Progress,\n       \
    \  March 2011.\n   [8]   Scharf, M. and A. Ford, \"MPTCP Application Interface\n\
    \         Considerations\", Work in Progress, March 2011.\n   [9]   Carpenter,\
    \ B. and S. Brim, \"Middleboxes: Taxonomy and Issues\",\n         RFC 3234, February\
    \ 2002.\n   [10]  Carpenter, B., \"Internet Transparency\", RFC 2775,\n      \
    \   February 2000.\n   [11]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow,\
    \ \"TCP\n         Selective Acknowledgment Options\", RFC 2018, October 1996.\n\
    \   [12]  Bagnulo, M., \"Threat Analysis for TCP Extensions for Multipath\n  \
    \       Operation with Multiple Addresses\", RFC 6181, March 2011.\n   [13]  Becke,\
    \ M., Dreibholz, T., Iyengar, J., Natarajan, P., and M.\n         Tuexen, \"Load\
    \ Sharing for the Stream Control Transmission\n         Protocol (SCTP)\", Work\
    \ in Progress, December 2010.\n   [14]  Ford, B. and J. Iyengar, \"Breaking Up\
    \ the Transport Logjam\",\n          ACM HotNets, October 2008.\n   [15]  Srisuresh,\
    \ P. and K. Egevang, \"Traditional IP Network Address\n         Translator (Traditional\
    \ NAT)\", RFC 3022, January 2001.\n   [16]  Freed, N., \"Behavior of and Requirements\
    \ for Internet\n         Firewalls\", RFC 2979, October 2000.\n   [17]  Border,\
    \ J., Kojo, M., Griner, J., Montenegro, G., and Z.\n         Shelby, \"Performance\
    \ Enhancing Proxies Intended to Mitigate\n         Link-Related Degradations\"\
    , RFC 3135, June 2001.\n   [18]  Ramaiah, A., Stewart, R., and M. Dalal, \"Improving\
    \ TCP's\n         Robustness to Blind In-Window Attacks\", RFC 5961, August 2010.\n\
    \   [19]  Eddy, W., \"TCP SYN Flooding Attacks and Common Mitigations\",\n   \
    \      RFC 4987, August 2007.\n   [20]  Gont, F. and A. Yourtchenko, \"On the\
    \ Implementation of the TCP\n         Urgent Mechanism\", RFC 6093, January 2011.\n\
    \   [21]  Raghunarayan, R., \"Management Information Base for the\n         Transmission\
    \ Control Protocol (TCP)\", RFC 4022, March 2005.\n   [22]  Mathis, M., Heffner,\
    \ J., and R. Raghunarayan, \"TCP Extended\n         Statistics MIB\", RFC 4898,\
    \ May 2007.\n   [23]  Handley, M., Paxson, V., and C. Kreibich, \"Network Intrusion\n\
    \         Detection: Evasion, Traffic Normalization, and End-to-End\n        \
    \ Protocol Semantics\", Usenix Security 2001, 2001, <http://\n         www.usenix.org/events/sec01/full_papers/handley/handley.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alan Ford\n   Roke Manor Research\n   Old Salisbury Lane\n\
    \   Romsey, Hampshire  SO51 0ZN\n   UK\n   Phone: +44 1794 833 465\n   EMail:\
    \ alan.ford@roke.co.uk\n   Costin Raiciu\n   University College London\n   Gower\
    \ Street\n   London  WC1E 6BT\n   UK\n   EMail: c.raiciu@cs.ucl.ac.uk\n   Mark\
    \ Handley\n   University College London\n   Gower Street\n   London  WC1E 6BT\n\
    \   UK\n   EMail: m.handley@cs.ucl.ac.uk\n   Sebastien Barre\n   Universite catholique\
    \ de Louvain\n   Pl. Ste Barbe, 2\n   Louvain-la-Neuve  1348\n   Belgium\n   Phone:\
    \ +32 10 47 91 03\n   EMail: sebastien.barre@uclouvain.be\n   Janardhan Iyengar\n\
    \   Franklin and Marshall College\n   Mathematics and Computer Science\n   PO\
    \ Box 3003\n   Lancaster, PA  17604-3003\n   USA\n   Phone: 717-358-4774\n   EMail:\
    \ jiyengar@fandm.edu\n"
