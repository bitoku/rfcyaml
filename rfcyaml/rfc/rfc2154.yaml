- title: __initial_text__
  contents:
  - '                      OSPF with Digital Signatures

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the extensions to OSPF required to add digital\n\
    \   signature authentication to Link State data, and to provide a\n   certification\
    \ mechanism for router data.  Added LSA processing and\n   key management is detailed.\
    \  A method for migration from, or co-\n   existence with, standard OSPF V2 is\
    \ described.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Acknowledgements .............................................\
    \   2\n   2 Introduction .................................................   2\n\
    \   3 LSA Processing ...............................................   4\n   3.1\
    \ Signed LSA .................................................   4\n   3.2 Router\
    \ Public Key LSA (PKLSA) ..............................   5\n   3.3 MaxAge Processing\
    \ ..........................................   7\n   4 Key Management ...............................................\
    \   8\n   4.1 Identifying Keys ...........................................   8\n\
    \   4.1.1 Identifying Router Keys and PKLSAs .......................   8\n   4.1.2\
    \ Identifying TE Public Keys ...............................   8\n   4.1.3 Key\
    \ to use for Signing ...................................   9\n   4.1.4 Key to\
    \ use for Verification ..............................   9\n   4.2 Trusted Entity\
    \ (TE) Requirements ...........................  10\n   4.3 Scope for Keys and\
    \ Signature Algorithms.....................  10\n   4.4 Router Key Replacement\
    \ .....................................  11\n   4.5 Trusted Entity Key Replacement\
    \ .............................  12\n   4.6 Flexible Cryptographic Environments\
    \ ........................  14\n   4.6.1 Multiple Signature Algorithms ............................\
    \  14\n   4.6.2 Multiple Trusted Entities ................................  15\n\
    \   4.6.3 Multiple Keys for One Router .............................  16\n   5\
    \ Compatibility with Standard OSPF V2 ..........................  16\n   6 Special\
    \ Considerations/Restrictions for the ABR-ASBR .........  17\n   7 LSA formats\
    \ ..................................................  18\n   7.1 Router Public\
    \ Key LSA (PKLSA) ..............................  18\n   7.2 Router Public Key\
    \ Certificate ..............................  20\n   7.3 Signed LSA .................................................\
    \  23\n   8 Configuration Information ....................................  26\n\
    \   9 Remaining Vulnerabilities ....................................  26\n   9.1\
    \ Area Border Routers ........................................  27\n   9.2 Internal\
    \ Routers ...........................................  27\n   9.3 Autonomous System\
    \ Border Routers ...........................  28\n   10 Security Considerations\
    \ .....................................  28\n   11 References ..................................................\
    \  29\n   12 Authors' Addresses ..........................................  29\n"
- title: 1.  Acknowledgements
  contents:
  - "1.  Acknowledgements\n   The idea of signing routing information is not new.\
    \  Foremost, of\n   course, there is the design that Radia Perlman reported in\
    \ her thesis\n   [4] and in her book [5] for signing link state information and\
    \ for\n   distribution of the public keys used in the signing.  IDPR [7] also\n\
    \   recommends the use of public key based signatures of link state\n   information.\
    \  Kumar and Crowcroft [2] discuss the use of secret and\n   public key authentication\
    \ of inter-domain routing protocols.  Finn [1]\n   discusses the use of secret\
    \ and public key authentication of several\n   different routing protocols.  The\
    \ design reported here is closest to\n   that reported in [4] and [7].  It should\
    \ be noted that [4] also\n   presents techniques for protecting the forwarding\
    \ of data packets, a\n   topic that is not considered here, as we consider it\
    \ not within the\n   scope of the OSPF working group.\n   The authors would also\
    \ like to acknowledge many fruitful discussions\n   with many members of the OSPF\
    \ working group, particularly Fred Baker\n   of Cisco Systems, Dennis Ferguson\
    \ of MCI Telecommunications Corp.,\n   John Moy of Cascade Communications Corp.,\
    \ Curtis Villamizar of ANS,\n   Inc., and Rob Coltun of FORE Systems.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   It is well recognized that there is a need for greater security\
    \ in\n   routing protocols. OSPF currently provides \"simple password\"\n   authentication\
    \ where the password travels \"in the clear\", and there\n   is work in progress[11]\
    \ to provide keyed MD5 authentication for OSPF\n   protocol packets between neighbors.\
    \  The simple password\n   authentication is vulnerable because any listener can\
    \ discover and\n   use the password.  Keyed MD5 authentication is very useful\
    \ for\n   protection of protocol packets passed between neighbors, but does not\n\
    \   address authentication of routing data that is flooded from source to\n  \
    \ eventual destination, through routers which may themselves be faulty\n   or\
    \ subverted.\n   The basic idea of this proposal is to add digital signatures\
    \ to OSPF\n   LSA data, distribute certified router information and keys, and\
    \ use a\n   neighbor-to-neighbor authentication algorithm (like keyed MD5) to\n\
    \   protect local protocol exchanges.  The content of a Hello packet,\n   Link\
    \ State Request, Link State Update, or Database Description will\n   be protected\
    \ by the neighbor-to-neighbor algorithm.  The LSAs that\n   are being flooded\
    \ inside the Link State Update packets are\n   individually protected by a digital\
    \ signature.  Each LSA will be\n   signed by the originator of that information\
    \ and the signature will\n   stay with the data in its travels via OSPF flooding.\
    \  This will\n   provide end-to-end integrity and authentication for LSA data.\
    \ The\n   digital signature attached to an LSA by the source router provides\n\
    \   assurance that the data comes from the advertising router.  It will\n   also\
    \ ensure that the data has not been modified by some other router\n   in the course\
    \ of flooding.  In the case where incorrect routing data\n   is originated by\
    \ a faulty router, the signature will identify the\n   source of the problem.\n\
    \   Digital signatures are implemented using public key cryptography.\n   There\
    \ are some good books on the subject of cryptography [6], but the\n   high level\
    \ view of how this design uses public key cryptography is as\n   follows: Each\
    \ router has a pair of keys, a public key and a private\n   key.  The private\
    \ key is used to generate a unique signature of a\n   block of data (in this case,\
    \ the LSA). Each router signs its LSAs by\n   first running a one-way hash algorithm\
    \ (like MD5 or SHA) on the data,\n   and then using its private key to sign the\
    \ digest.  The signature of\n   an LSA is appended to the LSA. The public key\
    \ can be used by any\n   other router to verify the signature.  The private key\
    \ must be kept\n   secret by one router and the public key must be distributed\
    \ to all\n   the routers that will receive link state information from the signer.\n\
    \   The distribution is accomplished by creating a new LSA, the Public\n   Key\
    \ LSA (PKLSA), and distributing it via the standard OSPF flooding\n   procedure.\
    \  Flooding will ensure that a router public key is sent\n   everywhere that the\
    \ router's signed LSAs are sent.\n   Any router can send out a public key and\
    \ claim to be a given router,\n   so the public key itself provides no assurance\
    \ of the actual identity\n   of the sender. This assurance must be provided by\
    \ a Trusted Entity.\n   The Trusted Entity (TE) is a system that generates certificates\
    \ for\n   routers.  A certificate is a packet of information about a router\n\
    \   that identifies the router and supplies a public key. Certified\n   router\
    \ information will include the router id, its role, the address\n   ranges that\
    \ the router may advertise, a timestamp and the router's\n   public key. The certificate\
    \ is signed by the TE.  Each router must be\n   configured with a certificate\
    \ and a TE public key to use in verifying\n   other routers' certificates.  A\
    \ router PKLSA contains the certificate\n   for that router.  A router receiving\
    \ a PKLSA verifies the certificate\n   using the TE public key, and then verifies\
    \ the whole LSA using the\n   router public key contained in the certificate.\
    \ Successful\n   verification provides assurance that the PKLSA is from the correct\n\
    \   router, and that it has not been altered by any other router in the\n   flood\
    \ path.\n   OSPF with Digital Signatures is backward compatible with standard\n\
    \   OSPF V2 in a limited way.  Within an AS there may be \"signed\" areas\n  \
    \ and \"unsigned\" areas.  The behavior of a mixed AS is discussed in\n   section\
    \ 5.\n   Digital signatures for OSPF LSAs can be implemented with the\n   following\
    \ major functions:\n   (1) Support for a digital signature algorithm\n   (2) Support\
    \ for a signed version of all routing information LSAs\n   (3) Support for a new\
    \ LSA: Router Public Key LSA (PKLSA)\n   (4) A mechanism for key certification\
    \ and certificate distribution\n   (5) Extra configuration data (detail in section\
    \ 7):\n         Trusted Entity (TE) information and key(s)\n         Router certification\
    \ data and key\n         Area environment flag (signed/unsigned)\n         Timing\
    \ intervals\n   An implementation of this design exists, based on the OSPF in\
    \ Gated\n   version 3.5Beta3.  This implementation is available for\n   use/experimentation.\
    \  Please contact the authors for information.\n"
- title: 3.  LSA Processing
  contents:
  - '3.  LSA Processing

    '
- title: 3.1.  Signed LSA
  contents:
  - "3.1.  Signed LSA\n   A signed LSA contains the standard OSPF V2 header and data\
    \ plus key\n   identification information, a signature length and a signature.\
    \  The\n   top bit of the LS type field is set to indicate the presence of a\n\
    \   signature.  The signature covers the LSA header (starting with the\n   options\
    \ field), the LSA data, and the key identification information\n   and the signature\
    \ length that must be appended to the LSA data.\n   There are two exceptions to\
    \ this coverage: first, an LSA created with\n   age=MaxAge has a signature that\
    \ begins with the age field (see\n   section on maxage); second, the LSA header\
    \ checksum is set to zero\n   for the generation of the signature.  To assist\
    \ in parsing the\n   message, the key id information and the signature length\
    \ fields are\n   placed at the end of the LSA, following the signature.  However,\
    \ the\n   message must be signed and verified with these fields immediately\n\
    \   appended to the LSA data.  This can be accomplished either by doing\n   the\
    \ sign and verify \"in parts\" (allowed by RSAREF), or by storing the\n   LSA\
    \ data with appended fields and the LSA signature separately in the\n   link state\
    \ database (LSDB).\n   When a signed LSA is received, the signature can be verified\
    \ using\n   the public key of the advertising router contained in the advertising\n\
    \   router's PKLSA.  If the signature verifies, then the signed LSA is\n   stored\
    \ for use in routing calculations. If the signature verification\n   fails, the\
    \ LSA must be discarded. If the identified key is not\n   available (in a PKLSA\
    \ from the advertising router), then the signed\n   LSA must be stored for a period\
    \ of time defined by the configurable\n   MAX_TRANSIT_DELAY interval.  If the\
    \ key arrives within this interval,\n   the LSA will be processed then.  If the\
    \ key does not arrive within\n   this interval, the LSA will be discarded.  This\
    \ delay period prevents\n   loss of routing information due to LSAs arriving prior\
    \ to their\n   associated PKLSAs (which should not normally be the case, but could\n\
    \   happen).\n   If the LSA is a Router Links LSA, the router's advertised links\
    \ must\n   be checked against the allowed address ranges stored in the PKLSA for\n\
    \   the advertising router.  All network links (link types 2 and 3) must\n   have\
    \ an IP address that fits in one of the ranges defined by the list\n   of address\
    \ ranges in the PKLSA (format 7.2).  If there is a link that\n   does not fit\
    \ into one of these ranges, then an error must be logged\n   and the LSA must\
    \ be discarded.  Careful subnetting and corresponding\n   ranges can provide very\
    \ tight control on what is advertised.  A much\n   less restrictive, but still\
    \ useful, level of control can be obtained\n   by defining allowed address ranges\
    \ for an area, so that all routers\n   in an area could be configured with the\
    \ same set.  To trivially\n   satisfy this checking, one range with a zero address\
    \ and mask can be\n   defined that contains all IP addresses.\n   Link State Acknowledgements\
    \ must be sent for all LSAs that are\n   discarded due to verification failures,\
    \ that are stored waiting for\n   keys, and that are discarded because they are\
    \ advertising a link that\n   they are not allowed to advertise.\n"
- title: 3.2.  Router Public Key LSA (PKLSA)
  contents:
  - "3.2.  Router Public Key LSA (PKLSA)\n   A Router Public Key LSA (PKLSA) is sent\
    \ in the same manner as all\n   other LSAs.  This LSA contains the router's public\
    \ key and\n   identifying information that has been certified by a Trusted Entity.\n\
    \   The router public key is used to verify signatures produced by this\n   router.\
    \  There is only one PKLSA stored per router in the LSDB for an\n   area, so the\
    \ Router Id and LS type can be used to retrieve a given\n   PKLSA.  The Router\
    \ Id is stored in the PKLSA Link State Id field to\n   use in retrieving the PKLSA.\
    \ Identification information in the\n   certified data (TE Id, Rtr Key Id) can\
    \ be used to uniquely identify\n   the current router key (section 7.2).\n   To\
    \ assist in parsing the message, the router signature length and the\n   certification\
    \ length fields are at the end of the LSA, following the\n   signature.  The message\
    \ must be signed and verified with these fields\n   immediately appended to the\
    \ LSA data.  The router signature of the\n   PKLSA is verified in the same manner\
    \ as other signed LSAs.  In\n   addition, the certification must be verified using\
    \ the referenced TE\n   public key.  If either verification fails, for any reason,\
    \ the PKLSA\n   is discarded.\n   A successfully verified PKLSA is stored for\
    \ use in verifying signed\n   LSAs from the advertising router. For every router\
    \ that this router\n   is in contact with, there may be one PKLSA stored at any\
    \ given time.\n   Each PKLSA is uniquely identified by the values (TE Id, Rtr\
    \ Key Id)\n   in the certified data (format in 7.2).  When a PKLSA arrives for\
    \ a\n   given router, and there is already a PKLSA stored for that router,\n \
    \  the PKLSA with the most recent \"Create Time\" is the one kept.\n   Whenever\
    \ groups of LSAs are sent by a router (as when synchronizing\n   databases or\
    \ sending updates), the PKLSAs must be sent/requested\n   before other LSAs to\
    \ minimize the time spent processing LSAs that\n   arrive prior to their associated\
    \ keys.  The PKLSA is sent at\n   intervals like all other LSAs, and it is sent\
    \ immediately if a router\n   obtains a new key to distribute. A PKLSA is sent\
    \ via OSPF flooding\n   within an OSPF area.  PKLSAs are not flooded outside an\
    \ area with the\n   exception of an Autonomous System Border Router's PKLSAs which\
    \ must\n   be flooded wherever AS external LSAs are flooded.  The decision to\n\
    \   flood or not flood can be implemented by checking the router role\n   (Rtr,\
    \ ABR, ASBR, ABR-ASBR) stored in the certified part of the PKLSA.\n   A router\
    \ may flush its keys from routing tables by flooding a PKLSA\n   for that key\
    \ with age=MaxAge.  This is called premature aging of the\n   PKLSA.  A key can\
    \ also be removed from routing tables (superseded) by\n   a PKLSA from the same\
    \ router, containing a valid certificate for a\n   new key with a more recent\
    \ Create Time.  If a key is superseded by a\n   more recent key it is not necessary\
    \ to flush the old key with a\n   \"MaxAge\" PKLSA.\n   When a new key is received,\
    \ the LSAs stored in the LSDB that are\n   signed with the old key must be replaced\
    \ within MAX_TRANSIT_DELAY.\n   if the sending router is working properly.  This\
    \ is because a router\n   distributing a new key sends all of its self-originated\
    \ LSAs signed\n   with the new key immediately after sending the new PKLSA.  (See\n\
    \   section 4.4 on Router Key Replacement).  To ensure that data signed\n   with\
    \ an old (possibly subverted) key does not persist in the LSDB in\n   error, all\
    \ LSAs signed with a flushed or superseded key are aged to\n   within MAX_TRANSIT_DELAY\
    \ of MaxAge.  This should allow time for the\n   new LSAs signed with the new\
    \ key to arrive.  If new LSAs do not\n   arrive, or if the key has been flushed\
    \ and not replaced, then the old\n   LSA data will disappear from the LSDB in\
    \ a timely fashion.\n   Link State Acknowledgements must be sent for PKLSAs that\
    \ are\n   discarded due to verification failures or because the PKLSA was less\n\
    \   recent than the one already stored.\n"
- title: 3.3.  MaxAge Processing
  contents:
  - "3.3.  MaxAge Processing\n   The age field in the OSPF LSA header is used to keep\
    \ track of how\n   long a given LSA has been in the system.  When the age field\
    \ reaches\n   MaxAge, a router stops using the LSA for routing, and it floods\
    \ the\n   MaxAge LSA to make sure that all routers stop using this LSA.  In the\n\
    \   normal course of the OSPF protocol, an LSA is always replaced by an\n   updated\
    \ version before the age reaches MaxAge, unless the advertising\n   router fails,\
    \ or changes in the AS have made the routing information\n   in the LSA inaccurate.\
    \  An LSA with age=MaxAge is either:\n   (1) being intentionally flushed from\
    \ the AS by the advertising router\n       because the information in it is no\
    \ longer accurate, or\n   (2) an orphan LSA that has aged to MaxAge because its\
    \ originating\n       router has not refreshed it at the normal refresh intervals.\n\
    \   The age field cannot generally be included in the signature, because\n   it\
    \ must be updated by routers other than the originating router.  For\n   the same\
    \ reason, the age field is not included in the checksum\n   computation.  The\
    \ age field must be protected, because if a faulty\n   router started to age out\
    \ other router's LSAs, it would effectively\n   deny service to those other routers.\n\
    \   To protect the age field, the signature must include the age field if\n  \
    \ and only if the originating router creates an LSA with age=MaxAge.\n   Verification\
    \ of the signature on a signed LSA must include the age\n   field if and only\
    \ if the age field value is MaxAge.  In this manner,\n   the originating router\
    \ can flush an LSA, but other routers cannot.\n   An LSA that ages to MaxAge in\
    \ the LSDB of any router is still\n   discarded by that router, but it is not\
    \ synchronously flushed from\n   the AS.\n   An LSA will be removed from a router's\
    \ Link State Database in one of\n   two ways: 1) the router receives a version\
    \ of the LSA with the age\n   field set to MaxAge and a valid signature that covers\
    \ the age field,\n   or 2) the LSA incrementally reaches MaxAge while it is stored\
    \ by the\n   router.\n   If a standard OSPF V2 router goes down, an LSA from that\
    \ router will\n   age in the LSDBs of each remaining router until it reaches MaxAge\n\
    \   somewhere.  As soon as it reaches MaxAge in some router's LSDB it is\n   flooded,\
    \ and this causes it to be flushed from the AS in a\n   synchronized fashion.\
    \  If router running OSPF with digital signatures\n   goes down, its signed LSAs\
    \ will be aged out by each remaining router\n   individually.  This will slow\
    \ database convergence but the databases\n   will still converge, and a fairly\
    \ obvious security hole will be\n   closed.\n"
- title: 4.  Key Management
  contents:
  - '4.  Key Management

    '
- title: 4.1.  Identifying Keys
  contents:
  - '4.1.  Identifying Keys

    '
- title: 4.1.1.  Identifying Router Keys and PKLSAs
  contents:
  - "4.1.1.  Identifying Router Keys and PKLSAs\n   A router key is identified by\
    \ the Router Id, and the identifiers\n   associated with the particular key in\
    \ its certificate: TE Id and\n   Router Key Id.  All three of these values are\
    \ stored in a PKLSA\n   (format in 7.1).  The Router Id is the standard LSA header\n\
    \   Advertising Router.  The (TE Id, Rtr Key Id) are stored in the PKLSA\n   certified\
    \ data.  The TE Id is a number assigned to a Trusted Entity\n   that must uniquely\
    \ identify one TE in the AS.  The TE Id in a\n   certificate identifies the TE\
    \ that produced the certificate.  The Rtr\n   Key Id is associated with a key\
    \ by the Trusted Entity that produced\n   the certificate.  The Trusted Entity\
    \ must produce a stream of Rtr Key\n   Ids for one router such that the router\
    \ will not re-use a key id\n   until all references to the last key having that\
    \ id are gone from the\n   AS.  If a key is re-played, or re-used too soon, the\
    \ Create Time in\n   the key certification will determine which key is current.\
    \  Rtr Key\n   Ids do not have to be sequential.\n"
- title: 4.1.2.  Identifying TE Public Keys
  contents:
  - "4.1.2.  Identifying TE Public Keys\n   Each TE public key has an associated TE\
    \ Id, TE Key Id.  The\n   combination of (TE Id, TE Key Id) uniquely identifies\
    \ one TE public\n   key in the AS.  The TE Id is a number assigned to a Trusted\
    \ Entity\n   that uniquely identifies one TE in the AS.  The TE Key Id must\n\
    \   identify one particular key for a TE at any given time.  The TE Key\n   Id\
    \ distinguishes between a new key and an old key for the same TE.\n   The TE Key\
    \ Id also differentiates between keys for different\n   signature algorithms if\
    \ one TE serves multiple algorithms.  Each TE\n   can have at most one current\
    \ key per signature algorithm.\n   There can be multiple TE keys stored on each\
    \ router.  A TE public key\n   is used to verify the certificates issued by other\
    \ routers, and in an\n   AS with several TEs, any given router may need several\
    \ TE public\n   keys.  TE Key Ids do not have to be used sequentially, and they\
    \ can\n   be re-used.  There is no timestamp for TE keys because these are not\n\
    \   certified.\n   It is the responsibility of Configuration Management to ensure\
    \ that\n   TE Key Ids are not re-used before all references to a previously used\n\
    \   key with the same (TE Id, TE Key Id) are gone from the AS, that a\n   given\
    \ (TE Id, TE Key Id) on one router identifies the same key as it\n   does on any\
    \ other router, and that the rules for TE Key Replacement\n   (section 4.5) are\
    \ followed.\n"
- title: 4.1.3.  Key to use for Signing
  contents:
  - "4.1.3.  Key to use for Signing\n   A router is configured with a pair of keys.\
    \  The private key is\n   protected from disclosure and is used for signing. \
    \ The public key is\n   flooded in a PKLSA and is used for verifying signatures.\
    \  A router\n   may have one key per area to use for signing at any given time.\
    \  A\n   router may use the same key for several or all areas.\n"
- title: 4.1.4.  Key to use for Verification
  contents:
  - "4.1.4.  Key to use for Verification\n   There are three uses of signature verification\
    \ in this design:\n   (1) The signature in a signed LSA (format in 7.3) can be\
    \ verified\n       with the public key distributed by the advertising router in\
    \ a\n       Public Key LSA.  A signed LSA contains the (TE Id, Rtr Key Id) of\n\
    \       the key used to sign it.  The signed LSA's Advertising Router Id\n   \
    \    is used to retrieve the router's PKLSA , and the (TE Id, Rtr Key\n      \
    \ Id) indicates if the router key in the PKLSA is the same as the\n       one\
    \ used to generate the signature.\n   (2) The router's signature in a PKLSA (format\
    \ in 7.1) is verified\n       with the public key contained in that PKLSA.\n \
    \  (3) The PKLSA contains data certified with a signature generated\n       by\
    \ a TE.  The PKLSA certified data contains the (TE Id, TE Key\n       Id) for\
    \ the TE key that can be used to verify the certificate\n       (format in 7.2).\
    \  TE public keys must be configured on each\n       router.\n"
- title: 4.2.  Trusted Entity (TE) Requirements
  contents:
  - "4.2.  Trusted Entity (TE) Requirements\n   This design does not specify how the\
    \ Trusted Entity (TE) must be\n   implemented, where it must reside, or how it\
    \ must communicate with\n   routers.  There are several very different possible\
    \ approaches to the\n   implementation of a Trusted Entity (e.g., an offline system\
    \ with\n   distribution of keys by floppy or secure e-mail, an online automated\n\
    \   key distribution center, etc.) This design does mandate certain\n   requirements\
    \ for what a Trusted Entity must do.  A Trusted Entity\n   must generate a certificate\
    \ for each signing router that contains\n   individualized information about that\
    \ router (format in 7.2) and is\n   signed with the Trusted Entity private key.\
    \  The Trusted Entity must\n   have a unique TE Id for itself, it must create\
    \ a Rtr Key Id for each\n   router key that is unique for the given Router for\
    \ this TE at this\n   time, and it must timestamp certificates with a Create Time\
    \ that is\n   consistent for itself and for any other Trusted Entities operating\
    \ in\n   the AS.  Note: routers do not have to be time-synched, but TEs do.\n\
    \   Create Time is used by routers as a relative measure to determine\n   which\
    \ key is more recent.\n   The TE Public key, TE Id, TE Key Id and Signature Algorithm\
    \ must be\n   made available to each router processing certificates from this\
    \ TE.\n   A TE can theoretically create certificates for more than one\n   signature\
    \ algorithm.  The TE key and the router public key certified\n   do not have to\
    \ be of the same signature algorithm.\n   There can be more than one TE in an\
    \ AS but the TE Id must identify a\n   unique TE.\n"
- title: 4.3.  Scope for Keys and Signature Algorithms
  contents:
  - "4.3.  Scope for Keys and Signature Algorithms\n   The concept of \"scope\" relates\
    \ to Router Keys, TE Keys, and Signature\n   Algorithms.\n   (1) The scope of\
    \ a PKLSA and therefore a router key, is defined to\n       be the set of routers\
    \ that will receive and store that PKLSA in\n       the course of OSPF flooding.\
    \  A router produces a PKLSA for each\n       attached area.  In a router with\
    \ more than one area, the PKLSAs\n       for each area may match, or each may\
    \ contain a different key.\n       The scope of PKLSA for an internal router is\
    \ all the routers in\n       that area.  An ABR has multiple PKLSAs, each having\
    \ a scope of\n       one attached area.  The scope of an ASBR's PKLSA is the same\
    \ as\n       the scope of the ASBRs ASEs - all the routers in all the non-stub\n\
    \       areas in the AS.  An ASBR that is an ABR produces multiple PKLSAs\n  \
    \     that each have a scope of all the routers in all the non-stub\n       areas\
    \ in the AS.  (This last case results in some situations that\n       require\
    \ special management - section 6)\n   (2) The scope of a TE key is defined to\
    \ be the set of routers that are\n       configured with this key.  If a system\
    \ is configured properly,\n       then a TE public key will be configured on all\
    \ the routers that\n       will receive PKLSAs certified by that TE key.  The\
    \ minimum scope\n       for a TE key is an area.  If one router distributes a\
    \ key\n       certified with a given TE key, then all the routers in the area\n\
    \       must be able toverify the certificate.  A TE Key certifying an\n     \
    \  ASBRs key must have a scope of all non-stub areas in the AS.  If\n       the\
    \ TE key is not on some router that receives PKLSAs certified by\n       that\
    \ TE key, then those PKLSAs and all the LSAs that require them\n       will be\
    \ discarded. A TE key gets to all the routers in its scope\n       via out-of-band\
    \ configuration.\n   (3) The scope of a signature algorithm is defined to be the\
    \ set of\n       routers that are capable of verifying the given algorithm's\n\
    \       signatures.  The minimum scope for a signature algorithm is an\n     \
    \  area.  All routers in an area must be able to verify any signature\n      \
    \ algorithm used for signing by any router in the area.  The\n       algorithm\
    \ used to certify an ASBRs key must have a scope of all\n       non-stub areas\
    \ in the AS if the ASEs are to be accessible\n       everywhere (see section 6).\
    \  If a signature algorithm is not\n       available to verify an LSA, then the\
    \ LSA must be discarded.  If a\n       signature algorithm is not available to\
    \ verify the certification\n       in a PKLSA, then the PKLSA must be discarded.\n"
- title: 4.4.  Router Key Replacement
  contents:
  - "4.4.  Router Key Replacement\n   Router keys should be changed periodically,\
    \ and immediately if a key\n   is found to be compromised.  The regular period\
    \ for changing a key is\n   some locally determined function of the size of the\
    \ key and the level\n   of security needed.\n   Each router can have ONE valid\
    \ key per area at any given time.\n   Restricting the number of keys at a given\
    \ time to one key per router\n   per area allows key replacement to also serve\
    \ the purpose of key\n   revocation, without having a revocation list and without\
    \ routers\n   having synchronized time.  Each key for the router/area revokes\
    \ the\n   last key, provided the \"new\" key has a more recent Create Time than\n\
    \   the last key.  The Create Time in each certificate is used to prevent\n  \
    \ an old key from being reused, but this Create Time is used only for\n   comparing\
    \ the relative ages of certificates, and does not require the\n   router to run\
    \ a time synchronization protocol itself.  An ABR can use\n   the same key for\
    \ all it's attached areas, or it can have a unique key\n   for each area.  This\
    \ allows an AS to be managed by area with each\n   area potentially having a different\
    \ TE, signature algorithm, key\n   size, and/or key.\n   When a new key replaces\
    \ an old key, the router must quickly replace\n   LSAs signed with the old key\
    \ with LSAs signed with the new key. To\n   change a router key the following\
    \ steps must be followed:\n   (1) A valid certificate for the new key must be\
    \ obtained for the\n       router.\n   (2) The router builds and sends a new PKLSA\
    \ with the new certificate.\n   (3) The router signs each self-originated LSA\
    \ with the new key and\n       sends them.\n   When a PKLSA is received:\n   (1)\
    \ If the PKLSA's age = MaxAge, remove the PKLSA from the LSDB and\n       age\
    \ LSAs signed with this key to be MaxAge - MAX_TRANSIT_DELAY,\n       if they\
    \ were not already older than this.  This is a way to get\n       rid of a key\
    \ that should no longer be used.\n   (2) If the PKLSA is a refresh LSA for an\
    \ existing key, update the\n       LSDB.\n   (3) If the PKLSA contains a different\
    \ key than the one currently\n       stored for this router, compare the certificate\
    \ Create Time.  If\n       the PKLSA key is less recent, discard it.  If the PKLSA\
    \ key is\n       more recent, install it in the LSDB and remove the old key from\n\
    \       the LSDB.  If an old key was deleted from the LSDB, age LSAs\n       signed\
    \ with this key to be MaxAge - MAX_TRANSIT_DELAY, if they\n       were not already\
    \ older than this.\n"
- title: 4.5.  Trusted Entity Key Replacement
  contents:
  - "4.5.  Trusted Entity Key Replacement\n   It is necessary to change a TE public\
    \ key periodically.  It is\n   recommended that the TE public key be relatively\
    \ large, so that it\n   does not frequently require replacement.  A router may\
    \ store multiple\n   TE public keys.  Each key is uniquely identified by TE Id\
    \ and TE Key\n   Id.  TE keys are used to verify certificates received from other\n\
    \   routers in their PKLSAs.  When a router sends a new certificate\n   signed\
    \ with a new TE Key, all the routers that receive the PKLSA\n   containing the\
    \ certificate must have that new TE Key in order to\n   verify, store, and use\
    \ that PKLSA.  Management of TE public keys is\n   done outside the OSPF protocol,\
    \ and a method is suggested, but not\n   mandated by this design.  Initially all\
    \ routers must be configured\n   with the TE Keys they will need to verify the\
    \ certificates they will\n   receive.  To prevent use of a (possibly compromised)\
    \ TE Key, that key\n   must be replaced by a new (possibly null) TE Key having\
    \ the same TE\n   Id and signature algorithm.  A compromised or faulty router\
    \ can\n   continue using certificates signed with the old TE key, but none of\n\
    \   the properly configured routers will be able to verify them.\n   Changing\
    \ a TE public key presents a design challenge.  When a TE\n   Public Key is changed,\
    \ all the certificates depending on that key\n   must also change.  The router\
    \ keys in the certificates may or may not\n   be changed at the same time.  When\
    \ the TE key and certificates\n   change, all PKLSAs depending on these must be\
    \ reissued. In order to\n   verify these new certificates, all routers receiving\
    \ the new PKLSAs\n   must have the new TE Public Key.  So, the TE key replacement\
    \ must be\n   a synchronized event.  Routers are not required to have synchronized\n\
    \   clocks.  The TE public key may well be distributed to the routers via\n  \
    \ an out-of-band mechanism (like a smart-card reader or other sneaker-\n   net\
    \ method).  It is not reasonable to require that all the routers\n   obtain the\
    \ TE public key at the same time.  There are probably\n   several methods for\
    \ meeting these requirements.  The method tested in\n   our implementation is\
    \ as follows:\n   (1) Define a period of time needed to get the new TE key on\
    \ all\n       routers.  This could be minutes, hours, even days depending on\n\
    \       how the distribution is accomplished.  This time period is a\n       configuration\
    \ value for each router (TE_KEY_DIST_INT) and must be\n       the same for all\
    \ routers sharing a TE.\n   (2) Install a new TE key and associated certificates\
    \ (if there are\n       any) on each router.  Signal the router code when the\
    \ new TE key\n       is available to be accessed.\n   (3) The router sets a timer\
    \ for the TE_KEY_DIST_INT.  The router\n       sets a flag indicating the presence\
    \ of a new TE key.\n   (4) For each router, if the timer goes off:\n         Access\
    \ the new TE key.\n         If there are new certificates, build and send a new\
    \ PKLSA.\n         Age all PKLSAs in the LSDB certified by the old TE Key\n  \
    \               to MaxAge - MAX_TRANSIT_DELAY.\n   (5) For each router, if a PKLSA\
    \ certified by a new TE key comes in\n       before the timer goes off:\n    \
    \     If the new TE key cannot be accessed, discard the PKLSA and\n          \
    \       log an ERROR.\n         Access the new TE key.\n         Process the received\
    \ PKLSA.\n         If there are new certificates, build and send a new PKLSA.\n\
    \         Age all PKLSAs in the LSDB certified by the old TE key\n           \
    \      to MaxAge - MAX_TRANSIT_DELAY.\n   The effect of this method is that it\
    \ takes a predetermined interval\n   of time to change the TE public key.  That\
    \ interval is the amount of\n   time from the installation of the new TE key on\
    \ the FIRST router\n   installed, until the time that router reads the key in.\
    \  By the time\n   the first router reads the key in, all other routers should\
    \ have the\n   new key.  If some router does not get the new TE key in time, it\
    \ will\n   be unable to verify all the new PKLSAs that are received.  It will\n\
    \   log error messages and route data based on it's old database until\n   those\
    \ LSAs time out.  The simple way to fix a router in this error\n   condition is\
    \ to load the new TE key and restart the router.  If this\n   error is expected\
    \ to occur, and restarting the router is not\n   acceptable, then some special\
    \ purpose code will be needed to read in\n   the TE key after it has been otherwise\
    \ distributed, and do database\n   synchronization to catch up with the other\
    \ routers.\n   The group of routers that need the new TE key are all the routers\
    \ in\n   the scope of that Trusted Entity.\n"
- title: 4.6.  Flexible Cryptographic Environments
  contents:
  - "4.6.  Flexible Cryptographic Environments\n   It is likely that an AS will have\
    \ one cryptographic environment in\n   use throughout the AS, with one trusted\
    \ entity, one signature\n   algorithm in use, and one key in use per router. \
    \ To allow those\n   cases where this is not true, multiple signature algorithms,\
    \ multiple\n   trusted entities, and multiple keys per router are allowed.\n"
- title: 4.6.1.  Multiple Signature Algorithms
  contents:
  - "4.6.1.  Multiple Signature Algorithms\n   It is possible to support multiple\
    \ signature algorithms.  Each router\n   and TE key has a signature algorithm\
    \ associated with it.  All routers\n   sending a key with a given algorithm must\
    \ be capable of generating\n   signatures of that kind, and all routers receiving\
    \ keys with a given\n   algorithm must be able to verify the signatures.  If a\
    \ router\n   receives an LSA signed with a signature algorithm that it does not\n\
    \   support, the LSA must be discarded.  LSAs that cannot be verified by\n   a\
    \ router are not flooded by that router.  When using multiple\n   signature algorithms,\
    \ the scope of each algorithm must be determined\n   (see section 4.3), and routers\
    \ must be configured with support for\n   these algorithms accordingly.\n   If\
    \ an Area supports two signature algorithms and is to have full\n   connectivity,\
    \ some routers may sign with algorithm A and others with\n   algorithm B, but\
    \ all routers in the area must be able to verify\n   signatures for A and B. \
    \ In an AS that is divided into areas, it is\n   possible for each area to have\
    \ a different signature algorithm.  The\n   ABR connecting two areas would have\
    \ to support both algorithms, but\n   the internal routers in a given area would\
    \ only have to know one\n   algorithm.\n   ASBRs present a problem for this sort\
    \ of division.  ASEs flood\n   throughout the non-stub areas of an AS.  Any router\
    \ that cannot\n   verify an ASE will discard it without flooding.  So, to have\
    \ access\n   to an ASE, a router, and all the routers in the flooding path, must\n\
    \   support the algorithm used by the ASBR.  One way around these\n   difficulties\
    \ is to have a lowest-common-denominator algorithm that is\n   used for signing\
    \ by all ASBRs and is supported for verification\n   throughout the AS in addition\
    \ to other algorithms used.  Another\n   approach is to place ASBRs on the backbone,\
    \ and configure all areas\n   using a signature algorithm different from the ASBR\
    \ to have a default\n   route to the backbone.  A combined approach will allow\
    \ an ASBR to be\n   in a non-backbone area if it uses a signature algorithm supported\
    \ on\n   the backbone, and the areas using different signature algorithms are\n\
    \   configured with a default to the backbone.  There are special\n   limitations\
    \ in the case of a router that is an ABR and also an ASBR:\n   see section 6.\n\
    \   There is currently only one signature algorithm (RSA_MD5) defined for\n  \
    \ use by this design.  The RSA algorithm is defined in PKCS #1 [9] and\n   the\
    \ signature and key formats used by this design are defined in\n   RFC2065 [10].\n"
- title: 4.6.2.  Multiple Trusted Entities
  contents:
  - "4.6.2.  Multiple Trusted Entities\n   It is possible to have multiple Trusted\
    \ Entities in an AS.  Each TE\n   has a unique TE identifier.  Every router receiving\
    \ PKLSAs certified\n   by a given TE must have that TE's public key.  If a router\
    \ receives a\n   PKLSA certified by a TE for which it does not have a public key,\
    \ the\n   PKLSA must be discarded.  When using multiple TEs, the scope of each\n\
    \   TE must be determined (see section 4.3), and routers in this scope\n   must\
    \ be configured with the TE key.\n"
- title: 4.6.3.  Multiple Keys for One Router
  contents:
  - "4.6.3.  Multiple Keys for One Router\n   An ABR may have one key for each attached\
    \ area.  These keys may\n   differ in size, algorithm and/or certifying TE.  Generally,\
    \ each key\n   will have a \"scope\" of the attached area, and there will be no\n\
    \   conflict between keys.\n   There are special limitations in the case of a\
    \ router that is an ABR\n   and also an ASBR: see section 6.\n"
- title: 5.  Compatibility with Standard OSPF V2
  contents:
  - "5.  Compatibility with Standard OSPF V2\n   OSPF with Digital Signatures is compatible\
    \ with standard OSPF V2 in\n   an autonomous system.  Within an AS, there may\
    \ be \"signed\" areas and\n   \"unsigned\" areas.  There will never be both signed\
    \ and unsigned LSAs\n   used in any one area.  Each area will have an environment\
    \ flag\n   indicating whether it is \"signed\" or \"unsigned\".  The environment\n\
    \   flag is a per area configuration value for the router.  The signed\n   areas\
    \ must contain all routers running OSPF with Digital Signatures,\n   and the unsigned\
    \ areas contain routers running standard OSPF V2 code\n   (or OSPF with Digital\
    \ Signatures with all areas set to be unsigned).\n   An area border router connecting\
    \ a signed to an unsigned area must be\n   running OSPF with Digital Signatures\
    \ with one area set to be\n   unsigned.\n   In order to arrange this limited compatibility,\
    \ a router running OSPF\n   with Digital Signatures must be able to process both\
    \ signed and\n   unsigned LSAs.  The only router that will actually be processing\
    \ both\n   kinds of LSAs is an Area Border Router connecting a signed area to\
    \ an\n   unsigned area.  An ABR connecting a signed to an unsigned area will\n\
    \   generate signed summaries for one area and unsigned summaries for the\n  \
    \ other.  An ABR must not flood signed LSAs into unsigned areas.  An\n   ABR must\
    \ not flood unsigned LSAs into signed areas.  This will result\n   in AS External\
    \ LSAs being dropped if they reach an area that has a\n   different environment\
    \ from the one in which they were created.  There\n   are special limitations\
    \ in the case of a router that is an ABR and\n   also an ASBR: see section 6.\n\
    \   Complete connectivity is provided within the AS, because of the\n   summarization\
    \ provided by ABRs connecting signed and unsigned areas.\n   There are limitations\
    \ on connectivity to AS external routes in an AS\n   with a mixture of signed\
    \ and unsigned areas, depending on the\n   location of AS border routers.  An\
    \ ASBR in a signed area will\n   generate signed ASE LSAs.  These LSAs will be\
    \ flooded to every\n   contiguously connected signed area.  The connected signed\
    \ areas are\n   the \"scope\" of these ASEs.  A host located in an area that is\
    \ not in\n   this scope, will not have connectivity to these external routes.\
    \  An\n   ASBR in an unsigned area will generate unsigned ASE LSAs.  These LSAs\n\
    \   will have a scope of all the contiguously connected unsigned areas,\n   and\
    \ will be available to hosts in this scope.  To arrange complete\n   connectivity\
    \ to an ASE route in an AS with signed and unsigned areas:\n   (1) Place the ASBR\
    \ on the backbone.\n   (2) Signed Backbone: have some ABR in each unsigned area\
    \ advertise a\n       default route to the backbone.\n   (3) Unsigned Backbone:\
    \ have some ABR in each signed area advertise a\n       default route to the backbone.\n\
    \   Given this design for a mixed AS, routing is available throughout the\n  \
    \ AS, but the authentication and integrity provided by this design will\n   be\
    \ effective only for routes that are inside a signed area, or\n   traverse only\
    \ signed areas.  There is no mechanism for a data packet\n   to state a preference\
    \ for signed routes.  The basic rules of the OSPF\n   protocol ensure that intra-area\
    \ routes are preferred to inter-area\n   routes, that routes within the AS are\
    \ preferred to AS external\n   routes, and that inter-area routes go from area1->backbone->area2.\n\
    \   OSPF does not allow looping, or routes of the form area1->area2-\n   >area3.\
    \  Because of these properties of OSFP routing, an AS can\n   contain signed and\
    \ unsigned areas, and achieve a predictable level of\n   authentication.\n"
- title: 6.  Special Considerations/Restrictions for the ABR-ASBR
  contents:
  - "6.  Special Considerations/Restrictions for the ABR-ASBR\n   There are special\
    \ restrictions and configuration considerations for a\n   router running OSPF\
    \ with Digital Signatures that is both an Area\n   Border Router and an Autonomous\
    \ System Border Router.  An ASBR\n   produces AS external LSAs that are flooded\
    \ throughout the non-stub\n   areas of the AS.  An ABR that is generating digital\
    \ signatures may be\n   using a different key, certifying Trusted Entity, or signature\n\
    \   algorithm for each of its attached areas, or it might be signing in\n   some\
    \ areas and not in others.\n   An ABR/ASBR with no restrictions on its configuration\
    \ could produce\n   multiple versions of an ASE that would all be flooded throughout\
    \ the\n   non-stub areas of the AS.  The results of this production of multiple\n\
    \   versions of LSAs would be detrimental to performance, and could\n   produce\
    \ unpredictable routing behavior.\n   The PKLSA of an ASBR is also flooded throughout\
    \ the non-stub areas of\n   the AS, and in the case of an ABR/ASBR there could\
    \ be multiple,\n   distinct PKLSAs for a given router, one per attached area,\
    \ all being\n   flooded throughout the AS.  If two distinct PKLSAs from one ABR/ASBR\n\
    \   router were present in one area, the key with the most recent create\n   time\
    \ would be stored, and all LSAs signed with a less recent key\n   would be unverifiable.\n\
    \   The simplest way to deal with this problem, and the method\n   recommended\
    \ by this document, is the following:\n   If an ASBR must also be an ABR, then\
    \ the security configuration (key,\n   signature algorithm, certifying Trusted\
    \ Entity, environment =\n   signed/unsigned) for all attached areas must be the\
    \ same.  This way\n   the PKLSA and the ASEs produced for each area match, and\
    \ there is no\n   proliferation of versions of LSAs.\n"
- title: 7.  LSA formats
  contents:
  - '7.  LSA formats

    '
- title: 7.1.  Router Public Key LSA (PKLSA)
  contents:
  - "7.1.  Router Public Key LSA (PKLSA)\n   This LSA is the vehicle for distribution\
    \ of a router public key.  The\n   PKLSA is sent by one router, and stored by\
    \ all the other routers in\n   the flooding scope.  The PKLSA contains the public\
    \ key that other\n   routers will use to verify the signatures created by this\
    \ router.  A\n   Router PKLSA will be communicated in the usual database exchange\
    \ and\n   via flooding mechanisms. The regular period for sending this LSA is\n\
    \   LSRefreshTime.  The Router PKLSA will also be sent when there is a\n   new\
    \ key, or a key to be flushed from the system.\n   The flooding scope of a PKLSA\
    \ is the area, except in the case of\n   ASBRs.  The flooding scope of an ASBR's\
    \ PKLSA is the same as that of\n   the ASEs.  The \"role\" of the router (RTR,\
    \ ABR, ASBR, ABR-ASBR) is\n   stored in the PKLSA inside the certificate, and\
    \ can be checked during\n   flooding.\n   ROUTER PUBLIC KEY LSA\n            \
    \               1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |            LS Age             |   Options     |    LS Type    |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                        Link State ID                          |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                     Advertising Router                        |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                     LS Sequence Number                        |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |         LS Checksum           |            Length             |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                  Certificate (format in 7.2)                  /\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                           Signature                           /\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \         Cert Length           |         Sign Length           |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \   LS AGE          Defined in OSPF RFC [3].\n   OPTIONS         Defined in OSPF\
    \ RFC [3].\n   LS TYPE         16 for Router Public Key LSA.\n               \
    \    First bit set to indicate a signed LSA.\n   LINK STATE ID   Contains the\
    \ Advertising Router Id (see next field).\n   ADVERTISING ROUTER  Defined in OSPF\
    \ RFC [3].\n   LS SEQUENCE NUMBER  Defined in OSPF RFC [3].\n   LS CHECKSUM  \
    \   Defined in OSPF RFC [3].\n                   Checksum does not cover the signature.\n\
    \   LENGTH          Defined in OSPF RFC [3].  Length does include the\n      \
    \             Signature field, Cert Length and Sign Length.\n   CERTIFICATE  \
    \   Format in section 7.2.\n   SIGNATURE       The advertising router's signature\
    \ of this LSA.  This\n                   can be verified using the enclosed Router\
    \ Public Key.\n                   The signature covers the LSA header and message\n\
    \                   starting with the LSA header options field and ending\n  \
    \                 with the Trusted Entity certification field.  For\n        \
    \           sign and verify, the last two fields (Cert Length and\n          \
    \         Sign Length) are appended immediately after the\n                  \
    \ Certificate.  When complete, the signature is\n                   inserted between\
    \ the Certification and the Cert\n                   Length.  There are two exceptions\
    \ to this coverage:\n                   1) If the LSA was generated with an age=MaxAge,\
    \ then\n                   the signature begins with the age field (see section\n\
    \                   3.3).\n                   2) The checksum in the LSA Header\
    \ is set to zero for\n                   the computation of the signature.\n \
    \                  A pad is added to the end of the signature field to\n     \
    \              allow the next field to begin on a (4 byte) word\n            \
    \       boundary.\n                   The format used for an RSA-MD5 signature\
    \ is defined\n                   in section 4.1.2 of RFC2065 [10].\n   CERT LENGTH\
    \     The length in bytes of the Certification inside the\n                  \
    \ Certificate.\n                   Does not include pad that may follow Certification.\n\
    \   SIGN LENGTH     The length in bytes of the Signature.\n                  \
    \ Does not include pad that may follow Signature.\n"
- title: 7.2.  Router Public Key Certificate
  contents:
  - "7.2.  Router Public Key Certificate\n   A router public key certificate is a\
    \ package of data signed by a\n   Trusted Entity.  This certificate is included\
    \ in the router PKLSA and\n   in the router configuration information.  To change\
    \ any of the values\n   in the certificate, a new certificate must be obtained\
    \ from a TE.\n                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2\
    \ 2 3 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                          Router Id                            |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \     TE Id     |   TE Key Id   |   Rtr Key Id  |    Sig Alg    |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                          Create Time                          |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \        Key Field Length       |  Router Role  |  #Net Ranges  |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                          IP Address                           |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                         Address Mask                          |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |           IP Address/Address Mask for each Net Range ...      /\n   \
    \   | ...                                                           /\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                       Router Public Key                       |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                         Certification                         /\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \   ROUTER ID       Advertising Router.\n   TE ID           TE Id must uniquely\
    \ identify one TE in the AS.\n                   A number between 1-250.  0 reserved\
    \ for null.\n                   251-255 reserved for future needs.\n   TE KEY\
    \ ID       Must uniquely identify a particular key for a given\n             \
    \      TE at any given time.  A TE Key Id may be re-used\n                   after\
    \ all references to it are gone from the AS.  A\n                   number between\
    \ 1-250.  0 reserved for null.  251-255\n                   reserved for future\
    \ needs.\n   RTR KEY ID      Must be unique for the TE and Router at any given\n\
    \                   time. The combination of (TE Id, Rtr Id, Rtr Key Id)\n   \
    \                uniquely identifies a particular router key at a\n          \
    \         given time.  A Rtr Key Id may be re-used after all\n               \
    \    references to it are gone from the AS.  Create Time\n                   resolves\
    \ any conflict that could be caused by\n                   replaying old keys.\
    \  A number between 1-250.  0\n                   reserved for null.  251-255\
    \ reserved for future\n                   needs.\n   SIG ALG         The signature\
    \ algorithm for the Router Public Key.\n                   The signature algorithm\
    \ encompasses the hash\n                   algorithm used as well.  Currently\
    \ defined value =\n                   RSA-MD5(1).  Values 2-252 are available\
    \ for future\n                   definition.  Values 0 and 253-255 are reserved.\
    \  The\n                   Sig Alg value is registered with IANA.  Future\n  \
    \                 signature algorithms will have to be defined or\n          \
    \         referenced in this document, and registered with\n                 \
    \  IANA.\n   CREATE TIME     Timestamp set by the TE.  An unsigned number of\n\
    \                   seconds since the start of January 1, 1970, GMT,\n       \
    \            ignoring leap seconds.  Used to compare two\n                   certificates\
    \ and determine which is more recent.\n                   Requires that time synchronization\
    \ for TEs, but not\n                   for routers.\n   KEY FIELD LENGTH    The\
    \ length in bytes of the Router Public Key.\n                   Does not include\
    \ pad that may follow Router Public\n                   Key field.\n   ROUTER\
    \ ROLE     Router (R=1), Area Border Router (ABR=2), Autonomous\n            \
    \       System Border Router (ASBR=4), ABR and ASBR (ABR-\n                  \
    \ ASBR=6).\n   #NET RANGES     The number of network ranges that follow.  A network\n\
    \                   range is defined to be an IP Address and an Address\n    \
    \               Mask.  This list of ranges defines the addresses that\n      \
    \             the Router is permitted to advertise in its Router\n           \
    \        Links LSA.  Valid values are 0-255. If there are 0\n                \
    \   ranges the router cannot advertise anything.  This is\n                  \
    \ not generally useful.  One range with address=0 and\n                   mask=0\
    \ will allow a router to advertise any address.\n   IP ADDRESS & ADDRESS MASK\n\
    \                   Define a range of addresses that this router may\n       \
    \            advertise.  Each is a 32 bit value.  One range with\n           \
    \        address=0 and mask=0 will allow a router to advertise\n             \
    \      any address.\n   ROUTER PUBLIC KEY    A key that can be used to verify\
    \ the signatures\n                   produced by this router.  The internal format\
    \ for the\n                   Router Public Key is signature algorithm dependent.\n\
    \                   A pad is added to the end of the Router Public Key\n     \
    \              field to allow the next field to begin on a (4 byte)\n        \
    \           word boundary.\n                   The format used for an RSA-MD5\
    \ public key is defined\n                   in section 3.5 of RFC2065 [10].\n\
    \   CERTIFICATION   The Trusted Entity's signature of the certified data.\n  \
    \                 This signature can be verified with the TE public key\n    \
    \               identified by TE Id and TE Key Id given in this\n            \
    \       packet.  The length of the certification depends on\n                \
    \   the key size, and is stored in the PKLSA Cert Length\n                   field.\
    \  A pad is added to the end of the\n                   Certification to allow\
    \ the next field to begin on a\n                   (4 byte) word boundary.\n \
    \                  The format used for an RSA-MD5 signature is defined\n     \
    \              in section 4.1.2 of RFC2065 [10].\n"
- title: 7.3  Signed LSA
  contents:
  - "7.3  Signed LSA\n   A signed LSA is an OSPF LSA with signature data and a digital\n\
    \   signature attached.  The first bit of the LSA Type field is set to\n   indicate\
    \ the presence of a signature.  The signature follows the LSA\n   Data.  Signature\
    \ length and id fields are positioned at the end of\n   the signed LSA.\n   ANY\
    \ SIGNED LSA\n                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2\
    \ 2 3 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |            LS Age             |   Options     |    LS Type    |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                        Link State ID                          |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                     Advertising Router                        |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                     LS Sequence Number                        |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |         LS Checksum           |            Length             |\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \                            LSA Data                           /\n      / ...\
    \                                                           /\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \      |                            Signature                          /\n   \
    \   +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n      |\
    \  Rtr Key Id   |     TE Id     |         Sign Length           |\n      +-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-*-+-+-+-+-+-+-+-+\n\
    \   LS AGE          Defined in OSPF RFC [3].\n   OPTIONS         Defined in OSPF\
    \ RFC [3].\n   LS TYPE         Standard LSA Type with the first bit set to indicate\n\
    \                   the presence of security data and a signature. This\n    \
    \               creates a new signed LSA type for each existing type.\n   LINK\
    \ STATE ID   Defined in OSPF RFC [3].\n   ADVERTISING ROUTER  Defined in OSPF\
    \ RFC [3].\n   LS SEQUENCE NUMBER  Defined in OSPF RFC [3].\n   LS CHECKSUM  \
    \   Defined in OSPF RFC [3].\n                   Checksum does not cover the signature.\n\
    \   LENGTH          Defined in OSPF RFC [3].\n                   Length does include\
    \ the Signature and security\n                   related fields at the end of\
    \ the LSA.\n   SIGNATURE       The advertising router's signature of this LSA.\
    \  The\n                   signature covers the LSA header and data starting\n\
    \                   with the LSA header options field and ending with the\n  \
    \                 Trusted Entity certification field.  For sign and\n        \
    \           verify, the last three fields (Rtr Key Id, TE Id,\n              \
    \     Sign Length) are appended to the Certificate.  When\n                  \
    \ complete, the signature is inserted between the\n                   Certification\
    \ and the Rtr Key Id.  There are two\n                   exceptions to this coverage:\n\
    \                   1) If the LSA was generated with an age=MaxAge, then\n   \
    \                the signature begins with the age field (see section\n      \
    \             3.3).\n                   2) The checksum in the LSA Header is set\
    \ to zero for\n                   the computation  & verification of the signature.\n\
    \                   A pad is added to the end of the signature to allow\n    \
    \               the next field to begin on a (4 byte) word boundary.\n       \
    \            The format used for an RSA-MD5 signature is defined\n           \
    \        in section 4.1.2 of RFC2065 [10].\n   RTR KEY ID      Used to identify\
    \ the router key used to sign this\n                   LSA. The combination of\
    \ (TE Id, Rtr Id, Rtr Key Id)\n                   uniquely identifies a particular\
    \ router key at a\n                   given time, and can be used to look up the\
    \ PKLSA for\n                   the router key needed to verify this Signed LSA.\
    \  A\n                   number between 1-250.  0 reserved for null.  251-255\n\
    \                   reserved for future needs.\n   TE ID           The id of the\
    \ Trusted Entity that produced the\n                   certificate.  TE Id must\
    \ uniquely identify one TE in\n                   the AS.  A number between 1-250.\
    \  0 reserved for\n                   null. 251-255 reserved for future needs.\n\
    \   SIGN LENGTH     The length in bytes of the Signature.\n                  \
    \ Does not include pad that may follow Signature.\n"
- title: 8.  Configuration Information
  contents:
  - "8.  Configuration Information\n   Trusted Entity Information Set: (one per Trusted\
    \ Entity used by this\n   router)\n      Trusted Entity ID - TE Id\n         \
    \  Identifies the Trusted Entity within the AS (defined in 7.2).\n      Trusted\
    \ Entity Key Id - TE Key Id\n           Identifies the particular key for this\
    \ Trusted Entity\n           (defined in 7.2).\n      Trusted Entity Public Key\n\
    \           A public key for this Trusted Entity.\n           The format used\
    \ for an RSA-MD5 public key is defined in\n           section 3.5 of RFC2065 [10].\n\
    \      Signature Algorithm < and optional parameters >\n           The signature\
    \ algorithm for the public key (defined in 7.2).\n   Router Information Set: (at\
    \ least one for the router)\n      Router Private Key\n           The router's\
    \ private key that goes with the public key in the\n           certificate following.\
    \ The format used for the private key\n           depends on the crypto package\
    \ used by your implementation.\n           This key is not transmitted as part\
    \ of this design.  Our\n           implementation uses the private key format\
    \ compatible with\n           RSAREF [9].\n      Router Certificate (format in\
    \ 7.2).\n   Timing Intervals:\n      Trusted Entity Key Distribution Interval\
    \ (TE_KEY_DIST_INT)\n           The period of time, in seconds, needed to get\
    \ a TE public key\n           installed on all the routers in the TE's scope.\n\
    \      Maximum Transit Delay (MAX_TRANSIT_DELAY)\n           The maximum period\
    \ of time, in seconds, that it should take\n           for an LSA to reach all\
    \ the routers in the AS.\n   Router Information per attached Area:\n      Environment\
    \ flag\n           Signed=1, Unsigned=0\n   9.  Remaining Vulnerabilities\n  \
    \ Note that with this mechanism, one router can still distribute\n   incorrect\
    \ data in the information for which it itself is responsible.\n   Consequently,\
    \ an autonomous system employing digital signatures with\n   this mechanism will\
    \ not be completely invulnerable to routing\n   disruptions from a single router.\
    \  For example, the area border\n   routers and autonomous system border routers\
    \ will still be able to\n   inject incorrect routing information.  Also, any single\
    \ internal\n   router can be incorrect in the routing information it originates\n\
    \   about its own links.\n"
- title: 9.1.  Area Border Routers
  contents:
  - "9.1.  Area Border Routers\n   Even with the design proposed here, the area border\
    \ routers can\n   inject incorrect routing information into their attached areas\
    \ about\n   the backbone and the other areas in Summary LSA's.  They can also\n\
    \   inject incorrect routing information into the backbone about their\n   attached\
    \ area.\n   Because all the area border routers in one area work from the same\n\
    \   database of LSA's received in their common area, it would be possible\n  \
    \ for the area border routers to corroborate each other.  Any area\n   border\
    \ router for an area could double check the Summary LSA's\n   received over the\
    \ backbone from other ABR's from the area, and could\n   double check the Summary\
    \ LSA's flooded through the area from the\n   other area border routers.  The\
    \ other routers in the area or backbone\n   should be warned of a failure of this\
    \ check.  The warning could be a\n   signed message from the area border router\
    \ detecting the failure,\n   flooded in the usual mechanism.\n   Another possibility\
    \ would be that the area border routers in an area\n   could originate multiple\
    \ sets of Summary LSA's -- one for itself\n   containing its own information and\
    \ one for each of the area border\n   routers in the area containing the information\
    \ each of them should\n   originate.  Each router in the area or backbone could\
    \ then determine\n   for itself whether the area border routers agreed.  This\
    \ distribution\n   of information but coordination of processing is in keeping\
    \ with the\n   paradigm of link state protocols, where information and processing\
    \ is\n   duplicated in each router.\n   Both alternatives mean much additional\
    \ processing and additional\n   message transmission, over and above the additional\
    \ processing\n   required for signature generation and verification.  Because\
    \ the\n   vulnerability is isolated to a few points in each area, because the\n\
    \   source of incorrect information is detectable (in those situations\n   where\
    \ the incorrect information is spotted) and because the\n   protection is costly,\
    \ we have not added this protection to this\n   design.\n"
- title: 9.2.  Internal Routers
  contents:
  - "9.2.  Internal Routers\n   The internal routers can be incorrect about information\
    \ they\n   themselves originate.\n   A router could announce an incorrect metric\
    \ for a valid link.  There\n   is no way to guard against this, but the damage\
    \ would be small and\n   localized even if the router is announcing that the link\
    \ is up when\n   it is down or vice versa.\n   A router could announce a connection\
    \ that does not in fact exist.  If\n   a router announces a non-existent connection\
    \ to a transit network,\n   the OSPF Dijkstra computation will not consider the\
    \ connection\n   without a similar announcement from another router at the other\n\
    \   \"end\".  Therefore, no damage would result (above network impact to\n   transmit\
    \ and store the incorrect information) without the cooperation\n   of another\
    \ router.  A router could also announce a connection to a\n   stub network or\
    \ a host route that does not exist.  The Dijkstra\n   computation can not perform\
    \ the same check for a similar announcement\n   from the other \"end\", because\
    \ no other end exists.  This is a\n   vulnerability.\n   A faulty router announcing\
    \ a nonexistent connection to a stub network\n   or host could result in the faulty\
    \ router receiving IP packets bound\n   for that network or host.  Unless the\
    \ faulty router then forwarded\n   the packets to the correct destination by source\
    \ routing, the failure\n   of packet delivery could expose the incorrect routing.\
    \  To exploit\n   the vulnerability deliberately, the faulty router would have\
    \ to be\n   able to handle and pass on the received traffic for the incorrectly\n\
    \   announced destination.  Furthermore, if the incorrect routing were\n   discovered,\
    \ the signatures on the routing information would identify\n   the faulty router\
    \ as the source of the incorrect information.\n   Finally, this design checks\
    \ router advertisements against allowed\n   address ranges certified by a trusted\
    \ entity.  A faulty router could\n   announce nonexistent host or stub network\
    \ routes, but only to\n   addresses within its allowed ranges.\n"
- title: 9.3.  Autonomous System Border Routers
  contents:
  - "9.3.  Autonomous System Border Routers\n   The autonomous system boundary routers\
    \ can produce incorrect routing\n   information in the external routes information\
    \ they originate.  There\n   is no way to double check or corroborate this information,\
    \ as there\n   is with area border routers.  No authority within an autonomous\n\
    \   system exists to authorize the networks an autonomous system boundary\n  \
    \ router could announce, as is the case for the internal networks an\n   internal\
    \ router could announce.  Consequently, the autonomous system\n   boundary routers\
    \ remain a unprotected vulnerability.  With this in\n   mind, special care should\
    \ be taken to protect the autonomous system\n   boundary routers with other means.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This entire memo is about security considerations.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1] Finn, Gregory G., \"Reducing the Vulnerability of Dynamic\
    \ Computer\n       Networks,\" ISI Research Report ISI/RR-88-201, University of\n\
    \       Southern California Information Sciences Institute,\n       Marina del\
    \ Rey, California, June 1988.\n   [2] Kumar,B and Crowcroft,J., \"Integrating\
    \ Security in Inter-Domain\n       Routing Protocols\", Computer Communications\
    \ Review, Vol 23,\n       No. 5, October 1993.\n   [3] Moy, J., \"OSPF Version\
    \ 2,\" RFC 1583, Proteon, Inc., March 1994.\n   [4] Perlman, R., \"Network Layer\
    \ Protocols with Byzantine Robustness\",\n       Ph.D. Thesis, Department of Electrical\
    \ Engineering and Computer\n       Science, MIT, August 1988.\n   [5] Perlman,\
    \ R., \"Interconnections: Bridges and Routers\",\n       Addison-Wesley, Reading,\
    \ Mass., 1992.\n   [6] Schneier, B., \"Applied Cryptography: Protocols, Algorithms,\
    \ and\n       Source Code in C,\" John Wiley & Sons, Inc., New York, 1994.\n \
    \  [7] Steenstrup, M., \"Inter-Domain Policy Routing Protocol\n       Specification:\
    \ Version 1\", RFC 1479, BBN Systems and\n       Technologies, July 1993.\n  \
    \ [9] PKCS #1: RSA Encryption Standard, RSA Data Security, Inc., June\n      \
    \ 1991, Version 1.4.\n   [10] Eastlake D. & Kaufman C., \"Domain Name System Security\n\
    \        Extensions\", RFC2065, January 1997.\n   [11] Moy J., \"OSPF Version\
    \ 2\", Cascade Communications Corp,\n        Work In Progress.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Sandra Murphy  murphy@tis.com\n   Madelyn Badger\
    \  mrb@tis.com\n   Brian Wellington  bwelling@tis.com\n   Trusted Information\
    \ Systems\n   3060 Washington Road\n   Glenwood, MD  21738\n"
