- title: __initial_text__
  contents:
  - "        Coexistence between Version 1, Version 2, and Version 3\n         of\
    \ the Internet-standard Network Management Framework\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The purpose of this document is to describe coexistence between\n\
    \   version 3 of the Internet-standard Network Management Framework,\n   (SNMPv3),\
    \ version 2 of the Internet-standard Network Management\n   Framework (SNMPv2),\
    \ and the original Internet-standard Network\n   Management Framework (SNMPv1).\
    \  This document obsoletes RFC 1908 [13]\n   and RFC2089 [14].\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1 Overview .....................................................\
    \    2\n   1.1 SNMPv1 .....................................................  \
    \  3\n   1.2 SNMPv2 .....................................................    4\n\
    \   1.3 SNMPv3 .....................................................    4\n  \
    \ 1.4 SNMPv1 and SNMPv2 Access to MIB Data .......................    5\n   2\
    \ SMI and Management Information Mappings ......................    5\n   2.1\
    \ MIB Modules ................................................    6\n   2.1.1\
    \ Object Definitions .......................................    6\n   2.1.2 Trap\
    \ and Notification Definitions ........................    9\n   2.2 Compliance\
    \ Statements ......................................    9\n   2.3 Capabilities\
    \ Statements ....................................   10\n   3 Translating Notifications\
    \ Parameters .........................   10\n   3.1 Translating  SNMPv1  Notification\
    \  Parameters  to  SNMPv2\n        Notification Parameters ...................................\
    \   12\n   3.2 Translating  SNMPv2  Notification  Parameters  to  SNMPv1\n   \
    \     Notification Parameters ...................................   13\n   4 Approaches\
    \ to Coexistence in a Multi-lingual Network .........   14\n   4.1 Multi-lingual\
    \ implementations ..............................   15\n   4.1.1 Command Generator\
    \ ........................................   15\n   4.1.2 Command Responder ........................................\
    \   15\n   4.1.2.1 Handling Counter64 .....................................  \
    \ 16\n   4.1.2.2 Mapping SNMPv2 Exceptions ..............................   16\n\
    \   4.1.2.2.1 Mapping noSuchObject and noSuchInstance ..............   17\n  \
    \ 4.1.2.2.2 Mapping endOfMibView .................................   17\n   4.1.2.3\
    \ Processing An SNMPv1 GetRequest ........................   18\n   4.1.2.4 Processing\
    \ An SNMPv1 GetNextRequest ....................   19\n   4.1.2.5 Processing An\
    \ SNMPv1 SetRequest ........................   20\n   4.1.3 Notification Originator\
    \ ..................................   20\n   4.1.4 Notification Receiver ....................................\
    \   21\n   4.2 Proxy Implementations ......................................  \
    \ 21\n   4.2.1 Upstream Version Greater Than Downstream Version .........   21\n\
    \   4.2.2 Upstream Version Less Than Downstream Version ............   22\n  \
    \ 4.3 Error Status Mappings ......................................   24\n   5\
    \ Message Processing Models and Security Models ................   25\n   5.1\
    \ Mappings ...................................................   25\n   5.2 The\
    \ SNMPv1 MP Model and SNMPv1  Community-based  Security\n        Model .....................................................\
    \   26\n   5.2.1 Processing An Incoming Request ...........................  \
    \ 26\n   5.2.2 Generating An Outgoing Response ..........................   28\n\
    \   5.2.3 Generating An Outgoing Notification ......................   28\n  \
    \ 5.3 The SNMP Community MIB Module ..............................   29\n   6\
    \ Intellectual Property ........................................   39\n   7 Acknowledgments\
    \ ..............................................   39\n   8 Security Considerations\
    \ ......................................   40\n   9 References ...................................................\
    \   40\n   10 Editor's Addresses ..........................................  \
    \ 42\n   A. Changes From RFC1908 ........................................   43\n\
    \   Full Copyright Statement .......................................   44\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   The purpose of this document is to describe coexistence between\n\
    \   version 3 of the Internet-standard Network Management Framework,\n   termed\
    \ the SNMP version 3 framework (SNMPv3), version 2 of the\n   Internet-standard\
    \ Network Management Framework, termed the SNMP\n   version 2 framework (SNMPv2),\
    \ and the original Internet-standard\n   Network Management Framework (SNMPv1).\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in RFC2119 [15].\n \
    \  There are four general aspects of coexistence described in this\n   document.\
    \  Each of these is described in a separate section:\n      -  Conversion of MIB\
    \ documents between SMIv1 and SMIv2 formats is\n         documented in section\
    \ 2.\n      -  Mapping of notification parameters is documented in section 3.\n\
    \      -  Approaches to coexistence between entities which support the\n     \
    \    various versions of SNMP in a multi-lingual network is\n         documented\
    \ in section 4.  This section addresses the processing\n         of protocol operations\
    \ in multi-lingual implementations, as\n         well as behaviour of proxy implementations.\n\
    \      -  The SNMPv1 Message Processing Model and Community-Based\n         Security\
    \ Model, which provides mechanisms for adapting SNMPv1\n         into the View-Based\
    \ Access Control Model (VACM) [20], is\n         documented in section 5 (this\
    \ section also addresses the\n         SNMPv2c Message Processing Model and Community-Based\
    \ Security\n         Model).\n"
- title: 1.1.  SNMPv1
  contents:
  - "1.1.  SNMPv1\n   SNMPv1 is defined by these documents:\n      -  STD 15, RFC\
    \ 1157 [2] which defines the Simple Network\n         Management Protocol (SNMPv1),\
    \ the protocol used for network\n         access to managed objects.\n      -\
    \  STD 16, RFC 1155 [1] which defines the Structure of Management\n         Information\
    \ (SMIv1), the mechanisms used for describing and\n         naming objects for\
    \ the purpose of management.\n      -  STD 16, RFC 1212 [3] which defines a more\
    \ concise description\n         mechanism, which is wholly consistent with the\
    \ SMIv1.\n      -  RFC 1215 [4] which defines a convention for defining Traps\
    \ for\n         use with the SMIv1.\n   Note that throughout this document, the\
    \ term 'SMIv1' is used.  This\n   term generally refers to the information presented\
    \ in RFC 1155, RFC\n   1212, and RFC 1215.\n"
- title: 1.2.  SNMPv2
  contents:
  - "1.2.  SNMPv2\n   SNMPv2 is defined by these documents:\n      -  STD 58, RFC\
    \ 2578 which defines Version 2 of the Structure of\n         Management Information\
    \ (SMIv2) [7].\n      -  STD 58, RFC 2579 which defines common MIB \"Textual Conventions\"\
    \n         [8].\n      -  STD 58, RFC 2580 which defines Conformance Statements\
    \ and\n         requirements for defining agent and manager capabilities [9].\n\
    \      -  RFC 1905 which defines the Protocol Operations used in\n         processing\
    \ [10].\n      -  RFC 1906 which defines the Transport Mappings used \"on the\n\
    \         wire\" [11].\n      -  RFC 1907 which defines the basic Management Information\
    \ Base\n         for monitoring and controlling some basic common functions of\n\
    \         SNMP entities [12].\n   Note that SMIv2 as used throughout this document\
    \ refers to the first\n   three documents listed above (RFCs 2578, 2579, and 2580).\n\
    \   The following document augments the definition of SNMPv2:\n      -  RFC 1901\
    \ [6] is an Experimental definition for using SNMPv2\n         PDUs within a community-based\
    \ message wrapper.  This is\n         referred to throughout this document as\
    \ SNMPv2c.\n"
- title: 1.3.  SNMPv3
  contents:
  - "1.3.  SNMPv3\n   SNMPv3 is defined by these documents:\n      -  RFC 2571 which\
    \ defines an Architecture for Describing SNMP\n         Management Frameworks\
    \ [16].\n      -  RFC 2572 which defines Message Processing and Dispatching [17].\n\
    \      -  RFC 2573 which defines various SNMP Applications [18].\n      -  RFC\
    \ 2574 which defines the User-based Security Model (USM),\n         providing\
    \ for both Authenticated and Private (encrypted) SNMP\n         messages [19].\n\
    \      -  RFC 2575 which defines the View-based Access Control Model\n       \
    \  (VACM), providing the ability to limit access to different MIB\n         objects\
    \ on a per-user basis [20].\n   SNMPv3 also uses the SNMPv2 definitions of RFCs\
    \ 1905 through 1907 and\n   the SMIv2 definitions of 2578 through 2580 described\
    \ above.\n"
- title: 1.4.  SNMPv1 and SNMPv2 Access to MIB Data
  contents:
  - "1.4.  SNMPv1 and SNMPv2 Access to MIB Data\n   In several places, this document\
    \ refers to 'SNMPv1 Access to MIB\n   Data' and 'SNMPv2 Access to MIB Data'. \
    \ These terms refer to the part\n   of an SNMP agent which actually accesses instances\
    \ of MIB objects,\n   and which actually initiates generation of notifications.\n\
    \   Differences between the two types of access to MIB data are:\n      -  Error-status\
    \ values generated.\n      -  Generation of exception codes.\n      -  Use of\
    \ the Counter64 data type.\n      -  The format of parameters provided when a\
    \ notification is\n         generated.\n   SNMPv1 access to MIB data may generate\
    \ SNMPv1 error-status values,\n   will never generate exception codes nor use\
    \ the Counter64 data type,\n   and will provide SNMPv1 format parameters for generating\n\
    \   notifications.  Note also that SNMPv1 access to MIB data will\n   actually\
    \ never generate a readOnly error (a noSuchName error would\n   always occur in\
    \ the situation where one would expect a readOnly\n   error).\n   SNMPv2 access\
    \ to MIB data may generate SNMPv2 error-status values,\n   may generate exception\
    \ codes, may use the Counter64 data type, and\n   will provide SNMPv2 format parameters\
    \ for generating notifications.\n   Note that SNMPv2 access to MIB data will never\
    \ generate readOnly,\n   noSuchName, or badValue errors.\n   Note that a particular\
    \ multi-lingual implementation may choose to\n   implement all access to MIB data\
    \ as SNMPv2 access to MIB data, and\n   perform the translations described herein\
    \ for SNMPv1-based\n   transactions.\n"
- title: 2.  SMI and Management Information Mappings
  contents:
  - "2.  SMI and Management Information Mappings\n   The SMIv2 approach towards describing\
    \ collections of managed objects\n   is nearly a proper superset of the approach\
    \ defined in the SMIv1.\n   For example, both approaches use an adapted subset\
    \ of ASN.1 (1988)\n   [11] as the basis for a formal descriptive notation.  Indeed,\
    \ one\n   might note that the SMIv2 approach largely codifies the existing\n \
    \  practice for defining MIB modules, based on extensive experience with\n   the\
    \ SMIv1.\n   The following sections consider the three areas:  MIB modules,\n\
    \   compliance statements, and capabilities statements.\n"
- title: 2.1.  MIB Modules
  contents:
  - "2.1.  MIB Modules\n   MIB modules defined using the SMIv1 may continue to be\
    \ used with\n   protocol versions which use SNMPv2 PDUs.  However, for the MIB\n\
    \   modules to conform to the SMIv2, the following changes SHALL be made:\n"
- title: 2.1.1.  Object Definitions
  contents:
  - "2.1.1.  Object Definitions\n   In general, conversion of a MIB module does not\
    \ require the\n   deprecation of the objects contained therein.  If the definition\
    \ of\n   an object is truly inadequate for its intended purpose, the object\n\
    \   SHALL be deprecated or obsoleted, otherwise deprecation is not\n   required.\n\
    \   (1)  The IMPORTS statement MUST reference SNMPv2-SMI, instead of\n       \
    \ RFC1155-SMI and RFC-1212.\n   (2)  The MODULE-IDENTITY macro MUST be invoked\
    \ immediately after any\n        IMPORTs statement.\n   (3)  For any object with\
    \ an integer-valued SYNTAX clause, in which\n        the corresponding INTEGER\
    \ does not have a range restriction\n        (i.e., the INTEGER has neither a\
    \ defined set of named-number\n        enumerations nor an assignment of lower-\
    \ and upper-bounds on its\n        value), the object MUST have the value of its\
    \ SYNTAX clause\n        changed to Integer32, or have an appropriate range specified.\n\
    \   (4)  For any object with a SYNTAX clause value of Counter, the object\n  \
    \      MUST have the value of its SYNTAX clause changed to Counter32.\n   (5)\
    \  For any object with a SYNTAX clause value of Gauge, the object\n        MUST\
    \ have the value of its SYNTAX clause changed to Gauge32, or\n        Unsigned32\
    \ where appropriate.\n   (6)  For all objects, the ACCESS clause MUST be replaced\
    \ by a MAX-\n        ACCESS clause.  The value of the MAX-ACCESS clause SHALL\
    \ be the\n        same as that of the ACCESS clause unless some other value makes\n\
    \        \"protocol sense\" as the maximal level of access for the object.\n \
    \       In particular, object types for which instances can be\n        explicitly\
    \ created by a protocol set operation, SHALL have a\n        MAX-ACCESS clause\
    \ of \"read-create\".  If the value of the ACCESS\n        clause is \"write-only\"\
    , then the value of the MAX-ACCESS clause\n        MUST be \"read-write\", and\
    \ the DESCRIPTION clause SHALL note that\n        reading this object will result\
    \ in implementation-specific\n        results.  Note that in SMIv1, the ACCESS\
    \ clause specifies the\n        minimal required access, while in SMIv2, the MAX-ACCESS\
    \ clause\n        specifies the maximum allowed access.  This should be considered\n\
    \        when converting an ACCESS clause to a MAX-ACCESS clause.\n   (7)  For\
    \ all objects, if the value of the STATUS clause is\n        \"mandatory\" or\
    \ \"optional\", the value MUST be replaced with\n        \"current\", \"deprecated\"\
    , or \"obsolete\" depending on the current\n        usage of such objects.\n \
    \  (8)  For any object not containing a DESCRIPTION clause, the object\n     \
    \   MUST have a DESCRIPTION clause defined.\n   (9)  For any object corresponding\
    \ to a conceptual row which does not\n        have an INDEX clause, the object\
    \ MUST have either an INDEX\n        clause or an AUGMENTS clause defined.\n \
    \  (10) If any INDEX clause contains a reference to an object with a\n       \
    \ syntax of NetworkAddress, then a new object MUST be created and\n        placed\
    \ in this INDEX clause immediately preceding the object\n        whose syntax\
    \ is NetworkAddress.  This new object MUST have a\n        syntax of INTEGER,\
    \ it MUST be not-accessible, and its value MUST\n        always be 1.  This approach\
    \ allows one to convert a MIB module\n        in SMIv1 format to one in SMIv2\
    \ format, and then use it with the\n        SNMPv1 protocol with no impact to\
    \ existing SNMPv1 agents and\n        managers.\n   (11) For any object with a\
    \ SYNTAX of NetworkAddress, the SYNTAX MUST\n        be changed to IpAddress.\
    \  Note that the use of NetworkAddress in\n        new MIB documents is strongly\
    \ discouraged (in fact, new MIB\n        documents should be written using SMIv2,\
    \ which does not define\n        NetworkAddress).\n   (12) For any object containing\
    \ a DEFVAL clause with an OBJECT\n        IDENTIFIER value which is expressed\
    \ as a collection of sub-\n        identifiers, the value MUST be changed to reference\
    \ a single\n        ASN.1 identifier.  This may require defining a series of new\n\
    \        administrative assignments (OBJECT IDENTIFIERS) in order to\n       \
    \ define the single ASN.1 identifier.\n   (13) One or more OBJECT-GROUPS MUST\
    \ be defined, and related objects\n        SHOULD be collected into appropriate\
    \ groups.  Note that SMIv2\n        requires all OBJECT-TYPEs to be a member of\
    \ at least one\n        OBJECT-GROUP.\n   Other changes are desirable, but not\
    \ necessary:\n   (1)  Creation and deletion of conceptual rows is inconsistent\
    \ using\n        the SMIv1.  The SMIv2 corrects this.  As such, if the MIB module\n\
    \        undergoes review early in its lifetime, and it contains\n        conceptual\
    \ tables which allow creation and deletion of\n        conceptual rows, then the\
    \ objects relating to those tables MAY\n        be deprecated and replaced with\
    \ objects defined using the new\n        approach.  The approach based on SMIv2\
    \ can be found in section 7\n        of RFC2578 [7], and the RowStatus and StorageType\
    \ TEXTUAL-\n        CONVENTIONs are described in section 2 of RFC2579 [8].\n \
    \  (2)  For any object with a string-valued SYNTAX clause, in which the\n    \
    \    corresponding OCTET STRING does not have a size restriction\n        (i.e.,\
    \ the OCTET STRING has no assignment of lower- and upper-\n        bounds on its\
    \ length), the bounds for the size of the object\n        SHOULD be defined.\n\
    \   (3)  All textual conventions informally defined in the MIB module\n      \
    \  SHOULD be redefined using the TEXTUAL-CONVENTION macro.  Such a\n        change\
    \ would not necessitate deprecating objects previously\n        defined using\
    \ an informal textual convention.\n   (4)  For any object which represents a measurement\
    \ in some kind of\n        units, a UNITS clause SHOULD be added to the definition\
    \ of that\n        object.\n   (5)  For any conceptual row which is an extension\
    \ of another\n        conceptual row, i.e., for which subordinate columnar objects\n\
    \        both exist and are identified via the same semantics as the\n       \
    \ other conceptual row, an AUGMENTS clause SHOULD be used in place\n        of\
    \ the INDEX clause for the object corresponding to the\n        conceptual row\
    \ which is an extension.\n   Finally, to avoid common errors in SMIv1 MIB modules:\n\
    \   (1)  For any non-columnar object that is instanced as if it were\n       \
    \ immediately subordinate to a conceptual row, the value of the\n        STATUS\
    \ clause of that object MUST be changed to \"obsolete\".\n   (2)  For any conceptual\
    \ row object that is not contained immediately\n        subordinate to a conceptual\
    \ table, the value of the STATUS\n        clause of that object (and all subordinate\
    \ objects) MUST be\n        changed to \"obsolete\".\n"
- title: 2.1.2.  Trap and Notification Definitions
  contents:
  - "2.1.2.  Trap and Notification Definitions\n   If a MIB module is changed to conform\
    \ to the SMIv2, then each\n   occurrence of the TRAP-TYPE macro MUST be changed\
    \ to a corresponding\n   invocation of the NOTIFICATION-TYPE macro:\n   (1)  The\
    \ IMPORTS statement MUST NOT reference RFC-1215 [4], and MUST\n        reference\
    \ SNMPv2-SMI instead.\n   (2)  The ENTERPRISE clause MUST be removed.\n   (3)\
    \  The VARIABLES clause MUST be renamed to the OBJECTS clause.\n   (4)  A STATUS\
    \ clause MUST be added, with an appropriate value.\n        Normally the value\
    \ should be 'current,' although 'deprecated' or\n        'obsolete' may be used\
    \ as needed.\n   (5)  The value of an invocation of the NOTIFICATION-TYPE macro\
    \ is an\n        OBJECT IDENTIFIER, not an INTEGER, and MUST be changed\n    \
    \    accordingly.  Specifically, if the value of the ENTERPRISE\n        clause\
    \ is not 'snmp' then the value of the invocation SHALL be\n        the value of\
    \ the ENTERPRISE clause extended with two sub-\n        identifiers, the first\
    \ of which has the value 0, and the second\n        has the value of the invocation\
    \ of the TRAP-TYPE.  If the value\n        of the ENTERPRISE clause is 'snmp',\
    \ then the value of the\n        invocation of the NOTIFICATION-TYPE macro SHALL\
    \ be mapped in the\n        same manner as described in section 3.1 in this document.\n\
    \   (6)  A DESCRIPTION clause MUST be added, if not already present.\n   (7) \
    \ One or more NOTIFICATION-GROUPs MUST be defined, and related\n        notifications\
    \ MUST be collected into those groups.  Note that\n        SMIv2 requires that\
    \ all NOTIFICATION-TYPEs be a member of at\n        least one NOTIFICATION-GROUP.\n"
- title: 2.2.  Compliance Statements
  contents:
  - "2.2.  Compliance Statements\n   For those information modules which are \"standards\
    \ track\", a\n   corresponding invocation of the MODULE-COMPLIANCE macro and related\n\
    \   OBJECT-GROUP and/or NOTIFICATION-GROUP macros MUST be included within\n  \
    \ the information module (or in a companion information module), and\n   any commentary\
    \ text in the information module which relates to\n   compliance SHOULD be removed.\
    \  Typically this editing can occur when\n   the information module undergoes\
    \ review.\n   Note that a MODULE-COMPLIANCE statement is not required for a MIB\n\
    \   document that is not on the standards track (for example, an\n   enterprise\
    \ MIB), though it may be useful in some circumstances to\n   define a MODULE-COMPLIANCE\
    \ statement for such a MIB document.\n"
- title: 2.3.  Capabilities Statements
  contents:
  - "2.3.  Capabilities Statements\n   RFC1303 [5] uses the MODULE-CONFORMANCE macro\
    \ to describe an agent's\n   capabilities with respect to one or more MIB modules.\
    \  Converting\n   such a description for use with the SMIv2 requires these changes:\n\
    \   (1)  The macro name AGENT-CAPABILITIES SHOULD be used instead of\n       \
    \ MODULE-CONFORMANCE.\n   (2)  The STATUS clause SHOULD be added, with a value\
    \ of 'current'.\n   (3)  All occurrences of the CREATION-REQUIRES clause MUST\
    \ either be\n        omitted if appropriate, or be changed such that the semantics\n\
    \        are consistent with RFC2580 [9].\n   In order to ease coexistence, object\
    \ groups defined in an SMIv1\n   compliant MIB module may be referenced by the\
    \ INCLUDES clause of an\n   invocation of the AGENT-CAPABILITIES macro:  upon\
    \ encountering a\n   reference to an OBJECT IDENTIFIER subtree defined in an SMIv1\
    \ MIB\n   module, all leaf objects which are subordinate to the subtree and\n\
    \   have a STATUS clause value of mandatory are deemed to be INCLUDED.\n   (Note\
    \ that this method is ambiguous when different revisions of an\n   SMIv1 MIB have\
    \ different sets of mandatory objects under the same\n   subtree; in such cases,\
    \ the only solution is to rewrite the MIB using\n   the SMIv2 in order to define\
    \ the object groups unambiguously.)\n"
- title: 3.  Translating Notifications Parameters
  contents:
  - "3.  Translating Notifications Parameters\n   This section describes how parameters\
    \ used for generating\n   notifications are translated between the format used\
    \ for SNMPv1\n   notification protocol operations and the format used for SNMPv2\n\
    \   notification protocol operations.  The parameters used to generate a\n   notification\
    \ are called 'notification parameters'.  The format of\n   parameters used for\
    \ SNMPv1 notification protocol operations is\n   refered to in this document as\
    \ 'SNMPv1 notification parameters'.  The\n   format of parameters used for SNMPv2\
    \ notification protocol operations\n   is refered to in this document as 'SNMPv2\
    \ notification parameters'.\n   The situations where notification parameters MUST\
    \ be translated are:\n      -  When an entity generates a set of notification\
    \ parameters in a\n         particular format, and the configuration of the entity\n\
    \         indicates that the notification must be sent using an SNMP\n       \
    \  message version that requires the other format for notification\n         parameters.\n\
    \      -  When a proxy receives a notification that was sent using an\n      \
    \   SNMP message version that requires one format of notification\n         parameters,\
    \ and must forward the notification using an SNMP\n         message version that\
    \ requires the other format of notification\n         parameters.\n   In addition,\
    \ it MAY be desirable to translate notification parameters\n   in a notification\
    \ receiver application in order to present\n   notifications to the end user in\
    \ a consistent format.\n   Note that for the purposes of this section, the set\
    \ of notification\n   parameters is independent of whether the notification is\
    \ to be sent\n   as a trap or an inform.\n   SNMPv1 notification parameters consist\
    \ of:\n      -  An enterprise parameter (OBJECT IDENTIFIER).\n      -  An agent-addr\
    \ parameter (NetworkAddress).\n      -  A generic-trap parameter (INTEGER).\n\
    \      -  A specific-trap parameter (INTEGER).\n      -  A time-stamp parameter\
    \ (TimeTicks).\n      -  A list of variable-bindings (VarBindList).\n   SNMPv2\
    \ notification parameters consist of:\n      -  A sysUpTime parameter (TimeTicks).\
    \  This appears in the first\n         variable-binding in an SNMPv2-Trap-PDU\
    \ or InformRequest-PDU.\n      -  An snmpTrapOID parameter (OBJECT IDENTIFIER).\
    \  This appears in\n         the second variable-binding in an SNMPv2-Trap-PDU\
    \ or\n         InformRequest-PDU.\n      -  A list of variable-bindings (VarBindList).\
    \  This refers to all\n         but the first two variable-bindings in an SNMPv2-Trap-PDU\
    \ or\n         InformRequest-PDU.\n"
- title: 3.1.  Translating SNMPv1 Notification Parameters to SNMPv2 Notification
  contents:
  - "3.1.  Translating SNMPv1 Notification Parameters to SNMPv2 Notification\n   \
    \   Parameters\n   The following procedure describes how to translate SNMPv1\n\
    \   notification parameters into SNMPv2 notification parameters:\n   (1)  The\
    \ SNMPv2 sysUpTime parameter SHALL be taken directly from the\n        SNMPv1\
    \ time-stamp parameter.\n   (2)  If the SNMPv1 generic-trap parameter is 'enterpriseSpecific(6)',\n\
    \        the SNMPv2 snmpTrapOID parameter SHALL be the concatentation of\n   \
    \     the SNMPv1 enterprise parameter and two additional sub-\n        identifiers,\
    \ '0', and the SNMPv1 specific-trap parameter.\n   (3)  If the SNMPv1 generic-trap\
    \ parameter is not '\n        enterpriseSpecific(6)', the SNMPv2 snmpTrapOID parameter\
    \ SHALL\n        be the corresponding trap as defined in section 2 of RFC1907\n\
    \        [12]:\n    generic-trap parameter   snmpTrapOID.0\n    ======================\
    \   =============\n    0                        1.3.6.1.6.3.1.1.5.1 (coldStart)\n\
    \    1                        1.3.6.1.6.3.1.1.5.2 (warmStart)\n    2         \
    \               1.3.6.1.6.3.1.1.5.3 (linkDown)\n    3                        1.3.6.1.6.3.1.1.5.4\
    \ (linkUp)\n    4                        1.3.6.1.6.3.1.1.5.5 (authenticationFailure)\n\
    \    5                        1.3.6.1.6.3.1.1.5.6 (egpNeighborLoss)\n   (4)  The\
    \ SNMPv2 variable-bindings SHALL be the SNMPv1 variable-\n        bindings.  In\
    \ addition, if the translation is being performed by\n        a proxy in order\
    \ to forward a received trap, three additional\n        variable-bindings will\
    \ be appended, if these three additional\n        variable-bindings do not already\
    \ exist in the SNMPv1 variable-\n        bindings.  The name portion of the first\
    \ additional variable\n        binding SHALL contain snmpTrapAddress.0, and the\
    \ value SHALL\n        contain the SNMPv1 agent-addr parameter.  The name portion\
    \ of\n        the second additional variable binding SHALL contain\n        snmpTrapCommunity.0,\
    \ and the value SHALL contain the value of\n        the community-string field\
    \ from the received SNMPv1 message\n        which contained the SNMPv1 Trap-PDU.\
    \  The name portion of the\n        third additional variable binding SHALL contain\n\
    \        snmpTrapEnterprise.0 [12], and the value SHALL be the SNMPv1\n      \
    \  enterprise parameter.\n"
- title: 3.2.  Translating SNMPv2 Notification Parameters to SNMPv1 Notification
  contents:
  - "3.2.  Translating SNMPv2 Notification Parameters to SNMPv1 Notification\n   \
    \   Parameters\n   The following procedure describes how to translate SNMPv2\n\
    \   notification parameters into SNMPv1 notification parameters:\n   (1)  The\
    \ SNMPv1 enterprise parameter SHALL be determined as follows:\n      -  If the\
    \ SNMPv2 snmpTrapOID parameter is one of the standard\n         traps as defined\
    \ in RFC1907 [12], then the SNMPv1 enterprise\n         parameter SHALL be set\
    \ to the value of the variable-binding in\n         the SNMPv2 variable-bindings\
    \ whose name is snmpTrapEnterprise.0\n         if that variable-binding exists.\
    \  If it does not exist, the\n         SNMPv1 enterprise parameter SHALL be set\
    \ to the value '\n         snmpTraps' as defined in RFC1907 [12].\n      -  If\
    \ the SNMPv2 snmpTrapOID parameter is not one of the standard\n         traps\
    \ as defined in RFC1907 [12], then the SNMPv1 enterprise\n         parameter SHALL\
    \ be determined from the SNMPv2 snmpTrapOID\n         parameter as follows:\n\
    \         -  If the next-to-last sub-identifier of the snmpTrapOID is\n      \
    \      zero, then the SNMPv1 enterprise SHALL be the SNMPv2\n            snmpTrapOID\
    \ with the last 2 sub-identifiers removed,\n            otherwise\n         -\
    \  If the next-to-last sub-identifier of the snmpTrapOID is\n            non-zero,\
    \ then the SNMPv1 enterprise SHALL be the SNMPv2\n            snmpTrapOID with\
    \ the last sub-identifier removed.\n   (2)  The SNMPv1 agent-addr parameter SHALL\
    \ be determined based on the\n        situation in which the translation occurs.\n\
    \      -  If the translation occurs within a notification originator\n       \
    \  application, and the notification is to be sent over IP, the\n         SNMPv1\
    \ agent-addr parameter SHALL be set to the IP address of\n         the SNMP entity\
    \ in which the notification originator resides.\n         If the notification\
    \ is to be sent over some other transport,\n         the SNMPv1 agent-addr parameter\
    \ SHALL be set to 0.0.0.0.\n      -  If the translation occurs within a proxy\
    \ application, the proxy\n         must attempt to extract the original source\
    \ of the notification\n         from the variable-bindings.  If the SNMPv2 variable-bindings\n\
    \         contains a variable binding whose name is snmpTrapAddress.0,\n     \
    \    the agent-addr parameter SHALL be set to the value of that\n         variable\
    \ binding.  Otherwise, the SNMPv1 agent-addr parameter\n         SHALL be set\
    \ to 0.0.0.0.\n   (3)  If the SNMPv2 snmpTrapOID parameter is one of the standard\
    \ traps\n        as defined in RFC1907 [12], the SNMPv1 generic-trap parameter\n\
    \        SHALL be set as follows:\n            snmpTrapOID.0 parameter       \
    \        generic-trap\n            ===============================       ============\n\
    \            1.3.6.1.6.3.1.1.5.1 (coldStart)                  0\n            1.3.6.1.6.3.1.1.5.2\
    \ (warmStart)                  1\n            1.3.6.1.6.3.1.1.5.3 (linkDown) \
    \                  2\n            1.3.6.1.6.3.1.1.5.4 (linkUp)               \
    \      3\n            1.3.6.1.6.3.1.1.5.5 (authenticationFailure)      4\n   \
    \         1.3.6.1.6.3.1.1.5.6 (egpNeighborLoss)            5\n        Otherwise,\
    \ the SNMPv1 generic-trap parameter SHALL be set to 6.\n   (4)  If the SNMPv2\
    \ snmpTrapOID parameter is one of the standard traps\n        as defined in RFC1907\
    \ [12], the SNMPv1 specific-trap parameter\n        SHALL be set to zero.  Otherwise,\
    \ the SNMPv1 specific-trap\n        parameter SHALL be set to the last sub-identifier\
    \ of the SNMPv2\n        snmpTrapOID parameter.\n   (5)  The SNMPv1 time-stamp\
    \ parameter SHALL be taken directly from the\n        SNMPv2 sysUpTime parameter.\n\
    \   (6)  The SNMPv1 variable-bindings SHALL be the SNMPv2 variable-\n        bindings.\
    \  Note, however, that if the SNMPv2 variable-bindings\n        contain any objects\
    \ whose type is Counter64, the translation to\n        SNMPv1 notification parameters\
    \ cannot be performed.  In this\n        case, the notification cannot be encoded\
    \ in an SNMPv1 packet\n        (and so the notification cannot be sent using SNMPv1,\
    \ see\n        section 4.1.3 and section 4.2).\n"
- title: 4.  Approaches to Coexistence in a Multi-lingual Network
  contents:
  - "4.  Approaches to Coexistence in a Multi-lingual Network\n   There are two basic\
    \ approaches to coexistence in a multi-lingual\n   network, multi-lingual implementations\
    \ and proxy implementations.\n   Multi-lingual implementations allow elements\
    \ in a network to\n   communicate with each other using an SNMP version which\
    \ both elements\n   support.  This allows a multi-lingual implementation to communicate\n\
    \   with any mono-lingual implementation, regardless of the SNMP version\n   supported\
    \ by the mono-lingual implementation.\n   Proxy implementations provide a mechanism\
    \ for translating between\n   SNMP versions using a third party network element.\
    \  This allows\n   network elements which support only a single, but different,\
    \ SNMP\n   version to communicate with each other.  Proxy implementations are\n\
    \   also useful for securing communications over an insecure link between\n  \
    \ two locally secure networks.\n"
- title: 4.1.  Multi-lingual implementations
  contents:
  - "4.1.  Multi-lingual implementations\n   This approach requires an entity to support\
    \ multiple SNMP message\n   versions.  Typically this means supporting SNMPv1,\
    \ SNMPv2c, and\n   SNMPv3 message versions.  The behaviour of various types of\
    \ SNMP\n   applications which support multiple message versions is described in\n\
    \   the following sections.  This approach allows entities which support\n   multiple\
    \ SNMP message versions to coexist with and communicate with\n   entities which\
    \ support only a single SNMP message version.\n"
- title: 4.1.1.  Command Generator
  contents:
  - "4.1.1.  Command Generator\n   A command generator must select an appropriate\
    \ message version when\n   sending requests to another entity.  One way to achieve\
    \ this is to\n   consult a local database to select the appropriate message version.\n\
    \   In addition, a command generator MUST 'downgrade' GetBulk requests to\n  \
    \ GetNext requests when selecting SNMPv1 as the message version for an\n   outgoing\
    \ request.  This is done by simply changing the operation type\n   to GetNext,\
    \ ignoring any non-repeaters and max-repetitions values,\n   and setting error-status\
    \ and error-index to zero.\n"
- title: 4.1.2.  Command Responder
  contents:
  - "4.1.2.  Command Responder\n   A command responder must be able to deal with both\
    \ SNMPv1 and SNMPv2\n   access to MIB data.  There are three aspects to dealing\
    \ with this.  A\n   command responder must:\n      -  Deal correctly with SNMPv2\
    \ access to MIB data that returns a\n         Counter64 value while processing\
    \ an SNMPv1 message,\n      -  Deal correctly with SNMPv2 access to MIB data that\
    \ returns one\n         of the three exception values while processing an SNMPv1\n\
    \         message, and\n      -  Map SNMPv2 error codes returned from SNMPv2 access\
    \ to MIB data\n         into SNMPv1 error codes when processing an SNMPv1 message.\n\
    \   Note that SNMPv1 error codes SHOULD NOT be used without any change\n   when\
    \ processing SNMPv2c or SNMPv3 messages, except in the case of\n   proxy forwarding.\
    \  In the case of proxy forwarding, for backwards\n   compatibility, SNMPv1 error\
    \ codes may be used without any change in a\n   forwarded SNMPv2c or SNMPv3 message.\n\
    \   The following sections describe the behaviour of a command responder\n   application\
    \ which supports multiple SNMP message versions, and which\n   uses some combination\
    \ of SNMPv1 and SNMPv2 access to MIB data.\n"
- title: 4.1.2.1.  Handling Counter64
  contents:
  - "4.1.2.1.  Handling Counter64\n   The SMIv2 [7] defines one new syntax that is\
    \ incompatible with SMIv1.\n   This syntax is Counter64.  All other syntaxes defined\
    \ by SMIv2 are\n   compatible with SMIv1.\n   The impact on multi-lingual command\
    \ responders is that they MUST NOT\n   ever return a variable binding containing\
    \ a Counter64 value in a\n   response to a request that was received using the\
    \ SNMPv1 message\n   version.\n   Multi-lingual command responders SHALL take\
    \ the approach that object\n   instances whose type is Counter64 are implicitly\
    \ excluded from view\n   when processing an SNMPv1 message.  So:\n      -  On\
    \ receipt of an SNMPv1 GetRequest-PDU containing a variable\n         binding\
    \ whose name field points to an object instance of type\n         Counter64, a\
    \ GetResponsePDU SHALL be returned, with an error-\n         status of noSuchName\
    \ and the error-index set to the variable\n         binding that caused this error.\n\
    \      -  On an SNMPv1 GetNextRequest-PDU, any object instance which\n       \
    \  contains a syntax of Counter64 SHALL be skipped, and the next\n         accessible\
    \ object instance that does not have the syntax of\n         Counter64 SHALL be\
    \ retrieved. If no such object instance\n         exists, then an error-status\
    \ of noSuchName SHALL be returned,\n         and the error-index SHALL be set\
    \ to the variable binding that\n         caused this error.\n      -  Any SNMPv1\
    \ request which contains a variable binding with a\n         Counter64 value is\
    \ ill-formed, so the foregoing rules do not\n         apply.  If that error is\
    \ detected, a response SHALL NOT be\n         returned, since it would contain\
    \ a copy of the ill-formed\n         variable binding.  Instead, the offending\
    \ PDU SHALL be\n         discarded and the counter snmpInASNParseErrs SHALL be\n\
    \         incremented.\n"
- title: 4.1.2.2.  Mapping SNMPv2 Exceptions
  contents:
  - "4.1.2.2.  Mapping SNMPv2 Exceptions\n   SNMPv2 provides a feature called exceptions,\
    \ which allow an SNMPv2\n   Response PDU to return as much management information\
    \ as possible,\n   even when an error occurs.  However, SNMPv1 does not support\n\
    \   exceptions, and so an SNMPv1 Response PDU cannot return any\n   management\
    \ information, and can only return an error-status and\n   error-index value.\n\
    \   When an SNMPv1 request is received, a command responder MUST check\n   any\
    \ variable bindings returned using SNMPv2 access to MIB data for\n   exception\
    \ values, and convert these exception values into SNMPv1\n   error codes.\n  \
    \ The type of exception that can be returned when accessing MIB data\n   and the\
    \ action taken depends on the type of SNMP request.\n      -  For a GetRequest,\
    \ a noSuchObject or noSuchInstance exception\n         may be returned.\n    \
    \  -  For a GetNextRequest, an endOfMibView exception may be\n         returned.\n\
    \      -  No exceptions will be returned for a SetRequest, and a\n         GetBulkRequest\
    \ should only be received in an SNMPv2c or SNMPv3\n         message, so these\
    \ request types may be ignored when mapping\n         exceptions.\n   Note that\
    \ when a response contains multiple exceptions, it is an\n   implementation choice\
    \ as to which variable binding the error-index\n   should reference.\n"
- title: 4.1.2.2.1.  Mapping noSuchObject and noSuchInstance
  contents:
  - "4.1.2.2.1.  Mapping noSuchObject and noSuchInstance\n   A noSuchObject or noSuchInstance\
    \ exception generated by an SNMPv2\n   access to MIB data indicates that the requested\
    \ object instance can\n   not be returned.  The SNMPv1 error code for this condition\
    \ is\n   noSuchName, and so the error-status field of the response PDU SHALL\n\
    \   be set to noSuchName.  Also, the error-index field SHALL be set to\n   the\
    \ index of the variable binding for which an exception occurred\n   (there may\
    \ be more than one and it is an implementation decision as\n   to which is used),\
    \ and the variable binding list from the original\n   request SHALL be returned\
    \ with the response PDU.\n"
- title: 4.1.2.2.2.  Mapping endOfMibView
  contents:
  - "4.1.2.2.2.  Mapping endOfMibView\n   When an SNMPv2 access to MIB data returns\
    \ a variable binding\n   containing an endOfMibView exception, it indicates that\
    \ there are no\n   object instances available which lexicographically follow the\
    \ object\n   in the request. In an SNMPv1 agent, this condition normally results\n\
    \   in a noSuchName error, and so the error-status field of the response\n   PDU\
    \ SHALL be set to noSuchName. Also, the error-index field SHALL be\n   set to\
    \ the index of the variable binding for which an exception\n   occurred (there\
    \ may be more than one and it is an implementation\n   decision as to which is\
    \ used), and the variable binding list from the\n   original request SHALL be\
    \ returned with the response PDU.\n"
- title: 4.1.2.3.  Processing An SNMPv1 GetRequest
  contents:
  - "4.1.2.3.  Processing An SNMPv1 GetRequest\n   When processing an SNMPv1 GetRequest,\
    \ the following procedures MUST\n   be followed when using an SNMPv2 access to\
    \ MIB data.\n   When such an access to MIB data returns response data using SNMPv2\n\
    \   syntax and error-status values, then:\n   (1)  If the error-status is anything\
    \ other than noError,\n      -  The error status SHALL be translated to an SNMPv1\
    \ error-status\n         using the table in section 4.3, \"Error Status Mappings\"\
    .\n      -  The error-index SHALL be set to the position (in the original\n  \
    \       request) of the variable binding that caused the error-status.\n     \
    \ -  The variable binding list of the response PDU SHALL be made\n         exactly\
    \ the same as the variable binding list that was received\n         in the original\
    \ request.\n   (2)  If the error-status is noError, the variable bindings SHALL\
    \ be\n        checked for any SNMPv2 exception (noSuchObject or\n        noSuchInstance)\
    \ or an SNMPv2 syntax that is unknown to SNMPv1\n        (Counter64).  If there\
    \ are any such variable bindings, one of\n        those variable bindings SHALL\
    \ be selected (it is an\n        implementation choice as to which is selected),\
    \ and:\n      -  The error-status SHALL be set to noSuchName,\n      -  The error-index\
    \ SHALL be set to the position (in the variable\n         binding list of the\
    \ original request) of the selected variable\n         binding, and\n      - \
    \ The variable binding list of the response PDU SHALL be exactly\n         the\
    \ same as the variable binding list that was received in the\n         original\
    \ request.\n   (3)  If there are no such variable bindings, then:\n      -  The\
    \ error-status SHALL be set to noError,\n      -  The error-index SHALL be set\
    \ to zero, and\n      -  The variable binding list of the response SHALL be composed\n\
    \         from the data as it is returned by the access to MIB data.\n"
- title: 4.1.2.4.  Processing An SNMPv1 GetNextRequest
  contents:
  - "4.1.2.4.  Processing An SNMPv1 GetNextRequest\n   When processing an SNMPv1 GetNextRequest,\
    \ the following procedures\n   MUST be followed when an SNMPv2 access to MIB data\
    \ is called as part\n   of processing the request.  There may be repetitive accesses\
    \ to MIB\n   data to try to find the first object which lexicographically follows\n\
    \   each of the objects in the request.  This is implementation specific.\n  \
    \ These procedures are followed only for data returned when using\n   SNMPv2 access\
    \ to MIB data.  Data returned using SNMPv1 access to MIB\n   data may be treated\
    \ in the normal manner for an SNMPv1 request.\n   First, if the access to MIB\
    \ data returns an error-status of anything\n   other than noError:\n   (1)  The\
    \ error status SHALL be translated to an SNMPv1 error-status\n        using the\
    \ table in section 4.3, \"Error Status Mappings\".\n   (2)  The error-index SHALL\
    \ be set to the position (in the original\n        request) of the variable binding\
    \ that caused the error-status.\n   (3)  The variable binding list of the response\
    \ PDU SHALL be exactly\n        the same as the variable binding list that was\
    \ received in the\n        original request.\n   Otherwise, if the access to MIB\
    \ data returns an error-status of\n   noError:\n   (1)  Any variable bindings\
    \ containing an SNMPv2 syntax of Counter64\n        SHALL be considered to be\
    \ not in view, and MIB data SHALL be\n        accessed as many times as is required\
    \ until either a value other\n        than Counter64 is returned, or an error\
    \ occurs.\n   (2)  If there is any variable binding that contains an SNMPv2\n\
    \        exception endOfMibView (there may be more than one, it is an\n      \
    \  implementation decision as to which is chosen):\n      -  The error-status\
    \ SHALL be set to noSuchName,\n      -  The error-index SHALL be set to the position\
    \ (in the variable\n         binding list of the original request) of the variable\
    \ binding\n         that returned such an SNMPv2 exception, and\n      -  The\
    \ variable binding list of the response PDU SHALL be exactly\n         the same\
    \ as the variable binding list that was received in the\n         original request.\n\
    \   (3)  If there are no such variable bindings, then:\n      -  The error-status\
    \ SHALL be set to noError,\n      -  The error-index SHALL be set to zero, and\n\
    \      -  The variable binding list of the response SHALL be composed\n      \
    \   from the data as it is returned by the access to MIB data.\n"
- title: 4.1.2.5.  Processing An SNMPv1 SetRequest
  contents:
  - "4.1.2.5.  Processing An SNMPv1 SetRequest\n   When processing an SNMPv1 SetRequest,\
    \ the following procedures MUST\n   be followed when calling SNMPv2 MIB access\
    \ routines.\n   When such MIB access routines return response data using SNMPv2\n\
    \   syntax and error-status values, and the error-status is anything\n   other\
    \ than noError, then:\n      -  The error status SHALL be translated to an SNMPv1\
    \ error-status\n         using the table in section 4.3, \"Error Status Mappings\"\
    .\n      -  The error-index SHALL be set to the position (in the original\n  \
    \       request) of the variable binding that caused the error-status.\n     \
    \ -  The variable binding list of the response PDU SHALL be made\n         exactly\
    \ the same as the variable binding list that was received\n         in the original\
    \ request.\n"
- title: 4.1.3.  Notification Originator
  contents:
  - "4.1.3.  Notification Originator\n   A notification originator must be able to\
    \ translate between SNMPv1\n   notifications parameters and SNMPv2 notification\
    \ parameters in order\n   to send a notification using a particular SNMP message\
    \ version.  If a\n   notification is generated using SNMPv1 notification parameters,\
    \ and\n   configuration information specifies that notifications be sent using\n\
    \   SNMPv2c or SNMPv3, the notification parameters must be translated to\n   SNMPv2\
    \ notification parameters.  Likewise, if a notification is\n   generated using\
    \ SNMPv2 notification parameters, and configuration\n   information specifies\
    \ that notifications be sent using SNMPv1, the\n   notification parameters must\
    \ be translated to SNMPv1 notification\n   parameters.  In this case, if the notification\
    \ cannot be translated\n   (due to the presence of a Counter64 type), it will\
    \ not be sent using\n   SNMPv1.\n   When a notification originator generates a\
    \ notification, using\n   parameters obtained from the SNMP-TARGET-MIB and SNMP-NOTIFICATION-\n\
    \   MIB, if the SNMP version used to generate the notification is SNMPv1,\n  \
    \ the PDU type used will always be a TrapPDU, regardless of whether the\n   value\
    \ of snmpNotifyType is trap(1) or inform(2).\n   Note also that access control\
    \ and notification filtering are\n   performed in the usual manner for notifications,\
    \ regardless of the\n   SNMP message version to be used when sending a notification.\
    \  The\n   parameters for performing access control are found in the usual\n \
    \  manner (i.e., from inspecting the SNMP-TARGET-MIB and SNMP-\n   NOTIFICATION-MIB).\
    \  In particular, when generating an SNMPv1 Trap, in\n   order to perform the\
    \ access check specified in [18], section 3.3,\n   bullet (3), the notification\
    \ originator may need to generate a value\n   for snmpTrapOID.0 as described in\
    \ section 3.1, bullets (2) and (3) of\n   this document.  If the SNMPv1 notification\
    \ parameters being used were\n   previously translated from a set of SNMPv2 notification\
    \ parameters,\n   this value may already be known, in which case it need not be\n\
    \   generated.\n"
- title: 4.1.4.  Notification Receiver
  contents:
  - "4.1.4.  Notification Receiver\n   There are no special requirements of a notification\
    \ receiver.\n   However, an implementation may find it useful to allow a higher\
    \ level\n   application to request whether notifications should be delivered to\
    \ a\n   higher level application using SNMPv1 notification parameter or\n   SNMPv2\
    \ notification parameters.  The notification receiver would then\n   translate\
    \ notification parameters when required in order to present a\n   notification\
    \ using the desired set of parameters.\n"
- title: 4.2.  Proxy Implementations
  contents:
  - "4.2.  Proxy Implementations\n   A proxy implementation may be used to enable\
    \ communication between\n   entities which support different SNMP message versions.\
    \  This is\n   accomplished in a proxy forwarder application by performing\n \
    \  translations on PDUs.  These translations depend on the PDU type, the\n   SNMP\
    \ version of the packet containing a received PDU, and the SNMP\n   version to\
    \ be used to forward a received PDU.  The following sections\n   describe these\
    \ translations.  In all cases other than those described\n   below, the proxy\
    \ SHALL forward a received PDU without change, subject\n   to size constraints\
    \ as defined in section 5.3 (Community MIB) of this\n   document.  Note that in\
    \ the following sections, the 'Upstream\n   Version' refers to the version used\
    \ between the command generator and\n   the proxy, and the 'Downstream Version'\
    \ refers to the version used\n   between the proxy and the command responder,\
    \ regardless of the PDU\n   type or direction.\n"
- title: 4.2.1.  Upstream Version Greater Than Downstream Version
  contents:
  - "4.2.1.  Upstream Version Greater Than Downstream Version\n   -  If a GetBulkRequest-PDU\
    \ is received and must be forwarded using\n      the SNMPv1 message version, the\
    \ proxy forwarder SHALL set the\n      non-repeaters and max-repetitions fields\
    \ to 0, and SHALL set the\n      tag of the PDU to GetNextRequest-PDU.\n   - \
    \ If a GetResponse-PDU is received whose error-status field has a\n      value\
    \ of 'tooBig', the message will be forwarded using the SNMPv2c\n      or SNMPv3\
    \ message version, and the original request received by\n      the proxy was not\
    \ a GetBulkRequest-PDU, the proxy forwarder SHALL\n      remove the contents of\
    \ the variable-bindings field before\n      forwarding the response.\n   -  If\
    \ a GetResponse-PDU is received whose error-status field has a\n      value of\
    \ 'tooBig,' and the message will be forwarded using the\n      SNMPv2c or SNMPv3\
    \ message version, and the original request\n      received by the proxy was a\
    \ GetBulkRequest-PDU, the proxy\n      forwarder SHALL re-send the forwarded request\
    \ (which would have\n      been altered to be a GetNextRequest-PDU) with all but\
    \ the first\n      variable-binding removed.  The proxy forwarder SHALL only re-send\n\
    \      such a request a single time.  If the resulting GetResponse-PDU\n     \
    \ also contains an error-status field with a value of 'tooBig,' then\n      the\
    \ proxy forwarder SHALL remove the contents of the variable-\n      bindings field,\
    \ and change the error-status field to 'noError'\n      before forwarding the\
    \ response.  Note that if the original request\n      only contained a single\
    \ variable-binding, the proxy may skip re-\n      sending the request and simply\
    \ remove the variable-bindings and\n      change the error-status to 'noError.'\n\
    \   -  If a Trap-PDU is received, and will be forwarded using the SNMPv2c\n  \
    \    or SNMPv3 message version, the proxy SHALL apply the translation\n      rules\
    \ described in section 3, and SHALL forward the notification\n      as an SNMPv2-Trap-PDU.\n\
    \      Note that when an SNMPv1 agent generates a message containing a\n     \
    \ Trap-PDU which is subsequently forwarded by one or more proxy\n      forwarders\
    \ using SNMP versions other than SNMPv1, the community\n      string and agent-addr\
    \ fields from the original message generated\n      by the SNMPv1 agent will be\
    \ preserved through the use of the\n      snmpTrapAddress and snmpTrapCommunity\
    \ nobjects.\n"
- title: 4.2.2.  Upstream Version Less Than Downstream Version
  contents:
  - "4.2.2.  Upstream Version Less Than Downstream Version\n   -  If a GetResponse-PDU\
    \ is received in response to a GetRequest-PDU\n      (previously generated by\
    \ the proxy) which contains variable-\n      bindings of type Counter64 or which\
    \ contain an SNMPv2 exception\n      code, and the message would be forwarded\
    \ using the SNMPv1 message\n      version, the proxy MUST generate an alternate\
    \ response PDU\n      consisting of the request-id and variable bindings from\
    \ the\n      original SNMPv1 request, containing a noSuchName error-status\n \
    \     value, and containing an error-index value indicating the position\n   \
    \   of the variable-binding containing the Counter64 type or exception\n     \
    \ code.\n   -  If a GetResponse-PDU is received in response to a GetNextRequest-\n\
    \      PDU (previously generated by the proxy) which contains variable-\n    \
    \  bindings that contain an SNMPv2 exception code, and the message\n      would\
    \ be forwarded using the SNMPv1 message version, the proxy\n      MUST generate\
    \ an alternate response PDU consisting of the\n      request-id and variable bindings\
    \ from the original SNMPv1 request,\n      containing a noSuchName error-status\
    \ value, and containing an\n      error-index value indicating the position of\
    \ the variable-binding\n      containing the exception code.\n   -  If a GetResponse-PDU\
    \ is received in response to a GetNextRequest-\n      PDU (previously generated\
    \ by the proxy) which contains variable-\n      bindings of type Counter64, the\
    \ proxy MUST re-send the entire\n      GetNextRequest-PDU, with the following\
    \ modifications.  For any\n      variable bindings in the received GetResponse\
    \ which contained\n      Counter64 types, the proxy substitutes the object names\
    \ of these\n      variable bindings for the corresponding object names in the\n\
    \      previously-sent GetNextRequest.  The proxy MUST repeat this\n      process\
    \ until no Counter64 objects are returned.  Note that an\n      implementation\
    \ may attempt to optimize this process of skipping\n      Counter64 objects. \
    \ One approach to such an optimization would be\n      to replace the last sub-identifier\
    \ of the object names of varbinds\n      containing a Counter64 type with 65535\
    \ if that sub-identifier is\n      less than 65535, or with 4294967295 if that\
    \ sub-identifier is\n      greater than 65535.  This approach should skip multiple\
    \ instances\n      of the same Counter64 object, while maintaining compatibility\
    \ with\n      some broken agent implementations (which only use 16-bit integers\n\
    \      for sub-identifiers).\n      Deployment Hint:  The process of repeated\
    \ GetNext requests used by\n      a proxy when Counter64 types are returned can\
    \ be expensive.  When\n      deploying a proxy, this can be avoided by configuring\
    \ the target\n      agents to which the proxy forwards requests in a manner such\
    \ that\n      any objects of type Counter64 are in fact not-in-view for the\n\
    \      principal that the proxy is using when communicating with these\n     \
    \ agents.\n   -  If a GetResponse-PDU is received which contains an SNMPv2 error-\n\
    \      status value of wrongValue, wrongEncoding, wrongType, wrongLength,\n  \
    \    inconsistentValue, noAccess, notWritable, noCreation,\n      inconsistentName,\
    \ resourceUnavailable, commitFailed, undoFailed,\n      or authorizationError,\
    \ the error-status value is modified using\n      the mappings in section 4.3.\n\
    \   -  If an SNMPv2-Trap-PDU is received, and will be forwarded using the\n  \
    \    SNMPv1 message version, the proxy SHALL apply the translation\n      rules\
    \ described in section 3, and SHALL forward the notification\n      as a Trap-PDU.\
    \  Note that if the translation fails due to the\n      existence of a Counter64\
    \ data-type in the received SNMPv2-Trap-\n      PDU, the trap cannot be forwarded\
    \ using SNMPv1.\n   -  If an InformRequest-PDU is received, any configuration\
    \ information\n      indicating that it would be forwarded using the SNMPv1 message\n\
    \      version SHALL be ignored.  An InformRequest-PDU can only be\n      forwarded\
    \ using the SNMPv2c or SNMPv3 message version.  The\n      InformRequest-PDU may\
    \ still be forwarded if there is other\n      configuration information indicating\
    \ that it should be forwarded\n      using SNMPv2c or SNMPv3.\n"
- title: 4.3.  Error Status Mappings
  contents:
  - "4.3.  Error Status Mappings\n   The following tables shows the mappings of SNMPv1\
    \ error-status values\n   into SNMPv2 error-status values, and the mappings of\
    \ SNMPv2 error-\n   status values into SNMPv1 error-status values.\n         \
    \       SNMPv1 error-status    SNMPv2 error-status\n                ===================\
    \    ===================\n                noError                noError\n   \
    \             tooBig                 tooBig\n                noSuchName      \
    \       noSuchName\n                badValue               badValue\n        \
    \        genErr                 genErr\n                SNMPv2 error-status  \
    \  SNMPv1 error-status\n                ===================    ===================\n\
    \                noError                noError\n                tooBig      \
    \           tooBig\n                genErr                 genErr\n          \
    \      wrongValue             badValue\n                wrongEncoding        \
    \  badValue\n                wrongType              badValue\n               \
    \ wrongLength            badValue\n                inconsistentValue      badValue\n\
    \                noAccess               noSuchName\n                notWritable\
    \            noSuchName\n                noCreation             noSuchName\n \
    \               inconsistentName       noSuchName\n                resourceUnavailable\
    \    genErr\n                commitFailed           genErr\n                undoFailed\
    \             genErr\n                authorizationError     noSuchName\n   Whenever\
    \ the SNMPv2 error-status value of authorizationError is\n   translated to an\
    \ SNMPv1 error-status value of noSuchName, the value\n   of snmpInBadCommunityUses\
    \ MUST be incremented.\n"
- title: 5.  Message Processing Models and Security Models
  contents:
  - "5.  Message Processing Models and Security Models\n   In order to adapt SNMPv1\
    \ (and SNMPv2c) into the SNMP architecture,\n   the following models are defined\
    \ in this document:\n      -  The SNMPv1 Message Processing Model\n      -  The\
    \ SNMPv1 Community-Based Security Model\n   The following models are also described\
    \ in this document:\n      -  The SNMPv2c Message Processing Model\n      -  The\
    \ SNMPv2c Community-Based Security Model\n         In most respects, the SNMPv1\
    \ Message Processing Model and the\n         SNMPv2c Message Processing Model\
    \ are identical, and so these\n         are not discussed independently in this\
    \ document.  Differences\n         between the two models are described as required.\n\
    \         Similarly, the SNMPv1 Community-Based Security Model and the\n     \
    \    SNMPv2c Community-Based Security Model are nearly identical,\n         and\
    \ so are not discussed independently.  Differences between\n         these two\
    \ models are also described as required.\n"
- title: 5.1.  Mappings
  contents:
  - "5.1.  Mappings\n   The SNMPv1 (and SNMPv2c) Message Processing Model and Security\
    \ Model\n   require mappings between parameters used in SNMPv1 (and SNMPv2c)\n\
    \   messages, and the version independent parameters used in the SNMP\n   architecture\
    \ [16].  The parameters which MUST be mapped consist of\n   the SNMPv1 (and SNMPv2c)\
    \ community name, and the SNMP securityName\n   and contextEngineID/contextName\
    \ pair.  A MIB module (the SNMP-\n   COMMUNITY-MIB) is provided in this document\
    \ in order to perform these\n   mappings.  This MIB provides mappings in both\
    \ directions, that is, a\n   community name may be mapped to a securityName, contextEngineID,\
    \ and\n   contextName, or the combination of securityName, contextEngineID, and\n\
    \   contextName may be mapped to a community name.\n"
- title: 5.2.  The SNMPv1 MP Model and SNMPv1 Community-based Security Model
  contents:
  - "5.2.  The SNMPv1 MP Model and SNMPv1 Community-based Security Model\n   The SNMPv1\
    \ Message Processing Model handles processing of SNMPv1\n   messages.  The processing\
    \ of messages is handled generally in the\n   same manner as described in RFC1157\
    \ [2], with differences and\n   clarifications as described in the following sections.\
    \  The\n   SnmpMessageProcessingModel value for SNMPv1 is 0 (the value for\n \
    \  SNMPv2c is 1).\n"
- title: 5.2.1.  Processing An Incoming Request
  contents:
  - "5.2.1.  Processing An Incoming Request\n   In RFC1157 [2], section 4.1, item\
    \ (3) for an entity which receives a\n   message, states that various parameters\
    \ are passed to the 'desired\n   authentication scheme.'  The desired authentication\
    \ scheme in this\n   case is the SNMPv1 Community-Based Security Model, which\
    \ will be\n   called using the processIncomingMsg ASI.  The parameters passed\
    \ to\n   this ASI are:\n      -  The messageProcessingModel, which will be 0 (or\
    \ 1 for SNMPv2c).\n      -  The maxMessageSize, which should be the maximum size\
    \ of a\n         message that the receiving entity can generate (since there is\n\
    \         no such value in the received message).\n      -  The securityParameters,\
    \ which consist of the community string\n         and the message's source and\
    \ destination transport domains and\n         addresses.\n      -  The securityModel,\
    \ which will be 1 (or 2 for SNMPv2c).\n      -  The securityLevel, which will\
    \ be noAuthNoPriv.\n      -  The wholeMsg and wholeMsgLength.\n   The Community-Based\
    \ Security Model will attempt to select a row in\n   the snmpCommunityTable. \
    \ This is done by performing a search through\n   the snmpCommunityTable in lexicographic\
    \ order.  The first entry for\n   which the following matching criteria are satisfied\
    \ will be selected:\n      -  The community string is equal to the snmpCommunityName\
    \ value.\n      -  If the snmpCommunityTransportTag is an empty string, it is\n\
    \         ignored for the purpose of matching.  If the\n         snmpCommunityTransportTag\
    \ is not an empty string, the\n         transportDomain and transportAddress from\
    \ which the message was\n         received must match one of the entries in the\n\
    \         snmpTargetAddrTable selected by the snmpCommunityTransportTag\n    \
    \     value.  The snmpTargetAddrTMask object is used as described in\n       \
    \  section 5.3 when checking whether the transportDomain and\n         transportAddress\
    \ matches a entry in the snmpTargetAddrTable.\n   If no such entry can be found,\
    \ an authentication failure occurs as\n   described in RFC1157 [2], and the snmpInBadCommunityNames\
    \ counter is\n   incremented.\n   The parameters returned from the Community-Based\
    \ Security Model are:\n      -  The securityEngineID, which will always be the\
    \ local value of\n         snmpEngineID.0.\n      -  The securityName.\n     \
    \ -  The scopedPDU.  Note that this parameter will actually consist\n        \
    \ of three values, the contextSnmpEngineID, the contextName, and\n         the\
    \ PDU.  These must be separate values, since the first two do\n         not actually\
    \ appear in the message.\n      -  The maxSizeResponseScopedPDU.\n      -  The\
    \ securityStateReference.\n   The appropriate SNMP application will then be called\
    \ (depending on\n   the value of the contextEngineID and the request type in the\
    \ PDU)\n   using the processPdu ASI.  The parameters passed to this ASI are:\n\
    \      -  The messageProcessingModel, which will be 0 (or 1 for SNMPv2c).\n  \
    \    -  The securityModel, which will be 1 (or 2 for SNMPv2c).\n      -  The securityName,\
    \ which was returned from the call to\n         processIncomingMsg.\n      - \
    \ The securityLevel, which is noAuthNoPriv.\n      -  The contextEngineID, which\
    \ was returned as part of the\n         ScopedPDU from the call to processIncomingMsg.\n\
    \      -  The contextName, which was returned as part of the ScopedPDU\n     \
    \    from the call to processIncomingMsg.\n      -  The pduVersion, which should\
    \ indicate an SNMPv1 version PDU (if\n         the message version was SNMPv2c,\
    \ this would be an SNMPv2\n         version PDU).\n      -  The PDU, which was\
    \ returned as part of the ScopedPDU from the\n         call to processIncomingMsg.\n\
    \      -  The maxSizeResponseScopedPDU which was returned from the call\n    \
    \     to processIncomingMsg.\n      -  The stateReference which was returned from\
    \ the call to\n         processIncomingMsg.\n   The SNMP application should process\
    \ the request as described\n   previously in this document.  Note that access\
    \ control is applied by\n   an SNMPv3 command responder application as usual.\
    \  The parameters as\n   passed to the processPdu ASI will be used in calls to\
    \ the\n   isAccessAllowed ASI.\n"
- title: 5.2.2.  Generating An Outgoing Response
  contents:
  - "5.2.2.  Generating An Outgoing Response\n   There is no special processing required\
    \ for generating an outgoing\n   response.  However, the community string used\
    \ in an outgoing response\n   must be the same as the community string from the\
    \ original request.\n   The original community string MUST be present in the stateReference\n\
    \   information of the original request.\n"
- title: 5.2.3.  Generating An Outgoing Notification
  contents:
  - "5.2.3.  Generating An Outgoing Notification\n   In a multi-lingual SNMP entity,\
    \ the parameters used for generating\n   notifications will be obtained by examining\
    \ the SNMP-TARGET-MIB and\n   SNMP-NOTIFICATION-MIB.  These parameters will be\
    \ passed to the SNMPv1\n   Message Processing Model using the sendPdu ASI.  The\
    \ SNMPv1 Message\n   Processing Model will attempt to locate an appropriate community\n\
    \   string in the snmpCommunityTable based on the parameters passed to\n   the\
    \ sendPdu ASI.  This is done by performing a search through the\n   snmpCommunityTable\
    \ in lexicographic order.  The first entry for which\n   the following matching\
    \ criteria are satisfied will be selected:\n      -  The securityName must be\
    \ equal to the snmpCommunitySecurityName\n         value.\n      -  The contextEngineID\
    \ must be equal to the\n         snmpCommunityContextEngineID value.\n      -\
    \  The contextName must be equal to the snmpCommunityContextName\n         value.\n\
    \      -  If the snmpCommunityTransportTag is an empty string, it is\n       \
    \  ignored for the purpose of matching.  If the\n         snmpCommunityTransportTag\
    \ is not an empty string, the\n         transportDomain and transportAddress must\
    \ match one of the\n         entries in the snmpTargetAddrTable selected by the\n\
    \         snmpCommunityTransportTag value.\n   If no such entry can be found,\
    \ the notification is not sent.\n   Otherwise, the community string used in the\
    \ outgoing notification\n   will be the value of the snmpCommunityName column\
    \ of the selected\n   row.\n"
- title: 5.3.  The SNMP Community MIB Module
  contents:
  - "5.3.  The SNMP Community MIB Module\n   The SNMP-COMMUNITY-MIB contains objects\
    \ for mapping between community\n   strings and version-independent SNMP message\
    \ parameters.  In\n   addition, this MIB provides a mechanism for performing source\
    \ address\n   validation on incoming requests, and for selecting community strings\n\
    \   based on target addresses for outgoing notifications.  These two\n   features\
    \ are accomplished by providing a tag in the\n   snmpCommunityTable which selects\
    \ sets of entries in the\n   snmpTargetAddrTable [18].  In addition, the SNMP-COMMUNITY-MIB\n\
    \   augments the snmpTargetAddrTable with a transport address mask value\n   and\
    \ a maximum message size value.  These values are used only where\n   explicitly\
    \ stated.  In cases where the snmpTargetAddrTable is used\n   without mention\
    \ of these augmenting values, the augmenting values\n   should be ignored.\n \
    \  The mask value, snmpTargetAddrTMask, allows selected entries in the\n   snmpTargetAddrTable\
    \ to specify multiple addresses (rather than just a\n   single address per entry).\
    \  This would typically be used to specify a\n   subnet in an snmpTargetAddrTable\
    \ rather than just a single address.\n   The mask value is used to select which\
    \ bits of a transport address\n   must match bits of the corresponding instance\
    \ of\n   snmpTargetAddrTAddress, in order for the transport address to match a\n\
    \   particular entry in the snmpTargetAddrTable.  The value of an\n   instance\
    \ of snmpTargetAddrTMask must always be an OCTET STRING whose\n   length is either\
    \ zero or the same as that of the corresponding\n   instance of snmpTargetAddrTAddress.\n\
    \   Note that the snmpTargetAddrTMask object is only used where\n   explicitly\
    \ stated.  In particular, it is not used when generating\n   notifications (i.e.,\
    \ when generating notifications, entries in the\n   snmpTargetAddrTable only specify\
    \ individual addresses).\n   When checking whether a transport address matches\
    \ an entry in the\n   snmpTargetAddrTable, if the value of snmpTargetAddrTMask\
    \ is a zero-\n   length OCTET STRING, the mask value is ignored, and the value\
    \ of\n   snmpTargetAddrTAddress must exactly match a transport address.\n   Otherwise,\
    \ each bit of each octet in the snmpTargetAddrTMask value\n   corresponds to the\
    \ same bit of the same octet in the\n   snmpTargetAddrTAddress value.  For bits\
    \ that are set in the\n   snmpTargetAddrTMask value (i.e., bits equal to 1), the\
    \ corresponding\n   bits in the snmpTargetAddrTAddress value must match the bits\
    \ in a\n   transport address.  If all such bits match, the transport address is\n\
    \   matched by that snmpTargetAddrTable entry.  Otherwise, the transport\n   address\
    \ is not matched.\n   The maximum message size value, snmpTargetAddrMMS, is used\
    \ to\n   determine the maximum message size acceptable to another SNMP entity\n\
    \   when the value cannot be determined from the protocol.\n"
- title: SNMP-COMMUNITY-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'SNMP-COMMUNITY-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    IpAddress,\n    MODULE-IDENTITY,\n    OBJECT-TYPE,\n    Integer32,\n\
    \    snmpModules\n        FROM SNMPv2-SMI\n    RowStatus,\n    StorageType\n \
    \       FROM SNMPv2-TC\n    SnmpAdminString,\n    SnmpEngineID\n        FROM SNMP-FRAMEWORK-MIB\n\
    \    SnmpTagValue,\n    snmpTargetAddrEntry\n        FROM SNMP-TARGET-MIB\n  \
    \  MODULE-COMPLIANCE,\n    OBJECT-GROUP\n        FROM SNMPv2-CONF;\n"
- title: snmpCommunityMIB MODULE-IDENTITY
  contents:
  - "snmpCommunityMIB MODULE-IDENTITY\n    LAST-UPDATED \"200003060000Z\"        \
    \  -- 6 Mar 2000, midnight\n    ORGANIZATION \"SNMPv3 Working Group\"\n    CONTACT-INFO\
    \ \"WG-email:   snmpv3@lists.tislabs.com\n                  Subscribe:  majordomo@lists.tislabs.com\n\
    \                              In msg body:  subscribe snmpv3\n              \
    \    Chair:      Russ Mundy\n                              TIS Labs at Network\
    \ Associates\n                  Postal:     3060 Washington Rd\n             \
    \                 Glenwood MD 21738\n                              USA\n     \
    \             Email:      mundy@tislabs.com\n                  Phone:      +1-301-854-6889\n\
    \                  Co-editor:  Rob Frye\n                              CoSine\
    \ Communications\n                  Postal:     1200 Bridge Parkway\n        \
    \                      Redwood City, CA 94065\n                              USA\n\
    \                  E-mail:     rfrye@cosinecom.com\n                  Phone: \
    \     +1 703 725 1130\n                  Co-editor:  David B. Levi\n         \
    \                     Nortel Networks\n                  Postal:     3505 Kesterwood\
    \ Drive\n                              Knoxville, TN 37918\n                 \
    \ E-mail:     dlevi@nortelnetworks.com\n                  Phone:      +1 423 686\
    \ 0432\n                  Co-editor:  Shawn A. Routhier\n                    \
    \          Integrated Systems Inc.\n                  Postal:     333 North Ave\
    \ 4th Floor\n                              Wakefield, MA 01880\n             \
    \     E-mail:     sar@epilogue.com\n                  Phone:      +1 781 245 0804\n\
    \                  Co-editor:  Bert Wijnen\n                              Lucent\
    \ Technologies\n                  Postal:     Schagen 33\n                   \
    \           3461 GL Linschoten\n                              Netherlands\n  \
    \                Email:      bwijnen@lucent.com\n                  Phone:    \
    \  +31-348-407-775\n                 \"\n        DESCRIPTION\n            \"This\
    \ MIB module defines objects to help support coexistence\n             between\
    \ SNMPv1, SNMPv2c, and SNMPv3.\"\n        REVISION \"200003060000Z\" -- 6 Mar\
    \ 2000\n        DESCRIPTION \"This version published as RFC 2576.\"\n        REVISION\
    \ \"199905130000Z\" -- 13 May 1999\n        DESCRIPTION \"The Initial Revision\"\
    \n    ::= { snmpModules 18 }\n"
- title: -- Administrative assignments ****************************************
  contents:
  - '-- Administrative assignments ****************************************

    '
- title: snmpCommunityMIBObjects     OBJECT IDENTIFIER ::= { snmpCommunityMIB 1 }
  contents:
  - 'snmpCommunityMIBObjects     OBJECT IDENTIFIER ::= { snmpCommunityMIB 1 }

    '
- title: snmpCommunityMIBConformance OBJECT IDENTIFIER ::= { snmpCommunityMIB 2 }
  contents:
  - 'snmpCommunityMIBConformance OBJECT IDENTIFIER ::= { snmpCommunityMIB 2 }

    '
- title: --
  contents:
  - '--

    '
- title: -- The snmpCommunityTable contains a database of community strings.
  contents:
  - '-- The snmpCommunityTable contains a database of community strings.

    '
- title: -- This table provides mappings between community strings, and the
  contents:
  - '-- This table provides mappings between community strings, and the

    '
- title: -- parameters required for View-based Access Control.
  contents:
  - '-- parameters required for View-based Access Control.

    '
- title: --
  contents:
  - '--

    '
- title: snmpCommunityTable OBJECT-TYPE
  contents:
  - "snmpCommunityTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF SnmpCommunityEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The table of community strings configured in the SNMP\n         engine's\
    \ Local Configuration Datastore (LCD).\"\n    ::= { snmpCommunityMIBObjects 1\
    \ }\n"
- title: snmpCommunityEntry OBJECT-TYPE
  contents:
  - "snmpCommunityEntry OBJECT-TYPE\n    SYNTAX       SnmpCommunityEntry\n    MAX-ACCESS\
    \   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"Information\
    \ about a particular community string.\"\n    INDEX       { IMPLIED snmpCommunityIndex\
    \ }\n    ::= { snmpCommunityTable 1 }\n"
- title: SnmpCommunityEntry ::= SEQUENCE {
  contents:
  - "SnmpCommunityEntry ::= SEQUENCE {\n    snmpCommunityIndex               SnmpAdminString,\n\
    \    snmpCommunityName                OCTET STRING,\n    snmpCommunitySecurityName\
    \        SnmpAdminString,\n    snmpCommunityContextEngineID     SnmpEngineID,\n\
    \    snmpCommunityContextName         SnmpAdminString,\n    snmpCommunityTransportTag\
    \        SnmpTagValue,\n    snmpCommunityStorageType         StorageType,\n  \
    \  snmpCommunityStatus              RowStatus\n"
- title: '}'
  contents:
  - '}

    '
- title: snmpCommunityIndex OBJECT-TYPE
  contents:
  - "snmpCommunityIndex OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE(1..32))\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"The unique index value of a row in this table.\"\n    ::= { snmpCommunityEntry\
    \ 1 }\n"
- title: snmpCommunityName OBJECT-TYPE
  contents:
  - "snmpCommunityName OBJECT-TYPE\n    SYNTAX       OCTET STRING\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"The community\
    \ string for which a row in this table\n         represents a configuration.\"\
    \n    ::= { snmpCommunityEntry 2 }\n"
- title: snmpCommunitySecurityName OBJECT-TYPE
  contents:
  - "snmpCommunitySecurityName OBJECT-TYPE\n    SYNTAX       SnmpAdminString (SIZE(1..32))\n\
    \    MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n   \
    \     \"A human readable string representing the corresponding\n         value\
    \ of snmpCommunityName in a Security Model\n         independent format.\"\n \
    \   ::= { snmpCommunityEntry 3 }\n"
- title: snmpCommunityContextEngineID OBJECT-TYPE
  contents:
  - "snmpCommunityContextEngineID OBJECT-TYPE\n    SYNTAX       SnmpEngineID\n   \
    \ MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n      \
    \  \"The contextEngineID indicating the location of the\n         context in which\
    \ management information is accessed\n         when using the community string\
    \ specified by the\n         corresponding instance of snmpCommunityName.\n  \
    \       The default value is the snmpEngineID of the entity in\n         which\
    \ this object is instantiated.\"\n    ::= { snmpCommunityEntry 4 }\n"
- title: snmpCommunityContextName OBJECT-TYPE
  contents:
  - "snmpCommunityContextName OBJECT-TYPE\n    SYNTAX       SnmpAdminString (SIZE(0..32))\n\
    \    MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n   \
    \     \"The context in which management information is accessed\n         when\
    \ using the community string specified by the corresponding\n         instance\
    \ of snmpCommunityName.\"\n    DEFVAL      { ''H }   -- the empty string\n   \
    \ ::= { snmpCommunityEntry 5 }\n"
- title: snmpCommunityTransportTag OBJECT-TYPE
  contents:
  - "snmpCommunityTransportTag OBJECT-TYPE\n    SYNTAX       SnmpTagValue\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"This object\
    \ specifies a set of transport endpoints\n         from which a command responder\
    \ application will accept\n         management requests.  If a management request\
    \ containing\n         this community is received on a transport endpoint other\n\
    \         than the transport endpoints identified by this object,\n         the\
    \ request is deemed unauthentic.\n         The transports identified by this object\
    \ are specified\n         in the snmpTargetAddrTable.  Entries in that table\n\
    \         whose snmpTargetAddrTagList contains this tag value\n         are identified.\n\
    \         If the value of this object has zero-length, transport\n         endpoints\
    \ are not checked when authenticating messages\n         containing this community\
    \ string.\"\n    DEFVAL      { ''H }   -- the empty string\n    ::= { snmpCommunityEntry\
    \ 6 }\n"
- title: snmpCommunityStorageType OBJECT-TYPE
  contents:
  - "snmpCommunityStorageType OBJECT-TYPE\n    SYNTAX       StorageType\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"The storage\
    \ type for this conceptual row in the\n         snmpCommunityTable.  Conceptual\
    \ rows having the value\n         'permanent' need not allow write-access to any\n\
    \         columnar object in the row.\"\n    ::= { snmpCommunityEntry 7 }\n"
- title: snmpCommunityStatus OBJECT-TYPE
  contents:
  - "snmpCommunityStatus OBJECT-TYPE\n    SYNTAX       RowStatus\n    MAX-ACCESS \
    \  read-create\n    STATUS       current\n    DESCRIPTION\n        \"The status\
    \ of this conceptual row in the snmpCommunityTable.\n         An entry in this\
    \ table is not qualified for activation\n         until instances of all corresponding\
    \ columns have been\n         initialized, either through default values, or through\n\
    \         Set operations.  The snmpCommunityName and\n         snmpCommunitySecurityName\
    \ objects must be explicitly set.\n         There is no restriction on setting\
    \ columns in this table\n         when the value of snmpCommunityStatus is active(1).\"\
    \n    ::= { snmpCommunityEntry 8 }\n"
- title: --
  contents:
  - '--

    '
- title: -- The snmpTargetAddrExtTable
  contents:
  - '-- The snmpTargetAddrExtTable

    '
- title: --
  contents:
  - '--

    '
- title: snmpTargetAddrExtTable OBJECT-TYPE
  contents:
  - "snmpTargetAddrExtTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF SnmpTargetAddrExtEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The table of mask and mms values associated with the\n         snmpTargetAddrTable.\n\
    \         The snmpTargetAddrExtTable augments the\n         snmpTargetAddrTable\
    \ with a transport address mask value\n         and a maximum message size value.\
    \  The transport address\n         mask allows entries in the snmpTargetAddrTable\
    \ to define\n         a set of addresses instead of just a single address.\n \
    \        The maximum message size value allows the maximum\n         message size\
    \ of another SNMP entity to be configured for\n         use in SNMPv1 (and SNMPv2c)\
    \ transactions, where the\n         message format does not specify a maximum\
    \ message size.\"\n    ::= { snmpCommunityMIBObjects 2 }\n"
- title: snmpTargetAddrExtEntry OBJECT-TYPE
  contents:
  - "snmpTargetAddrExtEntry OBJECT-TYPE\n    SYNTAX       SnmpTargetAddrExtEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"Information about a particular mask and mms value.\"\n    AUGMENTS\
    \       { snmpTargetAddrEntry }\n    ::= { snmpTargetAddrExtTable 1 }\n"
- title: SnmpTargetAddrExtEntry ::= SEQUENCE {
  contents:
  - "SnmpTargetAddrExtEntry ::= SEQUENCE {\n    snmpTargetAddrTMask              OCTET\
    \ STRING,\n    snmpTargetAddrMMS                Integer32\n"
- title: '}'
  contents:
  - '}

    '
- title: snmpTargetAddrTMask OBJECT-TYPE
  contents:
  - "snmpTargetAddrTMask OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (0..255))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The mask value associated with an entry in the\n         snmpTargetAddrTable.\
    \  The value of this object must\n         have the same length as the corresponding\
    \ instance of\n         snmpTargetAddrTAddress, or must have length 0.  An\n \
    \        attempt to set it to any other value will result in\n         an inconsistentValue\
    \ error.\n         The value of this object allows an entry in the\n         snmpTargetAddrTable\
    \ to specify multiple addresses.\n         The mask value is used to select which\
    \ bits of\n         a transport address must match bits of the corresponding\n\
    \         instance of snmpTargetAddrTAddress, in order for the\n         transport\
    \ address to match a particular entry in the\n         snmpTargetAddrTable.  Bits\
    \ which are 1 in the mask\n         value indicate bits in the transport address\
    \ which\n         must match bits in the snmpTargetAddrTAddress value.\n     \
    \    Bits which are 0 in the mask indicate bits in the\n         transport address\
    \ which need not match.  If the\n         length of the mask is 0, the mask should\
    \ be treated\n         as if all its bits were 1 and its length were equal\n \
    \        to the length of the corresponding value of\n         snmpTargetAddrTable.\n\
    \         This object may not be modified while the value of the\n         corresponding\
    \ instance of snmpTargetAddrRowStatus is\n         active(1).  An attempt to set\
    \ this object in this case\n         will result in an inconsistentValue error.\"\
    \n    DEFVAL { ''H }\n    ::= { snmpTargetAddrExtEntry 1 }\n"
- title: snmpTargetAddrMMS OBJECT-TYPE
  contents:
  - "snmpTargetAddrMMS OBJECT-TYPE\n    SYNTAX      Integer32 (0|484..2147483647)\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The maximum message size value associated with an entry\n         in the\
    \ snmpTargetAddrTable.\"\n    DEFVAL { 484 }\n    ::= { snmpTargetAddrExtEntry\
    \ 2 }\n"
- title: --
  contents:
  - '--

    '
- title: -- The snmpTrapAddress and snmpTrapCommunity objects are included
  contents:
  - '-- The snmpTrapAddress and snmpTrapCommunity objects are included

    '
- title: -- in notifications that are forwarded by a proxy, which were
  contents:
  - '-- in notifications that are forwarded by a proxy, which were

    '
- title: -- originally received as SNMPv1 Trap messages.
  contents:
  - '-- originally received as SNMPv1 Trap messages.

    '
- title: --
  contents:
  - '--

    '
- title: snmpTrapAddress OBJECT-TYPE
  contents:
  - "snmpTrapAddress OBJECT-TYPE\n    SYNTAX      IpAddress\n    MAX-ACCESS  accessible-for-notify\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The value of the agent-addr\
    \ field of a Trap PDU which\n         is forwarded by a proxy forwarder application\
    \ using\n         an SNMP version other than SNMPv1.  The value of this\n    \
    \     object SHOULD contain the value of the agent-addr field\n         from the\
    \ original Trap PDU as generated by an SNMPv1\n         agent.\"\n    ::= { snmpCommunityMIBObjects\
    \ 3 }\n"
- title: snmpTrapCommunity OBJECT-TYPE
  contents:
  - "snmpTrapCommunity OBJECT-TYPE\n    SYNTAX      OCTET STRING\n    MAX-ACCESS \
    \ accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n        \"\
    The value of the community string field of an SNMPv1\n         message containing\
    \ a Trap PDU which is forwarded by a\n         a proxy forwarder application using\
    \ an SNMP version\n         other than SNMPv1.  The value of this object SHOULD\n\
    \         contain the value of the community string field from\n         the original\
    \ SNMPv1 message containing a Trap PDU as\n         generated by an SNMPv1 agent.\"\
    \n    ::= { snmpCommunityMIBObjects 4 }\n"
- title: -- Conformance Information *******************************************
  contents:
  - '-- Conformance Information *******************************************

    '
- title: snmpCommunityMIBCompliances OBJECT IDENTIFIER
  contents:
  - "snmpCommunityMIBCompliances OBJECT IDENTIFIER\n                            ::=\
    \ { snmpCommunityMIBConformance 1 }\n"
- title: snmpCommunityMIBGroups      OBJECT IDENTIFIER
  contents:
  - "snmpCommunityMIBGroups      OBJECT IDENTIFIER\n                            ::=\
    \ { snmpCommunityMIBConformance 2 }\n"
- title: -- Compliance statements
  contents:
  - '-- Compliance statements

    '
- title: snmpCommunityMIBCompliance MODULE-COMPLIANCE
  contents:
  - "snmpCommunityMIBCompliance MODULE-COMPLIANCE\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The compliance statement for SNMP engines which\n         implement\
    \ the SNMP-COMMUNITY-MIB.\"\n    MODULE       -- this module\n        MANDATORY-GROUPS\
    \ { snmpCommunityGroup }\n        OBJECT           snmpCommunityName\n       \
    \ MIN-ACCESS       read-only\n        DESCRIPTION     \"Write access is not required.\"\
    \n        OBJECT           snmpCommunitySecurityName\n        MIN-ACCESS     \
    \  read-only\n        DESCRIPTION     \"Write access is not required.\"\n    \
    \    OBJECT           snmpCommunityContextEngineID\n        MIN-ACCESS       read-only\n\
    \        DESCRIPTION     \"Write access is not required.\"\n        OBJECT   \
    \        snmpCommunityContextName\n        MIN-ACCESS       read-only\n      \
    \  DESCRIPTION     \"Write access is not required.\"\n        OBJECT         \
    \  snmpCommunityTransportTag\n        MIN-ACCESS       read-only\n        DESCRIPTION\
    \     \"Write access is not required.\"\n        OBJECT           snmpCommunityStorageType\n\
    \        MIN-ACCESS       read-only\n        DESCRIPTION     \"Write access is\
    \ not required.\"\n        OBJECT           snmpCommunityStatus\n        MIN-ACCESS\
    \       read-only\n        DESCRIPTION     \"Write access is not required.\"\n\
    \    ::= { snmpCommunityMIBCompliances 1 }\n"
- title: snmpProxyTrapForwardCompliance MODULE-COMPLIANCE
  contents:
  - "snmpProxyTrapForwardCompliance MODULE-COMPLIANCE\n    STATUS       current\n\
    \    DESCRIPTION\n        \"The compliance statement for SNMP engines which\n\
    \         contain a proxy forwarding application which is\n         capable of\
    \ forwarding SNMPv1 traps using SNMPv2c\n         or SNMPv3.\"\n    MODULE   \
    \    -- this module\n        MANDATORY-GROUPS { snmpProxyTrapForwardGroup }\n\
    \    ::= { snmpCommunityMIBCompliances 2 }\n"
- title: snmpCommunityGroup OBJECT-GROUP
  contents:
  - "snmpCommunityGroup OBJECT-GROUP\n    OBJECTS {\n        snmpCommunityName,\n\
    \        snmpCommunitySecurityName,\n        snmpCommunityContextEngineID,\n \
    \       snmpCommunityContextName,\n        snmpCommunityTransportTag,\n      \
    \  snmpCommunityStorageType,\n        snmpCommunityStatus,\n        snmpTargetAddrTMask,\n\
    \        snmpTargetAddrMMS\n    }\n    STATUS       current\n    DESCRIPTION\n\
    \        \"A collection of objects providing for configuration\n         of community\
    \ strings for SNMPv1 (and SNMPv2c) usage.\"\n    ::= { snmpCommunityMIBGroups\
    \ 1 }\n"
- title: snmpProxyTrapForwardGroup OBJECT-GROUP
  contents:
  - "snmpProxyTrapForwardGroup OBJECT-GROUP\n    OBJECTS {\n        snmpTrapAddress,\n\
    \        snmpTrapCommunity\n    }\n    STATUS       current\n    DESCRIPTION\n\
    \        \"Objects which are used by proxy forwarding applications\n         when\
    \ translating traps between SNMP versions.  These are\n         used to preserve\
    \ SNMPv1-specific information when\n         translating to SNMPv2c or SNMPv3.\"\
    \n    ::= { snmpCommunityMIBGroups 3 }\n"
- title: END
  contents:
  - 'END

    '
- title: 6.  Intellectual Property
  contents:
  - '6.  Intellectual Property

    '
- title: The IETF takes no position regarding the validity or scope of any
  contents:
  - 'The IETF takes no position regarding the validity or scope of any

    '
- title: intellectual property or other rights that might be claimed to pertain
  contents:
  - 'intellectual property or other rights that might be claimed to pertain

    '
- title: to the implementation or use of the technology described in this
  contents:
  - 'to the implementation or use of the technology described in this

    '
- title: document or the extent to which any license under such rights might or
  contents:
  - 'document or the extent to which any license under such rights might or

    '
- title: might not be available; neither does it represent that it has made any
  contents:
  - 'might not be available; neither does it represent that it has made any

    '
- title: effort to identify any such rights.  Information on the IETF's
  contents:
  - 'effort to identify any such rights.  Information on the IETF''s

    '
- title: procedures with respect to rights in standards-track and standards-
  contents:
  - 'procedures with respect to rights in standards-track and standards-

    '
- title: related documentation can be found in BCP-11.  Copies of claims of
  contents:
  - 'related documentation can be found in BCP-11.  Copies of claims of

    '
- title: rights made available for publication and any assurances of licenses to
  contents:
  - 'rights made available for publication and any assurances of licenses to

    '
- title: be made available, or the result of an attempt made to obtain a general
  contents:
  - 'be made available, or the result of an attempt made to obtain a general

    '
- title: license or permission for the use of such proprietary rights by
  contents:
  - 'license or permission for the use of such proprietary rights by

    '
- title: implementors or users of this specification can be obtained from the
  contents:
  - 'implementors or users of this specification can be obtained from the

    '
- title: IETF Secretariat.
  contents:
  - 'IETF Secretariat.

    '
- title: The IETF invites any interested party to bring to its attention any
  contents:
  - 'The IETF invites any interested party to bring to its attention any

    '
- title: copyrights, patents or patent applications, or other proprietary rights
  contents:
  - 'copyrights, patents or patent applications, or other proprietary rights

    '
- title: which may cover technology that may be required to practice this
  contents:
  - 'which may cover technology that may be required to practice this

    '
- title: standard.  Please address the information to the IETF Executive
  contents:
  - 'standard.  Please address the information to the IETF Executive

    '
- title: Director.
  contents:
  - 'Director.

    '
- title: 7.  Acknowledgments
  contents:
  - '7.  Acknowledgments

    '
- title: This document is the result of the efforts of the SNMPv3 Working Group.
  contents:
  - 'This document is the result of the efforts of the SNMPv3 Working Group.

    '
- title: The design of the SNMP-COMMUNITY-MIB incorporates work done by the
  contents:
  - 'The design of the SNMP-COMMUNITY-MIB incorporates work done by the

    '
- title: 'authors of SNMPv2*:'
  contents:
  - "authors of SNMPv2*:\n      Jeff Case (SNMP Research, Inc.)\n      David Harrington\
    \ (Cabletron Systems Inc.)\n      David Levi (SNMP Research, Inc.)\n      Brian\
    \ O'Keefe (Hewlett Packard)\n      Jon Saperia (IronBridge Networks, Inc.)\n \
    \     Steve Waldbusser (International Network Services)\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Although SNMPv1 and SNMPv2 do not provide any\
    \ security, allowing\n   community names to be mapped into securityName/contextName\
    \ provides\n   the ability to use view-based access control to limit the access\
    \ of\n   unsecured SNMPv1 and SNMPv2 operations.  In fact, it is important for\n\
    \   network administrators to make use of this capability in order to\n   avoid\
    \ unauthorized access to MIB data that would otherwise be secure.\n   Further,\
    \ the SNMP-COMMUNITY-MIB has the potential to expose community\n   strings which\
    \ provide access to more information than that which is\n   available using the\
    \ usual 'public' community string.  For this\n   reason, a security administrator\
    \ may wish to limit accessibility to\n   the SNMP-COMMUNITY-MIB, and in particular,\
    \ to make it inaccessible\n   when using the 'public' community string.\n   When\
    \ a proxy implementation translates messages between SNMPv1 (or\n   SNMPv2c) and\
    \ SNMPv3, there may be a loss of security.  For example,\n   an SNMPv3 message\
    \ received using authentication and privacy which is\n   subsequently forwarded\
    \ using SNMPv1 will lose the security benefits\n   of using authentication and\
    \ privacy.  Careful configuration of\n   proxies is required to address such situations.\
    \  One approach to deal\n   with such situations might be to use an encrypted\
    \ tunnel.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1]  Rose, M. and K. McCloghrie, \"Structure and Identification\
    \ of\n        Management Information for TCP/IP-based internets\", STD 16, RFC\n\
    \        1155, May 1990.\n   [2]  Case, J., Fedor, M., Schoffstall, M. and J.\
    \ Davin, \"Simple\n        Network Management Protocol\", STD 15, RFC 1157, May\
    \ 1990.\n   [3]  McCloghrie, K. and M. Rose, Editors, \"Concise MIB Definitions\"\
    ,\n        STD 16, RFC 1212, March 1991.\n   [4]  Rose, M., \"A Convention for\
    \ Defining Traps for use with the\n        SNMP\", RFC 1215, March 1991.\n   [5]\
    \  McCloghrie, K. and M. Rose, \"A Convention for Describing SNMP-\n        based\
    \ Agents\", RFC 1303, February 1992.\n   [6]  Case, J., McCloghrie, K., Rose,\
    \ M. and S.Waldbusser,\n        \"Introduction to Community-based SNMPv2\", RFC\
    \ 1901, January\n        1996.\n   [7]  McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J., Rose,\n        M.  and S. Waldbusser, \"Structure of Management\
    \ Information\n        Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n  \
    \ [8]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n     \
    \   M.  and S. Waldbusser, \"Textual Conventions for SMIv2\", STD 58,\n      \
    \  RFC 2579, April 1999.\n   [9]  McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J., Rose,\n        M.  and S. Waldbusser, \"Conformance Statements\
    \ for SMIv2\", STD\n        58, RFC 2580, April 1999.\n   [10] Case, J., McCloghrie,\
    \ K., Rose, M. and S.Waldbusser, \"Protocol\n        Operations for Version 2\
    \ of the Simple Network Management\n        Protocol (SNMPv2)\", RFC 1905, January\
    \ 1996.\n   [11] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Transport\n\
    \        Mappings for Version 2 of the Simple Network Management Protocol\n  \
    \      (SNMPv2)\", RFC 1906, January 1996.\n   [12] Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser,\n        \"Management Information Base for Version\
    \ 2 of the Simple Network\n        Management Protocol (SNMPv2)\", RFC 1907, January\
    \ 1996.\n   [13] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \
    \   \"Coexistence between Version 1 and Version 2 of the Internet-\n        standard\
    \ Network Management Framework\", RFC 1908, January 1996.\n   [14] Levi, D. and\
    \ B. Wijnen, \"Mapping SNMPv2 onto SNMPv1 within a\n        bi-lingual SNMP agent\"\
    , RFC 2089, January 1997.\n   [15] Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [16]\
    \ Harrington, D. and B. Wijnen, \"An Architecture for Describing\n        SNMP\
    \ Management Frameworks\", RFC 2571, May 1999.\n   [17] Case, J., Harrington,\
    \ D. and B. Wijnen, \"Message Processing and\n        Dispatching for the Simple\
    \ Network Management Protocol (SNMP)\",\n        RFC 2572, May 1999.\n   [18]\
    \ Levi, D., Meyer, P. and B. Stewart, \"SNMP Applications\", RFC\n        2573,\
    \ May 1999.\n   [19] Blumenthal, U. and Wijnen, B., \"The User-Based Security\
    \ Model\n        for Version 3 of the Simple Network Management Protocol (SNMP)\"\
    ,\n        RFC 2574, May 1999.\n   [20] Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based Access\n        Control Model for the Simple Network Management\
    \ Protocol\n        (SNMP)\", RFC 2575, May 1999.\n"
- title: 10.  Editor's Addresses
  contents:
  - "10.  Editor's Addresses\n   Rob Frye\n   CoSine Communications\n   1200 Bridge\
    \ Parkway\n   Redwood City, CA 94065\n   U.S.A.\n   Phone: +1 703 725 1130\n \
    \  EMail: rfrye@cosinecom.com\n   David B. Levi\n   Nortel Networks\n   3505 Kesterwood\
    \ Drive\n   Knoxville, TN 37918\n   U.S.A.\n   Phone: +1 423 686 0432\n   EMail:\
    \ dlevi@nortelnetworks.com\n   Shawn A. Routhier\n   Integrated Systems Inc.\n\
    \   333 North Ave 4th Floor\n   Wakefield MA 01880\n   U.S.A.\n   Phone: + 1 781\
    \ 245 0804\n   EMail: sar@epilogue.com\n   Bert Wijnen\n   Lucent Technologies\n\
    \   Schagen 33\n   3461 GL Linschoten\n   Netherlands\n   Phone: +31 348 407-775\n\
    \   EMail: wijnen@lucent.com\n"
- title: A.  Changes From RFC1908
  contents:
  - "A.  Changes From RFC1908\n   -  Editorial changes to comply with current RFC\
    \ requirements.\n   -  Added/updated copyright statements.\n   -  Added Intellectual\
    \ Property section.\n   -  Replaced old introduction with complete new introduction/overview.\n\
    \   -  Added content for the Security Considerations Section.\n   -  Updated References\
    \ to current documents.\n   -  Updated text to use current SNMP terminology.\n\
    \   -  Added coexistence for/with SNMPv3.\n   -  Added description for SNMPv1\
    \ and SNMPv2c Message Processing\n      Models and SNMPv1 and SNMPv2c Community-based\
    \ Security\n      Models.\n   -  Added snmpCommunityMIB so that SNMPv1 and SNMPv2\
    \ community\n      strings can be mapped into the SNMP Version Independent\n \
    \     paramaters which can then be used for access control using the\n      standard\
    \ SNMPv3 View-based Access Control Model and the\n      snmpVacmMIB.\n   -  Added\
    \ two MIB objects such that when an SNMPv1 notification\n      (trap) must be\
    \ converted into an SNMPv2 notification we add\n      those two objects in order\
    \ to preserve information about the\n      address and community of the originating\
    \ SNMPv1 agent.\n   -  Included (and extended) from RFC2089 the SNMPv2 to SNMPv1\n\
    \      mapping within a multi-lingual SNMP Engine.\n   -  Use keywords from RFC\
    \ 2119 to describe requirements for\n      compliance.\n   -  Changed/added some\
    \ rules for converting a MIB module from\n      SMIv1 to SMIv2.\n   -  Extended\
    \ and improved the description of Proxy Forwarder\n      behaviour when multiple\
    \ SNMP versions are involved.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
