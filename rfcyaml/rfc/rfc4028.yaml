- contents:
  - '        Session Timers in the Session Initiation Protocol (SIP)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines an extension to the Session Initiation Protocol\n
    \  (SIP).  This extension allows for a periodic refresh of SIP sessions\n   through
    a re-INVITE or UPDATE request.  The refresh allows both user\n   agents and proxies
    to determine whether the SIP session is still\n   active.  The extension defines
    two new header fields:\n   Session-Expires, which conveys the lifetime of the
    session, and\n   Min-SE, which conveys the minimum allowed value for the session\n
    \  timer.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . .
    . .   3\n   3.  Overview of Operation  . . . . . . . . . . . . . . . . . . .   4\n
    \  4.  Session-Expires Header Field Definition  . . . . . . . . . .   6\n   5.
    \ Min-SE Header Field Definition . . . . . . . . . . . . . . .   8\n   6.  422
    Response Code Definition . . . . . . . . . . . . . . . .   8\n   7.  UAC Behavior
    . . . . . . . . . . . . . . . . . . . . . . . .   9\n       7.1.  Generating an
    Initial Session Refresh Request  . . . .   9\n       7.2.  Processing a 2xx Response
    \ . . . . . . . . . . . . . .   9\n       7.3.  Processing a 422 Response  . .
    . . . . . . . . . . . .  11\n       7.4.  Generating Subsequent Session Refresh
    Requests . . . .  11\n   8.  Proxy Behavior . . . . . . . . . . . . . . . . .
    . . . . . .  12\n       8.1.  Processing of Requests . . . . . . . . . . . . .
    . . .  13\n       8.2.  Processing of Responses  . . . . . . . . . . . . . . .
    \ 14\n       8.3.  Session Expiration . . . . . . . . . . . . . . . . . .  15\n
    \  9.  UAS Behavior . . . . . . . . . . . . . . . . . . . . . . . .  15\n   10.
    Performing Refreshes . . . . . . . . . . . . . . . . . . . .  17\n   11. Security
    Considerations  . . . . . . . . . . . . . . . . . .  18\n       11.1. Inside Attacks
    . . . . . . . . . . . . . . . . . . . .  18\n       11.2. Outside Attacks  . .
    . . . . . . . . . . . . . . . . .  19\n   12. IANA Considerations  . . . . . .
    . . . . . . . . . . . . . .  19\n       12.1. IANA Registration of Min-SE and
    Session-Expires\n             Header Fields  . . . . . . . . . . . . . . . . .
    . . .  19\n       12.2. IANA Registration of the 422 (Session Interval Too\n             Small)
    Response Code . . . . . . . . . . . . . . . . .  20\n       12.3. IANA Registration
    of the 'timer' Option Tag  . . . . .  20\n   13. Example Call Flow  . . . . .
    . . . . . . . . . . . . . . . .  20\n   14. Acknowledgements . . . . . . . . .
    . . . . . . . . . . . . .  25\n   15. References . . . . . . . . . . . . . . .
    . . . . . . . . . .  25\n       15.1. Normative References . . . . . . . . . .
    . . . . . . .  25\n       15.2. Informative References . . . . . . . . . . . .
    . . . .  26\n   Authors' Addresses. . . . . . . . . . . . . . . . . . . . . .
    . . 26\n   Full Copyright Statement. . . . . . . . . . . . . . . . . . . . . 27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [2] does not define
    a keepalive\n   mechanism for the sessions it establishes.  Although the user
    agents\n   may be able to determine whether the session has timed out by using\n
    \  session specific mechanisms, proxies will not be able to do so.  The\n   result
    is that call stateful proxies will not always be able to\n   determine whether
    a session is still active.  For instance, when a\n   user agent fails to send
    a BYE message at the end of a session, or\n   when the BYE message gets lost due
    to network problems, a call\n   stateful proxy will not know when the session
    has ended.  In this\n   situation, the call stateful proxy will retain state for
    the call and\n   has no method to determine when the call state information no
    longer\n   applies.\n   To resolve this problem, this extension defines a keepalive
    mechanism\n   for SIP sessions.  UAs send periodic re-INVITE or UPDATE [3] requests\n
    \  (referred to as session refresh requests) to keep the session alive.\n   The
    interval for the session refresh requests is determined through a\n   negotiation
    mechanism defined here.  If a session refresh request is\n   not received before
    the interval passes, the session is considered\n   terminated.  Both UAs are supposed
    to send a BYE, and call stateful\n   proxies can remove any state for the call.\n
    \  This refresh mechanism has additional applications.  A user agent\n   would
    like to determine whether the session is still active for the\n   same reasons
    a call stateful proxy server would.  This determination\n   can be made at a user
    agent without the use of SIP level mechanisms;\n   for audio sessions, periodic
    RTCP packets serve as an indication of\n   liveness [5].  However, it is desirable
    to separate indications of\n   SIP session liveness from the details of the particular
    session.\n   Another application of the session timer is in the construction of
    a\n   SIP Network Address Translator (NAT) Application Level Gateway (ALG)\n   [6].
    \ The ALG embedded in a NAT will need to maintain state for the\n   duration of
    a call.  This state must eventually be removed.  Relying\n   on a BYE to trigger
    the removal of state, besides being unreliable,\n   introduces a potential denial
    of service attack.\n   This document provides an extension to SIP that defines
    a session\n   expiration mechanism.  Periodic refreshes, through re-INVITEs or\n
    \  UPDATEs, are used to keep the session active.  The extension is\n   sufficiently
    backward compatible with SIP that it works as long as\n   either one of the two
    participants in a dialog understands the\n   extension.  Two new header fields
    (Session-Expires and Min-SE) and a\n   new response code (422) are defined.  Session-Expires
    conveys the\n   duration of the session, and Min-SE conveys the minimum allowed
    value\n   for the session expiration.  The 422 response code indicates that the\n
    \  session timer duration was too small.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words 'MUST', 'MUST NOT', 'REQUIRED',\n
    \  'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',\n   and
    'OPTIONAL' are to be interpreted as described in RFC 2119 [1] and\n   indicate
    requirement levels for compliant SIP implementations.\n   Additionally, we define
    the following terms:\n   Session Interval: The maximum amount of time that can
    occur between\n      session refresh requests in a dialog before the session will
    be\n      considered timed out.  The session interval is conveyed in the\n      Session-Expires
    header field, which is defined here.  The UAS\n      obtains this value from the
    Session-Expires header field in a 2xx\n      response to a session refresh request
    that it sends.  Proxies and\n      UACs determine this value from the Session-Expires
    header field in\n      a 2xx response to a session refresh request that they receive.\n
    \  Minimum Timer: Because of the processing load of mid-dialog requests,\n      all
    elements (proxy, UAC, UAS) can have a configured minimum value\n      for the
    session interval that they are willing to accept.  This\n      value is called
    the minimum timer.\n   Session Expiration: The time at which an element will consider
    the\n      session timed out, if no successful session refresh transaction\n      occurs
    beforehand.\n   Session Refresh Request: An INVITE or UPDATE request processed\n
    \     according to the rules of this specification.  If the request\n      generates
    a 2xx response, the session expiration is increased to\n      the current time
    plus the session interval obtained from the\n      response.  A session refresh
    request is not to be confused with a\n      target refresh request, defined in
    Section 6 of [2], which is a\n      request that can update the remote target
    of a dialog.\n   Initial Session Refresh Request: The first session refresh request\n
    \     sent with a particular Call-ID value.\n   Subsequent Session Refresh Request:
    Any session refresh request sent\n      with a particular Call-ID after the initial
    session refresh\n      request.\n   Refresh: Same as a session refresh request.\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview of Operation\n   This section provides a brief overview of the operation
    of the\n   extension.  It is tutorial in nature and should not be considered\n
    \  normative.\n   This extension has the property that it works even when only
    one UA\n   in a dialog supports it.  The processing steps differ for handling\n
    \  each of the four cases (the UAC does or doesn't support it, and the\n   UAS
    does or doesn't support it).  For simplicity's sake, this section\n   will describe
    basic operation in the case where both sides support\n   the extension.\n   A
    UAC starts by sending an INVITE.  This includes a Supported header\n   field with
    the option tag 'timer', indicating support for this\n   extension.\n   This request
    passes through proxies, any one of which may have an\n   interest in establishing
    a session timer.  Each proxy can insert a\n   Session-Expires header field and
    a Min-SE header field into the\n   request (if none is already there) or alter
    the value of existing\n   Session-Expires and Min-SE header fields as described
    below.\n   The Min-SE header field establishes the lower bound for the session\n
    \  refresh interval; i.e., the fastest rate any proxy servicing this\n   request
    will be allowed to require.  The purpose of this header field\n   is to prevent
    hostile proxies from setting arbitrarily short refresh\n   intervals so that their
    neighbors are overloaded.  Each proxy\n   processing the request can raise this
    lower bound (increase the\n   period between refreshes) but is not allowed to
    lower it.\n   The Session-Expires header field establishes the upper bound for
    the\n   session refresh interval; i.e., the time period after processing a\n   request
    for which any session-stateful proxy must retain its state\n   for this session.
    \ Any proxy servicing this request can lower this\n   value, but it is not allowed
    to decrease it below the value specified\n   in the Min-SE header field.\n   If
    the Session-Expires interval is too low for a proxy (i.e., lower\n   than the
    value of Min-SE that the proxy would wish to assert), the\n   proxy rejects the
    request with a 422 response.  That response\n   contains a Min-SE header field
    identifying the minimum session\n   interval it is willing to support.  The UAC
    will try again, this time\n   including the Min-SE header field in the request.
    \ The header field\n   contains the largest Min-SE header field it observed in
    all 422\n   responses previously received.  This way, the minimum timer meets
    the\n   constraints of all proxies along the path.\n   After several INVITE/422
    iterations, the request eventually arrives\n   at the UAS.  The UAS can adjust
    the value of the session interval as\n   if it were a proxy; when done, it places
    the final session interval\n   into the Session-Expires header field in a 2xx
    response.  The\n   Session-Expires header field also contains a 'refresher' parameter,\n
    \  which indicates who is doing the refreshing -- the UA that is\n   currently
    the UAC, or the UA that is currently the UAS.  As the 2xx\n   response travels
    back through the proxy chain, each proxy can observe\n   the final session interval
    but can't change it.\n   From the Session-Expires header field in the response,
    both UAs know\n   that a session timer is active, when it will expire, and who
    is\n   refreshing.  At some point before the expiration, the currently\n   active
    refresher generates a session refresh request, which is a\n   re-INVITE or UPDATE
    [3] request.  If the refresher never gets a\n   response to that session refresh
    request, it sends a BYE to terminate\n   the session.  Similarly, if the other
    side never gets the session\n   refresh request before the session expires, it
    sends a BYE.\n   The refresh requests sent once the session is established are\n
    \  processed identically to the initial requests, as described above.\n   This
    means that a successful session refresh request will extend the\n   session, as
    desired.\n   The extension introduces additional complications beyond this basic\n
    \  flow to support cases where only one of the UAs supports it.  One\n   such
    complication is that a proxy may need to insert the\n   Session-Expires header
    field into the response, in the event that the\n   UAS doesn't support the extension.
    \ The negotiation of the role of\n   refresher is also affected by this capability;
    it takes into\n   consideration which participants support the extension.\n   Note
    that the session timer refreshes the session, not the dialog\n   used to establish
    the session.  Of course, the two are related.  If\n   the session expires, a BYE
    is sent, which terminates the session and,\n   generally, the dialog.\n"
  title: 3.  Overview of Operation
- contents:
  - "4.  Session-Expires Header Field Definition\n   The Session-Expires header field
    conveys the session interval for a\n   SIP session.  It is placed only in INVITE
    or UPDATE requests, as well\n   as in any 2xx response to an INVITE or UPDATE.
    \ Like the SIP Expires\n   header field, it contains a delta-time.\n   The absolute
    minimum for the Session-Expires header field is 90\n   seconds.  This value represents
    a bit more than twice the duration\n   that a SIP transaction can take in the
    event of a timeout.  This\n   allows sufficient time for a UA to attempt a refresh
    at the halfpoint\n   of the session interval, and for that transaction to complete\n
    \  normally before the session expires.  However, 1800 seconds (30\n   minutes)
    is RECOMMENDED as the value for the Session-Expires header\n   field.  In other
    words, SIP entities MUST be prepared to handle\n   Session-Expires header field
    values of any duration greater than 90\n   seconds, but entities that insert the
    Session-Expires header field\n   SHOULD NOT choose values of less than 30 minutes.\n
    \  Small session intervals can be destructive to the network.  They\n   cause
    excessive messaging traffic that affects both user agents and\n   proxy servers.
    \ They increase the possibility of 'glare' that can\n   occur when both user agents
    send a re-INVITE or UPDATE at the same\n   time.  Since the primary purpose of
    the session timer is to provide a\n   means to time out state in SIP elements,
    very small values won't\n   generally be needed.  30 minutes was chosen because
    95% of phone\n   calls are shorter than this duration.  However, the 30 minute
    minimum\n   is listed as a SHOULD, and not as a MUST, since the exact value for\n
    \  this number is dependent on many network factors, including network\n   bandwidths
    and latencies, computing power, memory availability,\n   network topology, and,
    of course, the application scenario.  After\n   all, SIP can set up any kind of
    session, not just a phone call.  At\n   the time of publication of this document,
    30 minutes seems\n   appropriate.  Advances in technologies may result in the
    number being\n   excessively large five years in the future.\n   The default value
    of the Session-Expires header field is undefined.\n   This means that the absence
    of the Session-Expires header field\n   implies no expiration of the session,
    using the mechanism defined in\n   this specification.  Note that other mechanisms
    not defined in this\n   specification, such as locally configured timers, may
    apply.\n   The syntax of the Session-Expires header field is as follows:\n   Session-Expires
    \ = (\"Session-Expires\" / \"x\") HCOLON delta-seconds\n                        *(SEMI
    se-params)\n   se-params        = refresher-param / generic-param\n   refresher-param
    \ = \"refresher\" EQUAL  (\"uas\" / \"uac\")\n   Note that a compact form, the
    letter x, has been reserved for\n   Session-Expires.  The BNF for delta-seconds
    and generic-param is\n   defined in Section 25 of RFC 3261 [2].\n   Table 1 is
    an extension of Tables 2 and 3 in [2] for the\n   Session-Expires and Min-SE header
    fields.  The column 'PRA' is for\n   the PRACK method [7], 'UPD' is for the UPDATE
    method [3], 'SUB' is\n   for the SUBSCRIBE method [8], and 'NOT' is for the NOTIFY
    method [8].\n   +---------------+-----+-----+---+---+---+---+---+---+---+---+---+---+\n
    \  |     Header    |where|proxy|ACK|BYE|CAN|INV|OPT|REG|PRA|UPD|SUB|NOT|\n   +---------------+-----+-----+---+---+---+---+---+---+---+---+---+---+\n
    \  |Session-Expires|  R  | amr | - | - | - | o | - | - | - | o | - | - |\n   |
    \              |     |     |   |   |   |   |   |   |   |   |   |   |\n   |Session-Expires|
    2xx | ar  | - | - | - | o | - | - | - | o | - | - |\n   |               |     |
    \    |   |   |   |   |   |   |   |   |   |   |\n   |Min-SE         |  R  | amr
    | - | - | - | o | - | - | - | o | - | - |\n   |               |     |     |   |
    \  |   |   |   |   |   |   |   |   |\n   |Min-SE         | 422 |     | - | - |
    - | m | - | - | - | m | - | - |\n   +---------------+-----+-----+---+---+---+---+---+---+---+---+---+---+\n
    \            Table 1:  Session-Expires and Min-SE Header Fields\n"
  title: 4.  Session-Expires Header Field Definition
- contents:
  - "5.  Min-SE Header Field Definition\n   The Min-SE header field indicates the
    minimum value for the session\n   interval, in units of delta-seconds.  When used
    in an INVITE or\n   UPDATE request, it indicates the smallest value of the session\n
    \  interval that can be used for that session.  When present in a\n   request
    or response, its value MUST NOT be less than 90 seconds.\n   When the header field
    is not present, its default value for is 90\n   seconds.\n   The Min-SE header
    field MUST NOT be used in responses except for\n   those with a 422 response code.
    \ It indicates the minimum value of\n   the session interval that the server is
    willing to accept.\n   The syntax of the Min-SE header field is as follows:\n
    \  Min-SE  =  \"Min-SE\" HCOLON delta-seconds *(SEMI generic-param)\n"
  title: 5.  Min-SE Header Field Definition
- contents:
  - "6.  422 Response Code Definition\n   This extension introduces the 422 (Session
    Interval Too Small)\n   response code.  It is generated by a UAS or proxy when
    a request\n   contains a Session-Expires header field with a duration below the\n
    \  minimum timer for the server.  The 422 response MUST contain a Min-SE\n   header
    field with the minimum timer for that server.\n"
  title: 6.  422 Response Code Definition
- contents:
  - '7.  UAC Behavior

    '
  - contents:
    - "7.1.  Generating an Initial Session Refresh Request\n   A UAC that supports
      the session timer extension defined here MUST\n   include a Supported header
      field in each request (except ACK),\n   listing the option tag 'timer' [2].
      \ It MUST do so even if the UAC is\n   not requesting usage of the session timer
      for this session.\n   The UAC MAY include a Require header field in the request
      with the\n   value 'timer' to indicate that the UAS must support the session
      timer\n   to participate in the session.  This does not mean that the UAC is\n
      \  requiring the UAS to perform the refreshes, only that it is requiring\n   the
      UAS to support the extension.  In addition, the UAC MAY include a\n   Proxy-Require
      header field in the request with the value 'timer' to\n   indicate that proxies
      must support the session timer in order to\n   correctly process the request.
      \ However, usage of either Require or\n   Proxy-Require by the UAC is NOT RECOMMENDED.
      \ They are not needed,\n   since the extension works even when only the UAC
      supports the\n   extension.  The Supported header field containing 'timer' MUST
      still\n   be included, even if the Require or Proxy-Require header fields are\n
      \  present containing 'timer'.\n   A UAC MAY include the Min-SE header field
      in the initial INVITE\n   request.\n   A UAC MAY include a Session-Expires header
      field in an initial\n   session refresh request if it wants a session timer
      applied to the\n   session.  The value of this header field indicates the session\n
      \  interval desired by the UAC.  If a Min-SE header is included in the\n   initial
      session refresh request, the value of the Session-Expires\n   MUST be greater
      than or equal to the value in Min-SE.\n   The UAC MAY include the refresher
      parameter with value 'uac' if it\n   wants to perform the refreshes.  However,
      it is RECOMMENDED that the\n   parameter be omitted so that it can be selected
      by the negotiation\n   mechanisms described below.\n"
    title: 7.1.  Generating an Initial Session Refresh Request
  - contents:
    - "7.2.  Processing a 2xx Response\n   The session timer requires a UA to create
      and maintain state.  This\n   state includes the session interval, the session
      expiration, and the\n   identity of the refresher.  This state is associated
      with the dialog\n   on which the session has been negotiated.\n   When a 2xx
      response to a session refresh request arrives, it may or\n   may not contain
      a Require header field with the value 'timer'.  If it\n   does, the UAC MUST
      look for the Session-Expires header field to\n   process the response.\n   If
      there was a Require header field in the response with the value\n   'timer',
      the Session-Expires header field will always be present.\n   UACs MUST be prepared
      to receive a Session-Expires header field in a\n   response, even if none were
      present in the request.  The 'refresher'\n   parameter will be present in the
      Session-Expires header field,\n   indicating who will perform the refreshes.
      \ The UAC MUST set the\n   identity of the refresher to the value of this parameter.
      \ If the\n   parameter contains the value 'uac', the UAC will perform them.
      \ It is\n   possible that the UAC requested the session timer (and thus included\n
      \  a Session-Expires header field in the request) and that there was no\n   Require
      or Session-Expires header field in the 2xx response.  This\n   will happen when
      the UAS doesn't support the session timer extension\n   and only the UAC has
      asked for a session timer (no proxies have\n   requested it).  In this case,
      if the UAC still wishes to use the\n   session timer (which is purely for its
      benefit alone), it has to\n   perform them.  To do this, the UAC follows the
      procedures defined in\n   this specification as if the Session-Expires header
      field were in the\n   2xx response, and its value was the same as that in the
      request, but\n   with a refresher parameter of 'uac'.\n   If the 2xx response
      did not contain a Session-Expires header field,\n   there is no session expiration.
      \ In this case, no refreshes need to\n   be sent.  A 2xx without a Session-Expires
      can come for both initial\n   and subsequent session refresh requests.  This
      means that the session\n   timer can be 'turned-off' in mid dialog by receiving
      a response\n   without a Session-Expires header field.\n   The UAC remembers
      the session interval for a session as the value of\n   the delta-time from the
      Session-Expires header field in the most\n   recent 2xx response to a session
      refresh request on a dialog.  It is\n   explicitly allowed for there to be differing
      session intervals (or\n   none at all) on differing dialogs established as a
      result of a single\n   INVITE.  The UAC also remembers whether it or its peer
      is the\n   refresher on for the session.\n   If the UAC must perform the refreshes,
      it computes the session\n   expiration for that session.  The session expiration
      is the time of\n   reception of the last 2xx response to a session refresh request
      on\n   that dialog plus the session interval for that session.  If the UA\n
      \  seeks to continue with the session beyond the session expiration, it\n   MUST
      generate a refresh before the session expiration.  It is\n   RECOMMENDED that
      this refresh be sent once half the session interval\n   has elapsed.  Additional
      procedures for this refresh are described in\n   Section 10.\n   Similarly,
      a re-INVITE or UPDATE request sent within a dialog for\n   purposes other than
      session refreshes will also have the effect of\n   refreshing the session, and
      its processing will follow the procedures\n   defined in this specification.\n"
    title: 7.2.  Processing a 2xx Response
  - contents:
    - "7.3.  Processing a 422 Response\n   If the response to a session refresh request
      is a 422 (Session\n   Interval Too Small) response message, then the UAC MAY
      retry the\n   request.  The procedures for retrying are described in Section
      7.4.\n   This new request constitutes a new transaction and SHOULD have the\n
      \  same value as the Call-ID, To, and From of the previous request, but\n   the
      CSeq should contain a new sequence number that is one higher than\n   the previous.\n"
    title: 7.3.  Processing a 422 Response
  - contents:
    - "7.4.  Generating Subsequent Session Refresh Requests\n   The values of Supported,
      Require, and Proxy-Require used in the\n   initial Session refresh request MUST
      be used.\n   The UAC MUST insert the Min-SE header field into a session refresh\n
      \  request for a particular dialog if it has ever received a 422\n   response
      to a previous session refresh request on the same dialog, or\n   if it has received
      a session refresh request on that dialog that\n   contained a Min-SE header
      field.  Similarly, if no dialog has been\n   established yet, a UAC MUST insert
      the Min-SE header field into an\n   INVITE request if it has ever received a
      422 response to a previous\n   INVITE request with the same Call-ID.\n   The
      value of the Min-SE header field present in a session refresh\n   request MUST
      be the largest value among all Min-SE header field\n   values returned in all
      422 responses or received in session refresh\n   requests, on the same dialog,
      if a dialog has been established.  If\n   no dialog has been established, the
      Min-SE header field value is set\n   to the largest value among all Min-SE header
      field values returned in\n   all 422 responses for an INVITE request with the
      same Call-ID.  A\n   result of this rule is that the maximum value of the Min-SE
      is\n   effectively 'cleared' once the dialog is established, and from that\n
      \  point on, only the values from proxies known to be on the proxy path\n   will
      end up being used.\n   The UAC may have its own opinions about the minimum session
      interval.\n   In that case, if the value above is too small, the UAC MAY increase\n
      \  it.\n   In a session refresh request sent within a dialog with an active\n
      \  session timer, the Session-Expires header field SHOULD be present.\n   When
      present, it SHOULD be equal to the maximum of the Min-SE header\n   field (recall
      that its default value when not present is 90 seconds)\n   and the current session
      interval.  Inclusion of the Session-Expires\n   header field with this value
      avoids certain denial-of-service\n   attacks, as documented in Section 11.  As
      such, a UA should only\n   ignore the SHOULD in unusual and singular cases where
      it is desirable\n   to change the session interval mid-dialog.\n   If the session
      refresh request is not the initial one, it is\n   RECOMMENDED that the refresher
      parameter be set to 'uac' if the\n   element sending the request is currently
      performing refreshes, and to\n   'uas' if its peer is performing the refreshes.
      \ This way, the role of\n   refresher does not change on each refresh.  However,
      if it wishes to\n   explicitly change the roles, it MAY use a value of 'uas'
      if it knows\n   that the other side supports the session timer.  It could know
      this\n   by having received a request from its peer with a Supported header\n
      \  field containing the value 'timer'.  If it seeks to reselect the\n   roles,
      it MAY omit the parameter.\n   A re-INVITE generated to refresh the session
      is a normal re-INVITE,\n   and an UPDATE generated to refresh a session is a
      normal UPDATE.  If\n   a UAC knows that its peer supports the UPDATE method,
      it is\n   RECOMMENDED that UPDATE be used instead of a re-INVITE.  A UA can\n
      \  make this determination if it has seen an Allow header field from its\n   peer
      with the value 'UPDATE', or through a mid-dialog OPTIONS\n   request.  It is
      RECOMMENDED that the UPDATE request not contain an\n   offer [4], but a re-INVITE
      SHOULD contain one, even if the details of\n   the session have not changed.
      \ In that case, the offer MUST indicate\n   that it has not changed.  In the
      case of SDP, this is accomplished by\n   including the same value for the origin
      field as did previous SDP\n   messages to its peer.  The same is true for an
      answer exchanged as a\n   result of a session refresh request; if it has not
      changed, that MUST\n   be indicated.\n"
    title: 7.4.  Generating Subsequent Session Refresh Requests
  title: 7.  UAC Behavior
- contents:
  - "8.  Proxy Behavior\n   Session timers are mostly of interest to call stateful
    proxy servers\n   (that is, to servers that maintain the state of calls and dialogs\n
    \  established through them).  However, a stateful proxy server (that\n   is,
    a server which is aware of transaction state but does not retain\n   call or dialog
    state) MAY also follow the rules described here.\n   Stateless proxies MUST NOT
    attempt to request session timers.\n   Proxies that ask for session timers SHOULD
    record-route, as they\n   won't receive refreshes if they don't.\n      The proxy
    processing rules require the proxy to remember\n      information between the
    request and response, ruling out stateless\n      proxies.\n"
  - contents:
    - "8.1.  Processing of Requests\n   Processing of requests is identical for all
      session refresh requests.\n   To request a session timer for a session, a proxy
      makes sure that a\n   Session-Expires header field is present in a session refresh
      request\n   for that session.  A proxy MAY insert a Session-Expires header field\n
      \  in the request before forwarding it if none was present in the\n   request.
      \ This Session-Expires header field may contain any desired\n   expiration time
      the proxy would like, but not with a duration lower\n   than the value in the
      Min-SE header field in the request, if it is\n   present.  The proxy MUST NOT
      include a refresher parameter in the\n   header field value.\n   If the request
      already had a Session-Expires header field, the proxy\n   MAY reduce its value
      but MUST NOT set it to a duration lower than the\n   value in the Min-SE header
      field in the request, if it is present.\n   If the value of the Session-Expires
      header field is greater than or\n   equal to the value in the Min-SE header
      field (recall that the\n   default is 90 seconds when the Min-SE header field
      is not present),\n   the proxy MUST NOT increase the value of the Session-Expires
      header\n   field.  If the value of the Session-Expires header field is lower\n
      \  than the value of the Min-SE header field (possibly because the proxy\n   increased
      the value of the Min-SE header field, as described below),\n   the proxy MUST
      increase the value of the Session-Expires header field\n   to make it equal
      to Min-SE header field value.  The proxy MUST NOT\n   insert or modify the value
      of the 'refresher' parameter in the\n   Session-Expires header field.\n   If
      the request contains a Supported header field with a value\n   'timer', the
      proxy MAY reject the INVITE request with a 422 (Session\n   Interval Too Small)
      response if the session interval in the\n   Session-Expires header field is
      smaller than the minimum interval\n   defined by the proxy's local policy.  When
      sending the 422 response,\n   the proxy MUST include a Min-SE header field with
      the value of its\n   minimum interval.  That minimum MUST NOT be lower than
      90 seconds.\n   If the request doesn't indicate support for the session timer
      but\n   contains a session interval that is too small, the proxy cannot\n   usefully
      reject the request, as this would result in a call failure.\n   Rather, the
      proxy SHOULD insert a Min-SE header field containing its\n   minimum interval.
      \ If a Min-SE header field is already present, the\n   proxy SHOULD increase
      (but MUST NOT decrease) the value to its\n   minimum interval.  The proxy MUST
      then increase the Session-Expires\n   header field value to be equal to the
      value in the Min-SE header\n   field, as described above.  A proxy MUST NOT
      insert a Min-SE header\n   field or modify the value of an existing header field
      in a proxied\n   request if that request contains a Supported header field with
      the\n   value 'timer'.  This is needed to protect against certain denial of\n
      \  service attacks, described in Section 11.\n   Assuming that the proxy has
      requested a session timer (and thus has\n   possibly inserted the Session-Expires
      header field or reduced it),\n   the proxy MUST remember that it is using a
      session timer, and also\n   remember the value of the Session-Expires header
      field from the\n   proxied request.  This MUST be remembered for the duration
      of the\n   transaction.\n   The proxy MUST remember, for the duration of the
      transaction, whether\n   the request contained the Supported header field with
      the value\n   'timer'.  If the request did not contain a Supported header field\n
      \  with the value 'timer', the proxy MAY insert a Require header field\n   with
      the value 'timer' into the request.  However, this is NOT\n   RECOMMENDED.  This
      allows the proxy to insist on a session timer for\n   the session.  This header
      field is not needed if a Supported header\n   field was in the request; in this
      case, the proxy would already be\n   sure the session timer can be used for
      the session.\n"
    title: 8.1.  Processing of Requests
  - contents:
    - "8.2.  Processing of Responses\n   When the final response to the request arrives,
      it is examined by the\n   proxy.\n   If the response does not contain a Session-Expires
      header field but\n   the proxy remembers that it requested a session timer in
      the request\n   (by inserting, modifying, or examining and accepting the\n   Session-Expires
      header field in the proxied request), this means that\n   the UAS did not support
      the session timer.  If the proxy remembers\n   that the UAC did not support
      the session timer either, the proxy\n   forwards the response upstream normally.
      \ There is no session\n   expiration for this session.  If, however, the proxy
      remembers that\n   the UAC did support the session timer, additional processing
      is\n   needed.\n   Because there is no Session-Expires or Require header field
      in the\n   response, the proxy knows that it is the first session-timer-aware\n
      \  proxy to receive the response.  This proxy MUST insert a\n   Session-Expires
      header field into the response with the value it\n   remembered from the forwarded
      request.  It MUST set the value of the\n   'refresher' parameter to 'uac'.  The
      proxy MUST add the 'timer'\n   option tag to any Require header field in the
      response, and if none\n   was present, add the Require header field with that
      value before\n   forwarding it upstream.\n   If the received response contains
      a Session-Expires header field, no\n   modification of the response is needed.\n
      \  In all cases, if the 2xx response forwarded upstream by the proxy\n   contains
      a Session-Expires header field, its value represents the\n   session interval
      for the session associated with that response.  The\n   proxy computes the session
      expiration as the time when the 2xx\n   response is forwarded upstream, plus
      the session interval.  This\n   session expiration MUST update any existing
      session expiration for\n   the session.  The refresher parameter in the Session-Expires
      header\n   field in the 2xx response forwarded upstream will be present, and
      it\n   indicates which UA is performing the refreshes.  There can be\n   multiple
      2xx responses to a single INVITE, each representing a\n   different dialog,
      resulting in multiple session expirations, one for\n   each session associated
      with each dialog.\n   The proxy MUST NOT modify the value of the Session-Expires
      header\n   field received in the response (assuming one was present) before\n
      \  forwarding it upstream.\n"
    title: 8.2.  Processing of Responses
  - contents:
    - "8.3.  Session Expiration\n   When the current time equals or passes the session
      expiration for a\n   session, the proxy MAY remove associated call state, and
      MAY free any\n   resources associated with the call.  Unlike the UA, it MUST
      NOT send\n   a BYE.\n"
    title: 8.3.  Session Expiration
  title: 8.  Proxy Behavior
- contents:
  - "9.  UAS Behavior\n   The UAS must respond to a request for a session timer by
    the UAC or a\n   proxy in the path of the request, or it may request that a session\n
    \  timer be used itself.\n   If an incoming request contains a Supported header
    field with a value\n   'timer' and a Session Expires header field, the UAS MAY
    reject the\n   INVITE request with a 422 (Session Interval Too Small) response
    if\n   the session interval in the Session-Expires header field is smaller\n   than
    the minimum interval defined by the UAS' local policy.  When\n   sending the 422
    response, the UAS MUST include a Min-SE header field\n   with the value of its
    minimum interval.  This minimum interval MUST\n   NOT be lower than 90 seconds.\n
    \  If the UAS wishes to accept the request, it copies the value of the\n   Session-Expires
    header field from the request into the 2xx response.\n   The UAS response MAY
    reduce its value but MUST NOT set it to a\n   duration lower than the value in
    the Min-SE header field in the\n   request, if it is present; otherwise the UAS
    MAY reduce its value but\n   MUST NOT set it to a duration lower than 90 seconds.
    \ The UAS MUST\n   NOT increase the value of the Session-Expires header field.\n
    \  If the incoming request contains a Supported header field with a\n   value
    'timer' but does not contain a Session-Expires header, it means\n   that the UAS
    is indicating support for timers but is not requesting\n   one.  The UAS may request
    a session timer in the 2XX response by\n   including a Session-Expires header
    field.  The value MUST NOT be set\n   to a duration lower than the value in the
    Min-SE header field in the\n   request, if it is present.\n   The UAS MUST set
    the value of the refresher parameter in the\n   Session-Expires header field in
    the 2xx response.  This value\n   specifies who will perform refreshes for the
    dialog.  The value is\n   based on the value of this parameter in the request,
    and on whether\n   the UAC supports the session timer extension.  The UAC supports
    the\n   extension if the 'timer' option tag was present in a Supported header\n
    \  field in the request.  Table 2 defines how the value in the response\n   is
    set.  A value of 'none' in the 2nd column means that there was no\n   refresher
    parameter in the request.  A value of 'NA' in the third\n   column means that
    this particular combination shouldn't happen, as it\n   is disallowed by the protocol.\n
    \      UAC supports?  refresher parameter  refresher parameter\n                           in
    request           in response\n       -------------------------------------------------------\n
    \            N                none                 uas\n             N                uac
    \                 NA\n             N                uas                  NA\n
    \            Y                none             uas or uac\n             Y                uac
    \                 uac\n             Y                uas                  uas\n
    \                       Table 2:  UAS Behavior\n   The fourth row of Table 2 describes
    a case where both the UAC and UAS\n   support the session timer extension, and
    where the UAC did not select\n   who will perform refreshes.  This allows the
    UAS to decide whether it\n   or the UAC will perform the refreshes.  However,
    as the table\n   indicates, the UAS cannot override the UAC's choice of refresher,
    if\n   it made one.\n   If the refresher parameter in the Session-Expires header
    field in the\n   2xx response has a value of 'uac', the UAS MUST place a Require\n
    \  header field into the response with the value 'timer'.  This is\n   because
    the uac is performing refreshes and the response has to be\n   processed for the
    UAC to know this.  If the refresher parameter in\n   the 2xx response has a value
    of 'uas' and the Supported header field\n   in the request contained the value
    'timer', the UAS SHOULD place a\n   Require header field into the response with
    the value 'timer'.  In\n   this case, the UAC is not refreshing, but it is supposed
    to send a\n   BYE if it never receives a refresh.  Since the call will still\n
    \  succeed without the UAC sending a BYE, insertion of the Require is a\n   SHOULD
    here, and not a MUST.\n   Just like the UAC, the UAS stores state for the session
    timer.  This\n   state includes the session interval, the session expiration,
    and the\n   identity of the refresher.  This state is bound to the dialog used
    to\n   set up the session.  The session interval is set to the value of the\n
    \  delta-time from the Session-Expires header field in the most recent\n   2xx
    response to a session refresh request on that dialog.  It also\n   remembers whether
    it or its peer is the refresher on the dialog,\n   based on the value of the refresher
    parameter from the most recent\n   2xx response to a session refresh request on
    that dialog.  If the\n   most recent 2xx response had no Session-Expires header
    field, there\n   is no session expiration, and no refreshes have to be performed.\n
    \  If the UAS must refresh the session, it computes the session\n   expiration.
    \ The session expiration is the time of transmission of\n   the last 2xx response
    to a session refresh request on that dialog\n   plus the session interval.  If
    UA wishes to continue with the session\n   beyond the session expiration, it MUST
    generate a refresh before the\n   session expiration.  It is RECOMMENDED that
    this refresh be sent once\n   half the session interval has elapsed.  Additional
    procedures for\n   this refresh are described in Section 10.\n"
  title: 9.  UAS Behavior
- contents:
  - "10.  Performing Refreshes\n   The side generating a refresh does so according
    to the UAC procedures\n   defined in Section 7.  Note that only a 2xx response
    to a session\n   refresh request extends the session expiration.  This means that
    a UA\n   could attempt a refresh and receive a 422 response with a Min-SE\n   header
    field that contains a value much larger than the current\n   session interval.
    \ The UA will still have to send a session refresh\n   request before the session
    expiration (which has not changed), even\n   though this request will contain
    a value of the Session-Expires that\n   is much larger than the current session
    interval.\n   If the session refresh request transaction times out or generates
    a\n   408 or 481 response, then the UAC sends a BYE request as per Section\n   12.2.1.2
    of RFC 3261 [2].  If the session refresh request does not\n   generate a 2xx response
    (and, as a result, the session is not\n   refreshed), and a response other than
    408 or 481 is received, the UAC\n   SHOULD follow the rules specific to that response
    code and retry if\n   possible.  For example, if the response is a 401, the UAC
    would retry\n   the request with new credentials.  However, the UAC SHOULD NOT\n
    \  continuously retry the request if the server indicates the same error\n   response.\n
    \  Similarly, if the side not performing refreshes does not receive a\n   session
    refresh request before the session expiration, it SHOULD send\n   a BYE to terminate
    the session, slightly before the session\n   expiration.  The minimum of 32 seconds
    and one third of the session\n   interval is RECOMMENDED.\n      Firewalls and
    NAT ALGs may be very unforgiving about allowing SIP\n      traffic to pass after
    the expiration time of the session.  This is\n      why the BYE should be sent
    before the expiration.\n"
  title: 10.  Performing Refreshes
- contents:
  - "11.  Security Considerations\n   The session timer introduces the capability
    of a proxy or UA element\n   to force compliant UAs to send refreshes at a rate
    of the element's\n   choosing.  This introduces the possibility of denial-of-service\n
    \  attacks with significant amplification properties.  These attacks can\n   be
    launched from 'outsiders' (elements that attempt to modify\n   messages in transit)
    or by 'insiders' (elements that are legitimately\n   in the request path but are
    intent on doing harm).  Fortunately, both\n   cases are adequately handled by
    this specification.\n"
  - contents:
    - "11.1.  Inside Attacks\n   This introduces the possibility of rogue proxies
      or UAs introducing\n   denial-of-service attacks.  However, the mechanisms in
      this\n   specification prevent that from happening.\n   First, consider the
      case of a rogue UAC that wishes to force a UAS to\n   generate refreshes at
      a rapid rate.  To do so, it inserts a\n   Session-Expires header field into
      an INVITE with a low duration and a\n   refresher parameter equal to uas.  Assume
      it places a Supported\n   header field into the request.  The UAS or any proxy
      that objects to\n   this low timer will reject the request with a 422, thereby
      preventing\n   the attack.  If no Supported header field was present, the proxies\n
      \  will insert a Min-SE header field into the request before forwarding\n   it.
      \ As a result, the UAS will not choose a session timer lower than\n   the minimum
      allowed by all elements on the path.  This too prevents\n   the attack.\n   Next,
      consider the case of a rogue UAS that wishes to force a UAC to\n   generate
      refreshes at a rapid rate.  In that case, the UAC has to\n   support session
      timer.  The initial INVITE arrives at the rogue UAS,\n   which returns a 2xx
      with a very small session interval.  The UAC uses\n   this timer and quickly
      sends a refresh.  Section 7.4 requires that\n   the UAC copy the current session
      interval into the Session-Expires\n   header field in the request.  This enables
      the proxies to see the\n   current value.  The proxies will reject this request
      and provide a\n   Min-SE with a higher minimum, which the UAC will then use.
      \ Note,\n   that if the proxies did not reject the request, but rather proxied\n
      \  the request with a Min-SE header field, an attack would still be\n   possible.
      \ The UAS could discard this header field in a 2xx response\n   and force the
      UAC to continue to generate rapid requests.\n   In a similar fashion, a rogue
      proxy cannot force either the UAC or\n   UAS to generate refreshes unless the
      proxy remains on the signaling\n   path and sees every request and response.\n"
    title: 11.1.  Inside Attacks
  - contents:
    - "11.2.  Outside Attacks\n   An element that can observe and modify a request
      or response in\n   transit can force rapid session refreshes.  To prevent this,
      requests\n   and responses have to be protected by message integrity.  Since
      the\n   session timer header fields are not end-to-end and are manipulated by\n
      \  proxies, the SIP S/MIME capabilities are not suitable for this task.\n   Rather,
      integrity has to be protected by using hop-by-hop mechanisms.\n   As a result,
      it is RECOMMENDED that an element send a request with a\n   Session-Expires
      header field or a Supported header field with the\n   value 'timer' by using
      TLS.  As adequate protection is obtained only\n   if security is applied on
      each hop, it is RECOMMENDED that the SIPS\n   URI scheme be used in conjunction
      with this extension.  This means\n   that proxies that record-route and request
      session timer SHOULD\n   record-route with a SIPS URI.  A UA that inserts a
      Session-Expires\n   header into a request or response SHOULD include a Contact
      URI that\n   is a SIPS URI.\n"
    title: 11.2.  Outside Attacks
  title: 11.  Security Considerations
- contents:
  - "12.  IANA Considerations\n   This extension defines two new header fields, a
    new response code,\n   and a new option tag.  SIP [2] defines IANA procedures
    for\n   registering these.\n"
  - contents:
    - "12.1.  IANA Registration of Min-SE and Session-Expires Header Fields\n   The
      following is the registration for the Min-SE header field:\n   RFC Number: RFC
      4028\n   Header Name: Min-SE\n   Compact Form: none\n   The following is the
      registration for the Session-Expires header\n   field:\n   RFC Number: RFC 4028\n
      \  Header Name: Session-Expires\n   Compact Form: x\n"
    title: 12.1.  IANA Registration of Min-SE and Session-Expires Header Fields
  - contents:
    - "12.2.  IANA Registration of the 422 (Session Interval Too Small)\n       Response
      Code\n   The following is the registration for the 422 (Session Interval Too\n
      \  Small) response code:\n   Response Code: 422\n   Default Reason Phrase: Session
      Interval Too Small\n   RFC Number: RFC 4028\n"
    title: 12.2.  IANA Registration of the 422 (Session Interval Too Small)
  - contents:
    - "12.3.  IANA Registration of the 'timer' Option Tag\n   The following is the
      registration for the 'timer' option tag:\n   Name: timer\n   Description: This
      option tag is for support of the session timer\n      extension.  Inclusion
      in a Supported header field in a request or\n      response indicates that the
      UA can perform refreshes according to\n      that specification.  Inclusion
      in a Require header in a request\n      means that the UAS must understand the
      session timer extension to\n      process the request.  Inclusion in a Require
      header field in a\n      response indicates that the UAC must look for the Session-Expires\n
      \     header field in the response and process it accordingly.\n"
    title: 12.3.  IANA Registration of the 'timer' Option Tag
  title: 12.  IANA Considerations
- contents:
  - "13.  Example Call Flow\n   Example Session Timer Flow\n       Alice      Proxy
    P1     Proxy P2        Bob\n         |(1) INVITE  |            |            |\n
    \        |SE: 50      |            |            |\n         |----------->|            |
    \           |\n         |(2) 422     |            |            |\n         |MSE:
    3600   |            |            |\n         |<-----------|            |            |\n
    \        |(3) ACK     |            |            |\n         |----------->|            |
    \           |\n         |(4) INVITE  |            |            |\n         |SE:3600
    \    |            |            |\n         |MSE:3600    |            |            |\n
    \        |----------->|            |            |\n         |            |(5)
    INVITE  |            |\n         |            |SE:3600     |            |\n         |
    \           |MSE:3600    |            |\n         |            |----------->|
    \           |\n         |            |(6) 422     |            |\n         |            |MSE:4000
    \   |            |\n         |            |<-----------|            |\n         |
    \           |(7) ACK     |            |\n         |            |----------->|
    \           |\n         |(8) 422     |            |            |\n         |MSE:4000
    \   |            |            |\n         |<-----------|            |            |\n
    \        |(9) ACK     |            |            |\n         |----------->|            |
    \           |\n         |(10) INVITE |            |            |\n         |SE:4000
    \    |            |            |\n         |MSE:4000    |            |            |\n
    \        |----------->|            |            |\n         |            |(11)
    INVITE |            |\n         |            |SE:4000     |            |\n         |
    \           |MSE:4000    |            |\n         |            |----------->|
    \           |\n         |            |            |(12) INVITE |\n         |            |
    \           |SE:4000     |\n         |            |            |MSE:4000    |\n
    \        |            |            |----------->|\n         |            |            |(13)
    200 OK |\n         |            |            |SE:4000     |\n         |            |
    \           |<-----------|\n         |            |(14) 200 OK |            |\n
    \        |            |SE:4000     |            |\n         |            |<-----------|
    \           |\n         |(15) 200 OK |            |            |\n         |SE:4000
    \    |            |            |\n         |<-----------|            |            |\n
    \        |(16) ACK    |            |            |\n         |----------->|            |
    \           |\n         |            |(17) ACK    |            |\n         |            |------------------------>|\n
    \        |(18) UPDATE |            |            |\n         |SE:4000     |            |
    \           |\n         |----------->|            |            |\n         |            |(19)
    UPDATE |            |\n         |            |SE:4000     |            |\n         |
    \           |------------------------>|\n         |            |(20) 200 OK |
    \           |\n         |            |SE:4000     |            |\n         |            |<------------------------|\n
    \        |(21) 200 OK |            |            |\n         |SE:4000     |            |
    \           |\n         |<-----------|            |            |\n         |            |(22)
    BYE    |            |\n         |            |<------------------------|\n         |(23)
    BYE    |            |            |\n         |<-----------|            |            |\n
    \        |            |(24) 408    |            |\n         |            |------------------------>|\n
    \          Figure 1:  Example Session Timer Flow\n   Figure 1 gives an example
    of a call flow that makes use of the\n   session timer.  In this example, both
    the UAC and UAS support the\n   session timer extension.  The initial INVITE request
    generated by the\n   UAC, Alice (message 1), might look like this:\n   INVITE
    sips:bob@biloxi.example.com SIP/2.0\n   Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds8\n
    \  Supported: timer\n   Session-Expires: 50\n   Max-Forwards: 70\n   To: Bob <sips:bob@biloxi.example.com>\n
    \  From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n
    \  CSeq: 314159 INVITE\n   Contact: <sips:alice@pc33.atlanta.example.com>\n   Content-Type:
    application/sdp\n   Content-Length: 142\n   (Alice's SDP not shown)\n   This request
    indicates that Alice supports the session timer, and is\n   requesting session
    refreshes every 50 seconds.  This arrives at the\n   first proxy, P1.  This session
    interval is below the minimum allowed\n   value of 3600.  So P1 rejects the request
    with a 422 (message 2):\n   SIP/2.0 422 Session Interval Too Small\n   Via: SIP/2.0/TLS
    pc33.atlanta.example.com;branch=z9hG4bKnashds8\n     ;received=192.0.2.1\n   Min-SE:
    3600\n   To: Bob <sips:bob@biloxi.example.com>;tag=9a8kz\n   From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n
    \  Call-ID: a84b4c76e66710\n   CSeq: 314159 INVITE\n   This response contains
    a Min-SE header field with the value 3600.\n   Alice then retries the request.
    \ This time, the request contains a\n   Min-SE header, as Alice has received a
    422 for other INVITE requests\n   with the same Call-ID.  The new request (message
    4) might look like\n   this:\n   INVITE sips:bob@biloxi.example.com SIP/2.0\n
    \  Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds9\n   Supported:
    timer\n   Session-Expires: 3600\n   Min-SE: 3600\n   Max-Forwards: 70\n   To:
    Bob <sips:bob@biloxi.example.com>\n   From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n
    \  Call-ID: a84b4c76e66710\n   CSeq: 314160 INVITE\n   Contact: <sips:alice@pc33.atlanta.example.com>\n
    \  Content-Type: application/sdp\n   Content-Length: 142\n   (Alice's SDP not
    shown)\n   Proxy P1 record-routes.  Since the session interval is now acceptable\n
    \  to it, it forwards the request to P2 (message 5).  However, the\n   session
    interval is below its minimum configured amount of 4000.  So\n   it rejects the
    request with a 422 response code (message 6) and\n   includes a Min-SE header
    field with the value of 4000.  Once more,\n   Alice retries the INVITE.  This
    time, the Min-SE header field in her\n   INVITE is the maximum of all Min-SE she
    has received (3600 and 4000).\n   Message 10 might look like this:\n   INVITE
    sips:bob@biloxi.example.com SIP/2.0\n   Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds10\n
    \  Supported: timer\n   Session-Expires: 4000\n   Min-SE: 4000\n   Max-Forwards:
    70\n   To: Bob <sips:bob@biloxi.example.com>\n   From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n
    \  Call-ID: a84b4c76e66710\n   CSeq: 314161 INVITE\n   Contact: <sips:alice@pc33.atlanta.example.com>\n
    \  Content-Type: application/sdp\n   Content-Length: 142\n   (Alice's SDP not
    shown)\n   P1 record-routes once again, but P2 does not (this wouldn't normally\n
    \  happen; presumably, if it asked for session timer, it would\n   record-route
    the subsequent request).  The UAS receives the request.\n   It copies the Session-Expires
    header from the request to the response\n   and adds a refresher parameter with
    value 'uac'.  This 200 OK is\n   forwarded back to Alice.  The response she receives
    (message 15)\n   might look like this:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS
    pc33.atlanta.example.com;branch=z9hG4bKnashds10\n    ;received=192.0.2.1\n   Require:
    timer\n   Supported: timer\n   Record-Route: sips:p1.atlanta.example.com;lr\n
    \  Session-Expires: 4000;refresher=uac\n   To: Bob <sips:bob@biloxi.example.com>;tag=9as888nd\n
    \  From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n
    \  CSeq: 314161 INVITE\n   Contact: <sips:bob@192.0.2.4>\n   Content-Type: application/sdp\n
    \  Content-Length: 142\n   (Bob's SDP not shown)\n   Alice generates an ACK (message
    16), which is routed through P1 and\n   then to Bob.  Since Alice is the refresher,
    around 2000 seconds later\n   Alice sends an UPDATE request to refresh the session.
    \ Because this\n   request is part of an established dialog and Alice has not
    received\n   any 422 responses or requests on that dialog, there is no Min-SE\n
    \  header field in her request (message 18):\n   UPDATE sips:bob@192.0.2.4 SIP/2.0\n
    \  Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds12\n   Route:
    sips:p1.atlanta.example.com;lr\n   Supported: timer\n   Session-Expires: 4000;refresher=uac\n
    \  Max-Forwards: 70\n   To: Bob <sips:bob@biloxi.example.com>;tag=9as888nd\n   From:
    Alice <sips:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n
    \  CSeq: 314162 UPDATE\n   Contact: <sips:alice@pc33.atlanta.example.com>\n   This
    is forwarded through P1 to Bob.  Bob generates a 200 OK, copying\n   the Session-Expires
    header field into the response.  This is\n   forwarded through P1 and arrives
    at Alice.  The response she receives\n   (message 21) might look like this:\n
    \  SIP/2.0 200 OK\n   Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds12\n
    \    ;received=192.0.2.1\n   Require: timer\n   Session-Expires: 4000;refresher=uac\n
    \  To: Bob <sips:bob@biloxi.example.com>;tag=9as888nd\n   From: Alice <sips:alice@atlanta.example.com>;tag=1928301774\n
    \  Call-ID: a84b4c76e66710\n   CSeq: 314162 UPDATE\n   Contact: <sips:bob@192.0.2.4>\n
    \  Shortly afterward, Alice's UA crashes.  As a result, she never sends\n   a
    session refresh request.  3968 seconds later, Bob times out and\n   sends a BYE
    request (message 22).  This is sent to P1.  P1 attempts\n   to deliver it but
    fails (because Alice's UA has crashed).  P1 then\n   returns a 408 (Request Timeout)
    to Bob.\n"
  title: 13.  Example Call Flow
- contents:
  - "14.  Acknowledgements\n   The authors wish to thank Brett Tate for his contributions
    to this\n   work.  Brian Rosen completed the editing of the document.\n"
  title: 14.  Acknowledgements
- contents:
  - '15.  References

    '
  - contents:
    - "15.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n        Peterson,
      J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session Initiation
      Protocol\", RFC 3261, June 2002.\n   [3]  Rosenberg, J., \"The Session Initiation
      Protocol (SIP) UPDATE\n        Method\", RFC 3311, October 2002.\n   [4]  Rosenberg,
      J. and H. Schulzrinne, \"An Offer/Answer Model with\n        Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n"
    title: 15.1.  Normative References
  - contents:
    - "15.2.  Informative References\n   [5]  Schulzrinne, H.,  Casner, S., Frederick,
      R., and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n        RFC 3550, July 2003.\n   [6]  Srisuresh, P. and M. Holdrege,
      \"IP Network Address Translator\n        (NAT) Terminology and Considerations\",
      RFC 2663, August 1999.\n   [7]  Rosenberg, J. and H. Schulzrinne, \"Reliability
      of Provisional\n        Responses in Session Initiation Protocol (SIP)\", RFC
      3262, June\n        2002.\n   [8]  Roach, A., \"Session Initiation Protocol
      (SIP)-Specific Event\n        Notification\", RFC 3265, June 2002.\n"
    title: 15.2.  Informative References
  title: 15.  References
- contents:
  - "Authors' Addresses\n   Steve Donovan\n   Cisco Systems, Inc.\n   2200 E. President
    George Bush Turnpike\n   Richardson, Texas 75082\n   US\n   EMail: srd@cisco.com\n
    \  Jonathan Rosenberg\n   Cisco Systems, Inc.\n   600 Lanidex Plaza\n   Parsippany,
    NJ  07054\n   US\n   EMail: jdrosen@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
