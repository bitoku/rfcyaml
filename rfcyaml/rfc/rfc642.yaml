- title: __initial_text__
  contents:
  - '                Ready Line Philosophy and Implementation

    '
- title: I.  Introduction
  contents:
  - "I.  Introduction\n   BBN Report #1822, Specifications for the Interconnection\
    \ of a Host\n   and an IMP, gives a complete specification of the Host-IMP interface.\n\
    \   However, the authors of this document bent over backward to avoid\n   issuing\
    \ arbitrary dictatorial directives to host interface\n   implementors.  They succeeded\
    \ admirably in this goal by describing\n   the IMP implementation, and suggesting\
    \ similar behavior on the part\n   of the host.\n   ARPA has appointed a PDP-11\
    \ local host interface standardization\n   committee composed of myself, Dave\
    \ Retz of SCRL, and Yuval Peduel of\n   MIT Lincoln Labs.  During our review of\
    \ various interfaces designed\n   by the ARPA community, we have found total chaos,\
    \ confusion and\n   misunderstanding about the recommended host interface implementation.\n\
    \   This note is an attempt to make explicit the recommendations which\n   are\
    \ implicit in Report #1822.  It provides a cookbook for interface\n   implementors,\
    \ including a set of recommended do's and don't's in the\n   common problem areas.\
    \  This document has been reviewed and approved\n   by the BBN IMP group.\n"
- title: II.  Ready-line Philosophy
  contents:
  - "II.  Ready-line Philosophy\n   The following is an attempt to spell out in detail\
    \ a consistent plan\n   for operation of the IMP ready line and host ready line\
    \ with the\n   following objectives:\n      1.  Reliably resynchronize and resume\
    \ transmission after a\n          temporary lapse of service and possible loss\
    \ of state\n          information by either system.\n      2.  Make the programming\
    \ of the host interface as simple as\n          possible.  This will minimize\
    \ bugs, and make it possible to\n          create a small ROM network-bootstrap\
    \ loader.\n   First, consider the IMP ready line.  When it drops, the IMP has\n\
    \   suffered a possible loss of state, so the message in transit from the\n  \
    \ IMP to the host (if any) is likely to be incomplete.  Similarly, the\n   message\
    \ in transit from the host to the IMP (if any) is likely to be\n   incomplete.\
    \  Both the host and the IMP must recognize this explicitly\n   by sending a message\
    \ intended to be thrown away* (which may he\n   appended to the current message)\
    \ and throw away the message currently\n   being received.  (Both the host - IMP\
    \ message and the IMP - host\n   message).\n   The simplest arrangement for the\
    \ host's interface driver is a pair of\n   processes, one sending messages and\
    \ the other receiving messages.\n   This drop of the IMP's ready line must be\
    \ provided as an error status\n   bit to each process.  However, the two processes\
    \ will need to clear\n   this condition independently: the simplest implementation\
    \ is an Input\n   Error flop and an Output Error flop.  Both flops are set by\
    \ a drop of\n   the IMP's ready line, and they are cleared independently under\n\
    \   program control.\n   When the IMP raises its ready line, each contact bounce\
    \ will again\n   set the Error flops in the host's interface.  To insure that\
    \ messages\n   are not flowing across the interface at this time, assertions of\
    \ the\n   signals \"there's your IMP bit\" and \"ready for next host bit\" have\n\
    \   been delayed sufficiently in the IMP to guarantee that the IMP ready\n   line\
    \ has stabilized.\n"
- title: III.  Programming
  contents:
  - "III.  Programming\n   The interface driver processes can be described simply:\n\
    \   INPUT:  Wait until an input buffer is available\n           Wait until IMP\
    \ ready\n           Start input\n           Wait until input is complete\n   \
    \        IF Input Error\n           THEN clear Input Error  // Flush smashed message.\
    \  Input\n                                   // buffer will be reused.\n     \
    \      ELSE queue message on input queue\n           GOTO INPUT\n   OUTPUT: Wait\
    \ until a message is present on output queue\n           Wait until IMP ready\n\
    \           Start output\n           Wait until output is complete\n         \
    \  IF Output Error\n           THEN clear Output Error  // smashed message is\
    \ flushed\n           ELSE deque message from output queue  // Free up\n     \
    \                                            // output buffer\n           GOTO\
    \ 0UTPUT\n   ----------\n   *The standard convention uses the host-IMP NOP message.\n\
    \   The only initialization required for system startup or restart is\n   clearing\
    \ the host READY flop, waiting 1/2 second, and setting the\n   host READY flop.\
    \  Simply starting (or restarting) the above processes\n   will properly resynchronize\
    \ host-IMP communication.  As explained in\n   RFC #636, the IMP ready line (and\
    \ error flops) should only affect the\n   two processes above: this resynchronization\
    \ should be invisible to\n   the NCP, and should have no effect on the connection\
    \ data base.  The\n   NCP will be resynchronized or reinitialized by the type\
    \ 10 IMP-to-\n   host message \"interface was reset.\"\n   Actually, it is possible\
    \ to share a single Error flop between the\n   input and output processes by implementing\
    \ Input Error and Output\n   Error as software flags.  A process testing for error\
    \ must test both\n   the Error flop and its own flag.  An interlock is required\
    \ (e.g.  a\n   mutual exclusion  semaphore) to guarantee that only one process\
    \ at a\n   time is testing and modifying the flags.  If the Error flop is set,\n\
    \   the process must copy it into the other process' flag before clearing\n  \
    \ the flop and its own flag.\n"
- title: IV.  Host Ready Line Implementation
  contents:
  - "IV.  Host Ready Line Implementation\n   When the host drops and raises its ready\
    \ line, the IMP behaves in a\n   fashion symmetric to that outlined above.  Of\
    \ course, this drop\n   indicates that the state of the host's interface driver,\
    \ as well as\n   the current incoming and outgoing messages, are likely to be\
    \ lost.\n   The appropriate action is triggered by setting the Error flop or\n\
    \   flops in the host interface, and the processes specified above will\n   correctly\
    \ resynchronize message flow in both directions.  Of course,\n   to guarantee\
    \ that messages are not flowing across the interface while\n   the host ready\
    \ line is undergoing contact bounce, the host must delay\n   transmission until\
    \ its ready line has stabilized.  This may be done\n   in two ways:\n      Hardware:\
    \ an integrating one-shot driven by the host ready line\n           flop is ANDed\
    \ with \"there's your host bit\" and \"ready for\n           next IMP bit\" to\
    \ guarantee that message transfer will not\n           start until the ready flop\
    \ has been on for 1/2 second.\n      Software: the initialization program executes\
    \ a 1/2 second wait\n           after setting the host ready flop before permitting\
    \ input or\n           output to begin.\n"
- title: V.  Summary
  contents:
  - "V.  Summary\n   This determines the specification READY line controls for the\
    \ host's\n   interface to the IMP:\n      1.  It contains a program settable/clearable\
    \ host READY flop which\n          drives a relay closure to the IMP.\n      2.\
    \  It detects the IMP's ready signal as a program-readable status\n          condition.\
    \  (But not an interrupt condition)\n      3.  It contains one or two ERROR flops\
    \ set when either the host\n          READY flop is off or the IMP ready signal\
    \ is off.  The flop\n          (flops) is a program-readable and program-clearable\
    \ status\n          condition.  (But not an interrupt condition).  These status\n\
    \          flops must not be cleared by system initialization.\n      4.  If hardware\
    \ stabilization of the host's READY line is\n          provided, it is a 1/2 second\
    \ integrating one-shot driven by\n          the host READY flop.  This signal\
    \ is ANDed with \"there's your\n          host bit\" and \"ready for next IMP\
    \ bit\".\n       [ This RFC was put into machine readable form for entry ]\n \
    \      [ into the online RFC archives by Alex McKenzie with    ]\n       [ support\
    \ from GTE, formerly BBN Corp.           2/2000 ]\n"
