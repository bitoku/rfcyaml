- title: __initial_text__
  contents:
  - '      TCP Congestion Control with Appropriate Byte Counting (ABC)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document proposes a small modification to the way TCP increases\n\
    \   its congestion window.  Rather than the traditional method of\n   increasing\
    \ the congestion window by a constant amount for each\n   arriving acknowledgment,\
    \ the document suggests basing the increase on\n   the number of previously unacknowledged\
    \ bytes each ACK covers.  This\n   change improves the performance of TCP, as\
    \ well as closes a security\n   hole TCP receivers can use to induce the sender\
    \ into increasing the\n   sending rate too rapidly.\n"
- title: Terminology
  contents:
  - "Terminology\n   Much of the language in this document is taken from [RFC2581].\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 1   Introduction
  contents:
  - "1   Introduction\n   This document proposes a modification to the algorithm for\
    \ increasing\n   TCP's congestion window (cwnd) that improves both performance\
    \ and\n   security.  Rather than increasing a TCP's congestion window based on\n\
    \   the number of acknowledgments (ACKs) that arrive at the data sender\n   (per\
    \ the current specification [RFC2581]), the congestion window is\n   increased\
    \ based on the number of bytes acknowledged by the arriving\n   ACKs.  The algorithm\
    \ improves performance by mitigating the impact of\n   delayed ACKs on the growth\
    \ of cwnd.  At the same time, the algorithm\n   provides cwnd growth in direct\
    \ relation to the probed capacity of a\n   network path, therefore providing a\
    \ more measured response to ACKs\n   that cover only small amounts of data (less\
    \ than a full segment size)\n   than ACK counting.  This more appropriate cwnd\
    \ growth can improve\n   both performance and can prevent inappropriate cwnd growth\
    \ in\n   response to a misbehaving receiver.  On the other hand, in some cases\n\
    \   the modified cwnd growth algorithm causes larger bursts of segments\n   to\
    \ be sent into the network.  In some cases this can lead to a non-\n   negligible\
    \ increase in the drop rate and reduced performance (see\n   section 4 for a larger\
    \ discussion of the issues).\n   This document is organized as follows.  Section\
    \ 2 outlines the\n   modified algorithm for increasing TCP's congestion window.\
    \  Section 3\n   discusses the advantages of using the modified algorithm.  Section\
    \ 4\n   discusses the disadvantages of the approach outlined in this\n   document.\
    \  Section 5 outlines some of the fairness issues that must\n   be considered\
    \ for the modified algorithm.  Section 6 discusses\n   security considerations.\n\
    \   Statement of Intent\n      This specification contains an algorithm improving\
    \ the performance\n      of TCP which is understood to be effective and safe,\
    \ but which has\n      not been widely deployed.  One goal of publication as an\n\
    \      Experimental RFC is to be prudent, and encourage use and\n      deployment\
    \ prior to publication in the standards track.  It is the\n      intent of the\
    \ Transport Area to re-submit this specification as an\n      IETF Proposed Standard\
    \ in the future, after more experience has\n      been gained.\n"
- title: 2   A Modified Algorithm for Increasing the Congestion Window
  contents:
  - "2   A Modified Algorithm for Increasing the Congestion Window\n   As originally\
    \ outlined in [Jac88] and specified in [RFC2581], TCP\n   uses two algorithms\
    \ for increasing the congestion window.  During\n   steady-state, TCP uses the\
    \ Congestion Avoidance algorithm to linearly\n   increase the value of cwnd. \
    \ At the beginning of a transfer, after a\n   retransmission timeout or after\
    \ a long idle period (in some\n   implementations), TCP uses the Slow Start algorithm\
    \ to increase cwnd\n   exponentially.  According to RFC 2581, slow start bases\
    \ the cwnd\n   increase on the number of incoming acknowledgments.  During\n \
    \  congestion avoidance RFC 2581 allows more latitude in increasing\n   cwnd,\
    \ but traditionally implementations have based the increase on\n   the number\
    \ of arriving ACKs.  In the following two subsections, we\n   detail modifications\
    \ to these algorithms to increase cwnd based on\n   the number of bytes being\
    \ acknowledged by each arriving ACK, rather\n   than by the number of ACKs that\
    \ arrive.  We call these changes\n   \"Appropriate Byte Counting\" (ABC) [All99].\n"
- title: 2.1 Congestion Avoidance
  contents:
  - "2.1 Congestion Avoidance\n   RFC 2581 specifies that cwnd should be increased\
    \ by 1 segment per\n   round-trip time (RTT) during the congestion avoidance phase\
    \ of a\n   transfer.  Traditionally, TCPs have approximated this increase by\n\
    \   increasing cwnd by 1/cwnd for each arriving ACK.  This algorithm\n   opens\
    \ cwnd by roughly 1 segment per RTT if the receiver ACKs each\n   incoming segment\
    \ and no ACK loss occurs.  However, if the receiver\n   implements delayed ACKs\
    \ [Bra89], the receiver returns roughly half as\n   many ACKs, which causes the\
    \ sender to open cwnd more conservatively\n   (by approximately 1 segment every\
    \ second RTT).  The approach that\n   this document suggests is to store the number\
    \ of bytes that have been\n   ACKed in a \"bytes_acked\" variable in the TCP control\
    \ block.  When\n   bytes_acked becomes greater than or equal to the value of the\n\
    \   congestion window, bytes_acked is reduced by the value of cwnd.\n   Next,\
    \ cwnd is incremented by a full-sized segment (SMSS).  The\n   algorithm suggested\
    \ above is specifically allowed by RFC 2581 during\n   congestion avoidance because\
    \ it opens the window by at most 1 segment\n   per RTT.\n"
- title: 2.2 Slow Start
  contents:
  - "2.2 Slow Start\n   RFC 2581 states that the sender increments the congestion\
    \ window by\n   at most, 1*SMSS bytes for each arriving acknowledgment during\
    \ slow\n   start.  This document proposes that a TCP sender SHOULD increase cwnd\n\
    \   by the number of previously unacknowledged bytes ACKed by each\n   incoming\
    \ acknowledgment, provided the increase is not more than L\n   bytes.  Choosing\
    \ the limit on the increase, L, is discussed in the\n   next subsection.  When\
    \ the number of previously unacknowledged bytes\n   ACKed is less than or equal\
    \ to 1*SMSS bytes, or L is less than or\n   equal to 1*SMSS bytes, this proposal\
    \ is no more aggressive (and\n   possibly less aggressive) than allowed by RFC\
    \ 2581.  However,\n   increasing cwnd by more than 1*SMSS bytes in response to\
    \ a single ACK\n   is more aggressive than allowed by RFC 2581.  The more aggressive\n\
    \   version of the slow start algorithm still falls within the spirit of\n   the\
    \ principles outlined in [Jac88] (i.e., of no more than doubling\n   the cwnd\
    \ per RTT), and this document proposes ABC for experimentation\n   in shared networks,\
    \ provided an appropriate limit is applied (see\n   next section).\n"
- title: 2.3 Choosing the Limit
  contents:
  - "2.3 Choosing the Limit\n   The limit, L, chosen for the cwnd increase during\
    \ slow start,\n   controls the aggressiveness of the algorithm.  Choosing L=1*SMSS\n\
    \   bytes provides behavior that is no more aggressive than allowed by\n   RFC\
    \ 2581.  However, ABC with L=1*SMSS bytes is more conservative in a\n   number\
    \ of key ways (as discussed in the next section) and therefore,\n   this document\
    \ suggests that even though with L=1*SMSS bytes TCP\n   stacks will see little\
    \ performance change, ABC SHOULD be used.\n   A very large L could potentially\
    \ lead to large line-rate bursts of\n   traffic in the face of a large amount\
    \ of ACK loss or in the case when\n   the receiver sends \"stretch ACKs\" (ACKs\
    \ for more than the two full-\n   sized segments allowed by the delayed ACK algorithm)\
    \ [Pax97].\n   This document specifies that TCP implementations MAY use L=2*SMSS\n\
    \   bytes and MUST NOT use L > 2*SMSS bytes.  This choice balances\n   between\
    \ being conservative (L=1*SMSS bytes) and being potentially\n   very aggressive.\
    \  In addition, L=2*SMSS bytes exactly balances the\n   negative impact of the\
    \ delayed ACK algorithm (as discussed in more\n   detail in section 3.2).  Note\
    \ that when L=2*SMSS bytes cwnd growth is\n   roughly the same as the case when\
    \ the standard algorithms are used in\n   conjunction with a receiver that transmits\
    \ an ACK for each incoming\n   segment [All98] (assuming no or small amounts of\
    \ ACK loss in both\n   cases).\n   The exception to the above suggestion is during\
    \ a slow start phase\n   that follows a retransmission timeout (RTO).  In this\
    \ situation, a\n   TCP MUST use L=1*SMSS as specified in RFC 2581 since ACKs for\
    \ large\n   amounts of previously unacknowledged data are common during this\n\
    \   phase of a transfer.  These ACKs do not necessarily indicate how much\n  \
    \ data has left the network in the last RTT, and therefore ABC cannot\n   accurately\
    \ determine how much to increase cwnd.  As an example, say\n   segment N is dropped\
    \ by the network, and segments N+1 and N+2 arrive\n   successfully at the receiver.\
    \  The sender will receive only two\n   duplicate ACKs and therefore must rely\
    \ on the retransmission timer\n   (RTO) to detect the loss.  When the RTO expires,\
    \ segment N is\n   retransmitted.  The ACK sent in response to the retransmission\
    \ will\n   be for segment N+2.  However, this ACK does not indicate that three\n\
    \   segments have left the network in the last RTT, but rather only a\n   single\
    \ segment left the network.  Therefore, the appropriate cwnd\n   increment is\
    \ at most 1*SMSS bytes.\n"
- title: 2.4 RTO Implications
  contents:
  - "2.4 RTO Implications\n   [Jac88] shows that increases in cwnd of more than a\
    \ factor of two in\n   succeeding RTTs can cause spurious retransmissions on slow\
    \ links\n   where the bandwidth dominates the RTT, assuming the RTO estimator\n\
    \   given in [Jac88] and [RFC2988].  ABC stays within this limit of no\n   more\
    \ than doubling cwnd in successive RTTs by capping the increase\n   (no matter\
    \ what L is employed) by the number of previously\n   unacknowledged bytes covered\
    \ by each incoming ACK.\n"
- title: 3   Advantages
  contents:
  - "3   Advantages\n   This section outlines several advantages of using the ABC\
    \ algorithm\n   to increase cwnd, rather than the standard ACK counting algorithm\n\
    \   given in [RFC2581].\n"
- title: 3.1 More Appropriate Congestion Window Increase
  contents:
  - "3.1 More Appropriate Congestion Window Increase\n   The ABC algorithm outlined\
    \ in section 2 increases TCP's cwnd in\n   proportion to the amount of data actually\
    \ sent into the network.  ACK\n   counting, on the other hand, increments cwnd\
    \ by a constant upon the\n   arrival of each ACK.  For instance, consider an interactive\
    \ telnet\n   connection (e.g., ssh or telnet) in which ACKs generally cover only\
    \ a\n   few bytes of data, but cwnd is increased by 1*SMSS bytes for each ACK\n\
    \   received.  When a large amount of data needs to be transmitted (e.g.,\n  \
    \ displaying a large file) the data is sent in one large burst because\n   the\
    \ cwnd grows by 1*SMSS bytes per ACK rather than based on the\n   actual amount\
    \ of capacity used.  Such a line-rate burst of data can\n   potentially cause\
    \ a large amount of segment loss.\n   Congestion Window Validation (CWV) [RFC2861]\
    \ addresses the above\n   problem as well.  CWV limits the amount of unused cwnd\
    \ a TCP\n   connection can accumulate.  ABC can be used in conjunction with CWV\n\
    \   to obtain an accurate measure of the network path.\n"
- title: 3.2 Mitigate the Impact of Delayed ACKs and Lost ACKs
  contents:
  - "3.2 Mitigate the Impact of Delayed ACKs and Lost ACKs\n   Delayed ACKs [RFC1122,RFC2581]\
    \ allow a TCP receiver to refrain from\n   sending an ACK for each incoming segment.\
    \  However, a receiver SHOULD\n   send an ACK for every second full-sized segment\
    \ that arrives.\n   Furthermore, a receiver MUST NOT withhold an ACK for more\
    \ than 500\n   ms.  By reducing the number of ACKs sent to the data originator\
    \ the\n   receiver is slowing the growth of the congestion window under an ACK\n\
    \   counting system.  Using ABC with L=2*SMSS bytes can roughly negate\n   the\
    \ negative impact imposed by delayed ACKs by allowing cwnd to be\n   increased\
    \ for ACKs that are withheld by the receiver.  This allows\n   the congestion\
    \ window to grow in a manner similar to the case when\n   the receiver ACKs each\
    \ incoming segment, but without adding extra\n   traffic to the network.  Simulation\
    \ studies have shown increased\n   throughput when a TCP sender uses ABC when\
    \ compared to the standard\n   ACK counting algorithm [All99], especially for\
    \ short transfers that\n   never leave the initial slow start period.\n   Note\
    \ that delayed ACKs should not be an issue during slow start-based\n   loss recovery,\
    \ as RFC 2581 recommends that receivers should not delay\n   ACKs that cover out-of-order\
    \ segments.  Therefore, as discussed\n   above, ABC with L > 1*SMSS bytes is inappropriate\
    \ for such slow start\n   based loss recovery and MUST NOT be used.\n   Note:\
    \ In the case when an entire window of data is lost, a TCP\n   receiver will likely\
    \ generate delayed ACKs and an L > 1*SMSS bytes\n   would be safe.  However, detecting\
    \ this scenario is difficult.\n   Therefore to keep ABC conservative, this document\
    \ mandates that L\n   MUST NOT be > 1*SMSS bytes in any slow start-based loss\
    \ recovery.\n   ACK loss can also retard the growth of a congestion window that\n\
    \   increases based on the number of ACKs that arrive.  When counting\n   ACKs,\
    \ dropped ACKs represent forever-missed opportunities to increase\n   cwnd.  Using\
    \ ABC with L > 1*SMSS bytes allows the sender to mitigate\n   the effect of lost\
    \ ACKs.\n"
- title: 3.3 Prevents Attacks from Misbehaving Receivers
  contents:
  - "3.3 Prevents Attacks from Misbehaving Receivers\n   [SCWA99] outlines several\
    \ methods for a receiver to induce a TCP\n   sender into violating congestion\
    \ control and transmitting data at a\n   potentially inappropriate rate.  One\
    \ of the outlined attacks is \"ACK\n   Division\".  This scheme involves the receiver\
    \ sending multiple ACKs\n   for each incoming data segment, each ACKing only a\
    \ small portion of\n   the original TCP data segment.  Since TCP senders have\
    \ traditionally\n   used ACK counting to increase cwnd, ACK division causes\n\
    \   inappropriately rapid cwnd growth and, in turn, a potentially\n   inappropriate\
    \ sending rate.  A TCP sender that uses ABC can prevent\n   this attack from being\
    \ used to undermine standard congestion control\n   because the cwnd increase\
    \ is based on the number of bytes ACKed,\n   rather than the number of ACKs received.\n\
    \   To prevent misbehaving receivers from inducing inappropriate sender\n   behavior,\
    \ this document suggests TCP implementations use ABC, even if\n   L=1*SMSS bytes\
    \ (i.e., not allowing ABC to provide more aggressive\n   cwnd growth than allowed\
    \ by RFC 2581).\n"
- title: 4   Disadvantages
  contents:
  - "4   Disadvantages\n   The main disadvantages of using ABC with L=2*SMSS bytes\
    \ are an\n   increase in the burstiness of TCP and a small increase in the overall\n\
    \   loss rate.  [All98] discusses the two ways that ABC increases the\n   burstiness\
    \ of the TCP sender.  First, the \"micro burstiness\" of the\n   connection is\
    \ increased.  In other words, the number of segments sent\n   in response to each\
    \ incoming ACK is increased by at most 1 segment\n   when using ABC with L=2*SMSS\
    \ bytes in conjunction with a receiver\n   that is sending delayed ACKs.  During\
    \ slow start this translates into\n   an increase from sending 2 back-to-back\
    \ segments to sending 3 back-\n   to-back packets in response to an ACK for a\
    \ single packet.  Or, an\n   increase from 3 packets to 4 packets when receiving\
    \ a delayed ACK for\n   two outstanding packets.  Note that ACK loss can cause\
    \ larger bursts.\n   However, ABC only increases the burst size by at most 1*SMSS\
    \ bytes\n   per ACK received when compared to the standard behavior.  This slight\n\
    \   increase in the burstiness should only cause problems for devices\n   that\
    \ have very small buffers.  In addition, ABC increases the \"macro\n   burstiness\"\
    \ of the TCP sender in response to delayed ACKs in slow\n   start.  Rather than\
    \ increasing cwnd by roughly 1.5 times per RTT, ABC\n   roughly doubles the congestion\
    \ window every RTT.  However, doubling\n   cwnd every RTT fits within the spirit\
    \ of slow start, as originally\n   outlined [Jac88].\n   With the increased burstiness\
    \ comes a modest increase in the loss\n   rate for a TCP connection employing\
    \ ABC (see the next section for a\n   short discussion on the fairness of ABC\
    \ to non-ABC flows).  The\n   additional loss can be directly attributable to\
    \ the increased\n   aggressiveness of ABC.  During slow start cwnd is increased\
    \ more\n   rapidly.  Therefore when loss occurs cwnd is larger and more drops\n\
    \   are likely.  Similarly, a congestion avoidance cycle takes roughly\n   half,\
    \ as long when using ABC and delayed ACKs when compared to an ACK\n   counting\
    \ implementation.  In other words, a TCP sender reaches the\n   capacity of the\
    \ network path, drops a packet and reduces the\n   congestion window by half roughly\
    \ twice as often when using ABC.\n   However, as discussed above, in spite of\
    \ the additional loss an ABC\n   TCP sender generally obtains better overall performance\
    \ than a non-\n   ABC TCP [All99].\n   Due to the increase in the packet drop\
    \ rate we suggest ABC be\n   implemented in conjunction with selective acknowledgments\
    \ [RFC2018].\n"
- title: 5   Fairness Considerations
  contents:
  - "5   Fairness Considerations\n   [All99] presents several simple simulations conducted\
    \ to measure the\n   impact of ABC on competing traffic (both ABC and non-ABC).\
    \  The\n   experiments show that while ABC increases the drop rate for the\n \
    \  connection using ABC, competing traffic is not greatly effected.  The\n   experiments\
    \ show that standard TCP and ABC both obtain roughly the\n   same throughput,\
    \ regardless of the variant of the competing traffic.\n   The simulations also\
    \ reaffirm that ABC outperforms non-ABC TCP in an\n   environment with varying\
    \ types of TCP connections.  On the other\n   hand, the simulations presented\
    \ in [All99] are not necessarily\n   realistic.  Therefore we are encouraging\
    \ more experimentation in the\n   Internet.\n"
- title: 6   Security Considerations
  contents:
  - "6   Security Considerations\n   As discussed in section 3.3, ABC protects a TCP\
    \ sender from a\n   misbehaving receiver that induces the sender into transmitting\
    \ at an\n   inappropriate rate with an \"ACK division\" attack.  This, in turn,\n\
    \   protects the network from an overly aggressive sender.\n"
- title: 7   Conclusions
  contents:
  - "7   Conclusions\n   This document RECOMMENDS that all TCP stacks be modified\
    \ to use ABC\n   with L=1*SMSS bytes.  This change does not increase the\n   aggressiveness\
    \ of TCP.  Furthermore, simulations of ABC with L=2*SMSS\n   bytes show a promising\
    \ performance improvement that we encourage\n   researchers to experiment with\
    \ in the Internet.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document has benefited from discussions with and encouragement\n\
    \   from Sally Floyd.  Van Jacobson and Reiner Ludwig provided valuable\n   input\
    \ on the implications of byte counting on the RTO.  Reiner Ludwig\n   and Kostas\
    \ Pentikousis provided valuable feedback on a draft of this\n   document.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC1122] Braden, R., Ed., \"Requirements for Internet\
    \ Hosts --\n             Communication Layers\", STD 3, RFC 1122, October 1989.\n\
    \   [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n         \
    \    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2581] Allman,\
    \ M., Paxson, V. and W. Stevens, \"TCP Congestion\n             Control\", RFC\
    \ 2581, April 1999.\n"
- title: Informative References
  contents:
  - "Informative References\n   [All98]   Mark Allman.  On the Generation and Use\
    \ of TCP\n             Acknowledgments. ACM Computer Communication Review, 29(3),\n\
    \             July 1998.\n   [All99]   Mark Allman.  TCP Byte Counting Refinements.\
    \ ACM Computer\n             Communication Review, 29(3), July 1999.\n   [Jac88]\
    \   Van Jacobson.  Congestion Avoidance and Control.  ACM\n             SIGCOMM\
    \ 1988.\n   [Pax97]   Vern Paxson.  Automated Packet Trace Analysis of TCP\n \
    \            Implementations.  ACM SIGCOMM, September 1997.\n   [RFC2018] Mathis,\
    \ M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n             Selective Acknowledgment\
    \ Options\", RFC 2018, October 1996.\n   [RFC2861] Handley, M., Padhye, J. and\
    \ S. Floyd, \"TCP Congestion\n             Window Validation\", RFC 2861, June\
    \ 2000.\n   [SCWA99]  Stefan Savage, Neal Cardwell, David Wetherall, Tom\n   \
    \          Anderson.  TCP Congestion Control with a Misbehaving\n            \
    \ Receiver.  ACM Computer Communication Review, 29(5),\n             October 1999.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Allman\n   BBN Technologies/NASA Glenn Research Center\n\
    \   Lewis Field\n   21000 Brookpark Rd.  MS 54-5\n   Cleveland, OH  44135\n  \
    \ Fax: 216-433-8705\n   Phone: 216-433-6586\n   EMail: mallman@bbn.com\n   http://roland.grc.nasa.gov/~mallman\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
