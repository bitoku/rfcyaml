- title: __initial_text__
  contents:
  - '               Host Address Availability Recommendations

    '
- title: Abstract
  contents:
  - "Abstract\n   This document recommends that networks provide general-purpose end\n\
    \   hosts with multiple global IPv6 addresses when they attach, and it\n   describes\
    \ the benefits of and the options for doing so.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7934.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Common IPv6 Deployment Model  . . . . . . . . . . . . .\
    \ . . .   3\n   3.  Benefits of Providing Multiple Addresses  . . . . . . . .\
    \ . .   3\n   4.  Problems with Restricting the Number of Addresses per Host \
    \ .   4\n   5.  Overcoming Limits Using Network Address Translation . . . . .\
    \   5\n   6.  Options for Providing More Than One Address . . . . . . . . .  \
    \ 6\n   7.  Number of Addresses Required  . . . . . . . . . . . . . . . .   8\n\
    \   8.  Recommendations . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \ 9.  Operational Considerations  . . . . . . . . . . . . . . . . .   9\n    \
    \ 9.1.  Host Tracking . . . . . . . . . . . . . . . . . . . . . .   9\n     9.2.\
    \  Address Space Management  . . . . . . . . . . . . . . . .  10\n     9.3.  Addressing\
    \ Link-Layer Scalability Issues via IP Routing .  10\n   10. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  11\n   11. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  11\n     11.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .  11\n     11.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .  11\n   Acknowledgements  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  14\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In most aspects, the IPv6 protocol is very similar to IPv4.\
    \  This\n   similarity can create a tendency to think of IPv6 as 128-bit IPv4,\n\
    \   and thus lead network designers and operators to apply identical\n   configurations\
    \ and operational practices to both.  This is generally\n   a good thing because\
    \ it eases the transition to IPv6 and the\n   operation of dual-stack networks.\
    \  However, in some design and\n   operational areas, it can lead to carrying\
    \ over IPv4 practices that\n   are limiting or not appropriate in IPv6 due to\
    \ differences between\n   the protocols.\n   One such area is IP addressing, particularly\
    \ IP addressing of hosts.\n   This is substantially different because unlike IPv4\
    \ addresses, IPv6\n   addresses are not a scarce resource.  In IPv6, a single\
    \ link provides\n   over four billion times more address space than the whole\
    \ IPv4\n   Internet [RFC7421].  Thus, unlike IPv4, IPv6 networks are not forced\n\
    \   by address scarcity concerns to provide only one address per host.\n   Furthermore,\
    \ providing multiple addresses has many benefits,\n   including application functionality\
    \ and simplicity, privacy, and\n   flexibility to accommodate future applications.\
    \  Another significant\n   benefit is the ability to provide Internet access without\
    \ the use of\n   Network Address Translation (NAT).  Providing only one IPv6 address\n\
    \   per host negates these benefits.\n   This document details the benefits of\
    \ providing multiple addresses\n   per host, and the problems with not doing so.\
    \  It recommends that\n   networks provide general-purpose end hosts with multiple\
    \ global\n   addresses when they attach and lists current options for doing so.\n\
    \   It does not specify any changes to protocols or host behavior.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   \"Key words for use in RFCs to Indicate Requirement Levels\"\
    \ [RFC2119].\n"
- title: 2.  Common IPv6 Deployment Model
  contents:
  - "2.  Common IPv6 Deployment Model\n   IPv6 is designed to support multiple addresses,\
    \ including multiple\n   global addresses, per interface (see Section 2.1 of [RFC4291]\
    \ and\n   Section 5.9.4 of [RFC6434]).  Today, many general-purpose IPv6 hosts\n\
    \   are configured with three or more addresses per interface: a link-\n   local\
    \ address, a stable address (e.g., using 64-bit Extended Unique\n   Identifiers\
    \ (EUI-64) or Opaque Interface Identifiers [RFC7217]), one\n   or more privacy\
    \ addresses [RFC4941], and possibly one or more\n   temporary or non-temporary\
    \ addresses obtained using the Dynamic Host\n   Configuration Protocol for IPv6\
    \ (DHCPv6) [RFC3315].\n   In most general-purpose IPv6 networks, hosts have the\
    \ ability to\n   configure additional IPv6 addresses from the link prefix(es)\
    \ without\n   explicit requests to the network.  Such networks include all 3GPP\n\
    \   networks ([RFC6459], Section 5.2), in addition to Ethernet and Wi-Fi\n   networks\
    \ using Stateless Address Autoconfiguration (SLAAC) [RFC4862].\n"
- title: 3.  Benefits of Providing Multiple Addresses
  contents:
  - "3.  Benefits of Providing Multiple Addresses\n   Today, there are many host functions\
    \ that require more than one IP\n   address to be available to the host, including:\n\
    \   o  Privacy addressing to prevent tracking by off-network hosts\n      [RFC4941].\n\
    \   o  Multiple processors inside the same device.  For example, in many\n   \
    \   mobile devices, both the application processor and the baseband\n      processor\
    \ need to communicate with the network, particularly for\n      technologies like\
    \ I-WLAN [TS.24327] where the two processors share\n      the Wi-Fi network connection.\n\
    \   o  Extending the network (e.g., \"tethering\").\n   o  Running virtual machines\
    \ on hosts.\n   o  Translation-based transition technologies such as 464XLAT (a\n\
    \      combination of stateful and stateless translation) [RFC6877] that\n   \
    \   translate between IPv4 and IPv6.  Some of these technologies\n      require\
    \ the availability of a dedicated IPv6 address in order to\n      determine whether\
    \ inbound packets are translated or native\n      ([RFC6877], Section 6.3).\n\
    \   o  Identifier-locator addressing (ILA) [ILA].\n   o  Future applications (e.g.,\
    \ per-application IPv6 addresses [TARP]).\n   Two examples of how the availability\
    \ of multiple addresses per host\n   has already allowed substantial deployment\
    \ of new applications\n   without explicit requests to the network are:\n   o\
    \  464XLAT. 464XLAT is usually deployed within a particular network;\n      in\
    \ this model, the operator can ensure that the network is\n      appropriately\
    \ configured to provide the customer-side translator\n      (CLAT) with the additional\
    \ IPv6 address it needs to implement\n      464XLAT.  However, there are deployments\
    \ where the provider-side\n      translator (PLAT) (i.e., NAT64) is provided as\
    \ a service by a\n      different network, without the knowledge or cooperation\
    \ of the\n      residential ISP (e.g., the IPv6v4 Exchange Service [IPv6v4]).\n\
    \      This type of deployment is only possible because those residential\n  \
    \    ISPs provide multiple IP addresses to their users, and thus those\n     \
    \ users can freely obtain the extra IPv6 address required to run\n      464XLAT.\n\
    \   o  /64 sharing [RFC7278].  When the topology supports it, this is a\n    \
    \  way to provide IPv6 tethering without needing to wait for network\n      operators\
    \ to deploy DHCPv6 Prefix Delegation (PD), which is only\n      available in 3GPP\
    \ release 10 or above ([RFC6459], Section 5.3).\n"
- title: 4.  Problems with Restricting the Number of Addresses per Host
  contents:
  - "4.  Problems with Restricting the Number of Addresses per Host\n   Providing\
    \ a restricted number of addresses per host implies that\n   functions that require\
    \ multiple addresses either will be unavailable\n   (e.g., if the network provides\
    \ only one IPv6 address per host, or if\n   the host has reached the limit of\
    \ the number of addresses available)\n   or will only be available after an explicit\
    \ request to the network is\n   granted.  Requiring explicit requests to the network\
    \ has the\n   following drawbacks:\n   o  Increased latency, because a provisioning\
    \ operation, and possibly\n      human intervention with an update to the Service\
    \ Level Agreement\n      (SLA), must complete before the functionality is available.\n\
    \   o  Uncertainty, because it is not known if a particular application\n    \
    \  function will be available until the provisioning operation\n      succeeds\
    \ or fails.\n   o  Complexity, because implementations need to deal with failures\
    \ and\n      somehow present them to the user.  Failures may manifest as\n   \
    \   timeouts, which may be slow and frustrating to users.\n   o  Increased load\
    \ on the network's provisioning servers.\n   Some operators may desire that their\
    \ networks be configured to limit\n   the number of IPv6 addresses per host. \
    \ Reasons might include\n   hardware limitations (e.g., Ternary Content-Addressable\
    \ Memory (TCAM)\n   size or size constraints of the Neighbor Cache table), business\n\
    \   models (e.g., a desire to charge the network's users on a per-device\n   basis),\
    \ or operational consistency with IPv4 (e.g., an IP address\n   management system\
    \ that only supports one address per host).  However,\n   hardware limitations\
    \ are expected to ease over time, and an attempt\n   to generate additional revenue\
    \ by charging per device may prove\n   counterproductive if customers respond\
    \ (as they did with IPv4) by\n   using NAT, which results in no additional revenue,\
    \ but leads to more\n   operational problems and higher support costs.\n"
- title: 5.  Overcoming Limits Using Network Address Translation
  contents:
  - "5.  Overcoming Limits Using Network Address Translation\n   When the network\
    \ limits the number of addresses available to a host,\n   this can mostly be overcome\
    \ by end hosts by using NAT, and indeed in\n   IPv4 the scarcity of addresses\
    \ is often mitigated by using NAT on the\n   host.  Thus, the limits could be\
    \ overcome in IPv6 as well by\n   implementing NAT66 on the host.\n   Unfortunately,\
    \ NAT has well-known drawbacks.  For example, it causes\n   application complexity\
    \ due to the need to implement NAT traversal.\n   It hinders development of new\
    \ applications.  On mobile devices, it\n   reduces battery life due to the necessity\
    \ of frequent keepalives,\n   particularly for UDP.  Applications using UDP that\
    \ need to work on\n   most of the Internet are forced to send keepalives at least\
    \ every 30\n   seconds [KA].  For example, the QUIC protocol uses a 15-second\n\
    \   keepalive [QUIC].  Other drawbacks of NAT are well-known and\n   documented\
    \ [RFC2993].  While IPv4 NAT is inevitable due to the\n   limited amount of IPv4\
    \ space available, that argument does not apply\n   to IPv6.  Guidance from the\
    \ Internet Architecture Board (IAB) is that\n   deployment of IPv6 NAT is not\
    \ desirable [RFC5902].\n   The desire to overcome the problems listed in Section\
    \ 4 without\n   disabling any features has resulted in developers implementing\
    \ IPv6\n   NAT.  There are fully stateful address+port NAT66 implementations in\n\
    \   client operating systems today: for example, Linux has supported\n   NAT66\
    \ since 2012 [L66].  At least one popular software hypervisor\n   also implemented\
    \ NAT66 to work around these issues [V66].  Wide\n   deployment of networks that\
    \ provide a restricted number of addresses\n   will cause proliferation of NAT66\
    \ implementations.\n   This is not a desirable outcome.  It is not desirable for\
    \ users\n   because they may experience application brittleness.  It is likely\n\
    \   not desirable for network operators either, as they may suffer higher\n  \
    \ support costs, and even when the decision to provide only one IPv6\n   address\
    \ per device is dictated by the network's business model, there\n   may be little\
    \ in the way of incremental revenue, because devices can\n   share their IPv6\
    \ address with other devices.  Finally, it is not\n   desirable for operating\
    \ system manufacturers and application\n   developers, who will have to build\
    \ more complexity, lengthening\n   development time and/or reducing the time spent\
    \ on other features.\n   Indeed, it could be argued that the main reason for deploying\
    \ IPv6,\n   instead of continuing to scale the Internet using only IPv4 and\n\
    \   large-scale NAT44, is because doing so can provide all the hosts on\n   the\
    \ planet with end-to-end connectivity that is constrained not by\n   accidental\
    \ technical limitations, but only by intentional security\n   policies.\n"
- title: 6.  Options for Providing More Than One Address
  contents:
  - "6.  Options for Providing More Than One Address\n   Multiple IPv6 addresses can\
    \ be provided in the following ways:\n   o  Using Stateless Address Autoconfiguration\
    \ (SLAAC) [RFC4862].\n      SLAAC allows hosts to create global IPv6 addresses\
    \ on demand by\n      simply forming new addresses from the global prefix(es)\
    \ assigned\n      to the link.  Typically, SLAAC is used on shared links, but\
    \ it is\n      also possible to use SLAAC while providing a dedicated /64 prefix\n\
    \      to each host.  This is the case, for example, if the host is\n      connected\
    \ via a point-to-point link such as in 3GPP networks, on a\n      network where\
    \ each host has its own dedicated VLAN, or on a\n      wireless network where\
    \ every Media Access Control (MAC) address is\n      placed in its own broadcast\
    \ domain.\n   o  Using stateful DHCPv6 address assignment [RFC3315].  Most DHCPv6\n\
    \      clients only ask for one non-temporary address, but the protocol\n    \
    \  allows requesting multiple temporary and even multiple non-\n      temporary\
    \ addresses, and the server could choose to provide\n      multiple addresses.\
    \  It is also technically possible for a client\n      to request additional addresses\
    \ using a different DHCP Unique\n      Identifier (DUID), though the DHCPv6 specification\
    \ implies that\n      this is not expected behavior ([RFC3315], Section 9).  The\
    \ DHCPv6\n      server will decide whether to grant or reject the request based\
    \ on\n      information about the client, including its DUID, MAC address, and\n\
    \      more.  The maximum number of IPv6 addresses that can be provided\n    \
    \  in a single DHCPv6 packet, given a typical MTU of 1500 bytes or\n      smaller,\
    \ is approximately 30.\n   o  DHCPv6 Prefix Delegation (PD) [RFC3633].  DHCPv6\
    \ PD allows the\n      client to request and be delegated a prefix, from which\
    \ it can\n      autonomously form other addresses.  If the prefix is shorter than\n\
    \      /64, it can be divided into multiple subnets that can be further\n    \
    \  delegated to downstream clients.  If the prefix is a /64, it can\n      be\
    \ extended via L2 bridging, Neighbor Discovery (ND) proxying\n      [RFC4389],\
    \ or /64 sharing [RFC7278], but it cannot be further\n      subdivided, as a prefix\
    \ longer than /64 is outside the current\n      IPv6 specifications [RFC7421].\
    \  While the DHCPv6 Prefix Delegation\n      specification [RFC3633] assumes that\
    \ the DHCPv6 client is a\n      router, DHCPv6 PD itself does not require that\
    \ the client forward\n      IPv6 packets not addressed to itself, and thus does\
    \ not require\n      that the client be an IPv6 router as defined in the IPv6\n\
    \      specification [RFC2460].  Also, in many cases (such as tethering,\n   \
    \   or hosting virtual machines), hosts are already forwarding IPv6\n      packets\
    \ and thus operating as IPv6 routers as defined in the IPv6\n      specification\
    \ [RFC2460].\n   +--------------------------+-------+-------------+--------+---------+\n\
    \   |                          | SLAAC |    DHCPv6   | DHCPv6 |  DHCPv4 |\n  \
    \ |                          |       |   IA_NA /   |   PD   |         |\n   |\
    \                          |       |    IA_TA    |        |         |\n   +--------------------------+-------+-------------+--------+---------+\n\
    \   | Can extend network       |  No+  |      No     |  Yes   |   Yes   |\n  \
    \ |                          |       |             |        | (NAT44) |\n   |\
    \ Can number \"unlimited\"   |  Yes* |     Yes*    |   No   |    No   |\n   |\
    \ endpoints                |       |             |        |         |\n   | Uses\
    \ stateful, request-  |   No  |     Yes     |  Yes   |   Yes   |\n   | based assignment\
    \         |       |             |        |         |\n   | Is immune to Layer\
    \ 3 on- |   No  |     Yes     |  Yes   |   Yes   |\n   | link resource exhaustion\
    \ |       |             |        |         |\n   | attacks                  |\
    \       |             |        |         |\n   +--------------------------+-------+-------------+--------+---------+\n\
    \   [*] Subject to network limitations, e.g., ND cache entry size limits.\n  \
    \     [+] Except on certain networks, e.g., /64 sharing [RFC7278].\n        Table\
    \ 1: Comparison of Multiple Address Assignment Options\n"
- title: 7.  Number of Addresses Required
  contents:
  - "7.  Number of Addresses Required\n   If we itemize the use cases from Section\
    \ 3, we can estimate the\n   number of addresses currently used in normal operations.\
    \  In typical\n   implementations, privacy addresses use up to 7 addresses --\
    \ one per\n   day ([RFC4941], Section 3.5).  Current mobile devices sharing an\n\
    \   uplink connection may typically support 8 downstream client devices,\n   with\
    \ each one requiring one or more addresses.  A client might choose\n   to run\
    \ several virtual machines.  Current implementations of 464XLAT\n   require the\
    \ use of a separate address.  Some devices require another\n   address for their\
    \ baseband chip.  Even a host performing just a few\n   of these functions simultaneously\
    \ might need on the order of 20\n   addresses at the same time.  Future applications\
    \ designed to use an\n   address per application or even per resource will require\
    \ many more.\n   These will not function on networks that enforce a hard limit\
    \ on the\n   number of addresses provided to hosts.  Thus, in general it is not\n\
    \   possible to estimate in advance how many addresses are required.\n"
- title: 8.  Recommendations
  contents:
  - "8.  Recommendations\n   In order to avoid the problems described above and preserve\
    \ the\n   Internet's ability to support new applications that use more than one\n\
    \   IPv6 address, it is RECOMMENDED that IPv6 network deployments provide\n  \
    \ multiple IPv6 addresses from each prefix to general-purpose hosts.\n   To support\
    \ future use cases, it is NOT RECOMMENDED to impose a hard\n   limit on the size\
    \ of the address pool assigned to a host.\n   Particularly, it is NOT RECOMMENDED\
    \ to limit a host to only one IPv6\n   address per prefix.\n   Due to the drawbacks\
    \ imposed by requiring explicit requests for\n   address space (see Section 4),\
    \ it is RECOMMENDED that the network\n   give the host the ability to use new\
    \ addresses without requiring\n   explicit requests.  This can be achieved either\
    \ by allowing the host\n   to form new addresses autonomously (e.g., via SLAAC)\
    \ or by providing\n   the host with a dedicated /64 prefix.  The prefix MAY be\
    \ provided\n   using DHCPv6 PD, SLAAC with per-device VLANs, or any other means.\n\
    \   Using stateful address assignment (DHCPv6 IA_NA or IA_TA) to provide\n   multiple\
    \ addresses when the host connects (e.g., the approximately 30\n   addresses that\
    \ can fit into a single packet) would accommodate\n   current clients, but it\
    \ sets a limit on the number of addresses\n   available to hosts when they attach\
    \ and therefore limits the\n   development of future applications.\n"
- title: 9.  Operational Considerations
  contents:
  - '9.  Operational Considerations

    '
- title: 9.1.  Host Tracking
  contents:
  - "9.1.  Host Tracking\n   Some network operators -- often operators of networks\
    \ that provide\n   services to third parties such as university campus networks\
    \ -- are\n   required to track which IP addresses are assigned to which hosts\
    \ on\n   their network.  Maintaining persistent logs that map user IP\n   addresses\
    \ and timestamps to hardware identifiers such as MAC\n   addresses may be used\
    \ to attribute liability for copyright\n   infringement or other illegal activity.\n\
    \   It is worth noting that this requirement can be met without using\n   DHCPv6\
    \ address assignment.  For example, it is possible to maintain\n   these mappings\
    \ by monitoring the IPv6 neighbor table: routers\n   typically allow periodic\
    \ dumps of the Neighbor Cache via the Simple\n   Network Management Protocol (SNMP)\
    \ or other means, and many can be\n   configured to log every change to the Neighbor\
    \ Cache.  Using SLAAC\n   with a dedicated /64 prefix for each host simplifies\
    \ tracking, as it\n   does not require logging every address formed by the host,\
    \ but only\n   the prefix assigned to the host when it attaches to the network.\n\
    \   Similarly, providing address space using DHCPv6 PD has the same\n   tracking\
    \ properties as DHCPv6 address assignment, but allows the\n   network to provide\
    \ unrestricted address space.\n   Many large enterprise networks are fully dual\
    \ stack and implement\n   address monitoring without using or supporting DHCPv6.\
    \  The authors\n   are directly aware of several networks that operate in this\
    \ way,\n   including the Universities of Loughborough, Minnesota, Reading,\n \
    \  Southampton, and Wisconsin, and Imperial College London, in addition\n   to\
    \ the enterprise networks of the authors' employers.\n   It should also be noted\
    \ that using DHCPv6 address assignment does not\n   ensure that the network can\
    \ reliably track the IPv6 addresses used by\n   hosts.  On any shared network\
    \ without Layer 2 (L2) edge port\n   security, hosts are able to choose their\
    \ own addresses regardless of\n   what address provisioning methodology the network\
    \ operator believes\n   is in use.  The only way to restrict the addresses used\
    \ by hosts is\n   to use L2 security mechanisms that enforce that particular IPv6\n\
    \   addresses are used by particular link-layer addresses (for example,\n   Source\
    \ Address Validation Improvement (SAVI) [RFC7039]).  If those\n   mechanisms are\
    \ available, it is possible to use them to provide\n   tracking; this form of\
    \ tracking is more secure and reliable than\n   server logs because it operates\
    \ independently of how addresses are\n   allocated.  Finally, tracking address\
    \ information via DHCPv6 server\n   logs is likely to become decreasingly viable\
    \ due to ongoing efforts\n   to improve the privacy of DHCPv6 and MAC address\
    \ randomization\n   [RFC7844].\n"
- title: 9.2.  Address Space Management
  contents:
  - "9.2.  Address Space Management\n   In IPv4, all but the world's largest networks\
    \ can be addressed using\n   private space [RFC1918], with each host receiving\
    \ one IPv4 address.\n   Many networks can be numbered in 192.168.0.0/16, which\
    \ has roughly 65\n   thousand addresses.  In IPv6, that is equivalent to a /48,\
    \ with each\n   host receiving a /64 prefix.  Under current Regional Internet\n\
    \   Registry (RIR) policies, a /48 is easy to obtain for an enterprise\n   network.\
    \  Networks that need a bigger block of private space use\n   10.0.0.0/8, which\
    \ has roughly 16 million addresses.  In IPv6, that is\n   equivalent to a /40,\
    \ with each host receiving a /64 prefix.\n   Enterprises of such size can easily\
    \ obtain a /40 under current RIR\n   policies.\n   In the above cases, aggregation\
    \ and routing can be equivalent to\n   IPv4: if a network aggregates per-host\
    \ IPv4 addresses into prefixes\n   of length /32 - n, it can aggregate per-host\
    \ /64 prefixes into the\n   same number of prefixes of length /64 - n.\n   Currently,\
    \ residential users typically receive one IPv4 address and a\n   /48, /56, or\
    \ /60 IPv6 prefix.  While such networks do not provide\n   enough space to assign\
    \ a /64 per host, such networks almost\n   universally use SLAAC, and thus do\
    \ not pose any particular limit to\n   the number of addresses hosts can use.\n\
    \   Unlike IPv4 where addresses came at a premium, in all of these\n   networks\
    \ there is enough IPv6 address space to supply clients with\n   multiple IPv6\
    \ addresses.\n"
- title: 9.3.  Addressing Link-Layer Scalability Issues via IP Routing
  contents:
  - "9.3.  Addressing Link-Layer Scalability Issues via IP Routing\n   The number\
    \ of IPv6 addresses on a link has a direct impact on\n   networking infrastructure\
    \ nodes (routers, switches) and other nodes\n   on the link.  Setting aside exhaustion\
    \ attacks via L2 address\n   spoofing, every (L2, IP) address pair impacts networking\
    \ hardware\n   requirements in terms of memory, Multicast Listener Discovery (MLD)\n\
    \   snooping, solicited node multicast groups, etc.  Many of these costs\n   are\
    \ incurred by neighboring hosts.\n   Hosts on such networks that create unreasonable\
    \ numbers of addresses\n   risk impairing network connectivity for themselves\
    \ and other hosts on\n   the network, and in extreme cases (e.g., hundreds or\
    \ thousands of\n   addresses) may even find their network access restricted by\
    \ denial-\n   of-service protection mechanisms.\n   We expect these scaling limitations\
    \ to change over time as hardware\n   and applications evolve.  However, switching\
    \ to a dedicated /64\n   prefix per host can resolve these scaling limitations.\
    \  If the prefix\n   is provided via DHCPv6 PD, or if the prefix can be used by\
    \ only one\n   link-layer address (e.g., if the link layer uniquely identifies\
    \ or\n   authenticates hosts based on MAC addresses), then there will be only\n\
    \   one routing entry and one ND cache entry per host on the network.\n   Furthermore,\
    \ if the host is aware that the prefix is dedicated (e.g.,\n   if it was provided\
    \ via DHCPv6 PD and not SLAAC), it is possible for\n   the host to assign IPv6\
    \ addresses from this prefix to an internal\n   virtual interface such as a loopback\
    \ interface.  This obviates the\n   need to perform Neighbor Discovery and Duplicate\
    \ Address Detection on\n   the network interface for these addresses, reducing\
    \ network traffic.\n   Thus, assigning a dedicated /64 prefix per host is operationally\n\
    \   prudent.  Clearly, however, it requires more IPv6 address space than\n   using\
    \ shared links, so the benefits provided must be weighed with the\n   operational\
    \ overhead of address space management.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As mentioned in Section 9.3, on shared networks\
    \ using SLAAC, it is\n   possible for hosts to attempt to exhaust network resources\
    \ and\n   possibly deny service to other hosts by creating unreasonable numbers\n\
    \   (e.g., hundreds or thousands) of addresses.  Networks that provide\n   access\
    \ to untrusted hosts can mitigate this threat by providing a\n   dedicated /64\
    \ prefix per host.  It is also possible to mitigate the\n   threat by limiting\
    \ the number of ND cache entries that can be created\n   for a particular host,\
    \ but care must be taken to ensure that the\n   network does not prevent the legitimate\
    \ use of multiple IP addresses\n   by non-malicious hosts.\n   Security issues\
    \ related to host tracking are discussed in\n   Section 9.1.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ILA]      Herbert, T., \"Identifier-locator\
    \ addressing for network\n              virtualization\", Work in Progress, draft-herbert-nvo3-\n\
    \              ila-02, March 2016.\n   [IPv6v4]   Japan Internet Exchange, \"\
    IPv6v4 Exchange Service\", April\n              2013, <http://www.jpix.ad.jp/en/service/ipv6v4.html>.\n\
    \   [KA]       Roskind, J., \"Quick UDP Internet Connections\", November\n   \
    \           2013, <http://www.ietf.org/proceedings/88/slides/\n              slides-88-tsvarea-10.pdf>.\n\
    \   [L66]      McHardy, P., \"netfilter: ipv6: add IPv6 NAT support\",\n     \
    \         Linux commit 58a317f1061c894d2344c0b6a18ab4a64b69b815,\n           \
    \   August 2012, <https://git.kernel.org/cgit/linux/kernel/\n              git/torvalds/linux.git/commit/\n\
    \              ?id=58a317f1061c894d2344c0b6a18ab4a64b69b815>.\n   [QUIC]     Hamilton,\
    \ R., Iyengar, J., Swett, I., and A. Wilk, \"QUIC:\n              A UDP-Based\
    \ Secure and Reliable Transport for HTTP/2\",\n              Work in Progress,\
    \ draft-tsvwg-quic-protocol-02, January\n              2016.\n   [RFC1918]  Rekhter,\
    \ Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and E. Lear,\
    \ \"Address Allocation for Private Internets\",\n              BCP 5, RFC 1918,\
    \ DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC2993]\
    \  Hain, T., \"Architectural Implications of NAT\", RFC 2993,\n              DOI\
    \ 10.17487/RFC2993, November 2000,\n              <http://www.rfc-editor.org/info/rfc2993>.\n\
    \   [RFC3315]  Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins,\n    \
    \          C., and M. Carney, \"Dynamic Host Configuration Protocol\n        \
    \      for IPv6 (DHCPv6)\", RFC 3315, DOI 10.17487/RFC3315, July\n           \
    \   2003, <http://www.rfc-editor.org/info/rfc3315>.\n   [RFC3633]  Troan, O. and\
    \ R. Droms, \"IPv6 Prefix Options for Dynamic\n              Host Configuration\
    \ Protocol (DHCP) version 6\", RFC 3633,\n              DOI 10.17487/RFC3633,\
    \ December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n  \
    \ [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n          \
    \    Architecture\", RFC 4291, DOI 10.17487/RFC4291, February\n              2006,\
    \ <http://www.rfc-editor.org/info/rfc4291>.\n   [RFC4389]  Thaler, D., Talwar,\
    \ M., and C. Patel, \"Neighbor Discovery\n              Proxies (ND Proxy)\",\
    \ RFC 4389, DOI 10.17487/RFC4389, April\n              2006, <http://www.rfc-editor.org/info/rfc4389>.\n\
    \   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n    \
    \          Address Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n \
    \  [RFC4941]  Narten, T., Draves, R., and S. Krishnan, \"Privacy\n           \
    \   Extensions for Stateless Address Autoconfiguration in\n              IPv6\"\
    , RFC 4941, DOI 10.17487/RFC4941, September 2007,\n              <http://www.rfc-editor.org/info/rfc4941>.\n\
    \   [RFC5902]  Thaler, D., Zhang, L., and G. Lebovitz, \"IAB Thoughts on\n   \
    \           IPv6 Network Address Translation\", RFC 5902,\n              DOI 10.17487/RFC5902,\
    \ July 2010,\n              <http://www.rfc-editor.org/info/rfc5902>.\n   [RFC6434]\
    \  Jankiewicz, E., Loughney, J., and T. Narten, \"IPv6 Node\n              Requirements\"\
    , RFC 6434, DOI 10.17487/RFC6434, December\n              2011, <http://www.rfc-editor.org/info/rfc6434>.\n\
    \   [RFC6459]  Korhonen, J., Ed., Soininen, J., Patil, B., Savolainen,\n     \
    \         T., Bajko, G., and K. Iisakkila, \"IPv6 in 3rd Generation\n        \
    \      Partnership Project (3GPP) Evolved Packet System (EPS)\",\n           \
    \   RFC 6459, DOI 10.17487/RFC6459, January 2012,\n              <http://www.rfc-editor.org/info/rfc6459>.\n\
    \   [RFC6877]  Mawatari, M., Kawashima, M., and C. Byrne, \"464XLAT:\n       \
    \       Combination of Stateful and Stateless Translation\",\n              RFC\
    \ 6877, DOI 10.17487/RFC6877, April 2013,\n              <http://www.rfc-editor.org/info/rfc6877>.\n\
    \   [RFC7039]  Wu, J., Bi, J., Bagnulo, M., Baker, F., and C. Vogt, Ed.,\n   \
    \           \"Source Address Validation Improvement (SAVI) Framework\",\n    \
    \          RFC 7039, DOI 10.17487/RFC7039, October 2013,\n              <http://www.rfc-editor.org/info/rfc7039>.\n\
    \   [RFC7217]  Gont, F., \"A Method for Generating Semantically Opaque\n     \
    \         Interface Identifiers with IPv6 Stateless Address\n              Autoconfiguration\
    \ (SLAAC)\", RFC 7217,\n              DOI 10.17487/RFC7217, April 2014,\n    \
    \          <http://www.rfc-editor.org/info/rfc7217>.\n   [RFC7278]  Byrne, C.,\
    \ Drown, D., and A. Vizdal, \"Extending an IPv6\n              /64 Prefix from\
    \ a Third Generation Partnership Project\n              (3GPP) Mobile Interface\
    \ to a LAN Link\", RFC 7278,\n              DOI 10.17487/RFC7278, June 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7278>.\n   [RFC7421]  Carpenter,\
    \ B., Ed., Chown, T., Gont, F., Jiang, S.,\n              Petrescu, A., and A.\
    \ Yourtchenko, \"Analysis of the 64-bit\n              Boundary in IPv6 Addressing\"\
    , RFC 7421,\n              DOI 10.17487/RFC7421, January 2015,\n             \
    \ <http://www.rfc-editor.org/info/rfc7421>.\n   [RFC7844]  Huitema, C., Mrugalski,\
    \ T., and S. Krishnan, \"Anonymity\n              Profiles for DHCP Clients\"\
    , RFC 7844,\n              DOI 10.17487/RFC7844, May 2016,\n              <http://www.rfc-editor.org/info/rfc7844>.\n\
    \   [TARP]     Gleitz, PM. and SB. Bellovin, \"Transient Addressing for\n    \
    \          Related Processes: Improved Firewalling by Using IPv6 and\n       \
    \       Multiple Addresses per Host\", In Proceedings of the\n              Eleventh\
    \ Usenix Security Symposium, August 2001,\n              <https://www.usenix.org/legacy/events/sec01/gleitz.html>.\n\
    \   [TS.24327] 3GPP, \"Mobility between 3GPP Wireless Local Area Network\n   \
    \           (WLAN) interworking (I-WLAN) and 3GPP systems; General\n         \
    \     Packet Radio System (GPRS) and 3GPP I-WLAN aspects; Stage\n            \
    \  3\", 3GPP TS 24.327, June 2011,\n              <http://www.3gpp.org/DynaReport/24327.htm>.\n\
    \   [V66]      Oracle, \"What's New in VirtualBox 4.3?\", October 2013,\n    \
    \          <https://blogs.oracle.com/fatbloke/entry/\n              what_s_new_in_virtualbox>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors thank Tore Anderson, Brian Carpenter, David\
    \ Farmer,\n   Wesley George, Geoff Huston, Erik Kline, Victor Kuarsingh, Shucheng\n\
    \   (Will) Liu, Shin Miyakawa, Dieter Siegmund, Mark Smith, Sander\n   Steffann,\
    \ Fred Templin, and James Woodyatt for their input and\n   contributions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Lorenzo Colitti\n   Google\n   Roppongi 6-10-1\n   Minato,\
    \ Tokyo  106-6126\n   Japan\n   Email: lorenzo@google.com\n   Vint Cerf\n   Google\n\
    \   1875 Explorer Street\n   10th Floor\n   Reston, VA  20190\n   United States\
    \ of America\n   Email: vint@google.com\n   Stuart Cheshire\n   Apple Inc.\n \
    \  1 Infinite Loop\n   Cupertino, CA  95014\n   United States of America\n   Email:\
    \ cheshire@apple.com\n   David Schinazi\n   Apple Inc.\n   1 Infinite Loop\n \
    \  Cupertino, CA  95014\n   United States of America\n   Email: dschinazi@apple.com\n"
