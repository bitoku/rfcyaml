- title: __initial_text__
  contents:
  - '        Guidelines for Extending the RTP Control Protocol (RTCP)

    '
- title: Abstract
  contents:
  - "Abstract\n   The RTP Control Protocol (RTCP) is used along with the Real-time\n\
    \   Transport Protocol (RTP) to provide a control channel between media\n   senders\
    \ and receivers.  This allows constructing a feedback loop to\n   enable application\
    \ adaptation and monitoring, among other uses.  The\n   basic reporting mechanisms\
    \ offered by RTCP are generic, yet quite\n   powerful and suffice to cover a range\
    \ of uses.  This document\n   provides guidelines on extending RTCP if those basic\
    \ mechanisms prove\n   insufficient.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5968.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. RTP and RTCP Operation Overview .................................4\n    \
    \  3.1. RTCP Capabilities ..........................................5\n      3.2.\
    \ RTCP Limitations ...........................................7\n      3.3. Interactions\
    \ with Network- and Transport-Layer Mechanisms ..8\n   4. Issues with RTCP Extensions\
    \ .....................................9\n   5. Guidelines .....................................................10\n\
    \   6. Security Considerations ........................................14\n  \
    \ 7. Acknowledgements ...............................................15\n   8.\
    \ References .....................................................15\n      8.1.\
    \ Normative References ......................................15\n      8.2. Informative\
    \ References ....................................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Real-time Transport Protocol (RTP) [RFC3550] is used\
    \ to carry\n   time-dependent (often continuous) media such as audio or video\
    \ across\n   a packet network in an RTP session.  RTP usually runs on top of an\n\
    \   unreliable transport such as UDP, Datagram Transport Layer Security\n   (DTLS),\
    \ or the Datagram Congestion Control Protocol (DCCP), so that\n   RTP packets\
    \ are susceptible to loss, re-ordering, or duplication.\n   Associated with RTP\
    \ is the RTP Control Protocol (RTCP), which\n   provides a control channel for\
    \ each session: media senders provide\n   information about their current sending\
    \ activities (\"feed forward\"),\n   and media receivers report on their reception\
    \ statistics (\"feedback\")\n   in terms of received packets, losses, and jitter.\
    \  Senders and\n   receivers provide self-descriptions allowing them to disambiguate\
    \ all\n   entities in an RTP session and correlate synchronisation source\n  \
    \ (SSRC) identifiers with specific application instances.  RTCP is\n   carried\
    \ over the same transport as RTP and is inherently best-effort;\n   hence the\
    \ RTCP reports are designed for such an unreliable\n   environment, e.g., by making\
    \ them \"for information only\".\n   The RTCP control channel provides coarse-grained\
    \ information about\n   the session in two respects: 1) the RTCP sender report\
    \ (SR) and\n   receiver report (RR) packets contain only cumulative information\
    \ or\n   means over a certain period of time and 2) the time period is in the\n\
    \   order of seconds and thus neither has a high resolution nor does the\n   feedback\
    \ come back instantaneously.  Both these restrictions have\n   their origin in\
    \ RTP being scalable and generic.  Even these basic\n   mechanisms (which are\
    \ still not implemented everywhere despite their\n   simplicity and very precise\
    \ specification, including sample code)\n   offer substantial information for\
    \ designing adaptive applications and\n   for monitoring purposes, among others.\n\
    \   Recently, numerous extensions have been proposed in different\n   contexts\
    \ to RTCP that significantly increase the complexity of the\n   protocol and the\
    \ reported values, mutate it toward a command channel,\n   and/or attempt turning\
    \ it into a reliable messaging protocol.  While\n   the reasons for such extensions\
    \ may be legitimate, many of the\n   resulting designs appear ill-advised in the\
    \ light of the RTP\n   architecture.  Moreover, extensions are often badly motivated\
    \ and\n   thus appear unnecessary given what can be achieved with the RTCP\n \
    \  mechanisms in place today.\n   This document is intended to provide some guidelines\
    \ for designing\n   RTCP extensions.  It is particularly intended to avoid an\
    \ extension\n   creep for corner cases that can only harm interoperability and\
    \ future\n   evolution of the protocol at large.  We first outline the basic\n\
    \   operation of RTCP and constructing feedback loops using the basic\n   RTCP\
    \ mechanisms.  Subsequently, we outline categories of extensions\n   proposed\
    \ (and partly already accepted) for RTCP and discuss issues\n   and alternative\
    \ ways of thinking by example.  Finally, we provide\n   some guidelines and highlight\
    \ a number of questions to ask (and\n   answer!) before writing up an RTCP extension.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The terminology defined in \"RTP: A Transport Protocol for\
    \ Real-Time\n   Applications\" [RFC3550], \"RTP Profile for Audio and Video Conferences\n\
    \   with Minimal Control\" [RFC3551], and \"Extended RTP Profile for Real-\n \
    \  time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF)\"\n   [RFC4585]\
    \ apply.\n"
- title: 3.  RTP and RTCP Operation Overview
  contents:
  - "3.  RTP and RTCP Operation Overview\n   One of the twelve networking truths in\
    \ [RFC1925] states: \"In protocol\n   design, perfection has been reached not\
    \ when there is nothing left to\n   add, but when there is nothing left to take\
    \ away\".  Despite (or\n   because of) this being an April 1st RFC, this specific\
    \ truth is very\n   valid, and it applies to RTCP as well.\n   In this section,\
    \ we will briefly review what is available from the\n   basic RTP/RTCP specifications.\
    \  As specifications, we include those\n   that are generic, i.e., do not have\
    \ dependencies on particular media\n   types.  This includes the RTP base specification\
    \ [RFC3550] and\n   profile [RFC3551], the RTCP bandwidth modifiers for session\n\
    \   descriptions [RFC3556], the timely feedback extensions (RFC 4585),\n   and\
    \ the extensions to run RTCP over source-specific multicast (SSM)\n   networks\
    \ [RFC5760].  RTCP extended reports (XRs) [RFC3611] provide\n   extended reporting\
    \ mechanisms that are partly generic in nature, and\n   partly specific to a certain\
    \ media stream.\n   We do not discuss RTP-related documents that are orthogonal\
    \ to RTCP.\n   The Secure RTP Profile [RFC3711] can be used to secure RTCP in\
    \ much\n   the same way it secures RTP data, but otherwise does not affect the\n\
    \   behaviour of RTCP.  The transport protocol used also has little\n   impact,\
    \ since RTCP remains a group communication protocol even when\n   running over\
    \ a unicast transport (such as TCP [RFC4571] or DCCP\n   [RFC5762]), and is little\
    \ affected by congestion control due to its\n   low rate relative to the media.\
    \  The description of RTP topologies\n   [RFC5117] is useful knowledge, but is\
    \ functionally not relevant here.\n   The various RTP error correction mechanisms\
    \ (e.g., [RFC2198],\n   [RFC4588], [RFC5109]) are useful for protecting RTP media\
    \ streams,\n   and may be enabled as a result of RTCP feedback, but do not directly\n\
    \   affect RTCP behaviour.  Finally, RTP and RTCP may be multiplexed\n   inside\
    \ the same transport connection or using the same port number\n   [RFC5761], but\
    \ this does not affect the operation of RTCP itself;\n   distinguishing RTP and\
    \ RTCP packets is achieved because the code\n   points for RTCP and the payload\
    \ types for RTP use disjoint number\n   spaces.\n"
- title: 3.1.  RTCP Capabilities
  contents:
  - "3.1.  RTCP Capabilities\n   The RTP/RTCP specifications quoted above provide\
    \ feedback mechanisms\n   with the following properties, which can be considered\
    \ as \"building\n   blocks\" for adaptive real-time applications for IP networks.\n\
    \   o  Sender reports (SRs) indicate to the receivers the total number of\n  \
    \    packets and octets that have been sent (since the beginning of the\n    \
    \  session or the last change of the sender's SSRC).  These values\n      allow\
    \ deducing the mean data rate and mean packet size for both\n      the entire\
    \ session and, if continuously monitored, for every\n      transmission interval.\
    \  They also allow a receiver to distinguish\n      between breaks in reception\
    \ caused by network problems, and those\n      due to pauses in transmission.\n\
    \   o  Receiver reports (RRs) and SRs indicate reception statistics from\n   \
    \   each receiver for every sender.  These statistics include:\n      *  The packet\
    \ loss rate since the last SR or RR was sent.\n      *  The total number of packets\
    \ lost since the beginning of the\n         session, which may again be broken\
    \ down to each reporting\n         period.\n      *  The highest sequence number\
    \ received so far -- which allows a\n         sender to roughly estimate how much\
    \ data is in flight when used\n         together with the SR and RR timestamps\
    \ (and also allows\n         observing whether the path still works and at which\
    \ rate\n         packets are delivered to the receiver).\n      *  The moving\
    \ average of the inter-arrival jitter of media\n         packets.  This gives\
    \ the sender an indirect view of the size of\n         any adaptive playout buffer\
    \ used at the receiver ([RFC3611]\n         gives precise figures for Voice over\
    \ IP (VoIP) sessions).\n   o  Sender reports also contain NTP and RTP format timestamps.\
    \  These\n      allow receivers to synchronise multiple RTP streams, and (when\n\
    \      used in conjunction with receiver reports) allow the sender to\n      calculate\
    \ the current round-trip time (RTT) to each receiver.\n      This value can be\
    \ monitored over time and thus may be used to\n      infer trends at coarse granularity.\
    \  A similar mechanism is\n      provided by [RFC3611] to allow receivers to calculate\
    \ the RTT to\n      senders.\n   RTCP sender reports and receiver reports are\
    \ sent, and the statistics\n   are sampled, at random intervals chosen uniformly\
    \ in the range from\n   0.5 to 1.5 times the deterministic calculated interval,\
    \ T.  The\n   interval T is calculated based on the media bitrate, the mean RTCP\n\
    \   packet size, whether the sampling node is a sender or a receiver, and\n  \
    \ the number of participants in the session, and will remain constant\n   while\
    \ the number of participants in the session remains constant.\n   The lower bound\
    \ on the base inter-report interval, T, is five\n   seconds, or 360 seconds divided\
    \ by the session bandwidth in kilobits/\n   second (giving an interval smaller\
    \ than 5 seconds for bandwidths\n   greater than 72 kbits/s) [RFC3550].\n   This\
    \ lower limit can be eliminated, allowing more frequent feedback,\n   when using\
    \ the early feedback profile for RTCP [RFC4585].  In this\n   case, the RTCP frequency\
    \ is only limited by the available bitrate\n   (usually 5% of the media stream\
    \ bitrate is allocated for RTCP).  If\n   this fraction is insufficient, the RTCP\
    \ bitrate may be increased in\n   the session description to enable more frequent\
    \ feedback [RFC3556].\n   The considerations in [RFC5506] may be used to reduce\
    \ the mean RTCP\n   packet size, further increasing feedback frequency.\n   The\
    \ mechanisms defined in [RFC4585] even allow -- statistically -- a\n   receiver\
    \ to provide close-to-instant feedback to a sender about\n   observed events in\
    \ the media stream (e.g., picture or slice loss).\n   RTCP is suitable for unicast\
    \ and multicast communications.  All basic\n   functions are designed with group\
    \ communications in mind.  While\n   traditional (any-source) multicast (ASM)\
    \ is clearly not available in\n   the Internet at large, source-specific multicast\
    \ (SSM) and overlay\n   multicast are -- and both are commercially relevant. \
    \ RTCP extensions\n   have been defined to operate over SSM, and complex topologies\
    \ may be\n   created by interconnecting RTP mixers and translators.  The group\n\
    \   communication nature of RTP and RTCP is also essential for the\n   operation\
    \ of Multipoint Control Units.\n   These mechanisms can be used to implement a\
    \ quite flexible feedback\n   loop and enable short-term reaction to observed\
    \ events as well as\n   long-term adaptation to changes in the networking environment.\n\
    \   Adaptation mechanisms available on the sender side include (but are\n   not\
    \ limited to) choosing different codecs, different parameters for\n   codecs (spatial\
    \ or temporal resolution for video, audible quality for\n   audio and voice),\
    \ and different packet sizes to adjust the bitrate.\n   Furthermore, various forward\
    \ error correction (FEC) mechanisms and,\n   if RTTs are short and the application\
    \ permits extra delays, even\n   reactive error control such as retransmissions\
    \ can be used.  Long-\n   term feedback can be provided in regular RTCP reports\
    \ at configurable\n   intervals, whereas (close-to-)instant feedback is available\
    \ by means\n   of the early feedback profile.  Figure 1 below outlines this idea\n\
    \   graphically.\n Long-term adaptation:      RTCP sender reports      Media processing:\n\
    \ - Codec+parameter choice  - Data rate, pkt count    - De-jittering\n - Packet\
    \ size             - Timing and sync info    - Synchronisation\n - FEC, interleaving\
    \       - Traffic characteristics - Error concealment\n                   -------------------------------->\
    \   - Playout\n +---------------+/                                 \\+---------------+\n\
    \ |               | RTP media stream (codec, repair) |                |\n |  Media\
    \ sender |=================================>| Media receiver |\n |           \
    \    |                                  |                |\n +---------------+\\\
    \         RTCP receiver reports   /+---------------+\n                   <--------------------------------\n\
    \ Short-term reaction:      - long-term statistics    Control functions:\n - Retransmissions\
    \         - event information       - RTP monitoring\n - Retroactive FEC     \
    \    - media-specific info       and reporting\n - Adaptive source coding  - \"\
    congestion info\"(*)    - Instant event\n - Congestion control(*)            \
    \                     notifications\n (*) RTCP feedback is insufficient for the\
    \ purposes of TCP-friendly\n     congestion control due to the infrequent nature\
    \ of reporting\n     (which should be in the order of once per RTT), but can still\
    \ be\n     used to adapt to the available bandwidth on slower time-scales.\n \
    \               Figure 1: Outline of an RTCP Feedback Loop\n   It is important\
    \ to note that not all information needs to be\n   signalled explicitly -- ever,\
    \ or upon every RTCP packet -- but can be\n   derived locally from other pieces\
    \ of information and from the\n   evolution of the information over time.\n"
- title: 3.2.  RTCP Limitations
  contents:
  - "3.2.  RTCP Limitations\n   The design of RTP limits what can meaningfully be\
    \ done (and hence\n   should be done) with RTCP.  In particular, the design favours\n\
    \   scalability and loose coupling over tightly controlled feedback\n   loops.\
    \  Some of these limitations are listed below (they need to be\n   taken into\
    \ account when designing extensions):\n   o  RTCP is designed to provide occasional\
    \ feedback, which is unlike,\n      e.g., TCP ACKs, which can be sent in response\
    \ to every (other)\n      packet.  It does not offer per-packet feedback (even\
    \ when using\n      [RFC4585] with increased RTCP bandwidth fraction, the feedback\n\
    \      guarantees are only statistical in nature).\n   o  RTCP is not capable\
    \ of providing truly instant feedback.\n   o  RTCP is inherently unreliable and\
    \ does not guarantee any\n      consistency between the observed state at multiple\
    \ members of a\n      group.\n   It is important to note that these features of\
    \ RTCP are intentional\n   design choices, and are essential for it to scale to\
    \ large groups.\n"
- title: 3.3.  Interactions with Network- and Transport-Layer Mechanisms
  contents:
  - "3.3.  Interactions with Network- and Transport-Layer Mechanisms\n   As discussed\
    \ above, RTCP flows are used to measure, infer, and convey\n   information about\
    \ the performance of an RTP media stream.\n   Inference in baseline RTCP is mainly\
    \ limited to determining the path\n   RTT from pairs of RTCP SR and RR packets.\
    \  This inference makes the\n   implicit assumption that RTP and RTCP are treated\
    \ equally: they are\n   routed along the same path, mapped to the same (DiffServ)\
    \ traffic\n   classes, and treated as part of the same fair queuing classification.\n\
    \   This is true in many cases; however, since RTP and RTCP are generally\n  \
    \ sent using different ports, any flow classification based upon the\n   5-tuple\
    \ (of source and destination IP addresses, source and\n   destination port numbers,\
    \ and the transport protocol) could lead to a\n   differentiation between RTP\
    \ and RTCP flows, disrupting the\n   statistics.\n   While some networks may wish\
    \ to intentionally prioritise RTCP over\n   RTP (to provide quicker feedback)\
    \ or RTP over RTCP (since the media\n   is considered more important than control),\
    \ we recommend that they be\n   treated identically where possible, to enable\
    \ this inference of\n   network performance, and hence support application adaptation.\n\
    \   When using reliable transport connections for (RTP and) RTCP\n   [RFC2326]\
    \ [RFC4571], retransmissions and head-of-line blocking may\n   similarly lead\
    \ to inaccurate RTT estimates derived by RTCP.  (These\n   may, nevertheless,\
    \ properly reflect the mean RTT for a media packet,\n   including retransmissions.)\n\
    \   The conveyance of information in RTCP is affected by the above only\n   as\
    \ soon as the prioritisation leads to a disproportionately high\n   number of\
    \ RTCP packets being dropped.\n   All of this emphasises the unreliable nature\
    \ of RTCP.  Multiplexing\n   on the same port number [RFC5761] or inside the same\
    \ transport\n   connection might help mitigate some of these effects, but this\
    \ is\n   limited to speculation at this point and should not be relied upon.\n"
- title: 4.  Issues with RTCP Extensions
  contents:
  - "4.  Issues with RTCP Extensions\n   Issues that have come up in the past with\
    \ extensions to RTP and RTCP\n   include (but are probably not limited to) the\
    \ following:\n   o  Defining RTP or RTCP extensions only or primarily for unicast\
    \ two-\n      party sessions.  RTP is inherently a group communication protocol,\n\
    \      even when operating on a unicast connection.  Extensions may\n      become\
    \ useful in the future well outside their originally intended\n      area of application,\
    \ and should consider this.  Stating that\n      something works for unicast only\
    \ is not acceptable, particularly\n      since various flavours of multicast have\
    \ become relevant again,\n      and as middleboxes such as repair servers, mixers,\
    \ and RTCP-\n      supporting Multipoint Control Units (MCUs) [RFC5117] become\
    \ more\n      widely used.\n   o  Assuming reliable (instant) state synchronisation.\
    \  RTCP reports\n      are sent irregularly and may be lost.  Hence, there may\
    \ be a\n      significant time lag (several seconds) between intending to send\
    \ a\n      state update to the RTP peer(s) and the packet being received; in\n\
    \      some cases, the packet may not be received at all.\n   o  Requiring reliable\
    \ delivery of RTCP reports.  While reliability\n      can be implemented on top\
    \ of RTCP using acknowledgements, this\n      will come at the cost of significant\
    \ additional delay, which may\n      defeat the purpose of providing the feedback\
    \ in the first place.\n      Moreover, for scalability reasons due to the group-based\
    \ nature of\n      RTCP, these ACKs need to be adaptively rate limited or targeted\
    \ to\n      a subgroup or individual entity to avoid implosion as group sizes\n\
    \      increase.  RTCP is not intended or suitable for use as a reliable\n   \
    \   control channel.\n   o  Issuing commands, rather than giving hints.  RTCP\
    \ is about\n      reporting observations -- in a best-effort manner -- between\
    \ RTP\n      entities.  Causing actions on the remote side requires some form\n\
    \      of reliability (see above), and adherence cannot be verified.\n   o  Expanding\
    \ RTCP reporting, to use it as a network management tool.\n      RTCP is sensitive\
    \ to the size of RTCP reports as the latter\n      determines the mean reporting\
    \ interval given a certain bitrate\n      share for RTCP (yet, RTCP may also be\
    \ used to report information\n      that has fine-grained temporal characteristics,\
    \ if summarisation\n      or data reduction by the endpoint would lose essential\n\
    \      resolution).  The information going into RTCP reports should\n      primarily\
    \ target the peer(s) (and thus include information that\n      can be meaningfully\
    \ reacted upon); nevertheless, such reports may\n      provide useful information\
    \ to augment other network management\n      tools.  Gathering and reporting statistics\
    \ beyond this is not an\n      RTCP task and should be addressed by out-of-band\
    \ protocols.\n   o  Creating serious complexity.  Related to the previous item,\
    \ RTCP\n      reports that convey all kinds of data need to gather and\n     \
    \ calculate/infer this information to begin with (which requires\n      very precise\
    \ specifications).  Given that it already seems to be\n      difficult to even\
    \ implement baseline RTCP, any added complexity\n      can only discourage implementers,\
    \ may lead to buggy\n      implementations (in which case the reports do not serve\
    \ their\n      intended purpose), and hinder interoperability.\n   o  Introducing\
    \ architectural issues.  Extensions are written without\n      considering the\
    \ architectural concepts of RTP.  For example,\n      point-to-point communication\
    \ is assumed, yet third-party monitors\n      are expected to listen in.  Besides\
    \ being a bad idea to rely on\n      eavesdropping entities on the path, this\
    \ is obviously not possible\n      if Secure RTP (SRTP) is being used with encrypted\
    \ SRTCP packets.\n   This list is surely not exhaustive.  Also, the authors do\
    \ not claim\n   that the suggested extensions (even if using acknowledgements)\
    \ would\n   not serve a legitimate purpose.  We rather want to draw attention\
    \ to\n   the fact that the same results may be achievable in a way that is\n \
    \  architecturally cleaner and conceptually more RTP/RTCP-compliant.\n   The following\
    \ section contains a first attempt to provide some\n   guidelines on what to consider\
    \ when thinking about extensions to RTP\n   and RTCP.\n"
- title: 5.  Guidelines
  contents:
  - "5.  Guidelines\n   Designing RTCP extensions requires consideration of a number\
    \ of\n   issues, as well as in-depth understanding of the operation of RTP\n \
    \  mechanisms.  While it is expected that there are many aspects not yet\n   covered\
    \ by RTCP reporting and operation, quite a bit of functionality\n   is readily\
    \ available for use.  Other mechanisms should probably never\n   become part of\
    \ the RTP family of specifications, despite the\n   existence of their equivalents\
    \ in other environments.  In the\n   following, we provide some guidance to consider\
    \ when (and before!)\n   developing an extension to RTCP.\n   We begin with a\
    \ short checklist concerning the applicability of RTCP\n   in the first place:\n\
    \   o  Check what can be done with the existing mechanisms, exploiting\n     \
    \ the information that is already available in RTCP.  Is the need\n      for an\
    \ extension only perceived (e.g., due to lazy implementers,\n      or artificial\
    \ constraints in endpoints), or is the function or\n      data really not available\
    \ (or derivable from existing reports)?\n      It is worthwhile remembering that\
    \ redundant information supplied\n      by a protocol runs the risk of being inconsistent\
    \ at some point,\n      and various implementations may handle such situations\
    \ differently\n      (e.g., give precedence to different values).  Similarly,\
    \ there\n      should be exactly one (well-specified) way of performing every\n\
    \      function and operation of the protocol.\n   o  Is the extension applicable\
    \ to RTP entities running anywhere in\n      the Internet, or is it a link- or\
    \ environment-specific extension?\n      In the latter cases, local extensions\
    \ (e.g., header compression,\n      or non-RTP protocols) may be preferable. \
    \ RTCP should not be used\n      to carry information specific to a particular\
    \ (access) link.\n   o  Is the extension applicable in a group communication environment,\n\
    \      or is it specific to point-to-point communications?  RTP and RTCP\n   \
    \   are inherently group communication protocols, and extensions must\n      scale\
    \ gracefully with increasing group sizes.\n   From a conceptual viewpoint, the\
    \ designer of every RTCP extension\n   should ask -- and answer(!) -- at least\
    \ the following questions:\n   o  How will this new building block complement\
    \ and work with the\n      other components of RTCP?  Are all interactions fully\
    \ specified?\n   o  Will this extension work with all different profiles (e.g.,\
    \ the\n      Secure RTP profile [RFC3711], and the extended RTP profile for\n\
    \      RTCP-based feedback [RFC4585])?  Are any feature interactions\n      expected?\n\
    \   o  Should this extension be kept in-line with baseline RTP and its\n     \
    \ existing profiles, or does it deviate so much from the base RTP\n      operation\
    \ that an incompatible new profile must be defined?  Use\n      and definition\
    \ of incompatible profiles are strongly discouraged,\n      but if they prove\
    \ necessary, how do nodes using the different\n      profiles interact?  What\
    \ are the failure modes, and how is it\n      ensured that the system fails in\
    \ a safe manner?\n   o  How does this extension interoperate with other nodes\
    \ when the\n      extension is not understood by the peer(s)?\n   o  How will\
    \ the extension deal with different networking conditions\n      (e.g., how does\
    \ performance degrade with increases in losses and\n      latency, possibly across\
    \ orders of magnitude)?\n   o  How will this extension work with group communication\
    \ scenarios,\n      such as multicast?  Will the extensions degrade gracefully\
    \ with\n      increasing group sizes?  What will be the impact on the RTCP\n \
    \     report frequency and bitrate allocation?\n   For the specific design, the\
    \ following considerations should be taken\n   into account (they're a mixture\
    \ of common protocol design guidelines,\n   and specifics for RTCP):\n   o  First\
    \ of all, if there is (and for RTCP this applies quite often)\n      a mechanism\
    \ from a different networking environment, don't try to\n      directly recreate\
    \ this mechanism in RTP/RTCP.  The Internet\n      environment is extremely heterogeneous,\
    \ and will often have\n      drastically different properties and behaviour to\
    \ other network\n      environments.  Instead, ask what the actual semantics and\
    \ the\n      result required to be perceived by the application or the user\n\
    \      are.  Then, design a mechanism that achieves this result in a way\n   \
    \   that is compatible with RTP/RTCP.  (And do not forget that every\n      mechanism\
    \ will break when no packets get through -- the Internet\n      does not guarantee\
    \ connectivity or performance.)\n   o  Target re-usability of the specification.\
    \  That is, think broader\n      than a specific use case, and try to solve the\
    \ general problem in\n      cases where it makes sense to do so.  Point solutions\
    \ need a very\n      good motivation to be dealt with in the IETF in the first\
    \ place.\n      This essentially suggests developing building blocks whenever\n\
    \      possible, allowing them to be combined in different environments\n    \
    \  than initially considered.  Where possible, avoid mechanisms that\n      are\
    \ specific to particular payload formats, media types, link or\n      network\
    \ types, etc.\n   o  For everything (packet format, value, procedure, timer, etc.)\n\
    \      being defined, make sure that it is defined properly, so that\n      independent\
    \ interoperable implementation can be built.  It is not\n      sufficient that\
    \ you can implement the feature: it has to be\n      implemented in several years\
    \ by someone unfamiliar with the\n      working group discussion and industry\
    \ context.  Remember that\n      fields need to be both generated and reacted\
    \ upon, that mechanisms\n      need to be implemented, etc., and that all of this\
    \ increases the\n      complexity of an implementation.  Features that are too\
    \ complex\n      won't get implemented (correctly) in the first place.\n   o \
    \ Extensions defining new metrics and parameters should reference\n      existing\
    \ standards whenever possible, rather than try to invent\n      something new\
    \ and/or proprietary.\n   o  Remember that not every bit or every action must\
    \ be represented or\n      signalled explicitly.  It may be possible to infer\
    \ the necessary\n      pieces of information from other values or their evolution\
    \ (a very\n      prominent example is TCP congestion control).  As a result, it\
    \ may\n      be possible to de-couple bits on the wire from local actions and\n\
    \      reduce the overhead.\n   o  Particularly with media streams, reliability\
    \ can often be \"soft\".\n      Rather than implementing explicit acknowledgements,\
    \ receipt of a\n      hint may also be observed from the altered behaviour (e.g.,\
    \ the\n      reception of a requested intra-frame, or changing the reference\n\
    \      frame for video, changing the codec, etc.).  The semantics of\n      messages\
    \ should be idempotent so that the respective message may\n      be sent repeatedly.\
    \  Requiring hard reliability does not scale\n      with increasing group sizes,\
    \ and does not degrade gracefully as\n      network performance reduces.\n   o\
    \  Choose the appropriate extension point.  Depending on the type of\n      RTCP\
    \ extension being developed, new data items can be transported\n      in several\
    \ different ways:\n      *  A new RTCP Source Description (SDES) item is appropriate\
    \ for\n         transporting data that describes the source, or the user\n   \
    \      represented by the source, rather than the ongoing media\n         transmission.\
    \  New SDES items may be registered to transport\n         source description\
    \ information of general interest (see\n         [RFC3550], Section 15), or the\
    \ PRIV item ([RFC3550],\n         Section 6.5.8) may be used for proprietary extensions.\n\
    \      *  A new RTCP XR block type is appropriate for transporting new\n     \
    \    metrics regarding media transmission or reception quality (see\n        \
    \ [RFC3611], Section 6.2).\n      *  New RTP profiles may define a profile-specific\
    \ extension to\n         RTCP SR and/or RR packets, to give additional feedback\
    \ (see\n         [RFC3550], Section 6.4.3).  It is important to note that while\n\
    \         extensions using this mechanism have low overhead, they are not\n  \
    \       backwards compatible with other profiles.  Where compatibility\n     \
    \    is needed, it's generally more appropriate to define a new RTCP\n       \
    \  XR block or a new RTCP packet type instead.\n      *  New RTCP AVPF (Audio-Visual\
    \ Profile with Feedback) transport-\n         layer feedback messages should be\
    \ used to transmit general-\n         purpose feedback information that will be\
    \ generated and\n         processed by the RTP transport.  Examples include (negative)\n\
    \         acknowledgements for particular packets, or requests to limit\n    \
    \     the transmission rate.  This information is intended to be\n         independent\
    \ of the codec or application in use (see [RFC4585],\n         Sections 6.2 and\
    \ 9).\n      *  New RTCP AVPF payload-specific feedback messages should be used\n\
    \         to convey feedback information that is specific to a particular\n  \
    \       media codec, RTP payload format, or category of RTP payload\n        \
    \ formats.  Examples include video picture loss indication or\n         reference\
    \ picture selection, which are useful for many video\n         codecs (see [RFC4585],\
    \ Sections 6.3 and 9).\n      *  New RTCP AVPF application layer feedback messages\
    \ should be\n         used to convey higher-level feedback, from one application\
    \ to\n         another, above the level of codecs or transport (see [RFC4585],\n\
    \         Sections 6.4 and 9).\n      *  A new RTCP application-defined, or APP,\
    \ packet is appropriate\n         for private use by applications that don't need\
    \ to interoperate\n         with others, or for experimentation before registering\
    \ a new\n         RTCP packet type ([RFC3550], Section 6.7).  It is not\n    \
    \     appropriate to define a new RTCP APP packet in a standards\n         document:\
    \ use one of the other extension points, or define a\n         new RTCP packet\
    \ type instead.\n      *  Finally, new RTCP packet types may be registered with\
    \ IANA if\n         none of the other RTCP extension points are appropriate (see\n\
    \         [RFC3550], Section 15).\n   The RTP framework was designed following\
    \ the principle of application\n   level framing with integrated layer processing,\
    \ proposed by Clark and\n   Tennenhouse [ALF].  Effective use of RTP requires\
    \ that extensions and\n   implementations be designed and built following the\
    \ same philosophy.\n   That philosophy differs markedly from many previous systems\
    \ in this\n   space, and making effective use of RTP requires an understanding\
    \ of\n   those differences.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This memo does not specify any new protocol mechanisms\
    \ or procedures,\n   and so raises no explicit security considerations.  When\
    \ designing\n   RTCP extensions, it is important to consider the following points:\n\
    \   o  Privacy: RTCP extensions, in particular new Source Description\n      (SDES)\
    \ items, can potentially reveal information considered to be\n      sensitive\
    \ by end users.  Extensions should carefully consider the\n      uses to which\
    \ information they release could be put, and should be\n      designed to reveal\
    \ the minimum amount of additional information\n      needed for their correct\
    \ operation.\n   o  Congestion control: RTCP transmission timers have been carefully\n\
    \      designed such that the total amount of traffic generated by RTCP\n    \
    \  is a small fraction of the media data rate.  One consequence of\n      this\
    \ is that the individual RTCP reporting interval scales with\n      both the media\
    \ data rate and the group size.  The RTCP timing\n      algorithms have been shown\
    \ to scale from two-party unicast\n      sessions to groups with tens of thousands\
    \ of participants, and to\n      gracefully handle flash crowds and sudden departures\
    \ [TimerRecon].\n      Proposals that modify the RTCP timer algorithms must be\
    \ careful to\n      avoid congestion, potentially leading to denial of service,\
    \ across\n      the full range of environments where RTCP is used.\n   o  Denial\
    \ of service: RTCP extensions that change the location where\n      feedback is\
    \ sent must be carefully designed to prevent denial of\n      service attacks\
    \ against third-party nodes.  When such extensions\n      are signalled, for example\
    \ in the Session Description Protocol\n      (SDP), this typically requires some\
    \ form of authentication of the\n      signalling messages (e.g., see the security\
    \ considerations of\n      [RFC5760]).\n   The security considerations of the\
    \ RTP specification [RFC3550] apply,\n   along with any applicable profile (e.g.,\
    \ [RFC3551]).\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document has been motivated by many discussions\
    \ in the AVT WG.\n   The authors would like to acknowledge the active members\
    \ in the group\n   for providing the inspiration.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2198]      Perkins, C., Kouvelas, I., Hodson,\
    \ O., Hardman, V.,\n                  Handley, M., Bolot, J., Vega-Garcia, A.,\
    \ and S. Fosse-\n                  Parisis, \"RTP Payload for Redundant Audio\
    \ Data\",\n                  RFC 2198, September 1997.\n   [RFC2326]      Schulzrinne,\
    \ H., Rao, A., and R. Lanphier, \"Real Time\n                  Streaming Protocol\
    \ (RTSP)\", RFC 2326, April 1998.\n   [RFC3550]      Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n                  Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n                  Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC3551]      Schulzrinne, H. and S. Casner, \"RTP Profile for Audio\n  \
    \                and Video Conferences with Minimal Control\", STD 65,\n     \
    \             RFC 3551, July 2003.\n   [RFC3556]      Casner, S., \"Session Description\
    \ Protocol (SDP)\n                  Bandwidth Modifiers for RTP Control Protocol\
    \ (RTCP)\n                  Bandwidth\", RFC 3556, July 2003.\n   [RFC3611]  \
    \    Friedman, T., Caceres, R., and A. Clark, \"RTP Control\n                \
    \  Protocol Extended Reports (RTCP XR)\", RFC 3611,\n                  November\
    \ 2003.\n   [RFC3711]      Baugher, M., McGrew, D., Naslund, M., Carrara, E.,\
    \ and\n                  K. Norrman, \"The Secure Real-time Transport Protocol\n\
    \                  (SRTP)\", RFC 3711, March 2004.\n   [RFC4571]      Lazzaro,\
    \ J., \"Framing Real-time Transport Protocol\n                  (RTP) and RTP\
    \ Control Protocol (RTCP) Packets over\n                  Connection-Oriented\
    \ Transport\", RFC 4571, July 2006.\n   [RFC4585]      Ott, J., Wenger, S., Sato,\
    \ N., Burmeister, C., and J.\n                  Rey, \"Extended RTP Profile for\
    \ Real-time Transport\n                  Control Protocol (RTCP)-Based Feedback\
    \ (RTP/AVPF)\",\n                  RFC 4585, July 2006.\n   [RFC4588]      Rey,\
    \ J., Leon, D., Miyazaki, A., Varsa, V., and R.\n                  Hakenberg,\
    \ \"RTP Retransmission Payload Format\",\n                  RFC 4588, July 2006.\n\
    \   [RFC5109]      Li, A., \"RTP Payload Format for Generic Forward Error\n  \
    \                Correction\", RFC 5109, December 2007.\n   [RFC5506]      Johansson,\
    \ I. and M. Westerlund, \"Support for Reduced-\n                  Size Real-Time\
    \ Transport Control Protocol (RTCP):\n                  Opportunities and Consequences\"\
    , RFC 5506, April 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC1925]      Callon, R., \"The Twelve Networking\
    \ Truths\", RFC 1925,\n                  April 1996.\n   [RFC5117]      Westerlund,\
    \ M. and S. Wenger, \"RTP Topologies\",\n                  RFC 5117, January 2008.\n\
    \   [RFC5760]      Ott, J., Chesterfield, J., and E. Schooler, \"RTP\n       \
    \           Control Protocol (RTCP) Extensions for Single-Source\n           \
    \       Multicast Sessions with Unicast Feedback\", RFC 5760,\n              \
    \    February 2010.\n   [RFC5761]      Perkins, C. and M. Westerlund, \"Multiplexing\
    \ RTP Data\n                  and Control Packets on a Single Port\", RFC 5761,\n\
    \                  April 2010.\n   [RFC5762]      Perkins, C., \"RTP and the Datagram\
    \ Congestion Control\n                  Protocol (DCCP)\", RFC 5762, April 2010.\n\
    \   [ALF]          Clark, D. and D. Tennenhouse, \"Architectural\n           \
    \       Considerations for a New Generation of Protocols\",\n                \
    \  Proceedings of ACM SIGCOMM 1990, September 1990.\n   [TimerRecon]   Schulzrinne,\
    \ H. and J. Rosenberg, \"Timer\n                  Reconsideration for Enhanced\
    \ RTP Scalability\",\n                  Proceedings of IEEE Infocom 1998, March\
    \ 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joerg Ott\n   Aalto University\n   School of Science and\
    \ Technology\n   Otakaari 5 A\n   Espoo, FIN  02150\n   Finland\n   EMail: jo@netlab.tkk.fi\n\
    \   Colin Perkins\n   University of Glasgow\n   Department of Computing Science\n\
    \   Glasgow  G12 8QQ\n   United Kingdom\n   EMail: csp@csperkins.org\n"
