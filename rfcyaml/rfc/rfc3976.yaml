- title: __initial_text__
  contents:
  - '       Interworking SIP and Intelligent Network (IN) Applications

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose, and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   Public Switched Telephone Network (PSTN) services such as 800-number\n\
    \   routing (freephone), time-and-day routing, credit-card calling, and\n   virtual\
    \ private network (mapping a private network number into a\n   public number)\
    \ are realized by the Intelligent Network (IN).  This\n   document addresses means\
    \ to support existing IN services from Session\n   Initiation Protocol (SIP) endpoints\
    \ for an IP-host-to-phone call.\n   The call request is originated on a SIP endpoint,\
    \ but the services to\n   the call are provided by the data and procedures resident\
    \ in the\n   PSTN/IN.  To provide IN services in a transparent manner to SIP\n\
    \   endpoints, this document describes the mechanism for interworking SIP\n  \
    \ and Intelligent Network Application Part (INAP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Access to IN-Services from a SIP Entity. . . . . . .\
    \ . . . . .  4\n   3.  Additional SIN Considerations  . . . . . . . . . . . .\
    \ . . . .  7\n       3.1.  The Concept of State in SIP. . . . . . . . . . . .\
    \ . . .  7\n       3.2.  Relationship between SCP and a SIN-Enabled SIP entity.\
    \ .  7\n       3.3.  SIP REGISTER and IN services . . . . . . . . . . . . . .\
    \  8\n       3.4.  Support of Announcements and Mid-Call Signaling. . . . .  8\n\
    \   4.  The SIN Architecture . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \     4.1.  Definitions. . . . . . . . . . . . . . . . . . . . . . .  8\n    \
    \   4.2.  IN Service Control Based on the SIN Approach . . . . . .  9\n   5. \
    \ Mapping of the SIP State Machine to the IN State Model . . . . 10\n       5.1.\
    \  Mapping SIP Protocol State Machine to O_BCSM . . . . . . 11\n       5.2.  Mapping\
    \ SIP Protocol State Machine to T_BCSM . . . . . . 16\n   6.  Example Call Flows\
    \ . . . . . . . . . . . . . . . . . . . . . . 20\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 21\n   8.  References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 21\n       8.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . . 21\n       8.2.  Informative References .\
    \ . . . . . . . . . . . . . . . . 22\n       Appendix A . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 23\n       Acknowledgments. . . . . . . . . .\
    \ . . . . . . . . . . . . . . 24\n       Author's Addresses . . . . . . . . .\
    \ . . . . . . . . . . . . . 24\n       Full Copyright Statement . . . . . . .\
    \ . . . . . . . . . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   PSTN services such as 800-number routing (freephone), time-and-day\n\
    \   routing, credit-card calling, and virtual private network (mapping a\n   private\
    \ network number into a public number) are realized by the\n   Intelligent Network.\
    \  IN is an architectural concept for the real-\n   time execution of network\
    \ services and customer applications [1].  IN\n   is, by design, de-coupled from\
    \ the call processing component of the\n   PSTN.  In this document, we describe\
    \ the means to leverage this\n   decoupling to provide IN services from SIP-based\
    \ entities.\n   First, we will explain the basics of IN.  Figure 1 shows a simplified\n\
    \   IN architecture, in which telephone switches called Service Switching\n  \
    \ Points (SSPs) are connected via a packet network called Signaling\n   System\
    \ No. 7 (SS7) to Service Control Points (SCPs), which are\n   general purpose\
    \ computers.  At certain points in a call, a switch can\n   interrupt a call and\
    \ request instructions from an SCP on how to\n   proceed with the call.  The points\
    \ at which a call can be interrupted\n   are standardized within the Basic Call\
    \ State Model (BCSM) [1, 2].\n   The BCSM models contain two processes, one each\
    \ for the originating\n   and terminating part of a call.\n   When the SCP receives\
    \ a request for instructions, it can reply with a\n   single response, such as\
    \ a simple number translation augmented by\n   criteria like time of day or day\
    \ of week, or, in turn, initiate a\n   complex dialog with the switch.  The situation\
    \ is further complicated\n   by the necessity to engage other specialized devices\
    \ that collect\n   digits, play recorded announcements, perform text-to-speech\
    \ or\n   speech-to-text conversions, etc.  (These devices are not discussed\n\
    \   here.)  The related protocol, as well as the BCSM, is standardized by\n  \
    \ the ITU-T and known as the Intelligent Network Application Part\n   protocol\
    \ (INAP) [4].  Only the protocol, not an SCP API, has been\n   standardized.\n\
    \                          +-----------+\n                          |        \
    \   |\n                          |    SCP    |\n                          |  \
    \         |\n                          +-----------+\n                       \
    \         ||\n                                ||\n                           \
    \    /  \\\n                              /    \\\n                          \
    \   / INAP \\\n                            /        \\\n                     \
    \      /          \\\n                  +--------+  ISUP   +--------+\n      \
    \            |  SSP   |*********|  SSP   |\n                  +--------+     \
    \    +--------+\n                  Figure 1.  Simplified IN Architecture\n   The\
    \ overall objective is to ensure that IN control of Voice over IP\n   (VoIP) services\
    \ in networks can be readily specified and implemented\n   by adapting standards\
    \ and software used in the present networks.\n   This approach leads to services\
    \ that function the same when a user\n   connects to present or future networks,\
    \ simplifies service evolution\n   from present to future, and leads to more rapid\
    \ implementation.\n   The rest of this document is organized as follows: Section\
    \ 2 contains\n   the architectural model of an IN aware SIP entity.  Section 3\n\
    \   provides some issues to be taken into account when performing SIP/IN\n   interworking\
    \ (SIN).  Section 4 discusses the IN service control based\n   on the SIN approach.\
    \  The technique outlined in this document focuses\n   on the call models of IN\
    \ and the SIP protocol state machine; Section\n   5 thus establishes a complete\
    \ mapping between the two state machines\n   that allows access to IN services\
    \ from SIP endpoints.  Section 6\n   includes call flows of IN services executing\
    \ on SIP endpoints.  These\n   services are readily enabled by the technique described\
    \ in this\n   document.  Finally, Section 7 covers security aspects of SIN.\n"
- title: List of Acronyms
  contents:
  - "List of Acronyms\n   B2BUA       Back-to-Back User Agent\n   BCSM        Basic\
    \ Call State Model\n   CCF         Call Control Function\n   DP          Detection\
    \ Point\n   DTMF        Dual Tone Multi-Frequency\n   IN          Intelligent\
    \ Network\n   INAP        Intelligent Network Application Part\n   IP        \
    \  Internet Protocol\n   ITU-T       International Telecommunications Union -\n\
    \               Telecommunications Standardization Sector\n   O_BCSM      Originating\
    \ Basic Call State Model\n   PIC         Point in Call\n   PSTN        Public\
    \ Switched Telephone Network\n   RTP         Real Time Protocol\n   R-URI    \
    \   Request URI\n   SCF         Service Control Function\n   SCP         Service\
    \ Control Point\n   SIGTRAN     Signal Transport Working Group in IETF\n   SIN\
    \         SIP/IN Interworking\n   SIP         Session Initiation Protocol\n  \
    \ SS7         Signaling System  No. 7\n   SSF         Service Switching Function\n\
    \   SSP         Service Switching Point\n   T_BCSM      Terminating Basic Call\
    \ State Model\n   UA          User Agent\n   UAC         User Agent Client\n \
    \  UAS         User Agent Server\n   VoIP        Voice over IP\n   VPN       \
    \  Virtual Private Network\n"
- title: 2.  Access to IN-Services from a SIP Entity
  contents:
  - "2.  Access to IN-Services from a SIP Entity\n   The intent of this document is\
    \ to provide the means to support\n   existing IN-based applications in a SIP\
    \ [3] environment.  One way to\n   gain access to IN services transparently from\
    \ SIP (e.g., through the\n   same detection points (DPs) and point-in-call (PIC)\
    \ used by\n   traditional switches) is to map the SIP protocol state machine to\
    \ the\n   IN call models [1].\n   From the viewpoint of IN elements such as the\
    \ SCP, the request's\n   origin from a SIP entity rather than a call processing\
    \ function on a\n   traditional switch is immaterial.  Thus, it is important that\
    \ the SIP\n   entity be able to provide the same features as the traditional\n\
    \   switch, including operating as an SSP for IN features.  The SIP\n   entity\
    \ should also maintain call state and trigger queries to IN-\n   based services,\
    \ as do traditional switches.\n   This document does not intend to specify which\
    \ SIP entity shall\n   operate as an SSP; however, for the sake of completeness,\
    \ it should\n   be mentioned that this task should be performed by SIP entities\
    \ at\n   (or near) the core of the network rather than at the SIP end points\n\
    \   themselves.  To that extent, SIP entities such as proxy servers and\n   Back-to-Back\
    \ user agents (B2BUAs) may be employed.  Generally\n   speaking, proxy servers\
    \ can be used for IN services that occur during\n   a call setup and teardown.\
    \  For IN services requiring specialized\n   media handling (such as DTMF detection)\
    \ or specialized call control\n   (such as placing parties on hold) B2BUAs will\
    \ be required.\n   The most expeditious manner for providing existing IN services\
    \ in the\n   IP domain is to use the deployed IN infrastructure as often as\n\
    \   possible.  In SIP, the logical point to tap into for accessing\n   existing\
    \ IN services is either the user agents or one of the proxies\n   physically closest\
    \ to the user agent (and presumably in the same\n   administrative domain).  However,\
    \ SIP entities do not run an IN call\n   model; to access IN services transparently,\
    \ the trick then is to\n   overlay the state machine of the SIP entity with an\
    \ IN layer so that\n   call acceptance and routing is performed by the native\
    \ state machine\n   and so that services are accessed through the IN layer by\
    \ using an IN\n   call model.  Such an IN-enabled SIP entity, operating in synchrony\n\
    \   with the events occurring at the SIP transaction level and\n   interacting\
    \ with the IN elements (SCP), is depicted in Figure 2:\n                     \
    \   +-------+\n                        | SCP   |\n                        +---+---+\n\
    \                            |\n                            | INAP\n         \
    \                   |\n                        +--------+\n                  \
    \      | SIN    |\n                        +........+\n                      \
    \  |  SIP   |\n             ---------->| Entity |--------->\n             Requests\
    \   |        | Requests out\n             in         +--------+ (after applying\
    \ IN\n                                    services)\n            SIN: SIP/IN Interworking\
    \ layer\n            Figure 2.  SIP Entity Accessing IN Services\n   Section 5\
    \ proposes this mapping between the IN layer and the SIP\n   protocol state machine.\
    \  Essentially, a SIP entity exhibiting this\n   mapping becomes a SIN-enabled\
    \ SIP entity.\n   This document does not propose any extensions to SIP.\n   Figure\
    \ 3 expands the SIP entity depicted in Figure 2 and further\n   details the architecture\
    \ model involving IN and SIP interworking.\n   Events occurring at the SIP layer\
    \ will be passed to the IN layer for\n   service application.  More specifically,\
    \ since IN services deal with\n   E.164 numbers, it is reasonable to assume that\
    \ a SIN-enabled SIP\n   entity that seeks to provide services on such a number\
    \ will consult\n   the IN layer for further processing, thus acting as a SIP-based\
    \ SSP.\n   The IN layer will proceed through its BCSM states and, at appropriate\n\
    \   points in the call, will send queries to the SCP for call\n   disposition.\
    \  Once the disposition of the call has been determined,\n   the SIP layer is\
    \ informed and processes the transaction accordingly.\n   Note that the single\
    \ SIP entity as modeled in this figure can in fact\n   represent several different\
    \ physical instances in the network as, for\n   example, when one SIP entity is\
    \ in charge of the terminal or access\n   network/domain, and another is in charge\
    \ of the interface to the\n   Switched Circuit Network (SCN).\n              \
    \    +-------+\n                  |  SCP  |\n                  +---o---+\n   \
    \                   |\n                      +-----+\n                       \
    \     |\n                  **********|***********************************\n  \
    \                * +-------|-------------------+              *\n            \
    \      * |+------o------+            |              *\n                  * ||\
    \  SSF(IP)    |            |              *\n                  * |+-------------+\
    \            |              *\n                  * ||  CCF(IP)    |          \
    \  |              *\n                  * |+------o------+            |       \
    \       *\n                  * +-------|-------------------+              *\n\
    \                  *         |                      SIN-enabled *\n          \
    \        * +-------o-------------------+  SIP         *\n                  * |\
    \      SIP Layer            |  Entity      *\n                  * +---------------------------+\
    \              *\n                  **********************************************\n\
    \     Figure 3.  Functional Architecture of a SIN-Enabled SIP Entity\n   The following\
    \ architecture entities, used in Figure 3, are defined in\n   the Intelligent\
    \ Network standards:\n         Service Switching Function (SSF): IN functional\
    \ entity that\n         interacts with call control functions.\n         Call\
    \ Control Function (CCF): IN functional entity that refers\n         to call and\
    \ connection handling in the classical sense (i.e.,\n         that of an exchange).\n"
- title: 3.  Additional SIN Considerations
  contents:
  - "3.  Additional SIN Considerations\n   In working between Internet Telephony and\
    \ IN-PSTN networks, the main\n   issue is to translate between the states produced\
    \ by the Internet\n   Telephony signaling and those used in traditional IN environments.\n\
    \   Such a translation entails attention to the considerations listed\n   below.\n"
- title: 3.1.  The Concept of State in SIP
  contents:
  - "3.1.  The Concept of State in SIP\n   IN services occur within the context of\
    \ a call, i.e., during call\n   setup, call teardown, or in the middle of a call.\
    \  SIP entities such\n   as proxies, with which some of these services may be\
    \ realized,\n   typically run in transaction-stateful (or stateless) mode.  In\
    \ this\n   mode, a SIP proxy that proxied the initial INVITE is not guaranteed\n\
    \   to receive a subsequent request, such as a BYE.  Fortunately, SIP has\n  \
    \ primitives to force proxies to run in a call-stateful mode; namely,\n   the\
    \ Record-Route header.  This header forces the user agent client\n   (UAC) and\
    \ user agent server (UAS) to create a \"route set\" that\n   consists of all intervening\
    \ proxies through which subsequent requests\n   must traverse.  Thus SIP proxies\
    \ must run in call-stateful mode in\n   order to provide IN services on behalf\
    \ of the UAs.\n   A B2BUA is another SIP element in which IN services can be realized.\n\
    \   As a B2BUA is a true SIP UA, it maintains complete call state and is\n   thus\
    \ capable of providing IN services.\n"
- title: 3.2.  Relationship between SCP and a SIN-Enabled SIP Entity
  contents:
  - "3.2.  Relationship between SCP and a SIN-Enabled SIP Entity\n   In the architecture\
    \ model proposed in this document, each SIN-enabled\n   SIP entity is pre-configured\
    \ to communicate with one logical SCP\n   server, using whatever communication\
    \ mechanism is appropriate.\n   Different SIP servers (e.g., those in different\
    \ administrative\n   domains) may communicate with different SCP servers, so that\
    \ there is\n   no single SCP server responsible for all SIP servers.\n   As Figures\
    \ 1 and 2 depict, the IN-portion of the SIN-enabled SIP\n   entity will communicate\
    \ with the SCP.  This interface between the IN\n   call handling layer and the\
    \ SCP is not specified by this document\n   and, indeed, can be any one of the\
    \ following, depending on the\n   interfaces supported by the SCP: INAP over IP,\
    \ INAP over SIGTRAN, or\n   INAP over SS7.\n   This document is only applicable\
    \ when SIP-controlled Internet\n   telephony devices seek to operate with PSTN\
    \ devices.  The SIP UAs\n   using this interface would typically appear together\
    \ with a media\n   gateway.  This document is *not* applicable in an all-IP network\
    \ and\n   is not needed in cases where PSTN media gateways (not speaking SIP)\n\
    \   need to communicate with SCPs.\n"
- title: 3.3.  SIP REGISTER and IN Services
  contents:
  - "3.3.  SIP REGISTER and IN Services\n   SIP REGISTER provisions a SIP Proxy or\
    \ SIP Registration server.  The\n   process is similar to the provisioning of\
    \ an SCP/HLR in the switched\n   circuit network.  SCPs that provide VoIP based\
    \ services can leverage\n   this information directly.  However, this document\
    \ neither endorses\n   nor prohibits such an architecture and, in fact, considers\
    \ it an\n   implementation decision.\n"
- title: 3.4.  Support of Announcements and Mid-Call Signaling
  contents:
  - "3.4.  Support of Announcements and Mid-Call Signaling\n   Services in the IN\
    \ such as credit-card calling typically play\n   announcements and collect digits\
    \ from the caller before a call is set\n   up.  Playing announcements and collecting\
    \ digits require the\n   manipulation of media streams.  In SIP, proxies do not\
    \ have access to\n   the media data path.  Thus, such services should be executed\
    \ in a\n   B2BUA.\n   Although the SIP specification [3] allows for end points\
    \ to be put on\n   hold during a call or for a change of media streams to take\
    \ place, it\n   does not have any primitives to transport other than mid-call\
    \ control\n   information.  This may include transporting DTMF digits, for example.\n\
    \   Extensions to SIP, such as the INFO method [5] or the SIP event\n   notification\
    \ extension [6], can be considered for services requiring\n   mid-call signaling.\
    \  Alternatively, DTMF can be transported in RTP\n   itself [7].\n"
- title: 4.  The SIN Architecture
  contents:
  - '4.  The SIN Architecture

    '
- title: 4.1.  Definitions
  contents:
  - "4.1.  Definitions\n   The SIP architecture has the following functional elements\
    \ defined in\n   [3]:\n      -  User agent client (UAC): The SIP functional entity\
    \ that\n         initiates a request.\n      -  User agent server (UAS): The SIP\
    \ functional entity that\n         terminates a request by sending 0 or more provisional\
    \ SIP\n         responses and one final SIP response.\n      -  Proxy server:\
    \ An intermediary SIP entity that can act as both a\n         UAS and a UAC. \
    \ Acting as a UAS, it accepts requests from UACs,\n         rewrites the Request-URI\
    \ (R-URI), and, acting as a UAC, proxies\n         the request to a downstream\
    \ UAS.  Proxies may retain\n         significant call control state by inserting\
    \ themselves in\n         future SIP transactions beyond the initial INVITE.\n\
    \      -  Redirect server: An intermediary SIP entity that redirects\n       \
    \  callers to alternate locations, after possibly consulting a\n         location\
    \ server to determine the exact location of the callee\n         (as specified\
    \ in the R-URI).\n      -  Registrar: A SIP entity that accepts SIP REGISTER requests\
    \ and\n         maintains a binding from a high-level URL to the exact location\n\
    \         for a user.  This information is saved in some data-store that\n   \
    \      is also accessible to a SIP Proxy and a SIP Redirect server.  A\n     \
    \    Registrar is usually co-located with a SIP Proxy or a SIP\n         Redirect\
    \ server.\n      -  Outbound proxy: A SIP proxy located near the originator of\n\
    \         requests.  It receives all outgoing requests from a particular\n   \
    \      UAC, including those requests whose R-URIs identify a host\n         other\
    \ than the outbound proxy.  The outbound proxy sends these\n         requests,\
    \ after any local processing, to the address indicated\n         in the R-URI.\n\
    \      -  Back-to-Back UA (B2BUA): A SIP entity that receives a request\n    \
    \     and processes it as a UAS.  It also acts as a UAC and generates\n      \
    \   requests to determine how the incoming request is to be\n         answered.\
    \  A B2BUA maintains complete dialog state and must\n         participate in all\
    \ requests sent within the dialog.\n"
- title: 4.2.  IN Service Control Based on the SIN Approach
  contents:
  - "4.2.  IN Service Control Based on the SIN Approach\n   Figure 4 depicts the possibility\
    \ of IN service control based on the\n   SIN approach.  On both the originating\
    \ and terminating ends, a SIN-\n   capable SIP entity is assumed (it can be a\
    \ proxy or a B2BUA).  The \"O\n   SIP\" entity is required for outgoing calls\
    \ that require support for\n   existing IN services.  Likewise, on the callee's\
    \ side (or terminating\n   side), an equally configured entity (\"T SIP\") will\
    \ be required to\n   provide terminating side services.  Note that the \"O SIP\"\
    \ and \"T SIP\"\n   entities correspond, respectively, to the IN O_BCSM and T_BCSM\
    \ halves\n   of the IN call model.\n     +---+                               \
    \                        +---+\n     | S |                    (~~~~~~~~~~~~~)\
    \                    | S |\n     | C |<--+               (               )   \
    \            +-->| C |\n     | P |   |              (                 )      \
    \        |   | P |\n     +---+   |             (   Switched        )         \
    \    |   +---+\n             |             (   Circuit         )             |\n\
    \             V             (   Network         )             V\n      +-------+\
    \            (                   )          +-------+\n      | SIN   |    +---------+\
    \           +---------+      | SIN   |\n      +-------+----| Gateway |    ...\
    \    | Gateway |------+-------+\n      | O SIP |    +---------+           +---------+\
    \      | T SIP |\n      +-------+             (                 )           +-------+\n\
    \                             (               )\n                            \
    \  (.............)\n     O SIP: Originating SIP entity\n     T SIP: Terminating\
    \ SIP entity\n     Figure 4.  Overall SIN Architecture\n"
- title: 5.  Mapping of the SIP State Machine to the IN State Model
  contents:
  - "5.  Mapping of the SIP State Machine to the IN State Model\n   This section establishes\
    \ the mapping of the SIP protocol state\n   machine to the IN generic basic call\
    \ state model (BCSM) [2],\n   independent of any capability sets [8, 9].  The\
    \ BCSM is divided into\n   two halves: an originating call model (O_BCSM) and\
    \ a terminating call\n   model (T_BCSM).  There are a total of 19 PICs and 35\
    \ DPs between both\n   the halves (11 PICs and 21 DPs for O_BCSM; 8 PICs and 14\
    \ DPs for\n   T_BCSM) [1].  The SSPs, SCPs, and other IN elements track a call's\n\
    \   progress in terms of the basic call model.  The basic call model\n   provides\
    \ a common context for communication about a call.\n   O_BCSM has 11 PICs:\n \
    \  O_NULL: Starting state; call does not exist yet.\n   AUTH_ORIG_ATTEMPT: Switch\
    \ detects a call setup request.\n   COLLECT_INFO: Switch collects the dial string\
    \ from the calling party.\n   ANALYZE_INFO: Complete dial string is translated\
    \ into a routing\n      address.\n   SELECT_ROUTE: Physical route is selected,\
    \ based on the routing\n      address.\n   AUTH_CALL_SETUP: Switch ensures the\
    \ calling party is authorized to\n      place the call.\n   CALL_SENT: Control\
    \ of call sent to terminating side.\n   O_ALERTING: Switch waits for the called\
    \ party to answer.\n   O_ACTIVE: Connection established; communications ensue.\n\
    \   O_DISCONNECT: Connection torn down.\n   O_EXCEPTION: Switch detects an exceptional\
    \ condition.\n   T_BCSM has 8 PICS:\n   T_NULL: Starting state; call does not\
    \ exist yet.\n   AUTH_TERM_ATT: Switch verifies whether the call can be sent to\n\
    \      terminating party.\n   SELECT_FACILITY: Switch picks a terminating resource\
    \ to send the call\n      on.\n   PRESENT_CALL: Call is being presented to the\
    \ called party.\n   T_ALERTING: Switch alerts the called party, e.g., by ringing\
    \ the\n      line.\n   T_ACTIVE: Connection established; communications ensue.\n\
    \   T_DISCONNECT: Connection torn down.\n   T_EXCEPTION: Switch detects an exceptional\
    \ condition.\n   The state machine for O_BCSM and T_BCSM is provided in [1] on\
    \ pages\n   98 and 103, respectively.  This state machine will be used for\n \
    \  subsequent discussion when the IN call states are mapped into SIP.\n   The\
    \ next two sections contain the mapping of the SIP protocol state\n   machine\
    \ to the IN BCSMs.  Explaining all PICs and DPs in an IN call\n   model is beyond\
    \ the scope of this document.  It is assumed that the\n   reader has some familiarity\
    \ with the PICs and DPs of the IN call\n   model.  More information can be found\
    \ in [1].  For a quick reference,\n   Appendix A contains a mapping of the DPs\
    \ to the SIP response codes as\n   discussed in the next two sections.\n"
- title: 5.1.  Mapping SIP Protocol State Machine to O_BCSM
  contents:
  - "5.1.  Mapping SIP Protocol State Machine to O_BCSM\n   The 11 PICs of O_BCSM\
    \ come into play when a call request (SIP INVITE\n   message) arrives from an\
    \ upstream SIP client to an originating SIN-\n   enabled SIP entity running the\
    \ IN call model.  This entity will\n   create an O_BCSM object and initialize\
    \ it in the O_NULL PIC.  The\n   next seven IN PICs -- O_NULL, AUTH_ORIG_ATT,\
    \ COLLECT_INFO,\n   ANALYZE_INFO, SELECT_ROUTE, AUTH_CALL_SETUP, and CALL_SENT\
    \ -- can all\n   be mapped to the SIP \"Calling\" state.\n   Figure 5 provides\
    \ a visual map from the SIP protocol state machine to\n   the originating half\
    \ of the IN call model.  Note that control of the\n   call shuttles between the\
    \ SIP protocol machine and the IN O_BCSM call\n   model while it is being serviced.\n\
    \            SIP                                      O_BCSM\n           | INVITE\n\
    \           V\n      +---------+                        +---------------+\n  \
    \    | Calling +=======================>+ O_NULL        +<----+\n      +--+---/\\\
    -+                        +-/\\---+--------+     |\n      |  |   ||    +-------------+\
    \         |    |              |\n      |  |   ||<===+O_Exception  +---------+\
    \ +--V-+         +--+-+\n      |  |   ||    +--/\\---------+           |DP 1|\
    \         |DP21|\n      |  |   ||       |    +----+      +-----+----+------+ \
    \ +--+-+\n      |  |   ||       +<---+DP 2|<-----+ Auth_Orig._Att  +---->+\n \
    \     |  |   ||       |    +----+      +--------+--------+     |\n      |  | \
    \  ||       |                         |              |\n      |  |   ||      \
    \ |                      +--V-+            |\n      |  |   ||       |        \
    \              |DP 3|            |\n      |  |   ||       |    +----+      +-----+----+------+\
    \     |\n      |  |   ||       +<---+DP 4|<-----+ Collect_Info    +---->+\n  \
    \    |  |   ||       |    +----+      +--------+--------+     |\n      |  |  \
    \ ||       |                         |              |\n      |  |   ||       |\
    \                      +--V-+            |\n      |  |   ||       |          \
    \            |DP 5|            |\n      |  |   ||       |    +----+      +-----+----+------+\
    \     |\n      |  |   ||       +<---+DP 6|<-----+ Analyze_Info    +---->+\n  \
    \    |  |   ||       |    +----+      +--------+--------+     |\n      |  |  \
    \ ||       |                         |              |\n      |  |   ||       |\
    \                      +--V-+            |\n      |  |   ||       |          \
    \            |DP 7|            |\n      |  |   ||       |    +----+      +-----+----+------+\
    \     |\n      |  |   ||       +<---+DP 8|<-----+ Select_Route    +---->+\n  \
    \    |  |   ||       |    +----+      +--------+--------+     |\n      |  |  \
    \ ||       |                         |              |\n      |  |   ||       |\
    \                      +--V-+            |\n      |  |   ||       |          \
    \            |DP 9|            |\n      |  |   ||       |    +----+      +-----+----+------+\
    \     |\n      |  |   ||       +<---+DP10|<-----+ Auth._Call_Setup+---->+\n  \
    \    |  |   ||            +----+      +--------+--------+\n +----+  |   ||   \
    \                              |\n |       |   ||                            \
    \  +--V-+\n |       |   ||                              |DP11|\n |   1xx |   ||\
    \                        +-----+----+------+\n |       |   ++========================+\
    \ Call_Sent       |\n |       |                             +----/\\----+------+\n\
    \ |       |     On 100,180,2xx process DP14  ||      |\n |       |     On 3xx,\
    \ process DP12         ||      |\n |       V     On 486, process DP13        \
    \ ||      |\n |    +--+-------+ On 5xx, 6xx and 4xx      ||      |\n |    |Proceeding|\
    \ (except 486) process DP21||      |\n |    +-+-+------+<=========================++\
    \      |\n |      | |                                         |\n |      | | \
    \                                        |\n |      | |                      \
    \                   |\n |      | +--200------------------+                 |\n\
    \ |      +----4xx to 6xx--------+  |                 |\n |                   \
    \          |  |              +--V-+\n | On DPs 21, 2, 4, 6, 8, 10   |  |     \
    \         |DP14|\n | send 4xx-6xx final response |  |     +--------+----+--+\n\
    \ +-------+                     |  |     | O_Alerting     |\n         |      \
    \               |  |     +---------+------+\n      +--V-------+             |\
    \  |               |\n      |Completed |<------------+  |            +--V-+\n\
    \      +--+-------+                |            |DP16|\n         |           \
    \             |     +------+----+----+\n      +--V-------+                |  \
    \ +-+ O_Active       |\n      |Terminated|<---------------+   | +-------------+--+\n\
    \      +----------+                    |               |\n                   \
    \             +-----+            +--V-+\n                                |   \
    \               |DP19|\n                             +--V-+       +--------+----+\n\
    \                             |DP17|       | O_Disconnect|\n                 \
    \            +--+-+       +-------------+\n                                |\n\
    \                                V\n                           To O_EXCEPTION\n\
    \      Legend:\n      | Communication between\n      | states in the same\n  \
    \    V protocol\n      ======> Communication between IN Layer and SIP Protocol\n\
    \              State machine to transfer call state\n         Figure 5.  Mapping\
    \ from SIP to O_BCSM\n   The SIP \"Calling\" protocol state has enough functionality\
    \ to absorb\n   the seven PICs as described below:\n      O_NULL: This PIC is\
    \ basically a fall through state to the next\n      PIC, AUTHORIZE_ORIGINATION_ATTEMPT.\n\
    \      AUTHORIZE_ORIGINATION_ATTEMPT: In this PIC, the IN layer has\n      detected\
    \ that someone wishes to make a call.  Under some\n      circumstances (e.g.,\
    \ if the user is not allowed to make calls\n      during certain hours), such\
    \ a call cannot be placed.  SIP can\n      authorize the calling party by using\
    \ a set of policy directives\n      configured by the SIP administrator.  If the\
    \ called party is\n      authorized to place the call, the IN layer is instructed\
    \ to enter\n      the next PIC, COLLECT_INFO through DP 3\n      (Origination_Attempt_Authorized).\
    \  If for some reason the call\n      cannot be authorized, DP 2 (Origination_Denied)\
    \ is processed, and\n      control transfers to the SIP state machine.  The SIP\
    \ state machine\n      must format and send a non-2xx final response (possibly\
    \ 403) to\n      the upstream entity.\n      COLLECT_INFO: This PIC is responsible\
    \ for collecting a dial string\n      from the calling party and verifying the\
    \ format of the string.  If\n      overlap dialing is being used, this PIC can\
    \ invoke DP 4\n      (Collect_Timeout) and transfer control to the SIP state machine,\n\
    \      which will format and send a non-2xx final response (possibly a\n     \
    \ 484).  If the dial string is valid, DP 5 (Collected_Info) is\n      processed,\
    \ and the IN layer is instructed to enter the next PIC,\n      ANALYZE_INFO.\n\
    \      ANALYZE_INFO: This PIC is responsible for translating the dial\n      string\
    \ to a routing number.  Many IN services, such as freephone,\n      LNP (Local\
    \ Number Portability), and OCS (Originating Call\n      Screening) occur during\
    \ this PIC.  The IN layer can use the R-URI\n      of the SIP INVITE request for\
    \ analysis.  If the analysis succeeds,\n      the IN layer is instructed to enter\
    \ the next PIC, SELECT_ROUTE.\n      If the analysis fails, DP 6 (Invalid_Info)\
    \ is processed, and the\n      control transfers to the SIP state machine, which\
    \ will generate a\n      non-2xx final response (possibly 400, 401, 403, 404,\
    \ 405, 406,\n      410, 414, 415, 416, 485, or 488) and send it to the upstream\n\
    \      entity.\n      SELECT_ROUTE: In the circuit-switched network, the actual\
    \ physical\n      route has to be selected at this point.  The SIP analogue would\
    \ be\n      to determine the next hop SIP server.  This could be chosen by a\n\
    \      variety of means.  For instance, if the Request URI in the\n      incoming\
    \ INVITE request is an E.164 number, the SIP entity can use\n      a protocol\
    \ like TRIP [10] to find the best gateway to egress the\n      request onto the\
    \ PSTN.  If a successful route is selected, the IN\n      call model moves to\
    \ PIC AUTH_CALL_SETUP via DP 9 (Route_Selected).\n      Otherwise, the control\
    \ transfers to the SIP state machine via DP 8\n      (Route_Select_Failure), which\
    \ will generate a non-2xx final\n      response (possibly 488) and send it to\
    \ the upstream entity.\n      AUTH_CALL_SETUP: Certain service features restrict\
    \ the type of\n      call that may originate on a given line or trunk.  This PIC\
    \ is the\n      point at which relevant restrictions are examined.  If no such\n\
    \      restrictions are encountered, the IN call model moves to PIC\n      CALL_SENT\
    \ via DP 11 (Origination_Authorized).  If a restriction is\n      encountered\
    \ that prohibits further processing of the call, DP 10\n      (Authorization_Failure)\
    \ is processed, and control is transferred\n      to the SIP state machine, which\
    \ will generate a non-2xx final\n      response (possibly 404, 488, or 502). \
    \ Otherwise, DP 11\n      (Origination_Authorized) is processed, and the IN layer\
    \ is\n      instructed to enter the next PIC, CALL_SENT.\n      CALL_SENT: At\
    \ this point, the request needs to be sent to the\n      downstream entity.  The\
    \ IN layer waits for a signal confirming\n      either that the call has been\
    \ presented to the called party or\n      that a called party cannot be reached\
    \ for a particular reason.\n      The control is transferred to the SIP state\
    \ machine.  The SIP\n      state machine should now send the call to the next\
    \ downstream\n      server determined in PIC SELECT_ROUTE.  The IN call model\
    \ now\n      blocks until unblocked by the SIP state machine.\n      If the above\
    \ seven PICs have been successfully negotiated, the\n      SIN-enabled SIP entity\
    \ now sends the SIP INVITE message to the\n      next hop server.  Further processing\
    \ now depends on the\n      provisional responses (if any) and the final response\
    \ received by\n      the SIP protocol state machine.  The core SIP specification\
    \ does\n      not guarantee the delivery of 1xx responses; thus special\n    \
    \  processing is needed at the IN layer to transition to the next PIC\n      (O_ALERTING)\
    \ from the CALL_SENT PIC.  The special processing\n      needed for responses\
    \ while the SIP state machine is in the\n      \"Proceeding\" state and the IN\
    \ layer is in the \"CALL_SENT\" state is\n      described next.\n         A 100\
    \ response received at the SIP state machine elicits no\n         special behavior\
    \ in the IN layer.\n         A 180 response received at the SIP entity enables\
    \ the\n         processing of DP 14 (O_Term_Seized), however, a state\n      \
    \   transition to O_ALERTING is not undertaken yet.  Instead, the\n         IN\
    \ layer is instructed to remain in the CALL_SENT PIC until a\n         final response\
    \ is received.\n         A 2xx response received at the SIP entity enables the\n\
    \         processing of DP 14 (O_Term_Seized), and the immediate\n         transition\
    \ to the next state, O_ALERTING (processing in\n         O_ALERTING is described\
    \ later).\n         A 3xx response received at the SIP entity enables the\n  \
    \       processing of DP 12 (Route_Failure).  The IN call model from\n       \
    \  this point goes back to the SELECT_ROUTE PIC to select a new\n         route\
    \ for the contacts in the 3xx final response (not shown in\n         Figure 5\
    \ for brevity).\n         A 486 (Busy Here) response received at the SIP entity\
    \ enables\n         the processing of DP 13 (O_Called_Party_Busy) and resources\
    \ for\n         the call are released at the IN call model.\n         If the SIN-enabled\
    \ SIP entity gets a 4xx (except 486), 5xx, or\n         6xx final response, DP\
    \ 21 (O_Calling_Party_Disconnect &\n         O_Abandon) is processed and control\
    \ passes to the SIP state\n         machine.  Since a call was not successfully\
    \ established, both\n         the IN layer and the SIP state machine can release\
    \ resources\n         for the call.\n      O_ALERTING - This PIC will be entered\
    \ as a result of receiving a\n      200-class response.  Since a 200-class response\
    \ to an INVITE\n      indicates acceptance, this PIC is mostly a fall through\
    \ to the\n      next PIC, O_ACTIVE via DP 16 (O_Answer).\n      O_ACTIVE - At\
    \ this point, the call is active.  Once in this state,\n      the call may get\
    \ disconnected only when one of the following three\n      events occur: (1) the\
    \ network connection fails, (2) the called\n      party disconnects the call,\
    \ or (3) the calling party disconnects\n      the call.  If event (1) occurs,\
    \ DP 17 (O_Connection_Failure) is\n      processed and call control is transferred\
    \ to the SIP protocol\n      state machine.  Since the network failed, there is\
    \ not much sense\n      in attempting to send a BYE request; thus, both the SIP\
    \ protocol\n      state machine and the IN call layer should release all resources\n\
    \      associated with the call and initialize themselves to the null\n      state.\
    \  Event (2) results in the processing of DP 19\n      (O_DISCONNECT) and a move\
    \ to the last PIC, O_DISCONNECT.  Event\n      (3) occurs if the calling party\
    \ deliberately terminated the call.\n      In this case, DP 21 (O_Abandon & O_Calling_Party_Disconnect)\
    \ will\n      be processed, and control will be passed to the SIP protocol state\n\
    \      machine.  The SIP protocol state machine must send a BYE request\n    \
    \  and wait for a final response.  The IN layer releases all of its\n      resources\
    \ and initializes itself to the null state.\n      O_DISCONNECT: When the SIP\
    \ entity receives a BYE request, the IN\n      layer is instructed to move to\
    \ the last PIC, O_DISCONNECT via DP\n      19.  A final response for the BYE is\
    \ generated and transmitted by\n      the SIP entity, and the call resources are\
    \ freed by both the SIP\n      protocol state machine and the IN layer.\n"
- title: 5.2.  Mapping SIP Protocol State Machine to T_BCSM
  contents:
  - "5.2.  Mapping SIP Protocol State Machine to T_BCSM\n   The T_BCSM object is created\
    \ when a SIP INVITE message makes its way\n   to the terminating SIN-enabled SIP\
    \ entity.  This entity creates the\n   T_BCSM object and initializes it to the\
    \ T_NULL PIC.\n   Figure 6 provides a visual map from the SIP protocol state machine\
    \ to\n   the terminating half of the IN call model:\n           SIP          \
    \                            T_BCSM\n        | INVITE\n        V\n   +----------+\
    \                          +------------+\n   |Proceeding+=========================>+\
    \ T_Null     +<-------+\n   +-+--+--/\\-+                          +/\\----+-----+\
    \        |\n     |  |  ||        +-----------+        |     |              |\n\
    \     |  |  ||<=======+T_Exception+--------+  +--V-+         +--+-+\n     |  |\
    \  ||        +-/\\--------+           |DP22|         |DP35|\n     |  |  ||   \
    \       |    +----+       +---+----+------+  +--+-+\n     |  |  ||          +<---+DP23|<------+Auth._Term._Att+---->+\n\
    \     |  |  ||          |    +----+       +------+--------+     |\n     |  | \
    \ ||          |                        |              |\n     |  |  ||       \
    \   |                     +--V-+            |\n     |  |  ||          |      \
    \               |DP24|            |\n     |  |  ||          |    +----+      \
    \ +---+----+------+     |\n     |  |  ||          +<---+DP25|<------+Select_Facility+---->+\n\
    \     |  |  ||          |    +----+       +------+--------+     |\n     |  | \
    \ ||          |                        |              |\n     |  |  ||       \
    \   |                     +--V-+            |\n     |  |  ||          |      \
    \               |DP26|            |\n     |  |  ||          |    +----+      \
    \ +---+----+------+     |\n     |  |  ||          +<---+DP27|<------+ Present_Call\
    \  +---->+\n     |  |  ||          |    +----+       +------+--------+     |\n\
    \     |  |  ||          |                        |              |\n     |  | \
    \ ||          |                     +--V-+            |\n     |  |  ||       \
    \   |                     |DP28|            |\n     |  |  ||          |    +----+\
    \       +---+----+------+     |\n     |  |  ||          +<---+DP29|<------+ T_Alerting\
    \    +---->+\n     |  |  ||          |    +----+       +-/\\--+---------+    \
    \ |\n     |  |  ||          +<--------------+   ||   |              |\n     |\
    \  |  ||                          |   ||   |              |\n     |  |  ++==========================|===++\
    \   |              |\n     |  |  /\\                  +-------+     +--V-+   \
    \         |\n     |  |  ||                  |             +DP30|            |\n\
    \     |  |  ||                +-+--+      +---+----+------+     |\n     |  | \
    \ ||                |DP31+<-----| T_Active      +---->+\n     |  |  ||       \
    \         +----+      +-/\\-----+------+\n     |  |  ||                      \
    \        ||      |\n     |  |  ||                              ||      |\n"
- title: 2xx  |  |  ++==============================++      |
  contents:
  - '2xx  |  |  ++==============================++      |

    '
- title: sent |  |                                          |
  contents:
  - 'sent |  |                                          |

    '
- title: +----+  | 3xx - 6xx response                    +--V-+
  contents:
  - '+----+  | 3xx - 6xx response                    +--V-+

    '
- title: '|       | sent                                  |DP33|'
  contents:
  - '|       | sent                                  |DP33|

    '
- title: '|  +----V-----+                          +------+----+----+'
  contents:
  - '|  +----V-----+                          +------+----+----+

    '
- title: '|  |Completed |                          | T_Disconnect   |'
  contents:
  - '|  |Completed |                          | T_Disconnect   |

    '
- title: '|  +----+-----+                          +----------------+'
  contents:
  - '|  +----+-----+                          +----------------+

    '
- title: '|       |'
  contents:
  - '|       |

    '
- title: '|       | ACK received'
  contents:
  - '|       | ACK received

    '
- title: '|       |'
  contents:
  - '|       |

    '
- title: '|  +----V-----+'
  contents:
  - '|  +----V-----+

    '
- title: '|  |Confirmed |'
  contents:
  - '|  |Confirmed |

    '
- title: '|  +----+-----+'
  contents:
  - '|  +----+-----+

    '
- title: '|       |'
  contents:
  - '|       |

    '
- title: +------>|
  contents:
  - "+------>|\n        |\n   +----V-----+\n   |Terminated|\n   +----------+\n   \
    \  Legend:\n     | Communication between\n     | states in the same\n     V protocol\n\
    \     ======> Communication between IN call model and SIP\n             protocol\
    \ state machine to transfer call state\n        Figure 6.  Mapping from SIP to\
    \ T_BCSM\n   The SIP \"Proceeding\" state has enough functionality to absorb the\n\
    \   first five PICS -- T_Null, Authorize_Termination_Attempt,\n   Select_Facility,\
    \ Present_Call, T_Alerting -- as described below:\n      T_NULL:  At this PIC,\
    \ the terminating end creates the call at the\n      IN layer.  The incoming call\
    \ results in the processing of DP 22,\n      Termination_Attempt, and a transition\
    \ to the next PIC,\n      AUTHORIZE_TERMINATION_ATTEMPT, takes place.\n      AUTHORIZE_TERMINATION_ATTEMPT:\
    \ At this PIC, it is ascertained that\n      the called party wishes to receive\
    \ the call and that the\n      facilities of the called party are compatible with\
    \ those of the\n      calling party.  If any of these conditions is not met, DP\
    \ 23\n      (Termination_Denied) is invoked, and the call control is\n      transferred\
    \ to the SIP protocol state machine.  The SIP protocol\n      state machine can\
    \ format and send a non-2xx final response\n      (possibly 403, 405, 415, or\
    \ 480).  If the conditions of the PIC\n      are met, processing of DP 24 (Termination_Authorized)\
    \ is invoked,\n      and a transition to the next PIC, SELECT_FACILITY, takes\
    \ place.\n      SELECT_FACILITY: In circuit switched networks, this PIC is\n \
    \     intended to select a line or trunk to reach the called party.  As\n    \
    \  lines or trunks are not applicable in an IP network, a SIN-enabled\n      SIP\
    \ entity can use this PIC to interface with a PSTN gateway and\n      select a\
    \ line/trunk to route the call.  If the called party is\n      busy, or if a line/trunk\
    \ cannot be seized, the processing of DP 25\n      (T_Called_Party_Busy) is invoked,\
    \ and the call goes to the SIP\n      protocol state machine.  The SIP protocol\
    \ state machine must\n      format and send a non-2xx final response (possibly\
    \ 486 or 600).\n      If a line/trunk was successfully seized, the processing\
    \ of DP 26\n      (Terminating_Resource_Available) is invoked, and a transition\
    \ to\n      the next PIC, PRESENT_CALL, takes place.\n      PRESENT_CALL: At this\
    \ point, the call is being presented (via the\n      ISUP ACM message, or Q.931\
    \ Alerting message, or simply by ringing\n      a POTS phone).  If there was an\
    \ error presenting the call, the\n      processing of DP 27 (Presentation_Failure)\
    \ is invoked, and the\n      call control is transferred to the SIP protocol state\
    \ machine,\n      which must format and send a non-2xx final response (possibly\n\
    \      480).  If the call was successfully presented, the processing of\n    \
    \  DP 28 (T_Term_Seized) is invoked, and a transition to the next\n      PIC,\
    \ T_ALERTING, takes place.\n      T_ALERTING: At this point, the called party\
    \ is being \"alerted\".\n      Control now passes momentarily to the SIP protocol\
    \ state machine\n      so that it can generate and send a \"180 Ringing\" response\
    \ to its\n      peer.  Furthermore, since network resources have been allocated\n\
    \      for the call, timers are set to prevent indefinite holding of such\n  \
    \    resources.  The expiration of the relevant timers results in the\n      processing\
    \ of DP 29 (T_No_Answer), and the call control is\n      transferred to the SIP\
    \ protocol state machine, which must format\n      and send a non-2xx final response\
    \ (possibly 408).  If the called\n      party answers, then DP 30 (T_Answer) is\
    \ processed, followed by a\n      transition to the next PIC, T_ACTIVE.\n   After\
    \ the above five PICs have been negotiated, the rest are mapped\n   as follows:\n\
    \      T_ACTIVE: The call is now active.  Once this state is reached, the\n  \
    \    call may become inactive under one of the following three\n      conditions:\
    \ (1) The network fails the connection, (2) the called\n      party disconnects\
    \ the call, or (3) the calling party disconnects\n      the call.  Event (1) results\
    \ in the processing of DP 31\n      (T_Connection_Failure), and call control is\
    \ transferred to the SIP\n      protocol state machine.  Since the network failed,\
    \ there is little\n      sense in attempting to send a BYE request; thus, both\
    \ the SIP\n      protocol state machine and the IN call layer should release all\n\
    \      resources associated with the call and initialize themselves to\n     \
    \ the null state.  Event (2) results in the processing of DP 33\n      (T_Disconnect)\
    \ and a transition to the next PIC, T_DISCONNECT.\n      Event (3) occurs at the\
    \ receipt of a BYE request at the SIP\n      protocol state machine (not shown\
    \ in Figure 6).  Resources for the\n      call should be deallocated, and the\
    \ SIP protocol state machine\n      must send a 200 OK for the BYE request (not\
    \ shown in Figure 6).\n      T_DISCONNECT: In this PIC, the disconnect treatment\
    \ associated\n      with the called party's having disconnected the call is performed\n\
    \      at the IN layer.  The SIP protocol state machine sends out a BYE\n    \
    \  and awaits a final response for the BYE (not shown in Figure 6).\n"
- title: 6.  Examples of Call Flows
  contents:
  - "6.  Examples of Call Flows\n   Two examples are provided here to show how SIP\
    \ protocol state machine\n   and the IN call model work synchronously with each\
    \ other.\n   In the first example, a SIP UAC originates a call request destined\
    \ to\n   an 800 freephone number:\n      INVITE sip:18005551212@example.com SIP/2.0\n\
    \      From: sip:16305551212@example.net;tag=991-7as-66ff\n      To: sip:18005551212@example.com\n\
    \      Via: SIP/2.0/UDP stn1.example.net\n      Call-ID: 67188121@example.net\n\
    \      CSeq: 1 INVITE\n   The request makes its way to the originating SIP network\
    \ server\n   running an IN call model.  The SIP network server hands, at the very\n\
    \   least, the To: field and the From: field to the IN layer for\n   freephone\
    \ number translation.  The IN layer proceeds through its PICs\n   and at the ANALYSE_INFO\
    \ PIC consults the SCP for freephone\n   translation.  The translated number is\
    \ returned to the SIP network\n   server, which forwards the message to the next\
    \ hop SIP proxy, with\n   the freephone number replaced by the translated number:\n\
    \      INVITE sip:18475551212@example.com SIP/2.0\n      From: sip:16305551212@example.net;tag=991-7as-66ff\n\
    \      To: sip:18005551212@example.com\n      Via: SIP/2.0/UDP ext-stn2.example.net\n\
    \      Via: SIP/2.0/UDP stn1.example.net\n      Call-ID: 67188121@example.net\n\
    \      CSeq: 1 INVITE\n   In the next example, a SIP UAC originates a call request\
    \ destined to\n   a 900 number:\n      INVITE sip:19005551212@example.com SIP/2.0\n\
    \      From: sip:16305551212@example.net;tag=991-7as-66dd\n      To: sip:19005551212@example.com\n\
    \      Via: SIP/2.0/UDP stn1.example.net\n      Call-ID: 88112@example.net\n \
    \     CSeq: 1 INVITE\n   The request makes its way to the originating SIP network\
    \ server\n   running an IN call model.  The SIP network server hands, at the very\n\
    \   least, the To: field and the From: field to the IN layer for 900\n   number\
    \ translation.  The IN layer proceeds through its PICs and at\n   the ANALYSE_INFO\
    \ PIC consults the SCP for the translation.  During\n   the translation, the SCP\
    \ detects that the originating party is not\n   allowed to make 900 calls.  It\
    \ passes this information to the\n   originating SIP network server, which informs\
    \ the SIP UAC by using a\n   SIP \"403 Forbidden\" response status code:\n   \
    \   SIP/2.0 403 Forbidden\n      From: sip:16305551212@example.net;tag=991-7as-66dd\n\
    \      To: sip:19005551212@example.com;tag=78K-909II\n      Via: SIP/2.0/UDP stn1.example.net\n\
    \      Call-ID: 88112@example.net\n      CSeq: 1 INVITE\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security considerations for SIN services cover\
    \ both networks being\n   used, namely, the PSTN and the Internet.  SIN uses the\
    \ security\n   measures in place for both the networks.  With reference to Figure\
    \ 2,\n   the INAP messages between the SCP and the SIN-enabled SIP entity must\n\
    \   be secured by the signaling transport used between the SCP and the\n   SIN-enabled\
    \ entity.  Likewise, the requests coming into the SIN-\n   enabled SIP entity\
    \ must first be authenticated and, if need be,\n   encrypted as well, using the\
    \ means and procedures defined in [3] for\n   SIP requests.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]   I. Faynberg, L. Gabuzda, M. Kaplan, and\
    \ N.Shah, \"The\n         Intelligent Network Standards: Their Application to\
    \ Services,\"\n         McGraw-Hill, 1997.\n   [2]   ITU-T Q.1204 1993: Recommendation\
    \ Q.1204, \"Intelligent Network\n         Distributed Functional Plane Architecture,\"\
    \ International\n         Telecommunications Union Standardization Section, Geneva.\n\
    \   [3]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n     \
    \    Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        \
    \ Session Initiation Protocol\", RFC 3261, June 2002.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [4]   ITU-T Q.1208: \"General aspects of the\
    \ Intelligent Network\n         Application protocol\"\n   [5]   Donovan, S.,\
    \ \"The SIP INFO Method\", RFC 2976, October 2000.\n   [6]   Roach, A.B., \"Session\
    \ Initiation Protocol (SIP)-Specific Event\n         Notification\", RFC 3265,\
    \ June 2002.\n   [7]   Schulzrinne, H. and S. Petrack, \"RTP Payload for DTMF\
    \ Digits,\n         Telephony Tones and Telephony Signals\", RFC 2833, May 2000.\n\
    \   [8]   ITU-T Q.1218: \"Interface Recommendation for Intelligent Network\n \
    \        Capability Set 1\".\n   [9]   ITU-T Q.1228: \"Interface Recommendation\
    \ for Intelligent Network\n         Capability Set 2\".\n   [10]  Rosenberg, J.,\
    \ Salama, H., and M. Squire, \"Telephony Routing\n         over IP (TRIP)\", RFC\
    \ 3219, January 2002.\n"
- title: 'Appendix A: Mapping of 4xx-6xx Responses in SIP to IN Detections Points'
  contents:
  - "Appendix A: Mapping of 4xx-6xx Responses in SIP to IN Detections Points\n   The\
    \ mapping of error codes 4xx-6xx responses in SIP to the possible\n   Detection\
    \ Points in PIC Originating and Terminating Call Handling is\n   indicated in\
    \ the table below.  The reason phrase in the 4xx-6xx\n   response is reproduced\
    \ from [3].\n        SIP response code             DP mapping to IN\n        -----------------\
    \             ----------------------\n        200 OK                        DP\
    \ 14\n        3xx                           DP 12\n        403 Forbidden     \
    \            DP 2,  DP 21\n        484 Address Incomplete        DP 4,  DP 21\n\
    \        400 Bad Request               DP 6,  DP 21\n        401 Unauthorized\
    \              DP 6,  DP 21\n        403 Forbidden                 DP 6,  DP 21,\
    \ DP 23\n        404 Not Found                 DP 6,  DP 21\n        405 Method\
    \ Not Allowed        DP 6,  DP 21, DP 23\n        406 Not Acceptable         \
    \   DP 6,  DP 21\n        408 Request Timeout           DP 29\n        410 Gone\
    \                      DP 6,  DP 21\n        414 Request-URI Too Long      DP\
    \ 6,  DP 21\n        415 Unsupported Media Type    DP 6,  DP 21, DP 23\n     \
    \   416 Unsupported URI Scheme    DP 6,  DP 21\n        480 Temporarily Unavailable\
    \   DP 23, DP 27\n        485 Ambiguous                 DP 6,  DP 21\n       \
    \ 486 Busy Here                 DP 13, DP 21, DP 25\n        488 Not Acceptable\
    \ Here       DP 6,  DP 21\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Special acknowledgment is due to Hui-Lan Lu for acting as\
    \ the chair\n   of the SIN DT and ensuring that the focus of the DT did not veer\
    \ too\n   far.  The authors would also like to give special thanks to Mr. Ray\n\
    \   C. Forbes from Marconi Communications Limited for his valuable\n   contribution\
    \ on the system and network architectural aspects as co-\n   chair in the ETSI\
    \ SPAN.   Thanks also to Doris Lebovits, Kamlesh\n   Tewani, Janusz Dobrowloski,\
    \ Jack Kozik, Warren Montgomery, Lev\n   Slutsman, Henning Schulzrinne, and Jonathan\
    \ Rosenberg, who all\n   contributed to the discussions on the relationship of\
    \ IN and SIP call\n   models.\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   Vijay K. Gurbani\n   Lucent Technologies, Inc.\n   2000\
    \ Lucent Lane, Rm 6G-440\n   Naperville, Illinois 60566\n   USA\n   Phone: +1\
    \ 630 224 0216\n   EMail: vkg@lucent.com\n   Frans Haerens\n   Alcatel Bell\n\
    \   Francis Welles Plein,1\n   Belgium\n   Phone: +32 3 240 9034\n   EMail: frans.haerens@alcatel.be\n\
    \   Vidhi Rastogi\n   Wipro Technologies\n   Plot No.72, Keonics Electronics City,\n\
    \   Hosur Main Road,\n   Bangalore 226 560 100\n   Phone: +91 80 51381869\n  \
    \ EMail: vidhi.rastogi@wipro.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org, and except as set\n   forth therein, the authors\
    \ retain all their rights.\n   This document and the information contained herein\
    \ are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND\
    \ THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\
    \ IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\n\
    \   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES\
    \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ ISOC's procedures with respect to rights in ISOC Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
