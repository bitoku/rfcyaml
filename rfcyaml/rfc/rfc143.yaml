- title: __initial_text__
  contents:
  - "                    Regarding Proferred Official ICP\nWe should like to comment\
    \ on a race condition discovered in the ICP as\nproposed in NWG/RFC #123.  The\
    \ problem arises when the server attempts\nto initiate a second connection to\
    \ the user's receive socket and the\nfirst connection is not yet closed.  Using\
    \ a similar notation to that of\nthe proferred and proposed ICP.  The last two\
    \ columns indicate which\nactions must be completed before the current action\
    \ may be initiated.\nUser and Server are third level programs, and UNCP and SNCP\
    \ are the\nusers NCP and Servers NCP respectively.  Allocates have not been\n\
    included since they add nothing to the argument.\n    1         Listen(L,32) \
    \       Server           --          --\n    2         Init(U,L,32)        User\
    \             --          --\n    3         RTS(U,L,'l')        UNCP         \
    \    2           2\n    4         STR(L,U,32)         SNCP          1 and 3  \
    \   1 and 3\n    5         Send(L,S)           Server           4           4\n\
    \    6         SEND('l',S)         SNCP             5           5\n    7     \
    \    RECEIVE('l',S)      UNCP             6           6\n    8         Receive(U,S)\
    \        User             7           7\n    9         Close(L)            Server\
    \           5           5\n   10         CLS(L,U)            SNCP          9 and\
    \ 7     9 and 7\n   11         Close(U)            User             8        not\
    \ used\n   12         CLS(U,L)            UNCP            11          10\n   \
    \                                            Required Predecessors\n         \
    \                                      ---------------------\nReference #   Action\
    \              Initiator   \"Proferred\"   Proposed\n-----------   ------    \
    \          ---------   -----------   --------\n   13         Init(S,U+1,B )  \
    \    Server           9           9\n                          u\n   14      \
    \   RTS(S,U+1,'l' )     SNCP            13          13\n                     \
    \      2\n   15         Init(S+1,U,B )      Server          13        14 and 18\n\
    \                          s\n   16         STR(S+1,U,B )       SNCP         \
    \   15          15\n                         s\n   17         Init(U+1,S,B ) \
    \     User            11          12\n                          u\n   18     \
    \    STR(U+1,S,B )       UNCP            17          17\n                    \
    \     u\n   19         Init(U,S+1,B )      User            17          17\n  \
    \                        s\n   20         RTS(U,S+1,'l' )     UNCP           \
    \ 19          19\n                           3\nNote that in the Proferred Order\
    \ column, 16 can occur before 12 in which\ncase UNCP would find socket U in use\
    \ and probably return a CLS (U,S+1).\nThe Server would probably then assume the\
    \ User was finished with the\nconversation.\nThe above problem is resolved by\
    \ eliminating the Close from one side and\ncausing that side to wait for the CLS\
    \ from the other side before doing\nan Init.  We propose that eliminating the\
    \ user's Close (U) is the best\nsolution.  (The user NCP must of course return\
    \ a CLS in response to the\nCLS sent by the server NCP).\nThe Server's Close (L)\
    \ leads more quickly to the reuse of socket L thus\nthe serving of another user.\n\
    To clarify the above discussion which may seem confusing at first\nglance, let\
    \ us demonstrate the problem in the language of RFC #123.\n          Server  \
    \                            User\n          ------                          \
    \    ----\n     (S1) Listen(L,32)                   (U1) Init(U,L,32)\n     (S2)\
    \ [Wait for match]               (U2)\n     (S3) Send(L,S)                   \
    \   (U3) Receive(U,S)\n     (S4) Close(L)                       (U4) Close(U)\n\
    \     (S5) Init(S,U+1,B )                 (U5) Init(U+1,S,B )\n              \
    \        u                                   u\n     (S6) Init(S+1,U,B )     \
    \            (U6) Init(U,S+1,B )\n                      s                    \
    \               s\nNotice that since server and user are independent (probably\
    \ in different\nhosts), server could execute (S6) before user executes (U4) and\
    \ could\nreceive an error back from user's NCP that socket U is busy.  Similarly,\n\
    user could execute (U6) before server executes (S4) and could receive an\nerror\
    \ back from his own NCP that socket U is not yet closed (assuming an\nimplementation\
    \ where sockets are kept busy until a CLS match).\nVarious modifications could\
    \ be made to ICP to solve this problem.  We\npropose the following ICP:\n    \
    \      Server                              User\n          ------            \
    \                  ----\n          Listen(L,32)                        Init(U,L,32)\n\
    \          [Wait for match]\n          Send(L,S)                           Receive(U,S)\n\
    \          Close(L)                            [Wait for CLS]\n          Init(S,U+1,B\
    \ )                      Init(U+1,S,B )\n                      u             \
    \                      u\n          [Wait for match]                    Init(U,S+1,B\
    \ )\n                                                          s\n          Init(S+1,U,B\
    \ )\n                      s\nThis ICP assumes the following:\n1.  The user can\
    \ inquire or is notified of the fact that one of his\n    connections has been\
    \ closed.\n2.  The server can inquire or is notified that a connection for which\n\
    \    he has done an Init (or Listen) is now open.\nBoth of the above seem basic\
    \ to any NCP - user interface.\nThis race condition problem would not exist had\
    \ the dynamic reconnection\nfeatures of RFC #36 been included in the NCP protocol\
    \ and had dynamic\nreconnection been used in this ICP.\n       [ This RFC was\
    \ put into machine readable form for entry ]\n        [ into the online RFC archives\
    \ by Walter Pienciak 1/98 ]\n"
