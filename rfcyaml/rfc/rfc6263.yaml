- contents:
  - "        Application Mechanism for Keeping Alive the NAT Mappings\n        Associated
    with RTP / RTP Control Protocol (RTCP) Flows\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document lists the different mechanisms that enable applications\n
    \  using the Real-time Transport Protocol (RTP) and the RTP Control\n   Protocol
    (RTCP) to keep their RTP Network Address Translator (NAT)\n   mappings alive.
    \ It also makes a recommendation for a preferred\n   mechanism.  This document
    is not applicable to Interactive\n   Connectivity Establishment (ICE) agents.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6263.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................4\n   3.
    Requirements ....................................................4\n   4. List
    of Alternatives for Performing RTP Keepalive ...............4\n      4.1. Empty
    (0-Byte) Transport Packet ............................4\n      4.2. RTP Packet
    with Comfort Noise Payload ......................5\n      4.3. RTCP Packets Multiplexed
    with RTP Packets ..................5\n      4.4. STUN Indication Packet .....................................6\n
    \     4.5. RTP Packet with Incorrect Version Number ...................6\n      4.6.
    RTP Packet with Unknown Payload Type .......................6\n   5. Recommended
    Solution for Keepalive Mechanism ....................7\n   6. Media Format Exceptions
    .........................................7\n   7. Timing and Transport Considerations
    .............................7\n   8. RTCP Flow Keepalive .............................................8\n
    \  9. Security Considerations .........................................9\n   10.
    Acknowledgements ...............................................9\n   11. References
    ....................................................10\n      11.1. Normative
    References .....................................10\n      11.2. Informative References
    ...................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   [RFC4787] and [RFC5382] describe Network Address Translator
    (NAT)\n   behaviors and point out that two key aspects of NAT are mappings\n   (a.k.a.
    bindings) and keeping them refreshed.  This introduces a\n   derived requirement
    for applications engaged in a multimedia session\n   involving NAT traversal:
    they need to generate a minimum of flow\n   activity in order to create NAT mappings
    and maintain them.\n   When applied to applications using the Real-time Transport
    Protocol\n   (RTP) [RFC3550], the RTP media stream packets themselves normally\n
    \  fulfill this requirement.  However, there exist some cases where RTP\n   does
    not generate the minimum required flow activity.\n   The examples are:\n   o  In
    some RTP usages, such as the Session Initiation Protocol (SIP)\n      [RFC3261],
    agents can negotiate a unidirectional media stream by\n      using the Session
    Description Protocol (SDP) [RFC4566] \"recvonly\"\n      attribute on one agent
    and \"sendonly\" on the peer, as defined in\n      [RFC3264].  [RFC3264] directs
    implementations not to transmit\n      media on the receiving agent.  If the agent
    receiving the media is\n      located on the private side of a NAT, it will never
    receive RTP\n      packets from the public peer if the NAT mapping has not been\n
    \     created.\n   o  Similarly, a bidirectional media stream can be \"put on
    hold\".\n      This is accomplished by using the SDP \"sendonly\" or \"inactive\"\n
    \     attributes.  Again, [RFC3264] directs implementations to cease\n      transmission
    of media in these cases.  However, doing so may cause\n      NAT bindings to time
    out, and media won't be able to come off\n      hold.\n   o  Some RTP payload
    formats, such as the payload format for text\n      conversation [RFC4103], may
    send packets so infrequently that the\n      interval exceeds the NAT binding
    timeouts.\n   To solve these problems, an agent therefore needs to periodically\n
    \  send keepalive data within the outgoing RTP session of an RTP media\n   stream
    regardless of whether the media stream is currently inactive,\n   sendonly, recvonly,
    or sendrecv, and regardless of the presence or\n   value of the bandwidth attribute.\n
    \  It is important to note that NAT traversal constraints also usually\n   require
    that the agents use Symmetric RTP / RTP Control Protocol\n   (RTCP) [RFC4961]
    in addition to RTP keepalive.\n   This document first states the requirements
    that must be supported to\n   perform RTP keepalives (Section 3).  In a second
    step, the document\n   reports the different mechanisms to overcome this problem\n
    \  (Section 4).  Section 5 finally states the recommended solution for\n   RTP
    keepalive.  Section 6 discusses some media format exceptions.\n   Section 7 adds
    details about timing and transport considerations.\n   Section 8 documents how
    to maintain NAT bindings for RTCP.\n   This document is not applicable to Interactive
    Connectivity\n   Establishment (ICE) [RFC5245] agents.  Indeed, the ICE protocol,\n
    \  together with Session Traversal Utilities for NAT (STUN) [RFC5389]\n   and
    Traversal Using Relays around NAT (TURN) [RFC5766], solves the\n   overall Network
    Address Translator (NAT) traversal mechanism of media\n   streams.  In the context
    of RTP media streams, some agents may not\n   require all ICE functionalities
    and may only need a keepalive\n   mechanism.  This document thus applies to such
    agents, and does not\n   apply to agents implementing ICE.\n   Note that if a
    given media uses a codec that already integrates a\n   keepalive mechanism, no
    additional keepalive mechanism is required at\n   the RTP level.\n   As mentioned
    in Section 3.5 of [RFC5405], \"It is important to note\n   that keepalive messages
    are NOT RECOMMENDED for general use -- they\n   are unnecessary for many applications
    and can consume significant\n   amounts of system and network resources\".\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in RFC 2119\n   [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Requirements\n   This section outlines the key requirements that need to
    be satisfied\n   in order to provide RTP media keepalive.\n   REQ-1  Some data
    is sent periodically within the outgoing RTP session\n          for the whole
    duration of the RTP media stream.\n   REQ-2  Any type of transport (e.g., UDP,
    TCP) MUST be supported.\n   REQ-3  Any media type (e.g., audio, video, text) MUST
    be supported.\n   REQ-4  Any media format (e.g., G.711, H.263) MUST be supported.\n
    \  REQ-5  Session signaling protocols SHOULD NOT be impacted.\n   REQ-6  Impacts
    on existing software SHOULD be minimized.\n   REQ-7  The remote peer SHOULD NOT
    be impacted.\n   REQ-8  The support for RTP keepalive SHOULD be described in the
    SDP.\n   REQ-9  The solution SHOULD cover the integration with RTCP.\n"
  title: 3.  Requirements
- contents:
  - "4.  List of Alternatives for Performing RTP Keepalive\n   This section lists,
    in no particular order, some alternatives that\n   can be used to perform a keepalive
    message within RTP media streams.\n"
  - contents:
    - "4.1.  Empty (0-Byte) Transport Packet\n   The application sends an empty transport
      packet (e.g., UDP packet,\n   Datagram Congestion Control Protocol (DCCP) packet).\n
      \  Con:\n   o  This alternative is specific to each transport protocol.\n"
    title: 4.1.  Empty (0-Byte) Transport Packet
  - contents:
    - "4.2.  RTP Packet with Comfort Noise Payload\n   The application sends an RTP
      packet with a comfort noise payload\n   [RFC3389].\n   Cons:\n   o  This alternative
      is limited to audio formats only.\n   o  Comfort noise needs to be supported
      by the remote peer.\n   o  Comfort noise needs to be signaled in SDP offer/answer.\n
      \  o  The peer is likely to render comfort noise at the other side, so\n      the
      content of the payload (the noise level) needs to be carefully\n      chosen.\n"
    title: 4.2.  RTP Packet with Comfort Noise Payload
  - contents:
    - "4.3.  RTCP Packets Multiplexed with RTP Packets\n   The application sends RTCP
      packets in the RTP media path itself\n   (i.e., the same tuples for both RTP
      and RTCP packets) [RFC5761].\n   RTCP packets therefore keep the NAT mappings
      open as long as the\n   requirements for parameter selection are fulfilled as
      discussed in\n   Section 8.\n      Note: The \"on hold\" procedures of [RFC3264]
      do not impact RTCP\n      transmissions.\n   Cons:\n   o  Multiplexing RTP and
      RTCP must be supported by the remote peer.\n   o  Some RTCP monitoring tools
      expect that RTCP packets are not\n      multiplexed.\n   o  RTCP must be configured
      so that the Tmin value [RFC3550] is less\n      than or equal to the Tr interval.\n"
    title: 4.3.  RTCP Packets Multiplexed with RTP Packets
  - contents:
    - "4.4.  STUN Indication Packet\n   The application sends a STUN [RFC5389] Binding
      Indication packet as\n   specified in ICE [RFC5245].\n   Thanks to the RTP validity
      check, STUN packets will be ignored by the\n   RTP stack.\n   Con:\n   o  The
      sending agent needs to support STUN.\n"
    title: 4.4.  STUN Indication Packet
  - contents:
    - "4.5.  RTP Packet with Incorrect Version Number\n   The application sends an
      RTP packet with a version number set to zero\n   (i.e., an incorrect version
      number).\n   Based on the RTP specification [RFC3550], the peer should perform
      a\n   header validity check and therefore ignore these types of packets.\n   Cons:\n
      \  o  Only four version numbers are possible.  Using one of them for RTP\n      keepalive
      would be wasteful.\n   o  [RFC4566] and [RFC3264] mandate that media with inactive
      and\n      recvonly attributes not be sent; however, this is mitigated, as no\n
      \     real media is sent with this mechanism.\n"
    title: 4.5.  RTP Packet with Incorrect Version Number
  - contents:
    - "4.6.  RTP Packet with Unknown Payload Type\n   The application sends an RTP
      packet of 0 length with a dynamic\n   payload type that has not been negotiated
      by the peers (e.g., not\n   negotiated within the SDP offer/answer, and thus
      not mapped to any\n   media format).\n   The sequence number is incremented
      by one for each packet, as it is\n   sent within the same RTP session as the
      actual media.  The timestamp\n   contains the same value that a media packet
      would have at this time.\n   The marker bit is not significant for the keepalive
      packets and is\n   thus set to zero.\n   The synchronization source (SSRC) is
      the same as for the media for\n   which keepalive is sent.\n   Normally, the
      peer will ignore this packet, as RTP [RFC3550] states\n   that \"a receiver
      MUST ignore packets with payload types that it does\n   not understand\".\n
      \  Cons:\n   o  [RFC4566] and [RFC3264] mandate that media with inactive and\n
      \     recvonly attributes not be sent; however, this is mitigated, as no\n      real
      media is sent with this mechanism.\n   o  [RFC3550] does not preclude examination
      of received packets by the\n      peer in an attempt to determine if it is under
      attack.\n   o  The statement \"a receiver MUST ignore packets with payload types\n
      \     that it does not understand\" of [RFC3550] is not always observed\n      in
      real life.\n   o  There is no RTCP reporting for the keepalive packets, as [RFC3550]\n
      \     mandates that RTP packets with payload types that the receiver\n      does
      not understand be ignored.\n   o  Some RTP payload formats do not handle gaps
      in RTP sequence number\n      well.\n"
    title: 4.6.  RTP Packet with Unknown Payload Type
  title: 4.  List of Alternatives for Performing RTP Keepalive
- contents:
  - "5.  Recommended Solution for Keepalive Mechanism\n   The RECOMMENDED mechanism
    is that discussed in \"RTCP Packets\n   Multiplexed with RTP Packets\" (Section
    4.3).  This mechanism is\n   desirable because it reduces the number of ports
    when RTP and RTCP\n   are used.  It also has the advantage of taking into account
    RTCP\n   aspects, which is not the case with other mechanisms.\n   Other mechanisms
    (Sections 4.1, 4.2, 4.4, 4.5, and 4.6) are NOT\n   RECOMMENDED.\n"
  title: 5.  Recommended Solution for Keepalive Mechanism
- contents:
  - "6.  Media Format Exceptions\n   When a given media format does not allow the
    keepalive solution\n   recommended in Section 5, an alternative mechanism SHOULD
    be defined\n   in the payload format specification for this media format.\n"
  title: 6.  Media Format Exceptions
- contents:
  - "7.  Timing and Transport Considerations\n   An application supporting this specification
    MUST transmit either\n   keepalive packets or media packets at least once every
    Tr seconds\n   during the whole duration of the media session.\n   Tr has different
    value according to the transport protocol.\n   For UDP, the minimum RECOMMENDED
    Tr value is 15 seconds, and Tr\n   SHOULD be configurable to larger values.\n
    \  For TCP, the recommended Tr value is 7200 seconds.\n   When using the \"RTCP
    packets multiplexed with RTP packets\" solution\n   (Section 4.3) for keepalive,
    Tr MUST comply with the RTCP timing\n   rules of [RFC3550].\n   Keepalive packets
    within a particular RTP session MUST use the tuple\n   (source IP address, source
    TCP/UDP port, target IP address, target\n   TCP/UDP port) of the regular RTP packets.\n
    \  The agent SHOULD only send RTP keepalive when it does not send\n   regular
    RTP packets.\n"
  title: 7.  Timing and Transport Considerations
- contents:
  - "8.  RTCP Flow Keepalive\n   RTCP packets are sent periodically and can thus normally
    keep the NAT\n   mappings open as long as they are sent frequently enough.  There
    are\n   two conditions for that.  First, RTCP needs to be used\n   bidirectionally
    and in a symmetric fashion, as described in\n   [RFC4961].  Secondly, RTCP needs
    to be sent frequently enough.\n   However, there are certain configurations that
    can break this latter\n   assumption.\n   There are two factors that need to be
    considered to ensure that RTCP\n   is sent frequently enough.  First, the RTCP
    bandwidth needs to be\n   sufficiently large so that transmission will occur more
    frequently\n   than the longest acceptable packet transmission interval (Tr).
    \ The\n   worst-case RTCP interval (Twc) can be calculated using this formula\n
    \  by inserting the max value of the following parameters:\n   o  Maximum RTCP
    packet size (avg_rtcp_size_max)\n   o  Maximum number of participants (members_max)\n
    \  o  RTCP receiver bandwidth (rtcp_bw)\n   The RTCP bandwidth value to use here
    is for a worst case, which will\n   be the receiver proportion when all members
    except one are not\n   senders.  This can be approximated to be all members.  Thus,
    for\n   sessions where RR and RS values [RFC3556] are used, then rtcp_bw\n   shall
    be set to RR.  For sessions where the [RFC3550]-defined\n   proportions of RTCP
    bandwidth are used (i.e., 1/4 of the bandwidth\n   for senders and 3/4 of the
    bandwidth for receivers), then rtcp_bw\n   will be 5% of 3/4 of the AS value [RFC4566]
    in bits per second.\n   Twc = 1.5 / 1.21828 * members_max * rtcp_bw / avg_rtcp_size_max
    * 8\n   The second factor is the minimum RTCP interval Tmin defined in\n   [RFC3550].
    \ Its base value is 5 seconds, but it might also be scaled\n   to 360 divided
    by the session bandwidth in kbps.  The Extended RTP\n   Profile for Real-time
    Transport Control Protocol (RTCP)-Based\n   Feedback (RTP/AVPF) [RFC4585] also
    allows for the setting of a\n   trr-int parameter, which is a minimal RTCP interval
    for regular RTCP\n   packets.  It is also used as the Tmin value in the regular
    Td\n   calculation.  An analysis of the algorithm shows that the longest\n   possible
    regular RTCP interval is:\n   RTCP_int_max = trr-int * 1.5 + Td * 1.5 / 1.21828\n
    \  And as long as there is sufficient bandwidth according to criteria 1\n   below,
    then the algorithm can be simplified by setting Td = trr-int,\n   giving\n   RTCP_int_max
    = trr-int * (1.5 + 1.5 / 1.21828) = 2.73123 * trr-int\n   Thus, the requirements
    for the RTCP parameters are as follows for\n   functioning keepalive:\n   1.  Ensure
    that sufficient RTCP bandwidth is provided by calculating\n       Twc, and ensure
    that the resulting value is less than or equal\n       to Tr.\n   2.  If AVP or
    SAVP [RFC3711] is used, the Tmin value can't be greater\n       than Tr divided
    by 1.5 / (e-3/2).\n   3.  If AVPF or SAVPF [RFC5124] is to be used, trr-min must
    not be set\n       to a value greater than Tr / 3.\n"
  title: 8.  RTCP Flow Keepalive
- contents:
  - "9.  Security Considerations\n   The RTP keepalive packets are sent on the same
    path as regular RTP\n   media packets and may be perceived as an attack by a peer.
    \ However,\n   [RFC3550] mandates that a peer \"ignore packets with payload types\n
    \  that it does not understand\".  A peer that does not understand the\n   keepalive
    message will thus appropriately drop the received packets.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgements\n   Jonathan Rosenberg provided the major inputs for this
    document via\n   the ICE specification.  Magnus Westerlund provided the text for
    the\n   RTCP flow keepalive section.  In addition, thanks to Alfred E.\n   Heggestad,
    Colin Perkins, Dan Wing, Gunnar Hellstrom, Hadriel Kaplan,\n   Randell Jesup,
    Remi Denis-Courmont, Robert Sparks, and Steve Casner\n   for their useful inputs
    and comments.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, July 2003.\n   [RFC4961]  Wing, D., \"Symmetric RTP / RTP Control
      Protocol (RTCP)\",\n              BCP 131, RFC 4961, July 2007.\n   [RFC5405]
      \ Eggert, L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n              for
      Application Designers\", BCP 145, RFC 5405,\n              November 2008.\n
      \  [RFC5761]  Perkins, C. and M. Westerlund, \"Multiplexing RTP Data and\n              Control
      Packets on a Single Port\", RFC 5761, April 2010.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H.,
      Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,
      M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC
      3261,\n              June 2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,
      \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\",
      RFC 3264,\n              June 2002.\n   [RFC3389]  Zopf, R., \"Real-time Transport
      Protocol (RTP) Payload for\n              Comfort Noise (CN)\", RFC 3389, September
      2002.\n   [RFC3556]  Casner, S., \"Session Description Protocol (SDP) Bandwidth\n
      \             Modifiers for RTP Control Protocol (RTCP) Bandwidth\",\n              RFC
      3556, July 2003.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and K.\n              Norrman, \"The Secure Real-time Transport Protocol
      (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4103]  Hellstrom, G.
      and P. Jones, \"RTP Payload for Text\n              Conversation\", RFC 4103,
      June 2005.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP:
      Session\n              Description Protocol\", RFC 4566, July 2006.\n   [RFC4585]
      \ Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended
      RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based
      Feedback (RTP/AVPF)\", RFC 4585,\n              July 2006.\n   [RFC4787]  Audet,
      F., Ed., and C. Jennings, \"Network Address\n              Translation (NAT)
      Behavioral Requirements for Unicast\n              UDP\", BCP 127, RFC 4787,
      January 2007.\n   [RFC5124]  Ott, J. and E. Carrara, \"Extended Secure RTP Profile
      for\n              Real-time Transport Control Protocol (RTCP)-Based Feedback\n
      \             (RTP/SAVPF)\", RFC 5124, February 2008.\n   [RFC5245]  Rosenberg,
      J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol
      for Network Address Translator (NAT)\n              Traversal for Offer/Answer
      Protocols\", RFC 5245,\n              April 2010.\n   [RFC5382]  Guha, S., Ed.,
      Biswas, K., Ford, B., Sivakumar, S., and P.\n              Srisuresh, \"NAT
      Behavioral Requirements for TCP\", BCP 142,\n              RFC 5382, October
      2008.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n
      \  [RFC5766]  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n
      \             Relays around NAT (TURN): Relay Extensions to Session\n              Traversal
      Utilities for NAT (STUN)\", RFC 5766, April 2010.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Xavier Marjou\n   France Telecom Orange\n   2, avenue
    Pierre Marzin\n   Lannion  22307\n   France\n   EMail: xavier.marjou@orange-ftgroup.com\n
    \  Aurelien Sollaud\n   France Telecom Orange\n   2, avenue Pierre Marzin\n   Lannion
    \ 22307\n   France\n   EMail: aurelien.sollaud@orange-ftgroup.com\n"
  title: Authors' Addresses
