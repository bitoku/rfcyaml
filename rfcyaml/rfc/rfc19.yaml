- title: __initial_text__
  contents:
  - "Two Protocol Suggestions to Reduce Congestion at Swap-Bound Nodes\nThere is a\
    \ wide variance in swap rates between core and auxiliary store\namong the HOST\
    \ systems to be nodes in the ARPA IMP network.  The slower\nof these, of which\
    \ our 360/50 system with 2303 drump swap store is an\nexample, might improve the\
    \ utility of the network not only for\nthemselves but for all nodes if the two\
    \ protocol suggestions of this\nnote were to be adopted.\n1. HOST control of ordering\
    \ of IMP-to-HOST traffic.  IMP-HOST protocol\n   now calls for delivery of messages\
    \ from IMP to HOST in the order in\n   which the IMP received them.  This may\
    \ lead to wasted swapping if,\n   for example, the IMP has messages for its HOST's\
    \ timeshare users A\n   and B, in that order, at a time when user B is in HOST\
    \ core.  B\n   would have to be swapped out, A in, and the first message accepted--\n\
    \   only to discover that now A must be swapped out and B back in again.\n   If\
    \ the HOST could a) read the IMP's queue of waiting messages and b)\n   accept\
    \ them in the order it found most effective, then a new\n   mechanism for improvement\
    \ of network efficiency would be at hand.\n   Clearly this change would have an\
    \ impact on BBN's IMP software.\n2. Core-to-core transfers between HOSTS.  At\
    \ another level, perhaps not\n   involving HOST-IMP protocol or IMP software changes,\
    \ is a HOST-HOST\n   protocol wherein cooperating HOSTS agree to lock appropriate\n\
    \   programs in core for the duration of a multi-message file transfer\n   on\
    \ an auxiliary connection.  This could greatly reduce the time to\n   transfer\
    \ such a file to and from a swap-bound HOST.  Unfortunately,\n   the numbers mitigate\
    \ possible advantages of this approach to some\n   extent:  if we assume a 50\
    \ kilobit/sec line and support further that\n   it is dedicated at 100% efficiency\
    \ to this transfer (which may\n   require slightly different handling of RFNMs\
    \ in this case) this\n   comes out to just over 6 8-kilobit messages per second.\
    \  It may be\n   impolitic in a timeshare environment to lock a single program\
    \ in\n   core for more than about 2 seconds.  If this is the case, then the\n\
    \   method would be applicable only for the rather limited range of file\n   sizes\
    \ of 2-16 messages.  Nevertheless, the time to move a large file\n   could be\
    \ so greatly enhanced by this approach that I think it\n   deserves consideration.\n\
    1. Abhi Bhushan, Proj. MAC               10.  Jerry Cole,  SDC\n2. Steve Crocker,\
    \ UCLA                   11.  John Kreznar, \"\n3. Ron Stoughton, UCSB       \
    \            12.  Dick Linde,   \"\n4. Elmer Shapiro, SRI                    13.\
    \  Bob Long,     \"\n7. Paul Rovner, LL                       16.  C. Weissman,\
    \  \"\n8. Bob Khan, BB & N                      17.  Marty Bleier, \"\n9. Larry\
    \ Roberts, ARPA\n       [ This RFC was put into machine readable form for entry\
    \ ]\n         [ into the online RFC archives by Alex Portnoy 1/97 ]\n"
