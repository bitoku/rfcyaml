- contents:
  - '             A Posture Transport Protocol over TLS (PT-TLS)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies PT-TLS, a TLS-based Posture Transport (PT)\n
    \  protocol.  The PT-TLS protocol carries the Network Endpoint\n   Assessment
    (NEA) message exchange under the protection of a Transport\n   Layer Security
    (TLS) secured tunnel.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6876.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Prerequisites ..............................................4\n      1.2.
    Message Diagram Conventions ................................4\n      1.3. Conventions
    Used in This Document ..........................4\n      1.4. Compatibility with
    Other Specifications ....................4\n   2. Design Considerations ...........................................5\n
    \     2.1. Benefits of TCP/IP Connectivity ............................5\n      2.2.
    Leveraging Proven TLS Security .............................6\n      2.3. TLV-Based
    Message Encapsulation ............................6\n      2.4. No Change to Base
    TLS Protocol .............................6\n   3. PT-TLS Protocol .................................................7\n
    \     3.1. Initiating a PT-TLS Session ................................8\n           3.1.1.
    Issues with Server-Initiated PT-TLS Sessions ........8\n           3.1.2. Establish
    or Re-Use Existing PT-TLS Session .........9\n      3.2. TCP Port Usage .............................................9\n
    \     3.3. Preventing MITM Attacks with Channel Bindings ..............9\n      3.4.
    PT-TLS Message Flow .......................................10\n           3.4.1.
    Assessment Triggers ................................10\n           3.4.2. PT-TLS
    Message Exchange Phases .....................11\n                  3.4.2.1. TLS
    Setup Phase ...........................12\n                  3.4.2.2. PT-TLS Negotiation
    Phase ..................13\n                  3.4.2.3. PT-TLS Data Transport Phase
    ...............14\n           3.4.3. TLS Requirements ...................................14\n
    \     3.5. PT-TLS Message Format .....................................15\n      3.6.
    IETF Namespace PT-TLS Message Types .......................18\n      3.7. PT-TLS
    Version Negotiation ................................20\n           3.7.1. Version
    Request Message ............................21\n           3.7.2. Version Response
    Message ...........................22\n      3.8. Client Authentication Using
    SASL ..........................22\n           3.8.1. SASL Client Authentication
    Requirements ............23\n           3.8.2. SASL in PT-TLS Overview ............................24\n
    \          3.8.3. SASL Authentication Flow ...........................24\n           3.8.4.
    Aborting SASL Authentication .......................25\n           3.8.5. Linkages
    to SASL Framework .........................25\n                  3.8.5.1. SASL
    Service Name .........................25\n                  3.8.5.2. SASL Authorization
    Identity ...............25\n                  3.8.5.3. SASL Security Layer .......................25\n
    \                 3.8.5.4. Multiple Authentications ..................25\n           3.8.6.
    SASL Channel Bindings ..............................25\n           3.8.7. SASL
    Mechanisms ....................................26\n           3.8.8. SASL Mechanism
    Selection ...........................26\n           3.8.9. SASL Authentication
    Data ...........................27\n           3.8.10. SASL Result .......................................28\n
    \     3.9. Error Message .............................................29\n   4.
    Security Considerations ........................................32\n      4.1.
    Trust Relationships .......................................32\n           4.1.1.
    Posture Transport Client ...........................33\n           4.1.2. Posture
    Transport Server ...........................34\n      4.2. Security Threats and
    Countermeasures ......................35\n           4.2.1. Message Theft ......................................35\n
    \          4.2.2. Message Fabrication ................................36\n           4.2.3.
    Message Modification ...............................36\n           4.2.4. Denial
    of Service ..................................37\n           4.2.5. NEA Asokan
    Attacks .................................37\n           4.2.6. Trust Anchors ......................................38\n
    \  5. Privacy Considerations .........................................38\n   6.
    IANA Considerations ............................................38\n      6.1.
    Designated Expert Guidelines ..............................39\n      6.2. Registry
    for PT-TLS Message Types .........................40\n      6.3. Registry for
    PT-TLS Error Codes ...........................41\n   7. Acknowledgments ................................................41\n
    \  8. References .....................................................42\n      8.1.
    Normative References ......................................42\n      8.2. Informative
    References ....................................43\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The NEA architecture [RFC5209] defines a system for communicating\n
    \  posture between a client, where it is collected, and server, where it\n   is
    assessed.  Posture is configuration and/or status of hardware or\n   software
    on an endpoint as it pertains to an organization's security\n   policy.  This
    document specifies PT-TLS, a TLS-based Posture\n   Transport (PT) protocol protected
    by a TLS channel.\n   NEA protocols are intended to be used for pre-admission
    assessment of\n   endpoints joining the network and to assess endpoints already
    present\n   on the network.  In order to support both usage models, two different\n
    \  types (or bindings) of PT protocols are necessary to operate before\n   and
    after the endpoint has an assigned IP address and other network-\n   layer information.
    \ This specification focuses on the PT protocol\n   used to assess endpoints already
    present on the network and thus is\n   able to use TCP/IP-based transport protocols.
    \ NEA has defined\n   another protocol called PT-EAP [PT-EAP] to address assessment
    prior\n   to the endpoint having an assigned IP address.\n   The Posture Transport
    protocol in the NEA architecture [RFC5209] is\n   responsible for transporting
    Posture Broker (PB-TNC [RFC5793])\n   batches, often containing Posture Attributes
    (PA-TNC [RFC5792]) over\n   the network between the Posture Transport Client component
    of the NEA\n   Client and the Posture Transport Server component of the NEA Server.\n
    \  The PT protocol also offers strong security protections to ensure\n   that
    the exchanged messages are protected from a variety of threats\n   from hostile
    intermediaries.\n"
  - contents:
    - "1.1.  Prerequisites\n   This document does not define an architecture or reference
      model.\n   Instead, it defines one binding of the PT protocol that works within\n
      \  the reference model described in the NEA Overview and Requirements\n   specification
      [RFC5209].  The reader is assumed to be thoroughly\n   familiar with [RFC5209].
      \ The NEA working group compared the\n   functionality described in this specification
      with the requirements\n   in [RFC5209] and found that each applicable requirement
      was\n   addressed.\n"
    title: 1.1.  Prerequisites
  - contents:
    - "1.2.  Message Diagram Conventions\n   This specification defines the syntax
      of PT-TLS messages using\n   diagrams.  Each diagram depicts the format and
      size of each field in\n   bits.  Implementations MUST send the bits in each
      diagram as they are\n   shown, traversing the diagram from top to bottom and
      then from left\n   to right within each line (which represents a 32-bit quantity).\n
      \  Multi-byte fields representing numeric values must be sent in network\n   (big
      endian) byte order.\n   Bit field (e.g., flag) values are described referring
      to the position\n   of the bit within the field.  These bit positions are numbered
      from\n   the most significant bit through the least significant bit, so a\n
      \  one-octet field with only bit 0 set has the value 0x80.\n"
    title: 1.2.  Message Diagram Conventions
  - contents:
    - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in\n   RFC 2119 [RFC2119].\n"
    title: 1.3.  Conventions Used in This Document
  - contents:
    - "1.4.  Compatibility with Other Specifications\n   One of the goals of the NEA
      effort is to deliver a single set of\n   endpoint assessment standards, agreed
      upon by all parties.  For this\n   reason, the authors understand that the Trusted
      Computing Group (TCG)\n   will be replacing its existing posture transport protocols
      with new\n   versions that are equivalent to and interoperable with the NEA\n
      \  specifications.\n"
    title: 1.4.  Compatibility with Other Specifications
  title: 1.  Introduction
- contents:
  - "2.  Design Considerations\n   This section discusses some of the key design considerations
    for the\n   PT protocol.  This document specifies the PT binding for use when\n
    \  performing an assessment or reassessment after the endpoint has been\n   admitted
    to the network and is capable of using TCP/IP to communicate\n   with the NEA
    Server.  If the endpoint does not yet have TCP/IP-layer\n   access to the NEA
    Server (and vice versa), the endpoint can use the\n   PT-EAP (Posture Transport
    (PT) Protocol for Extensible Authentication\n   Protocol (EAP) Tunnel Methods)
    protocol when performing an\n   assessment.\n   Because the endpoint has TCP/IP
    access to the NEA Server (potentially\n   on a restricted portion of the network),
    the NEA Client and NEA\n   Server have the ability to establish (or re-use) a
    reliable TCP/IP\n   connection in order to perform the assessment.  The TCP/IP
    connection\n   enables the assessment to occur over a relatively high-performance,\n
    \  reliable channel capable of supporting multiple roundtrip message\n   exchanges
    in a full-duplex manner.  These connection properties are\n   very different from
    what is available when the endpoint is initially\n   joining the network (e.g.,
    during an 802.1X-based assessment);\n   therefore, the design described in this
    specification follows a\n   different path to maximize the benefits of the underlying
    TCP/IP\n   connection.\n"
  - contents:
    - "2.1.  Benefits of TCP/IP Connectivity\n   The PT protocol over TLS is typically
      able to offer to the NEA Client\n   and NEA Server significantly higher quality
      of service and\n   flexibility of operation than PT-EAP.  However, there may
      be some\n   added risks when the endpoint is on the network prior to its initial\n
      \  assessment (if no admission time assessment had been performed).\n   Because
      of these risks, the combined use of an EAP-based assessment\n   during admission
      followed by reassessment using TCP/IP may be\n   appropriate in some environments.\n
      \  Some of the benefits to having a TCP/IP-based transport during an\n   assessment
      include:\n   o  Full-Duplex Connectivity - used to support asynchronous initiation\n
      \     of posture exchanges within a single TLS connection (e.g.,\n      triggered
      by alerts of posture or policy changes)\n   o  High Bandwidth - potentially
      much higher bandwidth than other\n      transports (e.g., EAP), allowing more
      in-band data (e.g.,\n      remediation, verbose posture information)\n   o  Large
      Messages - ability to send very large Posture Attribute\n      messages without
      directly fragmenting them (underlying carrier\n      protocol may introduce
      fragmentation)\n   o  Bidirectional - NEA Client and NEA Server can initiate
      an\n      assessment or reassessment\n   o  Multiple Roundtrips - NEA Client
      and NEA Server can exchange\n      numerous messages without fear of infrastructure
      timeouts.\n      However, the entire exchange should be kept as brief as possible\n
      \     if the user has to wait for its completion.\n"
    title: 2.1.  Benefits of TCP/IP Connectivity
  - contents:
    - "2.2.  Leveraging Proven TLS Security\n   All PT protocol bindings must be capable
      of providing strong\n   authentication, integrity, and confidentiality protection
      for the\n   PB-TNC batches.  Rather than define a new protocol over TCP/IP to\n
      \  provide adequate protection, this specification requires the use of\n   Transport
      Layer Security [RFC5246] to secure the connection.  TLS was\n   selected because
      it's a widely deployed protocol with parallel\n   protections to a number of
      the EAP tunnel methods, and it meets all\n   of the security requirements.\n"
    title: 2.2.  Leveraging Proven TLS Security
  - contents:
    - "2.3.  TLV-Based Message Encapsulation\n   The design of the PT-TLS protocol
      is based upon the use of a\n   type-length-value (TLV)-oriented protocol message
      that identifies the\n   type of message, the message's length, and a potentially
      variable-\n   length payload value.  The use of a TLV-oriented encoding was
      chosen\n   to match the Internet standard PA-TNC and PB-TNC protocols.  Because\n
      \  the PA-TNC, PB-TNC, and PT-TLS protocols are typically implemented\n   inside
      the same process space, this allows a common set of message-\n   parsing code
      to be used.  Similarly, creation of debugging tools is\n   simplified by the
      common encoding methodologies.  TLV-based encoding\n   was used in each of the
      NEA protocols in part because it enables a\n   very space-efficient representation
      on the network and is simpler to\n   parse than some other encodings to benefit
      lower-powered (or battery\n   constrained) devices.\n"
    title: 2.3.  TLV-Based Message Encapsulation
  - contents:
    - "2.4.  No Change to Base TLS Protocol\n   During the design of the PT-TLS protocol,
      several approaches were\n   considered with different costs and benefits.  Several
      considered\n   approaches involved integrating the PT protocol into the TLS\n
      \  handshake protocol.  Because the PT protocol requires the underlying\n   TLS
      carrier to provide security protections, the PT protocol couldn't\n   operate
      before the cipher suites were negotiated and in use.  One\n   option was to
      integrate into the TLS handshake protocol after the\n   ChangeCipherSpec phase,
      allowing the PT message to be protected.  The\n   benefit of this approach is
      that the assessment protocol could\n   operate below the application protocols,
      allowing for easier\n   integration into applications.  However, making this
      change would\n   require some extensions to the TLS handshake protocol standards
      and\n   existing widely deployed TLS implementations, so it wasn't clear that\n
      \  the cost was warranted, particularly because the application\n   independence
      can also be offered by a shim library between the\n   application and TLS library
      that provides the PT protocol\n   encapsulation/decapsulation.\n   The other
      general approach considered was to have PT-TLS layer on top\n   of TLS as an
      application protocol (using the standard\n   application_data ContentType).
      \ This has the advantage that existing\n   TLS software could be used.  However,
      the PB-TNC traffic would need\n   to be encapsulated/decapsulated by a new PT-TLS
      protocol layer before\n   being passed to the TLS library.  This didn't seem
      like a significant\n   issue, as PB-TNC is architected to layer on PT anyway.\n
      \  After considering the different options, it was determined that\n   layering
      the PT protocol on top of the TLS protocol without requiring\n   current TLS
      protocol implementations to change met all the\n   requirements and offered
      the best path toward rapid adoption and\n   deployment.  Therefore, the following
      sections describe a PT protocol\n   that is carried on top of TLS.\n"
    title: 2.4.  No Change to Base TLS Protocol
  title: 2.  Design Considerations
- contents:
  - "3.  PT-TLS Protocol\n   This section specifies the PT-TLS protocol, a Posture
    Transport (PT)\n   protocol carried by the Transport Layer Security (TLS) protocol
    over\n   a TCP/IP network.  As shown in Figure 1, this protocol runs directly\n
    \  on top of TLS as an application.  This means PT-TLS is encapsulated\n   within
    the TLS Record Layer protocol using the standard ContentType\n   for applications
    (application_data).\n     +---------------------------------------------------------------+\n
    \    |             TLV Encapsulation of PB-PA message                |\n     +---------------------------------------------------------------+\n
    \    |                             TLS                               |\n     +---------------------------------------------------------------+\n
    \    |                             TCP                               |\n     +---------------------------------------------------------------+\n
    \                    Figure 1.  PT-TLS Layering Model\n"
  - contents:
    - "3.1.  Initiating a PT-TLS Session\n   The PT-TLS protocol may be initiated
      by a Posture Transport Client or\n   a Posture Transport Server.  This flexibility
      supports different use\n   cases.  For example, a Posture Transport Client that
      wishes to\n   trigger a NEA assessment to determine whether its security posture
      is\n   good can start up a PT-TLS session and request a posture assessment.\n
      \  On the other hand, when an endpoint requests access to a protected\n   network
      or resource, a Posture Transport Server can start up a PT-TLS\n   session and
      perform a posture assessment before deciding whether to\n   grant access.\n
      \  The party that initiates a PT-TLS session is known as the \"PT-TLS\n   Initiator\".
      \ The other party in the session (which receives the\n   request to open a PT-TLS
      session) is known as the \"PT-TLS Responder\".\n"
    - contents:
      - "3.1.1.  Issues with Server-Initiated PT-TLS Sessions\n   In order for a NEA
        Server to establish a PT-TLS session, the NEA\n   Client needs to be listening
        for a connection request on a TCP port\n   known by the NEA Server.  In many
        deployments, the security policies\n   of an endpoint (e.g., firewall software)
        or the security policies of\n   a network (e.g., firewall devices) are designed
        to minimize the\n   number of open inbound TCP/UDP ports that are available
        to the\n   network to reduce the potential attack footprint.  This is one
        issue\n   that makes it difficult for a NEA Server to initiate a PT-TLS\n
        \  session.\n   Another issue with this scenario involves X.509 certificates.
        \ When\n   the NEA Server creates a TLS session to the NEA Client, the NEA\n
        \  Client is effectively acting as the TLS server during the TLS\n   protocol
        exchange.  This means the NEA Client would typically need to\n   possess an
        X.509 certificate to protect the initial portion of the\n   TLS handshake.
        \ In situations where the NEA Server initiates the\n   creation of the TLS
        session, both the NEA Client and NEA Server MUST\n   possess X.509 certificates
        to fully authenticate the session.  For\n   many deployments, provisioning
        X.509 certificates to all NEA Clients\n   has scalability and cost issues;
        therefore, it is recommended that\n   the NEA Client not listen for connection
        requests from the NEA Server\n   but instead establish and maintain a TLS
        session to the NEA Server\n   proactively, so either party can initiate an
        assessment using the\n   preexisting TLS session as required.\n   In most
        cases, the traditional methods of server certificate ID\n   validation will
        not apply when the NEA Server initiates the\n   connection.  In this case,
        the NEA Client and Server need to follow\n   the certificate path validation
        rules in RFC 5280 [RFC5280].  In\n   addition, each side needs to be able
        to authorize its peer based upon\n   matching Subject and SubjectAltName fields
        for certificates issued by\n   a particular trust anchor.\n   Therefore, NEA
        Clients SHOULD be capable of establishing and holding\n   open a TLS session
        with the NEA Server immediately after obtaining\n   network access.  A NEA
        Client MAY listen for connection requests from\n   the NEA Server and establish
        a new PT-TLS session when one does not\n   already exist.  Because of the
        potential added complexity, a NEA\n   Client's support for accepting inbound
        PT-TLS connections is optional\n   to implement.  Having an existing PT-TLS
        session allows either party\n   to initiate an assessment without requiring
        the NEA Client to be\n   listening for new connection requests.  In order
        to keep the TLS\n   session alive, the NEA Client and NEA Server SHOULD be
        capable of\n   supporting the TLS heartbeat protocol [RFC6520].\n"
      title: 3.1.1.  Issues with Server-Initiated PT-TLS Sessions
    - contents:
      - "3.1.2.  Establish or Re-Use Existing PT-TLS Session\n   A single PT-TLS session
        can support multiple NEA assessments, which\n   can be started by either party
        (the PT-TLS Initiator or the PT-TLS\n   Responder).  The party that starts
        a NEA assessment is known as the\n   \"assessment initiator\", and the other
        party is known as the\n   \"assessment responder\".\n   If the assessment
        initiator already has a PT-TLS session to the\n   assessment responder, the
        initiator can re-use this session;\n   otherwise, a new PT-TLS session needs
        to be established.\n"
      title: 3.1.2.  Establish or Re-Use Existing PT-TLS Session
    title: 3.1.  Initiating a PT-TLS Session
  - contents:
    - "3.2.  TCP Port Usage\n   In order for a PT-TLS Initiator to establish a TCP
      connection to a\n   PT-TLS Responder, the initiator needs to know the TCP port
      number on\n   which the responder is listening for assessment requests.  The
      IANA\n   has reserved TCP port number 271 for use by \"pt-tls\".\n"
    title: 3.2.  TCP Port Usage
  - contents:
    - "3.3.  Preventing MITM Attacks with Channel Bindings\n   As described in \"The
      Network Endpoint Assessment (NEA) Asokan Attack\n   Analysis\" [RFC6813], a
      sophisticated Man-in-the-Middle (MITM) attack\n   can be mounted against NEA
      systems.  The attacker forwards PA-TNC\n   messages from a healthy machine through
      an unhealthy one so that the\n   unhealthy machine can gain network access.
      \ Because there are easier\n   attacks on NEA systems, like having the unhealthy
      machine lie about\n   its configuration, this attack is generally only mounted
      against\n   machines with an External Measurement Agent (EMA).  The EMA is a\n
      \  separate entity, difficult to compromise, that measures and attests\n   to
      the configuration of the endpoint.\n   To protect against NEA Asokan attacks,
      the Posture Broker Client on\n   an EMA-equipped endpoint should pass the tls-unique
      channel binding\n   [RFC5929] for PT-TLS's underlying TLS session to the EMA.
      \ This value\n   can then be included in the EMA's attestation, and the Posture\n
      \  Validator responsible for communicating with the EMA may then confirm\n   that
      the value matches the tls-unique channel binding for its end of\n   the connection.
      \ If the values match, the posture sent by the EMA and\n   NEA Client is from
      the same endpoint as the client side of the TLS\n   connection (since the endpoint
      knows the tls-unique value), so no\n   man-in-the-middle is forwarding posture.
      \ If they differ, the Asokan\n   attack has been detected.  The Posture Validator
      MUST fail its\n   verification of the endpoint if the Asokan attack has been
      detected.\n"
    title: 3.3.  Preventing MITM Attacks with Channel Bindings
  - contents:
    - "3.4.  PT-TLS Message Flow\n   This section discusses the general flow of messages
      between the NEA\n   Client's Posture Transport Client and the NEA Server's Posture\n
      \  Transport Server in order to perform NEA assessments using the PT-TLS\n   protocol.\n"
    - contents:
      - "3.4.1.  Assessment Triggers\n   Initially, the NEA Client or NEA Server will
        decide that an\n   assessment is needed.  What stimulates the decision to
        perform an\n   assessment is outside the scope of this specification, but
        some\n   examples include:\n   o  NEA Server becoming aware of suspicious
        behavior on an endpoint\n   o  NEA Server receiving new policies requiring
        immediate action\n   o  NEA Client noticing a change in local security posture\n
        \  o  NEA Client wishing to access a protected network or resource\n   Because
        either the NEA Client or NEA Server can trigger the\n   establishment of the
        TLS session and initiate the assessment, this\n   document will use the terms
        \"assessment initiator\" and \"assessment\n   responder\".  This nomenclature
        allows either NEA component to fill\n   either of the PT-TLS roles.\n"
      title: 3.4.1.  Assessment Triggers
    - contents:
      - "3.4.2.  PT-TLS Message Exchange Phases\n   The PT-TLS message exchange occurs
        in three distinct phases:\n   o  TLS Setup (including TLS handshake protocol)\n
        \  o  PT-TLS Negotiation\n   o  PT-TLS Data Transport\n   The TLS Setup phase
        is responsible for the establishment of the TCP\n   connection and the TLS
        protections for the PT-TLS messages.  The TLS\n   Setup phase starts with
        the establishment of a TCP connection between\n   the Posture Transport Client
        and Posture Transport Server.  The new\n   connection triggers the TLS server
        to start the TLS handshake\n   protocol to establish the cryptographic protections
        for the session.\n   Once the TLS Setup phase has completed (after the TLS
        Finished\n   messages), the TLS session MUST NOT be renegotiated.  TLS session\n
        \  renegotiation MAY be used before the TLS Setup phase ends and the\n   PT-TLS
        Negotiation phase begins.  This phase also enables the\n   establishment of
        the tls-unique shared secret.  The tls-unique shared\n   secret can later
        be used by the PA protocol to protect against some\n   forms of man-in-the-middle
        attacks.\n   The PT-TLS Negotiation phase is only performed at the start of
        the\n   first assessment on a TLS session.  During this phase, the NEA Client\n
        \  and NEA Server discover each other's PT-TLS capabilities and\n   establish
        a context that will apply to all future PT-TLS messages\n   sent over the
        TLS session.  The PT-TLS Negotiation phase MUST NOT be\n   repeated after
        the session has entered the Data Transport phase.  NEA\n   assessment messages
        (PB-TNC batches) MUST NOT be sent by the NEA\n   Client or NEA Server prior
        to the completion of the PT-TLS\n   Negotiation phase to ensure that the security
        protections for the\n   session are properly established and applied to the
        NEA assessment\n   messages.\n   Finally, the Data Transport phase allows
        the NEA Client and NEA\n   Server to exchange PT messages under the protection
        of the TLS\n   session consistent with the capabilities established in earlier\n
        \  phases.  The exchanged messages can be a PT-TLS protected NEA\n   assessment
        as described in this specification or other vendor-defined\n   PT-TLS exchanged
        messages.\n"
      - contents:
        - "3.4.2.1.  TLS Setup Phase\n   After a new TCP connection is established
          between the Posture\n   Transport Client and Posture Transport Server, a
          standard TLS\n   exchange is performed to negotiate a common security context
          for\n   protecting subsequent communications.  As discussed in Section 3.1,\n
          \  the TCP connection establishment and/or the TLS handshake protocol\n
          \  could be initiated by either the NEA Client or NEA Server.  The most\n
          \  common situation would be for the assessment initiator to trigger the\n
          \  creation of the TCP connection and TLS handshake, so an assessment\n
          \  could begin when no session already exists.  When the NEA Server has\n
          \  initiated the TLS Setup, the NEA Server is acting as a TLS client and\n
          \  the NEA Client is the TLS server (accepting the inbound TLS session\n
          \  request).  The expected normal case is that the NEA Client initiates\n
          \  this phase, so that the NEA Server is acting as the TLS server and\n
          \  therefore the bootstrapping of the security of the TLS session is\n   using
          the NEA Server's certificate.  Having the NEA Client initiate\n   the TLS
          session avoids the need for the NEA Client to also possess a\n   certificate.\n
          \  During the TLS Setup phase of PT-TLS, the PT-TLS Initiator contacts\n
          \  the listening port of the PT-TLS Responder and performs a TLS\n   handshake.
          \ The PT-TLS Responder MUST possess a trustworthy X.509\n   certificate
          used to authenticate to the PT-TLS Initiator and used to\n   bootstrap the
          security protections of the TLS session.  The PT-TLS\n   Initiator MAY also
          use an X.509 certificate to authenticate to the\n   PT-TLS Responder providing
          for a bidirectional authentication of the\n   PT-TLS session.  The NEA Client
          MUST provide certificate validation\n   according to the rules in RFC 5280
          when evaluating the server\n   certificate.  The NEA Client MAY perform
          certificate revocation\n   checking on the NEA Server's certificate.  This
          specification allows\n   the NEA Client implementation to decide on what
          certificate\n   revocation technique is to be implemented.  If revocation
          information\n   is not provided in a TLS handshake extension, then clients
          performing\n   certificate validation will require some network access (e.g.,
          HTTP)\n   to be allowed during the assessment.  NEA Client network access
          to\n   other non-essential services might be restricted during assessments\n
          \  in some situations.  If the client cannot access the status\n   information,
          then its policy may prevent it from completing the TLS\n   handshake.\n
          \  In addition, the NEA Client MUST follow the recommendations in\n   RFC
          6125 [RFC6125] when validating the NEA Server domain name against\n   the
          contents of the server certificate, taking into consideration the\n   following
          restrictions:\n   o  Any SRV-IDs and URI-IDs in the certificate are ignored.\n
          \  o  Use of CN-IDs in certificates is NOT RECOMMENDED.\n   o  Wildcards
          MUST NOT appear in the DNS-ID or CN-ID of a certificate\n      identifying
          a PT-TLS server.\n   Details for the reverse direction are given in Section
          3.1.\n   Due to deployment issues with issuing and distributing certificates\n
          \  to a potentially large number of NEA Clients, this specification\n   allows
          the NEA Client to be authenticated during the PT-TLS\n   Negotiation phase
          using other more cost-effective methods, as\n   described in Section 3.8.1.
          \ At the conclusion of a successful\n   initial TLS Setup phase, the NEA
          Client and NEA Server have a\n   protected session to exchange messages.
          \ This allows the protocol to\n   transition to the PT-TLS Negotiation phase.\n"
        title: 3.4.2.1.  TLS Setup Phase
      - contents:
        - "3.4.2.2.  PT-TLS Negotiation Phase\n   Once a TLS session has been established
          between a Posture Transport\n   Client and Posture Transport Server, the
          PT-TLS Initiator sends a\n   Version Request message indicating its supported
          PT-TLS protocol\n   version range.  Next, the PT-TLS Responder sends a Version
          Response\n   message, which selects a protocol version from within the range\n
          \  offered.  The PT-TLS Responder SHOULD select the preferred version\n
          \  offered if supported; otherwise, the highest version that the\n   responder
          is able to support from the received Version Request\n   message will be
          used.  If the PT-TLS Responder is unable or unwilling\n   to support any
          of the versions included in the Version Request\n   message, the responder
          SHOULD send a Version Not Supported error\n   message.\n   If no client-side
          authentication occurred during the TLS Setup phase,\n   the Posture Transport
          Server can authenticate the client using PT-TLS\n   client authentication
          messages as described in Section 3.8.  The NEA\n   Server initiates the
          client authentication and indicates when the\n   authentication is complete.\n
          \  When the NEA Client receives the Simple Authentication and Security\n
          \  Layer (SASL) [RFC4422] Mechanisms list, the NEA Client responds with\n
          \  a SASL Mechanism Selection TLV indicating the method of\n   authentication
          to be used.  Upon selecting an appropriate SASL\n   mechanism, the NEA Client
          and Server exchange SASL-mechanism-specific\n   messages in order to authenticate
          the NEA Client.  When the client\n   authentication successfully completes
          and no additional\n   authentications are required (as indicated by the
          NEA Server sending\n   an empty SASL Mechanisms list), the PT-TLS session
          transitions into\n   the Data Transport phase, where it will remain for
          the duration of\n   the session.  Note that the NEA Server could choose
          to not\n   authenticate the client (indicated by only sending an empty SASL\n
          \  Mechanisms list) or to continue performing a posture assessment even\n
          \  if the authentication did not complete successfully.\n"
        title: 3.4.2.2.  PT-TLS Negotiation Phase
      - contents:
        - "3.4.2.3.  PT-TLS Data Transport Phase\n   Once a PT-TLS session is available
          to carry NEA assessments, PT-TLS\n   allows either side of the connection
          to send the first PB-TNC batch.\n   The PB-TNC standard prescribes whether
          the Posture Broker Client or\n   Posture Broker Server starts the assessment.
          \ The assessment\n   initiator first envelopes the PB-TNC batch in a PT-TLS
          message, then\n   assigns a message identifier to the message and finally
          transmits it\n   over the session.  The assessment responder validates the
          PT-TLS\n   message and delivers the encapsulated PB-TNC batch to its upstream\n
          \  component (Posture Broker Client or Server).\n   Most PT-TLS messages
          contain PB-TNC batches that house PA-TNC\n   requests for posture information
          or a response containing the\n   requested posture information.  The Posture
          Transport Client and\n   Posture Transport Server may also exchange messages
          between them,\n   such as a PT-TLS Error message indicating that a problem
          occurred\n   processing a message.  During an assessment, the Posture Transport\n
          \  Client and Server merely encapsulate and exchange the PB-TNC batches\n
          \  and are unaware of the state of the assessment.\n   The PT-TLS protocol
          allows either party to send a PT-TLS message at\n   any time, reflecting
          the full-duplex nature of the underlying TLS\n   session.  For example,
          an assessment initiator may send several\n   PT-TLS messages prior to receiving
          any responses from the assessment\n   responder.  All implementations of
          PT-TLS MUST support full-duplex\n   PT-TLS message exchange.  However, some
          higher-layer NEA protocols\n   (e.g., PB-TNC) may not be able to fully make
          use of the full-duplex\n   message exchange.\n"
        title: 3.4.2.3.  PT-TLS Data Transport Phase
      title: 3.4.2.  PT-TLS Message Exchange Phases
    - contents:
      - "3.4.3.  TLS Requirements\n   In order to ensure that strong security is always
        available for\n   deployers and to improve interoperability, this section
        discusses\n   some requirements on the underlying TLS transport used by PT-TLS.\n
        \  Whenever TLS is used by this specification, the appropriate version\n   (or
        versions) of TLS will vary over time, based on the widespread\n   deployment
        and known security vulnerabilities.  At the time of this\n   writing, TLS
        version 1.2 [RFC5246] is the most recent version, but it\n   has a very limited
        deployment base and might not be readily available\n   for implementation.
        \ TLS version 1.0 [RFC2246] and version 1.1\n   [RFC4346] are the most widely
        deployed versions and will provide the\n   broadest interoperability.  Implementations
        of PT-TLS SHOULD support\n   use of TLS 1.2.\n   For each TLS version supported,
        implementations of the PT-TLS\n   protocol MUST at least support the TLS_RSA_WITH_AES_128_CBC_SHA\n
        \  cipher suite.  This cipher suite requires the server to provide a\n   certificate
        that can be used during the key exchange.\n   Implementations SHOULD NOT include
        support for cipher suites that do\n   not minimally offer PT-TLS Responder
        (typically Posture Transport\n   Server) authentication, such as the anonymous
        Diffie-Hellman cipher\n   suites (e.g., TLS_DH_anon_WITH_AES_128_CBC_SHA).
        \ Implementations\n   MUST support RFC 5746 [RFC5746].  Implementations MAY
        allow\n   renegotiation to provide confidentiality for the client certificate.\n
        \  If renegotiation is allowed, implementations need to select the\n   appropriate
        handshake messages as described in RFC 5929 for the\n   tls-unique value.\n"
      title: 3.4.3.  TLS Requirements
    title: 3.4.  PT-TLS Message Flow
  - contents:
    - "3.5.  PT-TLS Message Format\n   This section describes the format and semantics
      of the PT-TLS\n   message.  Every message sent over a PT-TLS session MUST start
      with\n   the PT-TLS header described in this section.\n   The PT-TLS header
      format is as follows:\n                          1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Reserved   |           Message Type Vendor ID              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                          Message Type                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                         Message Length                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       Message Identifier                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                Message Value (e.g., PB-TNC Batch) . . .       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Reserved\n      Reserved for future use.  This field MUST be set to 0 on\n
      \     transmission and ignored upon reception.\n   Message Type Vendor ID\n
      \     This field indicates the owner of the namespace associated with\n      the
      message type.  This is accomplished by specifying the 24-bit\n      Structure
      of Management Information (SMI) Private Enterprise\n      Number [PEN] (Vendor
      ID) of the party who owns the message type\n      namespace.  Consistent with
      PA-TNC and PB-TNC, we depend on the\n      PEN fitting in 24 bits, so if IANA
      were to register a wider PEN,\n      then that PEN could not be used with NEA.
      \ IETF namespace PT-TLS\n      Message Types MUST use zero (0) in this field.
      \ For more\n      information about the intended use of NEA namespace identifiers,\n
      \     see the PA-TNC specification (RFC 5792), Sections 2.1 and 2.2.\n      The
      PT-TLS Message Type Vendor ID 0xffffff is reserved.  Posture\n      Transport
      Clients and Servers MUST NOT send PT-TLS messages in\n      which the PT-TLS
      Message Type Vendor ID has this reserved value\n      (0xffffff).  If a Posture
      Transport Client or Posture Transport\n      Server receives a message containing
      this reserved value\n      (0xffffff) in the PT-TLS Message Type Vendor ID,
      the recipient\n      SHOULD respond with an Invalid Parameter error code in
      a PT-TLS\n      Error message.\n   Message Type\n      This field defines the
      type of the PT-TLS message within the scope\n      of the specified Message
      Type Vendor ID that is included in the\n      Message Value field.  The specific
      IETF-defined values allowable\n      in this field when the Message Type Vendor
      ID is the IETF SMI\n      Private Enterprise Number value (0) are defined in
      Section 3.6.\n      Recipients of a message containing a Message Type Vendor
      ID and a\n      message type that is unrecognized SHOULD respond with a Type
      Not\n      Supported error code in a PT-TLS Error message.\n      Posture Transport
      Clients and Posture Transport Servers MUST NOT\n      require support for particular
      vendor-defined PT-TLS Message Types\n      in order to interoperate with other
      PT-TLS compliant\n      implementations (although implementations MAY permit\n
      \     administrators to configure them to require support for specific\n      vendor-defined
      PT-TLS Message Types).\n      If the PT-TLS Message Type Vendor ID field has
      the value zero (0),\n      then the PT-TLS Message Type field contains an IETF
      namespace\n      PT-TLS Message Type, as listed in the IANA registry.  IANA\n
      \     maintains a registry of PT-TLS Message Types.  Entries in this\n      registry
      are added following the IANA Specification Required\n      policy, following
      the guidelines in Section 6.1.  Section 3.6 of\n      this specification defines
      the initial set of IETF-defined PT-TLS\n      Message Types.\n      The PT-TLS
      Message Type 0xffffffff is reserved.  Posture Transport\n      Clients and Posture
      Transport Servers MUST NOT send PT-TLS\n      messages in which the PT-TLS Message
      Type has this reserved value\n      (0xffffffff).  If a Posture Transport Client
      or Posture Transport\n      Server receives a message in which the PT-TLS Message
      Type has\n      this reserved value (0xffffffff), it SHOULD respond with an\n
      \     Invalid Parameter error code in a PT-TLS Error message.\n   Message Length\n
      \     This field contains the length in octets of the entire PT-TLS\n      message
      (including the entire header).  Therefore, this value MUST\n      always be
      at least 16.  Any Posture Transport Client or Posture\n      Transport Server
      that receives a message with a PT-TLS Message\n      Length field whose value
      is less than 16 SHOULD respond with an\n      Invalid Parameter PT-TLS Error
      Code.  Similarly, if a Posture\n      Transport Client or Posture Transport
      Server receives a PT-TLS\n      message for a Message Type that has a known
      Message Length and the\n      Message Length indicates a different value (greater
      or less than\n      the expected value), the recipient SHOULD respond with an
      Invalid\n      Parameter PT-TLS Error Code.\n   Message Identifier\n      This
      field contains a value that uniquely identifies the PT-TLS\n      message on
      a per message sender (Posture Transport Client or\n      Server) basis.  This
      value is copied into the body of the PT-TLS\n      Error message so the recipient
      can determine which message caused\n      the error.\n      The Message Identifier
      MUST be a monotonically increasing counter\n      starting at zero indicating
      the number of the messages the sender\n      has transmitted over the TLS session.
      \ It is possible that a busy\n      or long-lived session might exceed 2^32-1
      messages sent, so the\n      message sender MUST roll over to zero upon reaching
      the 2^32nd\n      message, thus restarting the increasing counter.  During a\n
      \     rollover, it is feasible that the message recipient could be\n      confused
      if it keeps track of every previously received Message\n      Identifier, so
      recipients MUST be able to handle rollover\n      situations without generating
      errors.\n   Message Value\n      The contents of this field vary depending on
      the particular\n      Message Type Vendor ID and Message Type given in the PT-TLS
      header\n      for this PT-TLS message.  This field most frequently contains
      a\n      PB-TNC batch.  The contents of this field for each of the initial\n
      \     IETF namespace PT-TLS Message Types are defined in this\n      specification.\n"
    title: 3.5.  PT-TLS Message Format
  - contents:
    - "3.6.  IETF Namespace PT-TLS Message Types\n   This section defines the NEA
      standard PT-TLS Message Types used to\n   carry PT-TLS messages and PB-TNC batches
      between the Posture\n   Transport Client and Posture Transport Server.\n   The
      following table summarizes the initial set of IETF-defined\n   message type
      values, which are used with the PT-TLS Message Type\n   Vendor ID field set
      to the IETF SMI PEN (0).  Note that the IANA\n   administers a PEN value of
      0 on behalf of the IETF.  These\n   descriptions only apply to the IETF namespace.\n
      \         Value (Name)                          Definition\n   ----------------------------
      \ ---------------------------------------\n   0 (Experimental)              Reserved
      for experimental use.  This\n                                 type will not
      offer interoperability\n                                 but allows for experimentation.
      \ This\n                                 message type MUST only be sent when
      the\n                                 NEA Client and NEA Server are in the\n
      \                                Data Transport phase and only on a\n                                 restricted,
      experimental network.\n                                 Compliant implementations
      MUST send an\n                                 Invalid Message error code in
      a PT-TLS\n                                 Error message if an Experimental\n
      \                                message is received.\n   1 (Version Request)
      \          Version negotiation request including\n                                 the
      range of versions supported by the\n                                 sender.
      \ This message type MUST only be\n                                 sent by the
      TLS session initiator as\n                                 the first PT-TLS
      message in the PT-TLS\n                                 Negotiation phase.  Recipients
      MUST\n                                 send an Invalid Message error code in
      a\n                                 PT-TLS Error message if a Version\n                                 Request
      is received at another time.\n   2 (Version Response)          PT-TLS protocol
      version selected by the\n                                 responder.  This message
      type MUST only\n                                 be sent by the PT-TLS Responder
      as the\n                                 second message in the PT-TLS\n                                 Negotiation
      phase.  Recipients MUST\n                                 send an Invalid Message
      error code in a\n                                 PT-TLS Error message if a
      Version\n                                 Response is received at another time.\n
      \  3 (SASL Mechanisms)           Sent by the NEA Server to indicate what\n                                 SASL
      mechanisms it is willing to use\n                                 for authentication
      on this session.\n                                 This message type MUST only
      be sent by\n                                 the NEA Server in the PT-TLS\n
      \                                Negotiation phase.  The NEA Client MUST\n                                 send
      an Invalid Message error code in a\n                                 PT-TLS
      Error message if a SASL\n                                 Mechanisms message
      is received at\n                                 another time.\n   4 (SASL Mechanism
      Selection)  Sent by the NEA Client to select a SASL\n                                 mechanism
      from the list offered by the\n                                 NEA Server.  This
      message type MUST\n                                 only be sent by the NEA
      Client in the\n                                 PT-TLS Negotiation phase.  The
      NEA\n                                 Server MUST send an Invalid Message\n
      \                                error code in a PT-TLS Error message if\n                                 a
      SASL Mechanism Selection is received\n                                 after
      the PT-TLS Negotiation phase.\n                                 Once a SASL
      mechanism has been\n                                 selected, it may not change
      until the\n                                 mechanism completes either successfully\n
      \                                or as a failure.\n   5 (SASL Authentication
      Data)  Opaque octets exchanged between the NEA\n                                 Client
      and NEA Server's SASL mechanisms\n                                 to perform
      the client authentication.\n                                 This message type
      MUST only be sent\n                                 during the PT-TLS Negotiation
      phase.\n                                 Recipients MUST send an Invalid Message\n
      \                                error code in a PT-TLS Error message if\n                                 a
      SASL Authentication Data message is\n                                 received
      after the PT-TLS Negotiation\n                                 phase.\n   6
      (SASL Result)               Indicates the result code of the SASL\n                                 mechanism
      authentication as described\n                                 in Section 3.8.10.
      \ This message type\n                                 MUST only be sent by the
      NEA Server\n                                 when the NEA Client and NEA Server
      are\n                                 in the PT-TLS Negotiation phase.  The\n
      \                                NEA Client MUST send an Invalid Message\n                                 error
      code in a PT-TLS Error message if\n                                 a SASL Result
      is received after the\n                                 PT-TLS Negotiation phase.\n
      \  7 (PB-TNC Batch)              Contains a PB-TNC batch.  For more\n                                 information
      on PB-TNC batches, see\n                                 RFC 5793 (PB-TNC) Section
      4.  This\n                                 message type MUST only be sent when
      the\n                                 NEA Client and NEA Server are in the\n
      \                                PT-TLS Data Transport phase.\n                                 Recipients
      SHOULD send an Invalid\n                                 Message error code
      in a PT-TLS Error\n                                 message if a PB-TNC Batch
      is received\n                                 outside of the Data Transport
      phase.\n   8 (PT-TLS Error)              PT-TLS Error message as described in\n
      \                                Section 3.9.  This message type may be\n                                 used
      during any PT-TLS phase.\n   9-4294967294 (Unassigned)     These values are
      for future allocation\n                                 following guidelines
      defined in the\n                                 IANA Considerations section
      (see\n                                 Section 6.1).  Recipients of\n                                 unsupported
      messages in the IETF\n                                 namespace using a message
      type of 9 to\n                                 4294967294 MUST respond with
      a Type Not\n                                 Supported PT-TLS Error Code in
      a PT-TLS\n                                 Error message.\n   4294967295                    Reserved\n"
    title: 3.6.  IETF Namespace PT-TLS Message Types
  - contents:
    - "3.7.  PT-TLS Version Negotiation\n   This section describes the message format
      and semantics for the\n   PT-TLS protocol version negotiation.  This exchange
      is used by the\n   PT-TLS Initiator to trigger a version negotiation at the
      start of an\n   assessment.  The PT-TLS Initiator MUST send a Version Request
      message\n   as its first PT-TLS message and MUST NOT send any other PT-TLS\n
      \  messages on this connection until it receives a Version Response\n   message
      or an Error message.  The PT-TLS Responder MUST complete the\n   version negotiation
      (or cause an error) prior to sending or accepting\n   reception of any additional
      messages.  After the successful\n   completion of the version negotiation, both
      the Posture Transport\n   Client and Posture Transport Server MUST only send
      messages compliant\n   with the negotiated protocol version.  Subsequent assessments
      on the\n   same session MUST use the negotiated version number and therefore\n
      \  MUST NOT send additional version negotiation messages.\n"
    - contents:
      - "3.7.1.  Version Request Message\n   This message is sent by a PT-TLS Initiator
        as the first PT-TLS\n   message in a PT-TLS session.  This message discloses
        the sender's\n   supported versions of the PT-TLS protocol.  To ensure compatibility,\n
        \  this message MUST always be sent using version 1 of the PT-TLS\n   protocol.
        \ Recipients of this message MUST respond with a Version\n   Response or with
        a PT-TLS Error message (Version Not Supported or\n   Invalid Message).  The
        following diagram shows the format of the\n   Version Request message:\n                          1
        \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |    Reserved   |    Min Vers   |    Max Vers   |   Pref Vers   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      Reserved for future use.  This field MUST be set to 0 on\n
        \     transmission and ignored upon reception.\n   Min Vers\n      This field
        contains the minimum version of the PT-TLS protocol\n      supported by the
        sender.  This field MUST be set to 1 indicating\n      support for the first
        version of PT-TLS.  However, future versions\n      of this specification
        will probably remove this requirement, so\n      PT-TLS Responders MUST be
        prepared to receive other values.\n   Max Vers\n      This field contains
        the maximum version of the PT-TLS protocol\n      supported by the sender.
        \ This field MUST be set to 1 indicating\n      support for the first version
        of PT-TLS.  However, future versions\n      of this specification will probably
        remove this requirement, so\n      PT-TLS Responders MUST be prepared to receive
        other values.\n   Pref Vers\n      This field contains the sender's preferred
        version of the PT-TLS\n      protocol.  This is a hint to the recipient that
        the sender would\n      like this version selected if supported.  The value
        of this field\n      MUST fall within the range of Min Vers to Max Vers.  This
        field\n      MUST be set to 1 indicating support for the first version of\n
        \     PT-TLS.  However, future versions of this specification will\n      probably
        remove this requirement, so PT-TLS Responders MUST be\n      prepared to receive
        other values.\n"
      title: 3.7.1.  Version Request Message
    - contents:
      - "3.7.2.  Version Response Message\n   This message is sent in response to
        receiving a Version Request\n   message at the start of a new assessment session.
        \ If a recipient\n   receives a Version Request after a successful version
        negotiation has\n   occurred on the session, the recipient MUST send an Invalid
        Message\n   error code in a PT-TLS Error message and have TLS close the session.\n
        \  This message MUST be sent using the syntax, semantics, and\n   requirements
        of the protocol version specified in this message.\n                           1
        \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                 Reserved                      |    Version    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Reserved\n      Reserved for future use.  This field MUST be set to 0 on\n
        \     transmission and ignored upon reception.\n   Version\n      This field
        contains the version selected by the sender of this\n      message.  The version
        selected MUST be within the Min Vers to Max\n      Vers inclusive range sent
        in the Version Request message.  If a\n      PT-TLS Initiator receives a message
        with an invalid Version\n      selected, the PT-TLS Initiator MUST respond
        with a Version Not\n      Supported PT-TLS Error message.\n"
      title: 3.7.2.  Version Response Message
    title: 3.7.  PT-TLS Version Negotiation
  - contents:
    - "3.8.  Client Authentication Using SASL\n   This section includes a description
      of the message format and\n   semantics necessary to perform client authentication
      (authentication\n   of the NEA Client) over PT-TLS.  Client authentication could
      be\n   necessary if the NEA Server requires such an authentication and it\n
      \  was not performed during the TLS handshake.  The general model used\n   for
      performing an authentication of the client using PT-TLS messages\n   is to integrate
      the Simple Authentication and Security Layer (SASL)\n   [RFC4422] framework.
      \ SASL provides a number of standards-based\n   authentication mechanisms capable
      of authenticating the NEA Client\n   using a variety of base technologies.\n
      \  Client authentication could occur during the TLS handshake using TLS-\n   defined
      authentication techniques.  Because this client\n   authentication is optional,
      the NEA Server's policy might require the\n   client to be authenticated by
      PT-TLS before performing the\n   assessment.  Similarly, the NEA Server may
      require a PT-TLS\n   authentication even if the NEA Client was authenticated
      during the\n   TLS handshake (e.g., to allow a user authentication after a system-\n
      \  level authentication occurred during the TLS handshake).  The\n   decision
      of whether a SASL client authentication is to occur is left\n   to the NEA Server's
      policy.\n   As discussed in Section 3.1.1, it is possible that the NEA Server
      may\n   initiate the TLS session to the NEA Client, thus causing it to fill\n
      \  the role of TLS client during the TLS handshake.  Because the NEA\n   Server
      is required to possess an X.509 certificate for those times\n   when it is acting
      as the TLS server (normal case), PT-TLS requires\n   that the NEA Server MUST
      use its X.509 certificate for TLS client\n   authentication during the TLS handshake
      to authenticate itself even\n   when it is acting as the TLS client.  In this
      case, the NEA Client\n   and NEA Server will authenticate using certificates
      during the TLS\n   handshake, so the PT-TLS SASL client authentication might
      not be\n   required unless NEA Server policy required an additional\n   authentication
      of the NEA Client.  Therefore, the normal usage for\n   the SASL messages is
      when the NEA Client acted as the TLS client and\n   did not authenticate during
      the TLS handshake.\n"
    - contents:
      - "3.8.1.  SASL Client Authentication Requirements\n   Implementations compliant
        with the PT-TLS specification MUST\n   implement the PT-TLS client authentication
        messages described in this\n   section.  These PT-TLS client authentication
        messages are capable of\n   carrying a variety of SASL authentication mechanisms'
        exchanges.  In\n   order to ensure interoperability, all PT-TLS implementations\n
        \  compliant with this specification MUST at least support the PLAIN\n   SASL
        mechanism [RFC4616].  Similarly, implementations MUST provide\n   the EXTERNAL
        SASL mechanism if both parties are authenticated during\n   the TLS establishment.
        \ In order to be able to take advantage of\n   other strong, widely deployed
        authentication technologies such as\n   Kerberos and support for channel bindings,
        implementations MAY\n   include support for GS2 (the second Generic Security
        Service\n   Application Program Interface (GSS-API) bridge for SASL) [RFC5801].\n
        \  GS2 includes negotiable support for channel binding for use with SASL\n
        \  (see Section 5 of RFC 5801).\n   Implementations MUST also support the
        case where no client\n   authentication is required.\n"
      title: 3.8.1.  SASL Client Authentication Requirements
    - contents:
      - "3.8.2.  SASL in PT-TLS Overview\n   Mechanism negotiation is initiated by
        the NEA Server sending the SASL\n   Mechanisms TLV to the NEA Client to indicate
        the zero or more SASL\n   mechanisms that the NEA Server's policy is willing
        to use with the\n   NEA Client.  The NEA Client selects one SASL mechanism
        from the list\n   and sends a SASL Mechanism Selection TLV completing the
        negotiation.\n   Subsequent challenges and responses are carried within the
        SASL\n   Authentication Data TLV carrying the authentication data for the\n
        \  selected mechanism.  The authentication outcome is communicated in a\n
        \  SASL Result TLV containing a status code.  If additional\n   authentications
        are required, the NEA Server could trigger the next\n   authentication by
        sending another SASL Mechanisms TLV after sending\n   the SASL Result TLV
        for the current authentication mechanism.\n"
      title: 3.8.2.  SASL in PT-TLS Overview
    - contents:
      - "3.8.3.  SASL Authentication Flow\n   The SASL client authentication starts
        when the NEA Server enters the\n   PT-TLS Negotiation phase and its policy
        indicates that an\n   authentication of the NEA Client is necessary, such
        as if it was not\n   performed during the TLS handshake protocol.  The NEA
        Server is\n   responsible for triggering the client authentication by sending
        the\n   SASL Mechanisms TLV to the NEA Client listing the set of SASL\n   mechanisms
        the server is willing to use based upon its policy.\n   The NEA Client selects
        a SASL mechanism from the list proposed by the\n   NEA Server or sends a PT-TLS
        Invalid Message error code indicating\n   that it is unable or unwilling to
        perform any of the mechanisms that\n   were offered.  If the NEA Server receives
        a SASL Mechanism Selection\n   TLV that contains an unacceptable SASL mechanism,
        the NEA Server\n   would respond with a SASL Mechanism Error in a PT-TLS Error
        TLV.\n   In situations where the NEA Server does not require a client\n   authentication,
        the NEA Server MUST send a SASL Mechanisms TLV with\n   no mechanisms included
        (only the PT-TLS header) indicating that the\n   connection should transition
        to the PT-TLS Data Transport phase.  The\n   same mechanism is employed to
        indicate that a SASL authentication\n   already performed in this session
        is adequate to permit transition to\n   the PT-TLS Data Transport phase.  So
        the NEA Server MUST always send\n   a SASL Mechanisms TLV with no mechanisms
        as the last message in the\n   PT-TLS Negotiation phase, and the NEA Client
        MUST NOT transition to\n   the PT-TLS Data Transport phase until it receives
        such a message.\n   If the NEA Server receives a NEA assessment message before
        the\n   completion of the client authentication, the NEA Server MUST send
        an\n   Authentication Required PT-TLS Error message indicating to the NEA\n
        \  Client that an authentication exchange is required prior to entering\n
        \  the PT-TLS Data Transport phase.\n"
      title: 3.8.3.  SASL Authentication Flow
    - contents:
      - "3.8.4.  Aborting SASL Authentication\n   The NEA Server may abort the authentication
        exchange by sending the\n   SASL Result TLV with a status code of Abort.  The
        NEA Client may\n   abort the authentication exchange by sending a PT-TLS Error
        message\n   with an Error Code of SASL Mechanism Error.\n"
      title: 3.8.4.  Aborting SASL Authentication
    - contents:
      - '3.8.5.  Linkages to SASL Framework

        '
      - contents:
        - "3.8.5.1.  SASL Service Name\n   The service name for PT-TLS is \"nea-pt-tls\".\n"
        title: 3.8.5.1.  SASL Service Name
      - contents:
        - "3.8.5.2.  SASL Authorization Identity\n   The PT-TLS protocol does not
          make use of a SASL authorization\n   identity string as described in RFC
          4422.\n"
        title: 3.8.5.2.  SASL Authorization Identity
      - contents:
        - "3.8.5.3.  SASL Security Layer\n   The NEA PT-TLS protocol always runs under
          the protection of TLS.\n   SASL security layers are not used and thus MUST
          be negotiated off\n   during SASL authentication.\n"
        title: 3.8.5.3.  SASL Security Layer
      - contents:
        - "3.8.5.4.  Multiple Authentications\n   Only one SASL mechanism authentication
          may be in progress at any one\n   time.  Once a SASL mechanism completes
          (successfully or\n   unsuccessfully), the NEA Server MAY trigger an additional\n
          \  authentication by sending a SASL Mechanisms TLV.\n"
        title: 3.8.5.4.  Multiple Authentications
      title: 3.8.5.  Linkages to SASL Framework
    - contents:
      - "3.8.6.  SASL Channel Bindings\n   SASL channel bindings are used to bind
        the SASL authentication to the\n   outer TLS tunnel to ensure that the authenticating
        endpoints are the\n   same as the TLS endpoints.  For SASL mechanisms that
        support channel\n   bindings, the tls-unique value defined in RFC 5929 is
        carried by the\n   SASL mechanism.  For most mechanisms, this means including
        the\n   tls-unique value with the appropriate prefix defined in RFC 5929 in\n
        \  the application data portion of the SASL Mechanism channel-binding\n   data.
        \ If the validation of the channel binding fails, then the\n   connection
        MUST be aborted.\n"
      title: 3.8.6.  SASL Channel Bindings
    - contents:
      - "3.8.7.  SASL Mechanisms\n   This TLV is sent by the NEA Server to indicate
        the list of SASL\n   mechanisms that it is willing and able to use to authenticate
        the NEA\n   Client.  Each mechanism name consists of a length followed by
        a name.\n   The total length of the list is determined by the TLV Length field.\n
        \                         1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    | Rsvd| Mech Len|            Mechanism Name (1-20 bytes)        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    | Rsvd| Mech Len|            Mechanism Name (1-20 bytes)        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      . . . . . . . . . . .                    |\n   Rsvd
        (Reserved)\n      Reserved for future use.  This field MUST be set to 0 on\n
        \     transmission and ignored upon reception.\n   Mech Len (Mechanism Name
        Length)\n      The length of the Mechanism Name field in octets.\n   Mechanism
        Name\n      SASL mechanism name adhering to the rules defined in RFC 4422
        with\n      no padding.\n"
      title: 3.8.7.  SASL Mechanisms
    - contents:
      - "3.8.8.  SASL Mechanism Selection\n   This TLV is sent by the NEA Client in
        order to select a SASL\n   mechanism for use on this session.\n                          1
        \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    | Rsvd| Mech Len|            Mechanism Name (1-20 bytes)        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |              Optional Initial Mechanism Response              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Rsvd (Reserved)\n      Reserved for future use.  This field MUST be set
        to 0 on\n      transmission and ignored upon reception.\n   Mech Len (Mechanism
        Name Length)\n      The length of the Mechanism Name field in octets.\n   Mechanism
        Name\n      SASL mechanism name adhering to the rules defined in RFC 4422.\n
        \  Optional Initial Mechanism Response\n      Initial set of authentication
        information required from the NEA\n      Client to kick-start the authentication.
        \ This data is optional\n      and if not provided would be solicited by the
        NEA Server in the\n      first SASL Authentication Data TLV request.\n"
      title: 3.8.8.  SASL Mechanism Selection
    - contents:
      - "3.8.9.  SASL Authentication Data\n   This TLV carries an opaque (to PT-TLS)
        blob of octets being exchanged\n   between the NEA Client and the NEA Server.
        \ This TLV facilitates\n   their communications without interpreting any of
        the bytes.  The SASL\n   Authentication Data TLV MUST NOT be sent until a
        SASL mechanism has\n   been established for a session.  The SASL Authentication
        Data TLV\n   associated with the current authentication mechanism MUST NOT
        be sent\n   after a SASL Result is sent with a Result Code of Success.\n   Additional
        SASL Authentication Data TLVs would be sent if the PT-TLS\n   Initiator and
        Responder desire a subsequent SASL authentication to\n   occur but only after
        another SASL mechanism selection exchange\n   occurs.\n                          1
        \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    ~                SASL Mechanism Data (Variable Length)          ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  SASL Mechanism Data\n      Opaque, variable-length set of bytes exchanged
        between the PT-TLS\n      Initiator's SASL mechanism and its peer PT-TLS Responder's
        SASL\n      mechanism.  These bytes MUST NOT be interpreted by the PT-TLS\n
        \     layer.\n"
      title: 3.8.9.  SASL Authentication Data
    - contents:
      - "3.8.10.  SASL Result\n   This TLV is sent by the NEA Server at the conclusion
        of the SASL\n   exchange to indicate the authentication result.  Upon reception
        of a\n   SASL Result TLV indicating an Abort, the NEA Client MUST terminate\n
        \  the current authentication conversation.  The recipient may retry the\n
        \  authentication in the event of an authentication failure.  Similarly,\n
        \  the NEA Server may request that additional SASL authentication(s) be\n
        \  performed after the completion of a SASL mechanism by sending another\n
        \  SASL Mechanisms TLV including any mechanisms dictated by its policy.\n
        \                         1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |           Result Code         |    Optional Result Data       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      . . . . . . . . . . .                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Result Code\n      This field contains the result of the SASL authentication\n
        \     exchange.\n           Value (Name)                         Definition\n
        \     ---------------------  -------------------------------------------\n
        \     0 (Success)            SASL authentication was successful, and\n                             identity
        was confirmed.\n      1 (Failure)            SASL authentication failed.  This
        might be\n                             caused by the client providing an invalid\n
        \                            user identity and/or credential pair.  Note\n
        \                            that this is not the same as a mechanism's\n
        \                            failure to process the authentication as\n                             reported
        by the Mechanism Failure code.\n      2 (Abort)              SASL authentication
        exchange was aborted by\n                             the sender.\n      3
        (Mechanism Failure)  SASL \"mechanism failure\" during the\n                             processing
        of the client's authentication\n                             (e.g., not related
        to the user's input).\n                             For example, this could
        occur if the\n                             mechanism is unable to allocate
        memory\n                             (e.g., malloc) that is needed to process
        a\n                             received SASL mechanism message.\n   Optional
        Result Data\n      This field contains a variable-length set of additional
        data for a\n      successful result.  This field MUST be zero length unless
        the NEA\n      Server is returning a Result Code of Success and has more data
        to\n      return.  For more information on the additional data with success\n
        \     in SASL, see RFC 4422.\n"
      title: 3.8.10.  SASL Result
    title: 3.8.  Client Authentication Using SASL
  - contents:
    - "3.9.  Error Message\n   This section describes the format and contents of the
      PT-TLS Error\n   message sent by the NEA Client or NEA Server when it detects
      a\n   PT-TLS-level protocol error.  Each error message contains an error\n   code
      indicating the error that occurred, followed by a copy of the\n   message that
      caused the error.\n   When a PT-TLS error is received, the recipient MUST NOT
      respond with\n   a PT-TLS error, because this could result in an infinite loop
      of\n   error messages being sent.  Instead, the recipient MAY log the error,\n
      \  modify its behavior to avoid future errors, ignore the error,\n   terminate
      the assessment, or take other action as appropriate (as\n   long as it is consistent
      with the requirements of this\n   specification).\n   The Message Value portion
      of a PT-TLS Error message contains the\n   following information:\n                          1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |    Reserved   |               Error Code Vendor ID            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                            Error Code                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |              Copy of Original Message (Variable Length)       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                           . . . . . . .                       |\n   Reserved\n
      \     Reserved for future use.  This field MUST be set to 0 on\n      transmission
      and ignored upon reception.\n   Error Code Vendor ID\n      This field contains
      the IANA-assigned SMI Private Enterprise\n      Number for the vendor whose
      Error Code namespace is being used in\n      the message.  For IETF namespace
      Error Code values, this field\n      MUST be set to zero (0).  For other vendor-defined
      Error Code\n      namespaces, this field MUST be set to the SMI Private Enterprise\n
      \     Number of the vendor.\n   Error Code\n      This field contains the error
      code.  This error code exists within\n      the scope of Error Code Vendor ID
      in this message.  Posture\n      Transport Clients and Posture Transport Servers
      MUST NOT require\n      support for particular vendor-specific PT-TLS Error
      Codes in order\n      to interoperate with other PT-TLS-compliant implementations\n
      \     (although implementations MAY permit administrators to configure\n      them
      to require support for specific PT-TLS Error Codes).\n      When the Error Code
      Vendor ID is set to the IETF Private\n      Enterprise Number, the following
      table lists the initial supported\n      IETF-defined numeric error codes:\n
      \          Value (Name)                         Definition\n      -------------------------
      \ ---------------------------------------\n      0 (Reserved)               Reserved
      value indicates that the\n                                 PT-TLS Error message
      SHOULD be ignored\n                                 by all recipients.  This
      MAY be used\n                                 for debugging purposes to allow
      a\n                                 sender to see a copy of the message\n                                 that
      was received.\n      1 (Malformed Message)      PT-TLS message unrecognized
      or\n                                 unsupported.  This error code SHOULD be\n
      \                                sent when the basic message content\n                                 sanity
      test fails.  The sender of this\n                                 error code
      MUST consider it a fatal\n                                 error and abort the
      assessment.\n      2 (Version Not Supported)  This error SHOULD be sent when
      a PT-TLS\n                                 Responder receives a PT-TLS Version\n
      \                                Request message containing a range of\n                                 version
      numbers that doesn't include\n                                 any version numbers
      that the recipient\n                                 is willing and able to
      support on the\n                                 session.  All PT-TLS messages
      carrying\n                                 the Version Not Supported error code\n
      \                                MUST use a version number of 1.  All\n                                 parties
      that receive or send PT-TLS\n                                 messages MUST
      be able to properly\n                                 process an error message
      that meets\n                                 this description, even if they
      cannot\n                                 process any other aspect of PT-TLS\n
      \                                version 1.  The sender and receiver of\n                                 this
      error code MUST consider it a\n                                 fatal error
      and close the TLS session\n                                 after sending or
      receiving this PT-TLS\n                                 message.\n      3 (Type
      Not Supported)     PT-TLS Message Type unknown or not\n                                 supported.
      \ When a recipient receives a\n                                 PT-TLS Message
      Type that it does not\n                                 support, it MUST send
      back this error,\n                                 ignore the message, and proceed.
      \ For\n                                 example, this could occur if the sender\n
      \                                used a Vendor ID for the Message Type\n                                 that
      is not supported by the recipient.\n                                 This error
      message does not indicate\n                                 that a fatal error
      has occurred, so the\n                                 assessment is allowed
      to continue.\n      4 (Invalid Message)        PT-TLS message received was invalid\n
      \                                based on the protocol state.  For\n                                 example,
      this error would be sent if a\n                                 recipient receives
      a message associated\n                                 with the PT-TLS Negotiation
      Phase (such\n                                 as Version messages) after the
      protocol\n                                 has reached the PT-TLS Data Transport\n
      \                                Phase.  The sender and receiver of this\n                                 error
      code MUST consider it a fatal\n                                 error and close
      the TLS session after\n                                 sending or receiving
      this PT-TLS\n                                 message.\n      5 (SASL Mechanism
      Error)   A fatal error occurred while trying to\n                                 perform
      the client authentication.  For\n                                 example, the
      NEA Client is unable to\n                                 support any of the
      offered SASL\n                                 mechanisms.  The sender and receiver
      of\n                                 this error code MUST consider it a\n                                 fatal
      error and close the TLS session\n                                 after sending
      or receiving this PT-TLS\n                                 message.\n      6
      (Invalid Parameter)      The PT-TLS Error message sender has\n                                 received
      a message with an invalid or\n                                 unsupported value
      in the PT-TLS header.\n                                 This could occur if
      the NEA Client\n                                 receives a PT-TLS message from
      the NEA\n                                 Server with a Message Length of zero\n
      \                                (see Section 3.5 for details).  The\n                                 sender
      and receiver of this error code\n                                 MUST consider
      it a fatal error and\n                                 close the TLS session
      after sending or\n                                 receiving this PT-TLS message.\n
      \  Copy of Original Message\n      This variable-length value MUST contain a
      copy (up to 1024 bytes)\n      of the original PT-TLS message that caused the
      error.  If the\n      original message is longer than 1024 bytes, only the initial
      1024\n      bytes will be included in this field.  This field is included so\n
      \     the error recipient can determine which message sent caused the\n      error.
      \ In particular, the recipient can use the Message\n      Identifier field from
      the Copy of Original Message data to\n      determine which message caused the
      error.\n"
    title: 3.9.  Error Message
  title: 3.  PT-TLS Protocol
- contents:
  - "4.  Security Considerations\n   This section discusses the major threats potentially
    faced by each\n   binding of the PT protocol and countermeasures provided by the
    PT-TLS\n   protocol.\n"
  - contents:
    - "4.1.  Trust Relationships\n   In order to understand where security countermeasures
      are necessary,\n   this section starts with a discussion of where the NEA architecture\n
      \  envisions some trust relationships between the processing elements of\n   the
      PT-TLS protocol.  Implementations or deployments where these\n   trust relationships
      are not present would need to provide additional\n   countermeasures to ensure
      the proper operation and security of PT-TLS\n   (which relies upon these relationships
      to be trustworthy).  The\n   following subsections discuss the trust properties
      associated with\n   each portion of the NEA reference model directly involved
      with the\n   processing of the PT-TLS protocol.\n"
    - contents:
      - "4.1.1.  Posture Transport Client\n   The Posture Transport Client is trusted
        by the Posture Broker\n   Client to:\n   o  Not observe, fabricate, or alter
        the contents of the PB-TNC\n      batches received from the network\n   o
        \ Not observe, fabricate, or alter the PB-TNC batches passed down\n      from
        the Posture Broker Client for transmission on the network\n   o  Transmit
        on the network any PB-TNC batches passed down from the\n      Posture Broker
        Client\n   o  Deliver properly security protected messages received from the\n
        \     network that are destined for the Posture Broker Client\n   o  Provide
        configured security protections (e.g., authentication,\n      integrity, and
        confidentiality) for the Posture Broker Client's\n      PB-TNC batches sent
        on the network\n   o  Expose the authenticated identity of the Posture Transport
        Server\n      only to the PB-TNC layer within the NEA Client\n   o  Verify
        the security protections placed upon messages received from\n      the network
        to ensure that the messages are authentic and\n      protected from attacks
        on the network\n   o  Provide a secure, reliable, \"in-order delivery\", full-duplex\n
        \     transport for the Posture Broker Client's messages\n   The Posture Transport
        Client is trusted by the Posture Transport\n   Server to:\n   o  Not send
        malicious traffic intending to harm (e.g., denial of\n      service) the Posture
        Transport Server\n   o  Not send malformed messages (e.g., messages lacking
        a PT-TLS\n      header)\n   o  Not send invalid or incorrect responses to
        messages (e.g., errors\n      when no error is warranted)\n   o  Not ignore
        or drop messages when such an action would cause issues\n      for the protocol
        processing (e.g., dropping PT-TLS SASL\n      Authentication Data messages)\n
        \  o  Verify the security protections placed upon messages received from\n
        \     the network to ensure that the messages are authentic and\n      protected
        from attacks on the network\n"
      title: 4.1.1.  Posture Transport Client
    - contents:
      - "4.1.2.  Posture Transport Server\n   The Posture Transport Server is trusted
        by the Posture Broker\n   Server to:\n   o  Not observe, fabricate, or alter
        the contents of the PB-TNC\n      batches received from the network\n   o
        \ Not observe, fabricate, or alter the PB-TNC batches passed down\n      from
        the Posture Broker Server for transmission on the network\n   o  Transmit
        on the network any PB-TNC batches passed down from the\n      Posture Broker
        Server\n   o  Deliver properly security protected messages received from the\n
        \     network that are destined for the Posture Broker Server\n   o  Provide
        configured security protections (e.g., authentication,\n      integrity, and
        confidentiality) for the Posture Broker Server's\n      messages sent on the
        network\n   o  Expose the authenticated identity of the Posture Transport
        Client\n      only to the PB-TNC layer within the NEA Server\n   o  Verify
        the security protections placed upon messages received from\n      the network
        to ensure that the messages are authentic and\n      protected from attacks
        on the network\n   o  Provide a secure, reliable, \"in-order delivery\", full-duplex\n
        \     transport for the Posture Broker Server's messages\n   The Posture Transport
        Server is trusted by the Posture Transport\n   Client to:\n   o  Not send
        malicious traffic intending to harm (e.g., denial of\n      service) the Posture
        Transport Client\n   o  Not send malformed messages (e.g., messages lacking
        a PT-TLS\n      header)\n   o  Not send invalid or incorrect responses to
        messages (e.g., errors\n      when no error is warranted)\n   o  Not ignore
        or drop messages when such an action would cause issues\n      for the protocol
        processing (e.g., dropping PT-TLS SASL Result\n      messages)\n   o  Verify
        the security protections placed upon messages received from\n      the network
        to ensure that the messages are authentic and\n      protected from attacks
        on the network\n"
      title: 4.1.2.  Posture Transport Server
    title: 4.1.  Trust Relationships
  - contents:
    - "4.2.  Security Threats and Countermeasures\n   Beyond the trust relationships
      assumed in Section 4.1, the PT-TLS\n   protocol faces a number of potential
      security attacks that could\n   require security countermeasures.\n   Generally,
      the PT-TLS protocol is responsible for offering strong\n   security protections
      for all of the NEA protocols, so any threats to\n   its ability to protect NEA
      protocol messages could be very damaging\n   to deployments.  Once the message
      is delivered to the Posture Broker\n   Client or Posture Broker Server, the
      posture brokers are trusted to\n   properly and safely process the messages.\n"
    - contents:
      - "4.2.1.  Message Theft\n   When PT-TLS messages are sent over unprotected
        network links or\n   spanning local software stacks that are not trusted,
        the contents of\n   the messages may be subject to information theft by an
        intermediary\n   party.  This theft could result in information being recorded
        for\n   future use or analysis by the adversary.  Messages observed by\n   eavesdroppers
        could contain information that exposes potential\n   weaknesses in the security
        of the endpoint, or system fingerprinting\n   information; this information
        would make it easier for the attacker\n   to employ attacks more likely to
        be successful against the endpoint.\n   The eavesdropper might also learn
        information about the endpoint or\n   network policies that either singularly
        or collectively is considered\n   sensitive information.  For example, if
        PT-TLS does not provide\n   confidentiality protection, an adversary could
        observe the PA-TNC\n   attributes included in the PT-TLS message and determine
        that the\n   endpoint is lacking patches or that particular sub-networks have
        more\n   lenient policies.\n   In order to protect against NEA assessment
        message theft, the PT-TLS\n   protocol provides strong cryptographic authentication,
        integrity, and\n   confidentiality protection.  Deployers are strongly encouraged
        to\n   employ \"best practice of the day\" TLS ciphers to ensure that the\n
        \  information remains safe despite advances in technology and\n   discovered
        cipher weaknesses.  The use of bidirectional\n   authentication of the assessment
        transport session ensures that only\n   properly authenticated and authorized
        parties may be involved in an\n   assessment dialog.  The PT-TLS protocol
        also provides strong\n   cryptography for all of the PB-TNC and PA-TNC protocol
        messages\n   traveling over the network, allowing the message contents to
        be\n   hidden from potential theft by the adversary even if the attacker is\n
        \  able to observe the encrypted PT-TLS session.\n"
      title: 4.2.1.  Message Theft
    - contents:
      - "4.2.2.  Message Fabrication\n   Attackers on the network or present within
        the NEA system could\n   introduce fabricated PT-TLS messages intending to
        trick or create a\n   denial of service against aspects of an assessment.
        \ For example, an\n   adversary could attempt to insert into the message exchange
        fake\n   PT-TLS Error Codes in order to disrupt communications.\n   The PT-TLS
        protocol provides strong security protections for the\n   complete message
        exchange over the network.  These security\n   protections prevent an intermediary
        from being able to insert fake\n   messages into the assessment.  In particular,
        TLS's use of hashing\n   algorithms provides strong integrity protections
        that allow for\n   detection of any changes in the content of the message
        stream.\n   Additionally, adversaries are unable to observe the PT-TLS protocol\n
        \  exchanges because they are encrypted by the TLS ciphers and so would\n
        \  have difficulty determining where to insert the falsified message,\n   since
        the attacker is unable to determine where the message\n   boundaries exist.
        \ Even if a successful message insertion did occur,\n   the recipient would
        be able to detect it due to failure of the TLS\n   cipher suite's integrity
        check.\n"
      title: 4.2.2.  Message Fabrication
    - contents:
      - "4.2.3.  Message Modification\n   This attack could allow an active attacker
        capable of intercepting a\n   message to modify a PT-TLS message or transported
        PA-TNC attribute to\n   a desired value to make it easier to compromise an
        endpoint.  Without\n   the ability for message recipients to detect whether
        a received\n   message contains the same content as what was originally sent,
        active\n   attackers can stealthily modify the attribute exchange.\n   The
        PT-TLS protocol leverages the TLS protocol to provide strong\n   authentication
        and integrity protections as a countermeasure to this\n   threat.  The bidirectional
        authentication prevents the attacker from\n   acting as an active man-in-the-middle
        to the protocol that could be\n   used to modify the message exchange.  The
        strong integrity protection\n   (e.g., hashing) offered by TLS allows PT-TLS
        message recipients to\n   detect message alterations by other types of network-based\n
        \  adversaries.\n"
      title: 4.2.3.  Message Modification
    - contents:
      - "4.2.4.  Denial of Service\n   A variety of types of denial-of-service attacks
        are possible against\n   the PT-TLS protocol if the message exchanges are
        left unprotected\n   while traveling over the network.  The Posture Transport
        Client and\n   Posture Transport Server are trusted not to participate in
        the denial\n   of service of the assessment session, leaving the threats to
        come\n   from the network.\n   The PT-TLS protocol provides bidirectional
        authentication\n   capabilities in order to prevent a man-in-the-middle on
        the network\n   from becoming an undetected active proxy of PT-TLS messages.
        \ Because\n   the PT-TLS protocol runs after the TLS handshake and thus cipher\n
        \  establishment/use, all of the PT-TLS messages are protected from\n   undetected
        modification that could create a denial-of-service\n   situation.  However,
        it is possible for an adversary to alter the\n   message flows, causing each
        message to be rejected by the recipient\n   because it fails the integrity
        checking.\n   The PT-TLS protocol operates as an application protocol on top
        of TLS\n   and thus TCP/IP protocols, so is subject to denial-of-service attacks\n
        \  against the TLS, TCP, and IP protocols.\n"
      title: 4.2.4.  Denial of Service
    - contents:
      - "4.2.5.  NEA Asokan Attacks\n   As described in Section 3.3 and in [RFC6813],
        a sophisticated MITM\n   attack can be mounted against NEA systems.  The attacker
        forwards\n   PA-TNC messages from a healthy machine through an unhealthy one
        so\n   that the unhealthy machine can gain network access.  Section 3.3 and\n
        \  [RFC6813] provide a detailed description of this attack and of the\n   countermeasures
        that can be employed against it.\n   Because lying endpoint attacks are much
        easier than Asokan attacks\n   and the only known effective countermeasure
        against lying endpoint\n   attacks is the use of an External Measurement Agent
        (EMA),\n   countermeasures against an Asokan attack are not necessary unless
        an\n   EMA is in use.  However, PT-TLS implementers may not know whether an\n
        \  EMA will be used with their implementation.  Therefore, PT-TLS\n   implementers
        SHOULD support the Asokan attack countermeasures\n   described in Section
        3.3 by providing the value of the tls-unique\n   channel binding to higher
        layers in the NEA reference model: Posture\n   Broker Clients, Posture Broker
        Servers, Posture Collectors, and\n   Posture Validators.\n   The Asokan attack
        can also apply to authentication mechanisms carried\n   within TLS.  SASL
        mechanisms providing channel bindings use the\n   tls-unique channel-binding
        data as defined in Section 3.3 to protect\n   against the attack.\n"
      title: 4.2.5.  NEA Asokan Attacks
    - contents:
      - "4.2.6.  Trust Anchors\n   The TLS protocol bases its trust decision about
        the signer of the\n   certificates received during the TLS authentication
        on using a set of\n   trust anchor certificates.  It is essential that these
        trust anchor\n   certificates are integrity protected from unauthorized modification.\n
        \  Many common software components (e.g., browsers, operating systems,\n   security
        protocols) include a set of trust anchor certificates that\n   are relevant
        to their operation.  The PT-TLS SHOULD use a PT-TLS-\n   specific set of trust
        anchor certificates in order to limit what\n   Certificate Authorities are
        authorized to issue certificates for use\n   with NEA.\n"
      title: 4.2.6.  Trust Anchors
    title: 4.2.  Security Threats and Countermeasures
  title: 4.  Security Considerations
- contents:
  - "5.  Privacy Considerations\n   The role of PT-TLS is to act as a secure transport
    for PB-TNC and\n   other higher-layer protocols.  As such, PT-TLS does not directly\n
    \  utilize personally identifiable information (PII) except when client\n   authentication
    is enabled.  When client authentication is being used,\n   the NEA Client will
    be asked to use SASL, which may disclose a local\n   identifier (e.g., username)
    associated with the endpoint and an\n   authenticator (e.g., password) to authenticate
    that identity.\n   Because the identity and authenticator are potentially privacy-\n
    \  sensitive information, the NEA Client MUST offer a mechanism to\n   restrict
    which NEA Servers will be sent this information.  Similarly,\n   the NEA Client
    SHOULD provide an indication to the person being\n   identified that a request
    for their identity has been made in case\n   they choose to opt out of the authentication
    to remain anonymous\n   unless no user interface is available.  PT-TLS provides
    cryptographic\n   peer authentication, message integrity, and data confidentiality\n
    \  protections to higher-layer NEA protocols that may exchange data\n   potentially
    including PII.  These security services can be used to\n   protect any PII involved
    in an assessment from passive and active\n   attackers on the network.  Endpoints
    sending potentially privacy-\n   sensitive information SHOULD ensure that the
    PT-TLS security\n   protections (TLS cipher suites) negotiated for an assessment
    of the\n   endpoint are adequate to avoid interception and off-line attacks of\n
    \  any long-term privacy-sensitive information unless other network\n   protections
    are already present.\n"
  title: 5.  Privacy Considerations
- contents:
  - "6.  IANA Considerations\n   Per this specification, two new IANA registries have
    been created and\n   a TCP port number has been assigned.  IANA has permanently
    reserved\n   the early allocated TCP port number 271 for use with the PT-TLS\n
    \  protocol.\n   This section defines the contents of two new IANA registries,
    PT-TLS\n   Message Types and PT-TLS Error Codes, and explains how these\n   registries
    work.\n   Each of the registries defined in this document support IETF-defined\n
    \  values and vendor-defined values.  To explain this phenomenon, we\n   will
    use the PT-TLS Message Type as an example, but the other\n   registry works the
    same way.\n   Whenever a PT-TLS Message Type appears on a network, it is always\n
    \  accompanied by an SMI Private Enterprise Number (PEN), also known as\n   a
    vendor ID.  If this vendor ID is zero, the accompanying PT-TLS\n   Message Type
    is an IETF namespace value listed in the IANA registry\n   for PT-TLS Message
    Types, and its meaning is defined in the\n   specification listed for that PT-TLS
    Message Type in that registry.\n   If the vendor ID is not zero, the meaning of
    the PT-TLS Message Type\n   is defined by the vendor identified by the vendor
    ID (as listed in\n   the IANA registry for SMI PENs).  The identified vendor is
    encouraged\n   but not required to register with IANA some or all of the PT-TLS\n
    \  Message Types used with their vendor ID and publish a specification\n   for
    each of these values.\n"
  - contents:
    - "6.1.  Designated Expert Guidelines\n   For each of the IANA registries defined
      by this specification, new\n   values are added to the registry by following
      the IANA Specification\n   Required policy [RFC5226].\n   This section provides
      guidance to designated experts so that they may\n   make decisions using a philosophy
      appropriate for these registries.\n   The registries defined in this document
      have plenty of values.  In\n   most cases, the IETF has approximately 2^32 values
      available for it\n   to define, and each vendor has the same number of values
      for its use.\n   Because there are so many values available, designated experts
      should\n   not be terribly concerned about exhausting the set of values.\n   Instead,
      designated experts should focus on the following\n   requirements.  All values
      in these IANA registries are required to be\n   documented in a specification
      that is permanently and publicly\n   available.  IETF namespace values must
      also be useful not harmful to\n   the Internet, and defined in a manner that
      is clear and likely to\n   ensure interoperability.\n   Designated experts should
      encourage vendors to avoid defining similar\n   but incompatible values and
      instead agree on a single IETF-reviewed\n   approach and value.  However, it
      is beneficial to document existing\n   practice.\n   There are several ways
      to ensure that a specification is permanently\n   and publicly available.  It
      may be published as an RFC.\n   Alternatively, it may be published in another
      manner that makes it\n   freely available to anyone.  However, in this latter
      case, the vendor\n   will need to supply a copy to the IANA and authorize the
      IANA to\n   archive this copy and make it freely available to all if at some\n
      \  point the document becomes no longer freely available to all through\n   other
      channels.\n   The following two sections provide guidance to the IANA in creating\n
      \  and managing the new IANA registries defined by this specification.\n"
    title: 6.1.  Designated Expert Guidelines
  - contents:
    - "6.2.  Registry for PT-TLS Message Types\n   The name for this registry is \"PT-TLS
      Message Types\".  Each entry in\n   this registry should include a human-readable
      name, an SMI Private\n   Enterprise Number, a decimal integer value between
      0 and 4294967294,\n   and a reference to the specification where the contents
      of this\n   message type are defined.  This specification must define the meaning\n
      \  of the PT-TLS Message Type and the format and semantics of the PT-TLS\n   Message
      Value field that include the designated Private Enterprise\n   Number in the
      PT-TLS Message Type Vendor ID field and the designated\n   numeric value in
      the PT-TLS Message Type field.\n   The following entries for this registry are
      defined in this document.\n   Additional entries to this registry are added
      by following the IANA\n   Specification Required policy, consistent with the
      guidelines in\n   Section 6.1.\n   PEN   Value                 Name             Reference\n
      \  ---  --------      ------------------------  ---------\n    0      0          Experimental
      \             RFC 6876\n    0      1          Version Request           RFC
      6876\n    0      2          Version Response          RFC 6876\n    0      3
      \         SASL Mechanisms           RFC 6876\n    0      4          SASL Mechanism
      Selection  RFC 6876\n    0      5          SASL Authentication Data  RFC 6876\n
      \   0      6          SASL Result               RFC 6876\n    0      7          PB-TNC
      Batch              RFC 6876\n    0      8          PT-TLS Error              RFC
      6876\n    0   9-4294967294  Unassigned\n    0   4294967295    Reserved                  RFC
      6876\n   The PEN 0 (IETF) PT-TLS Message Type values between 9 and 4294967294\n
      \  inclusive are allocated for future assignment by the IANA.\n"
    title: 6.2.  Registry for PT-TLS Message Types
  - contents:
    - "6.3.  Registry for PT-TLS Error Codes\n   The name for this registry is \"PT-TLS
      Error Codes\".  Each entry in\n   this registry should include a human-readable
      name, an SMI Private\n   Enterprise Number, a decimal integer value between
      0 and 4294967295,\n   and a reference to the specification where this error
      code is\n   defined.  This specification must define the meaning of this error\n
      \  code, a PT-TLS Message Type of PT-TLS Error, the designated Private\n   Enterprise
      Number in the PT-TLS Error Code Vendor ID field, and the\n   designated numeric
      value in the PT-TLS Error Code field.\n   The following entries for this registry
      are defined in this document.\n   Additional entries to this registry are added
      following the IANA\n   Specification Required policy, consistent with the guidelines
      in\n   Section 6.1.\n     PEN     Value             Name            Reference\n
      \    ---  ------------  ---------------------  ---------\n      0      0          Reserved
      \              RFC 6876\n      0      1          Malformed Message      RFC
      6876\n      0      2          Version Not Supported  RFC 6876\n      0      3
      \         Type Not Supported     RFC 6876\n      0      4          Invalid Message
      \       RFC 6876\n      0      5          SASL Mechanism Error   RFC 6876\n
      \     0      6          Invalid Parameter      RFC 6876\n      0   7-4294967295
      \ Unassigned\n   The PEN 0 (IETF) PT-TLS Error Codes between 7 and 4294967295\n
      \  inclusive are allocated for future assignment by the IANA.\n"
    title: 6.3.  Registry for PT-TLS Error Codes
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   Thanks to the Trusted Computing Group for contributing
    the initial\n   text upon which this document was based [IFT-TLS].\n   The authors
    of this document would also like to acknowledge the\n   following people who have
    contributed to or provided substantial\n   input on the preparation of this document
    or predecessors to it: Syam\n   Appala, Stuart Bailey, Lauren Giroux, Steve Hanna,
    Josh Howlett,\n   Scott Kelly, Carolin Latze, Sung Lee, Lisa Lorenzin, Alexey
    Melnikov,\n   Ravi Sahita, Subbu Srinivasan, Susan Thomson, and Mark Townsend.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC4422]   Melnikov, A., Ed., and K. Zeilenga, Ed., \"Simple\n
      \              Authentication and Security Layer (SASL)\", RFC 4422,\n               June
      2006.\n   [RFC4616]   Zeilenga, K., Ed., \"The PLAIN Simple Authentication and\n
      \              Security Layer (SASL) Mechanism\", RFC 4616, August 2006.\n   [RFC5226]
      \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n               IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n               May 2008.\n
      \  [RFC5246]   Dierks, T. and E. Rescorla, \"The Transport Layer Security\n
      \              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5280]
      \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n               Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n               Infrastructure
      Certificate and Certificate Revocation\n               List (CRL) Profile\",
      RFC 5280, May 2008.\n   [RFC5746]   Rescorla, E., Ray, M., Dispensa, S., and
      N. Oskov,\n               \"Transport Layer Security (TLS) Renegotiation Indication\n
      \              Extension\", RFC 5746, February 2010.\n   [RFC5792]   Sangster,
      P. and K. Narayan, \"PA-TNC: A Posture Attribute\n               (PA) Protocol
      Compatible with Trusted Network Connect\n               (TNC)\", RFC 5792, March
      2010.\n   [RFC5793]   Sahita, R., Hanna, S., Hurst, R., and K. Narayan,\n               \"PB-TNC:
      A Posture Broker (PB) Protocol Compatible with\n               Trusted Network
      Connect (TNC)\", RFC 5793, March 2010.\n   [RFC5929]   Altman, J., Williams,
      N., and L. Zhu, \"Channel Bindings\n               for TLS\", RFC 5929, July
      2010.\n   [RFC6125]   Saint-Andre, P. and J. Hodges, \"Representation and\n
      \              Verification of Domain-Based Application Service Identity\n               within
      Internet Public Key Infrastructure Using X.509\n               (PKIX) Certificates
      in the Context of Transport Layer\n               Security (TLS)\", RFC 6125,
      March 2011.\n   [RFC6520]   Seggelmann, R., Tuexen, M., and M. Williams, \"Transport\n
      \              Layer Security (TLS) and Datagram Transport Layer\n               Security
      (DTLS) Heartbeat Extension\", RFC 6520,\n               February 2012.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [IFT-TLS]   Trusted Computing Group, \"TNC
      IF-T: Binding to TLS\",\n               <http://www.trustedcomputinggroup.org/>,
      May 2009.\n   [PEN]       IANA Private Enterprise Numbers (PEN) registry,\n
      \              <http://www.iana.org/assignments/enterprise-numbers>.\n   [PT-EAP]
      \   Cam-Winget, N. and P. Sangster, \"PT-EAP: Posture\n               Transport
      (PT) Protocol For EAP Tunnel Methods\", Work in\n               Progress, January
      2013.\n   [RFC2246]   Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n
      \              RFC 2246, January 1999.\n   [RFC4346]   Dierks, T. and E. Rescorla,
      \"The Transport Layer Security\n               (TLS) Protocol Version 1.1\",
      RFC 4346, April 2006.\n   [RFC5209]   Sangster, P., Khosravi, H., Mani, M.,
      Narayan, K., and J.\n               Tardo, \"Network Endpoint Assessment (NEA):
      Overview and\n               Requirements\", RFC 5209, June 2008.\n   [RFC5801]
      \  Josefsson, S. and N. Williams, \"Using Generic Security\n               Service
      Application Program Interface (GSS-API)\n               Mechanisms in Simple
      Authentication and Security Layer\n               (SASL): The GS2 Mechanism
      Family\", RFC 5801, July 2010.\n   [RFC6813]   Salowey, J. and S. Hanna, \"The
      Network Endpoint\n               Assessment (NEA) Asokan Attack Analysis\",
      RFC 6813,\n               December 2012.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Paul Sangster\n   Symantec Corporation\n   6825 Citrine
    Dr.\n   Carlsbad, CA  92009\n   EMail: paul_sangster@symantec.com\n   Nancy Cam-Winget\n
    \  Cisco Systems\n   80 West Tasman Drive\n   San Jose, CA  95134\n   US\n   EMail:
    ncamwing@cisco.com\n   Joseph Salowey\n   Cisco Systems\n   2901 Third Avenue\n
    \  Seattle, WA  98121\n   US\n   EMail: jsalowey@cisco.com\n"
  title: Authors' Addresses
