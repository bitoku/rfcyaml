- title: __initial_text__
  contents:
  - '                 The PPP DES Encryption Protocol (DESE)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  The PPP Encryption Control Protocol (ECP) [2] provides a method to\n   negotiate\
    \ and utilize encryption protocols over PPP encapsulated\n   links.\n   This document\
    \ provides specific details for the use of the DES\n   standard [5, 6] for encrypting\
    \ PPP encapsulated packets.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors extend hearty thanks to Fred Baker of Cisco\
    \ for helpful\n   improvements to the clarity of the document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ................................................\
    \    2\n   1.1. Motivation ................................................  \
    \  2\n   1.2. Conventions ...............................................    2\n\
    \   2. General Overview ............................................    2\n  \
    \ 3. Structure of This Specification .............................    3\n   4.\
    \ DESE Configuration Option for ECP ...........................    4\n   5. Packet\
    \ Format for DESE ......................................    5\n   6. Encryption\
    \ ..................................................    6\n   6.1. Padding Considerations\
    \ ....................................    6\n   6.2. Generation of the Ciphertext\
    \ ..............................    7\n   6.3. Retrieval of the Plaintext ................................\
    \    8\n   6.4. Recovery after Packet Loss ................................  \
    \  8\n   7. MRU Considerations ..........................................    8\n\
    \   8. Security Considerations .....................................    9\n  \
    \ 9. References ..................................................    9\n   10.\
    \ Authors' Addresses .........................................   10\n   11. Expiration\
    \ Date of this Draft ..............................   10\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   The purpose of this memo is two-fold: to show how one specifies\
    \ the\n   necessary details of a \"data\" or \"bearer\" protocol given the context\n\
    \   of the generic PPP Encryption Control Protocol, and also to provide\n   at\
    \ least one commonly-understood means of secure data transmission\n   between\
    \ PPP implementations.\n   The DES encryption algorithm is a well studied, understood\
    \ and widely\n   implemented encryption algorithm.  The DES cipher was designed\
    \ for\n   efficient implementation in hardware, and consequently may be\n   relatively\
    \ expensive to implement in software.  However, its\n   pervasiveness makes it\
    \ seem like a reasonable choice for a \"model\"\n   encryption protocol.\n   Source\
    \ code implementing DES in the \"Electronic Code Book Mode\" can\n   be found\
    \ in [7].  US export laws forbid the inclusion of\n   compilation-ready source\
    \ code in this document.\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The following language conventions are used in the items\
    \ of\n   specification in this document:\n   o    MUST, SHALL or MANDATORY --\
    \ the item is an absolute requirement\n        of the specification.\n   o   \
    \ SHOULD or RECOMMENDED -- the item should generally be followed\n        for\
    \ all but exceptional circumstances.\n   o    MAY or OPTIONAL -- the item is truly\
    \ optional and may be\n        followed or ignored according to the needs of the\
    \ implementor.\n"
- title: 2.  General Overview
  contents:
  - "2.  General Overview\n   The purpose of encrypting packets exchanged between\
    \ two PPP\n   implementations is to attempt to insure the privacy of communication\n\
    \   conducted via the two implementations.  The encryption process\n   depends\
    \ on the specification of an encryption algorithm and a shared\n   secret (usually\
    \ involving at least a key) between the sender and\n   receiver.\n   Generally,\
    \ the encryptor will take a PPP packet including the\n   protocol field, apply\
    \ the chosen encryption algorithm, place the\n   resulting cipher text (and in\
    \ this specification, an explicit\n   sequence number) in the information field\
    \ of another PPP packet.  The\n   decryptor will apply the inverse algorithm and\
    \ interpret the\n   resulting plain text as if it were a PPP packet which had\
    \ arrived\n   directly on the interface.\n   The means by which the secret becomes\
    \ known to both communicating\n   elements is beyond the scope of this document;\
    \ usually some form of\n   manual configuration is involved.  Implementations\
    \ might make use of\n   PPP authentication, or the EndPoint Identifier Option\
    \ described in\n   PPP Multilink [3], as factors in selecting the shared secret.\
    \  If the\n   secret can be deduced by analysis of the communication between the\n\
    \   two parties, then no privacy is guaranteed.\n   While the US Data Encryption\
    \ Standard (DES) algorithm [5, 6] provides\n   multiple modes of use, this specification\
    \ selects the use of only one\n   mode in conjunction with the PPP Encryption\
    \ Control Protol (ECP): the\n   Cipher Block Chaining (CBC) mode.  In addition\
    \ to the US Government\n   publications cited above, the CBC mode is also discussed\
    \ in [7],\n   although no C source code is provided for it per se.\n   The initialization\
    \ vector for this mode is deduced from an explicit\n   64-bit nonce, which is\
    \ exchanged in the clear during the negotiation\n   phase.  The 56-bit key required\
    \ by all DES modes is established as a\n   shared secret between the implementations.\n\
    \   One reason for choosing the chaining mode is that it is generally\n   thought\
    \ to require more computation resources to deduce a 64 bit key\n   used for DES\
    \ encryption by analysis of the encrypted communication\n   stream when chaining\
    \ mode is used, compared with the situation where\n   each block is encrypted\
    \ separately with no chaining.  Further, if\n   chaining is not used, even if\
    \ the key is never deduced, the\n   communication may be subject to replay attacks.\n\
    \   However, if chaining is to extend beyond packet boundaries, both the\n   sender\
    \ and receiver must agree on the order the packets were\n   encrypted.  Thus,\
    \ this specification provides for an explicit 16 bit\n   sequence number to sequence\
    \ decryption of the packets.  This mode of\n   operation even allows recovery\
    \ from occasional packet loss; details\n   are also given below.\n"
- title: 3.  Structure of This Specification
  contents:
  - "3.  Structure of This Specification\n   The PPP Encryption Control Protocol (ECP),\
    \ provides a framework for\n   negotiating parameters associated with encryption,\
    \ such as choosing\n   the algorithm.  It specifies the assigned numbers to be\
    \ used as PPP\n   protocol numbers for the \"data packets\" to be carried as the\n\
    \   associated \"data protocol\", and describes the state machine.\n   Thus, a\
    \ specification for use in that matrix need only describe any\n   additional configuration\
    \ options required to specify a particular\n   algorithm, and the process by which\
    \ one encrypts/decrypts the\n   information once the Opened state has been achieved.\n"
- title: 4.  DESE Configuration Option for ECP
  contents:
  - "4.  DESE Configuration Option for ECP\n   Description\n        The ECP DESE Configuration\
    \ Option indicates that the issuing\n        implementation is offering to employ\
    \ this specification for\n        decrypting communications on the link, and may\
    \ be thought of as\n        a request for its peer to encrypt packets in this\
    \ manner.\n        The ECP DESE Configuration Option has the following fields,\n\
    \        which are transmitted from left to right:\n                    Figure\
    \ 1:  ECP DESE Configuration Option\n        0                   1           \
    \        2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        |     Type      |    Length     |         Initial Nonce ...\n       \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        Type\n\
    \             1, to indicate the DESE protocol.\n        Length\n            \
    \ 10\n        Initial Nonce\n             This field is an 8 byte quantity which\
    \ is used by the peer\n             implementation to encrypt the first packet\
    \ transmitted\n             after the sender reaches the opened state.\n     \
    \        To guard against replay attacks, the implementation SHOULD\n        \
    \     offer a different value during each ECP negotiation.  An\n             example\
    \ might be to use the number of seconds since Jan\n             1st, 1970 (GMT/UT)\
    \ in the upper 32 bits, and the current\n             number of nanoseconds relative\
    \ to the last second mark in\n             the lower 32 bits.\n             Its\
    \ formulaic role is described in the Encryption section\n             below.\n"
- title: 5.  Packet Format for DESE
  contents:
  - "5.  Packet Format for DESE\n   Description\n        The DESE packets themselves\
    \ have the following fields:\n                Figure 2:  DES Encryption Protocol\
    \ Packet Format\n        0                   1                   2           \
    \        3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        |    Address    |    Control    |     0000      |  Protocol ID  |\n \
    \       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \      | Seq. No. High | Seq. No. Low  |        Ciphertext ...\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        Address and Control\n             These fields MUST be present unless\
    \ the PPP Address and\n             Control Field Compression option (ACFC) has\
    \ been\n             negotiated.\n        Protocol ID\n             The value\
    \ of this field is 0x53 or 0x55; the latter\n             indicates that ciphertext\
    \ includes headers for the\n             Multilink Protocol, and REQUIRES that\
    \ the Individual Link\n             Encryption Control Protocol has reached the\
    \ opened state.\n             The leading zero MAY be absent if the PPP Protocol\
    \ Field\n             Compression option (PFC) has been negotiated.\n        Sequence\
    \ Number\n             These 16-bit numbers are assigned by the encryptor\n  \
    \           sequentially starting with 0 (for the first packet\n             transmitted\
    \ once ECP has reached the opened state.\n        Ciphertext\n             The\
    \ generation of this data is described in the next\n             section.\n"
- title: 6.  Encryption
  contents:
  - "6.  Encryption\n   Once the ECP has reached the Opened state, the sender MUST\
    \ NOT apply\n   the encryption procedure to LCP packets nor ECP packets.\n   If\
    \ the async control character map option has been negotiated on the\n   link,\
    \ the sender applies mapping after the encryption algorithm has\n   been run.\n\
    \   The encryption algorithm is generally to pad the Protocol and\n   Information\
    \ fields of a PPP packet to some multiple of 8 bytes, and\n   apply DES in Chaining\
    \ Block Cipher mode with a 56-bit key K.\n   There are a lot of details concerning\
    \ what constitutes the Protocol\n   and Information fields, in the presence or\
    \ non-presence of Multilink,\n   and whether the ACFC and PFC options have been\
    \ negotiated, and the\n   sort of padding chosen.\n   Regardless of whether ACFC\
    \ has been negotiated on the link, the\n   sender applies the encryption procedure\
    \ to only that portion of the\n   packet excluding the address and control field.\n\
    \   If the Multilink Protocol has been negotiated and encryption is to be\n  \
    \ construed as being applied to each link separately, then the\n   encryption\
    \ procedure is to be applied to the (possibly extended)\n   protocol and information\
    \ fields of the packet in the Multilink\n   Protocol.\n   If the Multilink Protocol\
    \ has been negotiated and encryption is to be\n   construed as being applied to\
    \ the bundle, then the multilink\n   procedure is to be applied to the resulting\
    \ DESE packets.\n"
- title: 6.1.  Padding Considerations
  contents:
  - "6.1.  Padding Considerations\n   Since the DES algorithm operates on blocks of\
    \ 8 octets, packets which\n   are of length not a multiple of 8 octets must be\
    \ padded.  This can be\n   injurious to the interpretation of some protocols which\
    \ do not\n   contain an explicit length field in their protocol headers.\n   (Additional\
    \ padding of the ciphered packet for the purposes of\n   transmission by HDLC\
    \ hardware which requires an even number of bytes\n   should not be necessary\
    \ since the information field will now be of\n   length a multiple of 8, and whether\
    \ or not the packet is of even\n   length can be forced by use or absence of a\
    \ leading zero in the\n   protocol field).\n   For protocols which do have an\
    \ explicit length field, such as IP,\n   IPX, XNS, and CLNP, then padding may\
    \ be accomplished by adding random\n   trailing garbage.  Even when performing\
    \ the Multilink protocol, if it\n   is only being applied to packets with explicit\
    \ length fields, and if\n   care is taken so that all non-terminating fragments\
    \ (i.e., those not\n   bearing the (E)nd bit) are of lengths divisible by 8; then\
    \ no ill\n   effects will happen if garbage padding is applied only to terminating\n\
    \   fragments.\n   For certain cases, such as the PPP bridging protocol when the\n\
    \   trailing CRC is forwarded or when any bridging is being applied to\n   protocols\
    \ not having explicit length fields, adding garbage changes\n   the interpretation\
    \ of the packet.  The self-describing padding option\n   [4] permits unambiguous\
    \ removal of padded bytes; although it should\n   only be used when absolutely\
    \ necessary as it may inadvertently\n   require adding as many as 8 octets to\
    \ packets that could otherwise be\n   left unaltered.\n      Consider a packet,\
    \ which by unlucky circumstance is already a\n      multiple of 8 octets, but\
    \ terminates in the sequence 0x1, 0x2.\n      Self-describing padding would otherwise\
    \ remove the trailing two\n      bytes.  For purposes of coexistence with archaic\
    \ HDLC chips where\n      it is necessary to transmit packets of even length,\
    \ one would\n      normally only have to add an additional two octets (0x1, 0x2),\n\
    \      which could then be removed.  However, since the packet was\n      initially\
    \ a multiple of 8 bytes, an additional 8 bytes would need\n      to be added.\n"
- title: 6.2.  Generation of the Ciphertext
  contents:
  - "6.2.  Generation of the Ciphertext\n   In this discussion, E[k] will denote the\
    \ basic DES cipher determined\n   by a 56-bit key k acting on 64 bit blocks. and\
    \ D[k] will denote the\n   corresponding decryption mechanism.  The padded plaintext\
    \ described\n   in the previous section then becomes a sequence of 64 bit blocks\
    \ P[i]\n   (where i ranges from 1 to n).  The circumflex character (^)\n   represents\
    \ the bit-wise exclusive-or operation applied to 64-bit\n   blocks.\n   When encrypting\
    \ the first packet to be transmitted in the opened\n   state let C[0] be the result\
    \ of applying E[k] to the Initial Nonce\n   received in the peer's ECP DESE option;\
    \ otherwise let C[0] be the\n   final block of the previously transmitted packet.\n\
    \   The ciphertext for the packet is generated by the iterative process\n    \
    \                    C[i] = E[k](P[i] ^ C[i-1])\n   for i running between 1 and\
    \ n.\n"
- title: 6.3.  Retrieval of the Plaintext
  contents:
  - "6.3.  Retrieval of the Plaintext\n   When decrypting the first packet received\
    \ in the opened state, let\n   C[0] be the result of applying E[k] to the Initial\
    \ Nonce transmitted\n   in the ECP DESE option.  The first packet will have sequence\
    \ number\n   zero.  For subsequent packets, let C[0] be the final block of the\n\
    \   previous packet in sequence space.  Decryption is then accomplished\n   by\n\
    \                        P[i] = C[i-1] ^ D[k](C[i]),\n   for i running between\
    \ 1 and n.\n"
- title: 6.4.  Recovery after Packet Loss
  contents:
  - "6.4.  Recovery after Packet Loss\n   Packet loss is detected when there is a\
    \ discontinuity in the sequence\n   numbers of consecutive packets.  Suppose packet\
    \ number N - 1 has an\n   unrecoverable error or is otherwise lost, but packets\
    \ N and N + 1 are\n   received correctly.\n   Since the algorithm in the previous\
    \ section requires C[0] for packet\n   N to be C[last] for packet N - 1, it will\
    \ be impossible to decode\n   packet N.  However, all packets N + 1 and following\
    \ can be decoded in\n   the usual way, since all that is required is the last\
    \ block of\n   ciphertext of the previous packet (in this case packet N, which\
    \ WAS\n   received).\n"
- title: 7.  MRU Considerations
  contents:
  - "7.  MRU Considerations\n   Because padding can occur, and because there is an\
    \ additional\n   protocol field in effect, implementations should take into account\n\
    \   the growth of the packets.  As an example, if PFC had been\n   negotiated,\
    \ and if the MRU before had been exactly a multiple of 8,\n   then the plaintext\
    \ resulting combining a full sized data packets with\n   a one byte protocol field\
    \ would require an additional 7 bytes of\n   padding, and the sequence number\
    \ would be an additional 2 bytes so\n   that the information field in the DESE\
    \ protocol is now 10 bytes\n   larger than that in the original packet.  Because\
    \ the convention is\n   that PPP options are independent of each other, negotiation\
    \ of DESE\n   does not, by itself, automatically increase the MRU value.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are the primary subject of this\
    \ memo.  This proposal\n   relies on exterior and unspecified methods for authentication\
    \ and\n   retrieval of shared secrets.\n   It proposes no new technology for privacy,\
    \ but merely describes a\n   convention for the application of the DES cipher\
    \ to data transmission\n   between PPP implementation.\n   Any methodology for\
    \ the protection and retrieval of shared secrets,\n   and any limitations of the\
    \ DES cipher are relevant to the use\n   described here.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1] Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , STD 51,\n       RFC 1661, Daydreamer, July 1994.\n   [2] Meyer, G., \"The PPP\
    \ Encryption Protocol\", RFC 1968, Spider\n       Systems, June 1996.\n   [3]\
    \ Sklower, K., Lloyd, B., McGregor, G., and D. Carr, \"The PPP\n       Multilink\
    \ Protocol (MP)\", RFC 1717, UC Berkeley, November 1994.\n   [4] Simpson, W.,\
    \ Editor, \"PPP LCP Extensions\", RFC 1570, Daydreamer,\n       January 1994.\n\
    \   [5] National Bureau of Standards, \"Data Encryption Standard\", FIPS\n   \
    \    PUB 46 (January 1977).\n   [6] National Bureau of Standards, \"DES Modes\
    \ of Operation\", FIPS PUB\n       81 (December 1980).\n   [7] Schneier, B., \"\
    Applied Cryptography - Protocols Algorithms, and\n       source code in C\", John\
    \ Wiley & Sons, Inc. 1994.  There is an\n       errata associated with the book,\
    \ and people can get a copy by\n       sending e-mail to schneier@counterpane.com.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Keith Sklower\n   Computer Science Department\n \
    \  384 Soda Hall, Mail Stop 1776\n   University of California\n   Berkeley, CA\
    \ 94720-1776\n   Phone:  (510) 642-9587\n   EMail:  sklower@CS.Berkeley.EDU\n\
    \   Gerry M. Meyer\n   Spider Systems\n   Stanwell Street\n   Edinburgh EH6 5NG\n\
    \   Scotland, UK\n   Phone: (UK) 131 554 9424\n   Fax:   (UK) 131 554 0649\n \
    \  EMail: gerry@spider.co.uk\n"
