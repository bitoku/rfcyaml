- contents:
  - "                      Rapid Commit Option for the\n         Dynamic Host Configuration
    Protocol version 4 (DHCPv4)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a new Dynamic Host Configuration Protocol\n
    \  version 4 (DHCPv4) option, modeled on the DHCPv6 Rapid Commit option,\n   for
    obtaining IP address and configuration information using a\n   2-message exchange
    rather than the usual 4-message exchange,\n   expediting client configuration.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction...................................................
    \ 2\n   2. Requirements...................................................  2\n
    \  3. Client/Server Operations.......................................  2\n      3.1.
    \ Detailed Flow............................................  3\n      3.2.  Administrative
    Considerations............................  6\n   4. Rapid Commit Option Format.....................................
    \ 7\n   5. IANA Considerations............................................  7\n
    \  6. Security Considerations........................................  7\n   7.
    References.....................................................  7\n      7.1.
    \ Normative References.....................................  7\n      7.2.  Informative
    References...................................  8\n   8. Acknowledgements...............................................
    \ 8\n   Authors' Addresses................................................  9\n
    \  Full Copyright Statement.......................................... 10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In some environments, such as those in which high mobility
    occurs and\n   the network attachment point changes frequently, it is beneficial
    to\n   rapidly configure clients.  And, in these environments it is possible\n
    \  to more quickly configure clients because the protections offered by\n   the
    normal (and longer) 4-message exchange may not be needed.  The\n   4-message exchange
    allows for redundancy (multiple DHCP servers)\n   without wasting addresses, as
    addresses are only provisionally\n   assigned to a client until the client chooses
    and requests one of the\n   provisionally assigned addresses.  The 2-message exchange
    may\n   therefore be used when only one server is present or when addresses\n
    \  are plentiful and having multiple servers commit addresses for a\n   client
    is not a problem.\n   This document defines a new Rapid Commit option for DHCPv4,
    modeled\n   on the DHCPv6 Rapid Commit option [RFC3315], which can be used to\n
    \  initiate a 2-message exchange to expedite client configuration in\n   some
    environments.  A client advertises its support of this option by\n   sending it
    in DHCPDISCOVER messages.  A server then determines\n   whether to allow the 2-message
    exchange based on its configuration\n   information and can either handle the
    DHCPDISCOVER as defined in\n   [RFC2131] or commit the client's configuration
    information and\n   advance to sending a DHCPACK message with the Rapid Commit
    option as\n   defined herein.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,
    SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\n
    \  document, are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements
- contents:
  - "3.  Client/Server Operations\n   If a client that supports the Rapid Commit option
    intends to use the\n   rapid commit capability, it includes a Rapid Commit option
    in\n   DHCPDISCOVER messages that it sends.  The client MUST NOT include it\n
    \  in any other messages.  A client and server only use this option when\n   configured
    to do so.\n   A client that sent a DHCPDISCOVER with Rapid Commit option processes\n
    \  responses as described in [RFC2131].  However, if the client receives\n   a
    DHCPACK message with a Rapid Commit option, it SHOULD process the\n   DHCPACK
    immediately (without waiting for additional DHCPOFFER or\n   DHCPACK messages)
    and use the address and configuration information\n   contained therein.\n   A
    server that supports the Rapid Commit option MAY respond to a\n   DHCPDISCOVER
    message that included the Rapid Commit option with a\n   DHCPACK that includes
    the Rapid Commit option and fully committed\n   address and configuration information.
    \ A server MUST NOT include the\n   Rapid Commit option in any other messages.\n
    \  The Rapid Commit option MUST NOT appear in a Parameter Request List\n   option
    [RFC2132].\n   All other DHCP operations are as documented in [RFC2131].\n"
  - contents:
    - "3.1.  Detailed Flow\n   The following is revised from Section 3.1 of [RFC2131],
      which\n   includes handling of the Rapid Commit option.\n      1. The client
      broadcasts a DHCPDISCOVER message on its local\n         physical subnet.  If
      the client supports the Rapid Commit\n         option and intends to use the
      rapid commit capability, it\n         includes a Rapid Commit option in the
      DHCPDISCOVER message.\n         The DHCPDISCOVER message MAY include options
      that suggest\n         values for the network address and lease duration.  BOOTP
      relay\n         agents may pass the message on to DHCP servers not on the same\n
      \        physical subnet.\n      2. Each server may respond with either a DHCPOFFER
      message or a\n         DHCPACK message with the Rapid Commit option (the latter
      only\n         if the DHCPDISCOVER contained a Rapid Commit option and the\n
      \        server's configuration policies allow use of Rapid Commit).\n         These
      would include an available network address in the\n         'yiaddr' field (and
      other configuration parameters in DHCP\n         options).  Servers sending
      a DHCPOFFER need not reserve the\n         offered network address, although
      the protocol will work more\n         efficiently if the server avoids allocating
      the offered network\n         address to another client.  Servers sending the
      DHCPACK message\n         commit the binding for the client to persistent storage
      before\n         sending the DHCPACK.  The combination of 'client identifier'
      or\n         'chaddr' and assigned network address constitute a unique\n         identifier
      for the client's lease and are used by both the\n         client and server
      to identify a lease referred to in any DHCP\n         messages.  The server
      transmits the DHCPOFFER or DHCPACK\n         message to the client, if necessary
      by using the BOOTP relay\n         agent.\n         When allocating a new address,
      servers SHOULD check that the\n         offered network address is not already
      in use; e.g., the server\n         may probe the offered address with an ICMP
      Echo Request.\n         Servers SHOULD be implemented so that network administrators\n
      \        MAY choose to disable probes of newly allocated addresses.\n         Figure
      3 in [RFC2131] shows the flow for the normal 4-message\n         exchange.  Figure
      1 below shows the 2-message exchange.\n                    Server          Client
      \         Server\n                (not selected)                    (selected)\n
      \                     v               v               v\n                      |
      \              |               |\n                      |     Begins initialization
      \    |\n                      |               |               |\n                      |
      _____________/|\\____________  |\n                      |/DHCPDISCOVER  | DHCPDISCOVER
      \\|\n                      | w/Rapid Commit| w/Rapid Commit|\n                      |
      \              |               |\n                  Determines          |          Determines\n
      \                configuration        |         configuration\n                      |
      \              |     Commits configuration\n                      |       Collects
      replies        |\n                      |\\              |  ____________/|\n
      \                     | \\________     | / DHCPACK     |\n                      |
      DHCPOFFER\\    |/w/Rapid Commit|\n                      |  (discarded)  |               |\n
      \                     |    Initialization complete    |\n                      |
      \              |               |\n                      .               .               .\n
      \                     .               .               .\n                      |
      \              |               |\n                      |      Graceful shutdown
      \       |\n                      |               |               |\n                      |
      \              |\\_____________ |\n                      |               |  DHCPRELEASE
      \\|\n                      |               |               |\n                      |
      \              |        Discards lease\n                      |               |
      \              |\n                      v               v               v\n
      \           Figure 1 Timeline diagram when Rapid Commit is used\n      3. The
      client receives one or more DHCPOFFER or DHCPACK (if the\n         Rapid Commit
      option is sent in DHCPDISCOVER) messages from one\n         or more servers.
      \ If a DHCPACK (with the Rapid Commit option)\n         is received, the client
      may immediately advance to step 5 below\n         if the offered configuration
      parameters are acceptable.  The\n         client may choose to wait for multiple
      responses.  The client\n         chooses one server from which to request or
      accept\n         configuration parameters, based on the configuration parameters\n
      \        offered in the DHCPOFFER and DHCPACK messages.  If the client\n         chooses
      a DHCPACK, it advances to step 5.  Otherwise, the\n         client broadcasts
      a DHCPREQUEST message that MUST include the\n         'server identifier' option
      to indicate which server it has\n         selected, the message MAY include
      other options specifying\n         desired configuration values.  The 'requested
      IP address'\n         option MUST be set to the value of 'yiaddr' in the DHCPOFFER\n
      \        message from the server.  This DHCPREQUEST message is broadcast\n         and
      relayed through DHCP/BOOTP relay agents.  To help ensure\n         that any
      BOOTP relay agents forward the DHCPREQUEST message to\n         the same set
      of DHCP servers that received the original\n         DHCPDISCOVER message, the
      DHCPREQUEST message MUST use the same\n         value in the DHCP message header's
      'secs' field and be sent to\n         the same IP broadcast address as was the
      original DHCPDISCOVER\n         message.  The client times out and retransmits
      the DHCPDISCOVER\n         message if the client receives no DHCPOFFER messages.\n
      \     4. The servers receive the DHCPREQUEST broadcast from the client.\n         Servers
      not selected by the DHCPREQUEST message use the message\n         as notification
      that the client has declined those servers'\n         offers.  The server selected
      in the DHCPREQUEST message commits\n         the binding for the client to persistent
      storage and responds\n         with a DHCPACK message containing the configuration
      parameters\n         for the requesting client.  The combination of 'client\n
      \        identifier' or 'chaddr' and assigned network address constitute\n         a
      unique identifier for the client's lease and are used by both\n         the
      client and server to identify a lease referred to in any\n         DHCP messages.
      \ Any configuration parameters in the DHCPACK\n         message SHOULD NOT conflict
      with those in the earlier DHCPOFFER\n         message to which the client is
      responding.  The server SHOULD\n         NOT check the offered network address
      at this point.  The\n         'yiaddr' field in the DHCPACK messages is filled
      in with the\n         selected network address.\n         If the selected server
      is unable to satisfy the DHCPREQUEST\n         message (e.g., the requested
      network address has been\n         allocated), the server SHOULD respond with
      a DHCPNAK message.\n         A server MAY choose to mark addresses offered to
      clients in\n         DHCPOFFER messages as unavailable.  The server SHOULD mark
      an\n         address offered to a client in a DHCPOFFER message as available\n
      \        if the server receives no DHCPREQUEST message from that client.\n      5.
      The client receives the DHCPACK message with configuration\n         parameters.
      \ The client SHOULD perform a final check on the\n         parameters (e.g.,
      ARP for allocated network address), and it\n         notes the duration of the
      lease specified in the DHCPACK\n         message.  At this point, the client
      is configured.  If the\n         client detects that the address is already
      in use (e.g.,\n         through the use of ARP), the client MUST send a DHCPDECLINE\n
      \        message to the server, and it restarts the configuration\n         process.
      \ The client SHOULD wait a minimum of ten seconds\n         before restarting
      the configuration process to avoid excessive\n         network traffic in case
      of looping.\n         If the client receives a DHCPNAK message, the client restarts\n
      \        the configuration process.\n         The client times out and retransmits
      the DHCPREQUEST message if\n         the client receives neither a DHCPACK nor
      a DHCPNAK message.\n         The client retransmits the DHCPREQUEST according
      to the\n         retransmission algorithm in section 4.1 of [RFC2131].  The\n
      \        client should choose to retransmit the DHCPREQUEST enough times\n         to
      give an adequate probability of contacting the server\n         without causing
      the client (and the user of that client) to\n         wait too long before giving
      up; e.g., a client retransmitting\n         as described in section 4.1 of [RFC2131]
      might retransmit the\n         DHCPREQUEST message four times, for a total delay
      of 60\n         seconds, before restarting the initialization procedure.  If\n
      \        the client receives neither a DHCPACK nor a DHCPNAK message\n         after
      employing the retransmission algorithm, the client\n         reverts to INIT
      state and restarts the initialization process.\n         The client SHOULD notify
      the user that the initialization\n         process has failed and is restarting.\n
      \     6. The client may choose to relinquish its lease on a network\n         address
      by sending a DHCPRELEASE message to the server.  The\n         client identifies
      the lease to be released with its 'client\n         identifier' or 'chaddr'
      and network address in the DHCPRELEASE\n         message.  If the client used
      a 'client identifier' when it\n         obtained the lease, it MUST use the
      same 'client identifier' in\n         the DHCPRELEASE message.\n"
    title: 3.1.  Detailed Flow
  - contents:
    - "3.2.  Administrative Considerations\n   Network administrators MUST only enable
      the use of Rapid Commit on a\n   DHCP server if one of the following conditions
      is met:\n      1. The server is the only server for the subnet.\n      2. When
      multiple servers are present, they may each commit a\n         binding for all
      clients, and therefore each server must have\n         sufficient addresses
      available.\n   A server MAY allow configuration for a different (likely shorter)\n
      \  initial lease time for addresses assigned when Rapid Commit is used\n   to
      expedite reclaiming addresses not used by clients.\n"
    title: 3.2.  Administrative Considerations
  title: 3.  Client/Server Operations
- contents:
  - "4.  Rapid Commit Option Format\n   The Rapid Commit option is used to indicate
    the use of the two-\n   message exchange for address assignment.  The code for
    the Rapid\n   Commit option is 80.  The format of the option is:\n           Code
    \ Len\n         +-----+-----+\n         |  80 |  0  |\n         +-----+-----+\n
    \  A client MUST include this option in a DHCPDISCOVER message if the\n   client
    is prepared to perform the DHCPDISCOVER-DHCPACK message\n   exchange described
    earlier.\n   A server MUST include this option in a DHCPACK message sent in a\n
    \  response to a DHCPDISCOVER message when completing the DHCPDISCOVER-\n   DHCPACK
    message exchange.\n"
  title: 4.  Rapid Commit Option Format
- contents:
  - "5.  IANA Considerations\n   IANA has assigned value 80 for the Rapid Commit option
    code in\n   accordance with [RFC2939].\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The concepts in this document do not significantly
    alter the security\n   considerations for DHCP (see [RFC2131] and [RFC3118]).
    \ However, use\n   of this option could expedite denial of service attacks by
    allowing a\n   mischievous client to consume all available addresses more rapidly
    or\n   to do so without requiring two-way communication (as injecting\n   DHCPDISCOVER
    messages with the Rapid Commit option is sufficient to\n   cause a server to allocate
    an address).\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\", RFC\n
      \             2131, March 1997.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC2132]  Alexander, S. and R. Droms, \"DHCP
      Options and BOOTP Vendor\n              Extensions\", RFC 2132, March 1997.\n
      \  [RFC2939]  Droms, R., \"Procedures and IANA Guidelines for Definition\n              of
      New DHCP Options and Message Types\", BCP 43, RFC 2939,\n              September
      2000.\n   [RFC3118]  Droms, R. and W. Arbaugh, \"Authentication for DHCP\n              Messages\",
      RFC 3118, June 2001.\n   [RFC3315]  Droms, R., Bound, J., Volz, B., Lemon, T.,
      Perkins, C.,\n              and M. Carney, \"Dynamic Host Configuration Protocol
      for\n              IPv6 (DHCPv6)\", RFC 3315, July 2003.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Acknowledgements\n   Special thanks to Ted Lemon and Andre Kostur for their
    many valuable\n   comments.  Thanks to Ralph Droms for his review comments during
    WGLC.\n   Thanks to Noh-Byung Park and Youngkeun Kim for their supports on this\n
    \  work.\n   Particularly, the authors would like to acknowledge the\n   implementation
    contributions by Minho Lee of SAMSUNG Electronics.\n"
  title: 8.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Soohong Daniel Park\n   Mobile Platform Laboratory\n   SAMSUNG
    Electronics\n   416, Maetan-3dong, Yeongtong-Gu\n   Suwon, Korea\n   Phone: +82-31-200-4508\n
    \  EMail: soohong.park@samsung.com\n   Pyungsoo Kim\n   Mobile Platform Laboratory\n
    \  SAMSUNG Electronics\n   416, Maetan-3dong, Yeongtong-Gu\n   Suwon, Korea\n
    \  Phone: +82-31-200-4635\n   EMail: kimps@samsung.com\n   Bernie Volz\n   Cisco
    Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA 01719\n   USA\n   Phone:
    \ +1-978-936-0382\n   EMail:  volz@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
