- title: __initial_text__
  contents:
  - "                   The Transport Layer Security (TLS)\n             Multiple\
    \ Certificate Status Request Extension\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Transport Layer Security (TLS) Certificate\n\
    \   Status Version 2 Extension to allow clients to specify and support\n   several\
    \ certificate status methods.  (The use of the Certificate\n   Status extension\
    \ is commonly referred to as \"OCSP stapling\".)  Also\n   defined is a new method\
    \ based on the Online Certificate Status\n   Protocol (OCSP) that servers can\
    \ use to provide status information\n   about not only the server's own certificate\
    \ but also the status of\n   intermediate certificates in the chain.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6961.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Transport Layer Security (TLS) Extension [RFC6066] framework\n\
    \   defines, among other extensions, the Certificate Status extension\n   (also\
    \ referred to as \"OCSP stapling\") that clients can use to request\n   the server's\
    \ copy of the current status of its certificate.  The\n   benefits of this extension\
    \ include a reduced number of roundtrips and\n   network delays for the client\
    \ to verify the status of the server's\n   certificate and a reduced load on the\
    \ certificate issuer's status\n   response servers, thus solving a problem that\
    \ can become significant\n   when the issued certificate is presented by a frequently\
    \ visited\n   server.\n   There are two problems with the existing Certificate\
    \ Status\n   extension.  First, it does not provide functionality to request the\n\
    \   status information about intermediate Certification Authority (CA)\n   certificates,\
    \ which means the client has to request status\n   information through other methods,\
    \ such as Certificate Revocation\n   Lists (CRLs), introducing further delays.\
    \  Second, the current format\n   of the extension and requirements in the TLS\
    \ protocol prevent a\n   client from offering the server multiple status methods.\n\
    \   Many CAs are now issuing intermediate CA certificates that not only\n   specify\
    \ the publication point for their CRLs in a CRL Distribution\n   Point [RFC5280]\
    \ but also specify a URL for their OCSP [RFC6960]\n   server in Authority Information\
    \ Access [RFC5280].  Given that\n   client-cached CRLs are frequently out of date,\
    \ clients would benefit\n   from using OCSP to access up-to-date status information\
    \ about\n   intermediate CA certificates.  The benefit to the issuing CA is less\n\
    \   clear, as providing the bandwidth for the OCSP responder can be\n   costly,\
    \ especially for CAs with many high-traffic subscriber sites,\n   and this cost\
    \ is a concern for many CAs.  There are cases where OCSP\n   requests for a single\
    \ high-traffic site caused significant network\n   problems for the issuing CA.\n\
    \   Clients will benefit from the TLS server providing certificate status\n  \
    \ information regardless of type, not just for the server certificate\n   but\
    \ also for the intermediate CA certificates.  Combining the status\n   checks\
    \ into one extension will reduce the roundtrips needed to\n   complete the handshake\
    \ by the client to just those needed for\n   negotiating the TLS connection. \
    \ Also, for the Certification\n   Authorities, the load on their servers will\
    \ depend on the number of\n   certificates they have issued, not on the number\
    \ of visitors to those\n   sites.  Additionally, using this extension significantly\
    \ reduces\n   privacy concerns around the clients informing the certificate issuer\n\
    \   about which sites they are visiting.\n   For such a new system to be introduced\
    \ seamlessly, clients need to be\n   able to indicate support for the existing\
    \ OCSP Certificate Status\n   method and a new multiple-OCSP mode.\n   Unfortunately,\
    \ the definition of the Certificate Status extension\n   only allows a single\
    \ Certificate Status extension to be defined in a\n   single extension record\
    \ in the handshake, and the TLS protocol\n   [RFC5246] only allows a single record\
    \ in the extension list for any\n   given extension.  This means that it is not\
    \ possible for clients to\n   indicate support for new methods while still supporting\
    \ older\n   methods, which would cause problems for interoperability between\n\
    \   newer clients and older servers.  This will not just be an issue for\n   the\
    \ multiple status request mode proposed above but also for any\n   other future\
    \ status methods that might be introduced.  This will be\n   true not just for\
    \ the current PKIX infrastructure [RFC5280] but also\n   for alternative PKI structures.\n\
    \   The solution to this problem is to define a new extension,\n   \"status_request_v2\"\
    , with an extended format that allows the client\n   to indicate support for multiple\
    \ status request methods.  This is\n   implemented using a list of CertificateStatusRequestItemV2\
    \ records in\n   the extension record.  As the server will select the single status\n\
    \   method based on the selected cipher suite and the certificate\n   presented,\
    \ no significant changes are needed in the server's\n   extension format.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 1.2.  Presentation Language
  contents:
  - "1.2.  Presentation Language\n   This document defines protocol structures using\
    \ the same conventions\n   and presentation language as defined in Section 4 of\
    \ [RFC5246].\n"
- title: 2.  Multiple Certificate Status Extension
  contents:
  - '2.  Multiple Certificate Status Extension

    '
- title: 2.1.  New Extension
  contents:
  - "2.1.  New Extension\n   The extension defined by this document is indicated by\n\
    \   \"status_request_v2\" in the ExtensionType enum (originally defined by\n \
    \  [RFC6066]), which uses the following value:\n     enum {\n       status_request_v2(17),\
    \ (65535)\n     } ExtensionType;\n"
- title: 2.2.  Multiple Certificate Status Request Record
  contents:
  - "2.2.  Multiple Certificate Status Request Record\n   Clients that support a certificate\
    \ status protocol like OCSP may send\n   the \"status_request_v2\" extension to\
    \ the server in order to use the\n   TLS handshake to transfer such data instead\
    \ of downloading it through\n   separate connections.  When using this extension,\
    \ the\n   \"extension_data\" field (defined in Section 7.4.1.4 of [RFC5246]) of\n\
    \   the extension SHALL contain a CertificateStatusRequestListV2 where:\n    \
    \ struct {\n       CertificateStatusType status_type;\n       uint16 request_length;\
    \ /* Length of request field in bytes */\n       select (status_type) {\n    \
    \     case ocsp: OCSPStatusRequest;\n         case ocsp_multi: OCSPStatusRequest;\n\
    \       } request;\n     } CertificateStatusRequestItemV2;\n     enum { ocsp(1),\
    \ ocsp_multi(2), (255) } CertificateStatusType;\n     struct {\n       ResponderID\
    \ responder_id_list<0..2^16-1>;\n       Extensions request_extensions;\n     }\
    \ OCSPStatusRequest;\n     opaque ResponderID<1..2^16-1>;\n     opaque Extensions<0..2^16-1>;\n\
    \     struct {\n       CertificateStatusRequestItemV2\n                      \
    \  certificate_status_req_list<1..2^16-1>;\n     } CertificateStatusRequestListV2;\n\
    \   In the OCSPStatusRequest (originally defined by [RFC6066]), the\n   \"ResponderID\"\
    \ provides a list of OCSP responders that the client\n   trusts.  A zero-length\
    \ \"responder_id_list\" sequence has the special\n   meaning that the responders\
    \ are implicitly known to the server, e.g.,\n   by prior arrangement, or are identified\
    \ by the certificates used by\n   the server.  \"Extensions\" is a DER encoding\
    \ [X.690] of the OCSP\n   request extensions, and if the server supports the forwarding\
    \ of OCSP\n   request extensions, this value MUST be forwarded without\n   modification.\n\
    \   Both \"ResponderID\" and \"Extensions\" are DER-encoded ASN.1 types as\n \
    \  defined in [RFC6960].  \"Extensions\" is imported from [RFC5280].  A\n   zero-length\
    \ \"request_extensions\" value means that there are no\n   extensions (as opposed\
    \ to a DER-encoded zero-length ASN.1 SEQUENCE,\n   which is not valid for the\
    \ \"Extensions\" type).\n   Servers that support a client's selection of responders\
    \ using the\n   ResponderID field could implement this selection by matching the\n\
    \   responder ID values from the client's list with the ResponderIDs of\n   known\
    \ OCSP responders, either by using a binary compare of the values\n   or a hash\
    \ calculation and compare method.\n   In the case of the \"id-pkix-ocsp-nonce\"\
    \ OCSP extension, [RFC2560] is\n   unclear about its encoding; for clarification,\
    \ the nonce MUST be a\n   DER-encoded OCTET STRING, which is encapsulated as another\
    \ OCTET\n   STRING (note that implementations based on an existing OCSP client\n\
    \   will need to be checked for conformance to this requirement).  This\n   has\
    \ been clarified in [RFC6960].\n   The items in the list of CertificateStatusRequestItemV2\
    \ entries are\n   ordered according to the client's preference (favorite choice\
    \ first).\n   A server that receives a client hello containing the\n   \"status_request_v2\"\
    \ extension MAY return a suitable certificate\n   status response message to the\
    \ client along with the server's\n   certificate message.  If OCSP is requested,\
    \ it SHOULD use the\n   information contained in the extension when selecting\
    \ an OCSP\n   responder and SHOULD include request_extensions in the OCSP request.\n\
    \   The server returns a certificate status response along with its\n   certificate\
    \ by sending a \"CertificateStatus\" message (originally\n   defined by [RFC6066])\
    \ immediately after the \"Certificate\" message\n   (Section 7.4.2 of [RFC5246])\
    \ (and before any \"ServerKeyExchange\" or\n   \"CertificateRequest\" messages).\
    \  If a server returns a\n   \"CertificateStatus\" message in response to a \"\
    status_request_v2\"\n   request, then the server MUST have included an extension\
    \ of type\n   \"status_request_v2\" with empty \"extension_data\" in the extended\n\
    \   server hello.\n   The \"CertificateStatus\" message is conveyed using the\
    \ handshake\n   message type \"certificate_status\" (defined in [RFC6066]) as\
    \ follows\n   (updated from the definition in [RFC6066]):\n     struct {\n   \
    \    CertificateStatusType status_type;\n       select (status_type) {\n     \
    \    case ocsp: OCSPResponse;\n         case ocsp_multi: OCSPResponseList;\n \
    \      } response;\n     } CertificateStatus;\n     opaque OCSPResponse<0..2^24-1>;\n\
    \     struct {\n       OCSPResponse ocsp_response_list<1..2^24-1>;\n     } OCSPResponseList;\n\
    \   An \"OCSPResponse\" element (originally defined by [RFC6066]) contains\n \
    \  a complete, DER-encoded OCSP response (using the ASN.1 [X.680] type\n   OCSPResponse\
    \ defined in [RFC6960]).  Only one OCSP response, with a\n   length of at least\
    \ one byte, may be sent for status_type \"ocsp\".\n   An \"ocsp_response_list\"\
    \ contains a list of \"OCSPResponse\" elements,\n   as specified above, each containing\
    \ the OCSP response for the\n   matching corresponding certificate in the server's\
    \ Certificate TLS\n   handshake message.  That is, the first entry is the OCSP\
    \ response for\n   the first certificate in the Certificate list, the second entry\
    \ is\n   the response for the second certificate, and so on.  The list MAY\n \
    \  contain fewer OCSP responses than there were certificates in the\n   Certificate\
    \ handshake message, but there MUST NOT be more responses\n   than there were\
    \ certificates in the list.  Individual elements of the\n   list MAY have a length\
    \ of 0 (zero) bytes if the server does not have\n   the OCSP response for that\
    \ particular certificate stored, in which\n   case the client MUST act as if a\
    \ response was not received for that\n   particular certificate.  If the client\
    \ receives a\n   \"ocsp_response_list\" that does not contain a response for one\
    \ or more\n   of the certificates in the completed certificate chain, the client\n\
    \   SHOULD attempt to validate the certificate using an alternative\n   retrieval\
    \ method, such as downloading the relevant CRL; OCSP SHOULD\n   in this situation\
    \ only be used for the end-entity certificate, not\n   intermediate CA certificates,\
    \ for reasons stated above.\n   Note that a server MAY also choose not to send\
    \ a \"CertificateStatus\"\n   message, even if it has received a \"status_request_v2\"\
    \ extension in\n   the client hello message and has sent a \"status_request_v2\"\
    \ extension\n   in the server hello message.  Additionally, note that a server\
    \ MUST\n   NOT send the \"CertificateStatus\" message unless it received either\
    \ a\n   \"status_request\" or \"status_request_v2\" extension in the client hello\n\
    \   message and sent a corresponding \"status_request\" or\n   \"status_request_v2\"\
    \ extension in the server hello message.\n   Clients requesting an OCSP response\
    \ and receiving one or more OCSP\n   responses in a \"CertificateStatus\" message\
    \ MUST check the OCSP\n   response(s) and abort the handshake if the response\
    \ is a \"revoked\"\n   status or other unacceptable responses (as determined by\
    \ client\n   policy) with a bad_certificate_status_response(113) alert.  This\n\
    \   alert is always fatal.\n   If the OCSP response received from the server does\
    \ not result in a\n   definite \"good\" or \"revoked\" status, it is inconclusive.\
    \  A TLS\n   client in such a case MAY check the validity of the server\n   certificate\
    \ through other means, e.g., by directly querying the\n   certificate issuer.\
    \  If such processing still results in an\n   inconclusive response, then the\
    \ application using the TLS connection\n   will have to decide whether to close\
    \ the connection or not.  Note\n   that this problem cannot be decided by the\
    \ generic TLS client code\n   without information from the application.  If the\
    \ application doesn't\n   provide any such information, then the client MUST abort\
    \ the\n   connection, since the server certificate has not been sufficiently\n\
    \   validated.\n   An example of where the application might wish to continue\
    \ is with\n   EAP-TLS (Extensible Authentication Protocol - TLS), where the\n\
    \   application can use another mechanism to check the status of a\n   certificate\
    \ once it obtains network access.  In this case, the\n   application could have\
    \ the client continue with the handshake, but it\n   MUST NOT disclose a username\
    \ and password until it has fully\n   validated the server certificate.\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   Section 2.1 defines the new TLS extension status_request_v2\
    \ (17)\n   enum, which has been added to the \"ExtensionType Values\" list in\
    \ the\n   IANA \"Transport Layer Security (TLS) Extensions\" registry.\n   Section\
    \ 2.2 describes a TLS CertificateStatusType registry that is\n   now maintained\
    \ by IANA.  The \"TLS Certificate Status Types\" registry\n   has been created\
    \ under the \"Transport Layer Security (TLS)\n   Extensions\" registry.  CertificateStatusType\
    \ values are to be\n   assigned via IETF Review as defined in [RFC5226].  The\
    \ initial\n   registry corresponds to the definition of \"CertificateStatusType\"\
    \ in\n   Section 2.2.\n   Value   Description   Reference\n   -----------------------------------------\n\
    \   0       Reserved      [RFC6961]\n   1       ocsp          [RFC6066] [RFC6961]\n\
    \   2       ocsp_multi    [RFC6961]\n   3-255   Unassigned\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   General security considerations for TLS extensions\
    \ are covered in\n   [RFC5246].  Security considerations for the particular extension\n\
    \   specified in this document are given below.  In general, implementers\n  \
    \ should continue to monitor the state of the art and address any\n   weaknesses\
    \ identified.\n"
- title: 4.1.  Security Considerations for status_request_v2
  contents:
  - "4.1.  Security Considerations for status_request_v2\n   If a client requests\
    \ an OCSP response, it must take into account that\n   an attacker's server using\
    \ a compromised key could (and probably\n   would) pretend not to support the\
    \ extension.  In this case, a client\n   that requires OCSP validation of certificates\
    \ SHOULD either contact\n   the OCSP server directly or abort the handshake.\n\
    \   Use of the OCSP nonce request extension (id-pkix-ocsp-nonce) may\n   improve\
    \ security against attacks that attempt to replay OCSP\n   responses; see Section\
    \ 4.4.1 of [RFC6960] for further details.\n   This extension allows the client\
    \ to send arbitrary data to the\n   server.  The server implementers need to handle\
    \ such data carefully\n   to avoid introducing security vulnerabilities.\n   The\
    \ security considerations of [RFC6960] apply to OCSP requests and\n   responses.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document is based on [RFC6066], authored by Donald\
    \ Eastlake 3rd.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n\
    \              May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August\
    \ 2008.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n \
    \             Housley, R., and W. Polk, \"Internet X.509 Public Key\n        \
    \      Infrastructure Certificate and Certificate Revocation List\n          \
    \    (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6066]  Eastlake, D., \"Transport\
    \ Layer Security (TLS) Extensions:\n              Extension Definitions\", RFC\
    \ 6066, January 2011.\n   [RFC6960]  Santesson, S., Myers, M., Ankney, R., Malpani,\
    \ A.,\n              Galperin, S., and C. Adams, \"X.509 Internet Public Key\n\
    \              Infrastructure Online Certificate Status Protocol - OCSP\",\n \
    \             RFC 6960, June 2013.\n   [X.680]    ITU-T Recommendation X.680 (2008)\
    \ | ISO/IEC 8824-1:2008,\n              \"Abstract Syntax Notation One (ASN.1):\
    \ Specification of\n              basic notation\", November 2008.\n   [X.690]\
    \    ITU-T Recommendation X.690 (2008) | ISO/IEC 8825-1:2008,\n              \"\
    ASN.1 encoding rules: Specification of Basic Encoding\n              Rules (BER),\
    \ Canonical Encoding Rules (CER) and\n              Distinguished Encoding Rules\
    \ (DER)\", November 2008.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC2560]  Myers, M., Ankney, R., Malpani, A.,\
    \ Galperin, S., and C.\n              Adams, \"X.509 Internet Public Key Infrastructure\
    \ Online\n              Certificate Status Protocol - OCSP\", RFC 2560, June 1999.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Yngve N. Pettersen\n   EMail: yngve@spec-work.net\n"
