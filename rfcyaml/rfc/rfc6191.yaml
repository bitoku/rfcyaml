- title: __initial_text__
  contents:
  - '           Reducing the TIME-WAIT State Using TCP Timestamps

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an algorithm for processing incoming SYN\n\
    \   segments that allows higher connection-establishment rates between\n   any\
    \ two TCP endpoints when a TCP Timestamps option is present in the\n   incoming\
    \ SYN segment.  This document only modifies processing of SYN\n   segments received\
    \ for connections in the TIME-WAIT state; processing\n   in all other states is\
    \ unchanged.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6191.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Improved Processing of Incoming Connection Requests \
    \ . . . . .  3\n   3.  Interaction with Various Timestamp Generation Algorithms\
    \ . . .  6\n   4.  Interaction with Various ISN Generation Algorithms . . . .\
    \ . .  7\n   5.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \ .  7\n   6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . .\
    \  7\n   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \     7.1.  Normative References . . . . . . . . . . . . . . . . . . .  8\n  \
    \   7.2.  Informative References . . . . . . . . . . . . . . . . . .  8\n   Appendix\
    \ A.  Behavior of the Proposed Mechanism in Specific\n                Scenarios\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n     A.1.  Connection Request\
    \ after System Reboot . . . . . . . . . . 10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Timestamps option, specified in RFC 1323 [RFC1323],\
    \ allows a TCP\n   to include a timestamp value in its segments that can be used\
    \ to\n   perform two functions: Round-Trip Time Measurement (RTTM) and\n   Protection\
    \ Against Wrapped Sequences (PAWS).\n   For the purpose of PAWS, the timestamps\
    \ sent on a connection are\n   required to be monotonically increasing.  While\
    \ there is no\n   requirement that timestamps are monotonically increasing across\
    \ TCP\n   connections, the generation of timestamps such that they are\n   monotonically\
    \ increasing across connections between the same two\n   endpoints allows the\
    \ use of timestamps for improving the handling of\n   SYN segments that are received\
    \ while the corresponding four-tuple is\n   in the TIME-WAIT state.  That is,\
    \ the Timestamps option could be used\n   to perform heuristics to determine whether\
    \ to allow the creation of a\n   new incarnation of a connection that is in the\
    \ TIME-WAIT state.\n   This use of TCP timestamps is simply an extrapolation of\
    \ the use of\n   Initial Sequence Numbers (ISNs) for the same purpose, as allowed\
    \ by\n   RFC 1122 [RFC1122], and it has been incorporated in a number of TCP\n\
    \   implementations, such as that included in the Linux kernel [Linux].\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
- title: 2.  Improved Processing of Incoming Connection Requests
  contents:
  - "2.  Improved Processing of Incoming Connection Requests\n   In a number of scenarios,\
    \ a socket pair may need to be reused while\n   the corresponding four-tuple is\
    \ still in the TIME-WAIT state in a\n   remote TCP peer.  For example, a client\
    \ accessing some service on a\n   host may try to create a new incarnation of\
    \ a previous connection,\n   while the corresponding four-tuple is still in the\
    \ TIME-WAIT state at\n   the remote TCP peer (the server).  This may happen if\
    \ the ephemeral\n   port numbers are being reused too quickly, either because\
    \ of a bad\n   policy of selection of ephemeral ports, or simply because of a\
    \ high\n   connection rate to the corresponding service.  In such scenarios, the\n\
    \   establishment of new connections that reuse a four-tuple that is in\n   the\
    \ TIME-WAIT state would fail.  This problem is discussed in detail\n   in [INFOCOM-99].\n\
    \   In order to avoid this problem, Section 4.2.2.13 of RFC 1122\n   [RFC1122]\
    \ states that when a connection request is received with a\n   four-tuple that\
    \ is in the TIME-WAIT state, the connection request may\n   be accepted if the\
    \ sequence number of the incoming SYN segment is\n   greater than the last sequence\
    \ number seen on the previous\n   incarnation of the connection (for that direction\
    \ of the data\n   transfer).  The goal of this requirement is to prevent the overlap\
    \ of\n   the sequence number spaces of the old and new incarnations of the\n \
    \  connection so that segments from the old incarnation are not accepted\n   as\
    \ valid by the new incarnation.\n   The same policy may be extrapolated to TCP\
    \ timestamps.  That is, when\n   a connection request is received with a four-tuple\
    \ that is in the\n   TIME-WAIT state, the connection request could be accepted\
    \ if the\n   timestamp of the incoming SYN segment is greater than the last\n\
    \   timestamp seen on the previous incarnation of the connection (for\n   that\
    \ direction of the data transfer).\n   The following paragraphs summarize the\
    \ processing of SYN segments\n   received for connections in the TIME-WAIT state.\
    \  The processing of\n   SYN segments received for connections in all other states\
    \ is\n   unchanged.  Both the ISN (Initial Sequence Number) and the Timestamps\n\
    \   option (if present) of the incoming SYN segment are included in the\n   heuristics\
    \ performed for allowing a high connection-establishment\n   rate.\n   Processing\
    \ of SYN segments received for connections in the TIME-WAIT\n   state SHOULD occur\
    \ as follows:\n   o  If the previous incarnation of the connection used Timestamps,\n\
    \      then:\n      *  If TCP Timestamps would be enabled for the new incarnation\
    \ of\n         the connection, and the timestamp contained in the incoming SYN\n\
    \         segment is greater than the last timestamp seen on the previous\n  \
    \       incarnation of the connection (for that direction of the data\n      \
    \   transfer), honor the connection request (creating a connection\n         in\
    \ the SYN-RECEIVED state).\n      *  If TCP Timestamps would be enabled for the\
    \ new incarnation of\n         the connection, the timestamp contained in the\
    \ incoming SYN\n         segment is equal to the last timestamp seen on the previous\n\
    \         incarnation of the connection (for that direction of the data\n    \
    \     transfer), and the Sequence Number of the incoming SYN segment\n       \
    \  is greater than the last sequence number seen on the previous\n         incarnation\
    \ of the connection (for that direction of the data\n         transfer), honor\
    \ the connection request (creating a connection\n         in the SYN-RECEIVED\
    \ state).\n      *  If TCP Timestamps would not be enabled for the new incarnation\n\
    \         of the connection, but the Sequence Number of the incoming SYN\n   \
    \      segment is greater than the last sequence number seen on the\n        \
    \ previous incarnation of the connection (for the same direction\n         of\
    \ the data transfer), honor the connection request (creating a\n         connection\
    \ in the SYN-RECEIVED state).\n      *  Otherwise, silently drop the incoming\
    \ SYN segment, thus leaving\n         the previous incarnation of the connection\
    \ in the TIME-WAIT\n         state.\n   o  If the previous incarnation of the\
    \ connection did not use\n      Timestamps, then:\n      *  If TCP Timestamps\
    \ would be enabled for the new incarnation of\n         the connection, honor\
    \ the incoming connection request (creating\n         a connection in the SYN-RECEIVED\
    \ state).\n      *  If TCP Timestamps would not be enabled for the new incarnation\n\
    \         of the connection, but the Sequence Number of the incoming SYN\n   \
    \      segment is greater than the last sequence number seen on the\n        \
    \ previous incarnation of the connection (for the same direction\n         of\
    \ the data transfer), honor the incoming connection request\n         (creating\
    \ a connection in the SYN-RECEIVED state).\n      *  Otherwise, silently drop\
    \ the incoming SYN segment, thus leaving\n         the previous incarnation of\
    \ the connection in the TIME-WAIT\n         state.\n   Note:\n      In the above\
    \ explanation, the phrase \"TCP Timestamps would be\n      enabled for the new\
    \ incarnation for the connection\" means that the\n      incoming SYN segment\
    \ contains a TCP Timestamps option (i.e., the\n      client has enabled TCP Timestamps),\
    \ and that the SYN/ACK segment\n      that would be sent in response to it would\
    \ also contain a\n      Timestamps option (i.e., the server has enabled TCP Timestamps).\n\
    \      In such a scenario, TCP Timestamps would be enabled for the new\n     \
    \ incarnation of the connection.\n      The \"last sequence number seen on the\
    \ previous incarnation of the\n      connection (for the same direction of the\
    \ data transfer)\" refers\n      to the last sequence number used by the previous\
    \ incarnation of\n      the connection (for the same direction of the data transfer),\
    \ and\n      not to the last value seen in the Sequence Number field of the\n\
    \      corresponding segments.  That is, it refers to the sequence number\n  \
    \    corresponding to the FIN flag of the previous incarnation of the\n      connection,\
    \ for that direction of the data transfer.\n   Many implementations do not include\
    \ the TCP Timestamps option when\n   performing the above heuristics, thus imposing\
    \ stricter constraints\n   on the generation of Initial Sequence Numbers, the\
    \ average data\n   transfer rate of the connections, and the amount of data transferred\n\
    \   with them.  RFC 793 [RFC0793] states that the ISN generator should be\n  \
    \ incremented roughly once every four microseconds (i.e., roughly\n   250,000\
    \ times per second).  As a result, any connection that\n   transfers more than\
    \ 250,000 bytes of data at more than 250 kilobytes/\n   second could lead to scenarios\
    \ in which the last sequence number seen\n   on a connection that moves into the\
    \ TIME-WAIT state is still greater\n   than the sequence number of an incoming\
    \ SYN segment that aims at\n   creating a new incarnation of the same connection.\
    \  In those\n   scenarios, the ISN heuristics would fail, and therefore the\n\
    \   connection request would usually time out.  By including the TCP\n   Timestamps\
    \ option in the heuristics described above, all these\n   constraints are greatly\
    \ relaxed.\n   It is clear that the use of TCP timestamps for the heuristics\n\
    \   described above benefit from timestamps that are monotonically\n   increasing\
    \ across connections between the same two TCP endpoints.\n   Note:\n      The\
    \ upcoming revision of RFC 1323, [1323bis], recommends the\n      selection of\
    \ timestamps such that they are monotonically\n      increasing across connections.\
    \  An example of such a timestamp\n      generation scheme can be found in [TS-Generation].\n"
- title: 3.  Interaction with Various Timestamp Generation Algorithms
  contents:
  - "3.  Interaction with Various Timestamp Generation Algorithms\n   The algorithm\
    \ proposed in Section 2 clearly benefits from timestamps\n   that are monotonically\
    \ increasing across connections to the same\n   endpoint.  In particular, generation\
    \ of timestamps such that they are\n   monotonically increasing is important for\
    \ TCP instances that perform\n   the active open, as those are the timestamps\
    \ that will be used for\n   the proposed algorithm.\n   While monotonically increasing\
    \ timestamps ensure that the proposed\n   algorithm will be able to reduce the\
    \ TIME-WAIT state of a previous\n   incarnation of a connection, implementation\
    \ of the algorithm (by\n   itself) does not imply a requirement on the timestamp\
    \ generation\n   algorithm of other TCP implementations.\n   In the worst-case\
    \ scenario, an incoming SYN corresponding to a new\n   incarnation of a connection\
    \ in the TIME-WAIT contains a timestamp\n   that is smaller than the last timestamp\
    \ seen on the previous\n   incarnation of the connection, the heuristics fail,\
    \ and the result is\n   no worse than the current state of affairs.  That is,\
    \ the SYN segment\n   is ignored (as specified in [RFC1337]), and thus the connection\n\
    \   request times out, or is accepted after future retransmissions of the\n  \
    \ SYN.\n   Some stacks may implement timestamp generation algorithms that do not\n\
    \   lead to monotonically increasing timestamps across connections with\n   the\
    \ same remote endpoint.  An example of such algorithms is the one\n   described\
    \ in [RFC4987] and [Opperman], which allows the\n   implementation of extended\
    \ TCP SYN cookies.\n   Note:\n      It should be noted that the \"extended TCP\
    \ SYN cookies\" could\n      coexist with an algorithm for generating timestamps\
    \ such that they\n      are monotonically increasing.  Monotonically increasing\
    \ timestamps\n      could be generated for TCP instances that perform the active\
    \ open,\n      while timestamps for TCP instances that perform the passive open\n\
    \      could be generated according to [Opperman].\n   Some stacks (notably OpenBSD)\
    \ implement timestamp randomization\n   algorithms which do not result in monotonically\
    \ increasing ISNs\n   across connections.  As noted in [Silbersack], such randomization\n\
    \   schemes may prevent the mechanism proposed in this document from\n   recycling\
    \ connections that are in the TIME-WAIT state.  However, as\n   noted earlier\
    \ in this section in the worst-case scenario, the\n   heuristics fail, and the\
    \ result is no worse than the current state of\n   affairs.\n"
- title: 4.  Interaction with Various ISN Generation Algorithms
  contents:
  - "4.  Interaction with Various ISN Generation Algorithms\n   [RFC0793] suggests\
    \ that the ISNs of TCP connections be generated from\n   a global timer, such\
    \ that they are monotonically increasing across\n   connections.  However, this\
    \ ISN-generation scheme leads to\n   predictable ISNs, which have well-known security\
    \ implications\n   [CPNI-TCP].  [RFC1948] proposes an alternative ISN-generation\
    \ scheme\n   that results in monotonically increasing ISNs across connections\
    \ that\n   are not easily predictable by an off-path attacker.\n   Some stacks\
    \ (notably OpenBSD) implement ISN randomization algorithms\n   which do not result\
    \ in monotonically increasing ISNs across\n   connections.  As noted in [Silbersack],\
    \ such ISN randomization\n   schemes break BSD's improved handling of SYN segments\
    \ received for\n   connections that are in the TIME-WAIT state.\n   An implementation\
    \ of the mechanism proposed in this document would\n   enable recycling of the\
    \ TIME-WAIT state even in the presence of ISNs\n   that are not monotonically\
    \ increasing across connections, except when\n   the timestamp contained in the\
    \ incoming SYN is equal to the last\n   timestamp seen on the connection in the\
    \ TIME-WAIT state (for that\n   direction of the data transfer).\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   [TCP-Security] contains a detailed discussion\
    \ of the security\n   implications of TCP Timestamps and of different timestamp\
    \ generation\n   algorithms.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document is based on part of the contents of the\
    \ technical\n   report \"Security Assessment of the Transmission Control Protocol\n\
    \   (TCP)\" [CPNI-TCP] written by Fernando Gont on behalf of the United\n   Kingdom's\
    \ Centre for the Protection of National Infrastructure (UK\n   CPNI).\n   The\
    \ author of this document would like to thank (in alphabetical\n   order) Mark\
    \ Allman, Francis Dupont, Wesley Eddy, Lars Eggert, John\n   Heffner, Alfred Hoenes,\
    \ Christian Huitema, Eric Rescorla, Joe Touch,\n   and Alexander Zimmermann for\
    \ providing valuable feedback on an\n   earlier version of this document.\n  \
    \ Additionally, the author would like to thank David Borman for a\n   fruitful\
    \ discussion on TCP Timestamps at IETF 73.\n   Finally, the author would like\
    \ to thank the United Kingdom's Centre\n   for the Protection of National Infrastructure\
    \ (UK CPNI) for their\n   continued support.\n   Fernando Gont's attendance to\
    \ IETF meetings was supported by ISOC's\n   \"Fellowship to the IETF\" program.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC0793]        Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n                    RFC 793, September 1981.\n   [RFC1122]\
    \        Braden, R., \"Requirements for Internet Hosts -\n                   \
    \ Communication Layers\", STD 3, RFC 1122,\n                    October 1989.\n\
    \   [RFC1323]        Jacobson, V., Braden, B., and D. Borman, \"TCP\n        \
    \            Extensions for High Performance\", RFC 1323,\n                  \
    \  May 1992.\n   [RFC2119]        Bradner, S., \"Key words for use in RFCs to\
    \ Indicate\n                    Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [1323bis]        Borman, D., Braden, R., and\
    \ V. Jacobson, \"TCP\n                    Extensions for High Performance\", Work\
    \ in Progress,\n                    March 2009.\n   [CPNI-TCP]       CPNI, \"\
    Security Assessment of the Transmission\n                    Control Protocol\
    \ (TCP)\", 2009,\n                    <http://www.cpni.gov.uk/Docs/\n        \
    \            tn-03-09-security-assessment-TCP.pdf>.\n   [INFOCOM-99]     Faber,\
    \ T., Touch, J., and W. Yue, \"The TIME-WAIT\n                    state in TCP\
    \ and Its Effect on Busy Servers\", Proc.\n                    IEEE Infocom, 1999,\
    \ pp. 1573-1583.\n   [Linux]          Linux Kernel Organization, \"The Linux Kernel\n\
    \                    Archives\", <http://www.kernel.org>.\n   [Opperman]     \
    \  Oppermann, A., \"FYI: Extended TCP syncookies in\n                    FreeBSD-current\"\
    , post to the tcpm mailing list,\n                    September 2006, <http://www.ietf.org/mail-archive/\n\
    \                    web/tcpm/current/msg02251.html>.\n   [RFC1337]        Braden,\
    \ B., \"TIME-WAIT Assassination Hazards in\n                    TCP\", RFC 1337,\
    \ May 1992.\n   [RFC1948]        Bellovin, S., \"Defending Against Sequence Number\n\
    \                    Attacks\", RFC 1948, May 1996.\n   [RFC4987]        Eddy,\
    \ W., \"TCP SYN Flooding Attacks and Common\n                    Mitigations\"\
    , RFC 4987, August 2007.\n   [Silbersack]     Silbersack, M., \"Improving TCP/IP\
    \ security through\n                    randomization without sacrificing interoperability\"\
    ,\n                    EuroBSDCon 2005.\n   [TCP-Security]   Gont, F., \"Security\
    \ Assessment of the Transmission\n                    Control Protocol (TCP)\"\
    , Work in Progress,\n                    January 2011.\n   [TS-Generation]  Gont,\
    \ F. and A. Oppermann, \"On the generation of TCP\n                    timestamps\"\
    , Work in Progress, June 2010.\n"
- title: Appendix A.  Behavior of the Proposed Mechanism in Specific Scenarios
  contents:
  - 'Appendix A.  Behavior of the Proposed Mechanism in Specific Scenarios

    '
- title: A.1.  Connection Request after System Reboot
  contents:
  - "A.1.  Connection Request after System Reboot\n   This section clarifies how this\
    \ algorithm would operate in case a\n   computer reboots, keeps the same IP address,\
    \ loses memory of the\n   previous timestamps, and then tries to reestablish a\
    \ previous\n   connection.\n   Firstly, as specified in [RFC0793], hosts must\
    \ not establish new\n   connections for a period of 2*MSL (Maximum Segment Lifetime)\
    \ after\n   they boot (this is the \"quiet time\" concept).  As a result, in terms\n\
    \   of specifications, this scenario should never occur.\n   If a host does not\
    \ comply with the \"quiet time concept\", a connection\n   request might be sent\
    \ to a remote host while there is a previous\n   incarnation of the same connection\
    \ in the TIME-WAIT state at the\n   remote host.  In such a scenario, as a result\
    \ of having lost memory\n   of previous timestamps, the resulting timestamps might\
    \ not be\n   monotonically increasing, and hence the proposed algorithm might\
    \ be\n   unable to recycle the previous incarnation of the connection that is\n\
    \   in the TIME-WAIT state.  This case corresponds to the current state\n   of\
    \ affairs without the algorithm proposed in this document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fernando Gont\n   UK Centre for the Protection of National\
    \ Infrastructure\n   EMail: fernando@gont.com.ar\n   URI:   http://www.cpni.gov.uk\n"
