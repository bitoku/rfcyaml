- title: __initial_text__
  contents:
  - "               Pseudo Content Delivery Protocol (CDP) for\n                Protecting\
    \ Multiple Source Flows in the\n                Forward Error Correction (FEC)\
    \ Framework\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a pseudo Content Delivery Protocol (CDP)\
    \ to\n   protect multiple source flows with one or more repair flows based on\n\
    \   the Forward Error Correction (FEC) Framework and the Session\n   Description\
    \ Protocol (SDP) elements defined for the framework.  The\n   purpose of the document\
    \ is not to provide a full-fledged protocol but\n   to show how the defined framework\
    \ and SDP elements can be combined\n   together to implement a CDP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6801.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Definitions/Abbreviations .......................................3\n  \
    \ 3. Construction of a Repair Flow from Multiple Source Flows ........3\n    \
    \  3.1. Example: Two Source Flows Protected by a Single\n           Repair Flow\
    \ ................................................6\n   4. Reconstruction of Source\
    \ Flows from Repair Flow(s) ..............9\n      4.1. Example: Multiple Source\
    \ Flows Protected by a\n           Single Repair Flow .........................................9\n\
    \   5. Security Considerations ........................................10\n  \
    \ 6. Acknowledgments ................................................10\n   7.\
    \ Normative References ...........................................11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Forward Error Correction (FEC) Framework (described\
    \ in [RFC6363])\n   and SDP Elements for FEC Framework (described in [RFC6364])\
    \ together\n   define mechanisms sufficient enough to build an actual Content\n\
    \   Delivery Protocol (CDP) with FEC protection.  Methods to convey FEC\n   Framework\
    \ Configuration Information (described in [RFC6695]), on the\n   other hand, provide\
    \ the signaling protocols that may be used as part\n   of CDP to communicate FEC-Scheme-Specific\
    \ Information from FEC sender\n   to a single as well as multiple FEC receivers.\
    \  This document\n   provides a guideline on how the mechanisms defined in [RFC6363]\
    \ and\n   [RFC6364] can be sufficiently used to design a CDP over a non-trivial\n\
    \   scenario, namely, protection of multiple source flows with one or\n   more\
    \ repair flows.\n   In particular, we provide clarifications and descriptions\
    \ on how:\n   o  source and repair flows may be uniquely identified,\n   o  source\
    \ blocks may be generated from one or more source flows,\n   o  repair flows may\
    \ be paired with the source flows,\n   o  the receiver explicitly and implicitly\
    \ identifies individual\n      flows, and\n   o  source blocks are regenerated\
    \ at the receiver and the missing\n      source symbols in a source block are\
    \ recovered.\n"
- title: 2.  Definitions/Abbreviations
  contents:
  - "2.  Definitions/Abbreviations\n   This document uses all the definitions and\
    \ abbreviations from Section\n   2 of [RFC6363] minus the RFC 2119 requirements\
    \ language.\n"
- title: 3.  Construction of a Repair Flow from Multiple Source Flows
  contents:
  - "3.  Construction of a Repair Flow from Multiple Source Flows\n   At the sender\
    \ side, CDP constructs the source blocks (SBs) by\n   multiplexing transport payloads\
    \ from multiple flows (see Figures 1\n   and 2).  According to the FEC Framework,\
    \ each source block is FEC-\n   protected separately.  Each source block is given\
    \ to the specific FEC\n   encoder used within the CDP as input and as the outputs\
    \ Explicit\n   Source FEC Payload ID, Repair FEC Payload ID, and Repair Payloads\n\
    \   corresponding to that source block are generated.  Note that the\n   Explicit\
    \ Source FEC Payload ID is optional, and if the CDP has an\n   implicit means\
    \ of constructing the source block at the sender/\n   receiver (e.g., by using\
    \ any existing sequence numbers in the\n   payload), the Explicit Source FEC Payload\
    \ ID might not be output.\n                 +------------+\n   s_1 --------> |\
    \            |\n    .   Source   | Source     |      +--------+ +--------+ +--------+\n\
    \    .   Flows    | Block      |==> ..|SB_(j+1)| |  SB_j  | |SB_(j-1)| ..\n  \
    \ s_n --------> | Generation |      +--------+ +--------+ +--------+\n       \
    \          +------------+\n            Figure 1: Source Block Generation for a\
    \ FEC Scheme\n   Figure 2 shows the structure of a source block.  A CDP must clearly\n\
    \   specify which payload corresponds to which source flow and the length\n  \
    \ of each payload.\n         <------------------ Source Block (SB) ------------------->\n\
    \         +-------...-----+-------...-----+-      -+-------...-----+\n       \
    \  |   Payload_1   |   Payload_2   |  . . . |   Payload_n   |\n         +-------...-----+-------...-----+-\
    \      -+-------...-----+\n         \\______  _______|______  _______|       \
    \ |______  _______|\n                \\/              \\/                    \
    \   \\/\n            FID_1,Len_1     FID_2,Len_2              FID_n,Len_n\n  \
    \                 Figure 2: Structure of a Source Block\n   The Flow ID (FID)\
    \ value provides a unique shorthand identifier for\n   the source flows.  FID\
    \ is specified and associated with the possibly\n   wildcarded tuple of {source\
    \ IP address, source port, destination IP\n   address, destination port, transport\
    \ protocol} in the SDP\n   description.  When wildcarded, certain fields in the\
    \ tuple are not\n   needed for distinguishing the source flows.  The tuple is\
    \ carried in\n   the IP and transport headers of the source packets.  Since FID\
    \ is\n   utilized by the CDP and FEC scheme to distinguish between the source\n\
    \   packets, the tuple must have a one-to-one mapping to a valid FID.\n   This\
    \ point will be clearer in the specific example given later in\n   this section.\
    \  The length of FID must be a priori fixed and known to\n   both the receiver\
    \ and sender.  Alternatively, it might be specified\n   in the FEC-Scheme-Specific\
    \ Information field in the SDP element\n   [RFC6364].\n   The payload length (Len)\
    \ information is needed to figure out how many\n   bits, bytes, or symbols (depending\
    \ on the FEC scheme) from a\n   particular source flow are included in the source\
    \ block.  If the\n   payload is not an integer multiple of the specified symbol\
    \ length,\n   the remaining portion is padded with zeros (see Figures 3 and 4).\n\
    \                                                 +------+\n         +--------+\
    \ +--------+ +--------+        |      | -------> r_1\n      .. |SB_(j+1)| |  SB_j\
    \  | |SB_(j-1)| .. ==> | FEC  |  Repair   .\n         +--------+ +--------+ +--------+\
    \        |Scheme|  Flows    .\n                                              \
    \   |      | -------> r_k\n                                                 +------+\n\
    \             Figure 3: Repair Flow Generation by a FEC Scheme\n        <------------------\
    \ Source Block (SB) ------------------->\n        |          |          |    \
    \      |              |          |\n        +-------...-----+-------...-----+-\
    \      -+-------...-----+ |\n        |   Payload_1   |   Payload_2   |  . . .\
    \ |   Payload_n   |0|\n        +-------...-----+-------...-----+-      -+-------...-----+\
    \ |\n        |          |          |          |              |          |\n  \
    \      | Symbol_1 | Symbol_2 | Symbol_3 |      . . .   | Symbol_m |\n        |<-------->|<-------->|<-------->|\
    \              |<-------->|\n                                +------+\n      \
    \  Symbol_1,..,Symbol_m => | FEC  | => Symbol_u,..,Symbol_1\n                \
    \                | Enc. |\n                                +------+\n        \
    \         Figure 4: Repair Flow Payload Generation\n   FEC schemes typically expect\
    \ a source block of certain size, say, m\n   symbols.  Therefore, the FEC encoder\
    \ divides each source block into m\n   symbols (with some padding if the source\
    \ block is shorter than the\n   expected m symbols) and generates u repair symbols,\
    \ which are\n   functions of the m symbols in the original source block.  The\
    \ repair\n   symbols are grouped by the FEC scheme into repair payloads with each\n\
    \   repair payload assigned a Repair FEC Payload ID in order to associate\n  \
    \ each repair payload with a particular source block at the receiver.\n   If the\
    \ payloads in a given source block have sequence numbers that\n   can uniquely\
    \ specify their location in the source block, an Explicit\n   Source FEC Payload\
    \ ID may not be generated for these payloads.\n   Otherwise, Explicit Source FEC\
    \ Payload IDs are generated for each\n   payload and indicate the order the payloads\
    \ appear in the source\n   block.\n   Note that FID and length information are\
    \ not actually transmitted\n   with the source payloads since both information\
    \ can be gathered by\n   other means as it will be clear in the next sections.\n"
- title: '3.1.  Example: Two Source Flows Protected by a Single Repair Flow'
  contents:
  - "3.1.  Example: Two Source Flows Protected by a Single Repair Flow\n   In this\
    \ section, we present an example of source flow and repair flow\n   generation\
    \ by the CDP.  We have two source flows with flow IDs of 0\n   and 1 to be protected\
    \ by a single repair flow (see Figure 5).  The\n   first source flow is multicast\
    \ to 233.252.0.1, and the second source\n   flow is multicast to 233.252.0.2.\
    \  Both flows use the port number\n   30000.\n                SOURCE FLOWS\n \
    \               S1: Source Flow |         | INSTANCE #1\n                    \
    \            |---------| R3: Repair Flow\n                S2: Source Flow |\n\
    \          Figure 5: Example: Two Source Flows and One Repair Flow\n   The SDP\
    \ description below states that the source flow defined by the\n   tuple {*,*,233.252.0.1,30000}\
    \ is identified with FID=0 and the source\n   flow defined by the tuple {*,*,233.252.0.2,30000}\
    \ is identified with\n   FID=1 (via the 'id' parameter of the \"fec-source-flow\"\
    \ attribute).\n   The SDP description also states that the repair flow is to be\n\
    \   received at the multicast address of 233.252.0.3 and at port 30000.\n    \
    \    v=0\n        o=ali 1122334455 1122334466 IN IP4 fec.example.com\n       \
    \ s=FEC Framework Examples\n        t=0 0\n        a=group:FEC-FR S1 S2 R3\n \
    \       m=video 30000 RTP/AVP 100\n        c=IN IP4 233.252.0.1/127\n        a=rtpmap:100\
    \ MP2T/90000\n        a=fec-source-flow: id=0\n        a=mid:S1\n        m=video\
    \ 30000 RTP/AVP 101\n        c=IN IP4 233.252.0.2/127\n        a=rtpmap:101 MP2T/90000\n\
    \        a=fec-source-flow: id=1\n        a=mid:S2\n        m=application 30000\
    \ UDP/FEC\n        c=IN IP4 233.252.0.3/127\n        a=fec-repair-flow: encoding-id=0;\
    \ ss-fssi=n:7,k:5\n        a=repair-window:150ms\n        a=mid:R3\n   Figure\
    \ 6 shows the first and the second source blocks (SB_1 and SB_2)\n   generated\
    \ from these two source flows.  In this example, SB_1 is of\n   length 10000 bytes.\
    \  Suppose that the FEC scheme uses a symbol length\n   of 512 bytes.  Then, SB_1\
    \ can be divided into 20 symbols after\n   padding the source block for 240 bytes.\
    \  Assume that the FEC scheme\n   is rate-2/3 erasure code; hence, it generates\
    \ 10 repair symbols from\n   20 original symbols for SB_1.  On the other hand,\
    \ SB_2 is 7000 bytes\n   long and can be divided into 14 symbols after padding\
    \ 168 bytes.\n   Using the same encoder, suppose that seven repair symbols are\n\
    \   generated for SB_2.\n                   <-------- Source Block 1 -------->\n\
    \                   +------------+-------------------+\n                   | $1\
    \ $2 $3 $4| #1 #2 #3 #4 #5 #6 | 0..00\n                   +------------+-------------------+\n\
    \                   \\__________________  __________________/\n              \
    \                        \\/\n                         @1 @2 @3 @4 @5 @6 @7 @8\
    \ @9 @10\n                   <---- Source Block 2 ---->\n                   +----------------+-------+\n\
    \                   | $5 $6 $7 $8 $9 | #7 #8 |0..00\n                   +----------------+-------+\n\
    \                   \\______________  _____________/\n                       \
    \           \\/\n                     @11 @12 @13 @14 @15 @16 @17\n          \
    \       $: 1000-byte payload from source flow 1\n                 #: 1000-byte\
    \ payload from source flow 2\n                 @: Repair symbol\n            \
    \   Figure 6: Source Block with Two Source Flows\n   The information on the unit\
    \ of payload length, FEC scheme, symbol\n   size, and coding rates can be specified\
    \ in the FEC-Scheme-Specific\n   Information (FSSI) field of the SDP element.\
    \  If the values of the\n   payload lengths from each source flow and the order\
    \ of appearance of\n   source flows in every source block are fixed during the\
    \ session,\n   these values may be also provided in the FSSI field.  To carry\
    \ FSSI\n   information to the FEC receivers, one may use the signaling methods\n\
    \   described in [RFC6695].  In our example, we will consider the case\n   where\
    \ the ordering is fixed and known both at the sender and the\n   receiver, but\
    \ the payload lengths will be variable from one source\n   block to another. \
    \ We assume that the payload of a source flow with\n   an FID smaller than another\
    \ flow's FID precedes other payloads in a\n   source block.\n   The FEC scheme\
    \ gets the source blocks as input and generates the\n   parity blocks for each\
    \ source block to protect the whole source\n   block.  In the example, the repair\
    \ payloads for SB_1 consist of 512-\n   byte symbols, denoted by @1 to @10.  Similarly,\
    \ @11 to @17\n   constitutes the repair payloads for SB_2.  The FEC scheme outputs\
    \ the\n   repair payloads along with the Repair FEC Payload IDs.  In our\n   example,\
    \ Repair FEC Payload ID provides information on the source\n   block sequence\
    \ number and the order the repair symbols are generated.\n   For instance, @3\
    \ is the third FEC repair symbol for SB_1, and the\n   three tuple {@3,SB_1,3}\
    \ can uniquely deliver this information.  In\n   our example, the FEC scheme also\
    \ provides Explicit Source FEC Payload\n   IDs that carry information to indicate\
    \ which source symbols\n   correspond to which source block sequence number and\
    \ the relative\n   position in the source block.  For instance, the two tuple\
    \ {SB_2,2}\n   can be attached to $6 as the Explicit Source FEC Payload ID to\n\
    \   indicate that $6 is protected together with packets belonging to\n   SB_2,\
    \ and $6 is the second payload in SB_2.\n   The source packets are generated from\
    \ the source symbols by\n   concatenating consecutive symbols in one packet. \
    \ There should not be\n   any fragmentation of a source symbol; e.g., symbols\
    \ #7 and #8 can be\n   concatenated in one transport payload of 2000 bytes (the\n\
    \   implementation should make sure that the size of the resulting source\n  \
    \ packet -- payload plus the overhead -- is not larger than the path\n   MTU),\
    \ but one portion of symbol #7 should not be put in one source\n   packet and\
    \ the remaining portion in another source packet.  The\n   simplest implementation\
    \ is to place each source symbol in a different\n   source packet as shown in\
    \ Figure 7.\n                   +------------------------------------+\n     \
    \              |      IP header {233.252.0.1}       |\n                   +------------------------------------+\n\
    \                   |      Transport header {30000}      |\n                 \
    \  +------------------------------------+\n                   |   Original Transport\
    \ Payload {$6}  |\n                   +------------------------------------+\n\
    \                   |   Source FEC Payload ID  {SB_2,2}  |\n                 \
    \  +------------------------------------+\n               Figure 7: Example of\
    \ a Source Packet for IPv4\n   The repair packets are generated from the repair\
    \ symbols belonging to\n   the same source block by grouping consecutive symbols\
    \ in one packet.\n   There should not be any fragmentation of a repair symbol;\
    \ e.g.,\n   symbols @4, @5, and @6 can be concatenated in one transport payload\n\
    \   of 1536 bytes, but @6 should not be divided into smaller sub-symbols\n   and\
    \ spread over multiple repair packets.  The Repair FEC Payload ID\n   must carry\
    \ sufficient information for the decoding process.  In our\n   example, for instance,\
    \ indicating source block sequence number,\n   length of each source payload,\
    \ and the order that the first parity\n   symbol in the repair packet among all\
    \ the parity symbols generated\n   for the same source block is sufficient.  The\
    \ exact header format of\n   Repair FEC Payload ID may be specified in the FSSI\
    \ field of the SDP\n   element.  In Figure 8, for instance, the repair symbols\
    \ @4, @5, and\n   @6 are concatenated together.  The Payload ID {SB_1,4,4,6} states\n\
    \   that the repair symbols protect SB_1, the first repair symbol in the\n   payload\
    \ is generated as the fourth symbol and the source block\n   consists of two source\
    \ flows carrying four and six packets from each.\n                   +------------------------------------+\n\
    \                   |      IP header {233.252.0.3}       |\n                 \
    \  +------------------------------------+\n                   |      Transport\
    \ header {30000}      |\n                   +------------------------------------+\n\
    \                   | Repair FEC Payload ID {SB_1,4,4,6} |\n                 \
    \  +------------------------------------+\n                   |      Repair Symbols\
    \ {@4,@5,@6}     |\n                   +------------------------------------+\n\
    \               Figure 8: Example of a Repair Packet for IPv4\n"
- title: 4.  Reconstruction of Source Flows from Repair Flow(s)
  contents:
  - "4.  Reconstruction of Source Flows from Repair Flow(s)\n   Here we provide an\
    \ example for reconstructing multiple source flows\n   from a single repair flow.\n"
- title: '4.1.  Example: Multiple Source Flows Protected by a Single Repair Flow'
  contents:
  - "4.1.  Example: Multiple Source Flows Protected by a Single Repair Flow\n   At\
    \ the receiver, source flows 1 and 2 are received at\n   {233.252.0.1,30000} and\
    \ {233.252.0.2,30000}, while the repair flow is\n   received at {233.252.0.3,30000}.\
    \  The CDP can map these tuples to the\n   flow IDs using the SDP elements.  Accordingly,\
    \ the payloads received\n   at {233.252.0.1,30000} and {233.252.0.2,30000} are\
    \ mapped to flow IDs\n   0 and 1, respectively.\n   The CDP passes the flow IDs\
    \ and received payloads along with the\n   Explicit Source FEC Payload ID to the\
    \ FEC scheme defined in the SDP\n   description.  The CDP also passes the received\
    \ repair packet payloads\n   and Repair FEC Payload ID to the FEC scheme.  The\
    \ FEC scheme can\n   construct the original source block with missing packets\
    \ by using the\n   information given in the FEC Payload IDs.  The FEC Repair Payload\
    \ ID\n   provides the information that SB_1 has packets from two flows with\n\
    \   four packets from the first one and six packets from the second one.\n   Flow\
    \ IDs state that the packets from source flow 0 precede the\n   packets from source\
    \ flow 1.  Explicit Source FEC Payload IDs, on the\n   other hand, provide the\
    \ information about which source payload\n   appears in what order.  Therefore,\
    \ the FEC scheme can depict a source\n   block with exact locations of the missing\
    \ packets.  Figure 9 depicts\n   the case for SB_1.  Since the original source\
    \ block with missing\n   packets can be constructed at the decoder and the FEC\
    \ scheme knows\n   the coding rate (e.g., it might be carried in the FSSI field\
    \ in the\n   SDP description), a proper decoding operation can start as soon as\n\
    \   the repair symbols are provided to the FEC scheme.\n            <--------\
    \ Source Block 1 -------->\n            +------------+-------------------+\n \
    \           | $1 $2 X  X | #1 X  #3 #4 #5 #6 |\n            +------------+-------------------+\n\
    \            O: Symbols received from the source flow 1 for SB_1\n           \
    \ #: Symbols received from the source flow 2 for SB_1\n            X: Lost source\
    \ symbols\n                    Figure 9: Source Block Regeneration\n   When the\
    \ FEC scheme can recover any missing symbol while more repair\n   symbols are\
    \ arriving, it provides the recovered blocks along with the\n   source flow IDs\
    \ of the recovered blocks as outputs to the CDP.  The\n   receiver knows how long\
    \ to wait to repair the remaining missing\n   packets (e.g., specified by the\
    \ 'repair-window' attribute in the SDP\n   description).  After the associated\
    \ timer expires, the CDP hands over\n   whatever could be recovered from the source\
    \ flow to the application\n   layer and continues with processing the next source\
    \ block.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   For the general security considerations related\
    \ to the FEC Framework,\n   refer to [RFC6363].  For the security considerations\
    \ related to the\n   SDP elements in the FEC Framework, refer to [RFC6364].  There\
    \ are no\n   additional security considerations that apply to this document.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   The authors would like to thank the FEC Framework design\
    \ team for\n   their inputs, suggestions, and contributions.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"\
    Forward Error\n              Correction (FEC) Framework\", RFC 6363, October 2011.\n\
    \   [RFC6364]  Begen, A., \"Session Description Protocol Elements for the\n  \
    \            Forward Error Correction (FEC) Framework\", RFC 6364,\n         \
    \     October 2011.\n   [RFC6695]  Asati, R., \"Methods to Convey Forward Error\
    \ Correction\n              (FEC) Framework Configuration Information\", RFC 6695,\n\
    \              August 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ulas C. Kozat\n   DOCOMO Innovations\n   3240 Hillview\
    \ Avenue\n   Palo Alto, CA  94304-1201\n   USA\n   Phone: +1 650 496 4739\n  \
    \ EMail: kozat@docomolabs-usa.com\n   Ali Begen\n   Cisco\n   181 Bay Street\n\
    \   Toronto, ON  M5J 2T3\n   Canada\n   EMail: abegen@cisco.com\n"
