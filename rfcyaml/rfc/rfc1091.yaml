- contents:
  - '                      Telnet Terminal-Type Option

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This RFC specifies a standard for the Internet community.
    \ Hosts on\n   the Internet that exchange terminal type information within the\n
    \  Telnet protocol are expected to adopt and implement this standard.\n   This
    standard supersedes RFC 930.  A change is made to permit cycling\n   through a
    list of possible terminal types and selecting the most\n   appropriate.\n   Distribution
    of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "1. Command Name and Code\n      TERMINAL-TYPE   24\n"
  title: 1. Command Name and Code
- contents:
  - "2. Command Meanings\n      IAC WILL TERMINAL-TYPE\n         Sender is willing
    to send terminal type information in a\n         subsequent sub-negotiation.\n
    \     IAC WON'T TERMINAL-TYPE\n         Sender refuses to send terminal type information.\n
    \     IAC DO TERMINAL-TYPE\n         Sender is willing to receive terminal type
    information in a\n         subsequent sub-negotiation.\n      IAC DON'T TERMINAL-TYPE\n
    \        Sender refuses to accept terminal type information.\n      IAC SB TERMINAL-TYPE
    SEND IAC SE\n         Server requests client to transmit his (the client's) next\n
    \        terminal type, and switch emulation modes (if more than one\n         terminal
    type is supported).  The code for SEND is 1. (See\n         below.)\n      IAC
    SB TERMINAL-TYPE IS ... IAC SE\n         Client is stating the name of his current
    (or only) terminal\n         type.  The code for IS is 0.  (See below.)\n"
  title: 2. Command Meanings
- contents:
  - "3. Default\n      WON'T TERMINAL-TYPE\n         Terminal type information will
    not be exchanged.\n      DON'T TERMINAL-TYPE\n         Terminal type information
    will not be exchanged.\n"
  title: 3. Default
- contents:
  - "4. Motivation for the Option\n   On most machines with bit-mapped displays (e.g.,
    PCs and graphics\n   workstations) a client terminal emulation program is used
    to simulate\n   a conventional ASCII terminal.  Most of these programs have multiple\n
    \  emulation modes, frequently with widely varying characteristics.\n   Likewise,
    modern host system software and applications can deal with\n   a variety of terminal
    types.  What is needed is a means for the\n   client to present a list of available
    terminal emulation modes to the\n   server, from which the server can select the
    one it prefers (for\n   arbitrary reasons).  There is also need for a mechanism
    to change\n   emulation modes during the course of a session, perhaps according
    to\n   the needs of applications programs.\n   Existing terminal-type passing
    mechanisms within Telnet were not\n   designed with multiple emulation modes in
    mind.  While multiple names\n   are allowed, they are assumed to be synonyms.
    \ Emulation mode changes\n   are not defined, and the list of modes can only be
    scanned once.\n   This document defines a simple extension to the existing mechanisms,\n
    \  which meets both of the above criteria.  It makes one assumption\n   about
    the behaviour of implementations coded to the previous standard\n   in order to
    obtain full backwards-compatibility.\n"
  title: 4. Motivation for the Option
- contents:
  - "5. Description of the Option\n   Willingness to exchange terminal-type information
    is agreed upon via\n   conventional Telnet option negotiation.  WILL and DO are
    used only to\n   obtain and grant permission for future discussion.  The actual\n
    \  exchange of status information occurs within option subcommands (IAC\n   SB
    TERMINAL-TYPE...).\n   Once the two hosts have exchanged a WILL and a DO, the
    sender of the\n   DO TERMINAL-TYPE (the server) is free to request type information.\n
    \  Only the server may send requests (IAC SB TERMINAL-TYPE SEND IAC SE)\n   and
    only the client may transmit actual type information (within an\n   IAC SB TERMINAL-TYPE
    IS ... IAC SE command).  Terminal type\n   information may not be sent spontaneously,
    but only in response to a\n   request.\n   The terminal type information is an
    NVT ASCII string.  Within this\n   string, upper and lower case are considered
    equivalent.  The complete\n   list of valid terminal type names can be found in
    the latest\n   \"Assigned Numbers\" RFC [4].\n   The transmission of terminal
    type information by the Telnet client in\n   response to a query from the Telnet
    server implies that the client\n   must simultaneously change emulation mode,
    unless the terminal type\n   sent is a synonym of the preceding terminal type,
    or there are other\n   prerequisites for entering the new regime (e.g., having
    agreed upon\n   the Telnet binary option).  The receipt of such information by
    the\n   Telnet server does not imply any immediate change of processing.\n   However,
    the information may be passed to a process, which may alter\n   the data it sends
    to suit the particular characteristics of the\n   terminal.  For example, some
    operating systems have a terminal driver\n   that accepts a code indicating the
    type of terminal being driven.\n   Using the TERMINAL TYPE and BINARY options,
    a telnet server program\n   on such a system could arrange to have terminals driven
    as if they\n   were directly connected, including special functions not available
    to\n   a standard Network Virtual Terminal.\n   Note that this specification is
    deliberately asymmetric.  It is\n   assumed that server operating systems and
    applications in general\n   cannot change terminal types at arbitrary points in
    a session.  Thus,\n   the client may only send a new type (and potentially change
    emulation\n   modes) when the server requests that it do so.\n"
  title: 5. Description of the Option
- contents:
  - "6.  Implementation Issues\n   The \"terminal type\" information may be any NVT
    ASCII string\n   meaningful to both ends of the negotiation.  The list of terminal\n
    \  type names in \"Assigned Numbers\" is intended to minimize confusion\n   caused
    by alternative \"spellings\" of the terminal type.  For example,\n   confusion
    would arise if one party were to call a terminal \"IBM3278-\n   2\" while the
    other called it \"IBM-3278/2\".  There is no negative\n   acknowledgement for
    a terminal type that is not understood, but\n   certain other options (such as
    switching to BINARY mode) may be\n   refused if a valid terminal type name has
    not been specified.\n   In some cases, either a particular terminal may be known
    by more than\n   one name, for example a specific type and a more generic type,
    or the\n   client may be a workstation with integrated display capable of\n   emulating
    more than one kind of terminal.  In such cases, the sender\n   of the TERMINAL-TYPE
    IS command should reply to successive TERMINAL-\n   TYPE SEND commands with the
    various names.  In this way, a telnet\n   server that does not understand the
    first response can prompt for\n   alternatives.  If different terminal emulations
    are supported by the\n   client, the mode of the emulator must be changed to match
    the last\n   type sent, unless the particular emulation has other Telnet options\n
    \  (e.g., BINARY) as prerequisites (in which case, the emulation will\n   switch
    to the last type sent when the prerequisite is fulfilled).\n   When types are
    synonyms, they should be sent in order from most to\n   least specific.\n   When
    the server (the receiver of the TERMINAL-TYPE IS) receives the\n   same response
    two consecutive times, this indicates the end of the\n   list of available types.
    \ Similarly, the client should indicate it\n   has sent all available names by
    repeating the last one sent.  If an\n   additional request is received, this indicates
    that the server (the\n   sender of the IS) wishes to return to the top of the
    list of\n   available types (probably to select the least of N evils).\n   Server
    implementations conforming to the previous standard will cease\n   sending TERMINAL-TYPE
    SEND commands after receiving the same response\n   two consecutive times, which
    will work according to the old standard.\n   It is assumed that client implementations
    conforming to the previous\n   standard will send the last type on the list in
    response to a third\n   query (as well as the second).  New-style servers must
    recognize this\n   and not send more queries.\n   The type \"UNKNOWN\" should
    be used if the type of the terminal is\n   unknown or unlikely to be recognized
    by the other party.\n   The complete and up-to-date list of terminal type names
    will be\n   maintained in the \"Assigned Numbers\".  The maximum length of a\n
    \  terminal type name is 40 characters.\n"
  title: 6.  Implementation Issues
- contents:
  - "7. User Interfaces\n   Telnet clients and servers conforming to this specification
    should\n   provide the following functions in their user interfaces:\n   Clients
    supporting multiple emulation modes should allow the user to\n   specify which
    of the modes is preferred (which name is sent first),\n   prior to connection
    establishment.  The order of the names sent\n   cannot be changed after the negotiation
    has begun.  This initial mode\n   will also become the default with servers which
    do not support\n   TERMINAL TYPE.\n   Servers should store the current terminal
    type name and the list of\n   available names in a manner such that they are accessible
    to both the\n   user (via a keyboard command) and any applications which need
    the\n   information.  In addition, there should be a corresponding mechanism\n
    \  to request a change of terminal types, by initiating a series of\n   SEND/IS
    sub-negotiations.\n"
  title: 7. User Interfaces
- contents:
  - "8. Examples\n   In this example, the server finds the first type acceptable.\n
    \     Server: IAC DO TERMINAL-TYPE\n      Client: IAC WILL TERMINAL-TYPE\n         (Server
    may now request a terminal type at any time.)\n      Server: IAC SB TERMINAL-TYPE
    SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE IS IBM-3278-2 IAC SE\n   In this
    example, the server requests additional terminal types, and\n   accepts the second
    (and last on the client's list) type sent (RFC 930\n   compatible):\n      Server:
    IAC DO TERMINAL-TYPE\n      Client: IAC WILL TERMINAL-TYPE\n         (Server may
    now request a terminal type at any time.)\n      Server: IAC SB TERMINAL-TYPE
    SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE IS ZENITH-H19 IAC SE\n      Server:
    IAC SB TERMINAL-TYPE SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE IS UNKNOWN
    IAC SE\n      Server: IAC SB TERMINAL-TYPE SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE
    IS UNKNOWN IAC SE\n   In this example, the server requests additional terminal
    types, and\n   proceeds beyond the end-of-list, to select the first type offered
    by\n   the client (new-type client and server):\n      Server: IAC DO TERMINAL-TYPE\n
    \     Client: IAC WILL TERMINAL-TYPE\n         (Server may now request a terminal
    type at any time.)\n      Server: IAC SB TERMINAL-TYPE SEND IAC SE\n      Client:
    IAC SB TERMINAL-TYPE IS DEC-VT220 IAC SE\n      Server: IAC SB TERMINAL-TYPE SEND
    IAC SE\n      Client: IAC SB TERMINAL-TYPE IS DEC-VT100 IAC SE\n      Server:
    IAC SB TERMINAL-TYPE SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE IS DEC-VT52
    IAC SE\n      Server: IAC SB TERMINAL-TYPE SEND IAC SE\n      Client: IAC SB TERMINAL-TYPE
    IS DEC-VT52 IAC SE\n      Server: IAC SB TERMINAL-TYPE SEND IAC SE\n      Client:
    IAC SB TERMINAL-TYPE IS DEC-VT220 IAC SE\n"
  title: 8. Examples
- contents:
  - "9. References:\n     [1]  Postel, J., and J. Reynolds, \"Telnet Protocol Specification\",\n
    \         RFC 854, USC Information Sciences Institute, May 1983.\n     [2]  Postel,
    J., and J. Reynolds, \"Telnet Option Specification\",\n          RFC 855, USC
    Information Sciences Institute, May 1983.\n     [3]  Solomon, M., and E. Wimmers,
    \"Telnet Terminal Type Option\",\n          RFC 930, University of Wisconsin -
    Madison, January 1985.\n     [4]  Reynolds, J., and J. Postel, \"Assigned Numbers\",
    RFC 1010,\n          USC Information Sciences Institute, May 1987.\n"
  title: '9. References:'
- contents:
  - "Reviser's note:\n   I owe much of this text to RFCs 884 and 930, by Marvin Solomon
    and\n   Edward Wimmers of the University of Wisconsin - Madison, and I owe\n   the
    idea of the extension to discussions on the \"tn3270\" mailing list\n   in the
    Summer of 1987.\n"
  title: 'Reviser''s note:'
- contents:
  - "Author's Address\n   James VanBokkelen\n   FTP Software, Inc.\n   26 Princess
    Street\n   Wakefield, MA 01880-3004\n   Phone: (617) 246-0900\n   Email: jbvb@ftp.com\n"
  title: Author's Address
