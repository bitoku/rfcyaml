- title: __initial_text__
  contents:
  - "         MIME (Multipurpose Internet Mail Extensions) Part One:\n           \
    \     Mechanisms for Specifying and Describing\n                 the Format of\
    \ Internet Message Bodies\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   STD 11, RFC 822 defines a message representation protocol which\n\
    \   specifies considerable detail about message headers, but which leaves\n  \
    \ the message content, or message body, as flat ASCII text.  This\n   document\
    \ redefines the format of message bodies to allow multi-part\n   textual and non-textual\
    \ message bodies to be represented and\n   exchanged without loss of information.\
    \  This is based on earlier work\n   documented in RFC 934 and STD 11, RFC 1049,\
    \ but extends and revises\n   that work.  Because RFC 822 said so little about\
    \ message bodies, this\n   document is largely orthogonal to (rather than a revision\
    \ of) RFC\n   822.\n   In particular, this document is designed to provide facilities\
    \ to\n   include multiple objects in a single message, to represent body text\n\
    \   in character sets other than US-ASCII, to represent formatted multi-\n   font\
    \ text messages, to represent non-textual material such as images\n   and audio\
    \ fragments, and generally to facilitate later extensions\n   defining new types\
    \ of Internet mail for use by cooperating mail\n   agents.\n   This document does\
    \ NOT extend Internet mail header fields to permit\n   anything other than US-ASCII\
    \ text data.  Such extensions are the\n   subject of a companion document [RFC-1522].\n\
    \   This document is a revision of RFC 1341.  Significant differences\n   from\
    \ RFC 1341 are summarized in Appendix H.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.     Introduction.......................................\
    \  3\n   2.     Notations, Conventions, and Generic BNF Grammar....  6\n   3.\
    \     The MIME-Version Header Field......................  7\n   4.     The Content-Type\
    \ Header Field......................  9\n   5.     The Content-Transfer-Encoding\
    \ Header Field......... 13\n   5.1.   Quoted-Printable Content-Transfer-Encoding.........\
    \ 18\n   5.2.   Base64 Content-Transfer-Encoding................... 21\n   6.\
    \     Additional Content-Header Fields................... 23\n   6.1.   Optional\
    \ Content-ID Header Field................... 23\n   6.2.   Optional Content-Description\
    \ Header Field.......... 24\n   7.     The Predefined Content-Type Values.................\
    \ 24\n   7.1.   The Text Content-Type.............................. 24\n   7.1.1.\
    \ The charset parameter.............................. 25\n   7.1.2. The Text/plain\
    \ subtype............................. 28\n   7.2.   The Multipart Content-Type.........................\
    \ 28\n   7.2.1. Multipart:  The common syntax...................... 29\n   7.2.2.\
    \ The Multipart/mixed (primary) subtype.............. 34\n   7.2.3. The Multipart/alternative\
    \ subtype.................. 34\n   7.2.4. The Multipart/digest subtype.......................\
    \ 36\n   7.2.5. The Multipart/parallel subtype..................... 37\n   7.2.6.\
    \ Other Multipart subtypes........................... 37\n   7.3.   The Message\
    \ Content-Type........................... 38\n   7.3.1. The Message/rfc822 (primary)\
    \ subtype............... 38\n   7.3.2. The Message/Partial subtype........................\
    \ 39\n   7.3.3. The Message/External-Body subtype.................. 42\n   7.3.3.1.\
    \  The \"ftp\" and \"tftp\" access-types............... 44\n   7.3.3.2.  The \"\
    anon-ftp\" access-type...................... 45\n   7.3.3.3.  The \"local-file\"\
    \ and \"afs\" access-types......... 45\n   7.3.3.4.  The \"mail-server\" access-type...................\
    \ 45\n   7.3.3.5.  Examples and Further Explanations............... 46\n   7.4.\
    \   The Application Content-Type....................... 49\n   7.4.1. The Application/Octet-Stream\
    \ (primary) subtype..... 50\n   7.4.2. The Application/PostScript subtype.................\
    \ 50\n   7.4.3. Other Application subtypes......................... 53\n   7.5.\
    \   The Image Content-Type............................. 53\n   7.6.   The Audio\
    \ Content-Type............................. 54\n   7.7.   The Video Content-Type.............................\
    \ 54\n   7.8.   Experimental Content-Type Values................... 54\n   8.\
    \     Summary............................................ 56\n   9.     Security\
    \ Considerations............................ 56\n   10.    Authors' Addresses.................................\
    \ 57\n   11.    Acknowledgements................................... 58\n   Appendix\
    \ A -- Minimal MIME-Conformance.................... 60\n   Appendix B -- General\
    \ Guidelines For Sending Email Data... 63\n   Appendix C -- A Complex Multipart\
    \ Example................. 66\n   Appendix D -- Collected Grammar...........................\
    \ 68\n   Appendix E -- IANA Registration Procedures................ 72\n   E.1\
    \  Registration of New Content-type/subtype Values...... 72\n   E.2  Registration\
    \ of New Access-type Values\n        for Message/external-body............................\
    \ 73\n   Appendix F -- Summary of the Seven Content-types.......... 74\n   Appendix\
    \ G -- Canonical Encoding Model.................... 76\n   Appendix H -- Changes\
    \ from RFC 1341....................... 78\n   References................................................\
    \ 80\n"
- title: 1.    Introduction
  contents:
  - "1.    Introduction\n   Since its publication in 1982, STD 11, RFC 822 [RFC-822]\
    \ has defined\n   the standard format of textual mail messages on the Internet.\
    \  Its\n   success has been such that the RFC 822 format has been adopted,\n \
    \  wholly or partially, well beyond the confines of the Internet and the\n   Internet\
    \ SMTP transport defined by STD 10, RFC 821 [RFC-821].  As the\n   format has\
    \ seen wider use, a number of limitations have proven\n   increasingly restrictive\
    \ for the user community.\n   RFC 822 was intended to specify a format for text\
    \ messages.  As such,\n   non-text messages, such as multimedia messages that\
    \ might include\n   audio or images, are simply not mentioned.  Even in the case\
    \ of text,\n   however, RFC 822 is inadequate for the needs of mail users whose\n\
    \   languages require the use of character sets richer than US ASCII\n   [US-ASCII].\
    \ Since RFC 822 does not specify mechanisms for mail\n   containing audio, video,\
    \ Asian language text, or even text in most\n   European languages, additional\
    \ specifications are needed.\n   One of the notable limitations of RFC 821/822\
    \ based mail systems is\n   the fact that they limit the contents of electronic\
    \ mail messages to\n   relatively short lines of seven-bit ASCII.  This forces\
    \ users to\n   convert any non-textual data that they may wish to send into seven-\n\
    \   bit bytes representable as printable ASCII characters before invoking\n  \
    \ a local mail UA (User Agent, a program with which human users send\n   and receive\
    \ mail). Examples of such encodings currently used in the\n   Internet include\
    \ pure hexadecimal, uuencode, the 3-in-4 base 64\n   scheme specified in RFC 1421,\
    \ the Andrew Toolkit Representation\n   [ATK], and many others.\n   The limitations\
    \ of RFC 822 mail become even more apparent as gateways\n   are designed to allow\
    \ for the exchange of mail messages between RFC\n   822 hosts and X.400 hosts.\
    \ X.400 [X400] specifies mechanisms for the\n   inclusion of non-textual body\
    \ parts within electronic mail messages.\n   The current standards for the mapping\
    \ of X.400 messages to RFC 822\n   messages specify either that X.400 non-textual\
    \ body parts must be\n   converted to (not encoded in) an ASCII format, or that\
    \ they must be\n   discarded, notifying the RFC 822 user that discarding has occurred.\n\
    \   This is clearly undesirable, as information that a user may wish to\n   receive\
    \ is lost.  Even though a user's UA may not have the capability\n   of dealing\
    \ with the non-textual body part, the user might have some\n   mechanism external\
    \ to the UA that can extract useful information from\n   the body part.  Moreover,\
    \ it does not allow for the fact that the\n   message may eventually be gatewayed\
    \ back into an X.400 message\n   handling system (i.e., the X.400 message is \"\
    tunneled\" through\n   Internet mail), where the non-textual information would\
    \ definitely\n   become useful again.\n   This document describes several mechanisms\
    \ that combine to solve most\n   of these problems without introducing any serious\
    \ incompatibilities\n   with the existing world of RFC 822 mail.  In particular,\
    \ it\n   describes:\n   1. A MIME-Version header field, which uses a version number\
    \ to\n       declare a message to be conformant with this specification and\n\
    \       allows mail processing agents to distinguish between such\n       messages\
    \ and those generated by older or non-conformant software,\n       which is presumed\
    \ to lack such a field.\n   2. A Content-Type header field, generalized from RFC\
    \ 1049 [RFC-1049],\n       which can be used to specify the type and subtype of\
    \ data in the\n       body of a message and to fully specify the native representation\n\
    \       (encoding) of such data.\n       2.a. A \"text\" Content-Type value, which\
    \ can be used to represent\n            textual information in a number of character\
    \ sets and\n            formatted text description languages in a standardized\n\
    \            manner.\n       2.b. A \"multipart\" Content-Type value, which can\
    \ be used to\n            combine several body parts, possibly of differing types\
    \ of\n            data, into a single message.\n       2.c. An \"application\"\
    \ Content-Type value, which can be used to\n            transmit application data\
    \ or binary data, and hence, among\n            other uses, to implement an electronic\
    \ mail file transfer\n            service.\n       2.d. A \"message\" Content-Type\
    \ value, for encapsulating another\n            mail message.\n       2.e An \"\
    image\" Content-Type value, for transmitting still image\n            (picture)\
    \ data.\n       2.f. An \"audio\" Content-Type value, for transmitting audio or\n\
    \            voice data.\n       2.g. A \"video\" Content-Type value, for transmitting\
    \ video or\n            moving image data, possibly with audio as part of the\n\
    \            composite video data format.\n   3. A Content-Transfer-Encoding header\
    \ field, which can be used to\n       specify an auxiliary encoding that was applied\
    \ to the data in\n       order to allow it to pass through mail transport mechanisms\
    \ which\n       may have data or character set limitations.\n   4. Two additional\
    \ header fields that can be used to further describe\n       the data in a message\
    \ body, the Content-ID and Content-\n       Description header fields.\n   MIME\
    \ has been carefully designed as an extensible mechanism, and it\n   is expected\
    \ that the set of content-type/subtype pairs and their\n   associated parameters\
    \ will grow significantly with time.  Several\n   other MIME fields, notably including\
    \ character set names, are likely\n   to have new values defined over time.  In\
    \ order to ensure that the\n   set of such values is developed in an orderly,\
    \ well-specified, and\n   public manner, MIME defines a registration process which\
    \ uses the\n   Internet Assigned Numbers Authority (IANA) as a central registry\
    \ for\n   such values.  Appendix E provides details about how IANA registration\n\
    \   is accomplished.\n   Finally, to specify and promote interoperability, Appendix\
    \ A of this\n   document provides a basic applicability statement for a subset\
    \ of the\n   above mechanisms that defines a minimal level of \"conformance\"\
    \ with\n   this document.\n      HISTORICAL NOTE: Several of the mechanisms described\
    \ in this\n      document may seem somewhat strange or even baroque at first\n\
    \      reading.  It is important to note that compatibility with existing\n  \
    \    standards AND robustness across existing practice were two of the\n     \
    \ highest priorities of the working group that developed this\n      document.\
    \  In particular, compatibility was always favored over\n      elegance.\n   MIME\
    \ was first defined and published as RFCs 1341 and 1342 [RFC-1341]\n   [RFC-1342].\
    \  This document is a relatively minor updating of RFC\n   1341, and is intended\
    \ to supersede it.  The differences between this\n   document and RFC 1341 are\
    \ summarized in Appendix H.  Please refer to\n   the current edition of the \"\
    IAB Official Protocol Standards\" for the\n   standardization state and status\
    \ of this protocol.  Several other RFC\n   documents will be of interest to the\
    \ MIME implementor, in particular\n   [RFC 1343], [RFC-1344], and [RFC-1345].\n"
- title: 2.    Notations, Conventions, and Generic BNF Grammar
  contents:
  - "2.    Notations, Conventions, and Generic BNF Grammar\n   This document is being\
    \ published in two versions, one as plain ASCII\n   text and one as PostScript\
    \ (PostScript is a trademark of Adobe\n   Systems Incorporated.).  While the text\
    \ version is the official\n   specification, some will find the PostScript version\
    \ easier to read.\n   The textual contents are identical.  An Andrew-format copy\
    \ of this\n   document is also available from the first author (Borenstein).\n\
    \   Although the mechanisms specified in this document are all described\n   in\
    \ prose, most are also described formally in the modified BNF\n   notation of\
    \ RFC 822.  Implementors will need to be familiar with this\n   notation in order\
    \ to understand this specification, and are referred\n   to RFC 822 for a complete\
    \ explanation of the modified BNF notation.\n   Some of the modified BNF in this\
    \ document makes reference to\n   syntactic entities that are defined in RFC 822\
    \ and not in this\n   document.  A complete formal grammar, then, is obtained\
    \ by combining\n   the collected grammar appendix of this document with that of\
    \ RFC 822\n   plus the modifications to RFC 822 defined in RFC 1123, which\n \
    \  specifically changes the syntax for `return', `date' and `mailbox'.\n   The\
    \ term CRLF, in this document, refers to the sequence of the two\n   ASCII characters\
    \ CR (13) and LF (10) which, taken together, in this\n   order, denote a line\
    \ break in RFC 822 mail.\n   The term \"character set\" is used in this document\
    \ to refer to a\n   method used with one or more tables to convert encoded text\
    \ to a\n   series of octets.  This definition is intended to allow various kinds\n\
    \   of text encodings, from simple single-table mappings such as ASCII to\n  \
    \ complex table switching methods such as those that use ISO 2022's\n   techniques.\
    \  However, a MIME character set name must fully specify\n   the mapping to be\
    \ performed.\n   The term \"message\", when not further qualified, means either\
    \ the\n   (complete or \"top-level\") message being transferred on a network,\
    \ or\n   a message encapsulated in a body of type \"message\".\n   The term \"\
    body part\", in this document, means one of the parts of the\n   body of a multipart\
    \ entity. A body part has a header and a body, so\n   it makes sense to speak\
    \ about the body of a body part.\n   The term \"entity\", in this document, means\
    \ either a message or a body\n   part.  All kinds of entities share the property\
    \ that they have a\n   header and a body.\n   The term \"body\", when not further\
    \ qualified, means the body of an\n   entity, that is the body of either a message\
    \ or of a body part.\n      NOTE: The previous four definitions are clearly circular.\
    \  This is\n      unavoidable, since the overall structure of a MIME message is\n\
    \      indeed recursive.\n   In this document, all numeric and octet values are\
    \ given in decimal\n   notation.\n   It must be noted that Content-Type values,\
    \ subtypes, and parameter\n   names as defined in this document are case-insensitive.\
    \  However,\n   parameter values are case-sensitive unless otherwise specified\
    \ for\n   the specific parameter.\n      FORMATTING NOTE: This document has been\
    \ carefully formatted for\n      ease of reading.  The PostScript version of this\
    \ document, in\n      particular, places notes like this one, which may be skipped\
    \ by\n      the reader, in a smaller, italicized, font, and indents it as\n  \
    \    well.  In the text version, only the indentation is preserved, so\n     \
    \ if you are reading the text version of this you might consider\n      using\
    \ the PostScript version instead. However, all such notes will\n      be indented\
    \ and preceded by \"NOTE:\" or some similar introduction,\n      even in the text\
    \ version.\n      The primary purpose of these non-essential notes is to convey\n\
    \      information about the rationale of this document, or to place this\n  \
    \    document in the proper historical or evolutionary context.  Such\n      information\
    \ may be skipped by those who are focused entirely on\n      building a conformant\
    \ implementation, but may be of use to those\n      who wish to understand why\
    \ this document is written as it is.\n      For ease of recognition, all BNF definitions\
    \ have been placed in a\n      fixed-width font in the PostScript version of this\
    \ document.\n"
- title: 3.    The MIME-Version Header Field
  contents:
  - "3.    The MIME-Version Header Field\n   Since RFC 822 was published in 1982,\
    \ there has really been only one\n   format standard for Internet messages, and\
    \ there has been little\n   perceived need to declare the format standard in use.\
    \  This document\n   is an independent document that complements RFC 822. Although\
    \ the\n   extensions in this document have been defined in such a way as to be\n\
    \   compatible with RFC 822, there are still circumstances in which it\n   might\
    \ be desirable for a mail-processing agent to know whether a\n   message was composed\
    \ with the new standard in mind.\n   Therefore, this document defines a new header\
    \ field, \"MIME-Version\",\n   which is to be used to declare the version of the\
    \ Internet message\n   body format standard in use.\n   Messages composed in accordance\
    \ with this document MUST include such\n   a header field, with the following\
    \ verbatim text:\n   MIME-Version: 1.0\n   The presence of this header field is\
    \ an assertion that the message\n   has been composed in compliance with this\
    \ document.\n   Since it is possible that a future document might extend the message\n\
    \   format standard again, a formal BNF is given for the content of the\n   MIME-Version\
    \ field:\n   version := \"MIME-Version\" \":\" 1*DIGIT \".\" 1*DIGIT\n   Thus,\
    \ future format specifiers, which might replace or extend \"1.0\",\n   are constrained\
    \ to be two integer fields, separated by a period.  If\n   a message is received\
    \ with a MIME-version value other than \"1.0\", it\n   cannot be assumed to conform\
    \ with this specification.\n   Note that the MIME-Version header field is required\
    \ at the top level\n   of a message. It is not required for each body part of\
    \ a multipart\n   entity.  It is required for the embedded headers of a body of\
    \ type\n   \"message\" if and only if the embedded message is itself claimed to\
    \ be\n   MIME-conformant.\n   It is not possible to fully specify how a mail reader\
    \ that conforms\n   with MIME as defined in this document should treat a message\
    \ that\n   might arrive in the future with some value of MIME-Version other than\n\
    \   \"1.0\".  However, conformant software is encouraged to check the\n   version\
    \ number and at least warn the user if an unrecognized MIME-\n   version is encountered.\n\
    \   It is also worth noting that version control for specific content-\n   types\
    \ is not accomplished using the MIME-Version mechanism.  In\n   particular, some\
    \ formats (such as application/postscript) have\n   version numbering conventions\
    \ that are internal to the document\n   format.  Where such conventions exist,\
    \ MIME does nothing to supersede\n   them.  Where no such conventions exist, a\
    \ MIME type might use a\n   \"version\" parameter in the content-type field if\
    \ necessary.\n   NOTE TO IMPLEMENTORS: All header fields defined in this document,\n\
    \   including MIME-Version, Content-type, etc., are subject to the\n   general\
    \ syntactic rules for header fields specified in RFC 822.  In\n   particular,\
    \ all can include comments, which means that the following\n   two MIME-Version\
    \ fields are equivalent:\n                    MIME-Version: 1.0\n            \
    \        MIME-Version: 1.0 (Generated by GBD-killer 3.7)\n"
- title: 4.    The Content-Type Header Field
  contents:
  - "4.    The Content-Type Header Field\n   The purpose of the Content-Type field\
    \ is to describe the data\n   contained in the body fully enough that the receiving\
    \ user agent can\n   pick an appropriate agent or mechanism to present the data\
    \ to the\n   user, or otherwise deal with the data in an appropriate manner.\n\
    \   HISTORICAL NOTE: The Content-Type header field was first defined in\n   RFC\
    \ 1049.  RFC 1049 Content-types used a simpler and less powerful\n   syntax, but\
    \ one that is largely compatible with the mechanism given\n   here.\n   The Content-Type\
    \ header field is used to specify the nature of the\n   data in the body of an\
    \ entity, by giving type and subtype\n   identifiers, and by providing auxiliary\
    \ information that may be\n   required for certain types.  After the type and\
    \ subtype names, the\n   remainder of the header field is simply a set of parameters,\n\
    \   specified in an attribute/value notation.  The set of meaningful\n   parameters\
    \ differs for the different types.  In particular, there are\n   NO globally-meaningful\
    \ parameters that apply to all content-types.\n   Global mechanisms are best addressed,\
    \ in the MIME model, by the\n   definition of additional Content-* header fields.\
    \  The ordering of\n   parameters is not significant.  Among the defined parameters\
    \ is a\n   \"charset\" parameter by which the character set used in the body may\n\
    \   be declared. Comments are allowed in accordance with RFC 822 rules\n   for\
    \ structured header fields.\n   In general, the top-level Content-Type is used\
    \ to declare the general\n   type of data, while the subtype specifies a specific\
    \ format for that\n   type of data.  Thus, a Content-Type of \"image/xyz\" is\
    \ enough to tell\n   a user agent that the data is an image, even if the user\
    \ agent has no\n   knowledge of the specific image format \"xyz\".  Such information\
    \ can\n   be used, for example, to decide whether or not to show a user the raw\n\
    \   data from an unrecognized subtype -- such an action might be\n   reasonable\
    \ for unrecognized subtypes of text, but not for\n   unrecognized subtypes of\
    \ image or audio.  For this reason, registered\n   subtypes of audio, image, text,\
    \ and video, should not contain\n   embedded information that is really of a different\
    \ type.  Such\n   compound types should be represented using the \"multipart\"\
    \ or\n   \"application\" types.\n   Parameters are modifiers of the content-subtype,\
    \ and do not\n   fundamentally affect the requirements of the host system.  Although\n\
    \   most parameters make sense only with certain content-types, others\n   are\
    \ \"global\" in the sense that they might apply to any subtype.  For\n   example,\
    \ the \"boundary\" parameter makes sense only for the\n   \"multipart\" content-type,\
    \ but the \"charset\" parameter might make\n   sense with several content-types.\n\
    \   An initial set of seven Content-Types is defined by this document.\n   This\
    \ set of top-level names is intended to be substantially complete.\n   It is expected\
    \ that additions to the larger set of supported types\n   can generally be accomplished\
    \ by the creation of new subtypes of\n   these initial types.  In the future,\
    \ more top-level types may be\n   defined only by an extension to this standard.\
    \  If another primary\n   type is to be used for any reason, it must be given\
    \ a name starting\n   with \"X-\" to indicate its non-standard status and to avoid\
    \ a\n   potential conflict with a future official name.\n   In the Augmented BNF\
    \ notation of RFC 822, a Content-Type header field\n   value is defined as follows:\n\
    \     content  :=   \"Content-Type\"  \":\"  type  \"/\"  subtype  *(\";\"\n \
    \    parameter)\n               ; case-insensitive matching of type and subtype\n\
    \     type :=          \"application\"     / \"audio\"\n               / \"image\"\
    \           / \"message\"\n               / \"multipart\"  / \"text\"\n      \
    \         / \"video\"           / extension-token\n               ; All values\
    \ case-insensitive\n     extension-token :=  x-token / iana-token\n     iana-token\
    \ := <a publicly-defined extension token,\n               registered with IANA,\
    \ as specified in\n               appendix E>\n     x-token := <The two characters\
    \ \"X-\" or \"x-\" followed, with\n                 no intervening white space,\
    \ by any token>\n     subtype := token ; case-insensitive\n     parameter := attribute\
    \ \"=\" value\n     attribute := token   ; case-insensitive\n     value := token\
    \ / quoted-string\n     token  :=  1*<any (ASCII) CHAR except SPACE, CTLs,\n \
    \                  or tspecials>\n     tspecials :=  \"(\" / \")\" / \"<\" / \"\
    >\" / \"@\"\n                /  \",\" / \";\" / \":\" / \"\\\" / <\">\n      \
    \          /  \"/\" / \"[\" / \"]\" / \"?\" / \"=\"\n               ; Must be\
    \ in quoted-string,\n               ; to use within parameter values\n   Note\
    \ that the definition of \"tspecials\" is the same as the RFC 822\n   definition\
    \ of \"specials\" with the addition of the three characters\n   \"/\", \"?\",\
    \ and \"=\", and the removal of \".\".\n   Note also that a subtype specification\
    \ is MANDATORY.  There are no\n   default subtypes.\n   The type, subtype, and\
    \ parameter names are not case sensitive.  For\n   example, TEXT, Text, and TeXt\
    \ are all equivalent.  Parameter values\n   are normally case sensitive, but certain\
    \ parameters are interpreted\n   to be case-insensitive, depending on the intended\
    \ use.  (For example,\n   multipart boundaries are case-sensitive, but the \"\
    access-type\" for\n   message/External-body is not case-sensitive.)\n   Beyond\
    \ this syntax, the only constraint on the definition of subtype\n   names is the\
    \ desire that their uses must not conflict.  That is, it\n   would be undesirable\
    \ to have two different communities using\n   \"Content-Type: application/foobar\"\
    \ to mean two different things.  The\n   process of defining new content-subtypes,\
    \ then, is not intended to be\n   a mechanism for imposing restrictions, but simply\
    \ a mechanism for\n   publicizing the usages. There are, therefore, two acceptable\n\
    \   mechanisms for defining new Content-Type subtypes:\n            1.  Private\
    \ values (starting with \"X-\") may be\n                defined bilaterally between\
    \ two cooperating\n                agents without outside registration or\n  \
    \              standardization.\n            2.  New standard values must be documented,\n\
    \                registered with, and approved by IANA, as\n                described\
    \ in Appendix E.  Where intended for\n                public use, the formats\
    \ they refer to must\n                also be defined by a published specification,\n\
    \                and possibly offered for standardization.\n   The seven standard\
    \ initial predefined Content-Types are detailed in\n   the bulk of this document.\
    \  They are:\n    text -- textual information.  The primary subtype,\n       \
    \  \"plain\", indicates plain (unformatted) text.  No\n         special software\
    \ is required to get the full\n         meaning of the text, aside from support\
    \ for the\n         indicated character set.  Subtypes are to be used\n      \
    \   for enriched text in forms where application\n         software may enhance\
    \ the appearance of the text,\n         but such software must not be required\
    \ in order to\n         get the general idea of the content.  Possible\n     \
    \    subtypes thus include any readable word processor\n         format.  A very\
    \ simple and portable subtype,\n         richtext, was defined in RFC 1341, with\
    \ a future\n         revision expected.\n    multipart -- data consisting of multiple\
    \ parts of\n         independent data types.  Four initial subtypes\n        \
    \ are defined, including the primary \"mixed\"\n         subtype, \"alternative\"\
    \ for representing the same\n         data in multiple formats, \"parallel\" for\
    \ parts\n         intended to be viewed simultaneously, and \"digest\"\n     \
    \    for multipart entities in which each part is of\n         type \"message\"\
    .\n    message -- an encapsulated message.  A body of\n         Content-Type \"\
    message\" is itself all or part of a\n         fully formatted RFC 822 conformant\
    \ message which\n         may contain its own different Content-Type header\n\
    \         field.  The primary subtype is \"rfc822\".  The\n         \"partial\"\
    \ subtype is defined for partial messages,\n         to permit the fragmented\
    \ transmission of bodies\n         that are thought to be too large to be passed\n\
    \         through mail transport facilities.  Another\n         subtype, \"External-body\"\
    , is defined for\n         specifying large bodies by reference to an\n      \
    \   external data source.\n    image -- image data.  Image requires a display\
    \ device\n         (such as a graphical display, a printer, or a FAX\n       \
    \  machine) to view the information.  Initial\n         subtypes are defined for\
    \ two widely-used image\n         formats, jpeg and gif.\n    audio -- audio data,\
    \ with initial subtype \"basic\".\n         Audio requires an audio output device\
    \ (such as a\n         speaker or a telephone) to \"display\" the contents.\n\
    \    video -- video data.  Video requires the capability to\n         display\
    \ moving images, typically including\n         specialized hardware and software.\
    \  The initial\n         subtype is \"mpeg\".\n    application -- some other kind\
    \ of data, typically\n         either uninterpreted binary data or information\
    \ to\n         be processed by a mail-based application.  The\n         primary\
    \ subtype, \"octet-stream\", is to be used in\n         the case of uninterpreted\
    \ binary data, in which\n         case the simplest recommended action is to offer\n\
    \         to write the information into a file for the user.\n         An additional\
    \ subtype, \"PostScript\", is defined\n         for transporting PostScript documents\
    \ in bodies.\n         Other expected uses for \"application\" include\n     \
    \    spreadsheets, data for mail-based scheduling\n         systems, and languages\
    \ for \"active\"\n         (computational) email.  (Note that active email\n \
    \        and other application data may entail several\n         security considerations,\
    \ which are discussed later\n         in this memo, particularly in the context\
    \ of\n         application/PostScript.)\n   Default RFC 822 messages are typed\
    \ by this protocol as plain text in\n   the US-ASCII character set, which can\
    \ be explicitly specified as\n   \"Content-type: text/plain; charset=us-ascii\"\
    .  If no Content-Type is\n   specified, this default is assumed.  In the presence\
    \ of a MIME-\n   Version header field, a receiving User Agent can also assume\
    \ that\n   plain US-ASCII text was the sender's intent.  In the absence of a\n\
    \   MIME-Version specification, plain US-ASCII text must still be\n   assumed,\
    \ but the sender's intent might have been otherwise.\n      RATIONALE: In the\
    \ absence of any Content-Type header field or\n      MIME-Version header field,\
    \ it is impossible to be certain that a\n      message is actually text in the\
    \ US-ASCII character set, since it\n      might well be a message that, using\
    \ the conventions that predate\n      this document, includes text in another\
    \ character set or non-\n      textual data in a manner that cannot be automatically\
    \ recognized\n      (e.g., a uuencoded compressed UNIX tar file).  Although there\
    \ is\n      no fully acceptable alternative to treating such untyped messages\n\
    \      as \"text/plain; charset=us-ascii\", implementors should remain\n     \
    \ aware that if a message lacks both the MIME-Version and the\n      Content-Type\
    \ header fields, it may in practice contain almost\n      anything.\n   It should\
    \ be noted that the list of Content-Type values given here\n   may be augmented\
    \ in time, via the mechanisms described above, and\n   that the set of subtypes\
    \ is expected to grow substantially.\n   When a mail reader encounters mail with\
    \ an unknown Content-type\n   value, it should generally treat it as equivalent\
    \ to\n   \"application/octet-stream\", as described later in this document.\n"
- title: 5.    The Content-Transfer-Encoding Header Field
  contents:
  - "5.    The Content-Transfer-Encoding Header Field\n   Many Content-Types which\
    \ could usefully be transported via email are\n   represented, in their \"natural\"\
    \ format, as 8-bit character or binary\n   data.  Such data cannot be transmitted\
    \ over some transport protocols.\n   For example, RFC 821 restricts mail messages\
    \ to 7-bit US-ASCII data\n   with lines no longer than 1000 characters.\n   It\
    \ is necessary, therefore, to define a standard mechanism for re-\n   encoding\
    \ such data into a 7-bit short-line format.  This document\n   specifies that\
    \ such encodings will be indicated by a new \"Content-\n   Transfer-Encoding\"\
    \ header field.  The Content-Transfer-Encoding field\n   is used to indicate the\
    \ type of transformation that has been used in\n   order to represent the body\
    \ in an acceptable manner for transport.\n   Unlike Content-Types, a proliferation\
    \ of Content-Transfer-Encoding\n   values is undesirable and unnecessary.  However,\
    \ establishing only a\n   single Content-Transfer-Encoding mechanism does not\
    \ seem possible.\n   There is a tradeoff between the desire for a compact and\
    \ efficient\n   encoding of largely-binary data and the desire for a readable\n\
    \   encoding of data that is mostly, but not entirely, 7-bit data.  For\n   this\
    \ reason, at least two encoding mechanisms are necessary: a\n   \"readable\" encoding\
    \ and a \"dense\" encoding.\n   The Content-Transfer-Encoding field is designed\
    \ to specify an\n   invertible mapping between the \"native\" representation of\
    \ a type of\n   data and a representation that can be readily exchanged using\
    \ 7 bit\n   mail transport protocols, such as those defined by RFC 821 (SMTP).\n\
    \   This field has not been defined by any previous standard. The field's\n  \
    \ value is a single token specifying the type of encoding, as\n   enumerated below.\
    \  Formally:\n   encoding := \"Content-Transfer-Encoding\" \":\" mechanism\n \
    \  mechanism :=     \"7bit\"  ;  case-insensitive\n                  / \"quoted-printable\"\
    \n                  / \"base64\"\n                  / \"8bit\"\n             \
    \     / \"binary\"\n                  / x-token\n   These values are not case\
    \ sensitive.  That is, Base64 and BASE64 and\n   bAsE64 are all equivalent.  An\
    \ encoding type of 7BIT requires that\n   the body is already in a seven-bit mail-ready\
    \ representation.  This\n   is the default value -- that is, \"Content-Transfer-Encoding:\
    \ 7BIT\" is\n   assumed if the Content-Transfer-Encoding header field is not present.\n\
    \   The values \"8bit\", \"7bit\", and \"binary\" all mean that NO encoding has\n\
    \   been performed. However, they are potentially useful as indications\n   of\
    \ the kind of data contained in the object, and therefore of the\n   kind of encoding\
    \ that might need to be performed for transmission in\n   a given transport system.\
    \  In particular:\n       \"7bit\" means that the data is all represented as short\n\
    \            lines of US-ASCII data.\n       \"8bit\" means that the lines are\
    \ short, but there may be\n            non-ASCII characters (octets with the high-order\n\
    \            bit set).\n       \"Binary\" means that not only may non-ASCII characters\n\
    \            be present, but also that the lines are not\n            necessarily\
    \ short enough for SMTP transport.\n   The difference between \"8bit\" (or any\
    \ other conceivable bit-width\n   token) and the \"binary\" token is that \"binary\"\
    \ does not require\n   adherence to any limits on line length or to the SMTP CRLF\
    \ semantics,\n   while the bit-width tokens do require such adherence.  If the\
    \ body\n   contains data in any bit-width other than 7-bit, the appropriate\n\
    \   bit-width Content-Transfer-Encoding token must be used (e.g., \"8bit\"\n \
    \  for unencoded 8 bit wide data).  If the body contains binary data,\n   the\
    \ \"binary\" Content-Transfer-Encoding token must be used.\n      NOTE: The distinction\
    \ between the Content-Transfer-Encoding values\n      of \"binary\", \"8bit\"\
    , etc.  may seem unimportant, in that all of\n      them really mean \"none\"\
    \ -- that is, there has been no encoding of\n      the data for transport.  However,\
    \ clear labeling will be of\n      enormous value to gateways between future mail\
    \ transport systems\n      with differing capabilities in transporting data that\
    \ do not meet\n      the restrictions of RFC 821 transport.\n      Mail transport\
    \ for unencoded 8-bit data is defined in RFC-1426\n      [RFC-1426].  As of the\
    \ publication of this document, there are no\n      standardized Internet mail\
    \ transports for which it is legitimate\n      to include unencoded binary data\
    \ in mail bodies.  Thus there are\n      no circumstances in which the \"binary\"\
    \ Content-Transfer-Encoding\n      is actually legal on the Internet.  However,\
    \ in the event that\n      binary mail transport becomes a reality in Internet\
    \ mail, or when\n      this document is used in conjunction with any other binary-capable\n\
    \      transport mechanism, binary bodies should be labeled as such using\n  \
    \    this mechanism.\n      NOTE: The five values defined for the Content-Transfer-Encoding\n\
    \      field imply nothing about the Content-Type other than the\n      algorithm\
    \ by which it was encoded or the transport system\n      requirements if unencoded.\n\
    \   Implementors may, if necessary, define new Content-Transfer-Encoding\n   values,\
    \ but must use an x-token, which is a name prefixed by \"X-\" to\n   indicate\
    \ its non-standard status, e.g., \"Content-Transfer-Encoding:\n   x-my-new-encoding\"\
    .  However, unlike Content-Types and subtypes, the\n   creation of new Content-Transfer-Encoding\
    \ values is explicitly and\n   strongly discouraged, as it seems likely to hinder\
    \ interoperability\n   with little potential benefit.  Their use is allowed only\
    \ as the\n   result of an agreement between cooperating user agents.\n   If a\
    \ Content-Transfer-Encoding header field appears as part of a\n   message header,\
    \ it applies to the entire body of that message.  If a\n   Content-Transfer-Encoding\
    \ header field appears as part of a body\n   part's headers, it applies only to\
    \ the body of that body part.  If an\n   entity is of type \"multipart\" or \"\
    message\", the Content-Transfer-\n   Encoding is not permitted to have any value\
    \ other than a bit width\n   (e.g., \"7bit\", \"8bit\", etc.) or \"binary\".\n\
    \   It should be noted that email is character-oriented, so that the\n   mechanisms\
    \ described here are mechanisms for encoding arbitrary octet\n   streams, not\
    \ bit streams.  If a bit stream is to be encoded via one\n   of these mechanisms,\
    \ it must first be converted to an 8-bit byte\n   stream using the network standard\
    \ bit order (\"big-endian\"), in which\n   the earlier bits in a stream become\
    \ the higher-order bits in a byte.\n   A bit stream not ending at an 8-bit boundary\
    \ must be padded with\n   zeroes.  This document provides a mechanism for noting\
    \ the addition\n   of such padding in the case of the application Content-Type,\
    \ which\n   has a \"padding\" parameter.\n   The encoding mechanisms defined here\
    \ explicitly encode all data in\n   ASCII.  Thus, for example, suppose an entity\
    \ has header fields such\n   as:\n        Content-Type: text/plain; charset=ISO-8859-1\n\
    \        Content-transfer-encoding: base64\n   This must be interpreted to mean\
    \ that the body is a base64 ASCII\n   encoding of data that was originally in\
    \ ISO-8859-1, and will be in\n   that character set again after decoding.\n  \
    \ The following sections will define the two standard encoding\n   mechanisms.\
    \  The definition of new content-transfer-encodings is\n   explicitly discouraged\
    \ and should only occur when absolutely\n   necessary.  All content-transfer-encoding\
    \ namespace except that\n   beginning with \"X-\" is explicitly reserved to the\
    \ IANA for future\n   use.  Private agreements about content-transfer-encodings\
    \ are also\n   explicitly discouraged.\n   Certain Content-Transfer-Encoding values\
    \ may only be used on certain\n   Content-Types.  In particular, it is expressly\
    \ forbidden to use any\n   encodings other than \"7bit\", \"8bit\", or \"binary\"\
    \ with any Content-\n   Type that recursively includes other Content-Type fields,\
    \ notably the\n   \"multipart\" and \"message\" Content-Types.  All encodings\
    \ that are\n   desired for bodies of type multipart or message must be done at\
    \ the\n   innermost level, by encoding the actual body that needs to be\n   encoded.\n\
    \      NOTE ON ENCODING RESTRICTIONS: Though the prohibition against\n      using\
    \ content-transfer-encodings on data of type multipart or\n      message may seem\
    \ overly restrictive, it is necessary to prevent\n      nested encodings, in which\
    \ data are passed through an encoding\n      algorithm multiple times, and must\
    \ be decoded multiple times in\n      order to be properly viewed.  Nested encodings\
    \ add considerable\n      complexity to user agents: aside from the obvious efficiency\n\
    \      problems with such multiple encodings, they can obscure the basic\n   \
    \   structure of a message.  In particular, they can imply that\n      several\
    \ decoding operations are necessary simply to find out what\n      types of objects\
    \ a message contains.  Banning nested encodings may\n      complicate the job\
    \ of certain mail gateways, but this seems less\n      of a problem than the effect\
    \ of nested encodings on user agents.\n      NOTE ON THE RELATIONSHIP BETWEEN\
    \ CONTENT-TYPE AND CONTENT-\n      TRANSFER-ENCODING: It may seem that the Content-Transfer-Encoding\n\
    \      could be inferred from the characteristics of the Content-Type\n      that\
    \ is to be encoded, or, at the very least, that certain\n      Content-Transfer-Encodings\
    \ could be mandated for use with specific\n      Content-Types. There are several\
    \ reasons why this is not the case.\n      First, given the varying types of transports\
    \ used for mail, some\n      encodings may be appropriate for some Content-Type/transport\n\
    \      combinations and not for others.  (For example, in an 8-bit\n      transport,\
    \ no encoding would be required for text in certain\n      character sets, while\
    \ such encodings are clearly required for 7-\n      bit SMTP.)  Second, certain\
    \ Content-Types may require different\n      types of transfer encoding under\
    \ different circumstances. For\n      example, many PostScript bodies might consist\
    \ entirely of short\n      lines of 7-bit data and hence require little or no\
    \ encoding.\n      Other PostScript bodies (especially those using Level 2\n \
    \     PostScript's binary encoding mechanism) may only be reasonably\n      represented\
    \ using a binary transport encoding. Finally, since\n      Content-Type is intended\
    \ to be an open-ended specification\n      mechanism, strict specification of\
    \ an association between\n      Content-Types and encodings effectively couples\
    \ the specification\n      of an application protocol with a specific lower-level\
    \ transport.\n      This is not desirable since the developers of a Content-Type\n\
    \      should not have to be aware of all the transports in use and what\n   \
    \   their limitations are.\n      NOTE ON TRANSLATING ENCODINGS: The quoted-printable\
    \ and base64\n      encodings are designed so that conversion between them is\n\
    \      possible.  The only issue that arises in such a conversion is the\n   \
    \   handling of line breaks.  When converting from quoted-printable to\n     \
    \ base64 a line break must be converted into a CRLF sequence.\n      Similarly,\
    \ a CRLF sequence in base64 data must be converted to a\n      quoted-printable\
    \ line break, but ONLY when converting text data.\n      NOTE ON CANONICAL ENCODING\
    \ MODEL: There was some confusion, in\n      earlier drafts of this memo, regarding\
    \ the model for when email\n      data was to be converted to canonical form and\
    \ encoded, and in\n      particular how this process would affect the treatment\
    \ of CRLFs,\n      given that the representation of newlines varies greatly from\n\
    \      system to system, and the relationship between content-transfer-\n    \
    \  encodings and character sets.  For this reason, a canonical model\n      for\
    \ encoding is presented as Appendix G.\n"
- title: 5.1.  Quoted-Printable Content-Transfer-Encoding
  contents:
  - "5.1.  Quoted-Printable Content-Transfer-Encoding\n   The Quoted-Printable encoding\
    \ is intended to represent data that\n   largely consists of octets that correspond\
    \ to printable characters in\n   the ASCII character set.  It encodes the data\
    \ in such a way that the\n   resulting octets are unlikely to be modified by mail\
    \ transport.  If\n   the data being encoded are mostly ASCII text, the encoded\
    \ form of the\n   data remains largely recognizable by humans.  A body which is\n\
    \   entirely ASCII may also be encoded in Quoted-Printable to ensure the\n   integrity\
    \ of the data should the message pass through a character-\n   translating, and/or\
    \ line-wrapping gateway.\n   In this encoding, octets are to be represented as\
    \ determined by the\n   following rules:\n      Rule #1: (General 8-bit representation)\
    \ Any octet, except those\n      indicating a line break according to the newline\
    \ convention of the\n      canonical (standard) form of the data being encoded,\
    \ may be\n      represented by an \"=\" followed by a two digit hexadecimal\n\
    \      representation of the octet's value.  The digits of the\n      hexadecimal\
    \ alphabet, for this purpose, are \"0123456789ABCDEF\".\n      Uppercase letters\
    \ must be used when sending hexadecimal data,\n      though a robust implementation\
    \ may choose to recognize lowercase\n      letters on receipt.  Thus, for example,\
    \ the value 12 (ASCII form\n      feed) can be represented by \"=0C\", and the\
    \ value 61 (ASCII EQUAL\n      SIGN) can be represented by \"=3D\".  Except when\
    \ the following\n      rules allow an alternative encoding, this rule is mandatory.\n\
    \      Rule #2: (Literal representation) Octets with decimal values of 33\n  \
    \    through 60 inclusive, and 62 through 126, inclusive, MAY be\n      represented\
    \ as the ASCII characters which correspond to those\n      octets (EXCLAMATION\
    \ POINT through LESS THAN, and GREATER THAN\n      through TILDE, respectively).\n\
    \      Rule #3: (White Space): Octets with values of 9 and 32 MAY be\n      represented\
    \ as ASCII TAB (HT) and SPACE characters, respectively,\n      but MUST NOT be\
    \ so represented at the end of an encoded line. Any\n      TAB (HT) or SPACE characters\
    \ on an encoded line MUST thus be\n      followed on that line by a printable\
    \ character.  In particular, an\n      \"=\" at the end of an encoded line, indicating\
    \ a soft line break\n      (see rule #5) may follow one or more TAB (HT) or SPACE\
    \ characters.\n      It follows that an octet with value 9 or 32 appearing at\
    \ the end\n      of an encoded line must be represented according to Rule #1.\
    \  This\n      rule is necessary because some MTAs (Message Transport Agents,\n\
    \      programs which transport messages from one user to another, or\n      perform\
    \ a part of such transfers) are known to pad lines of text\n      with SPACEs,\
    \ and others are known to remove \"white space\"\n      characters from the end\
    \ of a line.  Therefore, when decoding a\n      Quoted-Printable body, any trailing\
    \ white space on a line must be\n      deleted, as it will necessarily have been\
    \ added by intermediate\n      transport agents.\n      Rule #4 (Line Breaks):\
    \ A line break in a text body, independent of\n      what its representation is\
    \ following the canonical representation\n      of the data being encoded, must\
    \ be represented by a (RFC 822) line\n      break, which is a CRLF sequence, in\
    \ the Quoted-Printable encoding.\n      Since the canonical representation of\
    \ types other than text do not\n      generally include the representation of\
    \ line breaks, no hard line\n      breaks (i.e.  line breaks that are intended\
    \ to be meaningful and\n      to be displayed to the user) should occur in the\
    \ quoted-printable\n      encoding of such types.  Of course, occurrences of \"\
    =0D\", \"=0A\",\n      \"0A=0D\" and \"=0D=0A\" will eventually be encountered.\
    \  In general,\n      however, base64 is preferred over quoted-printable for binary\n\
    \      data.\n      Note that many implementations may elect to encode the local\n\
    \      representation of various content types directly, as described in\n   \
    \   Appendix G.  In particular, this may apply to plain text material\n      on\
    \ systems that use newline conventions other than CRLF\n      delimiters. Such\
    \ an implementation is permissible, but the\n      generation of line breaks must\
    \ be generalized to account for the\n      case where alternate representations\
    \ of newline sequences are\n      used.\n      Rule #5 (Soft Line Breaks): The\
    \ Quoted-Printable encoding REQUIRES\n      that encoded lines be no more than\
    \ 76 characters long. If longer\n      lines are to be encoded with the Quoted-Printable\
    \ encoding, 'soft'\n      line breaks must be used. An equal sign as the last\
    \ character on a\n      encoded line indicates such a non-significant ('soft')\
    \ line break\n      in the encoded text. Thus if the \"raw\" form of the line\
    \ is a\n      single unencoded line that says:\n          Now's the time for all\
    \ folk to come to the aid of\n          their country.\n      This can be represented,\
    \ in the Quoted-Printable encoding, as\n          Now's the time =\n         \
    \ for all folk to come=\n           to the aid of their country.\n      This provides\
    \ a mechanism with which long lines are encoded in\n      such a way as to be\
    \ restored by the user agent.  The 76 character\n      limit does not count the\
    \ trailing CRLF, but counts all other\n      characters, including any equal signs.\n\
    \   Since the hyphen character (\"-\") is represented as itself in the\n   Quoted-Printable\
    \ encoding, care must be taken, when encapsulating a\n   quoted-printable encoded\
    \ body in a multipart entity, to ensure that\n   the encapsulation boundary does\
    \ not appear anywhere in the encoded\n   body.  (A good strategy is to choose\
    \ a boundary that includes a\n   character sequence such as \"=_\" which can never\
    \ appear in a quoted-\n   printable body.  See the definition of multipart messages\
    \ later in\n   this document.)\n      NOTE: The quoted-printable encoding represents\
    \ something of a\n      compromise between readability and reliability in transport.\n\
    \      Bodies encoded with the quoted-printable encoding will work\n      reliably\
    \ over most mail gateways, but may not work perfectly over\n      a few gateways,\
    \ notably those involving translation into EBCDIC.\n      (In theory, an EBCDIC\
    \ gateway could decode a quoted-printable body\n      and re-encode it using base64,\
    \ but such gateways do not yet\n      exist.)  A higher level of confidence is\
    \ offered by the base64\n      Content-Transfer-Encoding.  A way to get reasonably\
    \ reliable\n      transport through EBCDIC gateways is to also quote the ASCII\n\
    \      characters\n             !\"#$@[\\]^`{|}~\n      according to rule #1.\
    \  See Appendix B for more information.\n   Because quoted-printable data is generally\
    \ assumed to be line-\n   oriented, it is to be expected that the representation\
    \ of the breaks\n   between the lines of quoted printable data may be altered\
    \ in\n   transport, in the same manner that plain text mail has always been\n\
    \   altered in Internet mail when passing between systems with differing\n   newline\
    \ conventions.  If such alterations are likely to constitute a\n   corruption\
    \ of the data, it is probably more sensible to use the\n   base64 encoding rather\
    \ than the quoted-printable encoding.\n   WARNING TO IMPLEMENTORS: If binary data\
    \ are encoded in quoted-\n   printable, care must be taken to encode CR and LF\
    \ characters as \"=0D\"\n   and \"=0A\", respectively.  In particular, a CRLF\
    \ sequence in binary\n   data should be encoded as \"=0D=0A\".  Otherwise, if\
    \ CRLF were\n   represented as a hard line break, it might be incorrectly decoded\
    \ on\n   platforms with different line break conventions.\n   For formalists,\
    \ the syntax of quoted-printable data is described by\n   the following grammar:\n\
    \   quoted-printable := ([*(ptext / SPACE / TAB) ptext] [\"=\"] CRLF)\n      \
    \  ; Maximum line length of 76 characters excluding CRLF\n   ptext := octet /<any\
    \ ASCII character except \"=\", SPACE, or TAB>\n        ; characters not listed\
    \ as \"mail-safe\" in Appendix B\n        ; are also not recommended.\n   octet\
    \ := \"=\" 2(DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\")\n        ;\
    \ octet must be used for characters > 127, =, SPACE, or TAB,\n        ; and is\
    \ recommended for any characters not listed in\n        ; Appendix B as \"mail-safe\"\
    .\n"
- title: 5.2.  Base64 Content-Transfer-Encoding
  contents:
  - "5.2.  Base64 Content-Transfer-Encoding\n   The Base64 Content-Transfer-Encoding\
    \ is designed to represent\n   arbitrary sequences of octets in a form that need\
    \ not be humanly\n   readable.  The encoding and decoding algorithms are simple,\
    \ but the\n   encoded data are consistently only about 33 percent larger than\
    \ the\n   unencoded data.  This encoding is virtually identical to the one used\n\
    \   in Privacy Enhanced Mail (PEM) applications, as defined in RFC 1421.\n   The\
    \ base64 encoding is adapted from RFC 1421, with one change: base64\n   eliminates\
    \ the \"*\" mechanism for embedded clear text.\n   A 65-character subset of US-ASCII\
    \ is used, enabling 6 bits to be\n   represented per printable character. (The\
    \ extra 65th character, \"=\",\n   is used to signify a special processing function.)\n\
    \      NOTE: This subset has the important property that it is\n      represented\
    \ identically in all versions of ISO 646, including US\n      ASCII, and all characters\
    \ in the subset are also represented\n      identically in all versions of EBCDIC.\
    \  Other popular encodings,\n      such as the encoding used by the uuencode utility\
    \ and the base85\n      encoding specified as part of Level 2 PostScript, do not\
    \ share\n      these properties, and thus do not fulfill the portability\n   \
    \   requirements a binary transport encoding for mail must meet.\n   The encoding\
    \ process represents 24-bit groups of input bits as output\n   strings of 4 encoded\
    \ characters. Proceeding from left to right, a\n   24-bit input group is formed\
    \ by concatenating 3 8-bit input groups.\n   These 24 bits are then treated as\
    \ 4 concatenated 6-bit groups, each\n   of which is translated into a single digit\
    \ in the base64 alphabet.\n   When encoding a bit stream via the base64 encoding,\
    \ the bit stream\n   must be presumed to be ordered with the most-significant-bit\
    \ first.\n   That is, the first bit in the stream will be the high-order bit in\n\
    \   the first byte, and the eighth bit will be the low-order bit in the\n   first\
    \ byte, and so on.\n   Each 6-bit group is used as an index into an array of 64\
    \ printable\n   characters. The character referenced by the index is placed in\
    \ the\n   output string. These characters, identified in Table 1, below, are\n\
    \   selected so as to be universally representable, and the set excludes\n   characters\
    \ with particular significance to SMTP (e.g., \".\", CR, LF)\n   and to the encapsulation\
    \ boundaries defined in this document (e.g.,\n   \"-\").\n                   \
    \         Table 1: The Base64 Alphabet\n      Value Encoding  Value Encoding \
    \ Value Encoding  Value Encoding\n           0 A            17 R            34\
    \ i            51 z\n           1 B            18 S            35 j          \
    \  52 0\n           2 C            19 T            36 k            53 1\n    \
    \       3 D            20 U            37 l            54 2\n           4 E  \
    \          21 V            38 m            55 3\n           5 F            22\
    \ W            39 n            56 4\n           6 G            23 X          \
    \  40 o            57 5\n           7 H            24 Y            41 p      \
    \      58 6\n           8 I            25 Z            42 q            59 7\n\
    \           9 J            26 a            43 r            60 8\n          10\
    \ K            27 b            44 s            61 9\n          11 L          \
    \  28 c            45 t            62 +\n          12 M            29 d      \
    \      46 u            63 /\n          13 N            30 e            47 v\n\
    \          14 O            31 f            48 w         (pad) =\n          15\
    \ P            32 g            49 x\n          16 Q            33 h          \
    \  50 y\n   The output stream (encoded bytes) must be represented in lines of\
    \ no\n   more than 76 characters each.  All line breaks or other characters\n\
    \   not found in Table 1 must be ignored by decoding software.  In base64\n  \
    \ data, characters other than those in Table 1, line breaks, and other\n   white\
    \ space probably indicate a transmission error, about which a\n   warning message\
    \ or even a message rejection might be appropriate\n   under some circumstances.\n\
    \   Special processing is performed if fewer than 24 bits are available\n   at\
    \ the end of the data being encoded.  A full encoding quantum is\n   always completed\
    \ at the end of a body.  When fewer than 24 input bits\n   are available in an\
    \ input group, zero bits are added (on the right)\n   to form an integral number\
    \ of 6-bit groups.  Padding at the end of\n   the data is performed using the\
    \ '=' character.  Since all base64\n   input is an integral number of octets,\
    \ only the following cases can\n   arise: (1) the final quantum of encoding input\
    \ is an integral\n   multiple of 24 bits; here, the final unit of encoded output\
    \ will be\n   an integral multiple of 4 characters with no \"=\" padding, (2)\
    \ the\n   final quantum of encoding input is exactly 8 bits; here, the final\n\
    \   unit of encoded output will be two characters followed by two \"=\"\n   padding\
    \ characters, or (3) the final quantum of encoding input is\n   exactly 16 bits;\
    \ here, the final unit of encoded output will be three\n   characters followed\
    \ by one \"=\" padding character.\n   Because it is used only for padding at the\
    \ end of the data, the\n   occurrence of any '=' characters may be taken as evidence\
    \ that the\n   end of the data has been reached (without truncation in transit).\
    \  No\n   such assurance is possible, however, when the number of octets\n   transmitted\
    \ was a multiple of three.\n   Any characters outside of the base64 alphabet are\
    \ to be ignored in\n   base64-encoded data.  The same applies to any illegal sequence\
    \ of\n   characters in the base64 encoding, such as \"=====\"\n   Care must be\
    \ taken to use the proper octets for line breaks if base64\n   encoding is applied\
    \ directly to text material that has not been\n   converted to canonical form.\
    \  In particular, text line breaks must be\n   converted into CRLF sequences prior\
    \ to base64 encoding. The important\n   thing to note is that this may be done\
    \ directly by the encoder rather\n   than in a prior canonicalization step in\
    \ some implementations.\n      NOTE: There is no need to worry about quoting apparent\n\
    \      encapsulation boundaries within base64-encoded parts of multipart\n   \
    \   entities because no hyphen characters are used in the base64\n      encoding.\n"
- title: 6.    Additional Content-Header Fields
  contents:
  - '6.    Additional Content-Header Fields

    '
- title: 6.1.  Optional Content-ID Header Field
  contents:
  - "6.1.  Optional Content-ID Header Field\n   In constructing a high-level user\
    \ agent, it may be desirable to allow\n   one body to make reference to another.\
    \  Accordingly, bodies may be\n   labeled using the \"Content-ID\" header field,\
    \ which is syntactically\n   identical to the \"Message-ID\" header field:\n \
    \  id :=  \"Content-ID\" \":\" msg-id\n   Like the Message-ID values, Content-ID\
    \ values must be generated to be\n   world-unique.\n   The Content-ID value may\
    \ be used for uniquely identifying MIME\n   entities in several contexts, particularly\
    \ for cacheing data\n   referenced by the message/external-body mechanism.  Although\
    \ the\n   Content-ID header is generally optional, its use is mandatory in\n \
    \  implementations which generate data of the optional MIME Content-type\n   \"\
    message/external-body\".  That is, each message/external-body entity\n   must\
    \ have a Content-ID field to permit cacheing of such data.\n   It is also worth\
    \ noting that the Content-ID value has special\n   semantics in the case of the\
    \ multipart/alternative content-type.\n   This is explained in the section of\
    \ this document dealing with\n   multipart/alternative.\n"
- title: 6.2.  Optional Content-Description Header Field
  contents:
  - "6.2.  Optional Content-Description Header Field\n   The ability to associate\
    \ some descriptive information with a given\n   body is often desirable. For example,\
    \ it may be useful to mark an\n   \"image\" body as \"a picture of the Space Shuttle\
    \ Endeavor.\"  Such text\n   may be placed in the Content-Description header field.\n\
    \   description := \"Content-Description\" \":\" *text\n   The description is\
    \ presumed to be given in the US-ASCII character\n   set, although the mechanism\
    \ specified in [RFC-1522] may be used for\n   non-US-ASCII Content-Description\
    \ values.\n"
- title: 7.    The Predefined Content-Type Values
  contents:
  - "7.    The Predefined Content-Type Values\n   This document defines seven initial\
    \ Content-Type values and an\n   extension mechanism for private or experimental\
    \ types.  Further\n   standard types must be defined by new published specifications.\
    \  It\n   is expected that most innovation in new types of mail will take place\n\
    \   as subtypes of the seven types defined here.  The most essential\n   characteristics\
    \ of the seven content-types are summarized in Appendix\n   F.\n"
- title: 7.1  The Text Content-Type
  contents:
  - "7.1  The Text Content-Type\n   The text Content-Type is intended for sending\
    \ material which is\n   principally textual in form.  It is the default Content-Type.\
    \  A\n   \"charset\" parameter may be used to indicate the character set of the\n\
    \   body text for some text subtypes, notably including the primary\n   subtype,\
    \ \"text/plain\", which indicates plain (unformatted) text.  The\n   default Content-Type\
    \ for Internet mail is \"text/plain; charset=us-\n   ascii\".\n   Beyond plain\
    \ text, there are many formats for representing what might\n   be known as \"\
    extended text\" -- text with embedded formatting and\n   presentation information.\
    \  An interesting characteristic of many such\n   representations is that they\
    \ are to some extent readable even without\n   the software that interprets them.\
    \  It is useful, then, to\n   distinguish them, at the highest level, from such\
    \ unreadable data as\n   images, audio, or text represented in an unreadable form.\
    \  In the\n   absence of appropriate interpretation software, it is reasonable\
    \ to\n   show subtypes of text to the user, while it is not reasonable to do\n\
    \   so with most nontextual data.\n   Such formatted textual data should be represented\
    \ using subtypes of\n   text.  Plausible subtypes of text are typically given\
    \ by the common\n   name of the representation format, e.g., \"text/richtext\"\
    \ [RFC-1341].\n"
- title: 7.1.1.     The charset parameter
  contents:
  - "7.1.1.     The charset parameter\n   A critical parameter that may be specified\
    \ in the Content-Type field\n   for text/plain data is the character set.  This\
    \ is specified with a\n   \"charset\" parameter, as in:\n        Content-type:\
    \ text/plain; charset=us-ascii\n   Unlike some other parameter values, the values\
    \ of the charset\n   parameter are NOT case sensitive.  The default character\
    \ set, which\n   must be assumed in the absence of a charset parameter, is US-ASCII.\n\
    \   The specification for any future subtypes of \"text\" must specify\n   whether\
    \ or not they will also utilize a \"charset\" parameter, and may\n   possibly\
    \ restrict its values as well.  When used with a particular\n   body, the semantics\
    \ of the \"charset\" parameter should be identical to\n   those specified here\
    \ for \"text/plain\", i.e., the body consists\n   entirely of characters in the\
    \ given charset.  In particular, definers\n   of future text subtypes should pay\
    \ close attention the the\n   implications of multibyte character sets for their\
    \ subtype\n   definitions.\n   This RFC specifies the definition of the charset\
    \ parameter for the\n   purposes of MIME to be a unique mapping of a byte stream\
    \ to glyphs, a\n   mapping which does not require external profiling information.\n\
    \   An initial list of predefined character set names can be found at the\n  \
    \ end of this section.  Additional character sets may be registered\n   with IANA,\
    \ although the standardization of their use requires the\n   usual IESG [RFC-1340]\
    \ review and approval.  Note that if the\n   specified character set includes\
    \ 8-bit data, a Content-Transfer-\n   Encoding header field and a corresponding\
    \ encoding on the data are\n   required in order to transmit the body via some\
    \ mail transfer\n   protocols, such as SMTP.\n   The default character set, US-ASCII,\
    \ has been the subject of some\n   confusion and ambiguity in the past.  Not only\
    \ were there some\n   ambiguities in the definition, there have been wide variations\
    \ in\n   practice.  In order to eliminate such ambiguity and variations in the\n\
    \   future, it is strongly recommended that new user agents explicitly\n   specify\
    \ a character set via the Content-Type header field.  \"US-\n   ASCII\" does not\
    \ indicate an arbitrary seven-bit character code, but\n   specifies that the body\
    \ uses character coding that uses the exact\n   correspondence of codes to characters\
    \ specified in ASCII.  National\n   use variations of ISO 646 [ISO-646] are NOT\
    \ ASCII and their use in\n   Internet mail is explicitly discouraged. The omission\
    \ of the ISO 646\n   character set is deliberate in this regard.  The character\
    \ set name\n   of \"US-ASCII\" explicitly refers to ANSI X3.4-1986 [US-ASCII]\
    \ only.\n   The character set name \"ASCII\" is reserved and must not be used\
    \ for\n   any purpose.\n      NOTE: RFC 821 explicitly specifies \"ASCII\", and\
    \ references an\n      earlier version of the American Standard.  Insofar as one\
    \ of the\n      purposes of specifying a Content-Type and character set is to\n\
    \      permit the receiver to unambiguously determine how the sender\n      intended\
    \ the coded message to be interpreted, assuming anything\n      other than \"\
    strict ASCII\" as the default would risk unintentional\n      and incompatible\
    \ changes to the semantics of messages now being\n      transmitted.  This also\
    \ implies that messages containing\n      characters coded according to national\
    \ variations on ISO 646, or\n      using code-switching procedures (e.g., those\
    \ of ISO 2022), as well\n      as 8-bit or multiple octet character encodings\
    \ MUST use an\n      appropriate character set specification to be consistent\
    \ with this\n      specification.\n   The complete US-ASCII character set is listed\
    \ in [US-ASCII].  Note\n   that the control characters including DEL (0-31, 127)\
    \ have no defined\n   meaning apart from the combination CRLF (ASCII values 13\
    \ and 10)\n   indicating a new line.  Two of the characters have de facto meanings\n\
    \   in wide use: FF (12) often means \"start subsequent text on the\n   beginning\
    \ of a new page\"; and TAB or HT (9) often (though not always)\n   means \"move\
    \ the cursor to the next available column after the current\n   position where\
    \ the column number is a multiple of 8 (counting the\n   first column as column\
    \ 0).\" Apart from this, any use of the control\n   characters or DEL in a body\
    \ must be part of a private agreement\n   between the sender and recipient.  Such\
    \ private agreements are\n   discouraged and should be replaced by the other capabilities\
    \ of this\n   document.\n      NOTE: Beyond US-ASCII, an enormous proliferation\
    \ of character sets\n      is possible. It is the opinion of the IETF working\
    \ group that a\n      large number of character sets is NOT a good thing.  We\
    \ would\n      prefer to specify a single character set that can be used\n   \
    \   universally for representing all of the world's languages in\n      electronic\
    \ mail.  Unfortunately, existing practice in several\n      communities seems\
    \ to point to the continued use of multiple\n      character sets in the near\
    \ future.  For this reason, we define\n      names for a small number of character\
    \ sets for which a strong\n      constituent base exists.\n   The defined charset\
    \ values are:\n   US-ASCII -- as defined in [US-ASCII].\n        ISO-8859-X --\
    \ where \"X\" is to be replaced, as necessary, for the\n             parts of\
    \ ISO-8859 [ISO-8859].  Note that the ISO 646\n             character sets have\
    \ deliberately been omitted in favor of\n             their 8859 replacements,\
    \ which are the designated character\n             sets for Internet mail.  As\
    \ of the publication of this\n             document, the legitimate values for\
    \ \"X\" are the digits 1\n             through 9.\n   The character sets specified\
    \ above are the ones that were relatively\n   uncontroversial during the drafting\
    \ of MIME.  This document does not\n   endorse the use of any particular character\
    \ set other than US-ASCII,\n   and recognizes that the future evolution of world\
    \ character sets\n   remains unclear.  It is expected that in the future, additional\n\
    \   character sets will be registered for use in MIME.\n   Note that the character\
    \ set used, if anything other than US-ASCII,\n   must always be explicitly specified\
    \ in the Content-Type field.\n   No other character set name may be used in Internet\
    \ mail without the\n   publication of a formal specification and its registration\
    \ with IANA,\n   or by private agreement, in which case the character set name\
    \ must\n   begin with \"X-\".\n   Implementors are discouraged from defining new\
    \ character sets for\n   mail use unless absolutely necessary.\n   The \"charset\"\
    \ parameter has been defined primarily for the purpose of\n   textual data, and\
    \ is described in this section for that reason.\n   However, it is conceivable\
    \ that non-textual data might also wish to\n   specify a charset value for some\
    \ purpose, in which case the same\n   syntax and values should be used.\n   In\
    \ general, mail-sending software must always use the \"lowest common\n   denominator\"\
    \ character set possible.  For example, if a body contains\n   only US-ASCII characters,\
    \ it must be marked as being in the US-ASCII\n   character set, not ISO-8859-1,\
    \ which, like all the ISO-8859 family of\n   character sets, is a superset of\
    \ US-ASCII.  More generally, if a\n   widely-used character set is a subset of\
    \ another character set, and a\n   body contains only characters in the widely-used\
    \ subset, it must be\n   labeled as being in that subset.  This will increase\
    \ the chances that\n   the recipient will be able to view the mail correctly.\n"
- title: 7.1.2.     The Text/plain subtype
  contents:
  - "7.1.2.     The Text/plain subtype\n   The primary subtype of text is \"plain\"\
    .  This indicates plain\n   (unformatted) text.  The default Content-Type for\
    \ Internet mail,\n   \"text/plain; charset=us-ascii\", describes existing Internet\
    \ practice.\n   That is, it is the type of body defined by RFC 822.\n   No other\
    \ text subtype is defined by this document.\n   The formal grammar for the content-type\
    \ header field for text is as\n   follows:\n   text-type := \"text\" \"/\" text-subtype\
    \ [\";\" \"charset\" \"=\" charset]\n   text-subtype := \"plain\" / extension-token\n\
    \   charset := \"us-ascii\"/ \"iso-8859-1\"/ \"iso-8859-2\"/ \"iso-8859-3\"\n\
    \          / \"iso-8859-4\"/ \"iso-8859-5\"/ \"iso-8859-6\"/ \"iso-8859-7\"\n\
    \          / \"iso-8859-8\" / \"iso-8859-9\" / extension-token\n             \
    \       ; case insensitive\n"
- title: 7.2.  The Multipart Content-Type
  contents:
  - "7.2.  The Multipart Content-Type\n   In the case of multiple part entities, in\
    \ which one or more different\n   sets of data are combined in a single body,\
    \ a \"multipart\" Content-\n   Type field must appear in the entity's header.\
    \ The body must then\n   contain one or more \"body parts,\" each preceded by\
    \ an encapsulation\n   boundary, and the last one followed by a closing boundary.\
    \  Each part\n   starts with an encapsulation boundary, and then contains a body\
    \ part\n   consisting of header area, a blank line, and a body area.  Thus a\n\
    \   body part is similar to an RFC 822 message in syntax, but different\n   in\
    \ meaning.\n   A body part is NOT to be interpreted as actually being an RFC 822\n\
    \   message.  To begin with, NO header fields are actually required in\n   body\
    \ parts.  A body part that starts with a blank line, therefore, is\n   allowed\
    \ and is a body part for which all default values are to be\n   assumed.  In such\
    \ a case, the absence of a Content-Type header field\n   implies that the corresponding\
    \ body is plain US-ASCII text.  The only\n   header fields that have defined meaning\
    \ for body parts are those the\n   names of which begin with \"Content-\".  All\
    \ other header fields are\n   generally to be ignored in body parts.  Although\
    \ they should\n   generally be retained in mail processing, they may be discarded\
    \ by\n   gateways if necessary.  Such other fields are permitted to appear in\n\
    \   body parts but must not be depended on.  \"X-\" fields may be created\n  \
    \ for experimental or private purposes, with the recognition that the\n   information\
    \ they contain may be lost at some gateways.\n      NOTE: The distinction between\
    \ an RFC 822 message and a body part\n      is subtle, but important. A gateway\
    \ between Internet and X.400\n      mail, for example, must be able to tell the\
    \ difference between a\n      body part that contains an image and a body part\
    \ that contains an\n      encapsulated message, the body of which is an image.\
    \  In order to\n      represent the latter, the body part must have \"Content-Type:\n\
    \      message\", and its body (after the blank line) must be the\n      encapsulated\
    \ message, with its own \"Content-Type: image\" header\n      field.  The use\
    \ of similar syntax facilitates the conversion of\n      messages to body parts,\
    \ and vice versa, but the distinction\n      between the two must be understood\
    \ by implementors.  (For the\n      special case in which all parts actually are\
    \ messages, a \"digest\"\n      subtype is also defined.)\n   As stated previously,\
    \ each body part is preceded by an encapsulation\n   boundary.  The encapsulation\
    \ boundary MUST NOT appear inside any of\n   the encapsulated parts.  Thus, it\
    \ is crucial that the composing agent\n   be able to choose and specify the unique\
    \ boundary that will separate\n   the parts.\n   All present and future subtypes\
    \ of the \"multipart\" type must use an\n   identical syntax.  Subtypes may differ\
    \ in their semantics, and may\n   impose additional restrictions on syntax, but\
    \ must conform to the\n   required syntax for the multipart type.  This requirement\
    \ ensures\n   that all conformant user agents will at least be able to recognize\n\
    \   and separate the parts of any multipart entity, even of an\n   unrecognized\
    \ subtype.\n   As stated in the definition of the Content-Transfer-Encoding field,\n\
    \   no encoding other than \"7bit\", \"8bit\", or \"binary\" is permitted for\n\
    \   entities of type \"multipart\".  The multipart delimiters and header\n   fields\
    \ are always represented as 7-bit ASCII in any case (though the\n   header fields\
    \ may encode non-ASCII header text as per [RFC-1522]),\n   and data within the\
    \ body parts can be encoded on a part-by-part\n   basis, with Content-Transfer-Encoding\
    \ fields for each appropriate\n   body part.\n   Mail gateways, relays, and other\
    \ mail handling agents are commonly\n   known to alter the top-level header of\
    \ an RFC 822 message.  In\n   particular, they frequently add, remove, or reorder\
    \ header fields.\n   Such alterations are explicitly forbidden for the body part\
    \ headers\n   embedded in the bodies of messages of type \"multipart.\"\n"
- title: '7.2.1.     Multipart:  The common syntax'
  contents:
  - "7.2.1.     Multipart:  The common syntax\n   All subtypes of \"multipart\" share\
    \ a common syntax, defined in this\n   section.  A simple example of a multipart\
    \ message also appears in\n   this section.  An example of a more complex multipart\
    \ message is\n   given in Appendix C.\n   The Content-Type field for multipart\
    \ entities requires one parameter,\n   \"boundary\", which is used to specify\
    \ the encapsulation boundary.  The\n   encapsulation boundary is defined as a\
    \ line consisting entirely of\n   two hyphen characters (\"-\", decimal code 45)\
    \ followed by the boundary\n   parameter value from the Content-Type header field.\n\
    \      NOTE: The hyphens are for rough compatibility with the earlier RFC\n  \
    \    934 method of message encapsulation, and for ease of searching for\n    \
    \  the boundaries in some implementations. However, it should be\n      noted\
    \ that multipart messages are NOT completely compatible with\n      RFC 934 encapsulations;\
    \ in particular, they do not obey RFC 934\n      quoting conventions for embedded\
    \ lines that begin with hyphens.\n      This mechanism was chosen over the RFC\
    \ 934 mechanism because the\n      latter causes lines to grow with each level\
    \ of quoting.  The\n      combination of this growth with the fact that SMTP implementations\n\
    \      sometimes wrap long lines made the RFC 934 mechanism unsuitable\n     \
    \ for use in the event that deeply-nested multipart structuring is\n      ever\
    \ desired.\n   WARNING TO IMPLEMENTORS: The grammar for parameters on the Content-\n\
    \   type field is such that it is often necessary to enclose the\n   boundaries\
    \ in quotes on the Content-type line.  This is not always\n   necessary, but never\
    \ hurts.  Implementors should be sure to study the\n   grammar carefully in order\
    \ to avoid producing illegal Content-type\n   fields. Thus, a typical multipart\
    \ Content-Type header field might\n   look like this:\n                 Content-Type:\
    \ multipart/mixed;\n                      boundary=gc0p4Jq0M2Yt08jU534c0p\n  \
    \ But the following is illegal:\n                 Content-Type: multipart/mixed;\n\
    \                      boundary=gc0p4Jq0M:2Yt08jU534c0p\n   (because of the colon)\
    \ and must instead be represented as\n                 Content-Type: multipart/mixed;\n\
    \                      boundary=\"gc0p4Jq0M:2Yt08jU534c0p\"\n   This indicates\
    \ that the entity consists of several parts, each itself\n   with a structure\
    \ that is syntactically identical to an RFC 822\n   message, except that the header\
    \ area might be completely empty, and\n   that the parts are each preceded by\
    \ the line\n                 --gc0p4Jq0M:2Yt08jU534c0p\n   Note that the encapsulation\
    \ boundary must occur at the beginning of a\n   line, i.e., following a CRLF,\
    \ and that the initial CRLF is considered\n   to be attached to the encapsulation\
    \ boundary rather than part of the\n   preceding part.  The boundary must be followed\
    \ immediately either by\n   another CRLF and the header fields for the next part,\
    \ or by two\n   CRLFs, in which case there are no header fields for the next part\n\
    \   (and it is therefore assumed to be of Content-Type text/plain).\n      NOTE:\
    \ The CRLF preceding the encapsulation line is conceptually\n      attached to\
    \ the boundary so that it is possible to have a part\n      that does not end\
    \ with a CRLF (line break). Body parts that must\n      be considered to end with\
    \ line breaks, therefore, must have two\n      CRLFs preceding the encapsulation\
    \ line, the first of which is part\n      of the preceding body part, and the\
    \ second of which is part of the\n      encapsulation boundary.\n   Encapsulation\
    \ boundaries must not appear within the encapsulations,\n   and must be no longer\
    \ than 70 characters, not counting the two\n   leading hyphens.\n   The encapsulation\
    \ boundary following the last body part is a\n   distinguished delimiter that\
    \ indicates that no further body parts\n   will follow.  Such a delimiter is identical\
    \ to the previous\n   delimiters, with the addition of two more hyphens at the\
    \ end of the\n   line:\n                 --gc0p4Jq0M2Yt08jU534c0p--\n   There\
    \ appears to be room for additional information prior to the\n   first encapsulation\
    \ boundary and following the final boundary.  These\n   areas should generally\
    \ be left blank, and implementations must ignore\n   anything that appears before\
    \ the first boundary or after the last\n   one.\n      NOTE: These \"preamble\"\
    \ and \"epilogue\" areas are generally not used\n      because of the lack of\
    \ proper typing of these parts and the lack\n      of clear semantics for handling\
    \ these areas at gateways,\n      particularly X.400 gateways.  However, rather\
    \ than leaving the\n      preamble area blank, many MIME implementations have\
    \ found this to\n      be a convenient place to insert an explanatory note for\
    \ recipients\n      who read the message with pre-MIME software, since such notes\
    \ will\n      be ignored by MIME-compliant software.\n      NOTE: Because encapsulation\
    \ boundaries must not appear in the body\n      parts being encapsulated, a user\
    \ agent must exercise care to\n      choose a unique boundary.  The boundary in\
    \ the example above could\n      have been the result of an algorithm designed\
    \ to produce\n      boundaries with a very low probability of already existing\
    \ in the\n      data to be encapsulated without having to prescan the data.\n\
    \      Alternate algorithms might result in more 'readable' boundaries\n     \
    \ for a recipient with an old user agent, but would require more\n      attention\
    \ to the possibility that the boundary might appear in the\n      encapsulated\
    \ part.  The simplest boundary possible is something\n      like \"---\", with\
    \ a closing boundary of \"-----\".\n   As a very simple example, the following\
    \ multipart message has two\n   parts, both of them plain text, one of them explicitly\
    \ typed and one\n   of them implicitly typed:\n      From: Nathaniel Borenstein\
    \ <nsb@bellcore.com>\n      To:  Ned Freed <ned@innosoft.com>\n      Subject:\
    \ Sample message\n      MIME-Version: 1.0\n      Content-type: multipart/mixed;\
    \ boundary=\"simple\n      boundary\"\n      This is the preamble.  It is to be\
    \ ignored, though it\n      is a handy place for mail composers to include an\n\
    \      explanatory note to non-MIME conformant readers.\n      --simple boundary\n\
    \      This is implicitly typed plain ASCII text.\n      It does NOT end with\
    \ a linebreak.\n      --simple boundary\n      Content-type: text/plain; charset=us-ascii\n\
    \      This is explicitly typed plain ASCII text.\n      It DOES end with a linebreak.\n\
    \      --simple boundary--\n      This is the epilogue.  It is also to be ignored.\n\
    \   The use of a Content-Type of multipart in a body part within another\n   multipart\
    \ entity is explicitly allowed.  In such cases, for obvious\n   reasons, care\
    \ must be taken to ensure that each nested multipart\n   entity must use a different\
    \ boundary delimiter. See Appendix C for an\n   example of nested multipart entities.\n\
    \   The use of the multipart Content-Type with only a single body part\n   may\
    \ be useful in certain contexts, and is explicitly permitted.\n   The only mandatory\
    \ parameter for the multipart Content-Type is the\n   boundary parameter, which\
    \ consists of 1 to 70 characters from a set\n   of characters known to be very\
    \ robust through email gateways, and NOT\n   ending with white space.  (If a boundary\
    \ appears to end with white\n   space, the white space must be presumed to have\
    \ been added by a\n   gateway, and must be deleted.)  It is formally specified\
    \ by the\n   following BNF:\n   boundary := 0*69<bchars> bcharsnospace\n   bchars\
    \ := bcharsnospace / \" \"\n   bcharsnospace :=    DIGIT / ALPHA / \"'\" / \"\
    (\" / \")\" / \"+\" /\"_\"\n                 / \",\" / \"-\" / \".\" / \"/\" /\
    \ \":\" / \"=\" / \"?\"\n   Overall, the body of a multipart entity may be specified\
    \  as\n   follows:\n   multipart-body := preamble 1*encapsulation\n          \
    \        close-delimiter epilogue\n   encapsulation := delimiter body-part CRLF\n\
    \   delimiter := \"--\" boundary CRLF ; taken from Content-Type field.\n     \
    \                              ; There must be no space\n                    \
    \               ; between \"--\" and boundary.\n   close-delimiter := \"--\" boundary\
    \ \"--\" CRLF ; Again, no space\n   by \"--\",\n   preamble := discard-text  \
    \ ;  to  be  ignored upon receipt.\n   epilogue := discard-text   ;  to  be  ignored\
    \ upon receipt.\n   discard-text := *(*text CRLF)\n   body-part := <\"message\"\
    \ as defined in RFC 822,\n             with all header fields optional, and with\
    \ the\n             specified delimiter not occurring anywhere in\n          \
    \   the message body, either on a line by itself\n             or as a substring\
    \ anywhere.  Note that the\n             semantics of a part differ from the semantics\n\
    \             of a message, as described in the text.>\n      NOTE: In certain\
    \ transport enclaves, RFC 822 restrictions such as\n      the one that limits\
    \ bodies to printable ASCII characters may not\n      be in force.  (That is,\
    \ the transport domains may resemble\n      standard Internet mail transport as\
    \ specified in RFC821 and\n      assumed by RFC822, but without certain restrictions.)\
    \  The\n      relaxation of these restrictions should be construed as locally\n\
    \      extending the definition of bodies, for example to include octets\n   \
    \   outside of the ASCII range, as long as these extensions are\n      supported\
    \ by the transport and adequately documented in the\n      Content-Transfer-Encoding\
    \ header field. However, in no event are\n      headers (either message headers\
    \ or body-part headers) allowed to\n      contain anything other than ASCII characters.\n\
    \      NOTE: Conspicuously missing from the multipart type is a notion of\n  \
    \    structured, related body parts.  In general, it seems premature to\n    \
    \  try to standardize interpart structure yet.  It is recommended\n      that\
    \ those wishing to provide a more structured or integrated\n      multipart messaging\
    \ facility should define a subtype of multipart\n      that is syntactically identical,\
    \ but that always expects the\n      inclusion of a distinguished part that can\
    \ be used to specify the\n      structure and integration of the other parts,\
    \ probably referring\n      to them by their Content-ID field.  If this approach\
    \ is used,\n      other implementations will not recognize the new subtype, but\
    \ will\n      treat it as the primary subtype (multipart/mixed) and will thus\
    \ be\n      able to show the user the parts that are recognized.\n"
- title: 7.2.2.     The Multipart/mixed (primary) subtype
  contents:
  - "7.2.2.     The Multipart/mixed (primary) subtype\n   The primary subtype for\
    \ multipart, \"mixed\", is intended for use when\n   the body parts are independent\
    \ and need to be bundled in a particular\n   order.  Any multipart subtypes that\
    \ an implementation does not\n   recognize must be treated as being of subtype\
    \ \"mixed\".\n"
- title: 7.2.3.     The Multipart/alternative subtype
  contents:
  - "7.2.3.     The Multipart/alternative subtype\n   The multipart/alternative type\
    \ is syntactically identical to\n   multipart/mixed, but the semantics are different.\
    \  In particular,\n   each of the parts is an \"alternative\" version of the same\n\
    \   information.\n   Systems should recognize that the content of the various\
    \ parts are\n   interchangeable.  Systems should choose the \"best\" type based\
    \ on the\n   local environment and preferences, in some cases even through user\n\
    \   interaction.  As with multipart/mixed, the order of body parts is\n   significant.\
    \  In this case, the alternatives appear in an order of\n   increasing faithfulness\
    \ to the original content. In general, the best\n   choice is the LAST part of\
    \ a type supported by the recipient system's\n   local environment.\n   Multipart/alternative\
    \ may be used, for example, to send mail in a\n   fancy text format in such a\
    \ way that it can easily be displayed\n   anywhere:\n   From:  Nathaniel Borenstein\
    \ <nsb@bellcore.com>\n   To: Ned Freed <ned@innosoft.com>\n   Subject: Formatted\
    \ text mail\n   MIME-Version: 1.0\n   Content-Type: multipart/alternative; boundary=boundary42\n\
    \   --boundary42\n   Content-Type: text/plain; charset=us-ascii\n      ...plain\
    \ text version of message goes here....\n   --boundary42\n   Content-Type: text/richtext\n\
    \      .... RFC 1341 richtext version of same message goes here ...\n   --boundary42\n\
    \   Content-Type: text/x-whatever\n      .... fanciest formatted version of same\
    \  message  goes  here\n      ...\n   --boundary42--\n   In this example, users\
    \ whose mail system understood the \"text/x-\n   whatever\" format would see only\
    \ the fancy version, while other users\n   would see only the richtext or plain\
    \ text version, depending on the\n   capabilities of their system.\n   In general,\
    \ user agents that compose multipart/alternative entities\n   must place the body\
    \ parts in increasing order of preference, that is,\n   with the preferred format\
    \ last.  For fancy text, the sending user\n   agent should put the plainest format\
    \ first and the richest format\n   last.  Receiving user agents should pick and\
    \ display the last format\n   they are capable of displaying.  In the case where\
    \ one of the\n   alternatives is itself of type \"multipart\" and contains unrecognized\n\
    \   sub-parts, the user agent may choose either to show that alternative,\n  \
    \ an earlier alternative, or both.\n      NOTE: From an implementor's perspective,\
    \ it might seem more\n      sensible to reverse this ordering, and have the plainest\n\
    \      alternative last.  However, placing the plainest alternative first\n  \
    \    is the friendliest possible option when multipart/alternative\n      entities\
    \ are viewed using a non-MIME-conformant mail reader.\n      While this approach\
    \ does impose some burden on conformant mail\n      readers, interoperability\
    \ with older mail readers was deemed to be\n      more important in this case.\n\
    \   It may be the case that some user agents, if they can recognize more\n   than\
    \ one of the formats, will prefer to offer the user the choice of\n   which format\
    \ to view.  This makes sense, for example, if mail\n   includes both a nicely-formatted\
    \ image version and an easily-edited\n   text version.  What is most critical,\
    \ however, is that the user not\n   automatically be shown multiple versions of\
    \ the same data.  Either\n   the user should be shown the last recognized version\
    \ or should be\n   given the choice.\n   NOTE ON THE SEMANTICS OF CONTENT-ID IN\
    \ MULTIPART/ALTERNATIVE: Each\n   part of a multipart/alternative entity represents\
    \ the same data, but\n   the mappings between the two are not necessarily without\
    \ information\n   loss.  For example, information is lost when translating ODA\
    \ to\n   PostScript or plain text.  It is recommended that each part should\n\
    \   have a different Content-ID value in the case where the information\n   content\
    \ of the two parts is not identical.  However, where the\n   information content\
    \ is identical -- for example, where several parts\n   of type \"application/external-\
    \ body\" specify alternate ways to access\n   the identical data -- the same Content-ID\
    \ field value should be used,\n   to optimize any cacheing mechanisms that might\
    \ be present on the\n   recipient's end.  However, it is recommended that the\
    \ Content-ID\n   values used by the parts should not be the same Content-ID value\
    \ that\n   describes the multipart/alternative as a whole, if there is any such\n\
    \   Content-ID field.  That is, one Content-ID value will refer to the\n   multipart/alternative\
    \ entity, while one or more other Content-ID\n   values will refer to the parts\
    \ inside it.\n"
- title: 7.2.4.     The Multipart/digest subtype
  contents:
  - "7.2.4.     The Multipart/digest subtype\n   This document defines a \"digest\"\
    \ subtype of the multipart Content-\n   Type.  This type is syntactically identical\
    \ to multipart/mixed, but\n   the semantics are different.  In particular, in\
    \ a digest, the default\n   Content-Type value for a body part is changed from\
    \ \"text/plain\" to\n   \"message/rfc822\".  This is done to allow a more readable\
    \ digest\n   format that is largely compatible (except for the quoting convention)\n\
    \   with RFC 934.\n   A digest in this format might, then, look something like\
    \ this:\n   From: Moderator-Address\n   To: Recipient-List\n   MIME-Version: 1.0\n\
    \   Subject:  Internet Digest, volume 42\n   Content-Type: multipart/digest;\n\
    \        boundary=\"---- next message ----\"\n   ------ next message ----\n  \
    \ From: someone-else\n   Subject: my opinion\n      ...body goes here ...\n  \
    \ ------ next message ----\n   From: someone-else-again\n   Subject: my different\
    \ opinion\n      ... another body goes here...\n   ------ next message ------\n"
- title: 7.2.5.     The Multipart/parallel subtype
  contents:
  - "7.2.5.     The Multipart/parallel subtype\n   This document defines a \"parallel\"\
    \ subtype of the multipart Content-\n   Type.  This type is syntactically identical\
    \ to multipart/mixed, but\n   the semantics are different.  In particular, in\
    \ a parallel entity,\n   the order of body parts is not significant.\n   A common\
    \ presentation of this type is to display all of the parts\n   simultaneously\
    \ on hardware and software that are capable of doing so.\n   However, composing\
    \ agents should be aware that many mail readers will\n   lack this capability\
    \ and will show the parts serially in any event.\n"
- title: 7.2.6.     Other Multipart subtypes
  contents:
  - "7.2.6.     Other Multipart subtypes\n   Other multipart subtypes are expected\
    \ in the future.  MIME\n   implementations must in general treat unrecognized\
    \ subtypes of\n   multipart as being equivalent to \"multipart/mixed\".\n   The\
    \ formal grammar for content-type header fields for multipart data\n   is given\
    \ by:\n   multipart-type := \"multipart\" \"/\" multipart-subtype\n          \
    \        \";\" \"boundary\" \"=\" boundary\n   multipart-subtype := \"mixed\"\
    \ / \"parallel\" / \"digest\"\n                  / \"alternative\" / extension-token\n"
- title: 7.3.  The Message Content-Type
  contents:
  - "7.3.  The Message Content-Type\n   It is frequently desirable, in sending mail,\
    \ to encapsulate another\n   mail message. For this common operation, a special\
    \ Content-Type,\n   \"message\", is defined.  The primary subtype, message/rfc822,\
    \ has no\n   required parameters in the Content-Type field.  Additional subtypes,\n\
    \   \"partial\" and \"External-body\", do have required parameters.  These\n \
    \  subtypes are explained below.\n      NOTE: It has been suggested that subtypes\
    \ of message might be\n      defined for forwarded or rejected messages.  However,\
    \ forwarded\n      and rejected messages can be handled as multipart messages\
    \ in\n      which the first part contains any control or descriptive\n      information,\
    \ and a second part, of type message/rfc822, is the\n      forwarded or rejected\
    \ message.  Composing rejection and forwarding\n      messages in this manner\
    \ will preserve the type information on the\n      original message and allow\
    \ it to be correctly presented to the\n      recipient, and hence is strongly\
    \ encouraged.\n   As stated in the definition of the Content-Transfer-Encoding\
    \ field,\n   no encoding other than \"7bit\", \"8bit\", or \"binary\" is permitted\
    \ for\n   messages or parts of type \"message\".  Even stronger restrictions\n\
    \   apply to the subtypes \"message/partial\" and \"message/external-body\",\n\
    \   as specified below.  The message header fields are always US-ASCII in\n  \
    \ any case, and data within the body can still be encoded, in which\n   case the\
    \ Content-Transfer-Encoding header field in the encapsulated\n   message will\
    \ reflect this.  Non-ASCII text in the headers of an\n   encapsulated message\
    \ can be specified using the mechanisms described\n   in [RFC-1522].\n   Mail\
    \ gateways, relays, and other mail handling agents are commonly\n   known to alter\
    \ the top-level header of an RFC 822 message.  In\n   particular, they frequently\
    \ add, remove, or reorder header fields.\n   Such alterations are explicitly forbidden\
    \ for the encapsulated\n   headers embedded in the bodies of messages of type\
    \ \"message.\"\n"
- title: 7.3.1.     The Message/rfc822 (primary) subtype
  contents:
  - "7.3.1.     The Message/rfc822 (primary) subtype\n   A Content-Type of \"message/rfc822\"\
    \ indicates that the body contains\n   an encapsulated message, with the syntax\
    \ of an RFC 822 message.\n   However, unlike top-level RFC 822 messages, it is\
    \ not required that\n   each message/rfc822 body must include a \"From\", \"Subject\"\
    , and at\n   least one destination header.\n   It should be noted that, despite\
    \ the use of the numbers \"822\", a\n   message/rfc822 entity can include enhanced\
    \ information as defined in\n   this document.  In other words, a message/rfc822\
    \ message may be a\n   MIME message.\n"
- title: 7.3.2.     The Message/Partial subtype
  contents:
  - "7.3.2.     The Message/Partial subtype\n   A subtype of message, \"partial\"\
    , is defined in order to allow large\n   objects to be delivered as several separate\
    \ pieces of mail and\n   automatically reassembled by the receiving user agent.\
    \  (The concept\n   is similar to IP fragmentation/reassembly in the basic Internet\n\
    \   Protocols.)  This mechanism can be used when intermediate transport\n   agents\
    \ limit the size of individual messages that can be sent.\n   Content-Type \"\
    message/partial\" thus indicates that the body contains\n   a fragment of a larger\
    \ message.\n   Three parameters must be specified in the Content-Type field of\
    \ type\n   message/partial: The first, \"id\", is a unique identifier, as close\
    \ to\n   a world-unique identifier as possible, to be used to match the parts\n\
    \   together.  (In general, the identifier is essentially a message-id;\n   if\
    \ placed in double quotes, it can be any message-id, in accordance\n   with the\
    \ BNF for \"parameter\" given earlier in this specification.)\n   The second,\
    \ \"number\", an integer, is the part number, which indicates\n   where this part\
    \ fits into the sequence of fragments.  The third,\n   \"total\", another integer,\
    \ is the total number of parts. This third\n   subfield is required on the final\
    \ part, and is optional (though\n   encouraged) on the earlier parts.  Note also\
    \ that these parameters\n   may be given in any order.\n   Thus, part 2 of a 3-part\
    \ message may have either of the following\n   header fields:\n              \
    \  Content-Type: Message/Partial;\n                     number=2; total=3;\n \
    \                    id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\"\n            \
    \    Content-Type: Message/Partial;\n                     id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\"\
    ;\n                     number=2\n   But part 3 MUST specify the total number\
    \ of parts:\n                Content-Type: Message/Partial;\n                \
    \     number=3; total=3;\n                     id=\"oc=jpbe0M2Yt4s@thumper.bellcore.com\"\
    \n   Note that part numbering begins with 1, not 0.\n   When the parts of a message\
    \ broken up in this manner are put\n   together, the result is a complete MIME\
    \ entity, which may have its\n   own Content-Type header field, and thus may contain\
    \ any other data\n   type.\n   Message fragmentation and reassembly: The semantics\
    \ of a reassembled\n   partial message must be those of the \"inner\" message,\
    \ rather than of\n   a message containing the inner message.  This makes it possible,\
    \ for\n   example, to send a large audio message as several partial messages,\n\
    \   and still have it appear to the recipient as a simple audio message\n   rather\
    \ than as an encapsulated message containing an audio message.\n   That is, the\
    \ encapsulation of the message is considered to be\n   \"transparent\".\n   When\
    \ generating and reassembling the parts of a message/partial\n   message, the\
    \ headers of the encapsulated message must be merged with\n   the headers of the\
    \ enclosing entities.  In this process the following\n   rules must be observed:\n\
    \      (1) All of the header fields from the initial enclosing entity\n      (part\
    \ one), except those that start with \"Content-\" and the\n      specific header\
    \ fields \"Message-ID\", \"Encrypted\", and \"MIME-\n      Version\", must be\
    \ copied, in order, to the new message.\n      (2) Only those header fields in\
    \ the enclosed message which start\n      with \"Content-\" and \"Message-ID\"\
    , \"Encrypted\", and \"MIME-Version\"\n      must be appended, in order, to the\
    \ header fields of the new\n      message.  Any header fields in the enclosed\
    \ message which do not\n      start with \"Content-\" (except for \"Message-ID\"\
    , \"Encrypted\", and\n      \"MIME-Version\") will be ignored.\n      (3) All\
    \ of the header fields from the second and any subsequent\n      messages will\
    \ be ignored.\n   For example, if an audio message is broken into two parts, the\
    \ first\n   part might look something like this:\n      X-Weird-Header-1: Foo\n\
    \      From: Bill@host.com\n      To: joe@otherhost.com\n      Subject: Audio\
    \ mail\n      Message-ID: <id1@host.com>\n      MIME-Version: 1.0\n      Content-type:\
    \ message/partial;\n           id=\"ABC@host.com\";\n           number=1; total=2\n\
    \      X-Weird-Header-1: Bar\n      X-Weird-Header-2: Hello\n      Message-ID:\
    \ <anotherid@foo.com>\n      MIME-Version: 1.0\n      Content-type: audio/basic\n\
    \      Content-transfer-encoding: base64\n         ... first half of encoded audio\
    \ data goes here...\n   and the second half might look something like this:\n\
    \      From: Bill@host.com\n      To: joe@otherhost.com\n      Subject: Audio\
    \ mail\n      MIME-Version: 1.0\n      Message-ID: <id2@host.com>\n      Content-type:\
    \ message/partial;\n           id=\"ABC@host.com\"; number=2; total=2\n      \
    \   ... second half of encoded audio data goes here...\n   Then, when the fragmented\
    \ message is reassembled, the resulting\n   message to be displayed to the user\
    \ should look something like this:\n      X-Weird-Header-1: Foo\n      From: Bill@host.com\n\
    \      To: joe@otherhost.com\n      Subject: Audio mail\n      Message-ID: <anotherid@foo.com>\n\
    \      MIME-Version: 1.0\n      Content-type: audio/basic\n      Content-transfer-encoding:\
    \ base64\n         ... first half of encoded audio data goes here...\n       \
    \  ... second half of encoded audio data goes here...\n   Note on encoding of\
    \ MIME entities encapsulated inside message/partial\n   entities: Because data\
    \ of type \"message\" may never be encoded in\n   base64 or quoted-printable,\
    \ a problem might arise if message/partial\n   entities are constructed in an\
    \ environment that supports binary or\n   8-bit transport.  The problem is that\
    \ the binary data would be split\n   into multiple message/partial objects, each\
    \ of them requiring binary\n   transport.  If such objects were encountered at\
    \ a gateway into a 7-\n   bit transport environment, there would be no way to\
    \ properly encode\n   them for the 7-bit world, aside from waiting for all of\
    \ the parts,\n   reassembling the message, and then encoding the reassembled data\
    \ in\n   base64 or quoted-printable.  Since it is possible that different\n  \
    \ parts might go through different gateways, even this is not an\n   acceptable\
    \ solution.  For this reason, it is specified that MIME\n   entities of type message/partial\
    \ must always have a content-\n   transfer-encoding of 7-bit (the default).  In\
    \ particular, even in\n   environments that support binary or 8-bit transport,\
    \ the use of a\n   content-transfer-encoding of \"8bit\" or \"binary\" is explicitly\n\
    \   prohibited for entities of type message/partial.\n   It should be noted that,\
    \ because some message transfer agents may\n   choose to automatically fragment\
    \ large messages, and because such\n   agents may use different fragmentation\
    \ thresholds, it is possible\n   that the pieces of a partial message, upon reassembly,\
    \ may prove\n   themselves to comprise a partial message.  This is explicitly\n\
    \   permitted.\n   It should also be noted that the inclusion of a \"References\"\
    \ field in\n   the headers of the second and subsequent pieces of a fragmented\n\
    \   message that references the Message-Id on the previous piece may be\n   of\
    \ benefit to mail readers that understand and track references.\n   However, the\
    \ generation of such \"References\" fields is entirely\n   optional.\n   Finally,\
    \ it should be noted that the \"Encrypted\" header field has\n   been made obsolete\
    \ by Privacy Enhanced Messaging (PEM), but the rules\n   above are believed to\
    \ describe the correct way to treat it if it is\n   encountered in the context\
    \ of conversion to and from message/partial\n   fragments.\n"
- title: 7.3.3.     The Message/External-Body subtype
  contents:
  - "7.3.3.     The Message/External-Body subtype\n   The external-body subtype indicates\
    \ that the actual body data are not\n   included, but merely referenced.  In this\
    \ case, the parameters\n   describe a mechanism for accessing the external data.\n\
    \   When an entity is of type \"message/external-body\", it consists of a\n  \
    \ header, two consecutive CRLFs, and the message header for the\n   encapsulated\
    \ message.  If another pair of consecutive CRLFs appears,\n   this of course ends\
    \ the message header for the encapsulated message.\n   However, since the encapsulated\
    \ message's body is itself external, it\n   does NOT appear in the area that follows.\
    \  For example, consider the\n   following message:\n      Content-type: message/external-body;\
    \ access-\n      type=local-file;\n           name=\"/u/nsb/Me.gif\"\n      Content-type:\
    \  image/gif\n      Content-ID: <id42@guppylake.bellcore.com>\n      Content-Transfer-Encoding:\
    \ binary\n      THIS IS NOT REALLY THE BODY!\n   The area at the end, which might\
    \ be called the \"phantom body\", is\n   ignored for most external-body messages.\
    \  However, it may be used to\n   contain auxiliary information for some such\
    \ messages, as indeed it is\n   when the access-type is \"mail-server\".  Of the\
    \ access-types defined\n   by this document, the phantom body is used only when\
    \ the access-type\n   is \"mail-server\".  In all other cases, the phantom body\
    \ is ignored.\n   The only always-mandatory parameter for message/external-body\
    \ is\n   \"access-type\"; all of the other parameters may be mandatory or\n  \
    \ optional depending on the value of access-type.\n      ACCESS-TYPE -- A case-insensitive\
    \ word, indicating the supported\n      access mechanism by which the file or\
    \ data may be obtained.\n      Values include, but are not limited to, \"FTP\"\
    , \"ANON-FTP\", \"TFTP\",\n      \"AFS\", \"LOCAL-FILE\", and \"MAIL-SERVER\"\
    .  Future values, except for\n      experimental values beginning with \"X-\"\
    \ must be registered with\n      IANA, as described in Appendix E .\n   In addition,\
    \ the following three parameters are optional for ALL\n   access-types:\n    \
    \  EXPIRATION -- The date (in the RFC 822 \"date-time\" syntax, as\n      extended\
    \ by RFC 1123 to permit 4 digits in the year field) after\n      which the existence\
    \ of the external data is not guaranteed.\n      SIZE -- The size (in octets)\
    \ of the data.  The intent of this\n      parameter is to help the recipient decide\
    \ whether or not to expend\n      the necessary resources to retrieve the external\
    \ data.  Note that\n      this describes the size of the data in its canonical\
    \ form, that\n      is, before any Content- Transfer-Encoding has been applied\
    \ or\n      after the data have been decoded.\n      PERMISSION -- A case-insensitive\
    \ field that indicates whether or\n      not it is expected that clients might\
    \ also attempt to overwrite\n      the data.  By default, or if permission is\
    \ \"read\", the assumption\n      is that they are not, and that if the data is\
    \ retrieved once, it\n      is never needed again.  If PERMISSION is \"read-write\"\
    , this\n      assumption is invalid, and any local copy must be considered no\n\
    \      more than a cache.  \"Read\" and \"Read-write\" are the only defined\n\
    \      values of permission.\n   The precise semantics of the access-types defined\
    \ here are described\n   in the sections that follow.\n   The encapsulated headers\
    \ in ALL message/external-body entities MUST\n   include a Content-ID header field\
    \ to give a unique identifier by\n   which to reference the data.  This identifier\
    \ may be used for\n   cacheing mechanisms, and for recognizing the receipt of\
    \ the data when\n   the access-type is \"mail-server\".\n   Note that, as specified\
    \ here, the tokens that describe external-body\n   data, such as file names and\
    \ mail server commands, are required to be\n   in the US-ASCII character set.\
    \  If this proves problematic in\n   practice, a new mechanism may be required\
    \ as a future extension to\n   MIME, either as newly defined access-types for\
    \ message/external-body\n   or by some other mechanism.\n   As with message/partial,\
    \ it is specified that MIME entities of type\n   message/external-body must always\
    \ have a content-transfer-encoding of\n   7-bit (the default).  In particular,\
    \ even in environments that\n   support binary or 8-bit transport, the use of\
    \ a content-transfer-\n   encoding of \"8bit\" or \"binary\" is explicitly prohibited\
    \ for entities\n   of type message/external-body.\n"
- title: 7.3.3.1.  The "ftp" and "tftp" access-types
  contents:
  - "7.3.3.1.  The \"ftp\" and \"tftp\" access-types\n   An access-type of FTP or\
    \ TFTP indicates that the message body is\n   accessible as a file using the FTP\
    \ [RFC-959] or TFTP [RFC-783]\n   protocols, respectively.  For these access-types,\
    \ the following\n   additional parameters are mandatory:\n      NAME -- The name\
    \ of the file that contains the actual body data.\n      SITE -- A machine from\
    \ which the file may be obtained, using the\n      given protocol. This must be\
    \ a fully qualified domain name, not a\n      nickname.\n   Before any data are\
    \ retrieved, using FTP, the user will generally\n   need to be asked to provide\
    \ a login id and a password for the machine\n   named by the site parameter. \
    \ For security reasons, such an id and\n   password are not specified as content-type\
    \ parameters, but must be\n   obtained from the user.\n   In addition, the following\
    \ parameters are optional:\n      DIRECTORY -- A directory from which the data\
    \ named by NAME should\n      be retrieved.\n      MODE -- A case-insensitive\
    \ string indicating the mode to be used\n      when retrieving the information.\
    \  The legal values for access-type\n      \"TFTP\" are \"NETASCII\", \"OCTET\"\
    , and \"MAIL\", as specified by the\n      TFTP protocol [RFC-783].  The legal\
    \ values for access-type \"FTP\"\n      are \"ASCII\", \"EBCDIC\", \"IMAGE\",\
    \ and \"LOCALn\" where \"n\" is a\n      decimal integer, typically 8.  These\
    \ correspond to the\n      representation types \"A\" \"E\" \"I\" and \"L n\"\
    \ as specified by the FTP\n      protocol [RFC-959].  Note that \"BINARY\" and\
    \ \"TENEX\" are not valid\n      values for MODE, but that \"OCTET\" or \"IMAGE\"\
    \ or \"LOCAL8\" should be\n      used instead.  IF MODE is not specified, the\
    \ default value is\n      \"NETASCII\" for TFTP and \"ASCII\" otherwise.\n"
- title: 7.3.3.2.  The "anon-ftp" access-type
  contents:
  - "7.3.3.2.  The \"anon-ftp\" access-type\n   The \"anon-ftp\" access-type is identical\
    \ to the \"ftp\" access type,\n   except that the user need not be asked to provide\
    \ a name and password\n   for the specified site.  Instead, the ftp protocol will\
    \ be used with\n   login \"anonymous\" and a password that corresponds to the\
    \ user's email\n   address.\n"
- title: 7.3.3.3.  The "local-file" and "afs" access-types
  contents:
  - "7.3.3.3.  The \"local-file\" and \"afs\" access-types\n   An access-type of \"\
    local-file\" indicates that the actual body is\n   accessible as a file on the\
    \ local machine.  An access-type of \"afs\"\n   indicates that the file is accessible\
    \ via the global AFS file system.\n   In both cases, only a single parameter is\
    \ required:\n      NAME -- The name of the file that contains the actual body\
    \ data.\n   The following optional parameter may be used to describe the locality\n\
    \   of reference for the data, that is, the site or sites at which the\n   file\
    \ is expected to be visible:\n      SITE -- A domain specifier for a machine or\
    \ set of machines that\n      are known to have access to the data file.  Asterisks\
    \ may be used\n      for wildcard matching to a part of a domain name, such as\n\
    \      \"*.bellcore.com\", to indicate a set of machines on which the data\n \
    \     should be directly visible, while a single asterisk may be used to\n   \
    \   indicate a file that is expected to be universally available,\n      e.g.,\
    \ via a global file system.\n"
- title: 7.3.3.4.  The "mail-server" access-type
  contents:
  - "7.3.3.4.  The \"mail-server\" access-type\n   The \"mail-server\" access-type\
    \ indicates that the actual body is\n   available from a mail server.  The mandatory\
    \ parameter for this\n   access-type is:\n      SERVER -- The email address of\
    \ the mail server from which the\n      actual body data can be obtained.\n  \
    \ Because mail servers accept a variety of syntaxes, some of which is\n   multiline,\
    \ the full command to be sent to a mail server is not\n   included as a parameter\
    \ on the content-type line.  Instead, it is\n   provided as the \"phantom body\"\
    \ when the content-type is\n   message/external-body and the access- type is mail-server.\n\
    \   An optional parameter for this access-type is:\n      SUBJECT -- The subject\
    \ that is to be used in the mail that is sent\n      to obtain the data. Note\
    \ that keying mail servers on Subject lines\n      is NOT recommended, but such\
    \ mail servers are known to exist.\n   Note that MIME does not define a mail server\
    \ syntax.  Rather, it\n   allows the inclusion of arbitrary mail server commands\
    \ in the phantom\n   body.  Implementations must include the phantom body in the\
    \ body of\n   the message it sends to the mail server address to retrieve the\n\
    \   relevant data.\n   It is worth noting that, unlike other access-types, mail-server\n\
    \   access is asynchronous and will happen at an unpredictable time in\n   the\
    \ future.  For this reason, it is important that there be a\n   mechanism by which\
    \ the returned data can be matched up with the\n   original message/external-body\
    \ entity.  MIME mailservers must use the\n   same Content-ID field on the returned\
    \ message that was used in the\n   original message/external-body entity, to facilitate\
    \ such matching.\n"
- title: 7.3.3.5.  Examples and Further Explanations
  contents:
  - "7.3.3.5.  Examples and Further Explanations\n   With the emerging possibility\
    \ of very wide-area file systems, it\n   becomes very hard to know in advance\
    \ the set of machines where a file\n   will and will not be accessible directly\
    \ from the file system.\n   Therefore it may make sense to provide both a file\
    \ name, to be tried\n   directly, and the name of one or more sites from which\
    \ the file is\n   known to be accessible.  An implementation can try to retrieve\
    \ remote\n   files using FTP or any other protocol, using anonymous file retrieval\n\
    \   or prompting the user for the necessary name and password.  If an\n   external\
    \ body is accessible via multiple mechanisms, the sender may\n   include multiple\
    \ parts of type message/external-body within an entity\n   of type multipart/alternative.\n\
    \   However, the external-body mechanism is not intended to be limited to\n  \
    \ file retrieval, as shown by the mail-server access-type.  Beyond\n   this, one\
    \ can imagine, for example, using a video server for external\n   references to\
    \ video clips.\n   If an entity is of type \"message/external-body\", then the\
    \ body of the\n   entity will contain the header fields of the encapsulated message.\n\
    \   The body itself is to be found in the external location.  This means\n   that\
    \ if the body of the \"message/external-body\" message contains two\n   consecutive\
    \ CRLFs, everything after those pairs is NOT part of the\n   message itself. \
    \ For most message/external-body messages, this\n   trailing area must simply\
    \ be ignored.  However, it is a convenient\n   place for additional data that\
    \ cannot be included in the content-type\n   header field.  In particular, if\
    \ the \"access-type\" value is \"mail-\n   server\", then the trailing area must\
    \ contain commands to be sent to\n   the mail server at the address given by the\
    \ value of the SERVER\n   parameter.\n   The embedded message header fields which\
    \ appear in the body of the\n   message/external-body data must be used to declare\
    \ the Content-type\n   of the external body if it is anything other than plain\
    \ ASCII text,\n   since the external body does not have a header section to declare\
    \ its\n   type.  Similarly, any Content-transfer-encoding other than \"7bit\"\n\
    \   must also be declared here.  Thus a complete message/external-body\n   message,\
    \ referring to a document in PostScript format, might look\n   like this:\n  \
    \    From: Whomever\n      To: Someone\n      Subject: whatever\n      MIME-Version:\
    \ 1.0\n      Message-ID: <id1@host.com>\n      Content-Type: multipart/alternative;\
    \ boundary=42\n      Content-ID: <id001@guppylake.bellcore.com>\n      --42\n\
    \      Content-Type: message/external-body;\n           name=\"BodyFormats.ps\"\
    ;\n           site=\"thumper.bellcore.com\";\n           access-type=ANON-FTP;\n\
    \           directory=\"pub\";\n           mode=\"image\";\n           expiration=\"\
    Fri, 14 Jun 1991 19:13:14 -0400 (EDT)\"\n      Content-type: application/postscript\n\
    \      Content-ID: <id42@guppylake.bellcore.com>\n      --42\n      Content-Type:\
    \ message/external-body;\n           name=\"/u/nsb/writing/rfcs/RFC-MIME.ps\"\
    ;\n           site=\"thumper.bellcore.com\";\n           access-type=AFS\n   \
    \        expiration=\"Fri, 14 Jun 1991 19:13:14 -0400 (EDT)\"\n      Content-type:\
    \ application/postscript\n      Content-ID: <id42@guppylake.bellcore.com>\n  \
    \    --42\n      Content-Type: message/external-body;\n           access-type=mail-server\n\
    \           server=\"listserv@bogus.bitnet\";\n           expiration=\"Fri, 14\
    \ Jun 1991 19:13:14 -0400 (EDT)\"\n      Content-type: application/postscript\n\
    \      Content-ID: <id42@guppylake.bellcore.com>\n      get RFC-MIME.DOC\n   \
    \   --42--\n   Note that in the above examples, the default Content-transfer-\n\
    \   encoding of \"7bit\" is assumed for the external postscript data.\n   Like\
    \ the message/partial type, the message/external-body type is\n   intended to\
    \ be transparent, that is, to convey the data type in the\n   external body rather\
    \ than to convey a message with a body of that\n   type.  Thus the headers on\
    \ the outer and inner parts must be merged\n   using the same rules as for message/partial.\
    \  In particular, this\n   means that the Content-type header is overridden, but\
    \ the From and\n   Subject headers are preserved.\n   Note that since the external\
    \ bodies are not transported as mail, they\n   need not conform to the 7-bit and\
    \ line length requirements, but might\n   in fact be binary files.  Thus a Content-Transfer-Encoding\
    \ is not\n   generally necessary, though it is permitted.\n   Note that the body\
    \ of a message of type \"message/external-body\" is\n   governed by the basic\
    \ syntax for an RFC 822 message.  In particular,\n   anything before the first\
    \ consecutive pair of CRLFs is header\n   information, while anything after it\
    \ is body information, which is\n   ignored for most access-types.\n   The formal\
    \ grammar for content-type header fields for data of type\n   message is given\
    \ by:\n   message-type := \"message\" \"/\" message-subtype\n   message-subtype\
    \ := \"rfc822\"\n                   / \"partial\" 2#3partial-param\n         \
    \          / \"external-body\" 1*external-param\n                   / extension-token\n\
    \   partial-param :=     (\";\" \"id\" \"=\" value)\n              /  (\";\" \"\
    number\" \"=\" 1*DIGIT)\n              /  (\";\" \"total\" \"=\" 1*DIGIT)\n  \
    \       ; id & number required; total  required  for  last part\n   external-param\
    \ :=   (\";\" \"access-type\" \"=\" atype)\n              / (\";\" \"expiration\"\
    \ \"=\" date-time)\n                   ; Note that date-time is quoted\n     \
    \         / (\";\" \"size\" \"=\" 1*DIGIT)\n              / (\";\"  \"permission\"\
    \  \"=\"  (\"read\"  /  \"read-write\"))\n                   ; Permission is case-insensitive\n\
    \              / (\";\" \"name\" \"=\"  value)\n              / (\";\" \"site\"\
    \ \"=\" value)\n              / (\";\" \"dir\" \"=\" value)\n              / (\"\
    ;\" \"mode\" \"=\" value)\n              / (\";\" \"server\" \"=\" value)\n  \
    \            / (\";\" \"subject\" \"=\" value)\n          ; access-type required;others\
    \ required based on access-type\n   atype := \"ftp\" / \"anon-ftp\" / \"tftp\"\
    \ / \"local-file\"\n                  / \"afs\" / \"mail-server\" / extension-token\n\
    \                  ; Case-insensitive\n"
- title: 7.4.  The Application Content-Type
  contents:
  - "7.4.  The Application Content-Type\n   The \"application\" Content-Type is to\
    \ be used for data which do not\n   fit in any of the other categories, and particularly\
    \ for data to be\n   processed by mail-based uses of application programs.  This\
    \ is\n   information which must be processed by an application before it is\n\
    \   viewable or usable to a user.  Expected uses for Content-Type\n   application\
    \ include mail-based file transfer, spreadsheets, data for\n   mail-based scheduling\
    \ systems, and languages for \"active\"\n   (computational) email.  (The latter,\
    \ in particular, can pose security\n   problems which must be understood by implementors,\
    \ and are considered\n   in detail in the discussion of the application/PostScript\
    \ content-\n   type.)\n   For example, a meeting scheduler might define a standard\n\
    \   representation for information about proposed meeting dates.  An\n   intelligent\
    \ user agent would use this information to conduct a dialog\n   with the user,\
    \ and might then send further mail based on that dialog.\n   More generally, there\
    \ have been several \"active\" messaging languages\n   developed in which programs\
    \ in a suitably specialized language are\n   sent through the mail and automatically\
    \ run in the recipient's\n   environment.\n   Such applications may be defined\
    \ as subtypes of the \"application\"\n   Content-Type.  This document defines\
    \ two subtypes: octet-stream, and\n   PostScript.\n   In general, the subtype\
    \ of application will often be the name of the\n   application for which the data\
    \ are intended.  This does not mean,\n   however, that any application program\
    \ name may be used freely as a\n   subtype of application.  Such usages (other\
    \ than subtypes beginning\n   with \"x-\") must be registered with IANA, as described\
    \ in Appendix E.\n"
- title: 7.4.1.     The Application/Octet-Stream (primary) subtype
  contents:
  - "7.4.1.     The Application/Octet-Stream (primary) subtype\n   The primary subtype\
    \ of application, \"octet-stream\", may be used to\n   indicate that a body contains\
    \ binary data.  The set of possible\n   parameters includes, but is not limited\
    \ to:\n      TYPE -- the general type or category of binary data.  This is\n \
    \     intended as information for the human recipient rather than for\n      any\
    \ automatic processing.\n      PADDING -- the number of bits of padding that were\
    \ appended to the\n      bit-stream comprising the actual contents to produce\
    \ the enclosed\n      byte-oriented data.  This is useful for enclosing a bit-stream\
    \ in\n      a body when the total number of bits is not a multiple of the byte\n\
    \      size.\n   An additional parameter, \"conversions\", was defined in [RFC-1341]\
    \ but\n   has been removed.\n   RFC 1341 also defined the use of a \"NAME\" parameter\
    \ which gave a\n   suggested file name to be used if the data were to be written\
    \ to a\n   file.  This has been deprecated in anticipation of a separate\n   Content-Disposition\
    \ header field, to be defined in a subsequent RFC.\n   The recommended action\
    \ for an implementation that receives\n   application/octet-stream mail is to\
    \ simply offer to put the data in a\n   file, with any Content-Transfer-Encoding\
    \ undone, or perhaps to use it\n   as input to a user-specified process.\n   To\
    \ reduce the danger of transmitting rogue programs through the mail,\n   it is\
    \ strongly recommended that implementations NOT implement a\n   path-search mechanism\
    \ whereby an arbitrary program named in the\n   Content-Type parameter (e.g.,\
    \ an \"interpreter=\" parameter) is found\n   and executed using the mail body\
    \ as input.\n"
- title: 7.4.2.     The Application/PostScript subtype
  contents:
  - "7.4.2.     The Application/PostScript subtype\n   A Content-Type of \"application/postscript\"\
    \ indicates a PostScript\n   program.  Currently two variants of the PostScript\
    \ language are\n   allowed; the original level 1 variant is described in [POSTSCRIPT]\n\
    \   and the more recent level 2 variant is described in [POSTSCRIPT2].\n   PostScript\
    \ is a registered trademark of Adobe Systems, Inc.  Use of\n   the MIME content-type\
    \ \"application/postscript\" implies recognition of\n   that trademark and all\
    \ the rights it entails.\n   The PostScript language definition provides facilities\
    \ for internal\n   labeling of the specific language features a given program\
    \ uses. This\n   labeling, called the PostScript document structuring conventions,\
    \ is\n   very general and provides substantially more information than just\n\
    \   the language level.\n   The use of document structuring conventions, while\
    \ not required, is\n   strongly recommended as an aid to interoperability.  Documents\
    \ which\n   lack proper structuring conventions cannot be tested to see whether\n\
    \   or not they will work in a given environment.  As such, some systems\n   may\
    \ assume the worst and refuse to process unstructured documents.\n   The execution\
    \ of general-purpose PostScript interpreters entails\n   serious security risks,\
    \ and implementors are discouraged from simply\n   sending PostScript email bodies\
    \ to \"off-the-shelf\" interpreters.\n   While it is usually safe to send PostScript\
    \ to a printer, where the\n   potential for harm is greatly constrained, implementors\
    \ should\n   consider all of the following before they add interactive display\
    \ of\n   PostScript bodies to their mail readers.\n   The remainder of this section\
    \ outlines some, though probably not all,\n   of the possible problems with sending\
    \ PostScript through the mail.\n   Dangerous operations in the PostScript language\
    \ include, but may not\n   be limited to, the PostScript operators deletefile,\
    \ renamefile,\n   filenameforall, and file.  File is only dangerous when applied\
    \ to\n   something other than standard input or output. Implementations may\n\
    \   also define additional nonstandard file operators; these may also\n   pose\
    \ a threat to security.  Filenameforall, the wildcard file search\n   operator,\
    \ may appear at first glance to be harmless. Note, however,\n   that this operator\
    \ has the potential to reveal information about what\n   files the recipient has\
    \ access to, and this information may itself be\n   sensitive.  Message senders\
    \ should avoid the use of potentially\n   dangerous file operators, since these\
    \ operators are quite likely to\n   be unavailable in secure PostScript implementations.\
    \  Message-\n   receiving and -displaying software should either completely disable\n\
    \   all potentially dangerous file operators or take special care not to\n   delegate\
    \ any special authority to their operation. These operators\n   should be viewed\
    \ as being done by an outside agency when interpreting\n   PostScript documents.\
    \  Such disabling and/or checking should be done\n   completely outside of the\
    \ reach of the PostScript language itself;\n   care should be taken to insure\
    \ that no method exists for re-enabling\n   full-function versions of these operators.\n\
    \   The PostScript language provides facilities for exiting the normal\n   interpreter,\
    \ or server, loop. Changes made in this \"outer\"\n   environment are customarily\
    \ retained across documents, and may in\n   some cases be retained semipermanently\
    \ in nonvolatile memory. The\n   operators associated with exiting the interpreter\
    \ loop have the\n   potential to interfere with subsequent document processing.\
    \ As such,\n   their unrestrained use constitutes a threat of service denial.\n\
    \   PostScript operators that exit the interpreter loop include, but may\n   not\
    \ be limited to, the exitserver and startjob operators.  Message-\n   sending\
    \ software should not generate PostScript that depends on\n   exiting the interpreter\
    \ loop to operate. The ability to exit will\n   probably be unavailable in secure\
    \ PostScript implementations.\n   Message-receiving and -displaying software should,\
    \ if possible,\n   disable the ability to make retained changes to the PostScript\n\
    \   environment, and eliminate the startjob and exitserver commands.  If\n   these\
    \ commands cannot be eliminated, the password associated with\n   them should\
    \ at least be set to a hard-to-guess value.\n   PostScript provides operators\
    \ for setting system-wide and device-\n   specific parameters. These parameter\
    \ settings may be retained across\n   jobs and may potentially pose a threat to\
    \ the correct operation of\n   the interpreter.  The PostScript operators that\
    \ set system and device\n   parameters include, but may not be limited to, the\
    \ setsystemparams\n   and setdevparams operators.  Message-sending software should\
    \ not\n   generate PostScript that depends on the setting of system or device\n\
    \   parameters to operate correctly. The ability to set these parameters\n   will\
    \ probably be unavailable in secure PostScript implementations.\n   Message-receiving\
    \ and -displaying software should, if possible,\n   disable the ability to change\
    \ system and device parameters.  If these\n   operators cannot be disabled, the\
    \ password associated with them\n   should at least be set to a hard-to-guess\
    \ value.\n   Some PostScript implementations provide nonstandard facilities for\n\
    \   the direct loading and execution of machine code.  Such facilities\n   are\
    \ quite obviously open to substantial abuse.  Message-sending\n   software should\
    \ not make use of such features. Besides being totally\n   hardware- specific,\
    \ they are also likely to be unavailable in secure\n   implementations of PostScript.\
    \  Message-receiving and -displaying\n   software should not allow such operators\
    \ to be used if they exist.\n   PostScript is an extensible language, and many,\
    \ if not most,\n   implementations of it provide a number of their own extensions.\
    \ This\n   document does not deal with such extensions explicitly since they\n\
    \   constitute an unknown factor.  Message-sending software should not\n   make\
    \ use of nonstandard extensions; they are likely to be missing\n   from some implementations.\
    \ Message-receiving and -displaying software\n   should make sure that any nonstandard\
    \ PostScript operators are secure\n   and don't present any kind of threat.\n\
    \   It is possible to write PostScript that consumes huge amounts of\n   various\
    \ system resources. It is also possible to write PostScript\n   programs that\
    \ loop infinitely.  Both types of programs have the\n   potential to cause damage\
    \ if sent to unsuspecting recipients.\n   Message-sending software should avoid\
    \ the construction and\n   dissemination of such programs, which is antisocial.\
    \  Message-\n   receiving and -displaying software should provide appropriate\n\
    \   mechanisms to abort processing of a document after a reasonable\n   amount\
    \ of time has elapsed. In addition, PostScript interpreters\n   should be limited\
    \ to the consumption of only a reasonable amount of\n   any given system resource.\n\
    \   Finally, bugs may exist in some PostScript interpreters which could\n   possibly\
    \ be exploited to gain unauthorized access to a recipient's\n   system.  Apart\
    \ from noting this possibility, there is no specific\n   action to take to prevent\
    \ this, apart from the timely correction of\n   such bugs if any are found.\n"
- title: 7.4.3.     Other Application subtypes
  contents:
  - "7.4.3.     Other Application subtypes\n   It is expected that many other subtypes\
    \ of application will be\n   defined in the future.  MIME implementations must\
    \ generally treat any\n   unrecognized subtypes as being equivalent to application/octet-\n\
    \   stream.\n   The formal grammar for content-type header fields for application\n\
    \   data is given by:\n   application-type :=  \"application\" \"/\" application-subtype\n\
    \   application-subtype := (\"octet-stream\" *stream-param)\n                \
    \       / \"postscript\" / extension-token\n   stream-param :=  (\";\" \"type\"\
    \ \"=\" value)\n                       / (\";\" \"padding\" \"=\" padding)\n \
    \  padding := \"0\" / \"1\" /  \"2\" /  \"3\" / \"4\" / \"5\" / \"6\" / \"7\"\n"
- title: 7.5.  The Image Content-Type
  contents:
  - "7.5.  The Image Content-Type\n   A Content-Type of \"image\" indicates that the\
    \ body contains an image.\n   The subtype names the specific image format.  These\
    \ names are case\n   insensitive.  Two initial subtypes are \"jpeg\" for the JPEG\
    \ format,\n   JFIF encoding, and \"gif\" for GIF format [GIF].\n   The list of\
    \ image subtypes given here is neither exclusive nor\n   exhaustive, and is expected\
    \ to grow as more types are registered with\n   IANA, as described in Appendix\
    \ E.\n   The formal grammar for the content-type header field for data of type\n\
    \   image is given by:\n   image-type := \"image\" \"/\" (\"gif\" / \"jpeg\" /\
    \ extension-token)\n"
- title: 7.6.  The Audio Content-Type
  contents:
  - "7.6.  The Audio Content-Type\n   A Content-Type of \"audio\" indicates that the\
    \ body contains audio\n   data.  Although there is not yet a consensus on an \"\
    ideal\" audio\n   format for use with computers, there is a pressing need for\
    \ a format\n   capable of providing interoperable behavior.\n   The initial subtype\
    \ of \"basic\" is specified to meet this requirement\n   by providing an absolutely\
    \ minimal lowest common denominator audio\n   format.  It is expected that richer\
    \ formats for higher quality and/or\n   lower bandwidth audio will be defined\
    \ by a later document.\n   The content of the \"audio/basic\" subtype is audio\
    \ encoded using 8-bit\n   ISDN mu-law [PCM].  When this subtype is present, a\
    \ sample rate of\n   8000 Hz and a single channel is assumed.\n   The formal grammar\
    \ for the content-type header field for data of type\n   audio is given by:\n\
    \   audio-type := \"audio\" \"/\" (\"basic\" / extension-token)\n"
- title: 7.7.  The Video Content-Type
  contents:
  - "7.7.  The Video Content-Type\n   A Content-Type of \"video\" indicates that the\
    \ body contains a time-\n   varying-picture image, possibly with color and coordinated\
    \ sound.\n   The term \"video\" is used extremely generically, rather than with\n\
    \   reference to any particular technology or format, and is not meant to\n  \
    \ preclude subtypes such as animated drawings encoded compactly.  The\n   subtype\
    \ \"mpeg\" refers to video coded according to the MPEG standard\n   [MPEG].\n\
    \   Note that although in general this document strongly discourages the\n   mixing\
    \ of multiple media in a single body, it is recognized that many\n   so-called\
    \ \"video\" formats include a representation for synchronized\n   audio, and this\
    \ is explicitly permitted for subtypes of \"video\".\n   The formal grammar for\
    \ the content-type header field for data of type\n   video is given by:\n   video-type\
    \ := \"video\" \"/\" (\"mpeg\" / extension-token)\n"
- title: 7.8.  Experimental Content-Type Values
  contents:
  - "7.8.  Experimental Content-Type Values\n   A Content-Type value beginning with\
    \ the characters \"X-\" is a private\n   value, to be used by consenting mail\
    \ systems by mutual agreement.\n   Any format without a rigorous and public definition\
    \ must be named\n   with an \"X-\" prefix, and publicly specified values shall\
    \ never begin\n   with \"X-\".  (Older versions of the widely-used Andrew system\
    \ use the\n   \"X-BE2\" name, so new systems should probably choose a different\n\
    \   name.)\n   In general, the use of \"X-\" top-level types is strongly discouraged.\n\
    \   Implementors should invent subtypes of the existing types whenever\n   possible.\
    \  The invention of new types is intended to be restricted\n   primarily to the\
    \ development of new media types for email, such as\n   digital odors or holography,\
    \ and not for new data formats in general.\n   In many cases, a subtype of application\
    \ will be more appropriate than\n   a new top-level type.\n"
- title: 8. Summary
  contents:
  - "8. Summary\n   Using the MIME-Version, Content-Type, and Content-Transfer-Encoding\n\
    \   header fields, it is possible to include, in a standardized way,\n   arbitrary\
    \ types of data objects with RFC 822 conformant mail\n   messages.  No restrictions\
    \ imposed by either RFC 821 or RFC 822 are\n   violated, and care has been taken\
    \ to avoid problems caused by\n   additional restrictions imposed by the characteristics\
    \ of some\n   Internet mail transport mechanisms (see Appendix B). The \"multipart\"\
    \n   and \"message\" Content-Types allow mixing and hierarchical structuring\n\
    \   of objects of different types in a single message.  Further Content-\n   Types\
    \ provide a standardized mechanism for tagging messages or body\n   parts as audio,\
    \ image, or several other kinds of data.  A\n   distinguished parameter syntax\
    \ allows further specification of data\n   format details, particularly the specification\
    \ of alternate character\n   sets.  Additional optional header fields provide\
    \ mechanisms for\n   certain extensions deemed desirable by many implementors.\
    \  Finally, a\n   number of useful Content-Types are defined for general use by\n\
    \   consenting user agents, notably message/partial, and\n   message/external-body.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   Security issues are discussed in Section 7.4.2\
    \ and in Appendix F.\n   Implementors should pay special attention to the security\n\
    \   implications of any mail content-types that can cause the remote\n   execution\
    \ of any actions in the recipient's environment.  In such\n   cases, the discussion\
    \ of the application/postscript content-type in\n   Section 7.4.2 may serve as\
    \ a model for considering other content-\n   types with remote execution capabilities.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   For more information, the authors of this document\
    \ may be contacted\n   via Internet mail:\n   Nathaniel S. Borenstein\n   MRE\
    \ 2D-296, Bellcore\n   445 South St.\n   Morristown, NJ 07962-1910\n   Phone:\
    \ +1 201 829 4270\n   Fax:  +1 201 829 7019\n   Email: nsb@bellcore.com\n   Ned\
    \ Freed\n   Innosoft International, Inc.\n   250 West First Street\n   Suite 240\n\
    \   Claremont, CA 91711\n   Phone:  +1 909 624 7907\n   Fax: +1 909 621 5319\n\
    \   Email: ned@innosoft.com\n   MIME is a result of the work of the Internet Engineering\
    \ Task Force\n   Working Group on Email Extensions. The chairman of that group,\
    \ Greg\n   Vaudreuil, may be reached at:\n   Gregory M. Vaudreuil\n   Tigon Corporation\n\
    \   17060 Dallas Parkway\n   Dallas Texas, 75248\n   Phone:    +1 214-733-2722\n\
    \   EMail: gvaudre@cnri.reston.va.us\n"
- title: 11. Acknowledgements
  contents:
  - "11. Acknowledgements\n   This document is the result of the collective effort\
    \ of a large\n   number of people, at several IETF meetings, on the IETF-SMTP\
    \ and\n   IETF-822 mailing lists, and elsewhere.  Although any enumeration\n \
    \  seems doomed to suffer from egregious omissions, the following are\n   among\
    \ the many contributors to this effort:\n            Harald Tveit Alvestrand \
    \      Timo Lehtinen\n            Randall Atkinson              John R. MacMillan\n\
    \            Philippe Brandon              Rick McGowan\n            Kevin Carosso\
    \                 Leo Mclaughlin\n            Uhhyung Choi                  Goli\
    \ Montaser-Kohsari\n            Cristian Constantinof         Keith Moore\n  \
    \          Mark Crispin                  Tom Moore\n            Dave Crocker \
    \                 Erik Naggum\n            Terry Crowley                 Mark\
    \ Needleman\n            Walt Daniels                  John Noerenberg\n     \
    \       Frank Dawson                  Mats Ohrman\n            Hitoshi Doi   \
    \                Julian Onions\n            Kevin Donnelly                Michael\
    \ Patton\n            Keith Edwards                 David J. Pepper\n        \
    \    Chris Eich                    Blake C. Ramsdell\n            Johnny Eriksson\
    \               Luc Rooijakkers\n            Craig Everhart                Marshall\
    \ T. Rose\n            Patrik Faeltstroem            Jonathan Rosenberg\n    \
    \        Erik E. Fair                  Jan Rynning\n            Roger Fajman \
    \                 Harri Salminen\n            Alain Fontaine                Michael\
    \ Sanderson\n            James M. Galvin               Masahiro Sekiguchi\n  \
    \          Philip Gladstone              Mark Sherman\n            Thomas Gordon\
    \                 Keld Simonsen\n            Phill Gross                   Bob\
    \ Smart\n            James Hamilton                Peter Speck\n            Steve\
    \ Hardcastle-Kille        Henry Spencer\n            David Herron            \
    \      Einar Stefferud\n            Bruce Howard                  Michael Stein\n\
    \            Bill Janssen                  Klaus Steinberger\n            Olle\
    \ Jaernefors               Peter Svanberg\n            Risto Kankkunen       \
    \        James Thompson\n            Phil Karn                     Steve Uhler\n\
    \            Alan Katz                     Stuart Vance\n            Tim Kehres\
    \                    Erik van der Poel\n            Neil Katin               \
    \     Guido van Rossum\n            Kyuho Kim                     Peter Vanderbilt\n\
    \            Anders Klemets                Greg Vaudreuil\n            John Klensin\
    \                  Ed Vielmetti\n            Valdis Kletniek               Ryan\
    \ Waldron\n            Jim Knowles                   Wally Wedel\n           \
    \ Stev Knowles                  Sven-Ove Westberg\n            Bob Kummerfeld\
    \                Brian Wideen\n            Pekka Kytolaakso              John\
    \ Wobus\n            Stellan Lagerstrom            Glenn Wright\n            Vincent\
    \ Lau                   Rayan Zachariassen\n            Donald Lindsay       \
    \         David Zimmerman\n            Marc Andreessen               Bob Braden\n\
    \            Brian Capouch                 Peter Clitherow\n            Dave Collier-Brown\
    \            John Coonrod\n            Stephen Crocker               Jim Davis\n\
    \            Axel Deininger                Dana S Emery\n            Martin Forssen\
    \                Stephen Gildea\n            Terry Gray                    Mark\
    \ Horton\n            Warner Losh                   Carlyn Lowery\n          \
    \  Laurence Lundblade            Charles Lynn\n            Larry Masinter    \
    \            Michael J. McInerny\n            Jon Postel                    Christer\
    \ Romson\n            Yutaka Sato                   Markku Savela\n          \
    \  Richard Alan Schafer          Larry W. Virden\n            Rhys Weatherly \
    \               Jay Weber\n            Dave Wecker\n"
- title: The authors apologize for any omissions from this list, which are
  contents:
  - 'The authors apologize for any omissions from this list, which are

    '
- title: certainly unintentional.
  contents:
  - 'certainly unintentional.

    '
- title: Appendix A -- Minimal MIME-Conformance
  contents:
  - "Appendix A -- Minimal MIME-Conformance\n   The mechanisms described in this document\
    \ are open-ended.  It is\n   definitely not expected that all implementations\
    \ will support all of\n   the Content-Types described, nor that they will all\
    \ share the same\n   extensions.  In order to promote interoperability, however,\
    \ it is\n   useful to define the concept of \"MIME-conformance\" to define a\n\
    \   certain level of implementation that allows the useful interworking\n   of\
    \ messages with content that differs from US ASCII text.  In this\n   section,\
    \ we specify the requirements for such conformance.\n   A mail user agent that\
    \ is MIME-conformant MUST:\n      1.  Always generate a \"MIME-Version: 1.0\"\
    \ header field.\n      2.  Recognize the Content-Transfer-Encoding header field,\
    \ and\n      decode all received data encoded with either the quoted-printable\n\
    \      or base64 implementations.  Encode any data sent that is not in\n     \
    \ seven-bit mail-ready representation using one of these\n      transformations\
    \ and include the appropriate Content-Transfer-\n      Encoding header field,\
    \ unless the underlying transport mechanism\n      supports non-seven-bit data,\
    \ as SMTP does not.\n      3.  Recognize and interpret the Content-Type header\
    \ field, and\n      avoid showing users raw data with a Content-Type field other\
    \ than\n      text.  Be able to send at least text/plain messages, with the\n\
    \      character set specified as a parameter if it is not US-ASCII.\n      4.\
    \  Explicitly handle the following Content-Type values, to at\n      least the\
    \ following extents:\n      Text:\n            -- Recognize and display \"text\"\
    \ mail\n                 with the character set \"US-ASCII.\"\n            --\
    \ Recognize other character sets at\n                 least to the extent of being\
    \ able\n                 to inform the user about what\n                 character\
    \ set the message uses.\n            -- Recognize the \"ISO-8859-*\" character\n\
    \                 sets to the extent of being able to\n                 display\
    \ those characters that are\n                 common to ISO-8859-* and US-ASCII,\n\
    \                 namely all characters represented\n                 by octet\
    \ values 0-127.\n            -- For unrecognized subtypes, show or\n         \
    \        offer to show the user the \"raw\"\n                 version of the data\
    \ after\n                 conversion of the content from\n                 canonical\
    \ form to local form.\n       Message:\n            -- Recognize and display at\
    \ least the\n                 primary (822) encapsulation.\n       Multipart:\n\
    \            -- Recognize the primary (mixed)\n                 subtype.  Display\
    \ all relevant\n                 information on the message level\n          \
    \       and the body part header level and\n                 then display or offer\
    \ to display\n                 each of the body parts individually.\n        \
    \    -- Recognize the \"alternative\" subtype,\n                 and avoid showing\
    \ the user\n                 redundant parts of\n                 multipart/alternative\
    \ mail.\n            -- Treat any unrecognized subtypes as if\n              \
    \   they were \"mixed\".\n       Application:\n            -- Offer the ability\
    \ to remove either of\n                 the two types of Content-Transfer-\n \
    \                Encoding defined in this document\n                 and put the\
    \ resulting information\n                 in a user file.\n      5.  Upon encountering\
    \ any unrecognized Content- Type, an\n      implementation must treat it as if\
    \ it had a Content-Type of\n      \"application/octet-stream\" with no parameter\
    \ sub-arguments.  How\n      such data are handled is up to an implementation,\
    \ but likely\n      options for handling such unrecognized data include offering\
    \ the\n      user to write it into a file (decoded from its mail transport\n \
    \     format) or offering the user to name a program to which the\n      decoded\
    \ data should be passed as input.  Unrecognized predefined\n      types, which\
    \ in a MIME-conformant mailer might still include\n      audio, image, or video,\
    \ should also be treated in this way.\n   A user agent that meets the above conditions\
    \ is said to be MIME-\n   conformant.  The meaning of this phrase is that it is\
    \ assumed to be\n   \"safe\" to send virtually any kind of properly-marked data\
    \ to users of\n   such mail systems, because such systems will at least be able\
    \ to\n   treat the data as undifferentiated binary, and will not simply splash\n\
    \   it onto the screen of unsuspecting users.  There is another sense in\n   which\
    \ it is always \"safe\" to send data in a format that is MIME-\n   conformant,\
    \ which is that such data will not break or be broken by\n   any known systems\
    \ that are conformant with RFC 821 and RFC 822.  User\n   agents that are MIME-conformant\
    \ have the additional guarantee that\n   the user will not be shown data that\
    \ were never intended to be viewed\n   as text.\n"
- title: Appendix B -- General Guidelines For Sending Email Data
  contents:
  - "Appendix B -- General Guidelines For Sending Email Data\n   Internet email is\
    \ not a perfect, homogeneous system.  Mail may become\n   corrupted at several\
    \ stages in its travel to a final destination.\n   Specifically, email sent throughout\
    \ the Internet may travel across\n   many networking technologies.  Many networking\
    \ and mail technologies\n   do not support the full functionality possible in\
    \ the SMTP transport\n   environment. Mail traversing these systems is likely\
    \ to be modified\n   in such a way that it can be transported.\n   There exist\
    \ many widely-deployed non-conformant MTAs in the Internet.\n   These MTAs, speaking\
    \ the SMTP protocol, alter messages on the fly to\n   take advantage of the internal\
    \ data structure of the hosts they are\n   implemented on, or are just plain broken.\n\
    \   The following guidelines may be useful to anyone devising a data\n   format\
    \ (Content-Type) that will survive the widest range of\n   networking technologies\
    \ and known broken MTAs unscathed.  Note that\n   anything encoded in the base64\
    \ encoding will satisfy these rules, but\n   that some well-known mechanisms,\
    \ notably the UNIX uuencode facility,\n   will not.  Note also that anything encoded\
    \ in the Quoted-Printable\n   encoding will survive most gateways intact, but\
    \ possibly not some\n   gateways to systems that use the EBCDIC character set.\n\
    \      (1) Under some circumstances the encoding used for data may change\n  \
    \    as part of normal gateway or user agent operation. In particular,\n     \
    \ conversion from base64 to quoted-printable and vice versa may be\n      necessary.\
    \ This may result in the confusion of CRLF sequences with\n      line breaks in\
    \ text bodies. As such, the persistence of CRLF as\n      something other than\
    \ a line break must not be relied on.\n      (2) Many systems may elect to represent\
    \ and store text data using\n      local newline conventions. Local newline conventions\
    \ may not match\n      the RFC822 CRLF convention -- systems are known that use\
    \ plain CR,\n      plain LF, CRLF, or counted records.  The result is that isolated\n\
    \      CR and LF characters are not well tolerated in general; they may\n    \
    \  be lost or converted to delimiters on some systems, and hence must\n      not\
    \ be relied on.\n      (3) TAB (HT) characters may be misinterpreted or may be\n\
    \      automatically converted to variable numbers of spaces.  This is\n     \
    \ unavoidable in some environments, notably those not based on the\n      ASCII\
    \ character set. Such conversion is STRONGLY DISCOURAGED, but\n      it may occur,\
    \ and mail formats must not rely on the persistence of\n      TAB (HT) characters.\n\
    \      (4) Lines longer than 76 characters may be wrapped or truncated in\n  \
    \    some environments. Line wrapping and line truncation are STRONGLY\n     \
    \ DISCOURAGED, but unavoidable in some cases. Applications which\n      require\
    \ long lines must somehow differentiate between soft and\n      hard line breaks.\
    \  (A simple way to do this is to use the quoted-\n      printable encoding.)\n\
    \      (5) Trailing \"white space\" characters (SPACE, TAB (HT)) on a line\n \
    \     may be discarded by some transport agents, while other transport\n     \
    \ agents may pad lines with these characters so that all lines in a\n      mail\
    \ file are of equal length.  The persistence of trailing white\n      space, therefore,\
    \ must not be relied on.\n      (6) Many mail domains use variations on the ASCII\
    \ character set,\n      or use character sets such as EBCDIC which contain most\
    \ but not\n      all of the US-ASCII characters.  The correct translation of\n\
    \      characters not in the \"invariant\" set cannot be depended on across\n\
    \      character converting gateways.  For example, this situation is a\n    \
    \  problem when sending uuencoded information across BITNET, an\n      EBCDIC\
    \ system.  Similar problems can occur without crossing a\n      gateway, since\
    \ many Internet hosts use character sets other than\n      ASCII internally. \
    \ The definition of Printable Strings in X.400\n      adds further restrictions\
    \ in certain special cases.  In\n      particular, the only characters that are\
    \ known to be consistent\n      across all gateways are the 73 characters that\
    \ correspond to the\n      upper and lower case letters A-Z and a-z, the 10 digits\
    \ 0-9, and\n      the following eleven special characters:\n                 \
    \       \"'\"  (ASCII code 39)\n                        \"(\"  (ASCII code 40)\n\
    \                        \")\"  (ASCII code 41)\n                        \"+\"\
    \  (ASCII code 43)\n                        \",\"  (ASCII code 44)\n         \
    \               \"-\"  (ASCII code 45)\n                        \".\"  (ASCII\
    \ code 46)\n                        \"/\"  (ASCII code 47)\n                 \
    \       \":\"  (ASCII code 58)\n                        \"=\"  (ASCII code 61)\n\
    \                        \"?\"  (ASCII code 63)\n      A maximally portable mail\
    \ representation, such as the base64\n      encoding, will confine itself to relatively\
    \ short lines of text in\n      which the only meaningful characters are taken\
    \ from this set of 73\n      characters.\n      (7) Some mail transport agents\
    \ will corrupt data that includes\n      certain literal strings.  In particular,\
    \ a period (\".\") alone on a\n      line is known to be corrupted by some (incorrect)\
    \ SMTP\n      implementations, and a line that starts with the five characters\n\
    \      \"From \" (the fifth character is a SPACE) are commonly corrupted as\n\
    \      well.  A careful composition agent can prevent these corruptions\n    \
    \  by encoding the data (e.g., in the quoted-printable encoding,\n      \"=46rom\
    \ \" in place of \"From \" at the start of a line, and \"=2E\" in\n      place\
    \ of \".\" alone on a line.\n   Please note that the above list is NOT a list\
    \ of recommended\n   practices for MTAs.  RFC 821 MTAs are prohibited from altering\
    \ the\n   character of white space or wrapping long lines.  These BAD and\n  \
    \ illegal practices are known to occur on established networks, and\n   implementations\
    \ should be robust in dealing with the bad effects they\n   can cause.\n"
- title: Appendix C -- A Complex Multipart Example
  contents:
  - "Appendix C -- A Complex Multipart Example\n   What follows is the outline of\
    \ a complex multipart message.  This\n   message has five parts to be displayed\
    \ serially: two introductory\n   plain text parts, an embedded multipart message,\
    \ a richtext part, and\n   a closing encapsulated text message in a non-ASCII\
    \ character set.\n   The embedded multipart message has two parts to be displayed\
    \ in\n   parallel, a picture and an audio fragment.\n      MIME-Version: 1.0\n\
    \      From: Nathaniel Borenstein <nsb@bellcore.com>\n      To: Ned Freed <ned@innosoft.com>\n\
    \      Subject: A multipart example\n      Content-Type: multipart/mixed;\n  \
    \         boundary=unique-boundary-1\n      This is the preamble area of a multipart\
    \ message.\n      Mail readers that understand multipart format\n      should\
    \ ignore this preamble.\n      If you are reading this text, you might want to\n\
    \      consider changing to a mail reader that understands\n      how to properly\
    \ display multipart messages.\n      --unique-boundary-1\n         ...Some text\
    \ appears here...\n      [Note that the preceding blank line means\n      no header\
    \ fields were given and this is text,\n      with charset US ASCII.  It could\
    \ have been\n      done with explicit typing as in the next part.]\n      --unique-boundary-1\n\
    \      Content-type: text/plain; charset=US-ASCII\n      This could have been\
    \ part of the previous part,\n      but illustrates explicit versus implicit\n\
    \      typing of body parts.\n      --unique-boundary-1\n      Content-Type: multipart/parallel;\n\
    \           boundary=unique-boundary-2\n      --unique-boundary-2\n      Content-Type:\
    \ audio/basic\n      Content-Transfer-Encoding: base64\n         ... base64-encoded\
    \ 8000 Hz single-channel\n             mu-law-format audio data goes here....\n\
    \      --unique-boundary-2\n      Content-Type: image/gif\n      Content-Transfer-Encoding:\
    \ base64\n         ... base64-encoded image data goes here....\n      --unique-boundary-2--\n\
    \      --unique-boundary-1\n      Content-type: text/richtext\n      This is <bold><italic>richtext.</italic></bold>\n\
    \      <smaller>as defined in RFC 1341</smaller>\n      <nl><nl>Isn't it\n   \
    \   <bigger><bigger>cool?</bigger></bigger>\n      --unique-boundary-1\n     \
    \ Content-Type: message/rfc822\n      From: (mailbox in US-ASCII)\n      To: (address\
    \ in US-ASCII)\n      Subject: (subject in US-ASCII)\n      Content-Type: Text/plain;\
    \ charset=ISO-8859-1\n      Content-Transfer-Encoding: Quoted-printable\n    \
    \     ... Additional text in ISO-8859-1 goes here ...\n      --unique-boundary-1--\n"
- title: Appendix D -- Collected Grammar
  contents:
  - "Appendix D -- Collected Grammar\n   This appendix contains the complete BNF grammar\
    \ for all the syntax\n   specified by this document.\n   By itself, however, this\
    \ grammar is incomplete.  It refers to several\n   entities that are defined by\
    \ RFC 822.  Rather than reproduce those\n   definitions here, and risk unintentional\
    \ differences between the two,\n   this document simply refers the reader to RFC\
    \ 822 for the remaining\n   definitions.  Wherever a term is undefined, it refers\
    \ to the RFC 822\n   definition.\n   application-subtype := (\"octet-stream\"\
    \ *stream-param)\n                       / \"postscript\" / extension-token\n\
    \   application-type :=  \"application\" \"/\" application-subtype\n   attribute\
    \ := token    ; case-insensitive\n   atype := \"ftp\" / \"anon-ftp\" / \"tftp\"\
    \ / \"local-file\"\n                  / \"afs\" / \"mail-server\" / extension-token\n\
    \                  ; Case-insensitive\n   audio-type := \"audio\" \"/\" (\"basic\"\
    \ / extension-token)\n   body-part := <\"message\" as defined in RFC 822,\n  \
    \          with all header fields optional, and with the\n            specified\
    \ delimiter not occurring anywhere in\n            the message body, either on\
    \ a line by itself\n            or as a substring anywhere.>\n      NOTE: In certain\
    \ transport enclaves, RFC 822 restrictions such as\n      the one that limits\
    \ bodies to printable ASCII characters may not\n      be in force.  (That is,\
    \ the transport domains may resemble\n      standard Internet mail transport as\
    \ specified in RFC821 and\n      assumed by RFC822, but without certain restrictions.)\
    \  The\n      relaxation of these restrictions should be construed as locally\n\
    \      extending the definition of bodies, for example to include octets\n   \
    \   outside of the ASCII range, as long as these extensions are\n      supported\
    \ by the transport and adequately documented in the\n      Content-Transfer-Encoding\
    \ header field. However, in no event are\n      headers (either message headers\
    \ or body-part headers) allowed to\n      contain anything other than ASCII characters.\n\
    \   boundary := 0*69<bchars> bcharsnospace\n   bchars := bcharsnospace / \" \"\
    \n   bcharsnospace :=    DIGIT / ALPHA / \"'\" / \"(\" / \")\" / \"+\"  / \"_\"\
    \n                  / \",\" / \"-\" / \".\" / \"/\" / \":\" / \"=\" / \"?\"\n\
    \   charset := \"us-ascii\" / \"iso-8859-1\" / \"iso-8859-2\"/ \"iso-8859-3\"\n\
    \        / \"iso-8859-4\" / \"iso-8859-5\" /  \"iso-8859-6\" / \"iso-8859-7\"\n\
    \        / \"iso-8859-8\" / \"iso-8859-9\" / extension-token\n        ; case insensitive\n\
    \   close-delimiter := \"--\" boundary \"--\" CRLF;Again,no space by \"--\",\n\
    \   content  := \"Content-Type\"  \":\" type \"/\" subtype  *(\";\" parameter)\n\
    \             ; case-insensitive matching of type and subtype\n   delimiter :=\
    \ \"--\" boundary CRLF  ;taken from Content-Type field.\n                    \
    \            ; There must be no space\n                                ; between\
    \ \"--\" and boundary.\n   description := \"Content-Description\" \":\" *text\n\
    \   discard-text := *(*text CRLF)\n   encapsulation := delimiter body-part CRLF\n\
    \   encoding := \"Content-Transfer-Encoding\" \":\" mechanism\n   epilogue :=\
    \ discard-text        ;  to  be  ignored upon receipt.\n   extension-token :=\
    \  x-token / iana-token\n   external-param :=   (\";\" \"access-type\" \"=\" atype)\n\
    \                  / (\";\" \"expiration\" \"=\" date-time)\n                \
    \       ; Note that date-time is quoted\n                  / (\";\" \"size\" \"\
    =\" 1*DIGIT)\n                  / (\";\"  \"permission\"  \"=\"  (\"read\" / \"\
    read-write\"))\n                       ; Permission is case-insensitive\n    \
    \              / (\";\" \"name\" \"=\"  value)\n                  / (\";\" \"\
    site\" \"=\" value)\n                  / (\";\" \"dir\" \"=\" value)\n       \
    \           / (\";\" \"mode\" \"=\" value)\n                  / (\";\" \"server\"\
    \ \"=\" value)\n                  / (\";\" \"subject\" \"=\" value)\n        \
    \   ;access-type required; others required based on access-type\n   iana-token\
    \ := <a publicly-defined extension token,\n             registered with IANA,\
    \ as specified in\n             appendix E>\n   id :=  \"Content-ID\" \":\" msg-id\n\
    \   image-type := \"image\" \"/\" (\"gif\" / \"jpeg\" / extension-token)\n   mechanism\
    \ :=     \"7bit\"    ;  case-insensitive\n                  / \"quoted-printable\"\
    \n                  / \"base64\"\n                  / \"8bit\"\n             \
    \     / \"binary\"\n                  / x-token\n   message-subtype := \"rfc822\"\
    \n                  / \"partial\" 2#3partial-param\n                  / \"external-body\"\
    \ 1*external-param\n                  / extension-token\n   message-type := \"\
    message\" \"/\" message-subtype\n   multipart-body :=preamble 1*encapsulation\
    \ close-delimiter epilogue\n   multipart-subtype := \"mixed\" / \"parallel\" /\
    \ \"digest\"\n                  / \"alternative\" / extension-token\n   multipart-type\
    \ := \"multipart\" \"/\" multipart-subtype\n                  \";\" \"boundary\"\
    \ \"=\" boundary\n   octet := \"=\" 2(DIGIT / \"A\" / \"B\" / \"C\" / \"D\" /\
    \ \"E\" / \"F\")\n        ; octet must be used for characters > 127, =, SPACE,\
    \ or\n   TAB,\n        ; and is recommended for any characters not listed in\n\
    \        ; Appendix B as \"mail-safe\".\n   padding := \"0\" / \"1\" /  \"2\"\
    \ /  \"3\" / \"4\" / \"5\" / \"6\" / \"7\"\n   parameter := attribute \"=\" value\n\
    \   partial-param :=     (\";\" \"id\" \"=\" value)\n                  /  (\"\
    ;\" \"number\" \"=\" 1*DIGIT)\n                  /  (\";\" \"total\" \"=\" 1*DIGIT)\n\
    \             ; id & number required;total required for last part\n   preamble\
    \ := discard-text       ;  to  be  ignored upon receipt.\n   ptext := octet /\
    \ <any ASCII character except \"=\", SPACE,  or TAB>\n        ; characters not\
    \ listed as \"mail-safe\" in Appendix B\n        ; are also not recommended.\n\
    \   quoted-printable := ([*(ptext / SPACE /  TAB)  ptext]  [\"=\"] CRLF)\n   \
    \     ; Maximum line length of 76 characters excluding CRLF\n   stream-param :=\
    \  (\";\" \"type\" \"=\" value)\n                / (\";\" \"padding\" \"=\" padding)\n\
    \   subtype := token  ; case-insensitive\n   text-subtype := \"plain\" / extension-token\n\
    \   text-type := \"text\" \"/\" text-subtype [\";\" \"charset\" \"=\" charset]\n\
    \   token  :=  1*<any  (ASCII) CHAR except SPACE, CTLs, or tspecials>\n   tspecials\
    \ :=  \"(\" / \")\" / \"<\" / \">\" / \"@\"\n              /  \",\" / \";\" /\
    \ \":\" / \"\\\" / <\">\n              /  \"/\" / \"[\" / \"]\" / \"?\" / \"=\"\
    \n             ; Must be in quoted-string,\n             ; to use within parameter\
    \ values\n   type :=     \"application\"     /  \"audio\"   ; case-insensitive\n\
    \             / \"image\"           / \"message\"\n             / \"multipart\"\
    \  / \"text\"\n             / \"video\"           / extension-token\n        \
    \     ; All values case-insensitive\n   value := token / quoted-string\n   version\
    \ := \"MIME-Version\" \":\" 1*DIGIT \".\" 1*DIGIT\n   video-type := \"video\"\
    \ \"/\" (\"mpeg\" / extension-token)\n   x-token := <The two characters \"X-\"\
    \ or \"x-\" followed, with no\n              intervening white space, by any token>\n"
- title: Appendix E -- IANA Registration Procedures
  contents:
  - "Appendix E -- IANA Registration Procedures\n   MIME has been carefully designed\
    \ to have extensible mechanisms, and\n   it is expected that the set of content-type/subtype\
    \ pairs and their\n   associated parameters will grow significantly with time.\
    \  Several\n   other MIME fields, notably character set names, access-type\n \
    \  parameters for the message/external-body type, and possibly even\n   Content-Transfer-Encoding\
    \ values, are likely to have new values\n   defined over time.  In order to ensure\
    \ that the set of such values is\n   developed in an orderly, well-specified,\
    \ and public manner, MIME\n   defines a registration process which uses the Internet\
    \ Assigned\n   Numbers Authority (IANA) as a central registry for such values.\n\
    \   In general, parameters in the content-type header field are used to\n   convey\
    \ supplemental information for various content types, and their\n   use is defined\
    \ when the content-type and subtype are defined.  New\n   parameters should not\
    \ be defined as a way to introduce new\n   functionality.\n   In order to simplify\
    \ and standardize the registration process, this\n   appendix gives templates\
    \ for the registration of new values with\n   IANA.  Each of these is given in\
    \ the form of an email message\n   template, to be filled in by the registering\
    \ party.\n   E.1  Registration of New Content-type/subtype Values\n   Note that\
    \ MIME is generally expected to be extended by subtypes.  If\n   a new fundamental\
    \ top-level type is needed, its specification must be\n   published as an RFC\
    \ or submitted in a form suitable to become an RFC,\n   and be subject to the\
    \ Internet standards process.\n      To:  IANA@isi.edu\n      Subject:  Registration\
    \ of new MIME\n           content-type/subtype\n      MIME type name:\n      (If\
    \ the above is not an existing top-level MIME type,\n      please explain why\
    \ an existing type cannot be used.)\n      MIME subtype name:\n      Required\
    \ parameters:\n      Optional parameters:\n      Encoding considerations:\n  \
    \    Security considerations:\n      Published specification:\n      (The published\
    \ specification must be an Internet RFC or\n      RFC-to-be if a new top-level\
    \ type is being defined, and\n      must be a publicly available specification\
    \ in any\n      case.)\n      Person & email address to contact for further information:\n\
    \   E.2  Registration of New Access-type Values\n           for Message/external-body\n\
    \      To:  IANA@isi.edu\n      Subject:  Registration of new MIME Access-type\
    \ for\n           Message/external-body content-type\n      MIME access-type name:\n\
    \      Required parameters:\n      Optional parameters:\n      Published specification:\n\
    \      (The published specification must be an Internet RFC or\n      RFC-to-be.)\n\
    \      Person & email address to contact for further information:\n"
- title: Appendix F -- Summary of the Seven Content-types
  contents:
  - "Appendix F -- Summary of the Seven Content-types\n   Content-type: text\n   Subtypes\
    \ defined by this document:  plain\n   Important Parameters: charset\n   Encoding\
    \ notes: quoted-printable generally preferred if an encoding\n      is needed\
    \ and the character set is mostly an ASCII superset.\n   Security considerations:\
    \ Rich text formats such as TeX and Troff\n      often contain mechanisms for\
    \ executing arbitrary commands or file\n      system operations, and should not\
    \ be used automatically unless\n      these security problems have been addressed.\
    \  Even plain text may\n      contain control characters that can be used to exploit\
    \ the\n      capabilities of \"intelligent\" terminals and cause security\n  \
    \    violations.  User interfaces designed to run on such terminals\n      should\
    \ be aware of and try to prevent such problems.\n   ________________________________________________________\n\
    \   Content-type: multipart\n   Subtypes defined by  this  document: mixed, alternative,\n\
    \        digest, parallel.\n   Important Parameters: boundary\n   Encoding notes:\
    \ No content-transfer-encoding is permitted.\n   ________________________________________________________\n\
    \   Content-type: message\n   Subtypes defined by this document: rfc822, partial,\
    \ external-body\n   Important Parameters: id, number, total, access-type, expiration,\n\
    \      size, permission, name, site, directory, mode, server, subject\n   Encoding\
    \ notes: No content-transfer-encoding is permitted.\n      Specifically, only\
    \ \"7bit\" is permitted for \"message/partial\" or\n      \"message/external-body\"\
    , and only \"7bit\", \"8bit\", or \"binary\" are\n      permitted for other subtypes\
    \ of \"message\".\n   ______________________________________________________________\n\
    \   Content-type: application\n   Subtypes defined by this document:  octet-stream,\
    \ postscript\n   Important Parameters:  type, padding\n   Deprecated Parameters:\
    \ name and conversions were\n                          defined in RFC 1341.\n\
    \   Encoding notes: base64 preferred for unreadable subtypes.\n   Security considerations:\
    \  This  type  is  intended  for  the\n   transmission  of data to be interpreted\
    \ by locally-installed\n   programs.  If used,  for  example,  to  transmit  executable\n\
    \   binary  programs  or programs in general-purpose interpreted\n   languages,\
    \ such as LISP programs or  shell  scripts,  severe\n   security  problems  could\
    \  result.   Authors of mail-reading\n   agents are cautioned against giving their\
    \ systems the  power\n   to  execute  mail-based  application  data without carefully\n\
    \   considering  the  security  implications.    While   it   is\n   certainly\
    \  possible  to  define safe application formats and\n   even safe interpreters\
    \ for unsafe formats, each  interpreter\n   should   be   evaluated  separately\
    \  for  possible  security\n   problems.\n   ________________________________________________________________\n\
    \   Content-type: image\n   Subtypes defined by this document:  jpeg, gif\n  \
    \ Important Parameters: none\n   Encoding notes: base64 generally preferred\n\
    \   ________________________________________________________________\n   Content-type:\
    \ audio\n   Subtypes defined by this document:  basic\n   Important Parameters:\
    \ none\n   Encoding notes: base64 generally preferred\n   ________________________________________________________________\n\
    \   Content-type: video\n   Subtypes defined by this document:  mpeg\n   Important\
    \ Parameters: none\n   Encoding notes: base64 generally preferred\n"
- title: Appendix G -- Canonical Encoding Model
  contents:
  - "Appendix G -- Canonical Encoding Model\n   There was some confusion, in earlier\
    \ drafts of this memo, regarding\n   the model for when email data was to be converted\
    \ to canonical form\n   and encoded, and in particular how this process would\
    \ affect the\n   treatment of CRLFs, given that the representation of newlines\
    \ varies\n   greatly from system to system.  For this reason, a canonical model\n\
    \   for encoding is presented below.\n   The process of composing a MIME entity\
    \ can be modeled as being done\n   in a number of steps.  Note that these steps\
    \ are roughly similar to\n   those steps used in RFC 1421 and are performed for\
    \ each 'innermost\n   level' body:\n   Step 1.  Creation of local form.\n   The\
    \ body to be transmitted is created in the system's native format.\n   The native\
    \ character set is used, and where appropriate local end of\n   line conventions\
    \ are used as well.  The body may be a UNIX-style text\n   file, or a Sun raster\
    \ image, or a VMS indexed file, or audio data in\n   a system-dependent format\
    \ stored only in memory, or anything else\n   that corresponds to the local model\
    \ for the representation of some\n   form of information.  Fundamentally, the\
    \ data is created in the\n   \"native\" form specified by the type/subtype information.\n\
    \   Step 2.  Conversion to canonical form.\n   The entire body, including \"out-of-band\"\
    \ information such as record\n   lengths and possibly file attribute information,\
    \ is converted to a\n   universal canonical form.  The specific content type of\
    \ the body as\n   well as its associated attributes dictate the nature of the\
    \ canonical\n   form that is used.  Conversion to the proper canonical form may\n\
    \   involve character set conversion, transformation of audio data,\n   compression,\
    \ or various other operations specific to the various\n   content types.  If character\
    \ set conversion is involved, however,\n   care must be taken to understand the\
    \ semantics of the content-type,\n   which may have strong implications for any\
    \ character set conversion,\n   e.g.  with regard to syntactically meaningful\
    \ characters in a text\n   subtype other than \"plain\".\n   For example, in the\
    \ case of text/plain data, the text must be\n   converted to a supported character\
    \ set and lines must be delimited\n   with CRLF delimiters in accordance with\
    \ RFC822.  Note that the\n   restriction on line lengths implied by RFC822 is\
    \ eliminated if the\n   next step employs either quoted-printable or base64 encoding.\n\
    \   Step 3.  Apply transfer encoding.\n   A Content-Transfer-Encoding appropriate\
    \ for this body is applied.\n   Note that there is no fixed relationship between\
    \ the content type and\n   the transfer encoding.  In particular, it may be appropriate\
    \ to base\n   the choice of base64 or quoted-printable on character frequency\n\
    \   counts which are specific to a given instance of a body.\n   Step 4.  Insertion\
    \ into entity.\n   The encoded object is inserted into a MIME entity with appropriate\n\
    \   headers.  The entity is then inserted into the body of a higher-level\n  \
    \ entity (message or multipart) if needed.\n   It is vital to note that these\
    \ steps are only a model; they are\n   specifically NOT a blueprint for how an\
    \ actual system would be built.\n   In particular, the model fails to account\
    \ for two common designs:\n      1.  In many cases the conversion to a canonical\
    \ form prior to\n      encoding will be subsumed into the encoder itself, which\n\
    \      understands local formats directly.  For example, the local\n      newline\
    \ convention for text bodies might be carried through to the\n      encoder itself\
    \ along with knowledge of what that format is.\n      2.  The output of the encoders\
    \ may have to pass through one or\n      more additional steps prior to being\
    \ transmitted as a message.  As\n      such, the output of the encoder may not\
    \ be conformant with the\n      formats specified by RFC822.  In particular, once\
    \ again it may be\n      appropriate for the converter's output to be expressed\
    \ using local\n      newline conventions rather than using the standard RFC822\
    \ CRLF\n      delimiters.\n   Other implementation variations are conceivable\
    \ as well.  The vital\n   aspect of this discussion is that, in spite of any optimizations,\n\
    \   collapsings of required steps, or insertion of additional processing,\n  \
    \ the resulting messages must be consistent with those produced by the\n   model\
    \ described here.  For example, a message with the following\n   header fields:\n\
    \        Content-type: text/foo; charset=bar\n        Content-Transfer-Encoding:\
    \ base64\n   must be first represented in the text/foo form, then (if necessary)\n\
    \   represented in the \"bar\" character set, and finally transformed via\n  \
    \ the base64 algorithm into a mail-safe form.\n"
- title: Appendix H -- Changes from RFC 1341
  contents:
  - "Appendix H -- Changes from RFC 1341\n   This document is a relatively minor revision\
    \  of  RFC  1341.  For\n   the  convenience  of  those familiar with RFC 1341,\
    \ the technical\n   changes from that document are summarized in  this appendix.\n\
    \   1.  The definition of \"tspecials\" has been changed to no longer\n   include\
    \ \".\".\n   2.  The Content-ID field is now mandatory for message/external-body\n\
    \   parts.\n   3.  The text/richtext type (including the old Section 7.1.3 and\n\
    \   Appendix D) has been moved to a separate document.\n   4.  The rules on header\
    \ merging for message/partial data have been\n   changed to treat the Encrypted\
    \ and MIME-Version headers as special\n   cases.\n   5.  The definition of the\
    \ external-body access-type parameter has\n   been changed so that it can only\
    \ indicate a single access method\n   (which was all that made sense).\n   6.\
    \  There is a new \"Subject\" parameter for message/external-body,\n   access-type\
    \ mail-server, to permit MIME-based use of mail servers\n   that rely on Subject\
    \ field information.\n   7.  The \"conversions\" parameter for application/octet-stream\
    \ has been\n   removed.\n   8.  Section 7.4.1 now deprecates the use of the \"\
    name\" parameter for\n   application/octet-stream, as this will be superseded\
    \ in the future by\n   a Content-Disposition header.\n   9.  The formal grammar\
    \ for multipart bodies has been changed so that\n   a CRLF is no longer required\
    \ before the first boundary line.\n   10.  MIME entities of type \"message/partial\"\
    \ and \"message/external-\n   body\" are now required to use only the \"7bit\"\
    \ transfer-encoding.\n   (Specifically, \"binary\" and \"8bit\" are not permitted.)\n\
    \   11.  The \"application/oda\" content-type has been removed.\n   12.  A note\
    \ has been added to the end of section 7.2.3, explaining\n   the semantics of\
    \ Content-ID in a multipart/alternative MIME entity.\n   13.  The formal syntax\
    \ for the \"MIME-Version\" field has been\n   tightened, but in a way that is\
    \ completely compatible with the only\n   version number defined in RFC 1341.\n\
    \   14.  In Section 7.3.1, the definition of message/rfc822 has been\n   relaxed\
    \ regarding mandatory fields.\n   All other changes from RFC 1341 were editorial\
    \ changes and do not\n   affect the technical content of MIME.  Considerable formal\
    \ grammar\n   has been added, but this reflects the prose specification that was\n\
    \   already in place.\n"
- title: References
  contents:
  - "References\n   [US-ASCII] Coded Character Set--7-Bit American Standard Code for\n\
    \   Information Interchange, ANSI X3.4-1986.\n   [ATK] Borenstein, Nathaniel S.,\
    \ Multimedia Applications Development\n   with the Andrew Toolkit, Prentice-Hall,\
    \ 1990.\n   [GIF] Graphics Interchange Format (Version 89a), Compuserve, Inc.,\n\
    \   Columbus, Ohio, 1990.\n   [ISO-2022] International Standard--Information Processing--ISO\
    \ 7-bit\n   and 8-bit coded character sets--Code extension techniques, ISO\n \
    \  2022:1986.\n   [ISO-8859] Information Processing -- 8-bit Single-Byte Coded\
    \ Graphic\n   Character Sets -- Part 1: Latin Alphabet No. 1, ISO 8859-1:1987.\
    \  Part\n   2: Latin alphabet No.  2, ISO 8859-2, 1987.  Part 3: Latin alphabet\n\
    \   No. 3, ISO 8859-3, 1988.  Part 4: Latin alphabet No.  4, ISO 8859-4,\n   1988.\
    \  Part 5: Latin/Cyrillic alphabet, ISO 8859-5, 1988.  Part 6:\n   Latin/Arabic\
    \ alphabet, ISO 8859-6, 1987.  Part 7: Latin/Greek\n   alphabet, ISO 8859-7, 1987.\
    \  Part 8: Latin/Hebrew alphabet, ISO\n   8859-8, 1988.  Part 9: Latin alphabet\
    \ No. 5, ISO 8859-9, 1990.\n   [ISO-646] International Standard--Information Processing--ISO\
    \ 7-bit\n   coded character set for information interchange, ISO 646:1983.\n \
    \  [MPEG] Video Coding Draft Standard ISO 11172 CD, ISO IEC/TJC1/SC2/WG11\n  \
    \ (Motion Picture Experts Group), May, 1991.\n   [PCM] CCITT, Fascicle III.4 -\
    \ Recommendation G.711, Geneva, 1972,\n   \"Pulse Code Modulation (PCM) of Voice\
    \ Frequencies\".\n   [POSTSCRIPT] Adobe Systems, Inc., PostScript Language Reference\n\
    \   Manual, Addison-Wesley, 1985.\n   [POSTSCRIPT2] Adobe Systems, Inc., PostScript\
    \ Language Reference\n   Manual, Addison-Wesley, Second Edition, 1990.\n   [X400]\
    \ Schicker, Pietro, \"Message Handling Systems, X.400\", Message\n   Handling\
    \ Systems and Distributed Applications, E.  Stefferud, O-j.\n   Jacobsen, and\
    \ P.  Schicker, eds., North-Holland, 1989, pp. 3-41.\n   [RFC-783] Sollins, K.,\
    \ \"TFTP Protocol (revision 2)\", RFC 783, MIT,\n   June 1981.\n   [RFC-821] Postel,\
    \ J., \"Simple Mail Transfer Protocol\", STD 10, RFC\n   821, USC/Information\
    \ Sciences Institute, August 1982.\n   [RFC-822] Crocker, D., \"Standard for the\
    \ Format of ARPA Internet Text\n   Messages\", STD 11, RFC 822, UDEL, August 1982.\n\
    \   [RFC-934] Rose, M., and E. Stefferud, \"Proposed Standard for Message\n  \
    \ Encapsulation\", RFC 934, Delaware and NMA, January 1985.\n   [RFC-959] Postel,\
    \ J. and J. Reynolds, \"File Transfer Protocol\",\n   STD 9, RFC 959, USC/Information\
    \ Sciences Institute, October 1985.\n   [RFC-1049] Sirbu, M., \"Content-Type Header\
    \ Field for Internet\n   Messages\", STD 11, RFC 1049, CMU, March 1988.\n   [RFC-1421]\
    \ Linn, J., \"Privacy Enhancement for Internet Electronic Mail:\n   Part I - Message\
    \ Encryption and Authentication Procedures\", RFC\n   1421, IAB IRTF PSRG, IETF\
    \ PEM WG, February 1993.\n   [RFC-1154] Robinson, D. and R. Ullmann, \"Encoding\
    \ Header Field for\n   Internet Messages\", RFC 1154, Prime Computer, Inc., April\
    \ 1990.\n   [RFC-1341] Borenstein, N., and N.  Freed, \"MIME (Multipurpose Internet\n\
    \   Mail Extensions): Mechanisms for Specifying and Describing the Format\n  \
    \ of Internet Message Bodies\", RFC 1341, Bellcore, Innosoft, June 1992.\n   [RFC-1342]\
    \ Moore, K., \"Representation of Non-Ascii Text in Internet\n   Message Headers\"\
    , RFC 1342, University of Tennessee, June 1992.\n   [RFC-1343] Borenstein, N.,\
    \ \"A User Agent Configuration Mechanism\n   for Multimedia Mail Format Information\"\
    , RFC 1343, Bellcore, June\n   1992.\n   [RFC-1344] Borenstein, N., \"Implications\
    \ of MIME for Internet\n   Mail Gateways\", RFC 1344, Bellcore, June 1992.\n \
    \  [RFC-1345] Simonsen, K., \"Character Mnemonics & Character Sets\",\n   RFC\
    \ 1345, Rationel Almen Planlaegning, June 1992.\n   [RFC-1426] Klensin, J., (WG\
    \ Chair), Freed, N., (Editor), Rose, M.,\n   Stefferud, E., and D. Crocker, \"\
    SMTP Service Extension for 8bit-MIME\n   transport\", RFC 1426, United Nations\
    \ Universit, Innosoft, Dover Beach\n   Consulting, Inc., Network Management Associates,\
    \ Inc., The Branch\n   Office, February 1993.\n   [RFC-1522] Moore, K., \"Representation\
    \ of Non-Ascii Text in Internet\n   Message Headers\" RFC 1522, University of\
    \ Tennessee, September 1993.\n   [RFC-1340] Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", STD 2, RFC\n   1340, USC/Information Sciences Institute, July 1992.\n"
