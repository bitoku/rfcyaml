Abstract This memo defines an information model for the IP Flow Information eXport (IPFIX) protocol.
It is used by the IPFIX protocol for encoding measured traffic information and information related to the traffic Observation Point, the traffic Metering Process, and the Exporting Process.
Although developed for the IPFIX protocol, the model is defined in an open way that easily allows using it in other protocols, interfaces, and applications.
The IP Flow Information eXport (IPFIX) protocol serves for transmitting information related to measured IP traffic over the Internet.
The protocol specification in [RFC5101] defines how Information Elements are transmitted.
For Information Elements, it specifies the encoding of a set of basic data types.
However, the list of Information Elements that can be transmitted by the protocol, such as Flow attributes (source IP address, number of packets, etc.)
and information about the Metering and Exporting Process (packet Observation Point, sampling rate, Flow timeout interval, etc.), is not specified in [RFC5101].
This document complements the IPFIX protocol specification by providing the IPFIX information model.
IPFIX specific terminology used in this document is defined in Section 2 of [RFC5101].
As in [RFC5101], these IPFIX specific terms have the first letter of a word capitalized when used in this document.
The use of the term 'information model' is not fully in line with the definition of this term in [RFC3444].
The IPFIX information model does not specify relationships between Information Elements, but also it does not specify a concrete encoding of Information Elements.
Besides the encoding used by the IPFIX protocol, other encodings of IPFIX Information Elements can be applied, for example, XML based encodings.
The main part of this document is Section 5, which defines the (extensible) list of Information Elements to be transmitted by the IPFIX protocol.
Section 2 defines a template for specifying IPFIX Information Elements in Section 5.
Section 3 defines the set of abstract data types that are available for IPFIX Information Elements.
Section 6 discusses extensibility of the IPFIX information model.
The main bodies of Sections 2, 3, and 5 were generated from XML documents.
The XML based specification of template, abstract data types, and IPFIX Information Elements can be used for automatically checking syntactical correctness of the specification of IPFIX Information Elements.
It can further be used for generating IPFIX protocol implementation code that deals with processing IPFIX Information Elements.
Also, code for applications that further process traffic information transmitted via the IPFIX protocol can be generated with the XML specification of IPFIX Information Elements.
For that reason, the XML document that served as a source for Section 5 and the XML schema that served as source for Sections 2 and 3 are attached to this document in Appendices A and B. Note that although partially generated from the attached XML documents, the main body of this document is normative while the appendices are informational.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Properties of IPFIX Protocol Information Elements 2.1.
Information Elements Specification Template Information in messages of the IPFIX protocol is modeled in terms of Information Elements of the IPFIX information model.
IPFIX Information Elements are specified in Section 5.
For specifying these Information Elements, a template is used that is described below.
All Information Elements specified for the IPFIX protocol either in this document or by any future extension MUST have the following properties defined: name A unique and meaningful name for the Information Element.
A numeric identifier of the Information Element.
If this identifier is used without an enterprise identifier (see [RFC5101] and enterpriseId below), then it is globally unique and the list of allowed values is administered by IANA.
It is used for compact identification of an Information Element when encoding Templates in the protocol.
The semantics of this Information Element.
Describes how this Information Element is derived from the Flow or other information available to the observer.
dataType One of the types listed in Section 3.1 of this document or in a future extension of the information model.
The type space for attributes is constrained to facilitate implementation.
The existing type space does however encompass most basic types used in modern programming languages, as well as some derived types (such as ipv4Address) that are common to this domain and useful to distinguish.
The status of the specification of this Information Element.
Allowed values are 'current', 'deprecated', and 'obsolete'.
Enterprise specific Information Elements MUST have the following property defined:
enterpriseId Enterprises may wish to define Information Elements without registering them with IANA, for example, for enterprise internal purposes.
For such Information Elements, the Information Element identifier described above is not sufficient when the Information Element is used outside the enterprise.
If specifications of enterprise specific Information Elements are made public and/or if enterprise specific identifiers are used by the IPFIX protocol outside the enterprise, then the enterprise specific identifier MUST be made globally unique by combining it with an enterprise identifier.
Valid values for the enterpriseId are defined by IANA as Structure of Management Information (SMI) network management private enterprise codes.
They are defined at http://www.iana.org/assignments/enterprise  numbers.
All Information Elements specified for the IPFIX protocol either in this document or by any future extension
MAY have the following properties defined: dataTypeSemantics
The integral types may be qualified by additional semantic details.
Valid values for the data type semantics are specified in Section 3.2 of this document or in a future extension of the information model.
If the Information Element is a measure of some kind, the units identify what the measure is.
range Some Information Elements may only be able to take on a restricted set of values that can be expressed as a range (e.g., 0 through 511 inclusive).
If this is the case, the valid inclusive range should be specified.
reference Identifies additional specifications that more precisely define this item or provide additional context for its use.
Scope of Information Elements By default
, most Information Elements have a scope specified in their definitions.
The Information Elements defined in Sections 5.2 and 5.3 have a default of "a specific Metering Process" or of "a specific Exporting Process", respectively.
The Information Elements defined in Sections 5.4 5.11 have a scope of "a specific Flow".
Within Data Records defined by Option Templates, the IPFIX protocol allows further limiting of the Information Element scope.
The new scope is specified by one or more scope fields and defined as the combination of all specified scope values; see Section 3.4.2.1 on IPFIX scopes in [RFC5101].
Naming Conventions for Information Elements
The following naming conventions were used for naming Information Elements in this document.
It is recommended that extensions of the model use the same conventions.
Names of Information Elements should be descriptive.
Names of Information Elements that are not enterprise specific MUST be unique within the IPFIX information model.
Enterprise specific Information Elements SHOULD be prefixed with a vendor name.
Names of Information Elements start with non capitalized letters.
Composed names use capital letters for the first letter of each component (except for the first one).
All other letters are non capitalized, even for acronyms.
Exceptions are made for acronyms containing non capitalized letter, such as 'IPv4' and 'IPv6'.
Middleboxes [RFC3234] may change Flow properties, such as the Differentiated Service Code Point (DSCP) value or the source IP address.
If an IPFIX Observation Point is located in the path of a Flow before one or more middleboxes that potentially modify packets of the Flow, then it may be desirable to also report Flow properties after the modification performed by the middleboxes.
An example is an Observation Point before a packet marker changing a packet's IPv4 Type of Service (TOS) field that is encoded in Information Element classOfServiceIPv4.
Then the value observed and reported by Information Element classOfServiceIPv4 is valid at the Observation Point, but not after the packet passed the packet marker.
For reporting the change value of the TOS field, the IPFIX information model uses Information Elements that have a name prefix "post", for example, "postClassOfServiceIPv4".
Information Elements with prefix "post" report on Flow properties that are not necessarily observed at the Observation Point, but which are obtained within the Flow's Observation Domain by other means considered to be sufficiently reliable, for example, by analyzing the packet marker's marking tables.
This section describes the abstract data types that can be used for the specification of IPFIX Information Elements in Section 4.
Section 3.1 describes the set of abstract data types.
Abstract data types unsigned8, unsigned16, unsigned32, unsigned64, signed8, signed16, signed32, and
signed64 are integral data types.
As described in Section 3.2, their data type semantics can be further specified, for example, by 'totalCounter', 'deltaCounter', 'identifier', or 'flags'.
This section describes the set of valid abstract data types of the IPFIX information model.
Note that further abstract data types may be specified by future extensions of the IPFIX information model.
The type "unsigned8" represents a non negative integer value in the range of 0 to 255.
The type "unsigned16" represents a non negative integer value in the range of 0 to 65535.
The type "unsigned32" represents a non negative integer value in the range of 0 to 4294967295.
The type "unsigned64" represents a non negative integer value in the range of 0 to 18446744073709551615.
The type "signed8" represents an integer value in the range of  128 to 127.
The type "signed16" represents an integer value in the range of  32768 to 32767.
The type "signed32" represents an integer value in the range of  2147483648 to 2147483647.
The type "signed64" represents an integer value in the range of  9223372036854775808 to 9223372036854775807.
The type "float32" corresponds to an IEEE single precision 32 bit floating point type as defined in [IEEE.754.1985].
The type "float64" corresponds to an IEEE double precision 64 bit floating point type as defined in [IEEE.754.1985].
The type "boolean" represents a binary value.
The only allowed values are "true" and "false".
The type "macAddress" represents a string of 6 octets.
The type "octetArray" represents a finite length string of octets.
string The type "string" represents a finite length string of valid characters from the Unicode character encoding set [ISO.10646  1.1993].
Unicode allows for ASCII [ISO.646.1991] and many other international character sets to be used.
The type "dateTimeSeconds" represents a time value in units of seconds based on coordinated universal time (UTC).
The choice of an epoch, for example, 00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
The type "dateTimeMilliseconds" represents a time value in units of milliseconds based on coordinated universal time (UTC).
The choice of an epoch, for example, 00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
The type "dateTimeMicroseconds" represents a time value in units of microseconds based on coordinated universal time (UTC).
The choice of an epoch, for example, 00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
The type "dateTimeNanoseconds" represents a time value in units of nanoseconds based on coordinated universal time (UTC).
The choice of an epoch, for example, 00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
The type "ipv4Address" represents a value of an IPv4 address.
The type "ipv6Address" represents a value of an IPv6 address.
This section describes the set of valid data type semantics of the IPFIX information model.
Note that further data type semantics may be specified by future extensions of the IPFIX information model.
A quantity value represents a discrete measured value pertaining to the record.
This is distinguished from counters that represent an ongoing measured value whose "odometer" reading is captured as part of a given record.
If no semantic qualifier is given, the Information Elements that have an integral data type should behave as a quantity.
An integral value reporting the value of a counter.
Counters are unsigned and wrap back to zero after reaching the limit of the type.
For example, an unsigned64 with counter semantics will continue to increment until reaching the value of 2  64 1.
At this point, the next increment will wrap its value to zero and continue counting from zero.
The semantics of a total counter is similar to the semantics of counters used in SNMP, such as Counter32 defined in RFC 2578 [RFC2578].
The only difference between total counters and counters used in SNMP is that the total counters have an initial value of 0.
A total counter counts independently of the export of its value.
An integral value reporting the value of a counter.
Counters are unsigned and wrap back to zero after reaching the limit of the type.
For example, an unsigned64 with counter semantics will continue to increment until reaching the value of 2  64 1.
At this point, the next increment will wrap its value to zero and continue counting from zero.
The semantics of a delta counter is similar to the semantics of counters used in SNMP, such as Counter32 defined in RFC 2578 [RFC2578].
The only difference between delta counters and counters used in SNMP is that the delta counters have an initial value of 0.
A delta counter is reset to 0 each time its value is exported.
identifier An integral value that serves as an identifier.
Specifically, mathematical operations on two identifiers (aside from the equality operation) are meaningless.
For example, Autonomous System ID 1   Autonomous System ID 2 is meaningless.
An integral value that actually represents a set of bit fields.
Logical operations are appropriate on such values, but not other mathematical operations.
Flags should always be of an unsigned type.
All Information Elements defined in Section 5 of this document or in future extensions of the IPFIX information model have their identifiers assigned by IANA.
Their identifiers can be retrieved at http://www.iana.org/assignments/ipfix.
The value of these identifiers is in the range of 1 32767.
Within this range, Information Element identifier values in the sub range of 1 127 are compatible with field types used by NetFlow version 9 [RFC3954].
Enterprise specific Information Element identifiers have the same range of 1 32767, but they are coupled with an additional enterprise identifier.
For enterprise specific Information Elements, Information Element identifier 0 is also reserved.
Enterprise specific Information Element identifiers can be chosen by an enterprise arbitrarily within the range of 1 32767.
The same identifier may be assigned by other enterprises for different purposes.
Still, Collecting Processes can distinguish these Information Elements because the Information Element identifier is coupled with an enterprise identifier.
Enterprise identifiers MUST be registered as SMI network management private enterprise code numbers with IANA.
The registry can be found at http://www.iana.org/assignments/enterprise numbers.
The following list gives an overview of the Information Element identifiers that are specified in Section 5 and are compatible with field types used by NetFlow version 9 [RFC3954].
The following list gives an overview of the Information Element identifiers that are specified in Section 5 and extends the list of Information Element identifiers specified already in [RFC3954].
This section describes the Information Elements of the IPFIX information model.
The elements are grouped into 12 groups according to their semantics and their applicability: 1.
Metering and Exporting Process Configuration 3.
Metering and Exporting Process Statistics 4.
Sub IP Header Fields 7.
Padding The Information Elements that are derived from fields of packets or from packet treatment, such as the Information Elements in groups 4 7, can typically serve as Flow Keys used for mapping packets to Flows.
If they do not serve as Flow Keys, their value may change from packet to packet within a single Flow.
For Information Elements with values that are derived from fields of packets or from packet treatment and for which the value may change from packet to packet within a single Flow, the IPFIX information model defines that their value is determined by the first packet observed for the corresponding Flow, unless the description of the Information Element explicitly specifies a different semantics.
This simple rule allows writing all Information Elements related to header fields once when the first packet of the Flow is observed.
For further observed packets of the same Flow, only Flow properties that depend on more than one packet, such as the Information Elements in groups 8 11, need to be updated.
Information Elements with a name having the "post" prefix, for example, "postClassOfServiceIPv4", do not report properties that were actually observed at the Observation Point, but retrieved by other means within the Observation Domain.
These Information Elements can be used if there are middlebox functions within the Observation Domain changing Flow properties after packets passed the Observation Point.
Information Elements in this section use the reference property to reference [RFC0768], [RFC0791], [RFC0792], [RFC0793], [RFC1108], [RFC1112], [RFC1191], [RFC1323], [RFC1385], [RFC1812], [RFC1930], [RFC2113], [RFC2119], [RFC2460], [RFC2675], [RFC2863], [RFC3031], [RFC3032], [RFC3193], [RFC3234], [RFC3260], [RFC3270], [RFC3376], [RFC3954], [RFC4271], [RFC4291], [RFC4302], [RFC4303], [RFC4364], [RFC4382], [RFC4443], [RFC4960], [RFC5036], [IEEE.802 11.1999], [IEEE.802 1Q.2003], and [IEEE.802 3.2002].
Identifiers Information Elements grouped in the table below are identifying components of the IPFIX architecture, of an IPFIX Device, or of the IPFIX protocol.
All of them have an integral abstract data type and data type semantics "identifier" as described in Section 3.2.4.
Typically, some of them are used for limiting scopes of other Information Elements.
However, other Information Elements MAY be used for limiting scopes.
Note also that all Information Elements listed below MAY be used for other purposes than limiting scopes.
An identifier of a line card that is unique per IPFIX Device hosting an Observation Point.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Abstract Data Type: unsigned32 Data Type Semantics:
An identifier of a line port that is unique per IPFIX Device hosting an Observation Point.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Abstract Data Type: unsigned32 Data Type Semantics:
identifier ElementId: 142 Status: current 5.1.3.
The index of the IP interface where packets of this Flow are being received.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
Abstract Data Type: unsigned32 Data Type Semantics:
See RFC 2863 for the definition of the ifIndex object.
The index of the IP interface where packets of this Flow are being sent.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
Abstract Data Type: unsigned32 Data Type Semantics:
See RFC 2863 for the definition of the ifIndex object.
An identifier of a Metering Process that is unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that process identifiers are typically assigned dynamically.
The Metering Process may be re started with a different ID.
Abstract Data Type: unsigned32 Data Type Semantics:
An identifier of an Exporting Process that is unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that process identifiers are typically assigned dynamically.
The Exporting Process may be re started with a different ID.
Abstract Data Type: unsigned32 Data Type Semantics:
An identifier of a Flow that is unique within an Observation Domain.
This Information Element can be used to distinguish between different Flows if Flow Keys such as IP addresses and port numbers are not reported or are reported in separate records.
Abstract Data Type: unsigned64 Data Type Semantics:
Description: An identifier of a Template that is locally unique within a combination of a Transport session and an Observation Domain.
Template IDs 0 255 are reserved for Template Sets, Options Template Sets, and other reserved Sets yet to be created.
Template IDs of Data Sets are numbered from 256 to 65535.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that after a re start of the Exporting Process Template identifiers may be re assigned.
Abstract Data Type: unsigned16 Data Type Semantics:
An identifier of an Observation Domain that is locally unique to an Exporting Process.
The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain where Flows were metered.
It is RECOMMENDED that this identifier is also unique per IPFIX Device.
A value of 0 indicates that no specific Observation Domain is identified by this Information Element.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Abstract Data Type: unsigned32 Data Type Semantics:
identifier ElementId: 149 Status: current 5.1.10.
observationPointId Description: An identifier of an Observation Point that is unique per Observation Domain.
It is RECOMMENDED that this identifier is also unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Abstract Data Type: unsigned32 Data Type Semantics:
An identifier of a set of common properties that is unique per Observation Domain and Transport Session.
Typically, this Information Element is used to link to information reported in separate Data Records.
Abstract Data Type: unsigned64 Data Type Semantics:
Metering and Exporting Process Configuration Information Elements in this section describe the configuration of the Metering Process or the Exporting Process.
The set of these Information Elements is listed in the table below.
Description: The IPv4 address used by the Exporting Process.
This is used by the Collector to identify the Exporter in cases where the identity of the Exporter may have been obscured by the use of a proxy.
Abstract Data Type: ipv4Address Data Type Semantics:
The IPv6 address used by the Exporting Process.
This is used by the Collector to identify the Exporter in cases where the identity of the Exporter may have been obscured by the use of a proxy.
Abstract Data Type: ipv6Address Data Type Semantics:
: The source port identifier from which the Exporting Process sends Flow information.
For the transport protocols UDP, TCP, and SCTP, this is the source port number.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
This field may be useful for distinguishing multiple Exporting Processes that use the same IP address.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP source port field.
See RFC 793 for the definition of the TCP source port field.
See RFC 4960 for the definition of SCTP.
Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
collectorIPv4Address Description: An IPv4 address to which the Exporting Process sends Flow information.
Abstract Data Type: ipv4Address Data Type Semantics:
An IPv6 address to which the Exporting Process sends Flow information.
Abstract Data Type: ipv6Address Data Type Semantics:
identifier ElementId: 212 Status: current 5.2.6.
The index of the interface from which IPFIX Messages sent by the Exporting Process to a Collector leave the IPFIX Device.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
Abstract Data Type: unsigned32 Data Type Semantics:
identifier ElementId: 213 Status: current Reference:
See RFC 2863 for the definition of the ifIndex object.
The protocol version used by the Exporting Process for sending Flow information.
The protocol version is given by the value of the Version Number field in the Message Header.
The protocol version is 10 for IPFIX and 9 for NetFlow version 9.
A value of 0 indicates that no export protocol is in use.
Abstract Data Type: unsigned8 Data Type Semantics:
current Reference: See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
See RFC 3954 for the definition of the NetFlow version 9 message header.
The value of the protocol number used by the Exporting Process for sending Flow information.
The protocol number identifies the IP packet payload type.
Protocol numbers are defined in the IANA Protocol Numbers registry.
In Internet Protocol version 4 (IPv4), this is carried in the Protocol field.
In Internet Protocol version 6 (IPv6), this is carried in the Next Header field in the last extension header of the packet.
Abstract Data Type: unsigned8 Data Type Semantics:
215 Status: current Reference: See RFC 791 for the specification of the IPv4 protocol field.
See RFC 2460 for the specification of the IPv6 protocol field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
The destination port identifier to which the Exporting Process sends Flow information.
For the transport protocols UDP, TCP, and SCTP, this is the destination port number.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP destination port field.
See RFC 793 for the definition of the TCP destination port field.
See RFC 4960 for the definition of SCTP.
Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
Description: This set of bit fields is used for marking the Information Elements of a Data Record that serve as Flow Key.
Each bit represents an Information Element in the Data Record with the n th bit representing the n th Information Element.
A bit set to value 1 indicates that the corresponding Information Element is a Flow Key of the reported Flow.
A bit set to value 0 indicates that this is not the case.
If the Data Record contains more than 64 Information Elements, the corresponding Template SHOULD be designed such that all Flow Keys are among the first 64 Information Elements, because the flowKeyIndicator only contains 64 bits.
If the Data Record contains less than 64 Information Elements, then the bits in the flowKeyIndicator for which no corresponding Information Element exists MUST have the value 0.
Abstract Data Type: unsigned64 Data Type Semantics:
Metering and Exporting Process Statistics Information Elements in this section describe statistics of the Metering Process and/or the Exporting Process.
The set of these Information Elements is listed in the table below.
The total number of IPFIX Messages that the Exporting Process has sent since the Exporting Process (re )initialization to a particular Collecting Process.
The reported number excludes the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of IPFIX Messages sent to this Collecting Process.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 41 Status: current Units: messages 5.3.2.
The total number of octets that the Exporting Process has sent since the Exporting Process (re )initialization to a particular Collecting Process.
The value of this Information Element is calculated by summing up the IPFIX Message Header length values of all IPFIX Messages that were successfully sent to the Collecting Process.
The reported number excludes octets in the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of octets sent to this Collecting Process.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 40 Status: current Units: octets 5.3.3.
The total number of Flow Records that the Exporting Process has sent as Data Records since the Exporting Process (re )initialization to a particular Collecting Process.
The reported number excludes Flow Records in the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of Flow Records sent to this process.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 42 Status: current Units: flows 5.3.4.
observedFlowTotalCount Description: The total number of Flows observed in the Observation Domain since the Metering Process (re )initialization for this Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 163 Status: current Units: flows 5.3.5.
The total number of observed IP packets that the Metering Process did not process since the (re )initialization of the Metering Process.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 164 Status: current Units: packets 5.3.6.
The total number of octets in observed IP packets (including the IP header) that the Metering Process did not process since the (re )initialization of the Metering Process.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 165 Status: current Units: octets 5.3.7.
The total number of Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 166 Status: current Units: flows 5.3.8.
The total number of packets in Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 167 Status: current Units: packets 5.3.9.
The total number of octets in packets in Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 168 Status: current Units: octets 5.4.
IP Header Fields Information Elements in this section indicate values of IP header fields or are derived from IP header field values in combination with further information.
The IP version field in the IP packet header.
Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 791 for the definition of the version field in the IPv4 packet header.
See RFC 2460 for the definition of the version field in the IPv6 packet header.
Additional information on defined version numbers can be found at http://www.iana.org/assignments/version numbers.
The IPv4 source address in the IP packet header.
Abstract Data Type: ipv4Address Data Type Semantics:
See RFC 791 for the definition of the IPv4 source address field.
The IPv6 source address in the IP packet header.
Abstract Data Type: ipv6Address Data Type Semantics:
See RFC 2460 for the definition of the Source Address field in the IPv6 header.
The number of contiguous bits that are relevant in the sourceIPv4Prefix Information Element.
unsigned8 ElementId: 9 Status: current Units:
The valid range is 0 32.
The number of contiguous bits that are relevant in the sourceIPv6Prefix Information Element.
unsigned8 ElementId: 29 Status: current Units:
The valid range is 0 128.
sourceIPv4Prefix Description: IPv4 source address prefix.
ipv4Address ElementId: 44 Status: current 5.4.7.
sourceIPv6Prefix Description: IPv6 source address prefix.
destinationIPv4Address Description: The IPv4 destination address in the IP packet header.
Abstract Data Type: ipv4Address Data Type Semantics:
See RFC 791 for the definition of the IPv4 destination address field.
The IPv6 destination address in the IP packet header.
Abstract Data Type: ipv6Address Data Type Semantics:
identifier ElementId: 28 Status: current Reference:
See RFC 2460 for the definition of the Destination Address field in the IPv6 header.
The number of contiguous bits that are relevant in the destinationIPv4Prefix Information Element.
unsigned8 ElementId: 13 Status: current Units:
The valid range is 0 32.
The number of contiguous bits that are relevant in the destinationIPv6Prefix Information Element.
unsigned8 ElementId: 30 Status: current Units:
The valid range is 0 128.
destinationIPv4Prefix Description: IPv4 destination address prefix.
ipv4Address ElementId: 45 Status: current 5.4.13.
destinationIPv6Prefix Description: IPv6 destination address prefix.
: For IPv4, the value of the Information Element matches the value of the Time to Live (TTL) field in the IPv4 packet header.
For IPv6, the value of the Information Element matches the value of the Hop Limit field in the IPv6 packet header.
unsigned8 ElementId: 192 Status: current Units:
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
The value of the protocol number in the IP packet header.
The protocol number identifies the IP packet payload type.
Protocol numbers are defined in the IANA Protocol Numbers registry.
In Internet Protocol version 4 (IPv4), this is carried in the Protocol field.
In Internet Protocol version 6 (IPv6), this is carried in the Next Header field in the last extension header of the packet.
Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 791 for the specification of the IPv4 protocol field.
See RFC 2460 for the specification of the IPv6 protocol field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
Description: The value of the Next Header field of the IPv6 header.
The value identifies the type of the following IPv6 extension header or of the following IP payload.
Valid values are defined in the IANA Protocol Numbers registry.
See RFC 2460 for the definition of the IPv6 Next Header field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
The value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services field.
The Differentiated Services field spans the most significant 6 bits of the IPv4 TOS field or the IPv6 Traffic Class field, respectively.
This Information Element encodes only the 6 bits of the Differentiated Services field.
Therefore, its value may range from 0 to 63.
Abstract Data Type: unsigned8 Data Type Semantics:
The valid range is 0 63.
See RFC 3260 for the definition of the Differentiated Services field.
See RFC 1812 (Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
The value of the IP Precedence.
The IP Precedence value is encoded in the first 3 bits of the IPv4 TOS field or the IPv6 Traffic Class field, respectively.
This Information Element encodes only these 3 bits.
Therefore, its value may range from 0 to 7.
Abstract Data Type: unsigned8 Data Type Semantics:
The valid range is 0 7.
See RFC 1812 (Section 5.3.3) and RFC 791 for the definition of the IP Precedence.
See RFC 1812 (Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
ipClassOfService Description: For IPv4 packets, this is the value of the TOS field in the IPv4 packet header.
For IPv6 packets, this is the value of the Traffic Class field in the IPv6 packet header.
Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 1812 (Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
Description: The definition of this Information Element is identical to the definition of Information Element 'ipClassOfService', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
See RFC 3234 for the definition of middleboxes.
flowLabelIPv6 Description: The value of the IPv6 Flow Label field in the IP packet header.
Abstract Data Type: unsigned32 Data Type Semantics:
31 Status: current Reference: See RFC 2460 for the definition of the Flow Label field in the IPv6 packet header.
isMulticast Description: If the IP destination address is not a reserved multicast address, then the value of all bits of the octet (including the reserved ones) is zero.
The first bit of this octet is set to 1 if the Version field of the IP header has the value 4 and if the Destination Address field contains a reserved multicast address in the range from 224.0.0.0 to 239.255.255.255.
Otherwise, this bit is set to 0.
The second and third bits of this octet are reserved for future use.
The remaining bits of the octet are only set to values other than zero if the IP Destination Address is a reserved IPv6 multicast address.
Then the fourth bit of the octet is set to the value of the T flag in the IPv6 multicast address and
the remaining four bits are set to the value of the scope field in the IPv6 multicast address.
set to 1 if IPv4 multicast Bits 1 2:
206 Status: current Reference: See RFC 1112 for the specification of reserved IPv4 multicast addresses.
See RFC 4291 for the specification of reserved IPv6 multicast addresses and the definition of the T flag and the IPv6 multicast scope.
The value of the Identification field in the IPv4 packet header or in the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
Abstract Data Type: unsigned32 Data Type Semantics:
See RFC 791 for the definition of the IPv4 Identification field.
See RFC 2460 for the definition of the Identification field in the IPv6 Fragment header.
The value of the IP fragment offset field in the IPv4 packet header or the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 791 for the specification of the fragment offset in the IPv4 header.
See RFC 2460 for the specification of the fragment offset in the IPv6 Fragment header.
Fragmentation properties indicated by flags in the IPv4 packet header or the IPv6 Fragment header, respectively.
The value of this bit MUST be 0 until specified otherwise.
Corresponds to the value of the DF flag in the IPv4 header.
Will always be 0 for IPv6 unless a "don't fragment" feature is introduced to IPv6.
Last Fragment, 1   More Fragments.
Corresponds to the MF flag in the IPv4 header or to the M flag in the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
The values of these bits are irrelevant.
See RFC 791 for the specification of the IPv4 fragment flags.
See RFC 2460 for the specification of the IPv6 Fragment header.
The length of the IP header.
For IPv6, the value of this Information Element is 40.
unsigned8 ElementId: 189 Status: current Units:
See RFC 791 for the specification of the IPv4 header.
See RFC 2460 for the specification of the IPv6 header.
Description: The value of the Internet Header Length (IHL) field in the IPv4 header.
It specifies the length of the header in units of 4 octets.
Please note that its unit is different from most of the other Information Elements reporting length values.
unsigned8 ElementId: 207 Status: current Units: 4 octets Reference:
See RFC 791 for the specification of the IPv4 header.
The total length of the IPv4 packet.
unsigned16 ElementId: 190 Status: current Units:
See RFC 791 for the specification of the IPv4 total length.
The total length of the IP packet.
unsigned64 ElementId: 224 Status: current Units:
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
payloadLengthIPv6 Description: This Information Element reports the value of the Payload Length field in the IPv6 header.
Note that IPv6 extension headers belong to the payload.
Also note that in case of a jumbo payload option the value of the Payload Length field in the IPv6 header is zero and so will be the value reported by this Information Element.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload option.
The set of Information Elements related to transport header fields and length includes the Information Elements listed in the table below.
The source port identifier in the transport header.
For the transport protocols UDP, TCP, and SCTP, this is the source port number given in the respective header.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP source port field.
See RFC 793 for the definition of the TCP source port field.
See RFC 4960 for the definition of SCTP.
Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
The destination port identifier in the transport header.
For the transport protocols UDP, TCP, and SCTP, this is the destination port number given in the respective header.
This field MAY also be used for future transport protocols that have 16 bit destination port identifiers.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP destination port field.
See RFC 793 for the definition of the TCP destination port field.
See RFC 4960 for the definition of SCTP.
Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
The source port identifier in the UDP header.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP source port field.
Additional information on defined UDP port numbers can be found at http://www.iana.org/assignments/port numbers.
The destination port identifier in the UDP header.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 768 for the definition of the UDP destination port field.
Additional information on defined UDP port numbers can be found at http://www.iana.org/assignments/port numbers.
The value of the Length field in the UDP header.
unsigned16 ElementId: 205 Status: current Units:
See RFC 768 for the specification of the UDP header.
The source port identifier in the TCP header.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 793 for the definition of the TCP source port field.
Additional information on defined TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
The destination port identifier in the TCP header.
Abstract Data Type: unsigned16 Data Type Semantics:
183 Status: current Reference: See RFC 793 for the definition of the TCP source port field.
Additional information on defined TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
The sequence number in the TCP header.
184 Status: current Reference: See RFC 793 for the definition of the TCP sequence number.
The acknowledgement number in the TCP header.
185 Status: current Reference: See RFC 793 for the definition of the TCP acknowledgement number.
The window field in the TCP header.
If the TCP window scale is supported, then TCP window scale must be known to fully interpret the value of this information.
See RFC 793 for the definition of the TCP window field.
See RFC 1323 for the definition of the TCP window scale.
: The scale of the window field in the TCP header.
See RFC 1323 for the definition of the TCP window scale.
The urgent pointer in the TCP header.
See RFC 793 for the definition of the TCP urgent pointer.
The length of the TCP header.
Note that the value of this Information Element is different from the value of the Data Offset field in the TCP header.
The Data Offset field indicates the length of the TCP header in units of 4 octets.
This Information Elements specifies the length of the TCP header in units of octets.
unsigned8 ElementId: 188 Status: current Units:
See RFC 793 for the definition of the TCP header.
Type and Code of the IPv4 ICMP message.
The combination of both values is reported as (ICMP type   256)   ICMP code.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 792 for the definition of the IPv4 ICMP type and code fields.
icmpTypeIPv4 Description: Type of the IPv4 ICMP message.
Abstract Data Type: unsigned8 Data Type Semantics:
176 Status: current Reference: See RFC 792 for the definition of the IPv4 ICMP type field.
Code of the IPv4 ICMP message.
Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 792 for the definition of the IPv4 ICMP code field.
Type and Code of the IPv6 ICMP message.
The combination of both values is reported as (ICMP type   256)   ICMP code.
Abstract Data Type: unsigned16 Data Type Semantics:
See RFC 4443 for the definition of the IPv6 ICMP type and code fields.
icmpTypeIPv6 Description: Type of the IPv6 ICMP message.
Abstract Data Type: unsigned8 Data Type Semantics:
178 Status: current Reference: See RFC 4443 for the definition of the IPv6 ICMP type field.
Code of the IPv6 ICMP message.
Abstract Data Type: unsigned8 Data Type Semantics:
179 Status: current Reference: See RFC 4443 for the definition of the IPv6 ICMP code field.
The type field of the IGMP message.
Abstract Data Type: unsigned8 Data Type Semantics:
identifier ElementId: 33 Status: current Reference:
See RFC 3376 for the definition of the IGMP type field.
The set of Information Elements related to Sub IP header fields includes the Information Elements listed in the table below.
Description: The IEEE 802 source MAC address field.
Abstract Data Type: macAddress Data Type Semantics:
current Reference: See IEEE.802 3.2002.
postSourceMacAddress Description: The definition of this Information Element is identical to the definition of Information Element 'sourceMacAddress', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: macAddress Data Type Semantics: identifier ElementId: 81 Status:
current Reference: See IEEE.802 3.2002.
The IEEE 802.1Q VLAN identifier (VID) extracted from the Tag Control Information field that was attached to the IP packet.
Abstract Data Type: unsigned16 Data Type Semantics:
identifier ElementId: 58 Status: current Reference: See IEEE.802 1Q.2003.
postVlanId Description: The definition of this Information Element is identical to the definition of Information Element 'vlanId', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned16 Data Type Semantics:
current Reference: See IEEE.802 1Q.2003.
Description: The IEEE 802 destination MAC address field.
Abstract Data Type: macAddress Data Type Semantics:
current Reference: See IEEE.802 3.2002.
postDestinationMacAddress Description: The definition of this Information Element is identical to the definition of Information Element 'destinationMacAddress', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: macAddress Data Type Semantics:
current Reference: See IEEE.802 3.2002.
The identifier of the 802.11 (Wi Fi) channel used.
Abstract Data Type: unsigned8 Data Type Semantics:
146 Status: current Reference: See IEEE.802 11.1999.
The Service Set IDentifier (SSID) identifying an 802.11 (Wi Fi) network used.
According to IEEE.802 11.1999, the SSID is encoded into a string of up to 32 characters.
current Reference: See IEEE.802 11.1999.
The TTL field from the top MPLS label stack entry, i.e., the last label that was pushed.
unsigned8 ElementId: 200 Status: current Units:
See RFC 3032 for the specification of the TTL field.
mplsTopLabelExp Description: The Exp field from the top MPLS label stack entry, i.e., the last label that was pushed.
Don't Care, value is irrelevant.
Bits 5 7:  MPLS Exp field. 0
flags ElementId: 203 Status: current Reference:
See RFC 3032 for the specification of the Exp field.
See RFC 3270 for usage of the Exp field.
postMplsTopLabelExp Description: The definition of this Information Element is identical to the definition of Information Element 'mplsTopLabelExp', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned8 Data Type Semantics:
237 Status: current Reference: See RFC 3032 for the specification of the Exp field.
See RFC 3270 for usage of the Exp field.
The number of labels in the MPLS label stack.
See RFC 3032 for the specification of the MPLS label stack.
mplsLabelStackLength Description: The length of the MPLS label stack in units of octets.
unsigned32 ElementId: 201 Status: current Units:
See RFC 3032 for the specification of the MPLS label stack.
Description: The size of the MPLS packet without the label stack.
unsigned32 ElementId: 194 Status: current Units:
See RFC 3031 for the specification of MPLS packets.
See RFC 3032 for the specification of the MPLS label stack.
The Label, Exp, and S fields from the top MPLS label stack entry, i.e., from the last label that was pushed.
The size of this Information Element is 3 octets. 0
Abstract Data Type: octetArray Data Type Semantics:
current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsTopLabelStackSection.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection2.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
identifier ElementId: 72 Status: current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection3.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection4.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
74 Status: current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection5.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection6.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
76 Status: current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection7.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
77 Status: current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection8.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
78 Status: current Reference: See RFC 3032.
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection9.
See the definition of mplsTopLabelStackSection for further details.
The size of this Information Element is 3 octets.
Abstract Data Type: octetArray Data Type Semantics:
identifier ElementId: 79 Status: current Reference: See RFC 3032.
The set of Information Elements derived from packet properties (for example, values of header fields) includes the Information Elements listed in the table below.
The effective length of the IP payload.
For IPv4 packets, the value of this Information Element is the difference between the total length of the IPv4 packet (as reported by Information Element totalLengthIPv4) and the length of the IPv4 header (as reported by Information Element headerLengthIPv4).
For IPv6, the value of the Payload Length field in the IPv6 header is reported except in the case that the value of this field is zero and that there is a valid jumbo payload option.
In this case, the value of the Jumbo Payload Length field in the jumbo payload option is reported.
See RFC 791 for the specification of IPv4 packets.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
The IPv4 address of the next IPv4 hop.
Abstract Data Type: ipv4Address Data Type Semantics:
identifier ElementId: 15 Status: current 5.7.3.
ipNextHopIPv6Address Description: The IPv6 address of the next IPv6 hop.
Abstract Data Type: ipv6Address Data Type Semantics:
identifier ElementId: 62 Status: current 5.7.4.
The autonomous system (AS) number of the source IP address.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
Abstract Data Type: unsigned32 Data Type Semantics:
16 Status: current Reference: See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
The autonomous system (AS) number of the destination IP address.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
Abstract Data Type: unsigned32 Data Type Semantics:
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
The autonomous system (AS) number of the first AS in the AS path to the destination IP address.
The path is deduced by looking up the destination IP address of the Flow in the BGP routing information base.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
Abstract Data Type: unsigned32 Data Type Semantics:
identifier ElementId: 128 Status: current Reference: See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
The autonomous system (AS) number of the last AS in the AS path from the source IP address.
The path is deduced by looking up the source IP address of the Flow in the BGP routing information base.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
In case of BGP asymmetry, the bgpPrevAdjacentAsNumber might not be able to report the correct value.
Abstract Data Type: unsigned32 Data Type Semantics:
identifier ElementId: 129 Status: current Reference:
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
The IPv4 address of the next (adjacent) BGP hop.
Abstract Data Type: ipv4Address Data Type Semantics:
See RFC 4271 for a description of BGP 4.
The IPv6 address of the next (adjacent) BGP hop.
Abstract Data Type: ipv6Address Data Type Semantics:
See RFC 4271 for a description of BGP 4.
mplsTopLabelType Description: This field identifies the control protocol that allocated the top of stack label.
Initial values for this field are listed below.
Further values may be assigned by IANA in the MPLS label type registry.
Any TE tunnel mid point or tail label  0x02
Any PWE3 or Cisco AToM
Any label associated with VPN  0x04
Any label associated with BGP or BGP routing  0x05 LDP:
Any label associated with dynamically assigned labels using LDP Abstract Data Type: unsigned8 Data Type Semantics:
See RFC 3031 for the MPLS label structure.
See RFC 4364 for the association of MPLS labels with Virtual Private Networks (VPNs).
See RFC 4271 for BGP and BGP routing.
See RFC 5036 for Label Distribution Protocol (LDP).
See the list of MPLS label types assigned by IANA at http://www.iana.org/assignments/mpls label values.
The IPv4 address of the system that the MPLS top label will cause this Flow to be forwarded to.
Abstract Data Type: ipv4Address Data Type Semantics:
See RFC 3031 for the association between MPLS labels and IP addresses.
The IPv6 address of the system that the MPLS top label will cause this Flow to be forwarded to.
Abstract Data Type: ipv6Address Data Type Semantics:
140 Status: current Reference: See RFC 3031 for the association between MPLS labels and IP addresses.
mplsVpnRouteDistinguisher Description: The value of the VPN route distinguisher of a corresponding entry in a VPN routing and forwarding table.
Route distinguisher ensures that the same address can be used in several different MPLS VPNs and that it is possible for BGP to carry several completely different routes to that address, one for each VPN.
According to RFC 4364, the size of mplsVpnRouteDistinguisher is 8 octets.
However, in RFC 4382 an octet string with flexible length was chosen for representing a VPN route distinguisher by object MplsL3VpnRouteDistinguisher.
This choice was made in order to be open to future changes of the size.
This idea was adopted when choosing octetArray as abstract data type for this Information Element.
The maximum length of this Information Element is 256 octets.
Abstract Data Type: octetArray Data Type Semantics:
See RFC 4364 for the specification of the route distinguisher.
See RFC 4382 for the specification of the MPLS/BGP Layer 3 Virtual Private Network (VPN) Management Information Base.
Min/Max Flow Properties Information Elements in this section are results of minimum or maximum operations over all packets of a Flow.
minimumIpTotalLength Description: Length of the smallest packet observed for this Flow.
The packet length includes the IP header(s) length and the IP payload length.
unsigned64 ElementId: 25 Status: current Units:
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
Length of the largest packet observed for this Flow.
The packet length includes the IP header(s) length and the IP payload length.
unsigned64 ElementId: 26 Status: current Units:
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
Minimum TTL value observed for any packet in this Flow.
unsigned8 ElementId: 52 Status: current Units:
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
Maximum TTL value observed for any packet in this Flow.
unsigned8 ElementId: 53 Status: current Units:
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
ipv4Options Description: IPv4 options in packets of this Flow.
The information is encoded in a set of bit fields.
For each valid IPv4 option type, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding IPv4 option type.
Otherwise, if no observed packet of this Flow contained the respective IPv4 option type, the value of the corresponding bit is 0.
The list of valid IPv4 options is maintained by IANA.
Note that for identifying an option not just the 5 bit Option Number, but all 8 bits of the Option Type need to match one of the IPv4 options specified at http://www.iana.org/assignments/ip parameters.
Options are mapped to bits according to their option numbers.
Option number X is mapped to bit X.
The mapping is illustrated by the figure below.
E SEC   Extended Security, RFC 1108 6   134
MTU Reply, RFC 1191 13   205   FINN
VISA    Experimental Access Control 15    15
Router Alert, RFC 2113 21   149
Further options numbers may be assigned by IANA Abstract Data Type: unsigned32 Data Type Semantics:
See RFC 791 for the definition of IPv4 options.
See the list of IPv4 option numbers assigned by IANA at http://www.iana.org/assignments/ip parameters.
Description: IPv6 extension headers observed in packets of this Flow.
The information is encoded in a set of bit fields.
For each IPv6 option header, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding IPv6 extension header.
Otherwise, if no observed packet of this Flow contained the respective IPv6 extension header, the value of the corresponding bit is 0. 0
See RFC 2460 for the general definition of IPv6 extension headers and for the specification of the hop by hop options header, the routing header, the fragment header, and the destination options header.
See RFC 4302 for the specification of the authentication header.
See RFC 4303 for the specification of the encapsulating security payload.
tcpControlBits Description: TCP control bits observed for packets of this Flow.
The information is encoded in a set of bit fields.
For each TCP control bit, there is a bit in this set.
A bit is set to 1 if any observed packet of this Flow has the corresponding TCP control bit set to 1.
A value of 0 for a bit indicates that the corresponding bit was not set in any of the observed packets of this Flow. 0
Reserved for future use by TCP.
No more data from sender Abstract Data Type: unsigned8 Data Type Semantics:
6 Status: current Reference: See RFC 793 for the definition of the TCP control bits in the TCP header.
TCP options in packets of this Flow.
The information is encoded in a set of bit fields.
For each TCP option, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding TCP option.
Otherwise, if no observed packet of this Flow contained the respective TCP option, the value of the corresponding bit is 0.
Options are mapped to bits according to their option numbers.
Option number X is mapped to bit X.  TCP option numbers are maintained by IANA.
209 Status: current Reference: See RFC 793 for the definition of TCP options.
See the list of TCP option numbers assigned by IANA at http://www.iana.org/assignments/tcp parameters.
Flow Timestamps Information Elements in this section are timestamps of events.
, flowStartNanoseconds, flowEndNanoseconds, and systemInitTimeMilliseconds are absolute and have a well defined fixed time base, such as, for example, the number of seconds since 0000 UTC Jan 1st 1970.
Timestamps flowStartDeltaMicroseconds and flowEndDeltaMicroseconds are relative timestamps only valid within the scope of a single IPFIX Message.
They contain the negative time offsets relative to the export time specified in the IPFIX Message Header.
The maximum time offset that can be encoded by these delta counters is 1 hour, 11 minutes, and 34.967295 seconds.
Timestamps flowStartSysUpTime and flowEndSysUpTime are relative timestamps indicating the time relative to the last (re  )initialization of the IPFIX Device.
For reporting the time of the last (re )initialization, systemInitTimeMilliseconds can be reported, for example, in Data Records defined by Option Templates.
The absolute timestamp of the first packet of this Flow.
150 Status: current Units: seconds 5.9.2.
The absolute timestamp of the last packet of this Flow.
dateTimeSeconds ElementId: 151 Status: current Units: seconds 5.9.3.
The absolute timestamp of the first packet of this Flow.
dateTimeMilliseconds ElementId: 152 Status: current Units: milliseconds 5.9.4.
Description: The absolute timestamp of the last packet of this Flow.
dateTimeMilliseconds ElementId: 153 Status: current Units: milliseconds 5.9.5.
The absolute timestamp of the first packet of this Flow.
dateTimeMicroseconds ElementId: 154 Status: current Units: microseconds 5.9.6.
Description: The absolute timestamp of the last packet of this Flow.
155 Status: current Units: microseconds 5.9.7.
Description: The absolute timestamp of the first packet of this Flow.
dateTimeNanoseconds ElementId: 156 Status: current Units: nanoseconds 5.9.8.
Description: The absolute timestamp of the last packet of this Flow.
dateTimeNanoseconds ElementId: 157 Status: current Units: nanoseconds
: This is a relative timestamp only valid within the scope of a single IPFIX Message.
It contains the negative time offset of the first observed packet of this Flow relative to the export time specified in the IPFIX Message Header.
unsigned32 ElementId: 158 Status: current Units:
See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
Description: This is a relative timestamp only valid within the scope of a single IPFIX Message.
It contains the negative time offset of the last observed packet of this Flow relative to the export time specified in the IPFIX Message Header.
unsigned32 ElementId: 159 Status: current Units:
See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
The absolute timestamp of the last (re )initialization of the IPFIX Device.
dateTimeMilliseconds ElementId: 160 Status: current Units: milliseconds 5.9.12.
The relative timestamp of the first packet of this Flow.
It indicates the number of milliseconds since the last (re )initialization of the IPFIX Device (sysUpTime).
22 Status: current Units: milliseconds 5.9.13.
The relative timestamp of the last packet of this Flow.
It indicates the number of milliseconds since the last (re )initialization of the IPFIX Device (sysUpTime).
unsigned32 ElementId: 21 Status: current Units: milliseconds 5.10.
Per Flow Counters Information Elements in this section
are counters all having integer values.
Their values may change for every report they are used in.
They cannot serve as part of a Flow Key used for mapping packets to Flows.
However, potentially they can be used for selecting exported Flows, for example, by only exporting Flows with more than a threshold number of observed octets.
There are running counters and delta counters.
Delta counters are reset to zero each time their values are exported.
Running counters continue counting independently of the Exporting Process.
There are per Flow counters and counters related to the Metering Process and/or the Exporting Process.
Per Flow counters are Flow properties that potentially change each time a packet belonging to the Flow is observed.
The set of per Flow counters includes the Information Elements listed in the table below.
Counters related to the Metering Process and/or the Exporting Process are described in Section 5.3.
The number of octets since the previous report (if any) in incoming packets for this Flow at the Observation Point.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 1 Status: current Units: octets 5.10.2.
postOctetDeltaCount Description: The definition of this Information Element is identical to the definition of Information Element 'octetDeltaCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 23 Status: current Units: octets 5.10.3.
The sum of the squared numbers of octets per incoming packet since the previous report (if any) for this Flow at the Observation Point.
The number of octets includes IP header(s) and IP payload.
unsigned64 ElementId: 198 Status: current 5.10.4.
The total number of octets in incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 85 Status: current Units: octets 5.10.5.
postOctetTotalCount Description: The definition of this Information Element is identical to the definition of Information Element 'octetTotalCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 171 Status: current Units: octets 5.10.6.
The total sum of the squared numbers of octets in incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
unsigned64 ElementId: 199 Status: current Units: octets 5.10.7.
The number of incoming packets since the previous report (if any) for this Flow at the Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 2 Status: current Units: packets 5.10.8.
: The definition of this Information Element is identical to the definition of Information Element 'packetDeltaCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 24 Status: current Units: packets 5.10.9.
The total number of incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 86 Status: current Units: packets 5.10.10.
: The definition of this Information Element is identical to the definition of Information Element 'packetTotalCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
172 Status: current Units: packets 5.10.11.
The number of octets since the previous report (if any) in packets of this Flow dropped by packet treatment.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
132 Status: current Units: octets 5.10.12.
The number of packets since the previous report (if any) of this Flow dropped by packet treatment.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 133 Status: current Units: packets 5.10.13.
The total number of octets in packets of this Flow dropped by packet treatment since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 134 Status: current Units: octets 5.10.14.
The number of packets of this Flow dropped by packet treatment since the Metering Process (re )initialization for this Observation Point.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 135 Status: current Units:
The number of outgoing multicast packets since the previous report (if any) sent for packets of this Flow by a multicast daemon within the Observation Domain.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 19 Status: current Units:
The number of octets since the previous report (if any) in outgoing multicast packets sent for packets of this Flow by a multicast daemon within the Observation Domain.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
deltaCounter ElementId: 20 Status: current Units: octets 5.10.17.
The total number of outgoing multicast packets sent for packets of this Flow by a multicast daemon within the Observation Domain since the Metering Process (re )initialization.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 174 Status: current Units: packets 5.10.18.
The total number of octets in outgoing multicast packets sent for packets of this Flow by a multicast daemon in the Observation Domain since the Metering Process (re )initialization.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
The number of octets includes IP header(s) and IP payload.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 175 Status: current Units: octets 5.10.19.
The total number of packets of this Flow with TCP "Synchronize sequence numbers" (SYN) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 218 Status: current Units:
See RFC 793 for the definition of the TCP SYN flag.
The total number of packets of this Flow with TCP "No more data from sender" (FIN) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 219 Status: current Units:
See RFC 793 for the definition of the TCP FIN flag.
The total number of packets of this Flow with TCP "Reset the connection" (RST) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 220 Status: current Units:
See RFC 793 for the definition of the TCP RST flag.
The total number of packets of this Flow with TCP "Push Function" (PSH) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 221 Status: current Units:
See RFC 793 for the definition of the TCP PSH flag.
The total number of packets of this Flow with TCP "Acknowledgment field significant" (ACK) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
See RFC 793 for the definition of the TCP ACK flag.
The total number of packets of this Flow with TCP "Urgent Pointer field significant" (URG) flag set.
Abstract Data Type: unsigned64 Data Type Semantics:
totalCounter ElementId: 223 Status: current Units:
See RFC 793 for the definition of the TCP URG flag.
Miscellaneous Flow Properties Information Elements in this section describe properties of Flows that are related to Flow start, Flow duration, and Flow termination, but they are not timestamps as the Information Elements in Section 5.9 are.
The number of seconds after which an active Flow is timed out anyway, even if there is still a continuous flow of packets.
36 Status: current Units: seconds 5.11.2.
Description: A Flow is considered to be timed out if no packets belonging to the Flow have been observed for the number of seconds specified by this field.
unsigned16 ElementId: 37 Status: current Units: seconds 5.11.3.
The reason for Flow termination.
The range of values includes the following:
The Flow was terminated because it was considered to be idle.
The Flow was terminated for reporting purposes while it was still active, for example, after the maximum lifetime of unreported Flows was reached.
end of Flow detected The Flow was terminated because the Metering Process detected signals indicating the end of the Flow, for example, the TCP FIN flag.
The Flow was terminated because of some external event, for example, a shutdown of the Metering Process initiated by a network management application.
The Flow was terminated because of lack of resources available to the Metering Process and/or the Exporting Process.
Abstract Data Type: unsigned8 Data Type Semantics:
identifier ElementId: 136 Status: current 5.11.4.
The difference in time between the first observed packet of this Flow and the last observed packet of this Flow.
unsigned32 ElementId: 161 Status: current Units:
The difference in time between the first observed packet of this Flow and the last observed packet of this Flow.
162 Status: current Units: microseconds 5.11.6.
flowDirection Description: The direction of the Flow observed at the Observation Point.
There are only two values defined.
egress flow Abstract Data Type: unsigned8 Data Type Semantics:
identifier ElementId: 61 Status: current 5.12.
This section contains a single Information Element that can be used for padding of Flow Records.
IPFIX implementations may wish to align Information Elements within Data Records or to align entire Data Records to 4 octet or 8 octet boundaries.
This can be achieved by including one or more paddingOctets Information Elements in a Data Record.
: The value of this Information Element is always a sequence of 0x00 values.
Abstract Data Type: octetArray ElementId: 210 Status:
A key requirement for IPFIX is to allow for extending the set of Information Elements that are reported.
This section defines the mechanism for extending this set.
Extension can be done by defining new Information Elements.
Each new Information Element MUST be assigned a unique Information Element identifier as part of its definition.
These unique Information Element identifiers are the connection between the record structure communicated by the protocol using Templates and a consuming application.
For generally applicable Information Elements, using IETF and IANA mechanisms to extend the information model is RECOMMENDED.
Names of new Information Elements SHOULD be chosen according to the naming conventions given in Section 2.3.
For extensions, the type space defined in Section 3 can be used.
If required, new abstract data types can be added.
New abstract data types MUST be defined in IETF Standards Track documents.
Enterprises may wish to define Information Elements without registering them with IANA.
IPFIX explicitly supports enterprise specific Information Elements.
Enterprise specific Information Elements are described in Sections 2.1 and 4.
However, before creating enterprise specific Information Elements, the general applicability of such Information Elements should be considered.
IPFIX does not support enterprise specific abstract data types.
This document specifies an initial set of IPFIX Information Elements.
The list of these Information Elements with their identifiers is given in Section 4.
The Internet Assigned Numbers Authority (IANA) has created a new registry for IPFIX Information Element identifiers and filled it with the initial list in Section 4.
New assignments for IPFIX Information Elements will be administered by IANA through Expert Review [RFC2434], i.e., review by one of a group of experts designated by an IETF Area Director.
The group of experts MUST check the requested Information Element for completeness and accuracy of the description and for correct naming according to the naming conventions in Section 2.3.
Requests for Information Elements that duplicate the functionality of existing Information Elements SHOULD be declined.
The smallest available identifier SHOULD be assigned to a new Information Element.
The specification of new IPFIX Information Elements MUST use the template specified in Section 2.1 and MUST be published using a well established and persistent publication medium.
The experts will initially be drawn from the Working Group Chairs and document editors of the IPFIX and PSAMP Working Groups.
Label Type Identifier Information Element #46, named mplsTopLabelType, carries MPLS label types.
Values for 5 different types have initially been defined.
For ensuring extensibility of this information, IANA has created a new registry for MPLS label types and filled it with the initial list from the description Information Element #46, mplsTopLabelType.
New assignments for MPLS label types will be administered by IANA through Expert Review [RFC2434], i.e., review by one of a group of experts designated by an IETF Area Director.
The group of experts must double check the label type definitions with already defined label types for completeness, accuracy, and redundancy.
The specification of new MPLS label types MUST be published using a well established and persistent publication medium.
XML Namespace and Schema Appendix B defines an XML schema for IPFIX Information Element definitions.
All Information Elements specified in this document are defined by the XML specification in Appendix A that is a valid XML record according to the schema in Appendix B.
This schema may also be used for specifying further Information Elements in future extensions of the IPFIX information model in a machine readable way.
Appendix B uses URNs to describe an XML namespace and an XML schema for IPFIX Information Elements conforming to a registry mechanism described in [RFC3688].
Two URI assignments have been made.
Registration for the IPFIX information model
<ipfix@ietf.org>, as designated by the IESG <iesg@ietf.org
Namespace URIs do not represent an XML.
Registration for the IPFIX information model schema
ipfix info 15    Registrant Contact
: IETF IPFIX Working Group
<ipfix@ietf.org>, as designated by the IESG <iesg@ietf.org
: See Appendix B of this document.
The IPFIX information model itself does not directly introduce security issues.
Rather, it defines a set of attributes that may for privacy or business issues be considered sensitive information.
For example, exporting values of header fields may make attacks possible for the receiver of this information, which would otherwise only be possible for direct observers of the reported Flows along the data path.
The underlying protocol used to exchange the information described here must therefore apply appropriate procedures to guarantee the integrity and confidentiality of the exported information.
Such protocols are defined in separate documents, specifically the IPFIX protocol document [RFC5101].
This document does not specify any Information Element carrying keying material.
If future extensions will do so, then appropriate precautions need to be taken for properly protecting such sensitive information.
Appendix A.  XML Specification of IPFIX Information Elements
This appendix contains a machine readable description of the IPFIX information model coded in XML.
Note that this appendix is of informational nature, while the text in Section 4 (generated from this appendix) is normative.
Using a machine readable syntax for the information model enables the creation of IPFIX aware tools that can automatically adapt to extensions to the information model, by simply reading updated information model specifications.
The wide availability of XML aware tools and libraries for client devices is a primary consideration for this choice.
In particular, libraries for parsing XML documents are readily available.
Also, mechanisms such as the Extensible Stylesheet Language (XSL) allow for transforming a source XML document into other documents.
This document was authored in XML and transformed according to [RFC2629].
It should be noted that the use of XML in Exporters, Collectors, or other tools is not mandatory for the deployment of IPFIX.
In particular, Exporting Processes do not produce or consume XML as part of their operation.
It is expected that IPFIX Collectors MAY take advantage of the machine readability of the information model vs. hard coding their behavior or inventing proprietary means for accommodating extensions.
xml version "1.0" encoding "UTF 8"?
"urn:ietf:params:xml:ns:ipfix info" xmlns:xsi "http://www.w3.org/2001/XMLSchema instance"
info.xsd"> <field name "lineCardId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "141" applicability "option" status "current"> <description
An identifier of a line card that is unique per IPFIX Device hosting an Observation Point.
Typically, this Information Element is used for limiting the scope of other Information Elements.
<field name "portId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "142" applicability "option" status "current"> <description> <
An identifier of a line port that is unique per IPFIX Device hosting an Observation Point.
Typically, this Information Element is used for limiting the scope of other Information Elements.
> </field> <field name "ingressInterface" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "10" applicability "all" status "current"
The index of the IP interface where packets of this Flow are being received.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
> See RFC 2863 for the definition of the ifIndex object.
> </field> <field name "egressInterface" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "14" applicability "all" status "current"> <description> <paragraph
The index of the IP interface where packets of this Flow are being sent.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
> See RFC 2863 for the definition of the ifIndex object.
> </field> <field name "meteringProcessId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "143" applicability "option" status "current"> <description> <paragraph
An identifier of a Metering Process that is unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that process identifiers are typically assigned dynamically.
The Metering Process may be re started with a different ID.
/field> <field name "exportingProcessId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "144" applicability "option" status "current"> <description> <paragraph
An identifier of an Exporting Process that is unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that process identifiers are typically assigned dynamically.
The Exporting Process may be re started with a different ID.
> </field> <field name "flowId" dataType "unsigned64" group "scope" dataTypeSemantics "identifier" elementId "148" applicability "option" status "current"
An identifier of a Flow that is unique within an Observation Domain.
This Information Element can be used to distinguish between different Flows if Flow Keys such as IP addresses and port numbers are not reported or are reported in separate records.
/field> <field name "templateId" dataType "unsigned16" group "scope" dataTypeSemantics "identifier" elementId "145" applicability "option" status "current"> <description> <
An identifier of a Template that is locally unique within a combination of a Transport session and an Observation Domain.
> <paragraph> Template IDs 0 255 are reserved for Template Sets, Options Template Sets, and other reserved Sets yet to be created.
Template IDs of Data Sets are numbered from 256 to 65535.
Typically, this Information Element is used for limiting the scope of other Information Elements.
Note that after a re start of the Exporting Process Template identifiers may be re assigned.
> <field name "observationDomainId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "149" applicability "option" status "current"> <description> <paragraph
An identifier of an Observation Domain that is locally unique to an Exporting Process.
The Exporting Process uses the Observation Domain ID to uniquely identify to the Collecting Process the Observation Domain where Flows were metered.
It is RECOMMENDED that this identifier is also unique per IPFIX Device.
> A value of 0 indicates that no specific Observation Domain is identified by this Information Element.
Typically, this Information Element is used for limiting the scope of other Information Elements.
/field> <field name "observationPointId" dataType "unsigned32" group "scope" dataTypeSemantics "identifier" elementId "138" applicability "option" status "current"> <description> <paragraph
An identifier of an Observation Point that is unique per Observation Domain.
It is RECOMMENDED that this identifier is also unique per IPFIX Device.
Typically, this Information Element is used for limiting the scope of other Information Elements.
> </field> <field name "commonPropertiesId" dataType "unsigned64" group "scope" dataTypeSemantics
"identifier" elementId "137" applicability "option" status "current"> <description> <paragraph
An identifier of a set of common properties that is unique per Observation Domain and Transport Session.
Typically, this Information Element is used to link to information reported in separate Data Records.
> </field> <field name "
exporterIPv4Address" dataType "ipv4Address" dataTypeSemantics "identifier" group "config" elementId "130" applicability "all" status "current"> <description
The IPv4 address used by the Exporting Process.
This is used by the Collector to identify the Exporter in cases where the identity of the Exporter may have been obscured by the use of a proxy.
> </field> <field name "exporterIPv6Address" dataType "ipv6Address" dataTypeSemantics "identifier" group "config" elementId "131" applicability "all" status "current"> <description> <
The IPv6 address used by the Exporting Process.
This is used by the Collector to identify the Exporter in cases where the identity of the Exporter may have been obscured by the use of a proxy.
> </field> <field name "exporterTransportPort" dataType "unsigned16" group "config" dataTypeSemantics "identifier" elementId "217" applicability "all" status "current"> <description
The source port identifier from which the Exporting Process sends Flow information.
For the transport protocols UDP, TCP, and SCTP, this is the source port number.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
This field may be useful for distinguishing multiple Exporting Processes that use the same IP address.
RFC 768 for the definition of the UDP source port field.
See RFC 793 for the definition of the TCP source port field.
See RFC 4960 for the definition of SCTP.
> <paragraph> Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </field> <field name "collectorIPv4Address" dataType "ipv4Address" dataTypeSemantics "identifier" group "config" elementId "211" applicability "all" status "current"> <description
<paragraph> An IPv4 address to which the Exporting Process sends Flow information.
> </field> <field name "
collectorIPv6Address" dataType "ipv6Address" dataTypeSemantics "identifier" group "config" elementId "212" applicability "all" status "current"> <description>
An IPv6 address to which the Exporting Process sends Flow information.
<field name "exportInterface" dataType "unsigned32" group "config" dataTypeSemantics "identifier" elementId "213" applicability "all" status "current"> <description> <paragraph>
The index of the interface from which IPFIX Messages sent by the Exporting Process to a Collector leave the IPFIX Device.
The value matches the value of managed object 'ifIndex' as defined in RFC 2863.
Note that ifIndex values are not assigned statically to an interface and that the interfaces may be renumbered every time the device's management system is re initialized, as specified in RFC 2863.
> See RFC 2863 for the definition of the ifIndex object.
> </field> <field name "exportProtocolVersion" dataType "unsigned8" dataTypeSemantics "identifier" group "config" elementId "214" applicability "all" status "current"> <description> <paragraph
The protocol version used by the Exporting Process for sending Flow information.
The protocol version is given by the value of the Version Number field in the Message Header.
The protocol version is 10 for IPFIX and 9 for NetFlow version 9.
A value of 0 indicates that no export protocol is in use.
See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
See RFC 3954 for the definition of the NetFlow version 9 message header.
> </reference> </field> <field name "exportTransportProtocol" dataType "unsigned8" group "config" dataTypeSemantics "identifier" elementId "215" applicability "all" status "current"
The value of the protocol number used by the Exporting Process for sending Flow information.
The protocol number identifies the IP packet payload type.
Protocol numbers are defined in the IANA Protocol Numbers registry.
In Internet Protocol version 4 (IPv4), this is carried in the Protocol field.
In Internet Protocol version 6 (IPv6), this is carried in the Next Header field in the last extension header of the packet.
See RFC 791 for the specification of the IPv4 protocol field.
See RFC 2460 for the specification of the IPv6 protocol field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
> </reference> </field> <field name "collectorTransportPort" dataType "unsigned16" group "config" dataTypeSemantics "identifier" elementId "216" applicability "all" status "current"> <description
The destination port identifier to which the Exporting Process sends Flow information.
For the transport protocols UDP, TCP, and SCTP, this is the destination port number.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
RFC 768 for the definition of the UDP destination port field.
See RFC 793 for the definition of the TCP destination port field.
See RFC 4960 for the definition of SCTP.
> <paragraph> Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "flowKeyIndicator
" dataType "unsigned64" dataTypeSemantics "flags" group "config" elementId "173" applicability "all" status "current"> <description
This set of bit fields is used for marking the Information Elements of a Data Record that serve as Flow Key.
Each bit represents an Information Element in the Data Record with the n th bit representing the n th Information Element.
A bit set to value 1 indicates that the corresponding Information Element is a Flow Key of the reported Flow.
A bit set to value 0 indicates that this is not the case.
If the Data Record contains more than 64 Information Elements, the corresponding Template SHOULD be designed such that all Flow Keys are among the first 64 Information Elements, because the flowKeyIndicator only contains 64 bits.
If the Data Record contains less than 64 Information Elements, then the bits in the flowKeyIndicator for which no corresponding Information Element exists MUST have the value 0.
> </field> <field name "exportedMessageTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "41" applicability "data" status "current"> <description
The total number of IPFIX Messages that the Exporting Process has sent since the Exporting Process (re )initialization to a particular Collecting Process.
The reported number excludes the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of IPFIX Messages sent to this Collecting Process.
> </field> <field name "exportedOctetTotalCount"
dataType "unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "40" applicability "data" status "current"> <description
The total number of octets that the Exporting Process has sent since the Exporting Process (re )initialization to a particular Collecting Process.
The value of this Information Element is calculated by summing up the IPFIX Message Header length values of all IPFIX Messages that were successfully sent to the Collecting Process.
The reported number excludes octets in the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of octets sent to this Collecting Process.
> <field name "exportedFlowRecordTotalCount" dataType "unsigned64" group "processCounter" dataTypeSemantics "totalCounter" elementId "42" applicability "data" status "current"
The total number of Flow Records that the Exporting Process has sent as Data Records since the Exporting Process (re )initialization to a particular Collecting Process.
The reported number excludes Flow Records in the IPFIX Message that carries the counter value.
If this Information Element is sent to a particular Collecting Process, then by default it specifies the number of Flow Records sent to this process.
"unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "163" applicability "data" status "current"> <description> <paragraph
The total number of Flows observed in the Observation Domain since the Metering Process (re )initialization for this Observation Point.
<field name "ignoredPacketTotalCount" dataType "unsigned64
" dataTypeSemantics "totalCounter" group "processCounter" elementId "164" applicability "data" status "current"> <description> <paragraph
The total number of observed IP packets that the Metering Process did not process since the (re )initialization of the Metering Process.
/field> <field name "ignoredOctetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "165" applicability "data" status "current"> <description
The total number of octets in observed IP packets (including the IP header) that the Metering Process did not process since the (re )initialization of the Metering Process.
"unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "166" applicability "data" status "current"> <description> <paragraph
The total number of Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
<field name "notSentPacketTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "167" applicability "data" status "current"> <description> <
The total number of packets in Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
> </field> <field name "notSentOctetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "processCounter" elementId "168" applicability "data" status "current"
The total number of octets in packets in Flow Records that were generated by the Metering Process and dropped by the Metering Process or by the Exporting Process instead of being sent to the Collecting Process.
There are several potential reasons for this including resource shortage and special Flow export policies.
<field name "ipVersion" dataType "unsigned8" group "ipHeader"
dataTypeSemantics "identifier" elementId "60" applicability "all" status "current"> <description
The IP version field in the IP packet header.
See RFC 791 for the definition of the version field in the IPv4 packet header.
See RFC 2460 for the definition of the version field in the IPv6 packet header.
Additional information on defined version numbers can be found at http://www.iana.org/assignments/version numbers.
> </reference> </field> <field name "sourceIPv4Address" dataType "ipv4Address" group "ipHeader" dataTypeSemantics "identifier" elementId "8" applicability "all" status "current"> <description
> The IPv4 source address in the IP packet header.
See RFC 791 for the definition of the IPv4 source address field.
> </field> <field name "sourceIPv6Address" dataType "ipv6Address" group "ipHeader" dataTypeSemantics "identifier" elementId "27" applicability "all" status "current"> <description
The IPv6 source address in the IP packet header.
See RFC 2460 for the definition of the Source Address field in the IPv6 header.
<field name "sourceIPv4PrefixLength" dataType "unsigned8" group "ipHeader" elementId
"9" applicability "option" status "current"> <description> <
The number of contiguous bits that are relevant in the sourceIPv4Prefix Information Element.
> </description> <units>bits</units> <range>0 32</range
" dataType "unsigned8" group "ipHeader" elementId "29" applicability "option" status "current"
The number of contiguous bits that are relevant in the sourceIPv6Prefix Information Element.
> </description> <units>bits</units> <range>0 128</range> </field> <field name "sourceIPv4Prefix" dataType "ipv4Address" group "ipHeader" elementId "44" applicability "data" status "current"> <description> <paragraph> IPv4 source address prefix.
> </field> <field name "sourceIPv6Prefix" dataType "ipv6Address" group "ipHeader" elementId "170" applicability "data" status "current"> <description> <paragraph> IPv6 source address prefix.
> </field> <field name "destinationIPv4Address" dataType "ipv4Address" group "ipHeader" dataTypeSemantics "identifier" elementId "12" applicability "all" status "current"> <description> <
The IPv4 destination address in the IP packet header.
See RFC 791 for the definition of the IPv4 destination address field.
> </field> <field name "destinationIPv6Address" dataType "ipv6Address" group "ipHeader" dataTypeSemantics "identifier" elementId "28" applicability "all" status "current"> <description
The IPv6 destination address in the IP packet header.
See RFC 2460 for the definition of the Destination Address field in the IPv6 header.
<field name "destinationIPv4PrefixLength" dataType "unsigned8" group "ipHeader" elementId
"13" applicability "option" status "current"> <description> <
The number of contiguous bits that are relevant in the destinationIPv4Prefix Information Element.
> </description> <units>bits</units> <range>0 32</range
<field name "destinationIPv6PrefixLength" dataType "unsigned8" group "ipHeader" elementId
"30" applicability "option" status "current"> <description> <paragraph
The number of contiguous bits that are relevant in the destinationIPv6Prefix Information Element.
> </description> <units>bits</units> <range>0 128</range> </field> <field name "destinationIPv4Prefix" dataType "ipv4Address" group "ipHeader" elementId "45" applicability "data" status "current"> <description> <paragraph> IPv4 destination address prefix.
> </field> <field name "destinationIPv6Prefix" dataType "ipv6Address" group "ipHeader" elementId "169" applicability "data" status "current"> <description> <paragraph> IPv6 destination address prefix.
> </field> <field name "ipTTL
" dataType "unsigned8" group "ipHeader" elementId "192" applicability "all" status "current"> <description
For IPv4, the value of the Information Element matches the value of the Time to Live (TTL) field in the IPv4 packet header.
For IPv6, the value of the Information Element matches the value of the Hop Limit field in the IPv6 packet header.
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
> </field> <field name "protocolIdentifier" dataType "unsigned8" group "ipHeader" dataTypeSemantics "identifier" elementId "4" applicability "all" status "current"> <description
The value of the protocol number in the IP packet header.
The protocol number identifies the IP packet payload type.
Protocol numbers are defined in the IANA Protocol Numbers registry.
In Internet Protocol version 4 (IPv4), this is carried in the Protocol field.
In Internet Protocol version 6 (IPv6), this is carried in the Next Header field in the last extension header of the packet.
See RFC 791 for the specification of the IPv4 protocol field.
See RFC 2460 for the specification of the IPv6 protocol field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
> </reference> </field> <field name "nextHeaderIPv6" dataType "unsigned8" group "ipHeader" elementId "193" applicability "all" status "current"> <description
The value of the Next Header field of the IPv6 header.
The value identifies the type of the following IPv6 extension header or of the following IP payload.
Valid values are defined in the IANA Protocol Numbers registry.
See RFC 2460 for the definition of the IPv6 Next Header field.
See the list of protocol numbers assigned by IANA at http://www.iana.org/assignments/protocol numbers.
> </reference> </field> <field name "ipDiffServCodePoint" dataType "unsigned8" group "ipHeader" dataTypeSemantics "identifier" elementId "195" applicability "all" status
The value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services field.
The Differentiated Services field spans the most significant 6 bits of the IPv4 TOS field or the IPv6 Traffic Class field, respectively.
This Information Element encodes only the 6 bits of the Differentiated Services field.
Therefore, its value may range from 0 to 63.
See RFC 3260 for the definition of the Differentiated Services field.
See RFC 1812 (Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
<field name "ipPrecedence" dataType "unsigned8" group "ipHeader" dataTypeSemantics "identifier" elementId "196" applicability "all" status "current"
The value of the IP Precedence.
The IP Precedence value is encoded in the first 3 bits of the IPv4 TOS field or the IPv6 Traffic Class field, respectively.
This Information Element encodes only these 3 bits.
Therefore, its value may range from 0 to 7.
See RFC 1812 (Section 5.3.3) and RFC 791 for the definition of the IP Precedence.
See RFC 1812 (Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
> </field> <field name "ipClassOfService" dataType "unsigned8" group "ipHeader" dataTypeSemantics "identifier" elementId "5" applicability "all" status "current"> <description
For IPv4 packets, this is the value of the TOS field in the IPv4 packet header.
For IPv6 packets, this is the value of the Traffic Class field in the IPv6 packet header.
(Section 5.3.2) and RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
> </reference> </field> <field name "
postIpClassOfService" dataType "unsigned8" group "ipHeader" dataTypeSemantics "identifier" elementId "55" applicability "all" status "current"> <description> <paragraph>
The definition of this Information Element is identical to the definition of Information Element 'ipClassOfService', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
See RFC 791 for the definition of the IPv4 TOS field.
See RFC 2460 for the definition of the IPv6 Traffic Class field.
See RFC 3234 for the definition of middleboxes.
> </reference> </field> <field name "flowLabelIPv6" dataType "unsigned32" group "ipHeader" dataTypeSemantics "identifier" elementId "31" applicability "all" status "current"> <description
The value of the IPv6 Flow Label field in the IP packet header.
See RFC 2460 for the definition of the Flow Label field in the IPv6 packet header.
> </field> <field name "isMulticast" dataType "unsigned8" group "ipHeader" dataTypeSemantics "flags" elementId "206" applicability "data" status "current"> <description> <paragraph
If the IP destination address is not a reserved multicast address, then the value of all bits of the octet (including the reserved ones) is zero.
The first bit of this octet is set to 1 if the Version field of the IP header has the value 4 and if the Destination Address field contains a reserved multicast address in the range from 224.0.0.0 to 239.255.255.255.
Otherwise, this bit is set to 0.
The second and third bits of this octet are reserved for future use.
> The remaining bits of the octet are only set to values other than zero if the IP Destination Address is a reserved IPv6 multicast address.
Then the fourth bit of the octet is set to the value of the T flag in the IPv6 multicast address and
the remaining four bits are set to the value of the scope field in the IPv6 multicast address.
set to 1 if IPv4 multicast Bits 1 2:
See RFC 1112 for the specification of reserved IPv4 multicast addresses.
See RFC 4291 for the specification of reserved IPv6 multicast addresses and the definition of the T flag and the IPv6 multicast scope.
> </field> <field name "fragmentIdentification" dataType "unsigned32" group "ipHeader" dataTypeSemantics "identifier" elementId "54" applicability "data" status "current"> <description> <paragraph
The value of the Identification field in the IPv4 packet header or in the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
See RFC 791 for the definition of the IPv4 Identification field.
See RFC 2460 for the definition of the Identification field in the IPv6 Fragment header.
> </field> <field name "fragmentOffset" dataType "unsigned16" group "ipHeader" dataTypeSemantics "identifier" elementId "88" applicability "all" status "current"> <description> <paragraph
The value of the IP fragment offset field in the IPv4 packet header or the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
See RFC 791 for the specification of the fragment offset in the IPv4 header.
See RFC 2460 for the specification of the fragment offset in the IPv6 Fragment header.
> </reference> </field> <field name "fragmentFlags" dataType "unsigned8" group "ipHeader"
dataTypeSemantics "flags" elementId "197" applicability "all" status "current"
> <description> <paragraph> Fragmentation properties indicated by flags in the IPv4 packet header or the IPv6 Fragment header, respectively.
The value of this bit MUST be 0 until specified otherwise.
Corresponds to the value of the DF flag in the IPv4 header.
Will always be 0 for IPv6 unless a "don't fragment" feature is introduced to IPv6.
Last Fragment, 1   More Fragments.
Corresponds to the MF flag in the IPv4 header or to the M flag in the IPv6 Fragment header, respectively.
The value is 0 for IPv6 if there is no fragment header.
The values of these bits are irrelevant.
See RFC 791 for the specification of the IPv4 fragment flags.
See RFC 2460 for the specification of the IPv6 Fragment header.
<field name "ipHeaderLength" dataType "unsigned8" group "ipHeader" elementId "189" applicability "all" status "current"> <description> <paragraph>
The length of the IP header.
For IPv6, the value of this Information Element is 40.
See RFC 791 for the specification of the IPv4 header.
See RFC 2460 for the specification of the IPv6 header.
> <field name "ipv4IHL" dataType "unsigned8" group "ipHeader" elementId "207" applicability "
all" status "current"> <description> <
The value of the Internet Header Length (IHL) field in the IPv4 header.
It specifies the length of the header in units of 4 octets.
Please note that its unit is different from most of the other Information Elements reporting length values.
See RFC 791 for the specification of the IPv4 header.
/field> <field name "totalLengthIPv4" dataType "unsigned16" group "ipHeader" elementId "190" applicability "all" status "current"> <description
The total length of the IPv4 packet.
See RFC 791 for the specification of the IPv4 total length.
<field name "ipTotalLength" dataType "unsigned64" group "ipHeader" elementId "224" applicability "all" status "current"
The total length of the IP packet.
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
> <field name "payloadLengthIPv6" dataType "unsigned16" group "ipHeader" elementId "191" applicability "all" status "current"
This Information Element reports the value of the Payload Length field in the IPv6 header.
Note that IPv6 extension headers belong to the payload.
Also note that in case of a jumbo payload option the value of the Payload Length field in the IPv6 header is zero and so will be the value reported by this Information Element.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload option.
dataTypeSemantics "identifier" elementId "7" applicability "all" status "current"
The source port identifier in the transport header.
For the transport protocols UDP, TCP, and SCTP, this is the source port number given in the respective header.
This field MAY also be used for future transport protocols that have 16 bit source port identifiers.
RFC 768 for the definition of the UDP source port field.
See RFC 793 for the definition of the TCP source port field.
See RFC 4960 for the definition of SCTP.
> <paragraph> Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "destinationTransportPort" dataType "unsigned16" group "transportHeader"
dataTypeSemantics "identifier" elementId "11" applicability "all" status "current"
The destination port identifier in the transport header.
For the transport protocols UDP, TCP, and SCTP, this is the destination port number given in the respective header.
This field MAY also be used for future transport protocols that have 16 bit destination port identifiers.
RFC 768 for the definition of the UDP destination port field.
See RFC 793 for the definition of the TCP destination port field.
See RFC 4960 for the definition of SCTP.
> <paragraph> Additional information on defined UDP and TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "udpSourcePort" dataType "unsigned16" group "transportHeader" dataTypeSemantics "identifier" elementId "180" applicability "all" status "current"
The source port identifier in the UDP header.
RFC 768 for the definition of the UDP source port field.
Additional information on defined UDP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "udpDestinationPort" dataType "unsigned16" group "transportHeader" dataTypeSemantics "identifier" elementId "181" applicability "all" status "current"> <description
The destination port identifier in the UDP header.
RFC 768 for the definition of the UDP destination port field.
Additional information on defined UDP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "
dataType "unsigned16" group "transportHeader" elementId "205" applicability "all" status "current"> <description
The value of the Length field in the UDP header.
RFC 768 for the specification of the UDP header.
> <field name "tcpSourcePort" dataType "unsigned16" group "transportHeader"
dataTypeSemantics "identifier" elementId "182" applicability "all" status "current"
The source port identifier in the TCP header.
See RFC 793 for the definition of the TCP source port field.
Additional information on defined TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "tcpDestinationPort
" dataType "unsigned16" group "transportHeader" dataTypeSemantics "identifier" elementId "183" applicability "all" status "current"> <description
The destination port identifier in the TCP header.
See RFC 793 for the definition of the TCP source port field.
Additional information on defined TCP port numbers can be found at http://www.iana.org/assignments/port numbers.
> </reference> </field> <field name "tcpSequenceNumber" dataType "unsigned32" group "transportHeader" elementId "184" applicability "all" status "current"> <description
The sequence number in the TCP header.
See RFC 793 for the definition of the TCP sequence number.
> </reference> </field> <field name "tcpAcknowledgementNumber" dataType "unsigned32" group "transportHeader" elementId "185" applicability "all" status "current"> <description
The acknowledgement number in the TCP header.
See RFC 793 for the definition of the TCP acknowledgement number.
> </reference> </field> <field name "tcpWindowSize
" dataType "unsigned16" group "transportHeader" elementId "186" applicability "all" status "current"
The window field in the TCP header.
If the TCP window scale is supported, then TCP window scale must be known to fully interpret the value of this information.
See RFC 793 for the definition of the TCP window field.
See RFC 1323 for the definition of the TCP window scale.
> </field> <field name "tcpWindowScale" dataType "unsigned16" group "transportHeader" elementId "238" applicability "all" status "current"> <description> <
The scale of the window field in the TCP header.
See RFC 1323 for the definition of the TCP window scale.
> </reference> </field> <field name "tcpUrgentPointer" dataType "unsigned16" group "transportHeader" elementId "187" applicability "all" status "current"> <description
The urgent pointer in the TCP header.
See RFC 793 for the definition of the TCP urgent pointer.
> </reference> </field> <field name "
tcpHeaderLength" dataType "unsigned8" group "transportHeader" elementId "188" applicability "all" status "current"
The length of the TCP header.
Note that the value of this Information Element is different from the value of the Data Offset field in the TCP header.
The Data Offset field indicates the length of the TCP header in units of 4 octets.
This Information Elements specifies the length of the TCP header in units of octets.
See RFC 793 for the definition of the TCP header.
> <field name "icmpTypeCodeIPv4" dataType "unsigned16" group "transportHeader"
dataTypeSemantics "identifier" elementId "32" applicability "all" status "current"
> <description> <paragraph> Type and Code of the IPv4 ICMP message.
The combination of both values is reported as (ICMP type   256)   ICMP code.
See RFC 792 for the definition of the IPv4 ICMP type and code fields.
> </reference> </field> <field name "icmpTypeIPv4" dataType "unsigned8" group "transportHeader" dataTypeSemantics "identifier" elementId "176" applicability "all" status "current"> <description> <paragraph
> Type of the IPv4 ICMP message.
See RFC 792 for the definition of the IPv4 ICMP type field.
> </reference> </field> <field name "icmpCodeIPv4" dataType "unsigned8" group "transportHeader" dataTypeSemantics "identifier" elementId "177" applicability "all" status "current"> <description
> <paragraph> Code of the IPv4 ICMP message.
See RFC 792 for the definition of the IPv4 ICMP code field.
> </reference> </field> <field name "icmpTypeCodeIPv6" dataType "unsigned16" group "transportHeader" dataTypeSemantics "identifier" elementId "139" applicability "all" status "current"> <description> <paragraph> Type and Code of the IPv6 ICMP message.
The combination of both values is reported as (ICMP type   256)   ICMP code.
See RFC 4443 for the definition of the IPv6 ICMP type and code fields.
> </reference> </field> <field name "icmpTypeIPv6" dataType "unsigned8" group "transportHeader"
dataTypeSemantics "identifier" elementId "178" applicability "all" status "current"
> Type of the IPv6 ICMP message.
See RFC 4443 for the definition of the IPv6 ICMP type field.
> </reference> </field> <field name "icmpCodeIPv6" dataType "unsigned8" group "transportHeader" dataTypeSemantics "identifier" elementId "179" applicability "all" status "current"
> <description> <paragraph> Code of the IPv6 ICMP message.
See RFC 4443 for the definition of the IPv6 ICMP code field.
> </reference> </field> <field name "igmpType" dataType "unsigned8" group "transportHeader" dataTypeSemantics "identifier" elementId "33" applicability "all" status "current"> <description
The type field of the IGMP message.
See RFC 3376 for the definition of the IGMP type field.
> </reference> </field> <field name "sourceMacAddress" dataType "macAddress" group "subIpHeader" dataTypeSemantics "identifier" elementId "56" applicability "data" status "current"
The IEEE 802 source MAC address field.
<field name "postSourceMacAddress" dataType "macAddress" group "subIpHeader" dataTypeSemantics "identifier" elementId "81" applicability "data" status "current"> <description> <
The definition of this Information Element is identical to the definition of Information Element 'sourceMacAddress', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
> </field> <field name "vlanId" dataType "unsigned16" group "subIpHeader" dataTypeSemantics "identifier" elementId "58" applicability "data" status "current"> <description> <paragraph
The IEEE 802.1Q VLAN identifier (VID) extracted from the Tag Control Information field that was attached to the IP packet.
> </reference> </field> <field name "postVlanId"
dataType "unsigned16" group "subIpHeader" dataTypeSemantics "identifier" elementId "59" applicability "data" status "current"> <description> <
The definition of this Information Element is identical to the definition of Information Element 'vlanId', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
> </reference> </field> <field name "destinationMacAddress" dataType "macAddress" group "subIpHeader" dataTypeSemantics "identifier" elementId "80" applicability "data" status "current"
The IEEE 802 destination MAC address field.
<field name "postDestinationMacAddress" dataType "macAddress" group "subIpHeader" dataTypeSemantics "identifier" elementId "57" applicability "data" status "current"> <description> <
The definition of this Information Element is identical to the definition of Information Element 'destinationMacAddress', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
> </reference> </field> <field name "wlanChannelId" dataType "unsigned8" group "subIpHeader" dataTypeSemantics "identifier" elementId "146" applicability "data" status "current"
The identifier of the 802.11 (Wi Fi) channel used.
> </field> <field name "wlanSSID" dataType "string" group "subIpHeader" elementId "147" applicability "data" status "current"> <description
The Service Set IDentifier (SSID) identifying an 802.11 (Wi Fi) network used.
According to IEEE.802 11.1999, the SSID is encoded into a string of up to 32 characters.
> </field> <field name "mplsTopLabelTTL" dataType "unsigned8" group "subIpHeader" elementId "200" applicability "all" status "current"> <description
The TTL field from the top MPLS label stack entry, i.e., the last label that was pushed.
See RFC 3032 for the specification of the TTL field.
/field> <field name "mplsTopLabelExp" dataType "unsigned8" group "subIpHeader" dataTypeSemantics "flags" elementId "203" applicability "all" status "current"
The Exp field from the top MPLS label stack entry, i.e., the last label that was pushed.
> <artwork> Bits 0 4:
Don't Care, value is irrelevant.
Bits 5 7:  MPLS Exp field. 0
See RFC 3032 for the specification of the Exp field.
See RFC 3270 for usage of the Exp field.
> </reference> </field> <field name "postMplsTopLabelExp"
dataType "unsigned8" group "subIpHeader" dataTypeSemantics "flags" elementId "237" applicability "all" status "current"
The definition of this Information Element is identical to the definition of Information Element 'mplsTopLabelExp', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
See RFC 3032 for the specification of the Exp field.
See RFC 3270 for usage of the Exp field.
> </field> <field name "mplsLabelStackDepth" dataType "unsigned32" group "subIpHeader" elementId "202" applicability "all" status "current"> <description
The number of labels in the MPLS label stack.
See RFC 3032 for the specification of the MPLS label stack.
> </reference> <units>label stack entries</units
> </field> <field name "mplsLabelStackLength" dataType "unsigned32" group "subIpHeader" elementId "201" applicability "all" status "current"
The length of the MPLS label stack in units of octets.
See RFC 3032 for the specification of the MPLS label stack.
<field name "mplsPayloadLength" dataType "unsigned32" group "subIpHeader" elementId "194" applicability "all" status "current"> <description
The size of the MPLS packet without the label stack.
See RFC 3031 for the specification of MPLS packets.
See RFC 3032 for the specification of the MPLS label stack.
> <field name "mplsTopLabelStackSection" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "70" applicability "all" status "current"
The Label, Exp, and S fields from the top MPLS label stack entry, i.e., from the last label that was pushed.
> The size of this Information Element is 3 octets.
> </reference> </field> <field name "mplsLabelStackSection2" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "71" applicability "all" status "current"> <description
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsTopLabelStackSection.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </reference> </field> <field name "mplsLabelStackSection3" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "72" applicability "all" status "current"> <description
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection2.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </reference> </field> <field name "mplsLabelStackSection4" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "73" applicability "all" status "current"> <description
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection3.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </field> <field name "mplsLabelStackSection5" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "74" applicability "all" status "current"> <description> <paragraph
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection4.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </field> <field name "mplsLabelStackSection6" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "75" applicability "all" status "current"> <description> <paragraph
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection5.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
<field name "mplsLabelStackSection7" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "76" applicability "all" status "current"> <description> <
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection6.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </field> <field name "mplsLabelStackSection8" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "77" applicability "all" status "current"> <description> <paragraph
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection7.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </reference> </field> <field name "mplsLabelStackSection9" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "78" applicability "all" status "current"> <description
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection8.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </field> <field name "mplsLabelStackSection10" dataType "octetArray" group "subIpHeader" dataTypeSemantics "identifier" elementId "79" applicability "all" status "current"> <description> <paragraph
The Label, Exp, and S fields from the label stack entry that was pushed immediately before the label stack entry that would be reported by mplsLabelStackSection9.
See the definition of mplsTopLabelStackSection for further details.
> The size of this Information Element is 3 octets.
> </field> <field name "ipPayloadLength" dataType "unsigned32" group "derived" elementId "204" applicability "all" status "current"> <description> <paragraph
The effective length of the IP payload.
For IPv4 packets, the value of this Information Element is the difference between the total length of the IPv4 packet (as reported by Information Element totalLengthIPv4) and the length of the IPv4 header (as reported by Information Element headerLengthIPv4).
For IPv6, the value of the Payload Length field in the IPv6 header is reported except in the case that the value of this field is zero and that there is a valid jumbo payload option.
In this case, the value of the Jumbo Payload Length field in the jumbo payload option is reported.
See RFC 791 for the specification of IPv4 packets.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
<field name "ipNextHopIPv4Address" dataType "ipv4Address" group "derived" dataTypeSemantics "identifier" elementId "15" applicability "data" status "current"
> The IPv4 address of the next IPv4 hop.
> </field> <field name "ipNextHopIPv6Address" dataType "ipv6Address" group "derived" dataTypeSemantics "identifier" elementId "62" applicability "data" status "current"
The IPv6 address of the next IPv6 hop.
> </field> <field name "bgpSourceAsNumber" dataType "unsigned32" group "derived
" dataTypeSemantics "identifier" elementId "16" applicability "all" status "current"> <description
The autonomous system (AS) number of the source IP address.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
> </reference> </field> <field name "bgpDestinationAsNumber" dataType "unsigned32" group "derived" dataTypeSemantics "identifier" elementId "17" applicability "all" status "current"> <description> <paragraph>
The autonomous system (AS) number of the destination IP address.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
> </reference> </field> <field name "bgpNextAdjacentAsNumber" dataType "unsigned32" group "derived" dataTypeSemantics "identifier" elementId "128" applicability "all" status "current"> <description
The autonomous system (AS) number of the first AS in the AS path to the destination IP address.
The path is deduced by looking up the destination IP address of the Flow in the BGP routing information base.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
> </field> <field name "bgpPrevAdjacentAsNumber" dataType "unsigned32" group "derived" dataTypeSemantics "identifier" elementId "129" applicability "all" status "current"> <description> <paragraph
The autonomous system (AS) number of the last AS in the AS path from the source IP address.
The path is deduced by looking up the source IP address of the Flow in the BGP routing information base.
If AS path information for this Flow is only available as an unordered AS set (and not as an ordered AS sequence), then the value of this Information Element is 0.
In case of BGP asymmetry, the bgpPrevAdjacentAsNumber might not be able to report the correct value.
See RFC 4271 for a description of BGP 4, and see RFC 1930 for the definition of the AS number.
> </reference> </field> <field name "bgpNextHopIPv4Address" dataType "ipv4Address" group "derived" dataTypeSemantics "identifier" elementId "18" applicability "all" status "current"
> The IPv4 address of the next (adjacent) BGP hop.
See RFC 4271 for a description of BGP 4. </paragraph
> </reference> </field> <field name "bgpNextHopIPv6Address" dataType "ipv6Address" group "derived" dataTypeSemantics "identifier" elementId "63" applicability "all" status "current"
The IPv6 address of the next (adjacent) BGP hop.
See RFC 4271 for a description of BGP 4. </paragraph
<field name "mplsTopLabelType" dataType "unsigned8" group "derived" dataTypeSemantics "identifier" elementId "46" applicability "data" status "current"
> <description> <paragraph> This field identifies the control protocol that allocated the top of stack label.
Initial values for this field are listed below.
Further values may be assigned by IANA in the MPLS label type registry.
Any TE tunnel mid point or tail label 0x02
Any PWE3 or Cisco AToM based label 0x03
Any label associated with VPN 0x04 BGP: Any label associated with BGP or BGP routing 0x05 LDP:
Any label associated with dynamically assigned labels using LDP </artwork
See RFC 3031 for the MPLS label structure.
See RFC 4364 for the association of MPLS labels with Virtual Private Networks (VPNs).
See RFC 4271 for BGP and BGP routing.
See RFC 5036 for Label Distribution Protocol (LDP).
See the list of MPLS label types assigned by IANA at http://www.iana.org/assignments/mpls label values.
> </reference> </field> <field name "mplsTopLabelIPv4Address" dataType "ipv4Address" group "derived" dataTypeSemantics "identifier" elementId "47" applicability "data" status "current"> <description
> The IPv4 address of the system that the MPLS top label will cause this Flow to be forwarded to.
See RFC 3031 for the association between MPLS labels and IP addresses.
> </reference> </field> <field name "mplsTopLabelIPv6Address" dataType "ipv6Address" group "derived" dataTypeSemantics "identifier" elementId "140" applicability "data" status "current"> <description
The IPv6 address of the system that the MPLS top label will cause this Flow to be forwarded to.
See RFC 3031 for the association between MPLS labels and IP addresses.
> </reference> </field> <field name "mplsVpnRouteDistinguisher" dataType "octetArray" group "derived" dataTypeSemantics "identifier" elementId "90" applicability "all" status "current"> <description
The value of the VPN route distinguisher of a corresponding entry in a VPN routing and forwarding table.
Route distinguisher ensures that the same address can be used in several different MPLS VPNs and that it is possible for BGP to carry several completely different routes to that address, one for each VPN.
According to RFC 4364, the size of mplsVpnRouteDistinguisher is 8 octets.
However, in RFC 4382 an octet string with flexible length was chosen for representing a VPN route distinguisher by object MplsL3VpnRouteDistinguisher.
This choice was made in order to be open to future changes of the size.
This idea was adopted when choosing octetArray as abstract data type for this Information Element.
The maximum length of this Information Element is 256 octets.
See RFC 4364 for the specification of the route distinguisher.
See RFC 4382 for the specification of the MPLS/BGP Layer 3 Virtual Private Network (VPN) Management Information Base.
> </reference> </field> <field name "minimumIpTotalLength" dataType "unsigned64" group "minMax" elementId "25" applicability "all" status "current"> <description> <paragraph
> Length of the smallest packet observed for this Flow.
The packet length includes the IP header(s) length and the IP payload length.
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
> <field name "maximumIpTotalLength" dataType "unsigned64" group "minMax" elementId "26" applicability "all" status "current"
> Length of the largest packet observed for this Flow.
The packet length includes the IP header(s) length and the IP payload length.
See RFC 791 for the specification of the IPv4 total length.
See RFC 2460 for the specification of the IPv6 payload length.
See RFC 2675 for the specification of the IPv6 jumbo payload length.
<field name "minimumTTL" dataType "unsigned8" group "minMax" elementId "52" applicability "data" status "current"
> <description> <paragraph> Minimum TTL value observed for any packet in this Flow.
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
<field name "maximumTTL" dataType "unsigned8" group "minMax" elementId "53" applicability "data" status "current"
Maximum TTL value observed for any packet in this Flow.
See RFC 791 for the definition of the IPv4 Time to Live field.
See RFC 2460 for the definition of the IPv6 Hop Limit field.
> </field> <field name "ipv4Options" dataType "unsigned32" dataTypeSemantics "flags" group "minMax" elementId "208" applicability "all" status "current"> <description> <paragraph> IPv4 options in packets of this Flow.
The information is encoded in a set of bit fields.
For each valid IPv4 option type, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding IPv4 option type.
Otherwise, if no observed packet of this Flow contained the respective IPv4 option type, the value of the corresponding bit is 0.
The list of valid IPv4 options is maintained by IANA.
Note that for identifying an option not just the 5 bit Option Number, but all 8 bits of the Option Type need to match one of the IPv4 options specified at http://www.iana.org/assignments/ip parameters.
<paragraph> Options are mapped to bits according to their option numbers.
Option number X is mapped to bit X.
The mapping is illustrated by the figure below.
E SEC   Extended Security, RFC 1108 6   134
MTU Reply, RFC 1191 13   205   FINN
VISA    Experimental Access Control 15    15
Router Alert, RFC 2113 21   149
Further options numbers may be assigned by IANA </artwork
See RFC 791 for the definition of IPv4 options.
See the list of IPv4 option numbers assigned by IANA at http://www.iana.org/assignments/ip parameters.
> </reference> </field> <field name "ipv6ExtensionHeaders" dataType "unsigned32" dataTypeSemantics "flags" group "minMax" elementId "64" applicability "all" status "current"> <description
> <paragraph> IPv6 extension headers observed in packets of this Flow.
The information is encoded in a set of bit fields.
For each IPv6 option header, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding IPv6 extension header.
Otherwise, if no observed packet of this Flow contained the respective IPv6 extension header, the value of the corresponding bit is 0.
See RFC 2460 for the general definition of IPv6 extension headers and for the specification of the hop by hop options header, the routing header, the fragment header, and the destination options header.
See RFC 4302 for the specification of the authentication header.
See RFC 4303 for the specification of the encapsulating security payload.
> </field> <field name "tcpControlBits" dataType "unsigned8" dataTypeSemantics "flags" group "minMax" elementId "6" applicability "all" status "current"> <description> <paragraph> TCP control bits observed for packets of this Flow.
The information is encoded in a set of bit fields.
For each TCP control bit, there is a bit in this set.
A bit is set to 1 if any observed packet of this Flow has the corresponding TCP control bit set to 1.
A value of 0 for a bit indicates that the corresponding bit was not set in any of the observed packets of this Flow.
Reserved for future use by TCP.
No more data from sender </artwork
See RFC 793 for the definition of the TCP control bits in the TCP header.
> </reference> </field> <field name "tcpOptions" dataType "unsigned64" dataTypeSemantics "flags" group "minMax" elementId "209" applicability "all" status "current"> <description> <paragraph> TCP options in packets of this Flow.
The information is encoded in a set of bit fields.
For each TCP option, there is a bit in this set.
The bit is set to 1 if any observed packet of this Flow contains the corresponding TCP option.
Otherwise, if no observed packet of this Flow contained the respective TCP option, the value of the corresponding bit is 0.
<paragraph> Options are mapped to bits according to their option numbers.
Option number X is mapped to bit X. TCP option numbers are maintained by IANA.
See RFC 793 for the definition of TCP options.
See the list of TCP option numbers assigned by IANA at http://www.iana.org/assignments/tcp parameters.
" dataType "dateTimeSeconds" group "timestamp" elementId "150" applicability "data" status "current"> <description> <paragraph
The absolute timestamp of the first packet of this Flow.
> <field name "flowEndSeconds" dataType "dateTimeSeconds" group "timestamp" elementId "151" applicability "data" status "current"> <description
The absolute timestamp of the last packet of this Flow.
> <field name "flowStartMilliseconds" dataType "dateTimeMilliseconds" group "timestamp" elementId
"152" applicability "data" status "current"> <description> <paragraph
The absolute timestamp of the first packet of this Flow.
> </field> <field name "
" dataType "dateTimeMilliseconds" group "timestamp" elementId "153" applicability "data" status "current"> <description> <paragraph
The absolute timestamp of the last packet of this Flow.
> </description> <units>milliseconds</units> </field> <field name "flowStartMicroseconds" dataType
"dateTimeMicroseconds" group "timestamp" elementId "154" applicability "data" status "current"> <description> <paragraph
The absolute timestamp of the first packet of this Flow.
" dataType "dateTimeMicroseconds" group "timestamp" elementId "155" applicability "data" status "current"> <description> <paragraph
The absolute timestamp of the last packet of this Flow.
> <field name "flowStartNanoseconds" dataType "dateTimeNanoseconds" group "timestamp" elementId "156" applicability "data" status "current"
The absolute timestamp of the first packet of this Flow.
> </field> <field name "
flowEndNanoseconds" dataType "dateTimeNanoseconds" group "timestamp" elementId "157" applicability "data" status "current"> <description> <paragraph>
The absolute timestamp of the last packet of this Flow.
<field name "flowStartDeltaMicroseconds" dataType "unsigned32" group "timestamp" elementId "158" applicability "data" status "current"> <description> <
This is a relative timestamp only valid within the scope of a single IPFIX Message.
It contains the negative time offset of the first observed packet of this Flow relative to the export time specified in the IPFIX Message Header.
See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
> </field> <field name "flowEndDeltaMicroseconds
" dataType "unsigned32" group "timestamp" elementId "159" applicability "data" status "current"> <description> <paragraph
This is a relative timestamp only valid within the scope of a single IPFIX Message.
It contains the negative time offset of the last observed packet of this Flow relative to the export time specified in the IPFIX Message Header.
See the IPFIX protocol specification [RFC5101] for the definition of the IPFIX Message Header.
> </field> <field name "systemInitTimeMilliseconds" dataType "dateTimeMilliseconds" group "timestamp" elementId "160" applicability "data" status "current"
The absolute timestamp of the last (re )initialization of the IPFIX Device.
<field name "flowStartSysUpTime" dataType "unsigned32" group "timestamp" elementId "22" applicability "data" status "current"> <description> <
The relative timestamp of the first packet of this Flow.
It indicates the number of milliseconds since the last (re )initialization of the IPFIX Device (sysUpTime).
<field name "flowEndSysUpTime" dataType "unsigned32" group "timestamp" elementId "21" applicability "data" status "current"> <description> <
The relative timestamp of the last packet of this Flow.
It indicates the number of milliseconds since the last (re )initialization of the IPFIX Device (sysUpTime).
<field name "octetDeltaCount" dataType "unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "1" applicability "data" status "current"> <description> <
The number of octets since the previous report (if any) in incoming packets for this Flow at the Observation Point.
The number of octets includes IP header(s) and IP payload.
<field name "postOctetDeltaCount" dataType "unsigned64
" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "23" applicability "data" status "current"> <description> <paragraph
The definition of this Information Element is identical to the definition of Information Element 'octetDeltaCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
<field name "octetDeltaSumOfSquares" dataType "unsigned64" group "flowCounter" elementId
"198" applicability "data" status "current"> <description> <
The sum of the squared numbers of octets per incoming packet since the previous report (if any) for this Flow at the Observation Point.
The number of octets includes IP header(s) and IP payload.
> </field> <field name "octetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "85" applicability "all" status "current"> <description
The total number of octets in incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
> <field name "postOctetTotalCount" dataType
"unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "171" applicability "all" status "current"> <description
The definition of this Information Element is identical to the definition of Information Element 'octetTotalCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
<field name "octetTotalSumOfSquares" dataType "unsigned64" group "flowCounter" elementId "199" applicability "all" status "current"> <description
The total sum of the squared numbers of octets in incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
<field name "packetDeltaCount" dataType "unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "2" applicability "data" status "current"> <description> <
The number of incoming packets since the previous report (if any) for this Flow at the Observation Point.
> <field name "postPacketDeltaCount" dataType "unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "24" applicability "data" status "current"> <description
The definition of this Information Element is identical to the definition of Information Element 'packetDeltaCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
> </field> <field name "packetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "86" applicability "all" status "current"
The total number of incoming packets for this Flow at the Observation Point since the Metering Process (re )initialization for this Observation Point. </paragraph
> <field name "postPacketTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "172" applicability "all" status "current"> <description
The definition of this Information Element is identical to the definition of Information Element 'packetTotalCount', except that it reports a potentially modified value caused by a middlebox function after the packet passed the Observation Point.
<field name "droppedOctetDeltaCount" dataType "
unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "132" applicability "data" status "current"> <description> <
The number of octets since the previous report (if any) in packets of this Flow dropped by packet treatment.
The number of octets includes IP header(s) and IP payload.
> <field name "droppedPacketDeltaCount" dataType "unsigned64
" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "133" applicability "data" status "current"> <description> <paragraph
The number of packets since the previous report (if any) of this Flow dropped by packet treatment.
/field> <field name "droppedOctetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "134" applicability "data" status "current"> <description
The total number of octets in packets of this Flow dropped by packet treatment since the Metering Process (re )initialization for this Observation Point.
The number of octets includes IP header(s) and IP payload.
<field name "droppedPacketTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "135" applicability "data" status "current"> <description> <
The number of packets of this Flow dropped by packet treatment since the Metering Process (re )initialization for this Observation Point.
> </field> <field name "postMCastPacketDeltaCount" dataType "unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "19" applicability "data" status "current"> <description
The number of outgoing multicast packets since the previous report (if any) sent for packets of this Flow by a multicast daemon within the Observation Domain.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
"unsigned64" dataTypeSemantics "deltaCounter" group "flowCounter" elementId "20" applicability "data" status "current"> <description> <paragraph
The number of octets since the previous report (if any) in outgoing multicast packets sent for packets of this Flow by a multicast daemon within the Observation Domain.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
The number of octets includes IP header(s) and IP payload.
> <field name "postMCastPacketTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "174" applicability "data" status "current"> <description
The total number of outgoing multicast packets sent for packets of this Flow by a multicast daemon within the Observation Domain since the Metering Process (re )initialization.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
/field> <field name "postMCastOctetTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "175" applicability "data" status "current"> <description
The total number of octets in outgoing multicast packets sent for packets of this Flow by a multicast daemon in the Observation Domain since the Metering Process (re )initialization.
This property cannot necessarily be observed at the Observation Point, but may be retrieved by other means.
The number of octets includes IP header(s) and IP payload.
> <field name "tcpSynTotalCount" dataType
"unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "218" applicability "data" status "current"> <description> <paragraph
The total number of packets of this Flow with TCP "Synchronize sequence numbers" (SYN) flag set.
See RFC 793 for the definition of the TCP SYN flag.
> </field> <field name "tcpFinTotalCount" dataType
"unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "219" applicability "data" status "current"> <description> <paragraph
The total number of packets of this Flow with TCP "
No more data from sender" (FIN) flag set.
See RFC 793 for the definition of the TCP FIN flag.
<field name "tcpRstTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "220" applicability "data" status "current"> <description> <
The total number of packets of this Flow with TCP "Reset the connection" (RST) flag set.
See RFC 793 for the definition of the TCP RST flag.
> </field> <field name "tcpPshTotalCount" dataType
"unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "221" applicability "data" status "current"> <description> <paragraph
The total number of packets of this Flow with TCP "Push Function" (PSH) flag set.
See RFC 793 for the definition of the TCP PSH flag.
/field> <field name "tcpAckTotalCount" dataType "unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "222" applicability "data" status "current"> <description
The total number of packets of this Flow with TCP "Acknowledgment field significant" (ACK) flag set.
See RFC 793 for the definition of the TCP ACK flag.
> </field> <field name "tcpUrgTotalCount" dataType
"unsigned64" dataTypeSemantics "totalCounter" group "flowCounter" elementId "223" applicability "data" status "current"> <description> <paragraph
The total number of packets of this Flow with TCP "Urgent Pointer field significant" (URG) flag set.
See RFC 793 for the definition of the TCP URG flag.
> </field> <field name "flowActiveTimeout" dataType "unsigned16" group "misc" elementId "36" applicability "all" status "current"> <description
The number of seconds after which an active Flow is timed out anyway, even if there is still a continuous flow of packets.
flowIdleTimeout" dataType "unsigned16" group "misc" elementId "37" applicability "all" status "current"> <description> <
A Flow is considered to be timed out if no packets belonging to the Flow have been observed for the number of seconds specified by this field.
" dataType "unsigned8" group "misc" dataTypeSemantics "identifier" elementId "136" applicability "data" status "current"> <description> <paragraph
The reason for Flow termination.
The range of values includes the following: </paragraph> <artwork> 0x01: idle timeout
The Flow was terminated because it was considered to be idle.
The Flow was terminated for reporting purposes while it was still active, for example, after the maximum lifetime of unreported Flows was reached.
end of Flow detected The Flow was terminated because the Metering Process detected signals indicating the end of the Flow, for example, the TCP FIN flag.
The Flow was terminated because of some external event, for example, a shutdown of the Metering Process initiated by a network management application.
The Flow was terminated because of lack of resources available to the Metering Process and/or the Exporting Process.
<field name "flowDurationMilliseconds" dataType "unsigned32" group "misc" elementId "161" applicability "data" status "current"
The difference in time between the first observed packet of this Flow and the last observed packet of this Flow.
> </field> <field name "flowDurationMicroseconds" dataType "unsigned32" group "misc" elementId "162" applicability "data" status "current"> <description> <paragraph>
The difference in time between the first observed packet of this Flow and the last observed packet of this Flow.
> </description> <units>microseconds</units> </field> <field name "flowDirection" dataType "unsigned8" dataTypeSemantics "identifier" group "misc" elementId "61" applicability "data" status "current"
> The direction of the Flow observed at the Observation Point.
There are only two values defined.
</description> </field> <field name "paddingOctets" dataType "octetArray" group "padding" elementId "210" applicability "option" status "current"
The value of this Information Element is always a sequence of 0x00 values.
> Appendix B.  XML Specification of Abstract Data Types
This appendix contains a machine readable description of the abstract data types to be used for IPFIX Information Elements and a machine
readable description of the template used for defining IPFIX Information Elements.
Note that this appendix is of informational nature, while the text in Sections 2 and 3 (generated from this appendix) is normative.
At the same time, this appendix is also an XML schema that was used for creating the XML specification of Information Elements in Appendix A.
It may also be used for specifying further Information Elements in extensions of the IPFIX information model.
This schema and its namespace are registered by IANA at http://www.iana.org/assignments/xml registry/schema/ipfix.xsd.
xml version "1.0" encoding "UTF 8"?
ipfix "urn:ietf:params:xml:ns:ipfix info" xmlns "http://www.w3.org/2001/XMLSchema" elementFormDefault
"qualified"> <simpleType name "dataType"> <restriction base "string"> <enumeration value "unsigned8"> <annotation> <documentation>
The type "unsigned8" represents a non negative integer value in the range of 0 to 255.
</annotation> </enumeration> <enumeration value "unsigned16"> <annotation> <documentation
>The type "unsigned16" represents a non negative integer value in the range of 0 to 65535.
> </enumeration> <enumeration value "unsigned32"> <annotation>
>The type "unsigned32" represents a non negative integer value in the range of 0 to 4294967295.
</documentation> </annotation> </enumeration> <enumeration value "unsigned64"> <annotation> <documentation
>The type "unsigned64" represents a non negative integer value in the range of 0 to 18446744073709551615.
</documentation> </annotation> </enumeration> <enumeration value "signed8"> <annotation> <documentation
>The type "signed8" represents an integer value in the range of  128 to 127.
</annotation> </enumeration> <enumeration value "signed16"> <annotation> <documentation
The type "signed16" represents an integer value in the range of  32768 to 32767.
</documentation> </annotation> </enumeration> <enumeration value "signed32"> <annotation>
>The type "signed32" represents an integer value in the range of  2147483648 to 2147483647.
</documentation> </annotation> </enumeration> <enumeration value "signed64"> <annotation>
The type "signed64" represents an integer value in the range of  9223372036854775808 to 9223372036854775807.
</documentation> </annotation> </enumeration> <enumeration value "float32"> <annotation> <documentation
The type "float32" corresponds to an IEEE single precision 32 bit floating point type as defined in [IEEE.754.1985].
> </enumeration> <enumeration value "float64"> <annotation>
The type "float64" corresponds to an IEEE double precision 64 bit floating point type as defined in [IEEE.754.1985].
> </enumeration> <enumeration value "boolean"> <annotation>
>The type "boolean" represents a binary value.
The only allowed values are "true" and "false".
> </enumeration> <enumeration value "macAddress"> <annotation>
>The type "macAddress" represents a string of 6 octets.
> </enumeration> <enumeration value "octetArray"> <annotation>
>The type "octetArray" represents a finite length string of octets.
> </enumeration> <enumeration value "string"> <annotation> <documentation>
The type "string" represents a finite length string of valid characters from the Unicode character encoding set [ISO.10646 1.1993].
Unicode allows for ASCII [ISO.646.1991] and many other international character sets to be used.
</documentation> </annotation> </enumeration> <enumeration value "
The type "dateTimeSeconds" represents a time value in units of seconds based on coordinated universal time (UTC).
The choice of an epoch, for example, 00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
</documentation> </annotation> </enumeration> <enumeration value "dateTimeMilliseconds"> <annotation>
The type "dateTimeMilliseconds" represents a time value in units of milliseconds based on coordinated universal time (UTC).
The choice of an epoch, for example,  00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
</documentation> </annotation> </enumeration> <enumeration value "
The type "dateTimeMicroseconds" represents a time value in units of microseconds based on coordinated universal time (UTC).
The choice of an epoch, for example,  00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
</documentation> </annotation> </enumeration> <enumeration value "
The type "dateTimeNanoseconds" represents a time value in units of nanoseconds based on coordinated universal time (UTC).
The choice of an epoch, for example,  00:00 UTC, January 1, 1970, is left to corresponding encoding specifications for this type, for example, the IPFIX protocol specification.
Note that transformation of values might be required between different encodings if different epoch values are used.
> </enumeration> <enumeration value "ipv4Address"> <annotation> <documentation
>The type "ipv4Address" represents a value of an IPv4 address.
> </enumeration> <enumeration value "ipv6Address"> <annotation>
The type "ipv6Address" represents a value of an IPv6 address.
dataTypeSemantics"> <restriction base "string"> <enumeration value "quantity"> <annotation> <documentation>
A quantity value represents a discrete measured value pertaining to the record.
This is distinguished from counters that represent an ongoing measured value whose "odometer" reading is captured as part of a given record.
If no semantic qualifier is given, the Information Elements that have an integral data type should behave as a quantity.
</documentation> </annotation> </enumeration> <enumeration value "totalCounter"> <annotation> <documentation>
An integral value reporting the value of a counter.
Counters are unsigned and wrap back to zero after reaching the limit of the type.
For example, an unsigned64 with counter semantics will continue to increment until reaching the value of 2  64 1.
At this point, the next increment will wrap its value to zero and continue counting from zero.
The semantics of a total counter is similar to the semantics of counters used in SNMP, such as Counter32 defined in RFC 2578 [RFC2578].
The only difference between total counters and counters used in SNMP is that the total counters have an initial value of 0.
A total counter counts independently of the export of its value.
> </enumeration> <enumeration value "deltaCounter"> <annotation>
> An integral value reporting the value of a counter.
Counters are unsigned and wrap back to zero after reaching the limit of the type.
For example, an unsigned64 with counter semantics will continue to increment until reaching the value of 2  64 1.
At this point, the next increment will wrap its value to zero and continue counting from zero.
The semantics of a delta counter is similar to the semantics of counters used in SNMP, such as Counter32 defined in RFC 2578 [RFC2578].
The only difference between delta counters and counters used in SNMP is that the delta counters have an initial value of 0.
A delta counter is reset to 0 each time its value is exported.
</documentation> </annotation> </enumeration> <enumeration value "identifier"> <annotation> <documentation
An integral value that serves as an identifier.
Specifically, mathematical operations on two identifiers (aside from the equality operation) are meaningless.
For example, Autonomous System ID 1   Autonomous System ID 2 is meaningless.
</documentation> </annotation> </enumeration> <enumeration value "flags"> <annotation
> An integral value that actually represents a set of bit fields.
Logical operations are appropriate on such values, but not other mathematical operations.
Flags should always be of an unsigned type.
> <simpleType name "applicability"> <restriction base "string"> <enumeration value "data"> <annotation> <documentation> Used for Information Elements that are applicable to Flow Records only.
</annotation> </enumeration> <enumeration value "option"> <annotation> <documentation> Used for Information Elements that are applicable to option records only.
</annotation> </enumeration> <enumeration value "all"> <annotation> <documentation> Used for Information Elements that are applicable to Flow Records as well as to option records.
> <simpleType name "status"> <restriction base "string"> <enumeration value "current"> <annotation
> <documentation> Indicates that the Information Element definition is current and valid.
</documentation> </annotation> </enumeration> <enumeration value "deprecated"> <annotation> <documentation>
Indicates that the Information Element definition is obsolete, but it permits new/continued implementation in order to foster interoperability with older/existing implementations.
</documentation> </annotation> </enumeration> <enumeration value "obsolete"> <annotation
> <documentation> Indicates that the Information Element definition is obsolete and should not be implemented and/or can be removed if previously implemented.
<complexType name "text"> <choice maxOccurs "unbounded" minOccurs "0"> <element name "paragraph"
> <complexType mixed "true"> <sequence> <element maxOccurs
"unbounded" minOccurs "0" name "xref"> <complexType> <attribute name "target" type "string" use "required"/
> </element> <element name "artwork"> <simpleType> <restriction base "
> <simpleType name "range"> <restriction base "
> <element name "fieldDefinitions"> <complexType> <sequence> <element maxOccurs "unbounded" minOccurs "1" name "field"
> <complexType> <sequence> <element maxOccurs
"1" minOccurs "1" name "description" type "ipfix:text"> <annotation>
The semantics of this Information Element.
Describes how this Information Element is derived from the Flow or other information available to the observer.
"1" minOccurs "0" name "reference" type "ipfix:text"> <annotation>
<documentation> Identifies additional specifications that more precisely define this item or provide additional context for its use.
> <element maxOccurs "1" minOccurs "0" name "units" type "string"> <annotation> <documentation>
If the Information Element is a measure of some kind, the units identify what the measure is.
<element maxOccurs "1" minOccurs "0" name "range" type "ipfix:range"> <annotation>
Some Information Elements may only be able to take on a restricted set of values that can be expressed as a range (e.g., 0 through 511 inclusive).
If this is the case, the valid inclusive range should be specified.
> </sequence> <attribute name "name" type "string" use "required"> <annotation> <documentation
A unique and meaningful name for the Information Element.
> <attribute name "dataType" type "ipfix:
One of the types listed in Section 3.1 of this document or in a future extension of the information model.
The type space for attributes is constrained to facilitate implementation.
The existing type space does however encompass most basic types used in modern programming languages, as well as some derived types (such as ipv4Address) that are common to this domain and useful to distinguish.
> <attribute name "dataTypeSemantics" type "ipfix:
dataTypeSemantics" use "optional"> <annotation> <documentation>
The integral types may be qualified by additional semantic details.
Valid values for the data type semantics are specified in Section 3.2 of this document or in a future extension of the information model.
> </attribute> <attribute name "elementId" type "nonNegativeInteger" use "required"> <annotation>
A numeric identifier of the Information Element.
If this identifier is used without an enterprise identifier (see [RFC5101] and enterpriseId below), then it is globally unique and the list of allowed values is administered by IANA.
It is used for compact identification of an Information Element when encoding Templates in the protocol.
> </attribute> <attribute name "enterpriseId" type "nonNegativeInteger" use "optional"> <annotation> <documentation>
Enterprises may wish to define Information Elements without registering them with IANA, for example, for enterprise internal purposes.
For such Information Elements, the Information Element identifier described above is not sufficient when the Information Element is used outside the enterprise.
If specifications of enterprise specific Information Elements are made public and/or if enterprise specific identifiers are used by the IPFIX protocol outside the enterprise, then the enterprise specific identifier MUST be made globally unique by combining it with an enterprise identifier.
Valid values for the enterpriseId are defined by IANA as Structure of Management Information (SMI) network management private enterprise codes.
They are defined at http://www.iana.org/assignments/enterprise numbers.
> </attribute> <attribute name "applicability" type "ipfix:applicability" use "optional"> <annotation> <documentation>
This property of an Information Element indicates in which kind of records the Information Element can be used.
Allowed values for this property are 'data', 'option', and 'all'.
</annotation> </attribute> <attribute name "status" type "ipfix:status" use "required"> <annotation>
The status of the specification of this Information Element.
Allowed values are 'current', 'deprecated', and 'obsolete'.
<unique name "infoElementIdUnique"> <selector xpath "field"/>
