- title: __initial_text__
  contents:
  - '      SMIng - Next Generation Structure of Management Information

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines the base SMIng (Structure of Management\n   Information,\
    \ Next Generation) language.  SMIng is a data definition\n   language that provides\
    \ a protocol-independent representation for\n   management information.  Separate\
    \ RFCs define mappings of SMIng to\n   specific management protocols, including\
    \ SNMP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  The History of SMIng . . . . . . . . . . . . .\
    \ . . . . .  4\n       1.2.  Terms of Requirement Levels. . . . . . . . . . .\
    \ . . . .  5\n   2.  SMIng Data Modeling. . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n       2.1.  Identifiers. . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n   3.  Base Types and Derived Types . . . . . . . . . . . . . . . .\
    \ .  7\n       3.1.  OctetString. . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n       3.2.  Pointer. . . . . . . . . . . . . . . . . . . . . . . . .  9\n\
    \       3.3.  ObjectIdentifier . . . . . . . . . . . . . . . . . . . .  9\n  \
    \     3.4.  Integer32. . . . . . . . . . . . . . . . . . . . . . . . 10\n    \
    \   3.5.  Integer64. . . . . . . . . . . . . . . . . . . . . . . . 11\n      \
    \ 3.6.  Unsigned32 . . . . . . . . . . . . . . . . . . . . . . . 12\n       3.7.\
    \  Unsigned64 . . . . . . . . . . . . . . . . . . . . . . . 13\n       3.8.  Float32.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 13\n       3.9.  Float64. .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 14\n       3.10. Float128 . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 15\n       3.11. Enumeration. .\
    \ . . . . . . . . . . . . . . . . . . . . . 17\n       3.12. Bits . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 17\n       3.13. Display Formats. .\
    \ . . . . . . . . . . . . . . . . . . . 18\n   4.  The SMIng File Structure .\
    \ . . . . . . . . . . . . . . . . . . 20\n       4.1.  Comments . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 20\n       4.2.  Textual Data . . . . . .\
    \ . . . . . . . . . . . . . . . . 21\n       4.3.  Statements and Arguments .\
    \ . . . . . . . . . . . . . . . 21\n   5.  The module Statement . . . . . . .\
    \ . . . . . . . . . . . . . . 21\n       5.1.  The module's import Statement.\
    \ . . . . . . . . . . . . . 22\n       5.2.  The module's organization Statement.\
    \ . . . . . . . . . . 23\n       5.3.  The module's contact Statement . . . .\
    \ . . . . . . . . . 23\n       5.4.  The module's description Statement . . .\
    \ . . . . . . . . 23\n       5.5.  The module's reference Statement . . . . .\
    \ . . . . . . . 23\n       5.6.  The module's revision Statement. . . . . . .\
    \ . . . . . . 23\n             5.6.1. The revision's date Statement . . . . .\
    \ . . . . . 24\n             5.6.2. The revision's description Statement. . .\
    \ . . . . 24\n       5.7.  Usage Example. . . . . . . . . . . . . . . . . . .\
    \ . . . 24\n   6.  The extension Statement. . . . . . . . . . . . . . . . . .\
    \ . . 25\n       6.1.  The extension's status Statement . . . . . . . . . . .\
    \ . 25\n       6.2.  The extension's description Statement. . . . . . . . . .\
    \ 26\n       6.3.  The extension's reference Statement. . . . . . . . . . . 26\n\
    \       6.4.  The extension's abnf Statement . . . . . . . . . . . . . 26\n  \
    \     6.5.  Usage Example. . . . . . . . . . . . . . . . . . . . . . 26\n   7.\
    \  The typedef Statement. . . . . . . . . . . . . . . . . . . . . 27\n       7.1.\
    \  The typedef's type Statement . . . . . . . . . . . . . . 27\n       7.2.  The\
    \ typedef's default Statement. . . . . . . . . . . . . 27\n       7.3.  The typedef's\
    \ format Statement . . . . . . . . . . . . . 27\n       7.4.  The typedef's units\
    \ Statement. . . . . . . . . . . . . . 28\n       7.5.  The typedef's status Statement\
    \ . . . . . . . . . . . . . 28\n       7.6.  The typedef's description Statement.\
    \ . . . . . . . . . . 29\n       7.7.  The typedef's reference Statement. . .\
    \ . . . . . . . . . 29\n       7.8.  Usage Examples . . . . . . . . . . . . .\
    \ . . . . . . . . 29\n   8.  The identity Statement . . . . . . . . . . . . .\
    \ . . . . . . . 30\n       8.1.  The identity's parent Statement. . . . . . .\
    \ . . . . . . 30\n       8.2.  The identity's status Statement. . . . . . . .\
    \ . . . . . 30\n       8.3.  The identity' description Statement. . . . . . .\
    \ . . . . 31\n       8.4.  The identity's reference Statement . . . . . . . .\
    \ . . . 31\n       8.5.  Usage Examples . . . . . . . . . . . . . . . . . . .\
    \ . . 31\n   9.  The class Statement. . . . . . . . . . . . . . . . . . . . .\
    \ . 32\n       9.1.  The class' extends Statement . . . . . . . . . . . . . .\
    \ 32\n       9.2.  The class' attribute Statement . . . . . . . . . . . . . 32\n\
    \             9.2.1. The attribute's type Statement. . . . . . . . . . 32\n  \
    \           9.2.2. The attribute's access Statement. . . . . . . . . 32\n    \
    \         9.2.3. The attribute's default Statement . . . . . . . . 33\n      \
    \       9.2.4. The attribute's format Statement. . . . . . . . . 33\n        \
    \     9.2.5. The attribute's units Statement . . . . . . . . . 33\n          \
    \   9.2.6. The attribute's status Statement. . . . . . . . . 34\n            \
    \ 9.2.7. The attribute's description Statement . . . . . . 34\n             9.2.8.\
    \ The attribute's reference Statement . . . . . . . 34\n       9.3.  The class'\
    \ unique Statement. . . . . . . . . . . . . . . 35\n       9.4.  The class' event\
    \ Statement . . . . . . . . . . . . . . . 35\n             9.4.1. The event's\
    \ status Statement. . . . . . . . . . . 35\n             9.4.2. The event's description\
    \ Statement . . . . . . . . 35\n             9.4.3. The event's reference Statement\
    \ . . . . . . . . . 36\n       9.5.  The class' status Statement. . . . . . .\
    \ . . . . . . . . 36\n       9.6.  The class' description Statement . . . . .\
    \ . . . . . . . 36\n       9.7.  The class' reference Statement . . . . . . .\
    \ . . . . . . 37\n       9.8.  Usage Example. . . . . . . . . . . . . . . . .\
    \ . . . . . 37\n   10. Extending a Module . . . . . . . . . . . . . . . . . .\
    \ . . . . 38\n   11. SMIng Language Extensibility . . . . . . . . . . . . . .\
    \ . . . 39\n   12. Security Considerations. . . . . . . . . . . . . . . . . .\
    \ . . 41\n   13. Acknowledgements . . . . . . . . . . . . . . . . . . . . . .\
    \ . 41\n   14. References . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 42\n       14.1. Normative References . . . . . . . . . . . . . . . . . . 42\n\
    \       14.2. Informative References . . . . . . . . . . . . . . . . . 42\n  \
    \ Appendix A.  NMRG-SMING Module . . . . . . . . . . . . . . . . . . 44\n   Appendix\
    \ B.  SMIng ABNF Grammar. . . . . . . . . . . . . . . . . . 53\n   Authors' Addresses\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 63\n   Full Copyright Statement\
    \ . . . . . . . . . . . . . . . . . . . . . 64\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In traditional management systems, management information\
    \ is viewed\n   as a collection of managed objects, residing in a virtual information\n\
    \   store, termed the Management Information Base (MIB).  Collections of\n   related\
    \ objects are defined in MIB modules.  These modules are\n   written in conformance\
    \ with a specification language, the Structure\n   of Management Information (SMI).\
    \  There are different versions of the\n   SMI.  The SMI version 1 (SMIv1) is\
    \ defined in [RFC1155], [RFC1212],\n   [RFC1215], and the SMI version 2 (SMIv2)\
    \ in [RFC2578], [RFC2579], and\n   [RFC2580].  Both are based on adapted subsets\
    \ of OSI's Abstract\n   Syntax Notation One, ASN.1 [ASN1].\n   In a similar fashion,\
    \ policy provisioning information is viewed as a\n   collection of Provisioning\
    \ Classes (PRCs) and Provisioning Instances\n   (PRIs) residing in a virtual information\
    \ store, termed the Policy\n   Information Base (PIB).  Collections of related\
    \ Provisioning Classes\n   are defined in PIB modules.  PIB modules are written\
    \ using the\n   Structure of Policy Provisioning Information (SPPI) [RFC3159]\
    \ which\n   is an adapted subset of SMIv2.\n   The SMIv1 and the SMIv2 are bound\
    \ to the Simple Network Management\n   Protocol (SNMP) [RFC3411], while the SPPI\
    \ is bound to the Common Open\n   Policy Service Provisioning (COPS-PR) Protocol\
    \ [RFC3084].  Even\n   though the languages have common rules, it is hard to use\
    \ common data\n   definitions with both protocols.  It is the purpose of this\
    \ document\n   to define a common data definition language, named SMIng, that\
    \ can\n   formally specify data models independent of specific protocols and\n\
    \   applications.  The appendix of this document defines a core module\n   that\
    \ supplies common SMIng definitions.\n   A companion document contains an SMIng\
    \ language extension to define\n   SNMP specific mappings of SMIng definitions\
    \ in compatibility with\n   SMIv2 MIB modules [RFC3781].  Additional language\
    \ extensions may be\n   added in the future, e.g., to define COPS-PR specific\
    \ mappings of\n   SMIng definitions in a way that is compatible with SPPI PIBs.\n\
    \   Section 2 gives an overview of the basic concepts of data modeling\n   using\
    \ SMIng, while the subsequent sections present the concepts of\n   the SMIng language\
    \ in detail: the base types, the SMIng file\n   structure, and all SMIng core\
    \ statements.\n   The remainder of the document describes extensibility features\
    \ of the\n   language and rules to follow when changes are applied to a module.\n\
    \   Appendix B contains the grammar of SMIng in ABNF [RFC2234] notation.\n"
- title: 1.1.  The History of SMIng
  contents:
  - "1.1.  The History of SMIng\n   SMIng started in 1999 as a research project to\
    \ address some drawbacks\n   of SMIv2, the current data modeling language for\
    \ management\n   information bases.  Primarily, its partial dependence on ASN.1\
    \ and a\n   number of exception rules turned out to be problematic.  In 2000,\
    \ the\n   work was handed over to the IRTF Network Management Research Group\n\
    \   where it was significantly detailed.  Since the work of the RAP\n   Working\
    \ Group on COPS-PR and SPPI emerged in 1999/2000, SMIng was\n   split into two\
    \ parts: a core data definition language (defined in\n   this document) and protocol\
    \ mappings to allow the application of core\n   definitions through (potentially)\
    \ multiple management protocols.  The\n   replacement of SMIv2 and SPPI by a single\
    \ merged data definition\n   language was also a primary goal of the IETF SMING\
    \ Working Group that\n   was chartered at the end of 2000.\n   The requirements\
    \ for a new data definition language were discussed\n   several times within the\
    \ IETF SMING Working Group and changed\n   significantly over time [RFC3216],\
    \ so that another proposal (in\n   addition to SMIng), named SMI Data Structures\
    \ (SMI-DS), was presented\n   to the Working Group.  In the end, neither of the\
    \ two proposals found\n   enough consensus and support, and the attempt to merge\
    \ the existing\n   concepts did not succeed, resulting in the Working Group being\
    \ closed\n   down in April 2003.\n   In order to record the work of the NMRG (Network\
    \ Management Research\n   Group) on SMIng, this memo and the accompanying memo\
    \ on the SNMP\n   protocol mapping [RFC3781] have been published for informational\n\
    \   purposes.\n   Note that throughout these documents, the term \"SMIng\" refers\
    \ to the\n   specific data modeling language that is specified in this document,\n\
    \   whereas the term \"SMING\" refers to the general effort within the IETF\n\
    \   Working Group to define a new management data definition language as\n   an\
    \ SMIv2 successor and probably an SPPI merger, for which \"SMIng\" and\n   \"\
    SMI-DS\" were two specific proposals.\n"
- title: 1.2.  Terms of Requirement Levels
  contents:
  - "1.2.  Terms of Requirement Levels\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  SMIng Data Modeling
  contents:
  - "2.  SMIng Data Modeling\n   SMIng is a language designed to specify management\
    \ information in a\n   structured way readable to computer programs, e.g., MIB\
    \ compilers, as\n   well as to human readers.\n   Management information is modeled\
    \ in classes.  Classes can be defined\n   from scratch or by derivation from a\
    \ parent class.  Derivation from\n   multiple parent classes is not possible.\
    \  The concept of classes is\n   described in Section 9.\n   Each class has a\
    \ number of attributes.  Each attribute represents an\n   atomic piece of information\
    \ of a base type, a sub-type of a base\n   type, or another class.  The concept\
    \ of attributes is described in\n   Section 9.2.\n   The base types of SMIng include\
    \ signed and unsigned integers, octet\n   strings, enumeration types, bitset types,\
    \ and pointers.  Pointers are\n   references to class instances, attributes of\
    \ class instances, or\n   arbitrary identities.  The SMIng type system is described\
    \ in Section\n   3.\n   Related class and type definitions are defined in modules.\
    \  A module\n   may refer to definitions from other modules by importing identifiers\n\
    \   from those modules.  Each module may serve one or multiple purposes:\n   o\
    \  the definition of management classes,\n   o  the definition of events,\n  \
    \ o  the definition of derived types,\n   o  the definition of arbitrary untyped\
    \ identities serving as values\n      of pointers,\n   o  the definition of SMIng\
    \ extensions allowing the local module or\n      other modules to specify information\
    \ beyond the scope of the base\n      SMIng in a machine readable notation.  Some\
    \ extensions for the\n      application of SMIng in the SNMP framework are defined\
    \ in\n      [RFC3781],\n   o  the definition of information beyond the scope of\
    \ the base SMIng\n      statements, based on locally defined or imported SMIng\
    \ extensions.\n   Each module is identified by an upper-case identifier.  The\
    \ names of\n   all standard modules must be unique (but different versions of\
    \ the\n   same module should have the same name).  Developers of enterprise\n\
    \   modules are encouraged to choose names for their modules that will\n   have\
    \ a low probability of colliding with standard or other enterprise\n   modules,\
    \ e.g., by using the enterprise or organization name as a\n   prefix.\n"
- title: 2.1.  Identifiers
  contents:
  - "2.1.  Identifiers\n   Identifiers are used to identify different kinds of SMIng\
    \ items by\n   name.  Each identifier is valid in a namespace which depends on\
    \ the\n   type of the SMIng item being defined:\n   o  The global namespace contains\
    \ all module identifiers.\n   o  Each module defines a new namespace.  A module's\
    \ namespace may\n      contain definitions of extension identifiers, derived type\n\
    \      identifiers, identity identifiers, and class identifiers.\n      Furthermore,\
    \ a module may import identifiers of these kinds from\n      other modules.  All\
    \ these identifiers are also visible within all\n      inner namespaces of the\
    \ module.\n   o  Each class within a module defines a new namespace.  A class'\n\
    \      namespace may contain definitions of attribute identifiers and\n      event\
    \ identifiers.\n   o  Each enumeration type and bitset type defines a new namespace\
    \ of\n      its named numbers.  These named numbers are visible in each\n    \
    \  expression of a corresponding value, e.g., default values and\n      sub-typing\
    \ restrictions.\n   o  Extensions may define additional namespaces and have additional\n\
    \      rules of other namespaces' visibility.\n   Within every namespace each\
    \ identifier MUST be unique.\n   Each identifier starts with an upper-case or\
    \ lower-case character,\n   dependent on the kind of SMIng item, followed by zero\
    \ or more\n   letters, digits, and hyphens.\n   All identifiers defined in a namespace\
    \ MUST be unique and SHOULD NOT\n   only differ in case.  Identifiers MUST NOT\
    \ exceed 64 characters in\n   length.  Furthermore, the set of all identifiers\
    \ defined in all\n   modules of a single standardization body or organization\
    \ SHOULD be\n   unique and mnemonic.  This promotes a common language for humans\
    \ to\n   use when discussing a module.\n   To reference an item that is defined\
    \ in the local module, its\n   definition MUST sequentially precede the reference.\
    \  Thus, there MUST\n   NOT be any forward references.\n   To reference an item\
    \ that is defined in an external module it MUST be\n   imported (Section 5.1).\
    \  Identifiers that are neither defined nor\n   imported MUST NOT be visible in\
    \ the local module.\n   When identifiers from external modules are referenced,\
    \ there is the\n   possibility of name collisions.  As such, if different items\
    \ with the\n   same identifier are imported or if imported identifiers collide\
    \ with\n   identifiers of locally defined items, then this ambiguity is resolved\n\
    \   by prefixing those identifiers with the names of their modules and\n   the\
    \ namespace operator `::', i.e., `Module::item'.  Of course, this\n   notation\
    \ can be used to refer to identifiers even when there is no\n   name collision.\n\
    \   Note that SMIng core language keywords MUST NOT be imported.  See the\n  \
    \ `...Keyword' rules of the SMIng ABNF grammar in Appendix B for a list\n   of\
    \ those keywords.\n"
- title: 3.  Base Types and Derived Types
  contents:
  - "3.  Base Types and Derived Types\n   SMIng has a set of base types, similar to\
    \ those of many programming\n   languages, but with some differences due to special\
    \ requirements from\n   the management information model.\n   Additional types\
    \ may be defined, derived from those base types or\n   from other derived types.\
    \  Derived types may use subtyping to\n   formally restrict the set of possible\
    \ values.  An initial set of\n   commonly used derived types is defined in the\
    \ SMIng standard module\n   NMRG-SMING [RFC3781].\n   The different base types\
    \ and their derived types allow different\n   kinds of subtyping, namely size\
    \ restrictions of octet strings\n   (Section 3.1), range restrictions of numeric\
    \ types (Section 3.4\n   through Section 3.10), restricted pointer types (Section\
    \ 3.2), and\n   restrictions on the sets of named numbers for enumeration types\n\
    \   (Section 3.11) and bit sets (Section 3.12).\n"
- title: 3.1.  OctetString
  contents:
  - "3.1.  OctetString\n   The OctetString base type represents arbitrary binary or\
    \ textual\n   data.  Although SMIng has a theoretical size limitation of 2^16-1\n\
    \   (65535) octets for this base type, module designers should realize\n   that\
    \ there may be implementation and interoperability limitations for\n   sizes in\
    \ excess of 255 octets.\n   Values of octet strings may be denoted as textual\
    \ data enclosed in\n   double quotes or as arbitrary binary data denoted as a\
    \ `0x'-prefixed\n   hexadecimal value of an even number of at least two hexadecimal\n\
    \   digits, where each pair of hexadecimal digits represents a single\n   octet.\
    \  Letters in hexadecimal values MAY be upper-case, but lower-\n   case characters\
    \ are RECOMMENDED.  Textual data may contain any number\n   (possibly zero) of\
    \ any 7-bit displayable ASCII characters, including\n   tab characters, spaces,\
    \ and line terminator characters (nl or cr &\n   nl).  Some characters require\
    \ a special encoding (see Section 4.2).\n   Textual data may span multiple lines,\
    \ where each subsequent line\n   prefix containing only white space up to the\
    \ column where the first\n   line's data starts SHOULD be skipped by parsers for\
    \ a better text\n   formatting.\n   When defining a type derived (directly or\
    \ indirectly) from the\n   OctetString base type, the size in octets may be restricted\
    \ by\n   appending a list of size ranges or explicit size values, separated by\n\
    \   pipe `|' characters, with the whole list enclosed in parenthesis.  A\n   size\
    \ range consists of a lower bound, two consecutive dots `..', and\n   an upper\
    \ bound.  Each value can be given in decimal or `0x'-prefixed\n   hexadecimal\
    \ notation.  Hexadecimal numbers must have an even number\n   of at least two\
    \ digits.  Size restricting values MUST NOT be\n   negative.  If multiple values\
    \ or ranges are given, they all MUST be\n   disjoint and MUST be in ascending\
    \ order.  If a size restriction is\n   applied to an already size restricted octet\
    \ string, the new\n   restriction MUST be equal or more limiting, that is, raising\
    \ the\n   lower bounds, reducing the upper bounds, removing explicit size\n  \
    \ values or ranges, or splitting ranges into multiple ranges with\n   intermediate\
    \ gaps.\n   Value Examples:\n      \"This is a multiline\n       textual data\
    \ example.\"         // legal\n      \"This is \"illegally\" quoted.\"   // illegal\
    \ quotes\n      \"This is \\\"legally\\\" quoted.\"   // legally encoded quotes\n\
    \      \"But this is 'ok', as well.\"    // legal apostrophe quoting\n      \"\
    \"                              // legal zero length\n      0x123            \
    \               // illegal odd hex length\n      0x534d496e670a              \
    \    // legal octet string\n   Restriction Examples:\n      OctetString (0 | 4..255)\
    \        // legal size spec\n      OctetString (4)                 // legal exact\
    \ size\n      OctetString (-1 | 1)            // illegal negative size\n     \
    \ OctetString (5 | 0)             // illegal ordering\n      OctetString (1 |\
    \ 1..10)         // illegal overlapping\n"
- title: 3.2.  Pointer
  contents:
  - "3.2.  Pointer\n   The Pointer base type represents values that reference class\n\
    \   instances, attributes of class instances, or arbitrary identities.\n   The\
    \ only values of the Pointer type that can be present in a module\n   can refer\
    \ to identities.  They are denoted as identifiers of the\n   concerned identities.\n\
    \   When defining a type derived (directly or indirectly) from the\n   Pointer\
    \ base type, the values may be restricted to a specific class,\n   attribute or\
    \ identity, and all (directly or indirectly) derived items\n   thereof by appending\
    \ the identifier of the appropriate construct\n   enclosed in parenthesis.\n \
    \  Value Examples:\n      null                          // legal identity name\n\
    \      snmpUDPDomain                 // legal identity name\n   Restriction Examples:\n\
    \      Pointer (snmpTransportDomain) // legal restriction\n"
- title: 3.3.  ObjectIdentifier
  contents:
  - "3.3.  ObjectIdentifier\n   The ObjectIdentifier base type represents administratively\
    \ assigned\n   names for use with SNMP and COPS-PR.  This type SHOULD NOT be used\
    \ in\n   protocol independent SMIng modules.  It is meant to be used in SNMP\n\
    \   and COPS-PR mappings of attributes of type Pointer (Section 3.2).\n   Values\
    \ of this type may be denoted as a sequence of numerical non-\n   negative sub-identifier\
    \ values in which each MUST NOT exceed 2^32-1\n   (4294967295).  Sub-identifiers\
    \ may be denoted in decimal or `0x'-\n   prefixed hexadecimal.  They are separated\
    \ by single dots and without\n   any intermediate white space.  Alternatively\
    \ (and preferred in most\n   cases), the first element may be a previously defined\
    \ or imported\n   lower-case identifier, representing a static object identifier\n\
    \   prefix.\n   Although the number of sub-identifiers in SMIng object identifiers\
    \ is\n   not limited, module designers should realize that there may be\n   implementations\
    \ that stick with the SMIv1/v2 limit of 128 sub-\n   identifiers.\n   Object identifier\
    \ derived types cannot be restricted in any way.\n   Value Examples:\n      1.3.6.1\
    \                     // legal numerical oid\n      mib-2.1                  \
    \   // legal oid with identifier prefix\n      internet.4.1.0x0627.0x01    //\
    \ legal oid with hex subids\n      iso.-1                      // illegal negative\
    \ subid\n      iso.org.6                   // illegal non-heading identifier\n\
    \      IF-MIB::ifNumber.0          // legal fully qualified instance oid\n"
- title: 3.4.  Integer32
  contents:
  - "3.4.  Integer32\n   The Integer32 base type represents integer values between\n\
    \   -2^31 (-2147483648) and 2^31-1 (2147483647).\n   Values of type Integer32\
    \ may be denoted as decimal or hexadecimal\n   numbers, where only decimal numbers\
    \ can be negative.  Decimal numbers\n   other than zero MUST NOT have leading\
    \ zero digits.  Hexadecimal\n   numbers are prefixed by `0x' and MUST have an\
    \ even number of at least\n   two hexadecimal digits, where letters MAY be upper-case,\
    \ but lower-\n   case characters are RECOMMENDED.\n   When defining a type derived\
    \ (directly or indirectly) from the\n   Integer32 base type, the set of possible\
    \ values may be restricted by\n   appending a list of ranges or explicit values,\
    \ separated by pipe `|'\n   characters, and the whole list enclosed in parenthesis.\
    \  A range\n   consists of a lower bound, two consecutive dots `..', and an upper\n\
    \   bound.  Each value can be given in decimal or `0x'-prefixed\n   hexadecimal\
    \ notation.  Hexadecimal numbers must have an even number\n   of at least two\
    \ digits.  If multiple values or ranges are given they\n   all MUST be disjoint\
    \ and MUST be in ascending order.  If a value\n   restriction is applied to an\
    \ already restricted type, the new\n   restriction MUST be equal or more limiting,\
    \ that is raising the lower\n   bounds, reducing the upper bounds, removing explicit\
    \ values or\n   ranges, or splitting ranges into multiple ranges with intermediate\n\
    \   gaps.\n   Value Examples:\n      015                         // illegal leading\
    \ zero\n      -123                        // legal negative value\n      - 1 \
    \                        // illegal intermediate space\n      0xabc          \
    \             // illegal hexadecimal value length\n      -0xff               \
    \        // illegal sign on hex value\n      0x80000000                  // illegal\
    \ value, too large\n      0xf00f                      // legal hexadecimal value\n\
    \   Restriction Examples:\n      Integer32 (0 | 5..10)       // legal range spec\n\
    \      Integer32 (5..10 | 2..3)    // illegal ordering\n      Integer32 (4..8\
    \ | 5..10)    // illegal overlapping\n"
- title: 3.5.  Integer64
  contents:
  - "3.5.  Integer64\n   The Integer64 base type represents integer values between\n\
    \   -2^63 (-9223372036854775808) and 2^63-1 (9223372036854775807).\n   Values\
    \ of type Integer64 may be denoted as decimal or hexadecimal\n   numbers, where\
    \ only decimal numbers can be negative.  Decimal numbers\n   other than zero MUST\
    \ NOT have leading zero digits.  Hexadecimal\n   numbers are prefixed by `0x'\
    \ and MUST have an even number of\n   hexadecimal digits, where letters MAY be\
    \ upper-case, but lower-case\n   characters are RECOMMENDED.\n   When defining\
    \ a type derived (directly or indirectly) from the\n   Integer64 base type, the\
    \ set of possible values may be restricted by\n   appending a list of ranges or\
    \ explicit values, separated by pipe `|'\n   characters, with the whole list enclosed\
    \ in parenthesis.  A range\n   consists of a lower bound, two consecutive dots\
    \ `..', and an upper\n   bound.  Each value can be given in decimal or `0x'-prefixed\n\
    \   hexadecimal notation.  Hexadecimal numbers must have an even number\n   of\
    \ at least two digits.  If multiple values or ranges are given, they\n   all MUST\
    \ be disjoint and MUST be in ascending order.  If a value\n   restriction is applied\
    \ to an already restricted type, the new\n   restriction MUST be equal or more\
    \ limiting, that is raising the lower\n   bounds, reducing the upper bounds, removing\
    \ explicit values or\n   ranges, or splitting ranges into multiple ranges with\
    \ intermediate\n   gaps.\n   Value Examples:\n      015                      \
    \   // illegal leading zero\n      -123                        // legal negative\
    \ value\n      - 1                         // illegal intermediate space\n   \
    \   0xabc                       // illegal hexadecimal value length\n      -0xff\
    \                       // illegal sign on hex value\n      0x80000000       \
    \           // legal value\n   Restriction Examples:\n      Integer64 (0 | 5..10)\
    \       // legal range spec\n      Integer64 (5..10 | 2..3)    // illegal ordering\n\
    \      Integer64 (4..8 | 5..10)    // illegal overlapping\n"
- title: 3.6.  Unsigned32
  contents:
  - "3.6.  Unsigned32\n   The Unsigned32 base type represents positive integer values\
    \ between 0\n   and 2^32-1 (4294967295).\n   Values of type Unsigned32 may be\
    \ denoted as decimal or hexadecimal\n   numbers.  Decimal numbers other than zero\
    \ MUST NOT have leading zero\n   digits.  Hexadecimal numbers are prefixed by\
    \ `0x' and MUST have an\n   even number of hexadecimal digits, where letters MAY\
    \ be upper-case,\n   but lower-case characters are RECOMMENDED.\n   When defining\
    \ a type derived (directly or indirectly) from the\n   Unsigned32 base type, the\
    \ set of possible values may be restricted by\n   appending a list of ranges or\
    \ explicit values, separated by pipe `|'\n   characters, with the whole list enclosed\
    \ in parenthesis.  A range\n   consists of a lower bound, two consecutive dots\
    \ `..', and an upper\n   bound.  Each value can be given in decimal or `0x'-prefixed\n\
    \   hexadecimal notation.  Hexadecimal numbers must have an even number\n   of\
    \ at least two digits.  If multiple values or ranges are given, they\n   all MUST\
    \ be disjoint and MUST be in ascending order.  If a value\n   restriction is applied\
    \ to an already restricted type, the new\n   restriction MUST be equal or more\
    \ limiting, that is raising the lower\n   bounds, reducing the upper bounds, removing\
    \ explicit values or\n   ranges, or splitting ranges into multiple ranges with\
    \ intermediate\n   gaps.\n   Value Examples:\n      015                      \
    \   // illegal leading zero\n      -123                        // illegal negative\
    \ value\n      0xabc                       // illegal hexadecimal value length\n\
    \      0x80000000                  // legal hexadecimal value\n      0x8080000000\
    \                // illegal value, too large\n   Restriction Examples:\n     \
    \ Unsigned32 (0 | 5..10)       // legal range spec\n      Unsigned32 (5..10 |\
    \ 2..3)    // illegal ordering\n      Unsigned32 (4..8 | 5..10)    // illegal\
    \ overlapping\n"
- title: 3.7.  Unsigned64
  contents:
  - "3.7.  Unsigned64\n   The Unsigned64 base type represents positive integer values\
    \ between 0\n   and 2^64-1 (18446744073709551615).\n   Values of type Unsigned64\
    \ may be denoted as decimal or hexadecimal\n   numbers.  Decimal numbers other\
    \ than zero MUST NOT have leading zero\n   digits.  Hexadecimal numbers are prefixed\
    \ by `0x' and MUST have an\n   even number of hexadecimal digits, where letters\
    \ MAY be upper-case,\n   but lower-case characters are RECOMMENDED.\n   When defining\
    \ a type derived (directly or indirectly) from the\n   Unsigned64 base type, the\
    \ set of possible values may be restricted by\n   appending a list of ranges or\
    \ explicit values, separated by pipe `|'\n   characters, with the whole list enclosed\
    \ in parenthesis.  A range\n   consists of a lower bound, two consecutive dots\
    \ `..', and an upper\n   bound.  Each value can be given in decimal or `0x'-prefixed\n\
    \   hexadecimal notation.  Hexadecimal numbers must have an even number\n   of\
    \ at least two digits.  If multiple values or ranges are given, they\n   all MUST\
    \ be disjoint and MUST be in ascending order.  If a value\n   restriction is applied\
    \ to an already restricted type, the new\n   restriction MUST be equal or more\
    \ limiting, that is raising the lower\n   bounds, reducing the upper bounds, removing\
    \ explicit values or\n   ranges, or splitting ranges into multiple ranges with\
    \ intermediate\n   gaps.\n   Value Examples:\n      015                      \
    \   // illegal leading zero\n      -123                        // illegal negative\
    \ value\n      0xabc                       // illegal hexadecimal value length\n\
    \      0x8080000000                // legal hexadecimal value\n   Restriction\
    \ Examples:\n      Unsigned64 (1..10000000000) // legal range spec\n      Unsigned64\
    \ (5..10 | 2..3)   // illegal ordering\n"
- title: 3.8.  Float32
  contents:
  - "3.8.  Float32\n   The Float32 base type represents floating point values of single\n\
    \   precision as described by [IEEE754].\n   Values of type Float32 may be denoted\
    \ as a decimal fraction with an\n   optional exponent, as known from many programming\
    \ languages.  See the\n   grammar rule `floatValue' of Appendix B for the detailed\
    \ syntax.\n   Special values are `snan' (signalling Not-a-Number), `qnan' (quiet\n\
    \   Not-a-Number), `neginf' (negative infinity), and `posinf' (positive\n   infinity).\
    \  Note that -0.0 and +0.0 are different floating point\n   values.  0.0 is equal\
    \ to +0.0.\n   When defining a type derived (directly or indirectly) from the\n\
    \   Float32 base type, the set of possible values may be restricted by\n   appending\
    \ a list of ranges or explicit values, separated by pipe `|'\n   characters, with\
    \ the whole list enclosed in parenthesis.  A range\n   consists of a lower bound,\
    \ two consecutive dots `..', and an upper\n   bound.  If multiple values or ranges\
    \ are given, they all MUST be\n   disjoint and MUST be in ascending order.  If\
    \ a value restriction is\n   applied to an already restricted type, the new restriction\
    \ MUST be\n   equal or more limiting, that is raising the lower bounds, reducing\n\
    \   the upper bounds, removing explicit values or ranges, or splitting\n   ranges\
    \ into multiple ranges with intermediate gaps.  The special\n   values `snan',\
    \ `qnan', `neginf', and `posinf' must be explicitly\n   listed in restrictions\
    \ if they shall be included, where `snan' and\n   `qnan' cannot be used in ranges.\n\
    \   Note that encoding is not subject to this specification.  It has to\n   be\
    \ described by protocols that transport objects of type Float32.\n   Note also\
    \ that most floating point encodings disallow the\n   representation of many values\
    \ that can be written as decimal\n   fractions as used in SMIng for human readability.\
    \  Therefore,\n   explicit values in floating point type restrictions should be\
    \ handled\n   with care.\n   Value Examples:\n      00.1                     \
    \  // illegal leading zero\n      3.1415                     // legal value\n\
    \      -2.5E+3                    // legal negative exponential value\n   Restriction\
    \ Examples:\n      Float32 (-1.0..1.0)        // legal range spec\n      Float32\
    \ (1 | 3.3 | 5)      // legal, probably unrepresentable 3.3\n      Float32 (neginf..-0.0)\
    \     // legal range spec\n      Float32 (-10.0..10.0 | 0)  // illegal overlapping\n"
- title: 3.9.  Float64
  contents:
  - "3.9.  Float64\n   The Float64 base type represents floating point values of double\n\
    \   precision as described by [IEEE754].\n   Values of type Float64 may be denoted\
    \ as a decimal fraction with an\n   optional exponent, as known from many programming\
    \ languages.  See the\n   grammar rule `floatValue' of Appendix B for the detailed\
    \ syntax.\n   Special values are `snan' (signalling Not-a-Number), `qnan' (quiet\n\
    \   Not-a-Number), `neginf' (negative infinity), and `posinf' (positive\n   infinity).\
    \  Note that -0.0 and +0.0 are different floating point\n   values.  0.0 is equal\
    \ to +0.0.\n   When defining a type derived (directly or indirectly) from the\n\
    \   Float64 base type, the set of possible values may be restricted by\n   appending\
    \ a list of ranges or explicit values, separated by pipe `|'\n   characters, with\
    \ the whole list enclosed in parenthesis.  A range\n   consists of a lower bound,\
    \ two consecutive dots `..', and an upper\n   bound.  If multiple values or ranges\
    \ are given, they all MUST be\n   disjoint and MUST be in ascending order.  If\
    \ a value restriction is\n   applied to an already restricted type, the new restriction\
    \ MUST be\n   equal or more limiting, that is raising the lower bounds, reducing\n\
    \   the upper bounds, removing explicit values or ranges, or splitting\n   ranges\
    \ into multiple ranges with intermediate gaps.  The special\n   values `snan',\
    \ `qnan', `neginf', and `posinf' must be explicitly\n   listed in restrictions\
    \ if they shall be included, where `snan' and\n   `qnan' cannot be used in ranges.\n\
    \   Note that encoding is not subject to this specification.  It has to\n   be\
    \ described by protocols that transport objects of type Float64.\n   Note also\
    \ that most floating point encodings disallow the\n   representation of many values\
    \ that can be written as decimal\n   fractions as used in SMIng for human readability.\
    \  Therefore,\n   explicit values in floating point type restrictions should be\
    \ handled\n   with care.\n   Value Examples:\n      00.1                     \
    \  // illegal leading zero\n      3.1415                     // legal value\n\
    \      -2.5E+3                    // legal negative exponential value\n   Restriction\
    \ Examples:\n      Float64 (-1.0..1.0)        // legal range spec\n      Float64\
    \ (1 | 3.3 | 5)      // legal, probably unrepresentable 3.3\n      Float64 (neginf..-0.0)\
    \     // legal range spec\n      Float64 (-10.0..10.0 | 0)  // illegal overlapping\n"
- title: 3.10.  Float128
  contents:
  - "3.10.  Float128\n   The Float128 base type represents floating point values of\
    \ quadruple\n   precision as described by [IEEE754].\n   Values of type Float128\
    \ may be denoted as a decimal fraction with an\n   optional exponent, as known\
    \ from many programming languages.  See the\n   grammar rule `floatValue' of Appendix\
    \ B for the detailed syntax.\n   Special values are `snan' (signalling Not-a-Number),\
    \ `qnan' (quiet\n   Not-a-Number), `neginf' (negative infinity), and `posinf'\
    \ (positive\n   infinity).  Note that -0.0 and +0.0 are different floating point\n\
    \   values.  0.0 is equal to +0.0.\n   When defining a type derived (directly\
    \ or indirectly) from the\n   Float128 base type, the set of possible values may\
    \ be restricted by\n   appending a list of ranges or explicit values, separated\
    \ by pipe `|'\n   characters, with the whole list enclosed in parenthesis.  A\
    \ range\n   consists of a lower bound, two consecutive dots `..', and an upper\n\
    \   bound.  If multiple values or ranges are given, they all MUST be\n   disjoint\
    \ and MUST be in ascending order.  If a value restriction is\n   applied to an\
    \ already restricted type, the new restriction MUST be\n   equal or more limiting,\
    \ that is raising the lower bounds, reducing\n   the upper bounds, removing explicit\
    \ values or ranges, or splitting\n   ranges into multiple ranges with intermediate\
    \ gaps.  The special\n   values `snan', `qnan', `neginf', and `posinf' must be\
    \ explicitly\n   listed in restrictions if they shall be included, where `snan'\
    \ and\n   `qnan' cannot be used in ranges.\n   Note that encoding is not subject\
    \ to this specification.  It has to\n   be described by protocols that transport\
    \ objects of type Float128.\n   Note also that most floating point encodings disallow\
    \ the\n   representation of many values that can be written as decimal\n   fractions\
    \ as used in SMIng for human readability.  Therefore,\n   explicit values in floating\
    \ point type restrictions should be handled\n   with care.\n   Value Examples:\n\
    \      00.1                       // illegal leading zero\n      3.1415      \
    \               // legal value\n      -2.5E+3                    // legal negative\
    \ exponential value\n   Restriction Examples:\n      Float128 (-1.0..1.0)    \
    \    // legal range spec\n      Float128 (1 | 3.3 | 5)      // legal, probably\
    \ unrepresentable 3.3\n      Float128 (neginf..-0.0)     // legal range spec\n\
    \      Float128 (-10.0..10.0 | 0)  // illegal overlapping\n"
- title: 3.11.  Enumeration
  contents:
  - "3.11.  Enumeration\n   The Enumeration base type represents values from a set\
    \ of integers in\n   the range between -2^31 (-2147483648) and 2^31-1 (2147483647),\
    \ where\n   each value has an assigned name.  The list of those named numbers\
    \ has\n   to be comma-separated, enclosed in parenthesis, and appended to the\n\
    \   `Enumeration' keyword.  Each named number is denoted by its lower-\n   case\
    \ identifier followed by the assigned integer value, denoted as a\n   decimal\
    \ or `0x'-prefixed hexadecimal number, enclosed in parenthesis.\n   Hexadecimal\
    \ numbers must have an even number of at least two digits.\n   Every name and\
    \ every number in an enumeration type MUST be unique.\n   It is RECOMMENDED that\
    \ values be positive, start at 1, and be\n   numbered contiguously.  All named\
    \ numbers MUST be given in ascending\n   order.\n   Values of enumeration types\
    \ may be denoted as decimal or `0x'-\n   prefixed hexadecimal numbers or preferably\
    \ as their assigned names.\n   Hexadecimal numbers must have an even number of\
    \ at least two digits.\n   When types are derived (directly or indirectly) from\
    \ an enumeration\n   type, the set of named numbers may be equal or restricted\
    \ by removing\n   one or more named numbers, but no named numbers may be added\
    \ or\n   changed regarding its name, value, or both.\n   Type and Value Examples:\n\
    \   Enumeration (up(1), down(2), testing(3))\n   Enumeration (down(2), up(1))\
    \ // illegal order\n   0                            // legal (though not recommended)\
    \ value\n   up                           // legal value given by name\n   2  \
    \                          // legal value given by number\n"
- title: 3.12.  Bits
  contents:
  - "3.12.  Bits\n   The Bits base type represents bit sets.  That is, a Bits value\
    \ is a\n   set of flags identified by small integer numbers starting at 0.  Each\n\
    \   bit number has an assigned name.  The list of those named numbers has\n  \
    \ to be comma-separated, enclosed in parenthesis, and appended to the\n   `Bits'\
    \ keyword.  Each named number is denoted by its lower-case\n   identifier followed\
    \ by the assigned integer value, denoted as a\n   decimal or `0x'-prefixed hexadecimal\
    \ number, enclosed in parenthesis.\n   Hexadecimal numbers must have an even number\
    \ of at least two digits.\n   Every name and every number in a bits type MUST\
    \ be unique.  It is\n   RECOMMENDED that numbers start at 0 and be numbered contiguously.\n\
    \   Negative numbers are forbidden.  All named numbers MUST be given in\n   ascending\
    \ order.\n   Values of bits types may be denoted as a comma-separated list of\n\
    \   decimal or `0x'-prefixed hexadecimal numbers or preferably their\n   assigned\
    \ names enclosed in parenthesis.  Hexadecimal numbers must\n   have an even number\
    \ of at least two digits.  There MUST NOT be any\n   element (by name or number)\
    \ listed more than once.  Elements MUST be\n   listed in ascending order.\n  \
    \ When defining a type derived (directly or indirectly) from a bits\n   type,\
    \ the set of named numbers may be restricted by removing one or\n   more named\
    \ numbers, but no named numbers may be added or changed\n   regarding its name,\
    \ value, or both.\n   Type and Value Examples:\n      Bits (readable(0), writable(1),\
    \ executable(2))\n      Bits (writable(1), readable(0) // illegal order\n    \
    \  ()                          // legal empty value\n      (readable, writable,\
    \ 2)     // legal value\n      (0, readable, executable)   // illegal, readable(0)\
    \ appears twice\n      (writable, 4)               // illegal, element 4 out of\
    \ range\n"
- title: 3.13.  Display Formats
  contents:
  - "3.13.  Display Formats\n   Attribute and type definitions allow the specification\
    \ of a format to\n   be used when a value of that attribute or an attribute of\
    \ that type\n   is displayed.  Format specifications are represented as textual\
    \ data.\n   When the attribute or type has an underlying base type of Integer32,\n\
    \   Integer64, Unsigned32, or Unsigned64, the format consists of an\n   integer-format\
    \ specification containing two parts.  The first part is\n   a single character\
    \ suggesting a display format, either: `x' for\n   hexadecimal, `d' for decimal,\
    \ `o' for octal, or `b' for binary.  For\n   all types, when rendering the value,\
    \ leading zeros are omitted, and\n   for negative values, a minus sign is rendered\
    \ immediately before the\n   digits.  The second part is always omitted for `x',\
    \ `o', and `b', and\n   need not be present for `d'.  If present, the second part\
    \ starts with\n   a hyphen and is followed by a decimal number, which defines\
    \ the\n   implied decimal point when rendering the value.  For example `d-2'\n\
    \   suggests that a value of 1234 be rendered as `12.34'.\n   When the attribute\
    \ or type has an underlying base type of\n   OctetString, the format consists\
    \ of one or more octet-format\n   specifications.  Each specification consists\
    \ of five parts, with each\n   part using and removing zero or more of the next\
    \ octets from the\n   value and producing the next zero or more characters to\
    \ be displayed.\n   The octets within the value are processed in order of significance,\n\
    \   most significant first.\n   The five parts of a octet-format specification\
    \ are:\n   1. The (optional) repeat indicator.  If present, this part is a `*',\n\
    \      and indicates that the current octet of the value is to be used as\n  \
    \    the repeat count.  The repeat count is an unsigned integer (which\n     \
    \ may be zero) specifying how many times the remainder of this\n      octet-format\
    \ specification should be successively applied.  If the\n      repeat indicator\
    \ is not present, the repeat count is one.\n   2. The octet length: one or more\
    \ decimal digits specifying the number\n      of octets of the value to be used\
    \ and formatted by this octet-\n      specification.  Note that the octet length\
    \ can be zero.  If less\n      than this number of octets remain in the value,\
    \ then the lesser\n      number of octets are used.\n   3. The display format,\
    \ either: `x' for hexadecimal, `d' for decimal,\n      `o' for octal, `a' for\
    \ ASCII, or `t' for UTF-8 [RFC3629].  If the\n      octet length part is greater\
    \ than one, and the display format part\n      refers to a numeric format, then\
    \ network byte-ordering (big-endian\n      encoding) is used to interpret the\
    \ octets in the value.  The\n      octets processed by the `t' display format\
    \ do not necessarily form\n      an integral number of UTF-8 characters.  Trailing\
    \ octets which do\n      not form a valid UTF-8 encoded character are discarded.\n\
    \   4. The (optional) display separator character.  If present, this part\n  \
    \    is a single character produced for display after each application\n     \
    \ of this octet-specification; however, this character is not\n      produced\
    \ for display if it would be immediately followed by the\n      display of the\
    \ repeat terminator character for this octet\n      specification.  This character\
    \ can be any character other than a\n      decimal digit and a `*'.\n   5. The\
    \ (optional) repeat terminator character, which can be present\n      only if\
    \ the display separator character is present and this octet\n      specification\
    \ begins with a repeat indicator.  If present, this\n      part is a single character\
    \ produced after all the zero or more\n      repeated applications (as given by\
    \ the repeat count) of this octet\n      specification.  This character can be\
    \ any character other than a\n      decimal digit and a `*'.\n   Output of a display\
    \ separator character or a repeat terminator\n   character is suppressed if it\
    \ would occur as the last character of\n   the display.\n   If the octets of the\
    \ value are exhausted before all the octet format\n   specifications have been\
    \ used, then the excess specifications are\n   ignored.  If additional octets\
    \ remain in the value after interpreting\n   all the octet format specifications,\
    \ then the last octet format\n   specification is re-interpreted to process the\
    \ additional octets,\n   until no octets remain in the value.\n   Note that for\
    \ some types, no format specifications are defined.  For\n   derived types and\
    \ attributes that are based on such types, format\n   specifications SHOULD be\
    \ omitted.  Implementations MUST ignore format\n   specifications they cannot\
    \ interpret.  Also note that the SMIng\n   grammar (Appendix B) does not specify\
    \ the syntax of format\n   specifications.\n   Display Format Examples:\n    \
    \  Base Type   Format              Example Value    Rendered Value\n      -----------\
    \ ------------------- ---------------- -----------------\n      OctetString 255a\
    \                \"Hello World.\"   Hello World.\n      OctetString 1x:      \
    \           \"Hello!\"         48:65:6c:6c:6f:21\n      OctetString 1d:1d:1d.1d,1a1d:1d\
    \ 0x0d1e0f002d0400 13:30:15.0,-4:0\n      OctetString 1d.1d.1d.1d/2d      0x0a0000010400\
    \   10.0.0.1/1024\n      OctetString *1x:/1x:            0x02aabbccddee   aa:bb/cc:dd:ee\n\
    \      Integer32   d-2                 1234             12.34\n"
- title: 4.  The SMIng File Structure
  contents:
  - "4.  The SMIng File Structure\n   The topmost container of SMIng information is\
    \ a file.  An SMIng file\n   may contain zero, one or more modules.  It is RECOMMENDED\
    \ that\n   modules be stored into separate files by their module names, where\n\
    \   possible.  However, for dedicated purposes, it may be reasonable to\n   collect\
    \ several modules in a single file.\n   The top level SMIng construct is the `module'\
    \ statement (Section 5)\n   that defines a single SMIng module.  A module contains\
    \ a sequence of\n   sections in an obligatory order with different kinds of definitions.\n\
    \   Whether these sections contain statements or remain empty mainly\n   depends\
    \ on the purpose of the module.\n"
- title: 4.1.  Comments
  contents:
  - "4.1.  Comments\n   Comments can be included at any position in an SMIng file,\
    \ except\n   between the characters of a single token like those of a quoted\n\
    \   string.  However, it is RECOMMENDED that all substantive descriptions\n  \
    \ be placed within an appropriate description clause, so that the\n   information\
    \ is available to SMIng parsers.\n   Comments commence with a pair of adjacent\
    \ slashes `//' and end at the\n   end of the line.\n"
- title: 4.2.  Textual Data
  contents:
  - "4.2.  Textual Data\n   Some statements, namely `organization', `contact', `description',\n\
    \   `reference', `abnf', `format', and `units', get a textual argument.\n   This\
    \ text, as well as representations of OctetString values, have to\n   be enclosed\
    \ in double quotes.  They may contain arbitrary characters\n   with the following\
    \ exceptional encoding rules:\n   A backslash character introduces a special character,\
    \ which depends\n   on the character that immediately follows the backslash:\n\
    \      \\n      new line\n      \\t      a tab character\n      \\\"      a double\
    \ quote\n      \\\\      a single backslash\n   If the text contains a line break\
    \ followed by whitespace which is\n   used to indent the text according to the\
    \ layout in the SMIng file,\n   this prefixing whitespace is stripped from the\
    \ text.\n"
- title: 4.3.  Statements and Arguments
  contents:
  - "4.3.  Statements and Arguments\n   SMIng has a very small set of basic grammar\
    \ rules based on the\n   concept of statements.  Each statement starts with a\
    \ lower-case\n   keyword identifying the statement, followed by a number (possibly\n\
    \   zero) of arguments.  An argument may be quoted text, an identifier, a\n  \
    \ value of any base type, a list of identifiers enclosed in parenthesis\n   `(\
    \ )', or a statement block enclosed in curly braces `{ }'.  Since\n   statement\
    \ blocks are valid arguments, it is possible to nest\n   statement sequences.\
    \  Each statement is terminated by a semicolon\n   `;'.\n   The core set of statements\
    \ may be extended using the SMIng\n   `extension' statement.  See Sections 6 and\
    \ 11 for details.\n   At places where a statement is expected, but an unknown\
    \ lower-case\n   word is read, those statements MUST be skipped up to the proper\n\
    \   semicolon, including nested statement blocks.\n"
- title: 5.  The module Statement
  contents:
  - "5.  The module Statement\n   The `module' statement is used as a container of\
    \ all definitions of a\n   single SMIng module.  It gets two arguments: an upper-case\
    \ module\n   name and a statement block that contains mandatory and optional\n\
    \   statements and sections of statements in an obligatory order:\n         module\
    \ <MODULE-NAME> {\n             <optional import statements>\n             <organization\
    \ statement>\n             <contact statement>\n             <description statement>\n\
    \             <optional reference statement>\n             <at least one revision\
    \ statement>\n             <optional extension statements>\n             <optional\
    \ typedef statements>\n             <optional identity statements>\n         \
    \    <optional class statements>\n         };\n   The optional `import' statements\
    \ (Section 5.1) are followed by the\n   mandatory `organization' (Section 5.2),\
    \ `contact' (Section 5.3), and\n   `description' (Section 5.4) statements and\
    \ the optional `reference'\n   statement (Section 5.5), which in turn are followed\
    \ by at least one\n   mandatory `revision' statement (Section 5.6).  The part\
    \ up to this\n   point defines the module's meta information, i.e., information\
    \ that\n   describes the whole module but does not define any items used by\n\
    \   applications in the first instance.  This part of a module is\n   followed\
    \ by its main definitions, namely SMIng extensions (Section\n   6), derived types\
    \ (Section 7), identities (Section 8), and classes\n   (Section 9).\n   See the\
    \ `moduleStatement' rule of the SMIng grammar (Appendix B) for\n   the formal\
    \ syntax of the `module' statement.\n"
- title: 5.1.  The module's import Statement
  contents:
  - "5.1.  The module's import Statement\n   The optional module's `import' statement\
    \ is used to import\n   identifiers from external modules into the local module's\
    \ namespace.\n   It gets two arguments: the name of the external module and a\
    \ comma-\n   separated list of one or more identifiers to be imported enclosed\
    \ in\n   parenthesis.\n   Multiple `import' statements for the same module but\
    \ with disjoint\n   lists of identifiers are allowed, though NOT RECOMMENDED.\
    \  The same\n   identifier from the same module MUST NOT be imported multiple\
    \ times.\n   To import identifiers with the same name from different modules might\n\
    \   be necessary and is allowed.  To distinguish\n   them in the local module,\
    \ they have to be referred by qualified\n   names.  Importing identifiers not\
    \ used in the local module is NOT\n   RECOMMENDED.\n   See the `importStatement'\
    \ rule of the SMIng grammar (Appendix B) for\n   the formal syntax of the `import'\
    \ statement.\n"
- title: 5.2.  The module's organization Statement
  contents:
  - "5.2.  The module's organization Statement\n   The module's `organization' statement,\
    \ which must be present, gets\n   one argument which is used to specify a textual\
    \ description of the\n   organization(s) under whose auspices this module was\
    \ developed.\n"
- title: 5.3.  The module's contact Statement
  contents:
  - "5.3.  The module's contact Statement\n   The module's `contact' statement, which\
    \ must be present, gets one\n   argument which is used to specify the name, postal\
    \ address, telephone\n   number, and electronic mail address of the person to\
    \ whom technical\n   queries concerning this module should be sent.\n"
- title: 5.4.  The module's description Statement
  contents:
  - "5.4.  The module's description Statement\n   The module's `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   the contents of this module.\n"
- title: 5.5.  The module's reference Statement
  contents:
  - "5.5.  The module's reference Statement\n   The module's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   management information, or some other document which provides\n\
    \   additional information relevant to this module.\n"
- title: 5.6.  The module's revision Statement
  contents:
  - "5.6.  The module's revision Statement\n   The module's `revision' statement is\
    \ repeatedly used to specify the\n   editorial revisions of the module, including\
    \ the initial revision.\n   It gets one argument which is a statement block that\
    \ holds detailed\n   information in an obligatory order.  A module MUST have at\
    \ least one\n   initial `revision' statement.  For every editorial change, a new\
    \ one\n   MUST be added in front of the revisions sequence, so that all\n   revisions\
    \ are in reverse chronological order.\n   See the `revisionStatement' rule of\
    \ the SMIng grammar (Appendix B)\n   for the formal syntax of the `revision' statement.\n"
- title: 5.6.1.  The revision's date Statement
  contents:
  - "5.6.1.  The revision's date Statement\n   The revision's `date' statement, which\
    \ must be present, gets one\n   argument which is used to specify the date and\
    \ time of the revision\n   in the format `YYYY-MM-DD HH:MM' or `YYYY-MM-DD' which\
    \ implies the\n   time `00:00'.  The time is always given in UTC.\n   See the\
    \ `date' rule of the SMIng grammar (Appendix B) for the formal\n   syntax of the\
    \ revision's `date' statement.\n"
- title: 5.6.2.  The revision's description Statement
  contents:
  - "5.6.2.  The revision's description Statement\n   The revision's `description'\
    \ statement, which must be present, gets\n   one argument which is used to specify\
    \ a high-level textual\n   description of the revision.\n"
- title: 5.7.  Usage Example
  contents:
  - "5.7.  Usage Example\n   Consider how a skeletal module might be constructed:\n\
    \   module ACME-MIB {\n     import NMRG-SMING (DisplayString);\n     organization\n\
    \               \"IRTF Network Management Research Group (NMRG)\";\n     contact\
    \   \"IRTF Network Management Research Group (NMRG)\n                http://www.ibr.cs.tu-bs.de/projects/nmrg/\n\
    \                Joe L. User\n                ACME, Inc.\n                42 Anywhere\
    \ Drive\n                Nowhere, CA 95134\n                USA\n            \
    \    Phone: +1 800 555 0815\n                EMail: joe@acme.example.com\";\n\
    \     description\n               \"The module for entities implementing the ACME\
    \ protocol.\n                Copyright (C) The Internet Society (2004).\n    \
    \            All Rights Reserved.\n                This version of this MIB module\
    \ is part of RFC 3780,\n                see the RFC itself for legal notices.\"\
    ;\n     revision {\n       date            \"2003-12-16\";\n       description\n\
    \               \"Initial revision, published as RFC 3780.\";\n     };\n     //\
    \ ... further definitions ...\n   }; // end of module ACME-MIB.\n"
- title: 6.  The extension Statement
  contents:
  - "6.  The extension Statement\n   The `extension' statement defines new statements\
    \ to be used in the\n   local module following this extension statement definition\
    \ or in\n   external modules that may import this extension statement definition.\n\
    \   The `extension' statement gets two arguments: a lower-case extension\n   statement\
    \ identifier and a statement block that holds detailed\n   extension information\
    \ in an obligatory order.\n   Extension statement identifiers SHOULD NOT contain\
    \ any upper-case\n   characters.\n   Note that the SMIng extension feature does\
    \ not allow the formal\n   specification of the context, or argument syntax and\
    \ semantics of an\n   extension.  Its only purpose is to declare the existence\
    \ of an\n   extension and to allow a unique reference to an extension.  See\n\
    \   Section 11 for detailed information on extensions and [RFC3781] for\n   mappings\
    \ of SMIng definitions to SNMP, which is formally defined as\n   an extension.\n\
    \   See the `extensionStatement' rule of the SMIng grammar (Appendix B)\n   for\
    \ the formal syntax of the `extension' statement.\n"
- title: 6.1.  The extension's status Statement
  contents:
  - "6.1.  The extension's status Statement\n   The extension's `status' statement,\
    \ which must be present, gets one\n   argument which is used to specify whether\
    \ this extension definition\n   is current or historic.  The value `current' means\
    \ that the\n   definition is current and valid.  The value `obsolete' means the\n\
    \   definition is obsolete and should not be implemented and/or can be\n   removed\
    \ if previously implemented.  While the value `deprecated' also\n   indicates\
    \ an obsolete definition, it permits new/continued\n   implementation in order\
    \ to foster interoperability with older/\n   existing implementations.\n"
- title: 6.2.  The extension's description Statement
  contents:
  - "6.2.  The extension's description Statement\n   The extension's `description'\
    \ statement, which must be present, gets\n   one argument which is used to specify\
    \ a high-level textual\n   description of the extension statement.\n   It is RECOMMENDED\
    \ that information on the extension's context, its\n   semantics, and implementation\
    \ conditions be included.  See also\n   Section 11.\n"
- title: 6.3.  The extension's reference Statement
  contents:
  - "6.3.  The extension's reference Statement\n   The extension's `reference' statement,\
    \ which need not be present,\n   gets one argument which is used to specify a\
    \ textual cross-reference\n   to some other document, either another module which\
    \ defines related\n   extension definitions, or some other document which provides\n\
    \   additional information relevant to this extension.\n"
- title: 6.4.  The extension's abnf Statement
  contents:
  - "6.4.  The extension's abnf Statement\n   The extension's `abnf' statement, which\
    \ need not be present, gets one\n   argument which is used to specify a formal\
    \ ABNF [RFC2234] grammar\n   definition of the extension.  This grammar can reference\
    \ rule names\n   from the core SMIng grammar (Appendix B).\n   Note that the `abnf'\
    \ statement should contain only pure ABNF and no\n   additional text, though comments\
    \ prefixed by a semicolon are allowed\n   but should probably be moved to the\
    \ description statement.  Note that\n   double quotes within the ABNF grammar\
    \ have to be represented as `\\\"'\n   according to Section 4.2.\n"
- title: 6.5.  Usage Example
  contents:
  - "6.5.  Usage Example\n   extension severity {\n     status  current;\n     description\n\
    \            \"The optional severity extension statement can only\n          \
    \   be applied to the statement block of an SMIng class'\n             event definition.\
    \ If it is present it denotes the\n             severity level of the event in\
    \ a range from 0\n             (emergency) to 7 (debug).\";\n     abnf\n     \
    \       \"severityStatement = severityKeyword sep number optsep \\\";\\\"\n  \
    \           severityKeyword   = \\\"severity\\\"\";\n   };\n"
- title: 7.  The typedef Statement
  contents:
  - "7.  The typedef Statement\n   The `typedef' statement defines new data types\
    \ to be used in the\n   local module or in external modules.  It gets two arguments:\
    \  an\n   upper-case type identifier and a statement block that holds detailed\n\
    \   type information in an obligatory order.\n   Type identifiers SHOULD NOT consist\
    \ of all upper-case characters and\n   SHOULD NOT contain hyphens.\n   See the\
    \ `typedefStatement' rule of the SMIng grammar (Appendix B) for\n   the formal\
    \ syntax of the `typedef' statement.\n"
- title: 7.1.  The typedef's type Statement
  contents:
  - "7.1.  The typedef's type Statement\n   The typedef's `type' statement, which\
    \ must be present, gets one\n   argument which is used to specify the type from\
    \ which this type is\n   derived.  Optionally, type restrictions may be applied\
    \ to the new\n   type by appending subtyping information according to the rules\
    \ of the\n   base type.  See Section 3 for SMIng base types and their type\n \
    \  restrictions.\n"
- title: 7.2.  The typedef's default Statement
  contents:
  - "7.2.  The typedef's default Statement\n   The typedef's `default' statement,\
    \ which need not be present, gets\n   one argument which is used to specify an\
    \ acceptable default value for\n   attributes of this type.  A default value may\
    \ be used when an\n   attribute instance is created.  That is, the value is a\
    \ \"hint\" to\n   implementors.\n   The value of the `default' statement must,\
    \ of course, correspond to\n   the (probably restricted) type specified in the\
    \ typedef's `type'\n   statement.\n   The default value of a type may be overwritten\
    \ by a default value of\n   an attribute of this type.\n   Note that for some\
    \ types, default values make no sense.\n"
- title: 7.3.  The typedef's format Statement
  contents:
  - "7.3.  The typedef's format Statement\n   The typedef's `format' statement, which\
    \ need not be present, gets one\n   argument which is used to give a hint as to\
    \ how the value of an\n   instance of an attribute of this type might be displayed.\
    \  See\n   Section 3.13 for a description of format specifications.\n   If no\
    \ format is specified, it is inherited from the type given in the\n   `type' statement.\
    \  On the other hand, the format specification of a\n   type may be semantically\
    \ refined by a format specification of an\n   attribute of this type.\n"
- title: 7.4.  The typedef's units Statement
  contents:
  - "7.4.  The typedef's units Statement\n   The typedef's `units' statement, which\
    \ need not be present, gets one\n   argument which is used to specify a textual\
    \ definition of the units\n   associated with attributes of this type.\n   If\
    \ no units are specified, they are inherited from the type given in\n   the `type'\
    \ statement.  On the other hand, the units specification of\n   a type may be\
    \ semantically refined by a units specification of an\n   attribute of this type.\n\
    \   The units specification has to be appropriate for values displayed\n   according\
    \ to the typedef's format specification, if present.  For\n   example, if the\
    \ type defines frequency values of type Unsigned64\n   measured in thousands of\
    \ Hertz, the format specification should be\n   `d-3' and the units specification\
    \ should be `Hertz' or `Hz'.  If the\n   format specification would be omitted,\
    \ the units specification should\n   be `Milli-Hertz' or `mHz'.  Authors of SMIng\
    \ modules should pay\n   attention to keep format and units specifications in\
    \ sync.\n   Application implementors MUST NOT implement units specifications\n\
    \   without implementing format specifications.\n"
- title: 7.5.  The typedef's status Statement
  contents:
  - "7.5.  The typedef's status Statement\n   The typedef's `status' statement, which\
    \ must be present, gets one\n   argument which is used to specify whether this\
    \ type definition is\n   current or historic.  The value `current' means that\
    \ the definition\n   is current and valid.  The value `obsolete' means the definition\
    \ is\n   obsolete and should not be implemented and/or can be removed if\n   previously\
    \ implemented.  While the value `deprecated' also indicates\n   an obsolete definition,\
    \ it permits new/continued implementation in\n   order to foster interoperability\
    \ with older/existing implementations.\n   Derived types SHOULD NOT be defined\
    \ as `current' if their underlying\n   type is `deprecated' or `obsolete'.  Similarly,\
    \ they SHOULD NOT be\n   defined as `deprecated' if their underlying type is `obsolete'.\n\
    \   Nevertheless, subsequent revisions of the underlying type cannot be\n   avoided,\
    \ but SHOULD be taken into account in subsequent revisions of\n   the local module.\n"
- title: 7.6.  The typedef's description Statement
  contents:
  - "7.6.  The typedef's description Statement\n   The typedef's `description' statement,\
    \ which must be present, gets\n   one argument which is used to specify a high-level\
    \ textual\n   description of the newly defined type.\n   It is RECOMMENDED that\
    \ all semantic definitions necessary for\n   implementation, and to embody any\
    \ information which would otherwise\n   be communicated in any commentary annotations\
    \ associated with this\n   type definition be included.\n"
- title: 7.7.  The typedef's reference Statement
  contents:
  - "7.7.  The typedef's reference Statement\n   The typedef's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related type\n   definitions, or some other document which provides\
    \ additional\n   information relevant to this type definition.\n"
- title: 7.8.  Usage Examples
  contents:
  - "7.8.  Usage Examples\n   typedef RptrOperStatus {\n     type            Enumeration\
    \ (other(1), ok(2), rptrFailure(3),\n                                  groupFailure(4),\
    \ portFailure(5),\n                                  generalFailure(6));\n   \
    \  default         other;       // undefined by default.\n     status        \
    \  deprecated;\n     description\n             \"A type to indicate the operational\
    \ state\n              of a repeater.\";\n     reference\n             \"[IEEE\
    \ 802.3 Mgt], 30.4.1.1.5, aRepeaterHealthState.\";\n   };\n   typedef SnmpTransportDomain\
    \ {\n     type            Pointer (snmpTransportDomain);\n     status        \
    \  current;\n     description\n             \"A pointer to an SNMP transport domain\
    \ identity.\";\n   };\n   typedef DateAndTime {\n     type            OctetString\
    \ (8 | 11);\n     format          \"2d-1d-1d,1d:1d:1d.1d,1a1d:1d\";\n     status\
    \          current;\n     description\n             \"A date-time specification.\n\
    \              ...\n              Note that if only local time is known, then\
    \ timezone\n              information (fields 8-10) is not present.\";\n     reference\n\
    \             \"RFC 2579, SNMPv2-TC.DateAndTime.\";\n   };\n   typedef Frequency\
    \ {\n     type            Unsigned64;\n     format          \"d-3\"\n     units\
    \           \"Hertz\";\n     status          current;\n     description\n    \
    \         \"A wide-range frequency specification measured\n              in thousands\
    \ of Hertz.\";\n   };\n"
- title: 8.  The identity Statement
  contents:
  - "8.  The identity Statement\n   The `identity' statement is used to define a new\
    \ abstract and untyped\n   identity.  Its only purpose is to denote its name,\
    \ semantics, and\n   existence.  An identity can be defined either from scratch\
    \ or derived\n   from a parent identity.  The `identity' statement gets the following\n\
    \   two arguments: The first argument is a lower-case identity\n   identifier.\
    \  The second argument is a statement block that holds\n   detailed identity information\
    \ in an obligatory order.\n   See the `identityStatement' rule of the SMIng grammar\
    \ (Appendix B)\n   for the formal syntax of the `identity' statement.\n"
- title: 8.1.  The identity's parent Statement
  contents:
  - "8.1.  The identity's parent Statement\n   The identity's `parent' statement must\
    \ be present for a derived\n   identity and must be absent for an identity defined\
    \ from scratch.  It\n   gets one argument which is used to specify the parent\
    \ identity from\n   which this identity shall be derived.\n"
- title: 8.2.  The identity's status Statement
  contents:
  - "8.2.  The identity's status Statement\n   The identity's `status' statement,\
    \ which must be present, gets one\n   argument which is used to specify whether\
    \ this identity definition is\n   current or historic.  The value `current' means\
    \ that the definition\n   is current and valid.  The value `obsolete' means the\
    \ definition is\n   obsolete and should not be implemented and/or can be removed\
    \ if\n   previously implemented.  While the value `deprecated' also indicates\n\
    \   an obsolete definition, it permits new/continued implementation in\n   order\
    \ to foster interoperability with older/existing implementations.\n   Derived\
    \ identities SHOULD NOT be defined as `current' if their parent\n   identity is\
    \ `deprecated' or `obsolete'.  Similarly, they SHOULD NOT\n   be defined as `deprecated'\
    \ if their parent identity is `obsolete'.\n   Nevertheless, subsequent revisions\
    \ of the parent identity cannot be\n   avoided, but SHOULD be taken into account\
    \ in subsequent revisions of\n   the local module.\n"
- title: 8.3.  The identity' description Statement
  contents:
  - "8.3.  The identity' description Statement\n   The identity's `description' statement,\
    \ which must be present, gets\n   one argument which is used to specify a high-level\
    \ textual\n   description of the newly defined identity.\n   It is RECOMMENDED\
    \ that all semantic definitions necessary for\n   implementation, and to embody\
    \ any information which would otherwise\n   be communicated in any commentary\
    \ annotations associated with this\n   identity definition be included.\n"
- title: 8.4.  The identity's reference Statement
  contents:
  - "8.4.  The identity's reference Statement\n   The identity's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   identity definitions, or some other document which provides\n\
    \   additional information relevant to this identity definition.\n"
- title: 8.5.  Usage Examples
  contents:
  - "8.5.  Usage Examples\n   identity null {\n     status  current;\n     description\n\
    \             \"An identity used to represent null pointer values.\";\n   };\n\
    \   identity snmpTransportDomain {\n     status  current;\n     description\n\
    \             \"A generic SNMP transport domain identity.\";\n   };\n   identity\
    \ snmpUDPDomain {\n     parent  snmpTransportDomain;\n     status  current;\n\
    \     description\n             \"The SNMP over UDP transport domain.\";\n   };\n"
- title: 9.  The class Statement
  contents:
  - "9.  The class Statement\n   The `class' statement is used to define a new class\
    \ that represents a\n   container of related attributes and events (Section 9.2,\
    \ Section\n   9.4).  A class can be defined either from scratch or derived from\
    \ a\n   parent class.  A derived class inherits all attributes and events of\n\
    \   the parent class and can be extended by additional attributes and\n   events.\n\
    \   The `class' statement gets the following two arguments: The first\n   argument\
    \ is an upper-case class identifier.  The second argument is a\n   statement block\
    \ that holds detailed class information in an\n   obligatory order.\n   See the\
    \ `classStatement' rule of the SMIng grammar (Appendix B) for\n   the formal syntax\
    \ of the `class' statement.\n"
- title: 9.1.  The class' extends Statement
  contents:
  - "9.1.  The class' extends Statement\n   The class' `extends' statement must be\
    \ present for a class derived\n   from a parent class and must be absent for a\
    \ class defined from\n   scratch.  It gets one argument which is used to specify\
    \ the parent\n   class from which this class shall be derived.\n"
- title: 9.2.  The class' attribute Statement
  contents:
  - "9.2.  The class' attribute Statement\n   The class' `attribute' statement, which\
    \ can be present zero, one or\n   multiple times, gets two arguments: the attribute\
    \ name and a\n   statement block that holds detailed attribute information in\
    \ an\n   obligatory order.\n"
- title: 9.2.1.  The attribute's type Statement
  contents:
  - "9.2.1.  The attribute's type Statement\n   The attribute's `type' statement must\
    \ be present.  It gets at least\n   one argument which is used to specify the\
    \ type of the attribute:\n   either a type name or a class name.  In case of a\
    \ type name, it may\n   be restricted by a second argument according to the restriction\
    \ rules\n   described in Section 3.\n"
- title: 9.2.2.  The attribute's access Statement
  contents:
  - "9.2.2.  The attribute's access Statement\n   The attribute's `access' statement\
    \ must be present for attributes\n   typed by a base type or derived type, and\
    \ must be absent for\n   attributes typed by a class.  It gets one argument which\
    \ is used to\n   specify whether it makes sense to read and/or write an instance\
    \ of\n   the attribute, or to include its value in an event.  This is the\n  \
    \ maximal level of access for the attribute.  This maximal level of\n   access\
    \ is independent of any administrative authorization policy.\n   The value `readwrite'\
    \ indicates that read and write access makes\n   sense.  The value `readonly'\
    \ indicates that read access makes sense,\n   but write access is never possible.\
    \  The value `eventonly' indicates\n   an object which is accessible only via\
    \ an event.\n   These values are ordered, from least to greatest access level:\n\
    \   `eventonly', `readonly', `readwrite'.\n"
- title: 9.2.3.  The attribute's default Statement
  contents:
  - "9.2.3.  The attribute's default Statement\n   The attribute's `default' statement\
    \ need not be present for\n   attributes typed by a base type or derived type,\
    \ and must be absent\n   for attributes typed by a class.  It gets one argument\
    \ which is used\n   to specify an acceptable default value for this attribute.\
    \  A default\n   value may be used when an attribute instance is created.  That\
    \ is,\n   the value is a \"hint\" to implementors.\n   The value of the `default'\
    \ statement must, of course, correspond to\n   the (probably restricted) type\
    \ specified in the attribute's `type'\n   statement.\n   The attribute's default\
    \ value overrides the default value of the\n   underlying type definition if both\
    \ are present.\n"
- title: 9.2.4.  The attribute's format Statement
  contents:
  - "9.2.4.  The attribute's format Statement\n   The attribute's `format' statement\
    \ need not be present for attributes\n   typed by a base type or derived type,\
    \ and must be absent for\n   attributes typed by a class.  It gets one argument\
    \ which is used to\n   give a hint as to how the value of an instance of this\
    \ attribute\n   might be displayed.  See Section 3.13 for a description of format\n\
    \   specifications.\n   The attribute's format specification overrides the format\n\
    \   specification of the underlying type definition if both are present.\n"
- title: 9.2.5.  The attribute's units Statement
  contents:
  - "9.2.5.  The attribute's units Statement\n   The attribute's `units' statement\
    \ need not be present for attributes\n   typed by a base type or derived type,\
    \ and must be absent for\n   attributes typed by a class.  It gets one argument\
    \ which is used to\n   specify a textual definition of the units associated with\
    \ this\n   attribute.\n   The attribute's units specification overrides the units\
    \ specification\n   of the underlying type definition if both are present.\n \
    \  The units specification has to be appropriate for values displayed\n   according\
    \ to the attribute's format specification if present.  For\n   example, if the\
    \ attribute represents a frequency value of type\n   Unsigned64 measured in thousands\
    \ of Hertz, the format specification\n   should be `d-3' and the units specification\
    \ should be `Hertz' or\n   `Hz'.  If the format specification would be omitted,\
    \ the units\n   specification should be `Milli-Hertz' or `mHz'.  Authors of SMIng\n\
    \   modules should pay attention to keep format and units specifications\n   of\
    \ type and attribute definitions in sync.  Application implementors\n   MUST NOT\
    \ implement units specifications without implementing format\n   specifications.\n"
- title: 9.2.6.  The attribute's status Statement
  contents:
  - "9.2.6.  The attribute's status Statement\n   The attribute's `status' statement\
    \ must be present.  It gets one\n   argument which is used to specify whether\
    \ this attribute definition\n   is current or historic.  The value `current' means\
    \ that the\n   definition is current and valid.  The value `obsolete' means the\n\
    \   definition is obsolete and should not be implemented and/or can be\n   removed\
    \ if previously implemented.  While the value `deprecated' also\n   indicates\
    \ an obsolete definition, it permits new/continued\n   implementation in order\
    \ to foster interoperability with older/\n   existing implementations.\n   Attributes\
    \ SHOULD NOT be defined as `current' if their type or their\n   containing class\
    \ is `deprecated' or `obsolete'.  Similarly, they\n   SHOULD NOT be defined as\
    \ `deprecated' if their type or their\n   containing class is `obsolete'.  Nevertheless,\
    \ subsequent revisions\n   of used type definition cannot be avoided, but SHOULD\
    \ be taken into\n   account in subsequent revisions of the local module.\n"
- title: 9.2.7.  The attribute's description Statement
  contents:
  - "9.2.7.  The attribute's description Statement\n   The attribute's `description'\
    \ statement, which must be present, gets\n   one argument which is used to specify\
    \ a high-level textual\n   description of this attribute.\n   It is RECOMMENDED\
    \ that all semantic definitions necessary for the\n   implementation of this attribute\
    \ be included.\n"
- title: 9.2.8.  The attribute's reference Statement
  contents:
  - "9.2.8.  The attribute's reference Statement\n   The attribute's `reference' statement,\
    \ which need not be present,\n   gets one argument which is used to specify a\
    \ textual cross-reference\n   to some other document, either another module which\
    \ defines related\n   attribute definitions, or some other document which provides\n\
    \   additional information relevant to this attribute definition.\n"
- title: 9.3.  The class' unique Statement
  contents:
  - "9.3.  The class' unique Statement\n   The class' `unique' statement, which need\
    \ not be present, gets one\n   argument that specifies a comma-separated list\
    \ of attributes of this\n   class, enclosed in parenthesis.  If present, this\
    \ list of attributes\n   makes up a unique identification of all possible instances\
    \ of this\n   class.  It can be used as a unique key in underlying protocols.\n\
    \   If the list is empty, the class should be regarded as a scalar class\n   with\
    \ only a single instance.\n   If the `unique' statement is not present, the class\
    \ is not meant to\n   be instantiated directly, but to be contained in other classes\
    \ or the\n   parent class of other refining classes.\n   If present, the attribute\
    \ list MUST NOT contain any attribute more\n   than once and the attributes should\
    \ be ordered where appropriate so\n   that the attributes that are most significant\
    \ in most situations\n   appear first.\n"
- title: 9.4.  The class' event Statement
  contents:
  - "9.4.  The class' event Statement\n   The class' `event' statement is used to\
    \ define an event related to an\n   instance of this class that can occur asynchronously.\
    \  It gets two\n   arguments: a lower-case event identifier and a statement block\
    \ that\n   holds detailed information in an obligatory order.\n   See the `eventStatement'\
    \ rule of the SMIng grammar (Appendix B) for\n   the formal syntax of the `event'\
    \ statement.\n"
- title: 9.4.1.  The event's status Statement
  contents:
  - "9.4.1.  The event's status Statement\n   The event's `status' statement, which\
    \ must be present, gets one\n   argument which is used to specify whether this\
    \ event definition is\n   current or historic.  The value `current' means that\
    \ the definition\n   is current and valid.  The value `obsolete' means the definition\
    \ is\n   obsolete and should not be implemented and/or can be removed if\n   previously\
    \ implemented.  While the value `deprecated' also indicates\n   an obsolete definition,\
    \ it permits new/continued implementation in\n   order to foster interoperability\
    \ with older/existing implementations.\n"
- title: 9.4.2.  The event's description Statement
  contents:
  - "9.4.2.  The event's description Statement\n   The event's `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   this event.\n   It is RECOMMENDED that all semantic\
    \ definitions necessary for the\n   implementation of this event be included.\
    \  In particular, which\n   instance of the class is associated with an event\
    \ of this type SHOULD\n   be documented.\n"
- title: 9.4.3.  The event's reference Statement
  contents:
  - "9.4.3.  The event's reference Statement\n   The event's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   event definitions, or some other document which provides\
    \ additional\n   information relevant to this event definition.\n"
- title: 9.5.  The class' status Statement
  contents:
  - "9.5.  The class' status Statement\n   The class' `status' statement, which must\
    \ be present, gets one\n   argument which is used to specify whether this class\
    \ definition is\n   current or historic.  The value `current' means that the definition\n\
    \   is current and valid.  The value `obsolete' means the definition is\n   obsolete\
    \ and should not be implemented and/or can be removed if\n   previously implemented.\
    \  While the value `deprecated' also indicates\n   an obsolete definition, it\
    \ permits new/continued implementation in\n   order to foster interoperability\
    \ with older/existing implementations.\n   Derived classes SHOULD NOT be defined\
    \ as `current' if their parent\n   class is `deprecated' or `obsolete'.  Similarly,\
    \ they SHOULD NOT be\n   defined as `deprecated' if their parent class is `obsolete'.\n\
    \   Nevertheless, subsequent revisions of the parent class cannot be\n   avoided,\
    \ but SHOULD be taken into account in subsequent revisions of\n   the local module.\n"
- title: 9.6.  The class' description Statement
  contents:
  - "9.6.  The class' description Statement\n   The class' `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   the newly defined class.\n   It is RECOMMENDED that\
    \ all semantic definitions necessary for\n   implementation, and to embody any\
    \ information which would otherwise\n   be communicated in any commentary annotations\
    \ associated with this\n   class definition be included.\n"
- title: 9.7.  The class' reference Statement
  contents:
  - "9.7.  The class' reference Statement\n   The class' `reference' statement, which\
    \ need not be present, gets one\n   argument which is used to specify a textual\
    \ cross-reference to some\n   other document, either another module which defines\
    \ related class\n   definitions, or some other document which provides additional\n\
    \   information relevant to this class definition.\n"
- title: 9.8.  Usage Example
  contents:
  - "9.8.  Usage Example\n   Consider how an event might be described that signals\
    \ a status change\n   of an interface:\n   class Interface {\n     // ...\n  \
    \   attribute speed {\n       type        Gauge32;\n       access      readonly;\n\
    \       units       \"bps\";\n       status      current;\n       description\n\
    \            \"An estimate of the interface's current bandwidth\n            \
    \ in bits per second.\";\n     };\n     // ...\n     attribute adminStatus {\n\
    \       type        AdminStatus;\n       access      readwrite;\n       status\
    \      current;\n       description\n            \"The desired state of the interface.\"\
    ;\n     };\n     attribute operStatus {\n       type        OperStatus;\n    \
    \   access      readonly;\n       status      current;\n       description\n \
    \           \"The current operational state of the interface.\";\n     };\n  \
    \   event linkDown {\n       status      current;\n       description\n      \
    \         \"A linkDown event signifies that the ifOperStatus\n               \
    \ attribute for this interface instance is about to\n                enter the\
    \ down state from some other state (but not\n                from the notPresent\
    \ state).  This other state is\n                indicated by the included value\
    \ of ifOperStatus.\";\n     };\n     status        current;\n     description\n\
    \               \"A physical or logical network interface.\";\n   };\n"
- title: 10.  Extending a Module
  contents:
  - "10.  Extending a Module\n   As experience is gained with a module, it may be\
    \ desirable to revise\n   that module.  However, changes are not allowed if they\
    \ have any\n   potential to cause interoperability problems between an\n   implementation\
    \ using an original specification and an implementation\n   using an updated specification(s).\n\
    \   For any change, some statements near the top of the module MUST be\n   updated\
    \ to include information about the revision: specifically, a\n   new `revision'\
    \ statement (Section 5.6) must be included in front of\n   the `revision' statements.\
    \  Furthermore, any necessary changes MUST\n   be applied to other statements,\
    \ including the `organization' and\n   `contact' statements (Section 5.2, Section\
    \ 5.3).\n   Note that any definition contained in a module is available to be\n\
    \   imported by any other module, and is referenced in an `import'\n   statement\
    \ via the module name.  Thus, a module name MUST NOT be\n   changed.  Specifically,\
    \ the module name (e.g., `ACME-MIB' in the\n   example of Section 5.7) MUST NOT\
    \ be changed when revising a module\n   (except to correct typographical errors),\
    \ and definitions MUST NOT be\n   moved from one module to another.\n   Also note\
    \ that obsolete definitions MUST NOT be removed from modules\n   since their identifiers\
    \ may still be referenced by other modules.\n   A definition may be revised in\
    \ any of the following ways:\n   o  In `typedef' statement blocks, a `type' statement\
    \ containing an\n      `Enumeration' or `Bits' type may have new named numbers\
    \ added.\n   o  In `typedef' statement blocks, the value of a `type' statement\
    \ may\n      be replaced by another type if the new type is derived (directly\n\
    \      or indirectly) from the same base type, has the same set of\n      values,\
    \ and has identical semantics.\n   o  In `attribute' statements where the `type'\
    \ sub-statement specifies\n      a class, the class may be replaced by another\
    \ class if the new\n      class is derived (directly or indirectly) from the base\
    \ class and\n      both classes have identical semantics.\n   o  In `attribute'\
    \ statements where the `type' sub-statement specifies\n      a base type, a defined\
    \ type, or an implicitly derived type (i.e.,\n      not a class), that type may\
    \ be replaced by another type if the new\n      type is derived (directly or indirectly)\
    \ from the same base type,\n      has the same set of values, and has identical\
    \ semantics.\n   o  In any statement block, a `status' statement value of `current'\n\
    \      may be revised as `deprecated' or `obsolete'.  Similarly, a\n      `status'\
    \ statement value of `deprecated' may be revised as\n      `obsolete'.  When making\
    \ such a change, the `description'\n      statement SHOULD be updated to explain\
    \ the rationale.\n   o  In `typedef' and `attribute' statement blocks, a `default'\n\
    \      statement may be added or updated.\n   o  In `typedef' and `attribute'\
    \ statement blocks, a `units' statement\n      may be added.\n   o  A class may\
    \ be augmented by adding new attributes.\n   o  In any statement block, clarifications\
    \ and additional information\n      may be included in the `description' statement.\n\
    \   o  In any statement block, a `reference' statement may be added or\n     \
    \ updated.\n   o  Entirely new extensions, types, identities, and classes may\
    \ be\n      defined, using previously unassigned identifiers.\n   Otherwise, if\
    \ the semantics of any previous definition are changed\n   (i.e., if a non-editorial\
    \ change is made to any definition other than\n   those specifically allowed above),\
    \ then this MUST be achieved by a\n   new definition with a new identifier.  In\
    \ case of a class where the\n   semantics of any attributes are changed, the new\
    \ class can be defined\n   by derivation from the old class and refining the changed\
    \ attributes.\n   Note that changing the identifier associated with an existing\n\
    \   definition is considered a semantic change, as these strings may be\n   used\
    \ in an `import' statement.\n"
- title: 11.  SMIng Language Extensibility
  contents:
  - "11.  SMIng Language Extensibility\n   While the core SMIng language has a well\
    \ defined set of statements\n   (Section 5 through Section 9.4) that are used\
    \ to specify those\n   aspects of management information commonly regarded as\
    \ necessary\n   without management protocol specific information, there may be\n\
    \   further information people wish to express.  Describing additional\n   information\
    \ informally in description statements has a disadvantage\n   in that this information\
    \ cannot be parsed by any program.\n   SMIng allows modules to include statements\
    \ that are unknown to a\n   parser but fulfil some core grammar rules (Section\
    \ 4.3).\n   Furthermore, additional statements may be defined by the `extension'\n\
    \   statement (Section 6).  Extensions can be used in the local module or\n  \
    \ in other modules that import the extension.  This has some\n   advantages:\n\
    \   o  A parser can differentiate between statements known as extensions\n   \
    \   and unknown statements.  This enables the parser to complain about\n     \
    \ unknown statements, e.g., due to typos.\n   o  If an extension's definition\
    \ contains a formal ABNF grammar\n      definition and a parser is able to interpret\
    \ this ABNF definition,\n      this enables the parser to also complain about\
    \ the wrong usage of\n      an extension.\n   o  Since there might be some common\
    \ need for extensions, there is a\n      relatively high probability of extension\
    \ name collisions\n      originated by different organizations, as long as there\
    \ is no\n      standardized extension for that purpose.  The requirement to\n\
    \      explicitly import extension statements allows those extensions to\n   \
    \   be distinguished.\n   o  The supported extensions of an SMIng implementation,\
    \ e.g., an\n      SMIng module compiler, can be clearly expressed.\n   The only\
    \ formal effect of an extension statement definition is to\n   declare its existence\
    \ and status, and optionally its ABNF grammar.\n   All additional aspects SHOULD\
    \ be described in the `description'\n   statement:\n   o  The detailed semantics\
    \ of the new statement SHOULD be described.\n   o  The contexts in which the new\
    \ statement can be used SHOULD be\n      described, e.g., a new statement may\
    \ be designed to be used only\n      in the statement block of a module, but not\
    \ in other nested\n      statement blocks.  Others may be applicable in multiple\
    \ contexts.\n      In addition, the point in the sequence of an obligatory order\
    \ of\n      other statements, where the new statement may be inserted, might\n\
    \      be prescribed.\n   o  The circumstances that make the new statement mandatory\
    \ or\n      optional SHOULD be described.\n   o  The syntax of the new statement\
    \ SHOULD at least be described\n      informally, if not supplied formally in\
    \ an `abnf' statement.\n   o  It might be reasonable to give some suggestions\
    \ under which\n      conditions the implementation of the new statement is adequate\
    \ and\n      how it could be integrated into existent implementations.\n   Some\
    \ possible extension applications are:\n   o  The formal mapping of SMIng definitions\
    \ into the SNMP [RFC3781]\n      framework is defined as an SMIng extension. \
    \ Other mappings may\n      follow in the future.\n   o  Inlined annotations to\
    \ definitions.  For example, a vendor may\n      wish to describe additional information\
    \ to class and attribute\n      definitions in private modules.  An example are\
    \ severity levels of\n      events in the statement block of an `event' statement.\n\
    \   o  Arbitrary annotations to external definitions.  For example, a\n      vendor\
    \ may wish to describe additional information to definitions\n      in a \"standard\"\
    \ module.  This allows a vendor to implement\n      \"standard\" modules as well\
    \ as additional private features, without\n      redundant module definitions,\
    \ but on top of \"standard\" module\n      definitions.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This document defines a language with which\
    \ to write and read\n   descriptions of management information.  The language\
    \ itself has no\n   security impact on the Internet.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   Since SMIng started as a close successor of SMIv2,\
    \ some paragraphs\n   and phrases are directly taken from the SMIv2 specifications\n\
    \   [RFC2578], [RFC2579], [RFC2580] written by Jeff Case, Keith\n   McCloghrie,\
    \ David Perkins, Marshall T. Rose, Juergen Schoenwaelder,\n   and Steven L. Waldbusser.\n\
    \   The authors would like to thank all participants of the 7th NMRG\n   meeting\
    \ held in Schloss Kleinheubach from 6-8 September 2000, which\n   was a major\
    \ step towards the current status of this memo, namely\n   Heiko Dassow, David\
    \ Durham, Keith McCloghrie, and Bert Wijnen.\n   Furthermore, several discussions\
    \ within the SMING Working Group\n   reflected experience with SMIv2 and influenced\
    \ this specification at\n   some points.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n\
    \              Specifications: ABNF\", RFC 2234, November 1997.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [RFC3216]  Elliott, C., Harrington, D., Jason,\
    \ J., Schoenwaelder, J.,\n              Strauss, F. and W. Weiss, \"SMIng Objectives\"\
    , RFC 3216,\n              December 2001.\n   [RFC3781]  Strauss, F. and J. Schoenwaelder,\
    \ \"Next Generation\n              Structure of Management Information (SMIng)\
    \ Mappings to\n              the Simple Network Management Protocol (SNMP)\",\
    \ RFC 3781,\n              May 2004.\n   [RFC2578]  McCloghrie, K., Perkins, D.\
    \ and J. Schoenwaelder,\n              \"Structure of Management Information Version\
    \ 2 (SMIv2)\",\n              STD 58, RFC 2578, April 1999.\n   [RFC2579]  McCloghrie,\
    \ K., Perkins, D. and J. Schoenwaelder, \"Textual\n              Conventions for\
    \ SMIv2\", STD 59, RFC 2579, April 1999.\n   [RFC2580]  McCloghrie, K., Perkins,\
    \ D. and J. Schoenwaelder,\n              \"Conformance Statements for SMIv2\"\
    , STD 60, RFC 2580,\n              April 1999.\n   [RFC3159]  McCloghrie, K.,\
    \ Fine, M., Seligson, J., Chan, K., Hahn,\n              S., Sahita, R., Smith,\
    \ A. and F. Reichmeyer, \"Structure of\n              Policy Provisioning Information\
    \ (SPPI)\", RFC 3159, August\n              2001.\n   [RFC1155]  Rose, M. and\
    \ K. McCloghrie, \"Structure and Identification\n              of Management Information\
    \ for TCP/IP-based Internets\", STD\n              16, RFC 1155, May 1990.\n \
    \  [RFC1212]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\", STD\n \
    \             16, RFC 1212, March 1991.\n   [RFC1215]  Rose, M., \"A Convention\
    \ for Defining Traps for use with\n              the SNMP\", RFC 1215, March 1991.\n\
    \   [ASN1]     International Organization for Standardization,\n             \
    \ \"Specification of Abstract Syntax Notation One (ASN.1)\",\n              International\
    \ Standard 8824, December 1987.\n   [RFC3411]  Harrington, D., Presuhn, R. and\
    \ B. Wijnen, \"An\n              Architecture for Describing Simple Network Management\n\
    \              Protocol (SNMP) Management Frameworks\", STD 62, RFC 3411,\n  \
    \            December 2002.\n   [IEEE754]  Institute of Electrical and Electronics\
    \ Engineers, \"IEEE\n              Standard for Binary Floating-Point Arithmetic\"\
    , ANSI/IEEE\n              Standard 754-1985, August 1985.\n   [RFC3629]  Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,\
    \ RFC 3629, November 2003.\n   [RFC3084]  Chan, K., Seligson, J., Durham, D.,\
    \ Gai, S., McCloghrie,\n              K., Herzog, S., Reichmeyer, F., Yavatkar,\
    \ R. and A. Smith,\n              \"COPS Usage for Policy Provisioning\", RFC\
    \ 3084, March\n              2001.\n"
- title: Appendix A. NMRG-SMING Module
  contents:
  - "Appendix A. NMRG-SMING Module\n   Most SMIng modules are built on top of the\
    \ definitions of some\n   commonly used derived types.  The definitions of these\
    \ derived types\n   are contained in the NMRG-SMING module which is defined below.\
    \  Its\n   derived types are generally applicable for modeling all areas of\n\
    \   management information.  Among these derived types are counter types,\n  \
    \ string types, and date and time related types.\n   This module is derived from\
    \ RFC 2578 [RFC2578] and RFC 2579\n   [RFC2579].\n"
- title: module NMRG-SMING {
  contents:
  - "module NMRG-SMING {\n    organization    \"IRTF Network Management Research Group\
    \ (NMRG)\";\n    contact         \"IRTF Network Management Research Group (NMRG)\n\
    \                     http://www.ibr.cs.tu-bs.de/projects/nmrg/\n            \
    \         Frank Strauss\n                     TU Braunschweig\n              \
    \       Muehlenpfordtstrasse 23\n                     38106 Braunschweig\n   \
    \                  Germany\n                     Phone: +49 531 391 3266\n   \
    \                  EMail: strauss@ibr.cs.tu-bs.de\n                     Juergen\
    \ Schoenwaelder\n                     International University Bremen\n      \
    \               P.O. Box 750 561\n                     28725 Bremen\n        \
    \             Germany\n                     Phone: +49 421 200 3587\n        \
    \             EMail: j.schoenwaelder@iu-bremen.de\";\n    description     \"Core\
    \ type definitions for SMIng. Several\n                     type definitions are\
    \ SMIng versions of\n                     similar SMIv2 or SPPI definitions.\n\
    \                     Copyright (C) The Internet Society (2004).\n           \
    \          All Rights Reserved.\n                     This version of this module\
    \ is part of\n                     RFC 3780, see the RFC itself for full\n   \
    \                  legal notices.\";\n    revision {\n        date        \"2003-12-16\"\
    ;\n        description \"Initial revision, published as RFC 3780.\";\n    };\n\
    \    typedef Gauge32 {\n        type        Unsigned32;\n        description\n\
    \           \"The Gauge32 type represents a non-negative integer,\n          \
    \  which may increase or decrease, but shall never\n            exceed a maximum\
    \ value, nor fall below a minimum\n            value.  The maximum value can not\
    \ be greater than\n            2^32-1 (4294967295 decimal), and the minimum value\n\
    \            can not be smaller than 0.  The value of a Gauge32\n            has\
    \ its maximum value whenever the information\n            being modeled is greater\
    \ than or equal to its\n            maximum value, and has its minimum value whenever\n\
    \            the information being modeled is smaller than or\n            equal\
    \ to its minimum value.  If the information\n            being modeled subsequently\
    \ decreases below\n            (increases above) the maximum (minimum) value,\
    \ the\n            Gauge32 also decreases (increases).\";\n        reference\n\
    \           \"RFC 2578, Sections 2. and 7.1.7.\";\n    };\n    typedef Counter32\
    \ {\n        type        Unsigned32;\n        description\n           \"The Counter32\
    \ type represents a non-negative integer\n            which monotonically increases\
    \ until it reaches a\n            maximum value of 2^32-1 (4294967295 decimal),\
    \ when it\n            wraps around and starts increasing again from zero.\n \
    \           Counters have no defined `initial' value, and thus, a\n          \
    \  single value of a Counter has (in general) no information\n            content.\
    \  Discontinuities in the monotonically increasing\n            value normally\
    \ occur at re-initialization of the\n            management system, and at other\
    \ times as specified in the\n            description of an attribute using this\
    \ type.  If such\n            other times can occur, for example, the creation\
    \ of a\n            class instance that contains an attribute of type\n      \
    \      Counter32 at times other than re-initialization, then a\n            corresponding\
    \ attribute should be defined, with an\n            appropriate type, to indicate\
    \ the last discontinuity.\n            Examples of appropriate types include:\
    \ TimeStamp32,\n            TimeStamp64, DateAndTime, TimeTicks32 or TimeTicks64\n\
    \            (other types defined in this module).\n            The value of the\
    \ access statement for attributes with\n            a type value of Counter32\
    \ should be either `readonly'\n            or `eventonly'.\n            A default\
    \ statement should not be used for attributes\n            with a type value of\
    \ Counter32.\";\n        reference\n           \"RFC 2578, Sections 2. and 7.1.6.\"\
    ;\n    };\n    typedef Gauge64 {\n        type        Unsigned64;\n        description\n\
    \           \"The Gauge64 type represents a non-negative integer,\n          \
    \  which may increase or decrease, but shall never\n            exceed a maximum\
    \ value, nor fall below a minimum\n            value.  The maximum value can not\
    \ be greater than\n            2^64-1 (18446744073709551615), and the minimum\
    \ value\n            can not be smaller than 0.  The value of a Gauge64\n    \
    \        has its maximum value whenever the information\n            being modeled\
    \ is greater than or equal to its\n            maximum value, and has its minimum\
    \ value whenever\n            the information being modeled is smaller than or\n\
    \            equal to its minimum value.  If the information\n            being\
    \ modeled subsequently decreases below\n            (increases above) the maximum\
    \ (minimum) value, the\n            Gauge64 also decreases (increases).\";\n \
    \   };\n    typedef Counter64 {\n        type        Unsigned64;\n        description\n\
    \           \"The Counter64 type represents a non-negative integer\n         \
    \   which monotonically increases until it reaches a\n            maximum value\
    \ of 2^64-1 (18446744073709551615), when\n            it wraps around and starts\
    \ increasing again from zero.\n            Counters have no defined `initial'\
    \ value, and thus, a\n            single value of a Counter has (in general) no\n\
    \            information content.  Discontinuities in the\n            monotonically\
    \ increasing value normally occur at\n            re-initialization of the management\
    \ system, and at\n            other times as specified in the description of an\n\
    \            attribute using this type.  If such other times can\n           \
    \ occur, for example, the creation of a class\n            instance that contains\
    \ an attribute of type Counter32\n            at times other than re-initialization,\
    \ then\n            a corresponding attribute should be defined, with an\n   \
    \         appropriate type, to indicate the last discontinuity.\n            Examples\
    \ of appropriate types include: TimeStamp32,\n            TimeStamp64, DateAndTime,\
    \ TimeTicks32 or TimeTicks64\n            (other types defined in this module).\n\
    \            The value of the access statement for attributes with\n         \
    \   a type value of Counter64 should be either `readonly'\n            or `eventonly'.\n\
    \            A default statement should not be used for attributes\n         \
    \   with a type value of Counter64.\";\n        reference\n           \"RFC 2578,\
    \ Sections 2. and 7.1.10.\";\n    };\n    typedef Opaque {\n        type     \
    \   OctetString;\n        status      obsolete;\n        description\n       \
    \    \"******* THIS TYPE DEFINITION IS OBSOLETE *******\n            The Opaque\
    \ type is provided solely for\n            backward-compatibility, and shall not\
    \ be used for\n            newly-defined attributes and derived types.\n     \
    \       The Opaque type supports the capability to pass\n            arbitrary\
    \ ASN.1 syntax.  A value is encoded using\n            the ASN.1 Basic Encoding\
    \ Rules into a string of\n            octets.  This, in turn, is encoded as an\n\
    \            OctetString, in effect `double-wrapping' the\n            original\
    \ ASN.1 value.\n            Note that a conforming implementation need only be\n\
    \            able to accept and recognize opaquely-encoded data.\n           \
    \ It need not be able to unwrap the data and then\n            interpret its contents.\n\
    \            A requirement on `standard' modules is that no\n            attribute\
    \ may have a type value of Opaque and no\n            type may be derived from\
    \ the Opaque type.\";\n        reference\n           \"RFC 2578, Sections 2. and\
    \ 7.1.9.\";\n    };\n    typedef IpAddress {\n        type        OctetString\
    \ (4);\n        status      deprecated;\n        description\n           \"*******\
    \ THIS TYPE DEFINITION IS DEPRECATED *******\n            The IpAddress type represents\
    \ a 32-bit Internet\n            IPv4 address.  It is represented as an OctetString\n\
    \            of length 4, in network byte-order.\n            Note that the IpAddress\
    \ type is present for\n            historical reasons.\";\n        reference\n\
    \           \"RFC 2578, Sections 2. and 7.1.5.\";\n    };\n    typedef TimeTicks32\
    \ {\n        type        Unsigned32;\n        description\n           \"The TimeTicks32\
    \ type represents a non-negative integer\n            which represents the time,\
    \ modulo 2^32 (4294967296\n            decimal), in hundredths of a second between\
    \ two epochs.\n            When attributes are defined which use this type, the\n\
    \            description of the attribute identifies both of the\n           \
    \ reference epochs.\n            For example, the TimeStamp32 type (defined in\
    \ this\n            module) is based on the TimeTicks32 type.\";\n        reference\n\
    \           \"RFC 2578, Sections 2. and 7.1.8.\";\n    };\n    typedef TimeTicks64\
    \ {\n        type        Unsigned64;\n        description\n           \"The TimeTicks64\
    \ type represents a non-negative integer\n            which represents the time,\
    \ modulo 2^64\n            (18446744073709551616 decimal), in hundredths of a\
    \ second\n            between two epochs.  When attributes are defined which use\n\
    \            this type, the description of the attribute identifies\n        \
    \    both of the reference epochs.\n            For example, the TimeStamp64 type\
    \ (defined in this\n            module) is based on the TimeTicks64 type.\";\n\
    \    };\n    typedef TimeStamp32 {\n        type        TimeTicks32;\n       \
    \ description\n           \"The value of an associated TimeTicks32 attribute at\n\
    \            which a specific occurrence happened.  The specific\n           \
    \ occurrence must be defined in the description of any\n            attribute\
    \ defined using this type.  When the specific\n            occurrence occurred\
    \ prior to the last time the\n            associated TimeTicks32 attribute was\
    \ zero, then the\n            TimeStamp32 value is zero.  Note that this requires\
    \ all\n            TimeStamp32 values to be reset to zero when the value of\n\
    \            the associated TimeTicks32 attribute reaches 497+ days\n        \
    \    and wraps around to zero.\n            The associated TimeTicks32 attribute\
    \ should be specified\n            in the description of any attribute using this\
    \ type.\n            If no TimeTicks32 attribute has been specified, the\n   \
    \         default scalar attribute sysUpTime is used.\";\n        reference\n\
    \           \"RFC 2579, Section 2.\";\n    };\n    typedef TimeStamp64 {\n   \
    \     type        TimeTicks64;\n        description\n           \"The value of\
    \ an associated TimeTicks64 attribute at which\n            a specific occurrence\
    \ happened.  The specific occurrence\n            must be defined in the description\
    \ of any attribute\n            defined using this type.  When the specific occurrence\n\
    \            occurred prior to the last time the associated TimeTicks64\n    \
    \        attribute was zero, then the TimeStamp64 value is zero.\n           \
    \ The associated TimeTicks64 attribute must be specified in\n            the description\
    \ of any attribute using this\n            type. TimeTicks32 attributes must not\
    \ be used as\n            associated attributes.\";\n    };\n    typedef TimeInterval32\
    \ {\n        type        Integer32 (0..2147483647);\n        description\n   \
    \        \"A period of time, measured in units of 0.01 seconds.\n            The\
    \ TimeInterval32 type uses Integer32 rather than\n            Unsigned32 for compatibility\
    \ with RFC 2579.\";\n        reference\n           \"RFC 2579, Section 2.\";\n\
    \    };\n    typedef TimeInterval64 {\n        type        Integer64;\n      \
    \  description\n           \"A period of time, measured in units of 0.01 seconds.\n\
    \            Note that negative values are allowed.\";\n    };\n    typedef DateAndTime\
    \ {\n        type        OctetString (8 | 11);\n        default     0x0000000000000000000000;\n\
    \        format      \"2d-1d-1d,1d:1d:1d.1d,1a1d:1d\";\n        description\n\
    \           \"A date-time specification.\n            field  octets  contents\
    \                  range\n            -----  ------  --------                \
    \  -----\n             1      1-2   year*                     0..65535\n     \
    \        2       3    month                     1..12 | 0\n             3    \
    \   4    day                       1..31 | 0\n             4       5    hour \
    \                     0..23\n             5       6    minutes               \
    \    0..59\n             6       7    seconds                   0..60\n      \
    \                    (use 60 for leap-second)\n             7       8    deci-seconds\
    \              0..9\n             8       9    direction from UTC        '+' /\
    \ '-'\n             9      10    hours from UTC*           0..13\n           \
    \ 10      11    minutes from UTC          0..59\n            * Notes:\n      \
    \      - the value of year is in big-endian encoding\n            - daylight saving\
    \ time in New Zealand is +13\n            For example, Tuesday May 26, 1992 at\
    \ 1:30:15 PM EDT would\n            be displayed as:\n                       \
    \  1992-5-26,13:30:15.0,-4:0\n            Note that if only local time is known,\
    \ then timezone\n            information (fields 8-10) is not present.\n     \
    \       The two special values of 8 or 11 zero bytes denote an\n            unknown\
    \ date-time specification.\";\n        reference\n           \"RFC 2579, Section\
    \ 2.\";\n    };\n    typedef TruthValue {\n        type        Enumeration (true(1),\
    \ false(2));\n        description\n           \"Represents a boolean value.\"\
    ;\n        reference\n           \"RFC 2579, Section 2.\";\n    };\n    typedef\
    \ PhysAddress {\n        type        OctetString;\n        format      \"1x:\"\
    ;\n        description\n           \"Represents media- or physical-level addresses.\"\
    ;\n        reference\n           \"RFC 2579, Section 2.\";\n    };\n    typedef\
    \ MacAddress {\n        type        OctetString (6);\n        format      \"1x:\"\
    ;\n        description\n           \"Represents an IEEE 802 MAC address represented\
    \ in the\n            `canonical' order defined by IEEE 802.1a, i.e., as if it\n\
    \            were transmitted least significant bit first, even though\n     \
    \       802.5 (in contrast to other 802.x protocols) requires MAC\n          \
    \  addresses to be transmitted most significant bit first.\";\n        reference\n\
    \           \"RFC 2579, Section 2.\";\n    };\n    // The DisplayString definition\
    \ below does not impose a size\n    // restriction and is thus not the same as\
    \ the DisplayString\n    // definition in RFC 2579. The DisplayString255 definition\
    \ is\n    // provided for mapping purposes.\n    typedef DisplayString {\n   \
    \     type        OctetString;\n        format      \"1a\";\n        description\n\
    \           \"Represents textual information taken from the NVT ASCII\n      \
    \      character set, as defined in pages 4, 10-11 of RFC 854.\n            To\
    \ summarize RFC 854, the NVT ASCII repertoire specifies:\n             - the use\
    \ of character codes 0-127 (decimal)\n             - the graphics characters (32-126)\
    \ are interpreted as\n               US ASCII\n             - NUL, LF, CR, BEL,\
    \ BS, HT, VT and FF have the special\n               meanings specified in RFC\
    \ 854\n             - the other 25 codes have no standard interpretation\n   \
    \          - the sequence 'CR LF' means newline\n             - the sequence 'CR\
    \ NUL' means carriage-return\n             - an 'LF' not preceded by a 'CR' means\
    \ moving to the\n               same column on the next line.\n             -\
    \ the sequence 'CR x' for any x other than LF or NUL is\n               illegal.\
    \  (Note that this also means that a string may\n               end with either\
    \ 'CR LF' or 'CR NUL', but not with CR.)\n        \";\n    };\n    typedef DisplayString255\
    \ {\n        type        DisplayString (0..255);\n        description\n      \
    \     \"A DisplayString with a maximum length of 255 characters.\n           \
    \ Any attribute defined using this syntax may not exceed 255\n            characters\
    \ in length.\n            The DisplayString255 type has the same semantics as\
    \ the\n            DisplayString textual convention defined in RFC 2579.\";\n\
    \        reference\n           \"RFC 2579, Section 2.\";\n    };\n    // The Utf8String\
    \ and Utf8String255 definitions below facilitate\n    // internationalization.\
    \ The definition is consistent with the\n    // definition of SnmpAdminString\
    \ in RFC 2571.\n    typedef Utf8String {\n        type        OctetString;\n \
    \       format      \"65535t\";      // is there a better way ?\n        description\n\
    \           \"A human readable string represented using the ISO/IEC IS\n     \
    \       10646-1 character set, encoded as an octet string using\n            the\
    \ UTF-8 transformation format described in RFC 3629.\n            Since additional\
    \ code points are added by amendments to\n            the 10646 standard from\
    \ time to time, implementations must\n            be prepared to encounter any\
    \ code point from 0x00000000 to\n            0x7fffffff.  Byte sequences that\
    \ do not correspond to the\n            valid UTF-8 encoding of a code point or\
    \ are outside this\n            range are prohibited.\n            The use of\
    \ control codes should be avoided. When it is\n            necessary to represent\
    \ a newline, the control code\n            sequence CR LF should be used.\n  \
    \          The use of leading or trailing white space should be\n            avoided.\n\
    \            For code points not directly supported by user interface\n      \
    \      hardware or software, an alternative means of entry and\n            display,\
    \ such as hexadecimal, may be provided.\n            For information encoded in\
    \ 7-bit US-ASCII, the UTF-8\n            encoding is identical to the US-ASCII\
    \ encoding.\n            UTF-8 may require multiple bytes to represent a single\n\
    \            character / code point; thus the length of a Utf8String in\n    \
    \        octets may be different from the number of characters\n            encoded.\
    \  Similarly, size constraints refer to the number\n            of encoded octets,\
    \ not the number of characters\n            represented by an encoding.\";\n \
    \   };\n    typedef Utf8String255 {\n        type        Utf8String (0..255);\n\
    \        format      \"255t\";\n        description\n           \"A Utf8String\
    \ with a maximum length of 255 octets.  Note\n            that the size of an\
    \ Utf8String is measured in octets, not\n            characters.\";\n    };\n\
    \    identity null {\n        description\n           \"An identity used to represent\
    \ null pointer values.\";\n    };\n"
- title: '};'
  contents:
  - '};

    '
- title: Appendix B. SMIng ABNF Grammar
  contents:
  - "Appendix B. SMIng ABNF Grammar\n   The SMIng grammar conforms to the Augmented\
    \ Backus-Naur Form (ABNF)\n   [RFC2234].\n"
- title: ;;
  contents:
  - ';;

    '
- title: ;; sming.abnf -- SMIng grammar in ABNF notation (RFC 2234).
  contents:
  - ';; sming.abnf -- SMIng grammar in ABNF notation (RFC 2234).

    '
- title: ;;
  contents:
  - ';;

    '
- title: ';; @(#) $Id: sming.abnf,v 1.33 2003/10/23 19:31:55 strauss Exp $'
  contents:
  - ';; @(#) $Id: sming.abnf,v 1.33 2003/10/23 19:31:55 strauss Exp $

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Copyright (C) The Internet Society (2004). All Rights Reserved.
  contents:
  - ';; Copyright (C) The Internet Society (2004). All Rights Reserved.

    '
- title: ;;
  contents:
  - ';;

    '
- title: smingFile               = optsep *(moduleStatement optsep)
  contents:
  - 'smingFile               = optsep *(moduleStatement optsep)

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Statement rules.
  contents:
  - ';; Statement rules.

    '
- title: ;;
  contents:
  - ';;

    '
- title: moduleStatement         = moduleKeyword sep ucIdentifier optsep
  contents:
  - "moduleStatement         = moduleKeyword sep ucIdentifier optsep\n           \
    \                   \"{\" stmtsep\n                              *(importStatement\
    \ stmtsep)\n                              organizationStatement stmtsep\n    \
    \                          contactStatement stmtsep\n                        \
    \      descriptionStatement stmtsep\n                              *1(referenceStatement\
    \ stmtsep)\n                              1*(revisionStatement stmtsep)\n    \
    \                          *(extensionStatement stmtsep)\n                   \
    \           *(typedefStatement stmtsep)\n                              *(identityStatement\
    \ stmtsep)\n                              *(classStatement stmtsep)\n        \
    \                  \"}\" optsep \";\"\n"
- title: extensionStatement      = extensionKeyword sep lcIdentifier optsep
  contents:
  - "extensionStatement      = extensionKeyword sep lcIdentifier optsep\n        \
    \                      \"{\" stmtsep\n                              statusStatement\
    \ stmtsep\n                              descriptionStatement stmtsep\n      \
    \                        *1(referenceStatement stmtsep)\n                    \
    \          *1(abnfStatement stmtsep)\n                          \"}\" optsep \"\
    ;\"\n"
- title: typedefStatement        = typedefKeyword sep ucIdentifier optsep
  contents:
  - "typedefStatement        = typedefKeyword sep ucIdentifier optsep\n          \
    \                    \"{\" stmtsep\n                              typedefTypeStatement\
    \ stmtsep\n                              *1(defaultStatement stmtsep)\n      \
    \                        *1(formatStatement stmtsep)\n                       \
    \       *1(unitsStatement stmtsep)\n                              statusStatement\
    \ stmtsep\n                              descriptionStatement stmtsep\n      \
    \                        *1(referenceStatement stmtsep)\n                    \
    \      \"}\" optsep \";\"\n"
- title: identityStatement       = identityStmtKeyword sep lcIdentifier optsep
  contents:
  - "identityStatement       = identityStmtKeyword sep lcIdentifier optsep\n     \
    \                         \"{\" stmtsep\n                              *1(parentStatement\
    \ stmtsep)\n                              statusStatement stmtsep\n          \
    \                    descriptionStatement stmtsep\n                          \
    \    *1(referenceStatement stmtsep)\n                          \"}\" optsep \"\
    ;\"\n"
- title: classStatement          = classKeyword sep ucIdentifier optsep
  contents:
  - "classStatement          = classKeyword sep ucIdentifier optsep\n            \
    \                  \"{\" stmtsep\n                              *1(extendsStatement\
    \ stmtsep)\n                              *(attributeStatement stmtsep)\n    \
    \                          *1(uniqueStatement stmtsep)\n                     \
    \         *(eventStatement stmtsep)\n                              statusStatement\
    \ stmtsep\n                              descriptionStatement stmtsep\n      \
    \                        *1(referenceStatement stmtsep)\n                    \
    \      \"}\" optsep \";\"\n"
- title: attributeStatement      = attributeKeyword sep
  contents:
  - "attributeStatement      = attributeKeyword sep\n                            \
    \  lcIdentifier optsep\n                              \"{\" stmtsep\n        \
    \                      typeStatement stmtsep\n                              *1(accessStatement\
    \ stmtsep)\n                              *1(defaultStatement stmtsep)\n     \
    \                         *1(formatStatement stmtsep)\n                      \
    \        *1(unitsStatement stmtsep)\n                              statusStatement\
    \ stmtsep\n                              descriptionStatement stmtsep\n      \
    \                        *1(referenceStatement stmtsep)\n                    \
    \      \"}\" optsep \";\"\n"
- title: uniqueStatement         = uniqueKeyword optsep
  contents:
  - "uniqueStatement         = uniqueKeyword optsep\n                            \
    \  \"(\" optsep qlcIdentifierList\n                              optsep \")\"\
    \ optsep \";\"\n"
- title: eventStatement          = eventKeyword sep lcIdentifier
  contents:
  - "eventStatement          = eventKeyword sep lcIdentifier\n                   \
    \           optsep \"{\" stmtsep\n                              statusStatement\
    \ stmtsep\n                              descriptionStatement stmtsep\n      \
    \                        *1(referenceStatement stmtsep)\n                    \
    \      \"}\" optsep \";\"\n"
- title: importStatement         = importKeyword sep ucIdentifier optsep
  contents:
  - "importStatement         = importKeyword sep ucIdentifier optsep\n           \
    \                   \"(\" optsep\n                              identifierList\
    \ optsep\n                          \")\" optsep \";\"\n"
- title: revisionStatement       = revisionKeyword optsep "{" stmtsep
  contents:
  - "revisionStatement       = revisionKeyword optsep \"{\" stmtsep\n            \
    \                  dateStatement stmtsep\n                              descriptionStatement\
    \ stmtsep\n                          \"}\" optsep \";\"\n"
- title: typedefTypeStatement    = typeKeyword sep refinedBaseType optsep ";"
  contents:
  - 'typedefTypeStatement    = typeKeyword sep refinedBaseType optsep ";"

    '
- title: typeStatement           = typeKeyword sep
  contents:
  - "typeStatement           = typeKeyword sep\n                          (refinedBaseType\
    \ / refinedType) optsep \";\"\n"
- title: parentStatement         = parentKeyword sep qlcIdentifier optsep ";"
  contents:
  - 'parentStatement         = parentKeyword sep qlcIdentifier optsep ";"

    '
- title: extendsStatement        = extendsKeyword sep qucIdentifier optsep ";"
  contents:
  - 'extendsStatement        = extendsKeyword sep qucIdentifier optsep ";"

    '
- title: dateStatement           = dateKeyword sep date optsep ";"
  contents:
  - 'dateStatement           = dateKeyword sep date optsep ";"

    '
- title: organizationStatement   = organizationKeyword sep text optsep ";"
  contents:
  - 'organizationStatement   = organizationKeyword sep text optsep ";"

    '
- title: contactStatement        = contactKeyword sep text optsep ";"
  contents:
  - 'contactStatement        = contactKeyword sep text optsep ";"

    '
- title: formatStatement         = formatKeyword sep format optsep ";"
  contents:
  - 'formatStatement         = formatKeyword sep format optsep ";"

    '
- title: unitsStatement          = unitsKeyword sep units optsep ";"
  contents:
  - 'unitsStatement          = unitsKeyword sep units optsep ";"

    '
- title: statusStatement         = statusKeyword sep status optsep ";"
  contents:
  - 'statusStatement         = statusKeyword sep status optsep ";"

    '
- title: accessStatement         = accessKeyword sep access optsep ";"
  contents:
  - 'accessStatement         = accessKeyword sep access optsep ";"

    '
- title: defaultStatement        = defaultKeyword sep anyValue optsep ";"
  contents:
  - 'defaultStatement        = defaultKeyword sep anyValue optsep ";"

    '
- title: descriptionStatement    = descriptionKeyword sep text optsep ";"
  contents:
  - 'descriptionStatement    = descriptionKeyword sep text optsep ";"

    '
- title: referenceStatement      = referenceKeyword sep text optsep ";"
  contents:
  - 'referenceStatement      = referenceKeyword sep text optsep ";"

    '
- title: abnfStatement           = abnfKeyword sep text optsep ";"
  contents:
  - 'abnfStatement           = abnfKeyword sep text optsep ";"

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;;
  contents:
  - ';;

    '
- title: refinedBaseType         = ObjectIdentifierKeyword /
  contents:
  - "refinedBaseType         = ObjectIdentifierKeyword /\n                       \
    \   OctetStringKeyword *1(optsep numberSpec) /\n                          PointerKeyword\
    \ *1(optsep pointerSpec) /\n                          Integer32Keyword *1(optsep\
    \ numberSpec) /\n                          Unsigned32Keyword *1(optsep numberSpec)\
    \ /\n                          Integer64Keyword *1(optsep numberSpec) /\n    \
    \                      Unsigned64Keyword *1(optsep numberSpec) /\n           \
    \               Float32Keyword *1(optsep floatSpec) /\n                      \
    \    Float64Keyword *1(optsep floatSpec) /\n                          Float128Keyword\
    \ *1(optsep floatSpec) /\n                          EnumerationKeyword\n     \
    \                                 optsep namedSignedNumberSpec /\n           \
    \               BitsKeyword optsep namedNumberSpec\n"
- title: refinedType             = qucIdentifier *1(optsep anySpec)
  contents:
  - 'refinedType             = qucIdentifier *1(optsep anySpec)

    '
- title: anySpec                 = pointerSpec / numberSpec / floatSpec
  contents:
  - 'anySpec                 = pointerSpec / numberSpec / floatSpec

    '
- title: pointerSpec             = "(" optsep qlcIdentifier optsep ")"
  contents:
  - 'pointerSpec             = "(" optsep qlcIdentifier optsep ")"

    '
- title: numberSpec              = "(" optsep numberElement
  contents:
  - "numberSpec              = \"(\" optsep numberElement\n                      \
    \        *furtherNumberElement\n                              optsep \")\"\n"
- title: furtherNumberElement    = optsep "|" optsep numberElement
  contents:
  - 'furtherNumberElement    = optsep "|" optsep numberElement

    '
- title: numberElement           = signedNumber *1numberUpperLimit
  contents:
  - 'numberElement           = signedNumber *1numberUpperLimit

    '
- title: numberUpperLimit        = optsep ".." optsep signedNumber
  contents:
  - 'numberUpperLimit        = optsep ".." optsep signedNumber

    '
- title: floatSpec               = "(" optsep floatElement
  contents:
  - "floatSpec               = \"(\" optsep floatElement\n                       \
    \       *furtherFloatElement\n                              optsep \")\"\n"
- title: furtherFloatElement     = optsep "|" optsep floatElement
  contents:
  - 'furtherFloatElement     = optsep "|" optsep floatElement

    '
- title: floatElement            = floatValue *1floatUpperLimit
  contents:
  - 'floatElement            = floatValue *1floatUpperLimit

    '
- title: floatUpperLimit         = optsep ".." optsep floatValue
  contents:
  - 'floatUpperLimit         = optsep ".." optsep floatValue

    '
- title: namedNumberSpec         = "(" optsep namedNumberList optsep ")"
  contents:
  - 'namedNumberSpec         = "(" optsep namedNumberList optsep ")"

    '
- title: namedNumberList         = namedNumberItem
  contents:
  - "namedNumberList         = namedNumberItem\n                              *(optsep\
    \ \",\" optsep namedNumberItem)\n"
- title: namedNumberItem         = lcIdentifier optsep "(" optsep number
  contents:
  - "namedNumberItem         = lcIdentifier optsep \"(\" optsep number\n         \
    \                     optsep \")\"\n"
- title: namedSignedNumberSpec   = "(" optsep namedSignedNumberList optsep ")"
  contents:
  - 'namedSignedNumberSpec   = "(" optsep namedSignedNumberList optsep ")"

    '
- title: namedSignedNumberList   = namedSignedNumberItem
  contents:
  - "namedSignedNumberList   = namedSignedNumberItem\n                           \
    \   *(optsep \",\" optsep\n                                           namedSignedNumberItem)\n"
- title: namedSignedNumberItem   = lcIdentifier optsep "(" optsep signedNumber
  contents:
  - "namedSignedNumberItem   = lcIdentifier optsep \"(\" optsep signedNumber\n   \
    \                           optsep \")\"\n"
- title: identifierList          = identifier
  contents:
  - "identifierList          = identifier\n                              *(optsep\
    \ \",\" optsep identifier)\n"
- title: qIdentifierList         = qIdentifier
  contents:
  - "qIdentifierList         = qIdentifier\n                              *(optsep\
    \ \",\" optsep qIdentifier)\n"
- title: qlcIdentifierList       = qlcIdentifier
  contents:
  - "qlcIdentifierList       = qlcIdentifier\n                              *(optsep\
    \ \",\" optsep qlcIdentifier)\n"
- title: bitsValue               = "(" optsep bitsList optsep ")"
  contents:
  - 'bitsValue               = "(" optsep bitsList optsep ")"

    '
- title: bitsList                = *1(lcIdentifier
  contents:
  - "bitsList                = *1(lcIdentifier\n                              *(optsep\
    \ \",\" optsep lcIdentifier))\n"
- title: ;;
  contents:
  - ';;

    '
- title: ;; Other basic rules.
  contents:
  - ';; Other basic rules.

    '
- title: ;;
  contents:
  - ';;

    '
- title: identifier              = ucIdentifier / lcIdentifier
  contents:
  - 'identifier              = ucIdentifier / lcIdentifier

    '
- title: qIdentifier             = qucIdentifier / qlcIdentifier
  contents:
  - 'qIdentifier             = qucIdentifier / qlcIdentifier

    '
- title: ucIdentifier            = ucAlpha *63(ALPHA / DIGIT / "-")
  contents:
  - 'ucIdentifier            = ucAlpha *63(ALPHA / DIGIT / "-")

    '
- title: qucIdentifier           = *1(ucIdentifier "::") ucIdentifier
  contents:
  - 'qucIdentifier           = *1(ucIdentifier "::") ucIdentifier

    '
- title: lcIdentifier            = lcAlpha *63(ALPHA / DIGIT / "-")
  contents:
  - 'lcIdentifier            = lcAlpha *63(ALPHA / DIGIT / "-")

    '
- title: qlcIdentifier           = *1(ucIdentifier "::") lcIdentifier
  contents:
  - 'qlcIdentifier           = *1(ucIdentifier "::") lcIdentifier

    '
- title: attrIdentifier          = lcIdentifier *("." lcIdentifier)
  contents:
  - 'attrIdentifier          = lcIdentifier *("." lcIdentifier)

    '
- title: qattrIdentifier         = *1(ucIdentifier ".") attrIdentifier
  contents:
  - 'qattrIdentifier         = *1(ucIdentifier ".") attrIdentifier

    '
- title: cattrIdentifier         = ucIdentifier "."
  contents:
  - "cattrIdentifier         = ucIdentifier \".\"\n                              lcIdentifier\
    \ *(\".\" lcIdentifier)\n"
- title: qcattrIdentifier        = qucIdentifier "."
  contents:
  - "qcattrIdentifier        = qucIdentifier \".\"\n                             \
    \ lcIdentifier *(\".\" lcIdentifier)\n"
- title: text                    = textSegment *(optsep textSegment)
  contents:
  - 'text                    = textSegment *(optsep textSegment)

    '
- title: textSegment             = DQUOTE *textAtom DQUOTE
  contents:
  - "textSegment             = DQUOTE *textAtom DQUOTE\n                         \
    \ ; See Section 4.2.\n"
- title: textAtom                = textVChar / HTAB / SP / lineBreak
  contents:
  - 'textAtom                = textVChar / HTAB / SP / lineBreak

    '
- title: date                    = DQUOTE 4DIGIT "-" 2DIGIT "-" 2DIGIT
  contents:
  - "date                    = DQUOTE 4DIGIT \"-\" 2DIGIT \"-\" 2DIGIT\n         \
    \                     *1(\" \" 2DIGIT \":\" 2DIGIT)\n                        \
    \      DQUOTE\n                          ; always in UTC\n"
- title: format                  = textSegment
  contents:
  - 'format                  = textSegment

    '
- title: units                   = textSegment
  contents:
  - 'units                   = textSegment

    '
- title: anyValue                = bitsValue /
  contents:
  - "anyValue                = bitsValue /\n                          signedNumber\
    \ /\n                          hexadecimalNumber /\n                         \
    \ floatValue /\n                          text /\n                          objectIdentifier\n\
    \                          ; Note: `objectIdentifier' includes the\n         \
    \                 ; syntax of enumeration labels and\n                       \
    \   ; identities.\n                          ; They are not named literally to\n\
    \                          ; avoid reduce/reduce conflicts when\n            \
    \              ; building LR parsers based on this\n                         \
    \ ; grammar.\n"
- title: status                  = currentKeyword /
  contents:
  - "status                  = currentKeyword /\n                          deprecatedKeyword\
    \ /\n                          obsoleteKeyword\n"
- title: access                  = eventonlyKeyword /
  contents:
  - "access                  = eventonlyKeyword /\n                          readonlyKeyword\
    \ /\n                          readwriteKeyword\n"
- title: objectIdentifier        = (qlcIdentifier / subid "." subid)
  contents:
  - "objectIdentifier        = (qlcIdentifier / subid \".\" subid)\n             \
    \                 *127(\".\" subid)\n"
- title: subid                   = decimalNumber
  contents:
  - 'subid                   = decimalNumber

    '
- title: number                  = hexadecimalNumber / decimalNumber
  contents:
  - 'number                  = hexadecimalNumber / decimalNumber

    '
- title: negativeNumber          = "-" decimalNumber
  contents:
  - 'negativeNumber          = "-" decimalNumber

    '
- title: signedNumber            = number / negativeNumber
  contents:
  - 'signedNumber            = number / negativeNumber

    '
- title: decimalNumber           = "0" / (nonZeroDigit *DIGIT)
  contents:
  - 'decimalNumber           = "0" / (nonZeroDigit *DIGIT)

    '
- title: zeroDecimalNumber       = 1*DIGIT
  contents:
  - 'zeroDecimalNumber       = 1*DIGIT

    '
- title: hexadecimalNumber       = %x30 %x78 ; "0x" with x only lower-case
  contents:
  - "hexadecimalNumber       = %x30 %x78 ; \"0x\" with x only lower-case\n       \
    \                   1*(HEXDIG HEXDIG)\n"
- title: floatValue              = neginfKeyword /
  contents:
  - "floatValue              = neginfKeyword /\n                          posinfKeyword\
    \ /\n                          snanKeyword /\n                          qnanKeyword\
    \ /\n                          signedNumber \".\" zeroDecimalNumber\n        \
    \                      *1(\"E\" (\"+\"/\"-\") zeroDecimalNumber)\n"
- title: ;;
  contents:
  - ';;

    '
- title: ;; Rules to skip unknown statements
  contents:
  - ';; Rules to skip unknown statements

    '
- title: ;; with arbitrary arguments and blocks.
  contents:
  - ';; with arbitrary arguments and blocks.

    '
- title: ;;
  contents:
  - ';;

    '
- title: unknownStatement        = unknownKeyword optsep *unknownArgument
  contents:
  - "unknownStatement        = unknownKeyword optsep *unknownArgument\n          \
    \                    optsep \";\"\n"
- title: unknownArgument         = ("(" optsep unknownList optsep ")") /
  contents:
  - "unknownArgument         = (\"(\" optsep unknownList optsep \")\") /\n       \
    \                   (\"{\" optsep *unknownStatement optsep \"}\") /\n        \
    \                  qucIdentifier /\n                          anyValue /\n   \
    \                       anySpec\n"
- title: unknownList             = namedNumberList /
  contents:
  - "unknownList             = namedNumberList /\n                          qIdentifierList\n"
- title: unknownKeyword          = lcIdentifier
  contents:
  - 'unknownKeyword          = lcIdentifier

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Keyword rules.
  contents:
  - ';; Keyword rules.

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Typically, keywords are represented by tokens returned from the
  contents:
  - ';; Typically, keywords are represented by tokens returned from the

    '
- title: ;; lexical analyzer.  Note, that the lexer has to be stateful to
  contents:
  - ';; lexical analyzer.  Note, that the lexer has to be stateful to

    '
- title: ;; distinguish keywords from identifiers depending on the context
  contents:
  - ';; distinguish keywords from identifiers depending on the context

    '
- title: ;; position in the input stream.
  contents:
  - ';; position in the input stream.

    '
- title: ;;
  contents:
  - ';;

    '
- title: moduleKeyword       =  %x6D %x6F %x64 %x75 %x6C %x65
  contents:
  - 'moduleKeyword       =  %x6D %x6F %x64 %x75 %x6C %x65

    '
- title: importKeyword       =  %x69 %x6D %x70 %x6F %x72 %x74
  contents:
  - 'importKeyword       =  %x69 %x6D %x70 %x6F %x72 %x74

    '
- title: revisionKeyword     =  %x72 %x65 %x76 %x69 %x73 %x69 %x6F %x6E
  contents:
  - 'revisionKeyword     =  %x72 %x65 %x76 %x69 %x73 %x69 %x6F %x6E

    '
- title: dateKeyword         =  %x64 %x61 %x74 %x65
  contents:
  - 'dateKeyword         =  %x64 %x61 %x74 %x65

    '
- title: organizationKeyword =  %x6F %x72 %x67 %x61 %x6E %x69 %x7A %x61 %x74
  contents:
  - "organizationKeyword =  %x6F %x72 %x67 %x61 %x6E %x69 %x7A %x61 %x74\n       \
    \                %x69 %x6F %x6E\n"
- title: contactKeyword      =  %x63 %x6F %x6E %x74 %x61 %x63 %x74
  contents:
  - 'contactKeyword      =  %x63 %x6F %x6E %x74 %x61 %x63 %x74

    '
- title: descriptionKeyword  =  %x64 %x65 %x73 %x63 %x72 %x69 %x70 %x74 %x69
  contents:
  - "descriptionKeyword  =  %x64 %x65 %x73 %x63 %x72 %x69 %x70 %x74 %x69\n       \
    \                %x6F %x6E\n"
- title: referenceKeyword    =  %x72 %x65 %x66 %x65 %x72 %x65 %x6E %x63 %x65
  contents:
  - 'referenceKeyword    =  %x72 %x65 %x66 %x65 %x72 %x65 %x6E %x63 %x65

    '
- title: extensionKeyword    =  %x65 %x78 %x74 %x65 %x6E %x73 %x69 %x6F %x6E
  contents:
  - 'extensionKeyword    =  %x65 %x78 %x74 %x65 %x6E %x73 %x69 %x6F %x6E

    '
- title: typedefKeyword      =  %x74 %x79 %x70 %x65 %x64 %x65 %x66
  contents:
  - 'typedefKeyword      =  %x74 %x79 %x70 %x65 %x64 %x65 %x66

    '
- title: typeKeyword         =  %x74 %x79 %x70 %x65
  contents:
  - 'typeKeyword         =  %x74 %x79 %x70 %x65

    '
- title: parentKeyword       =  %x70 %x61 %x72 %x65 %x6E %x74
  contents:
  - 'parentKeyword       =  %x70 %x61 %x72 %x65 %x6E %x74

    '
- title: identityStmtKeyword =  %x69 %x64 %x65 %x6E %x74 %x69 %x74 %x79
  contents:
  - 'identityStmtKeyword =  %x69 %x64 %x65 %x6E %x74 %x69 %x74 %x79

    '
- title: classKeyword        =  %x63 %x6C %x61 %x73 %x73
  contents:
  - 'classKeyword        =  %x63 %x6C %x61 %x73 %x73

    '
- title: extendsKeyword      =  %x65 %x78 %x74 %x65 %x6E %x64 %x73
  contents:
  - 'extendsKeyword      =  %x65 %x78 %x74 %x65 %x6E %x64 %x73

    '
- title: attributeKeyword    =  %x61 %x74 %x74 %x72 %x69 %x62 %x75 %x74 %x65
  contents:
  - 'attributeKeyword    =  %x61 %x74 %x74 %x72 %x69 %x62 %x75 %x74 %x65

    '
- title: uniqueKeyword       =  %x75 %x6E %x69 %x71 %x75 %x65
  contents:
  - 'uniqueKeyword       =  %x75 %x6E %x69 %x71 %x75 %x65

    '
- title: eventKeyword        =  %x65 %x76 %x65 %x6E %x74
  contents:
  - 'eventKeyword        =  %x65 %x76 %x65 %x6E %x74

    '
- title: formatKeyword       =  %x66 %x6F %x72 %x6D %x61 %x74
  contents:
  - 'formatKeyword       =  %x66 %x6F %x72 %x6D %x61 %x74

    '
- title: unitsKeyword        =  %x75 %x6E %x69 %x74 %x73
  contents:
  - 'unitsKeyword        =  %x75 %x6E %x69 %x74 %x73

    '
- title: statusKeyword       =  %x73 %x74 %x61 %x74 %x75 %x73
  contents:
  - 'statusKeyword       =  %x73 %x74 %x61 %x74 %x75 %x73

    '
- title: accessKeyword       =  %x61 %x63 %x63 %x65 %x73 %x73
  contents:
  - 'accessKeyword       =  %x61 %x63 %x63 %x65 %x73 %x73

    '
- title: defaultKeyword      =  %x64 %x65 %x66 %x61 %x75 %x6C %x74
  contents:
  - 'defaultKeyword      =  %x64 %x65 %x66 %x61 %x75 %x6C %x74

    '
- title: abnfKeyword         =  %x61 %x62 %x6E %x66
  contents:
  - 'abnfKeyword         =  %x61 %x62 %x6E %x66

    '
- title: ;; Base type keywords.
  contents:
  - ';; Base type keywords.

    '
- title: OctetStringKeyword  =  %x4F %x63 %x74 %x65 %x74 %x53 %x74 %x72 %x69
  contents:
  - "OctetStringKeyword  =  %x4F %x63 %x74 %x65 %x74 %x53 %x74 %x72 %x69\n       \
    \                %x6E %x67\n"
- title: PointerKeyword      =  %x50 %x6F %x69 %x6E %x74 %x65 %x72
  contents:
  - 'PointerKeyword      =  %x50 %x6F %x69 %x6E %x74 %x65 %x72

    '
- title: ObjectIdentifierKeyword  =  %x4F %x62 %x6A %x65 %x63 %x74 %x49 %x64
  contents:
  - "ObjectIdentifierKeyword  =  %x4F %x62 %x6A %x65 %x63 %x74 %x49 %x64\n       \
    \                %x65 %x6E %x74 %x69 %x66 %x69 %x65 %x72\n"
- title: Integer32Keyword    =  %x49 %x6E %x74 %x65 %x67 %x65 %x72 %x33 %x32
  contents:
  - 'Integer32Keyword    =  %x49 %x6E %x74 %x65 %x67 %x65 %x72 %x33 %x32

    '
- title: Unsigned32Keyword   =  %x55 %x6E %x73 %x69 %x67 %x6E %x65 %x64 %x33
  contents:
  - "Unsigned32Keyword   =  %x55 %x6E %x73 %x69 %x67 %x6E %x65 %x64 %x33\n       \
    \                %x32\n"
- title: Integer64Keyword    =  %x49 %x6E %x74 %x65 %x67 %x65 %x72 %x36 %x34
  contents:
  - 'Integer64Keyword    =  %x49 %x6E %x74 %x65 %x67 %x65 %x72 %x36 %x34

    '
- title: Unsigned64Keyword   =  %x55 %x6E %x73 %x69 %x67 %x6E %x65 %x64 %x36
  contents:
  - "Unsigned64Keyword   =  %x55 %x6E %x73 %x69 %x67 %x6E %x65 %x64 %x36\n       \
    \                %x34\n"
- title: Float32Keyword      =  %x46 %x6C %x6F %x61 %x74 %x33 %x32
  contents:
  - 'Float32Keyword      =  %x46 %x6C %x6F %x61 %x74 %x33 %x32

    '
- title: Float64Keyword      =  %x46 %x6C %x6F %x61 %x74 %x36 %x34
  contents:
  - 'Float64Keyword      =  %x46 %x6C %x6F %x61 %x74 %x36 %x34

    '
- title: Float128Keyword     =  %x46 %x6C %x6F %x61 %x74 %x31 %x32 %x38
  contents:
  - 'Float128Keyword     =  %x46 %x6C %x6F %x61 %x74 %x31 %x32 %x38

    '
- title: BitsKeyword         =  %x42 %x69 %x74 %x73
  contents:
  - 'BitsKeyword         =  %x42 %x69 %x74 %x73

    '
- title: EnumerationKeyword  =  %x45 %x6E %x75 %x6D %x65 %x72 %x61 %x74 %x69
  contents:
  - "EnumerationKeyword  =  %x45 %x6E %x75 %x6D %x65 %x72 %x61 %x74 %x69\n       \
    \                %x6F %x6E\n"
- title: ;; Status keywords.
  contents:
  - ';; Status keywords.

    '
- title: currentKeyword      =  %x63 %x75 %x72 %x72 %x65 %x6E %x74
  contents:
  - 'currentKeyword      =  %x63 %x75 %x72 %x72 %x65 %x6E %x74

    '
- title: deprecatedKeyword   =  %x64 %x65 %x70 %x72 %x65 %x63 %x61 %x74 %x65
  contents:
  - "deprecatedKeyword   =  %x64 %x65 %x70 %x72 %x65 %x63 %x61 %x74 %x65\n       \
    \                %x64\n"
- title: obsoleteKeyword     =  %x6F %x62 %x73 %x6F %x6C %x65 %x74 %x65
  contents:
  - 'obsoleteKeyword     =  %x6F %x62 %x73 %x6F %x6C %x65 %x74 %x65

    '
- title: ;; Access keywords.
  contents:
  - ';; Access keywords.

    '
- title: eventonlyKeyword    =  %x65 %x76 %x65 %x6E %x74 %x6F %x6E %x6C %x79
  contents:
  - 'eventonlyKeyword    =  %x65 %x76 %x65 %x6E %x74 %x6F %x6E %x6C %x79

    '
- title: readonlyKeyword     =  %x72 %x65 %x61 %x64 %x6F %x6E %x6C %x79
  contents:
  - 'readonlyKeyword     =  %x72 %x65 %x61 %x64 %x6F %x6E %x6C %x79

    '
- title: readwriteKeyword    =  %x72 %x65 %x61 %x64 %x77 %x72 %x69 %x74 %x65
  contents:
  - 'readwriteKeyword    =  %x72 %x65 %x61 %x64 %x77 %x72 %x69 %x74 %x65

    '
- title: ;; Special floating point values' keywords.
  contents:
  - ';; Special floating point values'' keywords.

    '
- title: neginfKeyword       =  %x6E %x65 %x67 %x69 %x6E %x66
  contents:
  - 'neginfKeyword       =  %x6E %x65 %x67 %x69 %x6E %x66

    '
- title: posinfKeyword       =  %x70 %x6F %x73 %x69 %x6E %x66
  contents:
  - 'posinfKeyword       =  %x70 %x6F %x73 %x69 %x6E %x66

    '
- title: snanKeyword         =  %x73 %x6E %x61 %x6E
  contents:
  - 'snanKeyword         =  %x73 %x6E %x61 %x6E

    '
- title: qnanKeyword         =  %x71 %x6E %x61 %x6E
  contents:
  - 'qnanKeyword         =  %x71 %x6E %x61 %x6E

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Some low level rules.
  contents:
  - ';; Some low level rules.

    '
- title: ;; These tokens are typically skipped by the lexical analyzer.
  contents:
  - ';; These tokens are typically skipped by the lexical analyzer.

    '
- title: ;;
  contents:
  - ';;

    '
- title: sep                     = 1*(comment / lineBreak / WSP)
  contents:
  - "sep                     = 1*(comment / lineBreak / WSP)\n                   \
    \       ; unconditional separator\n"
- title: optsep                  = *(comment / lineBreak / WSP)
  contents:
  - 'optsep                  = *(comment / lineBreak / WSP)

    '
- title: stmtsep                 = *(comment /
  contents:
  - "stmtsep                 = *(comment /\n                            lineBreak\
    \ /\n                            WSP /\n                            unknownStatement)\n"
- title: comment                 = "//" *(WSP / VCHAR) lineBreak
  contents:
  - 'comment                 = "//" *(WSP / VCHAR) lineBreak

    '
- title: lineBreak               = CRLF / LF
  contents:
  - 'lineBreak               = CRLF / LF

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; Encoding specific rules.
  contents:
  - ';; Encoding specific rules.

    '
- title: ;;
  contents:
  - ';;

    '
- title: textVChar               = %x21 / %x23-7E
  contents:
  - "textVChar               = %x21 / %x23-7E\n                          ; any VCHAR\
    \ except DQUOTE\n"
- title: ucAlpha                 = %x41-5A
  contents:
  - 'ucAlpha                 = %x41-5A

    '
- title: lcAlpha                 = %x61-7A
  contents:
  - 'lcAlpha                 = %x61-7A

    '
- title: nonZeroDigit            = %x31-39
  contents:
  - 'nonZeroDigit            = %x31-39

    '
- title: ;;
  contents:
  - ';;

    '
- title: ;; RFC 2234 core rules.
  contents:
  - ';; RFC 2234 core rules.

    '
- title: ;;
  contents:
  - ';;

    '
- title: ALPHA          =  %x41-5A / %x61-7A
  contents:
  - "ALPHA          =  %x41-5A / %x61-7A\n                       ; A-Z / a-z\n"
- title: CR             =  %x0D
  contents:
  - "CR             =  %x0D\n                       ; carriage return\n"
- title: CRLF           =  CR LF
  contents:
  - "CRLF           =  CR LF\n                       ; Internet standard newline\n"
- title: DIGIT          =  %x30-39
  contents:
  - "DIGIT          =  %x30-39\n                       ; 0-9\n"
- title: DQUOTE         =  %x22
  contents:
  - "DQUOTE         =  %x22\n                       ; \" (Double Quote)\n"
- title: HEXDIG         =  DIGIT /
  contents:
  - "HEXDIG         =  DIGIT /\n                  %x61 / %x62 / %x63 / %x64 / %x65\
    \ / %x66\n                       ; only lower-case a..f\n"
- title: HTAB           =  %x09
  contents:
  - "HTAB           =  %x09\n                       ; horizontal tab\n"
- title: LF             =  %x0A
  contents:
  - "LF             =  %x0A\n                       ; linefeed\n"
- title: SP             =  %x20
  contents:
  - "SP             =  %x20\n                       ; space\n"
- title: VCHAR          =  %x21-7E
  contents:
  - "VCHAR          =  %x21-7E\n                       ; visible (printing) characters\n"
- title: WSP            =  SP / HTAB
  contents:
  - "WSP            =  SP / HTAB\n                       ; white space\n"
- title: ;; End of ABNF
  contents:
  - ';; End of ABNF

    '
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Frank Strauss\n   TU Braunschweig\n   Muehlenpfordtstrasse\
    \ 23\n   38106 Braunschweig\n   Germany\n   Phone: +49 531 391 3266\n   EMail:\
    \ strauss@ibr.cs.tu-bs.de\n   URI:   http://www.ibr.cs.tu-bs.de/\n   Juergen Schoenwaelder\n\
    \   International University Bremen\n   P.O. Box 750 561\n   28725 Bremen\n  \
    \ Germany\n   Phone: +49 421 200 3587\n   EMail: j.schoenwaelder@iu-bremen.de\n\
    \   URI:   http://www.eecs.iu-bremen.de/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
