- title: __initial_text__
  contents:
  - "     Protocol Independent Multicast-Sparse Mode (PIM-SM): Protocol\n        \
    \                     Specification\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author list has been reordered to reflect the involvement\
    \ in\n   detailed editorial work on this specification document.  The first\n\
    \   four authors are the primary editors and are listed alphabetically.\n   The\
    \ rest of the authors, also listed alphabetically, participated in\n   all aspects\
    \ of the architectural and detailed design but managed to\n   get away without\
    \ hacking the latex!\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This document describes a protocol for efficiently routing\
    \ to\n   multicast groups that may span wide-area (and inter-domain)\n   internets.\
    \  We refer to the approach as Protocol Independent\n   Multicast--Sparse Mode\
    \ (PIM-SM) because it is not dependent on any\n   particular unicast routing protocol,\
    \ and because it is designed to\n   support sparse groups as defined in [1][2].\
    \ This document describes\n   the protocol details.  For the motivation behind\
    \ the design and a\n   description of the architecture, see [1][2]. Section 2\
    \ summarizes\n   PIM-SM operation.  It describes the protocol from a network\n\
    \   perspective, in particular, how the participating routers interact to\n  \
    \ create and maintain the multicast distribution tree.  Section 3\n   describes\
    \ PIM-SM operations from the perspective of a single router\n   implementing the\
    \ protocol; this section constitutes the main body of\n   the protocol specification.\
    \  It is organized according to PIM-SM\n   message type; for each message type\
    \ we describe its contents, its\n   generation, and its processing.\n   Sections\
    \ 3.8 and 3.9 summarize the timers and flags referred to\n   throughout this document.\
    \ Section 4 provides packet format details.\n   The most significant functional\
    \ changes since the January '95 version\n   involve the Rendezvous Point-related\
    \ mechanisms, several resulting\n   simplifications to the protocol, and removal\
    \ of the PIM-DM protocol\n   details to a separate document [3] (for clarity).\n"
- title: 2 PIM-SM Protocol Overview
  contents:
  - "2 PIM-SM Protocol Overview\n   In this section we provide an overview of the\
    \ architectural\n   components of PIM-SM.\n   A router receives explicit Join/Prune\
    \ messages from those neighboring\n   routers that have downstream group members.\
    \ The router then forwards\n   data packets addressed to a multicast group, G,\
    \ only onto those\n   interfaces on which explicit joins have been received. Note\
    \ that all\n   routers mentioned in this document are assumed to be PIM-SM capable,\n\
    \   unless otherwise specified.\n   A Designated Router (DR) sends periodic Join/Prune\
    \ messages toward a\n   group-specific Rendezvous Point (RP) for each group for\
    \ which it has\n   active members. Each router along the path toward the RP builds\
    \ a\n   wildcard (any-source) state for the group and sends Join/Prune\n   messages\
    \ on toward the RP. We use the term route entry to refer to\n   the state maintained\
    \ in a router to represent the distribution tree.\n   A route entry may include\
    \ such fields as the source address, the\n   group address, the incoming interface\
    \ from which packets are\n   accepted, the list of outgoing interfaces to which\
    \ packets are sent,\n   timers, flag bits, etc. The wildcard route entry's incoming\
    \ interface\n   points toward the RP; the outgoing interfaces point to the\n \
    \  neighboring downstream routers that have sent Join/Prune messages\n   toward\
    \ the RP. This state creates a shared, RP-centered, distribution\n   tree that\
    \ reaches all group members. When a data source first sends\n   to a group, its\
    \ DR unicasts Register messages to the RP with the\n   source's data packets encapsulated\
    \ within. If the data rate is high,\n   the RP can send source-specific Join/Prune\
    \ messages back towards the\n   source and the source's data packets will follow\
    \ the resulting\n   forwarding state and travel unencapsulated to the RP.  Whether\
    \ they\n   arrive encapsulated or natively, the RP forwards the source's\n   decapsulated\
    \ data packets down the RP-centered distribution tree\n   toward group members.\
    \  If the data rate warrants it, routers with\n   local receivers can join a source-specific,\
    \ shortest path,\n   distribution tree, and prune this source's packets off of\
    \ the shared\n   RP-centered tree. For low data rate sources, neither the RP,\
    \ nor\n   last-hop routers need join a source-specific shortest path tree and\n\
    \   data packets can be delivered via the shared, RP-tree.\n   The following subsections\
    \ describe SM operation in more detail, in\n   particular, the control messages,\
    \ and the actions they trigger.\n"
- title: 2.1 Local hosts joining a group
  contents:
  - "2.1 Local hosts joining a group\n   In order to join a multicast group, G, a\
    \ host conveys its membership\n   information through the Internet Group Management\
    \ Protocol (IGMP), as\n   specified in [4][5], (see figure 1).  From this point\
    \ on we refer to\n   such a host as a receiver, R, (or member) of the group G.\n\
    \   Note that all figures used in this section are for illustration and\n   are\
    \ not intended to be complete. For complete and detailed protocol\n   action see\
    \ Section 3.\n      [Figures are present only in the postscript version]\n   \
    \   Fig. 1  Example: how a receiver joins, and sets up shared tree\n   When a\
    \ DR (e.g., router A in figure 1) gets a membership indication\n   from IGMP for\
    \ a new group, G, the DR looks up the associated RP. The\n   DR creates a wildcard\
    \ multicast route entry for the group, referred\n   to here as a (*,G) entry;\
    \ if there is no more specific match for a\n   particular source, the packet will\
    \ be forwarded according to this\n   entry.\n   The RP address is included in\
    \ a special field in the route entry and\n   is included in periodic upstream\
    \ Join/Prune messages. The outgoing\n   interface is set to that included in the\
    \ IGMP membership indication\n   for the new member.  The incoming interface is\
    \ set to the interface\n   used to send unicast packets to the RP.\n   When there\
    \ are no longer directly connected members for the group,\n   IGMP notifies the\
    \ DR.  If the DR has neither local members nor\n   downstream receivers, the (*,G)\
    \ state is deleted.\n"
- title: 2.2 Establishing the RP-rooted shared tree
  contents:
  - "2.2 Establishing the RP-rooted shared tree\n   Triggered by the (*,G) state,\
    \ the DR creates a Join/Prune message\n   with the RP address in its join list\
    \ and the the wildcard bit (WC-\n   bit) and RP-tree bit (RPT-bit) set to 1. The\
    \ WC-bit indicates that\n   any source may match and be forwarded according to\
    \ this entry if\n   there is no longer match; the RPT-bit indicates that this\
    \ join is\n   being sent up the shared, RP-tree. The prune list is left empty.\
    \ When\n   the RPT-bit is set to 1 it indicates that the join is associated with\n\
    \   the shared RP-tree and therefore the Join/Prune message is propagated\n  \
    \ along the RP-tree. When the WC-bit is set to 1 it indicates that the\n   address\
    \ is an RP and the downstream receivers expect to receive\n   packets from all\
    \ sources via this (shared tree) path. The term RPT-\n   bit is used to refer\
    \ to both the RPT-bit flags associated with route\n   entries, and the RPT-bit\
    \ included in each encoded address in a\n   Join/Prune message.\n   Each upstream\
    \ router creates or updates its multicast route entry for\n   (*,G) when it receives\
    \ a Join/Prune with the RPT-bit and WC-bit set.\n   The interface on which the\
    \ Join/Prune message arrived is added to the\n   list of outgoing interfaces (oifs)\
    \ for (*,G). Based on this entry\n   each upstream router between the receiver\
    \ and the RP sends a\n   Join/Prune message in which the join list includes the\
    \ RP. The packet\n   payload contains Multicast-Address=G, Join=RP,WC-bit,RPT-bit,\n\
    \   Prune=NULL.\n"
- title: 2.3 Hosts sending to a group
  contents:
  - "2.3 Hosts sending to a group\n   When a host starts sending multicast data packets\
    \ to a group,\n   initially its DR must deliver each packet to the RP for distribution\n\
    \   down the RP-tree (see figure 2).  The sender's DR initially\n   encapsulates\
    \ each data packet in a Register message and unicasts it\n   to the RP for that\
    \ group. The RP decapsulates each Register message\n   and forwards the enclosed\
    \ data packet natively to downstream members\n   on the shared RP-tree.\n    \
    \  [Figures are present only in the postscript version]\n      Fig. 2  Example:\
    \ a host sending to a group\n   If the data rate of the source warrants the use\
    \ of a source-specific\n   shortest path tree (SPT), the RP may construct a new\
    \ multicast route\n   entry that is specific to the source, hereafter referred\
    \ to as (S,G)\n   state, and send periodic Join/Prune messages toward the source.\
    \ Note\n   that over time, the rules for when to switch can be modified without\n\
    \   global coordination.  When and if the RP does switch to the SPT, the\n   routers\
    \ between the source and the RP build and maintain (S,G) state\n   in response\
    \ to these messages and send (S,G) messages upstream toward\n   the source.\n\
    \   The source's DR must stop encapsulating data packets in Registers\n   when\
    \ (and so long as) it receives Register-Stop messages from the RP.\n   The RP\
    \ triggers Register-Stop messages in response to Registers, if\n   the RP has\
    \ no downstream receivers for the group (or for that\n   particular source), or\
    \ if the RP has already joined the (S,G) tree\n   and is receiving the data packets\
    \ natively.  Each source's DR\n   maintains, per (S,G), a Register-Suppression-timer.\
    \  The Register-\n   Suppression-timer is started by the Register-Stop message;\
    \ upon\n   expiration, the source's DR resumes sending data packets to the RP,\n\
    \   encapsulated in Register messages.\n"
- title: 2.4 Switching from shared tree (RP-tree)  to  shortest  path  tree  (SP-
  contents:
  - "2.4 Switching from shared tree (RP-tree)  to  shortest  path  tree  (SP-\n  \
    \    tree)\n   A router with directly-connected members first joins the shared\
    \ RP-\n   tree.  The router can switch to a source's shortest path tree (SP-\n\
    \   tree) after receiving packets from that source over the shared RP-\n   tree.\
    \ The recommended policy is to initiate the switch to the SP-tree\n   after receiving\
    \ a significant number of data packets during a\n   specified time interval from\
    \ a particular source. To realize this\n   policy the router can monitor data\
    \ packets from sources for which it\n   has no source-specific multicast route\
    \ entry and initiate such an\n   entry when the data rate exceeds the configured\
    \ threshold.  As shown\n   in figure 3, router `A' initiates a (S,G) state.\n\
    \      [Figures are present only in the postscript version]\n      Fig. 3  Example:\
    \ Switching from shared tree to shortest path tree\n   When a (S,G) entry is activated\
    \ (and periodically so long as the\n   state exists), a Join/Prune message is\
    \ sent upstream towards the\n   source, S, with S in the join list. The payload\
    \ contains Multicast-\n   Address=G, Join=S, Prune=NULL. When the (S,G) entry\
    \ is created, the\n   outgoing interface list is copied from (*,G), i.e., all\
    \ local shared\n   tree branches are replicated in the new shortest path tree.\
    \ In this\n   way when a data packet from S arrives and matches on this entry,\
    \ all\n   receivers will continue to receive the source's packets along this\n\
    \   path. (In more complicated scenarios, other entries in the router\n   have\
    \ to be considered, as described in Section 3). Note that (S,G)\n   state must\
    \ be maintained in each last-hop router that is responsible\n   for initiating\
    \ and maintaining an SP-tree. Even when (*,G) and (S,G)\n   overlap, both states\
    \ are needed to trigger the source-specific\n   Join/Prune messages.  (S,G) state\
    \ is kept alive by data packets\n   arriving from that source. A timer, Entry-timer,\
    \ is set for the (S,G)\n   entry and this timer is restarted whenever data packets\
    \ for (S,G) are\n   forwarded out at least one oif, or Registers are sent.  When\
    \ the\n   Entry-timer expires, the state is deleted. The last-hop router is the\n\
    \   router that delivers the packets to their ultimate end-system\n   destination.\
    \  This is the router that monitors if there is group\n   membership and joins\
    \ or prunes the appropriate distribution trees in\n   response.  In general the\
    \ last-hop router is the Designated Router\n   (DR) for the LAN. However, under\
    \ various conditions described later,\n   a parallel router connected to the same\
    \ LAN may take over as the\n   last-hop router in place of the DR.\n   Only the\
    \ RP and routers with local members can initiate switching to\n   the SP-tree;\
    \ intermediate routers do not. Consequently, last-hop\n   routers create (S,G)\
    \ state in response to data packets from the\n   source, S; whereas intermediate\
    \ routers only create (S,G) state in\n   response to Join/Prune messages from\
    \ downstream that have S in the\n   Join list.\n   The (S,G) entry is initialized\
    \ with the SPT-bit cleared, indicating\n   that the shortest path tree branch\
    \ from S has not yet been setup\n   completely, and the router can still accept\
    \ packets from S that\n   arrive on the (*,G) entry's indicated incoming interface\
    \ (iif). Each\n   PIM multicast entry has an associated incoming interface on\
    \ which\n   packets are expected to arrive.\n   When a router with a (S,G) entry\
    \ and a cleared SPT-bit starts to\n   receive packets from the new source S on\
    \ the iif for the (S,G) entry,\n   and that iif differs from the (*,G) entry's\
    \ iif, the router sets the\n   SPT-bit, and sends a Join/Prune message towards\
    \ the RP, indicating\n   that the router no longer wants to receive packets from\
    \ S via the\n   shared RP-tree. The Join/Prune message sent towards the RP includes\
    \ S\n   in the prune list, with the RPT-bit set indicating that S's packets\n\
    \   must not be forwarded down this branch of the shared tree. If the\n   router\
    \ receiving the Join/Prune message has (S,G) state (with or\n   without the route\
    \ entry's RPT-bit flag set), it deletes the arriving\n   interface from the (S,G)\
    \ oif list.  If the router has only (*,G)\n   state, it creates an entry with\
    \ the RPT-bit flag set to 1. For\n   brevity we refer to an (S,G) entry that has\
    \ the RPT-bit flag set to 1\n   as an (S,G)RPT-bit entry. This notational distinction\
    \ is useful to\n   point out the different actions taken for (S,G) entries depending\
    \ on\n   the setting of the RPT-bit flag. Note that a router can have no more\n\
    \   than one active (S,G) entry for any particular S and G, at any\n   particular\
    \ time; whether the RPT-bit flag is set or not. In other\n   words, a router never\
    \ has both an (S,G) and an (S,G)RPT-bit entry for\n   the same S and G at the\
    \ same time. The Join/Prune message payload\n   contains Multicast-Address=G,\
    \ Join=NULL, Prune=S,RPT-bit.\n   A new receiver may join an existing RP-tree\
    \ on which source-specific\n   prune state has been established (e.g., because\
    \ downstream receivers\n   have switched to SP-trees). In this case the prune\
    \ state must be\n   eradicated upstream of the new receiver to bring all sources'\
    \ data\n   packets down to the new receiver.  Therefore, when a (*,G) Join\n \
    \  arrives at a router that has any (Si,G)RPT-bit entries (i.e., entries\n   that\
    \ cause the router to send source-specific prunes toward the RP),\n   these entries\
    \ must be updated upstream of the router so as to bring\n   all sources' packets\
    \ down to the new member. To accomplish this, each\n   router that receives a\
    \ (*,G) Join/Prune message updates all existing\n   (S,G)RPT-bit entries. The\
    \ router may also trigger a (*,G) Join/Prune\n   message upstream to cause the\
    \ same updating of RPT-bit settings\n   upstream and pull down all active sources'\
    \ packets. If the arriving\n   (*,G) join has some sources included in its prune\
    \ list, then the\n   corresponding (S,G)RPT-bit entries are left unchanged (i.e.,\
    \ the\n   RPT-bit remains set and no oif is added).\n"
- title: 2.5 Steady state maintenance of distribution tree (i.e., router state)
  contents:
  - "2.5 Steady state maintenance of distribution tree (i.e., router state)\n   In\
    \ the steady state each router sends periodic Join/Prune messages\n   for each\
    \ active PIM route entry; the Join/Prune messages are sent to\n   the neighbor\
    \ indicated in the corresponding entry. These messages are\n   sent periodically\
    \ to capture state, topology, and membership changes.\n   A Join/Prune message\
    \ is also sent on an event-triggered basis each\n   time a new route entry is\
    \ established for some new source (note that\n   some damping function may be\
    \ applied, e.g., a short delay to allow\n   for merging of new Join information).\
    \ Join/Prune messages do not\n   elicit any form of explicit acknowledgment; routers\
    \ recover from lost\n   packets using the periodic refresh mechanism.\n"
- title: 2.6 Obtaining RP information
  contents:
  - "2.6 Obtaining RP information\n   To obtain the RP information, all routers within\
    \ a PIM domain collect\n   Bootstrap messages. Bootstrap messages are sent hop-by-hop\
    \ within the\n   domain; the domain's bootstrap router (BSR) is responsible for\n\
    \   originating the Bootstrap messages. Bootstrap messages are used to\n   carry\
    \ out a dynamic BSR election when needed and to distribute RP\n   information\
    \ in steady state.\n   A domain in this context is a contiguous set of routers\
    \ that all\n   implement PIM and are configured to operate within a common boundary\n\
    \   defined by PIM Multicast Border Routers (PMBRs). PMBRs connect each\n   PIM\
    \ domain to the rest of the internet.\n   Routers use a set of available RPs (called\
    \ the {RP-Set}) distributed\n   in Bootstrap messages to get the proper Group\
    \ to RP mapping. The\n   following paragraphs summarize the mechanism; details\
    \ of the\n   mechanism may be found in Sections 3.6 and Appendix 6.2. A (small)\n\
    \   set of routers, within a domain, are configured as candidate BSRs\n   and,\
    \ through a simple election mechanism, a single BSR is selected\n   for that domain.\
    \ A set of routers within a domain are also configured\n   as candidate RPs (C-RPs);\
    \ typically these will be the same routers\n   that are configured as C-BSRs.\
    \  Candidate RPs periodically unicast\n   Candidate-RP-Advertisement messages\
    \ (C-RP-Advs) to the BSR of that\n   domain. C-RP-Advs include the address of\
    \ the advertising C-RP, as\n   well as an optional group address and a mask length\
    \ field, indicating\n   the group prefix(es) for which the candidacy is advertised.\
    \  The BSR\n   then includes a set of these Candidate-RPs (the RP-Set), along\
    \ with\n   the corresponding group prefixes, in Bootstrap messages it\n   periodically\
    \ originates.  Bootstrap messages are distributed hop-by-\n   hop throughout the\
    \ domain.\n   Routers receive and store Bootstrap messages originated by the BSR.\n\
    \   When a DR gets a membership indication from IGMP for (or a data\n   packet\
    \ from) a directly connected host, for a group for which it has\n   no entry,\
    \ the DR uses a hash function to map the group address to one\n   of the C-RPs\
    \ whose Group-prefix includes the group (see Section 3.7).\n   The DR then sends\
    \ a Join/Prune message towards (or unicasts Registers\n   to) that RP.\n   The\
    \ Bootstrap message indicates liveness of the RPs included therein.\n   If an\
    \ RP is included in the message, then it is tagged as `up' at the\n   routers;\
    \ while RPs not included in the message are removed from the\n   list of RPs over\
    \ which the hash algorithm acts. Each router continues\n   to use the contents\
    \ of the most recently received Bootstrap message\n   until it receives a new\
    \ Bootstrap message.\n   If a PIM domain partitions, each area separated from\
    \ the old BSR will\n   elect its own BSR, which will distribute an RP-Set containing\
    \ RPs\n   that are reachable within that partition. When the partition heals,\n\
    \   another election will occur automatically and only one of the BSRs\n   will\
    \ continue to send out Bootstrap messages. As is expected at the\n   time of a\
    \ partition or healing, some disruption in packet delivery\n   may occur.  This\
    \ time will be on the order of the region's round-trip\n   time and the bootstrap\
    \ router timeout value.\n"
- title: 2.7 Interoperation with dense mode  protocols such as DVMRP
  contents:
  - "2.7 Interoperation with dense mode  protocols such as DVMRP\n   In order to interoperate\
    \ with networks that run dense-mode,\n   {broadcast and prune}, protocols, such\
    \ as DVMRP, all packets\n   generated within a PIM-SM region must be pulled out\
    \ to that region's\n   PIM Multicast Border Routers (PMBRs) and injected (i.e.,\
    \ broadcast)\n   into the DVMRP network.  A PMBR is a router that sits at the\
    \ boundary\n   of a PIM-SM domain and interoperates with other types of multicast\n\
    \   routers such as those that run DVMRP.  Generally a PMBR would speak\n   both\
    \ protocols and implement interoperability functions not required\n   by regular\
    \ PIM routers. To support interoperability, a special entry\n   type, referred\
    \ to as (*,*,RP), must be supported by all PIM routers.\n   For this reason we\
    \ include details about (*,*,RP) entry handling in\n   this general PIM specification.\n\
    \   A data packet will match on a (*,*,RP) entry if there is no more\n   specific\
    \ entry (such as (S,G) or (*,G)) and the destination group\n   address in the\
    \ packet maps to the RP listed in the (*,*,RP) entry. In\n   this sense, a (*,*,RP)\
    \ entry represents an aggregation of all the\n   groups that hash to that RP.\
    \ PMBRs initialize (*,*,RP) state for each\n   RP in the domain's RPset. The (*,*,RP)\
    \ state causes the PMBRs to send\n   (*,*,RP) Join/Prune messages toward each\
    \ of the active RPs in the\n   domain.  As a result distribution trees are built\
    \ that carry all data\n   packets originated within the PIM domain (and sent to\
    \ the RPs) down\n   to the PMBRs.\n   PMBRs are also responsible for delivering\
    \ externally-generated\n   packets to routers within the PIM domain. To do so,\
    \ PMBRs initially\n   encapsulate externally-originated packets (i.e., received\
    \ on DVMRP\n   interfaces) in Register messages and unicast them to the\n   corresponding\
    \ RP within the PIM domain. The Register message has a\n   bit indicating that\
    \ it was originated by a border router and the RP\n   caches the originating PMBR's\
    \ address in the route entry so that\n   duplicate Registers from other PMBRs\
    \ can be declined with a\n   Register-Stop message.\n   All PIM routers must be\
    \ capable of supporting (*,*,RP) state and\n   interpreting associated Join/Prune\
    \ messages. We describe the handling\n   of (*,*,RP) entries and messages throughout\
    \ this document; however,\n   detailed PIM Multicast Border Router (PMBR) functions\
    \ will be\n   specified in a separate interoperability document (see directory,\n\
    \   http://catarina.usc.edu/pim/interop/).\n"
- title: 2.8 Multicast data packet processing
  contents:
  - "2.8 Multicast data packet processing\n   Data packets are processed in a manner\
    \ similar to other multicast\n   schemes.  A router first performs a longest match\
    \ on the source and\n   group address in the data packet. A (S,G) entry is matched\
    \ first if\n   one exists; a (*,G) entry is matched otherwise. If neither state\n\
    \   exists, then a (*,*,RP) entry match is attempted as follows: the\n   router\
    \ hashes on G to identify the RP for group G, and looks for a\n   (*,*,RP) entry\
    \ that has this RP address associated with it.  If none\n   of the above exists,\
    \ then the packet is dropped. If a state is\n   matched, the router compares the\
    \ interface on which the packet\n   arrived to the incoming interface field in\
    \ the matched route entry.\n   If the iif check fails the packet is dropped, otherwise\
    \ the packet is\n   forwarded to all interfaces listed in the outgoing interface\
    \ list.\n   Some special actions are needed to deliver packets continuously while\n\
    \   switching from the shared to shortest-path tree. In particular, when\n   a\
    \ (S,G) entry is matched, incoming packets are forwarded as follows:\n      1\
    \    If the SPT-bit is set, then:\n           1    if the incoming interface is\
    \ the same as a matching\n                (S,G) iif, the packet is forwarded to\
    \ the oif-list of\n                (S,G).\n           2    if the incoming interface\
    \ is different than a matching\n                (S,G) iif , the packet is discarded.\n\
    \      2    If the SPT-bit is cleared, then:\n           1    if the incoming\
    \ interface is the same as a matching\n                (S,G) iif, the packet is\
    \ forwarded to the oif-list of\n                (S,G). In addition, the SPT bit\
    \ is set for that entry\n                if the incoming interface differs from\
    \ the incoming\n                interface of the (*,G) or (*,*,RP) entry.\n  \
    \         2    if the incoming interface is different than a matching\n      \
    \          (S,G) iif, the incoming interface is tested against a\n           \
    \     matching (*,G) or (*,*,RP) entry. If the iif is the\n                same\
    \ as one of those, the packet is forwarded to the\n                oif-list of\
    \ the matching entry.\n           3    Otherwise the iif does not match any entry\
    \ for G and\n                the packet is discarded.\n   Data packets never trigger\
    \ prunes.  However, data packets may trigger\n   actions that in turn trigger\
    \ prunes. For example, when router B in\n   figure 3 decides to switch to SP-tree\
    \ at step 3, it creates a (S,G)\n   entry with SPT-bit set to 0. When data packets\
    \ from S arrive at\n   interface 2 of B, B sets the SPT-bit to 1 since the iif\
    \ for (*,G) is\n   different than that for (S,G). This triggers the sending of\
    \ prunes\n   towards the RP.\n"
- title: 2.9 Operation over Multi-access Networks
  contents:
  - "2.9 Operation over Multi-access Networks\n   This section describes a few additional\
    \ protocol mechanisms needed to\n   operate PIM over multi-access networks: Designated\
    \ Router election,\n   Assert messages to resolve parallel paths, and the Join/Prune-\n\
    \   Suppression-Timer to suppress redundant Joins on multi-access\n   networks.\n\
    \   * Designated router election\n   When there are multiple routers connected\
    \ to a multi-access network,\n   one of them must be chosen to operate as the\
    \ designated router (DR)\n   at any point in time.  The DR is responsible for\
    \ sending triggered\n   Join/Prune and Register messages toward the RP.\n   A\
    \ simple designated router (DR) election mechanism is used for both\n   SM and\
    \ traditional IP multicast routing.  Neighboring routers send\n   Hello messages\
    \ to each other. The sender with the largest IP address\n   assumes the role of\
    \ DR. Each router connected to the multi-access LAN\n   sends the Hellos periodically\
    \ in order to adapt to changes in router\n   status.\n   * Parallel paths to a\
    \ source or the RP--Assert process\n   If a router receives a multicast datagram\
    \ on a multi-access LAN from\n   a source whose corresponding (S,G) outgoing interface\
    \ list includes\n   the interface to that LAN, the packet must be a duplicate.\
    \  In this\n   case a single forwarder must be elected.  Using Assert messages\n\
    \   addressed to `224.0.0.13' (ALL-PIM-ROUTERS group) on the LAN,\n   upstream\
    \ routers can resolve which one will act as the forwarder.\n   Downstream routers\
    \ listen to the Asserts so they know which one was\n   elected, and therefore\
    \ where to send subsequent Joins. Typically this\n   is the same as the downstream\
    \ router's RPF (Reverse Path Forwarding)\n   neighbor; but there are circumstances\
    \ where this might not be the\n   case, e.g., when using multiple unicast routing\
    \ protocols on that\n   LAN. The RPF neighbor for a particular source (or RP)\
    \ is the next-hop\n   router to which packets are forwarded en route to that source\
    \ (or\n   RP); and therefore is considered a good path via which to accept\n \
    \  packets from that source.\n   The upstream router elected is the one that has\
    \ the shortest distance\n   to the source. Therefore, when a packet is received\
    \ on an outgoing\n   interface a router sends an Assert message on the multi-access\
    \ LAN\n   indicating what metric it uses to reach the source of the data\n   packet.\
    \  The router with the smallest numerical metric (with ties\n   broken by highest\
    \ address) will become the forwarder. All other\n   upstream routers will delete\
    \ the interface from their outgoing\n   interface list. The downstream routers\
    \ also do the comparison in case\n   the forwarder is different than the RPF neighbor.\n\
    \   Associated with the metric is a metric preference value. This is\n   provided\
    \ to deal with the case where the upstream routers may run\n   different unicast\
    \ routing protocols. The numerically smaller metric\n   preference is always preferred.\
    \ The metric preference is treated as\n   the high-order part of an assert metric\
    \ comparison.  Therefore, a\n   metric value can be compared with another metric\
    \ value provided both\n   metric preferences are the same.  A metric preference\
    \ can be assigned\n   per unicast routing protocol and needs to be consistent\
    \ for all\n   routers on the multi-access network.\n   Asserts are also needed\
    \ for (*,G) entries since an RP-Tree and an\n   SP-Tree for the same group may\
    \ both cross the same multi- access\n   network. When an assert is sent for a\
    \ (*,G) entry, the first bit in\n   the metric preference (RPT-bit) is always\
    \ set to 1 to indicate that\n   this path corresponds to the RP tree, and that\
    \ the match must be done\n   on (*,G) if it exists. Furthermore, the RPT-bit is\
    \ always cleared for\n   metric preferences that refer to SP-tree entries; this\
    \ causes an SP-\n   tree path to always look better than an RP-tree path. When\
    \ the SP-\n   tree and RPtree cross the same LAN, this mechanism eliminates the\n\
    \   duplicates that would otherwise be carried over the LAN.\n   In case the packet,\
    \ or the Assert message, matches  on  oif  for\n   (*,*,RP) entry, a (*,G) entry\
    \ is created, and asserts take place as\n   if the matching state were (*,G).\n\
    \   The DR may lose the (*,G) Assert process to another router on the LAN\n  \
    \ if there are multiple paths to the RP through the LAN.  From then on,\n   the\
    \ DR is no longer the last-hop router for local receivers and\n   removes the\
    \ LAN from its (*,G) oif list. The winning router becomes\n   the last-hop router\
    \ and is responsible for sending (*,G) join\n   messages to the RP.\n   * Join/Prune\
    \ suppression\n   Join/Prune suppression may be used on multi-access LANs to reduce\n\
    \   duplicate control message overhead; it is not required for correct\n   performance\
    \ of the protocol. If a Join/Prune message arrives and\n   matches on the incoming\
    \ interface for an existing (S,G), (*,G), or\n   (*,*,RP) route entry, and the\
    \ Holdtime included in the Join/Prune\n   message is greater than the recipient's\
    \ own [Join/Prune-Holdtime]\n   (with ties resolved in favor of the higher IP\
    \ address), a timer (the\n   Join/Prune-Suppression-timer) in the recipient's\
    \ route entry may be\n   started to suppress further Join/Prune messages.  After\
    \ this timer\n   expires, the recipient triggers a Join/Prune message, and resumes\n\
    \   sending periodic Join/Prunes, for this entry. The Join/Prune-\n   Suppression-timer\
    \ should be restarted each time a Join/Prune message\n   is received with a higher\
    \ Holdtime.\n"
- title: 2.10 Unicast Routing Changes
  contents:
  - "2.10 Unicast Routing Changes\n   When unicast routing changes, an RPF check is\
    \ done on all active\n   (S,G), (*,G) and (*,*,RP) entries, and all affected expected\
    \ incoming\n   interfaces are updated.  In particular, if the new incoming interface\n\
    \   appears in the outgoing interface list, it is deleted from the\n   outgoing\
    \ interface list. The previous incoming interface may be added\n   to the outgoing\
    \ interface list by a subsequent Join/Prune from\n   downstream.  Join/Prune messages\
    \ received on the current incoming\n   interface are ignored.  Join/Prune messages\
    \ received on new\n   interfaces or existing outgoing interfaces are not ignored.\
    \ Other\n   outgoing interfaces are left as is until they are explicitly pruned\n\
    \   by downstream routers or are timed out due to lack of appropriate\n   Join/Prune\
    \ messages. If the router has a (S,G) entry with the SPT-bit\n   set, and the\
    \ updated iif(S,G) does not differ from iif(*,G) or\n   iif(*,*,RP), then the\
    \ router resets the SPT-bit.\n   The router must send a Join/Prune message with\
    \ S in the Join list out\n   any new incoming interfaces to inform upstream routers\
    \ that it\n   expects multicast datagrams over the interface.  It may also send\
    \ a\n   Join/Prune message with S in the Prune list out the old incoming\n   interface,\
    \ if the link is operational, to inform upstream routers\n   that this part of\
    \ the distribution tree is going away.\n"
- title: 2.11 PIM-SM for Inter-Domain Multicast
  contents:
  - "2.11 PIM-SM for Inter-Domain Multicast\n   Future documents will address the\
    \ use of PIM-SM as a backbone inter-\n   domain multicast routing protocol. Design\
    \ choices center primarily\n   around the distribution and usage of RP information\
    \ for wide area,\n   inter-domain groups.\n"
- title: 2.12 Security
  contents:
  - "2.12 Security\n   All PIM control messages may use IPsec [6] to address security\n\
    \   concerns.  Security mechanisms are likely to be enhanced in the near\n   future.\n"
- title: 3 Detailed Protocol Description
  contents:
  - "3 Detailed Protocol Description\n   This section describes the protocol operations\
    \ from the perspective\n   of an individual router implementation.  In particular,\
    \ for each\n   message type we describe how it is generated and processed.\n"
- title: 3.1 Hello
  contents:
  - "3.1 Hello\n   Hello messages are sent so neighboring routers can discover each\n\
    \   other.\n"
- title: 3.1.1 Sending Hellos
  contents:
  - "3.1.1 Sending Hellos\n   Hello messages are sent periodically between PIM neighbors,\
    \ every\n   [Hello-Period] seconds.  This informs routers what interfaces have\n\
    \   PIM neighbors.  Hello messages are multicast using address 224.0.0.13\n  \
    \ (ALL-PIM-ROUTERS group). The packet includes a Holdtime, set to\n   [Hello-Holdtime],\
    \ for neighbors to keep the information valid.\n   Hellos are sent on all types\
    \ of communication links.\n"
- title: 3.1.2 Receiving Hellos
  contents:
  - "3.1.2 Receiving Hellos\n   When a router receives a Hello message, it stores\
    \ the IP address for\n   that neighbor, sets its Neighbor-timer for the Hello\
    \ sender to the\n   Holdtime included in the Hello, and determines the Designated\
    \ Router\n   (DR) for that interface.  The highest IP addressed system is elected\n\
    \   DR. Each Hello received causes the DR's address to be updated.\n   When a\
    \ router that is the active DR receives a Hello from a new\n   neighbor (i.e.,\
    \ from an IP address that is not yet in the DRs\n   neighbor table), the DR unicasts\
    \ its most recent RP-set information\n   to the new neighbor.\n"
- title: 3.1.3 Timing out neighbor entries
  contents:
  - "3.1.3 Timing out neighbor entries\n   A periodic process is run to time out PIM\
    \ neighbors that have not\n   sent Hellos. If the DR has gone down, a new DR is\
    \ chosen by scanning\n   all neighbors on the interface and selecting the new\
    \ DR to be the one\n   with the highest IP address. If an interface has gone down,\
    \ the\n   router may optionally time out all PIM neighbors associated with the\n\
    \   interface.\n"
- title: 3.2 Join/Prune
  contents:
  - "3.2 Join/Prune\n   Join/Prune messages are sent to join or prune a branch off\
    \ of the\n   multicast distribution tree. A single message contains both a join\n\
    \   and prune list, either one of which may be null.  Each list contains\n   a\
    \ set of source addresses, indicating the source- specific trees or\n   shared\
    \ tree that the router wants to join or prune.\n"
- title: 3.2.1 Sending Join/Prune Messages
  contents:
  - "3.2.1 Sending Join/Prune Messages\n   Join/Prune messages are merged such that\
    \ a message sent to a\n   particular upstream neighbor, N, includes all of the\
    \ current joined\n   and pruned sources that are reached via N; according to unicast\n\
    \   routing Join/Prune messages are multicast to all routers on multi-\n   access\
    \ networks with the target address set to the next hop router\n   towards S or\
    \ RP. Join/Prune messages are sent every [Join/Prune-\n   Period] seconds. In\
    \ the future we will introduce mechanisms to rate-\n   limit this control traffic\
    \ on a hop by hop basis, in order to avoid\n   excessive overhead on small links.\
    \  In addition, certain events cause\n   triggered Join/Prune messages to be sent.\n"
- title: 3.2.1.1 Periodic Join/Prune Messages
  contents:
  - "3.2.1.1 Periodic Join/Prune Messages\n   A router sends a periodic Join/Prune\
    \ message to each distinct RPF\n   neighbor associated with each (S,G), (*,G)\
    \ and (*,*,RP) entry.\n   Join/Prune messages are only sent if the RPF neighbor\
    \ is a PIM\n   neighbor.  A periodic Join/Prune message sent to a particular RPF\n\
    \   neighbor is constructed as follows:\n   1    Each router determines the RP\
    \ for a (*,G) entry by using\n        the hash function described. The RP address\
    \ (with RPT and\n        WC bits set) is included in the join list of a periodic\n\
    \        Join/Prune message under the following conditions:\n        1    The\
    \ Join/Prune message is being sent to the RPF\n             neighbor toward the\
    \ RP for an active (*,G) or (*,*,RP)\n             entry, and\n        2    The\
    \ outgoing interface list in the (*,G) or (*,*,RP)\n             entry is non-NULL,\
    \ or the router is the DR on the same\n             interface as the RPF neighbor.\n\
    \   2    A particular source address, S, is included in the join\n        list\
    \ with the RPT and WC bits cleared under the following\n        conditions:\n\
    \        1    The Join/Prune message is being sent to the RPF\n             neighbor\
    \ toward S, and\n        2    There exists an active (S,G) entry with the RPT-bit\n\
    \             flag cleared, and\n        3    The oif list in the (S,G) entry\
    \ is not null.\n   3    A particular source address, S, is included in the prune\n\
    \        list with the RPT and WC bits cleared under the following\n        conditions:\n\
    \        1    The Join/Prune message is being sent to the RPF\n             neighbor\
    \ toward S, and\n        2    There exists an active (S,G) entry with the RPT-bit\n\
    \             flag cleared, and\n        3    The oif list in the (S,G) entry\
    \ is null.\n   4    A particular source address, S, is included in the prune\n\
    \        list with the RPT-bit set and the WC bit cleared under the\n        following\
    \ conditions:\n        1    The Join/Prune message is being sent to the RPF\n\
    \             neighbor toward the RP and there exists a (S,G) entry\n        \
    \     with the RPT-bit flag set and null oif list, or\n        2    The Join/Prune\
    \ message is being sent to the RPF\n             neighbor toward the RP, there\
    \ exists a (S,G) entry\n             with the RPT-bit flag cleared and SPT-bit\
    \ set, and the\n             incoming interface toward S is different than the\n\
    \             incoming interface toward the RP, or\n        3    The Join/Prune\
    \ message is being sent to the RPF\n             neighbor toward the RP, and there\
    \ exists a (*,G) entry\n             and (S,G) entry for a directly connected\
    \ source.\n   5    The RP address (with RPT and WC bits set) is included in\n\
    \        the prune list if:\n        1    The Join/Prune message is being sent\
    \ to the RPF\n             neighbor toward the RP and there exists a (*,G) entry\n\
    \             with a null oif list (see Section 3.5.2).\n"
- title: 3.2.1.2 Triggered Join/Prune Messages
  contents:
  - "3.2.1.2 Triggered Join/Prune Messages\n   In addition to periodic messages, the\
    \ following events will trigger\n   Join/Prune messages if as a result, a) a new\
    \ entry is created, or b)\n   the oif list changes from null to non-null or non-null\
    \ to null. The\n   contents of triggered messages are the same as the periodic,\n\
    \   described above.\n   1    Receipt of an indication from IGMP that the state\
    \ of\n        directly-connected- membership has changed (i.e., new members\n\
    \        have just joined `membership indication' or all members have\n      \
    \  left), for a group G, may cause the last-hop router to build\n        or modify\
    \ corresponding (*,G) state.  When IGMP indicates\n        that there are no longer\
    \ directly connected members, the oif\n        is removed from the oif list if\
    \ the oif- timer is not\n        running.  A Join/Prune message is triggered if\
    \ and only if\n        a) a new entry is created, or b) the oif list changes from\n\
    \        null to non-null or non-null to null, as follows :\n        1    If the\
    \ receiving router does not have a route entry\n             for G the router\
    \ creates a (*,G) entry, copies the\n             oif list from the corresponding\
    \ (*,*,RP) entry\n             (if it exists), and includes the interface included\n\
    \             in the IGMP membership indication in the oif list;\n           \
    \  as always, the router never includes the entry's iif\n             in the oif\
    \ list.  The router sends a Join/Prune\n             message towards the RP with\
    \ the RP address and RPT-bit\n             and WC-bits set in the join list. Or,\n\
    \        2    If a (S,G)RPT-bit or (*,G) entry already exists, the\n         \
    \    interface included in the IGMP membership indication\n             is added\
    \ to the oif list (if it was not included already).\n   2    Receipt of a Join/Prune\
    \ message for (S,G), (*,G) or (*,*,RP)\n        will cause building or modifying\
    \ corresponding state, and\n        subsequent triggering of upstream Join/Prune\
    \ messages, in the\n        following cases:\n        1    When there is no current\
    \ route entry, the RP address\n             included in the Join/Prune message\
    \ is checked against\n             the local RP-Set information. If it matches,\
    \ an entry\n             will be created and the new entry will in turn trigger\n\
    \             an upstream Join/Prune message. If the router has no\n         \
    \    RP-Set information it may discard the message, or\n             optionally\
    \ use the RP address included in the message.\n        2    When the outgoing\
    \ interface list of an (S,G)RPT-bit\n             entry becomes null, the triggered\
    \ Join/Prune message\n             will contain S in the prune list.\n       \
    \ 3    When there exists a (S,G)RPT-bit with null oif list,\n             and\
    \ an (*,G) Join/Prune message is received, the\n             arriving interface\
    \ is added to the oif list and a (*,G)\n             Join/Prune message is triggered\
    \ upstream.\n        4    When there exists a (*,G) with null oif list, and a\n\
    \             (*,*,RP) Join/Prune message is received, the receiving\n       \
    \      interface is added to the oif list and a (*,*,RP)\n             Join/Prune\
    \ message is triggered upstream.\n   3    Receipt of a packet that matches on\
    \ a (S,G) entry whose\n        SPT-bit is cleared triggers the following if the\
    \ packet\n        arrived on the correct incoming interface and there is a\n \
    \       (*,G) or (*,*,RP) entry with a different incoming\n        interface:\
    \ a) the router sets the SPT-bit on the (S,G)\n        entry, and b) the router\
    \ sends a Join/Prune message\n        towards the RP with S and a set RPT-bit\
    \ in the prune list.\n   4    When a Join/Prune message is received for a group\
    \ G, the\n        prune list is checked. If the prune list contains a source\n\
    \        or RP for which the receiving router has a corresponding\n        active\
    \ (S,G), (*,G) or (*,*,RP) entry, and whose iif is\n        that on which the\
    \ Join/Prune was received, then a join for\n        (S,G), (*,G) or (*,*,RP) is\
    \ triggered to override the prune,\n        respectively. (This is necessary in\
    \ the case of parallel\n        downstream routers connected to a multi-access\
    \ network.)\n   5    When the RP fails, the RP will not be included in the\n \
    \       Bootstrap messages sent to all routers in that domain.\n        This triggers\
    \ the DRs to send (*,G) Join/Prune messages\n        towards new RP for the group,\
    \ as determined by the RP-Set\n        and the hash function.  As described earlier,\
    \ PMBRs trigger\n        (*,*,RP) joins towards each RP in the RP-Set.\n   6 \
    \   When an entry's Join/Prune-Suppression timer expires, a\n        Join/Prune\
    \ message is triggered upstream corresponding to\n        that entry, even if\
    \ the outgoing interface has not\n        transitioned between null and non-null\
    \ states.\n   7    When the RPF neighbor changes (whether due to an Assert or\n\
    \        changes in unicast routing), the router sets a random delay\n       \
    \ timer (the Random-Delay-Join-Timer) whose expiration triggers\n        sending\
    \ of a Join/Prune message for the asserted route entry\n        to the Assert\
    \ winner (if the Join/Prune Suppression timer has\n        expired.)\n   We do\
    \ not trigger prunes onto interfaces based on data packets.  Data\n   packets\
    \ that arrive on the wrong incoming interface are silently\n   dropped.  However,\
    \ on point-to-point interfaces triggered prunes may\n   be sent as an optimization.\n\
    \   3.2.1.3 Fragmentation: It is possible that a Join/Prune message\n   constructed\
    \ according to the preceding rules could exceed the MTU of\n   a network. In this\
    \ case, the message can undergo semantic\n   fragmentation whereby information\
    \ corresponding to different groups\n   can be sent in different messages.  However,\
    \ if a Join/Prune message\n   must be fragmented the complete prune list corresponding\
    \ to a group G\n   must be included in the same Join/Prune message as the associated\n\
    \   RP-tree Join for G. If such semantic fragmentation is not possible,\n   IP\
    \ fragmentation should be used between the two neighboring hops.\n"
- title: 3.2.2 Receiving Join/Prune Messages When a router receives a
  contents:
  - "3.2.2 Receiving Join/Prune Messages When a router receives a\n           Join/Prune\
    \ message, it processes it as follows.\n   The receiver of the Join/Prune notes\
    \ the interface on which the PIM\n   message arrived, call it I. The receiver\
    \ then checks to see if the\n   Join/Prune message was addressed to the receiving\
    \ router itself\n   (i.e., the router's address appears in the Unicast Upstream\
    \ Neighbor\n   Router field of the Join/Prune message).  (If the router is connected\n\
    \   to a multiaccess LAN, the message could be intended for a different\n   router.)\
    \ If the Join/Prune is for this router the following actions\n   are taken.\n\
    \   For each group address G, in the Join/Prune message, the associated\n   join\
    \ list is processed as follows. We refer to each address in the\n   join list\
    \ as Sj; Sj refers to the RP if the RPT- bit and WC-bit are\n   both set. For\
    \ each Sj in the join list of the Join/Prune message:\n   1    If an address,\
    \ Sj, in the join list of the Join/Prune\n        message  has  the RPT-bit and\
    \ WC-bit set, then Sj is the RP\n        address used by the downstream router(s)\
    \ and the  following\n        actions are taken:\n        1    If Sj is not the\
    \ same as the receiving router's RP\n             mapping for G, the receiving\
    \ router may ignore the\n             Join/Prune message with respect to that\
    \ group entry.\n             If the router does not have any RP-Set information,\
    \ it\n             may use the address Sj included in the Join/Prune\n       \
    \      message as the RP for the group.\n        2    If Sj is the same as the\
    \ receiving router's RP mapping\n             for G, the receiving router adds\
    \ I to the outgoing\n             interface list of the (*,G) route entry (if\
    \ there is\n             no (*,G) entry, the router creates one first) and sets\n\
    \             the Oif-timer for that interface to the Holdtime\n             specified\
    \ in the Join/Prune message.  In addition, the\n             Oif-Deletion-Delay\
    \ for that interface is set to 1/3rd\n             the Holdtime specified in the\
    \ Join/Prune message.\n             If a (*,*,RP) entry exists, for the RP associated\
    \ with\n             G, then the oif list of the newly created (*,G) entry\n \
    \            is copied from that (*,*,RP) entry.\n        3    For each (Si,G)\
    \ entry associated with group G, if Si\n             is not included in the prune\
    \ list, and if I is not the\n             iif then interface I is added to the\
    \ oif list and the\n             Oif-timer for that interface in each affected\
    \ entry\n             is increased (never decreased) to the Holdtime included\n\
    \             in the Join/Prune message.  In addition, if the\n             Oif-timer\
    \ for that interface is increased, the\n             Oif-Deletion-Delay for that\
    \ interface is set to 1/3rd\n             the Holdtime specified in the Join/Prune\
    \ message.\n             If the group address in the Join/Prune message is `*'\n\
    \             then every (*,G) and (S,G) entry, whose group address\n        \
    \     hashes to the RP indicated in the (*,*,RP) Join/Prune\n             message,\
    \ is updated accordingly. A `*' in the group\n             field of the Join/Prune\
    \ is represented by a group\n             address 224.0.0.0 and a group mask length\
    \ of 4,\n             indicating a (*,*,RP) Join.\n        4    If the (Si,G)\
    \ entry has its RPT-bit flag set to 1, and\n             its oif list is the same\
    \ as the (*,G) oif list, then\n             the (Si,G)RPT-bit entry is deleted,\n\
    \        5    The incoming interface is set to the interface used to\n       \
    \      send unicast packets to the RP in the (*,G) route\n             entry,\
    \ i.e., RPF interface toward the RP.\n   2    For each address, Sj, in the join\
    \ list whose RPT-bit and\n        WC-bit are not set, and for which there is no\
    \ existing (Sj,G)\n        route entry, the router initiates one.  The router\
    \ creates a\n        (S,G) entry and copies all outgoing interfaces from the\n\
    \        (S,G)RPT-bit entry, if it exists. If there is no (S,G) entry,\n     \
    \   the oif list is copied from the (*,G) entry; and if there is\n        no (*,G)\
    \ entry, the oif list is copied from the (*,*,RP)\n        entry, if it exists.\
    \  In all cases, the iif of the (S,G)\n        entry is always excluded from the\
    \ oif list.\n        1    The outgoing interface for (Sj,G) is set to I.  The\n\
    \             incoming interface for (Sj,G) is set to the interface\n        \
    \     used to send unicast packets to Sj (i.e., the RPF\n             neighbor).\n\
    \        2    If the interface used to reach Sj, is the same as I,\n         \
    \    this represents an error (or a unicast routing change)\n             and\
    \ the Join/Prune must not be processed.\n   3    For each address, Sj, in the\
    \ join list of the Join/Prune\n        message, for which there is an existing\
    \ (Sj,G) route entry,\n        1    If the RPT-bit is not set for Sj listed in\
    \ the\n             Join/Prune message, but the RPT-bit flag is set on the\n \
    \            existing (Sj,G) entry, the router clears the RPT-bit\n          \
    \   flag on the (Sj,G) entry, sets the incoming interface\n             to point\
    \ towards Sj for that (Sj,G) entry, and sends a\n             Join/Prune message\
    \ corresponding to that entry through\n             the new incoming interface;\
    \ and\n        2    If I is not the same as the existing incoming\n          \
    \   interface, the router adds I to the list of outgoing\n             interfaces.\n\
    \        3    The Oif-timer for I is increased (never decreased)\n           \
    \  to the Holdtime included in the Join/Prune message.\n             In addition,\
    \ if the Oif-timer for that interface is\n             increased, the Oif-Deletion-Delay\
    \ for that interface\n             is set to 1/3rd the Holdtime specified in the\n\
    \             Join/Prune message.\n        4    The (Sj,G) entry's SPT bit is\
    \ cleared until data comes\n             down the shortest path tree.\n   For\
    \ each group address G, in the Join/Prune message, the associated\n   prune list\
    \ is processed as follows. We refer to each address in the\n   prune list as Sp;\
    \ Sp refers to the RP if the RPT-bit and WC-bit are\n   both set. For each Sp\
    \ in the prune list of the Join/Prune message:\n   1    For each address, Sp,\
    \ in the prune list whose RPT-bit and\n        WC-bit are cleared:\n        1\
    \    If there is an existing (Sp,G) route entry, the router\n             lowers\
    \ the Oif-timer for I to its Oif-Deletion-Delay,\n             allowing for other\
    \ downstream routers on a multi-\n             access LAN to override the prune.\
    \ However, on point-\n             to-point links, the oif-timer is expired immediately.\n\
    \        2    If the router has a current (*,G), or (*,*,RP), route\n        \
    \     entry, and if the existing (Sp,G) entry has its RPT-\n             bit flag\
    \ set to 1, then this (Sp,G)RPT-bit entry is\n             maintained (not deleted)\
    \ even if its outgoing\n             interface list is null.\n   2    For each\
    \ address, Sp, in the prune list whose RPT-bit is\n        set and whose WC-bit\
    \ cleared:\n        1    If there is an existing (Sp,G) route entry, the router\n\
    \             lowers the entry's Oif-timer for I to its\n             Oif-Deletion-Delay,\
    \ allowing for other downstream\n             routers on a multi- access LAN to\
    \ override the prune.\n             However, on point-to-point links, the oif-timer\
    \ is\n             expired immediately.\n        2    If the router has a current\
    \ (*,G), or (*,*,RP), route\n             entry, and if the existing (Sp,G) entry\
    \ has its\n             RPT- bit flag set to 1, then this (Sp,G)RPT-bit entry\n\
    \             is not deleted, and the Entry-timer is restarted, even\n       \
    \      if its outgoing interface list is null.\n        3    If (*,G), or corresponding\
    \ (*,*,RP), state exists, but\n             there is no (Sp,G) entry, an (Sp,G)RPT-bit\
    \ entry is\n             created. The outgoing interface list is copied from the\n\
    \             (*,G), or (*,*,RP), entry, with the interface, I, on\n         \
    \    which the prune was received, is deleted.  Packets from\n             the\
    \ pruned source, Sp, match on this state and are not\n             forwarded toward\
    \ the pruned receivers.\n        4    If there exists a (Sp,G) entry, with or\
    \ without the\n             RPT-bit set, the oif-timer for I is expired, and the\n\
    \             Entry-timer is restarted.\n   3    For each address, Sp, in the\
    \ prune list whose RPT-bit and\n        WC-bit are both set:\n        1    If\
    \ there is an existing (*,G) entry, with Sp as the RP\n             for G, the\
    \ router lowers the entry's Oif-timer for I\n             to its Oif-Deletion-Delay,\
    \ allowing for other\n             downstream routers on a multi-access LAN to\
    \ override the\n             prune. However, on point-to-point links, the oif-timer\n\
    \             is expired immediately.\n        2    If the corresponding (*,*,RP)\
    \ state exists, but there\n             is no (*,G) entry, a (*,G) entry is created.\
    \ The\n             outgoing interface list is copied from (*,*,RP) entry,\n \
    \            with the interface, I, on which the prune was\n             received,\
    \ deleted.\n        For any new (S,G), (*,G) or (*,*,RP) entry created by an\n\
    \        incoming Join/Prune message, the SPT-bit is cleared (and if a\n     \
    \   Join/Prune-Suppression timer is used, it is left off.)\n   If the entry has\
    \ a Join/Prune-Suppression timer associated with it,\n   and if the received Join/Prune\
    \ does not indicate the router as its\n   target, then the receiving router examines\
    \ the join and prune lists\n   to see if any addresses in the list `completely-\
    \ match' existing\n   (S,G), (*,G), or (*,*,RP) state for which the receiving\
    \ router\n   currently schedules Join/Prune messages. An element on the join or\n\
    \   prune list `completely-matches' a route entry only if both the IP\n   addresses\
    \ and RPT-bit flag are the same. If the incoming Join/Prune\n   message completely\
    \ matches an existing (S,G), (*,G), or (*,*,RP)\n   entry and the Join/Prune arrived\
    \ on the iif for that entry, then the\n   router compares the Holdtime included\
    \ in the Join/Prune message, to\n   its own [Join/Prune-Holdtime].  If its own\
    \ [Join/Prune-Holdtime] is\n   lower, the Join/Prune-Suppression-timer is started\
    \ at the\n   [Join/Prune-Suppression-Timeout]. If the [Join/Prune-Holdtime] is\n\
    \   equal, the tie is resolved in favor of the Join/Prune Message\n   originator\
    \ that has the higher IP address. When the Join/Prune timer\n   expires, the router\
    \ triggers a Join/Prune message for the\n   corresponding entry(ies).\n"
- title: 3.3 Register and Register-Stop
  contents:
  - "3.3 Register and Register-Stop\n   When a source first starts sending to a group\
    \ its packets are\n   encapsulated in Register messages and sent to the RP. If\
    \ the data\n   rate warrants source-specific paths, the RP sets up source specific\n\
    \   state and starts sending (S,G) Join/Prune messages toward the source,\n  \
    \ with S in the join list.\n"
- title: 3.3.1 Sending Registers and Receiving Register-Stops
  contents:
  - "3.3.1 Sending Registers and Receiving Register-Stops\n   Register messages are\
    \ sent as follows:\n   1    When a DR receives a packet from a directly connected\n\
    \        source, S\n        1    If there is no corresponding (S,G) entry, and\
    \ the\n             router has RP-Set information, the DR creates one with\n \
    \            the Register-Suppression-timer turned off and the RP\n          \
    \   address set according to the hash function mapping for\n             the corresponding\
    \ group. The oif list is copied from\n             existing (*,G) or (*,*,RP)\
    \ entries, if they exist. The\n             iif of the (S,G) entry is always excluded\
    \ from the oif\n             list.\n        2    If there is a (S,G) entry in\
    \ existence, the DR  simply\n             restarts the corresponding Entry-timer.\n\
    \        When a PMBR (e.g., a router that connects the PIM-SM region to\n    \
    \    a dense mode region running DVMRP or PIM-DM) receives a packet\n        from\
    \ a source in the dense mode region,  the  router treats  the\n        packet\
    \ as if it were from a directly connected source. A\n        separate document\
    \ will describe  the  details  of\n        interoperability.\n   2    If the new\
    \ or previously-existing (S,G) entry's Register-\n        Suppression-timer is\
    \ not running, the data packet is\n        encapsulated in a Register message\
    \ and unicast to the RP\n        for that group. The data packet is also forwarded\
    \ according\n        to (S,G) state in the DR if the oif list is not null; since\n\
    \        a receiver may join the SP-tree while the DR is still\n        registering\
    \ to the RP.\n   3    If the (S,G) entry's Register-Suppression-timer is running,\n\
    \        the data packet is not sent in a Register message, it is\n        just\
    \ forwarded according to the (S,G) oif list.\n   When the DR receives a Register-Stop\
    \ message, it restarts the\n   Register-Suppression-timer in the corresponding\
    \ (S,G) entry(ies) at\n   [Register-Suppression-Timeout] seconds. If there is\
    \ data to be\n   registered, the DR may send a null Register (a Register message\
    \ with\n   a zero-length data portion in the inner IP packet) to the RP,\n   [Probe-Time]\
    \ seconds before the Register- Suppression-timer expires,\n   to avoid sending\
    \ occasional bursts of traffic to an RP unnecessarily.\n"
- title: 3.3.2 Receiving Register Messages and Sending Register-Stops
  contents:
  - "3.3.2 Receiving Register Messages and Sending Register-Stops\n   When a router\
    \ (i.e., the RP) receives a Register message, the router\n   does the following:\n\
    \   1    Decapsulates the data packet, and checks for a\n        corresponding\
    \ (S,G) entry.\n        1    If a (S,G) entry with cleared (0) SPT bit exists,\
    \ and\n             the received Register does not have the Null-\n          \
    \   Register-Bit set to 1, the packet is forwarded; and\n             the SPT\
    \ bit is left cleared (0). If the SPT bit is 1,\n             the packet is dropped,\
    \ and Register-Stop messages are\n             triggered.  Register-Stops should\
    \ be rate-limited (in\n             an implementation-specific manner) so that\
    \ no more\n             than a few are sent per round trip time. This prevents\n\
    \             a high datarate stream of packets from triggering a\n          \
    \   large number of Register-Stop messages between the\n             time that\
    \ the first packet is received and the time\n             when the source receives\
    \ the first Register-Stop.\n        2    If there is no (S,G) entry, but there\
    \ is a (*,G)\n             entry, and the received Register does not have the\n\
    \             Null-Register-Bit set to 1, the packet is forwarded\n          \
    \   according to the (*,G) entry.\n        3    If there is a (*,*,RP) entry but\
    \ no (*,G) entry, and\n             the Register received does not have the Null-\n\
    \             Register-Bit set to 1, a (*,G) or (S,G) entry is\n             created\
    \ and the oif list is copied from the (*,*,RP)\n             entry to the new\
    \ entry.  The packet is forwarded\n             according to the created entry.\n\
    \        4    If there is no G or (*,*,RP) entry corresponding to G,\n       \
    \      the packet is dropped, and a Register-Stop is\n             triggered.\n\
    \        5    A \"Border bit\" bit is added to the Register message,\n       \
    \      to facilitate interoperability mechanisms. PMBRs set\n             this\
    \ bit when registering for external sources (see\n             Section 2.7). \
    \ If the \"Border bit\" is set in the\n             Register, the RP does the\
    \ following:\n             1    If there is no matching (S,G) state, but there\n\
    \                  exists (*,G) or (*,*,RP) entry, the RP creates a\n        \
    \          (S,G) entry, with a `PMBR' field.  This field\n                  holds\
    \ the source of the Register (i.e. the outer\n                  IP address of\
    \ the register packet).  The RP\n                  triggers a (S,G) join towards\
    \ the source of the\n                  data packet, and clears the SPT bit for\
    \ the (S,G)\n                  entry.  If the received Register is not a `null\n\
    \                  Register' the packet is forwarded according to\n          \
    \        the created state. Else,\n             2    If the `PMBR' field for the\
    \ corresponding (S,G)\n                  entry matches the source of the Register\
    \ packet,\n                  and the received Register is not a `null\n      \
    \            Register', the decapsulated packet is forwarded\n               \
    \   to the oif list of that entry. Else,\n             3    If the `PMBR' field\
    \ for the corresponding (S,G)\n                  entry matches the source of the\
    \ Register packet,\n                  the decapsulated packet is forwarded to\
    \ the oif\n                  list of that entry, else\n             4    The packet\
    \ is dropped, and a Register-stop is\n                  triggered towards the\
    \ source of the Register.\n        The (S,G) Entry-timer is restarted  by  Registers\
    \ arriving from\n        that source to that group.\n   2    If the matching (S,G)\
    \ or (*,G) state contains a null oif\n        list, the RP unicasts a Register-Stop\
    \ message to the source\n        of the Register message; in the latter case,\
    \ the source-\n        address field, within the Register-Stop message, is set\
    \ to\n        the wildcard value (all 0's). This message is not processed\n  \
    \      by intermediate routers, hence no (S,G) state is\n        constructed between\
    \ the RP and the source.\n   3    If the Register message arrival rate warrants\
    \ it and there\n        is no existing (S,G) entry, the RP sets up a (S,G) route\n\
    \        entry with the outgoing interface list, excluding iif(S,G),\n       \
    \ copied from the (*,G) outgoing interface list, its SPT-bit\n        is initialized\
    \ to 0. If a (*,G) entry does not exist, but\n        there exists a (*,*,RP)\
    \ entry with the RP corresponding to\n        G , the oif list for (S,G) is copied\
    \ -excluding the iif-\n        from that (*,*,RP) entry.\n        A timer (Entry-timer)\
    \ is set for the (S,G) entry and this\n        timer is restarted by receipt of\
    \ data packets for (S,G).\n        The (S,G) entry causes the RP to send a Join/Prune\
    \ message\n        for the indicated group towards the source of the register\n\
    \        message.\n        If the (S,G) oif list becomes null, Join/Prune messages\n\
    \        will not be sent towards the source, S.\n"
- title: 3.4 Multicast Data Packet Forwarding
  contents:
  - "3.4 Multicast Data Packet Forwarding\n   Processing a multicast data packet involves\
    \ the following steps:\n   1    Lookup route state based on a longest match of\
    \ the source\n        address, and an exact match of the destination address in\n\
    \        the data packet. If neither S, nor G, find a longest match\n        entry,\
    \ and the RP for the packet's destination group\n        address has a corresponding\
    \ (*,*,RP) entry, then the\n        longest match does not require an exact match\
    \ on the\n        destination group address. In summary, the longest match is\n\
    \        performed in the following order: (1) (S,G), (2) (*,G). If\n        neither\
    \ is matched, then a lookup is performed on (*,*,RP)\n        entries.\n   2 \
    \   If the packet arrived on the interface found in the\n        matching-entry's\
    \ iif field, and the oif list is not\n        null:\n        1    Forward the\
    \ packet to the oif list for that entry\n             and restart the Entry-timer\
    \ if the matching entry is\n             (S,G).  Optionally, the (S,G) Entry-timer\
    \ may be\n             restarted by periodic checking of the matching packet\n\
    \             count.\n        2    If the entry is a (S,G) entry with a cleared\
    \ SPT-bit,\n             and a (*,G) or associated (*,*,RP) also exists whose\n\
    \             incoming interface is different than that for (S,G),\n         \
    \    set the SPT-bit for the (S,G) entry and trigger an\n             (S,G) RPT-bit\
    \ prune towards the RP.\n        3    If the source of the packet is a directly-connected\n\
    \             host and the router is the DR on the receiving\n             interface,\
    \ check the Register-Suppression-timer\n             associated with the (S,G)\
    \ entry. If it is not running,\n             then the router encapsulates the\
    \ data packet in a\n             register message and sends it to the RP.\n  \
    \      This covers the common case of a packet arriving on the RPF\n        interface\
    \ to the source or RP and being forwarded to all\n        joined branches. It\
    \ also detects when packets arrive on the\n        SP-tree, and triggers their\
    \ pruning from the RP-tree. If it\n        is the DR for the source, it sends\
    \ data packets\n        encapsulated in Registers to the RPs.\n   3    If the\
    \ packet matches to an entry but did not arrive on the\n        interface found\
    \ in the entry's iif field, check the\n        SPT-bit of the entry. If the SPT-bit\
    \ is set, drop the\n        packet.  If the SPT-bit is cleared, then lookup the\
    \ (*,G),\n        or (*,*,RP), entry for G. If the packet arrived on the\n   \
    \     iif found in (*,G), or the corresponding (*,*,RP),\n        forward the\
    \ packet to the oif list of the matching\n        entry. This covers the case\
    \ when a data packet matches on a\n        (S,G) entry for which the SP-tree has\
    \ not yet been\n        completely established upstream.\n   4    If the packet\
    \ does not match any entry, but the source of\n        the data packet is a local,\
    \ directly-connected host, and\n        the router is the DR on a multi-access\
    \ LAN and has RP-Set\n        information, the DR uses the hash function to determine\
    \ the\n        RP associated with the destination group, G. The DR creates\n \
    \       a (S,G) entry, with the Register-Suppression-timer not\n        running,\
    \ encapsulates the data packet in a Register message\n        and unicasts it\
    \ to the RP.\n   5    If the packet does not match to any entry, and it is not\
    \ a\n        local host or the router is not the DR, drop the packet.\n"
- title: 3.4.1 Data triggered switch to shortest path tree (SP-tree)
  contents:
  - "3.4.1 Data triggered switch to shortest path tree (SP-tree)\n   Different criteria\
    \ can be applied to trigger switching over from the\n   RP-based shared tree to\
    \ source-specific, shortest path trees.\n   One proposed example is to do so based\
    \ on data rate.  For example,\n   when a (*,G), or corresponding (*,*,RP), entry\
    \ is created, a data rate\n   counter may be initiated at the last-hop routers.\
    \  The counter is\n   incremented with every data packet received for directly\
    \ connected\n   members of an SM group, if the longest match is (*,G) or (*,*,RP).\
    \ If\n   and when the data rate for the group exceeds a certain configured\n \
    \  threshold (t1), the router initiates `source-specific' data rate\n   counters\
    \ for the following data packets. Then, each counter for a\n   source, is incremented\
    \ when packets matching on (*,G), or (*,*,RP),\n   are received from that source.\
    \ If the data rate from the particular\n   source exceeds a configured threshold\
    \ (t2), a (S,G) entry is created\n   and a Join/Prune message is sent towards\
    \ the source.  If the RPF\n   interface for (S,G) is not the same as that for\
    \ (*,G) -or (*,*,RP),\n   then the SPT-bit is cleared in the (S,G) entry.\n  \
    \ Other configured rules may be enforced to cause or prevent\n   establishment\
    \ of (S,G) state.\n"
- title: 3.5 Assert
  contents:
  - "3.5 Assert\n   Asserts are used to resolve which of the parallel routers connected\
    \ to\n   a multi-access LAN is responsible for forwarding packets onto the LAN.\n"
- title: 3.5.1 Sending Asserts
  contents:
  - "3.5.1 Sending Asserts\n   The following Assert rules are provided when a multicast\
    \ packet is\n   received on an outgoing multi-access interface \"I\" of an existing\n\
    \   (S,G) entry:\n   1    Do unicast routing table lookup on source IP address\
    \ from\n        data packet, and send assert on interface \"I\" for source\n \
    \       IP address in data packet; include metric preference of\n        routing\
    \ protocol and metric from routing table lookup.\n   2    If route is not found,\
    \ use metric preference of 0x7fffffff\n        and metric 0xffffffff.\n   When\
    \ an assert is sent for a (*,G) entry, the first bit in the\n   metric preference\
    \ (the RPT-bit) is set to 1, indicating the data\n   packet is routed down the\
    \ RP-tree.\n   Asserts should be rate-limited in an implementation-specific\n\
    \   manner.\n"
- title: 3.5.2 Receiving Asserts
  contents:
  - "3.5.2 Receiving Asserts\n   When an Assert is received the router performs a\
    \ longest match on the\n   source and group address in the Assert message. The\
    \ router checks the\n   first bit of the metric preference (RPT-bit).\n   1  \
    \  If the RPT-bit is set, the router first does a match on\n        (*,G), or\
    \ (*,*,RP), entries; if no matching entry is found,\n        it ignores the Assert.\n\
    \   2    If the RPT-bit is not set in the Assert, the router first\n        does\
    \ a match on (S,G) entries; if no matching entry is\n        found, the router\
    \ matches (*,G) or (*,*,RP) entries.\n   3.5.2.1 Receiving Asserts on an entry's\
    \ outgoing interface\n   If the interface that received the Assert message is\
    \ in the oif list\n   of the matched entry, then this Assert is processed by this\
    \ router as\n   follows:\n   1    If the Assert's RPT-bit is set and the matching\
    \ entry is\n        (*,*,RP), the router creates a (*,G) entry. If the Assert's\n\
    \        RPT-bit is cleared and the matching entry is (*,G), or\n        (*,*,RP),\
    \ the router creates a (S,G)RPT-bit entry.\n        Otherwise, no new entry is\
    \ created in response to the\n        Assert.\n   2    The router then compares\
    \ the metric values received in the\n        Assert with the metric values associated\
    \ with the matched\n        entry. The RPT-bit and metric preference (in that\
    \ order)\n        are treated as the high-order part of an Assert metric\n   \
    \     comparison. If the value in the Assert is less than the\n        router's\
    \ value (with ties broken by the IP address, where\n        higher IP address\
    \ wins), delete the interface from the\n        entry.  When the deletion occurs\
    \ for a (*,G) or (*,*,RP)\n        entry , the interface is also deleted from\
    \ any associated\n        (S,G)RPT-bit or (*,G) entries, respectively. The Entry-\n\
    \        timer for the affected entries is restarted.\n   3    If the router has\
    \ won the election the router keeps the\n        interface in its outgoing interface\
    \ list. It acts as the\n        forwarder for the LAN.\n   The winning router\
    \ sends an Assert message containing its own metric\n   to that outgoing interface.\
    \ This will cause other routers on the LAN\n   to prune that interface from their\
    \ route entries. The winning router\n   sets the RPT-bit in the Assert message\
    \ if a (*,G) or (S,G)RPT-bit\n   entry was matched.\n   3.5.2.2 Receiving Asserts\
    \ on an entry's incoming interface\n   If the Assert arrived on the incoming interface\
    \ of an existing (S,G),\n   (*,G), or (*,*,RP) entry, the Assert is processed\
    \ as follows.  If the\n   Assert message does not match the entry, exactly, it\
    \ is ignored; i.e,\n   longest-match is not used in this case. If the Assert message\
    \ does\n   match exactly, then:\n   1    Downstream routers will select the upstream\
    \ router with the\n        smallest metric preference and metric as their RPF\n\
    \        neighbor. If two metrics are the same, the highest IP\n        address\
    \ is chosen to break the tie. This is important so\n        that downstream routers\
    \ send subsequent Joins/Prunes (in\n        SM) to the correct neighbor. An Assert-timer\
    \ is initiated\n        when changing the RPF neighbor to the Assert winner. \
    \ When\n        the timer expires, the router resets its RPF neighbor\n      \
    \  according to its unicast routing tables to capture network\n        dynamics\
    \ and router failures.\n   2    If the downstream routers have downstream members,\
    \ and if\n        the Assert caused the RPF neighbor to change, the\n        downstream\
    \ routers must trigger a Join/Prune message to\n        inform the upstream router\
    \ that packets are to be forwarded\n        on the multi-access network.\n"
- title: 3.6 Candidate-RP-Advertisements and Bootstrap messages
  contents:
  - "3.6 Candidate-RP-Advertisements and Bootstrap messages\n   Candidate-RP-Advertisements\
    \ (C-RP-Advs) are periodic PIM messages\n   unicast to the BSR by those routers\
    \ that are configured as\n   Candidate-RPs (C-RPs).\n   Bootstrap messages are\
    \ periodic PIM messages originated by the\n   Bootstrap router (BSR) within a\
    \ domain, and forwarded hop-by-hop to\n   distribute the current RP-set to all\
    \ routers in that domain.\n   The Bootstrap messages also support a simple mechanism\
    \ by which the\n   Candidate BSR (C-BSR) with the highest BSR-priority and IP\
    \ address\n   (referred to as the preferred BSR) is elected as the BSR for the\n\
    \   domain.  We recommend that each router configured as a C-RP also be\n   configured\
    \ as a C-BSR. Sections 3.6.2 and 3.6.3 describe the combined\n   function of Bootstrap\
    \ messages as the vehicle for BSR election and\n   RP-Set distribution.\n   A\
    \ Finite State Machine description of the BSR election and RP- Set\n   distribution\
    \ mechanisms is included in Appendix II.\n"
- title: 3.6.1 Sending Candidate-RP-Advertisements
  contents:
  - "3.6.1 Sending Candidate-RP-Advertisements\n   C-RPs periodically unicast C-RP-Advs\
    \ to the BSR for that domain.  The\n   interval for sending these messages is\
    \ subject to local configuration\n   at the C-RP.\n   Candidate-RP-Advertisements\
    \ carry group address and group mask\n   fields.  This enables the advertising\
    \ router to limit the\n   advertisement to certain prefixes or scopes of groups.\
    \  The\n   advertising router may enforce this scope acceptance when receiving\n\
    \   Registers or Join/Prune messages.  C-RPs should send C-RP-Adv\n   messages\
    \ with the Authoritative bit cleared.\n"
- title: 3.6.2 Receiving C-RP-Advs and Originating Bootstrap
  contents:
  - "3.6.2 Receiving C-RP-Advs and Originating Bootstrap\n   Upon receiving a C-RP-Adv,\
    \ a router does the following:\n   1    If the router is not the elected BSR,\
    \ it ignores the\n        message, else\n   2    The BSR adds the RP address to\
    \ its local pool of candidate\n        RPs, according to the associated group\
    \ prefix(es) in the\n        C-RP-Adv message. The Holdtime in the C-RP-Adv message\
    \ is\n        also stored with the corresponding RP, to be included later\n  \
    \      in the Bootstrap message. The BSR may apply a local\n        policy to\
    \ limit the number of Candidate RPs included\n        in the Bootstrap message.\
    \  The BSR may override the prefix\n        indicated in a C-RP-Adv unless the\
    \ Authoritative bit in the\n        C-RP-Adv is set.\n   The BSR keeps an RP-timer\
    \ per RP in its local RP-set.  The RP- timer\n   is initialized to the Holdtime\
    \ in the RP's C-RP-Adv. When the timer\n   expires, the corresponding RP is removed\
    \ from the RP- set.  The RP-\n   timer is restarted by the C-RP-Advs from the\
    \ corresponding RP.\n   The BSR also uses its Bootstrap-timer to periodically\
    \ send Bootstrap\n   messages.  In particular, when the Bootstrap-timer expires,\
    \ the BSR\n   originates an Bootstrap message on each of its PIM interfaces. \
    \ The\n   message is sent with a TTL of 1 to the `ALL-PIM-ROUTERS' group. In\n\
    \   steady state, the BSR originates Bootstrap messages periodically. At\n   startup,\
    \ the Bootstrap-timer is initialized to [Bootstrap-Timeout],\n   causing the first\
    \ Bootstrap message to be originated only when and if\n   the timer expires. For\
    \ timer details, see Section 3.6.3. A DR\n   unicasts a Bootstrap message to each\
    \ new PIM neighbor, i.e., after\n   the DR receives the neighbor's Hello message\
    \ (it does so even if the\n   new neighbor becomes the DR).\n   The Bootstrap\
    \ message is subdivided into sets of {group- prefix,RP-\n   Count,RP-addresses}.\
    \  For each RP-address, the corresponding Holdtime\n   is included in the \"RP-Holdtime\"\
    \ field.  The format of the Bootstrap\n   message allows `semantic fragmentation',\
    \ if the length of the\n   original Bootstrap message exceeds the packet maximum\
    \ boundaries (see\n   Section 4). However, we recommend against configuring a\
    \ large number\n   of routers as C-RPs, to reduce the semantic fragmentation required.\n"
- title: 3.6.3 Receiving and Forwarding Bootstrap
  contents:
  - "3.6.3 Receiving and Forwarding Bootstrap\n   Each router keeps a Bootstrap-timer,\
    \ initialized to [Bootstrap-\n   Timeout] at startup.\n   When a router receives\
    \ Bootstrap message sent to `ALL-PIM- ROUTERS'\n   group, it performs the following:\n\
    \   1    If the message was not sent by the RPF neighbor towards the\n       \
    \ BSR address included, the message is dropped. Else\n   2    If the included\
    \ BSR is not preferred over, and not equal\n        to, the currently active BSR:\n\
    \        1    If the Bootstrap-timer has not yet expired, or if the\n        \
    \     receiving router is a C-BSR, then the Bootstrap\n             message is\
    \ dropped. Else\n        2    If the Bootstrap-timer has expired and the receiving\n\
    \             router is not a C-BSR, the receiving router stores the\n       \
    \      RP-Set and BSR address and priority found in the\n             message,\
    \ and restarts the timer by setting it to\n             [Bootstrap-Timeout]. The\
    \ Bootstrap message is then\n             forwarded out all PIM interfaces, excluding\
    \ the one\n             over which the message arrived, to `ALL-PIM-ROUTERS'\n\
    \             group, with a TTL of 1.\n        3    If the Bootstrap message includes\
    \ a BSR address that is\n             preferred over, or equal to, the currently\
    \ active BSR, the\n             router restarts its Bootstrap-timer at [Bootstrap-Timeout]\n\
    \             seconds. and stores the BSR address and RP-Set information.\n  \
    \           The Bootstrap message is then forwarded out all PIM\n            \
    \ interfaces, excluding the one over which the message\n             arrived,\
    \ to `ALL-PIM-ROUTERS' group, with a TTL of 1.\n        4    If the receiving\
    \ router has no current RP set information\n             and the Bootstrap was\
    \ unicast to it from a directly\n             connected neighbor, the router stores\
    \ the information as\n             its new RP-set.  This covers the startup condition\
    \ when a\n             newly booted router obtains the RP-Set and BSR address\
    \ from\n             its DR.\n   When a router receives a new RP-Set, it checks\
    \ if each of the RPs\n   referred to by existing state (i.e., by (*,G), (*,*,RP),\
    \ or\n   (S,G)RPT-bit entries) is in the new RP-Set. If an RP is not in the new\n\
    \   RP-set, that RP is considered unreachable and the hash algorithm (see\n  \
    \ below) is re-performed for each group with locally active state that\n   previously\
    \ hashed to that RP. This will cause those groups to be\n   distributed among\
    \ the remaining RPs. When the new RP-Set contains a\n   new RP, the value of the\
    \ new RP is calculated for each group covered\n   by that C-RP's Group- prefix.\
    \  Any group for which the new RP's value\n   is greater than the previously active\
    \ RP's value is switched over to\n   the new RP.\n"
- title: 3.7 Hash Function
  contents:
  - "3.7 Hash Function\n   The hash function is used by all routers within a domain,\
    \ to map a\n   group to one of the C-RPs from the RP-Set. For a particular group,\
    \ G,\n   the hash function uses only those C-RPs whose Group- prefix covers G.\n\
    \   The algorithm takes as input the group address, and the addresses of\n   the\
    \ Candidate RPs, and gives as output one RP address to be used.\n   The protocol\
    \ requires that all routers hash to the same RP within a\n   domain (except for\
    \ transients). The following hash function must be\n   used in each router:\n\
    \   1    For each RP address C(i) in the RP-Set, whose Group-prefix\n        covers\
    \ G, compute a value:\n   Value(G,M,C(i))=\n   (1103515245 * ((1103515245 * (G&M)+12345)\
    \ XOR C(i)) + 12345) mod 2^31\n         where M is a hash-mask included in Bootstrap\
    \ messages.\n         This hash-mask allows a small number of consecutive groups\n\
    \         (e.g., 4) to always hash to the same RP.  For instance,\n         hierarchically-encoded\
    \ data can be sent on consecutive\n         group addresses to get the same delay\
    \ and fate-sharing\n         characteristics.\n   2    The candidate with the\
    \ highest resulting value is then\n        chosen as the RP for that group, and\
    \ its identity and hash\n        value are stored with the entry created.\n  \
    \      Ties between C-RPs having the same hash value, are broken\n        in advantage\
    \ of the highest address.\n   The hash function algorithm is invoked by a DR,\
    \ upon reception of a\n   packet, or IGMP membership indication, for a group,\
    \ for which the DR\n   has no entry. It is invoked by any router that has (*,*,RP)\
    \ state when\n   a packet is received for which there is no corresponding (S,G)\
    \ or\n   (*,G) entry.  Furthermore, the hash function is invoked by all routers\n\
    \   upon receiving a (*,G) or (*,*,RP) Join/Prune message.\n"
- title: 3.8 Processing Timer Events
  contents:
  - "3.8 Processing Timer Events\n   In this subsection, we enumerate all timers that\
    \ have been discussed\n   or implied. Since some critical timer events are not\
    \ associated with\n   the receipt or sending of messages, they are not fully covered\
    \ by\n   earlier subsections.\n   Timers are implemented in an implementation-specific\
    \ manner. For\n   example, a timer may count up or down, or may simply expire\
    \ at a\n   specific time. Setting a timer to a value T means that it will expire\n\
    \   after T seconds.\n"
- title: 3.8.1 Timers related to tree maintenance
  contents:
  - "3.8.1 Timers related to tree maintenance\n   Each (S,G), (*,G), and (*,*,RP)\
    \ route entry has multiple timers\n   associated with it: one for each interface\
    \ in the outgoing interface\n   list, one for the multicast routing entry itself,\
    \ and one optional\n   Join/Prune-Suppression-Timer. Each (S,G) and (*,G) entry\
    \ also has an\n   Assert-timer and a Random-Delay-Join-Timer for use with Asserts.\
    \  In\n   addition, DR's have a Register- Suppression-timer for each (S,G) entry\n\
    \   and every router has a single Join/Prune-timer. (A router may\n   optionally\
    \ keep separate Join/Prune-timers for different interfaces or\n   route entries\
    \ if different Join/Prune periods are desired.)\n   *    [Join/Prune-Timer] This\
    \ timer is used for periodically\n        sending aggregate Join/Prune messages.\
    \  To avoid\n        synchronization among routers booting simultaneously, it\
    \ is\n        initially set to a random value between 1 and [Join/Prune-\n   \
    \     Period].  When it expires, the timer is immediately\n        restarted to\
    \ [Join/Prune-Period]. A Join/Prune message is\n        then sent out each interface.\
    \  This timer should not be\n        restarted by other events.\n   *    [Join/Prune-Suppression-Timer\
    \ (kept per route entry)] A\n        route entry's (optional) Join/Prune-Suppression-Timer\
    \ may\n        be used to suppress duplicate joins from multiple\n        downstream\
    \ routers on the same LAN. When a Join message is\n        received from a neighbor\
    \ on the entry's incoming interface\n        in which the included Holdtime is\
    \ higher than the router's\n        own [Join/Prune-Holdtime] (with ties broken\
    \ by higher IP\n        address), the timer is set to [Join/Prune-Suppression-\n\
    \        Timeout], with some random jitter introduced to avoid\n        synchronization\
    \ of triggered Join/Prune messages on\n        expiration. (The random timeout\
    \ value must be < 1.5 *\n        [Join/Prune-Period] to prevent losing data after\
    \ 2 dropped\n        Join/Prunes.)  The timer is restarted every time a\n    \
    \    subsequent Join/Prune message (with higher Holdtime/IP\n        address)\
    \ for the entry is received on its incoming\n        interface.  While the timer\
    \ is running, Join/Prune messages\n        for the entry are not sent.  This timer\
    \ is idle (not\n        running) for point-to-point links.\n   *    [Oif-Timer\
    \ (kept per oif for each route entry)] A timer for\n        each oif of a route\
    \ entry is used to time out that oif.\n        Because some of the outgoing interfaces\
    \ in an (S,G) entry\n        are copied from the (*,G) outgoing interface list,\
    \ they may\n        not have explicit (S,G) join messages from some of the\n \
    \       downstream routers (i.e., where members are joining to the\n        (*,G)\
    \ tree only). Thus, when an Oif-timer is restarted in a\n        (*,G) entry,\
    \ the Oif-timer is restarted for that interface\n        in each existing (S,G)\
    \ entry whose oif list contains that\n        interface. The same rule applies\
    \ to (*,G) and (S,G) entries\n        when restarting an Oif-timer on a (*,*,RP)\
    \ entry.\n        The following table shows its usage when first adding the\n\
    \        oif to the entry's oiflist, when it should be restarted\n        (unless\
    \ it is already higher), and when it should be\n        decreased (unless it is\
    \ already lower).\n   Set to                   | When                        \
    \ | Applies  to\n   -------------------------|------------------------------|------------\n\
    \   included Holdtime        | adding oif off Join/Prune    | (S,G) (*,G)\n  \
    \                          |                              | (*,*,RP)\n   Increased\
    \ (only) to      | When                         |  Applies to\n   -------------------------|------------------------------|------------\n\
    \   included  Holdtime       | received Join/Prune          | (S,G) (*,G)\n  \
    \                          |                              | (*,*,RP)\n       \
    \                     |                              |\n   Value of (*,*,RP) \
    \       | (*,*,RP) oif-timer restarted | (S,G) (*,G)\n      oif-timer        \
    \     |                              |\n                            |        \
    \                      |\n   Value of (*,G)           | (*,G) oif-timer restarted\
    \    | (S,G)\n      oif-timer             |                              |\n \
    \  Decreased (only) to      |  When                        | Applies  to\n   -------------------------|------------------------------|------------\n\
    \   Oif-Deletion-Delay       | prune received               | (S,G) (*,G)\n  \
    \      When the timer expires, the oif is removed from the oiflist\n        if\
    \ there are no directly-connected members. When deleted,\n        the oif is also\
    \ removed in any associated (S,G) or (*,G)\n        entries.\n   *    [Entry-Timer\
    \ (kept per route entry)] A timer for each route\n        entry is used to time\
    \ out that entry. The following table\n        summarizes its usage when first\
    \ adding the oif to the\n        entry's oiflist, and when it should be restarted\
    \ (unless it\n        is already higher).\n   Set to                |  When  \
    \                  | Applies to\n   ----------------------|--------------------------|------------\n\
    \   [Data- Timeout]       | created off data packet  | (S,G)\n               \
    \          |                          |\n   included Holdtime     | created off\
    \ Join/Prune   | (S,G) (*,G)\n   (*,*,RP)\n   Increased  (only)  to |  When  \
    \                  | Applies to\n   ----------------------|--------------------------|------------\n\
    \   [Data-Timeout]        | receiving  data  packets | (S,G)no RPT-bit\n     \
    \                    |                          |\n   Value of oif-timer    |\
    \ any oif-timer restarted  | (S,G)RPT-bit (*,G)\n                         |  \
    \                        | (*,*,RP)\n                         |              \
    \            |\n   [Assert-Timeout]      | assert received          | (S,G)RPT-bit\n\
    \                         |                          | (*,G)w/null oif\n     \
    \   When the timer expires, the route entry is deleted; if the\n        entry\
    \ is a (*,G) or (*,*,RP) entry, all associated\n        (S,G)RPT-bit entries are\
    \ also deleted.\n   *    [Register-Suppression-Timer (kept per (S,G) route entry)]\n\
    \        An (S,G) route entry's Register-Suppression-Timer is used\n        to\
    \ suppress registers when the RP is receiving data packets\n        natively.\
    \  When a Register-Stop message for the entry is\n        received from the RP,\
    \ the timer is set to a random value in\n        the range 0.5 * [Register-Suppression-Timeout]\
    \ to 1.5 *\n        [Register-Suppression-Timeout]. While the timer is running,\n\
    \        Registers for that entry will be suppressed.  If null\n        registers\
    \ are used, a null register is sent [Probe-Time]\n        seconds before the timer\
    \ expires.\n   *    [Assert-Timer (per (S,G) or (*,G) route entry)] The\n    \
    \    Assert-Timer for an (S,G) or (*,G) route entry is used for\n        timing\
    \ out Asserts received. When an Assert is received and\n        the RPF neighbor\
    \ is changed to the Assert winner, the\n        Assert-Timer is set to [Assert-Timeout],\
    \ and is restarted\n        to this value every time a subsequent Assert for the\
    \ entry\n        is received on its incoming interface.  When the timer\n    \
    \    expires, the router resets its RPF neighbor according to\n        its unicast\
    \ routing table.\n   *    [Random-Delay-Join-Timer (per (S,G) or (*,G) route entry)]\n\
    \        The Random-Delay-Join-Timer for an (S,G) or (*,G) route\n        entry\
    \ is used to prevent synchronization among downstream\n        routers on a LAN\
    \ when their RPF neighbor changes. When the\n        RPF neighbor changes, this\
    \ timer is set to a random value\n        between 0 and [Random-Delay-Join-Timeout]\
    \ seconds. When the\n        timer expires, a triggered Join/Prune message is\
    \ sent for\n        the entry unless its Join/Prune-Suppression-Timer is\n   \
    \     running.\n"
- title: 3.8.2 Timers relating to neighbor discovery
  contents:
  - "3.8.2 Timers relating to neighbor discovery\n   *    [Hello-Timer] This timer\
    \ is used to periodically send Hello\n        messages.  To avoid synchronization\
    \ among routers booting\n        simultaneously, it is initially set to a random\
    \ value\n        between 1 and [Hello-Period]. When it expires, the timer is\n\
    \        immediately restarted to [Hello-Period]. A Hello message is\n       \
    \ then sent out each interface.  This timer should not be\n        restarted by\
    \ other events.\n   *    [Neighbor-Timer (kept per neighbor)] A Neighbor-Timer\
    \ for\n        each neighbor is used to time out the neighbor state. When\n  \
    \      a Hello message is received from a new neighbor, the timer\n        is\
    \ initially set to the Holdtime included in the Hello\n        message (which\
    \ is equal to the neighbor's value of [Hello-\n        Holdtime]).  Every time\
    \ a subsequent Hello is received from\n        that neighbor, the timer is restarted\
    \ to the Holdtime in\n        the Hello.  When the timer expires, the neighbor\
    \ state is\n        removed.\n"
- title: 3.8.3 Timers relating to RP information
  contents:
  - "3.8.3 Timers relating to RP information\n   *    [C-RP-Adv-Timer (C-RP's only)]\
    \ Routers configured as\n        candidate RP's use this timer to periodically\
    \ send C-RP-Adv\n        messages. To avoid synchronization among routers booting\n\
    \        simultaneously, the timer is initially set to a random\n        value\
    \ between 1 and [C-RP-Adv-Period]. When it expires, the\n        timer is immediately\
    \ restarted to [C-RP-Adv-Period]. A C-\n        RP-Adv message is then sent to\
    \ the elected BSR. This timer\n        should not be restarted by other events.\n\
    \   *    [RP-Timer (BSR only, kept per RP in RP-Set)] The BSR uses a\n       \
    \ timer per RP in the RP-Set to monitor liveness. When a C-RP\n        is added\
    \ to the RP-Set, its timer is set to the Holdtime\n        included in the C-RP-Adv\
    \ message from that C-RP (which is\n        equal to the C-RP's value of [RP-Holdtime]).\
    \ Every time a\n        subsequent C-RP-Adv is received from that RP, its timer\
    \ is\n        restarted to the Holdtime in the C-RP-Adv. When the timer\n    \
    \    expires, the RP is removed from the RP-Set included in\n        Bootstrap\
    \ messages.\n   *    [Bootstrap-Timer] This timer is used by the BSR to\n    \
    \    periodically originate Bootstrap messages, and by other\n        routers\
    \ to time out the BSR (see 3.6.3).  This timer is\n        initially set to [Bootstrap-Timeout].\
    \  A C-BSR restarts\n        this timer to [Bootstrap-Timeout] upon receiving\
    \ a Bootstrap\n        message from a preferred router, and originates an Bootstrap\n\
    \        message and restarts the timer to [Bootstrap-Period] when it\n      \
    \  expires.  Routers not configured as C-BSR's restart this\n        timer to\
    \ [Bootstrap-Timeout] upon receiving a Bootstrap\n        message from the elected\
    \ or a more preferred BSR, and ignore\n        Bootstrap messages from non-preferred\
    \ C-BSRs while it is\n        running.\n"
- title: 3.8.4 Default timer values
  contents:
  - "3.8.4 Default timer values\n   Most of the default timeout values for state information\
    \ are 3.5\n   times the refresh period. For example, Hellos refresh Neighbor state\n\
    \   and the default Hello-timer period is 30 seconds, so a default\n   Neighbor-timer\
    \ duration of 105 seconds is included in the Holdtime\n   field of the Hellos.\
    \  In order to improve convergence, however, the\n   default timeout value for\
    \ information related to RP liveness and\n   Bootstrap messages is 2.5 times the\
    \ refresh period.\n   In this version of the spec, we suggest particular numerical\
    \ timer\n   settings.  A future version of the specification will specify a\n\
    \   mechanism for timer values to be scaled based upon observed network\n   parameters.\n\
    \   *    [Join/Prune-Period] This is the interval between\n        sending Join/Prune\
    \ messages. {Default: 60 seconds.} This\n        value may be set to take into\
    \ account such things as the\n        configured bandwidth and expected average\
    \ number of\n        multicast route entries for the attached network or link\n\
    \        (e.g., the period would be longer for lower-speed links, or\n       \
    \ for routers in the center of the network that expect to\n        have a larger\
    \ number of entries ). In addition, a router\n        could modify this value\
    \ (and corresponding Join/Prune-\n        Holdtime value) if the number of route\
    \ entries changes\n        significantly (e.g., by an order of magnitude).  For\n\
    \        example, given a default minimum Join/Prune-Period value,\n        if\
    \ the number of route entries with a particular iif\n        increases from N\
    \ to N*100, the router could increase its\n        Join/Prune-Period (and Join/Prune-Holdtime),\
    \ for that\n        interface, by a factor of 10; and if/when the number of\n\
    \        entries decreases back to N, the Join/Prune-Period (and\n        Join/Prune-Holdtime)\
    \ could be decreased to its previous\n        value. If the Join/Prune-Period\
    \ is modified, these changes\n        should be made relatively infrequently and\
    \ the router\n        should continue to refresh at its previous Join/Prune-\n\
    \        Period for at least Join/Prune-Holdtime, in order to allow\n        the\
    \ upstream router to adapt.\n   *    [Join-Prune Holdtime] This is the Holdtime\
    \ specified in\n        Join/Prune messages, and is used to time out oifs. This\n\
    \        should be set to 3.5 * [Join/Prune-Period]. {Default: 210\n        seconds.}\n\
    \   *    [Join/Prune-Suppression-Timeout] This is the mean\n        interval between\
    \ receiving a Join/Prune with a higher\n        Holdtime (with ties broken by\
    \ higher IP addres) and\n        allowing duplicate Join/Prunes to be sent again.\
    \ This\n        should be set to approximately 1.25 * [Join/Prune-Period].\n \
    \       {Default: 75 seconds. }\n   *    [Data-Timeout] This is the time after\
    \ which (S,G) state\n        for a silent source will be deleted.  {Default: 210\n\
    \        seconds.}\n   *    [Register-Suppression-Timeout] This is the mean\n\
    \        interval between receiving a Register-Stop and allowing\n        Registers\
    \ to be sent again.  A lower value means more\n        frequent register bursts\
    \ at RP, while a higher value means\n        longer join latency for new receivers.\
    \  {Default: 60\n        seconds.} (Note that if null Registers are sent [Probe-\n\
    \        Time] seconds before the timeout, register bursts are\n        prevents,\
    \ and [Register-Suppression-Timeout] may be lowered\n        to decrease join\
    \ latency.)\n   *    [Probe-Time] When null Registers are used, this is the\n\
    \        time between sending a null Register and the Register-\n        Suppression-Timer\
    \ expiring unless it is restarted by\n        receiving a Register-Stop. Thus,\
    \ a null Register would be\n        sent when the Register-Suppression-Timer reaches\
    \ this\n        value. {Default: 5 seconds.}\n   *    [Assert-Timeout] This is\
    \ the interval between the last\n        time an Assert is received, and the time\
    \ at which the\n        assert is timed out. {Default: 180 seconds.}\n   *   \
    \ [Random-Delay-Join-Timeout] This is the maximum\n        interval between the\
    \ time when the RPF neighbor changes,\n        and the time at which a triggered\
    \ Join/Prune message is\n        sent.  {Default: 4.5 seconds.}\n   *    [Hello-Period]\
    \ This is the interval between sending\n        Hello messages. {Default: 30 seconds.}\n\
    \   *    [Hello-Holdtime] This is the Holdtime specified in\n        Hello messages,\
    \ after which neighbors will time out their\n        neighbor entries for the\
    \ router. This should be set to 3.5\n        * [Hello-Period]. {Default: 105 seconds.}\n\
    \   *    [C-RP-Adv-Period] For C-RPs, this is the interval\n        between sending\
    \ C-RP-Adv messages. {Default: 60 seconds.}\n   *    [RP-Holdtime] For C-RPs,\
    \ this is the Holdtime specified\n        in C-RP-Adv messages, and is used by\
    \ the BSR to time out\n        RPs. This should be set to 2.5 * [C-RP-Adv-Period].\n\
    \        {Default: 150 seconds.}\n   *    [Bootstrap-Period] At the elected BSR,\
    \ this is the\n        interval between originating Bootstrap messages, and should\n\
    \        be equal to 60 seconds.\n   *    [Bootstrap-Timeout] This is the time\
    \ after which the\n        elected BSR will be assumed unreachable when Bootstrap\n\
    \        messages are not received from it. This should be set to\n        2.5\
    \ * [Bootstrap-Period]. {Default: 150 seconds.}\n"
- title: 3.9 Summary of flags used
  contents:
  - "3.9 Summary of flags used\n   Following is a summary of all the flags used in\
    \ our scheme.\n"
- title: Bit           |  Used in    |  Definition
  contents:
  - 'Bit           |  Used in    |  Definition

    '
- title: Authoritative | C-RP-Adv    | Group-prefix information should not be
  contents:
  - "Authoritative | C-RP-Adv    | Group-prefix information should not be\n      \
    \                        over-ridden by BSR\n"
- title: Border        | Register    | Register for external sources is coming
  contents:
  - "Border        | Register    | Register for external sources is coming\n     \
    \                         from PIM multicast border router\n"
- title: Null          | Register    | Register sent as Probe of RP, the
  contents:
  - "Null          | Register    | Register sent as Probe of RP, the\n           \
    \                   encapsulated IP data packet should not\n                 \
    \             be forwarded\n"
- title: RPT           | Route entry | Entry represents state on the RP-tree
  contents:
  - 'RPT           | Route entry | Entry represents state on the RP-tree

    '
- title: RPT           | Join/Prune  | Join is associated with the shared tree
  contents:
  - "RPT           | Join/Prune  | Join is associated with the shared tree\n     \
    \                         and therefore the Join/Prune message is\n          \
    \                    propagated along the RP-tree (source\n                  \
    \            encoded is an RP address)\n"
- title: RPT           | Assert      | The data packet was routed down the shared
  contents:
  - "RPT           | Assert      | The data packet was routed down the shared\n  \
    \                            tree; thus, the path indicated corresponds\n    \
    \                          to the RP tree\n"
- title: SPT           | (S,G) entry | Packets have arrived on the iif towards S,
  contents:
  - "SPT           | (S,G) entry | Packets have arrived on the iif towards S,\n  \
    \                            and the iif is different from the (*,G)\n       \
    \                       iif\n"
- title: WC            |Join         | The receiver expects to receive packets
  contents:
  - "WC            |Join         | The receiver expects to receive packets\n     \
    \                         from all sources via this (shared tree)\n          \
    \                    path. Thus, the Join/Prune applies to a\n               \
    \               (*,G) entry\n"
- title: WC            | Route entry | Wildcard entry; if there is no more
  contents:
  - "WC            | Route entry | Wildcard entry; if there is no more\n         \
    \                     specific match for a particular source,\n              \
    \                packets will be forwarded according to\n                    \
    \          this entry\n"
- title: 3.10 Security
  contents:
  - "3.10 Security\n   All PIM control messages may use IPSec [6] to address security\n\
    \   concerns.\n"
- title: 4 Packet Formats
  contents:
  - "4 Packet Formats\n   This section describes the details of the packet formats\
    \ for PIM\n   control messages.\n   All PIM control messages have protocol number\
    \ 103.\n   Basically, PIM messages are either unicast (e.g.  Registers and\n \
    \  Register-Stop), or multicast hop-by-hop to `ALL-PIM-ROUTERS' group\n   `224.0.0.13'\
    \ (e.g. Join/Prune, Asserts, etc.).\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Ver\n         PIM Version number is 2.\n   Type  Types for specific PIM\
    \ messages.  PIM Types are:\n      0 = Hello\n      1 = Register\n      2 = Register-Stop\n\
    \      3 = Join/Prune\n      4 = Bootstrap\n      5 = Assert\n      6 = Graft\
    \ (used in PIM-DM only)\n      7 = Graft-Ack (used in PIM-DM only)\n      8 =\
    \ Candidate-RP-Advertisement\n   Addr length\n         Address length in bytes.\
    \  Throughout this section this\n         would indicate the number of bytes in\
    \ the Address field of\n         an address, including unicast and group addresses.\n\
    \   Checksum\n         The checksum is the 16-bit one's complement of  the  one's\n\
    \         complement  sum  of  the entire PIM message, (excluding the\n      \
    \   data portion in the Register message).  For  computing  the\n         checksum,\
    \ the checksum field is zeroed.\n"
- title: 4.1 Encoded Source and Group Address formats
  contents:
  - "4.1 Encoded Source and Group Address formats\n   1    Unicast address: Only the\
    \ address is included.  The length\n        of the unicast address in bytes is\
    \ specified in the `Addr\n        length' field in the header.\n   2    Encoded-Group-Address:\
    \ Takes the following format:\n   0                   1                   2  \
    \                 3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Reserved  |  Mask Len     | Group multicast Address ...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | ...Group multicast Address ...|\n   +-+-+-+-+-+-+-+-+-+-+~+~+~+~+~+~+\n\
    \        Reserved\n              Transmitted as zero. Ignored upon receipt.\n\
    \        Mask Length\n              The Mask length is 8 bits. The value is the\
    \ number of\n              contiguous bits left justified used as a mask which\n\
    \              describes the address. It is less than or equal to\n          \
    \    Addr length * 8. If the message is sent for a single\n              group\
    \ then the Mask length must equal Addr length * 8\n              (i.e. 32 for\
    \ IPv4 and 128 for IPv6).\n        Group multicast Address\n              contains\
    \ the group address, and has number of bytes\n              equal to that specified\
    \ in the Addr length field.\n   3    Encoded-Source-Address: Takes the following\
    \ format:\n   0                   1                   2                   3\n\
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Rsrvd   |S|W|R|  Mask Len     | Source Address ...            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  ...  Source Address          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+~+~+-+\n\
    \        Reserved\n              Transmitted as zero, ignored on receipt.\n  \
    \      S,W,R See Section 4.5 for details.\n        Mask Length\n             \
    \ Mask length is 8 bits. The value is the number of\n              contiguous\
    \ bits left justified used as a mask which\n              describes the address.\
    \ The mask length must be less\n              than or equal to Addr Length * 8.\
    \ If the message is\n              sent for a single source then the Mask length\
    \ must\n              equal Addr length * 8.  In version 2 of PIM, it is\n   \
    \           strongly recommended that this field be set to 32 for\n          \
    \    IPv4.\n        Source Address\n              The address length is indicated\
    \ from the Addr length\n              field at the beginning of the header. For\
    \ IPv4, the\n              address length is 4 octets.\n"
- title: 4.2 Hello Message
  contents:
  - "4.2 Hello Message\n   It is sent periodically by routers on all interfaces.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       OptionType              |         OptionLength          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          OptionValue                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+~+~+\n\
    \   |                               .                               |\n   |  \
    \                             .                               |\n   |        \
    \                       .                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       OptionType              |         OptionLength          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          OptionValue                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+~+~+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   OptionType\n\
    \         The type of the option given in the following OptionValue\n        \
    \ field.\n   OptionLength\n         The length of the OptionValue field in bytes.\n\
    \   OptionValue\n         A variable length field, carrying the value of the option.\n\
    \   The Option fields may contain the following values:\n   *    OptionType =\
    \ 1; OptionLength = 2; OptionValue = Holdtime;\n        where Holdtime is the\
    \ amount of time a receiver must keep\n        the neighbor reachable, in seconds.\
    \ If the Holdtime is set\n        to `0xffff', the receiver of this message never\
    \ times out\n        the neighbor. This may be used with ISDN lines, to avoid\n\
    \        keeping the link up with periodic Hello messages.\n        Furthermore,\
    \ if the Holdtime is set to `0', the information\n        is timed out immediately.\n\
    \   *    OptionType 2 to 16: reserved\n   *    The rest of the OptionTypes are\
    \ defined in another\n        document.\n   In general, options may be ignored;\
    \ but a router must not ignore the\n   'Holdtime' OptionType.\n"
- title: 4.3 Register Message
  contents:
  - "4.3 Register Message\n   A Register message is sent by the DR or a PMBR to the\
    \ RP when a\n   multicast packet needs to be transmitted on the RP-tree. Source\
    \ IP\n   address is set to the address of the DR, destination IP address is to\n\
    \   the RP's address.\n   0                   1                   2          \
    \         3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |B|N|                       Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                    Multicast data packet                    ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n        Described above.  {Note\
    \ that the checksum for Registers\n        is done only on the PIM header, excluding\
    \ the data packet\n        portion.}\n   B     The Border bit. If the router is\
    \ a DR for a source that it\n         is directly connected to, it sets the B\
    \ bit to 0. If the\n         router is a PMBR for a source in a directly connected\n\
    \         cloud, it sets the B bit to 1.\n   N     The Null-Register bit. Set\
    \ to 1 by a DR that is probing\n         the RP before expiring its local Register-Suppression\n\
    \         timer. Set to 0 otherwise.\n   Multicast data packet\n         The original\
    \ packet sent by the source.\n   For (S,G) null Registers, the Multicast data\
    \ packet portion contains\n   only a dummy IP header with S as the source address,\
    \ G as the\n   destination address, and a data length of zero.\n"
- title: 4.4 Register-Stop Message
  contents:
  - "4.4 Register-Stop Message\n   A Register-Stop is unicast from the RP  to  the\
    \  sender  of  the\n   Register  message. Source IP address is the address to\
    \ which the\n   register was addressed. Destination IP  address  is  the  source\n\
    \   address of the register message.\n   0                   1               \
    \    2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Encoded-Group Address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Unicast-Source Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   Encoded-Group\
    \ Address\n         Format described above. Note that for Register-Stops the\n\
    \         Mask Len field contains Addr length * 8 (32 for IPv4), if\n        \
    \ the message is sent for a single group.\n   Unicast-Source Address\n       \
    \  IP host address of source from multicast data packet in\n         register.\
    \ The length of this field in bytes is specified in\n         the Addr length\
    \ field. A special wild card value (0.0.0.0),\n         can be used to indicate\
    \ any source.\n"
- title: 4.5 Join/Prune Message
  contents:
  - "4.5 Join/Prune Message\n   A Join/Prune message is sent by routers towards upstream\
    \ sources and\n   RPs.  Joins are sent to build shared trees (RP trees) or source\
    \ trees\n   (SPT). Prunes are sent to prune source trees when members leave\n\
    \   groups as well as sources that do not use the shared tree.\n    0        \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Unicast-Upstream Neighbor Address                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Reserved     | Num groups    |          Holdtime             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Encoded-Multicast Group Address-1                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Number of Joined  Sources   |   Number of Pruned Sources    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Joined Source Address-1                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             .                                 |\n   |  \
    \                           .                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Joined Source Address-n                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Pruned Source Address-1                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             .                                 |\n   |  \
    \                           .                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Pruned Source Address-n                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           .                                   |\n   |  \
    \                         .                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Encoded-Multicast Group Address-n              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Number of Joined  Sources   |   Number of Pruned Sources    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Joined Source Address-1                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             .                                 |\n   |  \
    \                           .                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Joined Source Address-n                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Pruned Source Address-1                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             .                                 |\n   |  \
    \                           .                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               Encoded-Pruned Source Address-n                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   Upstream\
    \ Neighbor Address\n         The IP address of the RPF or upstream neighbor.\n\
    \   Reserved\n         Transmitted as zero, ignored on receipt.\n   Holdtime\n\
    \         The amount of time a receiver must keep the Join/Prune\n         state\
    \ alive, in seconds.  If the Holdtime is set to\n         `0xffff', the receiver\
    \ of this message never times out the\n         oif. This may be used with ISDN\
    \ lines, to avoid keeping the\n         link up with periodical Join/Prune messages.\
    \  Furthermore,\n         if the Holdtime is set to `0', the information is timed\
    \ out\n         immediately.\n   Number of Groups\n         The number of multicast\
    \ group sets contained in the\n         message.\n   Encoded-Multicast group address\n\
    \         For format description see Section\n         4.1. A wild card group\
    \ in the (*,*,RP) join is represented\n         by a 224.0.0.0 in the group address\
    \ field and `4' in the\n         mask length field. A (*,*,RP) join also has the\
    \ WC-bit and\n         the RPT-bit set.\n   Number of Joined Sources\n       \
    \  Number of join source addresses listed for a given group.\n   Join Source Address-1\
    \ .. n\n         This list contains the sources that the sending router\n    \
    \     will forward multicast datagrams for if received on the\n         interface\
    \ this message is sent on.\n         See format section 4.1. The fields explanation\
    \ for the\n         Encoded-Source-Address format follows:\n        Reserved\n\
    \              Described above.\n        S     The Sparse bit is a 1 bit value,\
    \ set to 1 for PIM-SM.\n              It is used for PIM v.1 compatibility.\n\
    \        W     The WC bit is a 1 bit value. If 1, the join or prune\n        \
    \      applies to the (*,G) or (*,*,RP) entry. If 0, the join\n              or\
    \ prune applies to the (S,G) entry where S is Source\n              Address. \
    \ Joins and prunes sent towards the RP must\n              have this bit set.\n\
    \        R     The RPT-bit is a 1 bit value. If 1, the information\n         \
    \     about (S,G) is sent towards the RP.  If 0, the\n              information\
    \ must be sent toward S, where S is the\n              Source Address.\n     \
    \   Mask Length, Source Address\n              Described above.\n        Represented\
    \ in the form of < WC-bit >< RPT-bit > < Mask length\n        ><Source address>:\n\
    \        A source address could be a host IP address :\n         < 0 >< 0 >< 32\
    \ >< 192.1.1.17 >\n        A source address could be the RP's IP address :\n \
    \        < 1 >< 1 >< 32 >< 131.108.13.111 >\n        A source address could be\
    \ a subnet address to prune from the\n        RP-tree :\n         < 0 >< 1 ><\
    \ 28 >< 192.1.1.16 >\n        A source address could be a general aggregate :\n\
    \         < 0 >< 0 >< 16 >< 192.1.0.0 >\n   Number of Pruned Sources\n       \
    \  Number of prune source addresses listed for a group.\n   Prune Source Address-1\
    \ .. n\n         This list contains the sources that the sending router\n    \
    \     does not want to forward multicast datagrams for when\n         received\
    \ on the interface this message is sent on.  If the\n         Join/Prune message\
    \ boundary exceeds the maximum packet\n         size, then the join and prune\
    \ lists for the same group must\n         be included in the same packet.\n"
- title: 4.6 Bootstrap Message
  contents:
  - "4.6 Bootstrap Message\n   The Bootstrap messages are multicast to `ALL-PIM-ROUTERS'\
    \ group, out\n   all interfaces having PIM neighbors (excluding the one over which\
    \ the\n   message was received).  Bootstrap messages are sent with TTL value of\n\
    \   1. Bootstrap messages originate at the BSR, and are forwarded by\n   intermediate\
    \ routers.\n   Bootstrap message is divided up into `semantic fragments', if the\n\
    \   original message exceeds the maximum packet size boundaries.\n   The semantics\
    \ of a single `fragment' is given below:\n   0                   1           \
    \        2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Fragment Tag          | Hash Mask len | BSR-priority  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-BSR-Address                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Encoded-Group Address-1               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | RP-Count-1    | Frag RP-Cnt-1 |         Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-RP-Address-1                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          RP1-Holdtime         |           Unicast- . . .      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | . . . RP-Address-2            |       RP2-Holdtime            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               .                               |\n   |  \
    \                             .                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-RP-Address-m                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          RPm-Holdtime         |            Encoded- . . .     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | . . . Group Address-2         . . .                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               .                               |\n   |  \
    \                             .                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Encoded-Group Address-n               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | RP-Count-m    | Frag RP-Cnt-m |          Reserved             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-RP-Address-1                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          RP1-Holdtime         |           Unicast- . . .      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | . . . RP-Address-2            |       RP2-Holdtime            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               .                               |\n   |  \
    \                             .                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-RP-Address-m                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          RPm-Holdtime         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   Fragment\
    \ Tag\n        A randomly generated number, acts to distinguish the\n        fragments\
    \ belonging to different Bootstrap messages;\n        fragments belonging to same\
    \ Bootstrap message carry the\n        same `Fragment Tag'.\n   Hash Mask len\n\
    \        The length (in bits) of the mask to use in the hash\n        function.\
    \  For IPv4 we recommend a value of 30. For IPv6 we\n        recommend a value\
    \ of 126.\n   BSR-priority\n        Contains the BSR priority value of the included\
    \ BSR.  This\n        field is considered as a high order byte when comparing\
    \ BSR\n        addresses.\n   Unicast-BSR-Address\n        The IP address of the\
    \ bootstrap router for the domain. The\n        length of this field in bytes\
    \ is specified in Addr length.\n   Encoded-Group Address-1..n\n        The group\
    \ prefix (address and mask) with which the\n        Candidate RPs are associated.\
    \ Format previously described.\n   RP-Count-1..n\n        The number of Candidate\
    \ RP addresses included in the whole\n        Bootstrap message for the corresponding\
    \ group prefix. A\n        router does not replace its old RP-Set for a given\
    \ group\n        prefix until/unless it receives `RP-Count' addresses for\n  \
    \      that prefix; the addresses could be carried over several\n        fragments.\
    \  If only part of the RP-Set for a given group\n        prefix was received,\
    \ the router discards it, without\n        updating that specific group prefix's\
    \ RP-Set.\n   Frag RP-Cnt-1..m\n        The number of Candidate RP addresses included\
    \ in this\n        fragment of the Bootstrap message, for the corresponding\n\
    \        group prefix. The `Frag RP-Cnt' field facilitates parsing\n        of\
    \ the RP-Set for a given group prefix, when carried over\n        more than one\
    \ fragment.\n   Unicast-RP-address-1..m\n        The address of the Candidate\
    \ RPs, for the corresponding\n        group prefix.  The length of this field\
    \ in bytes is\n        specified in Addr length.\n   RP1..m-Holdtime\n       \
    \ The Holdtime for the corresponding RP. This field is copied\n        from the\
    \ `Holdtime' field of the associated RP stored at\n        the BSR.\n"
- title: 4.7 Assert Message
  contents:
  - "4.7 Assert Message\n   The Assert message is sent when a multicast data packet\
    \ is received\n   on an outgoing interface corresponding to the (S,G) or (*,G)\n\
    \   associated with the source.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Encoded-Group Address                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Unicast-Source Address                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |R|                        Metric Preference                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Metric                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   Encoded-Group\
    \ Address\n         The group address to which the data packet was addressed,\n\
    \         and which triggered the Assert.  Format previously\n         described.\n\
    \   Unicast-Source Address\n         Source IP address from IP multicast datagram\
    \ that\n         triggered the Assert packet to be sent. The length of this\n\
    \         field in bytes is specified in Addr length.\n   R     RPT-bit is a 1\
    \ bit value. If the IP multicast datagram\n         that triggered the Assert\
    \ packet is routed down the RP\n         tree, then the RPT-bit is 1; if the IP\
    \ multicast datagram\n         is routed down the SPT, it is 0.\n   Metric Preference\n\
    \         Preference value assigned to the unicast routing protocol\n        \
    \ that provided the route to Host address.\n   Metric The unicast routing table\
    \ metric. The metric is in units\n         applicable to the unicast routing protocol\
    \ used.\n"
- title: 4.8 Graft Message
  contents:
  - "4.8 Graft Message\n   Used in dense-mode. Refer to PIM dense mode specification.\n"
- title: 4.9 Graft-Ack Message
  contents:
  - "4.9 Graft-Ack Message\n   Used in dense-mode. Refer to PIM dense mode specification.\n"
- title: 4.10 Candidate-RP-Advertisement
  contents:
  - "4.10 Candidate-RP-Advertisement\n   Candidate-RP-Advertisements are periodically\
    \ unicast from the C-RPs\n   to the BSR.\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PIM Ver| Type  | Addr length   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Prefix-Cnt    |A| Reserved    |             Holdtime          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Unicast-RP-Address                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Encoded-Group Address-1               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                               .                               |\n   |  \
    \                             .                               |\n   |        \
    \                       .                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Encoded-Group Address-n               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PIM Version, Type, Addr length, Checksum\n         Described above.\n   Prefix-Cnt\n\
    \         The number of encoded group addresses included in the\n         message;\
    \ indicating the group prefixes for which the C-RP\n         is advertising. A\
    \ Prefix-Cnt of `0' implies a prefix of\n         224.0.0.0 with mask length of\
    \ 4; i.e. all multicast groups.\n         If the C-RP is not configured with Group-prefix\n\
    \         information, the C-RP puts a default value of `0' in this\n        \
    \ field.\n   A     The Authoritative bit. This bit indicates that the BSR\n  \
    \       should not override the group-prefix information indicated\n         in\
    \ the C-RP Advertisement. In most cases C-RPs set this bit\n         to 0.\n \
    \  Holdtime\n         The amount of time the advertisement is valid. This field\n\
    \         allows advertisements to be aged out.\n   Unicast-RP-Address\n     \
    \    The address of the interface to advertise as a Candidate\n         RP.  The\
    \ length of this field in bytes is specified in Addr\n         length.\n   Encoded-Group\
    \ Address-1..n\n         The group prefixes for which the C-RP is advertising.\n\
    \         Format previously described.\n"
- title: 5 Acknowledgments
  contents:
  - "5 Acknowledgments\n   Tony Ballardie, Scott Brim, Jon Crowcroft, Bill Fenner,\
    \ Paul Francis,\n   Joel Halpern, Horst Hodel, Polly Huang, Stephen Ostrowski,\
    \ Lixia\n   Zhang and Girish Chandranmenon provided detailed comments on previous\n\
    \   drafts. The authors of CBT [7] and membership of the IDMR WG provided\n  \
    \ many of the motivating ideas for this work and useful feedback on\n   design\
    \ details.\n   This work was supported by the National Science Foundation, ARPA,\n\
    \   cisco Systems and Sun Microsystems.\n"
- title: 6 Appendices
  contents:
  - '6 Appendices

    '
- title: '6.1 Appendix I: Major Changes and Updates to the Spec'
  contents:
  - "6.1 Appendix I: Major Changes and Updates to the Spec\n   This appendix populates\
    \ the major changes in the specification\n   document as compared to `draft-ietf-idmr-pim-spec-01.ps,txt'.\n\
    \   * Major Changes\n   List of changes since March '96 IETF:\n   (*,*,RP) Joins\
    \ state and data forwarding check; replaces (*,G-\n   Prefix) Joins state for\
    \ interoperability. (*,G) negative cache\n   introduced for the (*,*,RP) state\
    \ supporting mechanisms.\n   Semantic fragmentation for the Bootstrap message.\n\
    \   Refinement of Assert details.\n   Addition and refinement of Join/Prune suppression\
    \ and Register\n   suppression (introduction of null Registers).\n   Editorial\
    \ changes and clarifications to the timers section.\n   Addition of Appendix II\
    \ (BSR Election and RP-Set Distribution), and\n   Appendix III (Glossary of Terms).\n\
    \   Addition of table of contents.\n   List of changes incurred since version\
    \ 1 of the spec.:\n   Proposal and refinement of bootstrap router (BSR) election\
    \ mechanisms\n   Introduction of hash functions for Group to RP mapping\n   New\
    \ RP-liveness indication mechanisms based upon the the Bootstrap\n   Router (BSR)\
    \ and the Bootstrap messages.\n   Removal of reachability messages, RP reports\
    \ and multiple RPs per\n   group.\n   * Packet Format Changes\n   Packet Format\
    \ incurred updates to accommodate different address\n   lengths, and address aggregation.\n\
    \   1    The `Addr length' field was added to the PIM fixed header\n        to\
    \ specify the address length in bytes of the underlying\n        protocol, see\
    \ section 4.\n   2    The Encoded source and group address formats were\n    \
    \    introduced, with the use of a `Mask length' field to allow\n        aggregation,\
    \ section 4.1.\n   3    Packet formats are no longer IGMP messages; rather PIM\n\
    \        messages.\n   PIM message types and formats were also modified:\n   [Note:\
    \ most changes were made to the May 95 version, unless otherwise\n   specified].\n\
    \   1    Obsolete messages:\n        Register-Ack [Feb. 96]\n        Poll and\
    \ Poll Response [Feb. 96]\n        RP-Reachability [Feb. 96]\n        RPlist-Mapping\
    \ [Feb. 96]\n   2    New messages:\n        Candidate-RP-Advertisement [change\
    \ made in October 95]\n        RP-Set [Feb. 96]\n   3    Modified messages:\n\
    \        Join/Prune [Feb. 96]\n        Register [Feb. 96]\n        Register-Stop\
    \ [Feb.  96]\n        Hello (addition of OptionTypes) [Aug 96]\n   4    Renamed\
    \ messages:\n        Query messages are renamed as Hello messages [Aug. 96]\n\
    \        RP-Set messages are renamed as Bootstrap messages [Aug. 96]\n"
- title: '6.2 Appendix II: BSR Election and RP-Set Distribution'
  contents:
  - "6.2 Appendix II: BSR Election and RP-Set Distribution\n   For simplicity, the\
    \ Bootstrap message is used in both the BSR election\n   and the RP-Set distribution.\n\
    \   The above two mechanisms; the BSR election, and the RP-Set\n   distribution;\
    \ are realized through the following state machine,\n   illustrated in figure\
    \ 4:\n      [Figures are present only in the postscript version]\n      Fig. \
    \ 4 State Diagram for the BSR election and RP-Set\n      distribution mechanisms\n\
    \   The protocol transitions for a C-BSR are given in state diagram (a).\n   For\
    \ routers not configured as C-BSRs, the protocol transitions are\n   given in\
    \ state diagram (b).\n   Each PIM router keeps a Bootstrap-timer, initialized\
    \ to\n   [Bootstrap-Timeout], in addition to a local BSR field `LclBSR'\n   (initialized\
    \ to a local address if C-BSR, or to 0 otherwise), and a\n   local RP-Set `LclRP-Set'\
    \ (initially empty).  The two main stimuli to\n   the state machine are the timer\
    \ events, and receiving an Bootstrap\n   message:\n   * Initial States and Timer\
    \ Events\n   1    If the router is a C-BSR:\n        1    The router operates\
    \ initially in the `CandBSR' state, where\n             it does not originate\
    \ any Bootstrap messages.\n        2    If the Bootstrap-timer expires, and the\
    \ current state is\n             `CandBSR', the router originates an Bootstrap\
    \ message -\n             carrying the local RP-Set, and its own BSR priority\
    \ and\n             address-, restarts the Bootstrap-timer at [Bootstrap-\n  \
    \           Period] seconds and transits into the `ElectedBSR' state.\n      \
    \  3    If the Bootstrap-timer expires, and the current state is\n           \
    \  `ElectedBSR', the router originates an Bootstrap message,\n             and\
    \ restarts the RP-Set timer at [Bootstrap-Period].  No\n             state transition\
    \ is incurred.\n             This way, the elected BSR originates periodic Bootstrap\n\
    \             messages every [Bootstrap-Period].\n   2    If a router is not a\
    \ C-BSR:\n        1    The router operates initially in the 'AxptAny' state. \
    \ In\n             such state, a router accepts the first Bootstrap message\n\
    \             from the RPF neighbor toward the included BSR. The Reverse\n   \
    \          Path Forwarding (RPF) neighbor in this case is the next hop\n     \
    \        router en route to the included BSR.\n        2    If the Bootstrap-timer\
    \ expires, and the current state is\n             `AxptPref', -where the router\
    \ accepts only preferred.\n             Bootstrap messages from the RPF neighbor\
    \ toward the\n             included BSR-, the router transits into the `AxptAny'\n\
    \             state (preferred Bootstrap messages are those that carry\n     \
    \        BSR-priority and address higher than, or equal to,\n             `LclBSR').\n\
    \             In this case, if an elected BSR becomes unreachable, the\n     \
    \        routers start accepting Bootstrap messages from another C-\n        \
    \     BSR after the Bootstrap-timer expires.  All PIM routers\n             within\
    \ a domain converge on the preferred (with highest\n             priority and\
    \ address) reachable C-BSR.\n   * Receiving Bootstrap Message\n   To avoid loops,\
    \ an RPF check is performed on the included BSR address.\n   Upon receiving an\
    \ Bootstrap message from the RPF neighbor toward the\n   included BSR, the following\
    \ actions are taken:\n   1    If the router is not a C-BSR:\n        1    If the\
    \ current state is 'AxptAny', the router accepts the\n             Bootstrap message,\
    \ and transits into the 'AxptPref' state.\n        2    If the current state is\
    \ 'AxptPref', and the Bootstrap\n             message is preferred, the message\
    \ is accepted. No state\n             transition is incurred.\n   2    If the\
    \ router is a C-BSR, and the Bootstrap message is\n        preferred, the message\
    \ is accepted. Further, if this happens\n        when the current state is\n \
    \  When an Bootstrap message is accepted, the router restarts the\n   Bootstrap-timer\
    \ at [Bootstrap-Timeout], stores the received BSR\n   priority and address in\
    \ `LclBSR', and the received RP-Set in\n   `LclRP-Set', and forwards the Bootstrap\
    \ message out all interfaces\n   except the receiving interface.\n   If an Bootstrap\
    \ message is rejected, no state transitions are\n   triggered.\n"
- title: '6.3 Appendix III: Glossary of Terms'
  contents:
  - "6.3 Appendix III: Glossary of Terms\n   Following is an alphabetized list of\
    \ terms and definitions used\n   throughout this specification.\n   *    {Bootstrap\
    \ router (BSR)}. A BSR is a dynamically elected router\n        within a PIM domain.\
    \ It is responsible for constructing the RP-\n        Set and originating Bootstrap\
    \ messages.\n   *    {Candidate-BSR (C-BSR)}. A C-BSR is a router configured to\n\
    \        participate in the BSR election and act as BSRs if elected.\n   *   \
    \ {Candidate RP (C-RP)}. A C-RP is a router configured to send\n        periodic\
    \ Candidate-RP-Advertisement messages to the BSR, and act\n        as an RP when\
    \ it receives Join/Prune or Register messages for\n        the advertised group\
    \ prefix.\n   *    {Designated Router (DR)}.  The DR sets up multicast route\n\
    \        entries and sends corresponding Join/Prune and Register messages\n  \
    \      on behalf of directly-connected receivers and sources,\n        respectively.\
    \  The DR may or may not be the same router as the\n        IGMP Querier. The\
    \ DR may or may not be the long-term, last-hop\n        router for the group;\
    \ a router on the LAN that has a lower\n        metric route to the data source,\
    \ or to the group's RP, may take\n        over the role of sending Join/Prune\
    \ messages.\n   *    {Incoming interface (iif)}. The iif of a multicast route\
    \ entry\n        indicates the interface from which multicast data packets are\n\
    \        accepted for forwarding. The iif is initialized when the entry\n    \
    \    is created.\n   *    {Join list}. The Join list is one of two lists of addresses\
    \ that\n        is included in a Join/Prune message; each address refers to a\n\
    \        source or RP.  It indicates those sources or RPs to which\n        downstream\
    \ receiver(s) wish to join.\n   *    {Last-hop router}. The last-hop router is\
    \ the last router to\n        receive multicast data packets before they are delivered\
    \ to\n        directly-connected member hosts. In general the last-hop router\n\
    \        is the DR for the LAN.  However, under various conditions\n        described\
    \ in this document a parallel router connected to the\n        same LAN may take\
    \ over as the last-hop router in place of the\n        DR.\n   *    {Outgoing\
    \ interface (oif) list}. Each multicast route entry has\n        an oif list containing\
    \ the outgoing interfaces to which\n        multicast packets should be forwarded.\n\
    \   *    {Prune List}. The Prune list is the second list of addresses\n      \
    \  that is included in a Join/Prune message. It indicates those\n        sources\
    \ or RPs from which downstream receiver(s) wish to prune.\n   *    {PIM Multicast\
    \ Border Router (PMBR)}. A PMBR connects a PIM\n        domain to other multicast\
    \ routing domain(s).\n   *    {Rendezvous Point (RP)}. Each multicast group has\
    \ a shared-tree\n        via which receivers hear of new sources and new receivers\
    \ hear\n        of all sources. The RP is the root of this per-group shared\n\
    \        tree, called the RP-Tree.\n   *    {RP-Set}. The RP-Set is a set of RP\
    \ addresses constructed by\n        the BSR based on Candidate-RP advertisements\
    \ received. The RP-\n        Set information is distributed to all PIM routers\
    \ in the BSR's\n        PIM domain.\n   *    {Reverse Path Forwarding (RPF)}.\
    \ RPF is used to select the\n        appropriate incoming interface for a multicast\
    \ route entry . The\n        RPF neighbor for an IP address X is the the next-hop\
    \ router used\n        to forward packets toward X. The RPF interface is the interface\n\
    \        to that RPF neighbor. In the common case this is the next hop\n     \
    \   used by the unicast routing protocol for sending unicast packets\n       \
    \ toward X. For example, in cases where unicast and multicast\n        routes\
    \ are not congruent, it can be different.\n   *    {Route entry.} A multicast\
    \ route entry is state maintained in a\n        router along the distribution\
    \ tree and is created, and updated\n        based on incoming control messages.\
    \  The route entry may be\n        different from the forwarding entry; the latter\
    \ is used to\n        forward data packets in real time. Typically a forwarding\
    \ entry\n        is not created until data packets arrive, the forwarding entry's\n\
    \        iif and oif list are copied from the route entry, and the\n        forwarding\
    \ entry may be flushed and recreated at will.\n   *    {Shortest path tree (SPT)}.\
    \  The SPT is the multicast\n        distribution tree created by the merger of\
    \ all of the shortest\n        paths that connect receivers to the source (as\
    \ determined by\n        unicast routing).\n   *    {Sparse Mode (SM)}. SM is\
    \ one mode of operation of a multicast\n        protocol.  PIM SM uses explicit\
    \ Join/Prune messages and\n        Rendezvous points in place of Dense Mode PIM's\
    \ and DVMRP's\n        broadcast and prune mechanism.\n   *    {Wildcard (WC)\
    \ multicast route entry}. Wildcard multicast route\n        entries are those\
    \ entries that may be used to forward packets\n        for any source sending\
    \ to the specified group. Wildcard bots in\n        the join list of a Join/Prune\
    \ message represent either a (*,G)\n        or (*,*,RP) join; in the prune list\
    \ they represent a (*,G)\n        prune.\n   *    {(S,G) route entry}. (S,G) is\
    \ a source-specific route entry. It\n        may be created in response to data\
    \ packets, Join/Prune messages,\n        or Asserts. The (S,G) state in routers\
    \ creates a source-rooted,\n        shortest path (or reverse shortest path) distribution\
    \ tree.\n        (S,G)RPT bit entries are source-specific entries on the shared\n\
    \        RP-Tree; these entries are used to prune particular sources off\n   \
    \     of the shared tree.\n   *    {(*,G) route entry}. Group members join the\
    \ shared RP-Tree for\n        a particular group. This tree is represented by\
    \ (*,G) multicast\n        route entries along the shortest path branches between\
    \ the RP\n        and the group members.\n   *    {(*,*,RP) route entry}. (*,*,RP)\
    \ refers to any source and any\n        multicast group that maps to the RP included\
    \ in the entry. The\n        routers along the shortest path branches between\
    \ a domain's\n        RP(s) and its PMBRs keep (*,*,RP) state and use it to determine\n\
    \        how to deliver packets toward the PMBRs if data packets arrive\n    \
    \    for which there is not a longer match. The wildcard group in the\n      \
    \  (*,*,RP) route entry is represented by a group address of\n        224.0.0.0\
    \ and a mask length of 4 bits.\n   References\n"
- title: 1.   Deering, S., D.Estrin, D.Farinacci, V.Jacobson, C.Liu, L.Wei,
  contents:
  - "1.   Deering, S., D.Estrin, D.Farinacci, V.Jacobson, C.Liu, L.Wei,\n     P.Sharma,\
    \ and A.Helmy.  Protocol independent multicast (pim) :\n     Motivation and architecture.\
    \ Work in Progress.\n"
- title: 2.   Deering, S., D.Estrin, D.Farinacci, V.Jacobson, C.Liu, and L.Wei.
  contents:
  - "2.   Deering, S., D.Estrin, D.Farinacci, V.Jacobson, C.Liu, and L.Wei.\n    \
    \ The pim architecture for wide-area multicast routing.\n     ACM Transactions\
    \ on Networks, April 1996.\n"
- title: 3.   Estrin, D., D.Farinacci, V.Jacobson, C.Liu, L.Wei, P.Sharma, and
  contents:
  - "3.   Estrin, D., D.Farinacci, V.Jacobson, C.Liu, L.Wei, P.Sharma, and\n     A.Helmy.\
    \  Protocol independent multicast-dense mode (pim-dm) :\n     Protocol specification.\
    \  Work in Progress.\n"
- title: 4.   Deering, S. Host extensions for ip multicasting, Aug 1989. RFC1112.
  contents:
  - '4.   Deering, S. Host extensions for ip multicasting, Aug 1989. RFC1112.

    '
- title: 5.   Fenner, W. Internet group management protocol, version 2.
  contents:
  - "5.   Fenner, W. Internet group management protocol, version 2.\n     Work in\
    \ Progress.\n"
- title: 6.   Atkinson, R. Security architecture for the internet protocol,
  contents:
  - "6.   Atkinson, R. Security architecture for the internet protocol,\n     August\
    \ 1995. RFC-1825.\n"
- title: 7.   Ballardie, A.J., P.F. Francis, and J.Crowcroft. Core based trees.
  contents:
  - "7.   Ballardie, A.J., P.F. Francis, and J.Crowcroft. Core based trees.\n    \
    \ In Proceedings of the ACM SIGCOMM, San Francisco, 1993.\n   Addresses of Authors:\n\
    \   Deborah Estrin\n   Computer Science Dept/ISI\n   University of Southern Calif.\n\
    \   Los Angeles, CA 90089 \n   estrin@usc.edu\n   Dino Farinacci\n   Cisco Systems\
    \ Inc.\n   170 West Tasman Drive,\n   San Jose, CA 95134\n   dino@cisco.com\n\
    \   Ahmed Helmy\n   Computer Science Dept.\n   University of Southern Calif.\n\
    \   Los Angeles, CA 90089\n   ahelmy@catarina.usc.edu\n   David Thaler\n   EECS\
    \ Department\n   University of Michigan\n   Ann Arbor, MI 48109\n   thalerd@eecs.umich.edu\n\
    \   Stephen Deering\n   Xerox PARC\n   3333 Coyote Hill Road\n   Palo Alto, CA\
    \ 94304\n   deering@parc.xerox.com\n   Mark Handley\n   Department of Computer\
    \ Science\n   University College London\n   Gower Street\n   London, WC1E 6BT\n\
    \   UK\n   m.handley@cs.ucl.ac.uk\n   Van Jacobson\n   Lawrence Berkeley Laboratory\n\
    \   1 Cyclotron Road\n   Berkeley, CA 94720\n   van@ee.lbl.gov\n   Ching-gung\
    \  Liu\n   Computer Science Dept.\n   University of Southern Calif.\n   Los Angeles,\
    \ CA 90089\n   charley@catarina.usc.edu\n   Puneet Sharma\n   Computer Science\
    \ Dept.\n   University of Southern Calif.\n   Los Angeles, CA 90089\n   puneet@catarina.usc.edu\n\
    \   Liming Wei\n   Cisco Systems Inc.\n   170 West Tasman Drive,\n   San Jose,\
    \ CA 95134\n   lwei@cisco.com\n"
