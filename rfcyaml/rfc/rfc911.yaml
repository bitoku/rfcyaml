- title: __initial_text__
  contents:
  - "                      EGP GATEWAY UNDER BERKELEY UNIX 4.2\n       University\
    \ of Southern California, Information Sciences Institute\n     Visiting Research\
    \ Fellow from Telecom Australia Research Laboratories\nThis  report  describes\
    \ an implementation of the Exterior Gateway Protocol that\nruns under the Unix\
    \ 4.2 BSD operating system.  Some  issues  related  to  local\nnetwork configurations\
    \ are also discussed.\nStatus of this Memo:\nThis  memo describes  an implementation\
    \ of the Exterior Gateway Protocol  (EGP)\n(in that sense it is a status report).\
    \  The memo also discusses  some  possible\nextentions  and  some  design  issues\
    \   (in that sense it is an invitation  for\nfurther discussion).  Distribution\
    \ of this memo is unlimited.\n                               Table of Contents\n\
    1. INTRODUCTION                                                              \
    \ 1\n1.1 Motivation for Development                                          \
    \      1\n1.2 Overview of EGP                                                \
    \           2\n2. GATEWAY DESIGN                                             \
    \                4\n2.1 Routing Tables                                       \
    \                     4\n     2.1.1 Incoming Updates                         \
    \                          5\n     2.1.2 Outgoing Updates                    \
    \                               5\n2.2 Neighbor Acquisition                  \
    \                                    6\n2.3 Hello and Poll Intervals         \
    \                                         6\n2.4 Neighbor Cease              \
    \                                              7\n2.5 Neighbor Reachability  \
    \                                                   7\n2.6 Sequence Numbers  \
    \                                                        8\n2.7 Treatment of Excess\
    \ Commands                                              8\n2.8 Inappropriate Messages\
    \                                                    8\n2.9 Default Gateway  \
    \                                                         9\n3. TESTING      \
    \                                                             10\n4. FUTURE ENHANCEMENTS\
    \                                                       11\n4.1 Multiple Autonomous\
    \ Systems                                              11\n4.2 Interface Monitoring\
    \                                                     11\n4.3 Network Level Status\
    \ Information                                         11\n4.4 Interior Gateway\
    \ Protocol Interface                                      12\n5. TOPOLOGY ISSUES\
    \                                                           13\n5.1 Topology Restrictions\
    \ and Routing Loops                                  13\n     5.1.1 Background\
    \                                                        13\n     5.1.2 Current\
    \ Policy                                                    14\n5.2 Present ISI\
    \ Configuration                                                15\n     5.2.1\
    \ EGP Across ARPANET                                                17\n     5.2.2\
    \ EGP Across ISI-NET                                                17\n     5.2.3\
    \ Potential Routing Loop                                            18\n5.3 Possible\
    \ Future Configuration                                            18\n     5.3.1\
    \ Gateway to UCI-ICS                                                18\n     5.3.2\
    \ Dynamic Switch to Backup Gateway                                  19\n     \
    \     5.3.2.1 Usual Operation                                            19\n\
    \          5.3.2.2 Host Initialization                                       \
    \ 19\n          5.3.2.3 When Both the Primary and Backup are Down            \
    \      20\n          5.3.2.4 Unix 4.2 BSD                                    \
    \           20\n1. INTRODUCTION\nThe Exterior Gateway Protocol (EGP) [Rosen 82;\
    \ Seamonson & Rosen 84; Mills 84a]\nhas been specified to allow autonomous development\
    \ of different gateway systems\nwhile  still  maintaining  global distribution\
    \ of internet routing information.\nEGP provides a means for  different  autonomous\
    \  gateway  systems  to  exchange\ninformation about the networks that are reachable\
    \ via them.\nThis  report  mainly  describes  an  implementation  of EGP that\
    \ runs as a user\n                               *                           \
    \       **\nprocess under the Berkeley Unix  4.2 operating system run on a VAX\
    \    computer.\nSome  related issues concerning local autonomous system configurations\
    \ are also\ndiscussed.\nThe EGP implementation is experimental and is not a part\
    \ of Unix 4.2 BSD. It is\nanticipated that Berkeley will incorporate a version\
    \ of EGP in the future.\nThe program is written in C. The EGP  part  is  based\
    \  on  the  C-Gateway  code\nwritten  by  Liza  Martin at MIT and the route management\
    \ part is based on Unix\n4.2 BSD route management daemon, \"routed\".\nThe EGP\
    \ functions are consistent with the specification of [Mills  84a]  except\nwhere\
    \ noted.\nA  knowledge  of  EGP  as  described  in  [Seamonson  & Rosen 84; Mills\
    \ 84a] is\nassumed.\nThis chapter discusses the motivation for the project, Chapter\
    \ 2 describes  the\ngateway  design,  Chapter 3 is on testing, Chapter 4 suggests\
    \ some enhancements\nand Chapter 5 discusses topology issues.\nFurther information\
    \ about running the EGP program and describing  the  software\nis being published\
    \ in an ISI Research Report ISI/RR-84-145 [Kirton 84].\nRequests  for  documentation\
    \  and  copies  of the EGP program should be sent to\nJoyce Reynolds (JKReynolds@USC-ISIF.ARPA).\
    \ Software support is not provided.\n1.1 Motivation for Development\nWith the\
    \ introduction of EGP, the internet gateways  will  be  divided  into  a\n\"core\"\
    \  autonomous  system  (AS)  of  gateways  maintained by Bolt, Beranek and\nNewman\
    \  (BBN)  and  many  \"stub\"  AS's  that  are   maintained   by   different\n\
    organizations  and  have at least one network in common with a core AS gateway.\n\
    The core AS will act as a  hub  for  passing  on  routing  information  between\n\
    _______________\n  *\ndifferent  stub AS's so that it will only be necessary for\
    \ stub AS's to conduct\nEGP with a core gateway. Further detail is given in [Rosen\
    \ 82].\nAt the time of this  project  there  were  28  \"non-routing\"  gateways\
    \  in  the\ninternet.  Non-routing  gateways  did  not  exchange  routing  information\
    \  but\nrequired static entries in the core gateway routing tables.   Since  August\
    \  1,\n1984  these  static  entries  have  been  eliminated and previously non-routing\n\
    gateways are required to communicate this  information  to  the  core  gateways\n\
    dynamically via EGP [Postel 84].\nAt the USC Information Sciences Institute (ISI)\
    \ there was a non-routing gateway\nto  the  University  of  California  at  Irvine\
    \  network  (UCI-ICS).  With  the\nelimination of  non-routing  gateways  from\
    \  the  core  gateway  tables  it  is\nnecessary to inform the core ISI gateway\
    \ of the route to UCI-ICS using EGP.\nAlso,  we  would  like a backup gateway\
    \ between ISI-NET and the ARPANET in case\nthe core ISI gateway is down. Such,\
    \ a gateway  would  need  to  convey  routing\ninformation  via EGP. Details of\
    \ the ISI network configuration are discussed in\nSection 5.2.\nOf the 28 non-routing\
    \ gateways 23 were implemented by Unix  systems,  including\nISI's.  Also, ISI's\
    \ proposed backup gateway was a Unix system. Thus there was a\nlocal and general\
    \ need for an EGP implementation to run under Unix. The current\nversion  of \
    \ Unix  that  included  Department  of  Defense  (DoD) protocols was\nBerkeley\
    \ Unix 4.2 so this was selected.\n1.2 Overview of EGP\nThis report assumes a knowledge\
    \ of EGP, however a brief overview is given  here\nfor completeness. For further\
    \ details refer to [Rosen 82] for the background to\nEGP,  [Seamonson & Rosen\
    \ 84] for an informal description, and [Mills 84a] for a\nmore formal specification\
    \ and implementation details.\nEGP is generally conducted between gateways in\
    \  different  AS's  that  share  a\ncommon network, that is, neighbor gateways.\n\
    EGP  consists  of three procedures, neighbor acquisition, neighbor reachability\n\
    and network reachability.\nNeighbor acquisition is a two way handshake in which\
    \ gateways agree to  conduct\nEGP  by exchanging Request and Confirm messages\
    \ which include the minimum Hello\nand Poll  intervals.    Acquisition  is  terminated\
    \  by  exchanging  Cease  and\nCease-ack messages.\nNeighbor  reachability  is\
    \  a  periodic exchange of Hello commands and I-H-U (I\nheard you) responses to\
    \ ensure that each gateway is up. Currently a  30  second\nminimum interval is\
    \ used across ARPANET. Only one gateway need send commands as\nNetwork  reachability\
    \  is  determined by periodically sending Poll commands and\n2. GATEWAY DESIGN\n\
    EGP  is a polling protocol with loose timing constraints. Thus the only gateway\n\
    function requiring good performance is packet forwarding.  Unix 4.2 already has\n\
    packet forwarding built into the kernel where best performance can be achieved.\n\
    At the time of writing Unix 4.2 did not send  ICMP  (Internet  Control  Message\n\
    Protocol)  redirect  messages  for  misrouted packets. This is a requirement of\n\
    internet gateways and will later be added by Berkeley.\nThe EGP and route update\
    \ functions are implemented as a  user  process.    This\nfacilitates  development\
    \ and distribution as only minor changes need to be made\nto the Unix kernel.\
    \  This is a similar approach to the Unix route  distribution\nprogram  \"routed\"\
    \  [Berkeley  83]  which  is  based  on  the  Xerox  NS Routing\nInformation Protocol\
    \ [Xerox 81].\n2.1 Routing Tables\nA route consists of a destination network \
    \ number,  the  address  of  the  next\ngateway  to  use  on  a  directly  connected\
    \  network,  and a metric giving the\ndistance in gateway hops to the destination\
    \ network.\nThere are two sets of routing  tables,  the  kernel  tables  (used\
    \  for  packet\nforwarding) and the EGP process tables. The kernel has separate\
    \ tables for host\nand  network  destinations.  The EGP process only maintains\
    \ the network routing\ntables. The EGP tables are updated when EGP Update messages\
    \ are received.  When\na  route is changed the kernel network tables are updated\
    \ via the SIOCADDRT and\nSIOCDELRT ioctl system calls. At  initialization  the\
    \  kernel  network  routing\ntables  are  read  via the kernel memory image file,\
    \ /dev/kmem, and copied into\nthe EGP tables for consistency.\nThis EGP implementation\
    \ is designed to run on a gateway that is  also  a  host.\nBecause  of  the relatively\
    \ slow polling to obtain route updates it is possible\nthat the host may receive\
    \ notification of routing changes  via  ICMP  redirects\nbefore  the EGP process\
    \ is notified via EGP. Redirects update the kernel tables\ndirectly. The EGP process\
    \ listens for redirect messages on  a  raw  socket  and\nupdates its routing tables\
    \ to keep them consistent with the kernel.\nThe  EGP  process routing tables are\
    \ maintained as two separate tables, one for\nexterior routes (via different AS\
    \ gateways) and one for  interior  routes  (via\nthe  gateways of this AS).  The\
    \ exterior routing table is updated by EGP Update\nmessages. The interior  routing\
    \  table  is  currently  static  and  is  set  at\ninitialization  time. It includes\
    \ all directly attached nets, determined by the\nSIOCGIFCONF ioctl system call\
    \ and any interior non-routing gateways  read  from\nthe  EGP  initialization\
    \ file, EGPINITFILE. The interior routing table could in\nfuture be updated dynamically\
    \ by an Interior Gateway Protocol (IGP).\nMaintaining separate tables for exterior\
    \ and interior routing  facilitates  the\npreparation  of  outgoing  Update  messages\
    \ which only contain interior routing\nroutes  should  not  be updated. In the\
    \ current implementation alternate routes\nare not used.\n2.1.1 Incoming Updates\n\
    EGP Updates are used to update  the  exterior  routing  table  if  one  of  the\n\
    following is satisfied:\n   - No  routing  table  entry  exists for the destination\
    \ network and the\n     metric indicates the route is reachable (< 255).\n   -\
    \ The advised gateway is the same as the current route.\n   - The advised distance\
    \ metric is less than the current metric.\n   - The current route is older (plus\
    \ a  margin)  than  the  maximum  poll\n     interval  for  all  acquired  EGP\
    \  neighbors.  That is, the route was\n     omitted from the last Update.\nIf\
    \ any exterior route entry, except the default route, is not  updated  by  EGP\n\
    within  4  minutes  or  3  times  the  maximum  poll interval, whichever is the\n\
    greater, it is deleted.\nIf there is more than one acquired EGP neighbor, the\
    \ Update  messages  received\nfrom each are treated the same way in the order\
    \ they are received.\nIn  the worst case, when a route is changed to a longer\
    \ route and the old route\nis not first notified as unreachable, it  could  take\
    \  two  poll  intervals  to\nupdate  a  route. With the current poll interval\
    \ this could be 4 minutes. Under\nUnix 4.2  BSD  TCP  connections  (Transmission\
    \  Control  Protocol)  are  closed\nautomatically  after  they  are idle for 6\
    \ minutes. So this worst case will not\nresult in the automatic closure of TCP\
    \ connections.\n2.1.2 Outgoing Updates\nOutgoing Updates include the direct  and\
    \  static  networks  from  the  interior\nrouting table, except for the network\
    \ shared with the EGP neighbor.\nThe  networks  that  are  allowed  to be advised\
    \ in Updates may be specified at\ninitialization in EGPINITFILE. This allows particular\
    \  routes  to  be  excluded\nfrom  exterior updates in cases where routing loops\
    \ could be a problem. Another\ncase where this option is necessary, is when there\
    \  is  a  non-routing  gateway\nbelonging  to  a different AS which has not implemented\
    \ EGP yet. Its routes may\nneed to be included in the kernel routing table but\
    \ they are not allowed to  be\nadvised in outgoing updates.\nfirst hop to their\
    \ attached networks.\nThe  distance to networks is set as in the interior routing\
    \ table except if the\nroute is marked down in which case the distance  is  set\
    \  to  255.  At  present\nroutes are only marked down if the outgoing interface\
    \ is down. The state of all\ninterfaces  is  checked  prior  to  preparing  each\
    \  outgoing  Update using the\nSIOCGIFFLAGS ioctl system call.\nUnsolicited Updates\
    \ are not sent.\n2.2 Neighbor Acquisition\nEGPINITFILE lists the addresses of\
    \ trusted EGP  neighbor  gateways,  which  are\nread  at  initialization.  These\
    \  will  usually  be  core gateways as only core\ngateways provide full internet\
    \ routing information.  At  the  time  of  writing\nthere  were  three  core \
    \ gateways  on  ARPANET which support EGP, CSS-GATEWAY,\nISI-GATEWAY and PURDUE-CS-GW,\
    \ and two on MILNET, BBN-MINET-A-GW and AERONET-GW.\nEGPINITFILE also includes\
    \ the maximum number of these gateways that  should  be\nacquired  at  any  one\
    \  time.  This is usually expected to be just one. If this\ngateway is declared\
    \ down another gateway on the  list  will  then  be  acquired\nautomatically \
    \ in  sufficient  time  to  ensure that the current routes are not\ntimed out.\n\
    The gateway will only accept acquisitions from neighbors on  the  trusted  list\n\
    and  will  not  accept  them if it already has acquired its maximum quota. This\n\
    prevents Updates being accepted from possibly unreliable sources.\nThe ability\
    \ to acquire core gateways that are not on the trusted list but  have\nbeen  learned\
    \ of indirectly via Update messages is not included because not all\ncore gateways\
    \ run EGP.\nNew acquisition Requests are sent to neighbors in  the  order  they\
    \  appear  in\nEGPINITFILE.  No  more new Requests than the maximum number of\
    \ neighbors yet to\nbe  acquired  are  sent  at  once.  Any  number  of  outstanding\
    \  Requests  are\nretransmitted at 32 second intervals up to 5 retransmissions\
    \ each at which time\nthe  acquisition  retransmission  interval  is increased\
    \ to 4 minutes. Once the\nmaximum number of  neighbors  has  been  acquired, \
    \ unacquired  neighbors  with\noutstanding  Requests  are  sent  Ceases.  This\
    \  approach provides a compromise\nbetween fast response when neighbors do not\
    \ initially respond and a  desire  to\nminimize  the  chance that a neighbor may\
    \ be Ceased after it has sent a Confirm\nbut before it has been received.  If\
    \ the specified maximum number of  neighbors\ncannot  be  acquired, Requests are\
    \ retransmitted indefinitely to all unacquired\nneighbors.\n2.3 Hello and Poll\
    \ Intervals\nThe  received  intervals  are  checked  against  upper  bounds to\
    \ guard against\nnonsense values. The upper bounds are currently set  at  120\
    \  and  480  seconds\nrespectively.  If,  they are exceeded the particular neighbor\
    \ is considered bad\nand not sent further Requests for one hour. This allows \
    \ the  situation  to  be\ncorrected  at  the  other  gateway and normal operation\
    \ to automatically resume\nfrom this gateway without an excess of unnecessary\
    \ network traffic.\nThe actual Hello and Poll intervals are chosen by first selecting\
    \  the  maximum\nof  the  intervals  advised  by this gateway and its peer. A\
    \ 2 second margin is\nthen added to the Hello interval to take  account  of  possible\
    \  network  delay\nvariations  and the Poll interval is increased to the next\
    \ integer ratio of the\nHello interval. This results in 32 second Hello and 128\
    \ second Poll intervals.\nIf an Update is not received in response to a Poll,\
    \ at most  one  repoll  (same\nsequence number) is sent instead of the next scheduled\
    \ Hello.\n2.4 Neighbor Cease\nIf  the EGP process is sent a SIGTERM signal via\
    \ the Kill command, all acquired\nneighbors are sent Cease(going down) commands.\
    \  Ceases are retransmitted at the\nhello interval at most 3 times.  Once all\
    \ have either responded with Cease-acks\nor been sent three retransmitted Ceases\
    \ the process is terminated.\n2.5 Neighbor Reachability\nOnly  active  reachability\
    \  determination  is  implemented.  It  is   done   as\nrecommended in [Mills\
    \ 84a] with a minor variation noted below.\nA  shift  register  of responses is\
    \ maintained.  For each Poll or Hello command\nsent a zero is shifted into the\
    \ shift register.  If a response  (I-H-U,  Update\nor  Error) is received with\
    \ the correct sequence number the zero is replaced by\na one.  Before each new\
    \ command is  sent  the  reachability  is  determined  by\nexamining  the  last\
    \  four  entries  of  the shift register. If the neighbor is\nreachable  and \
    \ <=  1  response  was  received  the  neighbor   is   considered\nunreachable.\
    \  If the neighbor is considered unreachable and >= 3 responses were\nreceived\
    \ it is now considered reachable.\nA neighbor is considered reachable immediately\
    \ after acquisition  so  that  the\nfirst  poll  received  from  a  core  gateway\
    \  (once  it considers this gateway\nreachable) will be responded to with an Update.\
    \ Polls are  not  sent  unless  a\nneighbor  is considered reachable and it has\
    \ not advised that it considers this\ngateway unreachable in its last Hello, I-H-U\
    \ or Poll message.    This  prevents\nthe first Poll being discarded after a down/up\
    \ transition. This is important as\nthe  Polls  are  used  for reachability determination.\
    \ Following acquisition at\nleast one message must be received before the first\
    \ Poll is sent.  This  is  to\ndetermine  that  the  peer  does  not  consider\
    \ this gateway down. This usually\nrequires at least one Hello to be sent prior\
    \ to the first poll. The  discussion\nrecommendations in [Mills 84a].\nPolls \
    \ received  by  peers  that  are  considered unreachable are sent an Error\nresponse\
    \ which allows their reachability determination to  progress  correctly.\nThis\
    \ action is an option within [Mills 84a].\nWhen  a  neighbor  becomes  unreachable\
    \  all  routes  using it as a gateway are\ndeleted from the routing table. If\
    \ there are  known  unacquired  neighbors  the\nunreachable gateway is ceased\
    \ and an attempt is made to acquire a new neighbor.\nIf all known neighbors are\
    \ acquired the reachability determination is continued\nfor  30  minutes  ([Mills\
    \  84a]  suggests  60  minutes)  after  which  time the\nunreachable neighbor\
    \ is ceased and reacquisition  attempted  every  4  minutes.\nThis is aimed at\
    \ reducing unnecessary network traffic.\nIf  valid  Update  responses  are  not\
    \  received for three successive polls the\nneighbor is ceased and an alternative\
    \ acquired or reacquisition is attempted in\n4 minutes. This provision is provided\
    \ in case erroneous Update data formats are\nbeing sent by the neighbor. This\
    \ situation did occur  on  one  occasion  during\ntesting.\n2.6 Sequence Numbers\n\
    Sequence  numbers  are  managed  as recommended in [Mills 84a]. Single send and\n\
    receive sequence numbers are maintained for each neighbor.  The  send  sequence\n\
    number  is  initialized  to  zero  and is incremented before each new Poll (not\n\
    repoll) is sent and at no other time. The send sequence number is used  in  all\n\
    commands.  The  receive  sequence  number is maintained by copying the sequence\n\
    number of the last Request, Hello, or Poll command received  from  a  neighbor.\n\
    This  sequence  number  is  used  in outgoing Updates. All responses (including\n\
    Error responses) return the sequence number of the message just received.\n2.7\
    \ Treatment of Excess Commands\nIf more than 20 commands are received from a neighbor\
    \ in any  8  minute  period\nthe  neighbor  is  considered  bad,  Ceased and reacquisition\
    \ prevented for one\nhour.\nAt most one repoll (same sequence number) received\
    \ before the poll interval has\nexpired (less a 4 second margin for network delay\
    \ variability) is responded  to\nwith  an  Update,  others are sent an Error response.\
    \ When an Update is sent in\nresponse to a repoll the unsolicited bit is not set,\
    \  which  differs  from  the\nrecommendation in [Mills 84a].\n2.8 Inappropriate\
    \ Messages\nIf  a Confirm, Hello, I-H-U, Poll or Update is received from any gateway\
    \ (known\n2.9 Default Gateway\nA  default gateway may be specified in EGPINITFILE.\
    \ The default route (net 0 in\nUnix 4.2 BSD) is used by the kernel packet forwarder\
    \ if there  is  no  specific\nroute for the destination network. This provides\
    \ a final level of backup if all\nknown EGP neighbors are unreachable. This is\
    \ especially useful if there is only\none available EGP neighbor, as in the ISI\
    \ case, Section 5.2.2.\nThe  default route is installed at initialization and\
    \ deleted after a valid EGP\nUpdate message is received. It  is  reinstalled \
    \ if  all  known  neighbors  are\nacquired  but  none  are  reachable,  if routes\
    \ time out while there are no EGP\nneighbors that are acquired and reachable,\
    \ and prior to process termination.\nIt is deleted after a valid EGP Update message\
    \ is received because the  default\ngateway will not know any more routing information\
    \ than learned via EGP.  If it\nwere  not deleted, all traffic to unreachable\
    \ nets would be sent to the default\ngateway under Unix 4.2 forwarding strategy.\n\
    3. TESTING\nA few interesting cases that occurred during testing are briefly described.\n\
    The   use   of  sequence  numbers  was  interpreted  differently  by  different\n\
    implementers. Consequently some implementations  rejected  messages  as  having\n\
    incorrect  sequence numbers, resulting in the peer gateway being declared down.\n\
    The main problem was that the specification was solely in narrative form  which\n\
    is  prone  to  inconsistencies, ambiguities and incompleteness. The more formal\n\
    specification of [Mills 84a] has eliminated these ambiguities.\nWhen testing \
    \ the  response  to  packets  addressed  to  a  neighbor  gateway's\ninterface\
    \  that  was  not  on  the  shared net a loop resulted as both gateways\nrepeatedly\
    \ exchanged  error  messages  indicating  an  invalid  interface.  The\nproblem\
    \  was that both gateways were sending Error responses after checking the\naddresses\
    \ but before the EGP message type was checked.  This was  rectified  by\nnot \
    \ sending  an  Error response unless it was certain that the message was not\n\
    itself an Error response.\nOn one occasion a core gateway had some  form  of \
    \ data  error  in  the  Update\nmessages  which  caused  them to be rejected even\
    \ though reachability was being\nsatisfactorily conducted. This resulted in all\
    \ routes being  timed  out.    The\nsolution  was  to  count  the  number of successive\
    \ Polls that do not result in\nvalid Updates being received and if this number\
    \ reaches  3  to  Cease  EGP  and\nattempt to acquire an alternative gateway.\n\
    Another  interesting idiosyncrasy, reported by Mike Karels at Berkeley, results\n\
    from having multiple gateways between MILNET and ARPANET. Each ARPANET host has\n\
    an assigned gateway to use for access to MILNET. In cases where the EGP gateway\n\
    is a host as well as  a  gateway,  the  EGP  Update  messages  may  indicate \
    \ a\ndifferent  MILNET/ARPANET  gateway from the assigned one. When the host/gateway\n\
    originates a packet that is routed  via  the  EGP  reported  gateway,  it  will\n\
    receive  a  redirect to its assigned gateway.  Thus the MILNET gateway can keep\n\
    4. FUTURE ENHANCEMENTS\n4.1 Multiple Autonomous Systems\nThe  present  method\
    \  of  acquiring  a  maximum  number of EGP neighbors from a\ntrusted list implies\
    \ that all the neighbors are in the same AS.  The  intention\nis  that  they all\
    \ be members of the core AS. When updating the routing tables,\nUpdates are treated\
    \ independently with no distinction made as  to  whether  the\nadvised  routes\
    \  are  internal  or  external  to  the peer's AS.  Also, routing\nmetrics are\
    \ compared without reference to the AS of the source.\nIf EGP is to be  conducted\
    \  with  additional  AS's  beside  the  core  AS,  all\nneighbors  on  the  list\
    \  would  need  to  be  acquired in order to ensure that\ngateways from both AS's\
    \ were always acquired. This results  in  an  unnecessary\nexcess  of  EGP  traffic\
    \ if redundant neighbors are acquired for reliability. A\nmore desirable approach\
    \ would be to have separate lists of trusted EGP gateways\nand the maximum number\
    \ to be acquire, for each AS. Routing entries  would  need\nto  have  the  source\
    \ AS added so that preference could be given to information\nreceived from the\
    \ owning AS (see Section 5.1.2)\n4.2 Interface Monitoring\nAt present, interface\
    \ status is only checked immediately prior to  the  sending\nof  an  Update  in\
    \ response to a Poll.  The interface status could be monitored\nmore regularly\
    \ and an unsolicited Update sent when a change is  detected.  This\nis  one  area\
    \ where the slow response of EGP polling could be improved. This is\nof particular\
    \ interest to networks that may  be  connected  by  dial-in  lines.\nWhen such\
    \ a network dials in, its associated interface will be marked as up but\nit  will\
    \ not be able to receive packets until the change has been propagated by\nEGP.\
    \ This is one case where the unsolicited  Update  message  would  help,  but\n\
    there  is still the delay for other non-core gateways to poll core EGP gateways\n\
    for the new routing information.\nThis  was  one  case  where  it  was  initially\
    \  thought  that  a  kernel   EGP\nimplementation  might  help.  But  the kernel\
    \ does not presently pass interface\nstatus changes by interrupts so a new facility\
    \ would need to  be  incorporated.\nIf  this was done it may be just as easy to\
    \ provide a user level signal when an\ninterface status changes.\n4.3 Network\
    \ Level Status Information\nAt present, network level status reports, such as\
    \ IMP  Destination  Unreachable\n4.4 Interior Gateway Protocol Interface\nAt \
    \ present  any  routing  information that is interior to the AS is static and\n\
    read from the initialization file. The internal route management functions have\n\
    been written so that it should be reasonably  easy  to  interface  an  IGP  for\n\
    dynamic  interior  route  updates. This is facilitated by the separation of the\n\
    exterior and interior routing tables.\nThe outgoing EGP Updates will be correctly\
    \ prepared from the  interior  routing\ntable by rt_NRnets() whether or not static\
    \ or dynamic interior routing is done.\nFunctions  are  also  provided  for  looking\
    \  up, adding, changing and deleting\ninternal routes, i.e. rt_int_lookup(), rt_add(),\
    \  rt_change()  and  rt_delete()\nrespectively.\nThe  interaction  of an IGP with\
    \ the current data structures basically involves\n5. TOPOLOGY ISSUES\n5.1 Topology\
    \ Restrictions and Routing Loops\n5.1.1 Background\nEGP  is  not  a  routing \
    \ algorithm.  it  merely  enables exterior neighbors to\nexchange routing information\
    \ which is likely to  to  be  needed  by  a  routing\nalgorithm.  It does not\
    \ pass sufficient information to prevent routing loops if\ncycles exist in the\
    \ topology [Rosen 82].\nRouting loops can occur when two gateways think there\
    \ are alternate  routes  to\nreach a third gateway via each other. When the third\
    \ gateway goes down they end\nup  pointing  to  each  other  forming a routing\
    \ loop.  Within the present core\nsystem, loops are broken by counting to \"infinity\"\
    \ (the  internet  diameter  in\ngateway  hops).  This  (usually)  works  satisfactorily\
    \  because GGP propagates\nchanges fairly quickly as routing updates are sent\
    \ as soon  as  changes  occur.\nAlso  the  diameter of the internet is quite small\
    \ (5) and a universal distance\nmetric, hop count, is used. But this will be changed\
    \ in the future.\nWith EGP, changes are propagated  slowly.  Although  a  single\
    \  unsolicited  NR\nmessage  can  be  sent,  it  won't  necessarily  be passed\
    \ straight on to other\ngateways who must hear about it  indirectly.  Also,  the\
    \  distance  metrics  of\ndifferent  AS's  are  quite  independent  and  hence\
    \  can't be used to count to\ninfinity.\nThe initial proposal was to prevent routing\
    \ loops by restricting  the  topology\nof  AS's to a tree structure so that there\
    \ are no multiple routes via alternate\nAS's.  Multiple routes within the same\
    \ AS are allowed as  it  is  the  interior\nrouting strategies responsibility\
    \ to control loops.\n[Mills  84b]  has  noted that even with the tree topology\
    \ restriction, \"we must\nassume that transient loops may form within the core\
    \ system from time  to  time\nand  that  this  information  may escape to other\
    \ systems; however, it would be\nexpected that these loops would not persist for\
    \ very long and would  be  broken\nin  a  short  time  within the core system\
    \ itself. Thus a loop between non-core\nsystems can persist until the first round\
    \ of Update messages sent to the  other\nsystems  after  all traces of the loop\
    \ have been purged from the core system or\nuntil the reachability information\
    \ ages out of  the  tables,  whichever  occurs\nfirst\".\nWith the initial simple\
    \ stub EGP systems the tree topology restriction could be\nsatisfied. But for\
    \ the long term this does not provide sufficient robustness.\n[Mills  83]  proposed\
    \ a procedure by which the AS's can dynamically reconfigure\nthemselves such that\
    \ the topology restriction is always met, without  the  need\nfor  a  single \
    \ \"core\" AS.  One AS would own a shared net and its neighbor AS's\nform  itself\
    \  into  an appropriate tree structured routing topology. By routing\ntopology\
    \ I mean the topology as advised in routing updates. There may  well  be\nother\
    \  physical  connections  but if they are not advised they will not be used\n\
    for routing. Each AS can conduct EGP with at most one AS that owns one  of  its\n\
    shared nets. Any AS that is not conducting EGP over any net owned by another AS\n\
    is  the  root of a subtree. It may conduct EGP with just one other AS that owns\n\
    one of its shared nets. This \"attachment\" combines  the  two  subtrees  into\
    \  a\nsingle  subtree  such  that  the  overall  topology  is still a tree.  Topology\n\
    violations can be determined because two different AS's will report  that  they\n\
    can reach the same net.\nWith  such  a  dynamic  tree,  there may be preferred\
    \ and backup links. In such\ncases it is necessary to monitor the failed link\
    \ so that routing can be changed\nback to the preferred link when service is restored.\n\
    Another aspect to consider is the possibility of detecting  routing  loops  and\n\
    then  breaking  them. Expiration of the packet time-to-live (TTL) could be used\n\
    to do this. If such a loop is suspected a diagnostic packet, such as ICMP echo,\n\
    could be sent over the suspect route to confirm whether it is a loop. If a loop\n\
    is detected a special  routing  packet  could  be  sent  over  the  route  that\n\
    instructs  each gateway to delete the route after forwarding the packet on. The\n\
    acceptance of new routing information may need to be delayed for  a  hold  down\n\
    period.  This approach would require sensible selection of the initial TTL. But\n\
    this is not done by many hosts.\n5.1.2 Current Policy\nConsidering the general\
    \ trend to  increased  network  interconnection  and  the\navailability of alternative\
    \ long-haul networks such as ARPANET, WBNET (wideband\nsatellite  network),  and\
    \ public data networks the tree topology restriction is\ngenerally unacceptable.\
    \ A less restrictive topology is  currently  recommended.\nThe following is taken\
    \ from [Mills 84b].\nEGP topological model:\n   - An  autonomous  system  consists\
    \  of  a  set of gateways connected by\n     networks.  Each gateway in the system\
    \ must be  reachable  from  every\n     other  gateway in its system by paths\
    \ including only gateways in that\n     system.\n   - A gateway in a system may\
    \ run EGP with a gateway in any other  system\n     as  long  as the path over\
    \ which EGP itself is run does not include a\n     gateway in a third system.\n\
    \   - The \"core system\" is distinguished from the others by the  fact  that\n\
    \     only  it  is  allowed  to  distribute  reachability information about\n\
    \     systems other than itself.\n   - There  are  no  topological  or  connectivity\
    \ restrictions other than\n     those implied above.\nA gateway  will  use  information\
    \  derived  from  its  configuration  (directly\nconnected  nets),  the  IGP of\
    \ its system, called S in the following, (interior\nnets) and EGP (interior and\
    \ exterior nets of neighboring systems) to  construct\nits routing tables. If\
    \ conflicts with respect to a particular net N occur, they\nwill be resolved as\
    \ follows:\n   - If  N  is  directly connected to the gateway, all IGP and EGP\
    \ reports\n     about N are disregarded.\n   - If N is reported by IGP as  interior\
    \  to  S  and  by  EGP  as  either\n     interior  or  exterior  to  another \
    \ system,  the  IGP  report  takes\n     precedence.\n   - If N is reported by\
    \ EGP as interior to one  system  and  exterior  to\n     another, the interior\
    \ report takes precedence.\n   - If  N  is  reported  as  interior by two or more\
    \ gateways of the same\n     system using EGP, the reports specifying the smallest\
    \ hop count  take\n     precedence.\n   - In all other cases the latest received\
    \ report takes precedence.\nOld information will be aged from the tables.\nThe\
    \   interim   model  provides  an  acceptable  degree  of  self-organization.\n\
    Transient routing loops can occur between systems,  but  these  are  eventually\n\
    broken by old reachability information being aged out of the tables.  Given the\n\
    fact  that  transient  loops  can occur due to temporary core-system loops, the\n\
    additional loops that might occur in the case of local nets homed  to  multiple\n\
    systems does not seem to increase the risk significantly.\n5.2 Present ISI Configuration\n\
    A  simplified  version of the ISI network configuration is shown in Figure 5-1.\n\
    ISI-Hobgoblin can provide a backup gateway function  to  the  core  ISI-Gateway\n\
    between  ARPANET and ISI-NET. ISI-Hobgoblin is a VAX 11/750 which runs Berkeley\n\
    Unix  4.2.  The  EGP  implementation  described  in  this  report  is  run   on\n\
    ISI-Hobgoblin.\nISI-Troll  is part of a split gateway to the University of California\
    \ at Irvine\nnetwork (UCI-ICS). The complete logical gateway consists of ISI-Troll,\
    \ the 9600\nbaud link and UCI-750A [Rose 84]. ISI-Troll runs Berkeley Unix 4.1a\
    \  and  hence\ncannot  run  the  EGP  program.  It  is  therefore  a non-routing\
    \ gateway.  The\nexistence of UCI-ICS net must be advised to the core AS by ISI-Hobgoblin.\
    \  This\ncan be done by including an appropriate entry in the EGPINITFILE.\n \
    \         -------------------------------------------------\n         /      \
    \                                           \\\n        /                    \
    \  ARPANET                      \\\n        \\                        10     \
    \                    /\n         \\                                          \
    \       /\n          -------------------------------------------------\n     \
    \        |                    |                    |\n             |         \
    \           |                    |\n             |                    |      \
    \              |\n      +-------------+      +-------------+      +---------------+\n\
    \      | ISI-PNG11   |      |             |      |               |\n      | Arpanet\
    \     |      | ISI-GATEWAY |      | ISI-HOBGOBLIN |\n      | Address     |   \
    \   |             |      |   Vax 11/750  |\n      | logical     |      |  Core\
    \ EGP   |      |   Unix 4.2    |\n      | multiplexer |      |             | \
    \     |               |\n      +-------------+      +-------------+      +---------------+\n\
    \             |                    |                    |\n             |    \
    \                |                    |\n             |                    | \
    \                   |\n      ---------------          ----------------------------\n\
    \     /               \\        /                            \\\n    / 3 Mb/s\
    \ Ethernet \\      /           ISI-NET            \\\n    \\     net 10      /\
    \      \\            128.9             /\n     \\               /        \\  \
    \                          /\n      ---------------          ----------------------------\n\
    \                                      |\n                                   \
    \   |\n                                      |\n                             \
    \  +--------------+\n                               |  ISI-TROLL   |\n       \
    \                        |  Vax 11/750  |\n                               |  Unix\
    \ 4.1a   |\n                               |  Non-routing |\n                \
    \               |      |       |\n                               |      | 9600\
    \  |   ISI-TROLL, UCI-750A\n                               |      | baud  |  \
    \ and the link form a\n                               |      | link  |   single\
    \ logical gateway\n                               |      |       |\n         \
    \                      |  UCI-750A    |\n                               |  Vax\
    \ 11/750  |\n                               |  Unix 4.2    |\n               \
    \                +--------------+\n                                      |\n \
    \                                     |\n                                    \
    \  |\n                            ----------------------\n                   \
    \        /                      \\\n                          /        UCI-ICS\
    \         \\\n                          \\        192.5.19        /\n        \
    \                   \\                      /\n                            ----------------------\n\
    EGP can either be conducted with ISI-Gateway across ARPANET or ISI-NET.\n5.2.1\
    \ EGP Across ARPANET\nISI-Hobgoblin  will  advise  ISI-Gateway  across  ARPANET,\
    \  and  hence the core\nsystem, that it can reach ISI-NET and UCI-ICS.\nPackets\
    \ from AS's exterior to ISI and destined for UCI-ICS will be  routed  via\nISI-Gateway,\
    \  ISI-Hobgoblin  and  ISI-Troll.  The extra hop via ISI-Gateway (or\nother core\
    \ EGP gateway) is because the core gateways do not currently  pass  on\nindirect-neighbor\
    \   exterior   gateway   addresses   in   their   IGP  messages\n(Gateway-to-Gateway\
    \ Protocol).  Packets originating from UCI-ICS  destined  for\nexterior  AS's\
    \ will be routed via ISI-Troll and ISI-Gateway.  Thus the incoming\nand out going\
    \ packet routes are different.\nPackets originating from ISI-Hobgoblin as a host\
    \ and destined for exterior AS's\nwill be routed via the appropriate gateway on\
    \ ARPANET.\nUCI-ICS can only communicate with exterior AS's if ISI-Troll, ISI-Hobgoblin\
    \ and\nISI-Gateway are all up. The dependence on ISI-Gateway could  be  eliminated\
    \  if\nISI-Troll  routed  packets via ISI-Hobgoblin rather than ISI-Gateway. \
    \ However,\nas ISI-Hobgoblin is primarily a host and not a gateway it  is  preferable\
    \  that\nISI-Gateway route packets when possible.\nISI-Hobgoblin  can  provide\
    \ a back-up gateway function to ISI-Gateway as it can\nautomatically switch to\
    \ an alternative core EGP peer if ISI-Gateway goes  down.\nEven  though  ISI-Hobgoblin\
    \  normally advises the core system that it can reach\nISI-NET the core uses its\
    \ own internal route  via  ISI-Gateway  in  preference.\nFor hosts on ISI-NET\
    \ to correctly route outgoing packets they need their static\ngateway  entries\
    \  changed  from  ISI-Gateway to ISI-Hobgoblin.  At present this\nwould have to\
    \ be done manually. This would only be appropriate  if  ISI-Gateway\nwas going\
    \ to be down for an extended period.\n5.2.2 EGP Across ISI-NET\nISI-Hobgoblin\
    \   will  advise  ISI-Gateway  across  ISI-NET  that  its  indirect\nneighbor,\
    \ ISI-Troll, can reach UCI-ICS net.\nAll exterior packet routing  for  UCI-ICS\
    \  will  be  via  ISI-Gateway  in  both\ndirections   with   no  hops  via  ISI-Hobgoblin.\
    \    Packets  originating  from\nISI-Hobgoblin as a host and destined for  exterior\
    \  AS's  will  be  routed  via\nISI-Gateway, rather than the ARPANET interface,\
    \ in both directions, thus taking\nan additional hop.\nUCI-ICS  can  only  communicate\
    \ with exterior AS's if ISI-Troll and ISI-Gateway\nneighbors.  If  ISI-Gateway\
    \  then  goes  down,  it will need to be readvised by\nISI-Hobgoblin of the UCI-ICS\
    \ route, when it comes up.\nConducting EGP over ISI-NET rather than ARPANET should\
    \  provide  more  reliable\nservice  for  UCI-ICS  for  the  following reasons:\
    \ ISI-Gateway is specifically\ndesigned as a gateway, it is expected to be up\
    \ more than ISI-Hobgoblin,  it  is\ndesirable  to  eliminate  extra  routing \
    \ hops where possible and, the exterior\nrouting  information  will  persist \
    \ after  ISI-hobgoblin  goes   down.      If\nISI-Hobgoblin  is to be used in\
    \ its back-up mode, EGP could be restarted across\nARPANET after the new gateway\
    \ routes  are  manually  installed  in  the  hosts.\nTherefore, EGP across ISI-NET\
    \ was selected as the preferred mode of operation.\n5.2.3 Potential Routing Loop\n\
    Because  both  ISI-Gateway and ISI-Hobgoblin provide routes between ARPANET and\n\
    ISI-NET there is a potential routing loop. This topology in fact  violates  the\n\
    original  tree  structure  restriction. Provided ISI-Hobgoblin does not conduct\n\
    EGP simultaneously with ISI-Gateway over ISI-NET and ARPANET, the gateways will\n\
    only ever know about the alternative route from the shared EGP network and  not\n\
    from  the  other  network.  Thus  a loop cannot occur.  For instance, if EGP is\n\
    conducted over ISI-NET, both ISI-Gateway and ISI-Hobgoblin will know about  the\n\
    alternative  routes  via  each other to ARPANET from ISI-NET, but they will not\n\
    know about the gateway addresses on ARPANET to be able to access  ISI-NET  from\n\
    ARPANET.  Thus  they have insufficient routing data to be able to route packets\n\
    in a loop between themselves.\n5.3 Possible Future Configuration\n5.3.1 Gateway\
    \ to UCI-ICS\nAn improvement in the reliability and performance of  the  service\
    \  offered  to\nUCI-ICS  can  be  achieved  by  moving  the UCI-ICS interface\
    \ from ISI-Troll to\nISI-Hobgoblin. Reliability  will  improve  because  the \
    \ connection  will  only\nrequire  ISI-Hobgoblin  and its ARPANET interface to\
    \ be up and performance will\nimprove because the extra gateway hop will be eliminated.\n\
    This will also allow EGP to be conducted across ARPANET giving  access  to  the\n\
    alternative  core gateways running EGP. This will increase the chances of being\n\
    able to reliably acquire an EGP neighbor at all times. It will  also  eliminate\n\
    the  extra hop via ISI-Gateway for packets originating from ISI-Hobgoblin, as\
    \ a\nhost, and destined for exterior networks.\n5.3.2 Dynamic Switch to Backup\
    \ Gateway\nIt  was  noted in Section 5.2.1 that ISI-Hobgoblin can provide a backup\
    \ gateway\nfunction to ISI-Gateway between ARPANET and ISI-NET. Such backup gateways\
    \ could\nbecome a common approach to providing increased reliability.\nAt present\
    \ the change over to the backup gateway requires the new gateway route\nto be\
    \ manually entered for hosts on ISI-NET. This section describes a  possible\n\
    method  for achieving this changeover dynamically when the primary gateway goes\n\
    down.\nThe aim is to be able to detect when the primary gateway is down and  have\
    \  all\nhosts  on  the local network change to the backup gateway with a minimum\
    \ amount\nof additional network traffic. The hosts should  revert  back  to  the\
    \  primary\ngateway when it comes up again.\nThe  proposed  method  is  for  only\
    \  the backup gateway to monitor the primary\ngateway status and for it to notify\
    \ all hosts of the new gateway  address  when\nthere is a change.\n5.3.2.1 Usual\
    \ Operation\nThe backup gateway runs a process which sends reachability-probe\
    \ messages, such\nas  ICMP echoes, to the primary gateway every 30 seconds and\
    \ uses the responses\nto determine reachability as for EGP.  If  the  primary\
    \  gateway  goes  down  a\n\"gateway-address  message\"  indicating  the backup\
    \ gateway address is broadcast\n(or preferably multicast) to all hosts.  When\
    \  the  primary  gateway  comes  up\nanother  gateway  message  indicating the\
    \ primary gateway address is broadcast.\nThese broadcasts should be done four\
    \ times at 30 second intervals to avoid  the\nneed for acknowledgements and knowledge\
    \ of host addresses.\nEach  host  would run a process that listens for gateway-address\
    \ messages. If a\ndifferent gateway is advised it changes the default gateway\
    \ entry  to  the  new\naddress.\n5.3.2.2 Host Initialization\nWhen  a  host comes\
    \ up the primary gateway could be down so it needs to be able\nto determine that\
    \ it should use the backup gateway. The  host  could  read  the\naddress  of \
    \ the primary and backup gateways from a static initialization file.\nIt would\
    \ then set its default  gateway  as  the  primary  gateway  and  send  a\n\"gateway-request\
    \  message\" to the backup gateway requesting the current gateway\naddress. The\
    \ backup gateway would respond with a gateway-address message.    If\nno response\
    \ is received the gateway-request should be retransmitted three times\nat  30\
    \  second intervals.  If no response is received the backup gateway can be\nassumed\
    \ down and the primary gateway retained as the default.\ndefined  to  which  only\
    \  gateways  would  respond.  The backup gateway-address\nmessage needs to indicate\
    \ that it is the backup gateway so that future requests\nneed not be broadcast.\
    \ Again, three retransmissions should be used.    But  the\nprimary gateway also\
    \ needs to broadcast its address whenever it comes up.\n5.3.2.3 When Both the\
    \ Primary and Backup are Down\nIf the primary gateway is down and the backup knows\
    \ it is going down, it should\nbroadcast  gateway-address  messages indicating\
    \ the primary gateway in case the\nprimary gateway comes up first.\nBut the backup\
    \ could go down without warning and the primary come up before it.\nIf the primary\
    \ gateway broadcasts a gateway-address message when  it  comes  up\nthere  is\
    \  no problem. Otherwise, while hosts are using the backup gateway they\nshould\
    \ send a gateway-request message every  10  minutes.  If  no  response  is\nreceived\
    \ it should be retransmitted 3 times at 30 second intervals and if still\nno response\
    \ the backup assumed down and the primary gateway reverted to.\nThus the only\
    \ time hosts need to send messages periodically is when the primary\ngateway \
    \ does  not  send  gateway-address  messages on coming up and the backup\ngateway\
    \ is being used. In some cases, such as at ISI, the  primary  gateway  is\nmanaged\
    \  by  a  different  organization  and  experimental  features  cannot be\nconveniently\
    \ added.\n5.3.2.4 Unix 4.2 BSD\nOne difficulty with the above is that there is\
    \ no standard method of specifying\ninternet broadcast or multicast addresses.\
    \ Multicast addressing  is  preferable\nas  only those participating need process\
    \ the message (interfaces with hardware\nmulticast detection are available). In\
    \ the case of Unix  4.2  BSD  an  internet\naddress  with zero local address is\
    \ assumed for the internet broadcast address.\nHowever, the general Internet Addressing\
    \ policy is to use an all ones value  to\nindicate a broadcast function.\nOn \
    \ Unix  4.2  BSD systems, both the gateway and host processes could be run at\n\
    the user level so that kernel modifications are not required.\nA User Datagram\
    \ Protocol (UDP) socket could be reserved for host-backup-gateway\ncommunication.\n\
    6. ACKNOWLEDGEMENT\nI acknowledge with thanks the many people who have helped\
    \ me with this project,\nbut  in  particular,  Dave  Mills,  who  suggested  the\
    \ project, Jon Postel for\n7. REFERENCES\n[Berkeley 83]   \"Unix  Programmer's\
    \  Manual\",  Vol.  1,  4.2  Berkeley Software\n                Distribution,\
    \ University of California, Berkeley.\n[Kirton 84]     Kirton, P.A., \"EGP Gateway\
    \ Under Berkeley Unix 4.2\", University\n                of  Southern  California,\
    \   Information   Sciences   Institute,\n                Research Report ISI/RR-84-145,\
    \ to be published.\n[Mills 83]      Mills,  D.L.,  \"EGP Models and Self-Organizing\
    \ Systems\" Message\n                to EGP-PEOPLE@BBN-UNIX, Nov. 1983.\n[Mills\
    \ 84a]     Mills, D.L., \"Exterior Gateway Protocol Formal  Specification\",\n\
    \                Network Information Center RFC 904, April 1984.\n[Mills 84b]\
    \     Mills,  D.L.,  \"Revised  EGP  Model  Clarified  and Discussed\",\n    \
    \            Message to EGP-PEOPLE@BBN-UNIX, May 1984.\n[Postel 84]     Postel,\
    \ J., \"Exterior Gateway Protocol Implementation Schedule\"\n                Network\
    \ Information Center RFC 890, Feb. 1984.\n[Rose 84]       Rose, M.T., \"Low-Tech\
    \ Connection into  the  ARPA-Internet:  The\n                Raw-Packet   Split\
    \  Gateway\",  Department  of  Information  and\n                Computer Science,\
    \ University of California,  Irvine,  Technical\n                Report 216, Feb.\
    \ 1984.\n[Rosen 82]      Rosen,  E.C.,  \"Exterior Gateway Protocol\", Network\
    \ Information\n                Center RFC 827, Oct. 1982.\n[Seamonson & Rosen\
    \ 84]\n                Seamonson,  L.J.  and  Rosen,  E.C.,  \"Stub  Exterior\
    \   Gateway\n                Protocol\", Network Information Center RFC 888, Jan.\
    \ 84.\n"
