- title: __initial_text__
  contents:
  - "                      The Point-to-Point Protocol\n   Transmission of Multi-Protocol\
    \ Datagrams Over Point-to-Point Links\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community.\n   Please refer to the current edition of the \"\
    IAB Official Protocol\n   Standards\" for the standardization state and status\
    \ of this protocol.\n   This proposal is the product of the Point-to-Point Protocol\
    \ Working\n   Group of the Internet Engineering Task Force (IETF). Comments on\
    \ this\n   memo should be submitted to the IETF Point-to-Point Protocol Working\n\
    \   Group chair.\n   Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a method for transmitting\n\
    \   datagrams over serial point-to-point links.  PPP is composed of three\n  \
    \ parts:\n      1. A method for encapsulating datagrams over serial links.\n \
    \     2. An extensible Link Control Protocol (LCP).\n      3. A family of Network\
    \ Control Protocols (NCP) for establishing\n         and configuring different\
    \ network-layer protocols.\n   This document defines the encapsulation scheme,\
    \ the basic LCP, and an\n   NCP for establishing and configuring the Internet\
    \ Protocol (IP)\n   (called the IP Control Protocol, IPCP).\n   The options and\
    \ facilities used by the LCP and the IPCP are defined\n   in separate documents.\
    \  Control protocols for configuring and\n   utilizing other network-layer protocols\
    \ besides IP (e.g., DECNET,\n   OSI) are expected to be developed as needed.\n\
    \                           Table of Contents\n     1.     Introduction ..........................................\
    \    1\n        1.1       Motivation ......................................  \
    \  1\n        1.2       Overview of PPP .................................    1\n\
    \        1.3       Organization of the document ....................    2\n  \
    \   2.     Physical Layer Requirements ...........................    3\n    \
    \ 3.     The Data Link Layer ...................................    4\n      \
    \  3.1       Frame Format ....................................    5\n     4. \
    \    The PPP Link Control Protocol (LCP) ...................    9\n        4.1\
    \       The LCP Automaton ...............................   11\n           4.1.1\
    \  Overview ........................................   11\n           4.1.2  State\
    \ Diagram ...................................   11\n           4.1.3  State Transition\
    \ Table ..........................   13\n           4.1.4  Events ..........................................\
    \   13\n           4.1.5  Actions .........................................  \
    \ 16\n           4.1.6  States ..........................................   17\n\
    \        4.2       Loop Avoidance ..................................   20\n  \
    \      4.3       Timers and Counters .............................   20\n    \
    \    4.4       Packet Format ...................................   21\n      \
    \     4.4.1  Configure-Request ...............................   23\n        \
    \   4.4.2  Configure-Ack ...................................   24\n          \
    \ 4.4.3  Configure-Nak ...................................   25\n           4.4.4\
    \  Configure-Reject ................................   27\n           4.4.5  Terminate-Request\
    \ and Terminate-Ack .............   29\n           4.4.6  Code-Reject .....................................\
    \   31\n           4.4.7  Protocol-Reject .................................  \
    \ 32\n           4.4.8  Echo-Request and Echo-Reply .....................   34\n\
    \           4.4.9  Discard-Request .................................   36\n  \
    \      4.5       Configuration Options ...........................   38\n    \
    \       4.5.1  Format ..........................................   39\n     5.\
    \     A PPP Network Control Protocol (NCP) for IP ...........   40\n        5.1\
    \       Sending IP Datagrams ............................   40\n     APPENDICES\
    \ ...................................................   42\n     A.     Asynchronous\
    \ HDLC .....................................   42\n     B.     Fast Frame Check\
    \ Sequence (FCS) Implementation ........   44\n        B.1       FCS Computation\
    \ Method ..........................   44\n        B.2       Fast FCS table generator\
    \ ........................   46\n     REFERENCES ...................................................\
    \   47\n     SECURITY CONSIDERATIONS ......................................  \
    \ 48\n     CHAIRMAN'S ADDRESS ...........................................   48\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   In the last few years, the Internet has seen explosive growth\
    \ in the\n   number of hosts supporting TCP/IP.  The vast majority of these hosts\n\
    \   are connected to Local Area Networks (LANs) of various types,\n   Ethernet\
    \ being the most common.  Most of the other hosts are\n   connected through Wide\
    \ Area Networks (WANs) such as X.25 style Public\n   Data Networks (PDNs).  Relatively\
    \ few of these hosts are connected\n   with simple point-to-point (i.e., serial)\
    \ links.  Yet, point-to-point\n   links are among the oldest methods of data communications\
    \ and almost\n   every host supports point-to-point connections.  For example,\n\
    \   asynchronous RS-232-C [1] interfaces are essentially ubiquitous.\n   One reason\
    \ for the small number of point-to-point IP links is the\n   lack of a standard\
    \ encapsulation protocol.  There are plenty of non-\n   standard (and at least\
    \ one defacto standard) encapsulation protocols\n   available, but there is not\
    \ one which has been agreed upon as an\n   Internet Standard.  By contrast, standard\
    \ encapsulation schemes do\n   exist for the transmission of datagrams over most\
    \ popular LANs.\n   One purpose of this memo is to remedy this problem. But even\
    \ more\n   importantly, the Point-to-Point Protocol proposes more than just an\n\
    \   encapsulation scheme.  Point-to-Point links tend to exacerbate many\n   problems\
    \ with the current family of network protocols.  For instance,\n   assignment\
    \ and management of IP addresses, which is a problem even in\n   LAN environments,\
    \ is especially difficult over circuit switched\n   point-to-point circuits (e.g.,\
    \ dialups).\n   Some additional issues addressed by this specification of PPP\
    \ include\n   asynchronous (start/stop) and bit-oriented synchronous encapsulation,\n\
    \   network protocol multiplexing, link configuration, link quality\n   testing,\
    \ error detection, and option negotiation for such\n   capabilities as network-layer\
    \ address negotiation and data\n   compression negotiation.\n   PPP addresses\
    \ these issues by providing an extensible Link Control\n   Protocol (LCP) and\
    \ a family of Network Control Protocols (NCP) to\n   negotiate optional configuration\
    \ parameters and facilities.\n"
- title: 1.2.  Overview of PPP
  contents:
  - "1.2.  Overview of PPP\n   PPP has three main components:\n      1. A method for\
    \ encapsulating datagrams over serial links.  PPP\n         uses HDLC as a basis\
    \ for encapsulating datagrams over point-\n         to-point links.  At this time,\
    \ PPP specifies the use of\n         asynchronous or synchronous duplex circuits,\
    \ either dedicated\n         or circuit switched.\n      2. An extensible Link\
    \ Control Protocol (LCP) to establish,\n         configure, and test the data-link\
    \ connection.\n      3. A family of Network Control Protocols (NCP) for establishing\n\
    \         and configuring different network-layer protocols.  PPP is\n       \
    \  designed to allow the simultaneous use of multiple network-\n         layer\
    \ protocols.\n   In order to establish communications over a point-to-point link,\
    \ the\n   originating PPP would first send LCP packets to configure and test\n\
    \   the data link.  After the link has been establish and optional\n   facilities\
    \ have been negotiated as needed by the LCP, the originating\n   PPP would send\
    \ NCP packets to choose and configure one or more\n   network-layer protocols.\
    \  Once each of the chosen network-layer\n   protocols has been configured, datagrams\
    \ from each network-layer\n   protocol can be sent over the link.\n   The link\
    \ will remain configured for communications until explicit LCP\n   or NCP packets\
    \ close the link down, or until some external event\n   occurs (e.g., inactivity\
    \ timer expires or user intervention).\n"
- title: 1.3.  Organization of the document
  contents:
  - "1.3.  Organization of the document\n   This memo is divided into several sections.\
    \  Section 2 discusses the\n   physical-layer requirements of PPP.  Section 3\
    \ describes the Data\n   Link Layer including the PPP frame format and data link\
    \ encapsulation\n   scheme.  Section 4 specifies the LCP including the connection\n\
    \   establishment and option negotiation procedures.  Section 5 specifies\n  \
    \ the IP Control Protocol (IPCP), which is the NCP for the Internet\n   Protocol,\
    \ and describes the encapsulation of IP datagrams within PPP\n   packets.  Appendix\
    \ A summarizes important features of asynchronous\n   HDLC, and Appendix B describes\
    \ an efficient table-lookup algorithm\n   for fast Frame Check Sequence (FCS)\
    \ computation.\n"
- title: 2.  Physical Layer Requirements
  contents:
  - "2.  Physical Layer Requirements\n   The Point-to-Point Protocol is capable of\
    \ operating across any\n   DTE/DCE interface (e.g., EIA RS-232-C, EIA RS-422,\
    \ EIA RS-423 and\n   CCITT V.35).  The only absolute requirement imposed by PPP\
    \ is the\n   provision of a duplex circuit, either dedicated or circuit switched,\n\
    \   which can operate in either an asynchronous (start/stop) or\n   synchronous\
    \ bit-serial mode, transparent to PPP Data Link Layer\n   frames.  PPP does not\
    \ impose any restrictions regarding transmission\n   rate, other than those imposed\
    \ by the particular DTE/DCE interface in\n   use.\n   PPP does not require the\
    \ use of modem control signals, such as\n   Request To Send (RTS), Clear To Send\
    \ (CTS), Data Carrier Detect\n   (DCD), and Data Terminal Ready (DTR).  However,\
    \ using such signals\n   when available can allow greater functionality and performance.\n"
- title: 3.  The Data Link Layer
  contents:
  - "3.  The Data Link Layer\n   The Point-to-Point Protocol uses the principles,\
    \ terminology, and\n   frame structure of the International Organization For\n\
    \   Standardization's (ISO) High-level Data Link Control (HDLC)\n   procedures\
    \ (ISO 3309-1979 [2]), as modified by ISO 3309:1984/PDAD1\n   \"Addendum 1: Start/stop\
    \ transmission\" [5].  ISO 3309-1979 specifies\n   the HDLC frame structure for\
    \ use in synchronous environments. ISO\n   3309:1984/PDAD1 specifies proposed\
    \ modifications to ISO 3309-1979 to\n   allow its use in asynchronous environments.\n\
    \   The PPP control procedures use the definitions and Control field\n   encodings\
    \ standardized in ISO 4335-1979 [3] and ISO 4335-\n   1979/Addendum 1-1979 [4].\
    \  The PPP frame structure is also consistent\n   with CCITT Recommendation X.25\
    \ LAPB [6], since that too is based on\n   HDLC.\n      Note: ISO 3309:1984/PDAD1\
    \ is a Proposed Draft standard.  At\n      present, it seems that ISO 3309:1984/PDAD1\
    \ is stable and likely to\n      become an International Standard.  Therefore,\
    \ we feel comfortable\n      about using it before it becomes an International\
    \ Standard.  The\n      progress of this proposal should be tracked and encouraged\
    \ by the\n      Internet community.\n   The purpose of this memo is not to document\
    \ what is already\n   standardized in ISO 3309. We assume that the reader is already\n\
    \   familiar with HDLC, or has access to a copy of [2] or [6]. Instead,\n   this\
    \ paper attempts to give a concise summary and point out specific\n   options\
    \ and features used by PPP. Since \"Addendum 1: Start/stop\n   transmission\"\
    , is not yet standardized and widely available, it is\n   summarized in Appendix\
    \ A.\n"
- title: 3.1.  Frame Format
  contents:
  - "3.1.  Frame Format\n   A summary of the standard PPP frame structure is shown\
    \ below. The\n   fields are transmitted from left to right.\n           +----------+----------+----------+----------+------------\n\
    \           |   Flag   | Address  | Control  | Protocol | Information\n      \
    \     | 01111110 | 11111111 | 00000011 | 16 bits  |      *\n           +----------+----------+----------+----------+------------\n\
    \                   ---+---------+----------+\n                      |   FCS \
    \  |   Flag   |\n                      | 16 bits | 01111110 |\n              \
    \     ---+---------+----------+\n   This figure does not include start/stop bits\
    \ (for asynchronous links)\n   or any bits or octets inserted for transparency.\
    \  When asynchronous\n   links are used, all octets are transmitted with one start\
    \ bit, eight\n   bits of data, and one stop bit.  There is no provision in either\
    \ PPP\n   or ISO 3309:1984/PDAD1 for seven bit asynchronous links.\n   To remain\
    \ consistent with standard Internet practice, and avoid\n   confusion for people\
    \ used to reading RFCs, all binary numbers in the\n   following descriptions are\
    \ in Most Significant Bit to Least\n   Significant Bit order, reading from left\
    \ to right, unless otherwise\n   indicated.  Note that this is contrary to standard\
    \ ISO and CCITT\n   practice which orders bits as transmitted (i.e., network bit\
    \ order).\n   Keep this in mind when comparing this document with the international\n\
    \   standards documents.\n   Flag Sequence\n      The Flag Sequence is a single\
    \ octet and indicates the beginning or\n      end of a frame.  The Flag Sequence\
    \ consists of the binary sequence\n      01111110 (hexadecimal 0x7e).\n   Address\
    \ Field\n      The Address field is a single octet and contains the binary\n \
    \     sequence 11111111 (hexadecimal 0xff), the All-Stations address.\n      PPP\
    \ does not assign individual station addresses.  The All-\n      Stations address\
    \ should always be recognized and received.  The\n      use of other address lengths\
    \ and values may be defined at a later\n      time, or by prior agreement.  Frames\
    \ with unrecognized Addresses\n      should be reported through the normal network\
    \ management facility.\n   Control Field\n      The Control field is a single\
    \ octet and contains the binary\n      sequence 00000011 (hexadecimal 0x03), the\
    \ Unnumbered Information\n      (UI) command with the P/F bit set to zero.  Frames\
    \ with other\n      Control field values should be silently discarded.\n   Protocol\
    \ Field\n      The Protocol field is two octets and its value identifies the\n\
    \      protocol encapsulated in the Information field of the frame.  The\n   \
    \   most up-to-date values of the Protocol field are specified in the\n      most\
    \ recent \"Assigned Numbers\" RFC [12]. Initial values are also\n      listed\
    \ below.\n      Protocol field values in the \"cxxx\" range identify datagrams\
    \ as\n      belonging to the Link Control Protocol (LCP) or associated\n     \
    \ protocols. Values in the \"8xxx\" range identify datagrams belonging\n     \
    \ to the family of Network Control Protocols (NCP).  Values in the\n      \"0xxx\"\
    \ range identify the network protocol of specific datagrams.\n      This Protocol\
    \ field is defined by PPP and is not a field defined\n      by HDLC.  However,\
    \ the Protocol field is consistent with the ISO\n      3309 extension mechanism\
    \ for Address fields. All Protocols MUST be\n      odd; the least significant\
    \ bit of the least significant octet MUST\n      equal \"1\".  Also, all Protocols\
    \ MUST be assigned such that the\n      least significant bit of the most significant\
    \ octet equals \"0\".\n      Frames received which don't comply with these rules\
    \ should be\n      considered as having an unrecognized Protocol, and should be\n\
    \      handled as specified by the LCP.  The Protocol field is\n      transmitted\
    \ and received most significant octet first.\n      The Protocol field is initially\
    \ assigned as follows:\n         Value (in hex)          Protocol\n         0001\
    \ to 001f            reserved (transparency inefficient)\n         0021      \
    \              Internet Protocol\n         0023                  * OSI Network\
    \ Layer\n         0025                  * Xerox NS IDP\n         0027        \
    \          * DECnet Phase IV\n         0029                  * Appletalk\n   \
    \      002b                  * Novell IPX\n         002d                  * Van\
    \ Jacobson Compressed TCP/IP 1\n         002f                  * Van Jacobson\
    \ Compressed TCP/IP 2\n         8021                    Internet Protocol Control\
    \ Protocol\n         8023                  * OSI Network Layer Control Protocol\n\
    \         8025                  * Xerox NS IDP Control Protocol\n         8027\
    \                  * DECnet Phase IV Control Protocol\n         8029         \
    \         * Appletalk Control Protocol\n         802b                  * Novell\
    \ IPX Control Protocol\n         802d                  * Reserved\n         802f\
    \                  * Reserved\n         c021                    Link Control Protocol\n\
    \         c023                  * User/Password Authentication Protocol\n    \
    \        * Reserved for future use; not described in this document.\n   Information\
    \ Field\n      The Information field is zero or more octets.  The Information\n\
    \      field contains the datagram for the protocol specified in the\n      Protocol\
    \ field.  The end of the Information field is found by\n      locating the closing\
    \ Flag Sequence and allowing two octets for the\n      Frame Check Sequence field.\
    \  The default maximum length of the\n      Information field is 1500 octets.\
    \  By prior agreement, consenting\n      PPP implementations may use other values\
    \ for the maximum\n      Information field length.\n      On transmission, the\
    \ Information field may be padded with an\n      arbitrary number of octets up\
    \ to the maximum length.  It is the\n      responsibility of each protocol to\
    \ disambiguate padding octets\n      from real information.\n   Frame Check Sequence\
    \ (FCS) Field\n      The Frame Check Sequence field is normally 16 bits (two octets).\n\
    \      By prior agreement, consenting PPP implementations may use a 32-\n    \
    \  bit (four-octet) FCS for improved error detection.\n      The FCS field is\
    \ calculated over all bits of the Address, Control,\n      Protocol and Information\
    \ fields not including any start and stop\n      bits (asynchronous) and any bits\
    \ (synchronous) or octets\n      (asynchronous) inserted for transparency.  This\
    \ does not include\n      the Flag Sequences or FCS field.  The FCS is transmitted\
    \ with the\n      coefficient of the highest term first.\n      For more information\
    \ on the specification of the FCS, see ISO 3309\n      or CCITT X.25.\n      \
    \   Note: A fast, table-driven implementation of the 16-bit FCS\n         algorithm\
    \ is shown in Appendix B.  This implementation is based\n         on [7], [8],\
    \ and [9].\n   Modifications to the Basic Frame Format\n      The Link Control\
    \ Protocol can negotiate modifications to the\n      standard PPP frame structure.\
    \  However, modified frames will\n      always be clearly distinguishable from\
    \ standard frames.\n"
- title: 4.  The PPP Link Control Protocol (LCP)
  contents:
  - "4.  The PPP Link Control Protocol (LCP)\n   The Link Control Protocol (LCP) provides\
    \ a method of establishing,\n   configuring, maintaining and terminating the point-to-point\n\
    \   connection.  LCP goes through four distinct phases:\n   Phase 1: Link Establishment\
    \ and Configuration Negotiation\n      Before any network-layer datagrams (e.g.,\
    \ IP) may be exchanged,\n      LCP must first open the connection through an exchange\
    \ of\n      Configure packets.  This exchange is complete, and the Open state\n\
    \      entered, once a Configure-Ack packet (described below) has been\n     \
    \ both sent and received.  Any non-LCP packets received before this\n      exchange\
    \ is complete are silently discarded.\n      It is important to note that LCP\
    \ handles configuration only of the\n      link; LCP does not handle configuration\
    \ of individual network-\n      layer protocols.  In particular, all Configuration\
    \ Parameters\n      which are independent of particular network-layer protocols\
    \ are\n      configured by LCP.  All Configuration Options are assumed to be at\n\
    \      default values unless altered by the configuration exchange.\n   Phase\
    \ 2: Link Quality Determination\n      LCP allows an optional Link Quality Determination\
    \ phase following\n      transition to the LCP Open state.  In this phase, the\
    \ link is\n      tested to determine if the link quality is sufficient to bring\
    \ up\n      network-layer protocols.  This phase is completely optional.  LCP\n\
    \      may delay transmission of network-layer protocol information until\n  \
    \    this phase is completed.\n      The procedure for Link Quality Determination\
    \ is unspecified and\n      may vary from implementation to implementation, or\
    \ because of\n      user-configured parameters, but only so long as the procedure\n\
    \      doesn't violate other aspects of LCP.  One suggested method is to\n   \
    \   use LCP Echo-Request and Echo-Reply packets.\n      What is important is that\
    \ this phase may persist for any length of\n      time.  Therefore, implementations\
    \ should avoid fixed timeouts when\n      waiting for their peers to advance to\
    \ phase 3.\n   Phase 3: Network-Layer Protocol Configuration Negotiation\n   \
    \   Once LCP has finished the Link Quality Determination phase,\n      network-layer\
    \ protocols may be separately configured by the\n      appropriate Network Control\
    \ Protocols (NCP), and may be brought up\n      and taken down at any time.  If\
    \ LCP closes the link, it informs\n      the network-layer protocols so that they\
    \ may take appropriate\n      action.\n   Phase 4: Link Termination\n      LCP\
    \ may terminate the link at any time.  This will usually be done\n      at the\
    \ request of a human user, but may happen because of a\n      physical event such\
    \ as the loss of carrier, or the expiration of\n      an idle-period timer.\n"
- title: 4.1.  The LCP Automaton
  contents:
  - '4.1.  The LCP Automaton

    '
- title: 4.1.1.  Overview
  contents:
  - "4.1.1.  Overview\n   LCP is specified by a number of packet formats and a finite-state\n\
    \   automaton.  This section presents an overview of the LCP automaton,\n   followed\
    \ by a representation of it as both a state diagram and a\n   state transition\
    \ table.\n   There are three classes of LCP packets:\n      1. Link Establishment\
    \ packets used to establish and configure a\n         link, (e.g., Configure-Request,\
    \ Configure-Ack, Configure-Nak\n         and Configure-Reject)\n      2. Link\
    \ Termination packets used to terminate a link, (e.g.,\n         Terminate-Request\
    \ and Terminate-Ack)\n      3. Link Maintenance packets used to manage and debug\
    \ a link,\n         (e.g., Code-Reject, Protocol-Reject, Echo-Request, Echo-Reply\n\
    \         and Discard-Request)\n   The finite-state automaton is defined by events,\
    \ state transitions\n   and actions.  Events include receipt of external commands\
    \ such as\n   Open and Close, expiration of the Restart timer, and receipt of\n\
    \   packets from a LCP peer.  Actions include the starting of the Restart\n  \
    \ timer and transmission of packets.\n"
- title: 4.1.2.  State Diagram
  contents:
  - "4.1.2.  State Diagram\n   The state diagram which follows describes the sequence\
    \ of events for\n   reaching agreement on Configuration Options (opening the PPP\n\
    \   connection) and for later closing of the connection.  The state\n   machine\
    \ is initially in the Closed state (1).  Once the Open state\n   (6) has been\
    \ reached, both ends of the link have met the requirement\n   of having both sent\
    \ and received a Configure-Ack packet.\n   In the state diagram, events are shown\
    \ above horizontal lines.\n   Actions are shown below horizontal lines.  Two types\
    \ of LCP packets -\n   Configure-Naks and Configure-Rejects - are not differentiated\
    \ in the\n   state diagram.  As will be described later, these packets do indeed\n\
    \   serve different, though similar, functions.  However, at the level of\n  \
    \ detail of this state diagram, they always cause the same transition.\n   Since\
    \ a more detailed specification of the LCP automaton is given in\n   a state transition\
    \ table in the following section, implementation\n   should be done by consulting\
    \ it rather than this state diagram.\n                                    +------------------------------+\n\
    \                                    |                              |\n      \
    \                              V                              |\n        +---2---+\
    \           PO +---1---+        RTA +---7---+      |\n        |       |<-------------|\
    \       |<-----------|       |      |\n        |Listen |              |Closed\
    \ |            |Closing|      |\n    RCR |       | C            |       | PLD\
    \        |       |      |\n   +----|       |----->+------>|       |<---Any   \
    \  |       |<--+  |\n   |scr +-------+      ^       +-------+    State   +-------+\
    \   |  |\n   |                   |     AO  |   ^                    | TO  |  |\n\
    \   |       +-----------+     --- |   |                    +---->+  |\n   |  \
    \     |                 SCR |   |                      str ^  |\n   |   C   |\
    \   RCN/TO            |   | C                        |  |\n   |   --- | +-------->+<--------+\
    \   | ---                      |  |\n   |       | | scr     |             |  \
    \                        |  |\n   |    +---3---+      V   TO  +---4---+      \
    \      +-------+   |  |\n   |    |       |<-----+<------|       |<-----------|\
    \       |   |  |\n   |    | Req-  |          scr | Ack-  |        scn | Good \
    \ |   |  |\n   |    | Sent  | RCA          | Rcvd  | RCR        | Req?  |   |\
    \  |\n   |    |       |------------->|       |----------->|       |   |  |\n \
    \  |    +-------+              +-------+            +-------+   |  |\n   |   \
    \    | ^                                         |        |  |\n   |   RCR | +<--------+\
    \                               |        |  |\n   |   --- | |         |     TO\
    \        RCN         --- |        |  |\n   |       | | ---     +---------+   +-----+\
    \       sca |        |  |\n   |       V | scn           scr |   | scr |      \
    \     V        |  |\n   |    +-------+              +---5---+   |        +---6---+\
    \ C |  |\n   +--->|       |------------->|       |<--+        |       |---+  |\n\
    \        | Good  | sca          | Ack-  |            | Open  | str  |\n      \
    \  | Req?  |          RCR | Sent  | RCA        |       |      |\n        |   \
    \    |<-------------|       |----------->|       |      |\n        +-------+ \
    \             +-------+            +-------+      |\n              ^         \
    \                              |   |        |\n              |               \
    \                    RCR |   | RTR    |\n              +---------------------------------------+\
    \   +--------+\n                                                  scr       sta\n\
    \   Events                                  Actions\n   RCR - Receive-Configure-Request\
    \         scr - Send Configure-Request\n   RCA - Receive-Configure-Ack       \
    \      sca - Send Configure-Ack\n   RCN - Receive-Configure-Nak or Reject   scn\
    \ - Send Configure-Nak\n   RTR - Receive-Terminate-Req                    or Reject\n\
    \   RTA - Receive-Terminate-Ack             str - Send Terminate-Req\n   AO  -\
    \ Active-Open                       sta - Sent Terminate-Ack\n   PO  - Passive-Open\n\
    \   C   - Close\n   TO  - Timeout\n   PLD - Physical-Layer-Down\n"
- title: 4.1.3.  State Transition Table
  contents:
  - "4.1.3.  State Transition Table\n   The complete state transition table follows.\
    \   States  are  indicated\n   horizontally,  and events are read vertically.\
    \  State transitions and\n   actions are represented in the form  action/new-state.\
    \   Two  actions\n   caused by the same event are represented as action1&action2.\n\
    \         | State\n         |   1       2        3        4        5        6\
    \        7\n   Events| Closed  Listen  Req-Sent Ack-Rcvd Ack-Sent  Open    Closing\n\
    \   ------+-------------------------------------------------------------\n   \
    \  AO  | scr/3   scr/3      3        4        5        6      scr/3\n     PO \
    \ |   2       2        2*       4        5        6      sta/3*\n     C   |  \
    \ 1       1        1*       1      str/7    str/7      7\n     TO  |   1     \
    \  2      scr/3    scr/3    scr/3      6      str/7*\n    PLD  |   1       1 \
    \       1        1        1        1        1\n    RCR+ | sta/1 scr&sca/5  sca/5\
    \    sca/6    sca/5  scr&sca/5    7\n    RCR- | sta/1 scr&scn/3  scn/3    scn/4\
    \    scn/3  scr&scn/3    7\n    RCA  | sta/1   sta/2      4      scr/3      6\
    \      scr/3      7\n    RCN  | sta/1   sta/2    scr/3    scr/3    scr/5    scr/3\
    \      7\n    RTR  | sta/1   sta/2    sta/3    sta/3    sta/3    sta/1    sta/7\n\
    \    RTA  |   1       2        3        3        3        1        1\n    RCJ\
    \  |   1       2        1        1        1        1        1\n    RUC  | scj/1\
    \   scj/2    scj/1    scj/1    scj/1    scj/1  1 scj/7\n    RER  | sta/1   sta/2\
    \      3        4        5      ser/6      7\n   Notes:\n       RCR+ - Receive-Configure-Request\
    \ (Good)\n       RCR- - Receive-Configure-Request (Bad)\n       RCJ  - Receive-Code-Reject\n\
    \       RUC  - Receive-Unknown-Code\n       RER  - Receive-Echo-Request\n    \
    \   scj  - Send-Code-Reject\n       ser  - Send-Echo-Reply\n        *   - Special\
    \ attention necessary, see detailed text\n"
- title: 4.1.4.  Events
  contents:
  - "4.1.4.  Events\n   Transitions and actions in the LCP state machine are caused\
    \ by\n   events.  Some events are caused by commands executed at the local end\n\
    \   (e.g., Active-Open, Passive-Open, and Close), others are caused by\n   the\
    \ receipt of packets from the remote end (e.g., Receive-\n   Configure-Request,\
    \ Receive-Configure-Ack, Receive-Configure-Nak,\n   Receive- Terminate-Request\
    \ and Receive-Terminate-Ack), and still\n   others are caused by the expiration\
    \ of the Restart timer started as\n   the result of other events (e.g., Timeout).\n\
    \   Following is a list of LCP events.\n   Active-Open (AO)\n      The Active-Open\
    \ event indicates the local execution of an Active-\n      Open command by the\
    \ network administrator (human or program).\n      When this event occurs, LCP\
    \ should immediately attempt to open the\n      connection by exchanging configuration\
    \ packets with the LCP peer.\n   Passive-Open (PO)\n      The Passive-Open event\
    \ is similar to the Active-Open event.\n      However, instead of immediately\
    \ exchanging configuration packets,\n      LCP should wait for the peer to send\
    \ the first packet.  This will\n      only happen after an Active-Open event in\
    \ the LCP peer.\n   Close (C)\n      The Close event indicates the local execution\
    \ of a Close command.\n      When this event occurs, LCP should immediately attempt\
    \ to close\n      the connection.\n   Timeout (TO)\n      The Timeout event indicates\
    \ the expiration of the LCP Restart\n      timer.  The LCP Restart timer is started\
    \ as the result of other\n      LCP events.\n      The Restart timer is used to\
    \ time out transmissions of Configure-\n      Request and Terminate-Request packets.\
    \  Expiration of the Restart\n      timer causes a Timeout event, which triggers\
    \ the corresponding\n      Configure-Request or Terminate-Request packet to be\
    \ retransmitted.\n      The Restart timer MUST be configurable, but should default\
    \ to\n      three (3) seconds.\n   Receive-Configure-Request (RCR)\n      The\
    \ Receive-Configure-Request event occurs when a Configure-\n      Request packet\
    \ is received from the LCP peer.  The Configure-\n      Request packet indicates\
    \ the desire to open a LCP connection and\n      may specify Configuration Options.\
    \  The Configure-Request packet\n      is more fully described in a later section.\n\
    \   Receive-Configure-Ack (RCA)\n      The Receive-Configure-Ack event occurs\
    \ when a valid Configure-Ack\n      packet is received from the LCP peer.  The\
    \ Configure-Ack packet is\n      a positive response to a Configure-Request packet.\n\
    \   Receive-Configure-Nak (RCN)\n      The Receive-Configure-Nak event occurs\
    \ when a valid Configure-Nak\n      or Configure-Reject packet is received from\
    \ the LCP peer.  The\n      Configure-Nak and Configure-Reject packets are negative\
    \ responses\n      to a Configure-Request packet.\n   Receive-Terminate-Request\
    \ (RTR)\n      The Receive-Terminate-Request event occurs when a Terminate-\n\
    \      Request packet is received from the LCP peer.  The Terminate-\n      Request\
    \ packet indicates the desire to close the LCP connection.\n   Receive-Terminate-Ack\
    \ (RTA)\n      The Receive-Terminate-Ack event occurs when a Terminate-Ack packet\n\
    \      is received from the LCP peer.  The Terminate-Ack packet is a\n      response\
    \ to a Terminate-Request packet.\n   Receive-Code-Reject (RCJ)\n      The Receive-Code-Reject\
    \ event occurs when a Code-Reject packet is\n      received from the LCP peer.\
    \  The Code-Reject packet communicates\n      an error that immediately closes\
    \ the connection.\n   Receive-Unknown-Code (RUC)\n      The Receive-Unknown-Code\
    \ event occurs when an un-interpretable\n      packet is received from the LCP\
    \ peer.  The Code-Reject packet is a\n      response to an unknown packet.\n \
    \  Receive-Echo-Request (RER)\n      The Receive-Echo-Request event occurs when\
    \ a Echo-Request, Echo-\n      Reply, or Discard-Request packet is received from\
    \ the LCP peer.\n      The Echo-Reply packet is a response to a Echo-Request packet.\n\
    \      There is no reply to a Discard-Request.\n   Physical-Layer-Down (PLD)\n\
    \      The Physical-Layer-Down event occurs when the Physical Layer\n      indicates\
    \ that it is down.\n"
- title: 4.1.5.  Actions
  contents:
  - "4.1.5.  Actions\n   Actions in the LCP state machine are caused by events and\
    \ typically\n   indicate the transmission of packets and/or the starting or stopping\n\
    \   of the Restart timer.  Following is a list of LCP actions.\n   Send-Configure-Request\
    \ (scr)\n      The Send-Configure-Request action transmits a Configure-Request\n\
    \      packet.  This indicates the desire to open a LCP connection with a\n  \
    \    specified set of Configuration Options.  The Restart timer is\n      started\
    \ after the Configure-Request packet is transmitted, to\n      guard against packet\
    \ loss.\n   Send-Configure-Ack (sca)\n      The Send-Configure-Ack action transmits\
    \ a Configure-Ack packet.\n      This acknowledges the receipt of a Configure-Request\
    \ packet with\n      an acceptable set of Configuration Options.\n   Send-Configure-Nak\
    \ (scn)\n      The Send-Configure-Nak action transmits a Configure-Nak or\n  \
    \    Configure-Reject packet, as appropriate.  This negative response\n      reports\
    \ the receipt of a Configure-Request packet with an\n      unacceptable set of\
    \ Configuration Options.  Configure-Nak packets\n      are used to refuse a Configuration\
    \ Option value, and to suggest a\n      new, acceptable value.  Configure-Reject\
    \ packets are used to\n      refuse all negotiation about a Configuration Option,\
    \ typically\n      because it is not recognized or implemented.  The use of\n\
    \      Configure-Nak vs. Configure-Reject is more fully described in the\n   \
    \   section on LCP Packet Formats.\n   Send-Terminate-Req (str)\n      The Send-Terminate-Request\
    \ action transmits a Terminate-Request\n      packet.  This indicates the desire\
    \ to close a LCP connection.  The\n      Restart timer is started after the Terminate-Request\
    \ packet is\n      transmitted, to guard against packet loss.\n   Send-Terminate-Ack\
    \ (sta)\n      The Send-Terminate-Request action transmits a Terminate-Ack\n \
    \     packet.  This acknowledges the receipt of a Terminate-Request\n      packet\
    \ or otherwise confirms the belief that a LCP connection is\n      Closed.\n \
    \  Send-Code-Reject (scj)\n      The Send-Code-Reject action transmits a Code-Reject\
    \ packet.  This\n      indicates the receipt of an unknown type of packet.  This\
    \ is an\n      unrecoverable error which causes immediate transitions to the\n\
    \      Closed state on both ends of the link.\n   Send-Echo-Reply (ser)\n    \
    \  The Send-Echo-Reply action transmits an Echo-Reply packet.  This\n      acknowledges\
    \ the receipt of an Echo-Request packet.\n"
- title: 4.1.6.  States
  contents:
  - "4.1.6.  States\n   Following is a more detailed description of each LCP state.\n\
    \   Closed (1)\n      The initial and final state is the Closed state.  In the\
    \ Closed\n      state the connection is down and there is no attempt to open it;\n\
    \      all connection requests from peers are rejected.  Physical-Layer-\n   \
    \   Down events always cause an immediate transition to the Closed\n      state.\n\
    \      There are two events which cause a transition out of the Closed\n     \
    \ state, Active-Open and Passive-Open.  Upon an Active-Open event, a\n      Configure-Request\
    \ is transmitted, the Restart timer is started,\n      and the Request-Sent state\
    \ is entered.  Upon a Passive-Open event,\n      the Listen state is entered immediately.\
    \  Upon receipt of any\n      packet, with the exception of a Terminate-Ack, a\
    \ Terminate-Ack is\n      sent.  Terminate-Acks are silently discarded to avoid\
    \ creating a\n      loop.\n      The Restart timer is not running in the Closed\
    \ state.\n      The Physical Layer connection may be disconnected at any time\
    \ when\n      in the LCP Closed state.\n   Listen (2)\n      The Listen state\
    \ is similar to the Closed state in that the\n      connection is down and there\
    \ is no attempt to open it.  However,\n      peer connection requests are no longer\
    \ rejected.\n      Upon receipt of a Configure-Request, a Configure-Request is\n\
    \      immediately transmitted and the Restart timer is started.  The\n      received\
    \ Configuration Options are examined and the proper\n      response is sent. \
    \ If a Configure-Ack is sent, the Ack-Sent state\n      is entered.  Otherwise,\
    \ if a Configure-Nak or Configure-Reject is\n      sent, the Request-Sent state\
    \ is entered.  In either case, LCP\n      exits its passive state, and begins\
    \ to actively open the\n      connection.  Terminate-Ack packets are sent in response\
    \ to either\n      Configure-Ack or Configure-Nak packets,\n      The Restart\
    \ timer is not running in the Listen state.\n   Request-Sent (3)\n      In the\
    \ Request-Sent state an active attempt is made to open the\n      connection.\
    \  A Configure-Request has been sent and the Restart\n      timer is running,\
    \ but a Configure-Ack has not yet been received\n      nor has one been sent.\n\
    \      Upon receipt of a Configure-Ack, the Ack-Received state is\n      immediately\
    \ entered.  Upon receipt of a Configure-Nak or\n      Configure-Reject, the Configure-Request\
    \ Configuration Options are\n      adjusted appropriately, a new Configure-Request\
    \ is transmitted,\n      and the Restart timer is restarted.  Similarly, upon\
    \ the\n      expiration of the Restart timer, a new Configure-Request is\n   \
    \   transmitted and the Restart timer is restarted.  Upon receipt of a\n     \
    \ Configure-Request, the Configuration Options are examined and if\n      acceptable,\
    \ a Configure-Ack is sent and the Ack-Sent state is\n      entered.  If the Configuration\
    \ Options are unacceptable, a\n      Configure-Nak or Configure-Reject is sent\
    \ as appropriate.\n      Since there is an outstanding Configure-Request in the\
    \ Request-\n      Sent state, special care must be taken to implement the Passive-\n\
    \      Open and Close events; otherwise, it is possible for the LCP peer\n   \
    \   to think the connection is open.  Processing of either event\n      should\
    \ be postponed until there is reasonable assurance that the\n      peer is not\
    \ open.  In particular, the Restart timer should be\n      allowed to expire.\n\
    \   Ack-Received (4)\n      In the Ack-Received state, a Configure-Request has\
    \ been sent and a\n      Configure-Ack has been received.  The Restart timer is\
    \ still\n      running since a Configure-Ack has not yet been transmitted.\n \
    \     Upon receipt of a Configure-Request with acceptable Configuration\n    \
    \  Options, a Configure-Ack is transmitted, the Restart timer is\n      stopped\
    \ and the Open state is entered.  If the Configuration\n      Options are unacceptable,\
    \ a Configure-Nak or Configure-Reject is\n      sent as appropriate.  Upon the\
    \ expiration of the Restart timer, a\n      new Configure-Request is transmitted,\
    \ the Restart timer is\n      restarted, and the state machine returns to the\
    \ Request-Sent\n      state.\n   Ack-Sent (5)\n      In the Ack-Sent state, a\
    \ Configure-Ack and a Configure-Request\n      have been sent but a Configure-Ack\
    \ has not yet been received.  The\n      Restart timer is always running in the\
    \ Ack-Sent state.\n      Upon receipt of a Configure-Ack, the Restart timer is\
    \ stopped and\n      the Open state is entered.  Upon receipt of a Configure-Nak\
    \ or\n      Configure-Reject, the Configure-Request Configuration Options are\n\
    \      adjusted appropriately, a new Configure-Request is transmitted,\n     \
    \ and the Restart timer is restarted.  Upon the expiration of the\n      Restart\
    \ timer, a new Configure-Request is transmitted, the Restart\n      timer is restarted,\
    \ and the state machine returns to the Request-\n      Sent state.\n   Open (6)\n\
    \      In the Open state, a connection exists and data may be\n      communicated\
    \ over the link.  The Restart timer is not running in\n      the Open state.\n\
    \      In normal operation, only two events cause transitions out of the\n   \
    \   Open state.  Upon receipt of a Close command, a Terminate-Request\n      is\
    \ transmitted, the Restart timer is started, and the Closing\n      state is entered.\
    \  Upon receipt of a Terminate-Request, a\n      Terminate-Ack is transmitted\
    \ and the Closed state is entered.\n      Upon receipt of an Echo-Request, an\
    \ Echo-Reply is transmitted.\n      Similarly, Echo-Reply and Discard-Request\
    \ packets are silently\n      discarded or processed as expected.  All other events\
    \ cause\n      immediate transitions out of the Open state and should be handled\n\
    \      as if the state machine were in the Listen state.\n   Closing (7)\n   \
    \   In the Closing state, an active attempt is made to close the\n      connection.\
    \  A Terminate-Request has been sent and the Restart\n      timer is running,\
    \ but a Terminate-Ack has not yet been received.\n      Upon receipt of a Terminate-Ack,\
    \ the Closed state is immediately\n      entered.  Upon the expiration of the\
    \ Restart timer, a new\n      Terminate-Request is transmitted and the Restart\
    \ timer is\n      restarted.  After the Restart timer has expired Max-Restart\
    \ times,\n      this action may be skipped, and the Closed state may be entered.\n\
    \      Max-Restart MUST be a configurable parameter.\n      Since there is an\
    \ outstanding Terminate-Request in the Closing\n      state, special care must\
    \ be taken to implement the Passive-Open\n      event; otherwise, it is possible\
    \ for the LCP peer to think the\n      connection is open.  Processing of the\
    \ Passive-Open event should\n      be postponed until there is reasonable assurance\
    \ that the peer is\n      not open.  In particular, the implementation should\
    \ wait until the\n      state machine would normally transition to the Closed\
    \ state\n      because of a Receive-Terminate-Ack event or Max-Restart Timeout\n\
    \      events.\n"
- title: 4.2.  Loop Avoidance
  contents:
  - "4.2.  Loop Avoidance\n   Note that the protocol makes a reasonable attempt at\
    \ avoiding\n   Configuration Option negotiation loops.  However, the protocol\
    \ does\n   NOT guarantee that loops will not happen.  As with any negotiation,\n\
    \   it is possible to configure two PPP implementations with conflicting\n   policies\
    \ that will never converge.  It is also possible to configure\n   policies which\
    \ do converge, but which take significant time to do so.\n   Implementors should\
    \ keep this in mind and should implement loop\n   detection mechanisms or higher\
    \ level timeouts.  If a timeout is\n   implemented, it MUST be configurable.\n"
- title: 4.3.  Timers and Counters
  contents:
  - "4.3.  Timers and Counters\n   There is one special timer used by LCP, the Restart\
    \ timer.  The\n   Restart timer is used to time out transmissions of Configure-Request\n\
    \   and Terminate-Request packets.  Expiration of the Restart timer\n   causes\
    \ a Timeout event, and the corresponding Configure-Request or\n   Terminate-Request\
    \ packet retransmission.  The Restart timer MUST be\n   configurable, but should\
    \ default to three (3) seconds.\n   There is one additional restart parameter,\
    \ Max-Restarts.  Max-\n   Restarts indicates the number of packet retransmissions\
    \ that are\n   required before there is reasonable assurance that the link closed.\n\
    \   Max-Restarts MUST also be configurable, but should default to ten\n   (10)\
    \ retransmissions.\n"
- title: 4.4.  Packet Format
  contents:
  - "4.4.  Packet Format\n   Exactly one Link Control Protocol packet is encapsulated\
    \ in the\n   Information field of PPP Data Link Layer frames where the Protocol\n\
    \   field indicates type hex c021 (Link Control Protocol).\n   A summary of the\
    \ Link Control Protocol packet format is shown below.\n   The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the kind of LCP packet.\n      LCP Codes are assigned as follows:\n\
    \         1       Configure-Request\n         2       Configure-Ack\n        \
    \ 3       Configure-Nak\n         4       Configure-Reject\n         5       Terminate-Request\n\
    \         6       Terminate-Ack\n         7       Code-Reject\n         8    \
    \   Protocol-Reject\n         9       Echo-Request\n         10      Echo-Reply\n\
    \         11      Discard-Request\n   Identifier\n      The Identifier field is\
    \ one octet and aids in matching requests\n      and replies.\n   Length\n   \
    \   The Length field is two octets and indicates the length of the LCP\n     \
    \ packet including the Code, Identifier, Length and Data fields.\n      Octets\
    \ outside the range of the Length field should be treated as\n      Data Link\
    \ Layer padding and should be ignored on reception.\n   Data\n      The Data field\
    \ is zero or more octets as indicated by the Length\n      field.  The format\
    \ of the Data field is determined by the Code\n      field.\n   Regardless of\
    \ which Configuration Options are enabled, all LCP\n   packets are always sent\
    \ in the full, standard form, as if no\n   Configuration Options were enabled.\
    \  This ensures that LCP\n   Configure-Request packets are always recognizable\
    \ even when one end\n   of the link mistakenly believes the link to be Open.\n\
    \   This document describes Version 1 of the Link Control Protocol.  In\n   the\
    \ interest of simplicity, there is no version field in the LCP\n   packet.  If\
    \ a new version of LCP is necessary in the future, the\n   intention is that a\
    \ new Data Link Layer Protocol field value should\n   be used to differentiate\
    \ Version 1 LCP from all other versions.  A\n   correctly functioning Version\
    \ 1 LCP implementation will always\n   respond to unknown Protocols (including\
    \ other versions) with an\n   easily recognizable Version 1 packet, thus providing\
    \ a deterministic\n   fallback mechanism for implementations of other versions.\n"
- title: 4.4.1.  Configure-Request
  contents:
  - "4.4.1.  Configure-Request\n   Description\n      A LCP implementation wishing\
    \ to open a connection MUST transmit a\n      LCP packet with the Code field set\
    \ to 1 (Configure-Request) and\n      the Options field filled with any desired\
    \ changes to the default\n      link Configuration Options.\n      Upon reception\
    \ of a Configure-Request, an appropriate reply MUST\n      be transmitted.\n \
    \  A summary of the Configure-Request packet format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      1 for Configure-Request.\n   Identifier\n\
    \      The Identifier field should be changed on each transmission.  On\n    \
    \  reception, the Identifier field should be copied into the\n      Identifier\
    \ field of the appropriate reply packet.\n   Options\n      The options field\
    \ is variable in length and contains the list of\n      zero or more Configuration\
    \ Options that the sender desires to\n      negotiate.  All Configuration Options\
    \ are always negotiated\n      simultaneously.  The format of Configuration Options\
    \ is further\n      described in a later section.\n"
- title: 4.4.2.  Configure-Ack
  contents:
  - "4.4.2.  Configure-Ack\n   Description\n      If every Configuration Option received\
    \ in a Configure-Request is\n      both recognizable and acceptable, then a LCP\
    \ implementation should\n      transmit a LCP packet with the Code field set to\
    \ 2 (Configure-\n      Ack), the Identifier field copied from the received Configure-\n\
    \      Request, and the Options field copied from the received\n      Configure-Request.\
    \  The acknowledged Configuration Options MUST\n      NOT be reordered or modified\
    \ in any way.\n      On reception of a Configure-Ack, the Identifier field must\
    \ match\n      that of the last transmitted Configure-Request, or the packet is\n\
    \      invalid.  Additionally, the Configuration Options in a Configure-\n   \
    \   Ack must match those of the last transmitted Configure-Request, or\n     \
    \ the packet is invalid.  Invalid packets should be silently\n      discarded.\n\
    \      Reception of a valid Configure-Ack indicates that all\n      Configuration\
    \ Options sent in the last Configure-Request are\n      acceptable.\n   A summary\
    \ of the Configure-Ack packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      2 for Configure-Ack.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Ack.\n   Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is\n      acknowledging.  All Configuration Options are always\
    \ acknowledged\n      simultaneously.\n"
- title: 4.4.3.  Configure-Nak
  contents:
  - "4.4.3.  Configure-Nak\n   Description\n      If every element of the received\
    \ Configuration Options is\n      recognizable but some are not acceptable, then\
    \ a LCP\n      implementation should transmit a LCP packet with the Code field\n\
    \      set to 3 (Configure-Nak), the Identifier field copied from the\n      received\
    \ Configure-Request, and the Options field filled with only\n      the unacceptable\
    \ Configuration Options from the Configure-Request.\n      All acceptable Configuration\
    \ Options should be filtered out of the\n      Configure-Nak, but otherwise the\
    \ Configuration Options from the\n      Configure-Request MUST NOT be reordered.\
    \  Each of the nak'd\n      Configuration Options MUST be modified to a value\
    \ acceptable to\n      the Configure-Nak sender.  Finally, an implementation may\
    \ be\n      configured to require the negotiation of a specific option.  If\n\
    \      that option is not listed, then that option may be appended to the\n  \
    \    list of nak'd Configuration Options in order to request the remote\n    \
    \  end to list that option in its next Configure-Request packet.  The\n      appended\
    \ option must include a value acceptable to the Configure-\n      Nak sender.\n\
    \      On reception of a Configure-Nak, the Identifier field must match\n    \
    \  that of the last transmitted Configure-Request, or the packet is\n      invalid\
    \ and should be silently discarded.\n      Reception of a valid Configure-Nak\
    \ indicates that a new\n      Configure-Request should be sent with the Configuration\
    \ Options\n      modified as specified in the Configure-Nak.\n   A summary of\
    \ the Configure-Nak packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      3 for Configure-Nak.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Nak.\n   Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is nak'ing.\n      All Configuration Options are always nak'd\
    \ simultaneously.\n"
- title: 4.4.4.  Configure-Reject
  contents:
  - "4.4.4.  Configure-Reject\n   Description\n      If some Configuration Options\
    \ received in a Configure-Request are\n      not recognizable or are not acceptable\
    \ for negotiation (as\n      configured by a network manager), then a LCP implementation\
    \ should\n      transmit a LCP packet with the Code field set to 4 (Configure-\n\
    \      Reject), the Identifier field copied from the received Configure-\n   \
    \   Request, and the Options field filled with only the unrecognized\n      Configuration\
    \ Options from the Configure-Request.  All\n      recognizable and negotiable\
    \ Configuration Options must be filtered\n      out of the Configure-Reject, but\
    \ otherwise the Configuration\n      Options MUST not be reordered.\n      On\
    \ reception of a Configure-Reject, the Identifier field must\n      match that\
    \ of the last transmitted Configure-Request, or the\n      packet is invalid.\
    \  Additionally, the Configuration Options in a\n      Configure-Reject must be\
    \ a proper subset of those in the last\n      transmitted Configure-Request, or\
    \ the packet is invalid.  Invalid\n      packets should be silently discarded.\n\
    \      Reception of a Configure-Reject indicates that a new Configure-\n     \
    \ Request should be sent which does not include any of the\n      Configuration\
    \ Options listed in the Configure-Reject.\n   A summary of the Configure-Reject\
    \ packet format is shown below.  The\n   fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      4 for Configure-Reject.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Reject.\n   Options\n      The Options field is\
    \ variable in length and contains the list of\n      zero or more Configuration\
    \ Options that the sender is rejecting.\n      All Configuration Options are always\
    \ rejected simultaneously.\n"
- title: 4.4.5.  Terminate-Request and Terminate-Ack
  contents:
  - "4.4.5.  Terminate-Request and Terminate-Ack\n   Description\n      LCP includes\
    \ Terminate-Request and Terminate-Ack Codes in order to\n      provide a mechanism\
    \ for closing a connection.\n      A LCP implementation wishing to close a connection\
    \ should transmit\n      a LCP packet with the Code field set to 5 (Terminate-Request)\
    \ and\n      the Data field filled with any desired data.  Terminate-Request\n\
    \      packets should continue to be sent until Terminate-Ack is\n      received,\
    \ the Physical Layer indicates that it has gone down, or a\n      sufficiently\
    \ large number have been transmitted such that the\n      remote end is down with\
    \ reasonable certainty.\n      Upon reception of a Terminate-Request, a LCP packet\
    \ MUST be\n      transmitted with the Code field set to 6 (Terminate-Ack), the\n\
    \      Identifier field copied from the Terminate-Request packet, and the\n  \
    \    Data field filled with any desired data.\n      Reception of an unelicited\
    \ Terminate-Ack indicates that the\n      connection has been closed.\n   A summary\
    \ of the Terminate-Request and Terminate-Ack packet formats\n   is shown below.\
    \  The fields are transmitted from left to right.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      5 for Terminate-Request;\n   \
    \   6 for Terminate-Ack.\n   Identifier\n      The Identifier field is one octet\
    \ and aids in matching requests\n      and replies.\n   Data\n      The Data field\
    \ is zero or more octets and contains uninterpreted\n      data for use by the\
    \ sender.  The data may consist of any binary\n      value and may be of any length\
    \ from zero to the established\n      maximum Information field length minus four.\n"
- title: 4.4.6.  Code-Reject
  contents:
  - "4.4.6.  Code-Reject\n   Description\n      Reception of a LCP packet with an\
    \ unknown Code indicates that one\n      of the communicating LCP implementations\
    \ is faulty or incomplete.\n      This error MUST be reported back to the sender\
    \ of the unknown Code\n      by transmitting a LCP packet with the Code field\
    \ set to 7 (Code-\n      Reject), and the inducing packet copied to the Rejected-Packet\n\
    \      field.\n      Upon reception of a Code-Reject, a LCP implementation should\
    \ make\n      an immediate transition to the Closed state, and should report the\n\
    \      error, since it is unlikely that the situation can be rectified\n     \
    \ automatically.\n   A summary of the Code-Reject packet format is shown below.\
    \  The\n   fields are transmitted from left to right.\n    0                 \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Rejected-Packet ...\n   +-+-+-+-+-+-+-+-+\n   Code\n      7 for Code-Reject.\n\
    \   Identifier\n      The Identifier field is one octet and is for use by the\n\
    \      transmitter.\n   Rejected-Packet\n      The Rejected-Packet field contains\
    \ a copy of the LCP packet which\n      is being rejected.  It begins with the\
    \ rejected Code field; it\n      does not include any PPP Data Link Layer headers.\
    \  The Rejected-\n      Packet should be truncated to comply with the established\
    \ maximum\n      Information field length.\n"
- title: 4.4.7.  Protocol-Reject
  contents:
  - "4.4.7.  Protocol-Reject\n   Description\n      Reception of a PPP frame with\
    \ an unknown Data Link Layer Protocol\n      indicates that the remote end is\
    \ attempting to use a protocol\n      which is unsupported at the local end. \
    \ This typically occurs when\n      the remote end attempts to configure a new,\
    \ but unsupported\n      protocol.  If the LCP state machine is in the Open state,\
    \ then\n      this error MUST be reported back to the sender of the unknown\n\
    \      protocol by transmitting a LCP packet with the Code field set to 8\n  \
    \    (Protocol-Reject), the Rejected-Protocol field set to the received\n    \
    \  Protocol, and the Data field filled with any desired data.\n      Upon reception\
    \ of a Protocol-Reject, a LCP implementation should\n      stop transmitting frames\
    \ of the indicated protocol.\n      Protocol-Reject packets may only be sent in\
    \ the LCP Open state.\n      Protocol-Reject packets received in any state other\
    \ than the LCP\n      Open state should be discarded and no further action should\
    \ be\n      taken.\n   A summary of the Protocol-Reject packet format is shown\
    \ below.  The\n   fields are transmitted from left to right.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Rejected-Protocol       |      Rejected-Information ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      8 for Protocol-Reject.\n   Identifier\n      The Identifier field\
    \ is one octet and is for use by the\n      transmitter.\n   Rejected-Protocol\n\
    \      The Rejected-Protocol field is two octets and contains the\n      Protocol\
    \ of the Data Link Layer frame which is being rejected.\n   Rejected-Information\n\
    \      The Rejected-Information field contains a copy from the frame\n      which\
    \ is being rejected.  It begins with the Information field,\n      and does not\
    \ include any PPP Data Link Layer headers or the FCS.\n      The Rejected-Information\
    \ field should be truncated to comply with\n      the established maximum Information\
    \ field length.\n"
- title: 4.4.8.  Echo-Request and Echo-Reply
  contents:
  - "4.4.8.  Echo-Request and Echo-Reply\n   Description\n      LCP includes Echo-Request\
    \ and Echo-Reply Codes in order to provide\n      a Data Link Layer loopback mechanism\
    \ for use in exercising both\n      directions of the link.  This is useful as\
    \ an aid in debugging,\n      link quality determination, performance testing,\
    \ and for numerous\n      other functions.\n      An Echo-Request sender transmits\
    \ a LCP packet with the Code field\n      set to 9 (Echo-Request) and the Data\
    \ field filled with any desired\n      data, up to but not exceeding the receiver's\
    \ established maximum\n      Information field length minus eight.\n      Upon\
    \ reception of an Echo-Request, a LCP packet MUST be\n      transmitted with the\
    \ Code field set to 10 (Echo-Reply), the\n      Identifier field copied from the\
    \ received Echo-Request, and the\n      Data field copied from the Echo-Request,\
    \ truncating as necessary\n      to avoid exceeding the peer's established maximum\
    \ Information\n      field length.\n      Echo-Request and Echo-Reply packets\
    \ may only be sent in the LCP\n      Open state.  Echo-Request and Echo-Reply\
    \ packets received in any\n      state other than the LCP Open state should be\
    \ discarded and no\n      further action should be taken.\n   A summary of the\
    \ Echo-Request and Echo-Reply packet formats is shown\n   below.  The fields are\
    \ transmitted from left to right.\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      9 for Echo-Request;\n      10\
    \ for Echo-Reply.\n   Identifier\n      The Identifier field is one octet and\
    \ aids in matching Echo-\n      Requests and Echo-Replies.\n   Magic-Number\n\
    \      The Magic-Number field is four octets and aids in detecting\n      loopbacked\
    \ links.  Unless modified by a Configuration Option, the\n      Magic-Number MUST\
    \ always be transmitted as zero and MUST always be\n      ignored on reception.\
    \  Further use of the Magic-Number is beyond\n      the scope of this discussion.\n\
    \   Data\n      The Data field is zero or more octets and contains uninterpreted\n\
    \      data for use by the sender.  The data may consist of any binary\n     \
    \ value and may be of any length from zero to the established\n      maximum Information\
    \ field length minus eight.\n"
- title: 4.4.9.  Discard-Request
  contents:
  - "4.4.9.  Discard-Request\n   Description\n      LCP includes a Discard-Request\
    \ Code in order to provide a Data\n      Link Layer data sink mechanism for use\
    \ in exercising the local to\n      remote direction of the link.  This is useful\
    \ as an aid in\n      debugging, performance testing, and and for numerous other\n\
    \      functions.\n      A discard sender transmits a LCP packet with the Code\
    \ field set to\n      11 (Discard-Request) and the Data field filled with any\
    \ desired\n      data, up to but not exceeding the receiver's established maximum\n\
    \      Information field length minus eight.\n      A discard receiver MUST simply\
    \ throw away an Discard-Request that\n      it receives.\n      Discard-Request\
    \ packets may only be sent in the LCP Open state.\n   A summary of the Discard-Request\
    \ packet formats is shown below.  The\n   fields are transmitted from left to\
    \ right.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      11 for Discard-Request.\n   Identifier\n\
    \      The Identifier field is one octet and is for use by the Discard-\n    \
    \  Request transmitter.\n   Magic-Number\n      The Magic-Number field is four\
    \ octets and aids in detecting\n      loopbacked links.  Unless modified by a\
    \ configuration option, the\n      Magic-Number MUST always be transmitted as\
    \ zero and MUST always be\n      ignored on reception.  Further use of the Magic-Number\
    \ is beyond\n      the scope of this discussion.\n   Data\n      The Data field\
    \ is zero or more octets and contains uninterpreted\n      data for use by the\
    \ sender.  The data may consist of any binary\n      value and may be of any length\
    \ from zero to the established\n      maximum Information field length minus four.\n"
- title: 4.5.  Configuration Options
  contents:
  - "4.5.  Configuration Options\n   LCP Configuration Options allow modifications\
    \ to the standard\n   characteristics of a point-to-point link to be negotiated.\n\
    \   Negotiable modifications include such things as the maximum receive\n   unit,\
    \ async control character mapping, the link authentication\n   method, etc.  The\
    \ Configuration Options themselves are described in\n   separate documents.  If\
    \ a Configuration Option is not included in a\n   Configure-Request packet, the\
    \ default value for that Configuration\n   Option is assumed.\n   The end of the\
    \ list of Configuration Options is indicated by the end\n   of the LCP packet.\n\
    \   Unless otherwise specified, a specific Configuration Option should be\n  \
    \ listed no more than once in a Configuration Options list.  Specific\n   Configuration\
    \ Options may override this general rule and may be\n   listed more than once.\
    \  The effect of this is Configuration Option\n   specific and is specified by\
    \ each such Configuration Option.\n   Also unless otherwise specified, all Configuration\
    \ Options apply in a\n   half-duplex fashion.  When negotiated, they apply to\
    \ only one\n   direction of the link, typically in the receive direction when\n\
    \   interpreted from the point of view of the Configure-Request sender.\n"
- title: 4.5.1.  Format
  contents:
  - "4.5.1.  Format\n   A summary of the Configuration Option format is shown below.\
    \  The\n   fields are transmitted from left to right.\n    0                 \
    \  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |    Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      The Type field is one octet and indicates the type of\n      Configuration\
    \ Option.  The most up-to-date values of the Type\n      field are specified in\
    \ the most recent \"Assigned Numbers\" RFC\n      [12].\n   Length\n      The\
    \ Length field is one octet and indicates the length of this\n      Configuration\
    \ Option including the Type, Length and Data fields.\n      If a negotiable Configuration\
    \ Option is received in a Configure-\n      Request but with an invalid Length,\
    \ a Configure-Nak should be\n      transmitted which includes the desired Configuration\
    \ Option with\n      an appropriate Length and Data.\n   Data\n      The Data\
    \ field is zero or more octets and indicates the value or\n      other information\
    \ for this Configuration Option.  The format and\n      length of the Data field\
    \ is determined by the Type and Length\n      fields.\n"
- title: 5.  A PPP Network Control Protocol (NCP) for IP
  contents:
  - "5.  A PPP Network Control Protocol (NCP) for IP\n   The IP Control Protocol (IPCP)\
    \ is responsible for configuring,\n   enabling, and disabling the IP protocol\
    \ modules on both ends of the\n   point-to-point link.  As with the Link Control\
    \ Protocol, this is\n   accomplished through an exchange of packets.  IPCP packets\
    \ may not be\n   exchanged until LCP has reached the Network-Layer Protocol\n\
    \   Configuration Negotiation phase.  IPCP packets received before this\n   phase\
    \ is reached should be silently discarded.  Likewise, IP\n   datagrams may not\
    \ be exchanged until IPCP has first opened the\n   connection (reached the Open\
    \ state).\n   The IP Control Protocol is exactly the same as the Link Control\n\
    \   Protocol with the following exceptions:\n   Data Link Layer Protocol Field\n\
    \      Exactly one IP Control Protocol packet is encapsulated in the\n      Information\
    \ field of PPP Data Link Layer frames where the Protocol\n      field indicates\
    \ type hex 8021 (IP Control Protocol).\n   Code field\n      Only Codes 1 through\
    \ 7 (Configure-Request, Configure-Ack,\n      Configure-Nak, Configure-Reject,\
    \ Terminate-Request, Terminate-Ack\n      and Code-Reject) are used.  Other Codes\
    \ should be treated as\n      unrecognized and should result in Code-Rejects.\n\
    \   Timeouts\n      IPCP packets may not be exchanged until the Link Control Protocol\n\
    \      has reached the network-layer Protocol Configuration Negotiation\n    \
    \  phase.  An implementation should be prepared to wait for Link\n      Quality\
    \ testing to finish before timing out waiting for a\n      Configure-Ack or other\
    \ response.  It is suggested that an\n      implementation give up only after\
    \ user intervention or a\n      configurable amount of time.\n   Configuration\
    \ Option Types\n      The IPCP has a separate set of Configuration Options.  The\
    \ most\n      up-to-date values of the type field are specified in the most\n\
    \      recent \"Assigned Numbers\" RFC [12].\n"
- title: 5.1.  Sending IP Datagrams
  contents:
  - "5.1.  Sending IP Datagrams\n   Before any IP packets may be communicated, both\
    \ the Link Control\n   Protocol and the IP Control Protocol must reach the Open\
    \ state.\n   Exactly one IP packet is encapsulated in the Information field of\
    \ PPP\n   Data Link Layer frames where the Protocol field indicates type hex\n\
    \   0021 (Internet Protocol).\n   The maximum length of an IP packet transmitted\
    \ over a PPP link is the\n   same as the maximum length of the Information field\
    \ of a PPP data\n   link layer frame.  Larger IP datagrams must be fragmented\
    \ as\n   necessary.  If a system wishes to avoid fragmentation and reassembly,\n\
    \   it should use the TCP Maximum Segment Size option [13], or a similar\n   mechanism,\
    \ to discourage others from sending large datagrams.\n"
- title: A.  Asynchronous HDLC
  contents:
  - "A.  Asynchronous HDLC\n   This appendix summarizes the modifications to ISO 3309-1979\
    \ proposed\n   in ISO 3309:1984/PDAD1.  These modifications allow HDLC to be used\n\
    \   with 8-bit asynchronous links.\n   Transmission Considerations\n      Each\
    \ octet is delimited by a start and a stop element.\n   Flag Sequence\n      The\
    \ Flag Sequence is a single octet and indicates the beginning or\n      end of\
    \ a frame.  The Flag Sequence consists of the binary sequence\n      01111110\
    \ (hexadecimal 0x7e).\n   Transparency\n      On asynchronous links, a character\
    \ stuffing procedure is used.\n      The Control Escape octet is defined as binary\
    \ 01111101\n      (hexadecimal 0x7d) where the bit positions are numbered 87654321\n\
    \      (not 76543210, BEWARE).\n      After FCS computation, the transmitter examines\
    \ the entire frame\n      between the two Flag Sequences.  Each Flag Sequence,\
    \ Control\n      Escape octet and octet with value less than hexadecimal 0x20\
    \ is\n      replaced by a two octet sequence consisting of the Control Escape\n\
    \      octet and the original octet with bit 6 complemented (i.e.,\n      exclusive-or'd\
    \ with hexadecimal 0x20).\n      Prior to FCS computation, the receiver examines\
    \ the entire frame\n      between the two Flag Sequences.  Each octet with value\
    \ less than\n      hexadecimal 0x20 is simply removed (it may have been inserted\
    \ by\n      intervening data communications equipment).  For each Control\n  \
    \    Escape octet, that octet is also removed, but bit 6 of the\n      following\
    \ octet is complemented.  A Control Escape octet\n      immediately preceding\
    \ the closing Flag Sequence indicates an\n      invalid frame.\n         Note:\
    \ The inclusion of all octets less than hexadecimal 0x20\n         allows all\
    \ ASCII control characters [10] excluding DEL (Delete)\n         to be transparently\
    \ communicated through almost all known data\n         communications equipment.\n\
    \      A few examples may make this more clear.  Packet data is\n      transmitted\
    \ on the link as follows:\n         0x7e is encoded as 0x7d, 0x5e.\n         0x7d\
    \ is encoded as 0x7d, 0x5d.\n         0x01 is encoded as 0x7d, 0x21.\n   Aborting\
    \ a Transmission\n      On asynchronous links, frames may be aborted by transmitting\
    \ a \"0\"\n      stop bit where a \"1\" bit is expected (framing error) or by\n\
    \      transmitting a Control Escape octet followed immediately by a\n      closing\
    \ Flag Sequence.\n   Inter-frame Time Fill\n      On asynchronous links, inter-octet\
    \ and inter-frame time fill\n      should be accomplished by transmitting continuous\
    \ \"1\" bits (mark-\n      hold state).\n         Note: On asynchronous links,\
    \ inter-frame time fill can be\n         viewed as extended inter-octet time fill.\
    \  Doing so can save\n         one octet for every frame, decreasing delay and\
    \ increasing\n         bandwidth.  This is possible since a Flag Sequence may\
    \ serve as\n         both a frame close and a frame begin.  After having received\n\
    \         any frame, an idle receiver will always be in a frame begin\n      \
    \   state.\n         Robust transmitters should avoid using this trick over-\n\
    \         zealously since the price for decreased delay is decreased\n       \
    \  reliability.  Noisy links may cause the receiver to receive\n         garbage\
    \ characters and interpret them as part of an incoming\n         frame.  If the\
    \ transmitter does not transmit a new opening Flag\n         Sequence before sending\
    \ the next frame, then that frame will be\n         appended to the noise characters\
    \ causing an invalid frame (with\n         high reliability).  Transmitters should\
    \ avoid this by\n         transmitting an open Flag Sequence whenever \"appreciable\
    \ time\"\n         has elapsed since the prior closing Flag Sequence.  It is\n\
    \         suggested that implementations will achieve the best results by\n  \
    \       always sending an opening Flag Sequence if the new frame is not\n    \
    \     back-to-back with the last.  The maximum value for \"appreciable\n     \
    \    time\" is likely to be no greater than the typing rate of a slow\n      \
    \   to average typist, say 1 second.\n"
- title: B.  Fast Frame Check Sequence (FCS) Implementation
  contents:
  - 'B.  Fast Frame Check Sequence (FCS) Implementation

    '
- title: B.1.  FCS Computation Method
  contents:
  - "B.1.  FCS Computation Method\n   The following code provides a table lookup computation\
    \ for\n   calculating the Frame Check Sequence as data arrives at the\n   interface.\
    \  The table is created by the code in section 2.\n   /*\n    * u16 represents\
    \ an unsigned 16-bit number.  Adjust the typedef for\n    * your hardware.\n \
    \   */\n   typedef unsigned short u16;\n   /*\n    * FCS lookup table as calculated\
    \ by the table generator in section 2.\n    */\n   static u16 fcstab[256] = {\n\
    \      0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,\n     \
    \ 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,\n      0x1081,\
    \ 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,\n      0x9cc9, 0x8d40,\
    \ 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,\n      0x2102, 0x308b, 0x0210,\
    \ 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,\n      0xad4a, 0xbcc3, 0x8e58, 0x9fd1,\
    \ 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,\n      0x3183, 0x200a, 0x1291, 0x0318, 0x77a7,\
    \ 0x662e, 0x54b5, 0x453c,\n      0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66,\
    \ 0xd8fd, 0xc974,\n      0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732,\
    \ 0x36bb,\n      0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,\n\
    \      0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,\n     \
    \ 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,\n      0x6306,\
    \ 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,\n      0xef4e, 0xfec7,\
    \ 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,\n      0x7387, 0x620e, 0x5095,\
    \ 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,\n      0xffcf, 0xee46, 0xdcdd, 0xcd54,\
    \ 0xb9eb, 0xa862, 0x9af9, 0x8b70,\n      0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c,\
    \ 0xd3a5, 0xe13e, 0xf0b7,\n      0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed,\
    \ 0x6d76, 0x7cff,\n      0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf,\
    \ 0xe036,\n      0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,\n\
    \      0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,\n     \
    \ 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,\n      0xb58b,\
    \ 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,\n      0x39c3, 0x284a,\
    \ 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,\n      0xc60c, 0xd785, 0xe51e,\
    \ 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,\n      0x4a44, 0x5bcd, 0x6956, 0x78df,\
    \ 0x0c60, 0x1de9, 0x2f72, 0x3efb,\n      0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9,\
    \ 0x8120, 0xb3bb, 0xa232,\n      0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68,\
    \ 0x3ff3, 0x2e7a,\n      0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238,\
    \ 0x93b1,\n      0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,\n\
    \      0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,\n     \
    \ 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78\n   };\n   #define\
    \ PPPINITFCS      0xffff  /* Initial FCS value */\n   #define PPPGOODFCS     \
    \ 0xf0b8  /* Good final FCS value */\n   /*\n    * Calculate a new fcs given the\
    \ current fcs and the new data.\n    */\n   u16 pppfcs(fcs, cp, len)\n       register\
    \ u16 fcs;\n       register unsigned char *cp;\n       register int len;\n   {\n\
    \       ASSERT(sizeof (u16) == 2);\n       ASSERT(((u16) -1) > 0);\n       while\
    \ (len--)\n           fcs = (fcs >> 8) ^ fcstab[(fcs ^ *cp++) & 0xff];\n     \
    \  return (fcs);\n   }\n"
- title: B.2.  Fast FCS table generator
  contents:
  - "B.2.  Fast FCS table generator\n   The following code creates the lookup table\
    \ used to calculate the\n   FCS.\n   /*\n    * Generate a FCS table for the HDLC\
    \ FCS.\n    *\n    * Drew D. Perkins at Carnegie Mellon University.\n    *\n \
    \   * Code liberally borrowed from Mohsen Banan and D. Hugh Redelmeier.\n    */\n\
    \   /*\n    * The HDLC polynomial: x**0 + x**5 + x**12 + x**16 (0x8408).\n   \
    \ */\n   #define P       0x8408\n   main()\n   {\n       register unsigned int\
    \ b, v;\n       register int i;\n       printf(\"typedef unsigned short u16;\\\
    n\");\n       printf(\"static u16 fcstab[256] = {\");\n       for (b = 0; ; )\
    \ {\n           if (b % 8 == 0)\n               printf(\"\\n\");\n           v\
    \ = b;\n           for (i = 8; i--; )\n               v = v & 1 ? (v >> 1) ^ P\
    \ : v >> 1;\n           printf(\"0x%04x\", v & 0xFFFF);\n           if (++b ==\
    \ 256)\n               break;\n           printf(\",\");\n       }\n       printf(\"\
    \\n};\\n\");\n   }\n"
- title: References
  contents:
  - "References\n   [1]   Electronic Industries Association, EIA Standard RS-232-C,\n\
    \         \"Interface Between Data Terminal Equipment and Data\n         Communications\
    \ Equipment Employing Serial Binary Data\n         Interchange\", August 1969.\n\
    \   [2]   International Organization For Standardization, ISO Standard\n     \
    \    3309-1979, \"Data communication - High-level data link control\n        \
    \ procedures - Frame structure\", 1979.\n   [3]   International Organization For\
    \ Standardization, ISO Standard\n         4335-1979, \"Data communication - High-level\
    \ data link control\n         procedures - Elements of procedures\", 1979.\n \
    \  [4]   International Organization For Standardization, ISO Standard\n      \
    \   4335-1979/Addendum 1, \"Data communication - High-level data\n         link\
    \ control procedures - Elements of procedures - Addendum 1\",\n         1979.\n\
    \   [5]   International Organization For Standardization, Proposed Draft\n   \
    \      International Standard ISO 3309:1983/PDAD1, \"Information\n         processing\
    \ systems - Data communication - High-level data link\n         control procedures\
    \ - Frame structure - Addendum 1: Start/stop\n         transmission\", 1984.\n\
    \   [6]   International Telecommunication Union, CCITT Recommendation\n      \
    \   X.25, \"Interface Between Data Terminal Equipment (DTE) and Data\n       \
    \  Circuit Terminating Equipment (DCE) for Terminals Operating in\n         the\
    \ Packet Mode on Public Data Networks\", CCITT Red Book,\n         Volume VIII,\
    \ Fascicle VIII.3, Rec. X.25., October 1984.\n   [7]   Perez, \"Byte-wise CRC\
    \ Calculations\", IEEE Micro, June, 1983.\n   [8]   Morse, G., \"Calculating CRC's\
    \ by Bits and Bytes\", Byte,\n         September 1986.\n   [9]   LeVan, J., \"\
    A Fast CRC\", Byte, November 1987.\n   [10]  American National Standards Institute,\
    \ ANSI X3.4-1977,\n         \"American National Standard Code for Information\
    \ Interchange\",\n         1977.\n   [11]  Postel, J., \"Internet Protocol\",\
    \ RFC 791, USC/Information\n         Sciences Institute, September 1981.\n   [12]\
    \  Reynolds, J., and J. Postel, \"Assigned Numbers\", RFC 1060,\n         USC/Information\
    \ Sciences Institute, March 1990.\n   [13]  Postel, J., \"The TCP Maximum Segment\
    \ Size Option and Related\n         Topics\", RFC 879, USC/Information Sciences\
    \ Institute, November\n         1983.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Chairman's Address
  contents:
  - 'Chairman''s Address

    '
- title: This proposal is the product of the Point-to-Point Protocol Working
  contents:
  - 'This proposal is the product of the Point-to-Point Protocol Working

    '
- title: Group of the Internet Engineering Task Force (IETF). The working group
  contents:
  - 'Group of the Internet Engineering Task Force (IETF). The working group

    '
- title: 'can be contacted via the chair:'
  contents:
  - "can be contacted via the chair:\n   Russ Hobby\n   UC Davis\n   Computing Services\n\
    \   Davis, CA 95616\n   Phone: (916) 752-0236\n   EMail: rdhobby@ucdavis.edu\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to the author:\n\
    \      Drew D. Perkins\n      Carnegie Mellon University\n      Networking and\
    \ Communications\n      Pittsburgh, PA 15213\n      Phone: (412) 268-8576\n  \
    \    EMail: ddp@andrew.cmu.edu\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many people spent significant time helping to develop the\
    \ Point-to-\n   Point Protocol.  The complete list of people is too numerous to\
    \ list,\n   but the following people deserve special thanks: Ken Adelman (TGV),\n\
    \   Craig Fox (NSC), Phill Gross (NRI), Russ Hobby (UC Davis), David\n   Kaufman\
    \ (Proteon), John LoVerso (Xylogics), Bill Melohn (Sun\n   Microsystems), Mike\
    \ Patton (MIT), Drew Perkins (CMU), Greg Satz\n   (cisco systems) and Asher Waldfogel\
    \ (Wellfleet).\n"
