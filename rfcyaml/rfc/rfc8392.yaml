- contents:
  - '                          CBOR Web Token (CWT)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   CBOR Web Token (CWT) is a compact means of representing claims to
    be\n   transferred between two parties.  The claims in a CWT are encoded in\n
    \  the Concise Binary Object Representation (CBOR), and CBOR Object\n   Signing
    and Encryption (COSE) is used for added application-layer\n   security protection.
    \ A claim is a piece of information asserted\n   about a subject and is represented
    as a name/value pair consisting of\n   a claim name and a claim value.  CWT is
    derived from JSON Web Token\n   (JWT) but uses CBOR rather than JSON.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8392.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  CBOR-Related Terminology  . . . . . . . . . . . . .
    . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   3.  Claims  . . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n
    \    3.1.  Registered Claims . . . . . . . . . . . . . . . . . . . .   5\n       3.1.1.
    \ iss (Issuer) Claim  . . . . . . . . . . . . . . . . .   5\n       3.1.2.  sub
    (Subject) Claim . . . . . . . . . . . . . . . . .   6\n       3.1.3.  aud (Audience)
    Claim  . . . . . . . . . . . . . . . .   6\n       3.1.4.  exp (Expiration Time)
    Claim . . . . . . . . . . . . .   6\n       3.1.5.  nbf (Not Before) Claim  .
    . . . . . . . . . . . . . .   6\n       3.1.6.  iat (Issued At) Claim . . . .
    . . . . . . . . . . . .   6\n       3.1.7.  cti (CWT ID) Claim  . . . . . . .
    . . . . . . . . . .   6\n   4.  Summary of the Claim Names, Keys, and Value Types
    . . . . . .   7\n   5.  CBOR Tags and Claim Values  . . . . . . . . . . . . .
    . . . .   7\n   6.  CWT CBOR Tag  . . . . . . . . . . . . . . . . . . . . . .
    . .   7\n   7.  Creating and Validating CWTs  . . . . . . . . . . . . . . . .
    \  8\n     7.1.  Creating a CWT  . . . . . . . . . . . . . . . . . . . . .   8\n
    \    7.2.  Validating a CWT  . . . . . . . . . . . . . . . . . . . .   9\n   8.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  10\n   9.  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .  11\n     9.1.  CBOR
    Web Token (CWT) Claims Registry  . . . . . . . . . .  11\n       9.1.1.  Registration
    Template . . . . . . . . . . . . . . . .  12\n       9.1.2.  Initial Registry
    Contents . . . . . . . . . . . . . .  12\n     9.2.  Media Type Registration .
    . . . . . . . . . . . . . . . .  14\n       9.2.1.  Registry Contents . . . .
    . . . . . . . . . . . . . .  14\n     9.3.  CoAP Content-Formats Registration
    . . . . . . . . . . . .  14\n       9.3.1.  Registry Contents . . . . . . . .
    . . . . . . . . . .  15\n     9.4.  CBOR Tag registration . . . . . . . . . .
    . . . . . . . .  15\n       9.4.1.  Registry Contents . . . . . . . . . . . .
    . . . . . .  15\n   10. References  . . . . . . . . . . . . . . . . . . . . .
    . . . .  15\n     10.1.  Normative References . . . . . . . . . . . . . . . .
    . .  15\n     10.2.  Informative References . . . . . . . . . . . . . . . . .
    \ 16\n   Appendix A.  Examples . . . . . . . . . . . . . . . . . . . . . .  17\n
    \    A.1.  Example CWT Claims Set  . . . . . . . . . . . . . . . . .  17\n     A.2.
    \ Example Keys  . . . . . . . . . . . . . . . . . . . . . .  17\n       A.2.1.
    \ 128-Bit Symmetric Key . . . . . . . . . . . . . . . .  18\n       A.2.2.  256-Bit
    Symmetric Key . . . . . . . . . . . . . . . .  18\n       A.2.3.  Elliptic Curve
    Digital Signature Algorithm (ECDSA)\n               P-256 256-Bit COSE Key  .
    . . . . . . . . . . . . . .  19\n     A.3.  Example Signed CWT  . . . . . . .
    . . . . . . . . . . . .  19\n     A.4.  Example MACed CWT . . . . . . . . . .
    . . . . . . . . . .  20\n     A.5.  Example Encrypted CWT . . . . . . . . . .
    . . . . . . . .  21\n     A.6.  Example Nested CWT  . . . . . . . . . . . . .
    . . . . . .  22\n     A.7.  Example MACed CWT with a Floating-Point Value . .
    . . . .  23\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .
    . .  24\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .
    \ 25\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The JSON Web Token (JWT) [RFC7519] is a standardized security
    token\n   format that has found use in OAuth 2.0 and OpenID Connect\n   deployments,
    among other applications.  JWT uses JSON Web Signature\n   (JWS) [RFC7515] and
    JSON Web Encryption (JWE) [RFC7516] to secure the\n   contents of the JWT, which
    is a set of claims represented in JSON.\n   The use of JSON for encoding information
    is popular for Web and\n   native applications, but it is considered inefficient
    for some\n   Internet of Things (IoT) systems that use low-power radio\n   technologies.\n
    \  An alternative encoding of claims is defined in this document.\n   Instead
    of using JSON, as provided by JWTs, this specification uses\n   CBOR [RFC7049]
    and calls this new structure \"CBOR Web Token (CWT)\",\n   which is a compact
    means of representing secured claims to be\n   transferred between two parties.
    \ CWT is closely related to JWT.  It\n   references the JWT claims and both its
    name and pronunciation are\n   derived from JWT (the suggested pronunciation of
    CWT is the same as\n   the English word \"cot\").  To protect the claims contained
    in CWTs,\n   the CBOR Object Signing and Encryption (COSE) [RFC8152] specification\n
    \  is used.\n"
  - contents:
    - "1.1.  CBOR-Related Terminology\n   In JSON, maps are called objects and only
      have one kind of map key: a\n   string.  CBOR uses strings, negative integers,
      and unsigned integers\n   as map keys.  The integers are used for compactness
      of encoding and\n   easy comparison.  The inclusion of strings allows for an
      additional\n   range of short encoded values to be used.\n"
    title: 1.1.  CBOR-Related Terminology
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   This document reuses terminology from JWT [RFC7519] and COSE\n
    \  [RFC8152].\n   StringOrURI\n      The \"StringOrURI\" term in this specification
    has the same meaning\n      and processing rules as the JWT \"StringOrURI\" term
    defined in\n      Section 2 of [RFC7519], except that it is represented as a CBOR\n
    \     text string instead of a JSON text string.\n   NumericDate\n      The \"NumericDate\"
    term in this specification has the same meaning\n      and processing rules as
    the JWT \"NumericDate\" term defined in\n      Section 2 of [RFC7519], except
    that it is represented as a CBOR\n      numeric date (from Section 2.4.1 of [RFC7049])
    instead of a JSON\n      number.  The encoding is modified so that the leading
    tag 1\n      (epoch-based date/time) MUST be omitted.\n   Claim Name\n      The
    human-readable name used to identify a claim.\n   Claim Key\n      The CBOR map
    key used to identify a claim.\n   Claim Value\n      The CBOR map value representing
    the value of the claim.\n   CWT Claims Set\n      The CBOR map that contains the
    claims conveyed by the CWT.\n"
  title: 2.  Terminology
- contents:
  - "3.  Claims\n   The set of claims that a CWT must contain to be considered valid
    is\n   context dependent and is outside the scope of this specification.\n   Specific
    applications of CWTs will require implementations to\n   understand and process
    some claims in particular ways.  However, in\n   the absence of such requirements,
    all claims that are not understood\n   by implementations MUST be ignored.\n   To
    keep CWTs as small as possible, the Claim Keys are represented\n   using integers
    or text strings.  Section 4 summarizes all keys used\n   to identify the claims
    defined in this document.\n"
  - contents:
    - "3.1.  Registered Claims\n   None of the claims defined below are intended to
      be mandatory to use\n   or implement.  Rather, they provide a starting point
      for a set of\n   useful, interoperable claims.  Applications using CWTs should
      define\n   which specific claims they use and when they are required or\n   optional.\n"
    - contents:
      - "3.1.1.  iss (Issuer) Claim\n   The \"iss\" (issuer) claim has the same meaning
        and processing rules as\n   the \"iss\" claim defined in Section 4.1.1 of
        [RFC7519], except that\n   the value is a StringOrURI, as defined in Section
        2 of this\n   specification.  The Claim Key 1 is used to identify this claim.\n"
      title: 3.1.1.  iss (Issuer) Claim
    - contents:
      - "3.1.2.  sub (Subject) Claim\n   The \"sub\" (subject) claim has the same
        meaning and processing rules\n   as the \"sub\" claim defined in Section 4.1.2
        of [RFC7519], except that\n   the value is a StringOrURI, as defined in Section
        2 of this\n   specification.  The Claim Key 2 is used to identify this claim.\n"
      title: 3.1.2.  sub (Subject) Claim
    - contents:
      - "3.1.3.  aud (Audience) Claim\n   The \"aud\" (audience) claim has the same
        meaning and processing rules\n   as the \"aud\" claim defined in Section 4.1.3
        of [RFC7519], except that\n   the value of the audience claim is a StringOrURI
        when it is not an\n   array or each of the audience array element values is
        a StringOrURI\n   when the audience claim value is an array.  (StringOrURI
        is defined\n   in Section 2 of this specification.)  The Claim Key 3 is used
        to\n   identify this claim.\n"
      title: 3.1.3.  aud (Audience) Claim
    - contents:
      - "3.1.4.  exp (Expiration Time) Claim\n   The \"exp\" (expiration time) claim
        has the same meaning and processing\n   rules as the \"exp\" claim defined
        in Section 4.1.4 of [RFC7519],\n   except that the value is a NumericDate,
        as defined in Section 2 of\n   this specification.  The Claim Key 4 is used
        to identify this claim.\n"
      title: 3.1.4.  exp (Expiration Time) Claim
    - contents:
      - "3.1.5.  nbf (Not Before) Claim\n   The \"nbf\" (not before) claim has the
        same meaning and processing\n   rules as the \"nbf\" claim defined in Section
        4.1.5 of [RFC7519],\n   except that the value is a NumericDate, as defined
        in Section 2 of\n   this specification.  The Claim Key 5 is used to identify
        this claim.\n"
      title: 3.1.5.  nbf (Not Before) Claim
    - contents:
      - "3.1.6.  iat (Issued At) Claim\n   The \"iat\" (issued at) claim has the same
        meaning and processing rules\n   as the \"iat\" claim defined in Section 4.1.6
        of [RFC7519], except that\n   the value is a NumericDate, as defined in Section
        2 of this\n   specification.  The Claim Key 6 is used to identify this claim.\n"
      title: 3.1.6.  iat (Issued At) Claim
    - contents:
      - "3.1.7.  cti (CWT ID) Claim\n   The \"cti\" (CWT ID) claim has the same meaning
        and processing rules as\n   the \"jti\" claim defined in Section 4.1.7 of
        [RFC7519], except that\n   the value is a byte string.  The Claim Key 7 is
        used to identify this\n   claim.\n"
      title: 3.1.7.  cti (CWT ID) Claim
    title: 3.1.  Registered Claims
  title: 3.  Claims
- contents:
  - "4.  Summary of the Claim Names, Keys, and Value Types\n             +------+-----+----------------------------------+\n
    \            | Name | Key | Value Type                       |\n             +------+-----+----------------------------------+\n
    \            | iss  | 1   | text string                      |\n             |
    sub  | 2   | text string                      |\n             | aud  | 3   | text
    string                      |\n             | exp  | 4   | integer or floating-point
    number |\n             | nbf  | 5   | integer or floating-point number |\n             |
    iat  | 6   | integer or floating-point number |\n             | cti  | 7   | byte
    string                      |\n             +------+-----+----------------------------------+\n
    \       Table 1: Summary of the Claim Names, Keys, and Value Types\n"
  title: 4.  Summary of the Claim Names, Keys, and Value Types
- contents:
  - "5.  CBOR Tags and Claim Values\n   The claim values defined in this specification
    MUST NOT be prefixed\n   with any CBOR tag.  For instance, while CBOR tag 1 (epoch-based
    date/\n   time) could logically be prefixed to values of the \"exp\", \"nbf\",
    and\n   \"iat\" claims, this is unnecessary since the representation of the\n
    \  claim values is already specified by the claim definitions.  Tagging\n   claim
    values would only take up extra space without adding\n   information.  However,
    this does not prohibit future claim\n   definitions from requiring the use of
    CBOR tags for those specific\n   claims.\n"
  title: 5.  CBOR Tags and Claim Values
- contents:
  - "6.  CWT CBOR Tag\n   How to determine that a CBOR data structure is a CWT is
    application\n   dependent.  In some cases, this information is known from the\n
    \  application context, such as from the position of the CWT in a data\n   structure
    at which the value must be a CWT.  One method of indicating\n   that a CBOR object
    is a CWT is the use of the \"application/cwt\"\n   content type by a transport
    protocol.\n   This section defines the CWT CBOR tag as another means for\n   applications
    to declare that a CBOR data structure is a CWT.  Its use\n   is optional and is
    intended for use in cases in which this\n   information would not otherwise be
    known.\n   If present, the CWT tag MUST prefix a tagged object using one of the\n
    \  COSE CBOR tags.  In this example, the COSE_Mac0 tag is used.  The\n   actual
    COSE_Mac0 object has been excluded from this example.\n   / CWT CBOR tag / 61(\n
    \    / COSE_Mac0 CBOR tag / 17(\n       / COSE_Mac0 object /\n     )\n   )\n                    Figure
    1: Example of CWT Tag Usage\n"
  title: 6.  CWT CBOR Tag
- contents:
  - '7.  Creating and Validating CWTs

    '
  - contents:
    - "7.1.  Creating a CWT\n   To create a CWT, the following steps are performed.
      \ The order of the\n   steps is not significant in cases where there are no
      dependencies\n   between the inputs and outputs of the steps.\n   1.  Create
      a CWT Claims Set containing the desired claims.\n   2.  Let the Message be the
      binary representation of the CWT Claims\n       Set.\n   3.  Create a COSE Header
      containing the desired set of Header\n       Parameters.  The COSE Header MUST
      be valid per the [RFC8152]\n       specification.\n   4.  Depending upon whether
      the CWT is signed, MACed, or encrypted,\n       there are three cases:\n       *
      \ If the CWT is signed, create a COSE_Sign/COSE_Sign1 object\n          using
      the Message as the COSE_Sign/COSE_Sign1 Payload; all\n          steps specified
      in [RFC8152] for creating a COSE_Sign/\n          COSE_Sign1 object MUST be
      followed.\n       *  Else, if the CWT is MACed, create a COSE_Mac/COSE_Mac0
      object\n          using the Message as the COSE_Mac/COSE_Mac0 Payload; all steps\n
      \         specified in [RFC8152] for creating a COSE_Mac/COSE_Mac0\n          object
      MUST be followed.\n       *  Else, if the CWT is a COSE_Encrypt/COSE_Encrypt0
      object,\n          create a COSE_Encrypt/COSE_Encrypt0 using the Message as
      the\n          plaintext for the COSE_Encrypt/COSE_Encrypt0 object; all steps\n
      \         specified in [RFC8152] for creating a COSE_Encrypt/\n          COSE_Encrypt0
      object MUST be followed.\n   5.  If a nested signing, MACing, or encryption
      operation will be\n       performed, let the Message be the tagged COSE_Sign/COSE_Sign1,\n
      \      COSE_Mac/COSE_Mac0, or COSE_Encrypt/COSE_Encrypt0, and return to\n       Step
      3.\n   6.  If needed by the application, prepend the COSE object with the\n
      \      appropriate COSE CBOR tag to indicate the type of the COSE\n       object.
      \ If needed by the application, prepend the COSE object\n       with the CWT
      CBOR tag to indicate that the COSE object is a CWT.\n"
    title: 7.1.  Creating a CWT
  - contents:
    - "7.2.  Validating a CWT\n   When validating a CWT, the following steps are performed.
      \ The order\n   of the steps is not significant in cases where there are no\n
      \  dependencies between the inputs and outputs of the steps.  If any of\n   the
      listed steps fail, then the CWT MUST be rejected -- that is,\n   treated by
      the application as invalid input.\n   1.  Verify that the CWT is a valid CBOR
      object.\n   2.  If the object begins with the CWT CBOR tag, remove it and verify\n
      \      that one of the COSE CBOR tags follows it.\n   3.  If the object is tagged
      with one of the COSE CBOR tags, remove it\n       and use it to determine the
      type of the CWT, COSE_Sign/\n       COSE_Sign1, COSE_Mac/COSE_Mac0, or COSE_Encrypt/COSE_Encrypt0.\n
      \      If the object does not have a COSE CBOR tag, the COSE message\n       type
      is determined from the application context.\n   4.  Verify that the resulting
      COSE Header includes only parameters\n       and values whose syntax and semantics
      are both understood and\n       supported or that are specified as being ignored
      when not\n       understood.\n   5.  Depending upon whether the CWT is a signed,
      MACed, or encrypted,\n       there are three cases:\n       *  If the CWT is
      a COSE_Sign/COSE_Sign1, follow the steps\n          specified in Section 4 of
      [RFC8152] (\"Signing Objects\") for\n          validating a COSE_Sign/COSE_Sign1
      object.  Let the Message be\n          the COSE_Sign/COSE_Sign1 payload.\n       *
      \ Else, if the CWT is a COSE_Mac/COSE_Mac0, follow the steps\n          specified
      in Section 6 of [RFC8152] (\"MAC Objects\") for\n          validating a COSE_Mac/COSE_Mac0
      object.  Let the Message be\n          the COSE_Mac/COSE_Mac0 payload.\n       *
      \ Else, if the CWT is a COSE_Encrypt/COSE_Encrypt0 object,\n          follow
      the steps specified in Section 5 of [RFC8152]\n          (\"Encryption Objects\")
      for validating a COSE_Encrypt/\n          COSE_Encrypt0 object.  Let the Message
      be the resulting\n          plaintext.\n   6.  If the Message begins with a
      COSE CBOR tag, then the Message is a\n       CWT that was the subject of nested
      signing, MACing, or encryption\n       operations.  In this case, return to
      Step 1, using the Message as\n       the CWT.\n   7.  Verify that the Message
      is a valid CBOR map; let the CWT Claims\n       Set be this CBOR map.\n"
    title: 7.2.  Validating a CWT
  title: 7.  Creating and Validating CWTs
- contents:
  - "8.  Security Considerations\n   The security of the CWT relies upon on the protections
    offered by\n   COSE.  Unless the claims in a CWT are protected, an adversary can\n
    \  modify, add, or remove claims.\n   Since the claims conveyed in a CWT may be
    used to make authorization\n   decisions, it is not only important to protect
    the CWT in transit but\n   also to ensure that the recipient can authenticate
    the party that\n   assembled the claims and created the CWT.  Without trust of
    the\n   recipient in the party that created the CWT, no sensible\n   authorization
    decision can be made.  Furthermore, the creator of the\n   CWT needs to carefully
    evaluate each claim value prior to including\n   it in the CWT so that the recipient
    can be assured of the validity of\n   the information provided.\n   Syntactically,
    the signing and encryption operations for Nested CWTs\n   may be applied in any
    order; however, if both signing and encryption\n   are necessary, producers normally
    should sign the message and then\n   encrypt the result (thus encrypting the signature).
    \ This prevents\n   attacks in which the signature is stripped, leaving just an
    encrypted\n   message, as well as providing privacy for the signer.  Furthermore,\n
    \  signatures over encrypted text are not considered valid in many\n   jurisdictions.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  IANA Considerations

    '
  - contents:
    - "9.1.  CBOR Web Token (CWT) Claims Registry\n   IANA has created the \"CBOR
      Web Token (CWT) Claims\" registry\n   [IANA.CWT.Claims].\n   Registration requests
      are evaluated using the criteria described in\n   the Claim Key instructions
      in the registration template below after a\n   three-week review period on the
      cwt-reg-review@ietf.org mailing list,\n   on the advice of one or more Designated
      Experts [RFC8126].  However,\n   to allow for the allocation of values prior
      to publication, the\n   Designated Experts may approve registration once they
      are satisfied\n   that such a specification will be published.\n   Registration
      requests sent to the mailing list for review should use\n   an appropriate subject
      (e.g., \"Request to register claim: example\").\n   Registration requests that
      are undetermined for a period longer than\n   21 days can be brought to the
      IESG's attention (using the\n   iesg@ietf.org mailing list) for resolution.\n
      \  Criteria that should be applied by the Designated Experts includes\n   determining
      whether the proposed registration duplicates existing\n   functionality, whether
      it is likely to be of general applicability or\n   whether it is useful only
      for a single application, and whether the\n   registration description is clear.
      \ Registrations for the limited set\n   of values between -256 and 255 and strings
      of length 1 are to be\n   restricted to claims with general applicability.\n
      \  IANA must only accept registry updates from the Designated Experts\n   and
      should direct all requests for registration to the review mailing\n   list.\n
      \  It is suggested that multiple Designated Experts be appointed who are\n   able
      to represent the perspectives of different applications using\n   this specification
      in order to enable broadly informed review of\n   registration decisions.  In
      cases where a registration decision could\n   be perceived as creating a conflict
      of interest for a particular\n   Expert, that Expert should defer to the judgment
      of the other\n   Experts.\n   Since a high degree of overlap is expected between
      the contents of\n   the \"CBOR Web Token (CWT) Claims\" registry and the \"JSON
      Web Token\n   Claims\" registry, overlap in the corresponding pools of Designated\n
      \  Experts would be useful to help ensure that an appropriate level of\n   coordination
      between the registries is maintained.\n"
    - contents:
      - "9.1.1.  Registration Template\n   Claim Name:\n      The human-readable name
        requested (e.g., \"iss\").\n   Claim Description:\n      Brief description
        of the claim (e.g., \"Issuer\").\n   JWT Claim Name:\n      Claim Name of
        the equivalent JWT claim, as registered in\n      [IANA.JWT.Claims].  CWT
        claims should normally have a\n      corresponding JWT claim.  If a corresponding
        JWT claim would not\n      make sense, the Designated Experts can choose to
        accept\n      registrations for which the JWT Claim Name is listed as \"N/A\".\n
        \  Claim Key:\n      CBOR map key for the claim.  Different ranges of values
        use\n      different registration policies [RFC8126].  Integer values from\n
        \     -256 to 255 and strings of length 1 are designated as Standards\n      Action.
        \ Integer values from -65536 to -257 and from 256 to 65535\n      along with
        strings of length 2 are designated as Specification\n      Required.  Integer
        values greater than 65535 and strings of length\n      greater than 2 are
        designated as Expert Review.  Integer values\n      less than -65536 are marked
        as Private Use.\n   Claim Value Type(s):\n      CBOR types that can be used
        for the claim value.\n   Change Controller:\n      For Standards Track RFCs,
        list the \"IESG\".  For others, give the\n      name of the responsible party.
        \ Other details (e.g., postal\n      address, email address, home page URI)
        may also be included.\n   Specification Document(s):\n      Reference to the
        document or documents that specify the parameter,\n      preferably including
        URIs that can be used to retrieve copies of\n      the documents.  An indication
        of the relevant sections may also be\n      included but is not required.\n"
      title: 9.1.1.  Registration Template
    - contents:
      - "9.1.2.  Initial Registry Contents\n   o  Claim Name: (RESERVED)\n   o  Claim
        Description: This registration reserves the key value 0.\n   o  JWT Claim
        Name: N/A\n   o  Claim Key: 0\n   o  Claim Value Type(s): N/A\n   o  Change
        Controller: IESG\n   o  Specification Document(s): [RFC8392]\n   o  Claim
        Name: iss\n   o  Claim Description: Issuer\n   o  JWT Claim Name: iss\n   o
        \ Claim Key: 1\n   o  Claim Value Type(s): text string\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 3.1.1 of [RFC8392]\n   o  Claim
        Name: sub\n   o  Claim Description: Subject\n   o  JWT Claim Name: sub\n   o
        \ Claim Key: 2\n   o  Claim Value Type(s): text string\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 3.1.2 of [RFC8392]\n   o  Claim
        Name: aud\n   o  Claim Description: Audience\n   o  JWT Claim Name: aud\n
        \  o  Claim Key: 3\n   o  Claim Value Type(s): text string\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 3.1.3 of [RFC8392]\n   o  Claim
        Name: exp\n   o  Claim Description: Expiration Time\n   o  JWT Claim Name:
        exp\n   o  Claim Key: 4\n   o  Claim Value Type(s): integer or floating-point
        number\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        3.1.4 of [RFC8392]\n   o  Claim Name: nbf\n   o  Claim Description: Not Before\n
        \  o  JWT Claim Name: nbf\n   o  Claim Key: 5\n   o  Claim Value Type(s):
        integer or floating-point number\n   o  Change Controller: IESG\n   o  Specification
        Document(s): Section 3.1.5 of [RFC8392]\n   o  Claim Name: iat\n   o  Claim
        Description: Issued At\n   o  JWT Claim Name: iat\n   o  Claim Key: 6\n   o
        \ Claim Value Type(s): integer or floating-point number\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 3.1.6 of [RFC8392]\n   o  Claim
        Name: cti\n   o  Claim Description: CWT ID\n   o  JWT Claim Name: jti\n   o
        \ Claim Key: 7\n   o  Claim Value Type(s): byte string\n   o  Change Controller:
        IESG\n   o  Specification Document(s): Section 3.1.7 of [RFC8392]\n"
      title: 9.1.2.  Initial Registry Contents
    title: 9.1.  CBOR Web Token (CWT) Claims Registry
  - contents:
    - "9.2.  Media Type Registration\n   IANA has registered the \"application/cwt\"
      media type in the \"Media\n   Types\" registry [IANA.MediaTypes] in the manner
      described in RFC 6838\n   [RFC6838], which can be used to indicate that the
      content is a CWT.\n"
    - contents:
      - "9.2.1.  Registry Contents\n   o  Type name: application\n   o  Subtype name:
        cwt\n   o  Required parameters: N/A\n   o  Optional parameters: N/A\n   o
        \ Encoding considerations: binary\n   o  Security considerations: See the
        Security Considerations section\n      of [RFC8392]\n   o  Interoperability
        considerations: N/A\n   o  Published specification: [RFC8392]\n   o  Applications
        that use this media type: IoT applications sending\n      security tokens
        over HTTP(S), CoAP(S), and other transports.\n   o  Fragment identifier considerations:
        N/A\n   o  Additional information:\n         Magic number(s): N/A\n         File
        extension(s): N/A\n         Macintosh file type code(s): N/A\n   o  Person
        & email address to contact for further information:\n      IESG, iesg@ietf.org\n
        \  o  Intended usage: COMMON\n   o  Restrictions on usage: none\n   o  Author:
        Michael B. Jones, mbj@microsoft.com\n   o  Change controller: IESG\n   o  Provisional
        registration?  No\n"
      title: 9.2.1.  Registry Contents
    title: 9.2.  Media Type Registration
  - contents:
    - "9.3.  CoAP Content-Formats Registration\n   IANA has registered the CoAP Content-Format
      ID for the \"application/\n   cwt\" media type in the \"CoAP Content-Formats\"
      registry\n   [IANA.CoAP.Content-Formats].\n"
    - contents:
      - "9.3.1.  Registry Contents\n   o  Media Type: application/cwt\n   o  Encoding:
        -\n   o  Id: 61\n   o  Reference: [RFC8392]\n"
      title: 9.3.1.  Registry Contents
    title: 9.3.  CoAP Content-Formats Registration
  - contents:
    - "9.4.  CBOR Tag registration\n   IANA has registered the CWT CBOR tag in the
      \"CBOR Tags\" registry\n   [IANA.CBOR.Tags].\n"
    - contents:
      - "9.4.1.  Registry Contents\n   o  CBOR Tag: 61\n   o  Data Item: CBOR Web
        Token (CWT)\n   o  Semantics: CBOR Web Token (CWT), as defined in [RFC8392]\n
        \  o  Reference: [RFC8392]\n   o  Point of Contact: Michael B.  Jones, mbj@microsoft.com\n"
      title: 9.4.1.  Registry Contents
    title: 9.4.  CBOR Tag registration
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [IANA.CBOR.Tags]\n              IANA, \"Concise
      Binary Object Representation (CBOR) Tags\",\n              <http://www.iana.org/assignments/cbor-tags/>.\n
      \  [IANA.CoAP.Content-Formats]\n              IANA, \"CoAP Content-Formats\",\n
      \             <https://www.iana.org/assignments/core-parameters/>.\n   [IANA.CWT.Claims]\n
      \             IANA, \"CBOR Web Token (CWT) Claims\",\n              <http://www.iana.org/assignments/cwt>.\n
      \  [IANA.MediaTypes]\n              IANA, \"Media Types\",\n              <http://www.iana.org/assignments/media-types>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC7049]  Bormann,
      C. and P. Hoffman, \"Concise Binary Object\n              Representation (CBOR)\",
      RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC8152]  Schaad, J., \"CBOR Object Signing and Encryption (COSE)\",\n              RFC
      8152, DOI 10.17487/RFC8152, July 2017,\n              <https://www.rfc-editor.org/info/rfc8152>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [IANA.JWT.Claims]\n              IANA, \"JSON
      Web Token Claims\",\n              <http://www.iana.org/assignments/jwt>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC7515]
      \ Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <https://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC7516]  Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n
      \             RFC 7516, DOI 10.17487/RFC7516, May 2015,\n              <https://www.rfc-editor.org/info/rfc7516>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Examples\n   This appendix includes a set of CWT examples that show
    how the CWT\n   Claims Set can be protected.  There are examples that are signed,\n
    \  MACed, encrypted, and that use nested signing and encryption.  To\n   make
    the examples easier to read, they are presented both as hex\n   strings and in
    the extended CBOR diagnostic notation described in\n   Section 6 of [RFC7049].\n
    \  Where a byte string is to carry an embedded CBOR-encoded item, the\n   diagnostic
    notation for this CBOR data item can be enclosed in '<<'\n   and '>>' to notate
    the byte string resulting from encoding the data\n   item, e.g., h'63666F6F' translates
    to <<\"foo\">>.\n"
  - contents:
    - "A.1.  Example CWT Claims Set\n   The CWT Claims Set used for the different
      examples displays usage of\n   all the defined claims.  For signed and MACed
      examples, the CWT\n   Claims Set is the CBOR encoding as a byte string.\n   a70175636f61703a2f2f61732e6578616d706c652e636f6d02656572696b7703\n
      \  7818636f61703a2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0\n   051a5610d9f0061a5610d9f007420b71\n
      \             Figure 2: Example CWT Claims Set as Hex String\n   {\n     / iss
      / 1: \"coap://as.example.com\",\n     / sub / 2: \"erikw\",\n     / aud / 3:
      \"coap://light.example.com\",\n     / exp / 4: 1444064944,\n     / nbf / 5:
      1443944944,\n     / iat / 6: 1443944944,\n     / cti / 7: h'0b71'\n   }\n       Figure
      3: Example CWT Claims Set in CBOR Diagnostic Notation\n"
    title: A.1.  Example CWT Claims Set
  - contents:
    - "A.2.  Example Keys\n   This section contains the keys used to sign, MAC, and
      encrypt the\n   messages in this appendix.  Line breaks are for display purposes\n
      \  only.\n"
    - contents:
      - "A.2.1.  128-Bit Symmetric Key\n   a42050231f4c4d4d3051fdc2ec0a3851d5b3830104024c53796d6d6574726963\n
        \  313238030a\n            Figure 4: 128-Bit Symmetric COSE_Key as Hex String\n
        \  {\n     / k /   -1: h'231f4c4d4d3051fdc2ec0a3851d5b383'\n     / kty /  1:
        4 / Symmetric /,\n     / kid /  2: h'53796d6d6574726963313238' / 'Symmetric128'
        /,\n     / alg /  3: 10 / AES-CCM-16-64-128 /\n   }\n     Figure 5: 128-Bit
        Symmetric COSE_Key in CBOR Diagnostic Notation\n"
      title: A.2.1.  128-Bit Symmetric Key
    - contents:
      - "A.2.2.  256-Bit Symmetric Key\n   a4205820403697de87af64611c1d32a05dab0fe1fcb715a86ab435f1ec99192d\n
        \  795693880104024c53796d6d6574726963323536030a\n            Figure 6: 256-Bit
        Symmetric COSE_Key as Hex String\n   {\n     / k /   -1: h'403697de87af64611c1d32a05dab0fe1fcb715a86ab435f1\n
        \                  ec99192d79569388'\n     / kty /  1: 4 / Symmetric /,\n
        \    / kid /  4: h'53796d6d6574726963323536' / 'Symmetric256' /,\n     / alg
        /  3: 4 / HMAC 256/64 /\n   }\n     Figure 7: 256-Bit Symmetric COSE_Key in
        CBOR Diagnostic Notation\n"
      title: A.2.2.  256-Bit Symmetric Key
    - contents:
      - "A.2.3.  Elliptic Curve Digital Signature Algorithm (ECDSA) P-256 256-Bit\n
        \       COSE Key\n   a72358206c1382765aec5358f117733d281c1c7bdc39884d04a45a1e6c67c858\n
        \  bc206c1922582060f7f1a780d8a783bfb7a2dd6b2796e8128dbbcef9d3d168db\n   9529971a36e7b9215820143329cce7868e416927599cf65a34f3ce2ffda55a7e\n
        \  ca69ed8919a394d42f0f2001010202524173796d6d6574726963454344534132\n   35360326\n
        \             Figure 8: ECDSA 256-Bit COSE Key as Hex String\n   {\n     /
        d /   -4: h'6c1382765aec5358f117733d281c1c7bdc39884d04a45a1e\n                   6c67c858bc206c19',\n
        \    / y /   -3: h'60f7f1a780d8a783bfb7a2dd6b2796e8128dbbcef9d3d168\n                   db9529971a36e7b9',\n
        \    / x /   -2: h'143329cce7868e416927599cf65a34f3ce2ffda55a7eca69\n                   ed8919a394d42f0f',\n
        \    / crv / -1: 1 / P-256 /,\n     / kty /  1: 2 / EC2 /,\n     / kid /  2:
        h'4173796d6d657472696345434453413\n                   23536' / 'AsymmetricECDSA256'
        /,\n     / alg /  3: -7 / ECDSA 256 /\n   }\n       Figure 9: ECDSA 256-Bit
        COSE Key in CBOR Diagnostic Notation\n"
      title: A.2.3.  Elliptic Curve Digital Signature Algorithm (ECDSA) P-256 256-Bit
    title: A.2.  Example Keys
  - contents:
    - "A.3.  Example Signed CWT\n   This section shows a signed CWT with a single
      recipient and a full\n   CWT Claims Set.\n   The signature is generated using
      the private key listed in\n   Appendix A.2.3, and it can be validated using
      the public key from\n   Appendix A.2.3.  Line breaks are for display purposes
      only.\n   d28443a10126a104524173796d6d657472696345434453413235365850a701756\n
      \  36f61703a2f2f61732e6578616d706c652e636f6d02656572696b77037818636f\n   61703a2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0051a5610d\n
      \  9f0061a5610d9f007420b7158405427c1ff28d23fbad1f29c4c7c6a555e601d6f\n   a29f9179bc3d7438bacaca5acd08c8d4d4f96131680c429a01f85951ecee743a5\n
      \  2b9b63632c57209120e1c9e30\n                    Figure 10: Signed CWT as Hex
      String\n   18(\n     [\n       / protected / << {\n         / alg / 1: -7 /
      ECDSA 256 /\n       } >>,\n       / unprotected / {\n         / kid / 4: h'4173796d6d657472696345434453413\n
      \                     23536' / 'AsymmetricECDSA256' /\n       },\n       / payload
      / << {\n         / iss / 1: \"coap://as.example.com\",\n         / sub / 2:
      \"erikw\",\n         / aud / 3: \"coap://light.example.com\",\n         / exp
      / 4: 1444064944,\n         / nbf / 5: 1443944944,\n         / iat / 6: 1443944944,\n
      \        / cti / 7: h'0b71'\n       } >>,\n       / signature / h'5427c1ff28d23fbad1f29c4c7c6a555e601d6fa29f\n
      \                      9179bc3d7438bacaca5acd08c8d4d4f96131680c42\n                       9a01f85951ecee743a52b9b63632c57209120e1c9e\n
      \                      30'\n     ]\n   )\n             Figure 11: Signed CWT
      in CBOR Diagnostic Notation\n"
    title: A.3.  Example Signed CWT
  - contents:
    - "A.4.  Example MACed CWT\n   This section shows a MACed CWT with a single recipient,
      a full CWT\n   Claims Set, and a CWT tag.\n   The MAC is generated using the
      256-bit symmetric key from\n   Appendix A.2.2 with a 64-bit truncation.  Line
      breaks are for display\n   purposes only.\n   d83dd18443a10104a1044c53796d6d65747269633235365850a70175636f6170\n
      \  3a2f2f61732e6578616d706c652e636f6d02656572696b77037818636f61703a\n   2f2f6c696768742e6578616d706c652e636f6d041a5612aeb0051a5610d9f006\n
      \  1a5610d9f007420b7148093101ef6d789200\n              Figure 12: MACed CWT
      with CWT Tag as Hex String\n   61(\n     17(\n       [\n         / protected
      / << {\n           / alg / 1: 4 / HMAC-256-64 /\n         } >>,\n         /
      unprotected / {\n           / kid / 4: h'53796d6d6574726963323536' / 'Symmetric256'
      /\n         },\n         / payload / << {\n           / iss / 1: \"coap://as.example.com\",\n
      \          / sub / 2: \"erikw\",\n           / aud / 3: \"coap://light.example.com\",\n
      \          / exp / 4: 1444064944,\n           / nbf / 5: 1443944944,\n           /
      iat / 6: 1443944944,\n           / cti / 7: h'0b71'\n         } >>,\n         /
      tag / h'093101ef6d789200'\n       ]\n     )\n   )\n       Figure 13: MACed CWT
      with CWT Tag in CBOR Diagnostic Notation\n"
    title: A.4.  Example MACed CWT
  - contents:
    - "A.5.  Example Encrypted CWT\n   This section shows an encrypted CWT with a
      single recipient and a\n   full CWT Claims Set.\n   The encryption is done with
      AES-CCM mode using the 128-bit symmetric\n   key from Appendix A.2.1 with a
      64-bit tag and 13-byte nonce, i.e.,\n   COSE AES-CCM-16-64-128.  Line breaks
      are for display purposes only.\n   d08343a1010aa2044c53796d6d6574726963313238054d99a0d7846e762c49ff\n
      \  e8a63e0b5858b918a11fd81e438b7f973d9e2e119bcb22424ba0f38a80f27562\n   f400ee1d0d6c0fdb559c02421fd384fc2ebe22d7071378b0ea7428fff157444d\n
      \  45f7e6afcda1aae5f6495830c58627087fc5b4974f319a8707a635dd643b\n                  Figure
      14: Encrypted CWT as Hex String\n   16(\n     [\n       / protected / << {\n
      \        / alg / 1: 10 / AES-CCM-16-64-128 /\n       } >>,\n       / unprotected
      / {\n         / kid / 4: h'53796d6d6574726963313238' / 'Symmetric128' /,\n         /
      iv /  5: h'99a0d7846e762c49ffe8a63e0b'\n       },\n       / ciphertext / h'b918a11fd81e438b7f973d9e2e119bcb22424ba0f38\n
      \                       a80f27562f400ee1d0d6c0fdb559c02421fd384fc2e\n                        be22d7071378b0ea7428fff157444d45f7e6afcda1a\n
      \                       ae5f6495830c58627087fc5b4974f319a8707a635dd\n                        643b'\n
      \    ]\n   )\n           Figure 15: Encrypted CWT in CBOR Diagnostic Notation\n"
    title: A.5.  Example Encrypted CWT
  - contents:
    - "A.6.  Example Nested CWT\n   This section shows a Nested CWT, signed and then
      encrypted, with a\n   single recipient and a full CWT Claims Set.\n   The signature
      is generated using the private ECDSA key from\n   Appendix A.2.3, and it can
      be validated using the public ECDSA parts\n   from Appendix A.2.3.  The encryption
      is done with AES-CCM mode using\n   the 128-bit symmetric key from Appendix
      A.2.1 with a 64-bit tag and\n   13-byte nonce, i.e., COSE AES-CCM-16-64-128.
      \ The content type is set\n   to CWT to indicate that there are multiple layers
      of COSE protection\n   before finding the CWT Claims Set. The decrypted ciphertext
      will be a\n   COSE_sign1 structure.  In this example, it is the same one as
      in\n   Appendix A.3, i.e., a Signed CWT Claims Set.  Note that there is no\n
      \  limitation to the number of layers; this is an example with two\n   layers.
      \ Line breaks are for display purposes only.\n   d08343a1010aa2044c53796d6d6574726963313238054d4a0694c0e69ee6b595\n
      \  6655c7b258b7f6b0914f993de822cc47e5e57a188d7960b528a747446fe12f0e\n   7de05650dec74724366763f167a29c002dfd15b34d8993391cf49bc91127f545\n
      \  dba8703d66f5b7f1ae91237503d371e6333df9708d78c4fb8a8386c8ff09dc49\n   af768b23179deab78d96490a66d5724fb33900c60799d9872fac6da3bdb89043\n
      \  d67c2a05414ce331b5b8f1ed8ff7138f45905db2c4d5bc8045ab372bff142631\n   610a7e0f677b7e9b0bc73adefdcee16d9d5d284c616abeab5d8c291ce0\n
      \            Figure 16: Signed and Encrypted CWT as Hex String\n   16(\n     [\n
      \      / protected / << {\n         / alg / 1: 10 / AES-CCM-16-64-128 /\n       }
      >>,\n       / unprotected / {\n         / kid / 4: h'53796d6d6574726963313238'
      / 'Symmetric128' /,\n         / iv /  5: h'4a0694c0e69ee6b5956655c7b2'\n       },\n
      \      / ciphertext / h'f6b0914f993de822cc47e5e57a188d7960b528a7474\n                        46fe12f0e7de05650dec74724366763f167a29c002d\n
      \                       fd15b34d8993391cf49bc91127f545dba8703d66f5b\n                        7f1ae91237503d371e6333df9708d78c4fb8a8386c8\n
      \                       ff09dc49af768b23179deab78d96490a66d5724fb33\n                        900c60799d9872fac6da3bdb89043d67c2a05414ce3\n
      \                       31b5b8f1ed8ff7138f45905db2c4d5bc8045ab372bf\n                        f142631610a7e0f677b7e9b0bc73adefdcee16d9d5d\n
      \                       284c616abeab5d8c291ce0'\n     ]\n   )\n      Figure
      17: Signed and Encrypted CWT in CBOR Diagnostic Notation\n"
    title: A.6.  Example Nested CWT
  - contents:
    - "A.7.  Example MACed CWT with a Floating-Point Value\n   This section shows
      a MACed CWT with a single recipient and a simple\n   CWT Claims Set. The CWT
      Claims Set with a floating-point 'iat' value.\n   The MAC is generated using
      the 256-bit symmetric key from\n   Appendix A.2.2 with a 64-bit truncation.
      \ Line breaks are for display\n   purposes only.\n   d18443a10104a1044c53796d6d65747269633235364ba106fb41d584367c2000\n
      \  0048b8816f34c0542892\n      Figure 18: MACed CWT with a Floating-Point Value
      as Hex String\n   17(\n     [\n       / protected / << {\n         / alg / 1:
      4 / HMAC-256-64 /\n       } >>,\n       / unprotected / {\n         / kid /
      4: h'53796d6d6574726963323536' / 'Symmetric256' /,\n       },\n       / payload
      / << {\n         / iat / 6: 1443944944.5\n       } >>,\n       / tag / h'b8816f34c0542892'\n
      \    ]\n   )\n             Figure 19: MACed CWT with a Floating-Point Value\n
      \                       in CBOR Diagnostic Notation\n"
    title: A.7.  Example MACed CWT with a Floating-Point Value
  title: Appendix A.  Examples
- contents:
  - "Acknowledgements\n   This specification is based on JSON Web Token (JWT) [RFC7519],
    the\n   authors of which also include Nat Sakimura and John Bradley.  It also\n
    \  incorporates suggestions made by many people, including Carsten\n   Bormann,
    Alissa Cooper, Esko Dijk, Benjamin Kaduk, Warren Kumari,\n   Carlos Martinez,
    Alexey Melnikov, Kathleen Moriarty, Eric Rescorla,\n   Dan Romascanu, Adam Roach,
    Kyle Rose, Jim Schaad, Ludwig Seitz, and\n   Goeran Selander.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n
    \  URI:   http://self-issued.info/\n   Erik Wahlstroem\n   Sweden\n   Email: erik@wahlstromstekniska.se\n
    \  Samuel Erdtman\n   Spotify AB\n   Birger Jarlsgatan 61, 4tr\n   Stockholm  113
    56\n   Sweden\n   Phone: +46702691499\n   Email: erdtman@spotify.com\n   Hannes
    Tschofenig\n   ARM Ltd.\n   Hall in Tirol  6060\n   Austria\n   Email: Hannes.Tschofenig@arm.com\n"
  title: Authors' Addresses
