- contents:
  - '                 Internet Storage Name Service (iSNS)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the Internet Storage Name Service (iSNS)\n
    \  protocol, used for interaction between iSNS servers and iSNS clients,\n   which
    facilitates automated discovery, management, and configuration\n   of iSCSI and
    Fibre Channel devices (using iFCP gateways) on a TCP/IP\n   network.  iSNS provides
    intelligent storage discovery and management\n   services comparable to those
    found in Fibre Channel networks,\n   allowing a commodity IP network to function
    in a capacity similar to\n   that of a storage area network.  iSNS facilitates
    a seamless\n   integration of IP and Fibre Channel networks due to its ability
    to\n   emulate Fibre Channel fabric services and to manage both iSCSI and\n   Fibre
    Channel devices.  iSNS thereby provides value in any storage\n   network comprised
    of iSCSI devices, Fibre Channel devices (using iFCP\n   gateways), or any combination
    thereof.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction...................................................
    6\n       1.1.  Conventions Used in This Document........................ 6\n
    \      1.2.  Purpose of This Document................................. 6\n   2.
    \ iSNS Overview.................................................. 6\n       2.1.
    \ iSNS Architectural Components ........................... 7\n             2.1.1.
    \ iSNS Protocol (iSNSP) ........................... 7\n             2.1.2.  iSNS
    Client...................................... 7\n             2.1.3.  iSNS Server......................................
    7\n             2.1.4.  iSNS Database ................................... 7\n
    \            2.1.5.  iSCSI............................................ 7\n             2.1.6.
    \ iFCP............................................. 7\n       2.2.  iSNS Functional
    Overview................................. 8\n             2.2.1.  Name Registration
    Service........................ 8\n             2.2.2.  Discovery Domain and Login
    Control Service....... 8\n             2.2.3.  State Change Notification Service...............
    10\n             2.2.4.  Open Mapping between\n                     Fibre Channel
    and iSCSI Devices................. 11\n       2.3.  iSNS Usage Model........................................
    11\n             2.3.1.  iSCSI Initiator................................. 12\n
    \            2.3.2.  iSCSI Target.................................... 12\n             2.3.3.
    \ iSCSI-FC Gateway................................ 12\n             2.3.4.  iFCP
    Gateway.................................... 12\n             2.3.5.  Management
    Station.............................. 12\n       2.4.  Administratively Controlled
    iSNS Settings............... 13\n       2.5.  iSNS Server Discovery ..................................
    14\n             2.5.1.  Service Location Protocol (SLP)................. 14\n
    \            2.5.2.  Dynamic Host Configuration Protocol (DHCP)...... 14\n             2.5.3.
    \ iSNS Heartbeat Message.......................... 14\n       2.6.  iSNS and Network
    Address Translation (NAT).............. 14\n       2.7.  Transfer of iSNS Database
    Records between iSNS Servers.. 15\n       2.8.  Backup iSNS Servers.....................................
    17\n       2.9.  Transport Protocols..................................... 19\n
    \            2.9.1.  Use of TCP for iSNS Communication............... 19\n             2.9.2.
    \ Use of UDP for iSNS Communication............... 20\n             2.9.3.  iSNS
    Multicast and Broadcast Messages........... 20\n       2.10. Simple Network Management
    Protocol (SNMP) Requirements.. 21\n   3.  iSNS Object Model.............................................
    21\n       3.1.  Network Entity Object .................................. 22\n
    \      3.2.  Portal Object .......................................... 22\n       3.3.
    \ Storage Node Object..................................... 22\n       3.4.  Portal
    Group Object..................................... 23\n       3.5.  FC Device Object........................................
    24\n       3.6.  Discovery Domain Object................................. 24\n
    \      3.7.  Discovery Domain Set Object............................. 24\n       3.8.
    \ iSNS Database Model..................................... 24\n   4.  iSNS Implementation
    Requirements.............................. 25\n       4.1.  iSCSI Requirements......................................
    25\n             4.1.1.  Required Attributes for Support of iSCSI........ 26\n
    \            4.1.2.  Examples: iSCSI Object Model Diagrams........... 28\n             4.1.3.
    \ Required Commands and\n                     Response Messages for Support of
    iSCSI.......... 30\n       4.2.  iFCP Requirements.......................................
    31\n             4.2.1.  Required Attributes for Support of iFCP......... 31\n
    \            4.2.2.  Example: iFCP Object Model Diagram.............. 32\n             4.2.3.
    \ Required Commands and\n                     Response Messages for Support of
    iFCP........... 34\n   5.  iSNSP Message Format..........................................
    35\n       5.1.  iSNSP PDU Header........................................ 35\n
    \            5.1.1.  iSNSP Version................................... 36\n             5.1.2.
    \ iSNSP Function ID............................... 36\n             5.1.3.  iSNSP
    PDU Length................................ 36\n             5.1.4.  iSNSP Flags.....................................
    36\n             5.1.5.  iSNSP Transaction ID............................ 36\n
    \            5.1.6.  iSNSP Sequence ID............................... 37\n       5.2.
    \ iSNSP Message Segmentation and Reassembly............... 37\n       5.3.  iSNSP
    PDU Payload....................................... 37\n             5.3.1.  Attribute
    Value 4-Byte Alignment................ 38\n       5.4.  iSNSP Response Status
    Codes............................. 39\n       5.5.  Authentication for iSNS Multicast
    and Broadcast Messages 39\n       5.6.  Registration and Query Messages.........................
    41\n             5.6.1.  Source Attribute................................ 42\n
    \            5.6.2.  Message Key Attributes.......................... 42\n             5.6.3.
    \ Delimiter Attribute............................. 42\n             5.6.4.  Operating
    Attributes............................ 43\n             5.6.5.  Registration and
    Query Request Message Types ... 44\n       5.7.  Response Messages.......................................
    66\n             5.7.1.  Status Code..................................... 66\n
    \            5.7.2.  Message Key Attributes in Response.............. 66\n             5.7.3.
    \ Delimiter Attribute in Response................. 67\n             5.7.4.  Operating
    Attributes in Response................ 67\n             5.7.5.  Registration and
    Query Response Message Type.... 67\n       5.8.  Vendor-Specific Messages................................
    72\n   6.  iSNS Attributes............................................... 73\n
    \      6.1.  iSNS Attribute Summary.................................. 73\n       6.2.
    \ Entity Identifier-Keyed Attributes...................... 76\n             6.2.1.
    \ Entity Identifier (EID)......................... 76\n             6.2.2.  Entity
    Protocol................................. 76\n             6.2.3.  Management
    IP Address .......................... 77\n             6.2.4.  Entity Registration
    Timestamp .................. 77\n             6.2.5.  Protocol Version Range..........................
    77\n             6.2.6.  Registration Period............................. 78\n
    \            6.2.7.  Entity Index.................................... 78\n             6.2.8.
    \ Entity Next Index............................... 79\n             6.2.9.  Entity
    ISAKMP Phase-1 Proposals................. 79\n             6.2.10. Entity Certificate..............................
    79\n       6.3.  Portal-Keyed Attributes................................. 80\n
    \            6.3.1.  Portal IP Address............................... 80\n             6.3.2.
    \ Portal TCP/UDP Port............................. 80\n             6.3.3.  Portal
    Symbolic Name............................ 80\n             6.3.4.  Entity Status
    Inquiry Interval.................. 81\n             6.3.5.  ESI Port........................................
    82\n             6.3.6.  Portal Index.................................... 82\n
    \            6.3.7.  SCN Port........................................ 82\n             6.3.8.
    \ Portal Next Index............................... 83\n             6.3.9.  Portal
    Security Bitmap.......................... 83\n             6.3.10. Portal ISAKMP
    Phase-1 Proposals................. 84\n             6.3.11. Portal ISAKMP Phase-2
    Proposals................. 84\n             6.3.12. Portal Certificate..............................
    84\n       6.4.  iSCSI Node-Keyed Attributes............................. 84\n
    \            6.4.1.  iSCSI Name...................................... 85\n             6.4.2.
    \ iSCSI Node Type................................. 85\n             6.4.3.  iSCSI
    Node Alias................................ 86\n             6.4.4.  iSCSI Node
    SCN Bitmap .......................... 86\n             6.4.5.  iSCSI Node Index................................
    87\n             6.4.6.  WWNN Token...................................... 87\n
    \            6.4.7.  iSCSI Node Next Index .......................... 89\n             6.4.8.
    \ iSCSI AuthMethod................................ 89\n       6.5.  Portal Group
    (PG) Object-Keyed Attributes............... 89\n             6.5.1.  Portal Group
    iSCSI Name......................... 90\n             6.5.2.  PG Portal IP Addr...............................
    90\n             6.5.3.  PG Portal TCP/UDP Port.......................... 90\n
    \            6.5.4.  Portal Group Tag (PGT).......................... 90\n             6.5.5.
    \ Portal Group Index.............................. 90\n             6.5.6.  Portal
    Group Next Index......................... 91\n       6.6.  FC Port Name-Keyed
    Attributes .......................... 91\n             6.6.1.  FC Port Name (WWPN).............................
    91\n             6.6.2.  Port ID (FC_ID)................................. 91\n
    \            6.6.3.  FC Port Type.................................... 92\n             6.6.4.
    \ Symbolic Port Name.............................. 92\n             6.6.5.  Fabric
    Port Name (FWWN)......................... 92\n             6.6.6.  Hard Address....................................
    92\n             6.6.7.  Port IP Address................................. 92\n
    \            6.6.8.  Class of Service (COS).......................... 93\n             6.6.9.
    \ FC-4 Types...................................... 93\n             6.6.10. FC-4
    Descriptor................................. 93\n             6.6.11. FC-4 Features
    .................................. 93\n             6.6.12. iFCP SCN Bitmap.................................
    93\n             6.6.13. Port Role....................................... 94\n
    \            6.6.14. Permanent Port Name (PPN)....................... 95\n       6.7.
    \ Node-Keyed Attributes .................................. 95\n             6.7.1.
    \ FC Node Name (WWNN)............................. 95\n             6.7.2.  Symbolic
    Node Name.............................. 95\n             6.7.3.  Node IP Address.................................
    95\n             6.7.4.  Node IPA........................................ 96\n
    \            6.7.5.  Proxy iSCSI Name................................ 96\n       6.8.
    \ Other Attributes........................................ 96\n             6.8.1.
    \ FC-4 Type Code.................................. 96\n             6.8.2.  iFCP
    Switch Name................................ 96\n             6.8.3.  iFCP Transparent
    Mode Commands.................. 97\n       6.9.  iSNS Server-Specific Attributes.........................
    97\n             6.9.1.  iSNS Server Vendor OUI.......................... 98\n
    \      6.10. Vendor-Specific Attributes.............................. 98\n             6.10.1.
    Vendor-Specific Server Attributes............... 98\n             6.10.2. Vendor-Specific
    Entity Attributes............... 98\n             6.10.3. Vendor-Specific Portal
    Attributes............... 99\n             6.10.4. Vendor-Specific iSCSI Node
    Attributes........... 99\n             6.10.5. Vendor-Specific FC Port Name Attributes.........
    99\n             6.10.6. Vendor-Specific FC Node Name Attributes......... 99\n
    \            6.10.7. Vendor-Specific Discovery Domain Attributes..... 99\n             6.10.8.
    Vendor-Specific Discovery Domain Set Attributes. 99\n             6.10.9. Other
    Vendor-Specific Attributes................ 99\n       6.11. Discovery Domain Registration
    Attributes............... 100\n             6.11.1. DD Set ID Keyed Attributes.....................
    100\n             6.11.2. DD ID Keyed Attributes......................... 101\n
    \  7.  Security Considerations...................................... 103\n       7.1.
    \ iSNS Security Threat Analysis ......................... 103\n       7.2.  iSNS
    Security Implementation and Usage Requirements.... 104\n       7.3.  Discovering
    Security Requirements of Peer Devices...... 105\n       7.4.  Configuring Security
    Policies of iFCP/iSCSI Devices.... 106\n       7.5.  Resource Issues........................................
    107\n       7.6.  iSNS Interaction with IKE and IPSec.................... 107\n
    \  8.  IANA Considerations.......................................... 107\n       8.1.
    \ Registry of Block Storage Protocols.................... 107\n       8.2.  Registry
    of Standard iSNS Attributes .................. 108\n       8.3.  Block Structure
    Descriptor (BSD) Registry.............. 108\n   9.  Normative References.........................................
    109\n   10. Informative References....................................... 110\n
    \  Appendix A: iSNS Examples........................................ 112\n       A.1.
    \ iSCSI Initialization Example........................... 112\n             A.1.1.
    \ Simple iSCSI Target Registration............... 112\n             A.1.2.  Target
    Registration and DD Configuration....... 114\n             A.1.3.  Initiator Registration
    and Target Discovery.... 117\n   Acknowledgements.................................................
    121\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Conventions Used in This Document\n   \"iSNS\" refers to the storage
      network model and associated services\n   covered in the text of this document.\n
      \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
      \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in
      this\n   document are to be interpreted as described in [RFC2119].\n   All frame
      formats are in big endian network byte order.\n   All unused fields and bitmaps,
      including those that are RESERVED,\n   SHOULD be set to zero when sending and
      ignored when receiving.\n"
    title: 1.1.  Conventions Used in This Document
  - contents:
    - "1.2.  Purpose of This Document\n   This is a standards track document containing
      normative text\n   specifying the iSNS Protocol, used by iSCSI and iFCP devices
      to\n   communicate with the iSNS server.  This document focuses on the\n   interaction
      between iSNS servers and iSNS clients; interactions among\n   multiple authoritative
      primary iSNS servers are a potential topic for\n   future work.\n"
    title: 1.2.  Purpose of This Document
  title: 1.  Introduction
- contents:
  - "2.  iSNS Overview\n   iSNS facilitates scalable configuration and management
    of iSCSI and\n   Fibre Channel (FCP) storage devices in an IP network by providing
    a\n   set of services comparable to that available in Fibre Channel\n   networks.
    \ iSNS thus allows a commodity IP network to function at a\n   level of intelligence
    comparable to a Fibre Channel fabric.  iSNS\n   allows the administrator to go
    beyond a simple device-by-device\n   management model, where each storage device
    is manually and\n   individually configured with its own list of known initiators
    and\n   targets.  Using the iSNS, each storage device subordinates its\n   discovery
    and management responsibilities to the iSNS server.  The\n   iSNS server thereby
    serves as the consolidated configuration point\n   through which management stations
    can configure and manage the entire\n   storage network, including both iSCSI
    and Fibre Channel devices.\n   iSNS can be implemented to support iSCSI and/or
    iFCP protocols as\n   needed; an iSNS implementation MAY provide support for one
    or both of\n   these protocols as desired by the implementor.  Implementation\n
    \  requirements within each of these protocols are further discussed in\n   Section
    5.  Use of iSNS is OPTIONAL for iSCSI and REQUIRED for iFCP.\n"
  - contents:
    - '2.1.  iSNS Architectural Components

      '
    - contents:
      - "2.1.1.  iSNS Protocol (iSNSP)\n   The iSNS Protocol (iSNSP) is a flexible
        and lightweight protocol that\n   specifies how iSNS clients and servers communicate.
        \ It is suitable\n   for various platforms, including switches and targets
        as well as\n   server hosts.\n"
      title: 2.1.1.  iSNS Protocol (iSNSP)
    - contents:
      - "2.1.2.  iSNS Client\n   iSNS clients initiate transactions with iSNS servers
        using the iSNSP.\n   iSNS clients are processes that are co-resident in the
        storage\n   device, and that can register device attribute information, download\n
        \  information about other registered clients in a common Discovery\n   Domain
        (DD), and receive asynchronous notification of events that\n   occur in their
        DD(s).  Management stations are a special type of iSNS\n   client that have
        access to all DDs stored in the iSNS.\n"
      title: 2.1.2.  iSNS Client
    - contents:
      - "2.1.3.  iSNS Server\n   iSNS servers respond to iSNS protocol queries and
        requests, and\n   initiate iSNS protocol State Change Notifications.  Properly\n
        \  authenticated information submitted by a registration request is\n   stored
        in an iSNS database.\n"
      title: 2.1.3.  iSNS Server
    - contents:
      - "2.1.4.  iSNS Database\n   The iSNS database is the information repository
        for the iSNS\n   server(s).  It maintains information about iSNS client attributes.
        \ A\n   directory-enabled implementation of iSNS may store client attributes\n
        \  in an LDAP directory infrastructure.\n"
      title: 2.1.4.  iSNS Database
    - contents:
      - "2.1.5.  iSCSI\n   iSCSI (Internet SCSI) is an encapsulation of SCSI for a
        new\n   generation of storage devices interconnected with TCP/IP [iSCSI].\n"
      title: 2.1.5.  iSCSI
    - contents:
      - "2.1.6.  iFCP\n   iFCP (Internet FCP) is a gateway-to-gateway protocol designed
        to\n   interconnect existing Fibre Channel and SCSI devices using TCP/IP.\n
        \  iFCP maps the existing FCP standard and associated Fibre Channel\n   services
        to TCP/IP [iFCP].\n"
      title: 2.1.6.  iFCP
    title: 2.1.  iSNS Architectural Components
  - contents:
    - "2.2.  iSNS Functional Overview\n   There are four main functions of the iSNS:\n
      \  1)  A Name Service Providing Storage Resource Discovery\n   2)  Discovery
      Domain (DD) and Login Control Service\n   3)  State Change Notification Service\n
      \  4)  Open Mapping of Fibre Channel and iSCSI Devices\n"
    - contents:
      - "2.2.1.  Name Registration Service\n   The iSNS provides a registration function
        to allow all entities in a\n   storage network to register and query the iSNS
        database.  Both\n   targets and initiators can register in the iSNS database,
        as well as\n   query for information about other initiators and targets.  This\n
        \  allows, for example, a client initiator to obtain information about\n   target
        devices from the iSNS server.  This service is modeled on the\n   Fibre Channel
        Generic Services Name Server described in FC-GS-4, with\n   extensions, operating
        within the context of an IP network.\n   The naming registration service also
        provides the ability to obtain a\n   network-unique Domain ID for iFCP gateways
        when one is required.\n"
      title: 2.2.1.  Name Registration Service
    - contents:
      - "2.2.2.  Discovery Domain and Login Control Service\n   The Discovery Domain
        (DD) Service facilitates the partitioning of\n   Storage Nodes into more manageable
        groupings for administrative and\n   login control purposes.  It allows the
        administrator to limit the\n   login process of each host to the more appropriate
        subset of targets\n   registered in the iSNS.  This is particularly important
        for reducing\n   the number of unnecessary logins (iSCSI logins or Fibre Channel
        Port\n   Logins), and for limiting the amount of time that the host spends\n
        \  initializing login relationships as the size of the storage network\n   scales
        up.  Storage Nodes must be in at least one common enabled DD\n   in order
        to obtain information about each other.  Devices can be\n   members of multiple
        DDs simultaneously.\n   Login Control allows targets to delegate their access\n
        \  control/authorization policies to the iSNS server.  This is\n   consistent
        with the goal of centralizing management of those storage\n   devices using
        the iSNS server.  The target node or device downloads\n   the list of authorized
        initiators from the iSNS.  Each node or device\n   is uniquely identified
        by an iSCSI Name or FC Port Name.  Only\n   initiators that match the required
        identification and authorization\n   provided by the iSNS will be allowed
        access by that target Node\n   during session establishment.\n   Placing Portals
        of a Network Entity into Discovery Domains allows\n   administrators to indicate
        the preferred IP Portal interface through\n   which storage traffic should
        access specific Storage Nodes of that\n   Network Entity.  If no Portals of
        a Network Entity have been placed\n   into a DD, then queries scoped to that
        DD SHALL report all Portals of\n   that Network Entity.  If one or more Portals
        of a Network Entity have\n   been placed into a DD, then queries scoped to
        that DD SHALL report\n   only those Portals that have been explicitly placed
        in the DD.\n   DDs can be managed offline through a separate management workstation\n
        \  using the iSNSP or SNMP.  If the target opts to use the Login Control\n
        \  feature of the iSNS, the target delegates management of access\n   control
        policy (i.e., the list of initiators allowed to log in to\n   that target)
        to the management workstations that are managing the\n   configuration in
        the iSNS database.\n   If administratively authorized, a target can upload
        its own Login\n   Control list.  This is accomplished using the DDReg message
        and\n   listing the iSCSI name of each initiator to be registered in the\n
        \  target's DD.\n   An implementation MAY decide that newly registered devices
        that have\n   not explicitly been placed into a DD by the management station
        will\n   be placed into a \"default DD\" contained in a \"default DDS\" whose\n
        \  initial DD Set Status value is \"enabled\".  This makes them visible to\n
        \  other devices in the default DD.  Other implementations MAY decide\n   that
        they are registered with no DD, making them inaccessible to\n   source-scoped
        iSNSP messages.\n   The iSNS server uses the Source Attribute of each iSNSP
        message to\n   determine the originator of the request and to scope the operation
        to\n   a set of Discovery Domains.  In addition, the Node Type (specified
        in\n   the iFCP or iSCSI Node Type bitmap field) may also be used to\n   determine
        authorization for the specified iSNS operation.  For\n   example, only Control
        Nodes are authorized to create or delete\n   discovery domains.\n   Valid
        and active Discovery Domains (DDs) belong to at least one\n   active Discovery
        Domain Set (DDS).  Discovery Domains that do not\n   belong to an activated
        DDS are not enabled.  The iSNS server MUST\n   maintain the state of DD membership
        for all Storage Nodes, even for\n   those that have been deregistered.  DD
        membership is persistent\n   regardless of whether a Storage Node is actively
        registered in the\n   iSNS database.\n"
      title: 2.2.2.  Discovery Domain and Login Control Service
    - contents:
      - "2.2.3.  State Change Notification Service\n   The State Change Notification
        (SCN) service allows the iSNS Server to\n   issue notifications about network
        events that affect the operational\n   state of Storage Nodes.  The iSNS client
        may register for\n   notifications on behalf of its Storage Nodes for notification
        of\n   events detected by the iSNS Server.  SCNs notify iSNS clients of\n
        \  explicit or implicit changes to the iSNS database; they do not\n   necessarily
        indicate the state of connectivity to peer storage\n   devices in the network.
        \ The response of a storage device to receipt\n   of an SCN is implementation-specific;
        the policy for responding to\n   SCNs is outside of the scope of this document.\n
        \  There are two types of SCN registrations: regular registrations and\n   management
        registrations.  Management registrations result in\n   management SCNs, whereas
        regular registrations result in regular\n   SCNs.  The type of registration
        and SCN message is indicated in the\n   SCN bitmap (see Sections 6.4.4 and
        6.6.12).\n   A regular SCN registration indicates that the Discovery Domain\n
        \  Service SHALL be used to control the distribution of SCN messages.\n   Receipt
        of regular SCNs is limited to the discovery domains in which\n   the SCN-triggering
        event takes place.  Regular SCNs do not contain\n   information about discovery
        domains.\n   A management SCN registration can only by requested by Control
        Nodes.\n   Management SCNs resulting from management registrations are not
        bound\n   by the Discovery Domain service.  Authorization to request management\n
        \  SCN registrations may be administratively controlled.\n   The iSNS server
        SHOULD be implemented with hardware and software\n   resources sufficient
        to support the expected number of iSNS clients.\n   However, if resources
        are unexpectedly exhausted, then the iSNS\n   server MAY refuse SCN service
        by returning an SCN Registration\n   Rejected (Status Code 17).  The rejection
        might occur in situations\n   where the network size or current number of
        SCN registrations has\n   passed an implementation-specific threshold.  A
        client not allowed to\n   register for SCNs may decide to monitor its sessions
        with other\n   storage devices directly.\n   The specific notification mechanism
        by which the iSNS server learns\n   of the events that trigger SCNs is implementation-specific,
        but can\n   include examples such as explicit notification messages from an
        iSNS\n   client to the iSNS server, or a hardware interrupt to a switch-hosted\n
        \  iSNS server as a result of link failure.\n"
      title: 2.2.3.  State Change Notification Service
    - contents:
      - "2.2.4.  Open Mapping between Fibre Channel and iSCSI Devices\n   The iSNS
        database stores naming and discovery information about both\n   Fibre Channel
        and iSCSI devices.  This allows the iSNS server to\n   store mappings of a
        Fibre Channel device to a proxy iSCSI device\n   \"image\" in the IP network.
        \ Similarly, mappings of an iSCSI device to\n   a \"proxy WWN\" can be stored
        under the WWNN Token field for that iSCSI\n   device.\n   Furthermore, through
        use of iSCSI-FC gateways, Fibre Channel-aware\n   management stations can
        interact with the iSNS server to retrieve\n   information about Fibre Channel
        devices, and use this information to\n   manage Fibre Channel and iSCSI devices.
        \ This allows management\n   functions such as Discovery Domains and State
        Change Notifications to\n   be applied seamlessly to both iSCSI and Fibre
        Channel devices,\n   facilitating integration of IP networks with Fibre Channel
        devices\n   and fabrics.\n   Note that Fibre Channel attributes are stored
        as iFCP attributes, and\n   that the ability to store this information in
        the iSNS server is\n   useful even if the iFCP protocol is not implemented.
        \ In particular,\n   tag 101 can be used to store a \"Proxy iSCSI Name\" for
        Fibre Channel\n   devices registered in the iSNS server.  This field is used
        to\n   associate the FC device with an iSCSI registration entry that is used\n
        \  for the Fibre Channel device to communicate with iSCSI devices in the\n
        \  IP network.  Conversely, tag 37 (see Section 6.1) contains a WWNN\n   Token
        field, which can be used to store an FC Node Name (WWNN) value\n   used by
        iSCSI-FC gateways to represent an iSCSI device in the Fibre\n   Channel domain.\n
        \  By storing the mapping between Fibre Channel and iSCSI devices in the\n
        \  iSNS server, this information becomes open to any authorized iSNS\n   client
        wishing to retrieve and use this information.  In many cases,\n   this provides
        advantages over storing the information internally\n   within an iSCSI-FC
        gateway, where the mapping is inaccessible to\n   other devices except by
        proprietary mechanisms.\n"
      title: 2.2.4.  Open Mapping between Fibre Channel and iSCSI Devices
    title: 2.2.  iSNS Functional Overview
  - contents:
    - "2.3.  iSNS Usage Model\n   The following is a high-level description of how
      each type of device\n   in a storage network can utilize iSNS.  Each type of
      device interacts\n   with the iSNS server as an iSNS client and must register
      itself in\n   the iSNS database in order to access services provided by the
      iSNS.\n"
    - contents:
      - "2.3.1.  iSCSI Initiator\n   An iSCSI initiator will query the iSNS server
        to discover the\n   presence and location of iSCSI target devices.  It may
        also request\n   state change notifications (SCNs) so that it can be notified
        of new\n   targets that appear on the network after the initial bootup and\n
        \  discovery.  SCNs can also inform the iSCSI initiator of targets that\n
        \  have been removed from or no longer available in the storage network,\n
        \  so that incomplete storage sessions can be gracefully terminated and\n
        \  resources for non-existent targets can be reallocated.\n"
      title: 2.3.1.  iSCSI Initiator
    - contents:
      - "2.3.2.  iSCSI Target\n   An iSCSI target allows itself to be discovered by
        iSCSI initiators by\n   registering its presence in the iSNS server.  It may
        also register\n   for SCNs in order to detect the addition or removal of initiators
        for\n   resource allocation purposes.  The iSCSI target device may also\n
        \  register for Entity Status Inquiry (ESI) messages, which allow the\n   iSNS
        to monitor the target device's availability in the storage\n   network.\n"
      title: 2.3.2.  iSCSI Target
    - contents:
      - "2.3.3.  iSCSI-FC Gateway\n   An iSCSI-FC gateway bridges devices in a Fibre
        Channel network to an\n   iSCSI/IP network.  It may use the iSNS server to
        store FC device\n   attributes discovered in the FC name server, as well as
        mappings of\n   FC device identifiers to iSCSI device identifiers.  iSNS has
        the\n   capability to store all attributes of both iSCSI and Fibre Channel\n
        \  devices; iSCSI devices are managed through direct interaction using\n   iSNS,
        while FC devices can be indirectly managed through iSNS\n   interactions with
        the iSCSI-FC gateway.  This allows both iSCSI and\n   Fibre Channel devices
        to be managed in a seamless management\n   framework.\n"
      title: 2.3.3.  iSCSI-FC Gateway
    - contents:
      - "2.3.4.  iFCP Gateway\n   An iFCP gateway uses iSNS to emulate the services
        provided by a Fibre\n   Channel name server for FC devices in its gateway
        region.  iSNS\n   provides basic discovery and zoning configuration information
        to be\n   enforced by the iFCP gateway.  When queried, iSNS returns information\n
        \  on the N_Port network address used to establish iFCP sessions between\n
        \  FC devices supported by iFCP gateways.\n"
      title: 2.3.4.  iFCP Gateway
    - contents:
      - "2.3.5.  Management Station\n   A management station uses iSNS to monitor
        storage devices and to\n   enable or disable storage sessions by configuring
        discovery domains.\n   A management station usually interacts with the iSNS
        server as a\n   Control Node endowed with access to all iSNS database records
        and\n   with special privileges to configure discovery domains.  Through\n
        \  manipulation of discovery domains, the management station controls\n   the
        scope of device discovery for iSNS clients querying the iSNS\n   server.\n"
      title: 2.3.5.  Management Station
    title: 2.3.  iSNS Usage Model
  - contents:
    - "2.4.  Administratively Controlled iSNS Settings\n   Some important operational
      settings for the iSNS server are\n   configured using administrative means,
      such as a configuration file,\n   a console port, an SNMP, or another implementation-specific
      method.\n   These administratively-controlled settings cannot be configured
      using\n   the iSNS Protocol, and therefore the iSNS server implementation MUST\n
      \  provide for such an administrative control interface.\n   The following is
      a list of parameters that are administratively\n   controlled for the iSNS server.
      \ In the absence of alternative\n   settings provided by the administrator,
      the following specified\n   default settings MUST be used.\n   Setting                                  Default
      Setting\n   -------                                  ---------------\n   ESI
      Non-Response Threshold                     3     (see 5.6.5.13)\n   Management
      SCNs (Control Nodes only)        enabled  (see 5.6.5.8)\n   Default DD/DDS                              disabled\n
      \  DD/DDS Modification\n      - Control Node                           enabled\n
      \     - iSCSI Target Node Type                 disabled\n      - iSCSI Initiator
      Node Type              disabled\n      - iFCP Target Port Role                  disabled\n
      \     - iFCP Initiator Port Role               disabled\n   Authorized Control
      Nodes                      N/A\n   ESI Non-Response Threshold: determines the
      number of ESI messages\n                   sent without receiving a response
      before the network\n                   entity is deregistered from the iSNS
      database.\n   Management SCN for Control Node: determines whether a registered\n
      \                  Control Node is permitted to register to receive\n                   Management
      SCNs.\n   Default DD/DDS: determines whether a newly registered device not\n
      \                  explicitly placed into a discovery domain (DD) and\n                   discovery
      domain set (DDS) is placed into a default\n                   DD/DDS.\n   DD/DDS
      Modification: determines whether the specified type of Node is\n                   allowed
      to add, delete or update DDs and DDSs.\n   Authorized Control Nodes: a list
      of Nodes identified by iSCSI Name or\n                   FC Port Name WWPN that
      are authorized to register as\n                   Control Nodes.\n"
    title: 2.4.  Administratively Controlled iSNS Settings
  - contents:
    - '2.5.  iSNS Server Discovery

      '
    - contents:
      - "2.5.1.  Service Location Protocol (SLP)\n   The Service Location Protocol
        (SLP) provides a flexible and scalable\n   framework for providing hosts with
        access to information about the\n   existence, location, and configuration
        of networked services,\n   including the iSNS server.  SLP can be used by
        iSNS clients to\n   discover the IP address or FQDN of the iSNS server.  To
        implement\n   discovery through SLP, a Service Agent (SA) should be cohosted
        in the\n   iSNS server, and a User Agent (UA) should be in each iSNS client.\n
        \  Each client multicasts a discovery message requesting the IP address\n
        \  of the iSNS server(s).  The SA responds to this request.  Optionally,\n
        \  the location of the iSNS server can be stored in the SLP Directory\n   Agent
        (DA).\n   Note that a complete description and specification of SLP can be\n
        \  found in [RFC2608], and is beyond the scope of this document.  A\n   service
        template for using SLP to locate iSNS servers can be found in\n   [iSCSI-SLP].\n"
      title: 2.5.1.  Service Location Protocol (SLP)
    - contents:
      - "2.5.2.  Dynamic Host Configuration Protocol (DHCP)\n   The IP address of
        the iSNS server can be stored in a DHCP server to\n   be downloaded by iSNS
        clients using a DHCP option.  The DHCP option\n   number to be used for distributing
        the iSNS server location is found\n   in [iSNSOption].\n"
      title: 2.5.2.  Dynamic Host Configuration Protocol (DHCP)
    - contents:
      - "2.5.3.  iSNS Heartbeat Message\n   The iSNS heartbeat message is described
        in Section 5.6.5.14.  It\n   allows iSNS clients within the broadcast or multicast
        domain of the\n   iSNS server to discover the location of the active iSNS
        server and\n   any backup servers.\n"
      title: 2.5.3.  iSNS Heartbeat Message
    title: 2.5.  iSNS Server Discovery
  - contents:
    - "2.6.  iSNS and Network Address Translation (NAT)\n   The existence of NAT will
      have an impact upon information retrieved\n   from the iSNS server.  If the
      iSNS client exists in an addressing\n   domain different from that of the iSNS
      server, then IP address\n   information stored in the iSNS server may not be
      correct when\n   interpreted in the domain of the iSNS client.\n   There are
      several possible approaches to allow operation of iSNS\n   within a NAT network.
      \ The first approach is to require use of the\n   canonical TCP port number
      by both targets and initiators when\n   addressing targets across a NAT boundary,
      and for the iSNS client not\n   to query for nominal IP addresses.  Rather,
      the iSNS client queries\n   for the DNS Fully Qualified Domain Name stored in
      the Entity\n   Identifier field when seeking addressing information.  Once\n
      \  retrieved, the DNS name can be interpreted in each address domain and\n   mapped
      to the appropriate IP address by local DNS servers.\n   A second approach is
      to deploy a distributed network of iSNS servers.\n   Local iSNS servers are
      deployed inside and outside NAT boundaries,\n   with each local server storing
      relevant IP addresses for their\n   respective NAT domains.  Updates among the
      network of decentralized,\n   local iSNS servers are handled using LDAP and
      appropriate NAT\n   translation rules implemented within the update mechanism
      in each\n   server.\n   Finally, note that it is possible for an iSNS server
      in the private\n   addressing domain behind a NAT boundary to exclusively support
      iSNS\n   clients that are operating in the global IP addressing domain.  If\n
      \  this is the case, the administrator only needs to ensure that the\n   appropriate
      mappings are configured on the NAT gateways to allow the\n   iSNS clients to
      initiate iSNSP sessions to the iSNS server.  All\n   registered addresses contained
      in the iSNS server are thus public IP\n   addresses for use outside the NAT
      boundary.  Care should be taken to\n   ensure that there are no iSNS clients
      querying the server from inside\n   the NAT boundary.\n"
    title: 2.6.  iSNS and Network Address Translation (NAT)
  - contents:
    - "2.7.  Transfer of iSNS Database Records between iSNS Servers\n   Transfer of
      iSNS database records between iSNS servers has important\n   applications, including
      the following:\n   1)  An independent organization needs to transfer storage
      information\n       to a different organization.  Each organization independently\n
      \      maintains its own iSNS infrastructure.  To facilitate discovery\n       of
      storage assets of the peer organization using IP, iSNS\n       database records
      can be transferred between authoritative iSNS\n       servers from each organization.
      \ This allows storage sessions to\n       be established directly between devices
      residing in each\n       organization's storage network infrastructure over
      a common IP\n       network.\n   2)  Multiple iSNS servers are desired for redundancy.
      \ Backup servers\n       need to maintain copies of the primary server's dynamically\n
      \      changing database.\n   To support the above applications, information
      in an iSNS server can\n   be distributed to other iSNS servers either using
      the iSNS protocol,\n   or through out-of-band mechanisms using non-iSNS protocols.
      \ The\n   following examples illustrate possible methods for transferring data\n
      \  records between iSNS servers.  In the first example, a back-end LDAP\n   information
      base is used to support the iSNS server, and the data is\n   transferred using
      the LDAP protocol.  Once the record transfer of the\n   remote device is completed,
      it becomes visible and accessible to\n   local devices using the local iSNS
      server.  This allows local devices\n   to establish sessions with remote devices
      (provided that firewall\n   boundaries can be negotiated).\n   +-------------------------+
      \          +-------------------------+\n   |+------+ iSNSP           |           |
      \          iSNSP +-----+ |\n   ||dev A |<----->+------+  |           |  +------+<----->|dev
      C| |\n   |+------+       |      |  |           |  |      |       +-----+ |\n
      \  |+------+ iSNSP |local |  |           |  |remote| iSNSP +-----+ |\n   ||dev
      B |<----->| iSNS |  |           |  | iSNS |<----->|dev D| |\n   |+------+       |server|
      \ |           |  |server|       +-----+ |\n   |........       +--+---+  |   WAN
      \    |  +---+--+               |\n   |.dev C'.          |      |   Link    |
      \     |                  |\n   |........          |      =============      |
      \                 |\n   |                  |      |           |      |                  |\n
      \  |               +--+---+  |           |  +---+--+               |\n   |               |
      local|<--- <--- <--- <-|remote|               |\n   |               | LDAP |
      \ |  LDAP:    |  | LDAP |               |\n   |               +------+  Xfer
      \"dev C\"|  +------+               |\n   +-------------------------+           +-------------------------+\n
      \         Enterprise                           Enterprise\n          Network
      A                            Network B\n   In the above diagram, two business
      partners wish to share storage\n   \"dev C\".  Using LDAP, the record for \"dev
      C\" can be transferred from\n   Network B to Network A.  Once accessible to
      the local iSNS server in\n   Network A, local devices A and B can now discover
      and connect to \"dev\n   C\".\n   +-------------------------+           +-------------------------+\n
      \  |+------+ iSNSP           |           |           iSNSP +-----+ |\n   ||dev
      A |<----->+------+  |           |  +------+<----->|dev C| |\n   |+------+       |
      \     |  |           |  |      |       +-----+ |\n   |+------+ iSNSP |local
      |  |           |  |remote| iSNSP +-----+ |\n   ||dev B |<----->| iSNS |  |           |
      \ | iSNS |<----->|dev D| |\n   |+------+       |server|  |           |  |server|
      \      +-----+ |\n   |........       +------+  |   WAN     |  +---+--+               |\n
      \  |.dev C'.          ^      |   Link    |      |                  |\n   |........
      \         |      =============      v                  |\n   |                  |
      \     |           |      |SNMP              |\n   |                  |      |
      \          |      |                  |\n   |               +--+----+ |           |
      \     v                  |\n   |               | SNMP  |<--- <--- <--- <----
      \                  |\n   |               | Mgmt  | |  SNMP: Xfer \"dev C\"                 |\n
      \  |               |Station| |           |                         |\n   |               +-------+
      |           |                         |\n   +-------------------------+           +-------------------------+\n
      \         Enterprise                           Enterprise\n          Network
      A                            Network B\n   The above diagram illustrates a second
      example of how iSNS records\n   can be shared.  This method uses an SNMP-based
      management station to\n   retrieve (GET) the desired record for \"dev C\" manually,
      and then to\n   store (SET) it on the local iSNS server directly.  Once the
      record is\n   transferred to the local iSNS server in Network A, \"dev C\" becomes\n
      \  visible and accessible (provided that firewall boundaries can be\n   negotiated)
      to other devices in Network A.\n   Other methods, including proprietary protocols,
      can be used to\n   transfer device records between iSNS servers.  Further discussion
      and\n   explanation of these methodologies is beyond the scope of this\n   document.\n"
    title: 2.7.  Transfer of iSNS Database Records between iSNS Servers
  - contents:
    - "2.8.  Backup iSNS Servers\n   This section offers a broad framework for implementation
      and\n   deployment of iSNS backup servers.  Server failover and recovery are\n
      \  topics of continuing research, and adequate resolution of issues such\n   as
      split brain and primary server selection is dependent on the\n   specific implementation
      requirements and deployment needs.  The\n   failover mechanisms discussed in
      this document focus on the\n   interaction between iSNS clients and iSNS servers.
      \ Specifically,\n   what is covered in this document includes the following:\n
      \  -  iSNS client behavior and the iSNS protocol interaction between the\n      client
      and multiple iSNS servers, some of which are backup\n      servers.\n   -  Required
      failover behaviors of the collection of iSNS servers that\n      includes active
      and backup servers.\n   However, note that this document does not specify the
      complete\n   functional failover requirements of each iSNS server.  In particular,\n
      \  it does not specify the complete set of protocol interactions among\n   the
      iSNS servers that are required to achieve stable failover\n   operation in an
      interoperable manner.\n   For the purposes of this discussion, the specified
      backup mechanisms\n   pertain to interaction among different logical iSNS servers.
      \ Note\n   that it is possible to create multiple physical iSNS servers to form\n
      \  a single logical iSNS server cluster, and thus to distribute iSNS\n   transaction
      processing among multiple physical servers.  However, a\n   more detailed discussion
      of the interactions between physical servers\n   within a logical iSNS server
      cluster is beyond the scope of this\n   document.\n   Multiple logical iSNS
      servers can be used to provide redundancy in\n   the event that the active iSNS
      server fails or is removed from the\n   network.  The methods described in Section
      2.7 above can be used to\n   transfer name server records to backup iSNS servers.
      \ Each backup\n   server maintains a redundant copy of the name server database
      found\n   in the primary iSNS server, and can respond to iSNS protocol messages\n
      \  in the same way as the active server.  Each backup server SHOULD\n   monitor
      the health and status of the active iSNS server, including\n   checking to make
      sure its own database is synchronized with the\n   active server's database.
      \ How each backup server accomplishes this\n   is implementation-dependent,
      and may (or may not) include using the\n   iSNS protocol.  If the iSNS protocol
      is used, then the backup server\n   MAY register itself in the active server's
      iSNS database as a Control\n   Node, allowing it to receive state-change notifications.\n
      \  Generally, the administrator or some automated election process is\n   responsible
      for initial and subsequent designation of the primary\n   server and each backup
      server.\n   A maximum of one logical backup iSNS server SHALL exist at any\n
      \  individual IP address, in order to avoid conflicts from multiple\n   servers
      listening on the same canonical iSNS TCP or UDP port number.\n   The iSNS heartbeat
      can also be used to coordinate the designation and\n   selection of primary
      and backup iSNS servers.\n   Each backup server MUST note its relative precedence
      in the active\n   server's list of backup servers.  If its precedence is not
      already\n   known, each backup server MAY learn it from the iSNS heartbeat\n
      \  message, by noting the position of its IP address in the ordered list\n   of
      backup server IP addresses.  For example, if it is the first\n   backup listed
      in the heartbeat message, then its backup precedence is\n   1.  If it is the
      third backup server listed, then its backup\n   precedence is 3.\n   If a backup
      server establishes that it has lost connectivity to the\n   active server and
      other backup servers of higher precedence, then it\n   SHOULD assume that it
      is the active server.  The method of\n   determining whether connectivity has
      been lost is implementation-\n   specific.  One possible approach is to assume
      that if the backup\n   server does not receive iSNS heartbeat messages for a
      period of time,\n   then connectivity to the active server has been lost.  Alternatively,\n
      \  the backup server may establish TCP connections to the active server\n   and
      other backup servers, with loss of connectivity determined\n   through non-response
      to periodic echo or polling messages (using\n   iSNSP, SNMP, or other protocols).\n
      \  When a backup server becomes the active server, it SHALL assume all\n   active
      server responsibilities, including (if used) transmission of\n   the iSNS heartbeat
      message.  If transmitting the iSNS heartbeat, the\n   backup server replaces
      the active Server IP Address and TCP/UDP Port\n   entries with its own IP address
      and TCP/UDP Port, and begins\n   incrementing the counter field from the last
      known value from the\n   previously-active iSNS server.  However, it MUST NOT
      change the\n   original ordered list of backup server IP Address and TCP/UDP
      Port\n   entries.  If the primary backup server or other higher-precedence\n
      \  backup server returns, then the existing active server is responsible\n   for
      ensuring that the new active server's database is up-to-date\n   before demoting
      itself to its original status as backup.\n   Since the primary and backup iSNS
      servers maintain a coordinated\n   database, no re-registration by an iSNS Client
      is required when a\n   backup server takes the active server role.  Likewise,
      no re-\n   registration by an iSNS Client is required when the previous primary\n
      \  server returns to the active server role.\n"
    title: 2.8.  Backup iSNS Servers
  - contents:
    - "2.9.  Transport Protocols\n   The iSNS Protocol is transport-neutral.  Query
      and registration\n   messages are transported over TCP or UDP.  iSNS heartbeat
      messages\n   are transported using IP multicast or broadcast.\n"
    - contents:
      - "2.9.1.  Use of TCP for iSNS Communication\n   It MUST be possible to use
        TCP for iSNS communication.  The iSNS\n   server MUST accept TCP connections
        for client registrations.  To\n   receive Entity Status Inquiry (ESI) (see
        Section 5.6.5.13) monitoring\n   the use of TCP, the client registers the
        Portal ESI Interval and the\n   port number of the TCP port that will be used
        to receive ESI\n   messages.  The iSNS server initiates the TCP connection
        used to\n   deliver the ESI message.  This TCP connection does not need to
        be\n   continuously open.\n   To receive SCN notifications using TCP, the
        client registers the\n   iSCSI or iFCP SCN Bitmap and the port number of the
        TCP port in the\n   Portal used to receive SCNs.  The iSNS server initiates
        the TCP\n   connection used to deliver the SCN message.  This TCP connection
        does\n   not need to be continuously open.\n   It is possible for an iSNS
        client to use the same TCP connection for\n   SCN, ESI, and iSNS queries.
        \ Alternatively, separate connections may\n   be used.\n"
      title: 2.9.1.  Use of TCP for iSNS Communication
    - contents:
      - "2.9.2.  Use of UDP for iSNS Communication\n   The iSNS server MAY accept
        UDP messages for client registrations.\n   The iSNS server MUST accept registrations
        from clients requesting\n   UDP-based ESI and SCN messages.\n   To receive
        UDP-based ESI monitoring messages, the client registers\n   the port number
        of the UDP port in at least one Portal to be used to\n   receive and respond
        to ESI messages from the iSNS server.  If a\n   Network Entity has multiple
        Portals with registered ESI UDP Ports,\n   then ESI messages SHALL be delivered
        to every Portal registered to\n   receive such messages.\n   To receive UDP-based
        SCN notification messages, the client registers\n   the port number of the
        UDP port in at least one Portal to be used to\n   receive SCN messages from
        the iSNS server.  If a Network Entity has\n   multiple Portals with registered
        SCN UDP Ports, then SCN messages\n   SHALL be delivered to each Portal registered
        to receive such\n   messages.\n   When using UDP to transport iSNS messages,
        each UDP datagram MUST\n   contain exactly one iSNS PDU (see Section 5).\n"
      title: 2.9.2.  Use of UDP for iSNS Communication
    - contents:
      - "2.9.3.  iSNS Multicast and Broadcast Messages\n   iSNS multicast messages
        are transported using IP multicast or\n   broadcast.  The iSNS heartbeat is
        the only iSNS multicast or\n   broadcast message.  This message is originated
        by the iSNS server and\n   sent to all iSNS clients that are listening on
        the IP multicast\n   address allocated for the iSNS heartbeat.\n"
      title: 2.9.3.  iSNS Multicast and Broadcast Messages
    title: 2.9.  Transport Protocols
  - contents:
    - "2.10.  Simple Network Management Protocol (SNMP) Requirements\n   The iSNS
      Server may be managed via the iSNS MIB [iSNSMIB] using an\n   SNMP management
      framework [RFC3411].  For a detailed overview of the\n   documents that describe
      the current Internet-Standard Management\n   Framework, please refer to Section
      7 of RFC 3410 [RFC3410].  The iSNS\n   MIB provides the ability to configure
      and monitor an iSNS server\n   without using the iSNS protocol directly.  SNMP
      management frameworks\n   have several requirements for object indexing in order
      for objects to\n   be accessed or added.\n   SNMP uses an Object Identifier
      (OID) for object identification.  The\n   size of each OID is restricted to
      a maximum of 128 sub-identifiers.\n   Both the iSCSI and iFCP protocol contain
      identifiers, such as the\n   iSCSI Name, that are greater the 128 characters
      in length.  Using\n   such identifiers as an index would result in more than
      128 sub-\n   identifiers per OID.  In order to support objects that have key\n
      \  identifiers whose maximum length is longer than the maximum SNMP-\n   supported
      length, the iSNS server provides secondary non-zero integer\n   index identifiers.
      \ These indexes SHALL be persistent for as long as\n   the server is active.
      \ Furthermore, index values for recently\n   deregistered objects SHOULD NOT
      be reused in the short term.  Object\n   attributes, including indexes, are
      described in detail in Section 6.\n   For SNMP based management applications
      to create a new entry in a\n   table of objects, a valid OID must be available
      to specify the table\n   row.  The iSNS server supports this by providing, for
      each type of\n   object that can be added via SNMP, an object attribute that
      returns\n   the next available non-zero integer index.  This allows an SNMP\n
      \  client to request an OID to be used for registering a new object in\n   the
      server.  Object attributes, including next available index\n   attributes, are
      described in detail in Section 6.\n"
    title: 2.10.  Simple Network Management Protocol (SNMP) Requirements
  title: 2.  iSNS Overview
- contents:
  - "3.  iSNS Object Model\n   iSNS provides the framework for the registration, discovery,
    and\n   management of iSCSI devices and Fibre Channel-based devices (using\n   iFCP).
    \ This architecture framework provides elements needed to\n   describe various
    storage device objects and attributes that may exist\n   on an IP storage network.
    \ Objects defined in this architecture\n   framework include Network Entity, Portal,
    Storage Node, FC Device,\n   Discovery Domain, and Discovery Domain Set.  Each
    of these objects is\n   described in greater detail in the following sections.\n"
  - contents:
    - "3.1.  Network Entity Object\n   The Network Entity object is a container of
      Storage Node objects and\n   Portal objects.  It represents the infrastructure
      supporting access\n   to a unique set of one or more Storage Nodes.  The Entity
      Identifier\n   attribute uniquely distinguishes a Network Entity, and is the
      key\n   used to register a Network Entity object in an iSNS server.  All\n   Storage
      Nodes and Portals contained within a single Network Entity\n   object operate
      as a cohesive unit.\n   Note that it is possible for a single physical device
      or gateway to\n   be represented by more than one logical Network Entity in
      the iSNS\n   database.  For example, one of the Storage Nodes on a physical
      device\n   may be accessible from only a subset of the network interfaces (i.e.,\n
      \  Portals) available on that device.  In this case, a logical network\n   entity
      (i.e., a \"shadow entity\") is created and used to contain the\n   Portals and
      Storage Nodes that can operate cooperatively.  No object\n   (Portals, Storage
      Nodes, etc.) can be contained in more than one\n   logical Network Entity.\n
      \  Similarly, it is possible for a logical Network Entity to be\n   supported
      by more than one physical device or gateway.  For example,\n   multiple FC-iSCSI
      gateways may be used to bridge FC devices in a\n   single Fibre Channel network.
      \ Collectively, the multiple gateways\n   can be used to support a single logical
      Network Entity that is used\n   to contain all the devices in that Fibre Channel
      network.\n"
    title: 3.1.  Network Entity Object
  - contents:
    - "3.2.  Portal Object\n   The Portal object is an interface through which access
      to Storage\n   Nodes within the Network Entity can be obtained.  The IP address
      and\n   TCP/UDP Port number attributes uniquely distinguish a Portal object,\n
      \  and combined are the key used to register a Portal object in an iSNS\n   server.
      \ A Portal is contained in one and only one Network Entity,\n   and may be contained
      in one or more DDs (see Section 3.6).\n"
    title: 3.2.  Portal Object
  - contents:
    - "3.3.  Storage Node Object\n   The Storage Node object is the logical endpoint
      of an iSCSI or iFCP\n   session.  In iFCP, the session endpoint is represented
      by the World\n   Wide Port Name (WWPN).  In iSCSI, the session endpoint is represented\n
      \  by the iSCSI Name of the device.  For iSCSI, the iSCSI Name attribute\n   uniquely
      distinguishes a Storage Node, and is the key used to\n   register a Storage
      Node object in an iSNS Server.  For iFCP, the FC\n   Port Name (WWPN) attribute
      uniquely distinguishes a Storage Node, and\n   is the key used to register a
      Storage Node object in the iSNS Server.\n   Storage Node is contained in only
      one Network Entity object and may\n   be contained in one or more DDs (see Section
      3.6).\n"
    title: 3.3.  Storage Node Object
  - contents:
    - "3.4.  Portal Group Object\n   The Portal Group (PG) object represents an association
      between a\n   Portal and an iSCSI Node.  Each Portal and iSCSI Storage Node\n
      \  registered in an Entity can be associated using a Portal Group (PG)\n   object.
      \ The PG Tag (PGT), if non-NULL, indicates that the associated\n   Portal provides
      access to the associated iSCSI Storage Node in the\n   Entity.  All Portals
      that have the same PGT value for a specific\n   iSCSI Storage Node allow coordinated
      access to that node.\n   A PG object MAY be registered when a Portal or iSCSI
      Storage Node is\n   registered.  Each Portal to iSCSI Node association is represented
      by\n   one and only one PG object.  In order for a Portal to provide access\n
      \  to an iSCSI Node, the PGT of the PG object MUST be non-NULL.  If the\n   PGT
      value registered for a specified Portal and iSCSI Node is NULL,\n   or if no
      PGT value is registered, then the Portal does not provide\n   access to that
      iSCSI Node in the Entity.\n   The PGT value indicates whether access to an iSCSI
      Node can be\n   coordinated across multiple Portals.  All Portals that have
      the same\n   PGT value for a specific iSCSI Node can provide coordinated access
      to\n   that iSCSI Node.  According to the iSCSI Specification, coordinated\n
      \  access to an iSCSI node indicates the capability of coordinating an\n   iSCSI
      session with connections that span these Portals [iSCSI].\n   The PG object
      is uniquely distinguished by the iSCSI Name, Portal IP\n   Address, and Portal
      TCP Port values of the associated Storage Node\n   and Portal objects.  These
      are represented in the iSNS Server by the\n   PG iSCSI Name, PG Portal IP Address,
      and PG Portal TCP/UDP Port\n   attributes, respectively.  The PG object is also
      uniquely\n   distinguished in the iSNS Server by the PG Index value.\n   A new
      PG object can only be registered by referencing its associated\n   iSCSI Storage
      Node or Portal object.  A pre-existing PG object can be\n   modified or queried
      by using its Portal Group Index as message key,\n   or by referencing its associated
      iSCSI Storage Node or Portal object.\n   A 0-length Tag, Length, Value TLV is
      used to register a PGT NULL\n   value.\n   The PG object is deregistered if
      and only if its associated iSCSI\n   Node and Portal objects are both removed.\n"
    title: 3.4.  Portal Group Object
  - contents:
    - "3.5.  Device Object\n   The FC Device represents the Fibre Channel Node.  This
      object\n   contains information that may be useful in the management of the\n
      \  Fibre Channel device.  The FC Node Name (WWNN) attribute uniquely\n   distinguishes
      an FC Device, and is the key used to register an FC\n   Device object in the
      iSNS Server.\n   The FC Device is contained in one or more Storage Node objects.\n"
    title: 3.5.  Device Object
  - contents:
    - "3.6.  Discovery Domain Object\n   Discovery Domains (DD) are a security and
      management mechanism used\n   to administer access and connectivity to storage
      devices.  For query\n   and registration purposes, they are considered containers
      for Storage\n   Node and Portal objects.  A query by an iSNS client that is
      not from\n   a Control Node only returns information about objects with which
      it\n   shares at least one active DD.  The only exception to this rule is\n
      \  with Portals; if Storage Nodes of a Network Entity are registered in\n   the
      DD without Portals, then all Portals of that Network Entity are\n   implicit
      members of that DD.  The Discovery Domain ID (DD_ID)\n   attribute uniquely
      distinguishes a Discovery Domain object, and is\n   the key used to register
      a Discovery Domain object in the iSNS\n   Server.\n   A DD is considered active
      if it is a member of at least one active DD\n   Set.  DDs that are not members
      of at least one enabled DDS are\n   considered disabled.  A Storage Node can
      be a member of one or more\n   DDs.  An enabled DD establishes connectivity
      among the Storage Nodes\n   in that DD.\n"
    title: 3.6.  Discovery Domain Object
  - contents:
    - "3.7.  Discovery Domain Set Object\n   The Discovery Domain Set (DDS) is a container
      object for Discovery\n   Domains (DDs).  DDSs may contain one or more DDs.  Similarly,
      each DD\n   can be a member of one or more DDSs.  DDSs are a mechanism to store\n
      \  coordinated sets of DD mappings in the iSNS server.  Active DDs are\n   members
      of at least one active DD Set.  Multiple DDSs may be\n   considered active at
      the same time.  The Discovery Domain Set ID\n   (DDS_ID) attribute uniquely
      distinguishes a Discovery Domain Set\n   object, and is the key used to register
      a Discovery Domain Set object\n   in the iSNS Server.\n"
    title: 3.7.  Discovery Domain Set Object
  - contents:
    - "3.8.  Database Model\n   As presented to the iSNS client, each object of a
      specific type in\n   the iSNS database MUST have an implicit internal linear
      ordering\n   based on the key(s) for that object type.  This ordering provides
      the\n   ability to respond to DevGetNext queries (see Section 5.6.5.3).  The\n
      \  ordering of objects in the iSNS database SHOULD NOT be changed with\n   respect
      to that implied ordering, as a consequence of object\n   insertions and deletions.
      \ That is, the relative order of surviving\n   object entries in the iSNS database
      SHOULD be preserved so that the\n   DevGetNext message encounters generally
      reasonable behavior.\n   The following diagram shows the various objects described
      above and\n   their relationship to each other.\n                    +--------------+
      \   +-----------+\n                    |    NETWORK   |1  *|           |\n                    |
      \   ENTITY    |----|  PORTAL   |\n                    |              |    |
      \          |\n                    +--------------+    +-----------+\n                            |1
      \           |1  |*\n                            |             |   |\n                            |
      \            |*  |\n                            |   +----------+  |\n                            |
      \  |  PORTAL  |  |\n                            |   |  GROUP   |  |\n                            |
      \  +----------+  |\n                            |    |*           |\n                            |
      \   |            |\n                            |*   |1           |*\n   +-----------+
      \   +--------------+    +-----------+    +-----------+\n   |    FC     |1  *|
      \  STORAGE    |*  *| DISCOVERY |*  *| DISCOVERY |\n   |  DEVICE   |----|    NODE
      \     |----|  DOMAIN   |----|  DOMAIN   |\n   |           |    |              |
      \   |           |    |    SET    |\n   +-----------+    +--------------+    +-----------+
      \   +-----------+\n                * represents 0 to many possible relationships\n"
    title: 3.8.  Database Model
  title: 3.  iSNS Object Model
- contents:
  - "4.  iSNS Implementation Requirements\n   This section details specific requirements
    for support of each of\n   these IP storage protocols.  Implementation requirements
    for security\n   are described in Section 7.\n"
  - contents:
    - "4.1.  iSCSI Requirements\n   Use of iSNS in support of iSCSI is OPTIONAL.  iSCSI
      devices MAY be\n   manually configured with the iSCSI Name and IP address of
      peer\n   devices, without the aid or intervention of iSNS.  iSCSI devices may\n
      \  also use SLP [RFC2608] to discover peer iSCSI devices.  However, iSNS\n   is
      useful for scaling a storage network to a larger number of iSCSI\n   devices.\n"
    - contents:
      - "4.1.1.  Required Attributes for Support of iSCSI\n   The following attributes
        are available to support iSCSI.  Attributes\n   indicated in the REQUIRED
        for Server column MUST be implemented by an\n   iSNS server used to support
        iSCSI.  Attributes indicated in the\n   REQUIRED for Client column MUST be
        implemented by an iSCSI device\n   that elects to use the iSNS.  Attributes
        indicated in the K (Key)\n   column uniquely identify the object type in the
        iSNS Server.  A more\n   detailed description of each attribute is found in
        Section 6.\n                                                        REQUIRED
        for:\n   Object             Attribute                    K    Server  Client\n
        \  ------             ---------                    -    ------  ------\n   NETWORK
        ENTITY     Entity Identifier            *      *        *\n                      Entity
        Protocol                     *        *\n                      Management
        IP Address               *\n                      Timestamp                           *\n
        \                     Protocol Version Range              *\n                      Registration
        Period                 *\n                      Entity Index                        *\n
        \                     Entity IKE Phase-1 Proposal\n                      Entity
        Certificate\n   PORTAL             IP Address                   *      *        *\n
        \                     TCP/UDP Port                 *      *        *\n                      Portal
        Symbolic Name                *\n                      ESI Interval                        *\n
        \                     ESI Port                            *\n                      Portal
        Index                        *\n                      SCN Port                            *\n
        \                     Portal Security Bitmap              *\n                      Portal
        IKE Phase-1 Proposal\n                      Portal IKE Phase-2 Proposal\n
        \                     Portal Certificate\n   PORTAL GROUP       PG iSCSI Name
        \               *      *        *\n                      PG IP Address                *
        \     *        *\n                      PG TCP/UDP Port              *      *
        \       *\n                      PG Tag                              *        *\n
        \                     PG Index                            *\n   STORAGE NODE
        \      iSCSI Name                   *      *        *\n                      iSCSI
        Node Type                     *        *\n                      Alias                               *\n
        \                     iSCSI SCN Bitmap                    *\n                      iSCSI
        Node Index                    *\n                      WWNN Token\n                      iSCSI
        AuthMethod\n                      iSCSI Node Certificate\n   DISCOVERY DOMAIN
        \  DD ID                        *      *        *\n                      DD
        Symbolic Name                    *\n                      DD Member iSCSI
        Node Index          *\n                      DD Member iSCSI Name                *\n
        \                     DD Member Portal Index              *\n                      DD
        Member Portal IP Addr            *\n                      DD Member Portal
        TCP/UDP            *\n                      DD Features                         *\n
        \  DISCOVERY DOMAIN   DDS Identifier                *     *\n   SET                DDS
        Symbolic Name                   *\n                      DDS Status                          *\n
        \  All iSCSI user-specified and vendor-specified attributes are OPTIONAL\n
        \  to implement and use.\n"
      title: 4.1.1.  Required Attributes for Support of iSCSI
    - contents:
      - "4.1.2.  Examples: iSCSI Object Model Diagrams\n   The following diagram models
        how a simple iSCSI-based initiator and\n   target is represented using database
        objects stored in the iSNS\n   server.  In this implementation, each target
        and initiator is\n   attached to a single Portal.\n   +----------------------------------------------------------------+\n
        \  |                         IP Network                             |\n   +------------+--------------------------------------+------------+\n
        \               |                                      |\n                |
        \                                     |\n   +-----+------+------+-----+            +-----+------+------+-----+\n
        \  |     | PORTAL      |     |            |     | PORTAL      |     |\n   |
        \    | -IP Addr 1  |     |            |     | -IP Addr 2  |     |\n   |     |
        -TCP Port 1 |     |            |     | -TCP Port 2 |     |\n   |     +-----+
        +-----+     |            |     +-----+ +-----+     |\n   |           | |           |
        \           |           | |           |\n   |     +-----+ +-----+     |            |
        \    +-----+ +-----+     |\n   |     | PORTAL GROUP|     |            |     |
        PORTAL GROUP|     |\n   |     | -Prtl Tag 1 |     |            |     | -Prtl
        Tag 2 |     |\n   |     +-----+ +-----+     |            |     +-----+ +-----+
        \    |\n   |           | |           |            |           | |           |\n
        \  |  +--------+ +--------+  |            |   +-------+ +--------+  |\n   |
        \ |                   |  |            |   |                  |  |\n   |  |
        \ STORAGE NODE     |  |            |   |  STORAGE NODE    |  |\n   |  |  -iSCSI
        Name      |  |            |   |   -iSCSI Name    |  |\n   |  |  -Alias: \"server1\"|
        \ |            |   |   -Alias: \"disk1\"|  |\n   |  |  -Type: initiator |
        \ |            |   |   -Type: target  |  |\n   |  |                   |  |
        \           |   |                  |  |\n   |  +-------------------+  |            |
        \  +------------------+  |\n   |                         |            |                         |\n
        \  |    NETWORK ENTITY       |            |    NETWORK ENTITY       |\n   |
        \  -Entity ID (FQDN):    |            |   -Entity ID (FQDN):    |\n   |    \"strg1.example.com\"
        \ |            |    \"strg2.example.net\"  |\n   |   -Protocol: iSCSI      |
        \           |   -Protocol: iSCSI      |\n   |                         |            |
        \                        |\n   +-------------------------+            +-------------------------+\n
        \  The object model can be expanded to describe more complex devices,\n   such
        as an iSCSI device with more than one storage controller, in\n   which each
        controller is accessible through any of multiple Portal\n   interfaces, possibly
        using multiple Portal Groups.  The storage\n   controllers on this device
        can be accessed through alternate Portal\n   interfaces if any original interface
        should fail.  The following\n   diagram describes such a device:\n      +---------------------------------------------------------------+\n
        \     |                         IP Network                            |\n
        \     +-------------------+-----------------------+-------------------+\n
        \                         |                       |\n                          |
        \                      |\n      +------------+------+------+---------+------+------+------------+\n
        \     |            | PORTAL 1    |         | PORTAL 2    |            |\n
        \     |            | -IP Addr 1  |         | -IP Addr 2  |            |\n
        \     |            | -TCP Port 1 |         | -TCP Port 2 |            |\n
        \     |            +-----+ +-----+         +-----+ +-----+            |\n
        \     |                  | |                     | |                  |\n
        \     |  +---------------+ +---------------------+ +---------------+  |\n
        \     |  +-------+ +----------------+ +-------------------+ +------+  |\n
        \     |          | |                | |                   | |         |\n
        \     |  +-------+ +-------+ +------+ +--------+ +--------+ +------+  |\n
        \     |  |                 | |                 | |                 |  |\n
        \     |  | STORAGE NODE 1  | | STORAGE NODE 2  | | STORAGE NODE 3  |  |\n
        \     |  |  -iSCSI Name 1  | |  -iSCSI Name 2  | |  -iSCSI Name 3  |  |\n
        \     |  |  -Alias: \"disk1\"| |  -Alias: \"disk2\"| |  -Alias: \"disk3\"|
        \ |\n      |  |  -Type: target  | |  -Type: target  | |  -Type: target  |
        \ |\n      |  |                 | |                 | |                 |
        \ |\n      |  +-----------------+ +-----------------+ +-----------------+
        \ |\n      |                                                               |\n
        \     |                         NETWORK ENTITY                        |\n
        \     |                    -Entity ID (FQDN): \"dev1.example.com\"      |\n
        \     |                    -Protocol: iSCSI                           |\n
        \     |                                                               |\n
        \     |                   Portal Group Object Table                   |\n
        \     |           Storage-Node Portal Portal-Group-Tag                |\n
        \     |                1         1           10                       |\n
        \     |                1         2         NULL (no access permitted) |\n
        \     |                2         1           20                       |\n
        \     |                2         2           20                       |\n
        \     |                3         1           30                       |\n
        \     |                3         2           10                       |\n
        \     |                                                               |\n
        \     +---------------------------------------------------------------+\n
        \  Storage Node 1 is accessible via Portal 1 with a PGT of 10.  It does\n
        \  not have a Portal Group Tag (PGT) assigned for Portal 2, so Storage\n   Node
        1 cannot be accessed via Portal 2.\n   Storage Node 2 can be accessed via
        both Portal 1 and Portal 2.  Since\n   Storage Node 2 has the same PGT value
        assigned to both Portal 1 and\n   Portal 2, in this case 20, coordinated access
        via the Portals is\n   available [iSCSI].\n   Storage Node 3 can be accessed
        via Portal 1 or Portal 2.  However,\n   since Storage Node 3 has different
        PGT values assigned to each\n   Portal, in this case 10 and 30, access is
        not coordinated [iSCSI].\n   Because PGTs are assigned within the context
        of a Storage Node, the\n   PGT value of 10 used for Storage Node 1 and Storage
        Node 3 are not\n   interrelated.\n"
      title: '4.1.2.  Examples: iSCSI Object Model Diagrams'
    - contents:
      - "4.1.3.  Required Commands and Response Messages for Support of iSCSI\n   The
        following iSNSP messages and responses are available in support\n   of iSCSI.
        \ Messages indicated in the REQUIRED for Server column MUST\n   be implemented
        in iSNS servers used for iSCSI devices.  Messages\n   indicated in the REQUIRED
        for Client column MUST be implemented in\n   iSCSI devices that elect to use
        the iSNS server.\n                                                     REQUIRED
        for:\n   Message Description       Abbreviation  Func_ID   Server  Client\n
        \  -------------------       ------------  -------   ------  ------\n   RESERVED
        \                               0x0000\n   Device Attr Reg Request   DevAttrReg
        \   0x0001       *       *\n   Dev Attr Query Request    DevAttrQry    0x0002
        \      *       *\n   Dev Get Next Request      DevGetNext    0x0003       *\n
        \  Deregister Dev Request    DevDereg      0x0004       *       *\n   SCN
        Register Request      SCNReg        0x0005       *\n   SCN Deregister Request
        \   SCNDereg      0x0006       *\n   SCN Event                 SCNEvent      0x0007
        \      *\n   State Change Notification SCN           0x0008       *\n   DD
        Register               DDReg         0x0009       *       *\n   DD Deregister
        \            DDDereg       0x000A       *       *\n   DDS Register              DDSReg
        \       0x000B       *       *\n   DDS Deregister            DDSDereg      0x000C
        \      *       *\n   Entity Status Inquiry     ESI           0x000D       *\n
        \  Name Service Heartbeat    Heartbeat     0x000E\n   RESERVED                                0x000F-0x00FF\n
        \  Vendor Specific                         0x0100-0x01FF\n   RESERVED                                0x0200-0x7FFF\n
        \  The following are iSNSP response messages used in support of iSCSI:\n                                                      REQUIRED
        for:\n   Response Message Desc     Abbreviation  Func_ID    Server  Client\n
        \  ---------------------     ------------  -------    ------  ------\n   RESERVED
        \                               0x8000\n   Device Attr Register Rsp  DevAttrRegRsp
        0x8001       *       *\n   Device Attr Query Rsp     DevAttrQryRsp 0x8002
        \      *       *\n   Device Get Next Rsp       DevGetNextRsp 0x8003       *\n
        \  Device Dereg Rsp          DevDeregRsp   0x8004       *       *\n   SCN
        Register Rsp          SCNRegRsp     0x8005       *\n   SCN Deregister Rsp
        \       SCNDeregRsp   0x8006       *\n   SCN Event Rsp             SCNEventRsp
        \  0x8007       *\n   SCN Response              SCNRsp        0x8008       *\n
        \  DD Register Rsp           DDRegRsp      0x8009       *       *\n   DD Deregister
        Rsp         DDDeregRsp    0x800A       *       *\n   DDS Register Rsp          DDSRegRsp
        \    0x800B       *       *\n   DDS Deregister Rsp        DDSDeregRsp   0x800C
        \      *       *\n   Entity Stat Inquiry Rsp   ESIRsp        0x800D       *\n
        \  RESERVED                                0x800E-0x80FF\n   Vendor Specific
        \                        0x8100-0x81FF\n   RESERVED                                0x8200-0xFFFF\n"
      title: 4.1.3.  Required Commands and Response Messages for Support of iSCSI
    title: 4.1.  iSCSI Requirements
  - contents:
    - "4.2.  iFCP Requirements\n   In iFCP, use of iSNS is REQUIRED.  No alternatives
      exist for support\n   of iFCP Naming & Discovery functions.\n"
    - contents:
      - "4.2.1.  Required Attributes for Support of iFCP\n   The following table displays
        attributes that are used by iSNS to\n   support iFCP.  Attributes indicated
        in the REQUIRED for Server column\n   MUST be implemented by the iSNS server
        that supports iFCP.\n   Attributes indicated in the REQUIRED for Client column
        MUST be\n   supported by iFCP gateways.  Attributes indicated in the K (Key)\n
        \  column uniquely identify the object type in the iSNS Server.  A more\n
        \  detailed description of each attribute is found in Section 6.\n                                                       REQUIRED
        for:\n   Object             Attribute                   K    Server  Client\n
        \  ------             ---------                   -    ------  ------\n   NETWORK
        ENTITY     Entity Identifier           *       *       *\n                      Entity
        Protocol                     *       *\n                      Management IP
        Address               *\n                      Timestamp                           *\n
        \                     Protocol Version Range              *\n                      Registration
        period\n                      Entity Index\n                      Entity IKE
        Phase-1 Proposal\n                      Entity Certificate\n   PORTAL             IP
        Address                  *       *       *\n                      TCP/UDP
        Port                *       *       *\n                      Symbolic Name
        \                      *\n                      ESI Interval                        *\n
        \                     ESI Port                            *\n                      SCN
        Port                            *\n                      Portal IKE Phase-1
        Proposal\n                      Portal IKE Phase-2 Proposal\n                      Portal
        Certificate\n                      Security Bitmap                     *\n
        \  STORAGE NODE       FC Port Name (WWPN)         *       *       *\n   (FC
        Port)          Port_ID                             *       *\n                      FC
        Port Type                        *       *\n                      Port Symbolic
        Name                  *\n                      Fabric Port Name (FWWN)             *\n
        \                     Hard Address                        *\n                      Port
        IP Address                     *\n                      Class of Service                    *\n
        \                     FC FC-4 Types                       *\n                      FC
        FC-4 Descriptors                 *\n                      FC FC-4 Features
        \                   *\n                      SCN Bitmap                          *\n
        \                     iFCP Port Role                      *\n                      Permanent
        Port Name                 *\n   FC DEVICE          FC Node Name (WWNN)         *
        \      *       *\n   (FC Node)          Node Symbolic Name                  *\n
        \                     Node IP Address                     *\n                      Node
        IPA                            *\n                      Proxy iSCSI Name\n
        \  DISCOVERY DOMAIN   DD ID                       *       *       *\n                      DD
        Symbolic Name                    *\n                      DD Member FC Port
        Name              *\n                      DD Member Portal Index              *\n
        \                     DD Member Portal IP Addr            *\n                      DD
        Member Portal TCP/UDP            *\n   DISCOVERY DOMAIN   DDS ID                      *
        \      *\n   SET                DDS Symbolic Name                   *\n                      DDS
        Status                          *\n   OTHER              Switch Name\n                      Preferred_ID\n
        \                     Assigned_ID\n                      Virtual_Fabric_ID\n
        \  All iFCP user-specified and vendor-specified attributes are OPTIONAL\n
        \  to implement and use.\n"
      title: 4.2.1.  Required Attributes for Support of iFCP
    - contents:
      - "4.2.2.  Example: iFCP Object Model Diagram\n   The iFCP protocol allows native
        Fibre Channel devices or Fibre\n   Channel fabrics connected to an iFCP gateway
        to be directly\n   internetworked using IP.\n   When supporting iFCP, the
        iSNS server stores Fibre Channel device\n   attributes, iFCP gateway attributes,
        and Fibre Channel fabric switch\n   attributes that might also be stored in
        an FC name server.\n   The following diagram shows a representation of a gateway
        supporting\n   multiple Fibre Channel devices behind it.  The two Portal objects\n
        \  represent IP interfaces on the iFCP gateway that can be used to\n   access
        any of the three Storage Node objects behind it.  Note that\n   the FC Device
        object is not contained in the Network Entity object.\n   However, each FC
        Device has a relationship to one or more Storage\n   Node objects.\n   +--------------------------------------------------------+\n
        \  |                         IP Network                     |\n   +--------+-----------------+-----------------------------+\n
        \           |                 |\n   +-+------+------+---+------+------+----------------------+\n
        \  | | PORTAL      |   | PORTAL      | NETWORK ENTITY       |\n   | | -IP
        Addr 1  |   | -IP Addr 2  | -Entity ID (FQDN):   |\n   | | -TCP Port 1 |   |
        -TCP Port 2 |  \"gtwy1.example.com\" |\n   | +-----+ +-----+   +-----+ +-----+
        -Protocol: iFCP      |\n   |       | |               | |                            |\n
        \  | +-----+ +---------------+ +----------------------+     |\n   | +-----+
        +---------------+ +-------------+ +------+     |\n   |       | |               |
        |             | |            |\n   | +-----+ +-----+    +----+ +------+ +----+
        +------+     |\n   | |STORAGE NODE |    |STORAGE NODE | |STORAGE NODE |     |\n
        \  | | -WWPN 1     |    | -WWPN 2     | | -WWPN 3     |     |\n   | | -Port
        ID 1  |    | -Port ID 2  | | -Port ID 3  |     |\n   | | -FWWN 1     |    |
        -FWWN 2     | | -FWWN 3     |     |\n   | | -FC COS     |    | -FC COS     |
        | -FC COS     |     |\n   | +------+------+    +-------+-----+ +----+--------+
        \    |\n   +--------|-------------------|------------|--------------+\n            |
        \                  |            |\n     +------+------+        +---+------------+---+\n
        \    | FC DEVICE   |        |    FC DEVICE       |\n     | -WWNN 1     |        |
        \  -WWNN 2          |\n     |             |        |                    |\n
        \    +-------------+        +--------------------+\n"
      title: '4.2.2.  Example: iFCP Object Model Diagram'
    - contents:
      - "4.2.3.  Required Commands and Response Messages for Support of iFCP\n   The
        iSNSP messages and responses displayed in the following tables\n   are available
        to support iFCP gateways.  Messages indicated in the\n   REQUIRED TO IMPLEMENT
        column MUST be supported by the iSNS server\n   used by iFCP gateways.  Messages
        indicated in the REQUIRED TO USE\n   column MUST be supported by the iFCP
        gateways themselves.\n                                                     REQUIRED
        for:\n   Message Description       Abbreviation  Func ID   Server   Client\n
        \  -------------------       ------------  -------   ------   ------\n   RESERVED
        \                               0x0000\n   Device Attr Reg Request   DevAttrReg
        \   0x0001       *       *\n   Device Attr Query Request DevAttrQry    0x0002
        \      *       *\n   Device Get Next Request   DevGetNext    0x0003       *\n
        \  Device Dereg Request      DevDereg      0x0004       *       *\n   SCN
        Register Request      SCNReg        0x0005       *\n   SCN Deregister Request
        \   SCNDereg      0x0006       *\n   SCN Event                 SCNEvent      0x0007
        \      *\n   State Change Notification SCN           0x0008       *\n   DD
        Register               DDReg         0x0009       *       *\n   DD Deregister
        \            DDDereg       0x000A       *       *\n   DDS Register              DDSReg
        \       0x000B       *       *\n   DDS Deregister            DDSDereg      0x000C
        \      *       *\n   Entity Status Inquiry     ESI           0x000D       *\n
        \  Name Service Heartbeat    Heartbeat     0x000E       *\n   Reserved                  Reserved
        \     0x000F-0x0010\n   Request FC_DOMAIN_ID      RqstDomId     0x0011\n   Release
        FC_DOMAIN_ID      RlseDomId     0x0012\n   Get FC_DOMAIN_IDs         GetDomId
        \     0x0013\n   RESERVED                                0x0014-0x00FF\n   Vendor
        Specific                         0x0100-0x01FF\n   RESERVED                                0x0200-0x7FFF\n
        \  The following are iSNSP response messages in support of iFCP:\n                                                     REQUIRED
        for:\n   Response Message Desc     Abbreviation  Func_ID   Server   Client\n
        \  ---------------------     ------------  -------   ------   ------\n   RESERVED
        \                               0x8000\n   Device Attr Reg Rsp       DevAttrRegRsp
        0x8001       *       *\n   Device Attr Query Rsp     DevAttrQryRsp 0x8002
        \      *       *\n   Device Get Next Rsp       DevGetNextRsp 0x8003       *\n
        \  Device Deregister Rsp     DevDeregRsp   0x8004       *       *\n   SCN
        Register Rsp          SCNRegRsp     0x8005       *\n   SCN Deregister Rsp
        \       SCNDeregRsp   0x8006       *\n   SCN Event Rsp             SCNEventRsp
        \  0x8007       *\n   SCN Rsp                   SCNRsp        0x8008       *\n
        \  DD Register Rsp           DDRegRsp      0x8009       *       *\n   DD Deregister
        Rsp         DDDeregRsp    0x800A       *       *\n   DDS Register Rsp          DDSRegRsp
        \    0x800B       *       *\n   DDS Deregister Rsp        DDSDeregRsp   0x800C
        \      *       *\n   Entity Status Inquiry Rsp ESIRsp        0x800D       *\n
        \  NOT USED                                0x800E\n   RESERVED                                0x800F-0x8010\n
        \  Request FC_DOMAIN_ID Rsp  RqstDomIdRsp  0x8011\n   Release FC_DOMAIN_ID
        Rsp  RlseDomIdRsp  0x8012\n   Get FC_DOMAIN_IDs         GetDomIdRsp   0x0013\n
        \  RESERVED                                0x8014-0x80FF\n   Vendor Specific
        \                        0x8100-0x81FF\n   RESERVED                                0x8200-0xFFFF\n"
      title: 4.2.3.  Required Commands and Response Messages for Support of iFCP
    title: 4.2.  iFCP Requirements
  title: 4.  iSNS Implementation Requirements
- contents:
  - "5.  iSNSP Message Format\n   The iSNSP message format is similar to the format
    of other common\n   protocols such as DHCP, DNS and BOOTP.  An iSNSP message may
    be sent\n   in one or more iSNS Protocol Data Units (PDU).  Each PDU is 4-byte\n
    \  aligned.  The following describes the format of the iSNSP PDU:\n   Byte   MSb
    \                                       LSb\n   Offset 0                   15
    16                   31\n          +---------------------+----------------------+\n
    \       0 |   iSNSP VERSION     |    FUNCTION ID       | 4 Bytes\n          +---------------------+----------------------+\n
    \       4 |     PDU LENGTH      |       FLAGS          | 4 Bytes\n          +---------------------+----------------------+\n
    \       8 |   TRANSACTION ID    |    SEQUENCE ID       | 4 Bytes\n          +---------------------+----------------------+\n
    \      12 |                                            |\n          |                PDU
    PAYLOAD                 | N Bytes\n          |                    ...                     |\n
    \         +--------------------------------------------+\n     12+N | AUTHENTICATION
    BLOCK (Multicast/Broadcast) | L Bytes\n          +--------------------------------------------+\n
    \                  Total Length = 12 + N + L\n"
  - contents:
    - "5.1.  iSNSP PDU Header\n   The iSNSP PDU header contains the iSNSP VERSION,
      FUNCTION ID, PDU\n   LENGTH, FLAGS, TRANSACTION ID, and SEQUENCE ID fields as
      defined\n   below.\n"
    - contents:
      - "5.1.1.  iSNSP Version\n   The iSNSP version described in this document is
        0x0001.  All other\n   values are RESERVED.  The iSNS server MAY reject messages
        for iSNSP\n   version numbers that it does not support.\n"
      title: 5.1.1.  iSNSP Version
    - contents:
      - "5.1.2.  iSNSP Function ID\n   The FUNCTION ID defines the type of iSNS message
        and the operation to\n   be executed.  FUNCTION_ID values with the leading
        bit cleared\n   indicate query, registration, and notification messages, whereas\n
        \  FUNCTION_ID values with the leading bit set indicate response\n   messages.\n
        \  See Section 4 under the appropriate protocol (i.e., iSCSI or iFCP)\n   for
        a mapping of the FUNCTION_ID value to the iSNSP Command or\n   Response message.
        \ All PDUs comprising an iSNSP message must have the\n   same FUNCTION_ID
        value.\n"
      title: 5.1.2.  iSNSP Function ID
    - contents:
      - "5.1.3.  iSNSP PDU Length\n   The iSNS PDU Length specifies the length of
        the PDU PAYLOAD field in\n   bytes.  The PDU Payload contains TLV attributes
        for the operation.\n   Additionally, response messages contain a success/failure
        code.  The\n   PDU Length MUST be 4-byte aligned.\n"
      title: 5.1.3.  iSNSP PDU Length
    - contents:
      - "5.1.4.  iSNSP Flags\n   The FLAGS field indicates additional information
        about the message\n   and the type of Network Entity that generated the message.
        \ The\n   following table displays the valid flags:\n          Bit Position
        \     Enabled (1) means:\n          ------------      -----------------\n
        \          16               Sender is the iSNS client\n           17               Sender
        is the iSNS server\n           18               Authentication block is present\n
        \          19               Replace flag (for DevAttrReg)\n           20               Last
        PDU of the iSNS message\n           21               First PDU of the iSNS
        message\n           22-31            RESERVED\n"
      title: 5.1.4.  iSNSP Flags
    - contents:
      - "5.1.5.  iSNSP Transaction ID\n   The TRANSACTION ID MUST be set to a unique
        value for each\n   concurrently outstanding request message.  Replies MUST
        use the same\n   TRANSACTION ID value as the associated iSNS request message.
        \ If a\n   message is retransmitted, the original TRANSACTION ID value MUST
        be\n   used.  All PDUs comprising an iSNSP message must have the same\n   TRANSACTION
        ID value.\n"
      title: 5.1.5.  iSNSP Transaction ID
    - contents:
      - "5.1.6.  iSNSP Sequence ID\n   The SEQUENCE ID has a unique value for each
        PDU within a single\n   transaction.  The SEQUENCE_ID value of the first PDU
        transmitted in a\n   given iSNS message MUST be zero (0), and each SEQUENCE_ID
        value in\n   each PDU MUST be numbered sequentially in the order in which
        the PDUs\n   are transmitted.  Note that the two-byte SEQUENCE ID allows for
        up to\n   65536 PDUs per iSNS message.\n"
      title: 5.1.6.  iSNSP Sequence ID
    title: 5.1.  iSNSP PDU Header
  - contents:
    - "5.2.  iSNSP Message Segmentation and Reassembly\n   iSNS messages may be carried
      in one or more iSNS PDUs.  If only one\n   iSNS PDU is used to carry the iSNS
      message, then bit 21 (First PDU)\n   and bit 20 in the FLAGS field (Last PDU)
      SHALL both be set.  If\n   multiple PDUs are used to carry the iSNS message,
      then bit 21 SHALL\n   be set in the first PDU of the message, and bit 20 SHALL
      be set in\n   the last PDU.\n   All PDUs comprising the same iSNSP message SHALL
      have the same\n   FUNCTION_ID and TRANSACTION_ID values.  Each PDU comprising
      an iSNSP\n   message SHALL have a unique SEQUENCE_ID value.\n"
    title: 5.2.  iSNSP Message Segmentation and Reassembly
  - contents:
    - "5.3.  iSNSP PDU Payload\n   The iSNSP PDU PAYLOAD is of variable length and
      contains attributes\n   used for registration and query operations.  The attribute
      data items\n   use a format similar to that of other protocols, such as DHCP\n
      \  [RFC2131] options.  Each iSNS attribute is specified in the PDU\n   Payload
      using Tag-Length-Value (TLV) data format, as shown below:\n   Byte   MSb                                        LSb\n
      \  Offset 0                                           31\n          +--------------------------------------------+\n
      \       0 |               Attribute Tag                | 4 Bytes\n          +--------------------------------------------+\n
      \       4 |            Attribute Length (N)            | 4 Bytes\n          +--------------------------------------------+\n
      \       8 |                                            |\n          |              Attribute
      Value               | N Bytes\n          |                                            |\n
      \         +--------------------------------------------+\n                   Total
      Length = 8 + N\n   Attribute Tag:    a 4-byte field that identifies the attribute
      as\n                     defined in Section 6.1.  This field contains the\n
      \                    tag value from the indicated table.\n   Attribute Length:
      a 4-byte field that indicates the length, in bytes,\n                     of
      the value field to follow in the TLV.  For\n                     variable-length
      attributes, the value field MUST\n                     contain padding bytes,
      if necessary, in order to\n                     achieve 4-byte alignment.  A
      \"zero-length TLV\"\n                     contains only the attribute tag and
      length fields.\n   Attribute Value:  a variable-length field containing the
      attribute\n                     value and padding bytes (if necessary).\n   The
      above format is used to identify each attribute in the PDU\n   Payload.  Note
      that TLV boundaries need not be aligned with PDU\n   boundaries; PDUs may carry
      one or more TLVs, or any fraction thereof.\n   The Response Status Code, contained
      in response message PDU Payloads\n   and described below, is not in TLV format.
      \ PDU Payloads for messages\n   that do not contain iSNS attributes, such as
      the Name Service\n   Heartbeat, do not use the TLV format.\n"
    - contents:
      - "5.3.1.  Attribute Value 4-Byte Alignment\n   All attribute values are aligned
        to 4-byte boundaries.  For variable\n   length attributes, if necessary, the
        TLV length MUST be increased to\n   the next 4-byte boundary through padding
        with bytes containing zero\n   (0).  If an attribute value is padded, a combination
        of the tag and\n   attribute value itself is used to determine the actual
        value length\n   and number of pad bytes.  There is no explicit count of the
        number of\n   pad bytes provided in the TLV.\n"
      title: 5.3.1.  Attribute Value 4-Byte Alignment
    title: 5.3.  iSNSP PDU Payload
  - contents:
    - "5.4.  iSNSP Response Status Codes\n   All iSNSP response messages contain a
      4-byte Status Code field as the\n   first field in the iSNSP PDU PAYLOAD.  If
      the original iSNSP request\n   message was processed normally by the iSNS server,
      or by the iSNS\n   client for ESI and SCN messages, then this field SHALL contain
      a\n   status code of 0 (Successful).  A non-zero status code indicates\n   rejection
      of the entire iSNS client request message.\n          Status Code      Status
      Description\n          -----------      -----------------\n            0              Successful\n
      \           1              Unknown Error\n            2              Message
      Format Error\n            3              Invalid Registration\n            4
      \             RESERVED\n            5              Invalid Query\n            6
      \             Source Unknown\n            7              Source Absent\n            8
      \             Source Unauthorized\n            9              No Such Entry\n
      \          10              Version Not Supported\n           11              Internal
      Error\n           12              Busy\n           13              Option Not
      Understood\n           14              Invalid Update\n           15              Message
      (FUNCTION_ID) Not Supported\n           16              SCN Event Rejected\n
      \          17              SCN Registration Rejected\n           18              Attribute
      Not Implemented\n           19              FC_DOMAIN_ID Not Available\n           20
      \             FC_DOMAIN_ID Not Allocated\n           21              ESI Not
      Available\n           22              Invalid Deregistration\n           23
      \             Registration Feature Not Supported\n           24 and above    RESERVED\n"
    title: 5.4.  iSNSP Response Status Codes
  - contents:
    - "5.5.  Authentication for iSNS Multicast and Broadcast Messages\n   For iSNS
      multicast and broadcast messages (see Section 2.9.3), the\n   iSNSP provides
      authentication capability.  The following section\n   details the iSNS Authentication
      Block, which is identical in format\n   to the SLP authentication block [RFC2608].
      iSNS unicast messages\n   SHOULD NOT include the authentication block, but rather
      should rely\n   upon IPSec security mechanisms.\n   If a message contains an
      authentication block, then the\n   \"Authentication block present\" bit in the
      iSNSP PDU header FLAGS\n   field SHALL be enabled.\n   If a PKI is available
      with an [X.509] Certificate Authority (CA),\n   then public key authentication
      of the iSNS server is possible.  The\n   authentication block leverages the
      DSA with SHA-1 algorithm, which\n   can easily integrate into a public key infrastructure.\n
      \  The authentication block contains a digital signature for the\n   multicast
      message.  The digital signature is calculated on a per-PDU\n   basis.  The authentication
      block contains the following information:\n   1.  A time stamp, to prevent replay
      attacks.\n   2.  A structured authenticator containing a signature calculated
      over\n       the time stamp and the message being secured.\n   3.  An indicator
      of the cryptographic algorithm that was used to\n       calculate the signature.\n
      \  4.  An indicator of the keying material and algorithm parameters,\n       used
      to calculate the signature.\n   The authentication block is described in the
      following figure:\n      Byte   MSb                              LSb\n      Offset
      0                                 31\n             +----------------------------------+\n
      \        0   |    BLOCK STRUCTURE DESCRIPTOR    |     4 Bytes\n             +----------------------------------+\n
      \        4   |   AUTHENTICATION BLOCK LENGTH    |     4 Bytes\n             +----------------------------------+\n
      \        8   |           TIMESTAMP              |     8 Bytes\n             +----------------------------------+\n
      \       16   |       SPI STRING LENGTH          |     4 Bytes\n             +----------------------------------+\n
      \       20   |           SPI STRING             |     N Bytes\n             +----------------------------------+\n
      \   20 + N   |     STRUCTURED AUTHENTICATOR     |     M Bytes\n             +----------------------------------+\n
      \               Total Length = 20 + N + M\n   BLOCK STRUCTURE DESCRIPTOR (BSD):
      Defines the structure and algorithm\n              to use for the STRUCTURED
      AUTHENTICATOR.  BSD values from\n              0x00000000 to 0x00007FFF are
      assigned by IANA, while\n              values 0x00008000 to 0x00008FFF are for
      private use.\n   AUTHENTICATION BLOCK LENGTH: Defines the length of the authentication\n
      \             block, beginning with the BSD field and running through\n              the
      last byte of the STRUCTURED AUTHENTICATOR.\n   TIMESTAMP: This is an 8-byte
      unsigned, fixed-point integer giving the\n              number of seconds since
      00:00:00 GMT on January 1, 1970.\n   SPI STRING LENGTH: The length of the SPI
      STRING field.\n   SPI STRING (Security Parameters Index): Index to the key and\n
      \             algorithm used by the message recipient to decode the\n              STRUCTURED
      AUTHENTICATOR field.\n   STRUCTURED AUTHENTICATOR: Contains the digital signature.
      \ For the\n              default BSD value of 0x0002, this field SHALL contain
      the\n              binary ASN.1 encoding of output values from the DSA with\n
      \             SHA-1 signature calculation as specified in Section 2.2.2\n              of
      [RFC3279].\n"
    title: 5.5.  Authentication for iSNS Multicast and Broadcast Messages
  - contents:
    - "5.6.  Registration and Query Messages\n   The iSNSP registration and query
      message PDU Payloads contain a list\n   of attributes, and have the following
      format:\n             +----------------------------------------+\n             |
      \    Source Attribute (Requests Only)   |\n             +----------------------------------------+\n
      \            |  Message Key Attribute[1] (if present) |\n             +----------------------------------------+\n
      \            |  Message Key Attribute[2] (if present) |\n             +----------------------------------------+\n
      \            |               . . .                    |\n             +----------------------------------------+\n
      \            |       - Delimiter Attribute -          |\n             +----------------------------------------+\n
      \            |   Operating Attribute[1] (if present)  |\n             +----------------------------------------+\n
      \            |   Operating Attribute[2] (if present)  |\n             +----------------------------------------+\n
      \            |   Operating Attribute[3] (if present)  |\n             +----------------------------------------+\n
      \            |                 . . .                  |\n             +----------------------------------------+\n
      \  Each Source, Message Key, Delimiter, and Operating attribute is\n   specified
      in the PDU Payload using the Tag-Length-Value (TLV) data\n   format. iSNS Registration
      and Query messages are sent by iSNS Clients\n   to the iSNS server IP Address
      and well-known TCP/UDP Port.  The iSNS\n   Responses will be sent to the iSNS
      Client IP address and TCP/UDP port\n   number from the original request message.\n"
    - contents:
      - "5.6.1.  Source Attribute\n   The Source Attribute is used to identify the
        Storage Node to the iSNS\n   server for queries and other messages that require
        source\n   identification.  The Source Attribute uniquely identifies the source\n
        \  of the message.  Valid Source Attribute types are shown below.\n          Valid
        Source Attributes\n          -----------------------\n           iSCSI Name\n
        \          FC Port Name WWPN\n   For a query operation, the Source Attribute
        is used to limit the\n   scope of the specified operation to the Discovery
        Domains of which\n   the source is a member.  Special Control Nodes, identified
        by the\n   Source Attribute, may be administratively configured to perform
        the\n   specified operation on all objects in the iSNS database without\n
        \  scoping to Discovery Domains.\n   For messages that change the contents
        of the iSNS database, the iSNS\n   server MUST verify that the Source Attribute
        identifies either a\n   Control Node or a Storage Node that is a part of the
        Network Entity\n   containing the added, deleted, or modified objects.\n"
      title: 5.6.1.  Source Attribute
    - contents:
      - "5.6.2.  Message Key Attributes\n   Message Key attributes are used to identify
        matching objects in the\n   iSNS database for iSNS query and registration
        messages.  If present,\n   the Message Key MUST be a Registration or Query
        Key for an object as\n   described in Sections 5.6.5 and 6.1.  A Message Key
        is not required\n   when a query spans the entire set of objects available
        to the Source\n   or a registration is for a new Entity.\n   iSCSI Names used
        in the Message Key MUST be normalized according to\n   the stringprep template
        [STRINGPREP].  Entity Identifiers (EIDs) used\n   in the Message Key MUST
        be normalized according to the nameprep\n   template [NAMEPREP].\n"
      title: 5.6.2.  Message Key Attributes
    - contents:
      - "5.6.3.  Delimiter Attribute\n   The Delimiter Attribute separates the Message
        Key attributes from the\n   Operating Attributes in a PDU Payload.  The Delimiter
        Attribute has a\n   tag value of 0 and a length value of 0.  The Delimiter
        Attribute is\n   always 8 bytes long (a 4-byte tag field and a 4-byte length
        field,\n   all containing zeros).  If a Message Key is not required for a\n
        \  message, then the Delimiter Attribute immediately follows the Source\n
        \  Attribute.\n"
      title: 5.6.3.  Delimiter Attribute
    - contents:
      - "5.6.4.  Operating Attributes\n   The Operating Attributes are a list of one
        or more key and non-key\n   attributes related to the actual iSNS registration
        or query operation\n   being performed.\n   Operating Attributes include object
        key attributes and non-key\n   attributes.  Object key attributes uniquely
        identify iSNS objects.\n   Key attributes MUST precede the non-key attributes
        of each object in\n   the Operating Attributes.  The tag value distinguishes
        the attribute\n   as an object key attribute (i.e., tag=1, 16&17, 32, 64,
        and 96) or a\n   non-key attribute. iSCSI Names used in the Operating Attributes
        MUST\n   be normalized according to the stringprep template [STRINGPREP].\n
        \  Entity Identifiers (EIDs) used in the Operating Attributes MUST be\n   normalized
        according to the nameprep template [NAMEPREP].\n   The ordering of Operating
        Attributes in the message is important for\n   determining the relationships
        among objects and their ownership of\n   non-key attributes.  iSNS protocol
        messages that violate these\n   ordering rules SHALL be rejected with the
        Status Code of 2 (Message\n   Format Error).  See the message descriptions
        for proper operating\n   attribute ordering requirements.\n   Some objects
        are keyed by more than one object key attribute value.\n   For example, the
        Portal object is keyed by attribute tags 16 and 17.\n   When describing an
        object keyed by more than one key attribute, every\n   object key attribute
        of that object MUST be listed sequentially by\n   tag value in the message
        before non-key attributes of that object and\n   key attributes of the next
        object.  A group of key attributes of this\n   kind is treated as a single
        logical key attribute when identifying an\n   object.\n   Non-key attributes
        that immediately follow key attributes MUST be\n   attributes of the object
        referenced by the key attributes.  All non-\n   key attributes of an object
        MUST be listed before the object key\n   attributes introducing the next object.\n
        \  Objects MUST be listed in inheritance order, according to their\n   containment
        order.  Storage Node and Portal objects and their\n   respective attributes
        MUST follow the Network Entity object to which\n   they have a relationship.
        \ Similarly, FC Device objects MUST follow\n   the Storage Node object to
        which they have a relationship.\n   Vendor-specific objects defined by tag
        values in the range 1537-2048\n   have the same requirements described above.\n"
      - contents:
        - "5.6.4.1.  Operating Attributes for Query and Get Next Requests\n   In Query
          and Get Next request messages, TLV attributes with length\n   value of 0
          are used to indicate which Operating Attributes are to be\n   returned in
          the corresponding response.  Operating Attribute values\n   that match the
          TLV attributes in the original message are returned in\n   the response
          message.\n"
        title: 5.6.4.1.  Operating Attributes for Query and Get Next Requests
      title: 5.6.4.  Operating Attributes
    - contents:
      - "5.6.5.  Registration and Query Request Message Types\n   The following describes
        each query and message type.\n"
      - contents:
        - "5.6.5.1.  Device Attribute Registration Request (DevAttrReg)\n   The DevAttrReg
          message type is 0x0001.  The DevAttrReg message\n   provides the means for
          iSNS clients to update existing objects or\n   register new objects.  The
          value of the replace bit in the FLAGs\n   field determines whether the DevAttrReg
          message updates or replaces\n   an existing registration.\n   The Source
          Attribute identifies the Node initiating the registration\n   request.\n
          \  The Message Key identifies the object the DevAttrReg message acts\n   upon.
          \ It MUST contain the key attribute(s) identifying an object.\n   This object
          MUST contain all attributes and related subordinate\n   object attributes
          that will be included in the Operating Attributes\n   of the DevAttrReg
          PDU Payload.  The key attribute(s) identifying this\n   object MUST also
          be included among the Operating Attributes.\n   If the Message Key contains
          an EID and no pre-existing objects match\n   the Message Key, then the DevAttrReg
          message SHALL create a new\n   Entity with the specified EID and any new
          object(s) specified by the\n   Operating Attributes.  The replace bit SHALL
          be ignored.\n   If the Message Key does not contain an EID, and no pre-existing\n
          \  objects match the Message Key, then the DevAttrReg message SHALL be\n
          \  rejected with a status code of 3 (Invalid Registration).\n   If the Message
          Key is not present, then the DevAttrReg message\n   implicitly registers
          a new Network Entity.  In this case, the replace\n   bit SHALL be ignored;
          a new Network Entity SHALL be created.\n   Existing entities, their objects,
          and their relationships remain\n   unchanged.\n   The replace bit determines
          the kind of operation conducted on the\n   object identified in the DevAttrReg
          Message Key.  The replace bit\n   only applies to the DevAttrReg message;
          it is ignored for all other\n   message types.\n   If the replace bit is
          set, then the objects, attributes, and\n   relationships specified in the
          Operating Attributes SHALL replace the\n   object identified by the Message
          Key.  The object and all of its\n   subordinate objects SHALL be deregistered,
          and the appropriate SCNs\n   SHALL be sent by the iSNS server for the deregistered
          objects.  The\n   objects listed in the Operating Attributes are then used
          to replace\n   the just-deregistered objects.  Note that additional SCNs
          SHALL be\n   sent for the newly-registered objects, if appropriate.  Existing\n
          \  objects and relationships that are not identified or that are\n   subordinate
          to the object identified by the Message Key MUST NOT be\n   affected or
          changed.\n   If the replace bit is not set, then the message updates the\n
          \  attributes of the object identified by the Message Key and its\n   subordinate
          objects.  Existing object containment relationships MUST\n   NOT be changed.
          \ For existing objects, key attributes MUST NOT be\n   modified, but new
          subordinate objects MAY be added.\n   The Operating Attributes represent
          objects, attributes, and\n   relationships that are to be registered.  Multiple
          related objects\n   and attributes MAY be registered in a single DevAttrReg
          message.  The\n   ordering of the objects in this message indicates the
          structure of,\n   and associations among, the objects to be registered.
          \ At least one\n   object MUST be listed in the Operating Attributes.  Additional\n
          \  objects (if any) MUST be subordinate to the first object listed.  Key\n
          \  attributes MUST precede non-key attributes of each object.  A given\n
          \  object may only appear a maximum of once in the Operating Attributes\n
          \  of a message.  If the Node identified by the Source Attribute is not\n
          \  a Control Node, then the objects in the operating attributes MUST be\n
          \  members of the same Network Entity as the Source Node.\n   For example,
          to establish relationships between a Network Entity\n   object and its Portal
          and Storage Node objects, the Operating\n   Attributes list the key and
          non-key attributes of the Network Entity\n   object, followed by the key
          and non-key attributes of each Portal and\n   Storage Node object to be
          linked to that Network Entity.  Similarly,\n   an FC Device object that
          follows a Storage Node object is considered\n   subordinate to that Storage
          Node.\n   New PG objects are registered when an associated Portal or iSCSI
          Node\n   object is registered.  An explicit PG object registration MAY follow\n
          \  a Portal or iSCSI Node object registration in a DevAttrReg message.\n
          \  When a Portal is registered, the Portal attributes MAY immediately be\n
          \  followed by a PGT attribute.  The PGT attribute SHALL be followed by\n
          \  the set of PG iSCSI Names representing nodes that will be associated\n
          \  to the Portal using the indicated PGT value.  Additional sets of PGTs\n
          \  and PG iSCSI Names to be associated to the registered Portal MAY\n   follow.
          \ Indicated PGT values are assigned to the PG object\n   associated with
          the newly registered Portal and to the iSCSI Storage\n   Node(s) referenced
          immediately following the PGT attribute in the\n   operating attributes.\n
          \  When an iSCSI Storage Node is registered, the Storage Node attributes\n
          \  MAY immediately be followed by a PGT attribute.  The PGT attribute\n
          \  SHALL be followed by the set of PG Portal IP-Address, PG TCP/UDP Port\n
          \  pairs representing Portal objects that will be associated with the\n
          \  Storage Node using the indicated PGT value.  Additional sets of PGTs\n
          \  and PG Portal IP-Address PG TCP/UDP Port pairs to be associated with\n
          \  the registered Storage Node MAY follow.  Indicated PGT values are\n   assigned
          to the PG object associated with the newly registered iSCSI\n   Storage
          Node and Portal object(s) referenced immediately following\n   the PGT attribute
          in the operating attributes.\n   If the PGT value is not included in the
          Storage Node or Portal object\n   registration, and if a PGT value was not
          previously registered for\n   the relationship, then the PGT for the corresponding
          PG object SHALL\n   be registered with a value of 0x00000001.  If the PGT
          attribute is\n   included in the registration message as a 0-length TLV,
          then the PGT\n   value for the corresponding PG object SHALL be registered
          as NULL.  A\n   0-length TLV for the PGT in an update registration message
          overwrites\n   the previous PGT value with NULL, indicating that there is
          no\n   relationship between the Storage Node and Portal.\n   A maximum of
          one Network Entity object can be created or updated with\n   a single DevAttrReg
          message.  Consequently, the Operating Attributes\n   MUST NOT contain more
          than one Network Entity object.  There is no\n   limit to the number of
          Portal, Storage Node, and FC Device objects\n   that can listed in the Operating
          Attributes, provided they are all\n   subordinate to the listed Network
          Entity object.\n   If the Message Key and Operating Attributes do not contain
          an EID\n   attribute, or if the EID attribute has a length of 0, then a
          new\n   Network Entity object SHALL be created and the iSNS server SHALL\n
          \  supply a unique EID value for it.  The assigned EID value SHALL be\n
          \  included in the DevAttrReg Response message.  If the Message Key and\n
          \  Operating Attributes contain an EID that does not match the EID of an\n
          \  existing Network Entity in the iSNS database, then a new Network\n   Entity
          SHALL be created and assigned the value contained in that EID\n   attribute.
          \ Finally, if the Message Key and Operating Attributes\n   contain an EID
          that matches the EID of an existing object in the iSNS\n   database, then
          the objects, attributes, and relationships specified\n   in the Operating
          Attributes SHALL be appended to the existing Network\n   Entity identified
          by the EID.\n   A registration message that creates a new Network Entity
          object MUST\n   contain at least one Portal or one Storage Node.  If the
          message does\n   not, then it SHALL be considered invalid and result in
          a response\n   with Status Code of 3 (Invalid Registration).\n   If an iSNS
          Server does not support a registration feature, such as\n   explicit PG
          object registration, then the server SHALL return a\n   Status Code of 23
          (Registration Feature Not Supported).\n   Note that the iSNS server may
          modify or reject the registration of\n   certain attributes, such as ESI
          Interval.  In addition, the iSNS\n   server may assign values for additional
          Operating Attributes that are\n   not explicitly registered in the original
          DevAttrReg message, such as\n   the EID and WWNN Token.\n"
        title: 5.6.5.1.  Device Attribute Registration Request (DevAttrReg)
      - contents:
        - "5.6.5.2.  Device Attribute Query Request (DevAttrQry)\n   The DevAttrQry
          message type is 0x0002.  The DevAttrQry message\n   provides an iSNS client
          with the means to query the iSNS server for\n   object attributes.\n   The
          Source Attribute identifies the Node initiating the request.  For\n   non-Control
          Nodes initiating the DevAttrQry message, the query is\n   scoped to the
          Discovery Domains of which the initiating Node is a\n   member.  The DevAttrQry
          message SHALL only return information on\n   Storage Nodes and their related
          parent and subordinate objects, where\n   the Storage Node has a common
          Discovery Domain with the Node\n   identified in the Source Attribute.\n
          \  The Message Key may contain key or non-key attributes or no\n   attributes
          at all.  If multiple attributes are used as the Message\n   Key, then they
          MUST all be from the same object type (e.g., IP\n   address and TCP/UDP
          Port are attributes of the Portal object type).\n   A Message Key with non-key
          attributes may match multiple instances of\n   the specific object type.
          \ A Message Key with zero-length TLV(s) is\n   scoped to every object of
          the type indicated by the zero-length\n   TLV(s).  An empty Message Key
          field indicates the query is scoped to\n   the entire database accessible
          by the source Node.\n   The DevAttrQry response message returns attributes
          of objects listed\n   in the Operating Attributes that are related to the
          Message Key of\n   the original DevAttrQry message.  The Operating Attributes
          of the\n   DevAttrQry message contain zero-length TLVs that specify the\n
          \  attributes that are to be returned in the DevAttrQryRsp message.  A\n
          \  Message Key containing zero-length TLVs indicates that the set of\n   attributes
          specified in the Operating Attributes are to be returned\n   for each object
          matching the type indicated by the Message Key.\n   If the Message Key contains
          non-zero length TLVs, then Operating\n   Attributes for the object matching
          the Message Key SHALL be returned\n   in the DevAttrQryRsp message.  Each
          attribute type (i.e., zero-length\n   TLV) in the Operating Attributes indicates
          an attribute from the\n   object matching the Message Key, or from other
          objects in the same\n   Entity having a relationship to the object matching
          the Message Key,\n   is to be returned in the response.  The ordering of
          the object keys\n   and associated attributes returned in the DevAttrQry
          response message\n   SHALL be the same as in the original query message.
          \ If no objects\n   match the Message Key, then the DevAttrQryRsp message
          SHALL NOT\n   return any operating attributes.  Such a message and its\n
          \  corresponding response SHALL NOT be considered an error.\n   The Portal
          Group object determines whether a relationship exists\n   between a given
          Storage Node and Portal object.  If the PGT of the\n   Portal Group is not
          NULL, then a relationship exists between the\n   indicated Storage Node
          and Portal; if the PGT is NULL, then no\n   relationship exists.  Therefore,
          the value (NULL or not NULL) of the\n   PGT attribute of each Portal Group
          object determines the structure\n   and ordering of the DevAttrQry response
          to a query for Storage Nodes\n   and Portals.\n   For example, an iSNS database
          contains a Network Entity having two\n   Portals and two Nodes.  Each Storage
          Node has two Portal Groups, one\n   with a NULL PGT value for one Portal
          and another with a non-NULL PGT\n   value for the other Portal.  The DevAttrQry
          message contains a\n   Message Key entry matching one of the Nodes, and
          Operating Attributes\n   with zero-length TLVs listing first the Node attributes,
          Portal\n   attributes, and then the PG attributes.  The response message
          SHALL\n   therefore return first the matching Node object, then the requested\n
          \  attributes of the one Portal object that can be used to access the\n
          \  Storage Node (as indicated by the PGT), and finally the requested\n   attributes
          of the PG object used to access that Storage Node.  The\n   order in which
          each object's attributes are listed is the same as the\n   ordering of the
          object's attributes in the Operating Attributes of\n   the original request
          message.\n   If the Message Key Attribute contains zero-length TLV(s), then
          the\n   query returns requested attributes for all objects matching the\n
          \  Message Key type (DD restrictions SHALL apply for non-Control Nodes).\n
          \  If multiple objects match the Message Key type, then the attributes\n
          \  for each object matching the Message Key MUST be listed before the\n
          \  attributes for the next matching object are listed in the query\n   response.
          \ In other words, the process described above must be\n   iterated in the
          message response for each object that matches the\n   Message Key type specified
          by the zero-length TLV(s).\n   For example, an iSNS database contains only
          one Network Entity having\n   two Portals and three Nodes.  All PG objects
          in the Entity have a PGT\n   value of 0x00000001.  In the DevAttrQry message,
          the Message Key\n   contains a zero-length TLV specifying a Node type, and
          Operating\n   Attributes listing first the Node attributes, and then the
          Portal\n   attributes.  The response message will return, in the following\n
          \  order, the attributes for the first, next, and last Node objects,\n   each
          followed by attributes for both Portals.  If that same\n   DevAttrQry message
          had instead contained a zero-length TLV specifying\n   the Network Entity
          type, then the response message would have\n   returned attributes for all
          three Node objects, followed by\n   attributes for the two Portals.\n   If
          there is no Message Key Attribute, then the query returns all\n   attributes
          in the iSNS database (once again, DD restrictions SHALL\n   apply for non-Control
          Nodes).  All attributes matching the type\n   specified by each zero-length
          TLV in the Operating Attributes SHALL\n   be listed.  All attributes of
          each type SHALL be listed before the\n   attributes matching the next zero-length
          TLV are listed.\n   For example, an iSNS database contains two Entities,
          each having two\n   Nodes and two Portals.  The DevAttrQry message contains
          no Message\n   Key attribute, and Operating Attributes list first the Portal\n
          \  attributes, and then the Node attributes.  The Operating Attributes\n
          \  of the response message will return attributes from each of the four\n
          \  Portals, followed by attributes from each of the four nodes.\n   If a
          DevAttrQry message requests an attribute for which the iSNS\n   server has
          no value, then the server SHALL NOT return the requested\n   attribute in
          the query response.  Such query and response messages\n   SHALL NOT be considered
          errors.\n   Registration and query messages for iSNS server-specific attributes\n
          \  (i.e., tags in the range 132 to 384) SHALL be formatted using the\n   identifying
          key attribute of the Storage Node originating the query\n   (i.e., iSCSI
          Name or FC Port Name WWPN) for both the Source Attribute\n   and Message
          Key attribute.  Operating Attributes SHALL include the\n   TLV of the server-specific
          attribute being requested.\n   DD membership can be discovered through the
          DevAttrQry message by\n   including either DD member attributes (i.e., DD
          Member iSCSI Index,\n   DD Member iSCSI Node, DD Member iFCP Node, DD Member
          Portal Index, DD\n   Member Portal IP Addr, and DD Member Portal TCP/UDP)
          or the object\n   key of the Storage Node or Portal (i.e., iSCSI Name, iSCSI
          Index,\n   Portal IP Addr, Portal TCP/UDP Port, and Portal Index) in the\n
          \  Operating Attributes.  Using DD member attributes SHALL return both\n
          \  registered and unregistered member Storage Nodes and/or Portals of a\n
          \  DD.  DevAttrQry messages using the Storage Node and/or Portal object\n
          \  key SHALL return only member Storage Nodes or Portals that are\n   currently
          registered in the iSNS database.\n   The DevAttrQry message SHALL support
          the following minimum set of\n   Message Key Attributes:\n          Valid
          Message Key Attributes for Queries\n          ----------------------------------------\n
          \          Entity Identifier\n           Entity Protocol\n           Portal
          IP-Address & Portal TCP/UDP Port\n           Portal Index\n           iSCSI
          Node Type\n           iSCSI Name\n           iSCSI Index\n           PG
          Index\n           FC Port Name WWPN\n           FC Port Type\n           FC-4
          Type\n           Discovery Domain ID\n           Discovery Domain Set ID\n
          \          Source Attribute (for server-specific attributes)\n           Switch
          Name (FC Device WWNN--for Virtual_Fabric_ID queries)\n"
        title: 5.6.5.2.  Device Attribute Query Request (DevAttrQry)
      - contents:
        - "5.6.5.3.  Device Get Next Request (DevGetNext)\n   The DevGetNext message
          type is 0x0003.  This message provides the\n   iSNS client with the means
          to retrieve each and every instance of an\n   object type exactly once.\n
          \  The Source Attribute identifies the Node initiating the DevGetNext\n
          \  request, and is used to scope the retrieval process to the Discovery\n
          \  Domains of which the initiating Node is a member.\n   The Message Key
          Attribute may be an Entity Identifier (EID), iSCSI\n   Name, iSCSI Index,
          Portal IP Address and TCP/UDP Port, Portal Index,\n   PG Index, FC Node
          Name WWNN, or FC Port Name WWPN.  If the TLV length\n   of the Message Key
          Attribute(s) is zero, then the first object entry\n   in the iSNS database
          matching the Message Key type SHALL be returned\n   in the Message Key of
          the corresponding DevGetNextRsp message.  If\n   non-zero-length TLV attributes
          are contained in the Message Key, then\n   the DevGetNext response message
          SHALL return the next object stored\n   after the object identified by the
          Message Key in the original\n   DevGetNext request message.\n   If the Message
          Key provided matches the last object instance in the\n   iSNS database,
          then the Status Code of 9 (No Such Entry) SHALL be\n   returned in the response.\n
          \  The Operating Attributes can be used to specify the scope of the\n   DevGetNext
          request, and to specify the attributes of the next object,\n   which are
          to be returned in the DevGetNext response message.  All\n   Operating Attributes
          MUST be attributes of the object type identified\n   by the Message Key.
          \ For example, if the Message Key is an Entity_ID\n   attribute, then the
          Operating Attributes MUST NOT contain attributes\n   of Portals.\n   Non-zero-length
          TLV attributes in the Operating Attributes are used\n   to scope the DevGetNext
          message.  Only the next object with attribute\n   values that match the
          non-zero-length TLV attributes SHALL be\n   returned in the DevGetNext response
          message.\n   Zero-length TLV attributes MUST be listed after non-zero-length\n
          \  attributes in the Operating Attributes of the DevGetNext request\n   message.
          \ Zero-length TLV attributes specify the attributes of the\n   next object
          which are to be returned in the DevGetNext response\n   message.\n   Note
          that there are no specific requirements concerning the order in\n   which
          object entries are retrieved from the iSNS database; the\n   retrieval order
          of object entries using the DevGetNext message is\n   implementation specific.\n
          \  The iSNS client is responsible for ensuring that information acquired\n
          \  through use of the DevGetNext message is accurate and up-to-date.\n   There
          is no assurance that the iSNS database will not change between\n   successive
          DevGetNext request messages.  If the Message Key provided\n   does not match
          an existing database entry, then attributes for the\n   next object key
          following the provided Message Key SHALL be returned.\n   For example, an
          object entry may have been deleted between successive\n   DevGetNext messages.
          \ This may result in a DevGetNext request in\n   which the Message Key does
          not match an existing object entry.  In\n   this case, attributes for the
          next object stored in the iSNS database\n   are returned.\n"
        title: 5.6.5.3.  Device Get Next Request (DevGetNext)
      - contents:
        - "5.6.5.4.  Device Deregister Request (DevDereg)\n   The DevDereg message
          type is 0x0004.  This message is used to remove\n   object entries from
          the iSNS database.  One or more objects may be\n   removed through a single
          DevDereg message.  Note that deregistered\n   Storage Node objects will
          retain membership in their Discovery\n   Domain(s) until explicit deregistration
          of the membership(s) or\n   Discovery Domain(s).\n   Upon receiving the
          DevDereg, the iSNS server removes all objects\n   identified by the Operating
          Attribute(s), and all subordinate objects\n   that are solely dependent
          on those identified objects.  For example,\n   removal of a Network Entity
          also results in removal of all associated\n   Portal, Portal Group, Storage
          Node, and FC Device objects associated\n   with that Network Entity.  FC
          Device objects SHALL not be\n   deregistered in this manner unless all Storage
          Nodes associated with\n   them have been deregistered.\n   The DevDereg
          request PDU Payload contains a Source Attribute and\n   Operating Attribute(s);
          there are no Message Key Attributes.  If the\n   Node identified by the
          Source Attribute is not a Control Node, then\n   it MUST be from the same
          Network Entity as the object(s) identified\n   for removal by the Operating
          Attribute(s).  Valid Operating\n   Attributes are shown below:\n          Valid
          Operating Attributes for DevDereg\n          ---------------------------------------\n
          \          Entity Identifier\n           Portal IP-Address & Portal TCP/UDP
          Port\n           Portal Index\n           iSCSI Name\n           iSCSI Index\n
          \          FC Port Name WWPN\n           FC Node Name WWNN\n   The removal
          of the object may result in SCN messages to the\n   appropriate iSNS clients.\n
          \  Attempted deregistration of non-existing entries SHALL not be\n   considered
          an error.\n   If all Nodes and Portals associated with a Network Entity
          are\n   deregistered, then the Network Entity SHALL also be removed.\n   If
          both the Portal and iSCSI Storage Node objects associated with a\n   Portal
          Group object are removed, then that Portal Group object SHALL\n   also be
          removed.  The Portal Group object SHALL remain registered as\n   long as
          either of its associated Portal or iSCSI Storage Node objects\n   remain
          registered.  If a deleted Storage Node or Portal object is\n   subsequently
          re-registered, then a relationship between the re-\n   registered object
          and an existing Portal or Storage Node object\n   registration, indicated
          by the PG object, SHALL be restored.\n"
        title: 5.6.5.4.  Device Deregister Request (DevDereg)
      - contents:
        - "5.6.5.5.  SCN Register Request (SCNReg)\n   The SCNReg message type is
          0x0005.  The State Change Notification\n   Registration Request (SCNReg)
          message allows an iSNS client to\n   register a Storage Node to receive
          State Change Notification (SCN)\n   messages.\n   The SCN notifies the Storage
          Node of changes to any Storage Nodes\n   within any DD of which it is a
          member.  If the Storage Node is a\n   Control Node, it SHALL receive SCN
          notifications for changes in the\n   entire network.  Note that whereas
          SCNReg sets the SCN Bitmap field,\n   the DevAttrReg message registers the
          UDP or TCP Port used by each\n   Portal to receive SCN messages.  If no
          SCN Port fields of any Portals\n   of the Storage Node are registered to
          receive SCN messages, then the\n   SCNReg message SHALL be rejected with
          Status Code 17 (SCN\n   Registration Rejected).\n   The SCNReg request PDU
          Payload contains a Source Attribute, a Message\n   Key Attribute, and an
          Operating Attribute.  Valid Message Key\n   Attributes for a SCNReg are
          shown below:\n          Valid Message Key Attributes for SCNReg\n          ---------------------------------------\n
          \          iSCSI Name\n           FC Port Name WWPN\n   The node with the
          iSCSI Name or FC Port Name WWPN attribute that\n   matches the Message Key
          in the SCNReg message is registered to\n   receive SCNs using the specified
          SCN bitmap.  A maximum of one Node\n   SHALL be registered for each SCNReg
          message.\n   The SCN Bitmap is the only operating attribute of this message,
          and\n   it always overwrites the previous contents of this field in the
          iSNS\n   database.  The bitmap indicates the SCN event types for which the\n
          \  Node is registering.\n   Note that the settings of this bitmap determine
          whether the SCN\n   registration is for regular SCNs or management SCNs.
          \ Control Nodes\n   MAY conduct registrations for management SCNs; iSNS
          clients that are\n   not supporting Control Nodes MUST NOT conduct registrations
          for\n   management SCNs.  Control Nodes that register for management SCNs\n
          \  receive a copy of every SCN message generated by the iSNS server.  It\n
          \  is recommended that management registrations be used only when needed\n
          \  in order to conserve iSNS server resources.  In addition, a Control\n
          \  Node that conducts such registrations should be prepared to receive\n
          \  the anticipated volume of SCN message traffic.\n"
        title: 5.6.5.5.  SCN Register Request (SCNReg)
      - contents:
        - "5.6.5.6.  SCN Deregister Request (SCNDereg)\n   The SCNDereg message type
          is 0x0006.  The SCNDereg message allows an\n   iSNS client to stop receiving
          State Change Notification (SCN)\n   messages.\n   The SCNDereg request message
          PDU Payload contains a Source Attribute\n   and Message Key Attribute(s).
          \ Valid Message Key Attributes for a\n   SCNDereg are shown below:\n          Valid
          Message Key Attributes for SCNDereg\n          -----------------------------------------\n
          \          iSCSI Name\n           FC Port Name WWPN\n   The node with an
          iSCSI Name or FC Port Name WWPN attribute that\n   matches the Message Key
          Attributes in the SCNDereg message is\n   deregistered for SCNs.  The SCN
          bitmap field of such Nodes are\n   cleared.  A maximum of one Node SHALL
          be deregistered for each\n   SCNDereg message.\n   There are no Operating
          Attributes in the SCNDereg message.\n"
        title: 5.6.5.6.  SCN Deregister Request (SCNDereg)
      - contents:
        - "5.6.5.7.  SCN Event (SCNEvent)\n   The SCNEvent message type is 0x0007.
          \ The SCNEvent is a message sent\n   by an iSNS client to request generation
          of a State Change\n   Notification (SCN) message by the iSNS server.  The
          SCN, sent by the\n   iSNS server, then notifies iFCP, iSCSI, and Control
          Nodes within the\n   affected DD of the change indicated in the SCNEvent.\n
          \  Most SCNs are automatically generated by the iSNS server when Nodes\n
          \  are registered or deregistered from the directory database.  SCNs are\n
          \  also generated when a network management application or Control Node\n
          \  makes changes to the DD membership in the iSNS server.  However, an\n
          \  iSNS client can trigger an SCN by using SCNEvent.\n   The SCNEvent message
          PDU Payload contains a Source Attribute, a\n   Message Key Attribute, and
          an Operating Attribute.  Valid Key\n   Attributes for a SCNEvent are shown
          below:\n          Valid Message Key Attributes for SCNEvent\n          -----------------------------------------\n
          \          iSCSI Name\n           FC Port Name WWPN\n   The Operating Attributes
          section SHALL contain the SCN Event Bitmap\n   attribute.  The bitmap indicates
          the event that caused the SCNEvent\n   to be generated.\n"
        title: 5.6.5.7.  SCN Event (SCNEvent)
      - contents:
        - "5.6.5.8.  State Change Notification (SCN)\n   The SCN message type is 0x0008.
          \ The SCN is a message generated by\n   the iSNS server, notifying a registered
          Storage Node of changes.\n   There are two types of SCN registrations: regular
          registrations and\n   management registrations.  Regular SCNs notify iSNS
          clients of events\n   within the discovery domain.  Management SCNs notify
          Control Nodes\n   that register for management SCNs of events occurring
          anywhere in the\n   network.\n   If no active TCP connection to the SCN
          recipient exists, then the SCN\n   message SHALL be sent to one Portal of
          the registered Storage Node\n   that has a registered TCP or UDP Port value
          in the SCN Port field.\n   If more than one Portal of the Storage Node has
          a registered SCN Port\n   value, then the SCN SHALL be delivered to any
          one of the indicated\n   Portals, provided that the selected Portal is not
          the subject of the\n   SCN.\n   The types of events that can trigger an
          SCN message, and the amount\n   of information contained in the SCN message,
          depend on the registered\n   SCN Event Bitmap for the Storage Node.  The
          iSCSI Node SCN Bitmap is\n   described in Section 6.4.4.  The iFCP SCN Bitmap
          is described in\n   Section 6.6.12.\n   The format of the SCN PDU Payload
          is shown below:\n          +----------------------------------------+\n
          \         |         Destination Attribute          |\n          +----------------------------------------+\n
          \         |               Timestamp                |\n          +----------------------------------------+\n
          \         |          Source SCN Bitmap 1           |\n          +----------------------------------------+\n
          \         |          Source Attribute [1]          |\n          +----------------------------------------+\n
          \         |    Source Attribute [2](if present)    |\n          +----------------------------------------+\n
          \         |    Source Attribute [3](if present)    |\n          +----------------------------------------+\n
          \         |    Source Attribute [n](if present)    |\n          +----------------------------------------+\n
          \         |    Source SCN Bitmap 2 (if present)    |\n          +----------------------------------------+\n
          \         |                 . . .                  |\n          +----------------------------------------+\n
          \  All PDU Payload attributes are in TLV format.\n   The Destination Attribute
          is the Node identifier that is receiving\n   the SCN.  The Destination Attribute
          can be an iSCSI Name or FC Port\n   Name.\n   The Timestamp field, using
          the Timestamp TLV format, described in\n   Section 6.2.4, indicates the
          time the SCN was generated.\n   The Source SCN Bitmap field indicates the
          type of SCN notification\n   (i.e., regular or management SCN), and the
          type of event that caused\n   the SCN to be generated; it does not necessarily
          correlate with the\n   original SCN bitmap registered in the iSNS server.\n
          \  Following the timestamp, the SCN message SHALL list the SCN bitmap,\n
          \  followed by the key attribute (i.e., iSCSI Name or FC Port Name) of\n
          \  the Storage Node affected by the SCN event.  If the SCN is a\n   Management
          SCN, then the SCN message SHALL also list the DD_ID and/or\n   DDS_ID of
          the Discovery Domains and Discovery Domain Sets (if any)\n   that caused
          the change in state for that Storage Node.  These\n   additional attributes
          (i.e., DD_ID and/or DDS_ID) shall immediately\n   follow the iSCSI Name
          or FC Port Name and precede the next SCN bitmap\n   for the next notification
          message (if any).  The SCN bitmap is used\n   as a delineator for SCN messages
          providing multiple state change\n   notifications.\n   For example, a regular
          SCN for notifying an iSNS client of a new\n   Portal available for a particular
          iSCSI target would contain the SCN\n   bitmap followed by the iSCSI Name
          of the target device as the source\n   attribute.  If the SCN were a management
          SCN, then the iSCSI Name\n   would be followed by the DD_ID(s) of the shared
          Discovery Domains\n   that allow the destination Storage Node to have visibility
          to the\n   affected Storage Node.  If a Discovery Domain Set (DDS) was enabled\n
          \  in order to provide this visibility, then the appropriate DDS_ID\n   would
          be included as well.\n   A management SCN is also generated to notify a
          Control Node of the\n   creation, deletion, or modification of a Discovery
          Domain or\n   Discovery Domain Set.  In this case, the DD_ID and/or DDS_ID
          of the\n   affected Discovery Domain and/or Discovery Domain Set would follow\n
          \  the SCN bitmap.\n   For example, a management SCN to notify a Control
          Node of a new DD\n   within a Discovery Domain Set would contain both the
          DD_ID and the\n   DDS_ID of the affected Discovery Domain and Discovery
          Domain Set\n   among the Source Attributes.\n   See Sections 6.4.4 and 6.6.12
          for additional information on the SCN\n   Bitmap.\n"
        title: 5.6.5.8.  State Change Notification (SCN)
      - contents:
        - "5.6.5.9.  DD Register (DDReg)\n   The DDReg message type is 0x0009.  This
          message is used to create a\n   new Discovery Domain (DD), to update an
          existing DD Symbolic Name\n   and/or DD Features attribute, and to add DD
          members.\n   DDs are uniquely defined using DD_IDs.  DD registration attributes\n
          \  are described in Section 6.11.\n   The DDReg message PDU Payload contains
          the Source Attribute and\n   optional Message Key and Operating Attributes.\n
          \  The Message Key, if used, contains the DD_ID of the Discovery Domain\n
          \  to be registered.  If the Message Key contains a DD_ID of an existing\n
          \  DD entry in the iSNS database, then the DDReg message SHALL attempt\n
          \  to update the existing entry.  If the DD_ID in the Message Key (if\n
          \  used) does not match an existing DD entry, then the iSNS server SHALL\n
          \  reject the DDReg message with a status code of 3 (Invalid\n   Registration).
          \ If the DD_ID is included in both the Message Key and\n   Operating Attributes,
          then the DD_ID value in the Message Key MUST be\n   the same as the DD_ID
          value in the Operating Attributes.\n   A DDReg message with no Message Key
          SHALL result in the attempted\n   creation of a new Discovery Domain (DD).
          \ If the DD_ID attribute\n   (with non-zero length) is included among the
          Operating Attributes in\n   the DDReg message, then the new Discovery Domain
          SHALL be assigned\n   the value contained in that DD_ID attribute.  Otherwise,
          if the DD_ID\n   attribute is not contained among the Operating Attributes
          of the\n   DDReg message, or if the DD_ID is an operating attribute with
          a TLV\n   length of 0, then the iSNS server SHALL assign a DD_ID value.
          \ The\n   assigned DD_ID value is then returned in the DDReg Response message.\n
          \  The Operating Attributes can also contain the DD Member iSCSI Node\n
          \  Index, DD Member iSCSI Name, DD Member FC Port Name, DD Member Portal\n
          \  IP Address, DD Member Portal TCP/UDP Port Number, or DD Member Portal\n
          \  Index of members to be added to the DD.  It may also contain the\n   DD_Symbolic_Name
          and/or DD_Features of the DD.\n   This message SHALL add any DD members
          listed as Operating Attributes\n   to the Discovery Domain specified by
          the DD_ID.  If the DD_Features\n   attribute is an Operating Attribute,
          then it SHALL be stored in the\n   iSNS server as the feature list for the
          specified DD.  If the\n   DD_Symbolic_Name is an operating attribute and
          its value is unique\n   (i.e., it does not match the registered DD_Symbolic_Name
          for another\n   DD), then the value SHALL be stored in the iSNS database
          as the\n   DD_Symbolic_Name for the specified Discovery Domain.  If the
          value\n   for the DD_Symbolic_Name is not unique, then the iSNS server SHALL\n
          \  reject the attempted DD registration with a status code of 3 (Invalid\n
          \  Registration).\n   When creating a new DD, if the DD_Symbolic_Name is
          not included in\n   the Operating Attributes, or if it is included with
          a zero-length\n   TLV, then the iSNS server SHALL provide a unique DD_Symbolic_Name\n
          \  value for the created DD.  The assigned DD_Symbolic_Name value SHALL\n
          \  be returned in the DDRegRsp message.\n   When creating a new DD, if the
          DD_Features attribute is not included\n   in the Operating Attributes, then
          the iSNS server SHALL assign the\n   default value.  The default value for
          DD_Features is 0.\n   DD Member iSCSI Name, DD Member iFCP Node, DD Member
          Portal IP\n   Address, and DD Member TCP/UDP Port Number attributes included
          in the\n   Operating Attributes need not match currently existing iSNS database\n
          \  entries.  This allows, for example, a Storage Node to be added to a\n
          \  DD even if the Storage Node is not currently registered in the iSNS\n
          \  database.  A Storage Node or Portal can thereby be added to a DD at\n
          \  the time of the DDs creation, even if the Storage Node or Portal is\n
          \  not currently active in the storage network.\n   If the Operating Attributes
          contain a DD Member iSCSI Name value for\n   a Storage Node that is currently
          not registered in the iSNS database,\n   then the iSNS server MUST allocate
          an unused iSCSI Node Index for\n   that Storage Node.  The assigned iSCSI
          Node Index SHALL be returned\n   in the DDRegRsp message as the DD Member
          iSCSI Node Index.  The\n   allocated iSCSI Node Index value SHALL be assigned
          to the Storage\n   Node if and when it registers in the iSNS database.\n
          \  If the Operating Attributes contain a DD Member Portal IP Addr and DD\n
          \  Member Portal TCP/UDP value for a Portal that is not currently\n   registered
          in the iSNS database, then the iSNS server MUST allocate\n   an unused Portal
          Index value for that Portal.  The assigned Portal\n   Index value SHALL
          be returned in the DDRegRsp message as the DD\n   Member Portal Index.  The
          allocated Portal Index value SHALL be\n   assigned to the Portal if and
          when it registers in the iSNS database.\n   DD Member iSCSI Node Index and
          DD Member Portal Index attributes that\n   are provided in the Operating
          Attributes MUST match a corresponding\n   iSCSI Node Index or Portal Index
          of an existing Storage Node or\n   Portal entry in the iSNS database.  Furthermore,
          the DD Member iSCSI\n   Node Index and DD Member Portal Index SHALL NOT
          be used to add\n   Storage Nodes or Portals to a DD unless those Storage
          Nodes or\n   Portals are actively registered in the iSNS database.\n"
        title: 5.6.5.9.  DD Register (DDReg)
      - contents:
        - "5.6.5.10.  DD Deregister (DDDereg)\n   The DDDereg message type is 0x000A.
          \ This message allows an iSNS\n   client to deregister an existing Discovery
          Domain (DD) and to remove\n   members from an existing DD.\n   DDs are uniquely
          identified using DD_IDs.  DD registration attributes\n   are described in
          Section 6.11.\n   The DDDereg message PDU Payload contains a Source Attribute,
          Message\n   Key Attribute, and optional Operating Attributes.\n   The Message
          Key Attribute for a DDDereg message is the DD ID for the\n   Discovery Domain
          being removed or having members removed.  If the DD\n   ID matches an existing
          DD and there are no Operating Attributes, then\n   the DD SHALL be removed
          and a success Status Code returned.  Any\n   existing members of that DD
          SHALL remain in the iSNS database without\n   membership in the just-removed
          DD.\n   If the DD ID matches an existing DD and there are Operating\n   Attributes
          matching DD members, then the DD members identified by the\n   Operating
          Attributes SHALL be removed from the DD and a successful\n   Status Code
          returned.\n   If a DD Member iSCSI Name identified in the Operating Attributes\n
          \  contains an iSCSI Name for a Storage Node that is not currently\n   registered
          in the iSNS database or contained in another DD, then the\n   association
          between that Storage Node and its pre-assigned iSCSI Node\n   Index SHALL
          be removed.  The pre-assigned iSCSI Node Index value no\n   longer has an
          association to a specific iSCSI Name and can now be\n   re-assigned.\n   If
          a DD Member Portal IP Address and DD Member TCP/UDP Port\n   identified
          in the Operating Attributes reference a Portal that is not\n   currently
          registered in the iSNS database or contained in another DD,\n   then the
          association between that Portal and its pre-assigned Portal\n   Index SHALL
          be removed.  The pre-assigned Portal Index value can now\n   be reassigned.\n
          \  The attempted deregistration of non-existent DD entries SHALL not be\n
          \  considered an error.\n"
        title: 5.6.5.10.  DD Deregister (DDDereg)
      - contents:
        - "5.6.5.11.  DDS Register (DDSReg)\n   The DDSReg message type is 0x000B.
          \ This message allows an iSNS\n   client to create a new Discovery Domain
          Set (DDS), to update an\n   existing DDS Symbolic Name and/or DDS Status,
          or to add DDS members.\n   DDSs are uniquely defined using DDS_IDs.  DDS
          registration attributes\n   are described in Section 6.11.1.\n   The DDSReg
          message PDU Payload contains the Source Attribute and,\n   optionally, Message
          Key and Operating Attributes.\n   The Message Key, if used, contains the
          DDS_ID of the Discover Domain\n   Set to be registered or modified.  If
          the Message Key contains a\n   DDS_ID of an existing DDS entry in the iSNS
          database, then the DDSReg\n   message SHALL attempt to update the existing
          entry.  If the DDS_ID in\n   the Message Key (if used) does not match an
          existing DDS entry, then\n   the iSNS server SHALL reject the DDSReg message
          with a status code of\n   3 (Invalid Registration).  If the DDS_ID is included
          in both the\n   Message Key and Operating Attributes, then the DDS_ID value
          in the\n   Message Key MUST be the same as the DDS_ID value in the Operating\n
          \  Attributes.\n   A DDSReg message with no Message Key SHALL result in
          the attempted\n   creation of a new Discovery Domain Set (DDS).  If the
          DDS_ID\n   attribute (with non-zero length) is included among the Operating\n
          \  Attributes in the DDSReg message, then the new Discovery Domain Set\n
          \  SHALL be assigned the value contained in that DDS_ID attribute.\n   Otherwise,
          if the DDS_ID attribute is not contained among the\n   Operating Attributes
          of the DDSReg message, or if the DDS_ID is an\n   operating attribute with
          a TLV length of 0, then the iSNS server\n   SHALL assign a DDS_ID value.
          \ The assigned DDS_ID value is then\n   returned in the DDSReg Response
          message.  The Operating Attributes\n   can also contain the DDS_Symbolic_Name,
          the DDS Status, and the\n   DD_IDs of Discovery Domains to be added to the
          DDS.\n   When creating a new DDS, if the DDS Symbolic Name is included in
          the\n   Operating Attributes and its value is unique (i.e., it does not
          match\n   the registered DDS Symbolic Name for another DDS), then the value\n
          \  SHALL be stored in the iSNS database as the DDS Symbolic Name for\n   that
          DDS.  If the value for the DDS Symbolic Name is not unique, then\n   the
          iSNS server SHALL reject the attempted DDS registration with a\n   status
          code of 3 (Invalid Registration).\n   When creating a new DDS, if the DDS
          Symbolic Name is not included in\n   the Operating Attributes, or if it
          is included with a zero-length\n   TLV, then the iSNS server SHALL provide
          a unique DDS Symbolic Name\n   value for the created DDS.  The assigned
          DDS Symbolic Name value\n   SHALL be returned in the DDSRegRsp message.\n
          \  This message SHALL add any DD_IDs listed as Operating Attributes to\n
          \  the Discovery Domain Set specified by the DDS_ID Message Key\n   Attribute.
          \ In addition, if the DDS_Symbolic_Name is an operating\n   attribute and
          the value is unique, then it SHALL be stored in the\n   iSNS database as
          the DDS_Symbolic_Name for the specified Discovery\n   Domain Set.\n   If
          a DD_ID listed in the Operating Attributes does not match an\n   existing
          DD, then a new DD using the DD_ID SHALL be created.  In this\n   case for
          the new DD, the iSNS server SHALL assign a unique value for\n   the DD Symbolic
          Name and SHALL set the DD Features attribute to the\n   default value of
          0.  These assigned values SHALL be returned in the\n   DDSRegRsp message.\n"
        title: 5.6.5.11.  DDS Register (DDSReg)
      - contents:
        - "5.6.5.12.  DDS Deregister (DDSDereg)\n   The DDSDereg message type is 0x000C.
          \ This message allows an iSNS\n   client to deregister an existing Discovery
          Domain Set (DDS) or to\n   remove some DDs from an existing DDS.\n   The
          DDSDereg message PDU Payload contains a Source Attribute, a\n   Message
          Key Attribute, and optional Operating Attributes.\n   The Message Key Attribute
          for a DDSDereg message is the DDS ID for\n   the DDS being removed or having
          members removed.  If the DDS ID\n   matches an existing DDS and there are
          no Operating Attributes, then\n   the DDS SHALL be removed and a success
          Status Code returned.  Any\n   existing members of that DDS SHALL remain
          in the iSNS database\n   without membership in the just-removed DDS.\n   If
          the DDS ID matches an existing DDS, and there are Operating\n   Attributes
          matching DDS members, then the DDS members SHALL be\n   removed from the
          DDS and a success Status Code returned.\n   The attempted deregistration
          of non-existent DDS entries SHALL not be\n   considered an error.\n"
        title: 5.6.5.12.  DDS Deregister (DDSDereg)
      - contents:
        - "5.6.5.13.  Entity Status Inquiry (ESI)\n   The ESI message type is 0x000D.
          \ This message is sent by the iSNS\n   server, and is used to verify that
          an iSNS client Portal is reachable\n   and available.  The ESI message is
          sent to the ESI UDP port provided\n   during registration, or to the TCP
          connection used for ESI\n   registration, depending on which communication
          type that is being\n   used.\n   The ESI message PDU Payload contains the
          following attributes in TLV\n   format and in the order listed: the current
          iSNS timestamp, the EID,\n   the Portal IP Address, and the Portal TCP/UDP
          Port.  The format of\n   this message is shown below:\n          +----------------------------------------+\n
          \         |               Timestamp                |\n          +----------------------------------------+\n
          \         |               Entity_ID                |\n          +----------------------------------------+\n
          \         |           Portal IP Address            |\n          +----------------------------------------+\n
          \         |          Portal TCP/UDP Port           |\n          +----------------------------------------+\n
          \  The ESI response message PDU Payload contains a status code, followed\n
          \  by the Attributes from the original ESI message.\n   If the Portal fails
          to respond to an administratively-determined\n   number of consecutive ESI
          messages, then the iSNS server SHALL remove\n   that Portal from the iSNS
          database.  If there are no other remaining\n   ESI-monitored Portals for
          the associated Network Entity, then the\n   Network Entity SHALL also be
          removed.  The appropriate State Change\n   Notifications, if any, SHALL
          be triggered.\n"
        title: 5.6.5.13.  Entity Status Inquiry (ESI)
      - contents:
        - "5.6.5.14.  Name Service Heartbeat (Heartbeat)\n   This message, if used,
          is only sent by the active iSNS server.  It\n   allows iSNS clients and
          backup servers listening to a broadcast or\n   multicast address to discover
          the IP address of the primary and\n   backup iSNS servers.  It also allows
          concerned parties to monitor the\n   health and status of the primary iSNS
          server.\n   This message is NOT in TLV format.  There is no response message
          to\n   the Name Service Heartbeat.\n          MSb                                            LSb\n
          \         0                                               31\n          +------------------------------------------------+\n
          \         |            Active Server IP-Address            | 16 Bytes\n
          \         +------------------------------------------------+\n          |
          \    iSNS TCP Port     |      iSNS UDP Port     | 4 Bytes\n          +------------------------------------------------+\n
          \         |                   Interval                     | 4 Bytes\n          +------------------------------------------------+\n
          \         |                    Counter                     | 4 Bytes\n          +------------------------------------------------+\n
          \         |      RESERVED         |    Backup Servers      | 4 Bytes\n          +------------------------------------------------+\n
          \         |    Primary Backup Server IP Address(if any)    | 16 Bytes\n
          \         +------------------------------------------------+\n          |Backup
          TCP Port(if any)|Backup UDP Port(if any) | 4 Bytes\n          +------------------------------------------------+\n
          \         |      2nd Backup Server IP Address(if any)      | 16 Bytes\n
          \         +------------------------------------------------+\n          |Backup
          TCP Port(if any)|Backup UDP Port(if any) | 4 Bytes\n          +------------------------------------------------+\n
          \         |                     . . .                      |\n          +------------------------------------------------+\n
          \         |                VENDOR SPECIFIC                 |\n          +------------------------------------------------+\n
          \  The heartbeat PDU Payload contains the following:\n   Active Server IP
          Address: the IP Address of the active iSNS server in\n                    IPv6
          format.  When this field contains an IPv4\n                    value, it
          is stored as an IPv4-mapped IPv6 address.\n                    That is,
          the most significant 10 bytes are set to\n                    0x00, with
          the next two bytes set to 0xFFFF\n                    [RFC2373].  When this
          field contains an IPv6 value,\n                    the entire 16-byte field
          is used.\n   Active TCP Port: the TCP Port of the server currently in use.\n
          \  Active UDP Port: the UDP Port of the server currently in use,\n                    otherwise
          0.\n   Interval:        the interval, in seconds, of the heartbeat.\n   Counter:
          \        a count that begins at 0 when this server becomes\n                    active.
          \ The count increments by one for each\n                    heartbeat sent
          since this server became active.\n   Backup Servers:  the number of iSNS
          backup servers.  The IP address,\n                    TCP Port, and UDP
          Port of each iSNS backup server\n                    follow this field.
          \ Note that if backup servers are\n                    used, then the active
          iSNS server SHOULD be among\n                    the list of backup servers.\n
          \  The content of the remainder of this message after the list of backup\n
          \  servers is vendor-specific.  Vendors may use additional fields to\n   coordinate
          between multiple iSNS servers, and/or to identify vendor-\n   specific features.\n"
        title: 5.6.5.14.  Name Service Heartbeat (Heartbeat)
      - contents:
        - "5.6.5.15.  Request FC_DOMAIN_ID (RqstDomId)\n   The RqstDomId message type
          is 0x0011.  This message is used for iFCP\n   Transparent Mode to allocate
          non-overlapping FC_DOMAIN_ID values\n   between 1 and 239.  The iSNS server
          becomes the address assignment\n   authority for the entire iFCP fabric.
          \ To obtain multiple\n   FC_DOMAIN_ID values, this request must be repeated
          to the iSNS server\n   multiple times.  iSNS clients that acquire FC_DOMAIN_ID
          values from\n   an iSNS server MUST register for ESI monitoring from that
          iSNS\n   server.\n   The RqstDomId PDU Payload contains three TLV attributes
          in the\n   following order: the requesting Switch Name (WWN) as the Source\n
          \  Attribute, the Virtual_Fabric_ID as the Message Key Attribute, and\n
          \  Preferred ID as the operating attribute.  The Virtual_Fabric_ID is a\n
          \  string identifying the domain space for which the iSNS server SHALL\n
          \  allocate non-overlapping integer FC_DOMAIN_ID values between 1 and\n
          \  239.  The Preferred_ID is the nominal FC_DOMAIN_ID value requested by\n
          \  the iSNS client.  If the Preferred_ID value is available and has not\n
          \  already been allocated for the Virtual_Fabric_ID specified in the\n   message,
          the iSNS server SHALL return the requested Preferred_ID\n   value as the
          Assigned_ID to the requesting client.\n   The RqstDomId response contains
          a Status Code, and the TLV attribute\n   Assigned ID, which contains the
          integer value in the space requested.\n   If no further unallocated values
          are available from this space, the\n   iSNS server SHALL respond with the
          Status Code 18 \"FC_DOMAIN_ID Not\n   Available\".\n   Once a FC_DOMAIN_ID
          value has been allocated to an iSNS client by the\n   iSNS server for a
          given Virtual_Fabric_ID, that FC_DOMAIN_ID value\n   SHALL NOT be reused
          until it has been deallocated, or until ESI\n   monitoring detects that
          the iSNS client no longer exists on the\n   network and objects for that
          client are removed from the iSNS\n   database.\n   The iSNS server and client
          SHALL use TCP to transmit and receive\n   RqstDomId, RqstDomIdRsp, RlseDomId,
          and RlseDomIdRsp messages.\n"
        title: 5.6.5.15.  Request FC_DOMAIN_ID (RqstDomId)
      - contents:
        - "5.6.5.16.  Release FC_DOMAIN_ID (RlseDomId)\n   The RlseDomId message type
          is 0x0012.  This message may be used by\n   iFCP Transparent Mode to release
          integer identifier values used to\n   assign 3-byte Fibre Channel PORT_ID
          values.\n   The RlseDomId message contains three TLV attributes in the following\n
          \  order: the requesting EID as the Source Attribute, the\n   Virtual_Fabric_ID
          as the Message Key Attribute, and Assigned_ID as\n   the operating attribute.
          \ Upon receiving the RlseDomId message, the\n   iSNS server SHALL deallocate
          the FC_DOMAIN_ID value contained in the\n   Assigned_ID attribute for the
          Virtual_Fabric_ID attribute specified.\n   Upon deallocation, that FC_DOMAIN_ID
          value can then be requested by\n   and assigned to a different iSNS client.\n
          \  The iSNS server and client SHALL use TCP to transmit and receive\n   RqstDomId,
          RqstDomIdRsp, RlseDomId, and RlseDomIdRsp messages.\n"
        title: 5.6.5.16.  Release FC_DOMAIN_ID (RlseDomId)
      - contents:
        - "5.6.5.17.  Get FC_DOMAIN_IDs (GetDomId)\n   The GetDomId message type is
          0x0013.  This message is used to learn\n   the currently-allocated FC_DOMAIN_ID
          values for a given\n   Virtual_Fabric_ID.\n   The GetDomId message PDU Payload
          contains a Source Attribute and\n   Message Key Attribute.\n   The Message
          Key Attribute for the GetDomId message is the\n   Virtual_Fabric_ID.  The
          response to this message returns all the\n   FC_DOMAIN_ID values that have
          been allocated for the\n   Virtual_Fabric_ID specified.\n"
        title: 5.6.5.17.  Get FC_DOMAIN_IDs (GetDomId)
      title: 5.6.5.  Registration and Query Request Message Types
    title: 5.6.  Registration and Query Messages
  - contents:
    - "5.7.  Messages\n   The iSNSP response message PDU Payloads contain a Status
      Code,\n   followed by a list of attributes, and have the following format:\n
      \         MSb                                    LSb\n          0                                       31\n
      \         +----------------------------------------+\n          |          4-byte
      STATUS CODE            |\n          +----------------------------------------+\n
      \         |  Message Key Attribute[1] (if present) |\n          +----------------------------------------+\n
      \         |  Message Key Attribute[2] (if present) |\n          +----------------------------------------+\n
      \         |                 . . .                  |\n          +----------------------------------------+\n
      \         |  - Delimiter Attribute - (if present)  |\n          +----------------------------------------+\n
      \         |   Operating Attribute[1] (if present)  |\n          +----------------------------------------+\n
      \         |   Operating Attribute[2] (if present)  |\n          +----------------------------------------+\n
      \         |   Operating Attribute[3] (if present)  |\n          +----------------------------------------+\n
      \         |                 . . .                  |\n          +----------------------------------------+\n
      \  The iSNSP Response messages SHALL be sent to the iSNS Client IP\n   Address
      and the originating TCP/UDP Port that was used for the\n   associated registration
      and query message.\n"
    - contents:
      - "5.7.1.  Status Code\n   The first field in an iSNSP response message PDU
        Payload is the\n   Status Code for the operation that was performed.  The
        Status Code\n   encoding is defined in Section 5.4.\n"
      title: 5.7.1.  Status Code
    - contents:
      - "5.7.2.  Message Key Attributes in Response\n   Depending on the specific
        iSNSP request, the response message MAY\n   contain Message Key Attributes.
        \ Message Key Attributes generally\n   contain the interesting key attributes
        that are affected by the\n   operation specified in the original iSNS registration
        or query\n   message.\n"
      title: 5.7.2.  Message Key Attributes in Response
    - contents:
      - "5.7.3.  Delimiter Attribute in Response\n   The Delimiter Attribute separates
        the key and Operating Attributes in\n   a response message, if they exist.
        \ The Delimiter Attribute has a tag\n   value of 0 and a length value of 0.
        \ The Delimiter Attribute is\n   effectively 8 bytes long: a 4-byte tag containing
        0x00000000, and a 4\n   Byte length field containing 0x00000000.\n"
      title: 5.7.3.  Delimiter Attribute in Response
    - contents:
      - "5.7.4.  Operating Attributes in Response\n   The Operating Attributes in
        a response are the results related to the\n   iSNS registration or query operation
        being performed.  Some response\n   messages will not have Operating Attributes.\n"
      title: 5.7.4.  Operating Attributes in Response
    - contents:
      - "5.7.5.  Registration and Query Response Message Types\n   The following sections
        describe each query and message type.\n"
      - contents:
        - "5.7.5.1.  Device Attribute Registration Response (DevAttrRegRsp)\n   The
          DevAttrRegRsp message type is 0x8001.  The DevAttrRegRsp message\n   contains
          the results for the DevAttrReg message with the same\n   TRANSACTION ID.\n
          \  The Message Key in the DevAttrRegRsp message SHALL return the Message\n
          \  Key in the original registration message.  If the iSNS server\n   assigned
          the Entity Identifier for a Network Entity, then the Message\n   Key Attribute
          field SHALL contain the assigned Entity Identifier.\n   The Operating Attributes
          of the DevAttrRegRsp message SHALL contain\n   the affected object's key
          and non-key attributes that have been\n   explicitly modified or created
          by the original DevAttrReg message.\n   Among the Operating Attributes,
          each modified or added non-key\n   attribute SHALL be listed after its key
          attribute(s) in the\n   DevAttrRegRsp message.  Implicitly registered attributes
          MUST NOT be\n   returned in the DevAttrRegRsp message.  Implicitly registered\n
          \  attributes are those that are assigned a fixed default value or\n   secondary
          index value by the iSNS server.\n   Implicitly registered PG objects (i.e.,
          PG objects that are not\n   explicitly included in the registration or replace
          message) MUST NOT\n   have their key or non-key attributes returned in the
          DevAttrRegRsp\n   message.  However, explicitly registered PG objects (i.e.,
          those with\n   PGT values that are explicitly included in the registration
          or\n   replace message) SHALL have their PGT values returned in the\n   DevAttrRegRsp
          message.\n   For example, three Portals are registered in the original DevAttrReg\n
          \  request message.  Due to lack of resources, the iSNS server needs to\n
          \  modify the registered ESI Interval value of one of those Portals.  To\n
          \  accomplish this, the iSNS server returns the key attributes\n   identifying
          the Portal, followed by the non-key modified ESI Interval\n   attribute
          value, as Operating Attributes of the corresponding\n   DevAttrRegRsp message.\n
          \  If the iSNS server rejects a registration due to invalid attribute\n
          \  values or types, then the indicated status code SHALL be 3 (Invalid\n
          \  Registration).  If this occurs, then the iSNS server MAY include the\n
          \  list of invalid attributes in the Operating Attributes of the\n   DevAttrRsp
          message.\n   Some attributes values (e.g., ESI Interval, Registration Period)
          in\n   the original registration message MAY be modified by the iSNS server.\n
          \  This can occur only for a limited set of attribute types, as\n   indicated
          in the table in Section 6.1.  When this occurs, the\n   registration SHALL
          be considered a success (with status code 0), and\n   the changed value(s)
          indicated in the Operating Attributes of the\n   DevAttrRsp message.\n"
        title: 5.7.5.1.  Device Attribute Registration Response (DevAttrRegRsp)
      - contents:
        - "5.7.5.2.  Device Attribute Query Response (DevAttrQryRsp)\n   The DevAttrQryRsp
          message type is 0x8002.  The DevAttrQryRsp message\n   contains the results
          for the DevAttrQry message with the same\n   TRANSACTION ID.\n   The Message
          Key in the DevAttrQryRsp message SHALL return the Message\n   Key in the
          original query message.\n   If no Operating Attributes are included in the
          original query, then\n   all Operating Attributes SHALL be returned in the
          response.\n   For a successful query result, the DevAttrQryRsp Operating
          Attributes\n   SHALL contain the results of the original DevAttrQry message.\n"
        title: 5.7.5.2.  Device Attribute Query Response (DevAttrQryRsp)
      - contents:
        - "5.7.5.3.  Device Get Next Response (DevGetNextRsp)\n   The DevGetNextRsp
          message type is 0x8003.  The DevGetNextRsp message\n   contains the results
          for the DevGetNext message with the same\n   TRANSACTION ID.\n   The Message
          Key Attribute field returns the object keys for the next\n   object after
          the Message Key Attribute in the original DevGetNext\n   message.\n   The
          Operating Attribute field returns the Operating Attributes of the\n   next
          object as requested in the original DevGetNext message.  The\n   values
          of the Operating Attributes are those associated with the\n   object identified
          by the Message Key Attribute field of the\n   DevGetNextRsp message.\n"
        title: 5.7.5.3.  Device Get Next Response (DevGetNextRsp)
      - contents:
        - "5.7.5.4.  Deregister Device Response (DevDeregRsp)\n   The DevDeregRsp
          message type is 0x8004.  This message is the response\n   to the DevDereg
          request message.\n   This message response does not contain a Message Key,
          but MAY contain\n   Operating Attributes.\n   In the event of an error,
          this response message contains the\n   appropriate status code as well as
          a list of objects from the\n   original DevDereg message that were not successfully
          deregistered\n   from the iSNS database.  This list of objects is contained
          in the\n   Operating Attributes of the DevDeregRsp message.  Note that an\n
          \  attempted deregistration of a non-existent object does not constitute\n
          \  an error, and non-existent entries SHALL not be returned in the\n   DevDeregRsp
          message.\n"
        title: 5.7.5.4.  Deregister Device Response (DevDeregRsp)
      - contents:
        - "5.7.5.5.  SCN Register Response (SCNRegRsp)\n   The SCNRegRsp message type
          is 0x8005.  This message is the response\n   to the SCNReg request message.\n
          \  The SCNRegRsp message does not contain any Message Key or Operating\n
          \  Attributes.\n"
        title: 5.7.5.5.  SCN Register Response (SCNRegRsp)
      - contents:
        - "5.7.5.6.  SCN Deregister Response (SCNDeregRsp)\n   The SCNDeregRsp message
          type is 0x8006.  This message is the response\n   to the SCNDereg request
          message.\n   The SCNDeregRsp message does not contain any Message Key or
          Operating\n   Attributes.\n"
        title: 5.7.5.6.  SCN Deregister Response (SCNDeregRsp)
      - contents:
        - "5.7.5.7.  SCN Event Response (SCNEventRsp)\n   The SCNEventRsp message
          type is 0x8007.  This message is the response\n   to the SCNEvent request
          message.\n   The SCNEventRsp message does not contain any Message Key or
          Operating\n   Attributes.\n"
        title: 5.7.5.7.  SCN Event Response (SCNEventRsp)
      - contents:
        - "5.7.5.8.  SCN Response (SCNRsp)\n   The SCNRsp message type is 0x8008.
          \ This message is sent by an iSNS\n   client, and provides confirmation
          that the SCN message was received\n   and processed.\n   The SCNRsp response
          contains the SCN Destination Attribute\n   representing the Node identifier
          that received the SCN.\n"
        title: 5.7.5.8.  SCN Response (SCNRsp)
      - contents:
        - "5.7.5.9.  DD Register Response (DDRegRsp)\n   The DDRegRsp message type
          is 0x8009.  This message is the response to\n   the DDReg request message.\n
          \  The Message Key in the DDRegRsp message SHALL return the Message Key\n
          \  in the original query message.  If the original DDReg message did not\n
          \  have a Message Key, then the DDRegRsp message SHALL not have a\n   Message
          Key.\n   If the DDReg operation is successful, the DD ID of the DD created
          or\n   updated SHALL be returned as an operating attribute of the message.\n
          \  If the DD Symbolic Name attribute or DD Features attribute was\n   assigned
          or updated during the DDReg operation, then any new values\n   SHALL be
          returned as an operating attribute of the DDRegRsp message.\n   If the iSNS
          server rejects a DDReg due to invalid attribute values or\n   types, then
          the indicated status code SHALL be 3 (Invalid\n   Registration).  If this
          occurs, then the iSNS server MAY include the\n   list of invalid attributes
          in the Operating Attributes of the\n   DDRegRsp message.\n"
        title: 5.7.5.9.  DD Register Response (DDRegRsp)
      - contents:
        - "5.7.5.10.  DD Deregister Response (DDDeregRsp)\n   The DDDeregRsp message
          type is 0x800A.  This message is the response\n   to the DDDereg request
          message.\n   The DDDeregRsp message does not contain any Message Key or
          Operating\n   Attributes.\n"
        title: 5.7.5.10.  DD Deregister Response (DDDeregRsp)
      - contents:
        - "5.7.5.11.  DDS Register Response (DDSRegRsp)\n   The DDSRegRsp message
          type is 0x800B.  This message is the response\n   to the DDSReg request
          message.\n   The Message Key in the DDSRegRsp message SHALL contain the
          Message\n   Key of the original DDSReg message.  If the original DDSReg
          message\n   did not have a Message Key, then the DDSRegRsp message SHALL
          NOT have\n   a Message Key.\n   If the DDSReg operation is successful, the
          DDS ID of the DDS created\n   or updated SHALL be returned as an operating
          attribute of the\n   message.\n   If the DDS Symbolic Name attribute or
          DDS Status attribute was\n   assigned or updated during the DDSRegRsp operation,
          then any new\n   values SHALL be returned as an operating attribute of the
          DDSRegRsp\n   message.\n   If the iSNS server rejects a DDSReg due to invalid
          attribute values\n   or types, then the indicated status code SHALL be 3
          (Invalid\n   Registration).  If this occurs, then the iSNS server MAY include
          the\n   list of invalid attributes in the Operating Attributes of the\n
          \  DDSRegRsp message.\n"
        title: 5.7.5.11.  DDS Register Response (DDSRegRsp)
      - contents:
        - "5.7.5.12.  DDS Deregister Response (DDSDeregRsp)\n   The DDSDeregRsp message
          type is 0x800C.  This message is the response\n   to the DDSDereg request
          message.\n   The DDSDeregRsp message does not contain any Message Key or
          Operating\n   Attributes.\n"
        title: 5.7.5.12.  DDS Deregister Response (DDSDeregRsp)
      - contents:
        - "5.7.5.13.  Entity Status Inquiry Response (ESIRsp)\n   The ESIRsp message
          type is 0x800D.  This message is sent by an iSNS\n   client and provides
          confirmation that the ESI message was received\n   and processed.\n   The
          ESIRsp response message PDU Payload contains the attributes from\n   the
          original ESI message.  These attributes represent the Portal that\n   is
          responding to the ESI.  The ESIRsp Attributes are in the order\n   they
          were provided in the original ESI message.\n   Upon receiving the ESIRsp
          from the iSNS client, the iSNS server SHALL\n   update the timestamp attribute
          for that Network Entity and Portal.\n"
        title: 5.7.5.13.  Entity Status Inquiry Response (ESIRsp)
      - contents:
        - "5.7.5.14.  Request FC_DOMAIN_ID Response (RqstDomIdRsp)\n   The RqstDomIdRsp
          message type is 0x8011.  This message provides the\n   response for RqstDomId.\n
          \  The RqstDomId response contains a Status Code and the TLV attribute\n
          \  Assigned ID, which contains the integer value in the space requested.\n
          \  If no further unallocated values are available from this space, the\n
          \  iSNS server SHALL respond with the Status Code 19 \"FC_DOMAIN_ID Not\n
          \  Available\".\n   Once a FC_DOMAIN_ID value is allocated by the iSNS server,
          it SHALL\n   NOT be reused until it has been deallocated by the iSNS client
          to\n   which the value was assigned, or until the ESI message detects that\n
          \  the iSNS client no longer exists on the network.\n   The iSNS server
          and client SHALL use TCP to transmit and receive\n   RqstDomId, RqstDomIdRsp,
          RlseDomId, and RlseDomIdRsp messages.\n"
        title: 5.7.5.14.  Request FC_DOMAIN_ID Response (RqstDomIdRsp)
      - contents:
        - "5.7.5.15.  Release FC_DOMAIN_ID Response (RlseDomIdRsp)\n   The RlseDomIdRsp
          message type is 0x8012.  This message provides the\n   response for RlseDomId.
          \ The response contains an Error indicating\n   whether the request was
          successful.  If the Assigned_ID value in the\n   original RlseDomId message
          is not allocated, then the iSNS server\n   SHALL respond with this message
          using the Status Code 20\n   \"FC_DOMAIN_ID Not Allocated\".\n   The iSNS
          server and client SHALL use TCP to transmit and receive\n   RqstDomId, RqstDomIdRsp,
          RlseDomId, and RlseDomIdRsp messages.\n"
        title: 5.7.5.15.  Release FC_DOMAIN_ID Response (RlseDomIdRsp)
      - contents:
        - "5.7.5.16.  Get FC_DOMAIN_IDs Response (GetDomIdRsp)\n   The GetDomIdRsp
          message type is 0x8013.  This message is used to\n   determine which FC_DOMAIN_ID
          values have been allocated for the\n   Virtual_Fabric_ID specified in the
          original GetDomId request message.\n   The GetDomId response message PDU
          Payload contains a Status Code\n   indicating whether the request was successful,
          and a list of the\n   Assigned IDs from the space requested.  The Assigned_ID
          attributes\n   are listed in TLV format.\n"
        title: 5.7.5.16.  Get FC_DOMAIN_IDs Response (GetDomIdRsp)
      title: 5.7.5.  Registration and Query Response Message Types
    title: 5.7.  Messages
  - contents:
    - "5.8.  Vendor-Specific Messages\n   Vendor-specific iSNSP messages have a functional
      ID of between 0x0100\n   and 0x01FF, whereas vendor-specific responses have
      a functional ID of\n   between 0x8100 and 0x81FF.  The first Message Key Attribute
      in a\n   vendor-specific message SHALL be the company OUI (tag=256)\n   identifying
      the original creator of the proprietary iSNSP message.\n   The contents of the
      remainder of the message are vendor-specific.\n"
    title: 5.8.  Vendor-Specific Messages
  title: 5.  iSNSP Message Format
- contents:
  - "6.  iSNS Attributes\n   Attributes can be stored in the iSNS server using iSNSP
    registration\n   messages, and they can be retrieved using iSNSP query messages.\n
    \  Unless otherwise indicated, these attributes are supplied by iSNS\n   clients
    using iSNSP registration messages.\n"
  - contents:
    - "6.1.  iSNS Attribute Summary\n   The complete registry of iSNS attributes is
      maintained by IANA, and\n   the following table summarizes the initial set of
      iSNS attributes\n   available at the time of publication of this document.\n
      \  Attributes               Length   Tag   Reg Key   Query Key\n   ----------
      \              ------   ---   -------   ---------\n   Delimiter                 0
      \       0      N/A        N/A\n   Entity Identifier (EID) 4-256      1       1
      \    1|2|16&17|32|64\n   Entity Protocol           4        2       1     1|2|16&17|32|64\n
      \  Management IP Address     16       3       1     1|2|16&17|32|64\n   Timestamp
      \                8        4      --     1|2|16&17|32|64\n   Protocol Version
      Range    4        5       1     1|2|16&17|32|64\n   Registration Period       4
      \       6       1     1|2|16&17|32|64\n   Entity Index              4        7
      \      1     1|2|16&17|32|64\n   Entity Next Index         4        8      --
      \    1|2|16&17|32|64\n   Entity ISAKMP Phase-1    var       11      1     1|2|16&17|32|64\n
      \  Entity Certificate       var       12      1     1|2|16&17|32|64\n   Portal
      IP Address         16       16      1     1|16&17|32|64\n   Portal TCP/UDP Port
      \      4        17      1     1|16&17|32|64\n   Portal Symbolic Name    4-256
      \     18    16&17   1|16&17|32|64\n   ESI Interval              4        19
      \   16&17   1|16&17|32|64\n   ESI Port                  4        20    16&17
      \  1|16&17|32|64\n   Portal Index              4        22    16&17   1|16&17|32|64\n
      \  SCN Port                  4        23    16&17   1|16&17|32|64\n   Portal
      Next Index         4        24     --     1|16&17|32|64\n   Portal Security
      Bitmap    4        27    16&17   1|16&17|32|64\n   Portal ISAKMP Phase-1    var
      \      28    16&17   1|16&17|32|64\n   Portal ISAKMP Phase-2    var       29
      \   16&17   1|16&17|32|64\n   Portal Certificate       var       31    16&17
      \  1|16&17|32|64\n   iSCSI Name              4-224      32      1     1|16&17|32|33\n
      \  iSCSI Node Type           4        33     32     1|16&17|32\n   iSCSI Alias
      \            4-256      34     32     1|16&17|32\n   iSCSI SCN Bitmap          4
      \       35     32     1|16&17|32\n   iSCSI Node Index          4        36     32
      \    1|16&17|32\n   WWNN Token                8        37     32     1|16&17|32\n
      \  iSCSI Node Next Index     4        38     --     1|16&17|32\n   iSCSI AuthMethod
      \        var       42     32     1|16&17|32\n   PG iSCSI Name           4-224
      \     48   32|16&17 1|16&17|32|52\n   PG Portal IP Addr        16        49
      \  32|16&17 1|16&17|32|52\n   PG Portal TCP/UDP Port    4        50   32|16&17
      1|16&17|32|52\n   PG Tag (PGT)              4        51   32|16&17 1|16&17|32|52\n
      \  PG Index                  4        52   32|16&17 1|16&17|32|52\n   PG Next
      Index             4        53     --     1|16&17|32|52\n   FC Port Name WWPN
      \        8        64     1     1|16&17|64|66|96|128\n   Port ID                   4
      \       65     64     1|16&17|64\n   FC Port Type              4        66     64
      \    1|16&17|64\n   Symbolic Port Name      4-256      67     64     1|16&17|64\n
      \  Fabric Port Name          8        68     64     1|16&17|64\n   Hard Address
      \             4        69     64     1|16&17|64\n   Port IP-Address          16
      \       70     64     1|16&17|64\n   Class of Service          4        71     64
      \    1|16&17|64\n   FC-4 Types               32        72     64     1|16&17|64\n
      \  FC-4 Descriptor         4-256      73     64     1|16&17|64\n   FC-4 Features
      \           128       74     64     1|16&17|64\n   iFCP SCN bitmap           4
      \       75     64     1|16&17|64\n   Port Role                 4        76     64
      \    1|16&17|64\n   Permanent Port Name       8        77     --     1|16&17|64\n
      \  FC-4 Type Code            4        95     --     1|16&17|64\n   FC Node Name
      WWNN         8        96     64     1|16&17|64|96\n   Symbolic Node Name      4-256
      \     97     96     64|96\n   Node IP-Address           16       98     96     64|96\n
      \  Node IPA                  8        99     96     64|96\n   Proxy iSCSI Name
      \       4-256     101     96     64|96\n   Switch Name               8       128
      \    128    128\n   Preferred ID              4       129     128    128\n   Assigned
      ID               4       130     128    128\n   Virtual_Fabric_ID       4-256
      \    131     128    128\n   iSNS Server Vendor OUI    4       256     --     SOURCE
      Attribute\n   Vendor-Spec iSNS Srvr          257-384    --     SOURCE Attribute\n
      \  Vendor-Spec Entity             385-512     1     1|2|16&17|32|64\n   Vendor-Spec
      Portal             513-640   16&17   1|16&17|32|64\n   Vendor-Spec iSCSI Node
      \        641-768    32     16&17|32\n   Vendor-Spec FC Port Name       769-896
      \   64     1|16&17|64\n   Vendor-Spec FC Node Name       897-1024   96     64|96\n
      \  Vendor-Specific DDS           1025-1280   2049   2049\n   Vendor-Specific
      DD            1281-1536   2065   2065\n   Other Vendor-Specific         1537-2048\n
      \  DD_Set ID                 4      2049     2049   1|32|64|2049|2065\n   DD_Set
      Sym Name         4-256    2050     2049   2049\n   DD_Set Status             4
      \     2051     2049   2049\n   DD_Set_Next_ID            4      2052     --
      \    2049\n   DD_ID                     4      2065     2049   1|32|64|2049|2065\n
      \  DD_Symbolic Name        4-256    2066     2065   2065\n   DD_Member iSCSI
      Index     4      2067     2065   2065\n   DD_Member iSCSI Name    4-224    2068
      \    2065   2065\n   DD_Member FC Port Name    8      2069     2065   2065\n
      \  DD_Member Portal Index    4      2070     2065   2065\n   DD_Member Portal
      IP Addr 16      2071     2065   2065\n   DD_Member Portal TCP/UDP  4      2072
      \    2065   2065\n   DD_Features               4      2078     2065   2065\n
      \  DD_ID Next ID             4      2079     --     2065\n   The following are
      descriptions of the columns used in the above\n   table:\n   Length:    indicates
      the attribute length in bytes used for the TLV\n              format.  Variable-length
      identifiers are NULL-terminated\n              and 4-byte aligned (NULLs are
      included in the length).\n   Tag:       the IANA-assigned integer tag value
      used to identify the\n              attribute.  All undefined tag values are
      reserved.\n   Reg Key:   indicates the tag values for the object key in DevAttrReg\n
      \             messages for registering a new attribute value in the\n              database.
      \ These tags represent attributes defined as\n              object keys in Section
      4.\n   Query Key: indicates the possible tag values for the Message Key and\n
      \             object key that are used in the DevAttrQry messages for\n              retrieving
      a stored value from the iSNS database.\n   The following is a summary of iSNS
      attribute tag values available for\n   future allocation by IANA at the time
      of publication:\n   Tag Values           Reg Key          Query Key\n   ----------
      \          -------          ---------\n   9-10, 13-15          1                1|2|16&17|32|64\n
      \  21, 25-26, 30        16&17            1|16&17|32|64\n   39-41, 44-47         32
      \              1|16&17|32\n   54-63                32|16&17         1|16&17|32|52\n
      \  78-82, 85-94         64               1|16&17|64\n   102-127              96
      \              64|96\n   132-255              --               SOURCE Attribute\n
      \  2053-2064            2049             2049\n   2073-2077            2065
      \            2065\n   2080-65535           To be assigned   To be assigned\n
      \  Registration and query keys for attributes with tags in the range\n   2080
      to 65535 are to be documented in the RFC introducing the new\n   iSNS attributes.
      \ IANA will maintain registration of these values as\n   required by the new
      RFC.\n   New iSNS attributes with any of the above tag values MAY also be\n
      \  designated as \"read-only\" attributes.  The new RFC introducing these\n
      \  attributes as \"read-only\" SHALL document them as such, and IANA will\n
      \  record their corresponding Registration Keys (Reg Keys) as \"--\".\n"
    title: 6.1.  iSNS Attribute Summary
  - contents:
    - "6.2.  Entity Identifier-Keyed Attributes\n   The following attributes are stored
      in the iSNS server using the\n   Entity Identifier attribute as the key.\n"
    - contents:
      - "6.2.1.  Entity Identifier (EID)\n   The Entity Identifier (EID) is variable-length
        UTF-8 encoded NULL-\n   terminated text-based description for a Network Entity.
        \ This key\n   attribute uniquely identifies each Network Entity registered
        in the\n   iSNS server.  The attribute length varies from 4 to 256 bytes\n
        \  (including the NULL termination), and is a unique value within the\n   iSNS
        server.\n   If the iSNS client does not provide an EID during registration,
        the\n   iSNS server SHALL generate one that is unique within the iSNS\n   database.
        \ If an EID is to be generated, then the EID attribute value\n   in the registration
        message SHALL be empty (0 length).  The generated\n   EID SHALL be returned
        in the registration response.\n   In environments where the iSNS server is
        integrated with a DNS\n   infrastructure, the Entity Identifier may be used
        to store the Fully\n   Qualified Domain Name (FQDN) of the iSCSI or iFCP device.
        \ FQDNs of\n   greater than 255 bytes MUST NOT be used.\n   If FQDNs are not
        used, the iSNS server can be used to generate EIDs.\n   EIDs generated by
        the iSNS server MUST begin with the string \"isns:\".\n   iSNS clients MUST
        NOT generate and register EIDs beginning with the\n   string \"isns:\".\n
        \  This field MUST be normalized according to the nameprep template\n   [NAMEPREP]
        before it is stored in the iSNS database.\n"
      title: 6.2.1.  Entity Identifier (EID)
    - contents:
      - "6.2.2.  Entity Protocol\n   The Entity Protocol is a required 4-byte integer
        attribute that\n   indicates the block storage protocol used by the registered
        NETWORK\n   ENTITY.  Values used for this attribute are assigned and maintained\n
        \  by IANA.  The initial set of protocols supported by iSNS is as\n   follows:\n
        \         Value          Entity Protocol Type\n          -----          --------------------\n
        \          1             No Protocol\n           2             iSCSI\n           3
        \            iFCP\n           All others    To be assigned by IANA\n   'No
        Protocol' is used to indicate that the Network Entity does not\n   support
        an IP block storage protocol.  A Control Node or monitoring\n   Node would
        likely (but not necessarily) use this value.\n   This attribute is required
        during initial registration of the Network\n   Entity.\n"
      title: 6.2.2.  Entity Protocol
    - contents:
      - "6.2.3.  Management IP Address\n   This field contains the IP Address that
        may be used to manage the\n   Network Entity and all Storage Nodes contained
        therein via the iSNS\n   MIB [iSNSMIB].  Some implementations may also use
        this IP address to\n   support vendor-specific proprietary management protocols.
        \ The\n   Management IP Address is a 16-byte field that may contain an IPv4
        or\n   IPv6 address.  When this field contains an IPv4 value, it is stored\n
        \  as an IPv4-mapped IPv6 address.  That is, the most significant 10\n   bytes
        are set to 0x00, with the next two bytes set to 0xFFFF\n   [RFC2373].  When
        this field contains an IPv6 value, the entire 16-\n   byte field is used.
        \ If this field is not set, then in-band\n   management through the IP address
        of one of the Portals of the\n   Network Entity is assumed.\n"
      title: 6.2.3.  Management IP Address
    - contents:
      - "6.2.4.  Entity Registration Timestamp\n   This field indicates the most recent
        time when the Network Entity\n   registration occurred or when an associated
        object attribute was\n   updated or queried by the iSNS client registering
        the Network Entity.\n   The time format is, in seconds, the update period
        since the standard\n   base time of 00:00:00 GMT on January 1, 1970.  This
        field cannot be\n   explicitly registered.  This timestamp TLV format is also
        used in the\n   SCN and ESI messages.\n"
      title: 6.2.4.  Entity Registration Timestamp
    - contents:
      - "6.2.5.  Protocol Version Range\n   This field contains the minimum and maximum
        version of the block\n   storage protocol supported by the Network Entity.
        \ The most\n   significant two bytes contain the maximum version supported,
        and the\n   least significant two bytes contain the minimum version supported.\n
        \  If a range is not registered, then the Network Entity is assumed to\n   support
        all versions of the protocol.  The value 0xffff is a wildcard\n   that indicates
        no minimum or maximum.  If the Network Entity does not\n   support a protocol,
        then this field SHALL be set to 0.\n"
      title: 6.2.5.  Protocol Version Range
    - contents:
      - "6.2.6.  Registration Period\n   This 4-byte unsigned integer field indicates
        the maximum period, in\n   seconds, that the registration SHALL be maintained
        by the server\n   without receipt of an iSNS message from the iSNS client
        that\n   registered the Network Entity.  Entities that are not registered
        for\n   ESI monitoring MUST have a non-zero Registration Period.  If a\n   Registration
        Period is not requested by the iSNS client and Entity\n   Status Inquiry (ESI)
        messages are not enabled for that client, then\n   the Registration Period
        SHALL be set to a non-zero value by the iSNS\n   server.  This implementation-specific
        value for the Registration\n   Period SHALL be returned in the registration
        response to the iSNS\n   client.  The Registration Period may be set to zero,
        indicating its\n   non-use, only if ESI messages are enabled for that Network
        Entity.\n   The registration SHALL be removed from the iSNS database if an
        iSNS\n   Protocol message is not received from the iSNS client before the\n
        \  registration period has expired.  Receipt of any iSNS Protocol\n   message
        from the iSNS client automatically refreshes the Entity\n   Registration Period
        and Entity Registration Timestamp.  To prevent a\n   registration from expiring,
        the iSNS client should send an iSNS\n   Protocol message to the iSNS server
        at intervals shorter than the\n   registration period.  Such a message can
        be as simple as a query for\n   one of its own attributes, using its associated
        iSCSI Name or FC Port\n   Name WWPN as the Source attribute.\n   For an iSNS
        client that is supporting a Network Entity with multiple\n   Storage Node
        objects, receipt of an iSNS message from any Storage\n   Node of that Network
        Entity is sufficient to refresh the registration\n   for all Storage Node
        objects of the Network Entity.\n   If ESI support is requested as part of
        a Portal registration, the ESI\n   Response message received from the iSNS
        client by the iSNS server\n   SHALL refresh the registration.\n"
      title: 6.2.6.  Registration Period
    - contents:
      - "6.2.7.  Entity Index\n   The Entity Index is an unsigned non-zero integer
        value that uniquely\n   identifies each Network Entity registered in the iSNS
        server.  Upon\n   initial registration of a Network Entity, the iSNS server
        assigns an\n   unused value for the Entity Index.  Each Network Entity in
        the iSNS\n   database MUST be assigned a value for the Entity Index that is
        not\n   assigned to any other Network Entity.  Furthermore, Entity Index\n
        \  values for recently deregistered Network Entities SHOULD NOT be\n   reused
        in the short term.\n   The Entity Index MAY be used to represent the Network
        Entity in\n   situations when the Entity Identifier is too long or otherwise\n
        \  inappropriate.  An example of this is when SNMP is used for\n   management,
        as described in Section 2.10.\n"
      title: 6.2.7.  Entity Index
    - contents:
      - "6.2.8.  Entity Next Index\n   This is a virtual attribute containing a 4-byte
        integer value that\n   indicates the next available (i.e., unused) Entity
        Index value.  This\n   attribute may only be queried; the iSNS server SHALL
        return an error\n   code of 3 (Invalid Registration) to any client that attempts
        to\n   register a value for this attribute.  A Message Key is not required\n
        \  when exclusively querying for this attribute.\n   The Entity Next Index
        MAY be used by an SNMP client to create an\n   entry in the iSNS server.  SNMP
        requirements are described in Section\n   2.10.\n"
      title: 6.2.8.  Entity Next Index
    - contents:
      - "6.2.9.  Entity ISAKMP Phase-1 Proposals\n   This field contains the IKE Phase-1
        proposal, listing in decreasing\n   order of preference the protection suites
        acceptable to protect all\n   IKE Phase-2 messages sent and received by the
        Network Entity.  This\n   includes Phase-2 SAs from the iSNS client to the
        iSNS server as well\n   as to peer iFCP and/or iSCSI devices.  This attribute
        contains the SA\n   payload, proposal payload(s), and transform payload(s)
        in the ISAKMP\n   format defined in [RFC2408].\n   This field should be used
        if the implementer wishes to define a\n   single phase-1 SA security configuration
        used to protect all phase-2\n   IKE traffic.  If the implementer desires to
        have a different phase-1\n   SA security configuration to protect each Portal
        interface, then the\n   Portal Phase-1 Proposal (Section 6.3.10) should be
        used.\n"
      title: 6.2.9.  Entity ISAKMP Phase-1 Proposals
    - contents:
      - "6.2.10.  Entity Certificate\n   This attribute contains one or more X.509
        certificates that are bound\n   to the Network Entity.  This certificate is
        uploaded and registered\n   to the iSNS server by clients wishing to allow
        other clients to\n   authenticate themselves and to access the services offered
        by that\n   Network Entity.  The format of the X.509 certificate is found
        in\n   [RFC3280].  This certificate MUST contain a Subject Name with an\n
        \  empty sequence and MUST contain a SubjectAltName extension encoded\n   with
        the dNSName type.  The Entity Identifier (Section 6.2.1) of the\n   identified
        Entity MUST be stored in the SubjectAltName field of the\n   certificate.\n"
      title: 6.2.10.  Entity Certificate
    title: 6.2.  Entity Identifier-Keyed Attributes
  - contents:
    - "6.3.  Portal-Keyed Attributes\n   The following Portal attributes are registered
      in the iSNS database\n   using the combined Portal IP-Address and Portal TCP/UDP
      Port as the\n   key.  Each Portal is associated with one Entity Identifier object\n
      \  key.\n"
    - contents:
      - "6.3.1.  Portal IP Address\n   This attribute is the IP address of the Portal
        through which a\n   Storage Node can transmit and receive storage data.  The
        Portal IP\n   Address is a 16-byte field that may contain an IPv4 or IPv6
        address.\n   When this field contains an IPv4 address, it is stored as an
        IPv4-\n   mapped IPv6 address.  That is, the most significant 10 bytes are
        set\n   to 0x00, with the next 2 bytes set to 0xFFFF [RFC2373].  When this\n
        \  field contains an IPv6 address, the entire 16-byte field is used.\n   The
        Portal IP Address and the Portal TCP/UDP Port number (see 6.3.2\n   below)
        are used as a key to identify a Portal uniquely.  It is a\n   required attribute
        for registration of a Portal.\n"
      title: 6.3.1.  Portal IP Address
    - contents:
      - "6.3.2.  Portal TCP/UDP Port\n   The TCP/UDP port of the Portal through which
        a Storage Node can\n   transmit and receive storage data.  Bits 16 to 31 represents
        the\n   TCP/UDP port number.  Bit 15 represents the port type.  If bit 15
        is\n   set, then the port type is UDP.  Otherwise it is TCP.  Bits 0 to 14\n
        \  are reserved.\n   If the field value is 0, then the port number is the
        implied\n   canonical port number and type of the protocol indicated by the\n
        \  associated Entity Type.\n   The Portal IP Address and the Portal TCP/UDP
        Port number are used as\n   a key to identify a Portal uniquely.  It is a
        required attribute for\n   registration of a Portal.\n"
      title: 6.3.2.  Portal TCP/UDP Port
    - contents:
      - "6.3.3.  Portal Symbolic Name\n   A variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 256 bytes.  The Portal Symbolic Name is
        a user-\n   readable description of the Portal entry in the iSNS server.\n"
      title: 6.3.3.  Portal Symbolic Name
    - contents:
      - "6.3.4.  Entity Status Inquiry Interval\n   This field indicates the requested
        time, in seconds, between Entity\n   Status Inquiry (ESI) messages sent from
        the iSNS server to this\n   Network Entity.  ESI messages can be used to verify
        that a Portal\n   registration continues to be valid.  To request monitoring
        by the\n   iSNS server, an iSNS client registers a non-zero value for this\n
        \  Portal attribute using a DevAttrReg message.  The client MUST\n   register
        an ESI Port on at least one of its Portals to receive the\n   ESI monitoring.\n
        \  If the iSNS server does not receive an expected response to an ESI\n   message,
        it SHALL attempt an administratively configured number of\n   re-transmissions
        of the ESI message.  The ESI Interval period begins\n   with the iSNS server's
        receipt of the last ESI Response.  All re-\n   transmissions MUST be sent
        before twice the ESI Interval period has\n   passed.  If no response is received
        from any of the ESI messages,\n   then the Portal SHALL be deregistered.  Note
        that only Portals that\n   have registered a value in their ESI Port field
        can be deregistered\n   in this way.\n   If all Portals associated with a
        Network Entity that have registered\n   for ESI messages are deregistered
        due to non-response, and if no\n   registrations have been received from the
        client for at least two ESI\n   Interval periods, then the Network Entity
        and all associated objects\n   (including Storage Nodes) SHALL be deregistered.\n
        \  If the iSNS server is unable to support ESI messages or the ESI\n   Interval
        requested, it SHALL either reject the ESI request by\n   returning an \"ESI
        Not Available\" Status Code or modify the ESI\n   Interval attribute by selecting
        its own suitable value and returning\n   that value in the Operating Attributes
        of the registration response\n   message.\n   If at any time an iSNS client
        that is registered for ESI messages has\n   not received an ESI message to
        any of its Portals as expected, then\n   the client MAY attempt to query the
        iSNS server using a DevAttrQry\n   message using its Entity_ID as the key.
        \ If the query result is the\n   error \"no such entry\", then the client
        SHALL close all remaining TCP\n   connections to the iSNS server and assume
        that it is no longer\n   registered in the iSNS database.  Such a client MAY
        attempt re-\n   registration.\n"
      title: 6.3.4.  Entity Status Inquiry Interval
    - contents:
      - "6.3.5.  ESI Port\n   This field contains the TCP or UDP port used for ESI
        monitoring by\n   the iSNS server at the Portal IP Address.  Bits 16 to 31
        represent\n   the port number.  If bit 15 is set, then the port type is UDP.\n
        \  Otherwise, the port is TCP.  Bits 0 to 14 are reserved.\n   If the iSNS
        client registers a valid TCP or UDP port number in this\n   field, then the
        client SHALL allow ESI messages to be received at the\n   indicated TCP or
        UDP port.  If a TCP port is registered and a pre-\n   existing TCP connection
        from that TCP port to the iSNS server does\n   not already exist, then the
        iSNS client SHALL accept new TCP\n   connections from the iSNS server at the
        indicated TCP port.\n   The iSNS server SHALL return an error if a Network
        Entity is\n   registered for ESI monitoring and none of the Portals of that
        Network\n   Entity has an entry for the ESI Port field.  If multiple Portals
        have\n   a registered ESI port, then the ESI message may be delivered to any\n
        \  one of the indicated Portals.\n"
      title: 6.3.5.  ESI Port
    - contents:
      - "6.3.6.  Portal Index\n   The Portal Index is a 4-byte non-zero integer value
        that uniquely\n   identifies each Portal registered in the iSNS database.
        \ Upon initial\n   registration of a Portal, the iSNS server assigns an unused
        value for\n   the Portal Index of that Portal.  Each Portal in the iSNS database\n
        \  MUST be assigned a value for the Portal Index that is not assigned to\n
        \  any other Portal.  Furthermore, Portal Index values for recently\n   deregistered
        Portals SHOULD NOT be reused in the short term.\n   The Portal Index MAY be
        used to represent a registered Portal in\n   situations where the Portal IP-Address
        and Portal TCP/UDP Port is\n   unwieldy to use.  An example of this is when
        SNMP is used for\n   management, as described in Section 2.10.\n"
      title: 6.3.6.  Portal Index
    - contents:
      - "6.3.7.  SCN Port\n   This field contains the TCP or UDP port used by the
        iSNS client to\n   receive SCN messages from the iSNS server.  When a value
        is\n   registered for this attribute, an SCN message may be received on the\n
        \  indicated port for any of the Storage Nodes supported by the Portal.\n
        \  Bits 16 to 31 contain the port number.  If bit 15 is set, then the\n   port
        type is UDP.  Otherwise, the port type is TCP.  Bits 0 to 14 are\n   reserved.\n
        \  If the iSNS client registers a valid TCP or UDP port number in this\n   field,
        then the client SHALL allow SCN messages to be received at the\n   indicated
        TCP or UDP port.  If a TCP port is registered and a pre-\n   existing TCP
        connection from that TCP port to the iSNS server does\n   not already exist,
        then the iSNS client SHALL accept new TCP\n   connections from the iSNS server
        at the indicated TCP port.\n   The iSNS server SHALL return an error if an
        SCN registration message\n   is received and none of the Portals of the Network
        Entity has an\n   entry for the SCN Port.  If multiple Portals have a registered
        SCN\n   Port, then the SCN SHALL be delivered to any one of the indicated\n
        \  Portals of that Network Entity.\n"
      title: 6.3.7.  SCN Port
    - contents:
      - "6.3.8.  Portal Next Index\n   This is a virtual attribute containing a 4-byte
        integer value that\n   indicates the next available (i.e., unused) Portal
        Index value.  This\n   attribute may only be queried; the iSNS server SHALL
        return an error\n   code of 3 (Invalid Registration) to any client that attempts
        to\n   register a value for this attribute.  A Message Key is not required\n
        \  when exclusively querying for this attribute.\n   The Portal Next Index
        MAY be used by an SNMP client to create an\n   entry in the iSNS server.  SNMP
        requirements are described in Section\n   2.10.\n"
      title: 6.3.8.  Portal Next Index
    - contents:
      - "6.3.9.  Portal Security Bitmap\n   This 4-byte field contains flags that
        indicate security attribute\n   settings for the Portal.  Bit 31 (Lsb) of
        this field must be 1\n   (enabled) for this field to contain significant information.
        \ If Bit\n   31 is enabled, this signifies that the iSNS server can be used
        to\n   store and distribute security policies and settings for iSNS clients\n
        \  (i.e., iSCSI devices).  Bit 30 must be 1 for bits 25-29 to contain\n   significant
        information.  All other bits are reserved for non-\n   IKE/IPSec security
        mechanisms to be specified in the future.\n   Bit Position        Flag Description\n
        \  ------------        ----------------\n      25               1 = Tunnel
        Mode Preferred; 0 = No Preference\n      26               1 = Transport Mode
        Preferred; 0 = No Preference\n      27               1 = Perfect Forward Secrecy
        (PFS) Enabled;\n                       0 = PFS Disabled\n      28               1
        = Aggressive Mode Enabled; 0 = Disabled\n      29               1 = Main Mode
        Enabled; 0 = MM Disabled\n      30               1 = IKE/IPSec Enabled; 0
        = IKE/IPSec Disabled\n      31 (Lsb)         1 = Bitmap VALID; 0 = INVALID\n
        \     All others       RESERVED\n"
      title: 6.3.9.  Portal Security Bitmap
    - contents:
      - "6.3.10.  Portal ISAKMP Phase-1 Proposals\n   This field contains the IKE
        Phase-1 proposal listing in decreasing\n   order of preference of the protection
        suites acceptable to protect\n   all IKE Phase-2 messages sent and received
        by the Portal.  This\n   includes Phase-2 SAs from the iSNS client to the
        iSNS server as well\n   as to peer iFCP and/or iSCSI devices.  This attribute
        contains the SA\n   payload, proposal payload(s), and transform payload(s)
        in the ISAKMP\n   format defined in [RFC2408].\n   This field should be used
        if the implementer wishes to define phase-1\n   SA security configuration
        on a per-Portal basis, as opposed to on a\n   per-Network Entity basis.  If
        the implementer desires to have a\n   single phase-1 SA security configuration
        to protect all phase-2\n   traffic regardless of the interface used, then
        the Entity Phase-1\n   Proposal (Section 6.2.9) should be used.\n"
      title: 6.3.10.  Portal ISAKMP Phase-1 Proposals
    - contents:
      - "6.3.11.  Portal ISAKMP Phase-2 Proposals\n   This field contains the IKE
        Phase-2 proposal, in ISAKMP format\n   [RFC2408], listing in decreasing order
        of preference the security\n   proposals acceptable to protect traffic sent
        and received by the\n   Portal.  This field is used only if bits 31, 30, and
        29 of the\n   Security Bitmap (see 6.3.9) are enabled.  This attribute contains
        the\n   SA payload, proposal payload(s), and associated transform payload(s)\n
        \  in the ISAKMP format defined in [RFC2408].\n"
      title: 6.3.11.  Portal ISAKMP Phase-2 Proposals
    - contents:
      - "6.3.12.  Portal Certificate\n   This attribute contains one or more X.509
        certificates that are a\n   credential of the Portal.  This certificate is
        used to identify and\n   authenticate communications to the IP address and
        TCP/UDP Port\n   supported by the Portal.  The format of the X.509 certificate
        is\n   specified in [RFC3280].  This certificate MUST contain a Subject Name\n
        \  with an empty sequence and MUST contain a SubjectAltName extension\n   encoded
        with the iPAddress type.  The Portal IP Address (Section\n   6.3.1) of the
        identified Portal SHALL be stored in the SubjectAltName\n   field of the certificate.\n"
      title: 6.3.12.  Portal Certificate
    title: 6.3.  Portal-Keyed Attributes
  - contents:
    - "6.4.  iSCSI Node-Keyed Attributes\n   The following attributes are stored in
      the iSNS database using the\n   iSCSI Name attribute as the key.  Each set of
      Node-Keyed attributes\n   is associated with one Entity Identifier object key.\n
      \  Although the iSCSI Name key is associated with one Entity Identifier,\n   it
      is unique across the entire iSNS database.\n"
    - contents:
      - "6.4.1.  iSCSI Name\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 224 bytes.  This key attribute is required
        for\n   iSCSI Storage Nodes and is provided by the iSNS client.  The\n   registered
        iSCSI Name MUST conform to the format described in [iSCSI]\n   for iSCSI Names.
        \ The maximum size for an iSCSI Name is 223 bytes.\n   Including the NULL
        character and 4-byte alignment (see Section\n   5.3.1), the maximum iSCSI
        Name field size is 224 bytes.\n   If an iSCSI Name is registered without an
        EID key, then a Network\n   Entity SHALL be created and an EID assigned.  The
        assigned EID SHALL\n   be returned in the registration response as an operating
        attribute.\n   This field MUST be normalized according to the stringprep template\n
        \  [STRINGPREP] before it is stored in the iSNS database.\n"
      title: 6.4.1.  iSCSI Name
    - contents:
      - "6.4.2.  iSCSI Node Type\n   This required 32-bit field is a bitmap indicating
        the type of iSCSI\n   Storage Node.  The bit positions are defined below.
        \ A set bit (1)\n   indicates that the Node has the corresponding characteristics.\n
        \         Bit Position    Node Type\n          ------------    ---------\n
        \          29             Control\n           30             Initiator\n           31
        (Lsb)       Target\n           All others     RESERVED\n   If the Target bit
        is set to 1, then the Node represents an iSCSI\n   target.  The Target bit
        MAY be set by iSNS clients using the iSNSP.\n   If the Initiator bit is set
        to 1, then the Node represents an iSCSI\n   initiator.  The Initiator bit
        MAY be set by iSNS clients using the\n   iSNSP.\n   If the control bit is
        set to 1, then the Node represents a gateway, a\n   management station, a
        backup iSNS server, or another device that is\n   not an initiator or target,
        but that requires the ability to send and\n   receive iSNSP messages, including
        state change notifications.\n   Setting the control bit is an administrative
        task that MUST be\n   performed on the iSNS server; iSNS clients SHALL NOT
        be allowed to\n   change this bit using the iSNSP.\n   This field MAY be used
        by the iSNS server to distinguish among\n   permissions by different iSCSI
        Node types for accessing various iSNS\n   functions.  More than one Node Type
        bit may be simultaneously\n   enabled.\n"
      title: 6.4.2.  iSCSI Node Type
    - contents:
      - "6.4.3.  iSCSI Node Alias\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 256 bytes.  The Alias is a user-readable\n
        \  description of the Node entry in the iSNS database.\n"
      title: 6.4.3.  iSCSI Node Alias
    - contents:
      - "6.4.4.  iSCSI Node SCN Bitmap\n   The iSCSI Node SCN Bitmap indicates events
        for which the registering\n   iSNS client wishes to receive a notification
        message.  The following\n   table displays events that result in notifications,
        and the bit field\n   in the SCN Bitmap that, when enabled, results in the
        corresponding\n   notification.\n   Note that this field is of dual use: it
        is used in the SCN\n   registration process to define interested events that
        will trigger an\n   SCN message, and it is also contained in each SCN message
        itself, to\n   indicate the type of event that triggered the SCN message.
        \ A set bit\n   (1) indicates the corresponding type of SCN.\n          Bit
        Position       Flag Description\n          ------------       ----------------\n
        \          24                INITIATOR AND SELF INFORMATION ONLY\n           25
        \               TARGET AND SELF INFORMATION ONLY\n           26                MANAGEMENT
        REGISTRATION/SCN\n           27                OBJECT REMOVED\n           28
        \               OBJECT ADDED\n           29                OBJECT UPDATED\n
        \          30                DD/DDS MEMBER REMOVED (Mgmt Reg/SCN only)\n           31
        (Lsb)          DD/DDS MEMBER ADDED (Mgmt Reg/SCN only)\n           All others
        \       RESERVED\n   DD/DDS MEMBER REMOVED indicates that an existing member
        of a\n   Discovery Domain and/or Discovery Domain Set has been removed.\n
        \  DD/DDS MEMBER ADDED indicates that a new member was added to an\n   existing
        DD and/or DDS.\n   OBJECT REMOVED, OBJECT ADDED, and OBJECT UPDATED indicate
        a Network\n   Entity, Portal, Storage Node, FC Device, DD, and/or DDS object
        was\n   removed from, added to, or updated in the Discovery Domain or in the\n
        \  iSNS database (Control Nodes only).\n   Regular SCNs provide information
        about objects that are updated in,\n   added to or removed from Discovery
        Domains of which the Storage Node\n   is a member.  An SCN or SCN registration
        is considered a regular SCN\n   or regular SCN registration if the MANAGEMENT
        REGISTRATION/SCN flag\n   is cleared.  All iSNS clients may register for regular
        SCNs.\n   Management SCNs provide information about all changes to the network,\n
        \  regardless of discovery domain membership.  Registration for\n   management
        SCNs is indicated by setting bit 26 to 1.  Only Control\n   Nodes may register
        for management SCNs.  Bits 30 and 31 may only be\n   enabled if bit 26 is
        set to 1.\n   TARGET AND SELF INFORMATION ONLY SCNs (bit 25) provides information\n
        \  only about changes to target devices, or if the iSCSI Storage Node\n   itself
        has undergone a change.  Similarly, INITIATOR AND SELF\n   INFORMATION ONLY
        SCNs (bit 24) provides information only about\n   changes to initiator Nodes,
        or to the target itself.\n"
      title: 6.4.4.  iSCSI Node SCN Bitmap
    - contents:
      - "6.4.5.  iSCSI Node Index\n   The iSCSI Node Index is a 4-byte non-zero integer
        value used as a key\n   that uniquely identifies each iSCSI Storage Node registered
        in the\n   iSNS database.  Upon initial registration of the iSCSI Storage
        Node,\n   the iSNS server assigns an unused value for the iSCSI Node Index.\n
        \  Each iSCSI Node MUST be assigned a value for the iSCSI Node Index\n   that
        is not assigned to any other iSCSI Storage Node.  Furthermore,\n   iSCSI Node
        Index values for recently deregistered iSCSI Storage Nodes\n   SHOULD NOT
        be reused in the short term.\n   The iSCSI Node Index may be used as a key
        to represent a registered\n   Node in situations where the iSCSI Name is too
        long to be used as a\n   key.  An example of this is when SNMP is used for
        management, as\n   described in Section 2.10.\n   The value assigned for the
        iSCSI Node Index SHALL persist as long as\n   the iSCSI Storage Node is registered
        in the iSNS database or a member\n   of a Discovery Domain.  An iSCSI Node
        Index value that is assigned\n   for a Storage Node SHALL NOT be used for
        any other Storage Node as\n   long as the original node is registered in the
        iSNS database or a\n   member of a Discovery Domain.\n"
      title: 6.4.5.  iSCSI Node Index
    - contents:
      - "6.4.6.  WWNN Token\n   This field contains a globally unique 64-bit integer
        value that can\n   be used to represent the World Wide Node Name of the iSCSI
        device in\n   a Fibre Channel fabric.  This identifier is used during the
        device\n   registration process and MUST conform to the requirements in [FC-FS].\n
        \  The FC-iSCSI gateway uses the value found in this field to register\n   the
        iSCSI device in the Fibre Channel name server.  It is stored in\n   the iSNS
        server to prevent conflict when \"proxy\" WWNN values are\n   assigned to
        iSCSI initiators establishing storage sessions to devices\n   in the FC fabric.\n
        \  If the iSNS client does not assign a value for WWNN Token, then the\n   iSNS
        server SHALL provide a value for this field upon initial\n   registration
        of the iSCSI Storage Node.  The process by which the\n   WWNN Token is assigned
        by the iSNS server MUST conform to the\n   following requirements:\n   1.
        \ The assigned WWNN Token value MUST be unique among all WWN\n       entries
        in the existing iSNS database, and among all devices that\n       can potentially
        be registered in the iSNS database.\n   2.  Once the value is assigned, the
        iSNS server MUST persistently\n       save the mapping between the WWNN Token
        value and registered\n       iSCSI Name.  That is, successive re-registrations
        of the iSCSI\n       Storage Node keyed by the same iSCSI Name maintain the
        original\n       mapping to the associated WWNN Token value in the iSNS server.\n
        \      Similarly, the mapping SHALL be persistent across iSNS server\n       reboots.
        \ Once assigned, the mapping can only be changed if a\n       DevAttrReg message
        from an authorized iSNS client explicitly\n       provides a different WWNN
        Token value.\n   3.  Once a WWNN Token value has been assigned and mapped
        to an iSCSI\n       name, that WWNN Token value SHALL NOT be reused or mapped
        to any\n       other iSCSI name.\n   4.  The assigned WWNN Token value MUST
        conform to the formatting\n       requirements of [FC-FS] for World Wide Names
        (WWNs).\n   An iSNS client, such as an FC-iSCSI gateway or the iSCSI initiator,\n
        \  MAY register its own WWNN Token value or overwrite the iSNS Server-\n   supplied
        WWNN Token value, if it wishes to supply its own iSCSI-FC\n   name mapping.
        \ This is accomplished using the DevAttrReg message with\n   the WWNN Token
        (tag=37) as an operating attribute.  Once overwritten,\n   the new WWNN Token
        value MUST be stored and saved by the iSNS server,\n   and all requirements
        specified above continue to apply.  If an iSNS\n   client attempts to register
        a value for this field that is not unique\n   in the iSNS database or that
        is otherwise invalid, then the\n   registration SHALL be rejected with an
        Status Code of 3 (Invalid\n   Registration).\n   There MAY be matching records
        in the iSNS database for the Fibre\n   Channel device specified by the WWNN
        Token.  These records may\n   contain device attributes for that FC device
        registered in the Fibre\n   Channel fabric name server.\n"
      title: 6.4.6.  WWNN Token
    - contents:
      - "6.4.7.  iSCSI Node Next Index\n   This is a virtual attribute containing
        a 4-byte integer value that\n   indicates the next available (i.e., unused)
        iSCSI Node Index value.\n   This attribute may only be queried; the iSNS server
        SHALL return an\n   error code of 3 (Invalid Registration) to any client that
        attempts to\n   register a value for this attribute.  A Message Key is not
        required\n   when exclusively querying for this attribute.\n   The iSCSI Node
        Next Index MAY be used by an SNMP client to create an\n   entry in the iSNS
        server.  SNMP requirements are described in Section\n   2.10.\n"
      title: 6.4.7.  iSCSI Node Next Index
    - contents:
      - "6.4.8.  iSCSI AuthMethod\n   This attribute contains a NULL-terminated string
        of UTF-8 text\n   listing the iSCSI authentication methods enabled for this
        iSCSI\n   Storage Node, in order of preference.  The text values used to\n
        \  identify iSCSI authentication methods are embedded in this string\n   attribute
        and delineated by a comma.  The text values are identical\n   to those found
        in the main iSCSI document [iSCSI]; additional\n   vendor-specific text values
        are also possible.\n          Text Value       Description                   Reference\n
        \         ----------       -----------                   ---------\n           KB5
        \            Kerberos V5                   [RFC1510]\n           SPKM1           Simple
        Public Key GSS-API     [RFC2025]\n           SPKM2           Simple Public
        Key GSS-API     [RFC2025]\n           SRP             Secure Remote Password
        \       [RFC2945]\n           CHAP            Challenge Handshake Protocol
        \ [RFC1994]\n           none            No iSCSI Authentication\n"
      title: 6.4.8.  iSCSI AuthMethod
    title: 6.4.  iSCSI Node-Keyed Attributes
  - contents:
    - "6.5.  Portal Group (PG) Object-Keyed Attributes\n   The following attributes
      are used to associate Portal and iSCSI\n   Storage Node objects.  PG objects
      are stored in the iSNS database\n   using the PG iSCSI Name, the PG Portal IP
      Address, and the PG Portal\n   TCP/UDP Port as keys.  New PG objects are implicitly
      or explicitly\n   created at the time that the corresponding Portal and/or iSCSI\n
      \  Storage Node objects are registered.  Section 3.4 has a general\n   discussion
      of PG usage.  For further details on use of Portal Groups,\n   see [iSCSI].\n"
    - contents:
      - "6.5.1.  Portal Group iSCSI Name\n   This is the iSCSI Name for the iSCSI
        Storage Node that is associated\n   with the PG object.  This name MAY represent
        an iSCSI Storage Node\n   not currently registered in the server.\n"
      title: 6.5.1.  Portal Group iSCSI Name
    - contents:
      - "6.5.2.  PG Portal IP Addr\n   This is the Portal IP Address attribute for
        the Portal that is\n   associated with the PG object.  This Portal IP Address
        MAY be that of\n   a Portal that is not currently registered in the server.\n"
      title: 6.5.2.  PG Portal IP Addr
    - contents:
      - "6.5.3.  PG Portal TCP/UDP Port\n   This is the Portal TCP/UDP Port attribute
        for the Portal that is\n   associated with the PG object.  This Portal TCP/UDP
        Port MAY be that\n   of a Portal that is not currently registered in the server.\n"
      title: 6.5.3.  PG Portal TCP/UDP Port
    - contents:
      - "6.5.4.  Portal Group Tag (PGT)\n   This field is used to group Portals in
        order to coordinate\n   connections in a session across Portals to a specified
        iSCSI Node.\n   The PGT is a value in the range of 0-65535, or NULL.  A NULL
        PGT\n   value is registered by using 0 for the length in the TLV during\n
        \  registration.  The two least significant bytes of the value contain\n   the
        PGT for the object.  The two most significant bytes are reserved.\n   If a
        PGT value is not explicitly registered for an iSCSI Storage Node\n   and Portal
        pair, then the PGT value SHALL be implicitly registered as\n   0x00000001.\n"
      title: 6.5.4.  Portal Group Tag (PGT)
    - contents:
      - "6.5.5.  Portal Group Index\n   The PG Index is a 4-byte non-zero integer
        value used as a key that\n   uniquely identifies each PG object registered
        in the iSNS database.\n   Upon initial registration of a PG object, the iSNS
        server MUST assign\n   an unused value for the PG Index.  Furthermore, PG
        Index values for\n   recently deregistered PG objects SHOULD NOT be reused
        in the short\n   term.\n   The PG Index MAY be used as the key to reference
        a registered PG in\n   situations where a unique index for each PG object
        is required.  It\n   MAY also be used as the message key in an iSNS message
        to query or\n   update a pre-existing PG object.  An example of this is when
        SNMP is\n   used for management, as described in Section 2.10.  The value\n
        \  assigned for the PG Index SHALL persist as long as the server is\n   active.\n"
      title: 6.5.5.  Portal Group Index
    - contents:
      - "6.5.6.  Portal Group Next Index\n   The PG Next Index is a virtual attribute
        containing a 4-byte integer\n   value that indicates the next available (i.e.,
        unused) PG Index\n   value.  This attribute may only be queried; the iSNS
        server SHALL\n   return an error code of 3 (Invalid Registration) to any client
        that\n   attempts to register a value for this attribute.  A Message Key is\n
        \  not required when exclusively querying for this attribute.\n   The Portal
        Group Next Index MAY be used by an SNMP client to create\n   an entry in the
        iSNS server.  SNMP requirements are described in\n   Section 2.10.\n"
      title: 6.5.6.  Portal Group Next Index
    title: 6.5.  Portal Group (PG) Object-Keyed Attributes
  - contents:
    - "6.6.  FC Port Name-Keyed Attributes\n   The following attributes are registered
      in the iSNS database using\n   the FC Port World Wide Name (WWPN) attribute
      as the key.  Each set of\n   FC Port-Keyed attributes is associated with one
      Entity Identifier\n   object key.\n   Although the FC Port World Wide Name is
      associated with one Entity\n   Identifier, it is also globally unique.\n"
    - contents:
      - "6.6.1.  FC Port Name (WWPN)\n   This 64-bit identifier uniquely defines the
        FC Port, and it is the\n   World Wide Port Name (WWPN) of the corresponding
        Fibre Channel\n   device.  This attribute is the key for the iFCP Storage
        Node.  This\n   globally unique identifier is used during the device registration\n
        \  process, and it uses a value conforming to IEEE EUI-64 [EUI-64].\n"
      title: 6.6.1.  FC Port Name (WWPN)
    - contents:
      - "6.6.2.  Port ID (FC_ID)\n   The Port Identifier is a Fibre Channel address
        identifier assigned to\n   an N_Port or NL_Port during fabric login.  The
        format of the Port\n   Identifier is defined in [FC-FS].  The least significant
        3 bytes\n   contain this address identifier.  The most significant byte is\n
        \  RESERVED.\n"
      title: 6.6.2.  Port ID (FC_ID)
    - contents:
      - "6.6.3.  FC Port Type\n   Indicates the type of FC port.  Encoded values for
        this field are\n   listed in the following table:\n          Type              Description\n
        \         ----              -----------\n           0x0000           Unidentified/Null
        Entry\n           0x0001           Fibre Channel N_Port\n           0x0002
        \          Fibre Channel NL_Port\n           0x0003           Fibre Channel
        F/NL_Port\n           0x0004-0080      RESERVED\n           0x0081           Fibre
        Channel F_Port\n           0x0082           Fibre Channel FL_Port\n           0x0083
        \          RESERVED\n           0x0084           Fibre Channel E_Port\n           0x0085-00FF
        \     RESERVED\n           0xFF11           RESERVED\n           0xFF12           iFCP
        Port\n           0xFF13-FFFF      RESERVED\n"
      title: 6.6.3.  FC Port Type
    - contents:
      - "6.6.4.  Symbolic Port Name\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 256 bytes that is associated with the
        iSNS-\n   registered FC Port Name in the network.\n"
      title: 6.6.4.  Symbolic Port Name
    - contents:
      - "6.6.5.  Fabric Port Name (FWWN)\n   This 64-bit identifier uniquely defines
        the fabric port.  If the port\n   of the FC Device is attached to a Fibre
        Channel fabric port with a\n   registered Port Name, then that fabric Port
        Name SHALL be indicated\n   in this field.\n"
      title: 6.6.5.  Fabric Port Name (FWWN)
    - contents:
      - "6.6.6.  Hard Address\n   This field is the requested hard address 24-bit
        NL Port Identifier,\n   included in the iSNSP for compatibility with Fibre
        Channel Arbitrated\n   Loop devices and topologies.  The least significant
        3 bytes of this\n   field contain the address.  The most significant byte
        is RESERVED.\n"
      title: 6.6.6.  Hard Address
    - contents:
      - "6.6.7.  Port IP Address\n   The Fibre Channel IP address associated with
        the FC Port.  When this\n   field contains an IPv4 value, it is stored as
        an IPv4-mapped IPv6\n   address.  That is, the most significant 10 bytes are
        set to 0x00,\n   with the next two bytes set to 0xFFFF [RFC2373].  When an
        IPv6 value\n   is contained in this field, then the entire 16-byte field is
        used.\n"
      title: 6.6.7.  Port IP Address
    - contents:
      - "6.6.8.  Class of Service (COS)\n   This 32-bit bit-map field indicates the
        Fibre Channel Class of\n   Service types that are supported by the registered
        port.  In the\n   following table, a set bit (1) indicates a Class of Service\n
        \  supported.\n          Bit Position       Description\n          ------------
        \      -----------\n           29                Fibre Channel Class 2 Supported\n
        \          28                Fibre Channel Class 3 Supported\n"
      title: 6.6.8.  Class of Service (COS)
    - contents:
      - "6.6.9.  FC-4 Types\n   This 32-byte field indicates the FC-4 protocol types
        supported by the\n   associated port.  This field can be used to support Fibre
        Channel\n   devices and is consistent with FC-GS-4.\n"
      title: 6.6.9.  FC-4 Types
    - contents:
      - "6.6.10.  FC-4 Descriptor\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 256 bytes that is associated with the
        iSNS-\n   registered device port in the network.  This field can be used to\n
        \  support Fibre Channel devices and is consistent with FC-GS-4.\n"
      title: 6.6.10.  FC-4 Descriptor
    - contents:
      - "6.6.11.  FC-4 Features\n   This is a 128-byte array, 4 bits per type, for
        the FC-4 protocol\n   types supported by the associated port.  This field
        can be used to\n   support Fibre Channel devices and is consistent with FC-GS-4.\n"
      title: 6.6.11.  FC-4 Features
    - contents:
      - "6.6.12.  iFCP SCN Bitmap\n   This field indicates the events the iSNS client
        is interested in.\n   These events can cause SCNs to be generated.  SCNs provide\n
        \  information about objects that are updated in, added to or removed\n   from
        Discovery Domains of which the source and destination are a\n   member.  Management
        SCNs provide information about all changes to the\n   network.  A set bit
        (1) indicates the type of SCN for the bitmap as\n   follows:\n          Bit
        Position       Flag Description\n          ------------       ----------------\n
        \          24                INITIATOR AND SELF INFORMATION ONLY\n           25
        \               TARGET AND SELF INFORMATION ONLY\n           26                MANAGEMENT
        REGISTRATION/SCN\n           27                OBJECT REMOVED\n           28
        \               OBJECT ADDED\n           29                OBJECT UPDATED\n
        \          30                DD/DDS MEMBER REMOVED (Mgmt Reg/SCN only)\n           31
        (Lsb)          DD/DDS MEMBER ADDED (Mgmt Reg/SCN only)\n           All others
        \       RESERVED\n   Further information on the use of the bit positions specified
        above\n   can be found in Section 6.4.4.\n"
      title: 6.6.12.  iFCP SCN Bitmap
    - contents:
      - "6.6.13.  Port Role\n   This required 32-bit field is a bitmap indicating
        the type of iFCP\n   Storage Node.  The bit fields are defined below.  A set
        bit indicates\n   the Node has the corresponding characteristics.\n          Bit
        Position       Node Type\n          ------------       ---------\n           29
        \               Control\n           30                FCP Initiator\n           31
        (Lsb)          FCP Target\n           All Others        RESERVED\n   If the
        'Target' bit is set to 1, then the port represents an FC\n   target.  Setting
        of the 'Target' bit MAY be performed by iSNS clients\n   using the iSNSP.\n
        \  If the 'Initiator' bit is set to 1, then the port represents an FC\n   initiator.
        \ Setting of the 'Initiator' bit MAY be performed by iSNS\n   clients using
        the iSNSP.\n   If the 'Control' bit is set to 1, then the port represents
        a gateway,\n   a management station, an iSNS backup server, or another device.\n
        \  This is usually a special device that is neither an initiator nor a\n   target,
        which requires the ability to send and receive iSNSP\n   messages, including
        state-change notifications.  Setting the control\n   bit is an administrative
        task that MUST be administratively\n   configured on the iSNS server; iSNS
        clients SHALL NOT be allowed to\n   change this bit using the iSNSP.\n   This
        field MAY be used by the iSNS server to distinguish among\n   permissions
        by different iSNS clients.  For example, an iSNS server\n   implementation
        may be administratively configured to allow only\n   targets to receive ESIs,
        or to permit only Control Nodes to add,\n   modify, or delete discovery domains.\n"
      title: 6.6.13.  Port Role
    - contents:
      - "6.6.14.  Permanent Port Name (PPN)\n   The Permanent Port Name can be used
        to support Fibre Channel devices\n   and is consistent with the PPN description
        in FC-GS-4 [FC-GS-4].  The\n   format of the PPN is identical to the FC Port
        Name WWPN attribute\n   format.\n"
      title: 6.6.14.  Permanent Port Name (PPN)
    title: 6.6.  FC Port Name-Keyed Attributes
  - contents:
    - "6.7.  Node-Keyed Attributes\n   The following attributes are registered in
      the iSNS database using\n   the FC Node Name (WWNN) attribute as the key.  Each
      set of FC Node-\n   Keyed attributes represents a single device and can be associated\n
      \  with many FC Ports.\n   The FC Node Name is unique across the entire iSNS
      database.\n"
    - contents:
      - "6.7.1.  FC Node Name (WWNN)\n   The FC Node Name is a 64-bit identifier that
        is the World Wide Node\n   Name (WWNN) of the corresponding Fibre Channel
        device.  This\n   attribute is the key for the FC Device.  This globally unique\n
        \  identifier is used during the device registration process, and it\n   uses
        a value conforming to IEEE EUI-64 [EUI-64].\n"
      title: 6.7.1.  FC Node Name (WWNN)
    - contents:
      - "6.7.2.  Symbolic Node Name\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   description of up to 256 bytes that is associated with the
        iSNS-\n   registered FC Device in the network.\n"
      title: 6.7.2.  Symbolic Node Name
    - contents:
      - "6.7.3.  Node IP Address\n   This IP address is associated with the device
        Node in the network.\n   This field is included for compatibility with Fibre
        Channel.  When\n   this field contains an IPv4 value, it is stored as an IPv4-mapped\n
        \  IPv6 address.  That is, the most significant 10 bytes are set to\n   0x00,
        with the next two bytes set to 0xFFFF [RFC2373].  When an IPv6\n   value is
        contained in this field, the entire 16-byte field is used.\n"
      title: 6.7.3.  Node IP Address
    - contents:
      - "6.7.4.  Node IPA\n   This field is the 8-byte Fibre Channel Initial Process
        Associator\n   (IPA) associated with the device Node in the network.  The
        initial\n   process associator is used for communication between Fibre Channel\n
        \  devices.\n"
      title: 6.7.4.  Node IPA
    - contents:
      - "6.7.5.  Proxy iSCSI Name\n   This is a variable-length UTF-8 encoded NULL-terminated
        text-based\n   field that contains the iSCSI Name used to represent the FC
        Node in\n   the IP network.  It is used as a pointer to the matching iSCSI
        Name\n   entry in the iSNS server.  Its value is usually registered by an
        FC-\n   iSCSI gateway connecting the IP network to the fabric containing the\n
        \  FC device.\n   Note that if this field is used, there SHOULD be a matching
        entry in\n   the iSNS database for the iSCSI device specified by the iSCSI
        name.\n   The database entry should include the full range of iSCSI attributes\n
        \  needed for discovery and management of the \"iSCSI proxy image\" of the\n
        \  FC device.\n"
      title: 6.7.5.  Proxy iSCSI Name
    title: 6.7.  Node-Keyed Attributes
  - contents:
    - "6.8.  Other Attributes\n   The following are not attributes of the previously-defined
      objects.\n"
    - contents:
      - "6.8.1.  FC-4 Type Code\n   This is a 4-byte field used to provide a FC-4
        type during a FC-4 Type\n   query.  The FC-4 types are consistent with the
        FC-4 Types as defined\n   in FC-FS.  Byte 0 contains the FC-4 type.  All other
        bytes are\n   reserved.\n"
      title: 6.8.1.  FC-4 Type Code
    - contents:
      - "6.8.2.  iFCP Switch Name\n   The iFCP Switch Name is a 64-bit World Wide
        Name (WWN) identifier\n   that uniquely identifies a distinct iFCP gateway
        in the network.\n   This globally unique identifier is used during the switch\n
        \  registration/FC_DOMAIN_ID assignment process.  The iFCP Switch Name\n   value
        used MUST conform to the requirements stated in [FC-FS] for\n   World Wide
        Names.  The iSNS server SHALL track the state of all\n   FC_DOMAIN_ID values
        that have been allocated to each iFCP Switch\n   Name.  If a given iFCP Switch
        Name is deregistered from the iSNS\n   database, then all FC_DOMAIN_ID values
        allocated to that iFCP Switch\n   Name SHALL be returned to the unused pool
        of values.\n"
      title: 6.8.2.  iFCP Switch Name
    - contents:
      - '6.8.3.  iFCP Transparent Mode Commands

        '
      - contents:
        - "6.8.3.1.  Preferred ID\n   This is a 4-byte unsigned integer field, and
          it is the requested\n   value that the iSNS client wishes to use for the
          FC_DOMAIN_ID.  The\n   iSNS server SHALL grant the iSNS client the use of
          the requested\n   value as the FC_DOMAIN_ID, if the requested value has
          not already\n   been allocated.  If the requested value is not available,
          the iSNS\n   server SHALL return a different value that has not been allocated.\n"
        title: 6.8.3.1.  Preferred ID
      - contents:
        - "6.8.3.2.  Assigned ID\n   This is a 4-byte unsigned integer field that
          is used by an iFCP\n   gateway to reserve its own unique FC_DOMAIN_ID value
          from the range 1\n   to 239.  When a FC_DOMAIN_ID is no longer required,
          it SHALL be\n   released by the iFCP gateway using the RlseDomId message.
          \ The iSNS\n   server MUST use the Entity Status Inquiry message to determine\n
          \  whether an iFCP gateway is still present on the network.\n"
        title: 6.8.3.2.  Assigned ID
      - contents:
        - "6.8.3.3.  Virtual_Fabric_ID\n   This is a variable-length UTF-8 encoded
          NULL-terminated text-based\n   field of up to 256 bytes.  The Virtual_Fabric_ID
          string is used as a\n   key attribute to identify a range of non-overlapping
          FC_DOMAIN_ID\n   values to be allocated using RqstDomId.  Each Virtual_Fabric_ID\n
          \  string submitted by an iSNS client SHALL have its own range of non-\n
          \  overlapping FC_DOMAIN_ID values to be allocated to iSNS clients.\n"
        title: 6.8.3.3.  Virtual_Fabric_ID
      title: 6.8.3.  iFCP Transparent Mode Commands
    title: 6.8.  Other Attributes
  - contents:
    - "6.9.  iSNS Server-Specific Attributes\n   Access to the following attributes
      may be administratively\n   controlled.  These attributes are specific to the
      iSNS server\n   instance; the same value is returned for all iSNS clients accessing\n
      \  the iSNS server.  Only query messages may be performed on these\n   attributes.
      \ Attempted registrations of values for these attributes\n   SHALL return a
      status code of 3 (Invalid Registration).\n   A query for an iSNS Server-Specific
      attribute MUST contain the\n   identifying key attribute (i.e., iSCSI Name or
      FC Port Name WWPN) of\n   the Node originating the registration or query message
      as the Source\n   and Message Key attributes.  The Operating Attributes are
      the\n   server-specific attributes being registered or queried.\n"
    - contents:
      - "6.9.1.  iSNS Server Vendor OUI\n   This attribute is the OUI (Organizationally
        Unique Identifier)\n   [802-1990] identifying the specific vendor implementing
        the iSNS\n   server. This attribute can only be queried; iSNS clients SHALL
        NOT be\n   allowed to register a value for the iSNS Server Vendor OUI.\n"
      title: 6.9.1.  iSNS Server Vendor OUI
    title: 6.9.  iSNS Server-Specific Attributes
  - contents:
    - "6.10.  Vendor-Specific Attributes\n   iSNS server implementations MAY define
      vendor-specific attributes for\n   private use.  These attributes MAY be used
      to store optional data\n   that is registered and/or queried by iSNS clients
      in order to gain\n   optional capabilities.  Note that any implementation of
      vendor-\n   specific attributes in the iSNS server SHALL NOT impose any form
      of\n   mandatory behavior on the part of the iSNS client.\n   The tag values
      used for vendor-specific and user-specific use are\n   defined in Section 6.1.
      \ To avoid misinterpreting proprietary\n   attributes, the vendor's own OUI
      (Organizationally Unique Identifier)\n   MUST be placed in the upper three bytes
      of the attribute value field\n   itself.\n   The OUI is defined in IEEE Std
      802-1990 and is the same constant used\n   to generate 48 bit Universal LAN
      MAC addresses.  A vendor's own iSNS\n   implementation will then be able to
      recognize the OUI in the\n   attribute field and be able to execute vendor-specific
      handling of\n   the attribute.\n"
    - contents:
      - "6.10.1.  Vendor-Specific Server Attributes\n   Attributes with tags in the
        range 257 to 384 are vendor-specific or\n   site-specific attributes of the
        iSNS server.  Values for these\n   attributes are administratively set by
        the specific vendor providing\n   the iSNS server implementation.  Query access
        to these attributes may\n   be administratively controlled.  These attributes
        are unique for each\n   logical iSNS server instance.  Query messages for
        these attributes\n   SHALL use the key identifier (i.e., iSCSI Name or FC
        Port Name WWPN)\n   for both the Source attribute and Message Key attribute.
        \ These\n   attributes can only be queried; iSNS clients SHALL NOT be allowed
        to\n   register a value for server attributes.\n"
      title: 6.10.1.  Vendor-Specific Server Attributes
    - contents:
      - "6.10.2.  Vendor-Specific Entity Attributes\n   Attributes in the range 385
        to 512 are vendor-specific or site-\n   specific attributes used to describe
        the Network Entity object.\n   These attributes are keyed by the Entity Identifier
        attribute\n   (tag=1).\n"
      title: 6.10.2.  Vendor-Specific Entity Attributes
    - contents:
      - "6.10.3.  Vendor-Specific Portal Attributes\n   Attributes in the range 513
        to 640 are vendor-specific or site-\n   specific attributes used to describe
        the Portal object.  These\n   attributes are keyed by the Portal IP-Address
        (tag=16) and Portal\n   TCP/UDP Port (tag=17).\n"
      title: 6.10.3.  Vendor-Specific Portal Attributes
    - contents:
      - "6.10.4.  Vendor-Specific iSCSI Node Attributes\n   Attributes in the range
        641 to 768 are vendor-specific or site-\n   specific attributes used to describe
        the iSCSI Node object.  These\n   attributes are keyed by the iSCSI Name (tag=32).\n"
      title: 6.10.4.  Vendor-Specific iSCSI Node Attributes
    - contents:
      - "6.10.5.  Vendor-Specific FC Port Name Attributes\n   Attributes in the range
        769 to 896 are vendor-specific or site-\n   specific attributes used to describe
        the N_Port Port Name object.\n   These attributes are keyed by the FC Port
        Name WWPN (tag=64).\n"
      title: 6.10.5.  Vendor-Specific FC Port Name Attributes
    - contents:
      - "6.10.6.  Vendor-Specific FC Node Name Attributes\n   Attributes in the range
        897 to 1024 are vendor-specific or site-\n   specific attributes used to describe
        the FC Node Name object.  These\n   attributes are keyed by the FC Node Name
        WWNN (tag=96).\n"
      title: 6.10.6.  Vendor-Specific FC Node Name Attributes
    - contents:
      - "6.10.7.  Vendor-Specific Discovery Domain Attributes\n   Attributes in the
        range 1025 to 1280 are vendor-specific or site-\n   specific attributes used
        to describe the Discovery Domain object.\n   These attributes are keyed by
        the DD_ID (tag=104).\n"
      title: 6.10.7.  Vendor-Specific Discovery Domain Attributes
    - contents:
      - "6.10.8.  Vendor-Specific Discovery Domain Set Attributes\n   Attributes in
        the range 1281 to 1536 are vendor-specific or site-\n   specific attributes
        used to describe the Discovery Domain Set object.\n   These attributes are
        keyed by the DD Set ID (tag=101)\n"
      title: 6.10.8.  Vendor-Specific Discovery Domain Set Attributes
    - contents:
      - "6.10.9.  Other Vendor-Specific Attributes\n   Attributes in the range 1537
        to 2048 can be used for key and non-key\n   attributes that describe new vendor-specific
        objects specific to the\n   vendor's iSNS server implementation.\n"
      title: 6.10.9.  Other Vendor-Specific Attributes
    title: 6.10.  Vendor-Specific Attributes
  - contents:
    - '6.11.  Discovery Domain Registration Attributes

      '
    - contents:
      - '6.11.1.  DD Set ID Keyed Attributes

        '
      - contents:
        - "6.11.1.1.  Discovery Domain Set ID (DDS ID)\n   The DDS ID is an unsigned
          non-zero integer identifier used in the\n   iSNS directory database as a
          key to indicate a Discovery Domain Set\n   uniquely.  A DDS is a collection
          of Discovery Domains that can be\n   enabled or disabled by a management
          station.  This value is used as a\n   key for DDS attribute queries.  When
          a Discovery Domain is\n   registered, it is initially not in any DDS.\n
          \  If the iSNS client does not provide a DDS_ID in a DDS registration\n
          \  request message, the iSNS server SHALL generate a DDS_ID value that\n
          \  is unique within the iSNS database for that new DDS.  The created DDS\n
          \  ID SHALL be returned in the response message.  The DDS ID value of 0\n
          \  is reserved, and the DDS ID value of 1 is used for the default DDS\n
          \  (see Section 2.2.2).\n"
        title: 6.11.1.1.  Discovery Domain Set ID (DDS ID)
      - contents:
        - "6.11.1.2.  Discovery Domain Set Symbolic Name\n   A variable-length UTF-8
          encoded NULL-terminated text-based field of\n   up to 256 bytes.  This is
          a user-readable field used to assist a\n   network administrator in tracking
          the DDS function.  When a client\n   registers a DDS symbolic name, the
          iSNS server SHALL verify it is\n   unique.  If the name is not unique, then
          the DDS registration SHALL\n   be rejected with an \"Invalid Registration\"
          Status Code.  The invalid\n   attribute(s), in this case the DDS symbolic
          name, SHALL be included\n   in the response.\n"
        title: 6.11.1.2.  Discovery Domain Set Symbolic Name
      - contents:
        - "6.11.1.3.  Discovery Domain Set Status\n   The DDS_Status field is a 32-bit
          bitmap indicating the status of the\n   DDS.  Bit 0 of the bitmap indicates
          whether the DDS is Enabled (1) or\n   Disabled (0).  The default value for
          the DDS Enabled flag is Disabled\n   (0).\n          Bit Position    DDS
          Status\n          ------------    ---------\n           31  (Lsb)      DDS
          Enabled (1) / DDS Disabled (0)\n           All others     RESERVED\n"
        title: 6.11.1.3.  Discovery Domain Set Status
      - contents:
        - "6.11.1.4.  Discovery Domain Set Next ID\n   This is a virtual attribute
          containing a 4-byte integer value that\n   indicates the next available
          (i.e., unused) Discovery Domain Set\n   Index value.  This attribute may
          only be queried; the iSNS server\n   SHALL return an error code of 3 (Invalid
          Registration) to any client\n   that attempts to register a value for this
          attribute.  A Message Key\n   is not required when exclusively querying
          for this attribute.\n   The Discovery Domain Set Next Index MAY be used
          by an SNMP client to\n   create an entry in the iSNS server.  SNMP requirements
          are described\n   in Section 2.10.\n"
        title: 6.11.1.4.  Discovery Domain Set Next ID
      title: 6.11.1.  DD Set ID Keyed Attributes
    - contents:
      - '6.11.2.  DD ID Keyed Attributes

        '
      - contents:
        - "6.11.2.1.  Discovery Domain ID (DD ID)\n   The DD ID is an unsigned non-zero
          integer identifier used in the iSNS\n   directory database as a key to identify
          a Discovery Domain uniquely.\n   This value is used as the key for any DD
          attribute query.  If the\n   iSNS client does not provide a DD_ID in a DD
          registration request\n   message, the iSNS server SHALL generate a DD_ID
          value that is unique\n   within the iSNS database for that new DD (i.e.,
          the iSNS client will\n   be registered in a new DD).  The created DD ID
          SHALL be returned in\n   the response message.  The DD ID value of 0 is
          reserved, and the DD\n   ID value of 1 is used for the default DD (see Section
          2.2.2).\n"
        title: 6.11.2.1.  Discovery Domain ID (DD ID)
      - contents:
        - "6.11.2.2.  Discovery Domain Symbolic Name\n   A variable-length UTF-8 encoded
          NULL-terminated text-based field of\n   up to 256 bytes.  When a client
          registers a DD symbolic name, the\n   iSNS server SHALL verify it is unique.
          \ If the name is not unique,\n   then the DD registration SHALL be rejected
          with an \"Invalid\n   Registration\" Status Code.  The invalid attribute(s),
          in this case\n   the DD symbolic name, SHALL be included in the response.\n"
        title: 6.11.2.2.  Discovery Domain Symbolic Name
      - contents:
        - "6.11.2.3.  Discovery Domain Member: iSCSI Node Index\n   This is the iSCSI
          Node Index of a Storage Node that is a member of\n   the DD.  The DD may
          have a list of 0 to n members.  The iSCSI Node\n   Index is one alternative
          representation of membership in a Discovery\n   Domain, the other alternative
          being the iSCSI Name.  The Discovery\n   Domain iSCSI Node Index is a 4-byte
          non-zero integer value.\n   The iSCSI Node Index can be used to represent
          a DD member in\n   situations where the iSCSI Name is too long to be used.
          \ An example\n   of this is when SNMP is used for management, as described
          in Section\n   2.10.\n   The iSCSI Node Index and the iSCSI Name stored
          as a member in a DD\n   SHALL be consistent with the iSCSI Node Index and
          iSCSI Name\n   attributes registered for the Storage Node object in the
          iSNS server.\n"
        title: '6.11.2.3.  Discovery Domain Member: iSCSI Node Index'
      - contents:
        - "6.11.2.4.  Discovery Domain Member: iSCSI Name\n   A variable-length UTF-8
          encoded NULL-terminated text-based field of\n   up to 224 bytes.  It indicates
          membership for the specified iSCSI\n   Storage Node in the Discovery Domain.
          \ Note that the referenced\n   Storage Node does not need to be actively
          registered in the iSNS\n   database before the iSNS client uses this attribute.
          \ There is no\n   limit to the number of members that may be in a DD.  Membership
          is\n   represented by the iSCSI Name of the iSCSI Storage Node.\n"
        title: '6.11.2.4.  Discovery Domain Member: iSCSI Name'
      - contents:
        - "6.11.2.5.  Discovery Domain Member: FC Port Name\n   This 64-bit identifier
          attribute indicates membership for an iFCP\n   Storage Node (FC Port) in
          the Discovery Domain.  Note that the\n   referenced Storage Node does not
          need to be actively registered in\n   the iSNS database before the iSNS
          client uses this attribute.  There\n   is no limit to the number of members
          that may be in a DD.  Membership\n   is represented by the FC Port Name
          (WWPN) of the iFCP Storage Node.\n"
        title: '6.11.2.5.  Discovery Domain Member: FC Port Name'
      - contents:
        - "6.11.2.6.  Discovery Domain Member: Portal Index\n   This attribute indicates
          membership in the Discovery Domain for a\n   Portal.  It is an alternative
          representation for Portal membership to\n   the Portal IP Address and Portal
          TCP/UDP Port.  The referenced Portal\n   MUST be actively registered in
          the iSNS database before the iSNS\n   client uses this attribute.\n"
        title: '6.11.2.6.  Discovery Domain Member: Portal Index'
      - contents:
        - "6.11.2.7.  Discovery Domain Member: Portal IP Address\n   This attribute
          and the Portal TCP/UDP Port attribute indicate\n   membership in the Discovery
          Domain for the specified Portal.  Note\n   that the referenced Portal does
          not need to be actively registered in\n   the iSNS database before the iSNS
          client uses this attribute.\n"
        title: '6.11.2.7.  Discovery Domain Member: Portal IP Address'
      - contents:
        - "6.11.2.8.  Discovery Domain Member: Portal TCP/UDP Port\n   This attribute
          and the Portal IP Address attribute indicate\n   membership in the Discovery
          Domain for the specified Portal.  Note\n   that the referenced Portal does
          not need to be actively registered in\n   the iSNS database before the iSNS
          client uses this attribute.\n"
        title: '6.11.2.8.  Discovery Domain Member: Portal TCP/UDP Port'
      - contents:
        - "6.11.2.9.  Discovery Domain Features\n   The Discovery Domain Features
          is a bitmap indicating the features of\n   this DD.  The bit positions are
          defined below.  A bit set to 1\n   indicates the DD has the corresponding
          characteristics.\n          Bit Position     DD Feature\n          ------------
          \    ----------\n           31 (Lsb)        Boot List Enabled (1)/Boot List
          Disabled (0)\n           All others      RESERVED\n   Boot List: this feature
          indicates that the target(s) in this DD\n   provides boot capabilities for
          the member initiators, as described in\n   [iSCSI-boot].\n"
        title: 6.11.2.9.  Discovery Domain Features
      - contents:
        - "6.11.2.10.  Discovery Domain Next ID\n   This is a virtual attribute containing
          a 4-byte integer value that\n   indicates the next available (i.e., unused)
          Discovery Domain Index\n   value.  This attribute may only be queried; the
          iSNS server SHALL\n   return an error code of 3 (Invalid Registration) to
          any client that\n   attempts to register a value for this attribute.  A
          Message Key is\n   not required when exclusively querying for this attribute.\n"
        title: 6.11.2.10.  Discovery Domain Next ID
      title: 6.11.2.  DD ID Keyed Attributes
    title: 6.11.  Discovery Domain Registration Attributes
  title: 6.  iSNS Attributes
- contents:
  - '7.  Security Considerations

    '
  - contents:
    - "7.1.  iSNS Security Threat Analysis\n   When the iSNS protocol is deployed,
      the interaction between iSNS\n   server and iSNS clients is subject to the following
      security threats:\n   a)  An attacker could alter iSNS protocol messages, such
      as to direct\n       iSCSI and iFCP devices to establish connections with rogue
      peer\n       devices, or to weaken/eliminate IPSec protection for iSCSI or\n
      \      iFCP traffic.\n   b)  An attacker could masquerade as the real iSNS server
      using false\n       iSNS heartbeat messages.  This could cause iSCSI and iFCP
      devices\n       to use rogue iSNS servers.\n   c)  An attacker could gain knowledge
      about iSCSI and iFCP devices by\n       snooping iSNS protocol messages.  Such
      information could aid an\n       attacker in mounting a direct attack on iSCSI
      and iFCP devices,\n       such as a denial-of-service attack or outright physical
      theft.\n   To address these threats, the following capabilities are needed:\n
      \  a)  Unicast iSNS protocol messages may need to be authenticated.  In\n       addition,
      to protect against threat c), confidentiality support\n       is desirable and
      is REQUIRED when certain functions of iSNS\n       server are utilized.\n   b)
      \ Multicast iSNS protocol messages such as the iSNS heartbeat\n       message
      may need to be authenticated.  These messages need not be\n       confidential
      since they do not leak critical information.\n"
    title: 7.1.  iSNS Security Threat Analysis
  - contents:
    - "7.2.  iSNS Security Implementation and Usage Requirements\n   If the iSNS server
      is used to distribute authorizations for\n   communications between iFCP and
      iSCSI peer devices, IPsec ESP with\n   null transform MUST be implemented, and
      non-null transform MAY be\n   implemented.  If a non-null transform is implemented,
      then the DES\n   encryption algorithm SHOULD NOT be used.\n   If the iSNS server
      is used to distribute security policy for iFCP and\n   iSCSI devices, then authentication,
      data integrity, and\n   confidentiality MUST be supported and used.  Where confidentiality
      is\n   desired or required, IPSec ESP with non-null transform SHOULD be\n   used,
      and the DES encryption algorithm SHOULD NOT be used.\n   If the iSNS server
      is used to provide the boot list for clients, as\n   described in Section 6.11.2.9,
      then the iSCSI boot client SHOULD\n   implement a secure iSNS connection.\n
      \  In order to protect against an attacker masquerading as an iSNS\n   server,
      client devices MUST support the ability to authenticate\n   broadcast or multicast
      messages such as the iSNS heartbeat.  The iSNS\n   authentication block (which
      is identical in format to the SLP\n   authentication block) SHALL be used for
      this purpose.  iSNS clients\n   MUST implement the iSNS authentication block
      and MUST support BSD\n   value 0x002.  If the iSNS server supports broadcast
      or multicast iSNS\n   messages (i.e., the heartbeat), then the server MUST implement
      the\n   iSNS authentication block and MUST support BSD value 0x002.  Note\n
      \  that the authentication block is used only for iSNS broadcast or\n   multicast
      messages and MUST NOT be used in unicast iSNS messages.\n   There is no requirement
      that the communicating identities in iSNS\n   protocol messages be kept confidential.
      \ Specifically, the identity\n   and location of the iSNS server is not considered
      confidential.\n   For protecting unicast iSNS protocol messages, iSNS servers\n
      \  supporting security MUST implement ESP in tunnel mode and MAY\n   implement
      transport mode.\n   All iSNS implementations supporting security MUST support
      the replay\n   protection mechanisms of IPsec.\n   iSNS security implementations
      MUST support both IKE Main Mode and\n   Aggressive Mode for authentication,
      negotiation of security\n   associations, and key management, using the IPSec
      DOI [RFC2407].\n   Manual keying SHOULD NOT be used since it does not provide
      the\n   necessary rekeying support.  Conforming iSNS security implementations\n
      \  MUST support authentication using a pre-shared key, and MAY support\n   certificate-based
      peer authentication using digital signatures.  Peer\n   authentication using
      the public key encryption methods outlined in\n   IKEs Sections 5.2 and 5.3
      [RFC2409] SHOULD NOT be supported.\n   Conforming iSNS implementations MUST
      support both IKE Main Mode and\n   Aggressive Mode.  IKE Main Mode with pre-shared
      key authentication\n   SHOULD NOT be used when either of the peers use dynamically
      assigned\n   IP addresses.  Although Main Mode with pre-shared key authentication\n
      \  offers good security in many cases, situations where dynamically\n   assigned
      addresses are used force the use of a group pre-shared key,\n   which is vulnerable
      to man-in-the-middle attack.  IKE Identity\n   Payload ID_KEY_ID MUST NOT be
      used.\n   When digital signatures are used for authentication, either IKE Main\n
      \  Mode or IKE Aggressive Mode MAY be used.  In all cases, access to\n   locally
      stored secret information (pre-shared key or private key for\n   digital signing)
      MUST be suitably restricted, since compromise of the\n   secret information
      nullifies the security properties of the IKE/IPsec\n   protocols.\n   When digital
      signatures are used to achieve authentication, an IKE\n   negotiator SHOULD
      use IKE Certificate Request Payload(s) to specify\n   the certificate authority
      (or authorities) that are trusted in\n   accordance with its local policy.  IKE
      negotiators SHOULD check the\n   pertinent Certificate Revocation List (CRL)
      before accepting a PKI\n   certificate for use in IKE's authentication procedures.\n
      \  When the iSNS server is used without security, IP block storage\n   protocol
      implementations MUST support a negative cache for\n   authentication failures.
      \ This allows implementations to avoid\n   continually contacting discovered
      endpoints that fail authentication\n   within IPsec or at the application layer
      (in the case of iSCSI\n   Login).  The negative cache need not be maintained
      within the IPsec\n   implementation, but rather within the IP block storage
      protocol\n   implementation.\n"
    title: 7.2.  iSNS Security Implementation and Usage Requirements
  - contents:
    - "7.3.  Discovering Security Requirements of Peer Devices\n   Once communication
      between iSNS clients and the iSNS server has been\n   secured through use of
      IPSec, the iSNS client devices have the\n   capability to discover the security
      settings that they need to use\n   for their peer-to-peer communications using
      the iSCSI and/or iFCP\n   protocols.  This provides a potential scaling advantage
      over device-\n   by-device configuration of individual security policies for
      each\n   iSCSI and iFCP device.\n   The iSNS server stores security settings
      for each iSCSI and iFCP\n   device interface.  These security settings, which
      can be retrieved by\n   authorized hosts, include use or non-use of IPSec, IKE,
      Main Mode,\n   and Aggressive Mode.  For example, IKE may not be enabled for
      a\n   particular interface of a peer device.  If a peer device can learn of\n
      \  this in advance by consulting the iSNS server, it will not need to\n   waste
      time and resources attempting to initiate an IKE phase 1\n   session with that
      peer device interface.\n   If iSNS is used for this purpose, then the minimum
      information that\n   should be learned from the iSNS server is the use or non-use
      of IKE\n   and IPSec by each iFCP or iSCSI peer device interface.  This\n   information
      is encoded in the Security Bitmap field of each Portal of\n   the peer device,
      and is applicable on a per-interface basis for the\n   peer device.  iSNS queries
      for acquiring security configuration data\n   about peer devices MUST be protected
      by IPSec/ESP authentication.\n"
    title: 7.3.  Discovering Security Requirements of Peer Devices
  - contents:
    - "7.4.  Configuring Security Policies of iFCP/iSCSI Devices\n   Use of iSNS for
      distribution of security policies offers the\n   potential to reduce the burden
      of manual device configuration, and to\n   decrease the probability of communications
      failures due to\n   incompatible security policies.  If iSNS is used to distribute\n
      \  security policies, then IPSec authentication, data integrity, and\n   confidentiality
      MUST be used to protect all iSNS protocol messages.\n   The complete IKE/IPSec
      configuration of each iFCP and/or iSCSI device\n   can be stored in the iSNS
      server, including policies that are used\n   for IKE Phase 1 and Phase 2 negotiations
      between client devices.  The\n   IKE payload format includes a series of one
      or more proposals that\n   the iSCSI or iFCP device will use when negotiating
      the appropriate\n   IPsec policy to use to protect iSCSI or iFCP traffic.\n
      \  In addition, the iSCSI Authentication Methods used by each iSCSI\n   device
      can also be stored in the iSNS server.  The iSCSI AuthMethod\n   field (tag=42)
      contains a null-terminated string embedded with the\n   text values indicating
      iSCSI authentication methods to be used by\n   that iSCSI device.\n   Note that
      iSNS distribution of security policy is not necessary if\n   the security settings
      can be determined by other means, such as\n   manual configuration or IPsec
      security policy distribution.  If a\n   network entity has already obtained
      its security configuration via\n   other mechanisms, then it MUST NOT request
      security policy via iSNS.\n"
    title: 7.4.  Configuring Security Policies of iFCP/iSCSI Devices
  - contents:
    - "7.5.  Resource Issues\n   The iSNS protocol is lightweight and will not generate
      a significant\n   amount of traffic.  iSNS traffic is characterized by occasional\n
      \  registration, notification, and update messages that do not consume\n   significant
      amounts of bandwidth.  Even software-based IPSec\n   implementations should
      not have a problem handling the traffic loads\n   generated by the iSNS protocol.\n
      \  To fulfill iSNS security requirements, the only additional resources\n   needed
      beyond what is already required for iSCSI and iFCP involve the\n   iSNS server.
      \ Because iSCSI and iFCP end nodes are already required\n   to implement IKE
      and IPSec, these existing requirements can also be\n   used to fulfill IKE and
      IPSec requirements for iSNS clients.\n"
    title: 7.5.  Resource Issues
  - contents:
    - "7.6.  iSNS Interaction with IKE and IPSec\n   When IPSec security is enabled,
      each iSNS client with at least one\n   Storage Node that is registered in the
      iSNS database SHALL maintain\n   at least one phase-1 security association with
      the iSNS server.  All\n   iSNS protocol messages between iSNS clients and the
      iSNS server SHALL\n   be protected by a phase-2 security association.\n   When
      a Network Entity is removed from the iSNS database, the iSNS\n   server SHALL
      send a phase-1 delete message to the associated iSNS\n   client IKE peer, and
      tear down all phase-1 and phase-2 SAs associated\n   with that iSNS client.\n"
    title: 7.6.  iSNS Interaction with IKE and IPSec
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   The well-known TCP and UDP port number for iSNS is
    3205.\n   The standards action of this RFC creates two registries to be\n   maintained
    by IANA in support of iSNSP and assigns initial values for\n   both registries.
    \ The first registry is of Block Storage Protocols\n   supported by iSNS.  The
    second registry is a detailed registry of\n   standard iSNS attributes that can
    be registered to and queried from\n   the iSNS server.  Note that this RFC uses
    the registry created for\n   Block Structure Descriptor (BSD) in Section 15 of
    Service Location\n   Protocol, Version 2 [RFC2608].\n"
  - contents:
    - "8.1.  Registry of Block Storage Protocols\n   In order to maintain a registry
      of block storage protocols supported\n   by iSNSP, IANA will assign a 32-bit
      unsigned integer number for each\n   block storage protocol supported by iSNS.
      \ This number is stored in\n   the iSNS database as the Entity Protocol.  The
      initial set of values\n   to be maintained by IANA for Entity Protocol is indicated
      in the\n   table in Section 6.2.2.  Additional values for new block storage\n
      \  protocols to be supported by iSNS SHALL be assigned by the IPS WG\n   Chairperson,
      or by a Designated Expert [RFC2434] appointed by the\n   IETF Transport Area
      Director.\n"
    title: 8.1.  Registry of Block Storage Protocols
  - contents:
    - "8.2.  Registry of Standard iSNS Attributes\n   IANA is responsible for creating
      and maintaining the Registry of\n   Standard iSNS Attributes.  The initial list
      of iSNS attributes is\n   described in Section 6.  For each iSNS attribute this
      information\n   MUST include, its tag value, the attribute length, and the tag
      values\n   for the set of permissible registration and query keys that can be\n
      \  used for that attribute.  The initial list of iSNS attributes to be\n   maintained
      by IANA is indicated in Section 6.1.\n   Additions of new standard attributes
      to the Registry of Standard iSNS\n   Attributes SHALL require IETF Consensus
      [RFC2434].  The RFC required\n   for this process SHALL specify use of tag values
      reserved for IANA\n   allocation in Section 6.1.  The RFC SHALL specify as a
      minimum, the\n   new attribute tag value, attribute length, and the set of permissible\n
      \  registration and query keys that can be used for the new attribute.\n   The
      RFC SHALL also include a discussion of the reasons for the new\n   attribute(s)
      and how the new attribute(s) are to be used.\n   As part of the process of obtaining
      IETF Consensus, the proposed RFC\n   and its supporting documentation SHALL
      be made available to the IPS\n   WG mailing list or, if the IPS WG is disbanded
      at the time, to a\n   mailing list designated by the IETF Transport Area Director.
      \ The\n   review and comment period SHALL last at least three months before
      the\n   IPS WG Chair or a person designated by the IETF Transport Area\n   Director
      decides either to reject the proposal or to forward the\n   draft to the IESG
      for publication as an RFC.  When the specification\n   is published as an RFC,
      then IANA will register the new iSNS\n   attribute(s) and make the registration
      available to the community.\n"
    title: 8.2.  Registry of Standard iSNS Attributes
  - contents:
    - "8.3.  Block Structure Descriptor (BSD) Registry\n   Note that IANA is already
      responsible for assigning and maintaining\n   values used for the Block Structure
      Descriptor for the iSNS\n   Authentication Block (see Section 5.5).  Section
      15 of [RFC2608]\n   describes the process for allocation of new BSD values.\n"
    title: 8.3.  Block Structure Descriptor (BSD) Registry
  title: 8.  IANA Considerations
- contents:
  - "9.  Normative References\n   [iSCSI]      Satran, J., Meth, K., Sapuntzakis,
    C., Chadalapaka, M.,\n                and E. Zeidner, \"Internet Small Computer
    Systems\n                Interface (iSCSI)\", RFC 3720, April 2004.\n   [iFCP]
    \      Monia, C., Mullendore, R., Travostino, F., Jeong, W.,\n                and
    M. Edwards, \"iFCP - A Protocol for Internet Fibre\n                Channel Storage
    Networking\", RFC 4172, September 2005.\n   [iSNSOption] Monia, C., Tseng, J.,
    and K. Gibbons, The IPv4 Dynamic\n                Host Configuration Protocol
    (DHCP) Option for the\n                Internet Storage Name Service, RFC 4174,
    September 2005.\n   [RFC2608]    Guttman, E., Perkins, C., Veizades, J., and M.
    Day,\n                \"Service Location Protocol, Version 2 \", RFC 2608, June\n
    \               1999.\n   [iSCSI-SLP]  Bakke, M., Hufferd, J., Voruganti, K.,
    Krueger, M., and\n                T. Sperry, \"Finding Internet Small Computer
    Systems\n                Interface (iSCSI) Targets and Name Servers by Using\n
    \               Service Location Protocol version 2 (SLP), RFC 4018,\n                April
    2005.\n   [iSCSI-boot] Sarkar, P., Missimer, D., and C. Sapuntzakis,\n                \"Bootstrapping
    Clients using the Internet Samll Computer\n                System Interface (iSCSI)
    Protocol\", RFC 4173, September\n                2005.\n   [RFC2119]    Bradner,
    S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\",
    BCP 14, RFC 2119, March 1997.\n   [STRINGPREP] Bakke, M., \"String Profile for
    Internet Small Computer\n                Systems Interface (iSCSI) Names\", RFC
    3722, April 2004.\n   [NAMEPREP]   Hoffman, P. Nameprep: A Stringprep Profile
    for\n                Internationalized Domain Names, July 2002.\n   [RFC2407]
    \   Piper, D., \"The Internet IP Security Domain of\n                Interpretation
    for ISAKMP\", RFC 2407, November 1998.\n   [RFC2408]    Maughan, D., Schertler,
    M., Schneider, M., and J.\n                Turner, \"Internet Security Association
    and Key\n                Management Protocol (ISAKMP)\", RFC 2408, November 1998.\n
    \  [RFC2409]    Harkins, D. and D. Carrel, \"The Internet Key Exchange\n                (IKE)\",
    RFC 2409, November 1998.\n   [EUI-64]     Guidelines for 64-bit Global Identifier
    (EUI-64)\n                Registration Authority, May 2001, IEEE\n   [RFC3279]
    \   Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n                Identifiers
    for the Internet X.509 Public Key\n                Infrastructure Certificate
    and Certificate Revocation\n                List (CRL) Profile\", RFC 3279, April
    2002.\n   [RFC3280]    Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet\n
    \               X.509 Public Key Infrastructure Certificate and\n                Certificate
    Revocation List (CRL) Profile\", RFC 3280,\n                April 2002.\n   [802-1990]
    \  IEEE Standards for Local and Metropolitan Area Networks:\n                Overview
    and Architecture, Technical Committee on\n                Computer Communications
    of the IEEE Computer Society,\n                May 31, 1990\n   [FC-FS]      Fibre
    Channel Framing and Signaling Interface, NCITS\n                Working Draft
    Project 1331-D\n"
  title: 9.  Normative References
- contents:
  - "10.  Informative References\n   [iSNSMIB]    Gibbons, K., et al., \"Definitions
    of Managed Objects for\n                iSNS (Internet Storage name Service)\",
    Work in Progress,\n                July 2003.\n   [X.509]      ITU-T Recommendation
    X.509 (1997 E): Information\n                Technology - Open Systems Interconnection
    - The\n                Directory: Authentication Framework, June 1997\n   [FC-GS-4]
    \   Fibre Channel Generic Services-4 (work in progress),\n                NCITS
    Working Draft Project 1505-D\n   [RFC1510]    Kohl, J. and C. Neuman, \"The Kerberos
    Network\n                Authentication Service (V5)\", RFC 1510, September 1993.\n
    \  [RFC2025]    Adams, C., \"The Simple Public-Key GSS-API Mechanism\n                (SPKM)\",
    RFC 2025, October 1996.\n   [RFC2434]    Narten, T. and H. Alvestrand, \"Guidelines
    for Writing an\n                IANA Considerations Section in RFCs\", BCP 26,
    RFC 2434,\n                October 1998.\n   [RFC2945]    Wu, T., \"The SRP Authentication
    and Key Exchange\n                System\", RFC 2945, September 2000.\n   [RFC1994]
    \   Simpson, W., \"PPP Challenge Handshake Authentication\n                Protocol
    (CHAP)\", RFC 1994, August 1996.\n   [RFC2131]    Droms, R., \"Dynamic Host Configuration
    Protocol\", RFC\n                2131, March 1997.\n   [RFC3410]    Case, J.,
    Mundy, R., Partain, D., and B. Stewart,\n                \"Introduction and Applicability
    Statements for\n                Internet-Standard Management Framework\", RFC
    3410,\n                December 2002.\n   [RFC3411]    Harrington, D., Presuhn,
    R., and B. Wijnen, \"An\n                Architecture for Describing Simple Network
    Management\n                Protocol (SNMP) Management Frameworks\", STD 62, RFC\n
    \               3411, December 2002.\n"
  title: 10.  Informative References
- contents:
  - 'Appendix A: iSNS Examples

    '
  - contents:
    - "A.1.  iSCSI Initialization Example\n   This example assumes an SLP Service
      Agent (SA) has been implemented\n   on the iSNS host, and an SLP User Agent
      (UA) has been implemented on\n   the iSNS initiator.  See [RFC2608] for further
      details on SAs and\n   UAs.  This example also assumes that the target is configured
      to use\n   the iSNS server, and have its access control policy subordinated
      to\n   the iSNS server.\n"
    - contents:
      - "A.1.1.  Simple iSCSI Target Registration\n   In this example, a simple target
        with a single iSCSI name registers\n   with the iSNS server.  The target is
        represented in the iSNS by an\n   Entity containing one Storage Node, one
        Portal, and an implicitly\n   registered Portal Group that provides a relationship
        between the\n   Storage Node and Portal.  The target has not been assigned
        a Fully\n   Qualified Domain Name (FQDN) by the administrator.  In this example,\n
        \  because a PG object is not explicitly registered, a Portal Group with\n
        \  a PGT of 1 is implicitly registered.  In this example SLP is used to\n
        \  discover the location of the iSNS Server.  An alternative is to use\n   the
        iSNS DHCP option [iSNSOption] to discover the iSNS server.\n   +--------------------------+------------------+-------------------+\n
        \  |    iSCSI Target Device   |    iSNS Server   |Management Station |\n   +--------------------------+------------------+-------------------+\n
        \  |Discover iSNS--SLP------->|                  |/*mgmt station is  |\n   |
        \                         |<--SLP--iSNS Here:| administratively  |\n   |                          |
        \     192.0.2.100 | authorized to view|\n   |                          |                  |
        all DDs.  Device  |\n   |      DevAttrReg--------->|                  | NAMEabcd
        was      |\n   |Src:(tag=32) \"NAMEabcd\"   |                  | previously
        placed |\n   |Key: <none present>       |                  | into DDabcd along
        |\n   |Oper Attrs:               |                  | with devpdq and   |\n
        \  |tag=1: NULL               |                  | devrst.           |\n   |tag=2:
        \"iSCSI\"            |                  |                   |\n   |tag=16:
        192.0.2.5         |                  |                   |\n   |tag=17: 5001
        \             |                  |                   |\n   |tag=32: \"NAMEabcd\"
        \       |                  |                   |\n   |tag=33: target            |
        \                 |                   |\n   |tag=34: \"disk 1\"          |
        \                 |                   |\n   |                          |<---DevAttrRegRsp
        |                   |\n   |                          |SUCCESS           |
        \                  |\n   |                          |Key:(tag=1) \"isns:0001\"
        \              |\n   |                          |Oper Attrs:       |                   |\n
        \  |                          |tag=1: \"isns:0001\"|                   |\n
        \  |                          |tag=2: \"iSCSI\"    |                   |\n
        \  |                          |tag=16: 192.0.2.5 |                   |\n   |
        \                         |tag=17: 5001      |                   |\n   |                          |tag=32:
        \"NAMEabcd\"|/* previously      |\n   |                          |tag=33:
        target    | placed in a DD */ |\n   |                          |tag=34: \"disk
        1\"  |                   |\n   |                          |                  |
        \                  |\n   |                          |      SCN-------->|                   |\n
        \  |                          |(or SNMP notification)                |\n   |
        \                         |dest:(tag=32):\"MGMTname1\"             |\n   |
        \                         |time:(tag=4): <current time>          |\n   |                          |tag=35:
        \"MGT-SCN, OBJ-ADD\"            |\n   |                          |tag=32:
        \"NAMEabcd\"|                   |\n   |                          |                  |<-------SCNRsp
        \    |\n   |      DevAttrQry--------->|                  |                   |\n
        \  |Src:(tag=32) \"NAMEabcd\"   |                  |                   |\n
        \  |Key:(tag=33) \"initiator\"  |                  |                   |\n
        \  |Oper Attrs:               |                  |                   |\n   |tag=16:
        \ NULL             |                  |                   |\n   |tag=17:  NULL
        \            |                  |                   |\n   |tag=32:  NULL             |
        \                 |                   |\n   |/*Query asks for all initr|                  |
        \                  |\n   |devices' IP address, port |<---DevAttrQryRsp |                   |\n
        \  |number, and Name*/        |SUCCESS           |                   |\n   |
        \                         |tag=16:192.0.2.1  |                   |\n   |                          |tag=17:50000
        \     |                   |\n   |                          |tag=32:\"devpdq\"
        \  |                   |\n   |                          |tag=16:192.0.2.2
        \ |                   |\n   |                          |tag=17:50000      |
        \                  |\n   |                          |tag=32:\"devrst\"   |
        \                  |\n   |/*************************|                  |<-----DevAttrQry
        \  |\n   |Our target \"NAMEabcd\"     |                  |src: \"MGMTname1\"
        \  |\n   |discovers two initiators  |                  key:(tag=32)\"NAMEabcd\"\n
        \  |in shared DDs.  It will   |                  |Op Attrs:          |\n   |accept
        iSCSI logins from  |                  |tag=16:  NULL      |\n   |these two
        identified      |                  |tag=17:  NULL      |\n   |initiators presented
        by   |                  |tag=32:  NULL      |\n   |iSNS                      |
        \                 |                   |\n   |*************************/| DevAttrQryRsp--->|
        \                  |\n   |                          |SUCCESS           |                   |\n
        \  |                          |tag=16: 192.0.2.5 |                   |\n   |
        \                         |tag=17: 5001      |                   |\n   |                          |tag=32:
        \"NAMEabcd\"|                   |\n   +--------------------------+------------------+-------------------+\n"
      title: A.1.1.  Simple iSCSI Target Registration
    - contents:
      - "A.1.2.  Target Registration and DD Configuration\n   In this example, a more
        complex target, with two Storage Nodes and\n   two Portals using ESI monitoring,
        registers with the iSNS.  This\n   target has been configured with a Fully
        Qualified Domain Name (FQDN)\n   in the DNS servers, and the user wishes to
        use this identifier for\n   the device.  The target explicitly registers Portal
        Groups to\n   describe how each Portal provides access to each Storage Node.
        \ One\n   target Storage Node allows coordinated access through both Portals.\n
        \  The other Storage Node allows access, but not coordinated access,\n   through
        both Portals.\n   +--------------------------+------------------+-------------------+\n
        \  |    iSCSI Target Device   |    iSNS Server   |Management Station |\n   +--------------------------+------------------+-------------------+\n
        \  |Discover iSNS--SLP-->     |                  |/*mgmt station is  |\n   |
        \                         |<--SLP--iSNS Here:| administratively  |\n   |                          |
        \     192.0.2.100 | authorized to view|\n   | DevAttrReg-->            |                  |
        all DDs */        |\n   |Src:                      |                  |                   |\n
        \  |tag=32: \"NAMEabcd\"        |                  |                   |\n
        \  |Msg Key:                  |                  |                   |\n   |tag=1:
        \"jbod1.example.com\"|                  |                   |\n   |Oper Attrs:
        \              |                  |                   |\n   |tag=1: \"jbod1.example.com\"|
        \                 |                   |\n   |tag=2: \"iSCSI\"            |
        \                 |                   |\n   |tag=16: 192.0.2.4         |                  |
        \                  |\n   |tag=17: 5001              |                  |                   |\n
        \  |tag=19: 5                 |                  |                   |\n   |tag=20:
        5002              |                  |                   |\n   |tag=16: 192.0.2.5
        \        |                  |                   |\n   |tag=17: 5001              |
        \                 |                   |\n   |tag=19: 5                 |                  |
        \                  |\n   |tag=20: 5002              |                  |                   |\n
        \  |tag=32: \"NAMEabcd\"        |                  |                   |\n
        \  |tag=33: \"Target\"          |                  |                   |\n
        \  |tag=34: \"Storage Array 1\" |                  |                   |\n
        \  |tag=51: 10                |                  |                   |\n   |tag=49:
        192.0.2.4         |                  |                   |\n   |tag=50: 5001
        \             |                  |                   |\n   |tag=49: 192.0.2.5
        \        |                  |                   |\n   |tag=50: 5001              |
        \                 |                   |\n   |tag=32: \"NAMEefgh\"        |
        \                 |                   |\n   |tag=33: \"Target\"          |
        \                 |                   |\n   |tag=34: \"Storage Array 2\" |/*****************|
        \                  |\n   |tag=51: 20                |jbod1.example.com is
        \                 |\n   |tag=49: 192.0.2.4         |now registered in |                   |\n
        \  |tag=50: 5001              |iSNS, but is not  |                   |\n   |tag=51:
        30                |in any DD. Therefore,                 |\n   |tag=49: 192.0.2.5
        \        |no other devices  |                   |\n   |tag=50: 5001              |can
        \"see\" it.     |                   |\n   |                          |*****************/|
        \                  |\n   |                          |<--DevAttrRegRsp  |                   |\n
        \  |                          |SUCCESS           |                   |\n   |
        \                         |Msg Key:          |                   |\n   |                          |tag=1:
        \"jbod1.example.com\"            |\n   |                          |Oper Attrs:
        \      |                   |\n   |                          |tag=1: \"jbod1.example.com\"
        \           |\n   |                          |tag=2: \"iSCSI\"    |                   |\n
        \  |                          |tag=16: 192.0.2.4 |                   |\n   |
        \                         |tag=17: 5001      |                   |\n   |                          |tag=19:
        5         |                   |\n   |                          |tag=20: 5002
        \     |                   |\n   |                          |tag=16: 192.0.2.5
        |                   |\n   |                          |tag=17: 5001      |
        \                  |\n   |                          |tag=19: 5         |                   |\n
        \  |                          |tag=20: 5002      |                   |\n   |
        \                         |tag=32: \"NAMEabcd\"|                   |\n   |
        \                         |tag=33: \"Target\"  |                   |\n   |
        \                         |tag=34: \"Storage Array 1\"             |\n   |
        \                         |tag=48: \"NAMEabcd\"|                   |\n   |
        \                         |tag=49: 192.0.2.4 |                   |\n   |                          |tag=50:
        5001      |                   |\n   |                          |tag=51: 10
        \       |                   |\n   |                          |tag=48: \"NAMEabcd\"|
        \                  |\n   |                          |tag=49: 192.0.2.5 |                   |\n
        \  |                          |tag=50: 5001      |                   |\n   |
        \                         |tag=51: 10        |                   |\n   |                          |tag=32:
        \"NAMEefgh\"|                   |\n   |                          |tag=33:
        \"Target\"  |                   |\n   |                          |tag=34:
        \"Storage Array 2\"             |\n   |                          |tag=43:
        X.509 cert|                   |\n   |                          |tag=48: \"NAMEefgh\"|
        \                  |\n   |                          |tag=49: 192.0.2.4 |                   |\n
        \  |                          |tag=50: 5001      |                   |\n   |
        \                         |tag=51: 20        |                   |\n   |                          |tag=48:
        \"NAMEefgh\"|                   |\n   |                          |tag=49:
        192.0.2.5 |                   |\n   |                          |tag=50: 5001
        \     |                   |\n   |                          |tag=51: 30        |
        \                  |\n   |                          |                  |                   |\n
        \  |                          | SCN------>       |                   |\n   |
        \                         | (or SNMP notification)               |\n   |                          |dest:(tag=32)\"mgmt.example.com\"
        \      |\n   |                          |time:(tag=4): <current time>          |\n
        \  |                          |tag=35: \"MGT-SCN, OBJ-ADD\"            |\n
        \  |                          |tag=32: \"NAMEabcd\"|                   |\n
        \  |                          |tag=35: \"MGT-SCN, OBJ-ADD\"            |\n
        \  |                          |tag=32: \"NAMEefgh\"|                   |\n
        \  |                          |                  |<--SCNRsp          |\n   |
        \                         |                  |SUCCESS            |\n   |                          |
        \            tag=32:\"mgmt.example.com\"|\n   |                          |
        \                 |                   |\n   |                          |                  |<--DevAttrQry
        \     |\n   |                          |                  |Src:               |\n
        \  |                          |               tag=32:\"mgmt.example.com\"\n
        \  |                          |                  |Msg Key:           |\n   |
        \                         |                  |tag=32: \"NAMEabcd\" |\n   |
        \                         |                  |Oper Attrs:        |\n   |                          |
        \                 |tag=16: <0-length> |\n   |                          |                  |tag=17:
        <0-length> |\n   |                          |                  |tag=32: <0-length>
        |\n   |                          |                  |                   |\n
        \  |                          | DevAttrQryRsp--> |                   |\n   |
        \                         |SUCCESS           |                   |\n   |                          |Msg
        Key:          |                   |\n   |                          |tag=32:
        \"NAMEabcd\"|                   |\n   |                          |Oper Attrs:
        \      |                   |\n   |                          |tag=16: 192.0.2.4
        |                   |\n   |                          |tag=17: 5001      |
        \                  |\n   |                          |tag=32:\"NAMEabcd\" |
        \                  |\n   |                          |tag=16: 192.0.2.5 |                   |\n
        \  |                          |tag=17: 5001      |                   |\n   |
        \                         |tag=32:\"NAMEabcd\" |                   |\n   |
        \                         |                  |Src:               |\n   |                          |
        \              tag=32:\"mgmt.example.com\"\n   |                          |
        \                 |Msg Key:           |\n   |                          |                  |tag=32:
        \"NAMEefgh\" |\n   |                          |                  |Oper Attrs:
        \       |\n   |                          |                  |tag=16: <0-length>
        |\n   |                          |                  |tag=17: <0-length> |\n
        \  |                          |                  |tag=32: <0-length> |\n   |
        \                         |                  |                   |\n   |                          |
        DevAttrQryRsp--> |                   |\n   |                          |SUCCESS
        \          |                   |\n   |                          |Msg Key:
        \         |                   |\n   |                          |tag=32: \"NAMEefgh\"|
        \                  |\n   |                          |Oper Attrs:       |                   |\n
        \  |                          |tag=16: 192.0.2.4 |                   |\n   |
        \                         |tag=17: 5001      |                   |\n   |                          |tag=32:\"NAMEefgh\"
        |                   |\n   |                          |tag=16: 192.0.2.5 |/**Mgmt
        Station ***|\n   |                          |tag=17: 5001      |displays device,
        \  |\n   |                          |tag=32:\"NAMEefgh\" |the operator decides\n
        \  |                          |                  |to place \"NAMEabcd\"|\n
        \  |                          |                  |into Domain \"DDxyz\"|\n
        \  |/*************************|                  |******************/|\n   |Target
        is now registered  |                  |                   |\n   |in iSNS.
        It is then placed|                  |<--DDReg           |\n   |in a pre-existing
        DD with |                  |Src:               |\n   |DD_ID 123 by a management
        |               tag=32:\"mgmt.example.com\"\n   |station.                  |
        \                 |Msg Key:           |\n   |*************************/|                  |tag=2065:
        123      |\n   |                          |                  |Oper Attrs:
        \       |\n   |                          |                  |tag=2068: \"NAMEabcd\"\n
        \  |                          | DDRegRsp----->   |                   |\n   |
        \                         |SUCCESS           |                   |\n   |                          |Msg
        Key:          |                   |\n   |                          |tag=2065:
        123     |                   |\n   |                          |Oper Attrs:
        \      |                   |\n   |                          |tag=2065: 123
        \    |                   |\n   +--------------------------+------------------+-------------------+\n"
      title: A.1.2.  Target Registration and DD Configuration
    - contents:
      - "A.1.3.  Initiator Registration and Target Discovery\n   The following example
        illustrates a new initiator registering with\n   the iSNS, and discovering
        the target NAMEabcd from the example in\n   A.1.2.\n   +--------------------------+------------------+-------------------+\n
        \  |    iSCSI Initiator       |    iSNS          |Management Station |\n   +--------------------------+------------------+-------------------+\n
        \  |Discover iSNS--SLP-->     |                  |/*mgmt station is  |\n   |
        \                         |<--SLP--iSNS Here:| administratively  |\n   |                          |
        \     192.36.53.1 | authorized to view|\n   |DevAttrReg-->             |                  |
        all DDs ********/ |\n   |Src:                      |                  |                   |\n
        \  |tag=32: \"NAMEijkl\"        |                  |                   |\n
        \  |Msg Key:                  |                  |                   |\n   |tag=1:
        \"svr1.example.com\" |                  |                   |\n   |Oper Attrs:
        \              |                  |                   |\n   |tag=1: \"svr1.example.com\"
        |                  |                   |\n   |tag=2: \"iSCSI\"            |
        \                 |                   |\n   |tag=16: 192.20.3.1        |/*****************|
        \                  |\n   |tag=17: 5001              |Device not in any |                   |\n
        \  |tag=19: 5                 |DD, so it is      |                   |\n   |tag=20:
        5002              |inaccessible by   |                   |\n   |tag=32: \"NAMEijkl\"
        \       |other devices     |                   |\n   |tag=33: \"Initiator\"
        \      |*****************/|                   |\n   |tag=34: \"Server1\"         |
        \                 |                   |\n   |tag=51: 11                |                  |
        \                  |\n   |tag=49: 192.20.3.1        |                  |                   |\n
        \  |tag=50: 5001              |                  |                   |\n   |
        \                         |<--DevAttrRegRsp  |                   |\n   |                          |SUCCESS
        \          |                   |\n   |                          |Msg Key:
        \         |                   |\n   |                          |tag=1: \"svr1.example.com\"
        \            |\n   |                          |Oper Attrs:       |                   |\n
        \  |                          |tag=1: \"svr1.example.com\"             |\n
        \  |                          |tag=2: \"iSCSI\"    |                   |\n
        \  |                          |tag=16: 192.20.3.1|                   |\n   |
        \                         |tag=17: 5001      |                   |\n   |                          |tag=19:
        5         |                   |\n   |                          |tag=20: 5002
        \     |                   |\n   |                          |tag=32: \"NAMEijkl\"|
        \                  |\n   |                          |tag=33: \"Initiator\"
        \                  |\n   |                          |tag=34: \"Server1\" |
        \                  |\n   |                          |tag=48: \"NAMEijkl\"|
        \                  |\n   |                          |tag=49: 192.20.3.1|                   |\n
        \  |                          |tag=50: 5001      |                   |\n   |
        \                         |tag=51: 11        |                   |\n   |                          |
        \                 |                   |\n   |                          |       SCN------>
        |                   |\n   |                          |  (or SNMP notification)
        \             |\n   |                          |dest:(tag=32)\"mgmt.example.com\"
        \      |\n   |                          |time:(tag=4): <current time>          |\n
        \  |                          |tag=35: \"MGT-SCN, OBJ-ADD\"            |\n
        \  |                          |tag=32: \"NAMEijkl\"|                   |\n
        \  |                          |                  |                   |\n   |
        \                         |                  |<------SCNRsp      |\n   |                          |
        \                 |SUCCESS            |\n   |                          |               tag=32:\"mgmt.example.com\"\n
        \  |                          |                  |                   |\n   |SCNReg-->
        \                |                  |                   |\n   |Src:                      |
        \                 |                   |\n   |tag=32: \"NAMEijkl\"        |
        \                 |                   |\n   |Msg Key:                  |                  |
        \                  |\n   |tag=32: \"NAMEijkl\"        |                  |
        \                  |\n   |Oper Attrs:               |                  |                   |\n
        \  |tag=35: <TARG&SELF, OBJ-RMV/ADD/UPD>         |                   |\n   |
        \                         |<--SCNRegRsp      |                   |\n   |                          |SUCCESS
        \          |                   |\n   |                          |                  |
        \                  |\n   |                          |                  |<----DevAttrQry
        \   |\n   |                          |                  |Src:               |\n
        \  |                          |               tag=32:\"mgmt.example.com\"\n
        \  |                          |                  |Msg Key:           |\n   |
        \                         |                  |tag=32: \"NAMEijkl\" |\n   |
        \                         |                  |Oper Attrs:        |\n   |                          |
        \                 |tag=16: <0-length> |\n   |                          |                  |tag=17:
        <0-length> |\n   |                          |                  |tag=32: <0-length>
        |\n   |                          | DevAttrQryRsp--->|                   |\n
        \  |                          |SUCCESS           |                   |\n   |
        \                         |Msg Key:          |                   |\n   |                          |tag=32:
        \"NAMEijkl\"|                   |\n   |                          |Oper Attrs:
        \      |                   |\n   |                          |tag=16:192.20.3.1
        |                   |\n   |                          |tag=17: 5001      |
        \                  |\n   |                          |tag=32:\"NAMEijkl\" |
        \                  |\n   |                          |                  |/**Mgmt
        Station ***|\n   |                          |                  |displays device,
        the\n   |                          |                  |operator decides to|\n
        \  |                          |                  |place \"NAMEijkl\" into\n
        \  |                          |                  |pre-existing Disc  |\n   |
        \                         |                  |Domain \"DDxyz\" with|\n   |
        \                         |                  |device NAMEabcd    |\n   |                          |
        \                 |******************/|\n   |                          |                  |<--DDReg
        \          |\n   |                          |                  |Src:               |\n
        \  |                          |               tag=32:\"mgmt.example.com\"\n
        \  |                          |                  |Msg Key:           |\n   |
        \                         |                  |tag=2065: 123      |\n   |                          |
        \                 |Oper Attrs:        |\n   |                          |                  |tag=2068:
        \"NAMEijkl\"\n   |                          |                  |                   |\n
        \  |                          |     DDRegRsp---->|                   |\n   |
        \                         |SUCCESS           |                   |\n   |                          |Msg
        Key:          |                   |\n   |                          |tag=2065:
        123     |                   |\n   |                          |Oper Attrs:
        \      |                   |\n   |                          |tag=2065: 123
        \    |/******************|\n   |                          |                  |\"NAMEijkl\"
        has been|\n   |                          |                  |moved to \"DDxyz\"
        \  |\n   |                          |                  |******************/|\n
        \  |                          |        SCN------>|                   |\n   |
        \                         |dest:(tag=32)\"mgmt.example.com\"       |\n   |
        \                         |time:(tag=4): <current time>          |\n   |                          |tag=35:
        <MGT-SCN, DD/DDS-MBR-ADD>     |\n   |                          |tag=2065:
        123     |                   |\n   |                          |tag=2068: \"NAMEijkl\"
        \                 |\n   |                          |                  |                   |\n
        \  |                          |                  |<------SCNRsp      |\n   |
        \                         |                  |SUCCESS            |\n   |                          |
        \              tag=32:\"mgmt.example.com\"\n   |                          |<-----SCN
        \        |                   |\n   |                          |dest:(tag=32)\"NAMEijkl\"
        \              |\n   |                          |time:(tag=4): <current time>
        \         |\n   |                          |tag=35: <TARG&SELF, OBJ-ADD>          |\n
        \  |                          |tag=32: \"NAMEijkl\"|                   |\n
        \  |    SCNRsp------>         |                  |                   |\n   |SUCCESS
        \                  |                  |                   |\n   |tag=32:\"NAMEijkl\"
        \        |                  |                   |\n   |                          |
        \                 |                   |\n   |                          |/*****************|
        \                  |\n   |                          |Note that NAMEabcd|                   |\n
        \  |                          |also receives an  |                   |\n   |
        \                         |SCN that NAMEijkl |                   |\n   |                          |is
        in the same DD |                   |\n   |                          |*****************/|
        \                  |\n   |           (to \"NAMEabcd\")|<-----SCN         |
        \                  |\n   |                          |dest:(tag=32)\"NAMEabcd\"
        \              |\n   |                          |time:(tag=4): <current time>
        \         |\n   |                          |tag=35: <INIT&SELF, OBJ-ADD>          |\n
        \  |                          |tag=32: \"NAMEijkl\"|                   |\n
        \  |    SCNRsp------>         |                  |                   |\n   |SUCCESS
        \                  |                  |                   |\n   |tag=32:\"NAMEabcd\"
        \        |                  |                   |\n   |                          |
        \                 |                   |\n   |    DevAttrQry----------->|                  |
        \                  |\n   |Src:                      |                  |                   |\n
        \  |tag=32: \"NAMEijkl\"        |                  |                   |\n
        \  |Msg Key:                  |                  |                   |\n   |tag=33:
        \"Target\"          |                  |                   |\n   |Oper Attrs:
        \              |                  |                   |\n   |tag=16: <0-length>
        \       |                  |                   |\n   |tag=17: <0-length>        |
        \                 |                   |\n   |tag=32: <0-length>        |                  |
        \                  |\n   |tag=34: <0-length>        |                  |                   |\n
        \  |tag=43: <0-length>        |                  |                   |\n   |tag=48:
        <0-length>        |                  |                   |\n   |tag=49: <0-length>
        \       |                  |                   |\n   |tag=50: <0-length>        |
        \                 |                   |\n   |tag=51: <0-length>        |                  |
        \                  |\n   |                          |<--DevAttrQryRsp  |                   |\n
        \  |                          |SUCCESS           |                   |\n   |
        \                         |Msg Key:          |                   |\n   |                          |tag=33:\"Target\"
        \  |                   |\n   |                          |Oper Attrs:       |
        \                  |\n   |                          |tag=16: 192.0.2.4 |                   |\n
        \  |                          |tag=17: 5001      |                   |\n   |
        \                         |tag=32: \"NAMEabcd\"|                   |\n   |
        \                         |tag=34: \"Storage Array 1\"             |\n   |
        \                         |tag=16: 192.0.2.5 |                   |\n   |                          |tag=17:
        5001      |                   |\n   |                          |tag=32: \"NAMEabcd\"|
        \                  |\n   |                          |tag=34: \"Storage Array
        1\"             |\n   |                          |tag=43: X.509 cert|                   |\n
        \  |                          |tag=48: \"NAMEabcd\"|                   |\n
        \  |                          |tag=49: 192.0.2.4 |                   |\n   |
        \                         |tag=50: 5001      |                   |\n   |                          |tag=51:
        10        |                   |\n   |                          |tag=48: \"NAMEabcd\"|
        \                  |\n   |                          |tag=49: 192.0.2.5 |                   |\n
        \  |                          |tag=50: 5001      |                   |\n   |
        \                         |tag=51: 10        |                   |\n   |                          |
        \                 |                   |\n   |/***The initiator has discovered
        \            |                   |\n   |the target, and has everything               |
        \                  |\n   |needed to complete iSCSI login               |                   |\n
        \  |The same process occurs on the               |                   |\n   |target
        side; the SCN prompts the             |                   |\n   |target to
        download the list of               |                   |\n   |authorized initiators
        from the               |                   |\n   |iSNS (i.e., those initiators
        in the          |                   |\n   |same DD as the target.************/
        \         |                   |\n   +--------------------------+------------------+-------------------+\n"
      title: A.1.3.  Initiator Registration and Target Discovery
    title: A.1.  iSCSI Initialization Example
  title: 'Appendix A: iSNS Examples'
- contents:
  - "Acknowledgements\n   Numerous individuals contributed to the creation of this
    document\n   through their careful review and submissions of comments and\n   recommendations.
    \ We acknowledge the following persons for their\n   technical contributions to
    this document: Mark Bakke (Cisco), John\n   Hufferd (IBM), Julian Satran (IBM),
    Kaladhar Voruganti(IBM), Joe Czap\n   (IBM), John Dowdy (IBM), Tom McSweeney (IBM),
    Jim Hafner (IBM), Chad\n   Gregory (Intel), Yaron Klein (Sanrad), Larry Lamers
    (Adaptec), Jack\n   Harwood (EMC), David Black (EMC), David Robinson (Sun), Alan
    Warwick\n   (Microsoft), Bob Snead (Microsoft), Fa Yoeu (Intransa), Joe White\n
    \  (McDATA), Charles Monia (McDATA), Larry Hofer (McDATA), Ken Hirata\n   (Vixel),
    Howard Hall (Pirus), Malikarjun Chadalapaka (HP), Marjorie\n   Krueger (HP), Siva
    Vaddepuri (McDATA), and Vinai Singh (American\n   Megatrends).\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Josh Tseng\n   Riverbed Technology\n   501 2nd Street,
    Suite 410\n   San Francisco, CA 94107\n   Phone:  (650)274-2109\n   EMail:  joshtseng@yahoo.com\n
    \  Kevin Gibbons\n   McDATA Corporation\n   4555 Great America Parkway\n   Santa
    Clara, CA 95054-1208\n   Phone: (408) 567-5765\n   EMail: kevin.gibbons@mcdata.com\n
    \  Franco Travostino\n   Nortel\n   600 Technology Park Drive\n   Billerica, MA
    01821 USA\n   Phone: (978) 288-7708\n   EMail: travos@nortel.com\n   Curt du Laney\n
    \  Rincon Research Corporation\n   101 North Wilmot Road, Suite 101\n   Tucson
    AZ 85711\n   Phone: (520) 519-4409\n   EMail: cdl@rincon.com\n   Joe Souza\n   Microsoft
    Corporation\n   One Microsoft Way\n   Redmond, WA  98052-6399\n   Phone: (425)
    706-3135\n   EMail: joes@exmsft.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
