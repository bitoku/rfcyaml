- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                      A. Keromytis
  contents:
  - "Independent Submission                                      A. Keromytis\n  \
    \              X.509 Key and Signature Encoding for the\n                    KeyNote\
    \ Trust Management System\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes X.509 key identifiers and signature encoding\
    \ for\n   version 2 of the KeyNote trust-management system (RFC 2704).  X.509\n\
    \   certificates (RFC 5280) can be directly used in the Authorizer or\n   Licensees\
    \ field (or in both fields) in a KeyNote assertion, allowing\n   for easy integration\
    \ with protocols that already use X.509\n   certificates for authentication.\n\
    \   In addition, the document defines additional signature types that use\n  \
    \ other hash functions (beyond the MD5 and SHA1 hash functions that are\n   defined\
    \ in RFC 2792).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5708.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http:trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   KeyNote is a simple and flexible trust-management system\
    \ designed to\n   work well for a variety of large- and small-scale, Internet-based\n\
    \   applications.  It provides a single, unified language for both local\n   policies\
    \ and credentials.  KeyNote policies and credentials, called\n   'assertions',\
    \ contain predicates that describe the trusted actions\n   permitted by the holders\
    \ of specific public keys.  KeyNote assertions\n   are essentially small, highly\
    \ structured programs.  A signed\n   assertion, which can be sent over an untrusted\
    \ network, is also\n   called a 'credential assertion'.  Credential assertions,\
    \ which also\n   serve the role of certificates, have the same syntax as policy\n\
    \   assertions but are also signed by the principal delegating the trust.\n  \
    \ Note that only one principal may sign a credential assertion, but\n   trust\
    \ may be delegated to multiple principals.  The credential\n   assertion may delegate\
    \ trust to each of these principals separately\n   or to groups of principals\
    \ required to act together.  For more\n   details on KeyNote, see [KEYNOTE]. \
    \ This document assumes reader\n   familiarity with the KeyNote system.\n   Cryptographic\
    \ keys may be used in KeyNote to identify principals.  To\n   facilitate interoperation\
    \ between different implementations and to\n   allow for maximal flexibility,\
    \ keys must be converted to a normalized\n   canonical form (dependent on the\
    \ public key algorithm used) for the\n   purposes of any internal comparisons\
    \ between keys.  For example, an\n   RSA key may be encoded in base64 [RFC4648]\
    \ ASCII in one credential\n   and in hexadecimal ASCII in another.  A KeyNote\
    \ implementation must\n   internally convert the two encodings to a normalized\
    \ form that allows\n   for comparison between them.  Furthermore, the internal\
    \ structure of\n   an encoded key must be known for an implementation to correctly\n\
    \   decode it.  [RFC2792] describes the RSA and DSA (Digital Signature\n   Algorithm)\
    \ key identifier and signature encodings for use in KeyNote\n   assertions.  This\
    \ document specifies a new key identifier, allowing\n   X.509 certificates [RFC5280]\
    \ to be used as a key substitute wherever\n   an RSA or DSA key may be used in\
    \ KeyNote.  Specifically, KeyNote will\n   use the key associated with the subject\
    \ of an X.509 certificate.  In\n   addition, this document defines a corresponding\
    \ signature encoding,\n   to be used in conjunction with X.509 key identifiers.\
    \  Finally, this\n   document defines new signature encodings that use new hash\
    \ functions\n   beyond the MD5 and SHA1 functions defined in RFC 2792, and which\
    \ in\n   recent years have been found to be vulnerable to attack.\n"
- title: 1.1. Conventions
  contents:
  - "1.1. Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 2.  X.509 Key Identifier Encoding
  contents:
  - "2.  X.509 Key Identifier Encoding\n   X.509 key identifiers in KeyNote are encoded\
    \ as an ASN1 Distinguished\n   Encoding Rules (DER) encoding of the whole X.509\
    \ certificate, as\n   defined in Section 4 of [RFC5280].\n   For use in KeyNote\
    \ credentials, the ASN1 DER-encoded object is then\n   ASCII-encoded (e.g., as\
    \ a string of hex digits or base64 characters).\n   X.509 keys encoded in this\
    \ way in KeyNote must be identified by the\n   \"x509-XXX:\" algorithm name, where\
    \ XXX is an ASCII encoding (\"hex\" or\n   \"base64\").  Other ASCII encoding\
    \ schemes may be defined in the\n   future.\n"
- title: 3.  X.509 Key Identifier Normalized Forms
  contents:
  - "3.  X.509 Key Identifier Normalized Forms\n   For comparison purposes, the Subject\
    \ public key in X.509 certificates\n   is used in the normalized form described\
    \ in Section 2 of [RFC2792].\n   The resulting RSA or DSA key is then used for\
    \ comparing, per\n   [RFC2792].  All X.509 key comparisons in KeyNote occur between\n\
    \   normalized forms.  Note that this allows for comparison between a\n   directly\
    \ encoded RSA or DSA key (as specified in RFC 2792) and the\n   same key when\
    \ contained in an X.509 certificate.\n"
- title: 4.  X.509 Signature Computation and Encoding
  contents:
  - "4.  X.509 Signature Computation and Encoding\n   X.509 key identifier signatures\
    \ are defined for historical reasons.\n   Implementers are encouraged to use the\
    \ RSA- or DSA-based signature\n   encodings instead.\n   X.509 key identifier\
    \ signatures in KeyNote are identical to RSA- or\n   DSA-based signatures [RFC2792].\
    \  The only difference is that the\n   public key corresponding to the private\
    \ key that generated the\n   signatures is encoded in an X.509 certificate in\
    \ the Authorizer field\n   of the signed credential assertion.  However, an RSA-\
    \ or DSA-based\n   signature encoding (depending on the Subject key contained\
    \ in the\n   X.509 certificate itself) may be used instead.\n   X.509 key identifier\
    \ signatures in KeyNote are computed over the\n   assertion body (starting from\
    \ the beginning of the first keyword, up\n   to and including the newline character\
    \ immediately before the\n   \"Signature:\" keyword) and the signature algorithm\
    \ name (including the\n   trailing colon character, e.g., \"sig-x509-sha512-base64:\"\
    )\n   X.509 key identifier signatures are encoded as an ASN1 OCTET STRING\n  \
    \ object, containing the signature value.\n   For use in KeyNote credentials,\
    \ the ASN1 OCTET STRING is then ASCII-\n   encoded (as a string of hex digits\
    \ or base64 characters).\n   X.509 key identifier signatures encoded in this way\
    \ in KeyNote must\n   be identified by the \"sig-x509-XXX-YYY:\" algorithm name,\
    \ where XXX is\n   a hash function name (see Section 5 and Section 7 of this document)\n\
    \   and YYY is an ASCII encoding (\"hex\" or \"base64\").\n"
- title: 5.  Hash Functions For RSA, DSA, and X.509 Key Identifier Signatures
  contents:
  - "5.  Hash Functions For RSA, DSA, and X.509 Key Identifier Signatures\n   For\
    \ historical reasons (backward compatibility), X.509 key identifier\n   signatures\
    \ SHOULD support SHA1 as the hash function, using the \"sha1\"\n   keyword.  In\
    \ addition, SHA256, SHA512, and RIPEMD160 ([SHA256+],\n   [SHA2-2], [RIPEMD-160])\
    \ signatures MUST be supported for use with\n   X.509 key identifier signatures,\
    \ by using the \"sha256\", \"sha512\", and\n   \"ripemd160\" keywords, respectively\
    \ (see Section 7).\n   In addition, SHA256, SHA512, and RIPEMD160 signature identifiers\
    \ are\n   defined for RSA signatures, using the \"sha256\", \"sha512\", and\n\
    \   \"ripemd160\" keywords, respectively (see Section 7).\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document discusses the format of X.509 keys\
    \ and signatures as\n   used in KeyNote.  The security of KeyNote credentials\
    \ utilizing such\n   keys and credentials is directly dependent on the strength\
    \ of the\n   related public key algorithms.  On the security of KeyNote itself,\n\
    \   see [KEYNOTE].  Furthermore, it is the responsibility of the\n   application\
    \ developer to ensure that X.509 certificates are valid\n   (signed by a trusted\
    \ authority, not expired, and not revoked).\n   The use of SHA1 as part of signatures\
    \ and key identifiers is\n   discouraged, because of the various weaknesses in\
    \ the algorithm that\n   have been identified in recent years.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Per [RFC2792], IANA has provided a registry of reserved\
    \ algorithm\n   identifiers.  The following are reserved by this document as KeyNote\n\
    \   public key format identifiers:\n   - \"x509-hex\"\n   - \"x509-base64\"\n\
    \   The following are reserved by this document as KeyNote signature\n   algorithm\
    \ identifiers:\n   - \"sig-x509-sha1-hex\"\n   - \"sig-x509-sha1-base64\"\n  \
    \ - \"sig-x509-sha256-hex\"\n   - \"sig-x509-sha256-base64\"\n   - \"sig-x509-sha512-hex\"\
    \n   - \"sig-x509-sha512-base64\"\n   - \"sig-x509-ripemd160-hex\"\n   - \"sig-x509-ripemd160-base64\"\
    \n   - \"sig-rsa-sha256-hex\"\n   - \"sig-rsa-sha256-base64\"\n   - \"sig-rsa-sha512-hex\"\
    \n   - \"sig-rsa-sha512-base64\"\n   - \"sig-rsa-ripemd160-hex\"\n   - \"sig-rsa-ripemd160-base64\"\
    \n   Note that the double quotes are not part of the algorithm\n   identifiers.\n"
- title: 8. References
  contents:
  - '8. References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [SHA256+]    Eastlake 3rd, D. and T. Hansen, \"\
    US Secure Hash\n                Algorithms (SHA and HMAC-SHA)\", RFC 4634, July\
    \ 2006.\n   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC5280]\
    \    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n                Infrastructure\
    \ Certificate and Certificate Revocation\n                List (CRL) Profile\"\
    , RFC 5280, May 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [KEYNOTE]    Blaze, M., Feigenbaum, J., Ioannidis,\
    \ J., and A.\n                Keromytis, \"The KeyNote Trust-Management System\
    \ Version\n                2\", RFC 2704, September 1999.\n   [RFC2792]    Blaze,\
    \ M., Ioannidis, J., and A. Keromytis, \"DSA and RSA\n                Key and\
    \ Signature Encoding for the KeyNote Trust\n                Management System\"\
    , RFC 2792, March 2000.\n   [RFC4648]    Josefsson, S., \"The Base16, Base32,\
    \ and Base64 Data\n                Encodings\", RFC 4648, October 2006.\n   [RIPEMD-160]\
    \ 3.ISO/IEC 10118-3:1998, \"Information technology -\n                Security\
    \ techniques - Hash-functions - Part 3: Dedicated\n                hash-functions,\"\
    \ International Organization for\n                Standardization, Geneva, Switzerland,\
    \ 1998.\n   [SHA2-2]     NIST, \"Descriptions of SHA-256, SHA-384, and SHA-512\"\
    ,\n                May 2001, <http://csrc.nist.gov/publications/fips/\n      \
    \          fips180-3/fips180-3_final.pdf>.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The author would like to thank Jim Schaad for his review\
    \ and comments\n   on earlier versions of this document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Angelos D. Keromytis\n   Department of Computer Science\n\
    \   Columbia University\n   Mail Code 0401\n   1214 Amsterdam Avenue\n   New York,\
    \ New York 1007\n   USA\n   EMail: angelos@cs.columbia.edu\n"
