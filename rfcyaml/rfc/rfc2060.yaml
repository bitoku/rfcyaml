- title: __initial_text__
  contents:
  - '            INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Message Access Protocol, Version 4rev1 (IMAP4rev1)\n\
    \   allows a client to access and manipulate electronic mail messages on\n   a\
    \ server.  IMAP4rev1 permits manipulation of remote message folders,\n   called\
    \ \"mailboxes\", in a way that is functionally equivalent to local\n   mailboxes.\
    \  IMAP4rev1 also provides the capability for an offline\n   client to resynchronize\
    \ with the server (see also [IMAP-DISC]).\n   IMAP4rev1 includes operations for\
    \ creating, deleting, and renaming\n   mailboxes; checking for new messages; permanently\
    \ removing messages;\n   setting and clearing flags; [RFC-822] and [MIME-IMB]\
    \ parsing;\n   searching; and selective fetching of message attributes, texts,\
    \ and\n   portions thereof.  Messages in IMAP4rev1 are accessed by the use of\n\
    \   numbers.  These numbers are either message sequence numbers or unique\n  \
    \ identifiers.\n   IMAP4rev1 supports a single server.  A mechanism for accessing\n\
    \   configuration information to support multiple IMAP4rev1 servers is\n   discussed\
    \ in [ACAP].\n   IMAP4rev1 does not specify a means of posting mail; this function\
    \ is\n   handled by a mail transfer protocol such as [SMTP].\n   IMAP4rev1 is\
    \ designed to be upwards compatible from the [IMAP2] and\n   unpublished IMAP2bis\
    \ protocols.  In the course of the evolution of\n   IMAP4rev1, some aspects in\
    \ the earlier protocol have become obsolete.\n   Obsolete commands, responses,\
    \ and data formats which an IMAP4rev1\n   implementation may encounter when used\
    \ with an earlier implementation\n   are described in [IMAP-OBSOLETE].\n   Other\
    \ compatibility issues with IMAP2bis, the most common variant of\n   the earlier\
    \ protocol, are discussed in [IMAP-COMPAT].  A full\n   discussion of compatibility\
    \ issues with rare (and presumed extinct)\n   variants of [IMAP2] is in [IMAP-HISTORICAL];\
    \ this document is\n   primarily of historical interest.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: IMAP4rev1 Protocol Specification ..................................    4
  contents:
  - 'IMAP4rev1 Protocol Specification ..................................    4

    '
- title: 1.      How to Read This Document .................................    4
  contents:
  - '1.      How to Read This Document .................................    4

    '
- title: 1.1.    Organization of This Document .............................    4
  contents:
  - '1.1.    Organization of This Document .............................    4

    '
- title: 1.2.    Conventions Used in This Document .........................    4
  contents:
  - '1.2.    Conventions Used in This Document .........................    4

    '
- title: 2.      Protocol Overview .........................................    5
  contents:
  - '2.      Protocol Overview .........................................    5

    '
- title: 2.1.    Link Level ................................................    5
  contents:
  - '2.1.    Link Level ................................................    5

    '
- title: 2.2.    Commands and Responses ....................................    6
  contents:
  - '2.2.    Commands and Responses ....................................    6

    '
- title: 2.2.1.  Client Protocol Sender and Server Protocol Receiver .......    6
  contents:
  - '2.2.1.  Client Protocol Sender and Server Protocol Receiver .......    6

    '
- title: 2.2.2.  Server Protocol Sender and Client Protocol Receiver .......    7
  contents:
  - '2.2.2.  Server Protocol Sender and Client Protocol Receiver .......    7

    '
- title: 2.3.    Message Attributes ........................................    7
  contents:
  - '2.3.    Message Attributes ........................................    7

    '
- title: 2.3.1.  Message Numbers ...........................................    7
  contents:
  - '2.3.1.  Message Numbers ...........................................    7

    '
- title: 2.3.1.1.        Unique Identifier (UID) Message Attribute .........    7
  contents:
  - '2.3.1.1.        Unique Identifier (UID) Message Attribute .........    7

    '
- title: 2.3.1.2.        Message Sequence Number Message Attribute .........    9
  contents:
  - '2.3.1.2.        Message Sequence Number Message Attribute .........    9

    '
- title: 2.3.2.  Flags Message Attribute ....................................   9
  contents:
  - '2.3.2.  Flags Message Attribute ....................................   9

    '
- title: 2.3.3.  Internal Date Message Attribute ...........................   10
  contents:
  - '2.3.3.  Internal Date Message Attribute ...........................   10

    '
- title: 2.3.4.  [RFC-822] Size Message Attribute ..........................   11
  contents:
  - '2.3.4.  [RFC-822] Size Message Attribute ..........................   11

    '
- title: 2.3.5.  Envelope Structure Message Attribute ......................   11
  contents:
  - '2.3.5.  Envelope Structure Message Attribute ......................   11

    '
- title: 2.3.6.  Body Structure Message Attribute ..........................   11
  contents:
  - '2.3.6.  Body Structure Message Attribute ..........................   11

    '
- title: 2.4.    Message Texts .............................................   11
  contents:
  - '2.4.    Message Texts .............................................   11

    '
- title: 3.      State and Flow Diagram ....................................   11
  contents:
  - '3.      State and Flow Diagram ....................................   11

    '
- title: 3.1.    Non-Authenticated State ...................................   11
  contents:
  - '3.1.    Non-Authenticated State ...................................   11

    '
- title: 3.2.    Authenticated State .......................................   11
  contents:
  - '3.2.    Authenticated State .......................................   11

    '
- title: 3.3.    Selected State ............................................   12
  contents:
  - '3.3.    Selected State ............................................   12

    '
- title: 3.4.    Logout State ..............................................   12
  contents:
  - '3.4.    Logout State ..............................................   12

    '
- title: 4.      Data Formats ..............................................   12
  contents:
  - '4.      Data Formats ..............................................   12

    '
- title: 4.1.    Atom ......................................................   13
  contents:
  - '4.1.    Atom ......................................................   13

    '
- title: 4.2.    Number ....................................................   13
  contents:
  - '4.2.    Number ....................................................   13

    '
- title: 4.3.    String .....................................................  13
  contents:
  - '4.3.    String .....................................................  13

    '
- title: 4.3.1.  8-bit and Binary Strings ..................................   13
  contents:
  - '4.3.1.  8-bit and Binary Strings ..................................   13

    '
- title: 4.4.    Parenthesized List ........................................   14
  contents:
  - '4.4.    Parenthesized List ........................................   14

    '
- title: 4.5.    NIL .......................................................   14
  contents:
  - '4.5.    NIL .......................................................   14

    '
- title: 5.      Operational Considerations ................................   14
  contents:
  - '5.      Operational Considerations ................................   14

    '
- title: 5.1.    Mailbox Naming ............................................   14
  contents:
  - '5.1.    Mailbox Naming ............................................   14

    '
- title: 5.1.1.  Mailbox Hierarchy Naming ..................................   14
  contents:
  - '5.1.1.  Mailbox Hierarchy Naming ..................................   14

    '
- title: 5.1.2.  Mailbox Namespace Naming Convention .......................   14
  contents:
  - '5.1.2.  Mailbox Namespace Naming Convention .......................   14

    '
- title: 5.1.3.  Mailbox International Naming Convention ...................   15
  contents:
  - '5.1.3.  Mailbox International Naming Convention ...................   15

    '
- title: 5.2.    Mailbox Size and Message Status Updates ...................   16
  contents:
  - '5.2.    Mailbox Size and Message Status Updates ...................   16

    '
- title: 5.3.    Response when no Command in Progress ......................   16
  contents:
  - '5.3.    Response when no Command in Progress ......................   16

    '
- title: 5.4.    Autologout Timer ..........................................   16
  contents:
  - '5.4.    Autologout Timer ..........................................   16

    '
- title: 5.5.    Multiple Commands in Progress .............................   17
  contents:
  - '5.5.    Multiple Commands in Progress .............................   17

    '
- title: 6.      Client Commands ...........................................   17
  contents:
  - '6.      Client Commands ...........................................   17

    '
- title: 6.1.    Client Commands - Any State ...............................   18
  contents:
  - '6.1.    Client Commands - Any State ...............................   18

    '
- title: 6.1.1.  CAPABILITY Command ........................................   18
  contents:
  - '6.1.1.  CAPABILITY Command ........................................   18

    '
- title: 6.1.2.  NOOP Command ..............................................   19
  contents:
  - '6.1.2.  NOOP Command ..............................................   19

    '
- title: 6.1.3.  LOGOUT Command ............................................   20
  contents:
  - '6.1.3.  LOGOUT Command ............................................   20

    '
- title: 6.2.    Client Commands - Non-Authenticated State .................   20
  contents:
  - '6.2.    Client Commands - Non-Authenticated State .................   20

    '
- title: 6.2.1.  AUTHENTICATE Command ......................................   21
  contents:
  - '6.2.1.  AUTHENTICATE Command ......................................   21

    '
- title: 6.2.2.  LOGIN Command .............................................   22
  contents:
  - '6.2.2.  LOGIN Command .............................................   22

    '
- title: 6.3.    Client Commands - Authenticated State .....................   22
  contents:
  - '6.3.    Client Commands - Authenticated State .....................   22

    '
- title: 6.3.1.  SELECT Command ............................................   23
  contents:
  - '6.3.1.  SELECT Command ............................................   23

    '
- title: 6.3.2.  EXAMINE Command ...........................................   24
  contents:
  - '6.3.2.  EXAMINE Command ...........................................   24

    '
- title: 6.3.3.  CREATE Command ............................................   25
  contents:
  - '6.3.3.  CREATE Command ............................................   25

    '
- title: 6.3.4.  DELETE Command ............................................   26
  contents:
  - '6.3.4.  DELETE Command ............................................   26

    '
- title: 6.3.5.  RENAME Command ............................................   27
  contents:
  - '6.3.5.  RENAME Command ............................................   27

    '
- title: 6.3.6.  SUBSCRIBE Command .........................................   29
  contents:
  - '6.3.6.  SUBSCRIBE Command .........................................   29

    '
- title: 6.3.7.  UNSUBSCRIBE Command .......................................   30
  contents:
  - '6.3.7.  UNSUBSCRIBE Command .......................................   30

    '
- title: 6.3.8.  LIST Command ..............................................   30
  contents:
  - '6.3.8.  LIST Command ..............................................   30

    '
- title: 6.3.9.  LSUB Command ..............................................   32
  contents:
  - '6.3.9.  LSUB Command ..............................................   32

    '
- title: 6.3.10. STATUS Command ............................................   33
  contents:
  - '6.3.10. STATUS Command ............................................   33

    '
- title: 6.3.11. APPEND Command ............................................   34
  contents:
  - '6.3.11. APPEND Command ............................................   34

    '
- title: 6.4.    Client Commands - Selected State ..........................   35
  contents:
  - '6.4.    Client Commands - Selected State ..........................   35

    '
- title: 6.4.1.  CHECK Command .............................................   36
  contents:
  - '6.4.1.  CHECK Command .............................................   36

    '
- title: 6.4.2.  CLOSE Command .............................................   36
  contents:
  - '6.4.2.  CLOSE Command .............................................   36

    '
- title: 6.4.3.  EXPUNGE Command ...........................................   37
  contents:
  - '6.4.3.  EXPUNGE Command ...........................................   37

    '
- title: 6.4.4.  SEARCH Command ............................................   37
  contents:
  - '6.4.4.  SEARCH Command ............................................   37

    '
- title: 6.4.5.  FETCH Command .............................................   41
  contents:
  - '6.4.5.  FETCH Command .............................................   41

    '
- title: 6.4.6.  STORE Command .............................................   45
  contents:
  - '6.4.6.  STORE Command .............................................   45

    '
- title: 6.4.7.  COPY Command ..............................................   46
  contents:
  - '6.4.7.  COPY Command ..............................................   46

    '
- title: 6.4.8.  UID Command ...............................................   47
  contents:
  - '6.4.8.  UID Command ...............................................   47

    '
- title: 6.5.    Client Commands - Experimental/Expansion ..................   48
  contents:
  - '6.5.    Client Commands - Experimental/Expansion ..................   48

    '
- title: 6.5.1.  X<atom> Command ...........................................   48
  contents:
  - '6.5.1.  X<atom> Command ...........................................   48

    '
- title: 7.      Server Responses ..........................................   48
  contents:
  - '7.      Server Responses ..........................................   48

    '
- title: 7.1.    Server Responses - Status Responses .......................   49
  contents:
  - '7.1.    Server Responses - Status Responses .......................   49

    '
- title: 7.1.1.  OK Response ...............................................   51
  contents:
  - '7.1.1.  OK Response ...............................................   51

    '
- title: 7.1.2.  NO Response ...............................................   51
  contents:
  - '7.1.2.  NO Response ...............................................   51

    '
- title: 7.1.3.  BAD Response ..............................................   52
  contents:
  - '7.1.3.  BAD Response ..............................................   52

    '
- title: 7.1.4.  PREAUTH Response ..........................................   52
  contents:
  - '7.1.4.  PREAUTH Response ..........................................   52

    '
- title: 7.1.5.  BYE Response ..............................................   52
  contents:
  - '7.1.5.  BYE Response ..............................................   52

    '
- title: 7.2.    Server Responses - Server and Mailbox Status ..............   53
  contents:
  - '7.2.    Server Responses - Server and Mailbox Status ..............   53

    '
- title: 7.2.1.  CAPABILITY Response .......................................   53
  contents:
  - '7.2.1.  CAPABILITY Response .......................................   53

    '
- title: 7.2.2.  LIST Response ..............................................  54
  contents:
  - '7.2.2.  LIST Response ..............................................  54

    '
- title: 7.2.3.  LSUB Response .............................................   55
  contents:
  - '7.2.3.  LSUB Response .............................................   55

    '
- title: 7.2.4   STATUS Response ...........................................   55
  contents:
  - '7.2.4   STATUS Response ...........................................   55

    '
- title: 7.2.5.  SEARCH Response ...........................................   55
  contents:
  - '7.2.5.  SEARCH Response ...........................................   55

    '
- title: 7.2.6.  FLAGS Response ............................................   56
  contents:
  - '7.2.6.  FLAGS Response ............................................   56

    '
- title: 7.3.    Server Responses - Mailbox Size ...........................   56
  contents:
  - '7.3.    Server Responses - Mailbox Size ...........................   56

    '
- title: 7.3.1.  EXISTS Response ...........................................   56
  contents:
  - '7.3.1.  EXISTS Response ...........................................   56

    '
- title: 7.3.2.  RECENT Response ...........................................   57
  contents:
  - '7.3.2.  RECENT Response ...........................................   57

    '
- title: 7.4.    Server Responses - Message Status .........................   57
  contents:
  - '7.4.    Server Responses - Message Status .........................   57

    '
- title: 7.4.1.  EXPUNGE Response ..........................................   57
  contents:
  - '7.4.1.  EXPUNGE Response ..........................................   57

    '
- title: 7.4.2.  FETCH Response ............................................   58
  contents:
  - '7.4.2.  FETCH Response ............................................   58

    '
- title: 7.5.    Server Responses - Command Continuation Request ...........   63
  contents:
  - '7.5.    Server Responses - Command Continuation Request ...........   63

    '
- title: 8.      Sample IMAP4rev1 connection ...............................   63
  contents:
  - '8.      Sample IMAP4rev1 connection ...............................   63

    '
- title: 9.      Formal Syntax .............................................   64
  contents:
  - '9.      Formal Syntax .............................................   64

    '
- title: 10.     Author's Note .............................................   74
  contents:
  - '10.     Author''s Note .............................................   74

    '
- title: 11.     Security Considerations ...................................   74
  contents:
  - '11.     Security Considerations ...................................   74

    '
- title: 12.     Author's Address ..........................................   75
  contents:
  - '12.     Author''s Address ..........................................   75

    '
- title: Appendices ........................................................   76
  contents:
  - 'Appendices ........................................................   76

    '
- title: A.      References ................................................   76
  contents:
  - 'A.      References ................................................   76

    '
- title: B.      Changes from RFC 1730 .....................................   77
  contents:
  - 'B.      Changes from RFC 1730 .....................................   77

    '
- title: C.      Key Word Index ............................................   79
  contents:
  - 'C.      Key Word Index ............................................   79

    '
- title: IMAP4rev1 Protocol Specification
  contents:
  - 'IMAP4rev1 Protocol Specification

    '
- title: 1.      How to Read This Document
  contents:
  - '1.      How to Read This Document

    '
- title: 1.1.    Organization of This Document
  contents:
  - "1.1.    Organization of This Document\n   This document is written from the point\
    \ of view of the implementor of\n   an IMAP4rev1 client or server.  Beyond the\
    \ protocol overview in\n   section 2, it is not optimized for someone trying to\
    \ understand the\n   operation of the protocol.  The material in sections 3 through\
    \ 5\n   provides the general context and definitions with which IMAP4rev1\n  \
    \ operates.\n   Sections 6, 7, and 9 describe the IMAP commands, responses, and\n\
    \   syntax, respectively.  The relationships among these are such that it\n  \
    \ is almost impossible to understand any of them separately.  In\n   particular,\
    \ do not attempt to deduce command syntax from the command\n   section alone;\
    \ instead refer to the Formal Syntax section.\n"
- title: 1.2.    Conventions Used in This Document
  contents:
  - "1.2.    Conventions Used in This Document\n   In examples, \"C:\" and \"S:\"\
    \ indicate lines sent by the client and\n   server respectively.\n   The following\
    \ terms are used in this document to signify the\n   requirements of this specification.\n\
    \   1) MUST, or the adjective REQUIRED, means that the definition is\n      an\
    \ absolute requirement of the specification.\n   2) MUST NOT that the definition\
    \ is an absolute prohibition of the\n      specification.\n   3) SHOULD means\
    \ that there may exist valid reasons in particular\n      circumstances to ignore\
    \ a particular item, but the full\n      implications MUST be understood and carefully\
    \ weighed before\n      choosing a different course.\n   4) SHOULD NOT means that\
    \ there may exist valid reasons in\n      particular circumstances when the particular\
    \ behavior is\n      acceptable or even useful, but the full implications SHOULD\
    \ be\n      understood and the case carefully weighed before implementing\n  \
    \    any behavior described with this label.\n   5) MAY, or the adjective OPTIONAL,\
    \ means that an item is truly\n      optional.  One vendor may choose to include\
    \ the item because a\n      particular marketplace requires it or because the\
    \ vendor feels\n      that it enhances the product while another vendor may omit\
    \ the\n      same item.  An implementation which does not include a\n      particular\
    \ option MUST be prepared to interoperate with another\n      implementation which\
    \ does include the option.\n      \"Can\" is used instead of \"may\" when referring\
    \ to a possible\n      circumstance or situation, as opposed to an optional facility\
    \ of\n      the protocol.\n      \"User\" is used to refer to a human user, whereas\
    \ \"client\" refers\n      to the software being run by the user.\n      \"Connection\"\
    \ refers to the entire sequence of client/server\n      interaction from the initial\
    \ establishment of the network\n      connection until its termination.  \"Session\"\
    \ refers to the\n      sequence of client/server interaction from the time that\
    \ a mailbox\n      is selected (SELECT or EXAMINE command) until the time that\n\
    \      selection ends (SELECT or EXAMINE of another mailbox, CLOSE\n      command,\
    \ or connection termination).\n       Characters are 7-bit US-ASCII unless otherwise\
    \ specified.  Other\n       character sets are indicated using a \"CHARSET\",\
    \ as described in\n       [MIME-IMT] and defined in [CHARSET].  CHARSETs have\
    \ important\n       additional semantics in addition to defining character set;\
    \ refer\n       to these documents for more detail.\n"
- title: 2.      Protocol Overview
  contents:
  - '2.      Protocol Overview

    '
- title: 2.1.    Link Level
  contents:
  - "2.1.    Link Level\n   The IMAP4rev1 protocol assumes a reliable data stream\
    \ such as\n   provided by TCP.  When TCP is used, an IMAP4rev1 server listens\
    \ on\n   port 143.\n"
- title: 2.2.    Commands and Responses
  contents:
  - "2.2.    Commands and Responses\n   An IMAP4rev1 connection consists of the establishment\
    \ of a\n   client/server network connection, an initial greeting from the\n  \
    \ server, and client/server interactions.  These client/server\n   interactions\
    \ consist of a client command, server data, and a server\n   completion result\
    \ response.\n   All interactions transmitted by client and server are in the form\
    \ of\n   lines; that is, strings that end with a CRLF.  The protocol receiver\n\
    \   of an IMAP4rev1 client or server is either reading a line, or is\n   reading\
    \ a sequence of octets with a known count followed by a line.\n"
- title: 2.2.1.  Client Protocol Sender and Server Protocol Receiver
  contents:
  - "2.2.1.  Client Protocol Sender and Server Protocol Receiver\n   The client command\
    \ begins an operation.  Each client command is\n   prefixed with an identifier\
    \ (typically a short alphanumeric string,\n   e.g. A0001, A0002, etc.) called\
    \ a \"tag\".  A different tag is\n   generated by the client for each command.\n\
    \   There are two cases in which a line from the client does not\n   represent\
    \ a complete command.  In one case, a command argument is\n   quoted with an octet\
    \ count (see the description of literal in String\n   under Data Formats); in\
    \ the other case, the command arguments require\n   server feedback (see the AUTHENTICATE\
    \ command).  In either case, the\n   server sends a command continuation request\
    \ response if it is ready\n   for the octets (if appropriate) and the remainder\
    \ of the command.\n   This response is prefixed with the token \"+\".\n      Note:\
    \ If, instead, the server detected an error in the command, it\n      sends a\
    \ BAD completion response with tag matching the command (as\n      described below)\
    \ to reject the command and prevent the client from\n      sending any more of\
    \ the command.\n      It is also possible for the server to send a completion\
    \ response\n      for some other command (if multiple commands are in progress),\
    \ or\n      untagged data.  In either case, the command continuation request\n\
    \      is still pending; the client takes the appropriate action for the\n   \
    \   response, and reads another response from the server.  In all\n      cases,\
    \ the client MUST send a complete command (including\n      receiving all command\
    \ continuation request responses and command\n      continuations for the command)\
    \ before initiating a new command.\n   The protocol receiver of an IMAP4rev1 server\
    \ reads a command line\n   from the client, parses the command and its arguments,\
    \ and transmits\n   server data and a server command completion result response.\n"
- title: 2.2.2.  Server Protocol Sender and Client Protocol Receiver
  contents:
  - "2.2.2.  Server Protocol Sender and Client Protocol Receiver\n   Data transmitted\
    \ by the server to the client and status responses\n   that do not indicate command\
    \ completion are prefixed with the token\n   \"*\", and are called untagged responses.\n\
    \   Server data MAY be sent as a result of a client command, or MAY be\n   sent\
    \ unilaterally by the server.  There is no syntactic difference\n   between server\
    \ data that resulted from a specific command and server\n   data that were sent\
    \ unilaterally.\n   The server completion result response indicates the success\
    \ or\n   failure of the operation.  It is tagged with the same tag as the\n  \
    \ client command which began the operation.  Thus, if more than one\n   command\
    \ is in progress, the tag in a server completion response\n   identifies the command\
    \ to which the response applies.  There are\n   three possible server completion\
    \ responses: OK (indicating success),\n   NO (indicating failure), or BAD (indicating\
    \ protocol error such as\n   unrecognized command or command syntax error).\n\
    \   The protocol receiver of an IMAP4rev1 client reads a response line\n   from\
    \ the server.  It then takes action on the response based upon the\n   first token\
    \ of the response, which can be a tag, a \"*\", or a \"+\".\n   A client MUST\
    \ be prepared to accept any server response at all times.\n   This includes server\
    \ data that was not requested.  Server data SHOULD\n   be recorded, so that the\
    \ client can reference its recorded copy\n   rather than sending a command to\
    \ the server to request the data.  In\n   the case of certain server data, the\
    \ data MUST be recorded.\n   This topic is discussed in greater detail in the\
    \ Server Responses\n   section.\n"
- title: 2.3.    Message Attributes
  contents:
  - "2.3.    Message Attributes\n   In addition to message text, each message has\
    \ several attributes\n   associated with it.  These attributes may be retrieved\
    \ individually\n   or in conjunction with other attributes or message texts.\n"
- title: 2.3.1.  Message Numbers
  contents:
  - "2.3.1.  Message Numbers\n   Messages in IMAP4rev1 are accessed by one of two\
    \ numbers; the unique\n   identifier and the message sequence number.\n"
- title: 2.3.1.1.        Unique Identifier (UID) Message Attribute
  contents:
  - "2.3.1.1.        Unique Identifier (UID) Message Attribute\n   A 32-bit value\
    \ assigned to each message, which when used with the\n   unique identifier validity\
    \ value (see below) forms a 64-bit value\n   that is permanently guaranteed not\
    \ to refer to any other message in\n   the mailbox.  Unique identifiers are assigned\
    \ in a strictly ascending\n   fashion in the mailbox; as each message is added\
    \ to the mailbox it is\n   assigned a higher UID than the message(s) which were\
    \ added\n   previously.\n   Unlike message sequence numbers, unique identifiers\
    \ are not\n   necessarily contiguous.  Unique identifiers also persist across\n\
    \   sessions.  This permits a client to resynchronize its state from a\n   previous\
    \ session with the server (e.g. disconnected or offline access\n   clients); this\
    \ is discussed further in [IMAP-DISC].\n   Associated with every mailbox is a\
    \ unique identifier validity value,\n   which is sent in an UIDVALIDITY response\
    \ code in an OK untagged\n   response at mailbox selection time.  If unique identifiers\
    \ from an\n   earlier session fail to persist to this session, the unique\n  \
    \ identifier validity value MUST be greater than the one used in the\n   earlier\
    \ session.\n      Note: Unique identifiers MUST be strictly ascending in the mailbox\n\
    \      at all times.  If the physical message store is re-ordered by a\n     \
    \ non-IMAP agent, this requires that the unique identifiers in the\n      mailbox\
    \ be regenerated, since the former unique identifers are no\n      longer strictly\
    \ ascending as a result of the re-ordering.  Another\n      instance in which\
    \ unique identifiers are regenerated is if the\n      message store has no mechanism\
    \ to store unique identifiers.\n      Although this specification recognizes that\
    \ this may be\n      unavoidable in certain server environments, it STRONGLY ENCOURAGES\n\
    \      message store implementation techniques that avoid this problem.\n    \
    \  Another cause of non-persistance is if the mailbox is deleted and\n      a\
    \ new mailbox with the same name is created at a later date, Since\n      the\
    \ name is the same, a client may not know that this is a new\n      mailbox unless\
    \ the unique identifier validity is different.  A\n      good value to use for\
    \ the unique identifier validity value is a\n      32-bit representation of the\
    \ creation date/time of the mailbox.\n      It is alright to use a constant such\
    \ as 1, but only if it\n      guaranteed that unique identifiers will never be\
    \ reused, even in\n      the case of a mailbox being deleted (or renamed) and\
    \ a new mailbox\n      by the same name created at some future time.\n   The unique\
    \ identifier of a message MUST NOT change during the\n   session, and SHOULD NOT\
    \ change between sessions.  However, if it is\n   not possible to preserve the\
    \ unique identifier of a message in a\n   subsequent session, each subsequent\
    \ session MUST have a new unique\n   identifier validity value that is larger\
    \ than any that was used\n   previously.\n"
- title: 2.3.1.2.        Message Sequence Number Message Attribute
  contents:
  - "2.3.1.2.        Message Sequence Number Message Attribute\n   A relative position\
    \ from 1 to the number of messages in the mailbox.\n   This position MUST be ordered\
    \ by ascending unique identifier.  As\n   each new message is added, it is assigned\
    \ a message sequence number\n   that is 1 higher than the number of messages in\
    \ the mailbox before\n   that new message was added.\n   Message sequence numbers\
    \ can be reassigned during the session.  For\n   example, when a message is permanently\
    \ removed (expunged) from the\n   mailbox, the message sequence number for all\
    \ subsequent messages is\n   decremented.  Similarly, a new message can be assigned\
    \ a message\n   sequence number that was once held by some other message prior\
    \ to an\n   expunge.\n   In addition to accessing messages by relative position\
    \ in the\n   mailbox, message sequence numbers can be used in mathematical\n \
    \  calculations.  For example, if an untagged \"EXISTS 11\" is received,\n   and\
    \ previously an untagged \"8 EXISTS\" was received, three new\n   messages have\
    \ arrived with message sequence numbers of 9, 10, and 11.\n   Another example;\
    \ if message 287 in a 523 message mailbox has UID\n   12345, there are exactly\
    \ 286 messages which have lesser UIDs and 236\n   messages which have greater\
    \ UIDs.\n"
- title: 2.3.2.  Flags Message Attribute
  contents:
  - "2.3.2.  Flags Message Attribute\n   A list of zero or more named tokens associated\
    \ with the message.  A\n   flag is set by its addition to this list, and is cleared\
    \ by its\n   removal.  There are two types of flags in IMAP4rev1.  A flag of\n\
    \   either type may be permanent or session-only.\n   A system flag is a flag\
    \ name that is pre-defined in this\n   specification.  All system flags begin\
    \ with \"\\\".  Certain system\n   flags (\\Deleted and \\Seen) have special semantics\
    \ described\n   elsewhere.  The currently-defined system flags are:\n        \\\
    Seen       Message has been read\n        \\Answered   Message has been answered\n\
    \        \\Flagged    Message is \"flagged\" for urgent/special attention\n  \
    \      \\Deleted    Message is \"deleted\" for removal by later EXPUNGE\n    \
    \    \\Draft      Message has not completed composition (marked as a\n       \
    \             draft).\n        \\Recent     Message is \"recently\" arrived in\
    \ this mailbox.  This\n                    session is the first session to have\
    \ been notified\n                    about this message; subsequent sessions will\
    \ not see\n                    \\Recent set for this message.  This flag can not\
    \ be\n                    altered by the client.\n                    If it is\
    \ not possible to determine whether or not\n                    this session is\
    \ the first session to be notified\n                    about a message, then\
    \ that message SHOULD be\n                    considered recent.\n           \
    \         If multiple connections have the same mailbox\n                    selected\
    \ simultaneously, it is undefined which of\n                    these connections\
    \ will see newly-arrives messages\n                    with \\Recent set and which\
    \ will see it without\n                    \\Recent set.\n      A keyword is defined\
    \ by the server implementation.  Keywords do\n      not begin with \"\\\".  Servers\
    \ MAY permit the client to define new\n      keywords in the mailbox (see the\
    \ description of the\n      PERMANENTFLAGS response code for more information).\n\
    \      A flag may be permanent or session-only on a per-flag basis.\n      Permanent\
    \ flags are those which the client can add or remove\n      from the message flags\
    \ permanently; that is, subsequent sessions\n      will see any change in permanent\
    \ flags.  Changes to session\n      flags are valid only in that session.\n  \
    \    Note: The \\Recent system flag is a special case of a\n      session flag.\
    \  \\Recent can not be used as an argument in a\n      STORE command, and thus\
    \ can not be changed at all.\n"
- title: 2.3.3.  Internal Date Message Attribute
  contents:
  - "2.3.3.  Internal Date Message Attribute\n   The internal date and time of the\
    \ message on the server.  This is not\n   the date and time in the [RFC-822] header,\
    \ but rather a date and time\n   which reflects when the message was received.\
    \  In the case of\n   messages delivered via [SMTP], this SHOULD be the date and\
    \ time of\n   final delivery of the message as defined by [SMTP].  In the case\
    \ of\n   messages delivered by the IMAP4rev1 COPY command, this SHOULD be the\n\
    \   internal date and time of the source message.  In the case of\n   messages\
    \ delivered by the IMAP4rev1 APPEND command, this SHOULD be\n   the date and time\
    \ as specified in the APPEND command description.\n   All other cases are implementation\
    \ defined.\n"
- title: 2.3.4.  [RFC-822] Size Message Attribute
  contents:
  - "2.3.4.  [RFC-822] Size Message Attribute\n   The number of octets in the message,\
    \ as expressed in [RFC-822]\n   format.\n"
- title: 2.3.5.  Envelope Structure Message Attribute
  contents:
  - "2.3.5.  Envelope Structure Message Attribute\n   A parsed representation of the\
    \ [RFC-822] envelope information (not to\n   be confused with an [SMTP] envelope)\
    \ of the message.\n"
- title: 2.3.6.  Body Structure Message Attribute
  contents:
  - "2.3.6.  Body Structure Message Attribute\n   A parsed representation of the [MIME-IMB]\
    \ body structure information\n   of the message.\n"
- title: 2.4.    Message Texts
  contents:
  - "2.4.    Message Texts\n   In addition to being able to fetch the full [RFC-822]\
    \ text of a\n   message, IMAP4rev1 permits the fetching of portions of the full\n\
    \   message text.  Specifically, it is possible to fetch the [RFC-822]\n   message\
    \ header, [RFC-822] message body, a [MIME-IMB] body part, or a\n   [MIME-IMB]\
    \ header.\n"
- title: 3.      State and Flow Diagram
  contents:
  - "3.      State and Flow Diagram\n   An IMAP4rev1 server is in one of four states.\
    \  Most commands are\n   valid in only certain states.  It is a protocol error\
    \ for the client\n   to attempt a command while the command is in an inappropriate\
    \ state.\n   In this case, a server will respond with a BAD or NO (depending upon\n\
    \   server implementation) command completion result.\n"
- title: 3.1.    Non-Authenticated State
  contents:
  - "3.1.    Non-Authenticated State\n   In non-authenticated state, the client MUST\
    \ supply authentication\n   credentials before most commands will be permitted.\
    \  This state is\n   entered when a connection starts unless the connection has\
    \ been pre-\n   authenticated.\n"
- title: 3.2.    Authenticated State
  contents:
  - "3.2.    Authenticated State\n   In authenticated state, the client is authenticated\
    \ and MUST select a\n   mailbox to access before commands that affect messages\
    \ will be\n   permitted.  This state is entered when a pre-authenticated connection\n\
    \   starts, when acceptable authentication credentials have been\n   provided,\
    \ or after an error in selecting a mailbox.\n"
- title: 3.3.    Selected State
  contents:
  - "3.3.    Selected State\n   In selected state, a mailbox has been selected to\
    \ access.  This state\n   is entered when a mailbox has been successfully selected.\n"
- title: 3.4.    Logout State
  contents:
  - "3.4.    Logout State\n   In logout state, the connection is being terminated,\
    \ and the server\n   will close the connection.  This state can be entered as\
    \ a result of\n   a client request or by unilateral server decision.\n       \
    \     +--------------------------------------+\n            |initial connection\
    \ and server greeting|\n            +--------------------------------------+\n\
    \                      || (1)       || (2)        || (3)\n                   \
    \   VV           ||            ||\n            +-----------------+    ||     \
    \       ||\n            |non-authenticated|    ||            ||\n            +-----------------+\
    \    ||            ||\n             || (7)   || (4)       ||            ||\n \
    \            ||       VV           VV            ||\n             ||     +----------------+\
    \           ||\n             ||     | authenticated  |<=++       ||\n        \
    \     ||     +----------------+  ||       ||\n             ||       || (7)   ||\
    \ (5)   || (6)   ||\n             ||       ||       VV       ||       ||\n   \
    \          ||       ||    +--------+  ||       ||\n             ||       ||  \
    \  |selected|==++       ||\n             ||       ||    +--------+           ||\n\
    \             ||       ||       || (7)            ||\n             VV       VV\
    \       VV                VV\n            +--------------------------------------+\n\
    \            |     logout and close connection      |\n            +--------------------------------------+\n\
    \         (1) connection without pre-authentication (OK greeting)\n         (2)\
    \ pre-authenticated connection (PREAUTH greeting)\n         (3) rejected connection\
    \ (BYE greeting)\n         (4) successful LOGIN or AUTHENTICATE command\n    \
    \     (5) successful SELECT or EXAMINE command\n         (6) CLOSE command, or\
    \ failed SELECT or EXAMINE command\n         (7) LOGOUT command, server shutdown,\
    \ or connection closed\n"
- title: 4.      Data Formats
  contents:
  - "4.      Data Formats\n   IMAP4rev1 uses textual commands and responses.  Data\
    \ in IMAP4rev1 can\n   be in one of several forms: atom, number, string, parenthesized\
    \ list,\n   or NIL.\n"
- title: 4.1.    Atom
  contents:
  - "4.1.    Atom\n   An atom consists of one or more non-special characters.\n"
- title: 4.2.    Number
  contents:
  - "4.2.    Number\n   A number consists of one or more digit characters, and represents\
    \ a\n   numeric value.\n"
- title: 4.3.    String
  contents:
  - "4.3.    String\n   A string is in one of two forms: literal and quoted string.\
    \  The\n   literal form is the general form of string.  The quoted string form\n\
    \   is an alternative that avoids the overhead of processing a literal at\n  \
    \ the cost of limitations of characters that can be used in a quoted\n   string.\n\
    \   A literal is a sequence of zero or more octets (including CR and LF),\n  \
    \ prefix-quoted with an octet count in the form of an open brace (\"{\"),\n  \
    \ the number of octets, close brace (\"}\"), and CRLF.  In the case of\n   literals\
    \ transmitted from server to client, the CRLF is immediately\n   followed by the\
    \ octet data.  In the case of literals transmitted from\n   client to server,\
    \ the client MUST wait to receive a command\n   continuation request (described\
    \ later in this document) before\n   sending the octet data (and the remainder\
    \ of the command).\n   A quoted string is a sequence of zero or more 7-bit characters,\n\
    \   excluding CR and LF, with double quote (<\">) characters at each end.\n  \
    \ The empty string is represented as either \"\" (a quoted string with\n   zero\
    \ characters between double quotes) or as {0} followed by CRLF (a\n   literal\
    \ with an octet count of 0).\n      Note: Even if the octet count is 0, a client\
    \ transmitting a\n      literal MUST wait to receive a command continuation request.\n"
- title: 4.3.1.  8-bit and Binary Strings
  contents:
  - "4.3.1.  8-bit and Binary Strings\n   8-bit textual and binary mail is supported\
    \ through the use of a\n   [MIME-IMB] content transfer encoding.  IMAP4rev1 implementations\
    \ MAY\n   transmit 8-bit or multi-octet characters in literals, but SHOULD do\n\
    \   so only when the [CHARSET] is identified.\n   Although a BINARY body encoding\
    \ is defined, unencoded binary strings\n   are not permitted.  A \"binary string\"\
    \ is any string with NUL\n   characters.  Implementations MUST encode binary data\
    \ into a textual\n   form such as BASE64 before transmitting the data.  A string\
    \ with an\n   excessive amount of CTL characters MAY also be considered to be\n\
    \   binary.\n"
- title: 4.4.    Parenthesized List
  contents:
  - "4.4.    Parenthesized List\n   Data structures are represented as a \"parenthesized\
    \ list\"; a sequence\n   of data items, delimited by space, and bounded at each\
    \ end by\n   parentheses.  A parenthesized list can contain other parenthesized\n\
    \   lists, using multiple levels of parentheses to indicate nesting.\n   The empty\
    \ list is represented as () -- a parenthesized list with no\n   members.\n"
- title: 4.5.    NIL
  contents:
  - "4.5.    NIL\n   The special atom \"NIL\" represents the non-existence of a particular\n\
    \   data item that is represented as a string or parenthesized list, as\n   distinct\
    \ from the empty string \"\" or the empty parenthesized list ().\n"
- title: 5.      Operational Considerations
  contents:
  - '5.      Operational Considerations

    '
- title: 5.1.    Mailbox Naming
  contents:
  - "5.1.    Mailbox Naming\n   The interpretation of mailbox names is implementation-dependent.\n\
    \   However, the case-insensitive mailbox name INBOX is a special name\n   reserved\
    \ to mean \"the primary mailbox for this user on this server\".\n"
- title: 5.1.1.  Mailbox Hierarchy Naming
  contents:
  - "5.1.1.  Mailbox Hierarchy Naming\n   If it is desired to export hierarchical\
    \ mailbox names, mailbox names\n   MUST be left-to-right hierarchical using a\
    \ single character to\n   separate levels of hierarchy.  The same hierarchy separator\
    \ character\n   is used for all levels of hierarchy within a single name.\n"
- title: 5.1.2.  Mailbox Namespace Naming Convention
  contents:
  - "5.1.2.  Mailbox Namespace Naming Convention\n   By convention, the first hierarchical\
    \ element of any mailbox name\n   which begins with \"#\" identifies the \"namespace\"\
    \ of the remainder of\n   the name.  This makes it possible to disambiguate between\
    \ different\n   types of mailbox stores, each of which have their own namespaces.\n\
    \      For example, implementations which offer access to USENET\n      newsgroups\
    \ MAY use the \"#news\" namespace to partition the USENET\n      newsgroup namespace\
    \ from that of other mailboxes.  Thus, the\n      comp.mail.misc newsgroup would\
    \ have an mailbox name of\n      \"#news.comp.mail.misc\", and the name \"comp.mail.misc\"\
    \ could refer\n      to a different object (e.g. a user's private mailbox).\n"
- title: 5.1.3.  Mailbox International Naming Convention
  contents:
  - "5.1.3.  Mailbox International Naming Convention\n   By convention, international\
    \ mailbox names are specified using a\n   modified version of the UTF-7 encoding\
    \ described in [UTF-7].  The\n   purpose of these modifications is to correct\
    \ the following problems\n   with UTF-7:\n      1) UTF-7 uses the \"+\" character\
    \ for shifting; this conflicts with\n         the common use of \"+\" in mailbox\
    \ names, in particular USENET\n         newsgroup names.\n      2) UTF-7's encoding\
    \ is BASE64 which uses the \"/\" character; this\n         conflicts with the\
    \ use of \"/\" as a popular hierarchy delimiter.\n      3) UTF-7 prohibits the\
    \ unencoded usage of \"\\\"; this conflicts with\n         the use of \"\\\" as\
    \ a popular hierarchy delimiter.\n      4) UTF-7 prohibits the unencoded usage\
    \ of \"~\"; this conflicts with\n         the use of \"~\" in some servers as\
    \ a home directory indicator.\n      5) UTF-7 permits multiple alternate forms\
    \ to represent the same\n         string; in particular, printable US-ASCII chararacters\
    \ can be\n         represented in encoded form.\n   In modified UTF-7, printable\
    \ US-ASCII characters except for \"&\"\n   represent themselves; that is, characters\
    \ with octet values 0x20-0x25\n   and 0x27-0x7e.  The character \"&\" (0x26) is\
    \ represented by the two-\n   octet sequence \"&-\".\n   All other characters\
    \ (octet values 0x00-0x1f, 0x7f-0xff, and all\n   Unicode 16-bit octets) are represented\
    \ in modified BASE64, with a\n   further modification from [UTF-7] that \",\"\
    \ is used instead of \"/\".\n   Modified BASE64 MUST NOT be used to represent\
    \ any printing US-ASCII\n   character which can represent itself.\n   \"&\" is\
    \ used to shift to modified BASE64 and \"-\" to shift back to US-\n   ASCII. \
    \ All names start in US-ASCII, and MUST end in US-ASCII (that\n   is, a name that\
    \ ends with a Unicode 16-bit octet MUST end with a \"-\n   \").\n      For example,\
    \ here is a mailbox name which mixes English, Japanese,\n      and Chinese text:\
    \ ~peter/mail/&ZeVnLIqe-/&U,BTFw-\n"
- title: 5.2.    Mailbox Size and Message Status Updates
  contents:
  - "5.2.    Mailbox Size and Message Status Updates\n   At any time, a server can\
    \ send data that the client did not request.\n   Sometimes, such behavior is REQUIRED.\
    \  For example, agents other than\n   the server MAY add messages to the mailbox\
    \ (e.g. new mail delivery),\n   change the flags of message in the mailbox (e.g.\
    \ simultaneous access\n   to the same mailbox by multiple agents), or even remove\
    \ messages from\n   the mailbox.  A server MUST send mailbox size updates automatically\n\
    \   if a mailbox size change is observed during the processing of a\n   command.\
    \  A server SHOULD send message flag updates automatically,\n   without requiring\
    \ the client to request such updates explicitly.\n   Special rules exist for server\
    \ notification of a client about the\n   removal of messages to prevent synchronization\
    \ errors; see the\n   description of the EXPUNGE response for more detail.\n \
    \  Regardless of what implementation decisions a client makes on\n   remembering\
    \ data from the server, a client implementation MUST record\n   mailbox size updates.\
    \  It MUST NOT assume that any command after\n   initial mailbox selection will\
    \ return the size of the mailbox.\n"
- title: 5.3.    Response when no Command in Progress
  contents:
  - "5.3.    Response when no Command in Progress\n   Server implementations are permitted\
    \ to send an untagged response\n   (except for EXPUNGE) while there is no command\
    \ in progress.  Server\n   implementations that send such responses MUST deal\
    \ with flow control\n   considerations.  Specifically, they MUST either (1) verify\
    \ that the\n   size of the data does not exceed the underlying transport's available\n\
    \   window size, or (2) use non-blocking writes.\n"
- title: 5.4.    Autologout Timer
  contents:
  - "5.4.    Autologout Timer\n   If a server has an inactivity autologout timer,\
    \ that timer MUST be of\n   at least 30 minutes' duration.  The receipt of ANY\
    \ command from the\n   client during that interval SHOULD suffice to reset the\
    \ autologout\n   timer.\n"
- title: 5.5.    Multiple Commands in Progress
  contents:
  - "5.5.    Multiple Commands in Progress\n   The client MAY send another command\
    \ without waiting for the\n   completion result response of a command, subject\
    \ to ambiguity rules\n   (see below) and flow control constraints on the underlying\
    \ data\n   stream.  Similarly, a server MAY begin processing another command\n\
    \   before processing the current command to completion, subject to\n   ambiguity\
    \ rules.  However, any command continuation request responses\n   and command\
    \ continuations MUST be negotiated before any subsequent\n   command is initiated.\n\
    \   The exception is if an ambiguity would result because of a command\n   that\
    \ would affect the results of other commands.  Clients MUST NOT\n   send multiple\
    \ commands without waiting if an ambiguity would result.\n   If the server detects\
    \ a possible ambiguity, it MUST execute commands\n   to completion in the order\
    \ given by the client.\n   The most obvious example of ambiguity is when a command\
    \ would affect\n   the results of another command; for example, a FETCH of a message's\n\
    \   flags and a STORE of that same message's flags.\n   A non-obvious ambiguity\
    \ occurs with commands that permit an untagged\n   EXPUNGE response (commands\
    \ other than FETCH, STORE, and SEARCH),\n   since an untagged EXPUNGE response\
    \ can invalidate sequence numbers in\n   a subsequent command.  This is not a\
    \ problem for FETCH, STORE, or\n   SEARCH commands because servers are prohibited\
    \ from sending EXPUNGE\n   responses while any of those commands are in progress.\
    \  Therefore, if\n   the client sends any command other than FETCH, STORE, or\
    \ SEARCH, it\n   MUST wait for a response before sending a command with message\n\
    \   sequence numbers.\n   For example, the following non-waiting command sequences\
    \ are invalid:\n      FETCH + NOOP + STORE\n      STORE + COPY + FETCH\n     \
    \ COPY + COPY\n      CHECK + FETCH\n   The following are examples of valid non-waiting\
    \ command sequences:\n      FETCH + STORE + SEARCH + CHECK\n      STORE + COPY\
    \ + EXPUNGE\n"
- title: 6.      Client Commands
  contents:
  - "6.      Client Commands\n   IMAP4rev1 commands are described in this section.\
    \  Commands are\n   organized by the state in which the command is permitted.\
    \  Commands\n   which are permitted in multiple states are listed in the minimum\n\
    \   permitted state (for example, commands valid in authenticated and\n   selected\
    \ state are listed in the authenticated state commands).\n   Command arguments,\
    \ identified by \"Arguments:\" in the command\n   descriptions below, are described\
    \ by function, not by syntax.  The\n   precise syntax of command arguments is\
    \ described in the Formal Syntax\n   section.\n   Some commands cause specific\
    \ server responses to be returned; these\n   are identified by \"Responses:\"\
    \ in the command descriptions below.\n   See the response descriptions in the\
    \ Responses section for\n   information on these responses, and the Formal Syntax\
    \ section for the\n   precise syntax of these responses.  It is possible for server\
    \ data to\n   be transmitted as a result of any command; thus, commands that do\
    \ not\n   specifically require server data specify \"no specific responses for\n\
    \   this command\" instead of \"none\".\n   The \"Result:\" in the command description\
    \ refers to the possible\n   tagged status responses to a command, and any special\
    \ interpretation\n   of these status responses.\n"
- title: 6.1.    Client Commands - Any State
  contents:
  - "6.1.    Client Commands - Any State\n   The following commands are valid in any\
    \ state: CAPABILITY, NOOP, and\n   LOGOUT.\n"
- title: 6.1.1.  CAPABILITY Command
  contents:
  - "6.1.1.  CAPABILITY Command\n   Arguments:  none\n   Responses:  REQUIRED untagged\
    \ response: CAPABILITY\n   Result:     OK - capability completed\n           \
    \    BAD - command unknown or arguments invalid\n      The CAPABILITY command\
    \ requests a listing of capabilities that the\n      server supports.  The server\
    \ MUST send a single untagged\n      CAPABILITY response with \"IMAP4rev1\" as\
    \ one of the listed\n      capabilities before the (tagged) OK response.  This\
    \ listing of\n      capabilities is not dependent upon connection state or user.\
    \  It\n      is therefore not necessary to issue a CAPABILITY command more than\n\
    \      once in a connection.\n      A capability name which begins with \"AUTH=\"\
    \ indicates that the\n      server supports that particular authentication mechanism.\
    \  All\n      such names are, by definition, part of this specification.  For\n\
    \      example, the authorization capability for an experimental\n      \"blurdybloop\"\
    \ authenticator would be \"AUTH=XBLURDYBLOOP\" and not\n      \"XAUTH=BLURDYBLOOP\"\
    \ or \"XAUTH=XBLURDYBLOOP\".\n      Other capability names refer to extensions,\
    \ revisions, or\n      amendments to this specification.  See the documentation\
    \ of the\n      CAPABILITY response for additional information.  No capabilities,\n\
    \      beyond the base IMAP4rev1 set defined in this specification, are\n    \
    \  enabled without explicit client action to invoke the capability.\n      See\
    \ the section entitled \"Client Commands -\n      Experimental/Expansion\" for\
    \ information about the form of site or\n      implementation-specific capabilities.\n\
    \   Example:    C: abcd CAPABILITY\n               S: * CAPABILITY IMAP4rev1 AUTH=KERBEROS_V4\n\
    \               S: abcd OK CAPABILITY completed\n"
- title: 6.1.2.  NOOP Command
  contents:
  - "6.1.2.  NOOP Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command (but see below)\n   Result:     OK - noop completed\n     \
    \          BAD - command unknown or arguments invalid\n      The NOOP command\
    \ always succeeds.  It does nothing.\n      Since any command can return a status\
    \ update as untagged data, the\n      NOOP command can be used as a periodic poll\
    \ for new messages or\n      message status updates during a period of inactivity.\
    \  The NOOP\n      command can also be used to reset any inactivity autologout\
    \ timer\n      on the server.\n   Example:    C: a002 NOOP\n               S:\
    \ a002 OK NOOP completed\n                  . . .\n               C: a047 NOOP\n\
    \               S: * 22 EXPUNGE\n               S: * 23 EXISTS\n             \
    \  S: * 3 RECENT\n               S: * 14 FETCH (FLAGS (\\Seen \\Deleted))\n  \
    \             S: a047 OK NOOP completed\n"
- title: 6.1.3.  LOGOUT Command
  contents:
  - "6.1.3.  LOGOUT Command\n   Arguments:  none\n   Responses:  REQUIRED untagged\
    \ response: BYE\n   Result:     OK - logout completed\n               BAD - command\
    \ unknown or arguments invalid\n      The LOGOUT command informs the server that\
    \ the client is done with\n      the connection.  The server MUST send a BYE untagged\
    \ response\n      before the (tagged) OK response, and then close the network\n\
    \      connection.\n   Example:    C: A023 LOGOUT\n               S: * BYE IMAP4rev1\
    \ Server logging out\n               S: A023 OK LOGOUT completed\n           \
    \    (Server and client then close the connection)\n"
- title: 6.2.    Client Commands - Non-Authenticated State
  contents:
  - "6.2.    Client Commands - Non-Authenticated State\n   In non-authenticated state,\
    \ the AUTHENTICATE or LOGIN command\n   establishes authentication and enter authenticated\
    \ state.  The\n   AUTHENTICATE command provides a general mechanism for a variety\
    \ of\n   authentication techniques, whereas the LOGIN command uses the\n   traditional\
    \ user name and plaintext password pair.\n   Server implementations MAY allow\
    \ non-authenticated access to certain\n   mailboxes.  The convention is to use\
    \ a LOGIN command with the userid\n   \"anonymous\".  A password is REQUIRED.\
    \  It is implementation-dependent\n   what requirements, if any, are placed on\
    \ the password and what access\n   restrictions are placed on anonymous users.\n\
    \   Once authenticated (including as anonymous), it is not possible to\n   re-enter\
    \ non-authenticated state.\n   In addition to the universal commands (CAPABILITY,\
    \ NOOP, and LOGOUT),\n   the following commands are valid in non-authenticated\
    \ state:\n   AUTHENTICATE and LOGIN.\n"
- title: 6.2.1.  AUTHENTICATE Command
  contents:
  - "6.2.1.  AUTHENTICATE Command\n   Arguments:  authentication mechanism name\n\
    \   Responses:  continuation data can be requested\n   Result:     OK - authenticate\
    \ completed, now in authenticated state\n               NO - authenticate failure:\
    \ unsupported authentication\n                    mechanism, credentials rejected\n\
    \              BAD - command unknown or arguments invalid,\n                 \
    \   authentication exchange cancelled\n      The AUTHENTICATE command indicates\
    \ an authentication mechanism,\n      such as described in [IMAP-AUTH], to the\
    \ server.  If the server\n      supports the requested authentication mechanism,\
    \ it performs an\n      authentication protocol exchange to authenticate and identify\
    \ the\n      client.  It MAY also negotiate an OPTIONAL protection mechanism\n\
    \      for subsequent protocol interactions.  If the requested\n      authentication\
    \ mechanism is not supported, the server SHOULD\n      reject the AUTHENTICATE\
    \ command by sending a tagged NO response.\n      The authentication protocol\
    \ exchange consists of a series of\n      server challenges and client answers\
    \ that are specific to the\n      authentication mechanism.  A server challenge\
    \ consists of a\n      command continuation request response with the \"+\" token\
    \ followed\n      by a BASE64 encoded string.  The client answer consists of a\
    \ line\n      consisting of a BASE64 encoded string.  If the client wishes to\n\
    \      cancel an authentication exchange, it issues a line with a single\n   \
    \   \"*\".  If the server receives such an answer, it MUST reject the\n      AUTHENTICATE\
    \ command by sending a tagged BAD response.\n      A protection mechanism provides\
    \ integrity and privacy protection\n      to the connection.  If a protection\
    \ mechanism is negotiated, it is\n      applied to all subsequent data sent over\
    \ the connection.  The\n      protection mechanism takes effect immediately following\
    \ the CRLF\n      that concludes the authentication exchange for the client, and\
    \ the\n      CRLF of the tagged OK response for the server.  Once the\n      protection\
    \ mechanism is in effect, the stream of command and\n      response octets is\
    \ processed into buffers of ciphertext.  Each\n      buffer is transferred over\
    \ the connection as a stream of octets\n      prepended with a four octet field\
    \ in network byte order that\n      represents the length of the following data.\
    \  The maximum\n      ciphertext buffer length is defined by the protection mechanism.\n\
    \      Authentication mechanisms are OPTIONAL.  Protection mechanisms are\n  \
    \    also OPTIONAL; an authentication mechanism MAY be implemented\n      without\
    \ any protection mechanism.  If an AUTHENTICATE command\n      fails with a NO\
    \ response, the client MAY try another\n      authentication mechanism by issuing\
    \ another AUTHENTICATE command,\n      or MAY attempt to authenticate by using\
    \ the LOGIN command.  In\n      other words, the client MAY request authentication\
    \ types in\n      decreasing order of preference, with the LOGIN command as a\
    \ last\n      resort.\n   Example:    S: * OK KerberosV4 IMAP4rev1 Server\n  \
    \             C: A001 AUTHENTICATE KERBEROS_V4\n               S: + AmFYig==\n\
    \               C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n      \
    \            +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n            \
    \      WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n               S: + or//EoAADZI=\n\
    \               C: DiAF5A4gA+oOIALuBkAAmw==\n               S: A001 OK Kerberos\
    \ V4 authentication successful\n      Note: the line breaks in the first client\
    \ answer are for editorial\n      clarity and are not in real authenticators.\n"
- title: 6.2.2.  LOGIN Command
  contents:
  - "6.2.2.  LOGIN Command\n   Arguments:  user name\n               password\n  \
    \ Responses:  no specific responses for this command\n   Result:     OK - login\
    \ completed, now in authenticated state\n               NO - login failure: user\
    \ name or password rejected\n               BAD - command unknown or arguments\
    \ invalid\n      The LOGIN command identifies the client to the server and carries\n\
    \      the plaintext password authenticating this user.\n   Example:    C: a001\
    \ LOGIN SMITH SESAME\n               S: a001 OK LOGIN completed\n"
- title: 6.3.    Client Commands - Authenticated State
  contents:
  - "6.3.    Client Commands - Authenticated State\n   In authenticated state, commands\
    \ that manipulate mailboxes as atomic\n   entities are permitted.  Of these commands,\
    \ the SELECT and EXAMINE\n   commands will select a mailbox for access and enter\
    \ selected state.\n   In addition to the universal commands (CAPABILITY, NOOP,\
    \ and LOGOUT),\n   the following commands are valid in authenticated state: SELECT,\n\
    \   EXAMINE, CREATE, DELETE, RENAME, SUBSCRIBE, UNSUBSCRIBE, LIST, LSUB,\n   STATUS,\
    \ and APPEND.\n"
- title: 6.3.1.  SELECT Command
  contents:
  - "6.3.1.  SELECT Command\n   Arguments:  mailbox name\n   Responses:  REQUIRED\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               OPTIONAL OK untagged\
    \ responses: UNSEEN, PERMANENTFLAGS\n   Result:     OK - select completed, now\
    \ in selected state\n               NO - select failure, now in authenticated\
    \ state: no\n                    such mailbox, can't access mailbox\n        \
    \       BAD - command unknown or arguments invalid\n   The SELECT command selects\
    \ a mailbox so that messages in the\n   mailbox can be accessed.  Before returning\
    \ an OK to the client,\n   the server MUST send the following untagged data to\
    \ the client:\n      FLAGS       Defined flags in the mailbox.  See the description\n\
    \                  of the FLAGS response for more detail.\n      <n> EXISTS  The\
    \ number of messages in the mailbox.  See the\n                  description of\
    \ the EXISTS response for more detail.\n      <n> RECENT  The number of messages\
    \ with the \\Recent flag set.\n                  See the description of the RECENT\
    \ response for more\n                  detail.\n      OK [UIDVALIDITY <n>]\n \
    \                 The unique identifier validity value.  See the\n           \
    \       description of the UID command for more detail.\n   to define the initial\
    \ state of the mailbox at the client.\n   The server SHOULD also send an UNSEEN\
    \ response code in an OK\n   untagged response, indicating the message sequence\
    \ number of the\n   first unseen message in the mailbox.\n   If the client can\
    \ not change the permanent state of one or more of\n   the flags listed in the\
    \ FLAGS untagged response, the server SHOULD\n   send a PERMANENTFLAGS response\
    \ code in an OK untagged response,\n   listing the flags that the client can change\
    \ permanently.\n   Only one mailbox can be selected at a time in a connection;\n\
    \   simultaneous access to multiple mailboxes requires multiple\n   connections.\
    \  The SELECT command automatically deselects any\n   currently selected mailbox\
    \ before attempting the new selection.\n   Consequently, if a mailbox is selected\
    \ and a SELECT command that\n   fails is attempted, no mailbox is selected.\n\
    \   If the client is permitted to modify the mailbox, the server\n   SHOULD prefix\
    \ the text of the tagged OK response with the\n         \"[READ-WRITE]\" response\
    \ code.\n      If the client is not permitted to modify the mailbox but is\n \
    \     permitted read access, the mailbox is selected as read-only, and\n     \
    \ the server MUST prefix the text of the tagged OK response to\n      SELECT with\
    \ the \"[READ-ONLY]\" response code.  Read-only access\n      through SELECT differs\
    \ from the EXAMINE command in that certain\n      read-only mailboxes MAY permit\
    \ the change of permanent state on a\n      per-user (as opposed to global) basis.\
    \  Netnews messages marked in\n      a server-based .newsrc file are an example\
    \ of such per-user\n      permanent state that can be modified with read-only\
    \ mailboxes.\n   Example:    C: A142 SELECT INBOX\n               S: * 172 EXISTS\n\
    \               S: * 1 RECENT\n               S: * OK [UNSEEN 12] Message 12 is\
    \ first unseen\n               S: * OK [UIDVALIDITY 3857529045] UIDs valid\n \
    \              S: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n  \
    \             S: * OK [PERMANENTFLAGS (\\Deleted \\Seen \\*)] Limited\n      \
    \         S: A142 OK [READ-WRITE] SELECT completed\n"
- title: 6.3.2.  EXAMINE Command
  contents:
  - "6.3.2.  EXAMINE Command\n   Arguments:  mailbox name\n   Responses:  REQUIRED\
    \ untagged responses: FLAGS, EXISTS, RECENT\n               OPTIONAL OK untagged\
    \ responses: UNSEEN, PERMANENTFLAGS\n   Result:     OK - examine completed, now\
    \ in selected state\n               NO - examine failure, now in authenticated\
    \ state: no\n                    such mailbox, can't access mailbox\n        \
    \       BAD - command unknown or arguments invalid\n      The EXAMINE command\
    \ is identical to SELECT and returns the same\n      output; however, the selected\
    \ mailbox is identified as read-only.\n      No changes to the permanent state\
    \ of the mailbox, including\n      per-user state, are permitted.\n      The text\
    \ of the tagged OK response to the EXAMINE command MUST\n      begin with the\
    \ \"[READ-ONLY]\" response code.\n   Example:    C: A932 EXAMINE blurdybloop\n\
    \               S: * 17 EXISTS\n               S: * 2 RECENT\n               S:\
    \ * OK [UNSEEN 8] Message 8 is first unseen\n               S: * OK [UIDVALIDITY\
    \ 3857529045] UIDs valid\n               S: * FLAGS (\\Answered \\Flagged \\Deleted\
    \ \\Seen \\Draft)\n               S: * OK [PERMANENTFLAGS ()] No permanent flags\
    \ permitted\n               S: A932 OK [READ-ONLY] EXAMINE completed\n"
- title: 6.3.3.  CREATE Command
  contents:
  - "6.3.3.  CREATE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - create completed\n         \
    \      NO - create failure: can't create mailbox with that name\n            \
    \   BAD - command unknown or arguments invalid\n      The CREATE command creates\
    \ a mailbox with the given name.  An OK\n      response is returned only if a\
    \ new mailbox with that name has been\n      created.  It is an error to attempt\
    \ to create INBOX or a mailbox\n      with a name that refers to an extant mailbox.\
    \  Any error in\n      creation will return a tagged NO response.\n      If the\
    \ mailbox name is suffixed with the server's hierarchy\n      separator character\
    \ (as returned from the server by a LIST\n      command), this is a declaration\
    \ that the client intends to create\n      mailbox names under this name in the\
    \ hierarchy.  Server\n      implementations that do not require this declaration\
    \ MUST ignore\n      it.\n      If the server's hierarchy separator character\
    \ appears elsewhere in\n      the name, the server SHOULD create any superior\
    \ hierarchical names\n      that are needed for the CREATE command to complete\
    \ successfully.\n      In other words, an attempt to create \"foo/bar/zap\" on\
    \ a server in\n      which \"/\" is the hierarchy separator character SHOULD create\
    \ foo/\n      and foo/bar/ if they do not already exist.\n      If a new mailbox\
    \ is created with the same name as a mailbox which\n      was deleted, its unique\
    \ identifiers MUST be greater than any\n      unique identifiers used in the previous\
    \ incarnation of the mailbox\n      UNLESS the new incarnation has a different\
    \ unique identifier\n      validity value.  See the description of the UID command\
    \ for more\n      detail.\n   Example:    C: A003 CREATE owatagusiam/\n      \
    \         S: A003 OK CREATE completed\n               C: A004 CREATE owatagusiam/blurdybloop\n\
    \               S: A004 OK CREATE completed\n      Note: the interpretation of\
    \ this example depends on whether \"/\"\n      was returned as the hierarchy separator\
    \ from LIST.  If \"/\" is the\n      hierarchy separator, a new level of hierarchy\
    \ named \"owatagusiam\"\n      with a member called \"blurdybloop\" is created.\
    \  Otherwise, two\n      mailboxes at the same hierarchy level are created.\n"
- title: 6.3.4.  DELETE Command
  contents:
  - "6.3.4.  DELETE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - delete completed\n         \
    \      NO - delete failure: can't delete mailbox with that name\n            \
    \   BAD - command unknown or arguments invalid\n      The DELETE command permanently\
    \ removes the mailbox with the given\n      name.  A tagged OK response is returned\
    \ only if the mailbox has\n      been deleted.  It is an error to attempt to delete\
    \ INBOX or a\n      mailbox name that does not exist.\n      The DELETE command\
    \ MUST NOT remove inferior hierarchical names.\n      For example, if a mailbox\
    \ \"foo\" has an inferior \"foo.bar\"\n      (assuming \".\" is the hierarchy\
    \ delimiter character), removing\n      \"foo\" MUST NOT remove \"foo.bar\". \
    \ It is an error to attempt to\n      delete a name that has inferior hierarchical\
    \ names and also has\n      the \\Noselect mailbox name attribute (see the description\
    \ of the\n      LIST response for more details).\n      It is permitted to delete\
    \ a name that has inferior hierarchical\n      names and does not have the \\\
    Noselect mailbox name attribute.  In\n      this case, all messages in that mailbox\
    \ are removed, and the name\n      will acquire the \\Noselect mailbox name attribute.\n\
    \      The value of the highest-used unique identifier of the deleted\n      mailbox\
    \ MUST be preserved so that a new mailbox created with the\n      same name will\
    \ not reuse the identifiers of the former\n      incarnation, UNLESS the new incarnation\
    \ has a different unique\n      identifier validity value.  See the description\
    \ of the UID command\n      for more detail.\n   Examples:   C: A682 LIST \"\"\
    \ *\n               S: * LIST () \"/\" blurdybloop\n               S: * LIST (\\\
    Noselect) \"/\" foo\n               S: * LIST () \"/\" foo/bar\n             \
    \  S: A682 OK LIST completed\n               C: A683 DELETE blurdybloop\n    \
    \           S: A683 OK DELETE completed\n               C: A684 DELETE foo\n \
    \              S: A684 NO Name \"foo\" has inferior hierarchical names\n     \
    \          C: A685 DELETE foo/bar\n               S: A685 OK DELETE Completed\n\
    \               C: A686 LIST \"\" *\n               S: * LIST (\\Noselect) \"\
    /\" foo\n               S: A686 OK LIST completed\n               C: A687 DELETE\
    \ foo\n               S: A687 OK DELETE Completed\n               C: A82 LIST\
    \ \"\" *\n               S: * LIST () \".\" blurdybloop\n               S: * LIST\
    \ () \".\" foo\n               S: * LIST () \".\" foo.bar\n               S: A82\
    \ OK LIST completed\n               C: A83 DELETE blurdybloop\n              \
    \ S: A83 OK DELETE completed\n               C: A84 DELETE foo\n             \
    \  S: A84 OK DELETE Completed\n               C: A85 LIST \"\" *\n           \
    \    S: * LIST () \".\" foo.bar\n               S: A85 OK LIST completed\n   \
    \            C: A86 LIST \"\" %\n               S: * LIST (\\Noselect) \".\" foo\n\
    \               S: A86 OK LIST completed\n"
- title: 6.3.5.  RENAME Command
  contents:
  - "6.3.5.  RENAME Command\n   Arguments:  existing mailbox name\n              \
    \ new mailbox name\n   Responses:  no specific responses for this command\n  \
    \ Result:     OK - rename completed\n               NO - rename failure: can't\
    \ rename mailbox with that name,\n                    can't rename to mailbox\
    \ with that name\n               BAD - command unknown or arguments invalid\n\
    \      The RENAME command changes the name of a mailbox.  A tagged OK\n      response\
    \ is returned only if the mailbox has been renamed.  It is\n      an error to\
    \ attempt to rename from a mailbox name that does not\n      exist or to a mailbox\
    \ name that already exists.  Any error in\n      renaming will return a tagged\
    \ NO response.\n      If the name has inferior hierarchical names, then the inferior\n\
    \      hierarchical names MUST also be renamed.  For example, a rename of\n  \
    \    \"foo\" to \"zap\" will rename \"foo/bar\" (assuming \"/\" is the\n     \
    \ hierarchy delimiter character) to \"zap/bar\".\n      The value of the highest-used\
    \ unique identifier of the old mailbox\n      name MUST be preserved so that a\
    \ new mailbox created with the same\n      name will not reuse the identifiers\
    \ of the former incarnation,\n      UNLESS the new incarnation has a different\
    \ unique identifier\n      validity value.  See the description of the UID command\
    \ for more\n      detail.\n      Renaming INBOX is permitted, and has special\
    \ behavior.  It moves\n      all messages in INBOX to a new mailbox with the given\
    \ name,\n      leaving INBOX empty.  If the server implementation supports\n \
    \     inferior hierarchical names of INBOX, these are unaffected by a\n      rename\
    \ of INBOX.\n   Examples:   C: A682 LIST \"\" *\n               S: * LIST () \"\
    /\" blurdybloop\n               S: * LIST (\\Noselect) \"/\" foo\n           \
    \    S: * LIST () \"/\" foo/bar\n               S: A682 OK LIST completed\n  \
    \             C: A683 RENAME blurdybloop sarasoop\n               S: A683 OK RENAME\
    \ completed\n               C: A684 RENAME foo zowie\n               S: A684 OK\
    \ RENAME Completed\n               C: A685 LIST \"\" *\n               S: * LIST\
    \ () \"/\" sarasoop\n               S: * LIST (\\Noselect) \"/\" zowie\n     \
    \          S: * LIST () \"/\" zowie/bar\n               S: A685 OK LIST completed\n\
    \               C: Z432 LIST \"\" *\n               S: * LIST () \".\" INBOX\n\
    \               S: * LIST () \".\" INBOX.bar\n               S: Z432 OK LIST completed\n\
    \               C: Z433 RENAME INBOX old-mail\n               S: Z433 OK RENAME\
    \ completed\n               C: Z434 LIST \"\" *\n               S: * LIST () \"\
    .\" INBOX\n               S: * LIST () \".\" INBOX.bar\n               S: * LIST\
    \ () \".\" old-mail\n               S: Z434 OK LIST completed\n"
- title: 6.3.6.  SUBSCRIBE Command
  contents:
  - "6.3.6.  SUBSCRIBE Command\n   Arguments:  mailbox\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - subscribe completed\n      \
    \         NO - subscribe failure: can't subscribe to that name\n             \
    \  BAD - command unknown or arguments invalid\n      The SUBSCRIBE command adds\
    \ the specified mailbox name to the\n      server's set of \"active\" or \"subscribed\"\
    \ mailboxes as returned by\n      the LSUB command.  This command returns a tagged\
    \ OK response only\n      if the subscription is successful.\n      A server MAY\
    \ validate the mailbox argument to SUBSCRIBE to verify\n      that it exists.\
    \  However, it MUST NOT unilaterally remove an\n      existing mailbox name from\
    \ the subscription list even if a mailbox\n      by that name no longer exists.\n\
    \      Note: this requirement is because some server sites may routinely\n   \
    \   remove a mailbox with a well-known name (e.g.  \"system-alerts\")\n      after\
    \ its contents expire, with the intention of recreating it\n      when new contents\
    \ are appropriate.\n   Example:    C: A002 SUBSCRIBE #news.comp.mail.mime\n  \
    \             S: A002 OK SUBSCRIBE completed\n"
- title: 6.3.7.  UNSUBSCRIBE Command
  contents:
  - "6.3.7.  UNSUBSCRIBE Command\n   Arguments:  mailbox name\n   Responses:  no specific\
    \ responses for this command\n   Result:     OK - unsubscribe completed\n    \
    \           NO - unsubscribe failure: can't unsubscribe that name\n          \
    \     BAD - command unknown or arguments invalid\n      The UNSUBSCRIBE command\
    \ removes the specified mailbox name from\n      the server's set of \"active\"\
    \ or \"subscribed\" mailboxes as returned\n      by the LSUB command.  This command\
    \ returns a tagged OK response\n      only if the unsubscription is successful.\n\
    \   Example:    C: A002 UNSUBSCRIBE #news.comp.mail.mime\n               S: A002\
    \ OK UNSUBSCRIBE completed\n"
- title: 6.3..8.  LIST Command
  contents:
  - "6.3..8.  LIST Command\n   Arguments:  reference name\n               mailbox\
    \ name with possible wildcards\n   Responses:  untagged responses: LIST\n   Result:\
    \     OK - list completed\n               NO - list failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LIST command returns a subset of names from the complete set\n      of all names\
    \ available to the client.  Zero or more untagged LIST\n      replies are returned,\
    \ containing the name attributes, hierarchy\n      delimiter, and name; see the\
    \ description of the LIST reply for\n      more detail.\n      The LIST command\
    \ SHOULD return its data quickly, without undue\n      delay.  For example, it\
    \ SHOULD NOT go to excess trouble to\n      calculate \\Marked or \\Unmarked status\
    \ or perform other processing;\n      if each name requires 1 second of processing,\
    \ then a list of 1200\n      names would take 20 minutes!\n      An empty (\"\"\
    \ string) reference name argument indicates that the\n      mailbox name is interpreted\
    \ as by SELECT. The returned mailbox\n      names MUST match the supplied mailbox\
    \ name pattern.  A non-empty\n      reference name argument is the name of a mailbox\
    \ or a level of\n      mailbox hierarchy, and indicates a context in which the\
    \ mailbox\n      name is interpreted in an implementation-defined manner.\n  \
    \    An empty (\"\" string) mailbox name argument is a special request to\n  \
    \    return the hierarchy delimiter and the root name of the name given\n    \
    \  in the reference.  The value returned as the root MAY be null if\n      the\
    \ reference is non-rooted or is null.  In all cases, the\n      hierarchy delimiter\
    \ is returned.  This permits a client to get the\n      hierarchy delimiter even\
    \ when no mailboxes by that name currently\n      exist.\n      The reference\
    \ and mailbox name arguments are interpreted, in an\n      implementation-dependent\
    \ fashion, into a canonical form that\n      represents an unambiguous left-to-right\
    \ hierarchy.  The returned\n      mailbox names will be in the interpreted form.\n\
    \      Any part of the reference argument that is included in the\n      interpreted\
    \ form SHOULD prefix the interpreted form.  It SHOULD\n      also be in the same\
    \ form as the reference name argument.  This\n      rule permits the client to\
    \ determine if the returned mailbox name\n      is in the context of the reference\
    \ argument, or if something about\n      the mailbox argument overrode the reference\
    \ argument.  Without\n      this rule, the client would have to have knowledge\
    \ of the server's\n      naming semantics including what characters are \"breakouts\"\
    \ that\n      override a naming context.\n      For example, here are some examples\
    \ of how references and mailbox\n      names might be interpreted on a UNIX-based\
    \ server:\n               Reference     Mailbox Name  Interpretation\n       \
    \        ------------  ------------  --------------\n               ~smith/Mail/\
    \  foo.*         ~smith/Mail/foo.*\n               archive/      %           \
    \  archive/%\n               #news.        comp.mail.*   #news.comp.mail.*\n \
    \              ~smith/Mail/  /usr/doc/foo  /usr/doc/foo\n               archive/\
    \      ~fred/Mail/*  ~fred/Mail/*\n      The first three examples demonstrate\
    \ interpretations in the\n      context of the reference argument.  Note that\
    \ \"~smith/Mail\" SHOULD\n      NOT be transformed into something like \"/u2/users/smith/Mail\"\
    , or\n      it would be impossible for the client to determine that the\n    \
    \  interpretation was in the context of the reference.\n      The character \"\
    *\" is a wildcard, and matches zero or more\n      characters at this position.\
    \  The character \"%\" is similar to \"*\",\n      but it does not match a hierarchy\
    \ delimiter.  If the \"%\" wildcard\n      is the last character of a mailbox\
    \ name argument, matching levels\n      of hierarchy are also returned.  If these\
    \ levels of hierarchy are\n      not also selectable mailboxes, they are returned\
    \ with the\n      \\Noselect mailbox name attribute (see the description of the\
    \ LIST\n      response for more details).\n      Server implementations are permitted\
    \ to \"hide\" otherwise\n      accessible mailboxes from the wildcard characters,\
    \ by preventing\n      certain characters or names from matching a wildcard in\
    \ certain\n      situations.  For example, a UNIX-based server might restrict\
    \ the\n      interpretation of \"*\" so that an initial \"/\" character does not\n\
    \      match.\n      The special name INBOX is included in the output from LIST,\
    \ if\n      INBOX is supported by this server for this user and if the\n     \
    \ uppercase string \"INBOX\" matches the interpreted reference and\n      mailbox\
    \ name arguments with wildcards as described above.  The\n      criteria for omitting\
    \ INBOX is whether SELECT INBOX will return\n      failure; it is not relevant\
    \ whether the user's real INBOX resides\n      on this or some other server.\n\
    \   Example:    C: A101 LIST \"\" \"\"\n               S: * LIST (\\Noselect)\
    \ \"/\" \"\"\n               S: A101 OK LIST Completed\n               C: A102\
    \ LIST #news.comp.mail.misc \"\"\n               S: * LIST (\\Noselect) \".\"\
    \ #news.\n               S: A102 OK LIST Completed\n               C: A103 LIST\
    \ /usr/staff/jones \"\"\n               S: * LIST (\\Noselect) \"/\" /\n     \
    \          S: A103 OK LIST Completed\n               C: A202 LIST ~/Mail/ %\n\
    \               S: * LIST (\\Noselect) \"/\" ~/Mail/foo\n               S: * LIST\
    \ () \"/\" ~/Mail/meetings\n               S: A202 OK LIST completed\n"
- title: 6.3.9.  LSUB Command
  contents:
  - "6.3.9.  LSUB Command\n   Arguments:  reference name\n               mailbox name\
    \ with possible wildcards\n   Responses:  untagged responses: LSUB\n   Result:\
    \     OK - lsub completed\n               NO - lsub failure: can't list that reference\
    \ or name\n               BAD - command unknown or arguments invalid\n      The\
    \ LSUB command returns a subset of names from the set of names\n      that the\
    \ user has declared as being \"active\" or \"subscribed\".\n      Zero or more\
    \ untagged LSUB replies are returned.  The arguments to\n      LSUB are in the\
    \ same form as those for LIST.\n      A server MAY validate the subscribed names\
    \ to see if they still\n      exist.  If a name does not exist, it SHOULD be flagged\
    \ with the\n      \\Noselect attribute in the LSUB response.  The server MUST\
    \ NOT\n      unilaterally remove an existing mailbox name from the subscription\n\
    \      list even if a mailbox by that name no longer exists.\n   Example:    C:\
    \ A002 LSUB \"#news.\" \"comp.mail.*\"\n               S: * LSUB () \".\" #news.comp.mail.mime\n\
    \               S: * LSUB () \".\" #news.comp.mail.misc\n               S: A002\
    \ OK LSUB completed\n"
- title: 6.3.10. STATUS Command
  contents:
  - "6.3.10. STATUS Command\n   Arguments:  mailbox name\n               status data\
    \ item names\n   Responses:  untagged responses: STATUS\n   Result:     OK - status\
    \ completed\n               NO - status failure: no status for that name\n   \
    \            BAD - command unknown or arguments invalid\n      The STATUS command\
    \ requests the status of the indicated mailbox.\n      It does not change the\
    \ currently selected mailbox, nor does it\n      affect the state of any messages\
    \ in the queried mailbox (in\n      particular, STATUS MUST NOT cause messages\
    \ to lose the \\Recent\n      flag).\n      The STATUS command provides an alternative\
    \ to opening a second\n      IMAP4rev1 connection and doing an EXAMINE command\
    \ on a mailbox to\n      query that mailbox's status without deselecting the current\n\
    \      mailbox in the first IMAP4rev1 connection.\n      Unlike the LIST command,\
    \ the STATUS command is not guaranteed to\n      be fast in its response.  In\
    \ some implementations, the server is\n      obliged to open the mailbox read-only\
    \ internally to obtain certain\n      status information.  Also unlike the LIST\
    \ command, the STATUS\n      command does not accept wildcards.\n      The currently\
    \ defined status data items that can be requested are:\n      MESSAGES       The\
    \ number of messages in the mailbox.\n      RECENT         The number of messages\
    \ with the \\Recent flag set.\n      UIDNEXT        The next UID value that will\
    \ be assigned to a new\n                     message in the mailbox.  It is guaranteed\
    \ that this\n                     value will not change unless new messages are\
    \ added\n                     to the mailbox; and that it will change when new\n\
    \                     messages are added even if those new messages are\n    \
    \                 subsequently expunged.\n      UIDVALIDITY    The unique identifier\
    \ validity value of the\n                     mailbox.\n      UNSEEN         The\
    \ number of messages which do not have the \\Seen\n                     flag set.\n\
    \      Example:    C: A042 STATUS blurdybloop (UIDNEXT MESSAGES)\n           \
    \       S: * STATUS blurdybloop (MESSAGES 231 UIDNEXT 44292)\n               \
    \   S: A042 OK STATUS completed\n"
- title: 6.3.11. APPEND Command
  contents:
  - "6.3.11. APPEND Command\n   Arguments:  mailbox name\n               OPTIONAL\
    \ flag parenthesized list\n               OPTIONAL date/time string\n        \
    \       message literal\n   Responses:  no specific responses for this command\n\
    \   Result:     OK - append completed\n               NO - append error: can't\
    \ append to that mailbox, error\n                    in flags or date/time or\
    \ message text\n               BAD - command unknown or arguments invalid\n  \
    \    The APPEND command appends the literal argument as a new message\n      to\
    \ the end of the specified destination mailbox.  This argument\n      SHOULD be\
    \ in the format of an [RFC-822] message.  8-bit characters\n      are permitted\
    \ in the message.  A server implementation that is\n      unable to preserve 8-bit\
    \ data properly MUST be able to reversibly\n      convert 8-bit APPEND data to\
    \ 7-bit using a [MIME-IMB] content\n      transfer encoding.\n      Note: There\
    \ MAY be exceptions, e.g. draft messages, in which\n      required [RFC-822] header\
    \ lines are omitted in the message literal\n      argument to APPEND.  The full\
    \ implications of doing so MUST be\n      understood and carefully weighed.\n\
    \   If a flag parenthesized list is specified, the flags SHOULD be set in\n  \
    \ the resulting message; otherwise, the flag list of the resulting\n   message\
    \ is set empty by default.\n   If a date_time is specified, the internal date\
    \ SHOULD be set in the\n   resulting message; otherwise, the internal date of\
    \ the resulting\n   message is set to the current date and time by default.\n\
    \   If the append is unsuccessful for any reason, the mailbox MUST be\n   restored\
    \ to its state before the APPEND attempt; no partial appending\n   is permitted.\n\
    \   If the destination mailbox does not exist, a server MUST return an\n   error,\
    \ and MUST NOT automatically create the mailbox.  Unless it is\n   certain that\
    \ the destination mailbox can not be created, the server\n   MUST send the response\
    \ code \"[TRYCREATE]\" as the prefix of the text\n   of the tagged NO response.\
    \  This gives a hint to the client that it\n   can attempt a CREATE command and\
    \ retry the APPEND if the CREATE is\n   successful.\n   If the mailbox is currently\
    \ selected, the normal new mail actions\n   SHOULD occur.  Specifically, the server\
    \ SHOULD notify the client\n   immediately via an untagged EXISTS response.  If\
    \ the server does not\n   do so, the client MAY issue a NOOP command (or failing\
    \ that, a CHECK\n   command) after one or more APPEND commands.\n   Example: \
    \   C: A003 APPEND saved-messages (\\Seen) {310}\n               C: Date: Mon,\
    \ 7 Feb 1994 21:52:25 -0800 (PST)\n               C: From: Fred Foobar <foobar@Blurdybloop.COM>\n\
    \               C: Subject: afternoon meeting\n               C: To: mooch@owatagu.siam.edu\n\
    \               C: Message-Id: <B27397-0100000@Blurdybloop.COM>\n            \
    \   C: MIME-Version: 1.0\n               C: Content-Type: TEXT/PLAIN; CHARSET=US-ASCII\n\
    \               C:\n               C: Hello Joe, do you think we can meet at 3:30\
    \ tomorrow?\n               C:\n               S: A003 OK APPEND completed\n \
    \     Note: the APPEND command is not used for message delivery, because\n   \
    \   it does not provide a mechanism to transfer [SMTP] envelope\n      information.\n"
- title: 6.4.    Client Commands - Selected State
  contents:
  - "6.4.    Client Commands - Selected State\n   In selected state, commands that\
    \ manipulate messages in a mailbox are\n   permitted.\n   In addition to the universal\
    \ commands (CAPABILITY, NOOP, and LOGOUT),\n   and the authenticated state commands\
    \ (SELECT, EXAMINE, CREATE,\n   DELETE, RENAME, SUBSCRIBE, UNSUBSCRIBE, LIST,\
    \ LSUB, STATUS, and\n   APPEND), the following commands are valid in the selected\
    \ state:\n   CHECK, CLOSE, EXPUNGE, SEARCH, FETCH, STORE, COPY, and UID.\n"
- title: 6.4.1.  CHECK Command
  contents:
  - "6.4.1.  CHECK Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command\n   Result:     OK - check completed\n               BAD -\
    \ command unknown or arguments invalid\n      The CHECK command requests a checkpoint\
    \ of the currently selected\n      mailbox.  A checkpoint refers to any implementation-dependent\n\
    \      housekeeping associated with the mailbox (e.g. resolving the\n      server's\
    \ in-memory state of the mailbox with the state on its\n      disk) that is not\
    \ normally executed as part of each command.  A\n      checkpoint MAY take a non-instantaneous\
    \ amount of real time to\n      complete.  If a server implementation has no such\
    \ housekeeping\n      considerations, CHECK is equivalent to NOOP.\n      There\
    \ is no guarantee that an EXISTS untagged response will happen\n      as a result\
    \ of CHECK.  NOOP, not CHECK, SHOULD be used for new\n      mail polling.\n  \
    \ Example:    C: FXXZ CHECK\n               S: FXXZ OK CHECK Completed\n"
- title: 6.4.2.  CLOSE Command
  contents:
  - "6.4.2.  CLOSE Command\n   Arguments:  none\n   Responses:  no specific responses\
    \ for this command\n   Result:     OK - close completed, now in authenticated\
    \ state\n               NO - close failure: no mailbox selected\n            \
    \   BAD - command unknown or arguments invalid\n      The CLOSE command permanently\
    \ removes from the currently selected\n      mailbox all messages that have the\
    \ \\Deleted flag set, and returns\n      to authenticated state from selected\
    \ state.  No untagged EXPUNGE\n      responses are sent.\n      No messages are\
    \ removed, and no error is given, if the mailbox is\n      selected by an EXAMINE\
    \ command or is otherwise selected read-only.\n      Even if a mailbox is selected,\
    \ a SELECT, EXAMINE, or LOGOUT\n      command MAY be issued without previously\
    \ issuing a CLOSE command.\n      The SELECT, EXAMINE, and LOGOUT commands implicitly\
    \ close the\n      currently selected mailbox without doing an expunge.  However,\n\
    \      when many messages are deleted, a CLOSE-LOGOUT or CLOSE-SELECT\n      sequence\
    \ is considerably faster than an EXPUNGE-LOGOUT or\n      EXPUNGE-SELECT because\
    \ no untagged EXPUNGE responses (which the\n      client would probably ignore)\
    \ are sent.\n   Example:    C: A341 CLOSE\n               S: A341 OK CLOSE completed\n"
- title: 6.4.3.  EXPUNGE Command
  contents:
  - "6.4.3.  EXPUNGE Command\n   Arguments:  none\n   Responses:  untagged responses:\
    \ EXPUNGE\n   Result:     OK - expunge completed\n               NO - expunge\
    \ failure: can't expunge (e.g. permission\n                    denied)\n     \
    \          BAD - command unknown or arguments invalid\n      The EXPUNGE command\
    \ permanently removes from the currently\n      selected mailbox all messages\
    \ that have the \\Deleted flag set.\n      Before returning an OK to the client,\
    \ an untagged EXPUNGE response\n      is sent for each message that is removed.\n\
    \   Example:    C: A202 EXPUNGE\n               S: * 3 EXPUNGE\n             \
    \  S: * 3 EXPUNGE\n               S: * 5 EXPUNGE\n               S: * 8 EXPUNGE\n\
    \               S: A202 OK EXPUNGE completed\n      Note: in this example, messages\
    \ 3, 4, 7, and 11 had the\n      \\Deleted flag set.  See the description of the\
    \ EXPUNGE\n      response for further explanation.\n"
- title: 6.4.4.  SEARCH Command
  contents:
  - "6.4.4.  SEARCH Command\n   Arguments:  OPTIONAL [CHARSET] specification\n   \
    \            searching criteria (one or more)\n   Responses:  REQUIRED untagged\
    \ response: SEARCH\n   Result:     OK - search completed\n               NO -\
    \ search error: can't search that [CHARSET] or\n                    criteria\n\
    \               BAD - command unknown or arguments invalid\n      The SEARCH command\
    \ searches the mailbox for messages that match\n      the given searching criteria.\
    \  Searching criteria consist of one\n      or more search keys.  The untagged\
    \ SEARCH response from the server\n      contains a listing of message sequence\
    \ numbers corresponding to\n      those messages that match the searching criteria.\n\
    \      When multiple keys are specified, the result is the intersection\n    \
    \  (AND function) of all the messages that match those keys.  For\n      example,\
    \ the criteria DELETED FROM \"SMITH\" SINCE 1-Feb-1994 refers\n      to all deleted\
    \ messages from Smith that were placed in the mailbox\n      since February 1,\
    \ 1994.  A search key can also be a parenthesized\n      list of one or more search\
    \ keys (e.g. for use with the OR and NOT\n      keys).\n      Server implementations\
    \ MAY exclude [MIME-IMB] body parts with\n      terminal content media types other\
    \ than TEXT and MESSAGE from\n      consideration in SEARCH matching.\n      The\
    \ OPTIONAL [CHARSET] specification consists of the word\n      \"CHARSET\" followed\
    \ by a registered [CHARSET].  It indicates the\n      [CHARSET] of the strings\
    \ that appear in the search criteria.\n      [MIME-IMB] content transfer encodings,\
    \ and [MIME-HDRS] strings in\n      [RFC-822]/[MIME-IMB] headers, MUST be decoded\
    \ before comparing\n      text in a [CHARSET] other than US-ASCII.  US-ASCII MUST\
    \ be\n      supported; other [CHARSET]s MAY be supported.  If the server does\n\
    \      not support the specified [CHARSET], it MUST return a tagged NO\n     \
    \ response (not a BAD).\n      In all search keys that use strings, a message\
    \ matches the key if\n      the string is a substring of the field.  The matching\
    \ is case-\n      insensitive.\n      The defined search keys are as follows.\
    \  Refer to the Formal\n      Syntax section for the precise syntactic definitions\
    \ of the\n      arguments.\n      <message set>  Messages with message sequence\
    \ numbers\n                     corresponding to the specified message sequence\n\
    \                     number set\n      ALL            All messages in the mailbox;\
    \ the default initial\n                     key for ANDing.\n      ANSWERED  \
    \     Messages with the \\Answered flag set.\n      BCC <string>   Messages that\
    \ contain the specified string in the\n                     envelope structure's\
    \ BCC field.\n      BEFORE <date>  Messages whose internal date is earlier than\
    \ the\n                     specified date.\n      BODY <string>  Messages that\
    \ contain the specified string in the\n                     body of the message.\n\
    \      CC <string>    Messages that contain the specified string in the\n    \
    \                 envelope structure's CC field.\n      DELETED        Messages\
    \ with the \\Deleted flag set.\n      DRAFT          Messages with the \\Draft\
    \ flag set.\n      FLAGGED        Messages with the \\Flagged flag set.\n    \
    \  FROM <string>  Messages that contain the specified string in the\n        \
    \             envelope structure's FROM field.\n      HEADER <field-name> <string>\n\
    \                     Messages that have a header with the specified\n       \
    \              field-name (as defined in [RFC-822]) and that\n               \
    \      contains the specified string in the [RFC-822]\n                     field-body.\n\
    \      KEYWORD <flag> Messages with the specified keyword set.\n      LARGER <n>\
    \     Messages with an [RFC-822] size larger than the\n                     specified\
    \ number of octets.\n      NEW            Messages that have the \\Recent flag\
    \ set but not the\n                     \\Seen flag.  This is functionally equivalent\
    \ to\n                     \"(RECENT UNSEEN)\".\n      NOT <search-key>\n    \
    \                 Messages that do not match the specified search\n          \
    \           key.\n      OLD            Messages that do not have the \\Recent\
    \ flag set.\n                     This is functionally equivalent to \"NOT RECENT\"\
    \ (as\n                     opposed to \"NOT NEW\").\n      ON <date>      Messages\
    \ whose internal date is within the\n                     specified date.\n  \
    \    OR <search-key1> <search-key2>\n                     Messages that match\
    \ either search key.\n      RECENT         Messages that have the \\Recent flag\
    \ set.\n      SEEN           Messages that have the \\Seen flag set.\n      SENTBEFORE\
    \ <date>\n                     Messages whose [RFC-822] Date: header is earlier\n\
    \                     than the specified date.\n      SENTON <date>  Messages\
    \ whose [RFC-822] Date: header is within the\n                     specified date.\n\
    \      SENTSINCE <date>\n                     Messages whose [RFC-822] Date: header\
    \ is within or\n                     later than the specified date.\n      SINCE\
    \ <date>   Messages whose internal date is within or later\n                 \
    \    than the specified date.\n      SMALLER <n>    Messages with an [RFC-822]\
    \ size smaller than the\n                     specified number of octets.\n  \
    \    SUBJECT <string>\n                     Messages that contain the specified\
    \ string in the\n                     envelope structure's SUBJECT field.\n  \
    \    TEXT <string>  Messages that contain the specified string in the\n      \
    \               header or body of the message.\n      TO <string>    Messages\
    \ that contain the specified string in the\n                     envelope structure's\
    \ TO field.\n      UID <message set>\n                     Messages with unique\
    \ identifiers corresponding to\n                     the specified unique identifier\
    \ set.\n      UNANSWERED     Messages that do not have the \\Answered flag set.\n\
    \      UNDELETED      Messages that do not have the \\Deleted flag set.\n    \
    \  UNDRAFT        Messages that do not have the \\Draft flag set.\n      UNFLAGGED\
    \      Messages that do not have the \\Flagged flag set.\n      UNKEYWORD <flag>\n\
    \                     Messages that do not have the specified keyword\n      \
    \               set.\n      UNSEEN         Messages that do not have the \\Seen\
    \ flag set.\n   Example:    C: A282 SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM \"\
    Smith\"\n               S: * SEARCH 2 84 882\n               S: A282 OK SEARCH\
    \ completed\n"
- title: 6.4.5.  FETCH Command
  contents:
  - "6.4.5.  FETCH Command\n   Arguments:  message set\n               message data\
    \ item names\n   Responses:  untagged responses: FETCH\n   Result:     OK - fetch\
    \ completed\n               NO - fetch error: can't fetch that data\n        \
    \       BAD - command unknown or arguments invalid\n      The FETCH command retrieves\
    \ data associated with a message in the\n      mailbox.  The data items to be\
    \ fetched can be either a single atom\n      or a parenthesized list.\n      The\
    \ currently defined data items that can be fetched are:\n      ALL           \
    \ Macro equivalent to: (FLAGS INTERNALDATE\n                     RFC822.SIZE ENVELOPE)\n\
    \      BODY           Non-extensible form of BODYSTRUCTURE.\n      BODY[<section>]<<partial>>\n\
    \                     The text of a particular body section.  The section\n  \
    \                   specification is a set of zero or more part\n            \
    \         specifiers delimited by periods.  A part specifier\n               \
    \      is either a part number or one of the following:\n                    \
    \ HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT, MIME, and\n                     TEXT.\
    \  An empty section specification refers to the\n                     entire message,\
    \ including the header.\n                     Every message has at least one part\
    \ number.\n                     Non-[MIME-IMB] messages, and non-multipart\n \
    \                    [MIME-IMB] messages with no encapsulated message,\n     \
    \                only have a part 1.\n                     Multipart messages\
    \ are assigned consecutive part\n                     numbers, as they occur in\
    \ the message.  If a\n                     particular part is of type message\
    \ or multipart,\n                     its parts MUST be indicated by a period\
    \ followed by\n                     the part number within that nested multipart\
    \ part.\n                     A part of type MESSAGE/RFC822 also has nested part\n\
    \                     numbers, referring to parts of the MESSAGE part's\n    \
    \                 body.\n                     The HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT,\
    \ and\n                     TEXT part specifiers can be the sole part specifier\n\
    \                     or can be prefixed by one or more numeric part\n       \
    \              specifiers, provided that the numeric part\n                  \
    \   specifier refers to a part of type MESSAGE/RFC822.\n                     The\
    \ MIME part specifier MUST be prefixed by one or\n                     more numeric\
    \ part specifiers.\n                     The HEADER, HEADER.FIELDS, and HEADER.FIELDS.NOT\n\
    \                     part specifiers refer to the [RFC-822] header of\n     \
    \                the message or of an encapsulated [MIME-IMT]\n              \
    \       MESSAGE/RFC822 message.  HEADER.FIELDS and\n                     HEADER.FIELDS.NOT\
    \ are followed by a list of\n                     field-name (as defined in [RFC-822])\
    \ names, and\n                     return a subset of the header.  The subset\
    \ returned\n                     by HEADER.FIELDS contains only those header fields\n\
    \                     with a field-name that matches one of the names in\n   \
    \                  the list; similarly, the subset returned by\n             \
    \        HEADER.FIELDS.NOT contains only the header fields\n                 \
    \    with a non-matching field-name.  The field-matching\n                   \
    \  is case-insensitive but otherwise exact.  In all\n                     cases,\
    \ the delimiting blank line between the header\n                     and the body\
    \ is always included.\n                     The MIME part specifier refers to\
    \ the [MIME-IMB]\n                     header for this part.\n               \
    \      The TEXT part specifier refers to the text body of\n                  \
    \   the message, omitting the [RFC-822] header.\n                       Here is\
    \ an example of a complex message\n                       with some of its part\
    \ specifiers:\n                        HEADER     ([RFC-822] header of the message)\n\
    \                        TEXT       MULTIPART/MIXED\n                        1\
    \          TEXT/PLAIN\n                        2          APPLICATION/OCTET-STREAM\n\
    \                        3          MESSAGE/RFC822\n                        3.HEADER\
    \   ([RFC-822] header of the message)\n                        3.TEXT     ([RFC-822]\
    \ text body of the message)\n                        3.1        TEXT/PLAIN\n \
    \                       3.2        APPLICATION/OCTET-STREAM\n                \
    \        4          MULTIPART/MIXED\n                        4.1        IMAGE/GIF\n\
    \                        4.1.MIME   ([MIME-IMB] header for the IMAGE/GIF)\n  \
    \                      4.2        MESSAGE/RFC822\n                        4.2.HEADER\
    \ ([RFC-822] header of the message)\n                        4.2.TEXT   ([RFC-822]\
    \ text body of the message)\n                        4.2.1      TEXT/PLAIN\n \
    \                       4.2.2      MULTIPART/ALTERNATIVE\n                   \
    \     4.2.2.1    TEXT/PLAIN\n                        4.2.2.2    TEXT/RICHTEXT\n\
    \                     It is possible to fetch a substring of the\n           \
    \          designated text.  This is done by appending an open\n             \
    \        angle bracket (\"<\"), the octet position of the\n                  \
    \   first desired octet, a period, the maximum number\n                     of\
    \ octets desired, and a close angle bracket (\">\")\n                     to the\
    \ part specifier.  If the starting octet is\n                     beyond the end\
    \ of the text, an empty string is\n                     returned.\n          \
    \           Any partial fetch that attempts to read beyond the\n             \
    \        end of the text is truncated as appropriate.  A\n                   \
    \  partial fetch that starts at octet 0 is returned as\n                     a\
    \ partial fetch, even if this truncation happened.\n                         \
    \ Note: this means that BODY[]<0.2048> of a\n                          1500-octet\
    \ message will return BODY[]<0>\n                          with a literal of size\
    \ 1500, not BODY[].\n                          Note: a substring fetch of a\n\
    \                          HEADER.FIELDS or HEADER.FIELDS.NOT part\n         \
    \                 specifier is calculated after subsetting\n                 \
    \         the header.\n                     The \\Seen flag is implicitly set;\
    \ if this causes\n                     the flags to change they SHOULD be included\
    \ as part\n                     of the FETCH responses.\n      BODY.PEEK[<section>]<<partial>>\n\
    \                     An alternate form of BODY[<section>] that does not\n   \
    \                  implicitly set the \\Seen flag.\n      BODYSTRUCTURE  The [MIME-IMB]\
    \ body structure of the message.  This\n                     is computed by the\
    \ server by parsing the [MIME-IMB]\n                     header fields in the\
    \ [RFC-822] header and\n                     [MIME-IMB] headers.\n      ENVELOPE\
    \       The envelope structure of the message.  This is\n                    \
    \ computed by the server by parsing the [RFC-822]\n                     header\
    \ into the component parts, defaulting various\n                     fields as\
    \ necessary.\n      FAST           Macro equivalent to: (FLAGS INTERNALDATE\n\
    \                     RFC822.SIZE)\n      FLAGS          The flags that are set\
    \ for this message.\n      FULL           Macro equivalent to: (FLAGS INTERNALDATE\n\
    \                     RFC822.SIZE ENVELOPE BODY)\n      INTERNALDATE   The internal\
    \ date of the message.\n      RFC822         Functionally equivalent to BODY[],\
    \ differing in the\n                     syntax of the resulting untagged FETCH\
    \ data (RFC822\n                     is returned).\n      RFC822.HEADER  Functionally\
    \ equivalent to BODY.PEEK[HEADER],\n                     differing in the syntax\
    \ of the resulting untagged\n                     FETCH data (RFC822.HEADER is\
    \ returned).\n      RFC822.SIZE    The [RFC-822] size of the message.\n      RFC822.TEXT\
    \    Functionally equivalent to BODY[TEXT], differing in\n                   \
    \  the syntax of the resulting untagged FETCH data\n                     (RFC822.TEXT\
    \ is returned).\n      UID            The unique identifier for the message.\n\
    \   Example:    C: A654 FETCH 2:4 (FLAGS BODY[HEADER.FIELDS (DATE FROM)])\n  \
    \             S: * 2 FETCH ....\n               S: * 3 FETCH ....\n          \
    \     S: * 4 FETCH ....\n               S: A654 OK FETCH completed\n"
- title: 6.4.6.  STORE Command
  contents:
  - "6.4.6.  STORE Command\n   Arguments:  message set\n               message data\
    \ item name\n               value for message data item\n   Responses:  untagged\
    \ responses: FETCH\n   Result:     OK - store completed\n               NO - store\
    \ error: can't store that data\n               BAD - command unknown or arguments\
    \ invalid\n      The STORE command alters data associated with a message in the\n\
    \      mailbox.  Normally, STORE will return the updated value of the\n      data\
    \ with an untagged FETCH response.  A suffix of \".SILENT\" in\n      the data\
    \ item name prevents the untagged FETCH, and the server\n      SHOULD assume that\
    \ the client has determined the updated value\n      itself or does not care about\
    \ the updated value.\n         Note: regardless of whether or not the \".SILENT\"\
    \ suffix was\n         used, the server SHOULD send an untagged FETCH response\
    \ if a\n         change to a message's flags from an external source is\n    \
    \     observed.  The intent is that the status of the flags is\n         determinate\
    \ without a race condition.\n      The currently defined data items that can be\
    \ stored are:\n      FLAGS <flag list>\n                     Replace the flags\
    \ for the message with the\n                     argument.  The new value of the\
    \ flags are returned\n                     as if a FETCH of those flags was done.\n\
    \      FLAGS.SILENT <flag list>\n                     Equivalent to FLAGS, but\
    \ without returning a new\n                     value.\n      +FLAGS <flag list>\n\
    \                     Add the argument to the flags for the message.  The\n  \
    \                   new value of the flags are returned as if a FETCH\n      \
    \               of those flags was done.\n      +FLAGS.SILENT <flag list>\n  \
    \                   Equivalent to +FLAGS, but without returning a new\n      \
    \               value.\n      -FLAGS <flag list>\n                     Remove\
    \ the argument from the flags for the message.\n                     The new value\
    \ of the flags are returned as if a\n                     FETCH of those flags\
    \ was done.\n      -FLAGS.SILENT <flag list>\n                     Equivalent\
    \ to -FLAGS, but without returning a new\n                     value.\n   Example:\
    \    C: A003 STORE 2:4 +FLAGS (\\Deleted)\n               S: * 2 FETCH FLAGS (\\\
    Deleted \\Seen)\n               S: * 3 FETCH FLAGS (\\Deleted)\n             \
    \  S: * 4 FETCH FLAGS (\\Deleted \\Flagged \\Seen)\n               S: A003 OK\
    \ STORE completed\n"
- title: 6.4.7.  COPY Command
  contents:
  - "6.4.7.  COPY Command\n   Arguments:  message set\n               mailbox name\n\
    \   Responses:  no specific responses for this command\n   Result:     OK - copy\
    \ completed\n               NO - copy error: can't copy those messages or to that\n\
    \                    name\n               BAD - command unknown or arguments invalid\n\
    \      The COPY command copies the specified message(s) to the end of the\n  \
    \    specified destination mailbox.  The flags and internal date of the\n    \
    \  message(s) SHOULD be preserved in the copy.\n      If the destination mailbox\
    \ does not exist, a server SHOULD return\n      an error.  It SHOULD NOT automatically\
    \ create the mailbox.  Unless\n      it is certain that the destination mailbox\
    \ can not be created, the\n      server MUST send the response code \"[TRYCREATE]\"\
    \ as the prefix of\n      the text of the tagged NO response.  This gives a hint\
    \ to the\n      client that it can attempt a CREATE command and retry the COPY\
    \ if\n      the CREATE is successful.\n      If the COPY command is unsuccessful\
    \ for any reason, server\n      implementations MUST restore the destination mailbox\
    \ to its state\n      before the COPY attempt.\n   Example:    C: A003 COPY 2:4\
    \ MEETING\n               S: A003 OK COPY completed\n"
- title: 6.4.8.  UID Command
  contents:
  - "6.4.8.  UID Command\n   Arguments:  command name\n               command arguments\n\
    \   Responses:  untagged responses: FETCH, SEARCH\n   Result:     OK - UID command\
    \ completed\n               NO - UID command error\n               BAD - command\
    \ unknown or arguments invalid\n      The UID command has two forms.  In the first\
    \ form, it takes as its\n      arguments a COPY, FETCH, or STORE command with\
    \ arguments\n      appropriate for the associated command.  However, the numbers\
    \ in\n      the message set argument are unique identifiers instead of message\n\
    \      sequence numbers.\n      In the second form, the UID command takes a SEARCH\
    \ command with\n      SEARCH command arguments.  The interpretation of the arguments\
    \ is\n      the same as with SEARCH; however, the numbers returned in a SEARCH\n\
    \      response for a UID SEARCH command are unique identifiers instead\n    \
    \  of message sequence numbers.  For example, the command UID SEARCH\n      1:100\
    \ UID 443:557 returns the unique identifiers corresponding to\n      the intersection\
    \ of the message sequence number set 1:100 and the\n      UID set 443:557.\n \
    \     Message set ranges are permitted; however, there is no guarantee\n     \
    \ that unique identifiers be contiguous.  A non-existent unique\n      identifier\
    \ within a message set range is ignored without any error\n      message generated.\n\
    \      The number after the \"*\" in an untagged FETCH response is always a\n\
    \      message sequence number, not a unique identifier, even for a UID\n    \
    \  command response.  However, server implementations MUST implicitly\n      include\
    \ the UID message data item as part of any FETCH response\n      caused by a UID\
    \ command, regardless of whether a UID was specified\n      as a message data\
    \ item to the FETCH.\n   Example:    C: A999 UID FETCH 4827313:4828442 FLAGS\n\
    \               S: * 23 FETCH (FLAGS (\\Seen) UID 4827313)\n               S:\
    \ * 24 FETCH (FLAGS (\\Seen) UID 4827943)\n               S: * 25 FETCH (FLAGS\
    \ (\\Seen) UID 4828442)\n               S: A999 UID FETCH completed\n"
- title: 6.5.    Client Commands - Experimental/Expansion
  contents:
  - '6.5.    Client Commands - Experimental/Expansion

    '
- title: 6.5.1.  X<atom> Command
  contents:
  - "6.5.1.  X<atom> Command\n   Arguments:  implementation defined\n   Responses:\
    \  implementation defined\n   Result:     OK - command completed\n           \
    \    NO - failure\n               BAD - command unknown or arguments invalid\n\
    \      Any command prefixed with an X is an experimental command.\n      Commands\
    \ which are not part of this specification, a standard or\n      standards-track\
    \ revision of this specification, or an IESG-\n      approved experimental protocol,\
    \ MUST use the X prefix.\n      Any added untagged responses issued by an experimental\
    \ command\n      MUST also be prefixed with an X.  Server implementations MUST\
    \ NOT\n      send any such untagged responses, unless the client requested it\n\
    \      by issuing the associated experimental command.\n   Example:    C: a441\
    \ CAPABILITY\n               S: * CAPABILITY IMAP4rev1 AUTH=KERBEROS_V4 XPIG-LATIN\n\
    \               S: a441 OK CAPABILITY completed\n               C: A442 XPIG-LATIN\n\
    \               S: * XPIG-LATIN ow-nay eaking-spay ig-pay atin-lay\n         \
    \      S: A442 OK XPIG-LATIN ompleted-cay\n"
- title: 7.      Server Responses
  contents:
  - "7.      Server Responses\n   Server responses are in three forms: status responses,\
    \ server data,\n   and command continuation request.  The information contained\
    \ in a\n   server response, identified by \"Contents:\" in the response\n   descriptions\
    \ below, is described by function, not by syntax.  The\n   precise syntax of server\
    \ responses is described in the Formal Syntax\n   section.\n   The client MUST\
    \ be prepared to accept any response at all times.\n   Status responses can be\
    \ tagged or untagged.  Tagged status responses\n   indicate the completion result\
    \ (OK, NO, or BAD status) of a client\n   command, and have a tag matching the\
    \ command.\n   Some status responses, and all server data, are untagged.  An\n\
    \   untagged response is indicated by the token \"*\" instead of a tag.\n   Untagged\
    \ status responses indicate server greeting, or server status\n   that does not\
    \ indicate the completion of a command (for example, an\n   impending system shutdown\
    \ alert).  For historical reasons, untagged\n   server data responses are also\
    \ called \"unsolicited data\", although\n   strictly speaking only unilateral\
    \ server data is truly \"unsolicited\".\n   Certain server data MUST be recorded\
    \ by the client when it is\n   received; this is noted in the description of that\
    \ data.  Such data\n   conveys critical information which affects the interpretation\
    \ of all\n   subsequent commands and responses (e.g. updates reflecting the\n\
    \   creation or destruction of messages).\n   Other server data SHOULD be recorded\
    \ for later reference; if the\n   client does not need to record the data, or\
    \ if recording the data has\n   no obvious purpose (e.g. a SEARCH response when\
    \ no SEARCH command is\n   in progress), the data SHOULD be ignored.\n   An example\
    \ of unilateral untagged server data occurs when the IMAP\n   connection is in\
    \ selected state.  In selected state, the server\n   checks the mailbox for new\
    \ messages as part of command execution.\n   Normally, this is part of the execution\
    \ of every command; hence, a\n   NOOP command suffices to check for new messages.\
    \  If new messages are\n   found, the server sends untagged EXISTS and RECENT\
    \ responses\n   reflecting the new size of the mailbox.  Server implementations\
    \ that\n   offer multiple simultaneous access to the same mailbox SHOULD also\n\
    \   send appropriate unilateral untagged FETCH and EXPUNGE responses if\n   another\
    \ agent changes the state of any message flags or expunges any\n   messages.\n\
    \   Command continuation request responses use the token \"+\" instead of a\n\
    \   tag.  These responses are sent by the server to indicate acceptance\n   of\
    \ an incomplete client command and readiness for the remainder of\n   the command.\n"
- title: 7.1.    Server Responses - Status Responses
  contents:
  - "7.1.    Server Responses - Status Responses\n   Status responses are OK, NO,\
    \ BAD, PREAUTH and BYE.  OK, NO, and BAD\n   may be tagged or untagged.  PREAUTH\
    \ and BYE are always untagged.\n   Status responses MAY include an OPTIONAL \"\
    response code\".  A response\n   code consists of data inside square brackets\
    \ in the form of an atom,\n   possibly followed by a space and arguments.  The\
    \ response code\n   contains additional information or status codes for client\
    \ software\n   beyond the OK/NO/BAD condition, and are defined when there is a\n\
    \   specific action that a client can take based upon the additional\n   information.\n\
    \   The currently defined response codes are:\n      ALERT          The human-readable\
    \ text contains a special alert\n                     that MUST be presented to\
    \ the user in a fashion\n                     that calls the user's attention\
    \ to the message.\n      NEWNAME        Followed by a mailbox name and a new mailbox\
    \ name.\n                     A SELECT or EXAMINE is failing because the target\n\
    \                     mailbox name no longer exists because it was\n         \
    \            renamed to the new mailbox name.  This is a hint to\n           \
    \          the client that the operation can succeed if the\n                \
    \     SELECT or EXAMINE is reissued with the new mailbox\n                   \
    \  name.\n      PARSE          The human-readable text represents an error in\n\
    \                     parsing the [RFC-822] header or [MIME-IMB] headers\n   \
    \                  of a message in the mailbox.\n      PERMANENTFLAGS Followed\
    \ by a parenthesized list of flags,\n                     indicates which of the\
    \ known flags that the client\n                     can change permanently.  Any\
    \ flags that are in the\n                     FLAGS untagged response, but not\
    \ the PERMANENTFLAGS\n                     list, can not be set permanently. \
    \ If the client\n                     attempts to STORE a flag that is not in\
    \ the\n                     PERMANENTFLAGS list, the server will either reject\n\
    \                     it with a NO reply or store the state for the\n        \
    \             remainder of the current session only.  The\n                  \
    \   PERMANENTFLAGS list can also include the special\n                     flag\
    \ \\*, which indicates that it is possible to\n                     create new\
    \ keywords by attempting to store those\n                     flags in the mailbox.\n\
    \      READ-ONLY      The mailbox is selected read-only, or its access\n     \
    \                while selected has changed from read-write to\n             \
    \        read-only.\n      READ-WRITE     The mailbox is selected read-write,\
    \ or its access\n                     while selected has changed from read-only\
    \ to\n                     read-write.\n      TRYCREATE      An APPEND or COPY\
    \ attempt is failing because the\n                     target mailbox does not\
    \ exist (as opposed to some\n                     other reason).  This is a hint\
    \ to the client that\n                     the operation can succeed if the mailbox\
    \ is first\n                     created by the CREATE command.\n      UIDVALIDITY\
    \    Followed by a decimal number, indicates the unique\n                    \
    \ identifier validity value.\n      UNSEEN         Followed by a decimal number,\
    \ indicates the number\n                     of the first message without the\
    \ \\Seen flag set.\n      Additional response codes defined by particular client\
    \ or server\n      implementations SHOULD be prefixed with an \"X\" until they\
    \ are\n      added to a revision of this protocol.  Client implementations\n \
    \     SHOULD ignore response codes that they do not recognize.\n"
- title: 7.1.1.  OK Response
  contents:
  - "7.1.1.  OK Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The OK response indicates an information message from the server.\n\
    \      When tagged, it indicates successful completion of the associated\n   \
    \   command.  The human-readable text MAY be presented to the user as\n      an\
    \ information message.  The untagged form indicates an\n      information-only\
    \ message; the nature of the information MAY be\n      indicated by a response\
    \ code.\n      The untagged form is also used as one of three possible greetings\n\
    \      at connection startup.  It indicates that the connection is not\n     \
    \ yet authenticated and that a LOGIN command is needed.\n   Example:    S: * OK\
    \ IMAP4rev1 server ready\n               C: A001 LOGIN fred blurdybloop\n    \
    \           S: * OK [ALERT] System shutdown in 10 minutes\n               S: A001\
    \ OK LOGIN Completed\n"
- title: 7.1.2.  NO Response
  contents:
  - "7.1.2.  NO Response\n      Contents:   OPTIONAL response code\n             \
    \     human-readable text\n      The NO response indicates an operational error\
    \ message from the\n      server.  When tagged, it indicates unsuccessful completion\
    \ of the\n      associated command.  The untagged form indicates a warning; the\n\
    \      command can still complete successfully.  The human-readable text\n   \
    \   describes the condition.\n   Example:    C: A222 COPY 1:2 owatagusiam\n  \
    \             S: * NO Disk is 98% full, please delete unnecessary data\n     \
    \          S: A222 OK COPY completed\n               C: A223 COPY 3:200 blurdybloop\n\
    \               S: * NO Disk is 98% full, please delete unnecessary data\n   \
    \            S: * NO Disk is 99% full, please delete unnecessary data\n      \
    \         S: A223 NO COPY failed: disk is full\n"
- title: 7.1.3.  BAD Response
  contents:
  - "7.1.3.  BAD Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The BAD response indicates an error message from the server.  When\n\
    \      tagged, it reports a protocol-level error in the client's command;\n  \
    \    the tag indicates the command that caused the error.  The untagged\n    \
    \  form indicates a protocol-level error for which the associated\n      command\
    \ can not be determined; it can also indicate an internal\n      server failure.\
    \  The human-readable text describes the condition.\n   Example:    C: ...very\
    \ long command line...\n               S: * BAD Command line too long\n      \
    \         C: ...empty line...\n               S: * BAD Empty command line\n  \
    \             C: A443 EXPUNGE\n               S: * BAD Disk crash, attempting\
    \ salvage to a new disk!\n               S: * OK Salvage successful, no data lost\n\
    \               S: A443 OK Expunge completed\n"
- title: 7.1.4.  PREAUTH Response
  contents:
  - "7.1.4.  PREAUTH Response\n   Contents:   OPTIONAL response code\n           \
    \    human-readable text\n      The PREAUTH response is always untagged, and is\
    \ one of three\n      possible greetings at connection startup.  It indicates\
    \ that the\n      connection has already been authenticated by external means\
    \ and\n      thus no LOGIN command is needed.\n   Example:    S: * PREAUTH IMAP4rev1\
    \ server logged in as Smith\n"
- title: 7.1.5.  BYE Response
  contents:
  - "7.1.5.  BYE Response\n   Contents:   OPTIONAL response code\n               human-readable\
    \ text\n      The BYE response is always untagged, and indicates that the server\n\
    \      is about to close the connection.  The human-readable text MAY be\n   \
    \   displayed to the user in a status report by the client.  The BYE\n      response\
    \ is sent under one of four conditions:\n         1) as part of a normal logout\
    \ sequence.  The server will close\n            the connection after sending the\
    \ tagged OK response to the\n            LOGOUT command.\n         2) as a panic\
    \ shutdown announcement.  The server closes the\n            connection immediately.\n\
    \         3) as an announcement of an inactivity autologout.  The server\n   \
    \         closes the connection immediately.\n         4) as one of three possible\
    \ greetings at connection startup,\n            indicating that the server is\
    \ not willing to accept a\n            connection from this client.  The server\
    \ closes the\n            connection immediately.\n      The difference between\
    \ a BYE that occurs as part of a normal\n      LOGOUT sequence (the first case)\
    \ and a BYE that occurs because of\n      a failure (the other three cases) is\
    \ that the connection closes\n      immediately in the failure case.\n   Example:\
    \    S: * BYE Autologout; idle for too long\n"
- title: 7.2.    Server Responses - Server and Mailbox Status
  contents:
  - "7.2.    Server Responses - Server and Mailbox Status\n   These responses are\
    \ always untagged.  This is how server and mailbox\n   status data are transmitted\
    \ from the server to the client.  Many of\n   these responses typically result\
    \ from a command with the same name.\n"
- title: 7.2.1.  CAPABILITY Response
  contents:
  - "7.2.1.  CAPABILITY Response\n   Contents:   capability listing\n      The CAPABILITY\
    \ response occurs as a result of a CAPABILITY\n      command.  The capability\
    \ listing contains a space-separated\n      listing of capability names that the\
    \ server supports.  The\n      capability listing MUST include the atom \"IMAP4rev1\"\
    .\n      A capability name which begins with \"AUTH=\" indicates that the\n  \
    \    server supports that particular authentication mechanism.\n      Other capability\
    \ names indicate that the server supports an\n      extension, revision, or amendment\
    \ to the IMAP4rev1 protocol.\n      Server responses MUST conform to this document\
    \ until the client\n      issues a command that uses the associated capability.\n\
    \      Capability names MUST either begin with \"X\" or be standard or\n     \
    \ standards-track IMAP4rev1 extensions, revisions, or amendments\n      registered\
    \ with IANA.  A server MUST NOT offer unregistered or\n      non-standard capability\
    \ names, unless such names are prefixed with\n      an \"X\".\n      Client implementations\
    \ SHOULD NOT require any capability name\n      other than \"IMAP4rev1\", and\
    \ MUST ignore any unknown capability\n      names.\n   Example:    S: * CAPABILITY\
    \ IMAP4rev1 AUTH=KERBEROS_V4 XPIG-LATIN\n"
- title: 7.2.2.  LIST Response
  contents:
  - "7.2.2.  LIST Response\n   Contents:   name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LIST response occurs as a result of\
    \ a LIST command.  It\n      returns a single name that matches the LIST specification.\
    \  There\n      can be multiple LIST responses for a single LIST command.\n  \
    \    Four name attributes are defined:\n      \\Noinferiors   It is not possible\
    \ for any child levels of\n                     hierarchy to exist under this\
    \ name; no child levels\n                     exist now and none can be created\
    \ in the future.\n      \\Noselect      It is not possible to use this name as\
    \ a selectable\n                     mailbox.\n      \\Marked        The mailbox\
    \ has been marked \"interesting\" by the\n                     server; the mailbox\
    \ probably contains messages that\n                     have been added since\
    \ the last time the mailbox was\n                     selected.\n      \\Unmarked\
    \      The mailbox does not contain any additional\n                     messages\
    \ since the last time the mailbox was\n                     selected.\n      If\
    \ it is not feasible for the server to determine whether the\n      mailbox is\
    \ \"interesting\" or not, or if the name is a \\Noselect\n      name, the server\
    \ SHOULD NOT send either \\Marked or \\Unmarked.\n      The hierarchy delimiter\
    \ is a character used to delimit levels of\n      hierarchy in a mailbox name.\
    \  A client can use it to create child\n      mailboxes, and to search higher\
    \ or lower levels of naming\n      hierarchy.  All children of a top-level hierarchy\
    \ node MUST use\n      the same separator character.  A NIL hierarchy delimiter\
    \ means\n      that no hierarchy exists; the name is a \"flat\" name.\n      The\
    \ name represents an unambiguous left-to-right hierarchy, and\n      MUST be valid\
    \ for use as a reference in LIST and LSUB commands.\n      Unless \\Noselect is\
    \ indicated, the name MUST also be valid as an\n            argument for commands,\
    \ such as SELECT, that accept mailbox\n      names.\n   Example:    S: * LIST\
    \ (\\Noselect) \"/\" ~/Mail/foo\n"
- title: 7.2.3.  LSUB Response
  contents:
  - "7.2.3.  LSUB Response\n   Contents:   name attributes\n               hierarchy\
    \ delimiter\n               name\n      The LSUB response occurs as a result of\
    \ an LSUB command.  It\n      returns a single name that matches the LSUB specification.\
    \  There\n      can be multiple LSUB responses for a single LSUB command.  The\n\
    \      data is identical in format to the LIST response.\n   Example:    S: *\
    \ LSUB () \".\" #news.comp.mail.misc\n"
- title: 7.2.4   STATUS Response
  contents:
  - "7.2.4   STATUS Response\n   Contents:   name\n               status parenthesized\
    \ list\n      The STATUS response occurs as a result of an STATUS command.  It\n\
    \      returns the mailbox name that matches the STATUS specification and\n  \
    \    the requested mailbox status information.\n   Example:    S: * STATUS blurdybloop\
    \ (MESSAGES 231 UIDNEXT 44292)\n"
- title: 7.2.5.  SEARCH Response
  contents:
  - "7.2.5.  SEARCH Response\n   Contents:   zero or more numbers\n      The SEARCH\
    \ response occurs as a result of a SEARCH or UID SEARCH\n      command.  The number(s)\
    \ refer to those messages that match the\n      search criteria.  For SEARCH,\
    \ these are message sequence numbers;\n      for UID SEARCH, these are unique\
    \ identifiers.  Each number is\n      delimited by a space.\n   Example:    S:\
    \ * SEARCH 2 3 6\n"
- title: 7.2.6.  FLAGS Response
  contents:
  - "7.2.6.  FLAGS Response\n   Contents:   flag parenthesized list\n      The FLAGS\
    \ response occurs as a result of a SELECT or EXAMINE\n      command.  The flag\
    \ parenthesized list identifies the flags (at a\n      minimum, the system-defined\
    \ flags) that are applicable for this\n      mailbox.  Flags other than the system\
    \ flags can also exist,\n      depending on server implementation.\n      The\
    \ update from the FLAGS response MUST be recorded by the client.\n   Example:\
    \    S: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n"
- title: 7.3.    Server Responses - Mailbox Size
  contents:
  - "7.3.    Server Responses - Mailbox Size\n   These responses are always untagged.\
    \  This is how changes in the size\n   of the mailbox are trasnmitted from the\
    \ server to the client.\n   Immediately following the \"*\" token is a number\
    \ that represents a\n   message count.\n"
- title: 7.3.1.  EXISTS Response
  contents:
  - "7.3.1.  EXISTS Response\n   Contents:   none\n      The EXISTS response reports\
    \ the number of messages in the mailbox.\n      This response occurs as a result\
    \ of a SELECT or EXAMINE command,\n      and if the size of the mailbox changes\
    \ (e.g. new mail).\n      The update from the EXISTS response MUST be recorded\
    \ by the\n      client.\n   Example:    S: * 23 EXISTS\n"
- title: 7.3.2.  RECENT Response
  contents:
  - "7.3.2.  RECENT Response\n      Contents:   none\n      The RECENT response reports\
    \ the number of messages with the\n      \\Recent flag set.  This response occurs\
    \ as a result of a SELECT or\n      EXAMINE command, and if the size of the mailbox\
    \ changes (e.g. new\n      mail).\n         Note: It is not guaranteed that the\
    \ message sequence numbers of\n         recent messages will be a contiguous range\
    \ of the highest n\n         messages in the mailbox (where n is the value reported\
    \ by the\n         RECENT response).  Examples of situations in which this is\
    \ not\n         the case are: multiple clients having the same mailbox open\n\
    \         (the first session to be notified will see it as recent, others\n  \
    \       will probably see it as non-recent), and when the mailbox is\n       \
    \  re-ordered by a non-IMAP agent.\n         The only reliable way to identify\
    \ recent messages is to look at\n         message flags to see which have the\
    \ \\Recent flag set, or to do\n         a SEARCH RECENT.\n         The update\
    \ from the RECENT response MUST be recorded by the\n         client.\n   Example:\
    \    S: * 5 RECENT\n"
- title: 7.4.    Server Responses - Message Status
  contents:
  - "7.4.    Server Responses - Message Status\n   These responses are always untagged.\
    \  This is how message data are\n   transmitted from the server to the client,\
    \ often as a result of a\n   command with the same name.  Immediately following\
    \ the \"*\" token is a\n   number that represents a message sequence number.\n"
- title: 7.4.1.  EXPUNGE Response
  contents:
  - "7.4.1.  EXPUNGE Response\n   Contents:   none\n      The EXPUNGE response reports\
    \ that the specified message sequence\n      number has been permanently removed\
    \ from the mailbox.  The message\n      sequence number for each successive message\
    \ in the mailbox is\n      immediately decremented by 1, and this decrement is\
    \ reflected in\n      message sequence numbers in subsequent responses (including\
    \ other\n      untagged EXPUNGE responses).\n      As a result of the immediate\
    \ decrement rule, message sequence\n      numbers that appear in a set of successive\
    \ EXPUNGE responses\n      depend upon whether the messages are removed starting\
    \ from lower\n      numbers to higher numbers, or from higher numbers to lower\n\
    \      numbers.  For example, if the last 5 messages in a 9-message\n      mailbox\
    \ are expunged; a \"lower to higher\" server will send five\n      untagged EXPUNGE\
    \ responses for message sequence number 5, whereas\n      a \"higher to lower\
    \ server\" will send successive untagged EXPUNGE\n      responses for message\
    \ sequence numbers 9, 8, 7, 6, and 5.\n      An EXPUNGE response MUST NOT be sent\
    \ when no command is in\n      progress; nor while responding to a FETCH, STORE,\
    \ or SEARCH\n      command.  This rule is necessary to prevent a loss of\n   \
    \   synchronization of message sequence numbers between client and\n      server.\n\
    \      The update from the EXPUNGE response MUST be recorded by the\n      client.\n\
    \   Example:    S: * 44 EXPUNGE\n"
- title: 7.4.2.  FETCH Response
  contents:
  - "7.4.2.  FETCH Response\n   Contents:   message data\n      The FETCH response\
    \ returns data about a message to the client.\n      The data are pairs of data\
    \ item names and their values in\n      parentheses.  This response occurs as\
    \ the result of a FETCH or\n      STORE command, as well as by unilateral server\
    \ decision (e.g. flag\n      updates).\n      The current data items are:\n  \
    \    BODY           A form of BODYSTRUCTURE without extension data.\n      BODY[<section>]<<origin_octet>>\n\
    \                     A string expressing the body contents of the\n         \
    \            specified section.  The string SHOULD be\n                     interpreted\
    \ by the client according to the content\n                     transfer encoding,\
    \ body type, and subtype.\n                     If the origin octet is specified,\
    \ this string is a\n                     substring of the entire body contents,\
    \ starting at\n                     that origin octet.  This means that BODY[]<0>\
    \ MAY\n                     be truncated, but BODY[] is NEVER truncated.\n   \
    \                  8-bit textual data is permitted if a [CHARSET]\n          \
    \           identifier is part of the body parameter\n                     parenthesized\
    \ list for this section.  Note that\n                     headers (part specifiers\
    \ HEADER or MIME, or the\n                     header portion of a MESSAGE/RFC822\
    \ part), MUST be\n                     7-bit; 8-bit characters are not permitted\
    \ in\n                     headers.  Note also that the blank line at the end\n\
    \                     of the header is always included in header data.\n     \
    \                Non-textual data such as binary data MUST be\n              \
    \       transfer encoded into a textual form such as BASE64\n                \
    \     prior to being sent to the client.  To derive the\n                    \
    \ original binary data, the client MUST decode the\n                     transfer\
    \ encoded string.\n      BODYSTRUCTURE  A parenthesized list that describes the\
    \ [MIME-IMB]\n                     body structure of a message.  This is computed\
    \ by\n                     the server by parsing the [MIME-IMB] header fields,\n\
    \                     defaulting various fields as necessary.\n              \
    \       For example, a simple text message of 48 lines and\n                 \
    \    2279 octets can have a body structure of: (\"TEXT\"\n                   \
    \  \"PLAIN\" (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\" 2279\n              \
    \       48)\n                     Multiple parts are indicated by parenthesis\n\
    \                     nesting.  Instead of a body type as the first\n        \
    \             element of the parenthesized list there is a nested\n          \
    \           body.  The second element of the parenthesized list\n            \
    \         is the multipart subtype (mixed, digest, parallel,\n               \
    \      alternative, etc.).\n                     For example, a two part message\
    \ consisting of a\n                     text and a BASE645-encoded text attachment\
    \ can have\n                     a body structure of: ((\"TEXT\" \"PLAIN\" (\"\
    CHARSET\"\n                     \"US-ASCII\") NIL NIL \"7BIT\" 1152 23)(\"TEXT\"\
    \ \"PLAIN\"\n                     (\"CHARSET\" \"US-ASCII\" \"NAME\" \"cc.diff\"\
    )\n                     \"<960723163407.20117h@cac.washington.edu>\"\n       \
    \              \"Compiler diff\" \"BASE64\" 4554 73) \"MIXED\"))\n           \
    \          Extension data follows the multipart subtype.\n                   \
    \  Extension data is never returned with the BODY\n                     fetch,\
    \ but can be returned with a BODYSTRUCTURE\n                     fetch.  Extension\
    \ data, if present, MUST be in the\n                     defined order.\n    \
    \                 The extension data of a multipart body part are in\n       \
    \              the following order:\n                     body parameter parenthesized\
    \ list\n                        A parenthesized list of attribute/value pairs\n\
    \                        [e.g. (\"foo\" \"bar\" \"baz\" \"rag\") where \"bar\"\
    \ is\n                        the value of \"foo\" and \"rag\" is the value of\n\
    \                        \"baz\"] as defined in [MIME-IMB].\n                \
    \     body disposition\n                        A parenthesized list, consisting\
    \ of a\n                        disposition type string followed by a\n      \
    \                  parenthesized list of disposition\n                       \
    \ attribute/value pairs.  The disposition type and\n                        attribute\
    \ names will be defined in a future\n                        standards-track revision\
    \ to [DISPOSITION].\n                     body language\n                    \
    \    A string or parenthesized list giving the body\n                        language\
    \ value as defined in [LANGUAGE-TAGS].\n                     Any following extension\
    \ data are not yet defined in\n                     this version of the protocol.\
    \  Such extension data\n                     can consist of zero or more NILs,\
    \ strings, numbers,\n                     or potentially nested parenthesized\
    \ lists of such\n                     data.  Client implementations that do a\n\
    \                     BODYSTRUCTURE fetch MUST be prepared to accept such\n  \
    \                   extension data.  Server implementations MUST NOT\n       \
    \              send such extension data until it has been defined\n          \
    \           by a revision of this protocol.\n                     The basic fields\
    \ of a non-multipart body part are\n                     in the following order:\n\
    \                     body type\n                        A string giving the content\
    \ media type name as\n                        defined in [MIME-IMB].\n       \
    \              body subtype\n                        A string giving the content\
    \ subtype name as\n                        defined in [MIME-IMB].\n          \
    \           body parameter parenthesized list\n                        A parenthesized\
    \ list of attribute/value pairs\n                        [e.g. (\"foo\" \"bar\"\
    \ \"baz\" \"rag\") where \"bar\" is\n                        the value of \"foo\"\
    \ and \"rag\" is the value of\n                        \"baz\"] as defined in\
    \ [MIME-IMB].\n                     body id\n                        A string\
    \ giving the content id as defined in\n                        [MIME-IMB].\n \
    \                    body description\n                        A string giving\
    \ the content description as\n                        defined in [MIME-IMB].\n\
    \                     body encoding\n                        A string giving the\
    \ content transfer encoding as\n                        defined in [MIME-IMB].\n\
    \                     body size\n                        A number giving the size\
    \ of the body in octets.\n                        Note that this size is the size\
    \ in its transfer\n                        encoding and not the resulting size\
    \ after any\n                        decoding.\n                     A body type\
    \ of type MESSAGE and subtype RFC822\n                     contains, immediately\
    \ after the basic fields, the\n                     envelope structure, body structure,\
    \ and size in\n                     text lines of the encapsulated message.\n\
    \                     A body type of type TEXT contains, immediately\n       \
    \              after the basic fields, the size of the body in\n             \
    \        text lines.  Note that this size is the size in its\n               \
    \      content transfer encoding and not the resulting\n                     size\
    \ after any decoding.\n                     Extension data follows the basic fields\
    \ and the\n                     type-specific fields listed above.  Extension\
    \ data\n                     is never returned with the BODY fetch, but can be\n\
    \                     returned with a BODYSTRUCTURE fetch.  Extension\n      \
    \               data, if present, MUST be in the defined order.\n            \
    \         The extension data of a non-multipart body part are\n              \
    \       in the following order:\n                     body MD5\n             \
    \           A string giving the body MD5 value as defined in\n               \
    \         [MD5].\n                     body disposition\n                    \
    \    A parenthesized list with the same content and\n                        function\
    \ as the body disposition for a multipart\n                        body part.\n\
    \                     body language\n                        A string or parenthesized\
    \ list giving the body\n                        language value as defined in [LANGUAGE-TAGS].\n\
    \                     Any following extension data are not yet defined in\n  \
    \                   this version of the protocol, and would be as\n          \
    \           described above under multipart extension data.\n      ENVELOPE  \
    \     A parenthesized list that describes the envelope\n                     structure\
    \ of a message.  This is computed by the\n                     server by parsing\
    \ the [RFC-822] header into the\n                     component parts, defaulting\
    \ various fields as\n                     necessary.\n                     The\
    \ fields of the envelope structure are in the\n                     following\
    \ order: date, subject, from, sender,\n                     reply-to, to, cc,\
    \ bcc, in-reply-to, and message-id.\n                     The date, subject, in-reply-to,\
    \ and message-id\n                     fields are strings.  The from, sender,\
    \ reply-to,\n                     to, cc, and bcc fields are parenthesized lists\
    \ of\n                     address structures.\n                     An address\
    \ structure is a parenthesized list that\n                     describes an electronic\
    \ mail address.  The fields\n                     of an address structure are\
    \ in the following order:\n                     personal name, [SMTP] at-domain-list\
    \ (source\n                     route), mailbox name, and host name.\n       \
    \              [RFC-822] group syntax is indicated by a special\n            \
    \         form of address structure in which the host name\n                 \
    \    field is NIL.  If the mailbox name field is also\n                     NIL,\
    \ this is an end of group marker (semi-colon in\n                     RFC 822\
    \ syntax).  If the mailbox name field is\n                     non-NIL, this is\
    \ a start of group marker, and the\n                     mailbox name field holds\
    \ the group name phrase.\n                     Any field of an envelope or address\
    \ structure that\n                     is not applicable is presented as NIL.\
    \  Note that\n                     the server MUST default the reply-to and sender\n\
    \                     fields from the from field; a client is not\n          \
    \           expected to know to do this.\n      FLAGS          A parenthesized\
    \ list of flags that are set for this\n                     message.\n      INTERNALDATE\
    \   A string representing the internal date of the\n                     message.\n\
    \      RFC822         Equivalent to BODY[].\n      RFC822.HEADER  Equivalent to\
    \ BODY.PEEK[HEADER].\n      RFC822.SIZE    A number expressing the [RFC-822] size\
    \ of the\n                     message.\n      RFC822.TEXT    Equivalent to BODY[TEXT].\n\
    \      UID            A number expressing the unique identifier of the\n     \
    \                message.\n   Example:    S: * 23 FETCH (FLAGS (\\Seen) RFC822.SIZE\
    \ 44827)\n"
- title: 7.5.    Server Responses - Command Continuation Request
  contents:
  - "7.5.    Server Responses - Command Continuation Request\n   The command continuation\
    \ request response is indicated by a \"+\" token\n   instead of a tag.  This form\
    \ of response indicates that the server is\n   ready to accept the continuation\
    \ of a command from the client.  The\n   remainder of this response is a line\
    \ of text.\n   This response is used in the AUTHORIZATION command to transmit\
    \ server\n   data to the client, and request additional client data.  This\n \
    \  response is also used if an argument to any command is a literal.\n   The client\
    \ is not permitted to send the octets of the literal unless\n   the server indicates\
    \ that it expects it.  This permits the server to\n   process commands and reject\
    \ errors on a line-by-line basis.  The\n   remainder of the command, including\
    \ the CRLF that terminates a\n   command, follows the octets of the literal. \
    \ If there are any\n   additional command arguments the literal octets are followed\
    \ by a\n   space and those arguments.\n   Example:    C: A001 LOGIN {11}\n   \
    \            S: + Ready for additional command text\n               C: FRED FOOBAR\
    \ {7}\n               S: + Ready for additional command text\n               C:\
    \ fat man\n               S: A001 OK LOGIN completed\n               C: A044 BLURDYBLOOP\
    \ {102856}\n               S: A044 BAD No such command as \"BLURDYBLOOP\"\n"
- title: 8.      Sample IMAP4rev1 connection
  contents:
  - "8.      Sample IMAP4rev1 connection\n   The following is a transcript of an IMAP4rev1\
    \ connection.  A long\n   line in this sample is broken for editorial clarity.\n"
- title: 'S:   * OK IMAP4rev1 Service Ready'
  contents:
  - 'S:   * OK IMAP4rev1 Service Ready

    '
- title: 'C:   a001 login mrc secret'
  contents:
  - 'C:   a001 login mrc secret

    '
- title: 'S:   a001 OK LOGIN completed'
  contents:
  - 'S:   a001 OK LOGIN completed

    '
- title: 'C:   a002 select inbox'
  contents:
  - 'C:   a002 select inbox

    '
- title: 'S:   * 18 EXISTS'
  contents:
  - 'S:   * 18 EXISTS

    '
- title: 'S:   * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)'
  contents:
  - 'S:   * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)

    '
- title: 'S:   * 2 RECENT'
  contents:
  - 'S:   * 2 RECENT

    '
- title: 'S:   * OK [UNSEEN 17] Message 17 is the first unseen message'
  contents:
  - 'S:   * OK [UNSEEN 17] Message 17 is the first unseen message

    '
- title: 'S:   * OK [UIDVALIDITY 3857529045] UIDs valid'
  contents:
  - 'S:   * OK [UIDVALIDITY 3857529045] UIDs valid

    '
- title: 'S:   a002 OK [READ-WRITE] SELECT completed'
  contents:
  - 'S:   a002 OK [READ-WRITE] SELECT completed

    '
- title: 'C:   a003 fetch 12 full'
  contents:
  - 'C:   a003 fetch 12 full

    '
- title: 'S:   * 12 FETCH (FLAGS (\Seen) INTERNALDATE "17-Jul-1996 02:44:25 -0700"'
  contents:
  - "S:   * 12 FETCH (FLAGS (\\Seen) INTERNALDATE \"17-Jul-1996 02:44:25 -0700\"\n\
    \      RFC822.SIZE 4286 ENVELOPE (\"Wed, 17 Jul 1996 02:23:25 -0700 (PDT)\"\n\
    \      \"IMAP4rev1 WG mtg summary and minutes\"\n      ((\"Terry Gray\" NIL \"\
    gray\" \"cac.washington.edu\"))\n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\"\
    ))\n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\"))\n      ((NIL\
    \ NIL \"imap\" \"cac.washington.edu\"))\n      ((NIL NIL \"minutes\" \"CNRI.Reston.VA.US\"\
    )\n      (\"John Klensin\" NIL \"KLENSIN\" \"INFOODS.MIT.EDU\")) NIL NIL\n   \
    \   \"<B27397-0100000@cac.washington.edu>\")\n       BODY (\"TEXT\" \"PLAIN\"\
    \ (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\" 3028 92))\n"
- title: 'S:    a003 OK FETCH completed'
  contents:
  - 'S:    a003 OK FETCH completed

    '
- title: 'C:    a004 fetch 12 body[header]'
  contents:
  - 'C:    a004 fetch 12 body[header]

    '
- title: 'S:    * 12 FETCH (BODY[HEADER] {350}'
  contents:
  - 'S:    * 12 FETCH (BODY[HEADER] {350}

    '
- title: 'S:    Date: Wed, 17 Jul 1996 02:23:25 -0700 (PDT)'
  contents:
  - 'S:    Date: Wed, 17 Jul 1996 02:23:25 -0700 (PDT)

    '
- title: 'S:    From: Terry Gray <gray@cac.washington.edu>'
  contents:
  - 'S:    From: Terry Gray <gray@cac.washington.edu>

    '
- title: 'S:    Subject: IMAP4rev1 WG mtg summary and minutes'
  contents:
  - 'S:    Subject: IMAP4rev1 WG mtg summary and minutes

    '
- title: 'S:    To: imap@cac.washington.edu'
  contents:
  - 'S:    To: imap@cac.washington.edu

    '
- title: 'S:    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@INFOODS.MIT.EDU>'
  contents:
  - 'S:    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@INFOODS.MIT.EDU>

    '
- title: 'S:    Message-Id: <B27397-0100000@cac.washington.edu>'
  contents:
  - 'S:    Message-Id: <B27397-0100000@cac.washington.edu>

    '
- title: 'S:    MIME-Version: 1.0'
  contents:
  - 'S:    MIME-Version: 1.0

    '
- title: 'S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII'
  contents:
  - 'S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII

    '
- title: 'S:'
  contents:
  - 'S:

    '
- title: 'S:    )'
  contents:
  - 'S:    )

    '
- title: 'S:    a004 OK FETCH completed'
  contents:
  - 'S:    a004 OK FETCH completed

    '
- title: 'C:    a005 store 12 +flags \deleted'
  contents:
  - 'C:    a005 store 12 +flags \deleted

    '
- title: 'S:    * 12 FETCH (FLAGS (\Seen \Deleted))'
  contents:
  - 'S:    * 12 FETCH (FLAGS (\Seen \Deleted))

    '
- title: 'S:    a005 OK +FLAGS completed'
  contents:
  - 'S:    a005 OK +FLAGS completed

    '
- title: 'C:    a006 logout'
  contents:
  - 'C:    a006 logout

    '
- title: 'S:    * BYE IMAP4rev1 server terminating connection'
  contents:
  - 'S:    * BYE IMAP4rev1 server terminating connection

    '
- title: 'S:    a006 OK LOGOUT completed'
  contents:
  - 'S:    a006 OK LOGOUT completed

    '
- title: 9.      Formal Syntax
  contents:
  - "9.      Formal Syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (BNF) notation as specified in [RFC-822] with one exception;\
    \ the\n   delimiter used with the \"#\" construct is a single space (SPACE) and\n\
    \   not one or more commas.\n   In the case of alternative or optional rules in\
    \ which a later rule\n   overlaps an earlier rule, the rule which is listed earlier\
    \ MUST take\n   priority.  For example, \"\\Seen\" when parsed as a flag is the\
    \ \\Seen\n   flag name and not a flag_extension, even though \"\\Seen\" could\
    \ be\n   parsed as a flag_extension.  Some, but not all, instances of this\n \
    \  rule are noted below.\n   Except as noted otherwise, all alphabetic characters\
    \ are case-\n   insensitive.  The use of upper or lower case characters to define\n\
    \   token strings is for editorial clarity only.  Implementations MUST\n   accept\
    \ these strings in a case-insensitive fashion.\n"
- title: address         ::= "(" addr_name SPACE addr_adl SPACE addr_mailbox
  contents:
  - "address         ::= \"(\" addr_name SPACE addr_adl SPACE addr_mailbox\n     \
    \               SPACE addr_host \")\"\n"
- title: addr_adl        ::= nstring
  contents:
  - "addr_adl        ::= nstring\n                    ;; Holds route from [RFC-822]\
    \ route-addr if\n                    ;; non-NIL\n"
- title: addr_host       ::= nstring
  contents:
  - "addr_host       ::= nstring\n                    ;; NIL indicates [RFC-822] group\
    \ syntax.\n                    ;; Otherwise, holds [RFC-822] domain name\n"
- title: addr_mailbox    ::= nstring
  contents:
  - "addr_mailbox    ::= nstring\n                    ;; NIL indicates end of [RFC-822]\
    \ group; if\n                    ;; non-NIL and addr_host is NIL, holds\n    \
    \                ;; [RFC-822] group name.\n                    ;; Otherwise, holds\
    \ [RFC-822] local-part\n"
- title: addr_name       ::= nstring
  contents:
  - "addr_name       ::= nstring\n                    ;; Holds phrase from [RFC-822]\
    \ mailbox if\n                    ;; non-NIL\n"
- title: alpha           ::= "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" /
  contents:
  - "alpha           ::= \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" / \"G\" / \"\
    H\" /\n                    \"I\" / \"J\" / \"K\" / \"L\" / \"M\" / \"N\" / \"\
    O\" / \"P\" /\n                    \"Q\" / \"R\" / \"S\" / \"T\" / \"U\" / \"\
    V\" / \"W\" / \"X\" /\n                    \"Y\" / \"Z\" /\n                 \
    \   \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" / \"g\" / \"h\" /\n        \
    \            \"i\" / \"j\" / \"k\" / \"l\" / \"m\" / \"n\" / \"o\" / \"p\" /\n\
    \                    \"q\" / \"r\" / \"s\" / \"t\" / \"u\" / \"v\" / \"w\" / \"\
    x\" /\n                    \"y\" / \"z\"\n                    ;; Case-sensitive\n"
- title: append          ::= "APPEND" SPACE mailbox [SPACE flag_list]
  contents:
  - "append          ::= \"APPEND\" SPACE mailbox [SPACE flag_list]\n            \
    \        [SPACE date_time] SPACE literal\n"
- title: astring         ::= atom / string
  contents:
  - 'astring         ::= atom / string

    '
- title: atom            ::= 1*ATOM_CHAR
  contents:
  - 'atom            ::= 1*ATOM_CHAR

    '
- title: ATOM_CHAR       ::= <any CHAR except atom_specials>
  contents:
  - 'ATOM_CHAR       ::= <any CHAR except atom_specials>

    '
- title: atom_specials   ::= "(" / ")" / "{" / SPACE / CTL / list_wildcards /
  contents:
  - "atom_specials   ::= \"(\" / \")\" / \"{\" / SPACE / CTL / list_wildcards /\n\
    \                    quoted_specials\n"
- title: authenticate    ::= "AUTHENTICATE" SPACE auth_type *(CRLF base64)
  contents:
  - 'authenticate    ::= "AUTHENTICATE" SPACE auth_type *(CRLF base64)

    '
- title: auth_type       ::= atom
  contents:
  - "auth_type       ::= atom\n                    ;; Defined by [IMAP-AUTH]\n"
- title: base64          ::= *(4base64_char) [base64_terminal]
  contents:
  - 'base64          ::= *(4base64_char) [base64_terminal]

    '
- title: base64_char     ::= alpha / digit / "+" / "/"
  contents:
  - 'base64_char     ::= alpha / digit / "+" / "/"

    '
- title: base64_terminal ::= (2base64_char "==") / (3base64_char "=")
  contents:
  - 'base64_terminal ::= (2base64_char "==") / (3base64_char "=")

    '
- title: body            ::= "(" body_type_1part / body_type_mpart ")"
  contents:
  - 'body            ::= "(" body_type_1part / body_type_mpart ")"

    '
- title: body_extension  ::= nstring / number / "(" 1#body_extension ")"
  contents:
  - "body_extension  ::= nstring / number / \"(\" 1#body_extension \")\"\n       \
    \             ;; Future expansion.  Client implementations\n                 \
    \   ;; MUST accept body_extension fields.  Server\n                    ;; implementations\
    \ MUST NOT generate\n                    ;; body_extension fields except as defined\
    \ by\n                    ;; future standard or standards-track\n            \
    \        ;; revisions of this specification.\n"
- title: body_ext_1part  ::= body_fld_md5 [SPACE body_fld_dsp
  contents:
  - "body_ext_1part  ::= body_fld_md5 [SPACE body_fld_dsp\n                    [SPACE\
    \ body_fld_lang\n                    [SPACE 1#body_extension]]]\n            \
    \        ;; MUST NOT be returned on non-extensible\n                    ;; \"\
    BODY\" fetch\n"
- title: body_ext_mpart  ::= body_fld_param
  contents:
  - "body_ext_mpart  ::= body_fld_param\n                    [SPACE body_fld_dsp SPACE\
    \ body_fld_lang\n                    [SPACE 1#body_extension]]\n             \
    \       ;; MUST NOT be returned on non-extensible\n                    ;; \"BODY\"\
    \ fetch\n"
- title: body_fields     ::= body_fld_param SPACE body_fld_id SPACE
  contents:
  - "body_fields     ::= body_fld_param SPACE body_fld_id SPACE\n                \
    \    body_fld_desc SPACE body_fld_enc SPACE\n                    body_fld_octets\n"
- title: body_fld_desc   ::= nstring
  contents:
  - 'body_fld_desc   ::= nstring

    '
- title: body_fld_dsp    ::= "(" string SPACE body_fld_param ")" / nil
  contents:
  - 'body_fld_dsp    ::= "(" string SPACE body_fld_param ")" / nil

    '
- title: body_fld_enc    ::= (<"> ("7BIT" / "8BIT" / "BINARY" / "BASE64"/
  contents:
  - "body_fld_enc    ::= (<\"> (\"7BIT\" / \"8BIT\" / \"BINARY\" / \"BASE64\"/\n \
    \                   \"QUOTED-PRINTABLE\") <\">) / string\n"
- title: body_fld_id     ::= nstring
  contents:
  - 'body_fld_id     ::= nstring

    '
- title: body_fld_lang   ::= nstring / "(" 1#string ")"
  contents:
  - 'body_fld_lang   ::= nstring / "(" 1#string ")"

    '
- title: body_fld_lines  ::= number
  contents:
  - 'body_fld_lines  ::= number

    '
- title: body_fld_md5    ::= nstring
  contents:
  - 'body_fld_md5    ::= nstring

    '
- title: body_fld_octets ::= number
  contents:
  - 'body_fld_octets ::= number

    '
- title: body_fld_param  ::= "(" 1#(string SPACE string) ")" / nil
  contents:
  - 'body_fld_param  ::= "(" 1#(string SPACE string) ")" / nil

    '
- title: body_type_1part ::= (body_type_basic / body_type_msg / body_type_text)
  contents:
  - "body_type_1part ::= (body_type_basic / body_type_msg / body_type_text)\n    \
    \                [SPACE body_ext_1part]\n"
- title: body_type_basic ::= media_basic SPACE body_fields
  contents:
  - "body_type_basic ::= media_basic SPACE body_fields\n                    ;; MESSAGE\
    \ subtype MUST NOT be \"RFC822\"\n"
- title: body_type_mpart ::= 1*body SPACE media_subtype
  contents:
  - "body_type_mpart ::= 1*body SPACE media_subtype\n                    [SPACE body_ext_mpart]\n"
- title: body_type_msg   ::= media_message SPACE body_fields SPACE envelope
  contents:
  - "body_type_msg   ::= media_message SPACE body_fields SPACE envelope\n        \
    \            SPACE body SPACE body_fld_lines\n"
- title: body_type_text  ::= media_text SPACE body_fields SPACE body_fld_lines
  contents:
  - 'body_type_text  ::= media_text SPACE body_fields SPACE body_fld_lines

    '
- title: capability      ::= "AUTH=" auth_type / atom
  contents:
  - "capability      ::= \"AUTH=\" auth_type / atom\n                    ;; New capabilities\
    \ MUST begin with \"X\" or be\n                    ;; registered with IANA as\
    \ standard or\n                    ;; standards-track\n"
- title: capability_data ::= "CAPABILITY" SPACE [1#capability SPACE] "IMAP4rev1"
  contents:
  - "capability_data ::= \"CAPABILITY\" SPACE [1#capability SPACE] \"IMAP4rev1\"\n\
    \                    [SPACE 1#capability]\n                    ;; IMAP4rev1 servers\
    \ which offer RFC 1730\n                    ;; compatibility MUST list \"IMAP4\"\
    \ as the first\n                    ;; capability.\n"
- title: CHAR            ::= <any 7-bit US-ASCII character except NUL,
  contents:
  - "CHAR            ::= <any 7-bit US-ASCII character except NUL,\n             \
    \        0x01 - 0x7f>\n"
- title: CHAR8           ::= <any 8-bit octet except NUL, 0x01 - 0xff>
  contents:
  - 'CHAR8           ::= <any 8-bit octet except NUL, 0x01 - 0xff>

    '
- title: command         ::= tag SPACE (command_any / command_auth /
  contents:
  - "command         ::= tag SPACE (command_any / command_auth /\n               \
    \     command_nonauth / command_select) CRLF\n                    ;; Modal based\
    \ on state\n"
- title: command_any     ::= "CAPABILITY" / "LOGOUT" / "NOOP" / x_command
  contents:
  - "command_any     ::= \"CAPABILITY\" / \"LOGOUT\" / \"NOOP\" / x_command\n    \
    \                ;; Valid in all states\n"
- title: command_auth    ::= append / create / delete / examine / list / lsub /
  contents:
  - "command_auth    ::= append / create / delete / examine / list / lsub /\n    \
    \                rename / select / status / subscribe / unsubscribe\n        \
    \            ;; Valid only in Authenticated or Selected state\n"
- title: command_nonauth ::= login / authenticate
  contents:
  - "command_nonauth ::= login / authenticate\n                    ;; Valid only when\
    \ in Non-Authenticated state\n"
- title: command_select  ::= "CHECK" / "CLOSE" / "EXPUNGE" /
  contents:
  - "command_select  ::= \"CHECK\" / \"CLOSE\" / \"EXPUNGE\" /\n                 \
    \    copy / fetch / store / uid / search\n                    ;; Valid only when\
    \ in Selected state\n"
- title: continue_req    ::= "+" SPACE (resp_text / base64)
  contents:
  - 'continue_req    ::= "+" SPACE (resp_text / base64)

    '
- title: copy            ::= "COPY" SPACE set SPACE mailbox
  contents:
  - 'copy            ::= "COPY" SPACE set SPACE mailbox

    '
- title: CR              ::= <ASCII CR, carriage return, 0x0D>
  contents:
  - 'CR              ::= <ASCII CR, carriage return, 0x0D>

    '
- title: create          ::= "CREATE" SPACE mailbox
  contents:
  - "create          ::= \"CREATE\" SPACE mailbox\n                    ;; Use of INBOX\
    \ gives a NO error\n"
- title: CRLF            ::= CR LF
  contents:
  - 'CRLF            ::= CR LF

    '
- title: CTL             ::= <any ASCII control character and DEL,
  contents:
  - "CTL             ::= <any ASCII control character and DEL,\n                 \
    \       0x00 - 0x1f, 0x7f>\n"
- title: date            ::= date_text / <"> date_text <">
  contents:
  - 'date            ::= date_text / <"> date_text <">

    '
- title: date_day        ::= 1*2digit
  contents:
  - "date_day        ::= 1*2digit\n                    ;; Day of month\n"
- title: date_day_fixed  ::= (SPACE digit) / 2digit
  contents:
  - "date_day_fixed  ::= (SPACE digit) / 2digit\n                    ;; Fixed-format\
    \ version of date_day\n"
- title: date_month      ::= "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" /
  contents:
  - "date_month      ::= \"Jan\" / \"Feb\" / \"Mar\" / \"Apr\" / \"May\" / \"Jun\"\
    \ /\n                    \"Jul\" / \"Aug\" / \"Sep\" / \"Oct\" / \"Nov\" / \"\
    Dec\"\n"
- title: date_text       ::= date_day "-" date_month "-" date_year
  contents:
  - 'date_text       ::= date_day "-" date_month "-" date_year

    '
- title: date_year       ::= 4digit
  contents:
  - 'date_year       ::= 4digit

    '
- title: date_time       ::= <"> date_day_fixed "-" date_month "-" date_year
  contents:
  - "date_time       ::= <\"> date_day_fixed \"-\" date_month \"-\" date_year\n  \
    \                  SPACE time SPACE zone <\">\n"
- title: delete          ::= "DELETE" SPACE mailbox
  contents:
  - "delete          ::= \"DELETE\" SPACE mailbox\n                    ;; Use of INBOX\
    \ gives a NO error\n"
- title: digit           ::= "0" / digit_nz
  contents:
  - 'digit           ::= "0" / digit_nz

    '
- title: digit_nz        ::= "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" /
  contents:
  - "digit_nz        ::= \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"\
    8\" /\n                    \"9\"\n"
- title: envelope        ::= "(" env_date SPACE env_subject SPACE env_from
  contents:
  - "envelope        ::= \"(\" env_date SPACE env_subject SPACE env_from\n       \
    \             SPACE env_sender SPACE env_reply_to SPACE env_to\n             \
    \       SPACE env_cc SPACE env_bcc SPACE env_in_reply_to\n                   \
    \ SPACE env_message_id \")\"\n"
- title: env_bcc         ::= "(" 1*address ")" / nil
  contents:
  - 'env_bcc         ::= "(" 1*address ")" / nil

    '
- title: env_cc          ::= "(" 1*address ")" / nil
  contents:
  - 'env_cc          ::= "(" 1*address ")" / nil

    '
- title: env_date        ::= nstring
  contents:
  - 'env_date        ::= nstring

    '
- title: env_from        ::= "(" 1*address ")" / nil
  contents:
  - 'env_from        ::= "(" 1*address ")" / nil

    '
- title: env_in_reply_to ::= nstring
  contents:
  - 'env_in_reply_to ::= nstring

    '
- title: env_message_id  ::= nstring
  contents:
  - 'env_message_id  ::= nstring

    '
- title: env_reply_to    ::= "(" 1*address ")" / nil
  contents:
  - 'env_reply_to    ::= "(" 1*address ")" / nil

    '
- title: env_sender      ::= "(" 1*address ")" / nil
  contents:
  - 'env_sender      ::= "(" 1*address ")" / nil

    '
- title: env_subject     ::= nstring
  contents:
  - 'env_subject     ::= nstring

    '
- title: env_to          ::= "(" 1*address ")" / nil
  contents:
  - 'env_to          ::= "(" 1*address ")" / nil

    '
- title: examine         ::= "EXAMINE" SPACE mailbox
  contents:
  - 'examine         ::= "EXAMINE" SPACE mailbox

    '
- title: fetch           ::= "FETCH" SPACE set SPACE ("ALL" / "FULL" /
  contents:
  - "fetch           ::= \"FETCH\" SPACE set SPACE (\"ALL\" / \"FULL\" /\n       \
    \             \"FAST\" / fetch_att / \"(\" 1#fetch_att \")\")\n"
- title: fetch_att       ::= "ENVELOPE" / "FLAGS" / "INTERNALDATE" /
  contents:
  - "fetch_att       ::= \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n         \
    \           \"RFC822\" [\".HEADER\" / \".SIZE\" / \".TEXT\"] /\n             \
    \       \"BODY\" [\"STRUCTURE\"] / \"UID\" /\n                    \"BODY\" [\"\
    .PEEK\"] section\n                    [\"<\" number \".\" nz_number \">\"]\n"
- title: flag            ::= "\Answered" / "\Flagged" / "\Deleted" /
  contents:
  - "flag            ::= \"\\Answered\" / \"\\Flagged\" / \"\\Deleted\" /\n      \
    \              \"\\Seen\" / \"\\Draft\" / flag_keyword / flag_extension\n"
- title: flag_extension  ::= "\" atom
  contents:
  - "flag_extension  ::= \"\\\" atom\n                    ;; Future expansion.  Client\
    \ implementations\n                    ;; MUST accept flag_extension flags.  Server\n\
    \                    ;; implementations MUST NOT generate\n                  \
    \  ;; flag_extension flags except as defined by\n                    ;; future\
    \ standard or standards-track\n                    ;; revisions of this specification.\n"
- title: flag_keyword    ::= atom
  contents:
  - 'flag_keyword    ::= atom

    '
- title: 'flag_list       ::= "(" #flag ")"'
  contents:
  - 'flag_list       ::= "(" #flag ")"

    '
- title: greeting        ::= "*" SPACE (resp_cond_auth / resp_cond_bye) CRLF
  contents:
  - 'greeting        ::= "*" SPACE (resp_cond_auth / resp_cond_bye) CRLF

    '
- title: header_fld_name ::= astring
  contents:
  - 'header_fld_name ::= astring

    '
- title: header_list     ::= "(" 1#header_fld_name ")"
  contents:
  - 'header_list     ::= "(" 1#header_fld_name ")"

    '
- title: LF              ::= <ASCII LF, line feed, 0x0A>
  contents:
  - 'LF              ::= <ASCII LF, line feed, 0x0A>

    '
- title: list            ::= "LIST" SPACE mailbox SPACE list_mailbox
  contents:
  - 'list            ::= "LIST" SPACE mailbox SPACE list_mailbox

    '
- title: list_mailbox    ::= 1*(ATOM_CHAR / list_wildcards) / string
  contents:
  - 'list_mailbox    ::= 1*(ATOM_CHAR / list_wildcards) / string

    '
- title: list_wildcards  ::= "%" / "*"
  contents:
  - 'list_wildcards  ::= "%" / "*"

    '
- title: literal         ::= "{" number "}" CRLF *CHAR8
  contents:
  - "literal         ::= \"{\" number \"}\" CRLF *CHAR8\n                    ;; Number\
    \ represents the number of CHAR8 octets\n"
- title: login           ::= "LOGIN" SPACE userid SPACE password
  contents:
  - 'login           ::= "LOGIN" SPACE userid SPACE password

    '
- title: lsub            ::= "LSUB" SPACE mailbox SPACE list_mailbox
  contents:
  - 'lsub            ::= "LSUB" SPACE mailbox SPACE list_mailbox

    '
- title: mailbox         ::= "INBOX" / astring
  contents:
  - "mailbox         ::= \"INBOX\" / astring\n                    ;; INBOX is case-insensitive.\
    \  All case variants of\n                    ;; INBOX (e.g. \"iNbOx\") MUST be\
    \ interpreted as INBOX\n                    ;; not as an astring.  Refer to section\
    \ 5.1 for\n                    ;; further semantic details of mailbox names.\n"
- title: mailbox_data    ::=  "FLAGS" SPACE flag_list /
  contents:
  - "mailbox_data    ::=  \"FLAGS\" SPACE flag_list /\n                     \"LIST\"\
    \ SPACE mailbox_list /\n                     \"LSUB\" SPACE mailbox_list /\n \
    \                    \"MAILBOX\" SPACE text /\n                     \"SEARCH\"\
    \ [SPACE 1#nz_number] /\n                     \"STATUS\" SPACE mailbox SPACE\n\
    \                     \"(\" #<status_att number \")\" /\n                    \
    \ number SPACE \"EXISTS\" / number SPACE \"RECENT\"\n"
- title: 'mailbox_list    ::= "(" #("\Marked" / "\Noinferiors" /'
  contents:
  - "mailbox_list    ::= \"(\" #(\"\\Marked\" / \"\\Noinferiors\" /\n            \
    \        \"\\Noselect\" / \"\\Unmarked\" / flag_extension) \")\"\n           \
    \         SPACE (<\"> QUOTED_CHAR <\"> / nil) SPACE mailbox\n"
- title: media_basic     ::= (<"> ("APPLICATION" / "AUDIO" / "IMAGE" /
  contents:
  - "media_basic     ::= (<\"> (\"APPLICATION\" / \"AUDIO\" / \"IMAGE\" /\n      \
    \              \"MESSAGE\" / \"VIDEO\") <\">) / string)\n                    SPACE\
    \ media_subtype\n                    ;; Defined in [MIME-IMT]\n"
- title: media_message   ::= <"> "MESSAGE" <"> SPACE <"> "RFC822" <">
  contents:
  - "media_message   ::= <\"> \"MESSAGE\" <\"> SPACE <\"> \"RFC822\" <\">\n      \
    \              ;; Defined in [MIME-IMT]\n"
- title: media_subtype   ::= string
  contents:
  - "media_subtype   ::= string\n                    ;; Defined in [MIME-IMT]\n"
- title: media_text      ::= <"> "TEXT" <"> SPACE media_subtype
  contents:
  - "media_text      ::= <\"> \"TEXT\" <\"> SPACE media_subtype\n                \
    \    ;; Defined in [MIME-IMT]\n"
- title: message_data    ::= nz_number SPACE ("EXPUNGE" /
  contents:
  - "message_data    ::= nz_number SPACE (\"EXPUNGE\" /\n                        \
    \            (\"FETCH\" SPACE msg_att))\n"
- title: msg_att         ::= "(" 1#("ENVELOPE" SPACE envelope /
  contents:
  - "msg_att         ::= \"(\" 1#(\"ENVELOPE\" SPACE envelope /\n                \
    \    \"FLAGS\" SPACE \"(\" #(flag / \"\\Recent\") \")\" /\n                  \
    \  \"INTERNALDATE\" SPACE date_time /\n                    \"RFC822\" [\".HEADER\"\
    \ / \".TEXT\"] SPACE nstring /\n                    \"RFC822.SIZE\" SPACE number\
    \ /\n                    \"BODY\" [\"STRUCTURE\"] SPACE body /\n             \
    \       \"BODY\" section [\"<\" number \">\"] SPACE nstring /\n              \
    \      \"UID\" SPACE uniqueid) \")\"\n"
- title: nil             ::= "NIL"
  contents:
  - 'nil             ::= "NIL"

    '
- title: nstring         ::= string / nil
  contents:
  - 'nstring         ::= string / nil

    '
- title: number          ::= 1*digit
  contents:
  - "number          ::= 1*digit\n                    ;; Unsigned 32-bit integer\n\
    \                    ;; (0 <= n < 4,294,967,296)\n"
- title: nz_number       ::= digit_nz *digit
  contents:
  - "nz_number       ::= digit_nz *digit\n                    ;; Non-zero unsigned\
    \ 32-bit integer\n                    ;; (0 < n < 4,294,967,296)\n"
- title: password        ::= astring
  contents:
  - 'password        ::= astring

    '
- title: quoted          ::= <"> *QUOTED_CHAR <">
  contents:
  - 'quoted          ::= <"> *QUOTED_CHAR <">

    '
- title: QUOTED_CHAR     ::= <any TEXT_CHAR except quoted_specials> /
  contents:
  - "QUOTED_CHAR     ::= <any TEXT_CHAR except quoted_specials> /\n              \
    \      \"\\\" quoted_specials\n"
- title: quoted_specials ::= <"> / "\"
  contents:
  - 'quoted_specials ::= <"> / "\"

    '
- title: rename          ::= "RENAME" SPACE mailbox SPACE mailbox
  contents:
  - "rename          ::= \"RENAME\" SPACE mailbox SPACE mailbox\n                \
    \    ;; Use of INBOX as a destination gives a NO error\n"
- title: response        ::= *(continue_req / response_data) response_done
  contents:
  - 'response        ::= *(continue_req / response_data) response_done

    '
- title: response_data   ::= "*" SPACE (resp_cond_state / resp_cond_bye /
  contents:
  - "response_data   ::= \"*\" SPACE (resp_cond_state / resp_cond_bye /\n        \
    \            mailbox_data / message_data / capability_data)\n                \
    \    CRLF\n"
- title: response_done   ::= response_tagged / response_fatal
  contents:
  - 'response_done   ::= response_tagged / response_fatal

    '
- title: response_fatal  ::= "*" SPACE resp_cond_bye CRLF
  contents:
  - "response_fatal  ::= \"*\" SPACE resp_cond_bye CRLF\n                    ;; Server\
    \ closes connection immediately\n"
- title: response_tagged ::= tag SPACE resp_cond_state CRLF
  contents:
  - 'response_tagged ::= tag SPACE resp_cond_state CRLF

    '
- title: resp_cond_auth  ::= ("OK" / "PREAUTH") SPACE resp_text
  contents:
  - "resp_cond_auth  ::= (\"OK\" / \"PREAUTH\") SPACE resp_text\n                \
    \    ;; Authentication condition\n"
- title: resp_cond_bye   ::= "BYE" SPACE resp_text
  contents:
  - 'resp_cond_bye   ::= "BYE" SPACE resp_text

    '
- title: resp_cond_state ::= ("OK" / "NO" / "BAD") SPACE resp_text
  contents:
  - "resp_cond_state ::= (\"OK\" / \"NO\" / \"BAD\") SPACE resp_text\n           \
    \         ;; Status condition\n"
- title: resp_text       ::= ["[" resp_text_code "]" SPACE] (text_mime2 / text)
  contents:
  - "resp_text       ::= [\"[\" resp_text_code \"]\" SPACE] (text_mime2 / text)\n\
    \                    ;; text SHOULD NOT begin with \"[\" or \"=\"\n"
- title: resp_text_code  ::= "ALERT" / "PARSE" /
  contents:
  - "resp_text_code  ::= \"ALERT\" / \"PARSE\" /\n                    \"PERMANENTFLAGS\"\
    \ SPACE \"(\" #(flag / \"\\*\") \")\" /\n                    \"READ-ONLY\" / \"\
    READ-WRITE\" / \"TRYCREATE\" /\n                    \"UIDVALIDITY\" SPACE nz_number\
    \ /\n                    \"UNSEEN\" SPACE nz_number /\n                    atom\
    \ [SPACE 1*<any TEXT_CHAR except \"]\">]\n"
- title: search          ::= "SEARCH" SPACE ["CHARSET" SPACE astring SPACE]
  contents:
  - "search          ::= \"SEARCH\" SPACE [\"CHARSET\" SPACE astring SPACE]\n    \
    \                1#search_key\n                    ;; [CHARSET] MUST be registered\
    \ with IANA\n"
- title: search_key      ::= "ALL" / "ANSWERED" / "BCC" SPACE astring /
  contents:
  - "search_key      ::= \"ALL\" / \"ANSWERED\" / \"BCC\" SPACE astring /\n      \
    \              \"BEFORE\" SPACE date / \"BODY\" SPACE astring /\n            \
    \        \"CC\" SPACE astring / \"DELETED\" / \"FLAGGED\" /\n                \
    \    \"FROM\" SPACE astring /\n                    \"KEYWORD\" SPACE flag_keyword\
    \ / \"NEW\" / \"OLD\" /\n                    \"ON\" SPACE date / \"RECENT\" /\
    \ \"SEEN\" /\n                    \"SINCE\" SPACE date / \"SUBJECT\" SPACE astring\
    \ /\n                    \"TEXT\" SPACE astring / \"TO\" SPACE astring /\n   \
    \                 \"UNANSWERED\" / \"UNDELETED\" / \"UNFLAGGED\" /\n         \
    \           \"UNKEYWORD\" SPACE flag_keyword / \"UNSEEN\" /\n                \
    \    ;; Above this line were in [IMAP2]\n                    \"DRAFT\" /\n   \
    \                 \"HEADER\" SPACE header_fld_name SPACE astring /\n         \
    \           \"LARGER\" SPACE number / \"NOT\" SPACE search_key /\n           \
    \         \"OR\" SPACE search_key SPACE search_key /\n                    \"SENTBEFORE\"\
    \ SPACE date / \"SENTON\" SPACE date /\n                    \"SENTSINCE\" SPACE\
    \ date / \"SMALLER\" SPACE number /\n                    \"UID\" SPACE set / \"\
    UNDRAFT\" / set /\n                    \"(\" 1#search_key \")\"\n"
- title: section         ::= "[" [section_text / (nz_number *["." nz_number]
  contents:
  - "section         ::= \"[\" [section_text / (nz_number *[\".\" nz_number]\n   \
    \                 [\".\" (section_text / \"MIME\")])] \"]\"\n"
- title: section_text    ::= "HEADER" / "HEADER.FIELDS" [".NOT"]
  contents:
  - "section_text    ::= \"HEADER\" / \"HEADER.FIELDS\" [\".NOT\"]\n             \
    \       SPACE header_list / \"TEXT\"\n"
- title: select          ::= "SELECT" SPACE mailbox
  contents:
  - 'select          ::= "SELECT" SPACE mailbox

    '
- title: sequence_num    ::= nz_number / "*"
  contents:
  - "sequence_num    ::= nz_number / \"*\"\n                    ;; * is the largest\
    \ number in use.  For message\n                    ;; sequence numbers, it is\
    \ the number of messages\n                    ;; in the mailbox.  For unique identifiers,\
    \ it is\n                    ;; the unique identifier of the last message in\n\
    \                    ;; the mailbox.\n"
- title: set             ::= sequence_num / (sequence_num ":" sequence_num) /
  contents:
  - "set             ::= sequence_num / (sequence_num \":\" sequence_num) /\n    \
    \                (set \",\" set)\n                    ;; Identifies a set of messages.\
    \  For message\n                    ;; sequence numbers, these are consecutive\n\
    \                    ;; numbers from 1 to the number of messages in\n        \
    \            ;; the mailbox\n                    ;; Comma delimits individual\
    \ numbers, colon\n                    ;; delimits between two numbers inclusive.\n\
    \                    ;; Example: 2,4:7,9,12:* is 2,4,5,6,7,9,12,13,\n        \
    \            ;; 14,15 for a mailbox with 15 messages.\n"
- title: SPACE           ::= <ASCII SP, space, 0x20>
  contents:
  - 'SPACE           ::= <ASCII SP, space, 0x20>

    '
- title: status          ::= "STATUS" SPACE mailbox SPACE "(" 1#status_att ")"
  contents:
  - 'status          ::= "STATUS" SPACE mailbox SPACE "(" 1#status_att ")"

    '
- title: status_att      ::= "MESSAGES" / "RECENT" / "UIDNEXT" / "UIDVALIDITY" /
  contents:
  - "status_att      ::= \"MESSAGES\" / \"RECENT\" / \"UIDNEXT\" / \"UIDVALIDITY\"\
    \ /\n                    \"UNSEEN\"\n"
- title: store           ::= "STORE" SPACE set SPACE store_att_flags
  contents:
  - 'store           ::= "STORE" SPACE set SPACE store_att_flags

    '
- title: store_att_flags ::= (["+" / "-"] "FLAGS" [".SILENT"]) SPACE
  contents:
  - "store_att_flags ::= ([\"+\" / \"-\"] \"FLAGS\" [\".SILENT\"]) SPACE\n       \
    \             (flag_list / #flag)\n"
- title: string          ::= quoted / literal
  contents:
  - 'string          ::= quoted / literal

    '
- title: subscribe       ::= "SUBSCRIBE" SPACE mailbox
  contents:
  - 'subscribe       ::= "SUBSCRIBE" SPACE mailbox

    '
- title: tag             ::= 1*<any ATOM_CHAR except "+">
  contents:
  - 'tag             ::= 1*<any ATOM_CHAR except "+">

    '
- title: text            ::= 1*TEXT_CHAR
  contents:
  - 'text            ::= 1*TEXT_CHAR

    '
- title: text_mime2       ::= "=?" <charset> "?" <encoding> "?"
  contents:
  - "text_mime2       ::= \"=?\" <charset> \"?\" <encoding> \"?\"\n              \
    \       <encoded-text> \"?=\"\n                     ;; Syntax defined in [MIME-HDRS]\n"
- title: TEXT_CHAR       ::= <any CHAR except CR and LF>
  contents:
  - 'TEXT_CHAR       ::= <any CHAR except CR and LF>

    '
- title: time            ::= 2digit ":" 2digit ":" 2digit
  contents:
  - "time            ::= 2digit \":\" 2digit \":\" 2digit\n                    ;;\
    \ Hours minutes seconds\n"
- title: uid             ::= "UID" SPACE (copy / fetch / search / store)
  contents:
  - "uid             ::= \"UID\" SPACE (copy / fetch / search / store)\n         \
    \           ;; Unique identifiers used instead of message\n                  \
    \  ;; sequence numbers\n"
- title: uniqueid        ::= nz_number
  contents:
  - "uniqueid        ::= nz_number\n                    ;; Strictly ascending\n"
- title: unsubscribe     ::= "UNSUBSCRIBE" SPACE mailbox
  contents:
  - 'unsubscribe     ::= "UNSUBSCRIBE" SPACE mailbox

    '
- title: userid          ::= astring
  contents:
  - 'userid          ::= astring

    '
- title: x_command       ::= "X" atom <experimental command arguments>
  contents:
  - 'x_command       ::= "X" atom <experimental command arguments>

    '
- title: zone            ::= ("+" / "-") 4digit
  contents:
  - "zone            ::= (\"+\" / \"-\") 4digit\n                    ;; Signed four-digit\
    \ value of hhmm representing\n                    ;; hours and minutes west of\
    \ Greenwich (that is,\n                    ;; (the amount that the given time\
    \ differs from\n                    ;; Universal Time).  Subtracting the timezone\n\
    \                    ;; from the given time will give the UT form.\n         \
    \           ;; The Universal Time zone is \"+0000\".\n"
- title: 10.     Author's Note
  contents:
  - "10.     Author's Note\n   This document is a revision or rewrite of earlier documents,\
    \ and\n   supercedes the protocol specification in those documents: RFC 1730,\n\
    \   unpublished IMAP2bis.TXT document, RFC 1176, and RFC 1064.\n"
- title: 11.     Security Considerations
  contents:
  - "11.     Security Considerations\n   IMAP4rev1 protocol transactions, including\
    \ electronic mail data, are\n   sent in the clear over the network unless privacy\
    \ protection is\n   negotiated in the AUTHENTICATE command.\n   A server error\
    \ message for an AUTHENTICATE command which fails due to\n   invalid credentials\
    \ SHOULD NOT detail why the credentials are\n   invalid.\n   Use of the LOGIN\
    \ command sends passwords in the clear.  This can be\n   avoided by using the\
    \ AUTHENTICATE command instead.\n   A server error message for a failing LOGIN\
    \ command SHOULD NOT specify\n   that the user name, as opposed to the password,\
    \ is invalid.\n   Additional security considerations are discussed in the section\n\
    \   discussing the AUTHENTICATE and LOGIN commands.\n"
- title: 12.     Author's Address
  contents:
  - "12.     Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing\n\
    \   University of Washington\n   4545 15th Aveneue NE\n   Seattle, WA  98105-4527\n\
    \   Phone: (206) 543-5762\n   EMail: MRC@CAC.Washington.EDU\n"
- title: Appendices
  contents:
  - 'Appendices

    '
- title: A.      References
  contents:
  - 'A.      References

    '
- title: '[ACAP] Myers, J. "ACAP -- Application Configuration Access Protocol",'
  contents:
  - '[ACAP] Myers, J. "ACAP -- Application Configuration Access Protocol",

    '
- title: Work in Progress.
  contents:
  - 'Work in Progress.

    '
- title: '[CHARSET] Reynolds, J., and J. Postel, "Assigned Numbers", STD 2,'
  contents:
  - '[CHARSET] Reynolds, J., and J. Postel, "Assigned Numbers", STD 2,

    '
- title: RFC 1700, USC/Information Sciences Institute, October 1994.
  contents:
  - 'RFC 1700, USC/Information Sciences Institute, October 1994.

    '
- title: '[DISPOSITION] Troost, R., and Dorner, S., "Communicating Presentation'
  contents:
  - '[DISPOSITION] Troost, R., and Dorner, S., "Communicating Presentation

    '
- title: 'Information in Internet Messages: The Content-Disposition Header",'
  contents:
  - 'Information in Internet Messages: The Content-Disposition Header",

    '
- title: RFC 1806, June 1995.
  contents:
  - 'RFC 1806, June 1995.

    '
- title: '[IMAP-AUTH] Myers, J., "IMAP4 Authentication Mechanism", RFC 1731.'
  contents:
  - '[IMAP-AUTH] Myers, J., "IMAP4 Authentication Mechanism", RFC 1731.

    '
- title: Carnegie-Mellon University, December 1994.
  contents:
  - 'Carnegie-Mellon University, December 1994.

    '
- title: '[IMAP-COMPAT] Crispin, M., "IMAP4 Compatibility with IMAP2bis", RFC'
  contents:
  - '[IMAP-COMPAT] Crispin, M., "IMAP4 Compatibility with IMAP2bis", RFC

    '
- title: 2061, University of Washington, November 1996.
  contents:
  - '2061, University of Washington, November 1996.

    '
- title: '[IMAP-DISC] Austein, R., "Synchronization Operations for Disconnected'
  contents:
  - '[IMAP-DISC] Austein, R., "Synchronization Operations for Disconnected

    '
- title: IMAP4 Clients", Work in Progress.
  contents:
  - 'IMAP4 Clients", Work in Progress.

    '
- title: '[IMAP-HISTORICAL] Crispin, M. "IMAP4 Compatibility with IMAP2 and'
  contents:
  - '[IMAP-HISTORICAL] Crispin, M. "IMAP4 Compatibility with IMAP2 and

    '
- title: IMAP2bis", RFC 1732, University of Washington, December 1994.
  contents:
  - 'IMAP2bis", RFC 1732, University of Washington, December 1994.

    '
- title: '[IMAP-MODEL] Crispin, M., "Distributed Electronic Mail Models in'
  contents:
  - '[IMAP-MODEL] Crispin, M., "Distributed Electronic Mail Models in

    '
- title: IMAP4", RFC 1733, University of Washington, December 1994.
  contents:
  - 'IMAP4", RFC 1733, University of Washington, December 1994.

    '
- title: '[IMAP-OBSOLETE] Crispin, M., "Internet Message Access Protocol -'
  contents:
  - '[IMAP-OBSOLETE] Crispin, M., "Internet Message Access Protocol -

    '
- title: Obsolete Syntax", RFC 2062, University of Washington, November 1996.
  contents:
  - 'Obsolete Syntax", RFC 2062, University of Washington, November 1996.

    '
- title: '[IMAP2] Crispin, M., "Interactive Mail Access Protocol - Version 2",'
  contents:
  - '[IMAP2] Crispin, M., "Interactive Mail Access Protocol - Version 2",

    '
- title: RFC 1176, University of Washington, August 1990.
  contents:
  - 'RFC 1176, University of Washington, August 1990.

    '
- title: '[LANGUAGE-TAGS] Alvestrand, H., "Tags for the Identification of'
  contents:
  - '[LANGUAGE-TAGS] Alvestrand, H., "Tags for the Identification of

    '
- title: Languages", RFC 1766, March 1995.
  contents:
  - 'Languages", RFC 1766, March 1995.

    '
- title: '[MD5] Myers, J., and M. Rose, "The Content-MD5 Header Field", RFC'
  contents:
  - '[MD5] Myers, J., and M. Rose, "The Content-MD5 Header Field", RFC

    '
- title: 1864, October 1995.
  contents:
  - '1864, October 1995.

    '
- title: '[MIME-IMB] Freed, N., and N. Borenstein, "MIME (Multipurpose Internet'
  contents:
  - '[MIME-IMB] Freed, N., and N. Borenstein, "MIME (Multipurpose Internet

    '
- title: 'Mail Extensions) Part One: Format of Internet Message Bodies", RFC'
  contents:
  - 'Mail Extensions) Part One: Format of Internet Message Bodies", RFC

    '
- title: 2045, November 1996.
  contents:
  - '2045, November 1996.

    '
- title: '[MIME-IMT] Freed, N., and N. Borenstein, "MIME (Multipurpose'
  contents:
  - '[MIME-IMT] Freed, N., and N. Borenstein, "MIME (Multipurpose

    '
- title: 'Internet Mail Extensions) Part Two: Media Types", RFC 2046,'
  contents:
  - 'Internet Mail Extensions) Part Two: Media Types", RFC 2046,

    '
- title: November 1996.
  contents:
  - 'November 1996.

    '
- title: '[MIME-HDRS] Moore, K., "MIME (Multipurpose Internet Mail Extensions)'
  contents:
  - '[MIME-HDRS] Moore, K., "MIME (Multipurpose Internet Mail Extensions)

    '
- title: 'Part Three: Message Header Extensions for Non-ASCII Text", RFC'
  contents:
  - 'Part Three: Message Header Extensions for Non-ASCII Text", RFC

    '
- title: 2047, November 1996.
  contents:
  - '2047, November 1996.

    '
- title: '[RFC-822] Crocker, D., "Standard for the Format of ARPA Internet Text'
  contents:
  - '[RFC-822] Crocker, D., "Standard for the Format of ARPA Internet Text

    '
- title: Messages", STD 11, RFC 822, University of Delaware, August 1982.
  contents:
  - 'Messages", STD 11, RFC 822, University of Delaware, August 1982.

    '
- title: '[SMTP] Postel, J., "Simple Mail Transfer Protocol", STD 10,'
  contents:
  - '[SMTP] Postel, J., "Simple Mail Transfer Protocol", STD 10,

    '
- title: RFC 821, USC/Information Sciences Institute, August 1982.
  contents:
  - 'RFC 821, USC/Information Sciences Institute, August 1982.

    '
- title: '[UTF-7] Goldsmith, D., and Davis, M., "UTF-7: A Mail-Safe'
  contents:
  - '[UTF-7] Goldsmith, D., and Davis, M., "UTF-7: A Mail-Safe

    '
- title: Transformation Format of Unicode", RFC 1642, July 1994.
  contents:
  - 'Transformation Format of Unicode", RFC 1642, July 1994.

    '
- title: B.      Changes from RFC 1730
  contents:
  - 'B.      Changes from RFC 1730

    '
- title: 1) The STATUS command has been added.
  contents:
  - '1) The STATUS command has been added.

    '
- title: 2) Clarify in the formal syntax that the "#" construct can never
  contents:
  - '2) Clarify in the formal syntax that the "#" construct can never

    '
- title: refer to multiple spaces.
  contents:
  - 'refer to multiple spaces.

    '
- title: 3) Obsolete syntax has been moved to a separate document.
  contents:
  - '3) Obsolete syntax has been moved to a separate document.

    '
- title: 4) The PARTIAL command has been obsoleted.
  contents:
  - '4) The PARTIAL command has been obsoleted.

    '
- title: 5) The RFC822.HEADER.LINES, RFC822.HEADER.LINES.NOT, RFC822.PEEK, and
  contents:
  - '5) The RFC822.HEADER.LINES, RFC822.HEADER.LINES.NOT, RFC822.PEEK, and

    '
- title: RFC822.TEXT.PEEK fetch attributes have been obsoleted.
  contents:
  - 'RFC822.TEXT.PEEK fetch attributes have been obsoleted.

    '
- title: 6) The "<" origin "." size ">" suffix for BODY text attributes has
  contents:
  - '6) The "<" origin "." size ">" suffix for BODY text attributes has

    '
- title: been added.
  contents:
  - 'been added.

    '
- title: 7) The HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT, MIME, and TEXT part
  contents:
  - '7) The HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT, MIME, and TEXT part

    '
- title: specifiers have been added.
  contents:
  - 'specifiers have been added.

    '
- title: 8) Support for Content-Disposition and Content-Language has been
  contents:
  - '8) Support for Content-Disposition and Content-Language has been

    '
- title: added.
  contents:
  - 'added.

    '
- title: 9) The restriction on fetching nested MULTIPART parts has been
  contents:
  - '9) The restriction on fetching nested MULTIPART parts has been

    '
- title: removed.
  contents:
  - 'removed.

    '
- title: 10) Body part number 0 has been obsoleted.
  contents:
  - '10) Body part number 0 has been obsoleted.

    '
- title: 11) Server-supported authenticators are now identified by
  contents:
  - '11) Server-supported authenticators are now identified by

    '
- title: capabilities.
  contents:
  - 'capabilities.

    '
- title: 12) The capability that identifies this protocol is now called
  contents:
  - '12) The capability that identifies this protocol is now called

    '
- title: '"IMAP4rev1".  A server that provides backwards support for RFC 1730'
  contents:
  - '"IMAP4rev1".  A server that provides backwards support for RFC 1730

    '
- title: SHOULD emit the "IMAP4" capability in addition to "IMAP4rev1" in its
  contents:
  - 'SHOULD emit the "IMAP4" capability in addition to "IMAP4rev1" in its

    '
- title: CAPABILITY response.  Because RFC-1730 required "IMAP4" to appear as
  contents:
  - 'CAPABILITY response.  Because RFC-1730 required "IMAP4" to appear as

    '
- title: the first capability, it MUST listed first in the response.
  contents:
  - 'the first capability, it MUST listed first in the response.

    '
- title: 13) A description of the mailbox name namespace convention has been
  contents:
  - '13) A description of the mailbox name namespace convention has been

    '
- title: added.
  contents:
  - 'added.

    '
- title: 14) A description of the international mailbox name convention has
  contents:
  - '14) A description of the international mailbox name convention has

    '
- title: been added.
  contents:
  - 'been added.

    '
- title: 15) The UID-NEXT and UID-VALIDITY status items are now called UIDNEXT
  contents:
  - '15) The UID-NEXT and UID-VALIDITY status items are now called UIDNEXT

    '
- title: and UIDVALIDITY.  This is a change from the IMAP STATUS
  contents:
  - 'and UIDVALIDITY.  This is a change from the IMAP STATUS

    '
- title: Work in Progress and not from RFC-1730
  contents:
  - 'Work in Progress and not from RFC-1730

    '
- title: 16) Add a clarification that a null mailbox name argument to the LIST
  contents:
  - '16) Add a clarification that a null mailbox name argument to the LIST

    '
- title: command returns an untagged LIST response with the hierarchy
  contents:
  - 'command returns an untagged LIST response with the hierarchy

    '
- title: delimiter and root of the reference argument.
  contents:
  - 'delimiter and root of the reference argument.

    '
- title: 17) Define terms such as "MUST", "SHOULD", and "MUST NOT".
  contents:
  - '17) Define terms such as "MUST", "SHOULD", and "MUST NOT".

    '
- title: 18) Add a section which defines message attributes and more
  contents:
  - '18) Add a section which defines message attributes and more

    '
- title: thoroughly details the semantics of message sequence numbers, UIDs,
  contents:
  - 'thoroughly details the semantics of message sequence numbers, UIDs,

    '
- title: and flags.
  contents:
  - 'and flags.

    '
- title: 19) Add a clarification detailing the circumstances when a client may
  contents:
  - '19) Add a clarification detailing the circumstances when a client may

    '
- title: send multiple commands without waiting for a response, and the
  contents:
  - 'send multiple commands without waiting for a response, and the

    '
- title: circumstances in which ambiguities may result.
  contents:
  - 'circumstances in which ambiguities may result.

    '
- title: 20) Add a recommendation on server behavior for DELETE and RENAME
  contents:
  - '20) Add a recommendation on server behavior for DELETE and RENAME

    '
- title: when inferior hierarchical names of the given name exist.
  contents:
  - 'when inferior hierarchical names of the given name exist.

    '
- title: 21) Add a clarification that a mailbox name may not be unilaterally
  contents:
  - '21) Add a clarification that a mailbox name may not be unilaterally

    '
- title: unsubscribed by the server, even if that mailbox name no longer
  contents:
  - 'unsubscribed by the server, even if that mailbox name no longer

    '
- title: exists.
  contents:
  - 'exists.

    '
- title: 22) Add a clarification that LIST should return its results quickly
  contents:
  - '22) Add a clarification that LIST should return its results quickly

    '
- title: without undue delay.
  contents:
  - 'without undue delay.

    '
- title: 23) Add a clarification that the date_time argument to APPEND sets
  contents:
  - '23) Add a clarification that the date_time argument to APPEND sets

    '
- title: the internal date of the message.
  contents:
  - 'the internal date of the message.

    '
- title: 24) Add a clarification on APPEND behavior when the target mailbox is
  contents:
  - '24) Add a clarification on APPEND behavior when the target mailbox is

    '
- title: the currently selected mailbox.
  contents:
  - 'the currently selected mailbox.

    '
- title: 25) Add a clarification that external changes to flags should be
  contents:
  - '25) Add a clarification that external changes to flags should be

    '
- title: always announced via an untagged FETCH even if the current command is
  contents:
  - 'always announced via an untagged FETCH even if the current command is

    '
- title: a STORE with the ".SILENT" suffix.
  contents:
  - 'a STORE with the ".SILENT" suffix.

    '
- title: 26) Add a clarification that COPY appends to the target mailbox.
  contents:
  - '26) Add a clarification that COPY appends to the target mailbox.

    '
- title: 27) Add the NEWNAME response code.
  contents:
  - '27) Add the NEWNAME response code.

    '
- title: 28) Rewrite the description of the untagged BYE response to clarify
  contents:
  - '28) Rewrite the description of the untagged BYE response to clarify

    '
- title: its semantics.
  contents:
  - 'its semantics.

    '
- title: 29) Change the reference for the body MD5 to refer to the proper RFC.
  contents:
  - '29) Change the reference for the body MD5 to refer to the proper RFC.

    '
- title: 30) Clarify that the formal syntax contains rules which may overlap,
  contents:
  - '30) Clarify that the formal syntax contains rules which may overlap,

    '
- title: and that in the event of such an overlap the rule which occurs first
  contents:
  - 'and that in the event of such an overlap the rule which occurs first

    '
- title: takes precedence.
  contents:
  - 'takes precedence.

    '
- title: 31) Correct the definition of body_fld_param.
  contents:
  - '31) Correct the definition of body_fld_param.

    '
- title: 32) More formal syntax for capability_data.
  contents:
  - '32) More formal syntax for capability_data.

    '
- title: 33) Clarify that any case variant of "INBOX" must be interpreted as
  contents:
  - '33) Clarify that any case variant of "INBOX" must be interpreted as

    '
- title: INBOX.
  contents:
  - 'INBOX.

    '
- title: 34) Clarify that the human-readable text in resp_text should not
  contents:
  - '34) Clarify that the human-readable text in resp_text should not

    '
- title: begin with "[" or "=".
  contents:
  - 'begin with "[" or "=".

    '
- title: 35) Change MIME references to Draft Standard documents.
  contents:
  - '35) Change MIME references to Draft Standard documents.

    '
- title: 36) Clarify \Recent semantics.
  contents:
  - '36) Clarify \Recent semantics.

    '
- title: 37) Additional examples.
  contents:
  - '37) Additional examples.

    '
- title: C.      Key Word Index
  contents:
  - "C.      Key Word Index\n       +FLAGS <flag list> (store command data item) ...............\
    \   45\n       +FLAGS.SILENT <flag list> (store command data item) ........  \
    \ 46\n       -FLAGS <flag list> (store command data item) ...............   46\n\
    \       -FLAGS.SILENT <flag list> (store command data item) ........   46\n  \
    \     ALERT (response code) ......................................   50\n    \
    \   ALL (fetch item) ...........................................   41\n      \
    \ ALL (search key) ...........................................   38\n       ANSWERED\
    \ (search key) ......................................   38\n       APPEND (command)\
    \ ...........................................   34\n       AUTHENTICATE (command)\
    \ .....................................   20\n       BAD (response) .............................................\
    \   52\n       BCC <string> (search key) ..................................  \
    \ 38\n       BEFORE <date> (search key) .................................   39\n\
    \       BODY (fetch item) ..........................................   41\n  \
    \     BODY (fetch result) ........................................   58\n    \
    \   BODY <string> (search key) .................................   39\n      \
    \ BODY.PEEK[<section>]<<partial>> (fetch item) ...............   44\n       BODYSTRUCTURE\
    \ (fetch item) .................................   44\n       BODYSTRUCTURE (fetch\
    \ result) ...............................   59\n       BODY[<section>]<<origin_octet>>\
    \ (fetch result) .............   58\n       BODY[<section>]<<partial>> (fetch\
    \ item) ....................   41\n       BYE (response) .............................................\
    \   52\n       Body Structure (message attribute) .........................  \
    \ 11\n       CAPABILITY (command) .......................................   18\n\
    \       CAPABILITY (response) ......................................   53\n  \
    \     CC <string> (search key) ...................................   39\n    \
    \   CHECK (command) ............................................   36\n      \
    \ CLOSE (command) ............................................   36\n       COPY\
    \ (command) .............................................   46\n       CREATE\
    \ (command) ...........................................   25\n       DELETE (command)\
    \ ...........................................   26\n       DELETED (search key)\
    \ .......................................   39\n       DRAFT (search key) .........................................\
    \   39\n       ENVELOPE (fetch item) ......................................  \
    \ 44\n       ENVELOPE (fetch result) ....................................   62\n\
    \       EXAMINE (command) ..........................................   24\n  \
    \     EXISTS (response) ..........................................   56\n    \
    \   EXPUNGE (command) ..........................................   37\n      \
    \ EXPUNGE (response) .........................................   57\n       Envelope\
    \ Structure (message attribute) .....................   11\n       FAST (fetch\
    \ item) ..........................................   44\n       FETCH (command)\
    \ ............................................   41\n       FETCH (response) ...........................................\
    \   58\n       FLAGGED (search key) .......................................  \
    \ 39\n       FLAGS (fetch item) .........................................   44\n\
    \       FLAGS (fetch result) .......................................   62\n  \
    \     FLAGS (response) ...........................................   56\n    \
    \   FLAGS <flag list> (store command data item) ................   45\n      \
    \ FLAGS.SILENT <flag list> (store command data item) .........   45\n       FROM\
    \ <string> (search key) .................................   39\n       FULL (fetch\
    \ item) ..........................................   44\n       Flags (message\
    \ attribute) ..................................    9\n       HEADER (part specifier)\
    \ ....................................   41\n       HEADER <field-name> <string>\
    \ (search key) ..................   39\n       HEADER.FIELDS <header_list> (part\
    \ specifier) ...............   41\n       HEADER.FIELDS.NOT <header_list> (part\
    \ specifier) ...........   41\n       INTERNALDATE (fetch item) ..................................\
    \   44\n       INTERNALDATE (fetch result) ................................  \
    \ 62\n       Internal Date (message attribute) ..........................   10\n\
    \       KEYWORD <flag> (search key) ................................   39\n  \
    \     Keyword (type of flag) .....................................   10\n    \
    \   LARGER <n> (search key) ....................................   39\n      \
    \ LIST (command) .............................................   30\n       LIST\
    \ (response) ............................................   54\n       LOGIN (command)\
    \ ............................................   22\n       LOGOUT (command) ...........................................\
    \   20\n       LSUB (command) .............................................  \
    \ 32\n       LSUB (response) ............................................   55\n\
    \       MAY (specification requirement term) .......................    5\n  \
    \     MESSAGES (status item) .....................................   33\n    \
    \   MIME (part specifier) ......................................   42\n      \
    \ MUST (specification requirement term) ......................    4\n       MUST\
    \ NOT (specification requirement term) ..................    4\n       Message\
    \ Sequence Number (message attribute) ................    9\n       NEW (search\
    \ key) ...........................................   39\n       NEWNAME (response\
    \ code) ....................................   50\n       NO (response) ..............................................\
    \   51\n       NOOP (command) .............................................  \
    \ 19\n       NOT <search-key> (search key) ..............................   39\n\
    \       OK (response) ..............................................   51\n  \
    \     OLD (search key) ...........................................   39\n    \
    \   ON <date> (search key) .....................................   39\n      \
    \ OPTIONAL (specification requirement term) ..................    5\n       OR\
    \ <search-key1> <search-key2> (search key) ................   39\n       PARSE\
    \ (response code) ......................................   50\n       PERMANENTFLAGS\
    \ (response code) .............................   50\n       PREAUTH (response)\
    \ .........................................   52\n       Permanent Flag (class\
    \ of flag) .............................   10\n       READ-ONLY (response code)\
    \ ..................................   50\n       READ-WRITE (response code) .................................\
    \   50\n       RECENT (response) ..........................................  \
    \ 57\n       RECENT (search key) ........................................   39\n\
    \       RECENT (status item) .......................................   33\n  \
    \     RENAME (command) ...........................................   27\n    \
    \   REQUIRED (specification requirement term) ..................    4\n      \
    \ RFC822 (fetch item) ........................................   44\n       RFC822\
    \ (fetch result) ......................................   63\n       RFC822.HEADER\
    \ (fetch item) .................................   44\n       RFC822.HEADER (fetch\
    \ result) ...............................   62\n       RFC822.SIZE (fetch item)\
    \ ...................................   44\n       RFC822.SIZE (fetch result)\
    \ .................................   62\n       RFC822.TEXT (fetch item) ...................................\
    \   44\n       RFC822.TEXT (fetch result) .................................  \
    \ 62\n       SEARCH (command) ...........................................   37\n\
    \       SEARCH (response) ..........................................   55\n  \
    \     SEEN (search key) ..........................................   40\n    \
    \   SELECT (command) ...........................................   23\n      \
    \ SENTBEFORE <date> (search key) .............................   40\n       SENTON\
    \ <date> (search key) .................................   40\n       SENTSINCE\
    \ <date> (search key) ..............................   40\n       SHOULD (specification\
    \ requirement term) ....................    5\n       SHOULD NOT (specification\
    \ requirement term) ................    5\n       SINCE <date> (search key) ..................................\
    \   40\n       SMALLER <n> (search key) ...................................  \
    \ 40\n       STATUS (command) ...........................................   33\n\
    \       STATUS (response) ..........................................   55\n  \
    \     STORE (command) ............................................   45\n    \
    \   SUBJECT <string> (search key) ..............................   40\n      \
    \ SUBSCRIBE (command) ........................................   29\n       Session\
    \ Flag (class of flag) ...............................   10\n       System Flag\
    \ (type of flag) .................................    9\n       TEXT (part specifier)\
    \ ......................................   42\n       TEXT <string> (search key)\
    \ .................................   40\n       TO <string> (search key) ...................................\
    \   40\n       TRYCREATE (response code) ..................................  \
    \ 51\n       UID (command) ..............................................   47\n\
    \       UID (fetch item) ...........................................   44\n  \
    \     UID (fetch result) .........................................   63\n    \
    \   UID <message set> (search key) .............................   40\n      \
    \ UIDNEXT (status item) ......................................   33\n       UIDVALIDITY\
    \ (response code) ................................   51\n       UIDVALIDITY (status\
    \ item) ..................................   34\n       UNANSWERED (search key)\
    \ ....................................   40\n       UNDELETED (search key) .....................................\
    \   40\n       UNDRAFT (search key) .......................................  \
    \ 40\n       UNFLAGGED (search key) .....................................   40\n\
    \       UNKEYWORD <flag> (search key) ..............................   40\n  \
    \     UNSEEN (response code) .....................................   51\n    \
    \   UNSEEN (search key) ........................................   40\n      \
    \ UNSEEN (status item) .......................................   34\n       UNSUBSCRIBE\
    \ (command) ......................................   30\n       Unique Identifier\
    \ (UID) (message attribute) ................    7\n       X<atom> (command) ..........................................\
    \   48\n       [RFC-822] Size (message attribute) .........................  \
    \ 11\n       \\Answered (system flag) ....................................   \
    \ 9\n       \\Deleted (system flag) .....................................    9\n\
    \       \\Draft (system flag) .......................................    9\n \
    \      \\Flagged (system flag) .....................................    9\n  \
    \     \\Marked (mailbox name attribute) ...........................   54\n   \
    \    \\Noinferiors (mailbox name attribute) ......................   54\n    \
    \   \\Noselect (mailbox name attribute) .........................   54\n     \
    \  \\Recent (system flag) ......................................   10\n      \
    \ \\Seen (system flag) ........................................    9\n       \\\
    Unmarked (mailbox name attribute) .........................   54\n"
